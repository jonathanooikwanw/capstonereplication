{"rnn": [], "rnn.LSTMCell.__init__": ["torch.nn.Linear", "<builtin>.super", "torch.nn.quantized.FloatFunctional"], "<builtin>.super": [], "torch.nn.Linear": [], "torch.nn.quantized.FloatFunctional": [], "rnn.LSTMCell.forward": ["torch.sigmoid", "rnn.LSTMCell.initialize_hidden", "torch.tanh"], "rnn.LSTMCell.initialize_hidden": ["torch.zeros", "torch.quantize_per_tensor"], "torch.sigmoid": [], "torch.tanh": [], "torch.zeros": [], "torch.quantize_per_tensor": [], "rnn.LSTMCell._get_name": [], "rnn.LSTMCell.from_params": ["torch.nn.Parameter", "rnn.LSTMCell.__init__"], "torch.nn.Parameter": [], "rnn.LSTMCell.from_float": ["<builtin>.type", "rnn.LSTMCell.from_params", "<builtin>.hasattr"], "<builtin>.type": [], "<builtin>.hasattr": [], "rnn._LSTMSingleLayer.__init__": ["<builtin>.super", "rnn.LSTMCell.__init__"], "rnn._LSTMSingleLayer.forward": ["torch.stack", "rnn.LSTMCell.__init__"], "torch.stack": [], "rnn._LSTMSingleLayer.from_params": ["rnn.LSTMCell.from_params", "rnn._LSTMSingleLayer.__init__"], "rnn._LSTMLayer.__init__": ["<builtin>.super", "rnn._LSTMSingleLayer.__init__"], "rnn._LSTMLayer.forward": ["torch.stack", "rnn._LSTMSingleLayer.__init__", "torch.cat"], "torch.cat": [], "rnn._LSTMLayer.from_float": ["<builtin>.getattr", "rnn._LSTMSingleLayer.from_params", "<builtin>.hasattr", "rnn._LSTMLayer.__init__"], "<builtin>.getattr": [], "rnn._LSTMLayer.weight_ih": [], "rnn._LSTMLayer.weight_hh": [], "rnn._LSTMLayer.bias_ih": [], "rnn._LSTMLayer.bias_hh": [], "rnn._LSTMLayer.weight_ih_reverse": [], "rnn._LSTMLayer.weight_hh_reverse": [], "rnn._LSTMLayer.bias_ih_reverse": [], "rnn._LSTMLayer.bias_hh_reverse": [], "rnn.LSTM.__init__": ["<builtin>.float", "warnings.warn", "<builtin>.range", "<builtin>.isinstance", "<builtin>.super", "torch.nn.ModuleList", "<builtin>.ValueError", "rnn._LSTMLayer.__init__"], "<builtin>.float": [], "<builtin>.isinstance": [], "<builtin>.ValueError": [], "warnings.warn": [], "<builtin>.range": [], "torch.nn.ModuleList": [], "rnn.LSTM.forward": ["<builtin>.range", "<builtin>.isinstance", "torch.stack", "torch.zeros", "torch.quantize_per_tensor", "torch.jit._unwrap_optional"], "torch.jit._unwrap_optional": [], "rnn.LSTM._get_name": [], "rnn.LSTM.from_float": ["<builtin>.range", "<builtin>.isinstance", "torch.quantization.prepare", "rnn._LSTMLayer.from_float", "<builtin>.getattr", "rnn.LSTM.__init__", "<builtin>.hasattr"], "torch.quantization.prepare": [], "rnn.LSTM.from_observed": ["torch.quantization.convert"], "torch.quantization.convert": []}