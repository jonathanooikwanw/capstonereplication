{"data_parallel": [], "data_parallel._check_balance": ["torch._utils._get_devices_properties", "torch._utils._get_device_index", "data_parallel._check_balance.warn_imbalance"], "torch._utils._get_device_index": [], "torch._utils._get_devices_properties": [], "data_parallel._check_balance.warn_imbalance": ["warnings.warn", "<builtin>.max", "operator.itemgetter", "<builtin>.min", "data_parallel._check_balance.<lambda1>", "<builtin>.enumerate", "data_parallel._check_balance.<lambda2>"], "data_parallel._check_balance.<lambda1>": [], "data_parallel._check_balance.<lambda2>": [], "<builtin>.enumerate": [], "operator.itemgetter": [], "<builtin>.min": [], "<builtin>.max": [], "warnings.warn": [], "data_parallel.DataParallel.__init__": ["data_parallel._check_balance", "torch._utils._get_device_index", "<builtin>.super", "<builtin>.len", "torch._utils._get_available_device_type", "torch.device", "torch._utils._get_all_device_indices"], "<builtin>.super": [], "torch._utils._get_available_device_type": [], "torch._utils._get_all_device_indices": [], "torch.device": [], "<builtin>.len": [], "data_parallel.DataParallel.forward": ["torch.autograd.profiler.record_function", "data_parallel.DataParallel.scatter", "data_parallel.DataParallel.gather", "data_parallel.DataParallel.replicate", "data_parallel.DataParallel.parallel_apply", "<builtin>.RuntimeError", "<builtin>.len", "itertools.chain"], "torch.autograd.profiler.record_function": [], "itertools.chain": [], "<builtin>.RuntimeError": [], "data_parallel.DataParallel.scatter": ["scatter_gather.scatter_kwargs"], "data_parallel.DataParallel.replicate": ["torch.is_grad_enabled", "data_parallel.DataParallel.replicate"], "data_parallel.DataParallel.parallel_apply": ["data_parallel.DataParallel.parallel_apply", "<builtin>.len"], "data_parallel.DataParallel.gather": ["data_parallel.DataParallel.gather"], "torch.is_grad_enabled": [], "scatter_gather.scatter_kwargs": [], "data_parallel.data_parallel": ["replicate.replicate", "itertools.chain", "scatter_gather.gather", "torch._utils._get_device_index", "parallel_apply.parallel_apply", "<builtin>.RuntimeError", "scatter_gather.scatter_kwargs", "torch._utils._get_available_device_type", "torch.device", "<builtin>.len", "torch._utils._get_all_device_indices", "<builtin>.isinstance"], "<builtin>.isinstance": [], "replicate.replicate": [], "parallel_apply.parallel_apply": [], "scatter_gather.gather": []}