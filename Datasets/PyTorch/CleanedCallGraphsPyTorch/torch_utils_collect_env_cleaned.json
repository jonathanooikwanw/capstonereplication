{"collect_env": ["collections.namedtuple", "collect_env.main"], "collections.namedtuple": [], "collect_env.run": ["subprocess.Popen", "collect_env.get_platform", "locale.getpreferredencoding"], "subprocess.Popen": [], "collect_env.get_platform": ["sys.platform.startswith"], "locale.getpreferredencoding": [], "collect_env.run_and_read_all": ["collect_env.run"], "collect_env.run_and_parse_first_match": ["re.search", "collect_env.run"], "re.search": [], "collect_env.run_and_return_first_line": [], "collect_env.get_conda_packages": ["os.path.join", "re.sub", "collect_env.run_and_read_all", "re.compile", "os.environ.get", "collect_env.get_platform"], "os.environ.get": [], "os.path.join": [], "re.compile": [], "re.sub": [], "collect_env.get_gcc_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_clang_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_cmake_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_nvidia_driver_version": ["collect_env.get_platform", "collect_env.run_and_parse_first_match", "collect_env.get_nvidia_smi"], "collect_env.get_nvidia_smi": ["os.environ.get", "collect_env.get_platform", "os.path.join", "os.path.exists"], "collect_env.get_gpu_info": ["torch.cuda.is_available", "<builtin>.hasattr", "torch.cuda.get_device_name", "re.sub", "re.compile", "collect_env.run", "collect_env.get_nvidia_smi", "collect_env.get_platform"], "<builtin>.hasattr": [], "torch.cuda.is_available": [], "torch.cuda.get_device_name": [], "collect_env.get_running_cuda_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_cudnn_version": ["os.path.join", "<builtin>.len", "<builtin>.list", "collect_env.run", "os.path.realpath", "<builtin>.sorted", "os.environ.get", "collect_env.get_platform", "<builtin>.set", "os.path.isfile"], "<builtin>.len": [], "os.path.isfile": [], "os.path.realpath": [], "<builtin>.set": [], "<builtin>.sorted": [], "<builtin>.list": [], "os.path.exists": [], "sys.platform.startswith": [], "collect_env.get_mac_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_windows_version": ["collect_env.run_and_read_all", "os.environ.get", "os.path.join"], "collect_env.get_lsb_version": ["collect_env.run_and_parse_first_match"], "collect_env.check_release_file": ["collect_env.run_and_parse_first_match"], "collect_env.get_os": ["collect_env.get_mac_version", "collect_env.check_release_file", "collect_env.get_windows_version", "platform.machine", "collect_env.get_platform", "collect_env.get_lsb_version"], "platform.machine": [], "collect_env.get_python_platform": ["platform.platform"], "platform.platform": [], "collect_env.get_libc_version": ["collect_env.get_platform", "platform.libc_ver"], "platform.libc_ver": [], "collect_env.get_pip_packages": ["<builtin>.len", "collect_env.get_pip_packages.run_with_pip"], "collect_env.get_pip_packages.run_with_pip": ["collect_env.run_and_read_all", "os.environ.get", "collect_env.get_platform", "os.path.join"], "collect_env.get_cachingallocator_config": ["os.environ.get"], "collect_env.get_env_info": ["<builtin>.hasattr", "sys.version.replace", "torch._C._show_config", "collect_env.get_pip_packages", "collect_env.get_cmake_version", "collect_env.get_os", "collect_env.get_python_platform", "collect_env.get_cudnn_version", "sys.maxsize.bit_length", "collect_env.get_running_cuda_version", "torch.cuda.is_available", "collect_env.get_libc_version", "collect_env.get_clang_version", "collect_env.get_nvidia_driver_version", "<builtin>.str", "collect_env.get_conda_packages", "collect_env.get_gcc_version", "collect_env.get_gpu_info", "collect_env.get_cachingallocator_config"], "<builtin>.str": [], "torch._C._show_config": [], "sys.version.replace": [], "sys.maxsize.bit_length": [], "collect_env.pretty_str": ["torch.cuda.is_available", "collect_env.pretty_str.replace_bools", "collect_env.pretty_str.prepend", "collect_env.pretty_str.replace_if_empty", "collect_env.pretty_str.replace_nones", "collect_env.pretty_str.maybe_start_on_next_line", "<builtin>.all"], "collect_env.pretty_str.replace_nones": [], "collect_env.pretty_str.replace_bools": [], "collect_env.pretty_str.prepend": [], "collect_env.pretty_str.replace_if_empty": ["<builtin>.len"], "collect_env.pretty_str.maybe_start_on_next_line": ["<builtin>.len"], "<builtin>.all": [], "collect_env.get_pretty_env_info": ["collect_env.pretty_str", "collect_env.get_env_info"], "collect_env.main": ["datetime.datetime.fromtimestamp", "<builtin>.hasattr", "<builtin>.print", "os.path.join", "os.path.exists", "collect_env.get_pretty_env_info", "os.listdir", "<builtin>.max", "os.path.getctime"], "<builtin>.print": [], "os.listdir": [], "<builtin>.max": [], "os.path.getctime": [], "datetime.datetime.fromtimestamp": []}