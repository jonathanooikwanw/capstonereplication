{"end_to_end": ["end_to_end.main", "end_to_end.subprocess_main", "end_to_end.parse_args"], "end_to_end.parse_args": ["torch.cuda.device_count", "argparse.ArgumentParser"], "argparse.ArgumentParser": [], "torch.cuda.device_count": [], "end_to_end.construct_stmt_and_label": ["<builtin>.ValueError", "<builtin>.int", "numpy.random.RandomState", "numpy.log2", "numpy.floor", "<builtin>.max"], "numpy.random.RandomState": [], "numpy.log2": [], "numpy.floor": [], "<builtin>.int": [], "<builtin>.max": [], "<builtin>.ValueError": [], "end_to_end.subprocess_main": ["end_to_end.construct_stmt_and_label", "pickle.dump", "<builtin>.enumerate", "<builtin>.open", "torch.utils.benchmark.op_fuzzers.unary.UnaryOpFuzzer", "torch.utils.benchmark.Timer", "<builtin>.print"], "<builtin>.open": [], "torch.utils.benchmark.op_fuzzers.unary.UnaryOpFuzzer": [], "<builtin>.enumerate": [], "torch.utils.benchmark.Timer": [], "<builtin>.print": [], "pickle.dump": [], "end_to_end._main": ["<builtin>.int", "multiprocessing.dummy.Pool", "end_to_end.process_results", "<builtin>.range", "multiprocessing.cpu_count", "<builtin>.print"], "<builtin>.range": [], "multiprocessing.dummy.Pool": [], "multiprocessing.cpu_count": [], "end_to_end.process_results": ["<builtin>.any", "end_to_end.construct_table", "<builtin>.set", "<builtin>.len", "<builtin>.print"], "end_to_end.merge": ["torch.utils.benchmark.Measurement", "<builtin>.len", "<builtin>.all", "itertools.chain", "<builtin>.list"], "<builtin>.all": [], "<builtin>.len": [], "itertools.chain": [], "<builtin>.list": [], "torch.utils.benchmark.Measurement": [], "<builtin>.set": [], "<builtin>.any": [], "end_to_end.construct_table": ["<builtin>.int", "tempfile.mkstemp", "<builtin>.sorted", "<builtin>.len", "<builtin>.zip", "<builtin>.open", "end_to_end.row_str", "<builtin>.print", "textwrap.dedent"], "end_to_end.construct_table.<lambda1>": [], "<builtin>.sorted": [], "<builtin>.zip": [], "tempfile.mkstemp": [], "end_to_end.row_str": ["<builtin>.all", "<builtin>.zip", "<builtin>.str", "<builtin>.range", "<builtin>.abs"], "textwrap.dedent": [], "<builtin>.str": [], "<builtin>.abs": [], "end_to_end.read_results": ["<builtin>.open", "pickle.load"], "pickle.load": [], "end_to_end.run": ["<builtin>.str", "subprocess.run", "os.getenv"], "os.getenv": [], "subprocess.run": [], "end_to_end.test_source": ["<builtin>.ValueError", "end_to_end.run"], "end_to_end.map_fn": ["tempfile.mkstemp", "os.remove", "end_to_end.run", "os.path.exists", "end_to_end.read_results"], "os.path.exists": [], "os.remove": [], "end_to_end.main": ["end_to_end._main", "end_to_end.test_source"]}