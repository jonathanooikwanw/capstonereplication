{"concat_split_op_test": ["unittest.main", "hypothesis.strategies.composite"], "hypothesis.strategies.composite": [], "concat_split_op_test._tensor_splits": ["caffe2.python.hypothesis_test_util.tensor", "<builtin>.sorted", "<builtin>.len", "hypothesis.strategies.integers", "numpy.diff", "hypothesis.strategies.lists", "numpy.ones", "numpy.array", "<builtin>.range"], "caffe2.python.hypothesis_test_util.tensor": [], "<builtin>.len": [], "hypothesis.strategies.integers": [], "numpy.ones": [], "numpy.array": [], "<builtin>.range": [], "hypothesis.strategies.lists": [], "<builtin>.sorted": [], "numpy.diff": [], "concat_split_op_test.TestConcatSplitOps": ["hypothesis.strategies.booleans", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.settings", "caffe2.python.hypothesis_test_util.lengths_tensor", "hypothesis.given", "concat_split_op_test._tensor_splits"], "caffe2.python.serialized_test.serialized_test_util.given": [], "concat_split_op_test.TestConcatSplitOps.test_concat": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.len", "caffe2.python.core.CreateOperator", "<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "caffe2.python.core.CreateOperator": [], "concat_split_op_test.TestConcatSplitOps.test_concat.<lambda1>": ["numpy.concatenate", "numpy.array"], "numpy.concatenate": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks": [], "hypothesis.given": [], "hypothesis.settings": [], "concat_split_op_test.TestConcatSplitOps.test_concat_add_axis": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.len", "caffe2.python.core.CreateOperator", "<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "concat_split_op_test.TestConcatSplitOps.test_concat_add_axis.<lambda1>": ["numpy.concatenate", "numpy.array", "<builtin>.len", "numpy.expand_dims"], "numpy.expand_dims": [], "hypothesis.strategies.booleans": [], "concat_split_op_test.TestConcatSplitOps.test_split": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.concatenate", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "<builtin>.dict", "<builtin>.range"], "<builtin>.dict": [], "concat_split_op_test.TestConcatSplitOps.test_split.split_ref": ["numpy.arange", "numpy.cumsum", "<builtin>.len", "<builtin>.list", "numpy.array", "<builtin>.range"], "<builtin>.list": [], "numpy.cumsum": [], "numpy.arange": [], "caffe2.python.hypothesis_test_util.lengths_tensor": [], "concat_split_op_test.TestConcatSplitOps.test_split_by_lengths": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.sum", "concat_split_op_test.TestConcatSplitOps.test_split_by_lengths._find_factor_simple", "caffe2.python.core.CreateOperator", "numpy.array", "<builtin>.range"], "concat_split_op_test.TestConcatSplitOps.test_split_by_lengths._find_factor_simple": [], "<builtin>.sum": [], "concat_split_op_test.TestConcatSplitOps.test_split_by_lengths.split_by_lengths_ref": ["numpy.arange", "numpy.cumsum", "<builtin>.list", "numpy.array", "<builtin>.range"], "unittest.main": []}