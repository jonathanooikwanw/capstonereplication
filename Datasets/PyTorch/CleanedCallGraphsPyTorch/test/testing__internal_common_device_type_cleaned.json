{"common_device_type": ["runpy.run_path", "<builtin>.globals", "collections.namedtuple", "os.getenv", "os.environ.get", "common_device_type.get_device_type_test_bases"], "common_device_type._dtype_name": ["<builtin>.str"], "<builtin>.str": [], "common_device_type._dtype_test_suffix": ["<builtin>.isinstance", "<builtin>.len", "common_device_type._dtype_name"], "<builtin>.isinstance": [], "<builtin>.len": [], "common_device_type._update_param_kwargs": ["<builtin>.isinstance"], "threading.local": [], "common_device_type.DeviceTypeTestBase": ["threading.local"], "common_device_type.DeviceTypeTestBase.precision": [], "common_device_type.DeviceTypeTestBase.rel_tol": [], "common_device_type.DeviceTypeTestBase.get_primary_device": [], "common_device_type.DeviceTypeTestBase.get_all_devices": ["common_device_type.DeviceTypeTestBase.get_primary_device"], "common_device_type.DeviceTypeTestBase._get_dtypes": ["<builtin>.hasattr"], "<builtin>.hasattr": [], "common_device_type.DeviceTypeTestBase._get_precision_override": ["<builtin>.hasattr"], "common_device_type.DeviceTypeTestBase._get_tolerance_override": ["<builtin>.hasattr"], "common_device_type.DeviceTypeTestBase._apply_precision_override_for_test": ["common_device_type.DeviceTypeTestBase._get_tolerance_override", "common_device_type.DeviceTypeTestBase._get_precision_override"], "common_device_type.DeviceTypeTestBase.instantiate_test": ["common_device_type._update_param_kwargs", "common_device_type.DeviceTypeTestBase._get_dtypes", "<builtin>.hasattr", "common_device_type._dtype_test_suffix", "<builtin>.tuple", "common_device_type.DeviceTypeTestBase.instantiate_test.instantiate_test_helper"], "common_device_type.DeviceTypeTestBase.instantiate_test.instantiate_test_helper": ["functools.wraps", "<builtin>.hasattr", "<builtin>.setattr"], "functools.wraps": [], "common_device_type.DeviceTypeTestBase.instantiate_test.instantiate_test_helper.instantiated_test": ["common_device_type._update_param_kwargs", "inspect.signature", "common_device_type.DeviceTypeTestBase.get_primary_device", "<builtin>.hasattr", "common_device_type.DeviceTypeTestBase.get_all_devices"], "inspect.signature": [], "<builtin>.setattr": [], "<builtin>.tuple": [], "common_device_type.DeviceTypeTestBase.run": ["<builtin>.super"], "<builtin>.super": [], "common_device_type.CPUTestBase._should_stop_test_suite": [], "common_device_type.MetaTestBase._should_stop_test_suite": [], "common_device_type.CUDATestBase.has_cudnn": [], "common_device_type.CUDATestBase.get_primary_device": [], "common_device_type.CUDATestBase.get_all_devices": ["torch.cuda.device_count", "common_device_type.CUDATestBase.get_primary_device", "torch.testing._internal.common_utils.TestCase.primary_device.split", "<builtin>.int", "<builtin>.range"], "torch.testing._internal.common_utils.TestCase.primary_device.split": [], "<builtin>.int": [], "torch.cuda.device_count": [], "<builtin>.range": [], "common_device_type.CUDATestBase.setUpClass": ["torch.backends.cudnn.version", "torch.ones", "torch.cuda.current_device", "torch.backends.cudnn.is_acceptable"], "torch.ones": [], "torch.backends.cudnn.is_acceptable": [], "torch.backends.cudnn.version": [], "torch.cuda.current_device": [], "common_device_type.get_device_type_test_bases": ["torch.cuda.is_available", "<builtin>.list"], "<builtin>.list": [], "torch.cuda.is_available": [], "common_device_type.filter_desired_device_types": ["<builtin>.filter", "<builtin>.set", "<builtin>.list"], "<builtin>.set": [], "common_device_type.filter_desired_device_types.<lambda1>": [], "<builtin>.filter": [], "common_device_type.filter_desired_device_types.<lambda2>": [], "os.environ.get": [], "<builtin>.globals": [], "runpy.run_path": [], "os.getenv": [], "common_device_type.instantiate_device_type_tests": ["<builtin>.getattr", "<builtin>.set", "inspect.signature", "copy.deepcopy", "<builtin>.type", "os.getenv", "common_device_type.instantiate_device_type_tests.split_if_not_empty", "<builtin>.len", "common_device_type.filter_desired_device_types", "<builtin>.setattr"], "<builtin>.type": [], "common_device_type.instantiate_device_type_tests.split_if_not_empty": ["<builtin>.len"], "<builtin>.getattr": [], "copy.deepcopy": [], "common_device_type._TestParametrizer._parametrize_test": [], "common_device_type._TestParametrizer.__call__": [], "common_device_type.ops.__init__": ["<builtin>.set"], "common_device_type.ops._parametrize_test": ["torch.testing.get_all_dtypes", "functools.wraps", "common_device_type._update_param_kwargs", "<builtin>.RuntimeError", "<builtin>.set", "common_device_type._dtype_test_suffix", "common_device_type.skipIf.__init__", "<builtin>.print"], "torch.testing.get_all_dtypes": [], "<builtin>.RuntimeError": [], "common_device_type.skipIf.__init__": [], "common_device_type.ops._parametrize_test.test_wrapper": [], "<builtin>.print": [], "common_device_type.skipIf.__call__": ["functools.wraps"], "common_device_type.skipIf.__call__.dep_fn": ["<builtin>.isinstance", "<builtin>.getattr", "unittest.SkipTest"], "unittest.SkipTest": [], "common_device_type.skipCPUIf.__init__": ["<builtin>.super"], "common_device_type.skipCUDAIf.__init__": ["<builtin>.super"], "common_device_type.skipMetaIf.__init__": ["<builtin>.super"], "common_device_type._has_sufficient_memory": ["torch.cuda.is_available", "gc.collect", "psutil.virtual_memory", "unittest.SkipTest", "torch.cuda.empty_cache", "torch.cuda.memory_allocated", "torch.device", "torch.cuda.get_device_properties"], "torch.device": [], "gc.collect": [], "torch.cuda.empty_cache": [], "torch.cuda.get_device_properties": [], "torch.cuda.memory_allocated": [], "psutil.virtual_memory": [], "common_device_type.largeTensorTest": ["<builtin>.isinstance", "<builtin>.int"], "common_device_type.largeTensorTest.inner": ["functools.wraps"], "common_device_type.largeTensorTest.inner.dep_fn": ["common_device_type._has_sufficient_memory", "<builtin>.callable", "unittest.SkipTest"], "<builtin>.callable": [], "common_device_type.expectedFailure.__init__": [], "common_device_type.expectedFailure.__call__": ["functools.wraps"], "common_device_type.expectedFailure.__call__.efail_fn": [], "common_device_type.onlyOn.__init__": [], "common_device_type.onlyOn.__call__": ["functools.wraps"], "common_device_type.onlyOn.__call__.only_fn": ["unittest.SkipTest"], "common_device_type.deviceCountAtLeast.__init__": [], "common_device_type.deviceCountAtLeast.__call__": ["functools.wraps", "<builtin>.hasattr"], "common_device_type.deviceCountAtLeast.__call__.multi_fn": ["unittest.SkipTest", "<builtin>.len"], "common_device_type.onlyOnCPUAndCUDA": ["functools.wraps"], "common_device_type.onlyOnCPUAndCUDA.only_fn": ["unittest.SkipTest"], "common_device_type.precisionOverride.__init__": ["<builtin>.isinstance"], "common_device_type.precisionOverride.__call__": [], "collections.namedtuple": [], "common_device_type.toleranceOverride.__init__": ["<builtin>.isinstance"], "common_device_type.toleranceOverride.__call__": [], "common_device_type.dtypes.__init__": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.all", "<builtin>.len"], "<builtin>.all": [], "common_device_type.dtypes.__call__": ["<builtin>.getattr"], "common_device_type.dtypesIfCPU.__init__": ["<builtin>.super"], "common_device_type.dtypesIfCUDA.__init__": ["<builtin>.super"], "common_device_type.onlyCPU": ["common_device_type.onlyOn.__init__"], "common_device_type.onlyCUDA": ["common_device_type.onlyOn.__init__"], "common_device_type.expectedFailureCUDA": ["common_device_type.expectedFailure.__init__"], "common_device_type.expectedFailureMeta": ["common_device_type.expectedFailure.__init__"], "common_device_type.expectedAlertNondeterministic.__init__": [], "common_device_type.expectedAlertNondeterministic.__call__": ["functools.wraps"], "common_device_type.expectedAlertNondeterministic.__call__.efail_fn": ["torch.testing._internal.common_utils.DeterministicGuard", "<builtin>.str"], "torch.testing._internal.common_utils.DeterministicGuard": [], "common_device_type.expectedAlertNondeterministic.__call__.efail_fn_no_device": ["common_device_type.expectedAlertNondeterministic.__call__.efail_fn"], "common_device_type.skipCPUIfNoLapack": ["common_device_type.skipCPUIf.__init__"], "common_device_type.skipCPUIfNoFFT": ["common_device_type.skipCPUIf.__init__"], "common_device_type.skipCPUIfNoMkl": ["common_device_type.skipCPUIf.__init__"], "common_device_type.skipCUDAIfNoMagma": ["common_device_type.skipCUDAIf.__init__", "torch.testing._internal.common_utils.skipCUDANonDefaultStreamIf"], "torch.testing._internal.common_utils.skipCUDANonDefaultStreamIf": [], "common_device_type.skipCUDAIfNoCusolver": ["torch.testing._internal.common_cuda._get_torch_cuda_version", "common_device_type.skipCUDAIf.__init__"], "torch.testing._internal.common_cuda._get_torch_cuda_version": [], "common_device_type.skipCUDAIfNoMagmaAndNoCusolver": ["torch.testing._internal.common_cuda._get_torch_cuda_version", "common_device_type.skipCUDAIfNoMagma"], "common_device_type.skipCUDAIfRocm": ["common_device_type.skipCUDAIf.__init__"], "common_device_type.skipCUDAIfNotRocm": ["common_device_type.skipCUDAIf.__init__"], "common_device_type.skipCUDAVersionIn": [], "common_device_type.skipCUDAVersionIn.dec_fn": ["functools.wraps"], "common_device_type.skipCUDAVersionIn.dec_fn.wrap_fn": ["torch.testing._internal.common_cuda._get_torch_cuda_version", "unittest.SkipTest"], "common_device_type.skipCUDAIfCudnnVersionLessThan": [], "common_device_type.skipCUDAIfCudnnVersionLessThan.dec_fn": ["functools.wraps"], "common_device_type.skipCUDAIfCudnnVersionLessThan.dec_fn.wrap_fn": ["unittest.SkipTest"], "common_device_type.skipCUDAIfNoCudnn": ["common_device_type.skipCUDAIfCudnnVersionLessThan.dec_fn", "common_device_type.skipCUDAIfCudnnVersionLessThan"], "common_device_type.skipMeta": ["common_device_type.skipMetaIf.__init__"]}