{"benchmark_all_quantized_test": ["benchmark_runner.main"], "benchmark_runner.main": ["benchmark_core.BenchmarkRunner.run", "benchmark_runner.parse_args", "benchmark_core.BenchmarkRunner.__init__"], "pt.qarithmetic_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "operator_benchmark.cross_product_configs": [], "operator_benchmark.op_list": [], "pt.qarithmetic_test._QFunctionalBinaryArithmeticBenchmarkBase.setup": ["torch.nn.quantized.QFunctional", "torch.quantize_per_tensor", "<builtin>.list", "<builtin>.range", "torch.rand"], "torch.nn.quantized.QFunctional": [], "torch.rand": [], "torch.quantize_per_tensor": [], "<builtin>.range": [], "<builtin>.list": [], "pt.qarithmetic_test.QFunctionalBenchmark.init": ["<builtin>.super"], "<builtin>.super": [], "pt.qarithmetic_test.QFunctionalBenchmark.forward": [], "operator_benchmark.generate_pt_tests_from_op_list": [], "pt.qarithmetic_test.QFunctionalScalarBenchmark.init": ["<builtin>.super"], "pt.qarithmetic_test.QFunctionalScalarBenchmark.forward": [], "operator_benchmark": [], "benchmark_test_generator": [], "benchmark_test_generator.generate_pt_test": ["benchmark_core._register_test"], "benchmark_core._register_test": [], "benchmark_test_generator.generate_pt_gradient_test": ["benchmark_core._register_test"], "benchmark_test_generator.generate_pt_tests_from_op_list": ["benchmark_core._register_test"], "benchmark_test_generator.generate_pt_gradient_tests_from_op_list": ["benchmark_core._register_test"], "benchmark_pytorch": [], "TorchBenchmarkBase.__init__": ["<builtin>.super"], "TorchBenchmarkBase._set_backward_test": [], "TorchBenchmarkBase.auto_set": [], "TorchBenchmarkBase.extract_inputs_tuple": ["<builtin>.tuple"], "<builtin>.tuple": [], "benchmark_pytorch.TorchBenchmarkBase": ["torch.jit.export"], "torch.jit.export": [], "TorchBenchmarkBase.get_inputs": [], "TorchBenchmarkBase.forward_impl": ["torch.nn.Module.forward", "TorchBenchmarkBase.get_inputs"], "torch.nn.Module.forward": [], "TorchBenchmarkBase.forward_consume": ["torch.ops.operator_benchmark._consume", "<builtin>.range", "TorchBenchmarkBase.forward_impl"], "torch.ops.operator_benchmark._consume": [], "TorchBenchmarkBase.module_name": [], "TorchBenchmarkBase.set_module_name": [], "TorchBenchmarkBase.test_name": ["TorchBenchmarkBase.module_name", "<builtin>.str", "<builtin>.type", "torch.nn.Module.__class__.__name__.replace", "<builtin>.int"], "<builtin>.type": [], "<builtin>.int": [], "<builtin>.str": [], "torch.nn.Module.__class__.__name__.replace": [], "PyTorchOperatorTestCase.__init__": ["torch.ones"], "torch.ones": [], "PyTorchOperatorTestCase._generate_jit_forward_graph": ["torch.jit.script"], "torch.jit.script": [], "PyTorchOperatorTestCase.run_jit_forward": ["PyTorchOperatorTestCase._generate_jit_forward_graph"], "PyTorchOperatorTestCase._print_per_iter": ["<builtin>.min", "<builtin>.len", "json.dumps", "<builtin>.print", "<builtin>.range"], "<builtin>.len": [], "<builtin>.min": [], "json.dumps": [], "<builtin>.print": [], "PyTorchOperatorTestCase.run_forward": ["torch.cuda.current_device", "torch.cuda.synchronize", "<builtin>.range", "time.time"], "time.time": [], "torch.cuda.current_device": [], "torch.cuda.synchronize": [], "PyTorchOperatorTestCase._output_mean": [], "PyTorchOperatorTestCase.run_backward": ["<builtin>.range"], "benchmark_pytorch.create_pytorch_op_test_case": ["<builtin>.str", "PyTorchOperatorTestCase.__init__"], "benchmark_core": ["collections.namedtuple"], "collections.namedtuple": [], "benchmark_core._create_test": ["<builtin>.str", "ast.literal_eval", "json.dumps", "copy.deepcopy"], "copy.deepcopy": [], "ast.literal_eval": [], "benchmark_core._build_test": ["<builtin>.vars", "benchmark_core._create_test", "copy.deepcopy", "<builtin>.str", "<builtin>.ValueError", "torch.cuda.is_available", "<builtin>.range", "<builtin>.isinstance"], "torch.cuda.is_available": [], "<builtin>.ValueError": [], "<builtin>.vars": [], "<builtin>.isinstance": [], "benchmark_core.BenchmarkRunner.__init__": ["benchmark_utils.get_operator_range"], "benchmark_utils.get_operator_range": ["<builtin>.chr", "<builtin>.all", "<builtin>.set", "<builtin>.ValueError", "<builtin>.len", "<builtin>.range", "<builtin>.ord"], "benchmark_core.BenchmarkRunner._print_header": ["<builtin>.print", "<builtin>.set"], "<builtin>.set": [], "benchmark_core.BenchmarkRunner._print_perf_result": ["<builtin>.print", "<builtin>.range", "json.dumps"], "benchmark_core.BenchmarkRunner._predict_num_iter_needed": [], "benchmark_core.BenchmarkRunner._iteration_result_is_significant": [], "benchmark_core.BenchmarkRunner._launch_forward": ["functools.partial", "timeit.timeit"], "functools.partial": [], "timeit.timeit": [], "benchmark_core.BenchmarkRunner._launch_backward": ["functools.partial", "timeit.timeit"], "benchmark_core.BenchmarkRunner._measure_time": ["benchmark_core.BenchmarkRunner._predict_num_iter_needed", "benchmark_core.BenchmarkRunner._launch_backward", "benchmark_core.BenchmarkRunner._launch_forward", "benchmark_core.BenchmarkRunner._iteration_result_is_significant", "numpy.percentile", "numpy.array", "json.dumps", "<builtin>.print"], "numpy.array": [], "numpy.percentile": [], "benchmark_core.BenchmarkRunner._check_keep": [], "benchmark_core.BenchmarkRunner._check_operator_first_char": [], "benchmark_core.BenchmarkRunner._check_keep_list": ["<builtin>.any"], "<builtin>.any": [], "benchmark_core.BenchmarkRunner._keep_test": ["benchmark_core.BenchmarkRunner._check_keep", "benchmark_core.BenchmarkRunner._check_operator_first_char", "benchmark_core.BenchmarkRunner._check_keep_list", "benchmark_utils.process_arg_list"], "benchmark_utils.process_arg_list": ["<builtin>.len"], "benchmark_core.BenchmarkRunner._print_test_case_info": ["<builtin>.print"], "benchmark_core.BenchmarkRunner.run": ["benchmark_core.BenchmarkRunner._print_test_case_info", "benchmark_core._build_test", "benchmark_core.BenchmarkRunner._print_header", "benchmark_core.BenchmarkRunner._launch_backward", "benchmark_core.BenchmarkRunner._launch_forward", "benchmark_core.BenchmarkRunner._measure_time", "numpy.random.seed", "<builtin>.hash", "benchmark_core.BenchmarkRunner._print_perf_result", "<builtin>.print", "<builtin>.range", "benchmark_core.BenchmarkRunner._keep_test"], "<builtin>.hash": [], "numpy.random.seed": [], "benchmark_utils": [], "benchmark_utils.shape_to_string": ["<builtin>.str"], "benchmark_utils.str2bool": ["<builtin>.isinstance"], "benchmark_utils.numpy_random": ["numpy.random.rand"], "numpy.random.rand": [], "benchmark_utils.set_omp_threads": ["<builtin>.print", "<builtin>.str", "os.environ.get"], "os.environ.get": [], "benchmark_utils.set_mkl_threads": ["<builtin>.print", "<builtin>.str", "os.environ.get"], "benchmark_utils.cross_product": ["itertools.product", "<builtin>.list"], "itertools.product": [], "benchmark_utils.get_n_rand_nums": ["<builtin>.range", "random.seed", "random.sample"], "random.seed": [], "random.sample": [], "benchmark_utils.generate_configs": [], "benchmark_utils.cross_product_configs": ["itertools.product", "<builtin>.list", "benchmark_utils._validate"], "benchmark_utils._validate": [], "benchmark_utils.config_list": ["<builtin>.list", "<builtin>.ValueError", "<builtin>.enumerate", "benchmark_utils.cross_product_configs", "<builtin>.any", "benchmark_utils._validate"], "<builtin>.enumerate": [], "benchmark_utils.attr_probs": [], "benchmark_utils.RandomSample.__init__": [], "benchmark_utils.RandomSample._distribution_func": ["<builtin>.sum"], "<builtin>.sum": [], "benchmark_utils.RandomSample._random_sample": ["<builtin>.len", "bisect.bisect", "random.random", "benchmark_utils.RandomSample._distribution_func"], "random.random": [], "bisect.bisect": [], "benchmark_utils.RandomSample.get_one_set_of_inputs": ["<builtin>.str", "benchmark_utils.RandomSample._random_sample"], "benchmark_utils.random_sample_configs": ["benchmark_utils.RandomSample.get_one_set_of_inputs", "<builtin>.ValueError", "<builtin>.range", "benchmark_utils.RandomSample.__init__"], "benchmark_utils.op_list": ["<builtin>.ValueError", "<builtin>.enumerate"], "benchmark_utils.is_caffe2_enabled": [], "benchmark_utils.is_pytorch_enabled": [], "<builtin>.all": [], "<builtin>.ord": [], "<builtin>.chr": [], "benchmark_runner": ["benchmark_runner.main", "argparse.ArgumentParser"], "argparse.ArgumentParser": [], "benchmark_runner.parse_args": ["benchmark_utils.set_mkl_threads", "benchmark_utils.is_pytorch_enabled", "torch.set_num_threads", "benchmark_utils.set_omp_threads"], "torch.set_num_threads": [], "pt.qinstancenorm_test": ["benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qinstancenorm_test.QInstanceNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qinstancenorm_test.QInstanceNormBenchmark.forward": ["torch.ops.quantized.instance_norm"], "torch.ops.quantized.instance_norm": [], "operator_benchmark.generate_pt_test": [], "pt.qactivation_test": ["torch.nn.ReLU", "operator_benchmark.op_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list"], "torch.nn.ReLU": [], "pt.qactivation_test.QActivationBenchmarkBase._setup": ["<builtin>.list", "<builtin>.range", "torch.quantize_per_tensor", "torch.rand"], "pt.qactivation_test.QActivationBenchmarkBase.init": ["pt.qactivation_test.QActivationBenchmarkBase._setup"], "pt.qactivation_test.QActivationBenchmark.forward": [], "pt.qactivation_test.QActivationScaleZeroPointBenchmark.forward": [], "pt.qlinear_test": ["benchmark_runner.main", "pt.configs.remove_cuda", "operator_benchmark.generate_pt_test"], "pt.qlinear_test._QLinearBenchmarkBase.init": ["torch.tensor", "torch.randn", "torch.quantize_per_tensor"], "torch.tensor": [], "torch.randn": [], "pt.qlinear_test._QLinearBenchmarkBase.forward": [], "pt.qlinear_test.QLinearBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Linear", "<builtin>.super"], "torch.nn.quantized.Linear": [], "pt.qlinear_test.QDynamicLinearBenchmark.init": ["TorchBenchmarkBase.set_module_name", "<builtin>.super", "torch.nn.quantized.dynamic.Linear"], "torch.nn.quantized.dynamic.Linear": [], "pt.configs.remove_cuda": [], "pt.configs": ["operator_benchmark.config_list", "operator_benchmark.cross_product_configs"], "operator_benchmark.config_list": [], "pt.qpool_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qpool_test._QPool2dBenchmarkBase.setup": ["torch.quantize_per_tensor", "torch.rand"], "pt.qpool_test._QPool2dBenchmarkBase.forward": [], "pt.qpool_test.QMaxPool2dBenchmark.init": ["torch.nn.MaxPool2d", "<builtin>.super"], "torch.nn.MaxPool2d": [], "pt.qpool_test.QAvgPool2dBenchmark.init": ["torch.nn.AvgPool2d", "<builtin>.super"], "torch.nn.AvgPool2d": [], "pt.qpool_test.QAdaptiveAvgPool2dBenchmark.init": ["torch.nn.AdaptiveAvgPool2d", "<builtin>.super"], "torch.nn.AdaptiveAvgPool2d": [], "pt.qembedding_pack_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "pt.qembedding_pack_test.EmbeddingBagFloatToFusedBase.init": ["numpy.random.random_sample", "torch.from_numpy"], "numpy.random.random_sample": [], "torch.from_numpy": [], "pt.qembedding_pack_test.EmbeddingBagFloatToFusedBase.forward": [], "pt.qembedding_pack_test.EmbeddingBagFusedToFloatBase.init": ["torch.randn"], "pt.qembedding_pack_test.EmbeddingBagFusedToFloatBase.forward": [], "pt.qcomparators_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "pt.qcomparators_test.QComparatorBenchmark.init": ["<builtin>.list", "<builtin>.range", "torch.quantize_per_tensor", "torch.rand"], "pt.qcomparators_test.QComparatorBenchmark.forward": ["torch.tensor"], "pt.qgroupnorm_test": ["benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qgroupnorm_test.QGroupNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qgroupnorm_test.QGroupNormBenchmark.forward": ["torch.ops.quantized.group_norm"], "torch.ops.quantized.group_norm": [], "pt.qlayernorm_test": ["benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qlayernorm_test.QLayerNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qlayernorm_test.QLayerNormBenchmark.forward": ["torch.ops.quantized.layer_norm"], "torch.ops.quantized.layer_norm": [], "pt.qobserver_test": ["operator_benchmark.op_list", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list"], "pt.qobserver_test.QObserverBenchmark.init": ["torch.rand"], "pt.qobserver_test.QObserverBenchmark.forward": [], "pt.qobserver_test.QObserverBenchmarkCalculateQparams.init": ["torch.rand"], "pt.qobserver_test.QObserverBenchmarkCalculateQparams.forward": [], "pt.quantization_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.op_list", "operator_benchmark.generate_pt_gradient_tests_from_op_list", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list"], "pt.quantization_test.QuantizePerTensorBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Quantize", "torch.nn.quantized.DeQuantize", "torch.rand"], "torch.nn.quantized.Quantize": [], "torch.nn.quantized.DeQuantize": [], "pt.quantization_test.QuantizePerTensorBenchmark.forward": [], "pt.quantization_test.QuantizePerChannelBenchmark.init": ["torch.tensor", "TorchBenchmarkBase.set_module_name", "pt.quantization_test.QuantizePerChannelBenchmark.init.dequant", "torch.quantize_per_channel", "torch.rand"], "pt.quantization_test.QuantizePerChannelBenchmark.init.dequant": [], "torch.quantize_per_channel": [], "pt.quantization_test.QuantizePerChannelBenchmark.forward": ["pt.quantization_test.QuantizePerChannelBenchmark.init.dequant", "torch.quantize_per_channel"], "pt.quantization_test.FakeQuantizeBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.quantization.FakeQuantize", "torch.rand"], "torch.quantization.FakeQuantize": [], "pt.quantization_test.FakeQuantizeBenchmark.forward": [], "pt.quantization_test.fakeQuantizePerTensorLearnableKernel": ["torch._fake_quantize_learnable_per_tensor_affine"], "torch._fake_quantize_learnable_per_tensor_affine": [], "pt.quantization_test.fakeQuantizePerTensorOriginalKernel": ["torch.fake_quantize_per_tensor_affine"], "torch.fake_quantize_per_tensor_affine": [], "pt.quantization_test.FakeQuantizePerTensorBaseOpBenchmark.init": ["torch.tensor", "torch.nn.Parameter", "TorchBenchmarkBase.auto_set", "torch.rand"], "torch.nn.Parameter": [], "pt.quantization_test.FakeQuantizePerTensorBaseOpBenchmark.forward": [], "operator_benchmark.generate_pt_gradient_tests_from_op_list": [], "pt.quantization_test.fakeQuantizePerChannelLearnableKernel": ["torch._fake_quantize_learnable_per_channel_affine"], "torch._fake_quantize_learnable_per_channel_affine": [], "pt.quantization_test.fakeQuantizePerChannelOriginalKernel": ["torch.fake_quantize_per_channel_affine"], "torch.fake_quantize_per_channel_affine": [], "pt.quantization_test.FakeQuantizePerChannelOpBenchmark.init": ["torch.zeros", "torch.rand", "TorchBenchmarkBase.auto_set", "torch.ones", "torch.nn.Parameter"], "torch.zeros": [], "pt.quantization_test.FakeQuantizePerChannelOpBenchmark.forward": [], "pt": [], "pt.qrnn_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qrnn_test.LSTMBenchmark.init": ["torch.randn", "torch.nn.Sequential", "TorchBenchmarkBase.set_module_name", "torch.nn.LSTM", "torch.quantization.quantize_dynamic"], "torch.nn.LSTM": [], "torch.nn.Sequential": [], "torch.quantization.quantize_dynamic": [], "pt.qrnn_test.LSTMBenchmark.forward": [], "pt.qunary_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.op_list", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list"], "pt.qunary_test.QUnaryOpBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qunary_test.QUnaryOpBenchmark.forward": [], "pt.qunary_test.QTopkOpBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.quantize_per_tensor", "torch.rand"], "pt.qunary_test.QTopkOpBenchmark.forward": ["torch.topk"], "torch.topk": [], "pt.qconv_test": ["benchmark_runner.main", "pt.configs.remove_cuda", "operator_benchmark.generate_pt_test"], "pt.qconv_test.QConv1dBenchmark.init": ["torch.randn", "torch.quantize_per_tensor", "torch.tensor", "TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Conv1d"], "torch.nn.quantized.Conv1d": [], "pt.qconv_test.QConv1dBenchmark.forward": [], "pt.qconv_test.QConv2dBenchmark.init": ["torch.randn", "torch.quantize_per_tensor", "torch.tensor", "TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Conv2d"], "torch.nn.quantized.Conv2d": [], "pt.qconv_test.QConv2dBenchmark.forward": [], "pt.qtensor_method_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qtensor_method_test._QMethodBenchmarkBase.init": ["<builtin>.list", "<builtin>.range", "torch.quantize_per_tensor", "torch.rand"], "pt.qtensor_method_test.QMethodTensorInputCopyBenchmark.forward": [], "pt.qembeddingbag_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test"], "pt.qembeddingbag_test.QEmbeddingBagBenchmark.init": ["torch.LongTensor", "torch.tensor", "TorchBenchmarkBase.set_module_name", "numpy.random.randint", "numpy.random.seed", "torch.nn.quantized.EmbeddingBag", "torch.cat"], "torch.nn.quantized.EmbeddingBag": [], "numpy.random.randint": [], "torch.LongTensor": [], "torch.cat": [], "pt.qembeddingbag_test.QEmbeddingBagBenchmark.forward": [], "pt.qcat_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qcat_test.QCatBenchmark.init": ["torch.nn.quantized.QFunctional", "torch.quantize_per_tensor", "TorchBenchmarkBase.set_module_name", "<builtin>.tuple", "<builtin>.range", "torch.rand"], "pt.qcat_test.QCatBenchmark.forward": [], "pt.qinterpolate_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qinterpolate_test.QInterpolateBenchmark.init": ["torch.quantize_per_tensor", "TorchBenchmarkBase.set_module_name", "<builtin>.list", "<builtin>.range", "torch.rand"], "pt.qinterpolate_test.QInterpolateBenchmark.forward": ["torch.nn.functional.interpolate"], "torch.nn.functional.interpolate": [], "pt.qbatchnorm_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qbatchnorm_test.QBatchNormBenchmark.init": ["pt.qbatchnorm_test.QBatchNormBenchmark._init", "torch.rand", "torch.quantize_per_tensor"], "pt.qbatchnorm_test.QBatchNormBenchmark._init": [], "pt.qbatchnorm_test.QBatchNormBenchmark.forward": [], "pt.qbatchnorm_test.QBatchNorm1dBenchmark._init": ["TorchBenchmarkBase.set_module_name", "torch.rand", "TorchBenchmarkBase.auto_set"], "pt.qbatchnorm_test.QBatchNorm1dBenchmark.forward": ["torch.ops.quantized.batch_norm1d"], "torch.ops.quantized.batch_norm1d": [], "pt.qbatchnorm_test.QBatchNorm2dBenchmark._init": ["TorchBenchmarkBase.set_module_name", "torch.rand", "TorchBenchmarkBase.auto_set"], "pt.qbatchnorm_test.QBatchNorm2dBenchmark.forward": ["torch.ops.quantized.batch_norm2d"], "torch.ops.quantized.batch_norm2d": []}