{"rnn_cell_test": ["unittest.main", "caffe2.python.workspace.GlobalInit"], "rnn_cell_test.lstm_unit": ["numpy.ones", "caffe2.python.rnn.rnn_cell_test_util.tanh", "caffe2.python.rnn.rnn_cell_test_util.sigmoid"], "numpy.ones": [], "caffe2.python.rnn.rnn_cell_test_util.sigmoid": [], "caffe2.python.rnn.rnn_cell_test_util.tanh": [], "rnn_cell_test.layer_norm_with_scale_and_bias_ref": ["numpy.mean", "numpy.prod", "numpy.sqrt", "numpy.reshape", "numpy.square"], "numpy.prod": [], "numpy.reshape": [], "numpy.mean": [], "numpy.square": [], "numpy.sqrt": [], "rnn_cell_test.layer_norm_lstm_reference": ["rnn_cell_test.lstm_unit", "numpy.dot", "rnn_cell_test.layer_norm_with_scale_and_bias_ref", "<builtin>.range", "numpy.zeros", "<builtin>.print"], "numpy.zeros": [], "<builtin>.range": [], "<builtin>.print": [], "numpy.dot": [], "rnn_cell_test.lstm_reference": ["<builtin>.range", "numpy.dot", "rnn_cell_test.lstm_unit", "numpy.zeros"], "rnn_cell_test.multi_lstm_reference": ["<builtin>.range", "numpy.dot", "<builtin>.len", "rnn_cell_test.lstm_reference"], "<builtin>.len": [], "rnn_cell_test.compute_regular_attention_logits": ["numpy.sum", "numpy.dot", "numpy.tanh"], "numpy.tanh": [], "numpy.sum": [], "rnn_cell_test.compute_recurrent_attention_logits": ["numpy.sum", "numpy.dot", "numpy.tanh"], "rnn_cell_test.compute_dot_attention_logits": ["numpy.sum", "numpy.matmul", "numpy.transpose", "numpy.expand_dims"], "numpy.transpose": [], "numpy.matmul": [], "numpy.expand_dims": [], "rnn_cell_test.compute_coverage_attention_logits": ["numpy.sum", "numpy.dot", "numpy.tanh"], "rnn_cell_test.lstm_with_attention_reference": ["numpy.sum", "rnn_cell_test.compute_regular_attention_logits", "numpy.concatenate", "rnn_cell_test.lstm_unit", "numpy.dot", "numpy.exp", "<builtin>.range", "rnn_cell_test.compute_coverage_attention_logits", "numpy.transpose", "numpy.zeros", "rnn_cell_test.compute_recurrent_attention_logits", "rnn_cell_test.compute_dot_attention_logits"], "numpy.concatenate": [], "numpy.exp": [], "rnn_cell_test.lstm_with_regular_attention_reference": ["rnn_cell_test.lstm_with_attention_reference"], "rnn_cell_test.lstm_with_recurrent_attention_reference": ["rnn_cell_test.lstm_with_attention_reference"], "rnn_cell_test.lstm_with_dot_attention_reference": ["rnn_cell_test.lstm_with_attention_reference"], "rnn_cell_test.lstm_with_dot_attention_reference_same_dim": ["rnn_cell_test.lstm_with_dot_attention_reference"], "rnn_cell_test.lstm_with_dot_attention_reference_different_dim": ["rnn_cell_test.lstm_with_dot_attention_reference"], "rnn_cell_test.lstm_with_coverage_attention_reference": ["rnn_cell_test.lstm_with_attention_reference"], "rnn_cell_test.milstm_reference": ["<builtin>.range", "numpy.dot", "rnn_cell_test.lstm_unit", "numpy.zeros"], "rnn_cell_test.layer_norm_milstm_reference": ["rnn_cell_test.lstm_unit", "numpy.dot", "rnn_cell_test.layer_norm_with_scale_and_bias_ref", "<builtin>.range", "numpy.zeros"], "rnn_cell_test.lstm_input": ["hypothesis.strategies.integers", "hypothesis.strategies.tuples"], "hypothesis.strategies.integers": [], "hypothesis.strategies.tuples": [], "rnn_cell_test.lstm_input.create_input": ["caffe2.python.hypothesis_test_util.arrays", "<builtin>.list"], "<builtin>.list": [], "caffe2.python.hypothesis_test_util.arrays": [], "rnn_cell_test._prepare_attention": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.rnn_cell.MILSTMCell", "caffe2.python.workspace.FeedBlob", "caffe2.python.scope.NameScope", "<builtin>.len", "caffe2.python.rnn_cell.MultiRNNCell", "caffe2.python.rnn_cell.DropoutCell", "<builtin>.enumerate", "<builtin>.range", "rnn_cell_test._prepare_attention.generate_input_state", "caffe2.python.rnn_cell.AttentionCell", "caffe2.python.workspace.RunNetOnce", "numpy.random.randint", "caffe2.python.rnn_cell.UnrolledCell", "<builtin>.print"], "caffe2.python.model_helper.ModelHelper": [], "rnn_cell_test._prepare_attention.generate_input_state": ["numpy.random.random"], "numpy.random.random": [], "<builtin>.enumerate": [], "caffe2.python.workspace.FeedBlob": [], "caffe2.python.scope.NameScope": [], "caffe2.python.rnn_cell.MILSTMCell": [], "caffe2.python.rnn_cell.MultiRNNCell": [], "caffe2.python.rnn_cell.AttentionCell": [], "caffe2.python.rnn_cell.DropoutCell": [], "caffe2.python.rnn_cell.UnrolledCell": [], "caffe2.python.workspace.RunNetOnce": [], "numpy.random.randint": [], "rnn_cell_test.MulCell._apply": ["<builtin>.len"], "rnn_cell_test.MulCell.get_state_names": ["caffe2.python.rnn_cell.RNNCell.scope"], "caffe2.python.rnn_cell.RNNCell.scope": [], "rnn_cell_test.prepare_mul_rnn": ["caffe2.python.rnn_cell.MultiRNNCell", "<builtin>.range", "caffe2.python.rnn_cell.UnrolledCell", "caffe2.python.rnn_cell.RNNCell.__init__", "<builtin>.print"], "caffe2.python.rnn_cell.RNNCell.__init__": [], "caffe2.python.hypothesis_test_util.tensor": [], "rnn_cell_test.RNNCellTest": ["caffe2.python.utils.debug", "hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.strategies.booleans", "rnn_cell_test.lstm_input", "hypothesis.settings", "hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.integers", "unittest.skip", "hypothesis.strategies.lists"], "hypothesis.strategies.sampled_from": [], "hypothesis.given": [], "hypothesis.settings": [], "rnn_cell_test.RNNCellTest.test_unroll_mul": ["rnn_cell_test.prepare_mul_rnn", "caffe2.python.gradient_checker.NetGradientChecker.CompareNets", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.gradient_checker.NetGradientChecker.CompareNets": [], "hypothesis.strategies.floats": [], "hypothesis.strategies.booleans": [], "hypothesis.strategies.lists": [], "caffe2.python.utils.debug": [], "rnn_cell_test.RNNCellTest.test_unroll_lstm": ["<builtin>.zip", "caffe2.python.gradient_checker.NetGradientChecker.CompareNets", "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn", "caffe2.python.workspace.FeedBlob"], "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn": [], "<builtin>.zip": [], "rnn_cell_test.RNNCellTest.test_unroll_attention": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "numpy.random.random", "rnn_cell_test._prepare_attention", "caffe2.python.gradient_checker.NetGradientChecker.CompareNets", "<builtin>.zip", "<builtin>.print"], "caffe2.python.workspace.ResetWorkspace": [], "rnn_cell_test.RNNCellTest.test_layered_lstm": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.RunNetOnce", "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn", "caffe2.python.workspace.FeedBlob"], "rnn_cell_test.RNNCellTest.test_lstm": ["rnn_cell_test.RNNCellTest.lstm_base"], "rnn_cell_test.RNNCellTest.lstm_base": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.list", "caffe2.python.workspace.FetchBlob", "functools.partial", "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertFalse", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.seed"], "rnn_cell_test.RNNCellTest.test_milstm": ["rnn_cell_test.RNNCellTest.lstm_base"], "unittest.skip": [], "rnn_cell_test.RNNCellTest.test_norm_lstm": ["rnn_cell_test.RNNCellTest.lstm_base"], "rnn_cell_test.RNNCellTest.test_norm_milstm": ["rnn_cell_test.RNNCellTest.lstm_base"], "numpy.random.seed": [], "functools.partial": [], "caffe2.python.workspace.FetchBlob": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertFalse": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks": [], "rnn_cell_test.RNNCellTest.test_lstm_extract_predictor_net": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.core.DeviceOption", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "numpy.array", "<builtin>.str", "caffe2.python.workspace.Blobs", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.rnn_cell.LSTM", "caffe2.python.model_helper.ExtractPredictorNet", "numpy.zeros", "caffe2.python.core.DeviceScope", "<builtin>.print"], "caffe2.python.core.DeviceOption": [], "caffe2.python.core.DeviceScope": [], "caffe2.python.rnn_cell.LSTM": [], "caffe2.python.workspace.Blobs": [], "caffe2.python.model_helper.ExtractPredictorNet": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue": [], "numpy.array": [], "<builtin>.str": [], "caffe2.python.workspace.CreateNet": [], "caffe2.python.workspace.RunNet": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual": [], "caffe2.proto.caffe2_pb2.NetDef": [], "rnn_cell_test.RNNCellTest.test_lstm_params": ["caffe2.python.rnn_cell.LSTM", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotEqual", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotEqual": [], "rnn_cell_test.RNNCellTest.test_milstm_params": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotEqual", "caffe2.python.rnn_cell.MILSTM", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.rnn_cell.MILSTM": [], "rnn_cell_test.RNNCellTest.test_layer_norm_lstm_params": ["caffe2.python.rnn_cell.LayerNormLSTM", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotEqual", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.rnn_cell.LayerNormLSTM": [], "rnn_cell_test.RNNCellTest.test_lstm_with_regular_attention": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.lstm_with_attention": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.list", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.enumerate", "numpy.random.randn", "caffe2.python.workspace.RunNetOnce", "numpy.zeros", "numpy.random.randint", "caffe2.python.core.DeviceScope", "caffe2.python.model_helper.ModelHelper"], "rnn_cell_test.RNNCellTest.test_lstm_with_recurrent_attention": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.test_lstm_with_dot_attention_same_dim": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.test_lstm_with_dot_attention_different_dim": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.test_lstm_with_coverage_attention": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "numpy.random.randn": [], "rnn_cell_test.RNNCellTest.test_lstm_unit_recurrent_network": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "hypothesis.assume", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.seed", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.randint", "caffe2.python.core.CreateOperator"], "hypothesis.assume": [], "caffe2.python.core.CreateOperator": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks": [], "rnn_cell_test.RNNCellTest.test_lstm_unit_recurrent_network.lstm_unit_reference": ["rnn_cell_test.lstm_unit"], "rnn_cell_test.RNNCellTest.test_multi_lstm": ["<builtin>.str", "caffe2.python.gradient_checker.NetGradientChecker.Check", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.rnn_cell.LSTM", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "<builtin>.range", "rnn_cell_test.multi_lstm_reference", "numpy.random.randn", "caffe2.python.workspace.RunNetOnce", "numpy.random.randint", "numpy.abs", "caffe2.python.model_helper.ModelHelper"], "numpy.abs": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual": [], "caffe2.python.gradient_checker.NetGradientChecker.Check": [], "caffe2.python.workspace.GlobalInit": [], "unittest.main": []}