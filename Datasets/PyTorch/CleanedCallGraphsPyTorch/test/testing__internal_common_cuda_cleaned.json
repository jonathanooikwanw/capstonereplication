{"common_cuda": ["torch.cuda.get_device_capability", "torch.version.cuda.startswith", "contextlib.contextmanager", "setuptools.distutils.version.LooseVersion", "torch.backends.cudnn.version", "torch.ones", "torch.tensor", "torch.cuda.is_available", "torch.device", "torch.cuda.device_count", "torch.backends.cudnn.is_acceptable"], "torch.cuda.is_available": [], "torch.cuda.device_count": [], "torch.device": [], "torch.tensor": [], "torch.backends.cudnn.is_acceptable": [], "torch.backends.cudnn.version": [], "setuptools.distutils.version.LooseVersion": [], "torch.version.cuda.startswith": [], "torch.cuda.get_device_capability": [], "torch.ones": [], "common_cuda.initialize_cuda_context_rng": ["torch.randn", "<builtin>.range", "torch.cuda.device_count"], "<builtin>.range": [], "torch.randn": [], "common_cuda.tf32_is_not_fp32": ["<builtin>.int", "torch.cuda.get_device_properties", "torch.cuda.is_available", "torch.version.cuda.split", "torch.cuda.current_device"], "torch.cuda.current_device": [], "torch.cuda.get_device_properties": [], "torch.version.cuda.split": [], "<builtin>.int": [], "contextlib.contextmanager": [], "common_cuda.tf32_off": ["torch.backends.cudnn.flags"], "torch.backends.cudnn.flags": [], "common_cuda.tf32_on": ["torch.backends.cudnn.flags"], "common_cuda.tf32_on_and_off": [], "common_cuda.tf32_on_and_off.with_tf32_disabled": ["common_cuda.tf32_off", "common_cuda.tf32_on_and_off.wrapper.wrapped.<lambda1>"], "common_cuda.tf32_on_and_off.wrapper.wrapped.<lambda1>": [], "common_cuda.tf32_on_and_off.with_tf32_enabled": ["common_cuda.tf32_on_and_off.wrapper.wrapped.<lambda2>", "common_cuda.tf32_on"], "common_cuda.tf32_on_and_off.wrapper.wrapped.<lambda2>": [], "common_cuda.tf32_on_and_off.wrapper": ["functools.wraps", "inspect.signature", "<builtin>.tuple"], "inspect.signature": [], "<builtin>.tuple": [], "functools.wraps": [], "common_cuda.tf32_on_and_off.wrapper.wrapped": ["common_cuda.tf32_on_and_off.with_tf32_enabled", "common_cuda.tf32_on_and_off.with_tf32_disabled", "torch.device", "<builtin>.zip", "common_cuda.tf32_is_not_fp32"], "<builtin>.zip": [], "common_cuda.with_tf32_off": ["functools.wraps"], "common_cuda.with_tf32_off.wrapped": ["common_cuda.tf32_off"], "common_cuda._get_torch_cuda_version": ["<builtin>.int", "<builtin>.str", "<builtin>.tuple"], "<builtin>.str": []}