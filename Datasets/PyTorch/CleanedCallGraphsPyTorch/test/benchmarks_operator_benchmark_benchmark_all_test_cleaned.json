{"benchmark_all_test": ["benchmark_runner.main"], "benchmark_runner.main": ["benchmark_core.BenchmarkRunner.__init__", "benchmark_core.BenchmarkRunner.run", "benchmark_runner.parse_args"], "benchmark_all_other_test": ["benchmark_runner.main"], "pt.gather_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "operator_benchmark.config_list": [], "operator_benchmark.cross_product_configs": [], "pt.gather_test.GatherBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.rand", "torch.tensor", "numpy.random.randint", "numpy.random.seed"], "numpy.random.seed": [], "torch.rand": [], "numpy.random.randint": [], "torch.tensor": [], "TorchBenchmarkBase.set_module_name": [], "pt.gather_test.GatherBenchmark.forward": ["torch.gather"], "torch.gather": [], "operator_benchmark.generate_pt_test": [], "operator_benchmark": [], "benchmark_pytorch": [], "TorchBenchmarkBase.__init__": ["<builtin>.super"], "<builtin>.super": [], "TorchBenchmarkBase._set_backward_test": [], "TorchBenchmarkBase.auto_set": [], "TorchBenchmarkBase.extract_inputs_tuple": ["<builtin>.tuple"], "<builtin>.tuple": [], "benchmark_pytorch.TorchBenchmarkBase": ["torch.jit.export"], "torch.jit.export": [], "TorchBenchmarkBase.get_inputs": [], "TorchBenchmarkBase.forward_impl": ["TorchBenchmarkBase.get_inputs", "torch.nn.Module.forward"], "torch.nn.Module.forward": [], "TorchBenchmarkBase.forward_consume": ["TorchBenchmarkBase.forward_impl", "torch.ops.operator_benchmark._consume", "<builtin>.range"], "<builtin>.range": [], "torch.ops.operator_benchmark._consume": [], "TorchBenchmarkBase.module_name": [], "TorchBenchmarkBase.test_name": ["torch.nn.Module.__class__.__name__.replace", "<builtin>.str", "TorchBenchmarkBase.module_name", "<builtin>.type", "<builtin>.int"], "<builtin>.type": [], "<builtin>.int": [], "<builtin>.str": [], "torch.nn.Module.__class__.__name__.replace": [], "PyTorchOperatorTestCase.__init__": ["torch.ones"], "torch.ones": [], "PyTorchOperatorTestCase._generate_jit_forward_graph": ["torch.jit.script"], "torch.jit.script": [], "PyTorchOperatorTestCase.run_jit_forward": ["PyTorchOperatorTestCase._generate_jit_forward_graph"], "PyTorchOperatorTestCase._print_per_iter": ["json.dumps", "<builtin>.print", "<builtin>.min", "<builtin>.range", "<builtin>.len"], "<builtin>.len": [], "<builtin>.min": [], "json.dumps": [], "<builtin>.print": [], "PyTorchOperatorTestCase.run_forward": ["torch.cuda.synchronize", "torch.cuda.current_device", "time.time", "<builtin>.range"], "time.time": [], "torch.cuda.current_device": [], "torch.cuda.synchronize": [], "PyTorchOperatorTestCase._output_mean": [], "PyTorchOperatorTestCase.run_backward": ["<builtin>.range"], "benchmark_pytorch.create_pytorch_op_test_case": ["<builtin>.str", "PyTorchOperatorTestCase.__init__"], "benchmark_test_generator": [], "benchmark_test_generator.generate_pt_test": ["benchmark_core._register_test"], "benchmark_core._register_test": [], "benchmark_test_generator.generate_pt_gradient_test": ["benchmark_core._register_test"], "benchmark_test_generator.generate_pt_tests_from_op_list": ["benchmark_core._register_test"], "benchmark_test_generator.generate_pt_gradient_tests_from_op_list": ["benchmark_core._register_test"], "benchmark_core": ["collections.namedtuple"], "collections.namedtuple": [], "benchmark_core._create_test": ["ast.literal_eval", "<builtin>.str", "copy.deepcopy", "json.dumps"], "copy.deepcopy": [], "ast.literal_eval": [], "benchmark_core._build_test": ["<builtin>.isinstance", "<builtin>.str", "torch.cuda.is_available", "<builtin>.vars", "<builtin>.ValueError", "<builtin>.range", "benchmark_core._create_test", "copy.deepcopy"], "torch.cuda.is_available": [], "<builtin>.ValueError": [], "<builtin>.vars": [], "<builtin>.isinstance": [], "benchmark_core.BenchmarkRunner.__init__": ["benchmark_utils.get_operator_range"], "benchmark_utils.get_operator_range": ["<builtin>.set", "<builtin>.chr", "<builtin>.ord", "<builtin>.ValueError", "<builtin>.range", "<builtin>.all", "<builtin>.len"], "benchmark_core.BenchmarkRunner._print_header": ["<builtin>.print", "<builtin>.set"], "<builtin>.set": [], "benchmark_core.BenchmarkRunner._print_perf_result": ["<builtin>.print", "json.dumps", "<builtin>.range"], "benchmark_core.BenchmarkRunner._predict_num_iter_needed": [], "benchmark_core.BenchmarkRunner._iteration_result_is_significant": [], "benchmark_core.BenchmarkRunner._launch_forward": ["timeit.timeit", "functools.partial"], "functools.partial": [], "timeit.timeit": [], "benchmark_core.BenchmarkRunner._launch_backward": ["timeit.timeit", "functools.partial"], "benchmark_core.BenchmarkRunner._measure_time": ["json.dumps", "benchmark_core.BenchmarkRunner._iteration_result_is_significant", "numpy.percentile", "<builtin>.print", "benchmark_core.BenchmarkRunner._launch_backward", "numpy.array", "benchmark_core.BenchmarkRunner._predict_num_iter_needed", "benchmark_core.BenchmarkRunner._launch_forward"], "numpy.array": [], "numpy.percentile": [], "benchmark_core.BenchmarkRunner._check_keep": [], "benchmark_core.BenchmarkRunner._check_operator_first_char": [], "benchmark_core.BenchmarkRunner._check_keep_list": ["<builtin>.any"], "<builtin>.any": [], "benchmark_core.BenchmarkRunner._keep_test": ["benchmark_core.BenchmarkRunner._check_keep", "benchmark_utils.process_arg_list", "benchmark_core.BenchmarkRunner._check_operator_first_char", "benchmark_core.BenchmarkRunner._check_keep_list"], "benchmark_utils.process_arg_list": ["<builtin>.len"], "benchmark_core.BenchmarkRunner._print_test_case_info": ["<builtin>.print"], "benchmark_core.BenchmarkRunner.run": ["benchmark_core.BenchmarkRunner._print_header", "benchmark_core.BenchmarkRunner._measure_time", "<builtin>.hash", "<builtin>.print", "benchmark_core.BenchmarkRunner._launch_backward", "benchmark_core._build_test", "benchmark_core.BenchmarkRunner._print_test_case_info", "<builtin>.range", "benchmark_core.BenchmarkRunner._keep_test", "benchmark_core.BenchmarkRunner._launch_forward", "numpy.random.seed", "benchmark_core.BenchmarkRunner._print_perf_result"], "<builtin>.hash": [], "benchmark_utils": [], "benchmark_utils.shape_to_string": ["<builtin>.str"], "benchmark_utils.str2bool": ["<builtin>.isinstance"], "benchmark_utils.numpy_random": ["numpy.random.rand"], "numpy.random.rand": [], "benchmark_utils.set_omp_threads": ["os.environ.get", "<builtin>.print", "<builtin>.str"], "os.environ.get": [], "benchmark_utils.set_mkl_threads": ["os.environ.get", "<builtin>.print", "<builtin>.str"], "benchmark_utils.cross_product": ["itertools.product", "<builtin>.list"], "itertools.product": [], "<builtin>.list": [], "benchmark_utils.get_n_rand_nums": ["random.sample", "random.seed", "<builtin>.range"], "random.seed": [], "random.sample": [], "benchmark_utils.generate_configs": [], "benchmark_utils.cross_product_configs": ["itertools.product", "benchmark_utils._validate", "<builtin>.list"], "benchmark_utils._validate": [], "benchmark_utils.config_list": ["benchmark_utils._validate", "<builtin>.list", "<builtin>.any", "<builtin>.enumerate", "<builtin>.ValueError", "benchmark_utils.cross_product_configs"], "<builtin>.enumerate": [], "benchmark_utils.attr_probs": [], "benchmark_utils.RandomSample.__init__": [], "benchmark_utils.RandomSample._distribution_func": ["<builtin>.sum"], "<builtin>.sum": [], "benchmark_utils.RandomSample._random_sample": ["bisect.bisect", "random.random", "<builtin>.len", "benchmark_utils.RandomSample._distribution_func"], "random.random": [], "bisect.bisect": [], "benchmark_utils.RandomSample.get_one_set_of_inputs": ["<builtin>.str", "benchmark_utils.RandomSample._random_sample"], "benchmark_utils.random_sample_configs": ["benchmark_utils.RandomSample.get_one_set_of_inputs", "<builtin>.range", "<builtin>.ValueError", "benchmark_utils.RandomSample.__init__"], "benchmark_utils.op_list": ["<builtin>.enumerate", "<builtin>.ValueError"], "benchmark_utils.is_caffe2_enabled": [], "benchmark_utils.is_pytorch_enabled": [], "<builtin>.all": [], "<builtin>.ord": [], "<builtin>.chr": [], "benchmark_runner": ["argparse.ArgumentParser", "benchmark_runner.main"], "argparse.ArgumentParser": [], "benchmark_runner.parse_args": ["benchmark_utils.set_mkl_threads", "benchmark_utils.is_pytorch_enabled", "benchmark_utils.set_omp_threads", "torch.set_num_threads"], "torch.set_num_threads": [], "pt.hardsigmoid_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "operator_benchmark.op_list": [], "pt.hardsigmoid_test.HardsigmoidBenchmark.init": ["torch.rand"], "pt.hardsigmoid_test.HardsigmoidBenchmark.forward": [], "operator_benchmark.generate_pt_tests_from_op_list": [], "pt.cat_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.cat_test.<list8>.<list4>.<list1>.<lambda1>": [], "random.randint": [], "pt.cat_test.<lambda1>": ["random.randint"], "pt.cat_test.<list8>.<list5>.<list1>.<lambda1>": [], "pt.cat_test.<list8>.<list6>.<list1>.<lambda1>": [], "pt.cat_test.<list8>.<list7>.<list1>.<lambda1>": [], "pt.cat_test.<list8>.<list8>.<list1>.<lambda1>": [], "pt.cat_test.<list8>.<list9>.<list1>.<lambda1>": [], "pt.cat_test.<list14>.<list1>.<list1>.<lambda1>": [], "pt.cat_test.<list14>.<list2>.<list1>.<lambda1>": [], "pt.cat_test.<list14>.<list3>.<list1>.<lambda1>": [], "pt.cat_test.<list14>.<list4>.<list1>.<lambda1>": [], "pt.cat_test.CatBenchmark.init": ["TorchBenchmarkBase.set_module_name", "random.seed", "torch.rand", "<builtin>.type", "<builtin>.range", "torch.empty", "<builtin>.callable"], "<builtin>.callable": [], "torch.empty": [], "pt.cat_test.CatBenchmark.forward": ["torch.cat"], "torch.cat": [], "pt.nan_to_num_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "<builtin>.range", "operator_benchmark.cross_product_configs"], "pt.nan_to_num_test.ReplaceNaNBenchmark.init": ["<builtin>.float", "torch.randn", "TorchBenchmarkBase.set_module_name"], "torch.randn": [], "<builtin>.float": [], "pt.nan_to_num_test.ReplaceNaNBenchmark.forward": [], "pt.pool_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.pool_test.Pool1dBenchmark.init": ["torch.rand"], "pt.pool_test.Pool1dBenchmark.forward": [], "pt.pool_test.<list25>.<list3>.<lambda1>": [], "torch.nn.AdaptiveMaxPool2d": [], "pt.pool_test.<lambda1>": ["torch.nn.AdaptiveMaxPool3d", "torch.nn.FractionalMaxPool3d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.FractionalMaxPool2d"], "pt.pool_test.<list25>.<list4>.<lambda1>": [], "torch.nn.FractionalMaxPool2d": [], "pt.pool_test.Pool2dBenchmark.init": ["torch.rand"], "pt.pool_test.Pool2dBenchmark.forward": [], "pt.pool_test.<list39>.<list3>.<lambda1>": [], "torch.nn.AdaptiveMaxPool3d": [], "pt.pool_test.<list39>.<list4>.<lambda1>": [], "torch.nn.FractionalMaxPool3d": [], "pt.pool_test.Pool3dBenchmark.init": ["torch.rand"], "pt.pool_test.Pool3dBenchmark.forward": [], "pt.split_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.split_test.SplitBenchmark.init": ["<builtin>.int", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.split_test.SplitBenchmark.forward": ["torch.split"], "torch.split": [], "pt.groupnorm_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.groupnorm_test.GroupNormBenchmark.init": ["torch.rand"], "pt.groupnorm_test.GroupNormBenchmark.forward": ["torch.nn.functional.group_norm"], "torch.nn.functional.group_norm": [], "pt.interpolate_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.interpolate_test.InterpolateBenchmark.init": ["<builtin>.ValueError", "torch.randint", "TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name"], "torch.randint": [], "pt.interpolate_test.InterpolateBenchmark.forward": ["torch.nn.functional.interpolate"], "torch.nn.functional.interpolate": [], "pt.batchnorm_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "pt.batchnorm_test.cudnn_benchmark_configs", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_gradient_test", "operator_benchmark.config_list"], "pt.batchnorm_test.cudnn_benchmark_configs": ["<builtin>.any", "<builtin>.dict"], "<builtin>.dict": [], "pt.batchnorm_test.BatchNormBenchmark.init": ["TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name", "torch.rand"], "pt.batchnorm_test.BatchNormBenchmark.forward": ["torch.backends.cudnn.flags", "torch.nn.functional.batch_norm"], "torch.backends.cudnn.flags": [], "torch.nn.functional.batch_norm": [], "operator_benchmark.generate_pt_gradient_test": [], "pt.batchnorm_test.BatchNorm1dBenchmark.init": ["TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name", "torch.rand"], "pt.batchnorm_test.BatchNorm1dBenchmark.forward": ["torch.backends.cudnn.flags", "torch.nn.functional.batch_norm"], "pt.add_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_gradient_test", "operator_benchmark.config_list"], "pt.add_test.AddBenchmark.init": ["TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name", "torch.rand"], "pt.add_test.AddBenchmark.forward": ["torch.add"], "torch.add": [], "pt.add_test.AddmmBenchmark.init": ["TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name", "torch.rand"], "pt.add_test.AddmmBenchmark.forward": ["torch.addmm"], "torch.addmm": [], "pt.add_test.AddrBenchmark.init": ["TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name", "torch.rand"], "pt.add_test.AddrBenchmark.forward": ["torch.addr"], "torch.addr": [], "pt.add_test.AddbmmBenchmark.init": ["TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name", "torch.rand"], "pt.add_test.AddbmmBenchmark.forward": ["torch.addbmm"], "torch.addbmm": [], "pt.as_strided_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.as_strided_test.As_stridedBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.as_strided_test.As_stridedBenchmark.forward": ["torch.as_strided"], "torch.as_strided": [], "pt.remainder_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.remainder_test.RemainderOpBenchmark.init": ["torch.rand"], "pt.remainder_test.RemainderOpBenchmark.forward": [], "pt.conv_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test"], "pt.conv_test.Conv1dBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.nn.Conv1d", "TorchBenchmarkBase.set_module_name", "torch.rand"], "torch.nn.Conv1d": [], "pt.conv_test.Conv1dBenchmark.forward": [], "pt.conv_test.ConvTranspose1dBenchmark.init": ["torch.rand", "torch.nn.ConvTranspose1d", "TorchBenchmarkBase.set_module_name"], "torch.nn.ConvTranspose1d": [], "pt.conv_test.ConvTranspose1dBenchmark.forward": [], "pt.conv_test.Conv2dBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name", "torch.nn.Conv2d"], "torch.nn.Conv2d": [], "pt.conv_test.Conv2dBenchmark.forward": [], "pt.conv_test.ConvTranspose2dBenchmark.init": ["torch.nn.ConvTranspose2d", "torch.rand", "TorchBenchmarkBase.set_module_name"], "torch.nn.ConvTranspose2d": [], "pt.conv_test.ConvTranspose2dBenchmark.forward": [], "pt.conv_test.Conv3dBenchmark.init": ["torch.rand", "torch.nn.Conv3d", "TorchBenchmarkBase.set_module_name"], "torch.nn.Conv3d": [], "pt.conv_test.Conv3dBenchmark.forward": [], "pt.conv_test.ConvTranspose3dBenchmark.init": ["torch.rand", "torch.nn.ConvTranspose3d", "TorchBenchmarkBase.set_module_name"], "torch.nn.ConvTranspose3d": [], "pt.conv_test.ConvTranspose3dBenchmark.forward": [], "pt.configs": ["operator_benchmark.config_list", "operator_benchmark.cross_product_configs"], "pt.configs.remove_cuda": [], "pt.binary_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.binary_test.BinaryOpBcastBenchmark.init": ["torch.randn"], "pt.binary_test.BinaryOpBcastBenchmark.forward": [], "pt.binary_test.copy": [], "pt.binary_test.BinaryOpBenchmark.init": ["torch.randn"], "pt.binary_test.BinaryOpBenchmark.forward": [], "pt.sum_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.sum_test.SumBenchmark.init": ["torch.rand", "torch.empty", "TorchBenchmarkBase.set_module_name"], "pt.sum_test.SumBenchmark.forward": [], "pt.tensor_to_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.tensor_to_test.FloatToHalfTensorConversionBenchmark.init": ["torch.rand"], "pt.tensor_to_test.FloatToHalfTensorConversionBenchmark.forward": [], "pt.tensor_to_test.HalfToFloatTensorConversionBenchmark.init": ["torch.rand"], "pt.tensor_to_test.HalfToFloatTensorConversionBenchmark.forward": [], "pt.hardswish_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.hardswish_test.HardswishBenchmark.init": ["torch.rand"], "pt.hardswish_test.HardswishBenchmark.forward": [], "pt.linear_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test"], "pt.linear_test.LinearBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name", "torch.nn.Linear"], "torch.nn.Linear": [], "pt.linear_test.LinearBenchmark.forward": [], "pt.embeddingbag_test": ["operator_benchmark.generate_pt_gradient_test", "benchmark_runner.main", "operator_benchmark.generate_pt_test"], "pt.embeddingbag_test.EmbeddingBagBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.cat", "torch.nn.EmbeddingBag", "torch.LongTensor", "torch.tensor", "numpy.random.randint", "numpy.random.seed"], "torch.nn.EmbeddingBag": [], "torch.LongTensor": [], "pt.embeddingbag_test.EmbeddingBagBenchmark.forward": [], "pt.instancenorm_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.instancenorm_test.InstanceNormBenchmark.init": ["torch.rand"], "pt.instancenorm_test.InstanceNormBenchmark.forward": ["torch.nn.functional.instance_norm"], "torch.nn.functional.instance_norm": [], "pt.diag_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.diag_test.DiagBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name", "torch.tensor"], "pt.diag_test.DiagBenchmark.forward": ["torch.diag"], "torch.diag": [], "pt.matmul_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.matmul_test.MatMulBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.matmul_test.MatMulBenchmark.forward": ["torch.matmul"], "torch.matmul": [], "pt.fill_test": ["torch.testing.get_all_device_types", "benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "torch.testing.get_all_device_types": [], "pt.fill_test.Fill_Benchmark.init": ["torch.zeros", "TorchBenchmarkBase.set_module_name"], "torch.zeros": [], "pt.fill_test.Fill_Benchmark.forward": [], "pt.chunk_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.chunk_test.ChunkBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.chunk_test.ChunkBenchmark.forward": ["torch.chunk"], "torch.chunk": [], "pt.softmax_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.softmax_test.SoftmaxBenchmark.init": ["torch.rand"], "pt.softmax_test.SoftmaxBenchmark.forward": [], "pt.layernorm_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.layernorm_test.LayerNormBenchmark.init": ["torch.rand"], "pt.layernorm_test.LayerNormBenchmark.forward": ["torch.nn.functional.layer_norm"], "torch.nn.functional.layer_norm": [], "pt.channel_shuffle_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.channel_shuffle_test.ChannelSHuffleBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.channel_shuffle_test.ChannelSHuffleBenchmark.forward": ["torch.channel_shuffle"], "torch.channel_shuffle": [], "pt": [], "pt.unary_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.unary_test.UnaryOpBenchmark.init": ["torch.rand"], "pt.unary_test.UnaryOpBenchmark.forward": [], "pt.unary_test.bernoulli_": [], "pt.unary_test.cauchy_": [], "pt.unary_test.digamma_": [], "pt.unary_test.exponential_": [], "pt.unary_test.normal_": [], "pt.unary_test.random_": [], "pt.unary_test.sign_": [], "pt.unary_test.uniform_": [], "pt.unary_test.half_": [], "pt.unary_test.long_": [], "benchmark_all_quantized_test": ["benchmark_runner.main"], "pt.qobserver_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.qobserver_test.QObserverBenchmark.init": ["torch.rand"], "pt.qobserver_test.QObserverBenchmark.forward": [], "pt.qobserver_test.QObserverBenchmarkCalculateQparams.init": ["torch.rand"], "pt.qobserver_test.QObserverBenchmarkCalculateQparams.forward": [], "pt.qgroupnorm_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.qgroupnorm_test.QGroupNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "torch.quantize_per_tensor": [], "pt.qgroupnorm_test.QGroupNormBenchmark.forward": ["torch.ops.quantized.group_norm"], "torch.ops.quantized.group_norm": [], "pt.qpool_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.qpool_test._QPool2dBenchmarkBase.setup": ["torch.quantize_per_tensor", "torch.rand"], "pt.qpool_test._QPool2dBenchmarkBase.forward": [], "pt.qpool_test.QMaxPool2dBenchmark.init": ["torch.nn.MaxPool2d", "<builtin>.super"], "torch.nn.MaxPool2d": [], "pt.qpool_test.QAvgPool2dBenchmark.init": ["torch.nn.AvgPool2d", "<builtin>.super"], "torch.nn.AvgPool2d": [], "pt.qpool_test.QAdaptiveAvgPool2dBenchmark.init": ["<builtin>.super", "torch.nn.AdaptiveAvgPool2d"], "torch.nn.AdaptiveAvgPool2d": [], "pt.qlinear_test": ["benchmark_runner.main", "pt.configs.remove_cuda", "operator_benchmark.generate_pt_test"], "pt.qlinear_test._QLinearBenchmarkBase.init": ["torch.quantize_per_tensor", "torch.randn", "torch.tensor"], "pt.qlinear_test._QLinearBenchmarkBase.forward": [], "pt.qlinear_test.QLinearBenchmark.init": ["<builtin>.super", "torch.nn.quantized.Linear", "TorchBenchmarkBase.set_module_name"], "torch.nn.quantized.Linear": [], "pt.qlinear_test.QDynamicLinearBenchmark.init": ["torch.nn.quantized.dynamic.Linear", "TorchBenchmarkBase.set_module_name", "<builtin>.super"], "torch.nn.quantized.dynamic.Linear": [], "pt.qarithmetic_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "pt.qarithmetic_test._QFunctionalBinaryArithmeticBenchmarkBase.setup": ["torch.nn.quantized.QFunctional", "<builtin>.list", "torch.rand", "<builtin>.range", "torch.quantize_per_tensor"], "torch.nn.quantized.QFunctional": [], "pt.qarithmetic_test.QFunctionalBenchmark.init": ["<builtin>.super"], "pt.qarithmetic_test.QFunctionalBenchmark.forward": [], "pt.qarithmetic_test.QFunctionalScalarBenchmark.init": ["<builtin>.super"], "pt.qarithmetic_test.QFunctionalScalarBenchmark.forward": [], "pt.qtensor_method_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.qtensor_method_test._QMethodBenchmarkBase.init": ["torch.quantize_per_tensor", "<builtin>.list", "torch.rand", "<builtin>.range"], "pt.qtensor_method_test.QMethodTensorInputCopyBenchmark.forward": [], "pt.qembedding_pack_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "pt.qembedding_pack_test.EmbeddingBagFloatToFusedBase.init": ["torch.from_numpy", "numpy.random.random_sample"], "numpy.random.random_sample": [], "torch.from_numpy": [], "pt.qembedding_pack_test.EmbeddingBagFloatToFusedBase.forward": [], "pt.qembedding_pack_test.EmbeddingBagFusedToFloatBase.init": ["torch.randn"], "pt.qembedding_pack_test.EmbeddingBagFusedToFloatBase.forward": [], "pt.qlayernorm_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.qlayernorm_test.QLayerNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qlayernorm_test.QLayerNormBenchmark.forward": ["torch.ops.quantized.layer_norm"], "torch.ops.quantized.layer_norm": [], "pt.qinstancenorm_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.qinstancenorm_test.QInstanceNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qinstancenorm_test.QInstanceNormBenchmark.forward": ["torch.ops.quantized.instance_norm"], "torch.ops.quantized.instance_norm": [], "pt.qbatchnorm_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qbatchnorm_test.QBatchNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand", "pt.qbatchnorm_test.QBatchNormBenchmark._init"], "pt.qbatchnorm_test.QBatchNormBenchmark._init": [], "pt.qbatchnorm_test.QBatchNormBenchmark.forward": [], "pt.qbatchnorm_test.QBatchNorm1dBenchmark._init": ["TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name", "torch.rand"], "pt.qbatchnorm_test.QBatchNorm1dBenchmark.forward": ["torch.ops.quantized.batch_norm1d"], "torch.ops.quantized.batch_norm1d": [], "pt.qbatchnorm_test.QBatchNorm2dBenchmark._init": ["TorchBenchmarkBase.auto_set", "TorchBenchmarkBase.set_module_name", "torch.rand"], "pt.qbatchnorm_test.QBatchNorm2dBenchmark.forward": ["torch.ops.quantized.batch_norm2d"], "torch.ops.quantized.batch_norm2d": [], "pt.qconv_test": ["benchmark_runner.main", "pt.configs.remove_cuda", "operator_benchmark.generate_pt_test"], "pt.qconv_test.QConv1dBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Conv1d", "torch.tensor", "torch.quantize_per_tensor", "torch.randn"], "torch.nn.quantized.Conv1d": [], "pt.qconv_test.QConv1dBenchmark.forward": [], "pt.qconv_test.QConv2dBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.tensor", "torch.quantize_per_tensor", "torch.nn.quantized.Conv2d", "torch.randn"], "torch.nn.quantized.Conv2d": [], "pt.qconv_test.QConv2dBenchmark.forward": [], "pt.qrnn_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qrnn_test.LSTMBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.randn", "torch.quantization.quantize_dynamic", "torch.nn.LSTM", "torch.nn.Sequential"], "torch.nn.LSTM": [], "torch.nn.Sequential": [], "torch.quantization.quantize_dynamic": [], "pt.qrnn_test.LSTMBenchmark.forward": [], "pt.qcat_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "pt.qcat_test.QCatBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.nn.quantized.QFunctional", "<builtin>.tuple", "torch.rand", "<builtin>.range", "torch.quantize_per_tensor"], "pt.qcat_test.QCatBenchmark.forward": [], "pt.qcomparators_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "pt.qcomparators_test.QComparatorBenchmark.init": ["torch.quantize_per_tensor", "<builtin>.list", "torch.rand", "<builtin>.range"], "pt.qcomparators_test.QComparatorBenchmark.forward": ["torch.tensor"], "pt.qinterpolate_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qinterpolate_test.QInterpolateBenchmark.init": ["TorchBenchmarkBase.set_module_name", "<builtin>.list", "torch.rand", "<builtin>.range", "torch.quantize_per_tensor"], "pt.qinterpolate_test.QInterpolateBenchmark.forward": ["torch.nn.functional.interpolate"], "pt.quantization_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.generate_pt_gradient_tests_from_op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.quantization_test.QuantizePerTensorBenchmark.init": ["torch.nn.quantized.DeQuantize", "torch.rand", "TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Quantize"], "torch.nn.quantized.Quantize": [], "torch.nn.quantized.DeQuantize": [], "pt.quantization_test.QuantizePerTensorBenchmark.forward": [], "pt.quantization_test.QuantizePerChannelBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.rand", "torch.quantize_per_channel", "torch.tensor", "pt.quantization_test.QuantizePerChannelBenchmark.init.dequant"], "torch.quantize_per_channel": [], "pt.quantization_test.QuantizePerChannelBenchmark.init.dequant": [], "pt.quantization_test.QuantizePerChannelBenchmark.forward": ["torch.quantize_per_channel", "pt.quantization_test.QuantizePerChannelBenchmark.init.dequant"], "pt.quantization_test.FakeQuantizeBenchmark.init": ["torch.rand", "torch.quantization.FakeQuantize", "TorchBenchmarkBase.set_module_name"], "torch.quantization.FakeQuantize": [], "pt.quantization_test.FakeQuantizeBenchmark.forward": [], "pt.quantization_test.fakeQuantizePerTensorLearnableKernel": ["torch._fake_quantize_learnable_per_tensor_affine"], "torch._fake_quantize_learnable_per_tensor_affine": [], "pt.quantization_test.fakeQuantizePerTensorOriginalKernel": ["torch.fake_quantize_per_tensor_affine"], "torch.fake_quantize_per_tensor_affine": [], "pt.quantization_test.FakeQuantizePerTensorBaseOpBenchmark.init": ["torch.nn.Parameter", "torch.rand", "torch.tensor", "TorchBenchmarkBase.auto_set"], "torch.nn.Parameter": [], "pt.quantization_test.FakeQuantizePerTensorBaseOpBenchmark.forward": [], "operator_benchmark.generate_pt_gradient_tests_from_op_list": [], "pt.quantization_test.fakeQuantizePerChannelLearnableKernel": ["torch._fake_quantize_learnable_per_channel_affine"], "torch._fake_quantize_learnable_per_channel_affine": [], "pt.quantization_test.fakeQuantizePerChannelOriginalKernel": ["torch.fake_quantize_per_channel_affine"], "torch.fake_quantize_per_channel_affine": [], "pt.quantization_test.FakeQuantizePerChannelOpBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.zeros", "torch.rand", "torch.ones", "torch.nn.Parameter"], "pt.quantization_test.FakeQuantizePerChannelOpBenchmark.forward": [], "pt.qembeddingbag_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test"], "pt.qembeddingbag_test.QEmbeddingBagBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.nn.quantized.EmbeddingBag", "torch.cat", "torch.LongTensor", "torch.tensor", "numpy.random.randint", "numpy.random.seed"], "torch.nn.quantized.EmbeddingBag": [], "pt.qembeddingbag_test.QEmbeddingBagBenchmark.forward": [], "pt.qactivation_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "torch.nn.ReLU"], "torch.nn.ReLU": [], "pt.qactivation_test.QActivationBenchmarkBase._setup": ["torch.quantize_per_tensor", "<builtin>.list", "torch.rand", "<builtin>.range"], "pt.qactivation_test.QActivationBenchmarkBase.init": ["pt.qactivation_test.QActivationBenchmarkBase._setup"], "pt.qactivation_test.QActivationBenchmark.forward": [], "pt.qactivation_test.QActivationScaleZeroPointBenchmark.forward": [], "pt.qunary_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.qunary_test.QUnaryOpBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qunary_test.QUnaryOpBenchmark.forward": [], "pt.qunary_test.QTopkOpBenchmark.init": ["torch.quantize_per_tensor", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.qunary_test.QTopkOpBenchmark.forward": ["torch.topk"], "torch.topk": []}