{"pipe": ["<builtin>.TypeError"], "pipe._recommend_auto_balance": [], "pipe._verify_module": ["<builtin>.len", "<builtin>.list", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.TypeError"], "<builtin>.isinstance": [], "<builtin>.TypeError": [], "<builtin>.list": [], "<builtin>.len": [], "<builtin>.ValueError": [], "pipe._verify_splitting": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.range", "<builtin>.sum", "<builtin>.list"], "<builtin>.sum": [], "<builtin>.range": [], "pipe._retrieve_device": ["<builtin>.ValueError", "torch.device"], "torch.device": [], "pipe.PipeSequential.forward": ["<builtin>.isinstance", "torch.nn.Sequential.__init__"], "torch.nn.Sequential.__init__": [], "pipe._assemble_partition": ["<builtin>.isinstance", "torch.nn.Sequential.__init__"], "pipe._split_module": ["typing.cast", "torch.nn.ModuleList", "pipe._retrieve_device", "pipe._assemble_partition"], "torch.nn.ModuleList": [], "typing.cast": [], "pipe.Pipe.__init__": ["skip.skippable.verify_skippables", "pipeline.Pipeline", "<builtin>.RuntimeError", "<builtin>.ValueError", "pipe._verify_splitting", "pipe.Pipe._ensure_copy_streams", "batchnorm.DeferredBatchNorm.convert_deferred_batch_norm", "<builtin>.int", "torch.distributed.rpc._is_current_rpc_agent_set", "<builtin>.str", "pipe._verify_module", "skip.layout.inspect_skip_layout", "pipe._split_module", "<builtin>.super"], "<builtin>.super": [], "torch.distributed.rpc._is_current_rpc_agent_set": [], "<builtin>.RuntimeError": [], "<builtin>.int": [], "<builtin>.str": [], "skip.skippable.verify_skippables": [], "batchnorm.DeferredBatchNorm.convert_deferred_batch_norm": [], "skip.layout.inspect_skip_layout": [], "pipe.Pipe._ensure_copy_streams": ["<builtin>.range", "stream.new_stream", "torch.nn.Module._copy_streams.append"], "pipeline.Pipeline": [], "pipe.Pipe.__len__": ["<builtin>.len", "<builtin>.sum"], "pipe.Pipe.__getitem__": ["<builtin>.len"], "pipe.Pipe.__iter__": [], "pipe.Pipe.cuda": [], "pipe.Pipe.cpu": [], "pipe.Pipe.to": ["<builtin>.isinstance", "<builtin>.super", "torch.is_tensor"], "torch.is_tensor": [], "stream.new_stream": [], "torch.nn.Module._copy_streams.append": [], "pipe.Pipe.forward": ["<builtin>.len", "torch.device", "microbatch.scatter", "microbatch.gather", "microbatch.check", "torch.distributed.rpc.RRef"], "microbatch.check": [], "torch.distributed.rpc.RRef": [], "microbatch.scatter": [], "microbatch.gather": []}