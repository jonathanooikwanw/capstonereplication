{"api": ["logging.getLogger"], "logging.getLogger": [], "api.SignalException.__init__": ["<builtin>.super"], "<builtin>.super": [], "api._terminate_process_handler": ["api.SignalException.__init__", "signal.Signals", "os.getpid"], "signal.Signals": [], "os.getpid": [], "api._get_kill_signal": [], "api._get_default_signal": [], "api._validate_full_rank": ["abc.ABC._return_values.keys", "<builtin>.range", "<builtin>.set", "<builtin>.RuntimeError"], "abc.ABC._return_values.keys": [], "<builtin>.set": [], "<builtin>.range": [], "<builtin>.RuntimeError": [], "api.Std.from_str": ["<builtin>.int", "api.Std.from_str.to_std", "<builtin>.ValueError", "re.match"], "api.Std.from_str.to_std": ["<builtin>.int"], "<builtin>.int": [], "re.match": [], "<builtin>.ValueError": [], "api.to_map": ["<builtin>.range", "<builtin>.isinstance"], "<builtin>.isinstance": [], "dataclasses.field": [], "api.RunProcsResult": ["dataclasses.field"], "api.RunProcsResult.is_failed": ["<builtin>.len"], "<builtin>.len": [], "api.PContext.__init__": ["torch.distributed.elastic.multiprocessing.tail_log.TailLog", "<builtin>.len", "api._validate_full_rank"], "torch.distributed.elastic.multiprocessing.tail_log.TailLog": [], "api.PContext.start": ["api.PContext._start", "signal.signal"], "signal.signal": [], "api.PContext._start": ["<builtin>.NotImplementedError"], "api.PContext": ["abc.abstractmethod"], "abc.abstractmethod": [], "<builtin>.NotImplementedError": [], "api.PContext._poll": ["<builtin>.NotImplementedError"], "api.PContext.wait": ["api.PContext._poll", "time.time", "time.sleep"], "time.time": [], "time.sleep": [], "api.PContext.pids": ["<builtin>.NotImplementedError"], "api.PContext._close": ["<builtin>.NotImplementedError"], "api.PContext.close": ["api.PContext._close", "api._get_default_signal"], "api._nullcontext.__init__": [], "api._nullcontext.__enter__": [], "api._nullcontext.__exit__": [], "api.get_std_cm": ["torch.distributed.elastic.multiprocessing.redirects.redirect_stdout", "api._nullcontext.__init__", "torch.distributed.elastic.multiprocessing.redirects.redirect_stderr"], "torch.distributed.elastic.multiprocessing.redirects.redirect_stdout": [], "torch.distributed.elastic.multiprocessing.redirects.redirect_stderr": [], "api._wrap": ["api.get_std_cm", "torch.distributed.elastic.multiprocessing.errors.record"], "torch.distributed.elastic.multiprocessing.errors.record": [], "api.MultiprocessContext.__init__": ["<builtin>.range", "torch.multiprocessing.get_context", "<builtin>.super"], "torch.multiprocessing.get_context": [], "api.MultiprocessContext._start": ["torch.multiprocessing.start_processes", "<builtin>.ValueError"], "torch.multiprocessing.start_processes": [], "api.MultiprocessContext._is_done": ["<builtin>.len"], "api.MultiprocessContext._poll": ["api._validate_full_rank", "<builtin>.range", "api.PContext.close", "api.MultiprocessContext._is_done"], "api.MultiprocessContext.pids": ["<builtin>.enumerate"], "<builtin>.enumerate": [], "api.MultiprocessContext._close": ["time.monotonic", "api._get_kill_signal", "os.kill"], "os.kill": [], "time.monotonic": [], "api.SubprocessHandler.__init__": ["<builtin>.str", "api.SubprocessHandler._popen", "<builtin>.open", "os.environ.copy"], "<builtin>.open": [], "os.environ.copy": [], "<builtin>.str": [], "api.SubprocessHandler._popen": ["subprocess.Popen"], "subprocess.Popen": [], "api.SubprocessHandler.close": ["api._get_default_signal"], "api.SubprocessContext.__init__": ["<builtin>.range", "<builtin>.super", "<builtin>.set"], "api.SubprocessContext._start": ["<builtin>.range", "<builtin>.ValueError", "api.SubprocessHandler.__init__"], "api.SubprocessContext._poll": ["abc.ABC._running_local_ranks.difference_update", "api.PContext.close", "torch.distributed.elastic.multiprocessing.errors.ProcessFailure", "<builtin>.min", "api.RunProcsResult.is_failed", "<builtin>.range", "<builtin>.set"], "torch.distributed.elastic.multiprocessing.errors.ProcessFailure": [], "abc.ABC._running_local_ranks.difference_update": [], "api.SubprocessContext._poll.<lambda1>": [], "<builtin>.min": [], "api.SubprocessContext.pids": [], "api.SubprocessContext._close": ["time.monotonic", "api._get_kill_signal"]}