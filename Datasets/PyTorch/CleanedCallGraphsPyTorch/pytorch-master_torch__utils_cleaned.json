{"_utils": [], "_utils._type": ["<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.type", "_utils._import_dotted_name", "_utils._get_async_or_non_blocking", "torch.Tensor._indices", "torch.Tensor._values"], "_utils._get_async_or_non_blocking": ["<builtin>.TypeError", "warnings.warn", "<builtin>.len", "<builtin>.list"], "<builtin>.isinstance": [], "_utils._import_dotted_name": ["<builtin>.getattr", "<builtin>.__import__"], "<builtin>.type": [], "<builtin>.RuntimeError": [], "torch.Tensor._values": [], "torch.Tensor._indices": [], "_utils._cuda": ["torch.cuda.current_device", "_utils._get_async_or_non_blocking", "<builtin>.getattr", "torch.cuda.device", "torch.Tensor._indices", "torch.Tensor._values"], "torch.cuda.current_device": [], "torch.cuda.device": [], "<builtin>.getattr": [], "<builtin>.len": [], "<builtin>.list": [], "<builtin>.TypeError": [], "warnings.warn": [], "_utils._rebuild_tensor": ["torch.tensor"], "torch.tensor": [], "_utils._rebuild_tensor_v2": ["_utils._rebuild_tensor"], "_utils._validate_loaded_sparse_tensors": ["torch._validate_sparse_coo_tensor_args"], "torch._validate_sparse_coo_tensor_args": [], "_utils._rebuild_sparse_tensor": ["torch._sparse_coo_tensor_unsafe", "<builtin>.NotImplementedError"], "torch._sparse_coo_tensor_unsafe": [], "<builtin>.NotImplementedError": [], "_utils._rebuild_xla_tensor": ["torch.from_numpy"], "torch.from_numpy": [], "_utils._rebuild_mlc_tensor": ["torch.from_numpy"], "_utils._rebuild_meta_tensor_no_storage": ["torch.empty_strided"], "torch.empty_strided": [], "_utils._rebuild_qtensor": ["torch._empty_affine_quantized", "torch.tensor", "<builtin>.RuntimeError", "<builtin>.type", "torch._empty_per_channel_affine_quantized"], "torch._empty_affine_quantized": [], "torch._empty_per_channel_affine_quantized": [], "_utils._rebuild_parameter": ["torch.nn.Parameter"], "torch.nn.Parameter": [], "<builtin>.__import__": [], "_utils._accumulate": ["_utils.<lambda1>", "<builtin>.iter", "<builtin>.next"], "<builtin>.iter": [], "<builtin>.next": [], "_utils.<lambda1>": [], "_utils._flatten_dense_tensors": ["torch._C._nn.flatten_dense_tensors"], "torch._C._nn.flatten_dense_tensors": [], "_utils._flatten_sparse_tensors": ["torch.Tensor._values", "torch.Tensor._indices", "torch._C._nn.flatten_dense_tensors"], "_utils._unflatten_dense_tensors": ["torch._C._nn.unflatten_dense_tensors"], "torch._C._nn.unflatten_dense_tensors": [], "_utils._unflatten_sparse_tensors": ["<builtin>.zip", "<builtin>.tuple", "torch.Tensor._indices", "torch._C._nn.unflatten_dense_tensors", "torch.Tensor._values"], "<builtin>.zip": [], "<builtin>.tuple": [], "_utils._reorder_tensors_as": ["<builtin>.tuple", "<builtin>.iter", "<builtin>.next", "collections.defaultdict"], "collections.defaultdict": [], "_utils._take_tensors": ["<builtin>.len", "torch.Tensor._indices", "collections.defaultdict", "torch.Tensor._values"], "_utils._take_tensors.<lambda1>": [], "_utils.annotate": [], "_utils.annotate.dec": ["<builtin>.dict"], "<builtin>.dict": [], "_utils.KeyErrorMessage.__repr__": [], "_utils.ExceptionWrapper.__init__": ["traceback.format_exception", "sys.exc_info"], "sys.exc_info": [], "traceback.format_exception": [], "_utils.ExceptionWrapper.reraise": ["<builtin>.getattr", "<builtin>.RuntimeError"], "_utils._get_available_device_type": ["torch.cuda.is_available"], "torch.cuda.is_available": [], "_utils._get_device_attr": ["_utils._get_available_device_type", "_utils._get_current_device_index.<lambda1>", "_utils._get_devices_properties.<lambda1>", "_utils._get_all_device_indices.<lambda1>"], "_utils._get_current_device_index.<lambda1>": ["torch.cuda.current_device"], "_utils._get_devices_properties.<lambda1>": ["torch.cuda.get_device_properties"], "_utils._get_all_device_indices.<lambda1>": ["torch.cuda.device_count", "<builtin>.list", "<builtin>.range"], "_utils._get_current_device_index": ["_utils._get_device_attr"], "_utils._get_all_device_indices": ["_utils._get_device_attr"], "torch.cuda.device_count": [], "<builtin>.range": [], "_utils._get_devices_properties": ["_utils._get_device_attr"], "torch.cuda.get_device_properties": [], "_utils.get_current_device_index": ["torch.cuda.device_count", "torch.cuda.current_device"], "_utils._get_device_index": ["<builtin>.isinstance", "_utils._get_current_device_index", "<builtin>.ValueError", "torch.jit.is_scripting", "torch.device", "_utils.get_current_device_index"], "torch.device": [], "<builtin>.ValueError": [], "torch.jit.is_scripting": [], "_utils._handle_complex": ["<builtin>.isinstance", "torch.view_as_real"], "torch.view_as_real": []}