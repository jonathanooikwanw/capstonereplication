{"lr_scheduler": [], "lr_scheduler._LRScheduler.__init__": ["<builtin>.type", "lr_scheduler._LRScheduler.__init__.with_counter", "<builtin>.enumerate", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.KeyError", "lr_scheduler._LRScheduler.step"], "<builtin>.isinstance": [], "<builtin>.type": [], "<builtin>.TypeError": [], "<builtin>.enumerate": [], "<builtin>.KeyError": [], "lr_scheduler._LRScheduler.__init__.with_counter": ["<builtin>.getattr", "functools.wraps", "weakref.ref"], "<builtin>.getattr": [], "weakref.ref": [], "functools.wraps": [], "lr_scheduler._LRScheduler.__init__.with_counter.wrapper": [], "lr_scheduler._LRScheduler.step": ["warnings.warn", "<builtin>.hasattr", "<builtin>.enumerate", "lr_scheduler._LRScheduler.get_lr", "<builtin>.zip", "lr_scheduler._LRScheduler.print_lr", "lr_scheduler._LRScheduler.step._enable_get_lr_call.__init__"], "lr_scheduler._LRScheduler.state_dict": [], "lr_scheduler._LRScheduler.load_state_dict": [], "lr_scheduler._LRScheduler.get_last_lr": [], "lr_scheduler._LRScheduler.get_lr": [], "lr_scheduler._LRScheduler.print_lr": ["<builtin>.print"], "<builtin>.print": [], "<builtin>.hasattr": [], "warnings.warn": [], "lr_scheduler._LRScheduler.step._enable_get_lr_call.__init__": [], "lr_scheduler._LRScheduler.step._enable_get_lr_call.__enter__": [], "lr_scheduler._LRScheduler.step._enable_get_lr_call.__exit__": [], "<builtin>.zip": [], "lr_scheduler.LambdaLR.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.len", "<builtin>.list", "<builtin>.isinstance"], "<builtin>.len": [], "<builtin>.ValueError": [], "<builtin>.list": [], "<builtin>.super": [], "lr_scheduler.LambdaLR.state_dict": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance"], "lr_scheduler.LambdaLR.load_state_dict": ["<builtin>.enumerate"], "lr_scheduler.LambdaLR.get_lr": ["warnings.warn", "<builtin>.zip"], "lr_scheduler.MultiplicativeLR.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.len", "<builtin>.list", "<builtin>.isinstance"], "lr_scheduler.MultiplicativeLR.state_dict": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance"], "lr_scheduler.MultiplicativeLR.load_state_dict": ["<builtin>.enumerate"], "lr_scheduler.MultiplicativeLR.get_lr": ["warnings.warn", "<builtin>.list", "<builtin>.zip"], "lr_scheduler.StepLR.__init__": ["<builtin>.super"], "lr_scheduler.StepLR.get_lr": ["warnings.warn"], "lr_scheduler.StepLR._get_closed_form_lr": [], "lr_scheduler.MultiStepLR.__init__": ["collections.Counter", "<builtin>.super"], "collections.Counter": [], "lr_scheduler.MultiStepLR.get_lr": ["warnings.warn"], "lr_scheduler.MultiStepLR._get_closed_form_lr": ["bisect.bisect_right", "<builtin>.list", "<builtin>.sorted"], "<builtin>.sorted": [], "bisect.bisect_right": [], "lr_scheduler.ExponentialLR.__init__": ["<builtin>.super"], "lr_scheduler.ExponentialLR.get_lr": ["warnings.warn"], "lr_scheduler.ExponentialLR._get_closed_form_lr": [], "lr_scheduler.CosineAnnealingLR.__init__": ["<builtin>.super"], "lr_scheduler.CosineAnnealingLR.get_lr": ["warnings.warn", "math.cos", "<builtin>.zip"], "math.cos": [], "lr_scheduler.CosineAnnealingLR._get_closed_form_lr": ["math.cos"], "lr_scheduler.ReduceLROnPlateau.__init__": ["<builtin>.type", "<builtin>.ValueError", "lr_scheduler.ReduceLROnPlateau._reset", "<builtin>.TypeError", "<builtin>.len", "<builtin>.list", "<builtin>.isinstance", "lr_scheduler.ReduceLROnPlateau._init_is_better"], "lr_scheduler.ReduceLROnPlateau._init_is_better": ["<builtin>.ValueError"], "lr_scheduler.ReduceLROnPlateau._reset": [], "lr_scheduler.ReduceLROnPlateau.step": ["warnings.warn", "lr_scheduler.ReduceLROnPlateau.is_better", "lr_scheduler.ReduceLROnPlateau._reduce_lr", "<builtin>.float"], "<builtin>.float": [], "lr_scheduler.ReduceLROnPlateau.is_better": [], "lr_scheduler.ReduceLROnPlateau._reduce_lr": ["<builtin>.enumerate", "<builtin>.max", "<builtin>.print", "<builtin>.float"], "<builtin>.max": [], "lr_scheduler.ReduceLROnPlateau.in_cooldown": [], "lr_scheduler.ReduceLROnPlateau.state_dict": [], "lr_scheduler.ReduceLROnPlateau.load_state_dict": ["lr_scheduler.ReduceLROnPlateau._init_is_better"], "lr_scheduler.CyclicLR.__init__": ["<builtin>.type", "<builtin>.float", "<builtin>.ValueError", "<builtin>.super", "<builtin>.TypeError", "<builtin>.zip", "lr_scheduler.CyclicLR._format_param", "<builtin>.isinstance"], "lr_scheduler.CyclicLR._format_param": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.ValueError"], "lr_scheduler.CyclicLR._triangular_scale_fn": [], "lr_scheduler.CyclicLR._triangular2_scale_fn": [], "lr_scheduler.CyclicLR._exp_range_scale_fn": [], "lr_scheduler.CyclicLR.get_lr": ["warnings.warn", "lr_scheduler.CyclicLR._triangular_scale_fn", "math.floor", "<builtin>.zip", "lr_scheduler.CyclicLR._triangular2_scale_fn", "lr_scheduler.CyclicLR._exp_range_scale_fn"], "math.floor": [], "lr_scheduler.CosineAnnealingWarmRestarts.__init__": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.ValueError"], "lr_scheduler.CosineAnnealingWarmRestarts.get_lr": ["warnings.warn", "math.cos"], "lr_scheduler.CosineAnnealingWarmRestarts.step": ["lr_scheduler.CosineAnnealingWarmRestarts.get_lr", "<builtin>.int", "lr_scheduler.CosineAnnealingWarmRestarts.step._enable_get_lr_call.__init__", "math.floor", "<builtin>.ValueError", "<builtin>.enumerate", "math.log", "<builtin>.zip", "lr_scheduler._LRScheduler.print_lr"], "math.log": [], "<builtin>.int": [], "lr_scheduler.CosineAnnealingWarmRestarts.step._enable_get_lr_call.__init__": [], "lr_scheduler.CosineAnnealingWarmRestarts.step._enable_get_lr_call.__enter__": [], "lr_scheduler.CosineAnnealingWarmRestarts.step._enable_get_lr_call.__exit__": [], "lr_scheduler.OneCycleLR.__init__": ["<builtin>.type", "<builtin>.float", "lr_scheduler.OneCycleLR._format_param", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.super", "<builtin>.TypeError", "<builtin>.zip", "<builtin>.isinstance"], "lr_scheduler.OneCycleLR._format_param": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.ValueError"], "lr_scheduler.OneCycleLR._annealing_cos": ["math.cos"], "lr_scheduler.OneCycleLR._annealing_linear": [], "lr_scheduler.OneCycleLR.get_lr": ["warnings.warn", "<builtin>.ValueError", "<builtin>.enumerate", "lr_scheduler.OneCycleLR._annealing_cos", "lr_scheduler.OneCycleLR._annealing_linear", "<builtin>.len"]}