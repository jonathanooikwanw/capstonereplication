{"memonger": ["collections.namedtuple", "logging.getLogger"], "logging.getLogger": [], "collections.namedtuple": [], "memonger.share_grad_blobs": ["caffe2.proto.caffe2_pb2.NetDef", "memonger.share_grad_blobs.is_grad_blob", "time.time", "<builtin>.list", "caffe2.python._import_c_extension.memonger_compute_blob_recycling_for_dag", "memonger.share_grad_blobs.is_grad_op", "<builtin>.str", "memonger.verify_inplace_blobs", "memonger.verify_graph_equality", "<builtin>.set", "<builtin>.enumerate", "copy.deepcopy"], "memonger.share_grad_blobs.is_grad_blob": ["<builtin>.str"], "<builtin>.str": [], "memonger.share_grad_blobs.is_grad_op": ["<builtin>.list", "memonger.share_grad_blobs.is_grad_blob"], "<builtin>.list": [], "copy.deepcopy": [], "<builtin>.set": [], "<builtin>.enumerate": [], "time.time": [], "caffe2.python._import_c_extension.memonger_compute_blob_recycling_for_dag": [], "caffe2.proto.caffe2_pb2.NetDef": [], "memonger.verify_graph_equality": ["<builtin>.len", "memonger.verify_graph_equality.parent_list", "<builtin>.print", "<builtin>.zip"], "memonger.verify_inplace_blobs": ["memonger.verify_inplace_blobs.get_inplaces", "<builtin>.zip"], "memonger.optimize_inference_for_dag": ["caffe2.proto.caffe2_pb2.NetDef", "time.time", "<builtin>.list", "caffe2.python._import_c_extension.memonger_compute_blob_recycling_for_dag", "<builtin>.str", "memonger.optimize_inference_for_dag.is_activation_blob", "memonger.verify_inplace_blobs", "<builtin>.AssertionError", "memonger.verify_graph_equality", "<builtin>.set", "<builtin>.enumerate", "copy.deepcopy"], "memonger.optimize_inference_for_dag.is_activation_blob": [], "<builtin>.AssertionError": [], "memonger.estimate_memory_usage": ["memonger.estimate_memory_usage.num_bytes", "memonger.estimate_memory_usage.split_net", "<builtin>.set", "collections.defaultdict", "<builtin>.max"], "memonger.estimate_memory_usage.split_net": [], "memonger.estimate_memory_usage.num_bytes": ["numpy.prod"], "numpy.prod": [], "memonger.estimate_memory_usage.<lambda1>": [], "collections.defaultdict": [], "<builtin>.max": [], "memonger.release_blobs_when_used": ["<builtin>.range", "<builtin>.list", "caffe2.python.core.CreateOperator", "<builtin>.reversed", "<builtin>.len", "<builtin>.set", "copy.deepcopy"], "<builtin>.len": [], "<builtin>.range": [], "<builtin>.reversed": [], "caffe2.python.core.CreateOperator": [], "memonger._find_source_nodes": ["<builtin>.list"], "memonger._find_target_nodes": ["<builtin>.list"], "memonger._add_single_target_ifneeded": ["<builtin>.len", "memonger._find_target_nodes", "memonger._add_single_target_ifneeded._next_available_idx", "copy.deepcopy"], "memonger._add_single_target_ifneeded._next_available_idx": [], "memonger._get_path": ["<builtin>.min", "<builtin>.list", "<builtin>.reversed", "<builtin>.all"], "<builtin>.all": [], "memonger._get_path.<lambda1>": [], "<builtin>.min": [], "memonger._get_longest_paths": ["<builtin>.len", "memonger._get_path", "networkx.bellman_ford_predecessor_and_distance", "copy.deepcopy"], "networkx.bellman_ford_predecessor_and_distance": [], "memonger._build_tree": ["<builtin>.zip", "memonger._compute_tree_height", "networkx.DiGraph", "<builtin>.all"], "networkx.DiGraph": [], "<builtin>.zip": [], "memonger._compute_tree_height": ["memonger._compute_tree_height._get_height"], "memonger._compute_tree_height._get_height": ["<builtin>.list", "memonger._compute_tree_height._get_height", "<builtin>.max"], "memonger._sort_tree_leaves": ["memonger._sort_tree_leaves._get_sorted_leaves"], "memonger._sort_tree_leaves._get_height": [], "memonger._sort_tree_leaves._get_sorted_leaves": ["<builtin>.range", "memonger._sort_tree_leaves._get_sorted_leaves", "<builtin>.list", "<builtin>.len", "memonger._sort_tree_leaves._get_height", "<builtin>.sorted"], "memonger._sort_tree_leaves._get_sorted_leaves.<lambda1>": [], "<builtin>.sorted": [], "memonger.topological_sort_traversal_longest_path": ["memonger._sort_tree_leaves", "memonger._add_single_target_ifneeded", "<builtin>.list", "memonger._find_source_nodes", "future.utils.viewvalues", "networkx.topological_sort", "networkx.algorithms.dag.lexicographical_topological_sort", "<builtin>.dict", "memonger._get_longest_paths", "<builtin>.len", "networkx.descendants", "<builtin>.set", "<builtin>.enumerate", "memonger._build_tree", "<builtin>.sorted"], "future.utils.viewvalues": [], "networkx.topological_sort": [], "networkx.descendants": [], "<builtin>.dict": [], "memonger.topological_sort_traversal_longest_path.<lambda1>": [], "networkx.algorithms.dag.lexicographical_topological_sort": [], "memonger.topological_sort_traversal": ["<builtin>.list", "networkx.topological_sort"], "memonger.compute_ranges": ["<builtin>.min", "<builtin>.enumerate", "collections.defaultdict", "<builtin>.max"], "memonger.compute_ranges.<lambda1>": [], "memonger.is_compatible": [], "memonger.compute_blob_assignments": ["<builtin>.len"], "memonger._get_max_size": ["<builtin>.max"], "memonger.get_memory_usage": ["memonger._get_max_size"], "memonger.compute_assignments_greedy": ["memonger._get_max_size", "<builtin>.abs", "<builtin>.float", "memonger.is_compatible", "<builtin>.enumerate"], "<builtin>.float": [], "<builtin>.abs": [], "memonger._get_count": ["<builtin>.len", "<builtin>.sum"], "<builtin>.sum": [], "memonger.compute_assignments_dp": ["memonger._get_count", "memonger.compute_assignments_dp._find_best", "memonger.compute_assignments_dp._get_compatible_prev", "<builtin>.len", "<builtin>.enumerate", "copy.deepcopy"], "memonger.compute_assignments_dp._get_compatible_prev": ["memonger.compute_assignments_dp._get_compatible_prev.is_compatible_all"], "memonger.compute_assignments_dp._get_compatible_prev.is_compatible_all": ["memonger.is_compatible", "<builtin>.all"], "memonger.compute_assignments_dp._find_best": ["<builtin>.min", "<builtin>.range", "memonger.compute_assignments_dp", "memonger.is_compatible", "<builtin>.all", "<builtin>.len", "<builtin>.enumerate", "copy.deepcopy"], "memonger.compute_assignments_dp._find_best.<lambda1>": ["memonger.get_memory_usage"], "memonger.get_updated_ranges": ["memonger.get_updated_ranges._get_max_live", "memonger.get_updated_ranges._update_range"], "memonger.get_updated_ranges._get_max_live": ["<builtin>.max"], "memonger.get_updated_ranges._update_range": [], "memonger.compute_assignments": ["memonger.compute_assignments_greedy", "future.utils.viewitems", "memonger.compute_assignments_dp", "<builtin>.len", "memonger.get_updated_ranges", "<builtin>.sorted"], "future.utils.viewitems": [], "memonger.compute_assignments.<lambda1>": [], "memonger.verify_assignments": ["<builtin>.zip"], "memonger.compute_interference_graph": ["networkx.is_directed_acyclic_graph", "networkx.DiGraph", "<builtin>.set", "<builtin>.enumerate", "<builtin>.any"], "<builtin>.any": [], "networkx.is_directed_acyclic_graph": [], "memonger.apply_assignments": ["memonger.apply_assignments.canonical_name", "<builtin>.enumerate", "memonger.apply_recurrent_blob_assignments"], "memonger.apply_assignments.canonical_name": [], "memonger.apply_recurrent_blob_assignments": ["<builtin>.list", "future.utils.viewitems", "<builtin>.str", "memonger.apply_assignments.canonical_name", "caffe2.proto.caffe2_pb2.Argument", "<builtin>.enumerate", "memonger.apply_assignments"], "caffe2.proto.caffe2_pb2.Argument": [], "memonger.optimize_inference_fast": ["<builtin>.str", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python._import_c_extension.memonger_optimize_inference_net"], "caffe2.python._import_c_extension.memonger_optimize_inference_net": [], "memonger.optimize_interference": ["memonger.topological_sort_traversal", "memonger.compute_blob_assignments", "memonger.compute_assignments", "memonger.compute_interference_graph", "memonger.compute_ranges", "copy.deepcopy", "memonger.apply_assignments"], "memonger.verify_inplace_blobs.get_inplaces": ["<builtin>.list", "<builtin>.enumerate"], "memonger.verify_graph_equality.parent_list": ["<builtin>.enumerate"], "<builtin>.print": [], "memonger.blob_nbytes": ["caffe2.python.workspace.FetchBlob"], "caffe2.python.workspace.FetchBlob": [], "memonger.compute_statistics": ["future.utils.viewvalues", "memonger.blob_nbytes", "<builtin>.sum", "<builtin>.max"], "memonger.collect_blob_sizes": ["memonger.blob_nbytes"]}