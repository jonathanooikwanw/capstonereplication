{"api": ["torch.distributed.elastic.utils.logging.get_logger", "collections.defaultdict", "threading.local", "threading.RLock", "<builtin>.set", "api.method_factory", "api._require_initialized", "typing.TypeVar", "contextlib.contextmanager", "logging.getLogger", "inspect.getmembers", "<builtin>.getattr", "<builtin>.setattr", "threading.Lock", "collections.namedtuple", "abc.ABC.__init__", "api.RendezvousHandlerRegistry.__init__"], "torch.distributed.elastic.utils.logging.get_logger": [], "api.WorkerSpec.__post_init__": ["warnings.warn"], "warnings.warn": [], "api.WorkerSpec.get_entrypoint_name": ["<builtin>.isinstance", "os.path.basename"], "<builtin>.isinstance": [], "os.path.basename": [], "api.Worker.__init__": [], "api.Worker.__str__": [], "api.Worker.__repr__": ["<builtin>.str"], "<builtin>.str": [], "api.WorkerState.is_running": [], "api.WorkerGroup.__init__": ["api.Worker.__init__", "<builtin>.range"], "<builtin>.range": [], "api._RoleInstanceInfo.__init__": [], "api._RoleInstanceInfo.serialize": ["json.dumps"], "json.dumps": [], "api._RoleInstanceInfo.deserialize": ["json.loads", "api._RoleInstanceInfo.__init__"], "json.loads": [], "api._RoleInstanceInfo.compare": [], "api._RoleInstanceInfo.find_role_boundaries": ["<builtin>.enumerate"], "<builtin>.enumerate": [], "dataclasses.field": [], "api.RunResult": ["dataclasses.field"], "api.RunResult.is_failed": [], "api._get_socket_with_port": ["socket.socket", "<builtin>.RuntimeError", "socket.getaddrinfo"], "socket.getaddrinfo": [], "socket.socket": [], "<builtin>.RuntimeError": [], "api._get_fq_hostname": ["socket.getfqdn", "socket.gethostname"], "socket.gethostname": [], "socket.getfqdn": [], "api.ElasticAgent": ["abc.abstractmethod"], "abc.abstractmethod": [], "api.ElasticAgent.run": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "api.ElasticAgent.get_worker_group": ["<builtin>.NotImplementedError"], "api.SimpleElasticAgent.__init__": ["api.WorkerGroup.__init__"], "api.SimpleElasticAgent.get_worker_group": [], "api.SimpleElasticAgent": ["torch.distributed.elastic.metrics.prof", "abc.abstractmethod"], "api.SimpleElasticAgent._start_workers": ["<builtin>.NotImplementedError"], "api.SimpleElasticAgent._stop_workers": ["<builtin>.NotImplementedError"], "api.SimpleElasticAgent._monitor_workers": ["<builtin>.NotImplementedError"], "api.SimpleElasticAgent._shutdown": ["<builtin>.NotImplementedError"], "api.SimpleElasticAgent._set_master_addr_port": ["api._get_socket_with_port", "contextlib.closing", "api._get_fq_hostname", "<builtin>.str"], "contextlib.closing": [], "api.SimpleElasticAgent._get_master_addr_port": ["<builtin>.int"], "<builtin>.int": [], "torch.distributed.elastic.metrics.prof": [], "api.SimpleElasticAgent._rendezvous": ["api.SimpleElasticAgent._assign_worker_ranks", "api.SimpleElasticAgent._get_master_addr_port", "api.SimpleElasticAgent._set_master_addr_port"], "api.SimpleElasticAgent._assign_worker_ranks": ["<builtin>.next", "<builtin>.enumerate", "api.SimpleElasticAgent._share_and_gather", "functools.cmp_to_key", "api.SimpleElasticAgent._get_ranks", "api._RoleInstanceInfo.find_role_boundaries", "api.Worker.__init__", "<builtin>.range", "api._RoleInstanceInfo.compare", "<builtin>.sorted"], "api.SimpleElasticAgent._get_ranks": ["<builtin>.list", "<builtin>.len", "<builtin>.range"], "<builtin>.len": [], "<builtin>.list": [], "api.SimpleElasticAgent._share_and_gather": ["api._RoleInstanceInfo.deserialize", "api._RoleInstanceInfo.serialize", "api._RoleInstanceInfo.__init__", "torch.distributed.elastic.utils.store.synchronize"], "functools.cmp_to_key": [], "<builtin>.sorted": [], "<builtin>.next": [], "torch.distributed.elastic.utils.store.synchronize": [], "api.SimpleElasticAgent._initialize_workers": ["api.SimpleElasticAgent._rendezvous", "api.SimpleElasticAgent._start_workers"], "api.SimpleElasticAgent._restart_workers": ["api.SimpleElasticAgent._stop_workers", "api.SimpleElasticAgent._initialize_workers"], "api.SimpleElasticAgent.run": ["api.SimpleElasticAgent._record_metrics", "api.SimpleElasticAgent._invoke_run", "time.monotonic", "<builtin>.int", "api.SimpleElasticAgent._record_worker_events", "api.SimpleElasticAgent._shutdown"], "time.monotonic": [], "api.SimpleElasticAgent._invoke_run": ["<builtin>.Exception", "api.SimpleElasticAgent._exit_barrier", "torch.distributed.elastic.metrics.put_metric", "api.SimpleElasticAgent._restart_workers", "api.SimpleElasticAgent._stop_workers", "api.SimpleElasticAgent._initialize_workers", "api.SimpleElasticAgent._monitor_workers", "time.sleep"], "api.SimpleElasticAgent._record_metrics": ["api.SimpleElasticAgent._record_flakiness_metric", "torch.distributed.elastic.metrics.put_metric", "api.SimpleElasticAgent._record_metric_with_condition"], "api.SimpleElasticAgent._record_worker_events": ["torch.distributed.elastic.events.record", "api.SimpleElasticAgent._construct_event", "api.SimpleElasticAgent._get_worker_state", "json.dumps"], "api.SimpleElasticAgent.get_agent_status_event": ["traceback.format_exc", "api.SimpleElasticAgent._construct_event"], "traceback.format_exc": [], "api.SimpleElasticAgent._construct_event": ["json.dumps", "torch.distributed.elastic.events.Event", "api._get_fq_hostname", "<builtin>.str"], "api.SimpleElasticAgent._get_worker_state": ["<builtin>.ValueError"], "torch.distributed.elastic.events.record": [], "<builtin>.ValueError": [], "torch.distributed.elastic.events.Event": [], "api.SimpleElasticAgent._record_flakiness_metric": ["<builtin>.int", "torch.distributed.elastic.metrics.put_metric"], "torch.distributed.elastic.metrics.put_metric": [], "api.SimpleElasticAgent._record_metric_with_condition": ["torch.distributed.elastic.metrics.put_metric"], "time.sleep": [], "api.SimpleElasticAgent._exit_barrier": ["torch.distributed.elastic.utils.store.barrier", "time.time"], "<builtin>.Exception": [], "time.time": [], "torch.distributed.elastic.utils.store.barrier": [], "local_elastic_agent": ["torch.distributed.elastic.utils.logging.get_logger"], "local_elastic_agent.LocalElasticAgent.__init__": ["local_elastic_agent.LocalElasticAgent._make_log_dir", "<builtin>.super"], "<builtin>.super": [], "local_elastic_agent.LocalElasticAgent._make_log_dir": ["tempfile.mkdtemp", "os.makedirs"], "tempfile.mkdtemp": [], "os.makedirs": [], "local_elastic_agent.LocalElasticAgent": ["torch.distributed.elastic.metrics.api.prof"], "torch.distributed.elastic.metrics.api.prof": [], "local_elastic_agent.LocalElasticAgent._stop_workers": ["local_elastic_agent.LocalElasticAgent._shutdown"], "local_elastic_agent.LocalElasticAgent._shutdown": [], "local_elastic_agent.LocalElasticAgent._start_workers": ["os.path.join", "<builtin>.str", "<builtin>.super", "torch.distributed.elastic.utils.macros.substitute", "torch.distributed.elastic.multiprocessing.start_processes", "shutil.rmtree", "<builtin>.tuple", "os.makedirs", "<builtin>.list"], "torch.distributed.elastic.utils.macros.substitute": [], "<builtin>.tuple": [], "os.path.join": [], "shutil.rmtree": [], "torch.distributed.elastic.multiprocessing.start_processes": [], "local_elastic_agent.LocalElasticAgent._monitor_workers": ["torch.distributed.elastic.agent.server.api.RunResult", "<builtin>.set"], "<builtin>.set": [], "torch.distributed.elastic.agent.server.api.RunResult": [], "ddp_zero_hook": [], "ddp_zero_hook._perform_local_step": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.range"], "ddp_zero_hook._broadcast_bucket": ["torch.distributed.broadcast"], "torch.distributed.broadcast": [], "ddp_zero_hook._collect_ddp_bucket_info": ["<builtin>.len"], "ddp_zero_hook.hook_with_zero_step": ["<builtin>.ValueError", "<builtin>.RuntimeError", "torch.distributed.get_backend"], "torch.distributed.get_backend": [], "ddp_zero_hook.hook_with_zero_step.hook_with_zero_fn": ["<builtin>.range", "<builtin>.len", "ddp_zero_hook._collect_ddp_bucket_info", "ddp_zero_hook._perform_local_step", "ddp_zero_hook._broadcast_bucket"], "ddp_zero_hook.hook_with_zero_step_interleaved": ["<builtin>.ValueError", "<builtin>.RuntimeError", "torch.distributed.get_backend"], "ddp_zero_hook.hook_with_zero_step_interleaved.hook_with_zero_interleaved_fn": [], "ddp_zero_hook.hook_with_zero_step_interleaved.hook_with_zero_interleaved_fn.zero_step": ["<builtin>.len", "ddp_zero_hook._collect_ddp_bucket_info", "ddp_zero_hook._broadcast_bucket", "ddp_zero_hook._perform_local_step"], "default_hooks": [], "default_hooks._allreduce_fut": ["torch.distributed.all_reduce"], "default_hooks._allreduce_fut.<lambda1>": [], "torch.distributed.all_reduce": [], "default_hooks.allreduce_hook": ["default_hooks._allreduce_fut"], "default_hooks.fp16_compress_hook": ["torch.distributed.all_reduce"], "default_hooks.fp16_compress_hook.decompress": [], "default_hooks._OptimizerHookState.__init__": ["<builtin>.ValueError", "<builtin>.hasattr"], "<builtin>.hasattr": [], "default_hooks._hook_then_optimizer": [], "default_hooks._hook_then_optimizer.hook_then_optimizer_wrapper": [], "default_hooks._hook_then_optimizer.hook_then_optimizer_wrapper.optimizer_step": ["<builtin>.zip"], "<builtin>.zip": [], "default_hooks.fp16_compress_wrapper": [], "default_hooks.fp16_compress_wrapper.fp16_compress_wrapper_hook": [], "default_hooks.fp16_compress_wrapper.fp16_compress_wrapper_hook.decompress": [], "post_localSGD_hook": [], "post_localSGD_hook.PostLocalSGDState.__init__": ["logging.info"], "logging.info": [], "post_localSGD_hook.PostLocalSGDState.maybe_increase_iter": ["logging.info"], "post_localSGD_hook.post_localSGD_hook": ["default_hooks._allreduce_fut"], "powerSGD_hook": [], "powerSGD_hook._orthogonalize": ["logging.error", "torch.sum", "<builtin>.range", "torch.norm"], "torch.norm": [], "logging.error": [], "torch.sum": [], "powerSGD_hook._should_compress": [], "powerSGD_hook._report_compression_stats": ["logging.info"], "powerSGD_hook.PowerSGDState.__init__": ["<builtin>.ValueError", "logging.info", "<builtin>.max", "numpy.random.RandomState"], "numpy.random.RandomState": [], "<builtin>.max": [], "powerSGD_hook.PowerSGDState.maybe_increase_iter": ["logging.info"], "powerSGD_hook.PowerSGDState.compression_stats": [], "powerSGD_hook.powerSGD_hook": ["torch.cat", "<builtin>.zip", "powerSGD_hook._orthogonalize", "torch.randn", "torch.matmul", "default_hooks._allreduce_fut", "powerSGD_hook._report_compression_stats", "powerSGD_hook._should_compress", "torch.tensor", "torch.distributed.all_reduce", "torch.random.fork_rng", "torch.empty", "<builtin>.min", "torch.manual_seed", "torch.zeros", "logging.info", "torch.clone"], "torch.zeros": [], "torch.clone": [], "<builtin>.min": [], "torch.cat": [], "torch.tensor": [], "torch.empty": [], "torch.random.fork_rng": [], "torch.manual_seed": [], "torch.randn": [], "torch.matmul": [], "powerSGD_hook.powerSGD_hook.unpack_uncompressed_tensors_and_allreduce_ps": ["torch.distributed.all_reduce"], "powerSGD_hook.powerSGD_hook.compute_qs": ["<builtin>.zip", "powerSGD_hook._orthogonalize", "torch.distributed.all_reduce", "torch.matmul"], "powerSGD_hook.powerSGD_hook.decompress": ["torch.cuda.synchronize", "<builtin>.zip", "torch.matmul", "torch.cuda.is_available"], "torch.cuda.is_available": [], "torch.cuda.synchronize": [], "powerSGD_hook.batched_powerSGD_hook": ["torch.matmul", "powerSGD_hook._orthogonalize", "default_hooks._allreduce_fut", "powerSGD_hook._report_compression_stats", "logging.info", "math.ceil", "torch.distributed.all_reduce", "torch.zeros", "math.sqrt", "torch.clone", "powerSGD_hook.batched_powerSGD_hook.create_low_rank_tensor"], "math.sqrt": [], "math.ceil": [], "powerSGD_hook.batched_powerSGD_hook.create_low_rank_tensor": ["torch.randn", "torch.empty", "torch.manual_seed", "torch.random.fork_rng"], "powerSGD_hook.batched_powerSGD_hook.compute_q": ["torch.matmul", "powerSGD_hook._orthogonalize", "torch.distributed.all_reduce"], "powerSGD_hook.batched_powerSGD_hook.decompress": ["torch.cuda.synchronize", "torch.matmul", "torch.cuda.is_available"], "quantization_hooks": [], "quantization_hooks._quantize_per_tensor_cuda": ["torch.round", "torch.clamp"], "torch.round": [], "torch.clamp": [], "quantization_hooks._dequantize_per_tensor_cuda": [], "quantization_hooks._quantize_per_channel_cuda": ["torch.round", "torch.clamp", "<builtin>.range", "torch.zeros"], "quantization_hooks._dequantize_per_channel_cuda": ["torch.zeros_like", "<builtin>.range"], "torch.zeros_like": [], "quantization_hooks._get_allgather_out_list": ["torch.zeros_like", "<builtin>.range"], "quantization_hooks.quantization_pertensor_hook": ["torch.FloatTensor", "quantization_hooks._get_allgather_out_list", "torch.distributed.get_rank", "torch.quantization.MinMaxObserver", "torch.distributed.all_gather"], "torch.distributed.get_rank": [], "torch.quantization.MinMaxObserver": [], "torch.FloatTensor": [], "torch.distributed.all_gather": [], "quantization_hooks.quantization_pertensor_hook.quantize_and_allgather": ["quantization_hooks._get_allgather_out_list", "torch.distributed.all_gather", "quantization_hooks._quantize_per_tensor_cuda"], "quantization_hooks.quantization_pertensor_hook.dequantize_and_aggregate": ["torch.zeros_like", "quantization_hooks._dequantize_per_tensor_cuda", "<builtin>.enumerate"], "quantization_hooks.quantization_perchannel_hook": ["torch.stack", "torch.nn.functional.pad", "quantization_hooks._get_allgather_out_list", "torch.distributed.get_rank", "torch.quantization.PerChannelMinMaxObserver", "<builtin>.len", "torch.distributed.all_gather"], "torch.nn.functional.pad": [], "torch.quantization.PerChannelMinMaxObserver": [], "torch.stack": [], "quantization_hooks.quantization_perchannel_hook.quantize_and_allgather": ["quantization_hooks._quantize_per_channel_cuda", "torch.distributed.all_gather", "quantization_hooks._get_allgather_out_list"], "quantization_hooks.quantization_perchannel_hook.dequantize_and_aggregate": ["torch.zeros_like", "quantization_hooks._dequantize_per_channel_cuda", "<builtin>.enumerate", "torch.flatten"], "torch.flatten": [], "averagers": [], "averagers.ModelAverager.__init__": [], "averagers.ModelAverager": ["abc.abstractmethod"], "averagers.ModelAverager.average_parameters": [], "averagers.PeriodicModelAverager.__init__": ["warnings.warn", "<builtin>.ValueError", "<builtin>.super"], "averagers.PeriodicModelAverager.average_parameters": ["<builtin>.iter", "torch.distributed.algorithms.model_averaging.utils.average_parameters"], "<builtin>.iter": [], "torch.distributed.algorithms.model_averaging.utils.average_parameters": [], "utils": ["collections.namedtuple", "utils._ntuple", "utils.maybe_dequantize_first_two_tensor_args_and_handle_tuples", "logging.getLogger", "utils._ntuple_from_first", "enum.Enum", "typing.TypeVar", "contextlib.contextmanager", "re.compile"], "utils.average_parameters": ["torch.cat", "torch.cuda.synchronize", "torch.distributed.all_reduce", "torch.cuda.is_available", "torch.distributed._rank_not_in_group", "torch.distributed.get_world_size", "itertools.tee"], "torch.distributed._rank_not_in_group": [], "itertools.tee": [], "torch.distributed.get_world_size": [], "generate_test_torchscripts": ["generate_test_torchscripts.scriptAndSave", "generate_test_torchscripts.Test.__init__"], "generate_test_torchscripts.scriptAndSave": ["torch.jit.script", "<builtin>.print"], "<builtin>.print": [], "torch.jit.script": [], "generate_test_torchscripts.Test.__init__": ["<builtin>.super"], "generate_test_torchscripts.Test": ["torch.jit.script_method"], "torch.jit.script_method": [], "generate_test_torchscripts.Test.forward": [], "generate_test_torchscripts.Test.eqBool": [], "generate_test_torchscripts.Test.eqInt": [], "generate_test_torchscripts.Test.eqFloat": [], "generate_test_torchscripts.Test.eqStr": [], "generate_test_torchscripts.Test.eqTensor": [], "generate_test_torchscripts.Test.eqDictStrKeyIntValue": [], "generate_test_torchscripts.Test.eqDictIntKeyIntValue": [], "generate_test_torchscripts.Test.eqDictFloatKeyIntValue": [], "generate_test_torchscripts.Test.listIntSumReturnTuple": [], "generate_test_torchscripts.Test.listBoolConjunction": [], "generate_test_torchscripts.Test.listBoolDisjunction": [], "generate_test_torchscripts.Test.tupleIntSumReturnTuple": [], "generate_test_torchscripts.Test.optionalIntIsNone": [], "generate_test_torchscripts.Test.intEq0None": [], "generate_test_torchscripts.Test.str3Concat": [], "generate_test_torchscripts.Test.newEmptyShapeWithItem": ["<builtin>.int", "torch.tensor"], "generate_test_torchscripts.Test.testAliasWithOffset": ["torch.tensor"], "generate_test_torchscripts.Test.testNonContiguous": ["torch.tensor"], "generate_test_torchscripts.Test.conv2d": ["torch.nn.functional.conv2d"], "torch.nn.functional.conv2d": [], "generate_test_torchscripts.Test.contiguous": [], "generate_test_torchscripts.Test.contiguousChannelsLast": [], "generate_test_torchscripts.Test.contiguousChannelsLast3d": [], "make_assets": ["torch.rand", "torchvision.models.resnet50", "<builtin>.print", "torch.jit.trace", "torchvision.models.resnet18", "torchvision.models.quantization.mobilenet_v2"], "torchvision.models.resnet18": [], "torch.rand": [], "torch.jit.trace": [], "torchvision.models.resnet50": [], "torchvision.models.quantization.mobilenet_v2": [], "make_assets_custom": ["torch.rand", "torchvision.models.mobilenet_v2", "torch.jit.trace", "<builtin>.open", "torch.jit.export_opnames", "yaml.dump"], "torchvision.models.mobilenet_v2": [], "torch.jit.export_opnames": [], "<builtin>.open": [], "yaml.dump": [], "_mappings": [], "_mappings.get_static_sparse_quantized_mapping": ["<builtin>.dict"], "<builtin>.dict": [], "_mappings.get_dynamic_sparse_quantized_mapping": ["<builtin>.dict"], "sample": ["numpy.testing.assert_array_almost_equal", "numpy.maximum", "onnx.load", "tempfile.NamedTemporaryFile", "torch.nn.Module.__init__", "numpy.random.randn", "torch.autograd.Variable"], "sample.MyFunction.forward": [], "sample.MyFunction.symbolic": [], "sample.MyModule.forward": ["torch.autograd.Function.apply", "torch.nn.ReLU"], "torch.nn.ReLU": [], "torch.autograd.Function.apply": [], "tempfile.NamedTemporaryFile": [], "torch.nn.Module.__init__": [], "torch.autograd.Variable": [], "onnx.load": [], "numpy.random.randn": [], "numpy.maximum": [], "numpy.testing.assert_array_almost_equal": [], "codegen": ["codegen.main", "sys.exit"], "codegen.main": ["pathlib.Path", "textwrap.dedent", "re.findall"], "re.findall": [], "textwrap.dedent": [], "pathlib.Path": [], "sys.exit": [], "tensor": [], "tensor.Type.forward": ["<builtin>.type"], "<builtin>.type": [], "tensor.Type.backward": ["torch.cuda.device"], "torch.cuda.device": [], "tensor.Resize.forward": ["<builtin>.map", "functools.reduce", "<builtin>.RuntimeError"], "tensor.Resize.forward.<lambda1>": [], "functools.reduce": [], "<builtin>.map": [], "tensor.Resize.backward": [], "utils.maybe_view": [], "utils.maybe_unexpand": ["<builtin>.enumerate", "<builtin>.zip", "<builtin>.range", "<builtin>.len"], "utils.check_onnx_broadcast": ["functools.reduce", "<builtin>.len", "<builtin>.ValueError"], "utils.check_onnx_broadcast.<lambda1>": [], "utils.check_onnx_broadcast.<lambda2>": [], "rnn": ["collections.namedtuple"], "rnn.get_cudnn_mode": ["<builtin>.Exception", "<builtin>.int"], "rnn.Unserializable.__init__": [], "rnn.Unserializable.get": [], "rnn.Unserializable.__getstate__": [], "rnn.Unserializable.__setstate__": [], "rnn.init_dropout_state": ["rnn.Unserializable.__init__", "<builtin>.str"], "prepare": [], "prepare.NnapiModule.__init__": ["<builtin>.super"], "prepare.NnapiModule": ["torch.jit.export"], "torch.jit.export": [], "prepare.NnapiModule.init": ["torch.classes._nnapi.Compilation"], "torch.classes._nnapi.Compilation": [], "prepare.NnapiModule.forward": ["<builtin>.Exception", "prepare.NnapiModule.init", "<builtin>.range", "torch.empty_like", "<builtin>.len"], "torch.empty_like": [], "prepare.convert_model_to_nnapi": ["prepare.NnapiModule.__init__", "prepare.convert_model_to_nnapi.NnapiInterfaceWrapper.__init__", "torch.jit.script", "<builtin>.range", "prepare.process_for_nnapi", "<builtin>.len"], "prepare.process_for_nnapi": ["torch.tensor", "torch.jit.freeze", "torch.backends._nnapi.serializer._NnapiSerializer", "torch.jit.script", "<builtin>.isinstance", "torch.nn.Module.__init__"], "prepare.convert_model_to_nnapi.NnapiInterfaceWrapper.__init__": ["<builtin>.super"], "torch.jit.freeze": [], "torch.backends._nnapi.serializer._NnapiSerializer": [], "serializer": ["logging.getLogger"], "logging.getLogger": [], "serializer.approx_equal": ["<builtin>.abs", "<builtin>.min"], "<builtin>.abs": [], "serializer.tensor_size": [], "serializer.change_element": ["<builtin>.list", "<builtin>.tuple"], "serializer.Operand.use_nchw": ["<builtin>.Exception"], "serializer.broadcast_shapes": ["<builtin>.list", "<builtin>.tuple", "<builtin>.zip", "<builtin>.Exception", "<builtin>.len"], "serializer.get_conv_pool_shape": ["<builtin>.Exception"], "serializer.fix_shape": ["<builtin>.Exception", "<builtin>.list", "<builtin>.len", "<builtin>.tuple"], "serializer.reverse_map_dim": [], "serializer.flex_name": [], "serializer._NnapiSerializer.__init__": [], "serializer._NnapiSerializer.get_next_operand_id": ["<builtin>.len"], "serializer._NnapiSerializer.add_tensor_operand": ["<builtin>.isinstance", "<builtin>.Exception", "serializer._NnapiSerializer.get_next_operand_id"], "serializer._NnapiSerializer.add_anonymous_tensor_operand": ["<builtin>.isinstance", "serializer._NnapiSerializer.get_next_operand_id"], "serializer._NnapiSerializer.torch_tensor_to_operand": ["<builtin>.Exception", "<builtin>.str", "<builtin>.tuple", "typing.NamedTuple.__init__"], "typing.NamedTuple.__init__": [], "serializer._NnapiSerializer.add_tensor_operand_for_input": ["serializer._NnapiSerializer.torch_tensor_to_operand", "<builtin>.getattr", "<builtin>.enumerate", "serializer._NnapiSerializer.compute_operand_shape", "serializer._NnapiSerializer.add_tensor_operand"], "<builtin>.getattr": [], "serializer._NnapiSerializer.compute_operand_shape": ["serializer.flex_name"], "serializer._NnapiSerializer.add_tensor_operand_for_weight": ["struct.pack", "<builtin>.len", "serializer._NnapiSerializer.torch_tensor_to_operand", "serializer.tensor_size"], "struct.pack": [], "serializer._NnapiSerializer.add_immediate_operand": ["<builtin>.isinstance", "<builtin>.len", "typing.NamedTuple.__init__"], "serializer._NnapiSerializer.add_immediate_int_scalar": ["struct.pack", "serializer._NnapiSerializer.add_immediate_operand"], "serializer._NnapiSerializer.add_immediate_float_scalar": ["struct.pack", "serializer._NnapiSerializer.add_immediate_operand"], "serializer._NnapiSerializer.add_immediate_bool_scalar": ["serializer._NnapiSerializer.add_immediate_operand"], "serializer._NnapiSerializer.add_immediate_int_vector": ["serializer._NnapiSerializer.add_immediate_operand", "array.array", "<builtin>.len"], "array.array": [], "serializer._NnapiSerializer.get_tensor_operand_by_jitval": [], "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size": ["serializer._NnapiSerializer.get_tensor_operand_by_jitval", "<builtin>.Exception"], "serializer._NnapiSerializer.get_tensor_operand_or_constant": ["serializer._NnapiSerializer.add_tensor_operand_for_weight", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.get_constant_value": ["<builtin>.Exception"], "serializer._NnapiSerializer.get_tensor_operand_for_weight": ["serializer._NnapiSerializer.add_tensor_operand_for_weight", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.add_operation": ["<builtin>.len"], "serializer._NnapiSerializer.add_tensor_sequence": [], "serializer._NnapiSerializer.add_constant_value": [], "serializer._NnapiSerializer.operand_to_template_torchscript": ["serializer.flex_name", "<builtin>.enumerate", "<builtin>.str", "<builtin>.Exception"], "serializer._NnapiSerializer.forward_operand_shape": ["serializer.flex_name", "serializer._NnapiSerializer.compute_operand_shape"], "serializer._NnapiSerializer.transpose_to_nhwc": ["<builtin>.Exception", "serializer._NnapiSerializer.add_immediate_int_vector", "serializer._NnapiSerializer.add_anonymous_tensor_operand", "serializer._NnapiSerializer.add_operation"], "serializer._NnapiSerializer.transpose_for_broadcast": ["<builtin>.Exception", "serializer._NnapiSerializer.transpose_to_nhwc"], "serializer._NnapiSerializer.get_size_arg": ["<builtin>.Exception", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.get_conv_pool_args_2d_from_pack": ["serializer._NnapiSerializer.get_conv_pool_args_2d_common", "<builtin>.len"], "serializer._NnapiSerializer.get_conv_pool_args_2d_common": ["<builtin>.list", "<builtin>.len", "typing.NamedTuple.__init__"], "serializer._NnapiSerializer.get_conv_pool_args_2d_from_jit": ["serializer._NnapiSerializer.get_conv_pool_args_2d_common", "serializer._NnapiSerializer.get_size_arg", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.serialize_model": ["<builtin>.Exception", "<builtin>.enumerate", "serializer.flex_name", "array.array", "<builtin>.int", "serializer.fix_shape", "serializer._NnapiSerializer.serialize_ints", "<builtin>.zip", "<builtin>.len", "serializer.reverse_map_dim", "serializer._NnapiSerializer.add_node", "serializer._NnapiSerializer.serialize_values", "serializer._NnapiSerializer.operand_to_template_torchscript", "serializer._NnapiSerializer.add_constant_value", "<builtin>.next", "<builtin>.list", "serializer._NnapiSerializer.add_immediate_bool_scalar", "struct.pack", "serializer._NnapiSerializer.add_tensor_operand_for_input"], "serializer._NnapiSerializer.add_node": ["<builtin>.Exception"], "serializer._NnapiSerializer.serialize_values": ["struct.pack", "<builtin>.len", "<builtin>.zip"], "serializer._NnapiSerializer.serialize_ints": ["array.array"], "serializer._NnapiSerializer.<dict1>.<lambda1>": [], "serializer._NnapiSerializer.<dict1>.<lambda2>": [], "serializer._NnapiSerializer.<dict1>.<lambda3>": [], "serializer._NnapiSerializer.<dict1>.<lambda4>": [], "serializer._NnapiSerializer.<dict1>.<lambda5>": [], "serializer._NnapiSerializer.<dict1>.<lambda6>": [], "serializer._NnapiSerializer.<dict1>.<lambda7>": [], "serializer._NnapiSerializer.<dict1>.<lambda8>": [], "serializer._NnapiSerializer.<dict1>.<lambda9>": [], "serializer._NnapiSerializer.<dict1>.<lambda10>": [], "serializer._NnapiSerializer.<dict1>.<lambda11>": [], "serializer._NnapiSerializer.<dict1>.<lambda12>": [], "serializer._NnapiSerializer.<dict1>.<lambda13>": [], "serializer._NnapiSerializer.<dict1>.<lambda14>": [], "serializer._NnapiSerializer.<dict1>.<lambda15>": [], "serializer._NnapiSerializer.<dict1>.<lambda16>": [], "serializer._NnapiSerializer.<dict1>.<lambda17>": [], "serializer._NnapiSerializer.<dict1>.<lambda18>": [], "serializer._NnapiSerializer.<dict1>.<lambda19>": [], "serializer._NnapiSerializer.<dict1>.<lambda20>": [], "serializer._NnapiSerializer.<dict1>.<lambda21>": [], "serializer._NnapiSerializer.<dict1>.<lambda22>": [], "serializer._NnapiSerializer.<dict1>.<lambda23>": [], "serializer._NnapiSerializer.<dict1>.<lambda24>": [], "serializer._NnapiSerializer.<dict1>.<lambda25>": [], "serializer._NnapiSerializer.<dict1>.<lambda26>": [], "serializer._NnapiSerializer.<dict1>.<lambda27>": [], "serializer._NnapiSerializer.<dict1>.<lambda28>": [], "serializer._NnapiSerializer.<dict1>.<lambda29>": [], "serializer._NnapiSerializer.<dict1>.<lambda30>": [], "serializer._NnapiSerializer.<dict1>.<lambda31>": [], "serializer._NnapiSerializer.<dict1>.<lambda32>": [], "serializer._NnapiSerializer.<dict1>.<lambda33>": [], "serializer._NnapiSerializer.<dict1>.<lambda34>": [], "serializer._NnapiSerializer.<dict1>.<lambda35>": [], "serializer._NnapiSerializer.<dict1>.<lambda36>": [], "serializer._NnapiSerializer.<dict1>.<lambda37>": [], "serializer._NnapiSerializer.<dict1>.<lambda38>": [], "serializer._NnapiSerializer._identity": ["serializer._NnapiSerializer.get_tensor_operand_by_jitval"], "serializer._NnapiSerializer.add_getattr": ["serializer._NnapiSerializer.add_constant_value", "<builtin>.str", "<builtin>.getattr", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.add_constant_node": ["serializer._NnapiSerializer.add_constant_value"], "serializer._NnapiSerializer.add_list_construct": ["<builtin>.Exception", "serializer._NnapiSerializer.add_constant_value", "serializer._NnapiSerializer.add_tensor_sequence", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.add_tuple_construct": ["serializer._NnapiSerializer.add_tensor_sequence"], "serializer._NnapiSerializer.add_unsqueeze": ["<builtin>.list", "<builtin>.tuple", "serializer._NnapiSerializer.get_constant_value", "serializer._NnapiSerializer.add_immediate_int_scalar", "<builtin>.len", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_to": ["serializer._NnapiSerializer._identity"], "serializer._NnapiSerializer.add_reshape": ["torch.zeros", "serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "<builtin>.len", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_immediate_int_vector", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_flatten": ["<builtin>.any", "<builtin>.tuple", "serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "<builtin>.enumerate", "<builtin>.len", "serializer._NnapiSerializer.add_operation", "functools.reduce", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.forward_operand_shape", "serializer._NnapiSerializer.add_immediate_int_vector", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_flatten.<lambda1>": [], "<builtin>.any": [], "serializer._NnapiSerializer.add_slice": ["<builtin>.tuple", "serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "<builtin>.enumerate", "serializer._NnapiSerializer.add_immediate_int_scalar", "<builtin>.len", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.forward_operand_shape", "serializer._NnapiSerializer.add_immediate_int_vector", "<builtin>.range", "serializer._NnapiSerializer.add_tensor_operand", "serializer._NnapiSerializer._identity"], "serializer._NnapiSerializer.add_size": ["serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_constant_value"], "serializer._NnapiSerializer.add_cat": ["serializer.change_element", "serializer._NnapiSerializer.get_constant_value", "serializer.flex_name", "<builtin>.enumerate", "serializer._NnapiSerializer.add_immediate_int_scalar", "<builtin>.len", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.compute_operand_shape", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.forward_operand_shape", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_mean": ["serializer._NnapiSerializer.get_constant_value", "<builtin>.set", "<builtin>.enumerate", "<builtin>.len", "serializer._NnapiSerializer.add_immediate_int_scalar", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_immediate_int_vector", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_quantize": ["serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_dequantize": ["serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_pointwise_simple_unary_op": ["<builtin>.enumerate", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.forward_operand_shape", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer._do_add_binary": ["<builtin>.zip", "serializer.flex_name", "<builtin>.enumerate", "serializer._NnapiSerializer.add_immediate_int_scalar", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.transpose_for_broadcast", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer.broadcast_shapes", "serializer._NnapiSerializer.forward_operand_shape", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_pointwise_simple_binary_broadcast_op": ["serializer._NnapiSerializer._do_add_binary"], "serializer._NnapiSerializer.add_add_sub_op": ["<builtin>.Exception", "serializer._NnapiSerializer._do_add_binary", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.add_qadd": ["serializer._NnapiSerializer._do_add_binary", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.add_softmax": ["serializer._NnapiSerializer.get_constant_value", "<builtin>.enumerate", "serializer._NnapiSerializer.add_immediate_int_scalar", "serializer._NnapiSerializer.add_immediate_float_scalar", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.forward_operand_shape", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_hardtanh": ["serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_prelu_op": ["serializer._NnapiSerializer.get_tensor_operand_for_weight", "<builtin>.Exception", "<builtin>.enumerate", "<builtin>.len", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.forward_operand_shape", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_pool2d_node": ["serializer._NnapiSerializer.add_immediate_bool_scalar", "<builtin>.Exception", "serializer._NnapiSerializer.get_size_arg", "<builtin>.len", "serializer._NnapiSerializer.add_immediate_int_scalar", "serializer.get_conv_pool_shape", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_tensor_operand", "serializer._NnapiSerializer.get_conv_pool_args_2d_from_jit"], "serializer._NnapiSerializer.add_avg_pool2d": ["serializer._NnapiSerializer.add_immediate_bool_scalar", "serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "serializer._NnapiSerializer.get_size_arg", "<builtin>.len", "serializer._NnapiSerializer.add_immediate_int_scalar", "serializer.get_conv_pool_shape", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer._handle_conv_pool_flexible_input", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.add_tensor_operand", "serializer._NnapiSerializer.get_conv_pool_args_2d_from_jit"], "serializer._NnapiSerializer._handle_conv_pool_flexible_input": ["<builtin>.Exception", "serializer.flex_name", "serializer._NnapiSerializer.compute_operand_shape", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.forward_operand_shape"], "serializer._NnapiSerializer.add_adaptive_avg_pool2d": ["<builtin>.tuple", "serializer._NnapiSerializer.add_immediate_bool_scalar", "serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "serializer._NnapiSerializer.add_immediate_int_scalar", "<builtin>.len", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_upsample_nearest2d": ["serializer._NnapiSerializer.add_immediate_bool_scalar", "serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "serializer.flex_name", "serializer._NnapiSerializer.add_immediate_int_scalar", "<builtin>.len", "serializer._NnapiSerializer.add_immediate_float_scalar", "serializer._NnapiSerializer.add_operation", "<builtin>.all", "<builtin>.isinstance", "serializer._NnapiSerializer.compute_operand_shape", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "<builtin>.int", "serializer._NnapiSerializer.add_tensor_operand"], "<builtin>.all": [], "serializer._NnapiSerializer.add_addmm": ["<builtin>.Exception", "serializer._NnapiSerializer.add_addmm_or_linear", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.add_addmm_or_linear": ["serializer._NnapiSerializer.get_constant_value", "serializer._NnapiSerializer.add_tensor_operand", "serializer._NnapiSerializer.add_immediate_int_scalar", "<builtin>.len", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.add_tensor_operand_for_weight", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.forward_operand_shape", "serializer._NnapiSerializer.get_tensor_operand_for_weight"], "serializer._NnapiSerializer.add_linear": ["serializer._NnapiSerializer.add_addmm_or_linear"], "serializer._NnapiSerializer.add_qlinear": ["torch.quantize_per_tensor", "serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "serializer._NnapiSerializer.add_immediate_int_scalar", "<builtin>.len", "torch._make_per_tensor_quantized_tensor", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.add_tensor_operand_for_weight", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_tensor_operand"], "torch._make_per_tensor_quantized_tensor": [], "torch.quantize_per_tensor": [], "serializer._NnapiSerializer.get_optional_bias": ["serializer._NnapiSerializer.add_tensor_operand_for_weight", "serializer._NnapiSerializer.get_tensor_operand_for_weight", "torch.zeros", "serializer._NnapiSerializer.get_constant_value"], "serializer._NnapiSerializer.add_conv2d": ["serializer._NnapiSerializer.get_optional_bias", "serializer._NnapiSerializer.add_conv2d_common", "serializer._NnapiSerializer.get_constant_value", "serializer._NnapiSerializer.get_conv_pool_args_2d_from_jit"], "serializer._NnapiSerializer.add_conv2d_common": ["serializer._NnapiSerializer.add_immediate_bool_scalar", "<builtin>.Exception", "serializer._NnapiSerializer.add_immediate_int_scalar", "<builtin>.len", "serializer.get_conv_pool_shape", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer._handle_conv_pool_flexible_input", "serializer._NnapiSerializer.add_tensor_operand_for_weight", "serializer.approx_equal", "serializer._NnapiSerializer.get_tensor_operand_by_jitval", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_conv_underscore": ["serializer._NnapiSerializer.get_optional_bias", "serializer._NnapiSerializer.add_conv2d_common", "serializer._NnapiSerializer.get_constant_value", "serializer._NnapiSerializer.get_conv_pool_args_2d_from_jit"], "serializer._NnapiSerializer.add_log_softmax": ["serializer._NnapiSerializer.get_constant_value", "serializer._NnapiSerializer.add_immediate_int_scalar", "serializer._NnapiSerializer.add_immediate_float_scalar", "serializer._NnapiSerializer.add_operation", "serializer._NnapiSerializer.get_tensor_operand_by_jitval_fixed_size", "serializer._NnapiSerializer.add_tensor_operand"], "serializer._NnapiSerializer.add_qconv2d": ["torch.quantize_per_tensor", "serializer._NnapiSerializer.get_constant_value", "<builtin>.Exception", "serializer._NnapiSerializer.add_conv2d_common", "torch._make_per_tensor_quantized_tensor", "serializer._NnapiSerializer.add_tensor_operand_for_weight", "serializer._NnapiSerializer.get_conv_pool_args_2d_from_pack", "serializer._NnapiSerializer.get_tensor_operand_by_jitval"], "serializer.serialize_model": ["serializer._NnapiSerializer.__init__", "serializer._NnapiSerializer.serialize_model"], "bench": ["torch._C._jit_set_te_cuda_pointwise_block_count", "bench.bench_group", "bench.print_json_oss_format", "argparse.ArgumentParser", "torch._C._jit_set_te_cuda_pointwise_block_size", "copy.deepcopy", "bench.print_json_pep_format", "bench.<lambda1>", "fuser.set_fuser", "torch._C._jit_set_te_cuda_pointwise_loop_levels", "<builtin>.vars", "collections.namedtuple", "bench.main"], "collections.namedtuple": [], "bench.fit_str": ["<builtin>.len"], "bench.to_str": ["<builtin>.isinstance", "<builtin>.str"], "bench.print_header": ["bench.fit_str"], "bench.pretty_print": ["bench.fit_str", "bench.to_str"], "bench.Event.__init__": [], "bench.Event.record": [], "bench.Event.elapsed_time": ["<builtin>.isinstance"], "bench.trainbench": ["torch.tensor", "<builtin>.range", "bench.trainbench.train_batch", "<builtin>.zip"], "bench.trainbench.train_batch": ["bench.Event.__init__", "torch.cuda.synchronize", "gc.collect", "torch.cuda.Event"], "torch.cuda.Event": [], "gc.collect": [], "bench.print_stderr": ["<builtin>.print"], "bench.print_json_oss_format": ["json.dumps", "<builtin>.print"], "bench.print_json_pep_format": ["json.dumps", "<builtin>.range", "<builtin>.len", "<builtin>.print"], "bench.bench": ["bench.pretty_print", "bench.trainbench", "bench.print_header", "bench.<lambda1>", "torch.std", "torch.min", "time.time", "torch.tensor", "<builtin>.float", "torch.add", "<builtin>.range"], "bench.<lambda1>": [], "bench.bench_group": ["bench.<lambda1>", "bench.bench", "runner.get_nn_runners"], "runner.get_nn_runners": [], "argparse.ArgumentParser": [], "fuser.set_fuser": ["torch._C._jit_override_can_fuse_on_cpu", "torch._C._jit_set_profiling_mode", "torch._C._jit_set_texpr_fuser_enabled", "torch._C._jit_override_can_fuse_on_gpu", "torch._C._jit_set_profiling_executor"], "torch._C._jit_set_te_cuda_pointwise_loop_levels": [], "torch._C._jit_set_te_cuda_pointwise_block_count": [], "torch._C._jit_set_te_cuda_pointwise_block_size": [], "<builtin>.vars": [], "copy.deepcopy": [], "cells": [], "cells.milstm_cell": [], "cells.lstm_cell": ["torch.sigmoid", "torch.tanh", "torch.mm"], "torch.mm": [], "torch.sigmoid": [], "torch.tanh": [], "cells.flat_lstm_cell": ["torch.sigmoid", "torch.tanh", "torch.mm"], "cells.premul_lstm_cell": ["torch.sigmoid", "torch.tanh", "torch.mm"], "cells.premul_lstm_cell_no_bias": ["torch.sigmoid", "torch.tanh", "torch.mm"], "cells.gru_cell": ["torch.sigmoid", "torch.tanh", "torch.mm"], "cells.rnn_relu_cell": ["torch.relu", "torch.mm"], "torch.relu": [], "cells.rnn_tanh_cell": ["torch.tanh", "torch.mm"], "conftest": [], "conftest.pytest_generate_tests": [], "conftest.pytest_addoption": [], "custom_lstms": ["custom_lstms.test_script_rnn_layer", "custom_lstms.test_script_stacked_lnlstm", "custom_lstms.test_script_stacked_bidir_rnn", "custom_lstms.test_script_stacked_lstm_dropout", "collections.namedtuple", "custom_lstms.test_script_stacked_rnn"], "custom_lstms.script_lstm": ["custom_lstms.StackedLSTM.__init__", "custom_lstms.StackedLSTM2.__init__", "custom_lstms.StackedLSTMWithDropout.__init__"], "custom_lstms.StackedLSTM.__init__": ["custom_lstms.init_stacked_lstm", "<builtin>.super"], "custom_lstms.StackedLSTMWithDropout.__init__": ["torch.nn.Dropout", "custom_lstms.init_stacked_lstm", "<builtin>.super", "warnings.warn"], "custom_lstms.StackedLSTM2.__init__": ["custom_lstms.init_stacked_lstm", "<builtin>.super"], "custom_lstms.script_lnlstm": ["custom_lstms.StackedLSTM.__init__", "custom_lstms.StackedLSTM2.__init__"], "custom_lstms.reverse": [], "custom_lstms.LSTMCell.__init__": ["torch.nn.Parameter", "torch.randn", "<builtin>.super"], "torch.nn.Parameter": [], "custom_lstms.LSTMCell": ["torch.jit.script_method"], "custom_lstms.LSTMCell.forward": ["torch.tanh", "torch.sigmoid", "torch.mm"], "custom_lstms.LayerNorm.__init__": ["<builtin>.super", "torch.nn.Parameter", "torch.Size", "<builtin>.len", "torch.zeros", "torch.ones", "<builtin>.isinstance"], "torch.Size": [], "torch.ones": [], "custom_lstms.LayerNorm": ["torch.jit.script_method"], "custom_lstms.LayerNorm.compute_layernorm_stats": [], "custom_lstms.LayerNorm.forward": ["custom_lstms.LayerNorm.compute_layernorm_stats"], "custom_lstms.LayerNormLSTMCell.__init__": ["<builtin>.super", "torch.nn.Parameter", "torch.nn.LayerNorm", "custom_lstms.LayerNorm.__init__", "torch.randn"], "torch.nn.LayerNorm": [], "custom_lstms.LayerNormLSTMCell": ["torch.jit.script_method"], "custom_lstms.LayerNormLSTMCell.forward": ["torch.tanh", "torch.sigmoid", "torch.mm"], "custom_lstms.LSTMLayer.__init__": ["<builtin>.super", "custom_lstms.LSTMCell.__init__"], "custom_lstms.LSTMLayer": ["torch.jit.script_method"], "custom_lstms.LSTMLayer.forward": ["torch.jit.annotate", "<builtin>.range", "torch.stack", "<builtin>.len"], "torch.jit.annotate": [], "custom_lstms.ReverseLSTMLayer.__init__": ["<builtin>.super"], "custom_lstms.ReverseLSTMLayer": ["torch.jit.script_method"], "custom_lstms.ReverseLSTMLayer.forward": ["torch.jit.annotate", "custom_lstms.reverse", "<builtin>.range", "<builtin>.len", "torch.stack"], "custom_lstms.BidirLSTMLayer.__init__": ["custom_lstms.ReverseLSTMLayer.__init__", "torch.nn.ModuleList", "<builtin>.super", "custom_lstms.LSTMLayer.__init__"], "torch.nn.ModuleList": [], "custom_lstms.BidirLSTMLayer": ["torch.jit.script_method"], "custom_lstms.BidirLSTMLayer.forward": ["torch.jit.annotate", "torch.cat"], "custom_lstms.init_stacked_lstm": ["<builtin>.range", "torch.nn.ModuleList", "custom_lstms.BidirLSTMLayer.__init__", "custom_lstms.LSTMLayer.__init__"], "custom_lstms.StackedLSTM": ["torch.jit.script_method"], "custom_lstms.StackedLSTM.forward": ["torch.jit.annotate"], "custom_lstms.StackedLSTM2": ["torch.jit.script_method"], "custom_lstms.StackedLSTM2.forward": ["torch.jit.annotate"], "torch.nn.Dropout": [], "custom_lstms.StackedLSTMWithDropout": ["torch.jit.script_method"], "custom_lstms.StackedLSTMWithDropout.forward": ["torch.jit.annotate"], "custom_lstms.flatten_states": ["<builtin>.zip", "<builtin>.list", "torch.stack", "<builtin>.len"], "custom_lstms.double_flatten_states": ["custom_lstms.flatten_states", "<builtin>.list"], "custom_lstms.test_script_rnn_layer": ["torch.jit.ScriptModule.parameters", "<builtin>.zip", "torch.nn.LSTM", "custom_lstms.LSTMLayer.__init__", "torch.no_grad", "torch.randn"], "torch.nn.LSTM": [], "torch.jit.ScriptModule.parameters": [], "torch.no_grad": [], "custom_lstms.test_script_stacked_rnn": ["<builtin>.list", "<builtin>.range", "custom_lstms.script_lstm", "<builtin>.zip", "torch.nn.LSTM", "torch.no_grad", "torch.randn", "custom_lstms.flatten_states"], "custom_lstms.test_script_stacked_bidir_rnn": ["<builtin>.list", "<builtin>.range", "custom_lstms.script_lstm", "<builtin>.zip", "torch.nn.LSTM", "torch.no_grad", "torch.randn", "custom_lstms.double_flatten_states"], "custom_lstms.test_script_stacked_lstm_dropout": ["torch.randn", "custom_lstms.script_lstm", "<builtin>.range"], "custom_lstms.test_script_stacked_lnlstm": ["torch.randn", "<builtin>.range", "custom_lstms.script_lnlstm"], "factory": ["collections.namedtuple"], "factory.flatten_list": [], "factory.lstm_backward_setup": ["factory.simple_backward_setup"], "factory.simple_backward_setup": ["<builtin>.isinstance", "torch.randn_like", "torch.manual_seed"], "torch.randn_like": [], "factory.simple_backward": [], "factory.pytorch_lstm_creator": ["factory.flatten_list", "factory.lstm_inputs"], "factory.lstm_inputs": ["torch.randn", "torch.nn.LSTM", "torch.manual_seed"], "factory.lstm_creator": ["factory.lstm_factory", "factory.flatten_list", "factory.lstm_inputs"], "factory.lstm_factory": ["torch.jit.script"], "factory.lnlstm_creator": ["torch.randn", "custom_lstms.script_lnlstm"], "factory.dropoutlstm_creator": ["<builtin>.range", "torch.randn", "custom_lstms.LSTMState", "custom_lstms.script_lstm"], "custom_lstms.LSTMState": [], "factory.lstm_premul_creator": ["factory.lstm_factory_premul", "factory.flatten_list", "factory.lstm_inputs"], "factory.lstm_factory_premul": ["torch.jit.script"], "factory.lstm_premul_bias_creator": ["factory.lstm_factory_premul_bias", "factory.flatten_list", "factory.lstm_inputs"], "factory.lstm_factory_premul_bias": ["torch.jit.script"], "factory.lstm_simple_creator": ["factory.lstm_factory_simple", "factory.flatten_list", "factory.lstm_inputs"], "factory.lstm_factory_simple": ["torch.jit.script"], "factory.lstm_multilayer_creator": ["factory.lstm_factory_multilayer", "factory.flatten_list", "factory.lstm_inputs"], "factory.lstm_factory_multilayer": ["torch.jit.script"], "factory.imagenet_cnn_creator": [], "factory.imagenet_cnn_creator.creator": ["torch.randn", "torch.jit.trace", "<builtin>.list"], "factory.varlen_lstm_inputs": ["torch.randint", "torch.randn", "torch.nn.LSTM", "torch.manual_seed"], "torch.randint": [], "factory.varlen_lstm_backward_setup": ["torch.randn_like", "torch.nn.utils.rnn.pad_sequence", "torch.manual_seed"], "torch.nn.utils.rnn.pad_sequence": [], "factory.varlen_pytorch_lstm_creator": ["factory.varlen_lstm_inputs", "factory.flatten_list"], "factory.varlen_pytorch_lstm_creator.forward": ["torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pack_sequence"], "torch.nn.utils.rnn.pack_sequence": [], "torch.nn.utils.rnn.pad_packed_sequence": [], "factory.varlen_lstm_factory": ["torch.jit.script"], "factory.varlen_lstm_factory.dynamic_rnn": ["torch.stack", "<builtin>.range", "cells.lstm_cell", "<builtin>.len"], "factory.varlen_lstm_creator": ["factory.varlen_lstm_inputs", "factory.varlen_lstm_factory", "factory.flatten_list"], "factory.layernorm_pytorch_lstm_creator": ["torch.randn", "torch.nn.LayerNorm", "factory.flatten_list", "factory.lstm_inputs"], "factory.layernorm_pytorch_lstm_creator.forward": ["<builtin>.range", "<builtin>.len"], "factory.stack_weights": ["torch.stack", "factory.stack_weights.unzip_columns"], "factory.stack_weights.unzip_columns": ["<builtin>.isinstance", "<builtin>.range", "<builtin>.len"], "factory.lstm_factory.dynamic_rnn": ["torch.stack", "<builtin>.range", "cells.lstm_cell", "<builtin>.len"], "factory.lstm_factory_premul.dynamic_rnn": ["<builtin>.range", "<builtin>.len", "torch.stack", "torch.matmul", "cells.premul_lstm_cell"], "factory.lstm_factory_premul_bias.dynamic_rnn": ["<builtin>.range", "<builtin>.len", "torch.stack", "cells.premul_lstm_cell_no_bias", "torch.mm"], "factory.lstm_factory_simple.dynamic_rnn": ["cells.flat_lstm_cell", "<builtin>.range", "<builtin>.len"], "factory.lstm_factory_multilayer.dynamic_rnn": ["torch.stack", "<builtin>.range", "cells.lstm_cell", "<builtin>.len"], "fuser": [], "torch._C._jit_set_profiling_executor": [], "torch._C._jit_set_profiling_mode": [], "torch._C._jit_override_can_fuse_on_cpu": [], "torch._C._jit_override_can_fuse_on_gpu": [], "torch._C._jit_set_texpr_fuser_enabled": [], "profile": ["<builtin>.print", "profile.full_profile", "argparse.ArgumentParser", "profile.profile", "<builtin>.vars"], "profile.run_rnn": ["<builtin>.range", "profile.run_rnn.run_iter", "<builtin>.dict"], "profile.run_rnn.run_iter": ["torch.cuda.synchronize"], "profile.profile": ["time.sleep", "profile.run_rnn", "runner.get_nn_runners", "<builtin>.dict"], "profile.system": ["<builtin>.print", "subprocess.Popen"], "subprocess.Popen": [], "profile.describe_sizes": [], "profile.nvprof_output_filename": ["datetime.datetime.now", "profile.describe_sizes"], "datetime.datetime.now": [], "profile.nvprof": ["profile.system"], "profile.full_profile": ["profile.nvprof_output_filename", "profile.nvprof", "<builtin>.RuntimeError"], "runner": ["functools.partial", "factory.imagenet_cnn_creator", "collections.namedtuple", "multiprocessing.cpu_count"], "runner.DisableCuDNN.__enter__": [], "runner.DisableCuDNN.__exit__": [], "runner.DummyContext.__enter__": [], "runner.DummyContext.__exit__": [], "runner.AssertNoJIT.__enter__": ["os.environ.get"], "os.environ.get": [], "runner.AssertNoJIT.__exit__": [], "functools.partial": [], "scratch": ["scratch.recurrent", "torch.jit.script", "torch.tensor", "torch.randn", "scratch.recurrent_scaleshift"], "scratch.fn": [], "scratch.recurrent": ["scratch.fn", "<builtin>.range"], "scratch.recurrent_scaleshift": ["<builtin>.range"], "test_bench": ["pytest.fixture"], "pytest.fixture": [], "test_bench.modeldef": ["runner.get_nn_runners", "fuser.set_fuser"], "test_bench.cuda_sync": ["torch.cuda.synchronize"], "test_bench.TestBenchNetwork.test_forward": [], "test_bench.TestBenchNetwork.test_backward": [], "test": ["<builtin>.print", "runner.get_nn_runners", "argparse.ArgumentParser", "test.test_vl_py", "test.test_rnns", "torch.cuda.is_available", "<builtin>.vars"], "test.barf": ["pdb.set_trace"], "pdb.set_trace": [], "test.assertEqual": ["test.barf", "test.assertEqual", "<builtin>.zip", "<builtin>.isinstance"], "test.filter_requires_grad": [], "test.test_rnns": ["factory.pytorch_lstm_creator", "<builtin>.print", "test.assertEqual", "<builtin>.dict"], "test.test_vl_py": ["<builtin>.print", "factory.varlen_pytorch_lstm_creator", "torch.cat", "test.assertEqual", "torch.nn.utils.rnn.pad_sequence", "runner.get_nn_runners"], "C2Module": ["caffe2.python.workspace.GlobalInit"], "caffe2.python.workspace.GlobalInit": [], "C2Module.add_blob": ["numpy.random.randn", "caffe2.python.workspace.FeedBlob"], "caffe2.python.workspace.FeedBlob": [], "C2Module.C2SimpleNet.__init__": ["caffe2.python.workspace.CreateNet", "<builtin>.print", "<builtin>.range", "<builtin>.getattr", "<builtin>.len", "C2Module.add_blob", "caffe2.python.core.Net"], "caffe2.python.core.Net": [], "caffe2.python.workspace.CreateNet": [], "C2Module.C2SimpleNet.forward": ["caffe2.python.workspace.RunNet"], "caffe2.python.workspace.RunNet": [], "utils.ms_to_us": [], "utils.secs_to_us": [], "utils.secs_to_ms": [], "utils.benchmark_using_throughput_benchmark": ["torch.utils.ThroughputBenchmark", "<builtin>.print"], "torch.utils.ThroughputBenchmark": [], "utils.benchmark_module": ["utils.secs_to_ms", "utils.benchmark_using_throughput_benchmark", "time.time", "<builtin>.print", "pt_wrapper_module.WrapperModule.forward", "C2Module.C2SimpleNet.forward"], "framework_overhead_benchmark": ["framework_overhead_benchmark.main"], "framework_overhead_benchmark.parse_op_args": [], "framework_overhead_benchmark.print_results": ["<builtin>.print", "utils.ms_to_us"], "framework_overhead_benchmark.benchmark_simple_fn": ["utils.benchmark_module", "<builtin>.str", "pt_wrapper_module.WrapperModule.__init__", "C2Module.C2SimpleNet.__init__", "<builtin>.print"], "pt_wrapper_module.WrapperModule.__init__": ["<builtin>.isinstance", "torch.jit.trace", "torch.randn", "<builtin>.print", "<builtin>.range", "torch.jit.save", "SimpleAddModule.SimpleAddModule.__init__"], "framework_overhead_benchmark.main": ["framework_overhead_benchmark.benchmark_simple_fn", "<builtin>.print", "framework_overhead_benchmark.print_results", "argparse.ArgumentParser"], "pt_wrapper_module.WrapperModule.forward": ["<builtin>.range", "torch.no_grad"], "pt_wrapper_module": [], "SimpleAddModule.SimpleAddModule.__init__": ["<builtin>.super"], "torch.jit.save": [], "SimpleAddModule": [], "SimpleAddModule.add_tensors_loop": ["<builtin>.range", "torch.add"], "torch.add": [], "SimpleAddModule.SimpleAddModule.forward": [], "audio_text_models": [], "audio_text_models.get_wav2letter": ["utils.extract_weights", "torchaudio_models.Wav2Letter.__init__", "torch.nn.Module.to", "torch.rand", "torch.nn.NLLLoss"], "torchaudio_models.Wav2Letter.__init__": ["<builtin>.super", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Sequential"], "torch.nn.NLLLoss": [], "torch.nn.Module.to": [], "utils.extract_weights": ["<builtin>.tuple", "utils._del_nested_attr", "torch.nn.Module.named_parameters", "<builtin>.list", "torch.nn.Module.parameters"], "audio_text_models.get_wav2letter.forward": ["torchaudio_models.Wav2Letter.__init__", "utils.load_weights"], "utils.load_weights": ["utils._set_nested_attr", "<builtin>.zip"], "audio_text_models.get_deepspeech": ["utils.extract_weights", "torch.nn.Module.to", "torch.rand", "torchaudio_models.DeepSpeech.__init__", "<builtin>.dict", "torch.full", "torch.nn.CTCLoss"], "torch.full": [], "torchaudio_models.DeepSpeech.__init__": ["torch.nn.BatchNorm2d", "<builtin>.int", "torch.nn.BatchNorm1d", "torch.nn.Module.__init__", "torch.nn.Linear", "torchaudio_models.SequenceWise.__init__", "torch.nn.Sequential", "torch.nn.Hardtanh", "torchaudio_models.BatchRNN.__init__", "<builtin>.len", "<builtin>.super", "torchaudio_models.MaskConv.__init__", "<builtin>.range", "torchaudio_models.Lookahead.__init__", "math.floor", "torch.nn.Conv2d", "collections.OrderedDict"], "torch.nn.CTCLoss": [], "audio_text_models.get_deepspeech.forward": ["torchaudio_models.DeepSpeech.__init__", "utils.load_weights"], "audio_text_models.get_transformer": ["utils.extract_weights", "torch.nn.Module.to", "torch.rand", "torchaudio_models.TransformerModel.__init__", "torch.nn.NLLLoss"], "torchaudio_models.TransformerModel.__init__": ["torch.nn.TransformerEncoderLayer", "torch.nn.Linear", "<builtin>.super", "torch.nn.TransformerEncoder", "torchaudio_models.PositionalEncoding.__init__", "torch.nn.Embedding", "torchaudio_models.TransformerModel.init_weights", "<builtin>.ImportError"], "audio_text_models.get_transformer.forward": ["utils.load_weights", "torchaudio_models.TransformerModel.__init__"], "audio_text_models.get_multiheadattn": ["torchaudio_models.MultiheadAttentionContainer.__init__", "torch.randint", "torch.nn.Linear", "utils.extract_weights", "torch.nn.Module.to", "torch.stack", "torch.rand", "torchaudio_models.ScaledDotProduct.__init__", "torchaudio_models.InProjContainer.__init__"], "torch.nn.Linear": [], "torchaudio_models.InProjContainer.__init__": ["<builtin>.super"], "torchaudio_models.ScaledDotProduct.__init__": ["<builtin>.super"], "torchaudio_models.MultiheadAttentionContainer.__init__": ["<builtin>.super"], "audio_text_models.get_multiheadattn.forward": ["torchaudio_models.MultiheadAttentionContainer.__init__", "utils.load_weights"], "utils._del_nested_attr": ["utils._del_nested_attr", "<builtin>.delattr", "<builtin>.getattr", "<builtin>.len"], "<builtin>.delattr": [], "utils._set_nested_attr": ["<builtin>.setattr", "utils._set_nested_attr", "<builtin>.getattr", "<builtin>.len"], "<builtin>.setattr": [], "torch.nn.Module.parameters": [], "torch.nn.Module.named_parameters": [], "utils.to_markdown_table": ["<builtin>.len", "utils.to_markdown_table.write_line"], "utils.to_markdown_table.write_line": ["<builtin>.str"], "utils.from_markdown_table": ["<builtin>.float", "collections.defaultdict", "compare.defaultdict"], "collections.defaultdict": [], "<builtin>.float": [], "torchaudio_models": [], "torch.nn.Conv1d": [], "torch.nn.Sequential": [], "torchaudio_models.Wav2Letter.forward": ["torch.nn.functional.log_softmax"], "torch.nn.functional.log_softmax": [], "torchaudio_models.SequenceWise.__init__": ["<builtin>.super"], "torchaudio_models.SequenceWise.forward": [], "torchaudio_models.SequenceWise.__repr__": [], "torchaudio_models.MaskConv.__init__": ["<builtin>.super"], "torchaudio_models.MaskConv.forward": ["torch.BoolTensor", "torch.nn.Module.__init__", "<builtin>.enumerate"], "torch.BoolTensor": [], "torchaudio_models.InferenceBatchSoftmax.forward": ["torch.nn.functional.softmax"], "torch.nn.functional.softmax": [], "torchaudio_models.BatchRNN.__init__": ["<builtin>.super", "torch.nn.BatchNorm1d", "torch.nn.LSTM", "torchaudio_models.SequenceWise.__init__"], "torch.nn.BatchNorm1d": [], "torchaudio_models.BatchRNN.flatten_parameters": [], "torchaudio_models.BatchRNN.forward": ["torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pack_padded_sequence"], "torch.nn.utils.rnn.pack_padded_sequence": [], "torchaudio_models.Lookahead.__init__": ["<builtin>.super", "torch.nn.Conv1d"], "torchaudio_models.Lookahead.forward": ["torch.nn.functional.pad"], "torchaudio_models.Lookahead.__repr__": ["<builtin>.str"], "torch.nn.Conv2d": [], "torch.nn.BatchNorm2d": [], "torch.nn.Hardtanh": [], "math.floor": [], "collections.OrderedDict": [], "torchaudio_models.DeepSpeech.forward": ["torch.nn.Module.__init__", "torch.nn.Module.view", "torchaudio_models.MaskConv.__init__", "torch.nn.Module.size", "torchaudio_models.DeepSpeech.get_seq_lens", "torch.nn.Module.transpose"], "torchaudio_models.DeepSpeech.get_seq_lens": ["<builtin>.type", "torch.nn.Module.modules"], "torch.nn.Module.size": [], "torch.nn.Module.view": [], "torch.nn.Module.transpose": [], "torch.nn.Module.modules": [], "torchaudio_models.PositionalEncoding.__init__": ["torch.exp", "math.log", "torch.zeros", "<builtin>.super", "torch.nn.Module.register_buffer", "torch.nn.Dropout", "torch.cos", "torch.arange", "torch.sin"], "torch.arange": [], "math.log": [], "torch.exp": [], "torch.sin": [], "torch.cos": [], "torch.nn.Module.register_buffer": [], "torchaudio_models.PositionalEncoding.forward": [], "<builtin>.ImportError": [], "torch.nn.TransformerEncoderLayer": [], "torch.nn.TransformerEncoder": [], "torch.nn.Embedding": [], "torchaudio_models.TransformerModel.init_weights": ["torch.nn.init.uniform_"], "torch.nn.init.uniform_": [], "torchaudio_models.TransformerModel.forward": ["torch.nn.Transformer.generate_square_subsequent_mask", "torch.nn.functional.log_softmax", "<builtin>.len", "torchaudio_models.PositionalEncoding.__init__", "math.sqrt"], "torch.nn.Transformer.generate_square_subsequent_mask": [], "torchaudio_models.MultiheadAttentionContainer.forward": ["torchaudio_models.InProjContainer.__init__", "torchaudio_models.ScaledDotProduct.__init__"], "torchaudio_models.ScaledDotProduct.forward": ["torch.matmul", "torch.nn.functional.dropout", "torch.cat", "<builtin>.float", "<builtin>.RuntimeError", "torch.nn.functional.pad", "torch.nn.functional.softmax", "<builtin>.max"], "torch.nn.functional.dropout": [], "torchaudio_models.InProjContainer.forward": [], "compare": ["compare.main"], "compare.main": ["<builtin>.print", "utils.to_markdown_table", "utils.from_markdown_table", "compare.defaultdict", "argparse.ArgumentParser", "collections.defaultdict", "<builtin>.open", "<builtin>.len", "compare.FauxTorch.__init__", "torch.utils.benchmark.Compare", "pickle.dumps", "pickle.loads", "<builtin>.enumerate", "sys.stdout.flush", "torch.utils.benchmark.Timer", "compare.gen_sparse"], "compare.defaultdict": [], "ppl_models": [], "ppl_models.get_simple_regression": ["torch.rand", "torch.distributions.Normal"], "torch.distributions.Normal": [], "ppl_models.get_simple_regression.forward": ["torch.distributions.Bernoulli"], "torch.distributions.Bernoulli": [], "ppl_models.get_robust_regression": ["torch.rand", "torch.distributions.Exponential", "torch.distributions.Normal", "torch.distributions.Gamma"], "torch.distributions.Gamma": [], "torch.distributions.Exponential": [], "ppl_models.get_robust_regression.forward": ["torch.distributions.StudentT"], "torch.distributions.StudentT": [], "torchvision_models": ["torch.no_grad"], "torchvision_models.conv3x3": ["torch.nn.Conv2d"], "torchvision_models.conv1x1": ["torch.nn.Conv2d"], "torchvision_models.BasicBlock.__init__": ["torchvision_models.conv3x3", "<builtin>.super", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "<builtin>.NotImplementedError", "<builtin>.ValueError"], "torchvision_models.BasicBlock.forward": [], "torchvision_models.Bottleneck.__init__": ["<builtin>.int", "torchvision_models.conv3x3", "<builtin>.super", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torchvision_models.conv1x1"], "torchvision_models.Bottleneck.forward": [], "torchvision_models.ResNet.__init__": ["torchvision_models.ResNet._make_layer", "torch.nn.AdaptiveAvgPool2d", "<builtin>.len", "torch.nn.init.constant_", "<builtin>.super", "<builtin>.isinstance", "torch.nn.Linear", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Module.modules", "torch.nn.init.kaiming_normal_", "<builtin>.ValueError"], "torch.nn.MaxPool2d": [], "torchvision_models.ResNet._make_layer": ["torchvision_models.Bottleneck.__init__", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "<builtin>.range", "torchvision_models.BasicBlock.__init__", "torchvision_models.conv1x1"], "torch.nn.AdaptiveAvgPool2d": [], "torch.nn.init.kaiming_normal_": [], "torch.nn.init.constant_": [], "torchvision_models.ResNet._forward_impl": ["torch.flatten"], "torchvision_models.ResNet.forward": ["torchvision_models.ResNet._forward_impl"], "torchvision_models._resnet": ["torchvision_models.ResNet.__init__"], "torchvision_models.resnet18": ["torchvision_models._resnet"], "torchvision_models.resnet50": ["torchvision_models._resnet"], "torchvision_models.IntermediateLayerGetter.__init__": ["<builtin>.set", "collections.OrderedDict", "<builtin>.super", "torch.nn.ModuleDict.named_children", "torch.nn.Module.named_children", "<builtin>.str", "<builtin>.ValueError"], "torch.nn.ModuleDict.named_children": [], "torch.nn.Module.named_children": [], "torchvision_models.IntermediateLayerGetter.forward": ["torch.nn.ModuleDict.items", "collections.OrderedDict"], "torch.nn.ModuleDict.items": [], "torchvision_models._SimpleSegmentationModel.__init__": ["<builtin>.super"], "torchvision_models._SimpleSegmentationModel.forward": ["collections.OrderedDict", "torch.nn.functional.interpolate"], "torch.nn.functional.interpolate": [], "torchvision_models.FCNHead.__init__": ["torch.nn.Dropout", "<builtin>.super", "torch.nn.ReLU", "torch.nn.BatchNorm2d", "torch.nn.Conv2d"], "torchvision_models._segm_resnet": ["torchvision_models.resnet50", "torchvision_models.FCNHead.__init__", "torchvision_models.IntermediateLayerGetter.__init__"], "torchvision_models._load_model": ["torchvision_models._segm_resnet"], "torchvision_models.fcn_resnet50": ["torchvision_models._load_model"], "torchvision_models.DETR.__init__": ["torch.rand", "<builtin>.super", "torch.nn.Transformer", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Conv2d", "torchvision_models.resnet50"], "torch.nn.Transformer": [], "torchvision_models.DETR.forward": ["torch.cat"], "torchvision_models.generalized_box_iou": ["torchvision_models.box_iou", "torch.max", "torch.min"], "torchvision_models.box_iou": ["torchvision_models.box_area", "torch.max", "torch.min"], "torch.min": [], "torch.max": [], "torchvision_models.box_cxcywh_to_xyxy": ["torch.stack"], "torchvision_models.box_area": [], "torchvision_models.is_dist_avail_and_initialized": [], "torchvision_models.get_world_size": ["torchvision_models.is_dist_avail_and_initialized"], "torchvision_models.accuracy": ["<builtin>.max", "torch.zeros"], "torchvision_models.SetCriterion.__init__": ["torch.ones", "torch.nn.Module.register_buffer", "<builtin>.super"], "torchvision_models.SetCriterion.loss_labels": ["torch.nn.functional.cross_entropy", "torch.cat", "<builtin>.zip", "torchvision_models.accuracy", "torch.full", "torchvision_models.SetCriterion._get_src_permutation_idx"], "torchvision_models.SetCriterion._get_src_permutation_idx": ["torch.full_like", "<builtin>.enumerate", "torch.cat"], "torch.nn.functional.cross_entropy": [], "torchvision_models.SetCriterion": ["torch.no_grad"], "torchvision_models.SetCriterion.loss_cardinality": ["torch.nn.functional.l1_loss", "torch.as_tensor", "<builtin>.len"], "torch.as_tensor": [], "torch.nn.functional.l1_loss": [], "torchvision_models.SetCriterion.loss_boxes": ["torchvision_models.box_cxcywh_to_xyxy", "torch.nn.functional.l1_loss", "torchvision_models.generalized_box_iou", "torch.cat", "<builtin>.zip", "torch.diag", "torchvision_models.SetCriterion._get_src_permutation_idx"], "torch.diag": [], "torchvision_models.SetCriterion.loss_masks": ["torchvision_models.SetCriterion._get_tgt_permutation_idx", "torchvision_models.SetCriterion._get_src_permutation_idx"], "torchvision_models.SetCriterion._get_tgt_permutation_idx": ["torch.full_like", "<builtin>.enumerate", "torch.cat"], "torch.full_like": [], "torchvision_models.SetCriterion.get_loss": [], "torchvision_models.SetCriterion.forward": ["torchvision_models.is_dist_avail_and_initialized", "torch.as_tensor", "<builtin>.len", "<builtin>.iter", "torch.distributed.all_reduce", "torch.clamp", "<builtin>.enumerate", "torchvision_models.get_world_size", "<builtin>.sum", "torchvision_models.SetCriterion.get_loss", "<builtin>.next", "torchvision_models.HungarianMatcher.__init__"], "<builtin>.sum": [], "torchvision_models.HungarianMatcher.__init__": ["<builtin>.super"], "torchvision_models.HungarianMatcher": ["torch.no_grad"], "torchvision_models.HungarianMatcher.forward": ["torchvision_models.box_cxcywh_to_xyxy", "<builtin>.len", "scipy.optimize.linear_sum_assignment", "torch.as_tensor", "torchvision_models.generalized_box_iou", "torch.cat", "<builtin>.enumerate", "torch.cdist", "<builtin>.RuntimeError"], "torch.cdist": [], "scipy.optimize.linear_sum_assignment": [], "vision_models": [], "vision_models.get_resnet18": ["utils.extract_weights", "torch.nn.Module.to", "torch.rand", "torch.nn.CrossEntropyLoss", "torchvision_models.resnet18"], "torch.nn.CrossEntropyLoss": [], "vision_models.get_resnet18.forward": ["torchvision_models.ResNet.__init__", "utils.load_weights"], "vision_models.get_fcn_resnet": ["utils.extract_weights", "torch.rand", "torchvision_models.fcn_resnet50", "torch.nn.MSELoss"], "torch.nn.MSELoss": [], "vision_models.get_fcn_resnet.forward": ["utils.load_weights"], "vision_models.get_detr": ["torchvision_models.DETR.__init__", "utils.extract_weights", "<builtin>.int", "torch.nn.Module.to", "torch.rand", "<builtin>.tuple", "<builtin>.range", "torchvision_models.HungarianMatcher.__init__", "torch.randint", "torchvision_models.SetCriterion.__init__"], "vision_models.get_detr.forward": ["torchvision_models.DETR.__init__", "utils.load_weights", "typing.cast", "<builtin>.sum", "torchvision_models.SetCriterion.__init__"], "typing.cast": [], "main": ["<builtin>.list", "argparse.ArgumentParser", "main.main", "os.path.abspath"], "main.main": ["core.expand.materialize", "execution.work.WorkOrder", "execution.runner.Runner", "<builtin>.tuple", "<builtin>.print", "<builtin>.isinstance", "main._run", "sys.exit", "pickle.dump", "pickle.Unpickler.__init__", "main.WorkerUnpickler.load_input", "io.StringIO", "traceback.print_exc", "os.path.split", "os.path.exists", "os.getpid", "<builtin>.open"], "execution.work.WorkOrder": [], "core.expand.materialize": ["core.api.AutoLabels", "uuid.uuid4", "<builtin>.isinstance", "itertools.product", "core.expand._get_stmt", "definitions.standard.BENCHMARKS.items", "core.expand._get_setup", "re.sub", "textwrap.dedent", "core.expand._generate_torchscript_file", "<builtin>.tuple", "worker.main.WorkerTimerArgs"], "execution.runner.Runner": [], "execution.runner": ["multiprocessing.cpu_count"], "multiprocessing.cpu_count": [], "execution.runner.WorkerFailed.__init__": ["<builtin>.super"], "execution.runner.CorePool.__init__": ["threading.Lock", "<builtin>.print", "<builtin>.range"], "threading.Lock": [], "execution.runner.CorePool.reserve": ["<builtin>.tuple", "<builtin>.all", "<builtin>.range"], "execution.runner.CorePool.release": [], "execution.runner.Runner.__init__": ["<builtin>.list", "execution.runner.CorePool.__init__", "<builtin>.ValueError", "<builtin>.set", "<builtin>.len"], "execution.runner.Runner.run": ["<builtin>.print"], "execution.runner.Runner._run": ["time.sleep", "<builtin>.print", "<builtin>.max", "time.time"], "execution.runner.Runner._update_active_jobs": ["execution.runner.WorkerFailed.__init__", "<builtin>.isinstance"], "execution.runner.Runner._enqueue_new_jobs": ["time.sleep", "<builtin>.enumerate", "execution.work.InProgress"], "execution.work.InProgress": [], "execution.runner.Runner._print_progress": ["math.ceil", "time.time", "<builtin>.sum", "<builtin>.len", "<builtin>.print"], "execution.runner.Runner._force_shutdown": ["<builtin>.range", "time.sleep", "textwrap.dedent", "<builtin>.len", "<builtin>.print"], "execution.runner.Runner._canary_import": ["<builtin>.set", "<builtin>.ImportError", "subprocess.run"], "subprocess.run": [], "worker.main": ["os.path.abspath", "argparse.ArgumentParser", "worker.main.main"], "os.path.abspath": [], "worker.main.WorkerUnpickler.find_class": ["<builtin>.super"], "worker.main.WorkerUnpickler.load_input": ["<builtin>.isinstance", "pickle.Unpickler.load"], "pickle.Unpickler.load": [], "worker.main.WorkerUnpickler.load_output": ["<builtin>.isinstance", "pickle.Unpickler.load"], "worker.main._run": ["torch.utils.benchmark.utils.timer.Timer", "<builtin>.tuple", "torch.utils.benchmark.Timer"], "torch.utils.benchmark.utils.timer.Timer": [], "torch.utils.benchmark.Timer": [], "worker.main.main": ["os.path.split", "sys.exit", "os.path.exists", "<builtin>.print", "pickle.Unpickler.__init__", "<builtin>.open", "<builtin>.isinstance", "traceback.print_exc", "pickle.dump", "worker.main._run", "os.getpid", "io.StringIO", "worker.main.WorkerUnpickler.load_input"], "pickle.Unpickler.__init__": [], "io.StringIO": [], "traceback.print_exc": [], "os.path.split": [], "os.path.exists": [], "os.getpid": [], "pickle.dump": [], "execution.work": [], "execution.work.WorkOrder.__hash__": ["<builtin>.id"], "<builtin>.id": [], "execution.work.WorkOrder.__str__": ["json.dumps"], "execution.work._BenchmarkProcess.__init__": ["subprocess.Popen", "uuid.uuid4", "<builtin>.open", "time.time", "pickle.dump", "core.utils.get_temp_dir", "os.path.join"], "core.utils.get_temp_dir": ["torch.utils.benchmark._make_temp_dir", "atexit.register"], "uuid.uuid4": [], "execution.work._BenchmarkProcess.clone": ["execution.work._BenchmarkProcess.__init__"], "execution.work._BenchmarkProcess.cmd": [], "execution.work._BenchmarkProcess.duration": ["time.time"], "execution.work._BenchmarkProcess.result": ["execution.work._BenchmarkProcess._maybe_collect"], "execution.work._BenchmarkProcess._maybe_collect": ["pickle.Unpickler.__init__", "<builtin>.open", "time.time", "<builtin>.isinstance", "os.remove"], "execution.work._BenchmarkProcess.poll": ["execution.work._BenchmarkProcess._maybe_collect"], "execution.work._BenchmarkProcess.interrupt": [], "execution.work._BenchmarkProcess.terminate": [], "os.remove": [], "execution.work.InProgress.__init__": ["execution.work._BenchmarkProcess.__init__"], "execution.work.InProgress.work_order": [], "execution.work.InProgress.cpu_list": [], "execution.work.InProgress.proc": [], "execution.work.InProgress.duration": [], "execution.work.InProgress.check_finished": ["subprocess.TimeoutExpired", "<builtin>.print"], "subprocess.TimeoutExpired": [], "execution.work.InProgress.result": [], "execution.work.InProgress.__hash__": ["<builtin>.id"], "core.types": [], "core.api": [], "core.api.AutoLabels.as_dict": [], "core.api.GroupedSetup.__post_init__": ["textwrap.dedent", "<builtin>.getattr", "dataclasses.fields"], "dataclasses.fields": [], "core.api.GroupedBenchmark.init_from_stmts": ["textwrap.dedent", "<builtin>.isinstance"], "core.api.GroupedBenchmark.init_from_model": ["<builtin>.ValueError", "<builtin>.isinstance"], "core.api.GroupedBenchmark.init_from_variants": ["core.api.GroupedBenchmark.init_from_stmts", "<builtin>.enumerate", "itertools.chain", "<builtin>.set", "<builtin>.max", "<builtin>.zip", "<builtin>.len"], "itertools.chain": [], "core.api.GroupedBenchmark.__post_init__": ["<builtin>.ValueError"], "core.api.GroupedBenchmark._parse_signature": ["<builtin>.ValueError", "<builtin>.tuple", "re.search"], "re.search": [], "core.api.GroupedBenchmark._model_from_py_stmt": ["<builtin>.ValueError", "textwrap.indent", "textwrap.dedent"], "textwrap.indent": [], "core.api.GroupedBenchmark._make_model_invocation": ["textwrap.dedent"], "core.api.GroupedBenchmark._parse_variants": ["textwrap.dedent", "re.search"], "worker": ["contextlib.contextmanager"], "core.utils": [], "torch.utils.benchmark._make_temp_dir": [], "atexit.register": [], "core.utils._flatten": ["core.utils._flatten", "<builtin>.all", "<builtin>.isinstance"], "core.utils.flatten": ["core.utils._flatten", "<builtin>.all", "<builtin>.isinstance"], "core.utils.parse_stmts": ["<builtin>.ValueError", "textwrap.dedent", "<builtin>.len", "re.search"], "applications": [], "core.expand": ["<builtin>.tuple", "itertools.product"], "itertools.product": [], "core.expand._generate_torchscript_file": ["os.path.exists", "typing.cast", "<builtin>.open", "<builtin>.isinstance", "os.makedirs", "<builtin>.ValueError", "core.utils.get_temp_dir", "<builtin>.type", "os.path.join", "os.remove"], "core.expand._get_stmt": ["core.api.GroupedBenchmark._make_model_invocation"], "core.expand._get_setup": ["textwrap.dedent", "textwrap.indent"], "definitions.standard.BENCHMARKS.items": [], "core.api.AutoLabels": [], "re.sub": [], "worker.main.WorkerTimerArgs": [], "applications.ci": [], "applications.ci.main": ["core.expand.materialize", "<builtin>.print", "execution.work.WorkOrder", "argparse.ArgumentParser", "json.dumps", "<builtin>.open", "time.time", "execution.runner.Runner", "pdb.set_trace", "<builtin>.int", "json.dump", "<builtin>.tuple", "<builtin>.str", "hashlib.md5"], "hashlib.md5": [], "json.dump": [], "execution": [], "definitions": [], "core": ["collections.namedtuple", "core.GradientRegistry.RegisterGradient", "core._CheckDataType", "core._GetRegisteredOperators", "<builtin>.print", "core.GradientRegistry.RegisterGradient.Wrapper", "caffe2.python._import_c_extension.registered_dbs", "dispatch.dispatch", "<builtin>.dict"], "definitions.standard": ["core.api.GroupedBenchmark.init_from_stmts", "core.utils.parse_stmts", "core.api.GroupedBenchmark.init_from_variants", "core.utils.flatten", "core.api.GroupedBenchmark.init_from_model"], "definitions.setup": ["core.utils.parse_stmts"], "benchmark_all_other_test": ["benchmark_runner.main"], "benchmark_runner.main": ["benchmark_core.BenchmarkRunner.__init__", "benchmark_core.BenchmarkRunner.run", "benchmark_runner.parse_args"], "pt": [], "pt.pool_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "operator_benchmark.config_list": [], "operator_benchmark.cross_product_configs": [], "operator_benchmark.op_list": [], "pt.pool_test.Pool1dBenchmark.init": ["torch.rand"], "pt.pool_test.Pool1dBenchmark.forward": [], "operator_benchmark.generate_pt_tests_from_op_list": [], "pt.pool_test.<list25>.<list3>.<lambda1>": [], "torch.nn.AdaptiveMaxPool2d": [], "pt.pool_test.<lambda1>": ["torch.nn.FractionalMaxPool3d", "torch.nn.FractionalMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool3d"], "pt.pool_test.<list25>.<list4>.<lambda1>": [], "torch.nn.FractionalMaxPool2d": [], "pt.pool_test.Pool2dBenchmark.init": ["torch.rand"], "pt.pool_test.Pool2dBenchmark.forward": [], "pt.pool_test.<list39>.<list3>.<lambda1>": [], "torch.nn.AdaptiveMaxPool3d": [], "pt.pool_test.<list39>.<list4>.<lambda1>": [], "torch.nn.FractionalMaxPool3d": [], "pt.pool_test.Pool3dBenchmark.init": ["torch.rand"], "pt.pool_test.Pool3dBenchmark.forward": [], "operator_benchmark": [], "benchmark_runner": ["benchmark_runner.main", "argparse.ArgumentParser"], "benchmark_runner.parse_args": ["torch.set_num_threads", "benchmark_utils.is_pytorch_enabled", "benchmark_utils.set_mkl_threads", "benchmark_utils.set_omp_threads"], "benchmark_utils.set_omp_threads": ["<builtin>.str", "<builtin>.print", "os.environ.get"], "benchmark_utils.is_pytorch_enabled": [], "torch.set_num_threads": [], "benchmark_utils.set_mkl_threads": ["<builtin>.str", "<builtin>.print", "os.environ.get"], "benchmark_core.BenchmarkRunner.__init__": ["benchmark_utils.get_operator_range"], "benchmark_core.BenchmarkRunner.run": ["benchmark_core.BenchmarkRunner._launch_backward", "benchmark_core.BenchmarkRunner._print_header", "<builtin>.hash", "benchmark_core.BenchmarkRunner._print_perf_result", "benchmark_core.BenchmarkRunner._keep_test", "numpy.random.seed", "benchmark_core.BenchmarkRunner._print_test_case_info", "benchmark_core._build_test", "benchmark_core.BenchmarkRunner._measure_time", "benchmark_core.BenchmarkRunner._launch_forward", "<builtin>.print", "<builtin>.range"], "benchmark_utils": [], "benchmark_utils.shape_to_string": ["<builtin>.str"], "benchmark_utils.str2bool": ["<builtin>.isinstance"], "benchmark_utils.numpy_random": ["numpy.random.rand"], "numpy.random.rand": [], "benchmark_utils.cross_product": ["<builtin>.list", "itertools.product"], "benchmark_utils.get_n_rand_nums": ["<builtin>.range", "random.seed", "random.sample"], "random.seed": ["torch.cuda.manual_seed_all", "torch._C.default_generator.seed", "torch.cuda._is_in_bad_fork", "_lazy_call"], "random.sample": [], "benchmark_utils.generate_configs": [], "benchmark_utils.cross_product_configs": ["<builtin>.list", "benchmark_utils._validate", "itertools.product"], "benchmark_utils._validate": [], "benchmark_utils.config_list": ["benchmark_utils.cross_product_configs", "<builtin>.ValueError", "benchmark_utils._validate", "<builtin>.list", "<builtin>.any", "<builtin>.enumerate"], "benchmark_utils.attr_probs": [], "benchmark_utils.RandomSample.__init__": [], "benchmark_utils.RandomSample._distribution_func": ["<builtin>.sum"], "benchmark_utils.RandomSample._random_sample": ["benchmark_utils.RandomSample._distribution_func", "random.random", "<builtin>.len", "bisect.bisect"], "random.random": [], "bisect.bisect": ["bisect.bisect.keep_going", "<builtin>.set", "<builtin>.print", "bisect.test"], "benchmark_utils.RandomSample.get_one_set_of_inputs": ["<builtin>.str", "benchmark_utils.RandomSample._random_sample"], "benchmark_utils.random_sample_configs": ["benchmark_utils.RandomSample.__init__", "benchmark_utils.RandomSample.get_one_set_of_inputs", "<builtin>.range", "<builtin>.ValueError"], "benchmark_utils.op_list": ["<builtin>.enumerate", "<builtin>.ValueError"], "benchmark_utils.is_caffe2_enabled": [], "benchmark_utils.get_operator_range": ["<builtin>.ord", "<builtin>.chr", "<builtin>.set", "<builtin>.ValueError", "<builtin>.len", "<builtin>.all", "<builtin>.range"], "<builtin>.ord": [], "<builtin>.chr": [], "benchmark_utils.process_arg_list": ["<builtin>.len"], "benchmark_core": ["collections.namedtuple"], "benchmark_core._register_test": [], "benchmark_core._create_test": ["<builtin>.str", "ast.literal_eval", "json.dumps", "copy.deepcopy"], "ast.literal_eval": [], "benchmark_core._build_test": ["<builtin>.str", "<builtin>.vars", "copy.deepcopy", "<builtin>.ValueError", "<builtin>.isinstance", "torch.cuda.is_available", "benchmark_core._create_test", "<builtin>.range"], "benchmark_core.BenchmarkRunner._print_header": ["<builtin>.print", "<builtin>.set"], "benchmark_core.BenchmarkRunner._print_perf_result": ["json.dumps", "<builtin>.print", "<builtin>.range"], "benchmark_core.BenchmarkRunner._predict_num_iter_needed": [], "benchmark_core.BenchmarkRunner._iteration_result_is_significant": [], "benchmark_core.BenchmarkRunner._launch_forward": ["functools.partial", "timeit.timeit"], "timeit.timeit": [], "benchmark_core.BenchmarkRunner._launch_backward": ["functools.partial", "timeit.timeit"], "benchmark_core.BenchmarkRunner._measure_time": ["benchmark_core.BenchmarkRunner._launch_backward", "benchmark_core.BenchmarkRunner._iteration_result_is_significant", "numpy.array", "benchmark_core.BenchmarkRunner._predict_num_iter_needed", "json.dumps", "numpy.percentile", "benchmark_core.BenchmarkRunner._launch_forward", "<builtin>.print"], "numpy.array": [], "numpy.percentile": [], "benchmark_core.BenchmarkRunner._check_keep": [], "benchmark_core.BenchmarkRunner._check_operator_first_char": [], "benchmark_core.BenchmarkRunner._check_keep_list": ["<builtin>.any"], "benchmark_core.BenchmarkRunner._keep_test": ["benchmark_core.BenchmarkRunner._check_keep", "benchmark_core.BenchmarkRunner._check_operator_first_char", "benchmark_core.BenchmarkRunner._check_keep_list", "benchmark_utils.process_arg_list"], "benchmark_core.BenchmarkRunner._print_test_case_info": ["<builtin>.print"], "<builtin>.hash": [], "numpy.random.seed": [], "benchmark_test_generator": [], "benchmark_test_generator.generate_pt_test": ["benchmark_core._register_test"], "benchmark_test_generator.generate_pt_gradient_test": ["benchmark_core._register_test"], "benchmark_test_generator.generate_pt_tests_from_op_list": ["benchmark_core._register_test"], "benchmark_test_generator.generate_pt_gradient_tests_from_op_list": ["benchmark_core._register_test"], "benchmark_pytorch": [], "TorchBenchmarkBase.__init__": ["<builtin>.super"], "TorchBenchmarkBase._set_backward_test": [], "TorchBenchmarkBase.auto_set": [], "TorchBenchmarkBase.extract_inputs_tuple": ["<builtin>.tuple"], "benchmark_pytorch.TorchBenchmarkBase": ["torch.jit.export"], "TorchBenchmarkBase.get_inputs": [], "TorchBenchmarkBase.forward_impl": ["TorchBenchmarkBase.get_inputs", "torch.nn.Module.forward"], "torch.nn.Module.forward": [], "TorchBenchmarkBase.forward_consume": ["torch.ops.operator_benchmark._consume", "TorchBenchmarkBase.forward_impl", "<builtin>.range"], "torch.ops.operator_benchmark._consume": [], "TorchBenchmarkBase.module_name": [], "TorchBenchmarkBase.set_module_name": [], "TorchBenchmarkBase.test_name": ["<builtin>.str", "<builtin>.int", "TorchBenchmarkBase.module_name", "<builtin>.type", "torch.nn.Module.__class__.__name__.replace"], "torch.nn.Module.__class__.__name__.replace": [], "PyTorchOperatorTestCase.__init__": ["torch.ones"], "PyTorchOperatorTestCase._generate_jit_forward_graph": ["torch.jit.script"], "PyTorchOperatorTestCase.run_jit_forward": ["PyTorchOperatorTestCase._generate_jit_forward_graph"], "PyTorchOperatorTestCase._print_per_iter": ["<builtin>.min", "json.dumps", "<builtin>.len", "<builtin>.print", "<builtin>.range"], "PyTorchOperatorTestCase.run_forward": ["torch.cuda.synchronize", "torch.cuda.current_device", "<builtin>.range", "time.time"], "torch.cuda.current_device": [], "PyTorchOperatorTestCase._output_mean": [], "PyTorchOperatorTestCase.run_backward": ["<builtin>.range"], "benchmark_pytorch.create_pytorch_op_test_case": ["<builtin>.str", "PyTorchOperatorTestCase.__init__", "benchmark_pytorch.PyTorchOperatorTestCase.__init__"], "pt.hardsigmoid_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.hardsigmoid_test.HardsigmoidBenchmark.init": ["torch.rand"], "pt.hardsigmoid_test.HardsigmoidBenchmark.forward": [], "pt.groupnorm_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main"], "pt.groupnorm_test.GroupNormBenchmark.init": ["torch.rand"], "pt.groupnorm_test.GroupNormBenchmark.forward": ["torch.nn.functional.group_norm"], "torch.nn.functional.group_norm": [], "operator_benchmark.generate_pt_test": [], "pt.remainder_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.remainder_test.RemainderOpBenchmark.init": ["torch.rand"], "pt.remainder_test.RemainderOpBenchmark.forward": [], "pt.sum_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main"], "pt.sum_test.SumBenchmark.init": ["torch.rand", "torch.empty", "TorchBenchmarkBase.set_module_name"], "pt.sum_test.SumBenchmark.forward": [], "pt.batchnorm_test": ["operator_benchmark.generate_pt_test", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_gradient_test", "pt.batchnorm_test.cudnn_benchmark_configs", "operator_benchmark.config_list"], "pt.batchnorm_test.cudnn_benchmark_configs": ["<builtin>.dict", "<builtin>.any"], "pt.batchnorm_test.BatchNormBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.batchnorm_test.BatchNormBenchmark.forward": ["torch.backends.cudnn.flags", "torch.nn.functional.batch_norm"], "torch.backends.cudnn.flags": [], "torch.nn.functional.batch_norm": [], "operator_benchmark.generate_pt_gradient_test": [], "pt.batchnorm_test.BatchNorm1dBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.batchnorm_test.BatchNorm1dBenchmark.forward": ["torch.backends.cudnn.flags", "torch.nn.functional.batch_norm"], "pt.as_strided_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.as_strided_test.As_stridedBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.as_strided_test.As_stridedBenchmark.forward": ["torch.as_strided"], "torch.as_strided": [], "pt.split_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.split_test.SplitBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name", "<builtin>.int"], "pt.split_test.SplitBenchmark.forward": ["torch.split"], "torch.split": [], "pt.fill_test": ["operator_benchmark.generate_pt_test", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "torch.testing.get_all_device_types", "operator_benchmark.config_list"], "torch.testing.get_all_device_types": [], "pt.fill_test.Fill_Benchmark.init": ["torch.zeros", "TorchBenchmarkBase.set_module_name"], "pt.fill_test.Fill_Benchmark.forward": [], "pt.cat_test": ["operator_benchmark.generate_pt_test", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.cat_test.<list8>.<list4>.<list1>.<lambda1>": [], "random.randint": [], "pt.cat_test.<lambda1>": ["random.randint"], "pt.cat_test.<list8>.<list5>.<list1>.<lambda1>": [], "pt.cat_test.<list8>.<list6>.<list1>.<lambda1>": [], "pt.cat_test.<list8>.<list7>.<list1>.<lambda1>": [], "pt.cat_test.<list8>.<list8>.<list1>.<lambda1>": [], "pt.cat_test.<list8>.<list9>.<list1>.<lambda1>": [], "pt.cat_test.<list14>.<list1>.<list1>.<lambda1>": [], "pt.cat_test.<list14>.<list2>.<list1>.<lambda1>": [], "pt.cat_test.<list14>.<list3>.<list1>.<lambda1>": [], "pt.cat_test.<list14>.<list4>.<list1>.<lambda1>": [], "pt.cat_test.CatBenchmark.init": ["torch.rand", "random.seed", "TorchBenchmarkBase.set_module_name", "<builtin>.callable", "torch.empty", "<builtin>.type", "<builtin>.range"], "<builtin>.callable": [], "pt.cat_test.CatBenchmark.forward": ["torch.cat"], "pt.tensor_to_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main"], "pt.tensor_to_test.FloatToHalfTensorConversionBenchmark.init": ["torch.rand"], "pt.tensor_to_test.FloatToHalfTensorConversionBenchmark.forward": [], "pt.tensor_to_test.HalfToFloatTensorConversionBenchmark.init": ["torch.rand"], "pt.tensor_to_test.HalfToFloatTensorConversionBenchmark.forward": [], "pt.matmul_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.matmul_test.MatMulBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.matmul_test.MatMulBenchmark.forward": ["torch.matmul"], "pt.linear_test": ["operator_benchmark.generate_pt_test", "benchmark_runner.main"], "pt.linear_test.LinearBenchmark.init": ["torch.rand", "torch.nn.Linear", "TorchBenchmarkBase.set_module_name"], "pt.linear_test.LinearBenchmark.forward": [], "pt.configs": ["operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.configs.remove_cuda": [], "pt.layernorm_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main"], "pt.layernorm_test.LayerNormBenchmark.init": ["torch.rand"], "pt.layernorm_test.LayerNormBenchmark.forward": ["torch.nn.functional.layer_norm"], "torch.nn.functional.layer_norm": [], "pt.embeddingbag_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.generate_pt_gradient_test", "benchmark_runner.main"], "pt.embeddingbag_test.EmbeddingBagBenchmark.init": ["torch.tensor", "torch.cat", "torch.LongTensor", "numpy.random.seed", "TorchBenchmarkBase.set_module_name", "torch.nn.EmbeddingBag", "numpy.random.randint"], "torch.nn.EmbeddingBag": [], "torch.LongTensor": [], "numpy.random.randint": [], "pt.embeddingbag_test.EmbeddingBagBenchmark.forward": [], "pt.instancenorm_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main"], "pt.instancenorm_test.InstanceNormBenchmark.init": ["torch.rand"], "pt.instancenorm_test.InstanceNormBenchmark.forward": ["torch.nn.functional.instance_norm"], "torch.nn.functional.instance_norm": [], "pt.gather_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.gather_test.GatherBenchmark.init": ["torch.rand", "torch.tensor", "numpy.random.seed", "TorchBenchmarkBase.set_module_name", "numpy.random.randint"], "pt.gather_test.GatherBenchmark.forward": ["torch.gather"], "torch.gather": [], "pt.chunk_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.chunk_test.ChunkBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.chunk_test.ChunkBenchmark.forward": ["torch.chunk"], "torch.chunk": [], "pt.interpolate_test": ["operator_benchmark.generate_pt_test", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.interpolate_test.InterpolateBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.randint", "TorchBenchmarkBase.set_module_name", "<builtin>.ValueError"], "pt.interpolate_test.InterpolateBenchmark.forward": ["torch.nn.functional.interpolate"], "pt.hardswish_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.hardswish_test.HardswishBenchmark.init": ["torch.rand"], "pt.hardswish_test.HardswishBenchmark.forward": [], "pt.binary_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.binary_test.BinaryOpBcastBenchmark.init": ["torch.randn"], "pt.binary_test.BinaryOpBcastBenchmark.forward": [], "pt.binary_test.copy": [], "pt.binary_test.BinaryOpBenchmark.init": ["torch.randn"], "pt.binary_test.BinaryOpBenchmark.forward": [], "pt.nan_to_num_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "<builtin>.range"], "pt.nan_to_num_test.ReplaceNaNBenchmark.init": ["torch.randn", "TorchBenchmarkBase.set_module_name", "<builtin>.float"], "pt.nan_to_num_test.ReplaceNaNBenchmark.forward": [], "pt.conv_test": ["operator_benchmark.generate_pt_test", "benchmark_runner.main"], "pt.conv_test.Conv1dBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.rand", "TorchBenchmarkBase.set_module_name", "torch.nn.Conv1d"], "pt.conv_test.Conv1dBenchmark.forward": [], "pt.conv_test.ConvTranspose1dBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name", "torch.nn.ConvTranspose1d"], "torch.nn.ConvTranspose1d": [], "pt.conv_test.ConvTranspose1dBenchmark.forward": [], "pt.conv_test.Conv2dBenchmark.init": ["torch.nn.Conv2d", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.conv_test.Conv2dBenchmark.forward": [], "pt.conv_test.ConvTranspose2dBenchmark.init": ["torch.rand", "torch.nn.ConvTranspose2d", "TorchBenchmarkBase.set_module_name"], "torch.nn.ConvTranspose2d": [], "pt.conv_test.ConvTranspose2dBenchmark.forward": [], "pt.conv_test.Conv3dBenchmark.init": ["torch.rand", "torch.nn.Conv3d", "TorchBenchmarkBase.set_module_name"], "torch.nn.Conv3d": [], "pt.conv_test.Conv3dBenchmark.forward": [], "pt.conv_test.ConvTranspose3dBenchmark.init": ["torch.nn.ConvTranspose3d", "torch.rand", "TorchBenchmarkBase.set_module_name"], "torch.nn.ConvTranspose3d": [], "pt.conv_test.ConvTranspose3dBenchmark.forward": [], "pt.channel_shuffle_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.channel_shuffle_test.ChannelSHuffleBenchmark.init": ["torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.channel_shuffle_test.ChannelSHuffleBenchmark.forward": ["torch.channel_shuffle"], "torch.channel_shuffle": [], "pt.diag_test": ["operator_benchmark.generate_pt_test", "benchmark_runner.main", "operator_benchmark.config_list"], "pt.diag_test.DiagBenchmark.init": ["torch.rand", "torch.tensor", "TorchBenchmarkBase.set_module_name"], "pt.diag_test.DiagBenchmark.forward": ["torch.diag"], "pt.add_test": ["operator_benchmark.generate_pt_test", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_gradient_test", "operator_benchmark.config_list"], "pt.add_test.AddBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.add_test.AddBenchmark.forward": ["torch.add"], "pt.add_test.AddmmBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.add_test.AddmmBenchmark.forward": ["torch.addmm"], "torch.addmm": [], "pt.add_test.AddrBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.add_test.AddrBenchmark.forward": ["torch.addr"], "torch.addr": [], "pt.add_test.AddbmmBenchmark.init": ["TorchBenchmarkBase.auto_set", "torch.rand", "TorchBenchmarkBase.set_module_name"], "pt.add_test.AddbmmBenchmark.forward": ["torch.addbmm"], "torch.addbmm": [], "pt.softmax_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.softmax_test.SoftmaxBenchmark.init": ["torch.rand"], "pt.softmax_test.SoftmaxBenchmark.forward": [], "benchmark_all_quantized_test": ["benchmark_runner.main"], "pt.qarithmetic_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "pt.qarithmetic_test._QFunctionalBinaryArithmeticBenchmarkBase.setup": ["torch.nn.quantized.QFunctional", "torch.quantize_per_tensor", "<builtin>.list", "<builtin>.range", "torch.rand"], "torch.nn.quantized.QFunctional": [], "pt.qarithmetic_test.QFunctionalBenchmark.init": ["<builtin>.super"], "pt.qarithmetic_test.QFunctionalBenchmark.forward": [], "pt.qarithmetic_test.QFunctionalScalarBenchmark.init": ["<builtin>.super"], "pt.qarithmetic_test.QFunctionalScalarBenchmark.forward": [], "pt.qinstancenorm_test": ["benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qinstancenorm_test.QInstanceNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qinstancenorm_test.QInstanceNormBenchmark.forward": ["torch.ops.quantized.instance_norm"], "torch.ops.quantized.instance_norm": [], "pt.qactivation_test": ["torch.nn.ReLU", "operator_benchmark.op_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list"], "pt.qactivation_test.QActivationBenchmarkBase._setup": ["<builtin>.list", "<builtin>.range", "torch.quantize_per_tensor", "torch.rand"], "pt.qactivation_test.QActivationBenchmarkBase.init": ["pt.qactivation_test.QActivationBenchmarkBase._setup"], "pt.qactivation_test.QActivationBenchmark.forward": [], "pt.qactivation_test.QActivationScaleZeroPointBenchmark.forward": [], "pt.qlinear_test": ["benchmark_runner.main", "pt.configs.remove_cuda", "operator_benchmark.generate_pt_test"], "pt.qlinear_test._QLinearBenchmarkBase.init": ["torch.tensor", "torch.randn", "torch.quantize_per_tensor"], "pt.qlinear_test._QLinearBenchmarkBase.forward": [], "pt.qlinear_test.QLinearBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Linear", "<builtin>.super"], "torch.nn.quantized.Linear": [], "pt.qlinear_test.QDynamicLinearBenchmark.init": ["TorchBenchmarkBase.set_module_name", "<builtin>.super", "torch.nn.quantized.dynamic.Linear"], "torch.nn.quantized.dynamic.Linear": [], "pt.qpool_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qpool_test._QPool2dBenchmarkBase.setup": ["torch.quantize_per_tensor", "torch.rand"], "pt.qpool_test._QPool2dBenchmarkBase.forward": [], "pt.qpool_test.QMaxPool2dBenchmark.init": ["torch.nn.MaxPool2d", "<builtin>.super"], "pt.qpool_test.QAvgPool2dBenchmark.init": ["torch.nn.AvgPool2d", "<builtin>.super"], "torch.nn.AvgPool2d": [], "pt.qpool_test.QAdaptiveAvgPool2dBenchmark.init": ["torch.nn.AdaptiveAvgPool2d", "<builtin>.super"], "pt.qembedding_pack_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "pt.qembedding_pack_test.EmbeddingBagFloatToFusedBase.init": ["numpy.random.random_sample", "torch.from_numpy"], "numpy.random.random_sample": [], "torch.from_numpy": [], "pt.qembedding_pack_test.EmbeddingBagFloatToFusedBase.forward": [], "pt.qembedding_pack_test.EmbeddingBagFusedToFloatBase.init": ["torch.randn"], "pt.qembedding_pack_test.EmbeddingBagFusedToFloatBase.forward": [], "pt.qcomparators_test": ["benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs"], "pt.qcomparators_test.QComparatorBenchmark.init": ["<builtin>.list", "<builtin>.range", "torch.quantize_per_tensor", "torch.rand"], "pt.qcomparators_test.QComparatorBenchmark.forward": ["torch.tensor"], "pt.qgroupnorm_test": ["benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qgroupnorm_test.QGroupNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qgroupnorm_test.QGroupNormBenchmark.forward": ["torch.ops.quantized.group_norm"], "torch.ops.quantized.group_norm": [], "pt.qlayernorm_test": ["benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qlayernorm_test.QLayerNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qlayernorm_test.QLayerNormBenchmark.forward": ["torch.ops.quantized.layer_norm"], "torch.ops.quantized.layer_norm": [], "pt.qobserver_test": ["operator_benchmark.op_list", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list"], "pt.qobserver_test.QObserverBenchmark.init": ["torch.rand"], "pt.qobserver_test.QObserverBenchmark.forward": [], "pt.qobserver_test.QObserverBenchmarkCalculateQparams.init": ["torch.rand"], "pt.qobserver_test.QObserverBenchmarkCalculateQparams.forward": [], "pt.quantization_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.op_list", "operator_benchmark.generate_pt_gradient_tests_from_op_list", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list"], "pt.quantization_test.QuantizePerTensorBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Quantize", "torch.nn.quantized.DeQuantize", "torch.rand"], "torch.nn.quantized.Quantize": [], "torch.nn.quantized.DeQuantize": [], "pt.quantization_test.QuantizePerTensorBenchmark.forward": [], "pt.quantization_test.QuantizePerChannelBenchmark.init": ["torch.tensor", "TorchBenchmarkBase.set_module_name", "pt.quantization_test.QuantizePerChannelBenchmark.init.dequant", "torch.quantize_per_channel", "torch.rand"], "pt.quantization_test.QuantizePerChannelBenchmark.init.dequant": [], "torch.quantize_per_channel": [], "pt.quantization_test.QuantizePerChannelBenchmark.forward": ["pt.quantization_test.QuantizePerChannelBenchmark.init.dequant", "torch.quantize_per_channel"], "pt.quantization_test.FakeQuantizeBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.quantization.FakeQuantize", "torch.rand"], "torch.quantization.FakeQuantize": [], "pt.quantization_test.FakeQuantizeBenchmark.forward": [], "pt.quantization_test.fakeQuantizePerTensorLearnableKernel": ["torch._fake_quantize_learnable_per_tensor_affine"], "torch._fake_quantize_learnable_per_tensor_affine": [], "pt.quantization_test.fakeQuantizePerTensorOriginalKernel": ["torch.fake_quantize_per_tensor_affine"], "torch.fake_quantize_per_tensor_affine": [], "pt.quantization_test.FakeQuantizePerTensorBaseOpBenchmark.init": ["torch.tensor", "torch.nn.Parameter", "TorchBenchmarkBase.auto_set", "torch.rand"], "pt.quantization_test.FakeQuantizePerTensorBaseOpBenchmark.forward": [], "operator_benchmark.generate_pt_gradient_tests_from_op_list": [], "pt.quantization_test.fakeQuantizePerChannelLearnableKernel": ["torch._fake_quantize_learnable_per_channel_affine"], "torch._fake_quantize_learnable_per_channel_affine": [], "pt.quantization_test.fakeQuantizePerChannelOriginalKernel": ["torch.fake_quantize_per_channel_affine"], "torch.fake_quantize_per_channel_affine": [], "pt.quantization_test.FakeQuantizePerChannelOpBenchmark.init": ["torch.zeros", "torch.rand", "TorchBenchmarkBase.auto_set", "torch.ones", "torch.nn.Parameter"], "pt.quantization_test.FakeQuantizePerChannelOpBenchmark.forward": [], "pt.qrnn_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qrnn_test.LSTMBenchmark.init": ["torch.randn", "torch.nn.Sequential", "TorchBenchmarkBase.set_module_name", "torch.nn.LSTM", "torch.quantization.quantize_dynamic"], "torch.quantization.quantize_dynamic": [], "pt.qrnn_test.LSTMBenchmark.forward": [], "pt.qunary_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.op_list", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list"], "pt.qunary_test.QUnaryOpBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "pt.qunary_test.QUnaryOpBenchmark.forward": [], "pt.qunary_test.QTopkOpBenchmark.init": ["TorchBenchmarkBase.set_module_name", "torch.quantize_per_tensor", "torch.rand"], "pt.qunary_test.QTopkOpBenchmark.forward": ["torch.topk"], "torch.topk": [], "pt.qconv_test": ["benchmark_runner.main", "pt.configs.remove_cuda", "operator_benchmark.generate_pt_test"], "pt.qconv_test.QConv1dBenchmark.init": ["torch.randn", "torch.quantize_per_tensor", "torch.tensor", "TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Conv1d"], "torch.nn.quantized.Conv1d": [], "pt.qconv_test.QConv1dBenchmark.forward": [], "pt.qconv_test.QConv2dBenchmark.init": ["torch.randn", "torch.quantize_per_tensor", "torch.tensor", "TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Conv2d"], "torch.nn.quantized.Conv2d": [], "pt.qconv_test.QConv2dBenchmark.forward": [], "pt.qtensor_method_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qtensor_method_test._QMethodBenchmarkBase.init": ["<builtin>.list", "<builtin>.range", "torch.quantize_per_tensor", "torch.rand"], "pt.qtensor_method_test.QMethodTensorInputCopyBenchmark.forward": [], "pt.qembeddingbag_test": ["benchmark_runner.main", "operator_benchmark.generate_pt_test"], "pt.qembeddingbag_test.QEmbeddingBagBenchmark.init": ["torch.LongTensor", "torch.tensor", "TorchBenchmarkBase.set_module_name", "numpy.random.randint", "numpy.random.seed", "torch.nn.quantized.EmbeddingBag", "torch.cat"], "torch.nn.quantized.EmbeddingBag": [], "pt.qembeddingbag_test.QEmbeddingBagBenchmark.forward": [], "pt.qcat_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "pt.qcat_test.QCatBenchmark.init": ["torch.nn.quantized.QFunctional", "torch.quantize_per_tensor", "TorchBenchmarkBase.set_module_name", "<builtin>.tuple", "<builtin>.range", "torch.rand"], "pt.qcat_test.QCatBenchmark.forward": [], "pt.qinterpolate_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qinterpolate_test.QInterpolateBenchmark.init": ["torch.quantize_per_tensor", "TorchBenchmarkBase.set_module_name", "<builtin>.list", "<builtin>.range", "torch.rand"], "pt.qinterpolate_test.QInterpolateBenchmark.forward": ["torch.nn.functional.interpolate"], "pt.qbatchnorm_test": ["benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "pt.qbatchnorm_test.QBatchNormBenchmark.init": ["pt.qbatchnorm_test.QBatchNormBenchmark._init", "torch.rand", "torch.quantize_per_tensor"], "pt.qbatchnorm_test.QBatchNormBenchmark._init": [], "pt.qbatchnorm_test.QBatchNormBenchmark.forward": [], "pt.qbatchnorm_test.QBatchNorm1dBenchmark._init": ["TorchBenchmarkBase.set_module_name", "torch.rand", "TorchBenchmarkBase.auto_set"], "pt.qbatchnorm_test.QBatchNorm1dBenchmark.forward": ["torch.ops.quantized.batch_norm1d"], "torch.ops.quantized.batch_norm1d": [], "pt.qbatchnorm_test.QBatchNorm2dBenchmark._init": ["TorchBenchmarkBase.set_module_name", "torch.rand", "TorchBenchmarkBase.auto_set"], "pt.qbatchnorm_test.QBatchNorm2dBenchmark.forward": ["torch.ops.quantized.batch_norm2d"], "torch.ops.quantized.batch_norm2d": [], "benchmark_all_test": ["benchmark_runner.main"], "pt.unary_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "pt.unary_test.UnaryOpBenchmark.init": ["torch.rand"], "pt.unary_test.UnaryOpBenchmark.forward": [], "pt.unary_test.bernoulli_": [], "pt.unary_test.cauchy_": [], "pt.unary_test.digamma_": [], "pt.unary_test.exponential_": [], "pt.unary_test.normal_": [], "pt.unary_test.random_": [], "pt.unary_test.sign_": [], "pt.unary_test.uniform_": [], "pt.unary_test.half_": [], "pt.unary_test.long_": [], "benchmark_caffe2": ["collections.namedtuple"], "benchmark_caffe2.Caffe2BenchmarkBase.__init__": [], "benchmark_caffe2.Caffe2BenchmarkBase._set_backward_test": [], "benchmark_caffe2.Caffe2BenchmarkBase._device_option": ["<builtin>.ValueError", "caffe2.python.core.DeviceOption"], "caffe2.python.core.DeviceOption": [], "benchmark_caffe2.Caffe2BenchmarkBase.tensor": ["benchmark_utils.numpy_random", "benchmark_caffe2.Caffe2BenchmarkBase.feed_tensor"], "benchmark_caffe2.Caffe2BenchmarkBase.feed_tensor": ["caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceScope", "<builtin>.str", "benchmark_caffe2.Caffe2BenchmarkBase._device_option"], "caffe2.python.core.DeviceScope": [], "benchmark_caffe2.Caffe2BenchmarkBase.module_name": [], "benchmark_caffe2.Caffe2BenchmarkBase.set_module_name": [], "benchmark_caffe2.Caffe2BenchmarkBase._value_to_str": ["<builtin>.str", "<builtin>.type", "<builtin>.int"], "benchmark_caffe2.Caffe2BenchmarkBase.test_name": ["benchmark_caffe2.Caffe2BenchmarkBase.module_name", "benchmark_caffe2.Caffe2BenchmarkBase._value_to_str"], "benchmark_caffe2.Caffe2BenchmarkBase.extract_inputs_tuple": [], "benchmark_caffe2.Caffe2OperatorTestCase.__init__": [], "benchmark_caffe2.Caffe2OperatorTestCase.run_forward": ["<builtin>.ValueError", "caffe2.python.workspace.RunOperatorMultiple", "caffe2.python.core.DeviceScope"], "caffe2.python.workspace.RunOperatorMultiple": [], "benchmark_caffe2.Caffe2OperatorTestCase.run_backward": ["<builtin>.ValueError", "caffe2.python.workspace.RunOperatorMultiple", "caffe2.python.core.DeviceScope"], "benchmark_caffe2.Caffe2OperatorTestCase._print_per_iter": [], "benchmark_caffe2.create_caffe2_op_test_case": ["<builtin>.str", "benchmark_caffe2.Caffe2OperatorTestCase.__init__"], "benchmark_caffe2.generate_c2_test_from_ops": ["<builtin>.str", "benchmark_caffe2.create_caffe2_op_test_case"], "benchmark_caffe2.generate_c2_test": ["benchmark_core._register_test"], "benchmark_caffe2.generate_c2_gradient_test": ["benchmark_core._register_test"], "benchmark_pytorch.TorchBenchmarkBase.__init__": ["<builtin>.super"], "benchmark_pytorch.TorchBenchmarkBase._set_backward_test": [], "benchmark_pytorch.TorchBenchmarkBase.auto_set": [], "benchmark_pytorch.TorchBenchmarkBase.extract_inputs_tuple": ["<builtin>.tuple"], "benchmark_pytorch.TorchBenchmarkBase.get_inputs": [], "benchmark_pytorch.TorchBenchmarkBase.forward_impl": ["benchmark_pytorch.TorchBenchmarkBase.get_inputs", "torch.nn.Module.forward"], "benchmark_pytorch.TorchBenchmarkBase.forward_consume": ["torch.ops.operator_benchmark._consume", "benchmark_pytorch.TorchBenchmarkBase.forward_impl", "<builtin>.range"], "benchmark_pytorch.TorchBenchmarkBase.module_name": [], "benchmark_pytorch.TorchBenchmarkBase.set_module_name": [], "benchmark_pytorch.TorchBenchmarkBase.test_name": ["torch.nn.Module.__class__.__name__.replace", "<builtin>.type", "<builtin>.int", "benchmark_pytorch.TorchBenchmarkBase.module_name", "<builtin>.str"], "benchmark_pytorch.PyTorchOperatorTestCase.__init__": ["torch.ones"], "benchmark_pytorch.PyTorchOperatorTestCase._generate_jit_forward_graph": ["torch.jit.script"], "benchmark_pytorch.PyTorchOperatorTestCase.run_jit_forward": ["benchmark_pytorch.PyTorchOperatorTestCase._generate_jit_forward_graph"], "benchmark_pytorch.PyTorchOperatorTestCase._print_per_iter": ["<builtin>.min", "<builtin>.print", "<builtin>.len", "json.dumps", "<builtin>.range"], "benchmark_pytorch.PyTorchOperatorTestCase.run_forward": ["time.time", "<builtin>.range", "torch.cuda.synchronize", "torch.cuda.current_device"], "benchmark_pytorch.PyTorchOperatorTestCase._output_mean": [], "benchmark_pytorch.PyTorchOperatorTestCase.run_backward": ["<builtin>.range"], "torch.std": [], "bench.main": ["argparse.ArgumentParser", "bench.bench", "<builtin>.print"], "common": ["<builtin>.tuple", "contextlib.contextmanager", "dataclasses.fields", "common.get_ghstack_token", "collections.namedtuple"], "common.WithTorchFunction.__init__": ["<builtin>.isinstance", "torch.tensor"], "common.WithTorchFunction.__torch_function__": ["common.WithTorchFunction.__init__"], "common.SubWithTorchFunction.__torch_function__": ["<builtin>.super"], "pyspybench": ["<builtin>.range", "argparse.ArgumentParser", "<builtin>.globals", "torch.add"], "<builtin>.globals": [], "profiler_bench": ["argparse.ArgumentParser", "torch.jit.trace", "torch._C._set_graph_executor_optimize", "torch.rand", "sys.exit", "torch.cuda.is_available", "torch.utils.benchmark.Timer", "<builtin>.print"], "profiler_bench.loop_workload": ["torch.mm", "<builtin>.range"], "profiler_bench.parallel_workload": ["torch.jit._fork", "<builtin>.range", "torch.jit._wait"], "profiler_bench.parallel_workload.parallel_task": ["torch.mm", "<builtin>.int", "<builtin>.range"], "torch.jit._fork": [], "torch.jit._wait": [], "torch._C._set_graph_executor_optimize": [], "profiler_bench.payload": ["profiler_bench.loop_workload", "profiler_bench.parallel_workload", "torch.autograd.profiler.profile"], "torch.autograd.profiler.profile": [], "resnet_memory_profiler": ["torch.cuda.is_available", "<builtin>.print", "torchvision.models.resnet18", "torch.autograd.profiler.profile", "torch.autograd.profiler.record_function", "torch.randn"], "torch.autograd.profiler.record_function": [], "record_function_bench": ["argparse.ArgumentParser", "<builtin>.str", "record_function_bench.run_bench"], "record_function_bench.prepare_lstm_jit": ["caffe2.benchmarks.fastrnns.factory.lstm_creator", "benchmarks.fastrnns.factory.lstm_creator"], "caffe2.benchmarks.fastrnns.factory.lstm_creator": [], "benchmarks.fastrnns.factory.lstm_creator": [], "record_function_bench.prepare_resnet50_jit": ["torch.randn", "torchvision.models.resnet50", "torch.jit.trace"], "record_function_bench.run_bench": ["torch.autograd._clear_callbacks", "sys.stdout.flush", "torch.utils.benchmark.Compare", "torch.utils.benchmark.Timer", "torch.autograd._enable_record_function", "<builtin>.range", "<builtin>.print", "torch.autograd._set_empty_test_observer"], "sys.stdout.flush": [], "torch.autograd._enable_record_function": [], "torch.autograd._clear_callbacks": [], "torch.autograd._set_empty_test_observer": [], "torch.utils.benchmark.Compare": [], "simple_measurement": ["pyarkbench.Benchmark.run", "<builtin>.print", "pyarkbench.Benchmark.__init__", "pyarkbench.Benchmark.print_stats", "pyarkbench.default_args.bench"], "simple_measurement.Basic.benchmark": ["torch.load", "torch.ones", "pyarkbench.Timer", "torch.save", "<builtin>.range"], "pyarkbench.Timer": [], "torch.save": [], "torch.load": [], "pyarkbench.default_args.bench": [], "pyarkbench.Benchmark.__init__": [], "pyarkbench.Benchmark.run": [], "pyarkbench.Benchmark.print_stats": [], "spmm": ["spmm.test_sparse_coo_and_csr", "spmm.test_sparse_csr", "<builtin>.open", "spmm.test_sparse_coo", "<builtin>.int", "<builtin>.print", "argparse.ArgumentParser"], "spmm.test_sparse_csr": ["utils.Event.__init__", "torch.randn", "<builtin>.len", "utils.Event.elapsed_time", "<builtin>.range", "<builtin>.sum", "utils.gen_sparse_csr", "utils.Event.record"], "utils.Event.__init__": [], "utils.gen_sparse_csr": ["<builtin>.list", "numpy.random.randn", "<builtin>.range", "functools.reduce", "random.sample", "torch.from_numpy"], "utils.Event.record": [], "utils.Event.elapsed_time": ["<builtin>.isinstance"], "spmm.test_sparse_coo": ["utils.Event.__init__", "torch.randn", "utils.gen_sparse_coo", "<builtin>.len", "utils.Event.elapsed_time", "<builtin>.range", "<builtin>.sum", "utils.Event.record"], "utils.gen_sparse_coo": ["<builtin>.range", "numpy.random.randn", "torch.sparse_coo_tensor", "random.randint"], "spmm.test_sparse_coo_and_csr": ["utils.Event.__init__", "torch.randn", "<builtin>.len", "utils.Event.elapsed_time", "<builtin>.range", "<builtin>.sum", "utils.Event.record"], "torch.sparse_coo_tensor": [], "utils.gen_sparse_coo_and_csr": ["<builtin>.list", "numpy.random.randn", "<builtin>.range", "functools.reduce", "random.sample", "torch.from_numpy"], "spmv": ["spmv.test_sparse_coo", "<builtin>.open", "spmv.test_sparse_csr", "spmv.test_sparse_coo_and_csr", "argparse.ArgumentParser", "<builtin>.print", "<builtin>.int"], "spmv.test_sparse_csr": ["utils.gen_sparse_csr", "<builtin>.range", "<builtin>.sum", "utils.Event", "<builtin>.len", "torch.randn"], "utils.Event": [], "spmv.test_sparse_coo": ["utils.gen_sparse_coo", "<builtin>.range", "<builtin>.sum", "utils.Event", "<builtin>.len", "torch.randn"], "spmv.test_sparse_coo_and_csr": ["utils.gen_sparse_coo_and_csr", "<builtin>.range", "<builtin>.sum", "utils.Event", "<builtin>.len", "torch.randn"], "attention": ["benchmark.register_benchmark_class"], "attention.BahdanauAttention.__init__": ["benchmark.Benchmark.rand", "<builtin>.super"], "benchmark.Benchmark.rand": [], "attention.BahdanauAttention.forward": ["torch.tanh"], "attention.BahdanauAttention.reference": ["benchmark.Benchmark.numpy", "attention.BahdanauAttention.forward"], "benchmark.Benchmark.numpy": [], "attention.BahdanauAttention.config": [], "attention.BahdanauAttention.module": [], "attention.BahdanauAttention.memory_workload": ["torch.Size", "attention.BahdanauAttention.memory_workload.memsize"], "attention.BahdanauAttention.memory_workload.memsize": [], "attention.BahdanauAttention.default_configs": [], "benchmark.register_benchmark_class": [], "benchmark": ["contextlib.contextmanager", "benchmark.main"], "benchmark.Benchmark.__init__": ["<builtin>.callable", "<builtin>.ValueError", "<builtin>.dir", "<builtin>.setattr", "<builtin>.getattr", "<builtin>.hasattr", "tensor_engine.get_engine"], "tensor_engine.get_engine": ["<builtin>.ValueError"], "<builtin>.dir": [], "benchmark.Benchmark.forward": ["<builtin>.ValueError"], "benchmark.Benchmark.check": ["numpy.testing.assert_allclose", "benchmark.Benchmark.compute"], "benchmark.Benchmark.compute": ["benchmark.Benchmark.forward"], "numpy.testing.assert_allclose": [], "benchmark.Benchmark.config": ["<builtin>.ValueError"], "benchmark.Benchmark.desc": ["benchmark.Benchmark.config", "<builtin>.str", "benchmark.Benchmark.module"], "benchmark.Benchmark.module": ["<builtin>.ValueError"], "benchmark.Benchmark.memory_workload": ["<builtin>.ValueError"], "benchmark.Benchmark.compute_workload": [], "benchmark.Benchmark.input_iterable": [], "benchmark.Benchmark.dtype_to_bytes": ["torch.tensor"], "benchmark.Benchmark.default_configs": ["<builtin>.ValueError"], "benchmark.Benchmark.is_supported": [], "benchmark.Benchmark.nchw_rand": [], "benchmark.Benchmark.run": ["benchmark.Benchmark.run_impl", "torch._C._jit_override_can_fuse_on_cpu", "torch._C._jit_set_profiling_mode", "torch._C._jit_set_profiling_executor", "torch._C._jit_set_nvfuser_enabled", "torch._C._jit_set_bailout_depth", "torch._C._jit_override_can_fuse_on_gpu", "benchmark.cuda_pointwise_context", "torch._C._jit_set_texpr_fuser_enabled"], "benchmark.Benchmark.run_impl": ["<builtin>.callable", "benchmark.Benchmark.check", "torch.jit.trace", "<builtin>.print", "benchmark.Benchmark.compute_workload", "benchmark.Benchmark.dtype_to_bytes", "benchmark.Benchmark.compute", "benchmark.Benchmark.module", "benchmark.Benchmark.desc", "<builtin>.getattr", "time.time", "benchmark.Benchmark.memory_workload", "benchmark.Benchmark.dump_result", "<builtin>.range", "tensor_engine.get_engine"], "benchmark.cuda_pointwise_context": ["torch._C._jit_set_te_cuda_pointwise_loop_levels", "torch._C._jit_set_te_cuda_pointwise_block_size", "torch._C._jit_set_te_cuda_pointwise_block_count", "torch._C._jit_get_te_cuda_pointwise_loop_levels", "torch._C._jit_get_te_cuda_pointwise_block_count", "torch._C._jit_get_te_cuda_pointwise_block_size"], "torch._C._jit_set_nvfuser_enabled": [], "torch._C._jit_set_bailout_depth": [], "benchmark.Benchmark.dump_result": ["json.dumps", "<builtin>.print", "<builtin>.Exception"], "contextlib.contextmanager": [], "torch._C._jit_get_te_cuda_pointwise_loop_levels": [], "torch._C._jit_get_te_cuda_pointwise_block_count": [], "torch._C._jit_get_te_cuda_pointwise_block_size": [], "benchmark.DynamicShape.__init__": [], "benchmark.DynamicShape.inputs": [], "benchmark.DynamicShape.compute": ["<builtin>.super"], "benchmark.DynamicShape.instantiate_input": [], "benchmark.DynamicShape.run": ["benchmark.DynamicShape.load_inputs", "<builtin>.super"], "benchmark.DynamicShape.load_inputs": ["benchmark.DynamicShape.instantiate_input", "<builtin>.range"], "benchmark.DynamicShape.rand_shape": ["numpy.random.uniform", "numpy.multiply", "<builtin>.list", "<builtin>.len"], "numpy.random.uniform": [], "numpy.multiply": [], "broadcast": ["broadcast.register_broadcast_ops"], "broadcast.BroadcastMulBench.__init__": ["<builtin>.super", "<builtin>.ValueError", "benchmark.Benchmark.rand"], "broadcast.BroadcastMulBench.forward": [], "broadcast.BroadcastMulBench.reference": ["benchmark.Benchmark.numpy"], "broadcast.BroadcastMulBench.config": [], "broadcast.BroadcastMulBench.default_configs": [], "broadcast.BroadcastMulBench.memory_workload": [], "broadcast.BroadcastRowBench.__init__": ["<builtin>.super"], "broadcast.BroadcastRowBench.module": [], "broadcast.BroadcastMidBench.__init__": ["<builtin>.super"], "broadcast.BroadcastMidBench.module": [], "broadcast.BroadcastColBench.__init__": ["<builtin>.super"], "broadcast.BroadcastColBench.module": [], "broadcast.BroadcastThreeArgs.__init__": ["<builtin>.super", "benchmark.Benchmark.rand"], "broadcast.BroadcastThreeArgs.forward": [], "broadcast.BroadcastThreeArgs.reference": ["benchmark.Benchmark.numpy"], "broadcast.BroadcastThreeArgs.config": [], "broadcast.BroadcastThreeArgs.default_configs": [], "broadcast.BroadcastThreeArgs.memory_workload": [], "broadcast.BroadcastThreeArgs.module": [], "broadcast.BroadcastBench.__init__": ["<builtin>.super", "benchmark.Benchmark.rand"], "broadcast.BroadcastBench._eval": ["benchmark.Benchmark.__class__.binary_op_pt_func", "benchmark.Benchmark.__class__.unary_op_np_func", "benchmark.Benchmark.__class__.binary_op_np_func", "benchmark.Benchmark.__class__.unary_op_pt_func"], "broadcast.BroadcastBench._eval.binary_op": [], "broadcast.BroadcastBench._eval.unary_op": [], "benchmark.Benchmark.__class__.unary_op_np_func": [], "benchmark.Benchmark.__class__.unary_op_pt_func": [], "benchmark.Benchmark.__class__.binary_op_pt_func": [], "benchmark.Benchmark.__class__.binary_op_np_func": [], "broadcast.BroadcastBench.forward": ["broadcast.BroadcastBench._eval"], "broadcast.BroadcastBench.reference": ["broadcast.BroadcastBench._eval", "benchmark.Benchmark.numpy"], "broadcast.BroadcastBench.config": [], "broadcast.BroadcastBench.module": [], "broadcast.BroadcastBench.memory_workload": ["<builtin>.len"], "broadcast.BroadcastBench.default_configs": [], "broadcast.register_broadcast_ops": ["benchmark.register_benchmark_class", "<builtin>.type", "itertools.product", "<builtin>.len"], "broadcast.register_broadcast_ops.<list1>.<list1>.<lambda1>": [], "broadcast.register_broadcast_ops.<list1>.<list2>.<lambda1>": [], "broadcast.register_broadcast_ops.<list1>.<list3>.<lambda1>": [], "broadcast.register_broadcast_ops.<list1>.<list4>.<lambda1>": [], "broadcast.register_broadcast_ops.<list1>.<list5>.<lambda1>": [], "torch.pow": [], "broadcast.register_broadcast_ops.<lambda1>": ["torch.min", "torch.sin", "torch.pow", "torch.max", "torch.cos", "torch.exp", "torch.erf"], "broadcast.register_broadcast_ops.<list1>.<list5>.<lambda2>": [], "numpy.power": [], "broadcast.register_broadcast_ops.<lambda2>": ["numpy.power", "numpy.maximum", "numpy.erf", "numpy.minimum", "numpy.sin", "numpy.exp", "numpy.cos"], "broadcast.register_broadcast_ops.<list1>.<list6>.<lambda1>": [], "broadcast.register_broadcast_ops.<list1>.<list6>.<lambda2>": [], "broadcast.register_broadcast_ops.<list1>.<list7>.<lambda1>": [], "broadcast.register_broadcast_ops.<list1>.<list7>.<lambda2>": [], "numpy.minimum": [], "broadcast.register_broadcast_ops.<list2>.<list1>.<lambda1>": [], "torch.erf": [], "broadcast.register_broadcast_ops.<list2>.<list1>.<lambda2>": [], "numpy.erf": [], "broadcast.register_broadcast_ops.<list2>.<list2>.<lambda1>": [], "broadcast.register_broadcast_ops.<list2>.<list2>.<lambda2>": [], "numpy.exp": [], "broadcast.register_broadcast_ops.<list2>.<list3>.<lambda1>": [], "broadcast.register_broadcast_ops.<list2>.<list3>.<lambda2>": [], "numpy.sin": [], "broadcast.register_broadcast_ops.<list2>.<list4>.<lambda1>": [], "broadcast.register_broadcast_ops.<list2>.<list4>.<lambda2>": [], "numpy.cos": [], "concat": ["benchmark.register_benchmark_class", "logging.getLogger"], "concat.Concat2D2InputBench.__init__": ["benchmark.Benchmark.randn", "<builtin>.super"], "benchmark.Benchmark.randn": [], "concat.Concat2D2InputBench.forward": ["benchmark.Benchmark.cat", "benchmark.Benchmark.add"], "benchmark.Benchmark.add": [], "benchmark.Benchmark.cat": [], "concat.Concat2D2InputBench.reference": ["numpy.concatenate", "benchmark.Benchmark.numpy"], "numpy.concatenate": [], "concat.Concat2D2InputBench.config": [], "concat.Concat2D2InputBench.module": [], "concat.Concat2D2InputBench.memory_workload": [], "concat.Concat2D2InputBench.default_configs": [], "concat.ConcatGraphOptBench.__init__": ["benchmark.Benchmark.randn", "torch._C._jit_cat_wo_conditionals", "torch._C._jit_override_can_fuse_on_cpu", "<builtin>.super"], "torch._C._jit_cat_wo_conditionals": [], "concat.ConcatGraphOptBench.forward": ["benchmark.Benchmark.relu", "benchmark.Benchmark.cat", "benchmark.Benchmark.add"], "benchmark.Benchmark.relu": [], "concat.ConcatGraphOptBench.reference": ["numpy.concatenate", "benchmark.Benchmark.numpy"], "concat.ConcatGraphOptBench.config": [], "concat.ConcatGraphOptBench.module": [], "concat.ConcatGraphOptBench.memory_workload": [], "concat.ConcatGraphOptBench.default_configs": [], "conv": ["benchmark.register_benchmark_class", "typing.TypeVar"], "conv.ConvImplBench.__init__": ["benchmark.Benchmark.rand", "<builtin>.super", "<builtin>.ValueError", "benchmark.Benchmark.to_device", "benchmark.Benchmark.conv2d_layer"], "benchmark.Benchmark.conv2d_layer": [], "benchmark.Benchmark.to_device": [], "conv.ConvImplBench.forward": [], "conv.ConvImplBench.config": [], "conv.ConvImplBench.memory_workload": [], "conv.ConvImplBench.compute_workload": ["<builtin>.ValueError"], "conv.ConvImplBench.default_configs": [], "conv.ConvBench.__init__": ["<builtin>.super"], "conv.ConvBench.module": [], "conv.DepthwiseConvBench.__init__": ["<builtin>.super"], "conv.DepthwiseConvBench.module": [], "elementwise": ["benchmark.register_benchmark_class", "elementwise.register_element_ops"], "elementwise.ElementBench.__init__": ["<builtin>.super", "benchmark.Benchmark.rand"], "elementwise.ElementBench._eval": ["benchmark.Benchmark.__class__.binary_op_pt_func", "benchmark.Benchmark.__class__.unary_op_np_func", "benchmark.Benchmark.__class__.unary_op_pt_func", "benchmark.Benchmark.__class__.binary_op_np_func"], "elementwise.ElementBench._eval.binary_op": [], "elementwise.ElementBench._eval.unary_op": [], "elementwise.ElementBench.forward": ["elementwise.ElementBench._eval"], "elementwise.ElementBench.reference": ["benchmark.Benchmark.numpy", "elementwise.ElementBench._eval"], "elementwise.ElementBench.config": [], "elementwise.ElementBench.module": [], "elementwise.ElementBench.memory_workload": ["<builtin>.len"], "elementwise.ElementBench.default_configs": [], "elementwise.register_element_ops": ["<builtin>.len", "benchmark.register_benchmark_class", "<builtin>.type", "itertools.product"], "elementwise.register_element_ops.<list1>.<list1>.<lambda1>": [], "elementwise.register_element_ops.<list1>.<list2>.<lambda1>": [], "elementwise.register_element_ops.<list1>.<list3>.<lambda1>": [], "elementwise.register_element_ops.<list1>.<list4>.<lambda1>": [], "elementwise.register_element_ops.<list1>.<list5>.<lambda1>": [], "elementwise.register_element_ops.<lambda1>": ["torch.sin", "torch.max", "torch.rand_like", "torch.min", "torch.cos", "torch.exp", "torch.pow", "torch.erf"], "elementwise.register_element_ops.<list1>.<list5>.<lambda2>": [], "elementwise.register_element_ops.<lambda2>": ["numpy.sin", "numpy.cos", "numpy.random.rand", "numpy.power", "numpy.minimum", "numpy.maximum", "numpy.exp"], "elementwise.register_element_ops.<list1>.<list6>.<lambda1>": [], "elementwise.register_element_ops.<list1>.<list6>.<lambda2>": [], "elementwise.register_element_ops.<list1>.<list7>.<lambda1>": [], "elementwise.register_element_ops.<list1>.<list7>.<lambda2>": [], "elementwise.register_element_ops.<list2>.<list1>.<lambda1>": [], "elementwise.register_element_ops.<list2>.<list1>.<lambda2>": [], "elementwise.register_element_ops.<list2>.<list2>.<lambda1>": [], "elementwise.register_element_ops.<list2>.<list2>.<lambda2>": [], "elementwise.register_element_ops.<list2>.<list3>.<lambda1>": [], "elementwise.register_element_ops.<list2>.<list3>.<lambda2>": [], "elementwise.register_element_ops.<list2>.<list4>.<lambda1>": [], "elementwise.register_element_ops.<list2>.<list4>.<lambda2>": [], "elementwise.register_element_ops.<list2>.<list5>.<lambda1>": [], "torch.rand_like": [], "elementwise.register_element_ops.<list2>.<list5>.<lambda2>": [], "elementwise.SimpleElementBench.__init__": ["<builtin>.super", "benchmark.Benchmark.rand"], "elementwise.SimpleElementBench.forward": [], "elementwise.SimpleElementBench.reference": ["benchmark.Benchmark.numpy", "benchmark.Benchmark._eval"], "benchmark.Benchmark._eval": [], "elementwise.SimpleElementBench.config": [], "elementwise.SimpleElementBench.input_iterable": [], "elementwise.SimpleElementBench.module": [], "elementwise.SimpleElementBench.memory_workload": ["<builtin>.len"], "elementwise.SimpleElementBench.default_configs": [], "elementwise.DynamicSimpleElementBench.__init__": ["elementwise.SimpleElementBench.__init__", "benchmark.DynamicShape.__init__"], "elementwise.DynamicSimpleElementBench.module": [], "elementwise.DynamicSimpleElementBench.instantiate_input": ["benchmark.DynamicShape.rand_shape", "benchmark.Benchmark.rand"], "matmul": ["benchmark.register_benchmark_class"], "matmul.MatMulBench.__init__": ["benchmark.Benchmark.rand", "<builtin>.super"], "matmul.MatMulBench.forward": ["benchmark.Benchmark.matmul"], "benchmark.Benchmark.matmul": [], "matmul.MatMulBench.reference": ["numpy.matmul", "benchmark.Benchmark.numpy"], "numpy.matmul": [], "matmul.MatMulBench.config": [], "matmul.MatMulBench.module": [], "matmul.MatMulBench.memory_workload": [], "matmul.MatMulBench.compute_workload": [], "matmul.MatMulBench.default_configs": [], "microbenchmarks": ["microbenchmarks.dump_plot", "microbenchmarks.normalize_benchmarks", "microbenchmarks.gen_unary_torch_fun", "<builtin>.zip", "argparse.ArgumentParser", "microbenchmarks.gen_binary_torch_fun", "<builtin>.list", "torch.set_num_threads", "microbenchmarks.gen_unary_nnc_fun", "microbenchmarks.gen_binary_nnc_fun", "microbenchmarks.run_benchmarks", "microbenchmarks.gen_custom_torch_fun"], "microbenchmarks.kernel_arena_scope.__enter__": ["torch._C._te.KernelScope"], "torch._C._te.KernelScope": [], "microbenchmarks.kernel_arena_scope.__exit__": [], "microbenchmarks.gen_unary_nnc_fun": [], "microbenchmarks.gen_unary_nnc_fun.nnc_fun": [], "microbenchmarks.gen_unary_nnc_fun.nnc_fun.compute": ["<builtin>.getattr"], "microbenchmarks.gen_unary_torch_fun": [], "microbenchmarks.gen_unary_torch_fun.torch_fun": [], "microbenchmarks.gen_unary_torch_fun.torch_fun.fun": [], "microbenchmarks.gen_binary_nnc_fun": [], "microbenchmarks.gen_binary_nnc_fun.nnc_fun": [], "microbenchmarks.gen_binary_nnc_fun.nnc_fun.compute": [], "microbenchmarks.gen_binary_torch_fun": [], "microbenchmarks.gen_binary_torch_fun.pt_fun": [], "microbenchmarks.gen_binary_torch_fun.pt_fun.fun": [], "microbenchmarks.gen_int_comparison_tensors": ["torch.randint", "torch.empty"], "microbenchmarks.gen_float_comparison_tensors": ["torch.rand", "torch.empty"], "microbenchmarks.<list2>.<lambda1>": [], "microbenchmarks.<list2>.<lambda2>": [], "microbenchmarks.<list2>.<lambda3>": [], "microbenchmarks.<list2>.<lambda4>": [], "microbenchmarks.<list2>.<lambda5>": [], "torch._C._te.Cast.make": [], "microbenchmarks.<lambda5>": ["torch._C._te.Cast.make"], "microbenchmarks.<list2>.<lambda6>": [], "microbenchmarks.<lambda6>": ["torch._C._te.Cast.make"], "microbenchmarks.<list2>.<lambda7>": [], "microbenchmarks.<lambda7>": ["torch._C._te.Cast.make"], "microbenchmarks.<list2>.<lambda8>": [], "microbenchmarks.<lambda8>": ["torch._C._te.Cast.make"], "microbenchmarks.<list2>.<lambda9>": [], "microbenchmarks.<lambda9>": ["torch._C._te.Cast.make"], "microbenchmarks.nnc_relu": [], "microbenchmarks.nnc_relu.f": ["torch._C._te.ifThenElse", "torch._C._te.ExprHandle.float"], "torch._C._te.ExprHandle.float": [], "torch._C._te.ifThenElse": [], "microbenchmarks.pt_relu": ["torch.relu"], "microbenchmarks.gen_custom_torch_fun": [], "microbenchmarks.gen_custom_torch_fun.pt_fun": [], "microbenchmarks.gen_custom_torch_fun.pt_fun.fun": [], "microbenchmarks.normalize_benchmarks": ["<builtin>.len"], "microbenchmarks.run_benchmarks": ["<builtin>.range", "<builtin>.int", "time.time", "microbenchmarks.run_benchmarks.get_nnc_type", "torch.empty", "torch._C._te.simplify", "pandas.DataFrame", "torch._C._te.construct_codegen", "torch._C._te.BufferArg", "microbenchmarks.run_benchmarks.check_correctness", "torch._C._te.Compute", "<builtin>.print", "torch.rand", "torch._C._te.DimArg", "torch._C._te.ExprHandle.int", "torch._C._te.Placeholder", "torch._C._te.LoopNest", "torch.no_grad"], "pandas.DataFrame": [], "microbenchmarks.run_benchmarks.get_nnc_type": [], "torch._C._te.ExprHandle.int": [], "torch._C._te.Placeholder": [], "torch._C._te.DimArg": [], "torch._C._te.Compute": [], "torch._C._te.LoopNest": [], "torch._C._te.simplify": [], "torch._C._te.BufferArg": [], "torch._C._te.construct_codegen": [], "microbenchmarks.run_benchmarks.check_correctness": ["numpy.allclose", "<builtin>.print"], "numpy.allclose": [], "microbenchmarks.dump_plot": ["matplotlib.pyplot.xlabel", "matplotlib.pyplot.title", "numpy.array", "seaborn.diverging_palette", "matplotlib.pyplot.savefig", "matplotlib.pyplot.ylabel", "<builtin>.len", "seaborn.set", "seaborn.heatmap", "matplotlib.pyplot.yticks"], "seaborn.set": [], "seaborn.diverging_palette": [], "seaborn.heatmap": [], "matplotlib.pyplot.yticks": [], "matplotlib.pyplot.title": [], "matplotlib.pyplot.xlabel": [], "matplotlib.pyplot.ylabel": [], "matplotlib.pyplot.savefig": [], "normalization": ["benchmark.register_benchmark_class"], "normalization.NormalizationBench.__init__": ["benchmark.Benchmark.nchw_rand", "benchmark.Benchmark.rand", "<builtin>.super"], "normalization.NormalizationBench.config": [], "normalization.NormalizationBench.memory_workload": [], "normalization.NormalizationBench.default_configs": [], "normalization.BatchNormBench.forward": ["benchmark.Benchmark.batch_norm"], "benchmark.Benchmark.batch_norm": [], "normalization.BatchNormBench.module": [], "normalization.InstanceNormBench.forward": ["benchmark.Benchmark.instance_norm"], "benchmark.Benchmark.instance_norm": [], "normalization.InstanceNormBench.module": [], "normalization.InstanceNormBench.is_supported": ["tensor_engine.is_supported"], "tensor_engine.is_supported": ["<builtin>.hasattr"], "normalization.LayerNormBench.forward": ["benchmark.Benchmark.layer_norm"], "benchmark.Benchmark.layer_norm": [], "normalization.LayerNormBench.module": [], "pooling": ["benchmark.register_benchmark_class"], "pooling.PoolingBench.__init__": ["benchmark.Benchmark.rand", "<builtin>.super"], "pooling.PoolingBench.forward": ["benchmark.Benchmark.avg_pool2d", "benchmark.Benchmark.max_pool2d"], "benchmark.Benchmark.max_pool2d": [], "benchmark.Benchmark.avg_pool2d": [], "pooling.PoolingBench.config": [], "pooling.PoolingBench.memory_workload": [], "pooling.PoolingBench.default_configs": [], "pooling.MaxPoolBench.__init__": ["<builtin>.super"], "pooling.MaxPoolBench.module": [], "pooling.AvgPoolBench.__init__": ["<builtin>.super"], "pooling.AvgPoolBench.module": [], "pt_engine": [], "pt_engine.TorchTensorEngine.rand": ["torch.rand"], "pt_engine.TorchTensorEngine.randn": ["torch.randn"], "pt_engine.TorchTensorEngine.nchw_rand": ["pt_engine.TorchTensorEngine.rand"], "pt_engine.TorchTensorEngine.reset": [], "pt_engine.TorchTensorEngine.rand_like": ["torch.rand_like"], "pt_engine.TorchTensorEngine.numpy": [], "pt_engine.TorchTensorEngine.mul": [], "pt_engine.TorchTensorEngine.add": [], "pt_engine.TorchTensorEngine.batch_norm": ["torch.nn.functional.batch_norm"], "pt_engine.TorchTensorEngine.instance_norm": ["torch.nn.functional.instance_norm"], "pt_engine.TorchTensorEngine.layer_norm": ["torch.nn.functional.layer_norm"], "pt_engine.TorchTensorEngine.sync_cuda": ["torch.cuda.synchronize"], "pt_engine.TorchTensorEngine.backward": ["torch.autograd.backward"], "torch.autograd.backward": [], "pt_engine.TorchTensorEngine.sum": ["torch.sum"], "pt_engine.TorchTensorEngine.softmax": ["torch.nn.functional.softmax"], "pt_engine.TorchTensorEngine.cat": ["torch.cat"], "pt_engine.TorchTensorEngine.clamp": ["torch.clamp"], "pt_engine.TorchTensorEngine.relu": ["torch.nn.functional.relu"], "torch.nn.functional.relu": [], "pt_engine.TorchTensorEngine.tanh": ["torch.tanh"], "pt_engine.TorchTensorEngine.max_pool2d": ["torch.nn.functional.max_pool2d"], "torch.nn.functional.max_pool2d": [], "pt_engine.TorchTensorEngine.avg_pool2d": ["torch.nn.functional.avg_pool2d"], "torch.nn.functional.avg_pool2d": [], "pt_engine.TorchTensorEngine.conv2d_layer": ["torch.nn.Conv2d"], "pt_engine.TorchTensorEngine.matmul": ["torch.matmul"], "pt_engine.TorchTensorEngine.to_device": [], "reduction": ["benchmark.register_benchmark_class"], "reduction.ReduceBench.__init__": ["reduction.ReduceBench._set_skip_input_transform", "<builtin>.ValueError", "benchmark.Benchmark.randn", "<builtin>.super"], "reduction.ReduceBench._set_skip_input_transform": ["<builtin>.ValueError"], "reduction.ReduceBench.forward": ["benchmark.Benchmark.sum", "benchmark.Benchmark.add"], "benchmark.Benchmark.sum": [], "reduction.ReduceBench.config": ["reduction.ReduceBench._skip_input_transform_str"], "reduction.ReduceBench._skip_input_transform_str": [], "reduction.ReduceBench.default_configs": [], "reduction.ReduceBench.module": [], "reduction.ReduceBench.memory_workload": [], "reduction.ReduceRowBench.__init__": ["<builtin>.super"], "reduction.ReduceRowBench.module": [], "reduction.ReduceMidBench.__init__": ["<builtin>.super"], "reduction.ReduceMidBench.module": [], "reduction.ReduceColBench.__init__": ["<builtin>.super"], "reduction.ReduceColBench.module": [], "reduction.ReduceFullBench.__init__": ["<builtin>.super"], "reduction.ReduceFullBench.config": ["reduction.ReduceBench._skip_input_transform_str"], "reduction.ReduceFullBench.default_configs": [], "reduction.ReduceFullBench.module": [], "reduction.Reduce2DBench.__init__": ["<builtin>.ValueError", "benchmark.Benchmark.randn", "<builtin>.super"], "reduction.Reduce2DBench.forward": ["benchmark.Benchmark.sum", "benchmark.Benchmark.add"], "reduction.Reduce2DBench.config": [], "reduction.Reduce2DBench.default_configs": [], "reduction.Reduce2DBench.module": [], "reduction.Reduce2DBench.input_iterable": [], "reduction.Reduce2DBench.memory_workload": [], "reduction.Reduce2DInnerBench.__init__": ["<builtin>.super"], "reduction.Reduce2DInnerBench.default_configs": ["reduction.Reduce2DBench.default_configs"], "reduction.Reduce2DInnerBench.config": ["<builtin>.super"], "reduction.Reduce2DInnerBench.module": [], "reduction.Reduce2DOuterBench.__init__": ["<builtin>.super"], "reduction.Reduce2DOuterBench.default_configs": ["reduction.Reduce2DBench.default_configs"], "reduction.Reduce2DOuterBench.config": ["<builtin>.super"], "reduction.Reduce2DOuterBench.module": [], "reduction.DynamicReduce2DBench.__init__": ["benchmark.DynamicShape.__init__", "reduction.Reduce2DBench.__init__"], "reduction.DynamicReduce2DBench.instantiate_input": ["benchmark.DynamicShape.rand_shape", "benchmark.Benchmark.randn"], "reduction.DynamicReduce2DBench.module": [], "reduction.DynamicReduce2DInnerBench.__init__": ["<builtin>.super"], "reduction.DynamicReduce2DInnerBench.default_configs": ["reduction.Reduce2DBench.default_configs"], "reduction.DynamicReduce2DInnerBench.config": ["<builtin>.super"], "reduction.DynamicReduce2DInnerBench.module": [], "reduction.DynamicReduce2DOuterBench.__init__": ["<builtin>.super"], "reduction.DynamicReduce2DOuterBench.default_configs": ["reduction.Reduce2DBench.default_configs"], "reduction.DynamicReduce2DOuterBench.config": ["<builtin>.super"], "reduction.DynamicReduce2DOuterBench.module": [], "rnn_eltwise": ["benchmark.register_benchmark_class"], "rnn_eltwise.RNNEltwise.__init__": ["benchmark.Benchmark.rand", "<builtin>.super"], "rnn_eltwise.RNNEltwise.forward": ["torch.sigmoid", "torch.tanh"], "rnn_eltwise.RNNEltwise.config": [], "rnn_eltwise.RNNEltwise.module": [], "rnn_eltwise.RNNEltwise.memory_workload": ["<builtin>.sum", "rnn_eltwise.RNNEltwise.memory_workload.memsize"], "rnn_eltwise.RNNEltwise.memory_workload.memsize": [], "rnn_eltwise.RNNEltwise.default_configs": [], "rnn_eltwise.DynamicLSTM.__init__": ["rnn_eltwise.RNNEltwise.__init__", "benchmark.DynamicShape.__init__"], "rnn_eltwise.DynamicLSTM.instantiate_input": ["benchmark.Benchmark.rand", "benchmark.DynamicShape.rand_shape"], "rnn_eltwise.DynamicLSTM.module": [], "softmax": ["benchmark.register_benchmark_class"], "softmax.SoftmaxBench.__init__": ["<builtin>.super", "benchmark.Benchmark.randn"], "softmax.SoftmaxBench.forward": ["benchmark.Benchmark.softmax", "benchmark.Benchmark.add"], "benchmark.Benchmark.softmax": [], "softmax.SoftmaxBench.reference": ["benchmark.Benchmark.numpy"], "softmax.SoftmaxBench.config": [], "softmax.SoftmaxBench.module": [], "softmax.SoftmaxBench.memory_workload": [], "softmax.SoftmaxBench.default_configs": [], "swish": ["benchmark.register_benchmark_class"], "swish.SwishBench.__init__": ["torch.zeros", "benchmark.Benchmark.rand", "<builtin>.super"], "swish.SwishBench.forward": ["torch.relu", "torch.min"], "swish.SwishBench.reference": ["benchmark.Benchmark.numpy", "swish.SwishBench.forward"], "swish.SwishBench.config": [], "swish.SwishBench.module": [], "swish.SwishBench.memory_workload": [], "swish.SwishBench.default_configs": [], "tensor_engine": [], "tensor_engine.unsupported": [], "tensor_engine.unsupported.wrapper": [], "tensor_engine.set_engine_mode": ["pt_engine.TorchTensorEngine", "relay_engine.RelayEngine", "<builtin>.ValueError", "nnc_engine.NncEngine", "tf_engine.TensorFlowEngine", "topi_engine.TopiEngine"], "tf_engine.TensorFlowEngine": [], "pt_engine.TorchTensorEngine": [], "topi_engine.TopiEngine": [], "relay_engine.RelayEngine": [], "nnc_engine.NncEngine": [], "__main__": ["__main__.main", "__main__.clang_search_dirs", "sys.exit", "main"], "__main__.main": ["benchmark.benchmark_classes", "<builtin>.ValueError", "<builtin>.int", "<builtin>.print", "benchmark.benchmark_classes.module", "<builtin>.len", "<builtin>.AttributeError", "argparse.ArgumentParser", "torch._C._jit_cat_wo_conditionals", "<builtin>.getattr", "torch._C._jit_override_can_fuse_on_gpu", "<builtin>.enumerate", "__main__.main.run_default_configs", "torch._C._jit_set_nvfuser_enabled", "torch._C._jit_set_texpr_fuser_enabled", "tensor_engine.set_engine_mode", "torch._C._jit_set_profiling_executor", "__main__.main.set_global_threads", "benchmark.benchmark_classes.input_iterable", "torch._C._jit_override_can_fuse_on_cpu", "torch._C._jit_set_profiling_mode", "__main__.main.run_with_input_iter", "__main__.parse_args", "sys.exit", "<builtin>.RuntimeError", "pathlib.Path", "tools.linter.clang_tidy.run.run", "tools.linter.clang_tidy.generate_build_files.generate_build_files", "os.access", "torch.cuda.is_available", "torch.cuda.init", "__main__.cpu_time_total", "<builtin>.abs", "__main__.run_cprofile", "sys.path.insert", "__main__.run_env_analysis", "__main__.print_cprofile_summary", "os.path.dirname", "__main__.print_autograd_prof_summary", "<builtin>.compile", "<builtin>.open", "__main__.run_autograd_prof", "__main__.redirect_argv"], "__main__.main.set_global_threads": ["<builtin>.str"], "<builtin>.AttributeError": [], "__main__.main.run_default_configs": ["<builtin>.ValueError", "itertools.product", "benchmark.benchmark_classes.default_configs", "benchmark.benchmark_classes"], "benchmark.benchmark_classes.default_configs": [], "benchmark.benchmark_classes": [], "__main__.main.run_with_input_iter": ["benchmark.benchmark_classes", "<builtin>.int", "itertools.product", "<builtin>.list", "<builtin>.ValueError", "<builtin>.range"], "benchmark.benchmark_classes.module": [], "benchmark.benchmark_classes.input_iterable": [], "blas_compare": ["blas_compare.main", "queue.Queue", "os.path.join", "argparse.ArgumentParser", "blas_compare._subprocess_main", "threading.Lock", "blas_compare._compare_main"], "queue.Queue": [], "blas_compare.clear_worker_pool": ["shutil.rmtree", "os.remove", "os.path.exists"], "blas_compare.fill_core_pool": ["os.makedirs", "blas_compare.clear_worker_pool", "<builtin>.max", "multiprocessing.cpu_count", "tempfile.mkstemp", "<builtin>.range"], "tempfile.mkstemp": [], "blas_compare._subprocess_main": ["os.getenv", "torch.utils.benchmark.Timer", "itertools.product", "pickle.dump", "torch.rand", "torch.__file__.startswith", "<builtin>.open", "os.path.split", "<builtin>.ValueError", "torch.manual_seed"], "os.getenv": [], "torch.__file__.startswith": [], "blas_compare.run_subprocess": ["os.getenv", "<builtin>.str", "subprocess.run", "os.path.abspath", "<builtin>.open"], "blas_compare._compare_main": ["<builtin>.open", "pickle.load", "torch.utils.benchmark.Compare"], "pickle.load": [], "blas_compare.main": ["<builtin>.int", "blas_compare.fill_core_pool", "multiprocessing.dummy.Pool", "time.time", "sys.stdout.flush", "<builtin>.len", "os.path.join", "datetime.timedelta", "<builtin>.enumerate", "subprocess.run", "<builtin>.print", "os.path.abspath", "<builtin>.open", "<builtin>.range"], "multiprocessing.dummy.Pool": [], "datetime.timedelta": [], "blas_compare_setup": ["collections.namedtuple", "blas_compare_setup.main"], "blas_compare_setup.conda_run": ["<builtin>.OSError", "<builtin>.str"], "<builtin>.OSError": [], "blas_compare_setup.main": ["subprocess.check_output", "shutil.rmtree", "os.path.realpath", "os.makedirs", "<builtin>.print", "subprocess.run", "blas_compare_setup.conda_run", "<builtin>.OSError", "os.path.exists", "os.path.join", "os.path.dirname"], "os.path.realpath": [], "os.path.dirname": [], "subprocess.check_output": [], "compare.FauxTorch.__init__": [], "compare.FauxTorch.extra_overhead": ["<builtin>.int", "time.sleep"], "compare.FauxTorch.add": ["compare.FauxTorch.extra_overhead", "torch.add"], "compare.FauxTorch.mul": ["torch.mul", "compare.FauxTorch.extra_overhead"], "torch.mul": [], "compare.FauxTorch.cat": ["torch.cat", "compare.FauxTorch.extra_overhead"], "compare.FauxTorch.matmul": ["compare.FauxTorch.extra_overhead", "torch.matmul"], "pickle.dumps": [], "pickle.loads": [], "end_to_end": ["end_to_end.main", "end_to_end.subprocess_main", "end_to_end.parse_args"], "end_to_end.parse_args": ["torch.cuda.device_count", "argparse.ArgumentParser"], "torch.cuda.device_count": [], "end_to_end.construct_stmt_and_label": ["<builtin>.ValueError", "<builtin>.int", "numpy.random.RandomState", "numpy.log2", "numpy.floor", "<builtin>.max"], "numpy.log2": [], "numpy.floor": [], "end_to_end.subprocess_main": ["end_to_end.construct_stmt_and_label", "pickle.dump", "<builtin>.enumerate", "<builtin>.open", "torch.utils.benchmark.op_fuzzers.unary.UnaryOpFuzzer", "torch.utils.benchmark.Timer", "<builtin>.print"], "torch.utils.benchmark.op_fuzzers.unary.UnaryOpFuzzer": [], "end_to_end._main": ["<builtin>.int", "multiprocessing.dummy.Pool", "end_to_end.process_results", "<builtin>.range", "multiprocessing.cpu_count", "<builtin>.print"], "end_to_end.process_results": ["<builtin>.any", "end_to_end.construct_table", "<builtin>.set", "<builtin>.len", "<builtin>.print"], "end_to_end.merge": ["torch.utils.benchmark.Measurement", "<builtin>.len", "<builtin>.all", "itertools.chain", "<builtin>.list"], "torch.utils.benchmark.Measurement": [], "end_to_end.construct_table": ["<builtin>.int", "tempfile.mkstemp", "<builtin>.sorted", "<builtin>.len", "<builtin>.zip", "<builtin>.open", "end_to_end.row_str", "<builtin>.print", "textwrap.dedent"], "end_to_end.construct_table.<lambda1>": [], "end_to_end.row_str": ["<builtin>.all", "<builtin>.zip", "<builtin>.str", "<builtin>.range", "<builtin>.abs"], "end_to_end.read_results": ["<builtin>.open", "pickle.load"], "end_to_end.run": ["<builtin>.str", "subprocess.run", "os.getenv"], "end_to_end.test_source": ["<builtin>.ValueError", "end_to_end.run"], "end_to_end.map_fn": ["tempfile.mkstemp", "os.remove", "end_to_end.run", "os.path.exists", "end_to_end.read_results"], "end_to_end.main": ["end_to_end._main", "end_to_end.test_source"], "fuzzer": ["fuzzer.main"], "fuzzer.main": ["<builtin>.str", "<builtin>.tuple", "<builtin>.print", "fuzzer.main.time_fn", "torch.utils.benchmark.Fuzzer", "torch.utils.benchmark.FuzzedTensor", "sys.stdout.flush", "<builtin>.range", "torch.utils.benchmark.Timer", "torch.utils.benchmark.FuzzedParameter", "<builtin>.enumerate", "torch.utils.benchmark.FuzzedSparseTensor"], "torch.utils.benchmark.FuzzedParameter": [], "torch.utils.benchmark.FuzzedTensor": [], "torch.utils.benchmark.Fuzzer": [], "fuzzer.main.time_fn": [], "op_benchmark": ["op_benchmark.main"], "op_benchmark.assert_dicts_equal": ["<builtin>.all", "<builtin>.set", "numpy.all"], "numpy.all": [], "op_benchmark.run": ["<builtin>.max", "<builtin>.all", "<builtin>.sum", "<builtin>.int", "<builtin>.zip", "<builtin>.enumerate", "numpy.log2", "<builtin>.str", "torch.utils.benchmark.op_fuzzers.binary.BinaryOpFuzzer", "<builtin>.print", "torch.utils.benchmark.op_fuzzers.unary.UnaryOpFuzzer", "<builtin>.abs", "<builtin>.tuple", "torch.utils.benchmark.Timer", "numpy.arange", "op_benchmark.assert_dicts_equal", "<builtin>.len", "torch.utils.benchmark.op_fuzzers.sparse_binary.BinaryOpSparseFuzzer", "torch.utils.benchmark.op_fuzzers.sparse_unary.UnaryOpSparseFuzzer"], "torch.utils.benchmark.op_fuzzers.binary.BinaryOpFuzzer": [], "numpy.arange": [], "op_benchmark.run.<lambda1>": [], "op_benchmark.main": ["op_benchmark.run"], "simple_timeit": ["simple_timeit.main"], "simple_timeit.main": ["torch.utils.benchmark.Timer", "<builtin>.range", "torch.ones", "<builtin>.print"], "spectral_ops_fuzz_test": ["argparse.ArgumentParser", "<builtin>.print", "<builtin>.open", "torch.utils.benchmark.Compare", "collections.namedtuple", "spectral_ops_fuzz_test._output_csv", "<builtin>.len", "spectral_ops_fuzz_test.run_benchmark"], "spectral_ops_fuzz_test._dim_options": ["<builtin>.ValueError"], "spectral_ops_fuzz_test.run_benchmark": ["torch.utils.benchmark.Timer", "spectral_ops_fuzz_test._dim_options", "torch.utils.benchmark.op_fuzzers.spectral.SpectralOpFuzzer"], "torch.utils.benchmark.op_fuzzers.spectral.SpectralOpFuzzer": [], "spectral_ops_fuzz_test._output_csv": ["<builtin>.str", "<builtin>.print", "<builtin>.isinstance"], "binary": ["<builtin>.range", "<builtin>.int", "numpy.log2", "<builtin>.tuple"], "binary.BinaryOpFuzzer.__init__": ["<builtin>.super"], "sparse_binary": ["<builtin>.tuple", "<builtin>.range", "numpy.log2", "<builtin>.int"], "sparse_binary.BinaryOpSparseFuzzer.__init__": ["<builtin>.super"], "sparse_unary": ["<builtin>.range", "numpy.log2", "<builtin>.int", "<builtin>.tuple"], "sparse_unary.UnaryOpSparseFuzzer.__init__": ["<builtin>.super"], "spectral": ["spectral.power_range"], "spectral.power_range": ["<builtin>.range", "math.log", "<builtin>.int"], "spectral.SpectralOpFuzzer.__init__": ["<builtin>.super"], "unary": ["<builtin>.int", "<builtin>.range", "<builtin>.tuple", "numpy.log2"], "unary.UnaryOpFuzzer.__init__": ["<builtin>.super"], "common.TaskSpec.title": ["textwrap.indent"], "common.TaskSpec.setup_str": ["textwrap.indent"], "common.TaskSpec.summarize": ["common.TaskSpec.setup_str"], "common.Measurement.__post_init__": [], "common.Measurement.__getattr__": ["<builtin>.getattr", "<builtin>.super"], "common.Measurement.times": [], "common.Measurement.median": ["common.Measurement._lazy_init"], "common.Measurement._lazy_init": ["common.Measurement._lazy_init.add_warning", "<builtin>.tuple", "common.Measurement.meets_confidence", "<builtin>.sorted", "torch.tensor"], "common.Measurement.mean": ["common.Measurement._lazy_init"], "common.Measurement.iqr": ["common.Measurement._lazy_init"], "common.Measurement.significant_figures": ["torch.tensor", "<builtin>.int", "<builtin>.len", "<builtin>.min", "common.Measurement._lazy_init", "<builtin>.max"], "common.Measurement.has_warnings": ["<builtin>.bool", "common.Measurement._lazy_init"], "<builtin>.bool": [], "common.Measurement._lazy_init.add_warning": [], "common.Measurement.meets_confidence": [], "common.Measurement.title": [], "common.Measurement.env": ["typing.cast"], "common.Measurement.as_row_name": [], "common.Measurement.__repr__": ["<builtin>.super", "common.Measurement._lazy_init", "common.select_unit", "<builtin>.len"], "common.select_unit": ["torch.tensor", "<builtin>.int"], "common.Measurement.merge": ["common.Measurement.merge.merge_group", "collections.defaultdict"], "common.Measurement.merge.merge_group": [], "common.unit_to_english": [], "common.trim_sigfig": ["<builtin>.float", "torch.tensor", "<builtin>.int"], "common.ordered_unique": ["collections.OrderedDict", "<builtin>.list"], "common.set_torch_threads": ["torch.get_num_threads", "torch.set_num_threads"], "torch.get_num_threads": [], "common._make_temp_dir": ["uuid.uuid4", "os.makedirs", "os.kill", "os.getenv", "os.getpid", "time.time", "<builtin>.int", "os.listdir", "<builtin>.str", "shutil.rmtree", "tempfile.gettempprefix", "<builtin>.print", "<builtin>.open", "os.path.join", "os.path.exists", "tempfile.gettempdir"], "os.listdir": [], "os.kill": [], "tempfile.gettempdir": [], "tempfile.gettempprefix": [], "compare._Column.__init__": ["<builtin>.any", "<builtin>.list", "itertools.chain", "<builtin>.max", "<builtin>.min", "torch.tensor", "<builtin>.zip", "<builtin>.int"], "compare._Column.get_results_for": [], "compare._Column.num_to_str": ["torch.utils.benchmark.utils.common.trim_sigfig", "<builtin>.len", "compare._Column.num_to_str"], "torch.utils.benchmark.utils.common.trim_sigfig": [], "compare.optional_min": ["<builtin>.list", "<builtin>.len", "<builtin>.min"], "compare._Row.__init__": ["<builtin>.super"], "compare._Row.register_columns": [], "compare._Row.as_column_strings": ["<builtin>.zip"], "compare._Row.color_segment": [], "compare._Row.row_separator": [], "compare._Row.finalize_column_strings": ["<builtin>.zip", "compare.optional_min", "compare._Row.color_segment", "<builtin>.min"], "compare.Table.__init__": ["compare.Table.populate_rows_and_columns", "torch.utils.benchmark.utils.common.ordered_unique", "compare.Table.col_fn", "<builtin>.set", "<builtin>.len", "compare.Table.row_fn", "<builtin>.min", "torch.utils.benchmark.utils.common.select_unit"], "torch.utils.benchmark.utils.common.select_unit": [], "compare.Table.row_fn": [], "torch.utils.benchmark.utils.common.ordered_unique": [], "compare.Table.__init__.<lambda1>": [], "compare.Table.col_fn": [], "compare.Table.populate_rows_and_columns": ["compare.Table.col_fn", "<builtin>.enumerate", "<builtin>.len", "<builtin>.tuple", "<builtin>.max", "compare.Table.row_fn", "compare._Column.__init__", "compare._Row.__init__", "<builtin>.zip", "<builtin>.range"], "compare.Table.render": ["<builtin>.any", "<builtin>.len", "<builtin>.max", "torch.utils.benchmark.utils.common.unit_to_english", "<builtin>.zip", "<builtin>.range"], "torch.utils.benchmark.utils.common.unit_to_english": [], "compare.Compare.__init__": ["compare.Compare.extend_results"], "compare.Compare.extend_results": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.type"], "compare.Compare.__str__": ["compare.Compare._render"], "compare.Compare._render": ["compare.Compare._group_by_label", "torch.utils.benchmark.utils.common.Measurement.merge", "compare.Compare._layout"], "compare.Compare.trim_significant_figures": [], "compare.Compare.colorize": [], "compare.Compare.highlight_warnings": [], "compare.Compare.print": ["<builtin>.str", "compare.Compare.print"], "torch.utils.benchmark.utils.common.Measurement.merge": [], "compare.Compare._group_by_label": ["collections.defaultdict"], "compare.Compare._layout": ["compare.Table.__init__", "compare.Table.render"], "cpp_jit": ["os.path.abspath", "torch.__config__._cxx_flags", "os.path.join", "os.getenv", "threading.Lock", "<builtin>.hasattr", "os.path.split"], "cpp_jit._get_build_root": ["torch.utils.benchmark.utils.common._make_temp_dir", "atexit.register"], "torch.utils.benchmark.utils.common._make_temp_dir": [], "torch.__config__._cxx_flags": [], "cpp_jit.get_compat_bindings": ["os.path.join", "torch.utils.cpp_extension.load"], "torch.utils.cpp_extension.load": [], "cpp_jit._compile_template": ["<builtin>.open", "<builtin>.hash", "<builtin>.abs", "os.path.join", "torch.utils.cpp_extension.load", "cpp_jit._get_build_root", "os.makedirs", "re.sub", "textwrap.indent"], "cpp_jit.compile_timeit_template": ["<builtin>.open", "os.path.join", "cpp_jit._compile_template", "<builtin>.isinstance"], "cpp_jit.compile_callgrind_template": ["<builtin>.open", "os.path.join", "cpp_jit._compile_template", "<builtin>.isinstance"], "fuzzer.FuzzedParameter.__init__": ["fuzzer.FuzzedParameter._check_distribution"], "fuzzer.FuzzedParameter._check_distribution": ["<builtin>.isinstance", "<builtin>.sum", "<builtin>.any", "<builtin>.abs"], "fuzzer.FuzzedParameter.name": [], "fuzzer.FuzzedParameter.sample": ["<builtin>.isinstance", "fuzzer.FuzzedParameter._custom_distribution", "fuzzer.FuzzedParameter._uniform", "fuzzer.FuzzedParameter._loguniform"], "fuzzer.FuzzedParameter._loguniform": ["numpy.log2", "<builtin>.int"], "fuzzer.FuzzedParameter._uniform": ["<builtin>.isinstance", "<builtin>.int"], "fuzzer.FuzzedParameter._custom_distribution": ["numpy.arange", "<builtin>.tuple", "<builtin>.len", "<builtin>.list"], "fuzzer.ParameterAlias.__init__": [], "fuzzer.ParameterAlias.__repr__": [], "fuzzer.dtype_size": ["torch.iinfo", "torch.finfo", "<builtin>.int"], "torch.finfo": [], "torch.iinfo": [], "fuzzer.prod": ["functools.reduce"], "fuzzer.prod.<lambda1>": ["<builtin>.int"], "fuzzer.FuzzedTensor.__init__": [], "fuzzer.FuzzedTensor.name": [], "fuzzer.FuzzedTensor.default_tensor_constructor": ["torch.randint", "torch.rand"], "fuzzer.FuzzedTensor._make_tensor": ["fuzzer.FuzzedTensor._get_size_and_steps", "numpy.argsort", "<builtin>.tuple", "<builtin>.len", "<builtin>.zip", "numpy.arange", "<builtin>.slice", "<builtin>.int", "numpy.all", "<builtin>.str"], "fuzzer.FuzzedTensor._get_size_and_steps": ["fuzzer.FuzzedTensor._get_size_and_steps.resolve", "<builtin>.zip", "<builtin>.len", "<builtin>.tuple"], "numpy.argsort": [], "<builtin>.slice": [], "fuzzer.FuzzedTensor._get_size_and_steps.resolve": ["<builtin>.tuple", "<builtin>.len", "<builtin>.range"], "fuzzer.FuzzedTensor.satisfies_constraints": ["fuzzer.FuzzedTensor._get_size_and_steps", "<builtin>.any", "fuzzer.prod", "fuzzer.FuzzedTensor.satisfies_constraints.nullable_greater", "fuzzer.dtype_size"], "fuzzer.FuzzedTensor.satisfies_constraints.nullable_greater": [], "fuzzer.Fuzzer.__init__": ["fuzzer.Fuzzer._unpack", "numpy.random.RandomState", "<builtin>.ValueError"], "fuzzer.Fuzzer._unpack": ["<builtin>.isinstance", "<builtin>.tuple", "itertools.chain"], "fuzzer.Fuzzer.take": ["torch.manual_seed", "fuzzer.Fuzzer._generate", "<builtin>.range", "numpy.random.RandomState"], "fuzzer.Fuzzer._generate": ["fuzzer.Fuzzer._resolve_aliases", "<builtin>.range", "<builtin>.all", "<builtin>.ValueError"], "fuzzer.Fuzzer.rejection_rate": [], "fuzzer.Fuzzer._resolve_aliases": ["<builtin>.ValueError", "<builtin>.sum", "<builtin>.isinstance", "<builtin>.dict", "<builtin>.list"], "sparse_fuzzer": [], "sparse_fuzzer.FuzzedSparseTensor.__init__": ["<builtin>.super"], "sparse_fuzzer.FuzzedSparseTensor.sparse_tensor_constructor": ["torch.randint", "torch.Size", "<builtin>.range", "torch.tensor", "<builtin>.all", "torch.rand", "torch.cat", "<builtin>.list", "<builtin>.isinstance", "torch.randn_like", "torch.sparse_coo_tensor"], "sparse_fuzzer.FuzzedSparseTensor._make_tensor": ["<builtin>.int", "<builtin>.sum", "sparse_fuzzer.FuzzedSparseTensor.sparse_tensor_constructor", "torch.utils.benchmark.FuzzedTensor._get_size_and_steps", "math.ceil", "<builtin>.str", "<builtin>.len"], "torch.utils.benchmark.FuzzedTensor._get_size_and_steps": [], "timer": ["torch.cuda.is_available"], "timer.timer": ["torch.cuda.synchronize", "timeit.default_timer"], "timeit.default_timer": [], "timer.CPPTimer.__init__": ["textwrap.dedent", "<builtin>.NotImplementedError", "<builtin>.ValueError"], "timer.CPPTimer.timeit": ["torch.utils.benchmark.utils.cpp_jit.compile_timeit_template"], "torch.utils.benchmark.utils.cpp_jit.compile_timeit_template": [], "timer.Timer.__init__": ["torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.CopyIfCallgrind.unwrap_all", "torch.utils.benchmark.utils.common.TaskSpec", "<builtin>.dict", "textwrap.dedent", "<builtin>.ValueError", "<builtin>.isinstance", "timer.CPPTimer.__init__"], "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.CopyIfCallgrind.unwrap_all": [], "torch.utils.benchmark.utils.common.TaskSpec": [], "timer.Timer.timeit": ["timer.CPPTimer.timeit", "torch.utils.benchmark.utils.common.Measurement", "<builtin>.int", "torch.utils.benchmark.utils.common.set_torch_threads", "<builtin>.max"], "torch.utils.benchmark.utils.common.set_torch_threads": [], "torch.utils.benchmark.utils.common.Measurement": [], "timer.Timer.repeat": ["<builtin>.NotImplementedError"], "timer.Timer.autorange": ["<builtin>.NotImplementedError"], "timer.Timer._threaded_measurement_loop": ["timer.Timer.blocked_autorange.time_hook", "timer.Timer.blocked_autorange.stop_hook", "torch.utils.benchmark.utils.common.set_torch_threads", "timer.Timer.adaptive_autorange.stop_hook", "timer.Timer.adaptive_autorange.time_hook"], "timer.Timer.blocked_autorange.time_hook": ["timer.CPPTimer.timeit"], "timer.Timer.adaptive_autorange.time_hook": ["timer.CPPTimer.timeit"], "timer.Timer.blocked_autorange.stop_hook": [], "timer.Timer.adaptive_autorange.stop_hook": ["<builtin>.len", "torch.utils.benchmark.utils.common.Measurement"], "timer.Timer._estimate_block_size": ["torch.tensor", "timer.CPPTimer.timeit", "<builtin>.range", "torch.utils.benchmark.utils.common.set_torch_threads"], "timer.Timer.adaptive_autorange": ["timer.Timer._estimate_block_size", "torch.utils.benchmark.utils.common.Measurement", "timer.Timer._threaded_measurement_loop"], "timer.Timer.blocked_autorange": ["timer.Timer._estimate_block_size", "torch.utils.benchmark.utils.common.Measurement", "timer.Timer._threaded_measurement_loop"], "timer.Timer": ["typing.overload"], "typing.overload": [], "timer.Timer.collect_callgrind": ["timer.CPPTimer.timeit", "<builtin>.ValueError", "<builtin>.isinstance", "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.wrapper_singleton"], "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface.wrapper_singleton": [], "_stubs": [], "_stubs.TimerClass.__init__": [], "_stubs.TimerClass.timeit": [], "_stubs.TimeitModuleType.timeit": [], "_stubs.CallgrindModuleType._valgrind_supported_platform": [], "_stubs.CallgrindModuleType._valgrind_toggle": [], "bench_gen": ["argparse.ArgumentParser", "bench_gen.main"], "bench_gen.parse_kwarg": ["ast.literal_eval"], "bench_gen.main": ["<builtin>.int", "caffe2.python.predictor.mobile_exporter.Export", "<builtin>.open", "caffe2.python.workspace.RunNetOnce", "<builtin>.getattr", "caffe2.python.model_helper.ModelHelper", "<builtin>.dict", "<builtin>.str", "<builtin>.range", "<builtin>.print"], "caffe2.python.model_helper.ModelHelper": [], "caffe2.python.workspace.RunNetOnce": [], "caffe2.python.predictor.mobile_exporter.Export": [], "file_store_handler_op_test": ["caffe2.python.dyndep.InitOpsLibrary"], "caffe2.python.dyndep.InitOpsLibrary": [], "file_store_handler_op_test.TestFileStoreHandlerOp.setUp": ["<builtin>.super", "tempfile.mkdtemp"], "file_store_handler_op_test.TestFileStoreHandlerOp.tearDown": ["shutil.rmtree", "<builtin>.super"], "file_store_handler_op_test.TestFileStoreHandlerOp.create_store_handler": ["os.path.isdir", "caffe2.python.core.CreateOperator", "os.makedirs", "<builtin>.str", "caffe2.python.workspace.RunOperatorOnce"], "os.path.isdir": [], "caffe2.python.core.CreateOperator": [], "caffe2.python.workspace.RunOperatorOnce": [], "file_store_handler_op_test.TestFileStoreHandlerOp.test_set_get": ["caffe2.distributed.store_ops_test_util.StoreOpsTests.test_set_get"], "caffe2.distributed.store_ops_test_util.StoreOpsTests.test_set_get": [], "file_store_handler_op_test.TestFileStoreHandlerOp.test_get_timeout": ["caffe2.python.test_util.TestCase.assertRaises", "caffe2.distributed.store_ops_test_util.StoreOpsTests.test_get_timeout"], "caffe2.python.test_util.TestCase.assertRaises": [], "caffe2.distributed.store_ops_test_util.StoreOpsTests.test_get_timeout": [], "redis_store_handler_op_test": ["caffe2.python.dyndep.InitOpsLibrary"], "redis_store_handler_op_test.TestRedisStoreHandlerOp.setUp": ["<builtin>.super", "<builtin>.str"], "redis_store_handler_op_test.TestRedisStoreHandlerOp.tearDown": ["<builtin>.super"], "redis_store_handler_op_test.TestRedisStoreHandlerOp.create_store_handler": ["<builtin>.int", "os.getenv", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator"], "redis_store_handler_op_test.TestRedisStoreHandlerOp.test_set_get": ["caffe2.distributed.store_ops_test_util.StoreOpsTests.test_set_get"], "redis_store_handler_op_test.TestRedisStoreHandlerOp.test_get_timeout": ["caffe2.python.test_util.TestCase.assertRaises", "caffe2.distributed.store_ops_test_util.StoreOpsTests.test_get_timeout"], "store_ops_test_util": [], "store_ops_test_util.StoreOpsTests._test_set_get": ["numpy.full", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_array_equal", "caffe2.python.workspace.RunOperatorOnce"], "numpy.full": [], "caffe2.python.workspace.FetchBlob": [], "numpy.testing.assert_array_equal": [], "caffe2.python.workspace.ResetWorkspace": [], "store_ops_test_util.StoreOpsTests.test_set_get": ["multiprocessing.Queue", "<builtin>.range", "multiprocessing.Process"], "multiprocessing.Queue": [], "multiprocessing.Process": [], "store_ops_test_util.StoreOpsTests.test_get_timeout": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net"], "hp_emblookup_codegen": ["<builtin>.open", "hp_emblookup_codegen.generic", "<builtin>.len", "hp_emblookup_codegen.unroll", "<builtin>.print", "argparse.ArgumentParser"], "hp_emblookup_codegen.unroll": ["hp_emblookup_codegen.unroll.compute", "<builtin>.str", "<builtin>.range"], "hp_emblookup_codegen.unroll.compute": [], "hp_emblookup_codegen.generic": ["hp_emblookup_codegen.generic.compute"], "hp_emblookup_codegen.generic.compute": [], "gen_proto_typestubs_helper": ["ast.parse", "<builtin>.print", "<builtin>.open", "<builtin>.isinstance"], "ast.parse": [], "allcompare_test": ["unittest.main"], "allcompare_test.TemporaryDirectory.__enter__": ["tempfile.mkdtemp"], "allcompare_test.TemporaryDirectory.__exit__": ["shutil.rmtree"], "allcompare_test.allcompare_process": ["caffe2.python.core.CreateOperator", "caffe2.python.data_parallel_model._RunComparison", "caffe2.python.model_helper.ModelHelper", "<builtin>.dict", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.core.DeviceOption"], "caffe2.python.data_parallel_model._RunComparison": [], "hypothesis.strategies.integers": [], "allcompare_test.TestAllCompare": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers"], "hypothesis.given": [], "hypothesis.settings": [], "allcompare_test.TestAllCompare.test_allcompare": ["<builtin>.tuple", "numpy.random.ranf", "<builtin>.range", "numpy.random.randint", "<builtin>.len", "multiprocessing.Process"], "numpy.random.ranf": [], "unittest.main": [], "attention.AttentionType": ["<builtin>.range", "<builtin>.tuple"], "attention.s": ["<builtin>.str"], "attention._calc_weighted_context": ["attention.s", "caffe2.python.brew.batch_mat_mul"], "caffe2.python.brew.batch_mat_mul": [], "attention._calc_attention_weights": ["attention.s", "caffe2.python.brew.softmax"], "caffe2.python.brew.softmax": [], "attention._calc_attention_logits_from_sum_match": ["attention.s", "caffe2.python.brew.transpose", "caffe2.python.brew.fc"], "caffe2.python.brew.fc": [], "caffe2.python.brew.transpose": [], "attention._apply_fc_weight_for_sum_match": ["attention.s", "caffe2.python.brew.fc"], "attention.apply_recurrent_attention": ["attention._calc_weighted_context", "attention.s", "attention._calc_attention_weights", "attention._calc_attention_logits_from_sum_match", "attention._apply_fc_weight_for_sum_match"], "attention.apply_regular_attention": ["attention._calc_weighted_context", "attention.s", "attention._calc_attention_weights", "attention._calc_attention_logits_from_sum_match", "attention._apply_fc_weight_for_sum_match"], "attention.apply_dot_attention": ["attention.s", "attention._calc_weighted_context", "caffe2.python.brew.fc", "attention._calc_attention_weights"], "attention.apply_soft_coverage_attention": ["attention._calc_weighted_context", "caffe2.python.brew.transpose", "attention.s", "attention._calc_attention_weights", "attention._calc_attention_logits_from_sum_match", "attention._apply_fc_weight_for_sum_match"], "benchmark_generator": ["benchmark_generator.main", "argparse.ArgumentParser"], "benchmark_generator.parse_kwarg": ["<builtin>.map", "<builtin>.float", "<builtin>.int"], "benchmark_generator.main": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.model_helper.ModelHelper", "<builtin>.open", "<builtin>.getattr", "<builtin>.print", "<builtin>.str", "<builtin>.dict", "caffe2.python.predictor.mobile_exporter.Export", "<builtin>.int", "<builtin>.range", "numpy.random.rand", "benchmark_generator.main.make_blob_on_context"], "benchmark_generator.main.make_blob_on_context": ["caffe2.python.core.CreateOperator", "caffe2.python.utils.MakeArgument"], "caffe2.python.utils.MakeArgument": [], "binarysize": ["binarysize.main"], "binarysize.Trie.__init__": [], "binarysize.GetSymbolTrie": ["<builtin>.len", "subprocess.Popen", "<builtin>.sum", "<builtin>.print", "sys.exit", "binarysize.Trie.__init__"], "binarysize.MaybeAddColor": [], "binarysize.ReadableSize": ["<builtin>.abs"], "binarysize.PrintTrie": ["binarysize.PrintTrie", "binarysize.MaybeAddColor", "binarysize.ReadableSize", "<builtin>.print", "<builtin>.len"], "binarysize.PrintTrie.<lambda1>": [], "binarysize.main": ["<builtin>.RuntimeError", "binarysize.PrintTrie", "binarysize.GetSymbolTrie", "sys.platform.startswith", "argparse.ArgumentParser"], "sys.platform.startswith": [], "brew": ["brew.HelperWrapper.__init__"], "brew.HelperWrapper.__init__": [], "brew.HelperWrapper.__getattr__": ["<builtin>.AttributeError"], "brew.HelperWrapper.__getattr__.scope_wrapper": ["<builtin>.RuntimeError", "copy.deepcopy", "<builtin>.isinstance", "<builtin>.len", "inspect.getargspec"], "inspect.getargspec": [], "brew.HelperWrapper.Register": ["<builtin>.AttributeError"], "brew.HelperWrapper.has_helper": ["<builtin>.isinstance"], "brew_test": [], "brew_test.BrewTest.setUp": ["caffe2.python.brew.has_helper", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.Register"], "brew_test.BrewTest.setUp.myhelper": [], "caffe2.python.brew.has_helper": [], "caffe2.python.brew.Register": [], "brew_test.BrewTest.setUp.myhelper2": [], "brew_test.BrewTest.test_dropout": ["caffe2.python.workspace.FeedBlob", "<builtin>.abs", "numpy.ones", "unittest.TestCase.assertLess", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.brew.dropout", "caffe2.python.model_helper.ModelHelper"], "numpy.ones": [], "caffe2.python.brew.dropout": [], "unittest.TestCase.assertLess": [], "brew_test.BrewTest.test_fc": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.brew.fc", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper"], "brew_test.BrewTest.test_relu": ["caffe2.python.workspace.FeedBlob", "numpy.ones", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.brew.relu", "unittest.TestCase.assertAlmostEqual", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.brew.relu": [], "unittest.TestCase.assertAlmostEqual": [], "brew_test.BrewTest.test_tanh": ["caffe2.python.brew.tanh", "caffe2.python.workspace.FeedBlob", "numpy.tanh", "numpy.ones", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertAlmostEqual", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.brew.tanh": [], "numpy.tanh": [], "brew_test.BrewTest.test_validate": ["caffe2.python.model_helper.ModelHelper", "unittest.TestCase.assertEqual"], "unittest.TestCase.assertEqual": [], "brew_test.BrewTest.test_arg_scope": ["caffe2.python.brew.arg_scope", "caffe2.python.brew.myhelper", "unittest.TestCase.assertEqual", "caffe2.python.brew.myhelper2"], "caffe2.python.brew.arg_scope": [], "caffe2.python.brew.myhelper": [], "caffe2.python.brew.myhelper2": [], "brew_test.BrewTest.test_arg_scope_single": ["caffe2.python.workspace.FeedBlob", "caffe2.python.brew.arg_scope", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual", "numpy.random.rand", "caffe2.python.brew.conv", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.brew.conv": [], "brew_test.BrewTest.test_arg_scope_nested": ["caffe2.python.brew.arg_scope", "caffe2.python.brew.myhelper", "unittest.TestCase.assertEqual"], "brew_test.BrewTest.test_double_register": ["caffe2.python.brew.Register", "unittest.TestCase.assertRaises"], "unittest.TestCase.assertRaises": [], "brew_test.BrewTest.test_has_helper": ["unittest.TestCase.assertFalse", "caffe2.python.brew.has_helper", "unittest.TestCase.assertTrue"], "unittest.TestCase.assertTrue": [], "brew_test.BrewTest.test_has_helper.myhelper3": [], "unittest.TestCase.assertFalse": [], "brew_test.BrewTest.test_model_helper": ["caffe2.python.workspace.FeedBlob", "caffe2.python.brew.arg_scope", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual", "numpy.random.rand", "caffe2.python.brew.conv", "caffe2.python.model_helper.ModelHelper"], "brew_test.BrewTest.test_cnn_model_helper_deprecated": ["caffe2.python.workspace.FeedBlob", "unittest.TestCase.assertEqual", "caffe2.python.cnn.CNNModelHelper", "numpy.random.rand"], "caffe2.python.cnn.CNNModelHelper": [], "brew_test.BrewTest.test_get_params": ["brew_test.BrewTest.test_get_params.to_str_list", "caffe2.python.scope.NameScope", "brew_test.BrewTest.test_get_params.param", "unittest.TestCase.assertEqual", "caffe2.python.model_helper.ModelHelper"], "brew_test.BrewTest.test_get_params.param": ["caffe2.python.core.ScopedBlobReference"], "caffe2.python.core.ScopedBlobReference": [], "brew_test.BrewTest.test_get_params.to_str_list": ["<builtin>.sorted", "<builtin>.str"], "caffe2.python.scope.NameScope": [], "brew_test.BrewTest.test_param_consistence": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.conv", "unittest.TestCase.assertEqual", "caffe2.python.brew.fc"], "brew_test.BrewTest.test_cond": ["caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.brew.cond", "unittest.TestCase.assertEqual", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.brew.cond": [], "brew_test.BrewTest.test_loop": ["caffe2.python.workspace.FeedBlob", "numpy.array", "unittest.TestCase.assertEqual", "caffe2.python.brew.loop", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.brew.loop": [], "brew_test.BrewGPUTest.test_relu": ["caffe2.python.workspace.FeedBlob", "numpy.ones", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.brew.relu", "unittest.TestCase.assertAlmostEqual", "caffe2.python.model_helper.ModelHelper"], "brew_test.BrewGPUTest.test_tanh": ["caffe2.python.brew.tanh", "caffe2.python.workspace.FeedBlob", "numpy.tanh", "numpy.ones", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertAlmostEqual", "caffe2.python.model_helper.ModelHelper"], "build": ["caffe2.python._import_c_extension.get_build_options"], "caffe2.python._import_c_extension.get_build_options": [], "cached_reader": [], "cached_reader.CachedReader.__init__": ["<builtin>.super"], "cached_reader.CachedReader._init_reader_schema": [], "cached_reader.CachedReader.build_cache_step": ["caffe2.python.task.Cluster", "caffe2.python.core.Net", "os.path.exists", "caffe2.python.pipeline.pipe", "caffe2.python.db_file_reader.DBFileReader._init_field_blobs_as_empty", "caffe2.python.task.TaskGroup", "caffe2.python.core.NameScope", "cached_reader.CachedReader._save_field_blobs_to_db_file", "caffe2.python.db_file_reader.DBFileReader.ds.writer", "caffe2.python.core.execution_step"], "caffe2.python.core.execution_step": [], "caffe2.python.db_file_reader.DBFileReader._init_field_blobs_as_empty": [], "caffe2.python.task.Cluster": [], "caffe2.python.core.NameScope": [], "caffe2.python.task.TaskGroup": [], "caffe2.python.db_file_reader.DBFileReader.ds.writer": [], "caffe2.python.pipeline.pipe": [], "cached_reader.CachedReader._save_field_blobs_to_db_file": ["caffe2.python.db_file_reader.DBFileReader.ds.field_names", "caffe2.python.db_file_reader.DBFileReader.ds.get_blobs"], "caffe2.python.db_file_reader.DBFileReader.ds.get_blobs": [], "caffe2.python.db_file_reader.DBFileReader.ds.field_names": [], "caffe_translator": ["argparse.ArgumentParser", "<builtin>.open", "google.protobuf.text_format.Merge", "<builtin>.str", "caffe_translator.TranslateModel", "logging.basicConfig", "caffe.proto.caffe_pb2.NetParameter", "caffe_translator.TranslatorRegistry.Register.Wrapper", "caffe_translator.TranslatorRegistry.Register", "caffe_translator.ConvertTensorProtosToInitNet", "logging.getLogger"], "logging.basicConfig": [], "caffe_translator._StateMeetsRule": ["<builtin>.any", "<builtin>.set", "<builtin>.len", "<builtin>.list"], "caffe_translator._ShouldInclude": ["<builtin>.any", "<builtin>.len", "caffe_translator._StateMeetsRule"], "caffe_translator._GetLegacyDims": ["caffe2.python.workspace.C.Workspace", "<builtin>.range", "<builtin>.len", "caffe2.python.utils.Caffe2TensorToNumpyArray"], "caffe2.python.workspace.C.Workspace": [], "caffe2.python.utils.Caffe2TensorToNumpyArray": [], "caffe_translator._GetLegacyPadArgs": [], "caffe_translator._AdjustDims": ["caffe2.proto.caffe2_pb2.Argument", "<builtin>.Exception"], "caffe2.proto.caffe2_pb2.Argument": [], "caffe_translator._RemoveLegacyPad": ["caffe_translator._GetLegacyDims", "caffe2.python.workspace.C.Workspace", "numpy.random.randn", "caffe_translator._AdjustDims", "caffe_translator._GetLegacyPadArgs", "<builtin>.len", "caffe2.python.utils.Caffe2TensorToNumpyArray", "re.match", "<builtin>.range"], "re.match": [], "caffe_translator._GetBlobDimMap": ["caffe2.python.workspace.C.Workspace", "<builtin>.range", "<builtin>.len", "caffe2.python.utils.Caffe2TensorToNumpyArray"], "caffe_translator._GetInputDims": [], "caffe_translator.TranslatorRegistry.Register": [], "caffe_translator.TranslatorRegistry.Register.Wrapper": [], "caffe_translator.TranslatorRegistry.TranslateLayer": ["<builtin>.type", "<builtin>.KeyError", "<builtin>.str"], "<builtin>.KeyError": [], "caffe_translator.TranslatorRegistry.TranslateModel": ["caffe_translator._RemoveLegacyPad", "caffe_translator._GetInputDims", "caffe2.proto.caffe2_pb2.NetDef", "caffe_translator.TranslatorRegistry.TranslateLayer", "caffe_translator._ShouldInclude", "<builtin>.len", "caffe2.python.utils.CaffeBlobToNumpyArray", "<builtin>.ValueError", "caffe2.proto.caffe2_pb2.TensorProtos", "caffe.proto.caffe_pb2.NetState"], "caffe.proto.caffe_pb2.NetState": [], "caffe2.proto.caffe2_pb2.NetDef": [], "caffe2.proto.caffe2_pb2.TensorProtos": [], "caffe2.python.utils.CaffeBlobToNumpyArray": [], "caffe_translator.TranslateModel": ["caffe_translator.TranslatorRegistry.TranslateModel"], "caffe_translator.ConvertTensorProtosToInitNet": ["caffe2.proto.caffe2_pb2.NetDef", "<builtin>.list", "<builtin>.RuntimeError", "caffe2.python.utils.MakeArgument", "caffe2.python.core.CreateOperator", "<builtin>.len"], "caffe_translator.BaseTranslate": ["caffe2.proto.caffe2_pb2.OperatorDef"], "caffe2.proto.caffe2_pb2.OperatorDef": [], "caffe_translator.AddArgument": [], "caffe_translator.TranslateInput": [], "caffe_translator.TranslateVideoData": [], "caffe_translator.TranslateData": [], "caffe_translator._TranslateStridePadKernelHelper": ["caffe_translator.AddArgument", "<builtin>.len", "<builtin>.NotImplementedError"], "caffe_translator.TranslateConvNd": ["caffe2.python.utils.NumpyArrayToCaffe2Tensor", "caffe_translator.AddArgument", "<builtin>.hasattr", "caffe_translator.BaseTranslate", "<builtin>.len"], "caffe2.python.utils.NumpyArrayToCaffe2Tensor": [], "caffe_translator.TranslateConv": ["caffe2.python.utils.NumpyArrayToCaffe2Tensor", "caffe_translator.AddArgument", "caffe_translator._TranslateStridePadKernelHelper", "caffe_translator.BaseTranslate", "<builtin>.len"], "caffe_translator.TranslateDeconv": ["caffe2.python.utils.NumpyArrayToCaffe2Tensor", "caffe_translator.AddArgument", "caffe_translator._TranslateStridePadKernelHelper", "caffe_translator.BaseTranslate", "<builtin>.NotImplementedError"], "caffe_translator.TranslateCrop": ["caffe_translator.AddArgument", "numpy.random.randn", "caffe_translator.BaseTranslate", "<builtin>.len", "caffe_translator._GetBlobDimMap", "caffe2.proto.caffe2_pb2.OperatorDef", "<builtin>.int", "<builtin>.range"], "caffe_translator.TranslateRelu": ["caffe_translator.BaseTranslate"], "caffe_translator.TranslatePool": ["caffe_translator._TranslateStridePadKernelHelper", "caffe_translator.AddArgument", "caffe_translator.BaseTranslate"], "caffe_translator.TranslatePool3D": ["<builtin>.hasattr", "caffe_translator.AddArgument", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateLRN": ["caffe_translator.AddArgument", "caffe_translator.BaseTranslate", "<builtin>.int", "<builtin>.ValueError", "<builtin>.float"], "caffe_translator.TranslateInnerProduct": ["caffe2.python.utils.NumpyArrayToCaffe2Tensor", "<builtin>.list", "<builtin>.str", "caffe_translator.BaseTranslate", "<builtin>.ValueError"], "caffe_translator.TranslateDropout": ["caffe_translator.AddArgument", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateSoftmax": ["caffe_translator.BaseTranslate"], "caffe_translator.TranslateSoftmaxWithLoss": ["caffe2.python.core.CreateOperator"], "caffe_translator.TranslateAccuracy": ["caffe_translator.AddArgument", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateConcat": ["caffe_translator.AddArgument", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateTanH": ["caffe_translator.BaseTranslate"], "caffe_translator.TranslateInstanceNorm": ["caffe2.python.utils.NumpyArrayToCaffe2Tensor", "caffe_translator.AddArgument", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateBatchNorm": ["caffe2.python.utils.NumpyArrayToCaffe2Tensor", "caffe_translator.AddArgument", "<builtin>.RuntimeError", "numpy.zeros_like", "caffe_translator.BaseTranslate", "<builtin>.len", "numpy.tile"], "numpy.tile": [], "numpy.zeros_like": [], "caffe_translator.TranslateElementWise": ["<builtin>.len", "<builtin>.RuntimeError", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateScale": ["caffe2.python.utils.NumpyArrayToCaffe2Tensor", "caffe_translator.AddArgument", "<builtin>.RuntimeError", "caffe_translator.BaseTranslate", "<builtin>.len", "copy.deepcopy"], "caffe_translator.TranslateReshape": ["caffe_translator.AddArgument", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateFlatten": ["<builtin>.NotImplementedError", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateSigmoid": ["caffe_translator.BaseTranslate"], "caffe_translator.TranslateROIPooling": ["caffe_translator.AddArgument", "caffe_translator.BaseTranslate"], "caffe_translator.TranslatePRelu": ["caffe2.python.utils.NumpyArrayToCaffe2Tensor", "caffe_translator.BaseTranslate"], "caffe_translator.TranslateReduction": ["caffe_translator.AddArgument", "<builtin>.NotImplementedError", "caffe_translator.BaseTranslate"], "caffe.proto.caffe_pb2.NetParameter": [], "google.protobuf.text_format.Merge": [], "caffe_translator_test": ["sys.exit", "<builtin>.print", "unittest.main", "<builtin>.len", "<builtin>.str"], "caffe_translator_test.setUpModule": ["caffe2.python.workspace.FeedBlob", "caffe.proto.caffe_pb2.NetParameter", "google.protobuf.text_format.Merge", "<builtin>.open", "caffe2.python.caffe_translator.TranslateModel", "numpy.load", "caffe2.python.utils.Caffe2TensorToNumpyArray", "caffe2.python.workspace.RunNetOnce", "<builtin>.str", "os.path.exists"], "caffe2.python.caffe_translator.TranslateModel": [], "numpy.load": [], "caffe_translator_test.TestNumericalEquivalence.testBlobs": ["caffe2.python.workspace.FetchBlob", "numpy.testing.assert_almost_equal", "caffe2.python.test_util.TestCase.assertEqual", "<builtin>.print", "numpy.max", "numpy.load"], "caffe2.python.test_util.TestCase.assertEqual": [], "numpy.max": [], "numpy.testing.assert_almost_equal": [], "checkpoint": ["logging.getLogger", "logging.basicConfig", "checkpoint.ThreadLocal.__init__", "contextlib.contextmanager"], "checkpoint.Job.__init__": ["caffe2.python.task.TaskGroup"], "checkpoint.Job.nodes_to_checkpoint": [], "checkpoint.Job.compile": ["checkpoint.Job.nodes_to_checkpoint"], "checkpoint.Job.__enter__": ["<builtin>.super"], "checkpoint.Job.__exit__": ["<builtin>.super"], "checkpoint.Job.add_stop_condition": ["caffe2.python.task.Task", "<builtin>.isinstance"], "caffe2.python.task.Task": [], "checkpoint.get_ckpt_filename": ["<builtin>.str"], "checkpoint.db_name": ["checkpoint.get_ckpt_filename", "os.path.join"], "checkpoint.CheckpointManager.__init__": ["caffe2.python.core.Net"], "checkpoint.CheckpointManager.init": ["checkpoint.db_name", "caffe2.python.net_builder.ops.Load", "caffe2.python.task.Task", "caffe2.python.net_builder.ops.GetAllBlobNames", "<builtin>.len"], "caffe2.python.net_builder.ops.GetAllBlobNames": [], "caffe2.python.net_builder.ops.Load": [], "checkpoint.CheckpointManager.blob_list": [], "checkpoint.CheckpointManager._timed_task": ["caffe2.python.task.final_output", "checkpoint.CheckpointManager.save.add_op", "caffe2.python.net_builder.ops.TimerGetAndEnd", "caffe2.python.net_builder.ops.task_init", "caffe2.python.net_builder.ops.task_exit", "caffe2.python.net_builder.ops.TimerBegin", "caffe2.python.task.Task", "checkpoint.CheckpointManager.load.add_op", "checkpoint.CheckpointManager.load_blobs_from_checkpoint.add_op"], "caffe2.python.net_builder.ops.task_init": [], "caffe2.python.net_builder.ops.TimerBegin": [], "checkpoint.CheckpointManager.load_blobs_from_checkpoint.add_op": ["caffe2.python.net_builder.ops.Load"], "checkpoint.CheckpointManager.load.add_op": ["caffe2.python.net_builder.ops.Load", "checkpoint.CheckpointManager.blob_list"], "checkpoint.CheckpointManager.save.add_op": ["caffe2.python.net_builder.ops.Save", "checkpoint.CheckpointManager.blob_list"], "caffe2.python.net_builder.ops.task_exit": [], "caffe2.python.net_builder.ops.TimerGetAndEnd": [], "caffe2.python.task.final_output": [], "checkpoint.CheckpointManager.collect_checkpoint_stats": [], "checkpoint.CheckpointManager.load": ["checkpoint.db_name", "checkpoint.CheckpointManager._timed_task"], "checkpoint.CheckpointManager.load_blobs_from_checkpoint": ["checkpoint.db_name", "checkpoint.CheckpointManager._timed_task"], "checkpoint.CheckpointManager.check_db_exists": ["caffe2.python.task.Task", "checkpoint.db_name", "caffe2.python.net_builder.ops.DBExists", "caffe2.python.net_builder.ops.Const"], "caffe2.python.net_builder.ops.Const": [], "caffe2.python.net_builder.ops.DBExists": [], "checkpoint.CheckpointManager.report_checkpoint_stats": ["checkpoint.CheckpointManager.collect_checkpoint_stats"], "checkpoint.CheckpointManager.save": ["checkpoint.db_name", "checkpoint.CheckpointManager._timed_task"], "caffe2.python.net_builder.ops.Save": [], "checkpoint.CheckpointManager.write_checkpoint_metadata": [], "checkpoint.CheckpointManager.get_resume_from_epoch_id": [], "checkpoint.CheckpointManager.set_params": [], "checkpoint.CheckpointManager.cp_accessible": [], "checkpoint.MultiNodeCheckpointManager.__init__": [], "checkpoint.MultiNodeCheckpointManager._task_group": ["caffe2.python.task.TaskGroup", "checkpoint.CheckpointManager.save", "caffe2.python.task.Node", "checkpoint.CheckpointManager.load", "checkpoint.CheckpointManager.init"], "caffe2.python.task.Node": [], "checkpoint.MultiNodeCheckpointManager.init": ["<builtin>.str", "checkpoint.MultiNodeCheckpointManager._task_group", "caffe2.python.task.Node", "checkpoint.CheckpointManager.__init__", "caffe2.python.task.TaskGroup"], "checkpoint.MultiNodeCheckpointManager.load": ["checkpoint.MultiNodeCheckpointManager._task_group"], "checkpoint.MultiNodeCheckpointManager.load_blobs_locally": ["checkpoint.db_name", "checkpoint.CheckpointManager.check_db_exists", "<builtin>.str", "checkpoint.CheckpointManager.load_blobs_from_checkpoint", "caffe2.python.task.Node", "checkpoint.CheckpointManager.__init__"], "checkpoint.MultiNodeCheckpointManager.get_ckpt_db_name": ["checkpoint.db_name", "<builtin>.str"], "checkpoint.MultiNodeCheckpointManager.report_checkpoint_stats": [], "checkpoint.MultiNodeCheckpointManager.save": ["checkpoint.MultiNodeCheckpointManager._task_group"], "checkpoint.MultiNodeCheckpointManager.write_checkpoint_metadata": [], "checkpoint.MultiNodeCheckpointManager.get_resume_from_epoch_id": [], "checkpoint.MultiNodeCheckpointManager.set_params": ["<builtin>.str"], "checkpoint.MultiNodeCheckpointManager.cp_accessible": [], "checkpoint.UploadTaskGroupBuilder.build": ["<builtin>.NotImplementedError"], "checkpoint.JobRunner.__init__": [], "checkpoint.JobRunner.train": ["checkpoint.JobRunner.save_checkpoints", "<builtin>.any"], "checkpoint.JobRunner.save_checkpoints": ["<builtin>.ValueError"], "checkpoint.JobRunner.load_blobs_from_checkpoints": ["<builtin>.ValueError"], "checkpoint.epoch_limiter": ["caffe2.python.task.Task", "caffe2.python.core.Net"], "checkpoint_test": ["unittest.main"], "checkpoint_test.build_pipeline": ["numpy.array", "caffe2.python.dataset.Dataset", "caffe2.python.schema.ConstRecord", "caffe2.python.pipeline.pipe", "<builtin>.list", "caffe2.python.checkpoint.Job.current", "caffe2.python.task.Node", "caffe2.python.schema.Struct", "caffe2.python.dataio.ReaderWithLimit", "caffe2.python.net_builder.ops.Const", "<builtin>.range", "caffe2.python.task.Task"], "caffe2.python.checkpoint.Job.current": [], "caffe2.python.schema.Struct": [], "caffe2.python.schema.ConstRecord": [], "caffe2.python.dataset.Dataset": [], "checkpoint_test.build_pipeline.inc_total": ["caffe2.python.net_builder.ops.Add"], "caffe2.python.net_builder.ops.Add": [], "caffe2.python.dataio.ReaderWithLimit": [], "checkpoint_test.local_copy_op": [], "checkpoint_test.local_copy_op.copy_op": ["shutil.copyfile"], "shutil.copyfile": [], "checkpoint_test.UploadToLocalFile.__init__": [], "checkpoint_test.UploadToLocalFile.build": ["os.path.join", "caffe2.python.net_builder.ops.Python", "<builtin>.str", "caffe2.python.checkpoint.db_name", "caffe2.python.task.TaskGroup", "caffe2.python.task.Node", "caffe2.python.task.Task"], "caffe2.python.checkpoint.db_name": [], "caffe2.python.net_builder.ops.Python": [], "checkpoint_test.TestCheckpoint.run_with": ["caffe2.python.task.Cluster", "caffe2.python.test_util.TestCase.assertEquals", "checkpoint_test.build_pipeline", "caffe2.python.core.Net", "caffe2.python.checkpoint.JobRunner", "caffe2.python.checkpoint.Job", "checkpoint_test.TestCheckpoint.run_with.fetch_total", "checkpoint_test.TestCheckpoint.test_single_checkpoint.builder", "<builtin>.len", "<builtin>.range", "caffe2.python.task.Task"], "caffe2.python.checkpoint.Job": [], "checkpoint_test.TestCheckpoint.run_with.fetch_total": [], "checkpoint_test.TestCheckpoint.test_single_checkpoint.builder": ["caffe2.python.checkpoint.CheckpointManager", "caffe2.python.checkpoint.MultiNodeCheckpointManager", "caffe2.python.workspace.C.Workspace", "caffe2.python.session.LocalSession"], "caffe2.python.checkpoint.JobRunner": [], "caffe2.python.test_util.TestCase.assertEquals": [], "checkpoint_test.TestCheckpoint.test_single_checkpoint": ["checkpoint_test.TestCheckpoint.run_with", "shutil.rmtree", "tempfile.mkdtemp"], "caffe2.python.session.LocalSession": [], "caffe2.python.checkpoint.CheckpointManager": [], "caffe2.python.checkpoint.MultiNodeCheckpointManager": [], "checkpoint_test.TestCheckpoint.test_ckpt_name_and_load_model_from_ckpts": ["caffe2.python.task.Cluster", "numpy.array", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.test_util.TestCase.assertEquals", "checkpoint_test.build_pipeline", "caffe2.python.session.LocalSession", "caffe2.python.checkpoint.JobRunner", "caffe2.python.checkpoint.Job", "caffe2.python.test_util.TestCase.assertTrue", "tempfile.mkdtemp", "caffe2.python.workspace.C.Workspace", "caffe2.python.checkpoint.MultiNodeCheckpointManager", "shutil.rmtree", "<builtin>.range", "<builtin>.len"], "caffe2.python.test_util.TestCase.assertTrue": [], "caffe2.python.test_util.TestCase.assertFalse": [], "checkpoint_test.TestCheckpoint.test_upload_checkpoint": ["caffe2.python.task.Cluster", "caffe2.python.test_util.TestCase.assertFalse", "os.path.join", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.session.LocalSession", "checkpoint_test.build_pipeline", "caffe2.python.checkpoint.JobRunner", "caffe2.python.checkpoint.Job", "caffe2.python.test_util.TestCase.assertTrue", "tempfile.mkdtemp", "caffe2.python.workspace.C.Workspace", "caffe2.python.checkpoint.MultiNodeCheckpointManager", "os.path.exists", "checkpoint_test.UploadToLocalFile.__init__", "shutil.rmtree", "<builtin>.range", "os.mkdir", "<builtin>.len"], "os.mkdir": [], "checkpoint_test.TestCheckpoint.test_ckpt_save_failure": ["caffe2.python.task.Cluster", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.session.LocalSession", "checkpoint_test.build_pipeline", "caffe2.python.checkpoint.JobRunner", "caffe2.python.checkpoint.Job", "caffe2.python.workspace.C.Workspace", "caffe2.python.checkpoint.MultiNodeCheckpointManager", "<builtin>.range", "<builtin>.len"], "checkpoint_test.TestCheckpoint.test_download_group_simple": ["caffe2.python.session.LocalSession", "caffe2.python.core.Net", "caffe2.python.checkpoint.JobRunner", "caffe2.python.checkpoint.Job", "caffe2.python.workspace.C.Workspace", "caffe2.python.task.Node", "caffe2.python.net_builder.ops.net", "numpy.array_equal", "caffe2.python.net_builder.ops.loop", "caffe2.python.checkpoint.epoch_limiter", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.model_helper.ModelHelper", "numpy.full", "caffe2.python.task.Task"], "caffe2.python.net_builder.ops.loop": [], "caffe2.python.net_builder.ops.net": [], "caffe2.python.checkpoint.epoch_limiter": [], "numpy.array_equal": [], "checkpoint_test.TestCheckpoint.test_reuse_checkpoint_manager": ["checkpoint_test.TestCheckpoint.test_reuse_checkpoint_manager.fetch_total", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.session.LocalSession", "checkpoint_test.build_pipeline", "caffe2.python.core.Net", "caffe2.python.checkpoint.Job", "caffe2.python.checkpoint.JobRunner", "tempfile.mkdtemp", "caffe2.python.workspace.C.Workspace", "caffe2.python.checkpoint.MultiNodeCheckpointManager", "shutil.rmtree", "<builtin>.range", "caffe2.python.task.Task"], "checkpoint_test.TestCheckpoint.test_reuse_checkpoint_manager.fetch_total": [], "cnn": [], "cnn.CNNModelHelper.__init__": ["<builtin>.super", "logging.warning", "<builtin>.ValueError"], "logging.warning": [], "cnn.CNNModelHelper.ImageInput": ["caffe2.python.brew.image_input"], "caffe2.python.brew.image_input": [], "cnn.CNNModelHelper.VideoInput": ["caffe2.python.brew.video_input"], "caffe2.python.brew.video_input": [], "cnn.CNNModelHelper.PadImage": ["caffe2.python.model_helper.ModelHelper.net.PadImage"], "caffe2.python.model_helper.ModelHelper.net.PadImage": [], "cnn.CNNModelHelper.ConvNd": ["caffe2.python.brew.conv_nd"], "caffe2.python.brew.conv_nd": [], "cnn.CNNModelHelper.Conv": ["caffe2.python.brew.conv"], "cnn.CNNModelHelper.ConvTranspose": ["caffe2.python.brew.conv_transpose"], "caffe2.python.brew.conv_transpose": [], "cnn.CNNModelHelper.GroupConv": ["caffe2.python.brew.group_conv"], "caffe2.python.brew.group_conv": [], "cnn.CNNModelHelper.GroupConv_Deprecated": ["caffe2.python.brew.group_conv_deprecated"], "caffe2.python.brew.group_conv_deprecated": [], "cnn.CNNModelHelper.FC": ["caffe2.python.brew.fc"], "cnn.CNNModelHelper.PackedFC": ["caffe2.python.brew.packed_fc"], "caffe2.python.brew.packed_fc": [], "cnn.CNNModelHelper.FC_Prune": ["caffe2.python.brew.fc_prune"], "caffe2.python.brew.fc_prune": [], "cnn.CNNModelHelper.FC_Decomp": ["caffe2.python.brew.fc_decomp"], "caffe2.python.brew.fc_decomp": [], "cnn.CNNModelHelper.FC_Sparse": ["caffe2.python.brew.fc_sparse"], "caffe2.python.brew.fc_sparse": [], "cnn.CNNModelHelper.Dropout": ["caffe2.python.brew.dropout"], "cnn.CNNModelHelper.LRN": ["caffe2.python.brew.lrn"], "caffe2.python.brew.lrn": [], "cnn.CNNModelHelper.Softmax": ["caffe2.python.brew.softmax"], "cnn.CNNModelHelper.SpatialBN": ["caffe2.python.brew.spatial_bn"], "caffe2.python.brew.spatial_bn": [], "cnn.CNNModelHelper.SpatialGN": ["caffe2.python.brew.spatial_gn"], "caffe2.python.brew.spatial_gn": [], "cnn.CNNModelHelper.InstanceNorm": ["caffe2.python.brew.instance_norm"], "caffe2.python.brew.instance_norm": [], "cnn.CNNModelHelper.Relu": ["caffe2.python.brew.relu"], "cnn.CNNModelHelper.PRelu": ["caffe2.python.brew.prelu"], "caffe2.python.brew.prelu": [], "cnn.CNNModelHelper.Concat": ["caffe2.python.brew.concat"], "caffe2.python.brew.concat": [], "cnn.CNNModelHelper.DepthConcat": ["cnn.CNNModelHelper.Concat", "<builtin>.print"], "cnn.CNNModelHelper.Sum": ["caffe2.python.brew.sum"], "caffe2.python.brew.sum": [], "cnn.CNNModelHelper.Transpose": ["caffe2.python.brew.transpose"], "cnn.CNNModelHelper.Iter": ["caffe2.python.brew.iter"], "caffe2.python.brew.iter": [], "cnn.CNNModelHelper.Accuracy": ["caffe2.python.brew.accuracy"], "caffe2.python.brew.accuracy": [], "cnn.CNNModelHelper.MaxPool": ["caffe2.python.brew.max_pool"], "caffe2.python.brew.max_pool": [], "cnn.CNNModelHelper.MaxPoolWithIndex": ["caffe2.python.brew.max_pool_with_index"], "caffe2.python.brew.max_pool_with_index": [], "cnn.CNNModelHelper.AveragePool": ["caffe2.python.brew.average_pool"], "caffe2.python.brew.average_pool": [], "cnn.CNNModelHelper.XavierInit": [], "cnn.CNNModelHelper.ConstantInit": ["<builtin>.dict"], "cnn.CNNModelHelper.MSRAInit": [], "cnn.CNNModelHelper.ZeroInit": [], "cnn.CNNModelHelper.AddWeightDecay": ["caffe2.python.brew.add_weight_decay"], "caffe2.python.brew.add_weight_decay": [], "cnn.CNNModelHelper.CPU": ["caffe2.proto.caffe2_pb2.DeviceOption"], "caffe2.proto.caffe2_pb2.DeviceOption": [], "cnn.CNNModelHelper.GPU": ["caffe2.proto.caffe2_pb2.DeviceOption"], "context": ["context._ContextRegistry.__init__", "typing.TypeVar", "contextlib.contextmanager"], "context._ContextInfo.__init__": ["threading.local"], "threading.local": [], "context._ContextInfo._stack": ["<builtin>.hasattr"], "context._ContextInfo.enter": [], "context._ContextInfo.exit": ["<builtin>.len"], "context._ContextInfo.get_active": ["<builtin>.len", "context._ContextInfo.enter"], "context._ContextRegistry.__init__": [], "context._ContextRegistry.get": ["context._ContextInfo.__init__", "<builtin>.issubclass"], "<builtin>.issubclass": [], "context._context_registry": [], "context._get_managed_classes": ["<builtin>.issubclass", "inspect.getmro"], "inspect.getmro": [], "context.Managed.current": ["<builtin>.isinstance", "context._context_registry", "<builtin>.type", "context._ContextRegistry.get"], "context.Managed.__enter__": ["context._get_managed_classes", "context._context_registry", "context._ContextRegistry.get"], "context.Managed.__exit__": ["context._get_managed_classes", "context._context_registry", "context._ContextRegistry.get"], "context.Managed.__call__": ["functools.wraps"], "functools.wraps": [], "context.Managed.__call__.wrapper": [], "context_test": [], "context_test.TestContext.use_my_context": ["caffe2.python.context.Managed.__init__", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.context.Managed.current", "<builtin>.range"], "caffe2.python.context.Managed.__init__": [], "caffe2.python.context.Managed.current": [], "context_test.TestContext.testMultiThreaded": ["threading.Thread", "<builtin>.range"], "threading.Thread": [], "context_test.TestContext": ["caffe2.python.context.Managed.__init__", "context_test.MyContext"], "context_test.MyContext": [], "context_test.TestContext.testDecorator": ["caffe2.python.context.Managed.current", "caffe2.python.test_util.TestCase.assertIsNotNone"], "caffe2.python.test_util.TestCase.assertIsNotNone": [], "context_test.TestContext.testNonDefaultCurrent": ["caffe2.python.test_util.TestCase.assertIsNone", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.context.Managed.__init__", "caffe2.python.context.Managed.current"], "caffe2.python.test_util.TestCase.assertIsNone": [], "context_test.TestContext.testDefaultCurrent": ["caffe2.python.context.DefaultManaged.current", "caffe2.python.test_util.TestCase.assertIsInstance"], "caffe2.python.context.DefaultManaged.current": [], "caffe2.python.test_util.TestCase.assertIsInstance": [], "context_test.TestContext.testNestedContexts": ["caffe2.python.context.DefaultManaged.current", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.context.Managed.__init__", "caffe2.python.context.Managed.current", "caffe2.python.context.DefaultManaged.__init__"], "caffe2.python.context.DefaultManaged.__init__": [], "context_test.TestContext.testChildClasses": ["caffe2.python.context.Managed.__init__", "caffe2.python.context.Managed.current", "caffe2.python.test_util.TestCase.assertEqual"], "control": ["<builtin>.set"], "control._get_next_step_name": [], "control._MakeList": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.list", "<builtin>.len"], "control._IsNets": ["<builtin>.isinstance", "<builtin>.all"], "control._PrependNets": ["control._IsNets", "control._MakeList", "control.Do"], "control.Do": ["caffe2.python.core.scoped_execution_step", "<builtin>.isinstance", "control._get_next_step_name", "<builtin>.len", "control._MakeList"], "control._AppendNets": ["control._IsNets", "control._MakeList", "control.Do"], "control.GetConditionBlobFromNet": ["caffe2.python.core.BlobReference", "<builtin>.len"], "caffe2.python.core.BlobReference": [], "control.BoolNet": ["control._MakeList", "caffe2.python.core.Net"], "control.NotNet": ["<builtin>.isinstance", "control.GetConditionBlobFromNet", "caffe2.python.core.Net"], "control._CopyConditionBlobNet": ["caffe2.python.core.Net"], "control.MergeConditionNets": ["future.utils.viewitems", "<builtin>.isinstance", "<builtin>.range", "control.GetConditionBlobFromNet", "<builtin>.len", "caffe2.python.core.Net"], "future.utils.viewitems": [], "control.CombineConditions": ["<builtin>.isinstance", "<builtin>.range", "control.GetConditionBlobFromNet", "<builtin>.len", "<builtin>.ValueError", "control._CopyConditionBlobNet", "caffe2.python.core.Net"], "caffe2.python.core.scoped_execution_step": [], "control.DoParallel": ["caffe2.python.core.scoped_execution_step", "<builtin>.isinstance", "control._get_next_step_name", "<builtin>.len", "control._MakeList"], "control._RunOnceIf": ["control._RunOnceIf.if_step", "control._IsNets", "<builtin>.isinstance", "control.BoolNet", "control._PrependNets", "control.Do", "control.NotNet"], "control._RunOnceIf.if_step": ["control._get_next_step_name", "caffe2.python.core.scoped_execution_step"], "control._RunOnceIfNot": ["<builtin>.isinstance", "control.GetConditionBlobFromNet", "control._PrependNets", "control._get_next_step_name", "caffe2.python.core.scoped_execution_step", "control._CopyConditionBlobNet"], "control.For": ["control.Do", "control._PrependNets", "control._get_next_step_name", "caffe2.python.core.scoped_execution_step", "caffe2.python.core.Net"], "control.While": ["control.While.while_step", "control._IsNets", "<builtin>.isinstance", "control.BoolNet", "control._PrependNets", "control.Do", "control.NotNet"], "control.While.while_step": ["control._get_next_step_name", "caffe2.python.core.scoped_execution_step"], "control.Until": ["<builtin>.isinstance", "caffe2.python.core.BlobReference", "control.GetConditionBlobFromNet", "control._PrependNets", "<builtin>.str", "control._get_next_step_name", "caffe2.python.core.scoped_execution_step"], "control.DoWhile": ["<builtin>.isinstance", "control.BoolNet", "control._AppendNets", "control.Do", "control._get_next_step_name", "caffe2.python.core.scoped_execution_step", "control.NotNet"], "control.DoUntil": ["<builtin>.isinstance", "caffe2.python.core.BlobReference", "control.BoolNet", "control.GetConditionBlobFromNet", "control._AppendNets", "control.Do", "control._get_next_step_name", "caffe2.python.core.scoped_execution_step"], "control.Switch": ["control._RunOnceIf", "control._get_next_step_name", "control._MakeList", "caffe2.python.core.scoped_execution_step"], "control.SwitchNot": ["control._RunOnceIfNot", "control._get_next_step_name", "control._MakeList", "caffe2.python.core.scoped_execution_step"], "control.If": ["control._RunOnceIfNot", "<builtin>.isinstance", "control.GetConditionBlobFromNet", "control.Do", "control._RunOnceIf"], "control.IfNot": ["control._RunOnceIfNot", "<builtin>.isinstance", "control.GetConditionBlobFromNet", "control.Do", "control._RunOnceIf"], "control_ops_grad": [], "control_ops_grad.gen_do_gradient": ["control_ops_grad._do_op_sanity_check_and_process", "caffe2.python.core.BlobReference", "control_ops_grad._gen_subgradient_pass", "control_ops_grad._prepare_blob_copy_op", "control_ops_grad.dedupe_g_output", "<builtin>.len", "control_ops_grad._prepare_gradient_do_op", "<builtin>.zip", "<builtin>.str", "<builtin>.set"], "control_ops_grad._do_op_sanity_check_and_process": ["<builtin>.len", "<builtin>.str", "<builtin>.zip", "control_ops_grad._get_net_argument", "<builtin>.set"], "control_ops_grad.dedupe_g_output": ["caffe2.proto.caffe2_pb2.OperatorDef", "<builtin>.zip"], "control_ops_grad._gen_subgradient_pass": ["<builtin>.str", "caffe2.python.core.IR"], "control_ops_grad._prepare_blob_copy_op": ["caffe2.proto.caffe2_pb2.OperatorDef"], "control_ops_grad._prepare_gradient_do_op": ["caffe2.proto.caffe2_pb2.Argument", "caffe2.proto.caffe2_pb2.OperatorDef", "<builtin>.len", "caffe2.proto.caffe2_pb2.NetDef"], "control_ops_grad.gen_while_gradient": ["control_ops_grad._get_net_argument", "caffe2.python.core.BlobReference", "control_ops_grad.dedupe_g_output", "control_ops_grad._get_do_arguments", "control_ops_grad._prepare_gradient_while_ops", "<builtin>.len", "control_ops_grad._gen_subnet_gradient", "<builtin>.zip", "<builtin>.str"], "control_ops_grad._get_net_argument": [], "control_ops_grad._get_do_arguments": ["<builtin>.bool"], "control_ops_grad._gen_subnet_gradient": ["caffe2.proto.caffe2_pb2.NetDef", "<builtin>.str", "control_ops_grad._gen_subgradient_pass", "<builtin>.set"], "control_ops_grad._prepare_gradient_while_ops": ["caffe2.python.core.BlobReference", "caffe2.python.core.Net", "caffe2.proto.caffe2_pb2.Argument", "caffe2.proto.caffe2_pb2.OperatorDef", "<builtin>.list", "<builtin>.str"], "control_ops_grad.gen_if_gradient": ["control_ops_grad._get_net_argument", "caffe2.python.core.BlobReference", "caffe2.proto.caffe2_pb2.NetDef", "control_ops_grad.dedupe_g_output", "<builtin>.len", "control_ops_grad._gen_grad_zero_init_ops", "control_ops_grad._prepare_gradient_if_op", "<builtin>.list", "control_ops_grad._gen_subnet_gradient", "<builtin>.zip", "<builtin>.str", "<builtin>.set"], "control_ops_grad._gen_grad_zero_init_ops": ["caffe2.proto.caffe2_pb2.Argument", "caffe2.proto.caffe2_pb2.OperatorDef"], "control_ops_grad._prepare_gradient_if_op": ["caffe2.proto.caffe2_pb2.Argument", "caffe2.proto.caffe2_pb2.OperatorDef"], "control_ops_grad.getNetArgument": ["control_ops_grad._get_net_argument"], "caffe2.python.core.IR": [], "control_ops_grad.disambiguate_grad_if_op_output": ["<builtin>.enumerate", "control_ops_grad._get_net_argument"], "control_ops_grad_test": ["unittest.main"], "control_ops_grad_test.TestControl.test_disambiguate_grad_if_op_output": ["caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.control_ops_grad.disambiguate_grad_if_op_output", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.control_ops_grad.disambiguate_grad_if_op_output": [], "control_ops_util": [], "control_ops_util.get_external_blob_names": ["<builtin>.set", "<builtin>.str", "caffe2.python.core.get_ssa", "caffe2.python.core.get_undefined_blobs"], "caffe2.python.core.get_ssa": [], "caffe2.python.core.get_undefined_blobs": [], "control_ops_util.add_if_op": ["<builtin>.set", "<builtin>.str", "caffe2.python.core.BlobReference", "caffe2.python.core.Net", "control_ops_util.get_external_blob_names", "<builtin>.list"], "control_ops_util.add_while_op": ["<builtin>.str", "caffe2.python.core.BlobReference", "caffe2.python.core.Net", "control_ops_util.get_external_blob_names", "<builtin>.list"], "control_test": ["logging.getLogger"], "control_test.TestControl.setUp": ["<builtin>.super", "caffe2.python.core.Net"], "control_test.TestControl.CheckNetOutput": ["caffe2.python.workspace.FetchBlob", "caffe2.python.test_util.TestCase.assertEqual"], "control_test.TestControl.CheckNetAllOutput": ["caffe2.python.workspace.FetchBlob", "caffe2.python.test_util.TestCase.assertEqual", "<builtin>.len", "<builtin>.range"], "control_test.TestControl.BuildAndRunPlan": ["caffe2.python.core.Plan", "caffe2.python.control.Do", "caffe2.python.workspace.RunPlan", "caffe2.python.test_util.TestCase.assertEqual"], "caffe2.python.core.Plan": [], "caffe2.python.control.Do": [], "caffe2.python.workspace.RunPlan": [], "control_test.TestControl.ForLoopTest": ["caffe2.python.control.For", "control_test.TestControl.CheckNetOutput", "control_test.TestControl.BuildAndRunPlan"], "caffe2.python.control.For": [], "control_test.TestControl.testForLoopWithNets": ["control_test.TestControl.ForLoopTest"], "control_test.TestControl.testForLoopWithStep": ["caffe2.python.control.Do", "control_test.TestControl.ForLoopTest"], "control_test.TestControl.WhileLoopTest": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.While", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.While": [], "control_test.TestControl.testWhileLoopWithNet": ["control_test.TestControl.WhileLoopTest"], "control_test.TestControl.testWhileLoopWithStep": ["caffe2.python.control.Do", "control_test.TestControl.WhileLoopTest"], "control_test.TestControl.UntilLoopTest": ["control_test.TestControl.BuildAndRunPlan", "control_test.TestControl.CheckNetOutput", "caffe2.python.control.Until"], "caffe2.python.control.Until": [], "control_test.TestControl.testUntilLoopWithNet": ["control_test.TestControl.UntilLoopTest"], "control_test.TestControl.testUntilLoopWithStep": ["caffe2.python.control.Do", "control_test.TestControl.UntilLoopTest"], "control_test.TestControl.DoWhileLoopTest": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.DoWhile", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.DoWhile": [], "control_test.TestControl.testDoWhileLoopWithNet": ["control_test.TestControl.DoWhileLoopTest"], "control_test.TestControl.testDoWhileLoopWithStep": ["caffe2.python.control.Do", "control_test.TestControl.DoWhileLoopTest"], "control_test.TestControl.DoUntilLoopTest": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.DoUntil", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.DoUntil": [], "control_test.TestControl.testDoUntilLoopWithNet": ["control_test.TestControl.DoUntilLoopTest"], "control_test.TestControl.testDoUntilLoopWithStep": ["caffe2.python.control.Do", "control_test.TestControl.DoUntilLoopTest"], "control_test.TestControl.IfCondTest": ["caffe2.python.control.If", "control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.Do", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.If": [], "control_test.TestControl.testIfCondTrueOnNet": ["control_test.TestControl.IfCondTest"], "control_test.TestControl.testIfCondTrueOnBlob": ["control_test.TestControl.IfCondTest"], "control_test.TestControl.testIfCondFalseOnNet": ["control_test.TestControl.IfCondTest"], "control_test.TestControl.testIfCondFalseOnBlob": ["control_test.TestControl.IfCondTest"], "control_test.TestControl.IfElseCondTest": ["caffe2.python.control.If", "control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.Do", "control_test.TestControl.CheckNetOutput"], "control_test.TestControl.testIfElseCondTrueOnNet": ["control_test.TestControl.IfElseCondTest"], "control_test.TestControl.testIfElseCondTrueOnBlob": ["control_test.TestControl.IfElseCondTest"], "control_test.TestControl.testIfElseCondFalseOnNet": ["control_test.TestControl.IfElseCondTest"], "control_test.TestControl.testIfElseCondFalseOnBlob": ["control_test.TestControl.IfElseCondTest"], "control_test.TestControl.IfNotCondTest": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.Do", "caffe2.python.control.IfNot", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.IfNot": [], "control_test.TestControl.testIfNotCondTrueOnNet": ["control_test.TestControl.IfNotCondTest"], "control_test.TestControl.testIfNotCondTrueOnBlob": ["control_test.TestControl.IfNotCondTest"], "control_test.TestControl.testIfNotCondFalseOnNet": ["control_test.TestControl.IfNotCondTest"], "control_test.TestControl.testIfNotCondFalseOnBlob": ["control_test.TestControl.IfNotCondTest"], "control_test.TestControl.IfNotElseCondTest": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.Do", "caffe2.python.control.IfNot", "control_test.TestControl.CheckNetOutput"], "control_test.TestControl.testIfNotElseCondTrueOnNet": ["control_test.TestControl.IfNotElseCondTest"], "control_test.TestControl.testIfNotElseCondTrueOnBlob": ["control_test.TestControl.IfNotElseCondTest"], "control_test.TestControl.testIfNotElseCondFalseOnNet": ["control_test.TestControl.IfNotElseCondTest"], "control_test.TestControl.testIfNotElseCondFalseOnBlob": ["control_test.TestControl.IfNotElseCondTest"], "control_test.TestControl.testSwitch": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.Switch", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.Switch": [], "control_test.TestControl.testSwitchNot": ["caffe2.python.control.SwitchNot", "control_test.TestControl.BuildAndRunPlan", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.SwitchNot": [], "control_test.TestControl.testBoolNet": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.Do", "caffe2.python.control.BoolNet", "control_test.TestControl.CheckNetAllOutput"], "caffe2.python.control.BoolNet": [], "control_test.TestControl.testCombineConditions": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.Do", "caffe2.python.control.CombineConditions", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.CombineConditions": [], "control_test.TestControl.testMergeConditionNets": ["control_test.TestControl.BuildAndRunPlan", "caffe2.python.control.Do", "caffe2.python.control.MergeConditionNets", "control_test.TestControl.CheckNetOutput"], "caffe2.python.control.MergeConditionNets": [], "convert": [], "convert_test": ["unittest.main"], "convert_test.TestOperator.setUp": ["caffe2.python.workspace.ResetWorkspace"], "convnet_benchmarks": ["caffe2.python.workspace.GlobalInit", "convnet_benchmarks.GetArgumentParser", "convnet_benchmarks.Benchmark"], "convnet_benchmarks.MLP": ["caffe2.python.model_helper.ModelHelper", "<builtin>.range", "caffe2.python.brew.fc", "caffe2.python.brew.sum", "caffe2.python.cnn.CNNModelHelper"], "convnet_benchmarks.AlexNet": ["caffe2.python.brew.max_pool", "caffe2.python.brew.fc", "caffe2.python.brew.softmax", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.relu", "caffe2.python.brew.conv", "caffe2.python.cnn.CNNModelHelper"], "convnet_benchmarks.OverFeat": ["caffe2.python.brew.max_pool", "caffe2.python.brew.fc", "caffe2.python.brew.softmax", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.relu", "caffe2.python.brew.conv", "caffe2.python.cnn.CNNModelHelper"], "convnet_benchmarks.VGGA": ["caffe2.python.brew.max_pool", "caffe2.python.brew.fc", "caffe2.python.brew.softmax", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.relu", "caffe2.python.brew.conv", "caffe2.python.cnn.CNNModelHelper"], "convnet_benchmarks._InceptionModule": ["caffe2.python.brew.concat", "caffe2.python.brew.max_pool", "caffe2.python.brew.relu", "caffe2.python.brew.conv"], "convnet_benchmarks.Inception": ["caffe2.python.brew.average_pool", "caffe2.python.brew.max_pool", "caffe2.python.brew.fc", "caffe2.python.brew.softmax", "caffe2.python.model_helper.ModelHelper", "convnet_benchmarks._InceptionModule", "caffe2.python.brew.relu", "caffe2.python.brew.conv", "caffe2.python.cnn.CNNModelHelper"], "convnet_benchmarks.AddParameterUpdate": ["caffe2.python.brew.iter"], "convnet_benchmarks.Benchmark": ["caffe2.python.workspace.BenchmarkNet", "convnet_benchmarks.AddParameterUpdate", "caffe2.python.workspace.RunNetOnce", "<builtin>.print", "caffe2.python.workspace.CreateNet", "<builtin>.open", "<builtin>.str", "time.time", "caffe2.python.core.ExecutionStep", "caffe2.python.workspace.RunNet", "caffe2.python.core.Plan", "<builtin>.range", "caffe2.python.workspace.RunPlan"], "caffe2.python.workspace.BenchmarkNet": [], "convnet_benchmarks.GetArgumentParser": ["argparse.ArgumentParser"], "convnet_benchmarks_test": ["unittest.main"], "convnet_benchmarks_test.TestConvnetBenchmarks.testConvnetBenchmarks": ["caffe2.python.convnet_benchmarks.Benchmark", "caffe2.python.convnet_benchmarks.GetArgumentParser"], "caffe2.python.convnet_benchmarks.GetArgumentParser": [], "caffe2.python.convnet_benchmarks.Benchmark": [], "caffe2.python._import_c_extension.registered_dbs": [], "core._CheckDataType": ["<builtin>.AssertionError", "caffe2.proto.caffe2_pb2.TensorProto.DataType.items", "<builtin>.getattr"], "caffe2.proto.caffe2_pb2.TensorProto.DataType.items": [], "<builtin>.AssertionError": [], "core._GetRegisteredOperators": ["caffe2.python.workspace.RegisteredOperators", "<builtin>.set"], "caffe2.python.workspace.RegisteredOperators": [], "core.RefreshRegisteredOperators": ["caffe2.python.lazy.TriggerLazyImport", "core._GetRegisteredOperators"], "caffe2.python.lazy.TriggerLazyImport": [], "core.GlobalInit": ["caffe2.python.lazy.TriggerLazyImport", "caffe2.python._import_c_extension.global_init"], "caffe2.python._import_c_extension.global_init": [], "core.GetGlobalInitArgs": [], "core.IsOperator": ["core.IsOperatorWithEngine"], "core.IsOperatorWithEngine": ["caffe2.python.lazy.TriggerLazyImport", "caffe2.python._import_c_extension.op_registry_key"], "caffe2.python._import_c_extension.op_registry_key": [], "core.IsGPUDeviceType": [], "core.DeviceOption": ["caffe2.proto.caffe2_pb2.DeviceOption"], "core.device_option_equal": [], "core.InferBlobDevices": ["caffe2.proto.caffe2_pb2.DeviceOption"], "core.InferOpBlobDevicesAsDict": ["core.InferOpBlobDevices", "<builtin>.range", "<builtin>.len"], "core.InferOpBlobDevices": ["caffe2.python._import_c_extension.infer_op_input_output_device", "caffe2.proto.caffe2_pb2.DeviceOption"], "caffe2.python._import_c_extension.infer_op_input_output_device": [], "core.InferOpDeviceAsBlobDevices": ["caffe2.proto.caffe2_pb2.DeviceOption", "<builtin>.len"], "core.BlobReference.__init__": ["<builtin>.isinstance", "<builtin>.str"], "core.BlobReference.__hash__": ["<builtin>.hash"], "core.BlobReference.__eq__": ["<builtin>.isinstance"], "core.BlobReference.__ne__": [], "core.BlobReference.__str__": [], "core.BlobReference.__repr__": [], "core.BlobReference.__add__": ["<builtin>.isinstance", "core.BlobReference.__init__", "<builtin>.RuntimeError"], "core.BlobReference.__radd__": ["<builtin>.isinstance", "core.BlobReference.__init__", "<builtin>.RuntimeError"], "core.BlobReference.Net": [], "core.BlobReference.GetNameScope": [], "core.BlobReference.GetUnscopedName": [], "core.BlobReference._CreateAndAddToNet": ["<builtin>.isinstance", "core.Net.__getattr__", "core.Net.__getattr__.<lambda1>"], "core.Net.__getattr__": ["core.IsOperator", "core.IsOperatorWithEngine", "caffe2.python.workspace.C.nearby_opnames", "<builtin>.AttributeError"], "core.Net.__getattr__.<lambda1>": ["core.Net._CreateAndAddToSelf"], "core.BlobReference.__getattr__": ["core.IsOperator", "caffe2.python.workspace.C.nearby_opnames", "<builtin>.AttributeError"], "caffe2.python.workspace.C.nearby_opnames": [], "core.BlobReference.__getattr__.<lambda1>": ["core.BlobReference._CreateAndAddToNet"], "core.BlobReference.__dir__": ["caffe2.python.lazy.TriggerLazyImport", "<builtin>.type", "<builtin>.set", "itertools.chain", "<builtin>.sorted", "<builtin>.dir", "future.utils.viewkeys"], "future.utils.viewkeys": [], "core.ScopedName": ["caffe2.python.scope.CurrentNameScope", "<builtin>.isinstance"], "caffe2.python.scope.CurrentNameScope": [], "core.ScopedBlobReference": ["core.BlobReference.__init__", "core.ScopedName"], "core._RectifyInputOutput": ["<builtin>.type", "<builtin>.len", "<builtin>.isinstance", "core.ScopedBlobReference", "<builtin>.TypeError", "<builtin>.str"], "<builtin>.TypeError": [], "core.CreateOperator": ["os.environ.get", "caffe2.python.workspace.RunOperatorImmediate", "future.utils.viewitems", "six.text_type", "caffe2.python.scope.CurrentDeviceScope", "caffe2.proto.caffe2_pb2.OperatorDef", "traceback.format_stack", "core._RectifyInputOutput", "caffe2.python.workspace.IsImmediate", "caffe2.python.utils.MakeArgument"], "traceback.format_stack": [], "six.text_type": [], "caffe2.python.scope.CurrentDeviceScope": [], "caffe2.python.workspace.IsImmediate": [], "caffe2.python.workspace.RunOperatorImmediate": [], "core._RegisterPythonImpl": ["caffe2.python._import_c_extension.register_python_op", "<builtin>.isinstance", "caffe2.python._import_c_extension.register_python_gradient_op"], "caffe2.python._import_c_extension.register_python_op": [], "caffe2.python._import_c_extension.register_python_gradient_op": [], "core.CreatePythonOperator": ["core._RegisterPythonImpl", "core.CreateOperator"], "core.GetIndexFromGradientList": ["<builtin>.type", "<builtin>.enumerate"], "core.IR.__init__": ["core.IR.Play", "collections.defaultdict", "core.IR.SanityCheck"], "core.IR.__init__.<lambda1>": ["collections.defaultdict"], "core.IR.__init__.<lambda2>": ["collections.defaultdict"], "core.IR.Play": ["<builtin>.len"], "core.IR.SanityCheck": ["<builtin>.ValueError", "<builtin>.str"], "core.IR.CheckGradientOperatorInput": ["core.GetIndexFromGradientList", "<builtin>.RuntimeError", "core.IR.CheckGradientOperatorInput.versionMismatchInfoIn", "core.IR.CheckGradientOperatorInput.versionMismatchInfoOut", "<builtin>.str"], "core.IR.CheckGradientOperatorInput.versionMismatchInfoOut": [], "core.IR.CheckGradientOperatorInput.versionMismatchInfoIn": [], "core.IR.AppendSparseGenerators": ["future.utils.viewitems", "<builtin>.len"], "core.IR.BuildGradientGenerators": ["<builtin>.type", "collections.defaultdict", "core.IR.CheckGradientOperatorInput", "core.GetIndexFromGradientList", "core.IR.AppendSparseGenerators", "<builtin>.enumerate", "<builtin>.str"], "core.IR.BuildGradientGenerators.<lambda1>": ["collections.defaultdict"], "core.IR._GetSumOpOutputName": ["<builtin>.type", "core.IR._GetSumOpOutputName.remove_suffix"], "core.IR._GetSumOpOutputName.remove_suffix": ["<builtin>.len"], "core.IR._SetSumOpsDeviceOption": [], "core.IR._DisambiguateGradOpOutput": ["caffe2.python.control_ops_grad.disambiguate_grad_if_op_output"], "core.IR._CheckSumOpsConflict": ["<builtin>.RuntimeError", "<builtin>.str"], "core.IR._MakeDenseSumOps": ["<builtin>.type", "<builtin>.len", "core.IR._CheckSumOpsConflict", "core.CreateOperator", "core.BlobReference.__init__", "core.IR._DisambiguateGradOpOutput", "<builtin>.str"], "core.IR._MakeSparseSumOps": ["<builtin>.type", "core.IR._CheckSumOpsConflict", "core.CreateOperator", "core.BlobReference.__init__", "core.IR._DisambiguateGradOpOutput"], "core.IR._MakeSumOps": ["core.IR._GetSumOpOutputName", "<builtin>.type", "core.IR._SetSumOpsDeviceOption", "<builtin>.list", "<builtin>.len", "<builtin>.set", "core.IR._MakeDenseSumOps", "core.IR._MakeSparseSumOps"], "core.IR._VerifyGradientGenerators": ["<builtin>.type", "core.device_option_equal", "<builtin>.len", "<builtin>.all", "<builtin>.RuntimeError"], "core.IR.DoGradientAccumulation": ["<builtin>.len", "core.IR._MakeSumOps", "<builtin>.set", "core.IR._VerifyGradientGenerators", "<builtin>.enumerate", "<builtin>.RuntimeError"], "core.IR._AppendAutoGradGenerator": ["<builtin>.str"], "core.IR._GetInitGradients": ["core.IR._AppendAutoGradGenerator", "future.utils.viewitems", "<builtin>.isinstance", "core.CreateOperator", "<builtin>.str"], "core.IR._GenerateGradientsForForwardOp": ["<builtin>.list", "<builtin>.all", "<builtin>.zip", "core.IR.BuildGradientGenerators", "core.GradientRegistry.GetGradientForOp"], "core.GradientRegistry.GetGradientForOp": ["<builtin>.type", "core.GradientRegistry._GetGradientForOpCC", "<builtin>.Exception", "<builtin>.str"], "core.IR.GetBackwardPass": ["<builtin>.range", "future.utils.viewitems", "<builtin>.len", "core.IR._GetInitGradients", "core.IR.DoGradientAccumulation", "<builtin>.isinstance", "<builtin>.reversed", "<builtin>.dict", "future.utils.viewkeys", "<builtin>.TypeError", "core.BlobReference.__init__", "core.IR._GenerateGradientsForForwardOp", "<builtin>.str"], "<builtin>.reversed": [], "core.GradientRegistry.RegisterGradient": [], "core.GradientRegistry.RegisterGradient.Wrapper": [], "core.GradientRegistry._GetGradientForOpCC": ["caffe2.python._import_c_extension.get_gradient_defs", "core.GradientRegistry._GetGradientForOpCC.from_untyped", "core.GradientRegistry._GetGradientForOpCC.to_untyped", "caffe2.proto.caffe2_pb2.OperatorDef"], "core.GradientRegistry._GetGradientForOpCC.from_untyped": ["caffe2.python._import_c_extension.GradientWrapper"], "caffe2.python._import_c_extension.GradientWrapper": [], "caffe2.python._import_c_extension.get_gradient_defs": [], "core.GradientRegistry._GetGradientForOpCC.to_untyped": [], "core.GradientRegistry.GetBackwardPass": ["core.IR.GetBackwardPass", "core.IR.__init__"], "core.get_ssa": ["<builtin>.isinstance", "<builtin>.str", "core.get_ssa"], "core.get_undefined_blobs": ["<builtin>.set"], "core.get_output_producers": ["<builtin>.enumerate"], "core.get_op_ids_in_path": ["<builtin>.len", "<builtin>.set", "core.get_output_producers", "<builtin>.sorted", "<builtin>.str"], "core.recurrent_network_op_remap": ["core.remap_proto", "<builtin>.range", "core.recurrent_network_op_remap.get_remapped_str", "<builtin>.len"], "core.recurrent_network_op_remap.get_remapped_str": ["<builtin>.isinstance"], "core.remap_proto": ["core.Net.__init__", "core.Net.Proto", "core.Net.Clone"], "core.control_op_remap": ["core.Net.__init__", "core.Net.Proto", "core.Net.Clone"], "core.Net.__init__": ["<builtin>.type", "collections.defaultdict", "<builtin>.list", "<builtin>.len", "<builtin>.set", "caffe2.proto.caffe2_pb2.NetDef", "<builtin>.max", "<builtin>.int", "core.Net._get_next_net_name"], "core.Net.Clone": ["<builtin>.range", "core.Net.Clone.remap_op", "<builtin>.list", "<builtin>.len", "<builtin>.set", "caffe2.proto.caffe2_pb2.NetDef", "core.Net.Clone.remap_list", "core.Net.__init__", "caffe2.python.schema.from_blob_list", "core.Net.Proto", "core.BlobReference.__init__", "core.Net.Clone.get_remapped_str"], "core.Net.Proto": ["core.Net._InvalidateLookupTables"], "core.clone_and_bind_net": ["core.get_undefined_blobs", "<builtin>.len", "<builtin>.set", "<builtin>.isinstance", "<builtin>.dict", "core.get_ssa", "<builtin>.zip", "future.utils.viewkeys", "<builtin>.str"], "core._get_blob_ref": ["<builtin>.isinstance", "core.BlobReference.__init__"], "core._recover_record_by_prefix": ["caffe2.python.schema.from_column_list", "core._get_blob_ref", "<builtin>.len"], "caffe2.python.schema.from_column_list": [], "core.Net": ["<builtin>.set"], "core.Net.current_prefix": ["caffe2.python.net_builder.NetBuilder.current"], "caffe2.python.net_builder.NetBuilder.current": [], "core.Net._get_next_net_name": ["<builtin>.set", "<builtin>.str"], "core.Net.AppendNet": ["core.Net._ExtendOps", "<builtin>.isinstance", "core.Net.Proto", "copy.deepcopy"], "core.Net._ExtendOps": ["six.text_type"], "core.Net.LogInfo": ["<builtin>.isinstance", "core.Net.NextName"], "core.Net.NextName": ["core.Net.BlobIsDefined", "core.ScopedBlobReference", "<builtin>.str"], "core.Net.add_attribute": [], "core.Net.get_attributes": [], "core.Net.set_rand_seed": ["numpy.iinfo", "<builtin>.hash", "<builtin>.enumerate", "core.Net.Proto", "<builtin>.str"], "numpy.iinfo": [], "core.Net.Name": [], "core.Net.__str__": ["core.Net.Name"], "core.Net.Const": ["<builtin>.isinstance", "core.Net.Const.do_set", "numpy.array"], "core.Net.Const.do_set": [], "core.Net.BlobIsDefined": ["<builtin>.str", "core.Net._RecreateLookupTables"], "core.Net._RecreateLookupTables": ["<builtin>.set"], "core.Net.UsesBlob": ["<builtin>.str"], "core.Net.UsedBlobNames": ["<builtin>.set"], "core.Net.GetBlobRef": ["core.Net.BlobIsDefined", "core.BlobReference.__init__", "<builtin>.KeyError", "<builtin>.str"], "core.Net.Clone.get_remapped_str": ["<builtin>.str"], "core.Net.Clone.remap_list": ["core.Net.Clone.get_remapped_str"], "core.Net.Clone.remap_op": ["core.Net.Clone.remap_list", "caffe2.proto.caffe2_pb2.OperatorDef"], "caffe2.python.schema.from_blob_list": [], "core.Net.ClonePartial": ["core.get_op_ids_in_path", "<builtin>.list", "<builtin>.set", "<builtin>.zip", "<builtin>.enumerate", "core.Net.Proto", "core.Net.Clone", "core.Net.ClonePartial.remap", "core.Net.GetBlobRef", "collections.OrderedDict", "<builtin>.str", "core.get_undefined_blobs", "future.utils.viewitems", "<builtin>.len", "core.Net.BlobIsDefined", "<builtin>.all", "<builtin>.isinstance", "future.utils.viewkeys", "core.get_ssa"], "core.Net.ClonePartial.remap": [], "core.Net._InvalidateLookupTables": [], "core.Net.insert_op_at_idx": ["core.Net.Proto"], "core.Net.reroute_tensor": ["core.Net.reroute_tensor._find_tensor_input_op", "core.Net.Proto", "<builtin>.max", "core.remap_input", "core.Net.insert_op_at_idx"], "core.Net.reroute_tensor._find_tensor_input_op": ["<builtin>.enumerate", "core.Net.Proto"], "core.remap_input": [], "core.Net.PopulateProtoWithFileName": ["caffe2.python.workspace.operator_tracebacks.get", "<builtin>.enumerate", "core.Net.Proto", "<builtin>.map", "core.Net.Name"], "caffe2.python.workspace.operator_tracebacks.get": [], "core.Net.NextScopedBlob": ["core.Net.NextBlob", "core.ScopedName"], "core.Net.NextBlob": ["core.Net.BlobIsDefined", "core.BlobReference.__init__", "<builtin>.str"], "core.Net._CheckLookupTables": ["<builtin>.set"], "core.Net.AddGradientOperators": ["caffe2.python.workspace.RunOperatorImmediate", "core.Net._ExtendOps", "caffe2.python.workspace.IsImmediate", "core.GradientRegistry.GetBackwardPass"], "core.Net.AddArgument": [], "core.Net.AddExternalInput": ["<builtin>.set", "<builtin>.str", "core._get_blob_ref", "<builtin>.len"], "core.Net.AddExternalOutput": ["core.Net.BlobIsDefined", "<builtin>.isinstance", "core.Net.Proto"], "core.Net.AddScopedExternalInputs": ["<builtin>.isinstance", "core.ScopedBlobReference", "core.Net.AddExternalInput"], "core.Net.AddScopedExternalOutputs": ["core.ScopedBlobReference", "core.Net.AddExternalOutput"], "core.Net.AddObserver": ["caffe2.python._import_c_extension.add_observer_to_net"], "caffe2.python._import_c_extension.add_observer_to_net": [], "core.Net.RemoveObserver": ["caffe2.python._import_c_extension.remove_observer_from_net"], "caffe2.python._import_c_extension.remove_observer_from_net": [], "core.Net.NumObservers": ["caffe2.python._import_c_extension.num_observers_on_net"], "caffe2.python._import_c_extension.num_observers_on_net": [], "core.Net.external_inputs": ["core._get_blob_ref"], "core.Net.external_outputs": ["core._get_blob_ref"], "core.Net.set_input_record": ["<builtin>.set", "core.Net.AddExternalInput", "caffe2.python.scope.NameScope", "caffe2.python.schema.NewRecord", "core.Net.Name", "core.Net.is_external_input"], "caffe2.python.schema.NewRecord": [], "core.Net.is_external_input": ["<builtin>.str", "core.Net._RecreateLookupTables"], "core.Net.recover_input_record_by_prefix": ["core.Net.set_input_record", "core._recover_record_by_prefix"], "core.Net.set_output_record": ["core.Net.BlobIsDefined", "<builtin>.set", "core.Net.Proto", "core.Net.AddExternalOutput"], "core.Net.recover_output_record_by_prefix": ["core.Net.set_output_record", "core._recover_record_by_prefix"], "core.Net.AppendOutputRecordField": ["core.Net.BlobIsDefined", "caffe2.python.schema.Struct", "core.Net.AddExternalOutput"], "core.Net.input_record": [], "core.Net.output_record": [], "core.Net.AddExternalInputs": ["core.Net.AddExternalInput"], "core.Net.AddExternalOutputs": ["core.Net.AddExternalOutput"], "core.Net.DeduplicateGradientSlices": ["<builtin>.isinstance", "<builtin>.ValueError"], "core.Net._RunAllOnGPU": ["core.Net._RunAllOnGPU", "caffe2.proto.caffe2_pb2.DeviceOption"], "core.Net.RunAllOnGPU": ["core.Net._RunAllOnGPU"], "core.Net.RunAllOnMKL": ["caffe2.proto.caffe2_pb2.DeviceOption"], "core.Net.RunAllOnIDEEP": ["caffe2.proto.caffe2_pb2.DeviceOption"], "core.Net._CreateAndAddToSelf": ["<builtin>.type", "<builtin>.range", "core.Net.NextName", "core._extract_stacktrace", "<builtin>.len", "core.Net.BlobIsDefined", "core.Net.AddExternalInput", "core.CreateOperator", "<builtin>.tuple", "core.Net._ExtendOps", "core.BlobReference.__init__", "core._RectifyInputOutput", "core.Net.Name"], "core._extract_stacktrace": ["sys._getframe"], "core.Net.__dir__": ["caffe2.python.lazy.TriggerLazyImport", "<builtin>.type", "<builtin>.set", "itertools.chain", "<builtin>.sorted", "<builtin>.dir", "future.utils.viewkeys"], "core.Net.Python": ["core.IsOperator", "core._RegisterPythonImpl", "core.Net.Python.make_builder"], "core.Net.Python.make_builder": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.dict", "pickle.dumps", "<builtin>.tuple"], "core.Net.Python.<lambda1>": ["itertools.chain", "core.Net._CreateAndAddToSelf", "future.utils.viewitems", "<builtin>.dict"], "core.Net.extend_ops": ["core.Net._ExtendOps"], "core.copy_func_between_devices": ["<builtin>.ValueError", "core.IsGPUDeviceType"], "core.copy_func_between_devices.fun": ["caffe2.python.scope.DeviceScope"], "caffe2.python.scope.DeviceScope": [], "core.device_equal": [], "core.update_placeholder_op_output": [], "core.RemapEntry.__init__": [], "core.RemapEntry.__eq__": [], "core.RemapEntry.__hash__": ["<builtin>.hash", "<builtin>.str"], "core.InjectCrossDeviceCopies": ["collections.defaultdict", "core.device_equal", "core.RemapEntry.__init__", "core.update_placeholder_op_output", "<builtin>.list", "core.InferOpDeviceAsBlobDevices", "<builtin>.zip", "<builtin>.RuntimeError", "<builtin>.enumerate", "caffe2.proto.caffe2_pb2.OperatorDef", "<builtin>.AttributeError", "core.InferOpBlobDevices", "core.copy_func_between_devices", "core.copy_func_between_devices.fun", "caffe2.proto.caffe2_pb2.DeviceOption", "core.InjectCrossDeviceCopies._gen_new_name"], "core.InjectCrossDeviceCopies._gen_new_name": ["<builtin>.RuntimeError", "core.IsGPUDeviceType", "<builtin>.str"], "core.InjectDeviceCopiesAmongNets": ["<builtin>.all", "core.InjectCrossDeviceCopies", "<builtin>.isinstance", "<builtin>.str"], "core.InjectDeviceCopiesAmongNetsWithoutB2D": ["core.InjectDeviceCopiesAmongNets"], "core.get_net_name": ["<builtin>.isinstance"], "core.output_to_list": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "core._add_net_to_dict": ["core.get_net_name", "<builtin>.isinstance"], "core.ExecutionStep": ["<builtin>.set"], "core.ExecutionStep._get_next_step_name": ["<builtin>.set", "<builtin>.str"], "core.ExecutionStep.__init__": ["<builtin>.type", "core.ExecutionStep._get_next_step_name", "caffe2.proto.caffe2_pb2.ExecutionStep", "collections.OrderedDict", "core._add_net_to_dict"], "caffe2.proto.caffe2_pb2.ExecutionStep": [], "core.ExecutionStep.get_net": [], "core.ExecutionStep.Name": [], "core.ExecutionStep.__str__": [], "core.ExecutionStep._assert_can_mutate": [], "core.ExecutionStep._notify_is_used": [], "core.ExecutionStep.Proto": [], "core.ExecutionStep.HasNets": ["<builtin>.len"], "core.ExecutionStep.HasSubsteps": ["<builtin>.len"], "core.ExecutionStep.Nets": ["<builtin>.list", "future.utils.viewvalues"], "future.utils.viewvalues": [], "core.ExecutionStep.Substeps": [], "core.ExecutionStep.SetIter": ["core.ExecutionStep._assert_can_mutate"], "core.ExecutionStep.SetCreateWorkspace": ["core.ExecutionStep._assert_can_mutate"], "core.ExecutionStep.SetNumConcurrentInstances": ["core.ExecutionStep._assert_can_mutate"], "core.ExecutionStep.SetOnlyOnce": ["core.ExecutionStep._assert_can_mutate"], "core.ExecutionStep.SetShouldStopBlob": ["<builtin>.type", "core.ExecutionStep._assert_can_mutate", "<builtin>.isinstance", "<builtin>.str"], "core.ExecutionStep.RunEveryMillis": [], "core.ExecutionStep.SetReportNet": ["core._add_net_to_dict", "core.ExecutionStep._assert_can_mutate", "core.get_net_name"], "core.ExecutionStep.AddSubstep": ["core.ExecutionStep._assert_can_mutate", "core.ExecutionStep.HasSubsteps", "<builtin>.isinstance", "core.ExecutionStep.Nets", "core.ExecutionStep.HasNets", "core._add_net_to_dict", "core.ExecutionStep.Proto", "core.ExecutionStep._notify_is_used"], "core.ExecutionStep.SetConcurrentSubsteps": ["core.ExecutionStep._assert_can_mutate", "core.ExecutionStep.HasNets"], "core.ExecutionStep.AddNet": ["core._add_net_to_dict", "core.ExecutionStep._assert_can_mutate", "<builtin>.isinstance", "core.ExecutionStep.HasSubsteps"], "core.ExecutionStep.get_all_attributes": ["future.utils.viewvalues"], "core.ExecutionStep.create_from_proto": ["core.ExecutionStep.create_from_proto", "<builtin>.len", "<builtin>.isinstance", "core.Net.__init__", "core.execution_step", "core.BlobReference.__init__"], "core.execution_step": ["core.ExecutionStep.AddNet", "core.ExecutionStep.SetCreateWorkspace", "<builtin>.isinstance", "core.ExecutionStep.__init__", "core.ExecutionStep.SetReportNet", "<builtin>.all", "<builtin>.ValueError", "core.ExecutionStep.SetConcurrentSubsteps", "core.ExecutionStep.AddSubstep", "core.to_execution_step", "core.ExecutionStep.SetShouldStopBlob", "core.ExecutionStep.SetNumConcurrentInstances", "core.ExecutionStep.RunEveryMillis", "core.ExecutionStep.SetIter", "core.ExecutionStep.SetOnlyOnce"], "core.add_nets_in_order": ["core.add_nets_in_order", "core.ExecutionStep.Proto", "core.ExecutionStep.Substeps"], "core.Plan.__init__": ["<builtin>.isinstance", "<builtin>.ValueError", "caffe2.proto.caffe2_pb2.PlanDef", "collections.OrderedDict", "core.Plan.AddStep"], "caffe2.proto.caffe2_pb2.PlanDef": [], "core.Plan.AddStep": ["core.ExecutionStep.HasSubsteps", "<builtin>.isinstance", "core.Plan.AddNets", "core.ExecutionStep.get_net", "core.ExecutionStep.HasNets", "core.add_nets_in_order", "core.ExecutionStep.Proto", "core.ExecutionStep._notify_is_used"], "core.Plan.__str__": [], "core.Plan.Proto": [], "core.Plan.AddNets": ["core._add_net_to_dict", "<builtin>.isinstance"], "core.Plan.Nets": ["<builtin>.list", "future.utils.viewvalues"], "core.Plan.Steps": [], "core.Plan.get_all_attributes": ["future.utils.viewvalues"], "core.Plan.create_from_proto": ["core.Plan.__init__", "<builtin>.isinstance", "core.Plan.AddStep", "core.ExecutionStep.create_from_proto"], "core.to_execution_step": ["<builtin>.hasattr", "<builtin>.isinstance", "core.execution_step"], "core.scoped_execution_step": ["core.ScopedName", "core.execution_step"], "sys._getframe": [], "core_gradients_test": ["unittest.main", "caffe2.python.core.GradientRegistry.RegisterGradient"], "core_gradients_test.NeedAll": ["<builtin>.zip", "<builtin>.RuntimeError"], "core_gradients_test.GIS": [], "core_gradients_test.CopyDeviceOption": [], "caffe2.python.core.GradientRegistry.RegisterGradient": [], "core_gradients_test.AddDirectGradient": ["caffe2.python.core.CreateOperator", "core_gradients_test.CopyDeviceOption", "core_gradients_test.GIS", "core_gradients_test.NeedAll"], "core_gradients_test.AddUseOutputGradient": ["core_gradients_test.CopyDeviceOption", "caffe2.python.core.CreateOperator", "core_gradients_test.NeedAll", "<builtin>.list", "core_gradients_test.GIS"], "core_gradients_test.AddUseInputGradient": ["core_gradients_test.CopyDeviceOption", "caffe2.python.core.CreateOperator", "core_gradients_test.NeedAll", "<builtin>.list", "core_gradients_test.GIS"], "core_gradients_test.AddNogradient": [], "core_gradients_test.TestGradientCalculation.assertOperatorListEqual": ["caffe2.python.test_util.TestCase.assertEqual"], "hypothesis.strategies.sampled_from": [], "core_gradients_test.TestGradientCalculation": ["hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.given"], "core_gradients_test.TestGradientCalculation.testDirect": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "caffe2.python.core.GradientRegistry.GetBackwardPass": [], "core_gradients_test.TestGradientCalculation.testDirectImplicitGradientSource": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testDoesNotGenerateUnnecessaryGradients": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testDirectButNoOutputGradientGiven": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testDirectInPlace": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testVersionMismatch": ["caffe2.python.test_util.TestCase.assertFalse", "<builtin>.str", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.GradientRegistry.GetBackwardPass", "caffe2.python.core.CreateOperator", "<builtin>.print"], "core_gradients_test.TestGradientCalculation.testUseOutput": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testUseOutputInPlace": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testUseOutputButOutputHasBeenChanged": ["caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.GradientRegistry.GetBackwardPass"], "core_gradients_test.TestGradientCalculation.testUseInput": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testUseInputButInputHasBeenChanged": ["caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.GradientRegistry.GetBackwardPass"], "core_gradients_test.TestGradientCalculation.testMultiUseInput": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testMultiUseInputButWithNoGradient": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testMultiUseInputAndMultipleVersions": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testMultiUseInputAutoGenSumDevice": ["caffe2.python.test_util.TestCase.assertIn", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.GradientRegistry.GetBackwardPass", "caffe2.python.core.CreateOperator", "caffe2.python.core.DeviceOption", "caffe2.python.test_util.TestCase.assertNotIn"], "caffe2.python.test_util.TestCase.assertNotIn": [], "caffe2.python.test_util.TestCase.assertIn": [], "core_gradients_test.TestGradientCalculation.testMultiUseInputAndMultipleVersionsBig": ["<builtin>.str", "caffe2.python.core.GradientRegistry.GetBackwardPass", "caffe2.python.core.CreateOperator", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual", "<builtin>.print"], "core_gradients_test.TestGradientCalculation.testGradientMappingUsingSumOp": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "<builtin>.str", "<builtin>.print"], "core_gradients_test.TestGradientCalculation.testGradientCalculationWithPrint": ["<builtin>.str", "caffe2.python.core.GradientRegistry.GetBackwardPass", "caffe2.python.core.CreateOperator", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual", "<builtin>.print"], "core_gradients_test.TestGradientCalculation.testStopGradient": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testStopGradientOrphan": ["caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.GradientRegistry.GetBackwardPass"], "core_gradients_test.TestGradientCalculation.testStopGradientInplace": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "caffe2.python.test_util.TestCase.assertEqual", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.testStopGradientWithMultiUseOperators": ["caffe2.python.core.CreateOperator", "caffe2.python.core.GradientRegistry.GetBackwardPass", "caffe2.python.test_util.TestCase.assertEqual", "core_gradients_test.TestGradientCalculation.assertOperatorListEqual"], "core_gradients_test.TestGradientCalculation.test_zero_gradient": ["caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.Net"], "core_gradients_test.TestGradientCalculation.test_two_grads": ["caffe2.python.core.Net", "<builtin>.str", "numpy.array", "caffe2.python.workspace.RunNetOnce", "<builtin>.print", "caffe2.python.workspace.ResetWorkspace"], "core_gradients_test.TestSparseGradientsAccumulation.testSparseAccumulationWithValues": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestSparseGradientsAccumulation.testSparseGradientToDense": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestSparseGradientsAccumulation.testSparseAccumulationWithIndicesAndValues": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestGradientsAccumulationWithNoGradientOps.testNormalAccumulation": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestGradientsAccumulationWithNoGradientOps.testAccumulationWithNoGradientBranch": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testAddOpInMiddle": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testAddAndDynamicConstant": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.test_util.TestCase.assertFalse"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testAddAndStaticConstant": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertTrue", "<builtin>.print"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testSubOpInMiddle": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net", "<builtin>.str", "<builtin>.print"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testAddOpAtLeaf": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testSubOpAtLeaf": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testMultiLayerAddOps": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testMultiLayerSubOps": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testAccumulationRuns": ["caffe2.python.core.Net", "<builtin>.str", "numpy.array", "caffe2.python.workspace.RunNetOnce", "<builtin>.print", "caffe2.python.workspace.ResetWorkspace"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testIncorrectOperator": ["caffe2.python.core.Net", "<builtin>.str", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.test_util.TestCase.assertFalse"], "core_gradients_test.TestGradientsAccumulationWithPassThroughGradients.testDeviceOptionsPropagation": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net", "numpy.random.random_integers", "caffe2.python.core.DeviceScope"], "numpy.random.random_integers": [], "core_test": ["unittest.main"], "core_test.TestScopes.testBlobReferenceIsIndependentFromNameScope": ["<builtin>.str", "caffe2.python.core.BlobReference", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.NameScope"], "core_test.TestScopes.testNameScopeWithOp": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.BlobReference", "<builtin>.len", "caffe2.python.core.NameScope", "caffe2.python.core.CreateOperator"], "core_test.TestScopes.testNameScopeWithReset": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "<builtin>.len", "caffe2.python.core.NameScope"], "core_test.TestScopes.testDeviceScope": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.core.DeviceScope", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue"], "core_test.TestScopes.testNameAndDeviceScopeTogether": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.proto.caffe2_pb2.DeviceOption", "<builtin>.len", "caffe2.python.core.NameScope", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue"], "core_test.TestCloneNet.testPartialClone": ["caffe2.python.test_util.TestCase.assertEqual", "<builtin>.isinstance", "caffe2.python.test_util.TestCase.assertRaises", "core_test.TestCloneNet.testPartialClone.net_assert", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.CreateNet", "<builtin>.str", "caffe2.python.workspace.RunNetOnce"], "core_test.TestCloneNet.testPartialClone.net_assert": ["caffe2.python.test_util.TestCase.assertEqual", "<builtin>.len", "<builtin>.set", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FeedBlob", "numpy.array"], "core_test.TestCloneNet.test_mask_clone_update_external_list": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net", "<builtin>.sorted", "<builtin>.map"], "core_test.TestCloneNet.test_control_op_remap": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "core_test.TestExternalInputs.testAddExternalInputShouldRaiseIfDuplicate": ["caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.schema.Scalar", "caffe2.python.core.Net", "caffe2.python.schema.Struct"], "caffe2.python.schema.Scalar": [], "core_test.TestExternalInputs.testAddExternalInputShouldRaiseIfDuplicateInSameCall": ["caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.schema.Scalar", "caffe2.python.core.Net", "caffe2.python.schema.Struct"], "core_test.TestExternalInputs.testSetInputRecordWithBlobs": ["caffe2.python.schema.Scalar", "caffe2.python.core.Net", "caffe2.python.schema.Struct", "caffe2.python.test_util.TestCase.assertIn", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.schema.NewRecord"], "core_test.TestExternalInputs.testSetInputRecordWithoutBlobs": ["caffe2.python.schema.Scalar", "caffe2.python.core.Net", "caffe2.python.schema.Struct", "caffe2.python.test_util.TestCase.assertIn", "caffe2.python.test_util.TestCase.assertTrue"], "core_test.TestCreateOperator.testCreate": ["caffe2.python.test_util.TestCase.assertEqual", "<builtin>.list", "caffe2.proto.caffe2_pb2.DeviceOption", "<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue"], "core_test.TestAutoNaming.assertOperatorListEqual": ["caffe2.python.test_util.TestCase.assertEqual"], "core_test.TestAutoNaming.test_next_blob": ["caffe2.python.test_util.TestCase.assertEqual", "core_test.TestAutoNaming.test_next_blob.create_net", "caffe2.python.core.Net", "core_test.TestAutoNaming.assertOperatorListEqual", "<builtin>.str", "caffe2.python.test_util.TestCase.assertNotEqual"], "core_test.TestAutoNaming.test_next_blob.create_net": ["caffe2.python.core.Net", "caffe2.python.core.NameScope"], "caffe2.python.test_util.TestCase.assertNotEqual": [], "core_test.TestAutoNaming.test_auto_naming": ["core_test.TestAutoNaming.test_auto_naming.add_ops", "caffe2.python.core.Net", "caffe2.python.core.NameScope", "<builtin>.str", "<builtin>.enumerate", "caffe2.python.test_util.TestCase.assertNotEqual"], "core_test.TestAutoNaming.test_auto_naming.add_ops": [], "core_test.TestAppendNet.test_external_inputs_merged_correctly": ["caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.Net"], "core_test.TestAppendNet.test_external_inputs_merged_correctlyB": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.Net"], "core_test.TestExtractPredictorNet": ["caffe2.python.workspace.RegisteredOperators", "unittest.skipIf"], "unittest.skipIf": [], "core_test.TestExtractPredictorNet.test_extract_simple": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.brew.image_input", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.model_helper.ExtractPredictorNet", "<builtin>.str", "caffe2.python.brew.fc", "<builtin>.list", "caffe2.python.brew.conv", "<builtin>.len", "caffe2.python.model_helper.ModelHelper", "<builtin>.set", "caffe2.python.brew.softmax", "caffe2.python.test_util.TestCase.assertTrue"], "caffe2.python.model_helper.ExtractPredictorNet": [], "core_test.TestOperatorTraceback.op_name_check": ["caffe2.python.test_util.TestCase.assertEqual", "inspect.getframeinfo"], "inspect.getframeinfo": [], "core_test.TestOperatorTraceback.test_operator_constructor_traceback": ["inspect.currentframe", "caffe2.python.test_util.TestCase.assertRaises", "core_test.TestOperatorTraceback.op_name_check", "caffe2.python.core.Net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNetOnce"], "inspect.currentframe": [], "core_test.TestOperatorTraceback.test_operator_runtime_traceback": ["inspect.currentframe", "caffe2.python.workspace.RunNet", "caffe2.python.test_util.TestCase.assertRaises", "core_test.TestOperatorTraceback.op_name_check", "caffe2.python.core.Net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNetOnce", "numpy.array"], "core_test.TestOperatorTraceback.test_c_workspace_constructor": ["inspect.currentframe", "caffe2.python.workspace.C.Workspace", "core_test.TestOperatorTraceback.op_name_check", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.Net"], "core_test.TestOperatorTraceback.test_c_workspace_runtime": ["inspect.currentframe", "caffe2.python.workspace.C.Workspace", "caffe2.python.test_util.TestCase.assertRaises", "core_test.TestOperatorTraceback.op_name_check", "caffe2.python.core.Net", "<builtin>.str", "numpy.array"], "core_test.TestOperatorTraceback.test_async_exception_handling": ["inspect.currentframe", "<builtin>.str", "caffe2.python.test_util.TestCase.assertRaises", "core_test.TestOperatorTraceback.op_name_check", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertIn", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "numpy.array"], "core_test.TestCreatePlan.test_create_plan_from_proto_correctly": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.net_builder.ops.loop", "caffe2.python.net_builder.ops.task_exit", "<builtin>.len", "caffe2.python.net_builder.ops.Add", "caffe2.python.core.Plan.create_from_proto", "caffe2.python.task.Task", "caffe2.python.net_builder.ops.task_instance_init", "caffe2.python.net_builder.ops.task_instance_exit", "caffe2.python.net_builder.ops.task_init", "caffe2.python.core.Plan", "<builtin>.range", "caffe2.python.net_builder.ops.Copy", "caffe2.python.task.Node", "caffe2.python.net_builder.ops.Mul", "caffe2.python.net_builder.ops.Const"], "caffe2.python.net_builder.ops.task_instance_init": [], "caffe2.python.net_builder.ops.Copy": [], "caffe2.python.net_builder.ops.task_instance_exit": [], "caffe2.python.net_builder.ops.Mul": [], "caffe2.python.core.Plan.create_from_proto": [], "core_test.TestOpRegistryKey.test_is_operator": ["caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.IsOperator"], "caffe2.python.core.IsOperator": [], "core_test.TestOpRegistryKey.test_is_operator_with_engine": ["caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.core.IsOperatorWithEngine", "caffe2.python.test_util.TestCase.assertTrue"], "caffe2.python.core.IsOperatorWithEngine": [], "core_test.TestDeviceOption.test_check_equal_node_name": ["caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.core.DeviceOption", "caffe2.python.core.device_option_equal", "caffe2.python.test_util.TestCase.assertTrue"], "caffe2.python.core.device_option_equal": [], "core_test.TestDeviceOption.test_check_equal_default_value": ["caffe2.python.test_util.TestCase.assertFalse", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.device_option_equal", "caffe2.python.test_util.TestCase.assertTrue"], "core_test.TestInferDeviceCpuOnly.test_inject_copy": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.python.core.InjectCrossDeviceCopies", "caffe2.python.core.Net", "caffe2.python.core.CreateOperator"], "caffe2.python.core.InjectCrossDeviceCopies": [], "core_test.TestInferDevice.setUp": ["caffe2.proto.caffe2_pb2.DeviceOption"], "core_test.TestInferDevice._test_op": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.python.core.InferOpBlobDevices", "<builtin>.isinstance", "<builtin>.len", "caffe2.python.core.CreateOperator", "<builtin>.zip"], "caffe2.python.core.InferOpBlobDevices": [], "core_test.TestInferDevice.test_infer_device": ["core_test.TestInferDevice._test_op"], "core_test.TestInferDevice.test_infer_device_split_by_lengths": ["core_test.TestInferDevice._test_op"], "core_test.TestInferDevice.test_infer_device_adam": ["core_test.TestInferDevice._test_op"], "core_test.TestInferDevice.test_infer_device_cross_device": ["core_test.TestInferDevice._test_op"], "core_test.TestInferDevice.test_device_inference_function": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.python.core.InferOpBlobDevices", "<builtin>.range", "caffe2.python.core.CreateOperator"], "core_test.TestInferDevice.test_inject_copy": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.python.core.InjectCrossDeviceCopies", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertNotEqual"], "core_test.TestInferDevice.test_cross_nets": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.Net", "caffe2.python.core.InjectDeviceCopiesAmongNets", "caffe2.python.test_util.TestCase.assertTrue"], "caffe2.python.core.InjectDeviceCopiesAmongNets": [], "core_test.TestInferDevice.test_cross_nets_no_change": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.python.core.InjectDeviceCopiesAmongNetsWithoutB2D", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.Net"], "caffe2.python.core.InjectDeviceCopiesAmongNetsWithoutB2D": [], "core_test.TestInferDevice.test_inject_copy_multi_use": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.python.core.InjectCrossDeviceCopies", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.Net"], "core_test.TestInferDevice.test_inject_copy_placeholder_ops": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.python.core.InjectCrossDeviceCopies", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.Net", "<builtin>.range", "caffe2.python.core.CreateOperator", "<builtin>.str"], "core_test.TestInferDevice.test_blob_inplace": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "caffe2.python.core.InjectCrossDeviceCopies", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.Net"], "core_test.TestRerouteTensor.test_reroute_tensor": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.core.Net"], "core_test.TestRunAllOnGPU.test_rnn_run_on_gpu": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.Net"], "crf": [], "crf.CRFWithLoss.__init__": [], "crf.CRFWithLoss.crf_loss": ["caffe2.python.core.ScopedBlobReference", "crf.CRFWithLoss._gather_entries_sum", "crf.CRFWithLoss._crf_forward", "crf.CRFWithLoss._path_binary_scores", "crf.CRFWithLoss.pad_labels", "crf.CRFWithLoss.pad_predictions"], "crf.CRFWithLoss._gather_entries_sum": [], "crf.CRFWithLoss.pad_predictions": ["numpy.array"], "crf.CRFWithLoss.pad_labels": [], "crf.CRFWithLoss._path_binary_scores": [], "crf.CRFWithLoss._crf_forward": ["crf.CRFWithLoss.build_crf_net"], "crf.CRFWithLoss.build_crf_net": ["caffe2.python.core.ScopedBlobReference", "caffe2.python.brew.transpose", "caffe2.python.model_helper.ModelHelper", "caffe2.python.recurrent.recurrent_net", "crf.CRFWithLoss.build_crf_net.s"], "crf.CRFWithLoss.build_crf_net.s": ["<builtin>.str"], "caffe2.python.recurrent.recurrent_net": [], "crf.CRFWithLoss.update_predictions": ["caffe2.python.core.ScopedBlobReference", "crf.CRFWithLoss.pad_predictions"], "crf.CRFWithLoss.update_predictions.crf_update_predictions_op": ["numpy.max", "<builtin>.reversed", "<builtin>.enumerate", "numpy.zeros", "numpy.argmax", "numpy.expand_dims", "<builtin>.range"], "numpy.zeros": [], "numpy.expand_dims": [], "numpy.argmax": [], "crf_predict": [], "crf_predict.crf_update_predictions": ["crf_predict.apply_crf"], "crf_predict.apply_crf": ["numpy.array", "caffe2.python.crf.CRFWithLoss.pad_predictions"], "caffe2.python.crf.CRFWithLoss.pad_predictions": [], "crf_viterbi_test": [], "crf_viterbi_test.TestCrfDecode": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers"], "crf_viterbi_test.TestCrfDecode.test_crf_viterbi": ["numpy.testing.assert_allclose", "numpy.random.uniform", "caffe2.python.crf_predict.crf_update_predictions", "<builtin>.str", "caffe2.python.crf.CRFWithLoss", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "numpy.random.randn", "caffe2.python.workspace.FeedBlob"], "caffe2.python.crf.CRFWithLoss": [], "caffe2.python.crf_predict.crf_update_predictions": [], "dataio": [], "dataio.Reader.__init__": ["<builtin>.isinstance"], "dataio.Reader.schema": [], "dataio.Reader._set_schema": [], "dataio.Reader.setup_ex": [], "dataio.Reader.read_ex": ["dataio.Reader.read", "caffe2.python.core.Net"], "dataio.Reader.read": ["<builtin>.NotImplementedError"], "dataio.Reader.read_record_ex": ["caffe2.python.schema.from_blob_list", "dataio.CounterReader.read_ex", "dataio.CompositeReader.read_ex", "dataio.Reader.read_ex"], "dataio.CounterReader.read_ex": ["caffe2.python.core.Net"], "dataio.CompositeReader.read_ex": ["caffe2.python.core.Net", "<builtin>.zip"], "dataio.Reader.reset": ["<builtin>.NotImplementedError"], "dataio.Reader.read_record": ["dataio.Reader.read", "caffe2.python.schema.from_blob_list"], "dataio.Reader.execution_step": ["dataio.Reader.read_record", "caffe2.python.core.execution_step", "caffe2.python.core.Net"], "dataio.Writer.schema": [], "dataio.Writer.write": ["<builtin>.NotImplementedError"], "dataio.Writer.write_record": ["<builtin>.isinstance", "dataio.Writer.write"], "dataio.Writer.setup_ex": ["dataio.Writer.commit"], "dataio.Writer.commit": [], "dataio.Writer.write_ex": ["caffe2.python.core.Net", "dataio.Writer.write"], "dataio.Writer.write_record_ex": ["<builtin>.isinstance", "dataio.Writer.write_ex"], "dataio.ReaderBuilder.schema": ["<builtin>.NotImplementedError"], "dataio.ReaderBuilder.setup": ["<builtin>.NotImplementedError"], "dataio.ReaderBuilder.new_reader": ["<builtin>.NotImplementedError"], "dataio.PipedReaderBuilder.__init__": [], "dataio.PipedReaderBuilder.schema": [], "dataio.PipedReaderBuilder.setup": [], "dataio.PipedReaderBuilder.new_reader": ["<builtin>.isinstance"], "dataio.Pipe.__init__": [], "dataio.Pipe.schema": [], "dataio.Pipe.setup": [], "dataio.Pipe.reader": ["<builtin>.NotImplementedError"], "dataio.Pipe.writer": ["<builtin>.NotImplementedError"], "dataio.Pipe.num_readers": [], "dataio.Pipe.num_writers": [], "dataio.Pipe._new_writer": [], "dataio.Pipe._new_reader": [], "dataio.CounterReader.__init__": ["caffe2.python.schema.Struct", "dataio.Reader.__init__"], "dataio.CounterReader.setup_ex": [], "dataio.ReaderWithLimitBase.__init__": ["caffe2.python.core.Net", "dataio.Reader.__init__"], "dataio.ReaderWithLimitBase.setup_ex": ["dataio.ReaderWithLimit.setup_limiter", "dataio.ReaderWithLimitBase.setup_limiter"], "dataio.ReaderWithLimit.setup_limiter": ["<builtin>.int"], "dataio.ReaderWithLimitBase.setup_limiter": ["<builtin>.NotImplementedError"], "dataio.ReaderWithLimitBase.read_ex": ["dataio.ReaderWithLimitBase.check_limiter_condition", "dataio.Reader._set_schema", "caffe2.python.core.Net", "dataio.ReaderWithLimit.check_limiter_condition"], "dataio.ReaderWithLimitBase.check_limiter_condition": ["<builtin>.NotImplementedError"], "dataio.ReaderWithLimit.check_limiter_condition": [], "dataio.ReaderWithLimitBase.data_finished": [], "dataio.ReaderWithLimit.__init__": ["<builtin>.super"], "dataio.CountUntil": ["dataio.CounterReader.__init__", "dataio.ReaderWithLimit.__init__"], "dataio.ReaderWithTimeLimit.__init__": ["<builtin>.super"], "dataio.ReaderWithTimeLimit.setup_limiter": ["<builtin>.int"], "dataio.ReaderWithTimeLimit.check_limiter_condition": ["<builtin>.str"], "dataio.ReaderWithDelay.__init__": ["dataio.Reader.__init__"], "dataio.ReaderWithDelay.setup_ex": [], "dataio.ReaderWithDelay.read_ex": ["caffe2.python.core.Net"], "dataio.ReaderWithDelay.read_ex.sleep_op": ["time.sleep"], "dataio.CompositeReader.__init__": ["caffe2.python.schema.Struct", "<builtin>.super", "<builtin>.len", "<builtin>.zip"], "dataio.CompositeReader.setup_ex": [], "dataio.CompositeReader.reset": [], "dataio.CompositeReaderBuilder.__init__": ["<builtin>.super", "caffe2.python.schema.Struct", "<builtin>.zip"], "dataio.CompositeReaderBuilder.schema": [], "dataio.CompositeReaderBuilder.setup": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.set"], "dataio.CompositeReaderBuilder.new_reader": ["dataio.CompositeReader.__init__", "dataio.Reader.schema", "<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.isinstance"], "dataio_test": [], "dataio_test.make_source_dataset": ["caffe2.python.schema.FeedRecord", "caffe2.python.schema.NewRecord", "caffe2.python.core.NameScope", "caffe2.python.core.Net", "caffe2.python.dataset.Dataset", "<builtin>.range", "caffe2.python.schema.Struct", "numpy.array"], "caffe2.python.schema.FeedRecord": [], "dataio_test.make_destination_dataset": ["caffe2.python.core.NameScope", "caffe2.python.core.Net", "caffe2.python.dataset.Dataset"], "dataio_test.TestReaderBuilder.__init__": [], "dataio_test.TestReaderBuilder.schema": [], "dataio_test.TestReaderBuilder.setup": ["dataio_test.make_source_dataset"], "dataio_test.TestReaderBuilder.new_reader": [], "dataio_test.TestCompositeReader": ["unittest.skipIf", "os.environ.get"], "dataio_test.TestCompositeReader.test_composite_reader": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.C.Workspace", "dataio_test.make_source_dataset", "<builtin>.str", "caffe2.python.pipeline.pipe", "caffe2.python.task.TaskGroup", "caffe2.python.session.LocalSession", "dataio_test.make_destination_dataset", "<builtin>.range", "caffe2.python.dataio.CompositeReader", "caffe2.python.schema.Struct", "<builtin>.sorted", "<builtin>.zip"], "caffe2.python.dataio.CompositeReader": [], "dataio_test.TestCompositeReader.test_composite_reader_builder": ["numpy.testing.assert_array_equal", "dataio_test.TestReaderBuilder.__init__", "caffe2.python.workspace.C.Workspace", "<builtin>.str", "caffe2.python.pipeline.pipe", "caffe2.python.task.TaskGroup", "caffe2.python.session.LocalSession", "dataio_test.make_destination_dataset", "<builtin>.range", "caffe2.python.dataio.CompositeReaderBuilder", "caffe2.python.schema.Struct", "<builtin>.sorted", "<builtin>.zip"], "caffe2.python.dataio.CompositeReaderBuilder": [], "dataio_test.TestReaderWithLimit.test_runtime_threads": ["caffe2.python.workspace.C.Workspace", "dataio_test.make_source_dataset", "caffe2.python.dataio.ReaderWithLimit", "caffe2.python.pipeline.pipe", "caffe2.python.task.TaskGroup", "caffe2.python.session.LocalSession", "caffe2.python.test_util.TestCase.assertEqual"], "dataio_test.TestReaderWithLimit.test_runtime_threads.proc": ["caffe2.python.net_builder.ops.task_instance_init", "caffe2.python.net_builder.ops.CountUp", "caffe2.python.net_builder.ops.loop", "caffe2.python.net_builder.ops.task_exit", "caffe2.python.net_builder.ops.task_init", "caffe2.python.net_builder.ops.task_instance_exit", "caffe2.python.task.final_output", "caffe2.python.net_builder.ops.RetrieveCount", "caffe2.python.net_builder.ops.CreateCounter"], "caffe2.python.net_builder.ops.CreateCounter": [], "caffe2.python.net_builder.ops.CountUp": [], "caffe2.python.net_builder.ops.RetrieveCount": [], "dataio_test.TestReaderWithLimit._test_limit_reader_init_shared": ["dataio_test.make_destination_dataset", "caffe2.python.session.LocalSession", "caffe2.python.workspace.C.Workspace", "dataio_test.make_source_dataset"], "dataio_test.TestReaderWithLimit._test_limit_reader_shared": ["caffe2.python.test_util.TestCase.assertLessEqual", "caffe2.python.dataio.ReaderWithLimit", "<builtin>.len", "<builtin>.list", "<builtin>.str", "caffe2.python.pipeline.pipe", "caffe2.python.task.TaskGroup", "caffe2.python.test_util.TestCase.assertGreaterEqual", "caffe2.python.test_util.TestCase.assertEqual", "dataio_test.TestReaderWithLimit._test_limit_reader_init_shared", "<builtin>.range", "caffe2.python.dataio.ReaderWithDelay", "<builtin>.sorted", "caffe2.python.dataio.ReaderWithTimeLimit"], "caffe2.python.dataio.ReaderWithDelay": [], "caffe2.python.dataio.ReaderWithTimeLimit": [], "caffe2.python.test_util.TestCase.assertGreaterEqual": [], "caffe2.python.test_util.TestCase.assertLessEqual": [], "dataio_test.TestReaderWithLimit.test_count_limit_reader_without_limit": ["dataio_test.TestReaderWithLimit._test_limit_reader_shared"], "dataio_test.TestReaderWithLimit.test_count_limit_reader_with_zero_limit": ["dataio_test.TestReaderWithLimit._test_limit_reader_shared"], "dataio_test.TestReaderWithLimit.test_count_limit_reader_with_low_limit": ["dataio_test.TestReaderWithLimit._test_limit_reader_shared"], "dataio_test.TestReaderWithLimit.test_count_limit_reader_with_high_limit": ["dataio_test.TestReaderWithLimit._test_limit_reader_shared"], "dataio_test.TestReaderWithLimit.test_time_limit_reader_without_limit": ["dataio_test.TestReaderWithLimit._test_limit_reader_shared"], "dataio_test.TestReaderWithLimit.test_time_limit_reader_with_short_limit": ["dataio_test.TestReaderWithLimit._test_limit_reader_shared", "<builtin>.round", "<builtin>.int"], "<builtin>.round": [], "dataio_test.TestReaderWithLimit.test_time_limit_reader_with_long_limit": ["dataio_test.TestReaderWithLimit._test_limit_reader_shared"], "dataio_test.TestDBFileReader.setUp": [], "dataio_test.TestDBFileReader.tearDown": ["dataio_test.TestDBFileReader._delete_path"], "dataio_test.TestDBFileReader._delete_path": ["os.path.isdir", "shutil.rmtree", "os.remove", "os.path.isfile"], "os.path.isfile": [], "dataio_test.TestDBFileReader._make_temp_path": ["tempfile.NamedTemporaryFile"], "dataio_test.TestDBFileReader._build_source_reader": ["dataio_test.make_source_dataset"], "dataio_test.TestDBFileReader._read_all_data": ["caffe2.python.pipeline.pipe", "caffe2.python.task.TaskGroup", "<builtin>.str", "dataio_test.make_destination_dataset"], "caffe2.python.core.C.registered_dbs": [], "dataio_test.TestDBFileReader": ["caffe2.python.core.C.registered_dbs", "unittest.skipIf"], "dataio_test.TestDBFileReader.test_cached_reader": ["caffe2.python.workspace.C.Workspace", "caffe2.python.cached_reader.CachedReader", "<builtin>.list", "caffe2.python.test_util.TestCase.assertEqual", "dataio_test.TestDBFileReader._make_temp_path", "caffe2.python.session.LocalSession", "<builtin>.range", "<builtin>.sorted", "dataio_test.TestDBFileReader._read_all_data", "dataio_test.TestDBFileReader._build_source_reader", "dataio_test.TestDBFileReader._delete_path"], "caffe2.python.cached_reader.CachedReader": [], "dataio_test.TestDBFileReader.test_db_file_reader": ["caffe2.python.workspace.C.Workspace", "caffe2.python.cached_reader.CachedReader", "<builtin>.list", "caffe2.python.db_file_reader.DBFileReader", "caffe2.python.test_util.TestCase.assertEqual", "dataio_test.TestDBFileReader._make_temp_path", "caffe2.python.session.LocalSession", "<builtin>.range", "<builtin>.sorted", "dataio_test.TestDBFileReader._read_all_data", "dataio_test.TestDBFileReader._build_source_reader", "dataio_test.TestDBFileReader._delete_path"], "caffe2.python.db_file_reader.DBFileReader": [], "dataset": ["typing.TypeVar"], "dataset._DatasetReader.__init__": ["dataset.Dataset.content", "caffe2.python.dataio.Reader.__init__"], "dataset.Dataset.content": ["caffe2.python.schema.from_blob_list"], "caffe2.python.dataio.Reader.__init__": [], "dataset._DatasetReader.setup_ex": [], "dataset._DatasetReader.read": ["dataset.Dataset.content", "caffe2.python.core.output_to_list", "caffe2.python.core.NameScope"], "caffe2.python.core.output_to_list": [], "dataset._DatasetReader.reset": [], "dataset._DatasetRandomReader.__init__": ["dataset.Dataset.content", "caffe2.python.dataio.Reader.__init__"], "dataset._DatasetRandomReader.setup_ex": [], "dataset._DatasetRandomReader.reset": [], "dataset._DatasetRandomReader.computeoffset": ["dataset.Dataset.content", "dataset._DatasetRandomReader.reset"], "dataset._DatasetRandomReader.sort_and_shuffle": ["dataset.Dataset.content", "dataset._DatasetRandomReader.reset"], "dataset._DatasetRandomReader.read": ["dataset.Dataset.content", "caffe2.python.core.output_to_list", "caffe2.python.core.NameScope"], "dataset._DatasetWriter.__init__": [], "dataset._DatasetWriter.setup_ex": [], "dataset._DatasetWriter.write": ["<builtin>.list", "<builtin>.len"], "dataset._DatasetWriter.commit": [], "dataset.Const": ["numpy.array", "<builtin>.str", "<builtin>.isinstance", "caffe2.python.workspace.FeedBlob"], "dataset.execution_step_with_progress": ["caffe2.python.core.Net", "caffe2.python.core.execution_step"], "dataset.Dataset.__init__": ["caffe2.python.schema.from_column_list", "<builtin>.isinstance"], "dataset.Dataset.trim": [], "dataset.Dataset.init_empty": ["caffe2.python.schema.InitEmptyRecord"], "caffe2.python.schema.InitEmptyRecord": [], "dataset.Dataset.init_from_dataframe": ["dataset.Const", "<builtin>.enumerate", "<builtin>.len"], "dataset.Dataset.get_blobs": [], "dataset.Dataset.field_names": [], "dataset.Dataset.field_types": [], "dataset.Dataset.reader": ["dataset._DatasetReader.__init__", "dataset._DatasetReader.setup_ex"], "dataset.Dataset.random_reader": ["dataset._DatasetRandomReader.setup_ex", "dataset._DatasetRandomReader.__init__"], "dataset.Dataset.writer": ["dataset.Dataset.content", "dataset._DatasetWriter.__init__", "dataset._DatasetWriter.setup_ex"], "data_parallel_model": ["caffe2.python.workspace.NumGpuDevices", "caffe2.python.dyndep.InitOpsLibrary", "logging.getLogger"], "caffe2.python.workspace.NumGpuDevices": [], "data_parallel_model.Parallelize_GPU": ["data_parallel_model.Parallelize"], "data_parallel_model.Parallelize": ["data_parallel_model._ValidateParams", "caffe2.python.scope.CurrentDeviceScope", "<builtin>.isinstance", "data_parallel_model._CPUInterDeviceBatchNormalization", "data_parallel_model._AllReduceBlobs", "caffe2.python.workspace.NumGpuDevices", "caffe2.python.core.DeviceScope", "data_parallel_model._GroupByDevice", "future.utils.viewkeys", "<builtin>.set", "data_parallel_model._GPUInterDeviceBatchNormalization", "data_parallel_model._AnalyzeOperators", "data_parallel_model._InferBlobDevice", "data_parallel_model._AddDynamicMemoryOptimization", "copy.copy", "caffe2.python.core.NameScope", "<builtin>.range", "multiprocessing.cpu_count", "data_parallel_model._InterleaveOps", "caffe2.python.core.DeviceOption", "<builtin>.min", "data_parallel_model._GetReverseOrderedGrads", "data_parallel_model._PruneParametersForSharing", "caffe2.python.workspace.NumCudaDevices", "data_parallel_model._OptimizeGradientMemorySimple", "data_parallel_model._AddGradientOperators", "data_parallel_model._RemapParameterBlobsForSharedModel", "data_parallel_model._ComputeBlobsToSync", "<builtin>.list", "data_parallel_model._BroadcastComputedParams", "data_parallel_model._AddBarrierToModelNets", "<builtin>.len", "data_parallel_model._SyncAllParams"], "data_parallel_model.Parallelize_CPU": ["data_parallel_model.Parallelize"], "data_parallel_model.Parallelize_iDeep": ["data_parallel_model.Parallelize"], "caffe2.python.workspace.NumCudaDevices": [], "copy.copy": [], "data_parallel_model._ValidateParams": ["<builtin>.set", "<builtin>.sorted", "<builtin>.len", "<builtin>.enumerate"], "data_parallel_model._GroupByDevice": ["<builtin>.int", "data_parallel_model.stripBlobName", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.str", "collections.OrderedDict", "<builtin>.len"], "data_parallel_model._AddGradientOperators": ["data_parallel_model._AddGradientOperators.create_grad", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "<builtin>.str"], "data_parallel_model._InferBlobDevice": ["data_parallel_model._InferBlobDevice.map_ops"], "data_parallel_model._InterleaveOps": ["<builtin>.list", "<builtin>.len", "<builtin>.range"], "data_parallel_model._CPUInterDeviceBatchNormalization": ["<builtin>.list", "data_parallel_model.stripBlobName", "data_parallel_model._CPUInterDeviceBatchNormalization._cpuReduce", "<builtin>.len", "caffe2.python.core.CreateOperator"], "data_parallel_model._GPUInterDeviceBatchNormalization": ["caffe2.python.core.DeviceOption", "<builtin>.list", "data_parallel_model.stripBlobName", "data_parallel_model._GPUInterDeviceBatchNormalization._gpuReduce", "<builtin>.len", "caffe2.python.core.CreateOperator"], "data_parallel_model._BroadcastComputedParams": ["data_parallel_model._BroadcastComputedParamsSingleHost", "data_parallel_model._BroadcastComputedParamsDistributed"], "data_parallel_model._GetReverseOrderedGrads": ["<builtin>.list", "<builtin>.reversed"], "data_parallel_model._AllReduceBlobs": ["data_parallel_model._AllReduceBlobsDistributed", "data_parallel_model._AllReduceBlobsSingleHost"], "data_parallel_model._PruneParametersForSharing": ["<builtin>.set"], "data_parallel_model._ComputeBlobsToSync": ["<builtin>.len", "caffe2.python.core.BlobReference", "<builtin>.list", "data_parallel_model.stripBlobName", "<builtin>.str", "<builtin>.set", "<builtin>.sorted"], "data_parallel_model._AnalyzeOperators": ["<builtin>.list", "<builtin>.str", "caffe2.python.core.IsGPUDeviceType", "<builtin>.Exception"], "data_parallel_model._SyncAllParams": ["data_parallel_model._SyncAllParamsDistributed", "data_parallel_model._SyncAllParamsSingleHost"], "data_parallel_model._OptimizeGradientMemorySimple": ["caffe2.python.memonger.share_grad_blobs", "<builtin>.set", "future.utils.viewvalues"], "data_parallel_model._AddDynamicMemoryOptimization": ["<builtin>.str", "<builtin>.set", "future.utils.viewvalues", "caffe2.python.memonger.release_blobs_when_used"], "data_parallel_model._AddBarrierToModelNets": ["data_parallel_model._CreateBarrierNet", "caffe2.python.core.Net"], "data_parallel_model._RemapParameterBlobsForSharedModel": ["data_parallel_model._RemapParameterBlobsForSharedModel.modify_ops", "<builtin>.set"], "data_parallel_model.Parallelize_GPU_BMUF": ["data_parallel_model.Parallelize_BMUF"], "data_parallel_model.Parallelize_BMUF": ["caffe2.python.core.Net", "data_parallel_model._ValidateParams", "caffe2.python.scope.CurrentDeviceScope", "<builtin>.isinstance", "data_parallel_model._AllReduceBlobs", "caffe2.python.workspace.NumGpuDevices", "caffe2.python.core.DeviceScope", "data_parallel_model._GroupByDevice", "future.utils.viewkeys", "data_parallel_model._InferBlobDevice", "copy.copy", "data_parallel_model.Parallelize_BMUF._g", "<builtin>.range", "data_parallel_model.Parallelize_BMUF._v_prev", "caffe2.python.core.DeviceOption", "<builtin>.min", "data_parallel_model._OptimizeGradientMemorySimple", "data_parallel_model._AddGradientOperators", "data_parallel_model.Parallelize_BMUF._v", "data_parallel_model.AddBlobSync", "<builtin>.list", "data_parallel_model._AddBarrierToModelNets", "data_parallel_model._ForEachDevice", "<builtin>.len", "data_parallel_model._SyncAllParams"], "data_parallel_model.Parallelize_CPU_BMUF": ["data_parallel_model.Parallelize_BMUF"], "data_parallel_model.Parallelize_BMUF._v": [], "data_parallel_model.Parallelize_BMUF._g": [], "data_parallel_model.Parallelize_BMUF._v_prev": [], "data_parallel_model.Parallelize_BMUF._InitializeModels": [], "data_parallel_model._ForEachDevice": ["data_parallel_model.Parallelize_BMUF._InitializeParamUpdate", "caffe2.python.core.DeviceOption", "caffe2.python.core.NameScope", "caffe2.python.core.DeviceScope", "data_parallel_model.Parallelize_BMUF._InitializeModels"], "data_parallel_model.Parallelize_BMUF._InitializeParamUpdate": [], "data_parallel_model.AddBlobSync": ["data_parallel_model._SyncAllParams", "<builtin>.len", "<builtin>.set", "caffe2.python.core.BlobReference"], "data_parallel_model.CreateNet": ["<builtin>.isinstance", "caffe2.python.workspace.CreateNet"], "data_parallel_model.RunInitNet": ["caffe2.python.workspace.RunNetOnce", "data_parallel_model.CreateNet"], "data_parallel_model.RunWarmup": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet"], "data_parallel_model.RunNet": ["<builtin>.isinstance", "caffe2.python.workspace.RunNet"], "data_parallel_model._CreateBarrierNet": ["caffe2.python.core.Net", "data_parallel_model._CreateOrCloneCommonWorld"], "data_parallel_model._CreateOrCloneCommonWorld": ["<builtin>.dict"], "data_parallel_model.Synchronize": ["data_parallel_model._CreateBarrierNet", "caffe2.python.core.Net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "warnings.warn", "caffe2.python.workspace.RunNetOnce"], "data_parallel_model.ConvertNetForDevice": ["copy.deepcopy", "caffe2.python.scope.CurrentDeviceScope", "<builtin>.enumerate", "<builtin>.NotImplementedError", "caffe2.python.core.IsGPUDeviceType"], "caffe2.python.core.IsGPUDeviceType": [], "data_parallel_model._AddGradientOperators.create_grad": ["<builtin>.str"], "data_parallel_model.ExtractPredictorNet": ["<builtin>.str", "caffe2.python.model_helper.ExtractPredictorNet", "<builtin>.zip"], "data_parallel_model.GetCheckpointParams": ["<builtin>.str", "<builtin>.set", "data_parallel_model._ComputeBlobsToSync"], "data_parallel_model.FinalizeAfterCheckpoint": ["data_parallel_model._SyncAllParams", "<builtin>.hasattr", "caffe2.python.core.Net", "caffe2.python.core.BlobReference", "caffe2.python.workspace.CreateNet", "data_parallel_model.stripBlobName", "caffe2.python.workspace.RunNet", "data_parallel_model._ComputeBlobsToSync", "caffe2.python.workspace.RunNetOnce"], "data_parallel_model.stripBlobName": ["data_parallel_model.stripBlobName", "<builtin>.str", "<builtin>.isinstance"], "data_parallel_model.GetLearningRateBlobNames": ["caffe2.python.core.IsGPUDeviceType", "<builtin>.Exception"], "data_parallel_model._Broadcast": ["caffe2.python.core.DeviceOption", "data_parallel_model._IsIDEEPBlob", "<builtin>.list", "data_parallel_model._IsGPUBlob", "caffe2.python.core.DeviceScope", "future.utils.viewvalues"], "data_parallel_model._IsGPUBlob": ["caffe2.python.core.IsGPUDeviceType"], "data_parallel_model._IsIDEEPBlob": [], "data_parallel_model._AllReduce": ["<builtin>.range", "data_parallel_model._AllReduce.sumN", "<builtin>.list", "data_parallel_model._Broadcast", "caffe2.python.workspace.GetGpuPeerAccessPattern", "<builtin>.len", "future.utils.viewvalues"], "caffe2.python.workspace.GetGpuPeerAccessPattern": [], "data_parallel_model._AllReduce.sumN": ["caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "<builtin>.enumerate"], "data_parallel_model._SyncAllParamsSingleHost": ["data_parallel_model._Broadcast"], "data_parallel_model._SyncAllParamsDistributed": ["data_parallel_model._SyncAllParamsDistributed.broadcast", "caffe2.python.core.DeviceOption", "data_parallel_model._IsIDEEPBlob", "<builtin>.list", "data_parallel_model._Broadcast", "data_parallel_model._IsGPUBlob", "data_parallel_model.CollectivesConcurrencyControl.__init__", "<builtin>.str", "caffe2.python.core.DeviceScope", "<builtin>.sorted", "future.utils.viewvalues"], "data_parallel_model.AddDistributedBlobSync": ["<builtin>.str", "data_parallel_model._CreateOrCloneCommonWorld"], "data_parallel_model.CollectivesConcurrencyControl.__init__": [], "data_parallel_model._SyncAllParamsDistributed.broadcast": [], "data_parallel_model._AllReduceBlobsSingleHost": ["caffe2.python.core.DeviceOption", "data_parallel_model._IsIDEEPBlob", "<builtin>.list", "future.utils.viewitems", "data_parallel_model._IsGPUBlob", "<builtin>.set", "<builtin>.isinstance", "data_parallel_model._AllReduce", "data_parallel_model._Broadcast", "caffe2.python.core.DeviceScope", "<builtin>.len", "future.utils.viewvalues"], "data_parallel_model._AllReduceBlobsDistributed": ["caffe2.python.core.DeviceOption", "<builtin>.list", "data_parallel_model._Broadcast", "data_parallel_model.CollectivesConcurrencyControl.__init__", "<builtin>.str", "caffe2.python.core.DeviceScope", "data_parallel_model._AllReduceBlobsDistributed.allreduce", "future.utils.viewvalues"], "data_parallel_model._RemapParameterBlobsForSharedModel.modify_ops": ["<builtin>.str", "data_parallel_model.stripBlobName", "<builtin>.enumerate"], "data_parallel_model.CollectivesConcurrencyControl.get_control_and_context": ["<builtin>.len", "data_parallel_model._CreateOrCloneCommonWorld"], "data_parallel_model._AllReduceBlobsDistributed.allreduce": ["caffe2.python.core.DeviceScope", "data_parallel_model.CollectivesConcurrencyControl.get_control_and_context"], "data_parallel_model._BroadcastComputedParamsSingleHost": ["data_parallel_model._Broadcast", "<builtin>.len"], "data_parallel_model._BroadcastComputedParamsDistributed": ["data_parallel_model._BroadcastComputedParamsSingleHost"], "data_parallel_model._InferBlobDevice.map_ops": ["caffe2.proto.caffe2_pb2.DeviceOption", "<builtin>.list", "data_parallel_model._InferBlobDevice.map_ops"], "data_parallel_model._ComputeBlobsToSync.extract_sort_key": ["<builtin>.int"], "caffe2.python.memonger.share_grad_blobs": [], "caffe2.python.memonger.release_blobs_when_used": [], "data_parallel_model.OptimizeGradientMemory": ["caffe2.python.workspace.InferShapesAndTypes", "future.utils.viewitems", "caffe2.python.memonger.share_grad_blobs", "<builtin>.set", "future.utils.viewvalues"], "caffe2.python.workspace.InferShapesAndTypes": [], "data_parallel_model._RunComparison": ["caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "<builtin>.range", "<builtin>.dict", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "numpy.zeros"], "data_parallel_model._CPUInterDeviceBatchNormalization._cpuReduce": ["caffe2.python.core.CreateOperator"], "data_parallel_model._GPUInterDeviceBatchNormalization._gpuReduce": ["caffe2.python.core.DeviceOption", "caffe2.python.core.CreateOperator", "<builtin>.range"], "data_parallel_model_test": ["caffe2.python.dyndep.InitOpsLibrary", "unittest.main"], "data_parallel_model_test.TemporaryDirectory.__enter__": ["tempfile.mkdtemp"], "data_parallel_model_test.TemporaryDirectory.__exit__": ["shutil.rmtree"], "data_parallel_model_test.DataParallelModelTest.run_model": ["caffe2.python.data_parallel_model.GetLearningRateBlobNames", "caffe2.python.workspace.FetchBlob", "<builtin>.len", "<builtin>.range", "caffe2.python.data_parallel_model.Parallelize", "caffe2.python.test_util.TestCase.assertGreater", "numpy.random.seed", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "numpy.array", "numpy.round", "<builtin>.abs", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.data_parallel_model.AddBlobSync", "caffe2.python.core.DeviceScope", "<builtin>.enumerate", "caffe2.python.workspace.CreateNet"], "data_parallel_model_test.DataParallelModelTest.run_model.input_builder_fun": [], "data_parallel_model_test.DataParallelModelTest.run_model.model_build_fun": [], "data_parallel_model_test.DataParallelModelTest.run_model.add_optimizer": ["caffe2.python.optimizer.build_sgd"], "caffe2.python.optimizer.build_sgd": [], "caffe2.python.data_parallel_model.Parallelize": [], "caffe2.python.data_parallel_model.AddBlobSync": [], "caffe2.python.data_parallel_model.GetLearningRateBlobNames": [], "caffe2.python.test_util.TestCase.assertGreater": [], "numpy.round": [], "data_parallel_model_test.DataParallelModelTest.run_test_locally": ["<builtin>.range", "<builtin>.len", "multiprocessing.Process", "multiprocessing.Queue"], "data_parallel_model_test.DataParallelModelTest.run_test_locally.run_fn": ["data_parallel_model_test.DataParallelModelTest.test_pre_train_synchronization_barrier.run", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.DeviceScope", "data_parallel_model_test.DataParallelModelTest.test_synchronization_barrier.run"], "data_parallel_model_test.DataParallelModelTest.test_pre_train_synchronization_barrier.run": ["caffe2.python.data_parallel_model.RunInitNet", "time.sleep", "caffe2.python.core.CreateOperator", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.data_parallel_model.Parallelize_CPU", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.dict", "caffe2.python.data_parallel_model.RunNet"], "data_parallel_model_test.DataParallelModelTest.test_synchronization_barrier.run": ["caffe2.python.data_parallel_model.Synchronize", "caffe2.python.data_parallel_model.RunInitNet", "caffe2.python.core.CreateOperator", "caffe2.python.cnn.CNNModelHelper", "<builtin>.range", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.dict", "caffe2.python.data_parallel_model.Parallelize_CPU"], "data_parallel_model_test.DataParallelModelTest.test_equiv": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.NumCudaDevices", "numpy.allclose", "data_parallel_model_test.DataParallelModelTest.run_model", "<builtin>.range", "<builtin>.list"], "data_parallel_model_test.DataParallelModelTest.test_checkpoint_params": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.BlobReference", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.data_parallel_model.Parallelize_CPU", "caffe2.python.data_parallel_model.GetCheckpointParams"], "data_parallel_model_test.DataParallelModelTest.test_checkpoint_params.add_input_ops": [], "data_parallel_model_test.DataParallelModelTest.test_checkpoint_params.add_model_ops": [], "data_parallel_model_test.DataParallelModelTest.test_checkpoint_params.add_optimizer": ["caffe2.python.optimizer.build_sgd"], "caffe2.python.data_parallel_model.Parallelize_CPU": [], "caffe2.python.data_parallel_model.GetCheckpointParams": [], "data_parallel_model_test.DataParallelModelTest.test_net_conversion_and_append_net": ["caffe2.python.workspace.CreateNet", "caffe2.python.cnn.CNNModelHelper", "<builtin>.range", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.brew.fc", "caffe2.python.data_parallel_model.Parallelize_CPU", "caffe2.python.model_helper.ModelHelper"], "data_parallel_model_test.DataParallelModelTest.test_net_conversion_and_append_net.add_input_ops": [], "data_parallel_model_test.DataParallelModelTest.test_net_conversion_and_append_net.add_model_ops": ["caffe2.python.data_parallel_model.ConvertNetForDevice"], "caffe2.python.data_parallel_model.ConvertNetForDevice": [], "data_parallel_model_test.DataParallelModelTest.test_net_conversion_and_append_net.add_optimizer": ["caffe2.python.optimizer.build_sgd"], "unittest.skip": [], "data_parallel_model_test.DataParallelModelTest": ["hypothesis.strategies.integers", "caffe2.python.workspace.NumCudaDevices", "unittest.skip", "hypothesis.settings", "hypothesis.given", "unittest.skipIf"], "data_parallel_model_test.DataParallelModelTest.test_synchronization_barrier": ["data_parallel_model_test.DataParallelModelTest.run_test_locally"], "data_parallel_model_test.DataParallelModelTest.test_synchronization_barrier.run.add_input_ops": [], "data_parallel_model_test.DataParallelModelTest.test_synchronization_barrier.run.add_model_ops": [], "data_parallel_model_test.DataParallelModelTest.test_synchronization_barrier.run.add_optimizer": [], "caffe2.python.data_parallel_model.RunInitNet": [], "caffe2.python.data_parallel_model.Synchronize": [], "data_parallel_model_test.DataParallelModelTest.test_pre_train_synchronization_barrier": ["data_parallel_model_test.DataParallelModelTest.run_test_locally"], "data_parallel_model_test.DataParallelModelTest.test_pre_train_synchronization_barrier.run.add_input_ops": [], "data_parallel_model_test.DataParallelModelTest.test_pre_train_synchronization_barrier.run.add_model_ops": [], "data_parallel_model_test.DataParallelModelTest.test_pre_train_synchronization_barrier.run.add_optimizer": [], "caffe2.python.data_parallel_model.RunNet": [], "data_parallel_model_test.DataParallelModelTest.test_device_scope_check": ["caffe2.python.data_parallel_model.Parallelize_GPU", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope"], "caffe2.python.data_parallel_model.Parallelize_GPU": [], "data_parallel_model_test.DataParallelModelTest.test_net_transformer_function": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.test_util.TestCase.assertEqual", "mock.Mock", "caffe2.python.data_parallel_model.Parallelize_CPU", "caffe2.python.model_helper.ModelHelper"], "data_parallel_model_test.DataParallelModelTest.test_net_transformer_function.add_input_ops": [], "data_parallel_model_test.DataParallelModelTest.test_net_transformer_function.add_optimizer": ["caffe2.python.optimizer.build_sgd"], "data_parallel_model_test.DataParallelModelTest.test_net_transformer_function.add_model_ops": ["caffe2.python.brew.fc"], "mock.Mock": [], "data_parallel_model_test.DataParallelModelTest.test_multi_device_bn_op_level_cpu": ["data_parallel_model_test.DataParallelModelTest._bn_check_op_level"], "data_parallel_model_test.DataParallelModelTest._bn_check_op_level": ["numpy.random.seed", "caffe2.python.workspace.FetchBlob", "data_parallel_model_test.DataParallelModelTest._bn_check_op_level._test_forward_pass", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.data_parallel_model.Parallelize", "numpy.array", "data_parallel_model_test.DataParallelModelTest._bn_check_op_level._test_backward_pass"], "data_parallel_model_test.DataParallelModelTest.test_multi_device_bn_op_level_gpu": ["data_parallel_model_test.DataParallelModelTest._bn_check_op_level"], "data_parallel_model_test.DataParallelModelTest._bn_check_op_level._test_forward_pass": ["numpy.mean", "caffe2.python.test_util.TestCase.assertTrue", "numpy.var", "caffe2.python.workspace.FetchBlob", "numpy.linalg.norm", "numpy.concatenate", "numpy.sqrt"], "numpy.mean": [], "numpy.var": [], "numpy.sqrt": [], "numpy.linalg.norm": [], "data_parallel_model_test.DataParallelModelTest._bn_check_op_level._test_backward_pass": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.FetchBlob", "<builtin>.len", "numpy.sum", "numpy.array", "numpy.isclose"], "numpy.sum": [], "numpy.isclose": [], "data_parallel_model_test.DataParallelModelTest._bn_check_op_level.add_input_ops": ["caffe2.python.workspace.FeedBlob", "numpy.random.rand"], "data_parallel_model_test.DataParallelModelTest._bn_check_op_level.add_model_ops": [], "data_parallel_model_test.DataParallelModelTest._bn_check_op_level.add_optimizer": ["caffe2.python.optimizer.build_sgd"], "data_parallel_model_test.DataParallelModelTest.test_multi_device_bn_net_lvl_cpu": ["data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl"], "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl": ["numpy.random.seed", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl._verify_bn_outputs", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.ResetWorkspace", "numpy.reshape", "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl._create_model"], "data_parallel_model_test.DataParallelModelTest.test_multi_device_bn_net_lvl_gpu": ["data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl"], "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl._verify_bn_outputs": ["caffe2.python.test_util.TestCase.assertTrue", "numpy.concatenate", "numpy.linalg.norm", "numpy.isclose"], "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl._create_model": ["caffe2.python.data_parallel_model.Parallelize", "caffe2.python.cnn.CNNModelHelper"], "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl._create_model.add_input_ops_no_combine": ["caffe2.python.workspace.FeedBlob"], "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl._create_model.add_input_ops_combine": ["caffe2.python.workspace.FeedBlob", "<builtin>.int"], "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl._create_model.add_model_ops": [], "data_parallel_model_test.DataParallelModelTest._test_multi_device_bn_net_lvl._create_model.add_optimizer": ["caffe2.python.optimizer.build_sgd"], "numpy.reshape": [], "data_parallel_model_test.RecurrentNetworkParallelTest.run_model": ["numpy.random.seed", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "<builtin>.len", "numpy.random.rand", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.ResetWorkspace", "<builtin>.range", "<builtin>.enumerate", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.data_parallel_model.Parallelize", "caffe2.python.workspace.CreateNet"], "data_parallel_model_test.RecurrentNetworkParallelTest.run_model.input_builder_fun": [], "data_parallel_model_test.RecurrentNetworkParallelTest.run_model.model_build_fun": ["caffe2.python.core.ScopedBlobReference", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.rnn_cell.LSTM"], "caffe2.python.rnn_cell.LSTM": [], "data_parallel_model_test.RecurrentNetworkParallelTest.run_model.param_update_fun": ["<builtin>.len"], "data_parallel_model_test.RecurrentNetworkParallelTest": ["unittest.skip"], "data_parallel_model_test.RecurrentNetworkParallelTest.test_equiv_recurrent": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.NumCudaDevices", "numpy.allclose", "<builtin>.list", "<builtin>.range", "data_parallel_model_test.RecurrentNetworkParallelTest.run_model"], "data_parallel_model_test.SparseDataParallelModelTest.run_model": ["numpy.allclose", "caffe2.python.core.NameScope", "caffe2.python.workspace.FetchBlob", "<builtin>.len", "<builtin>.range", "<builtin>.list", "<builtin>.set", "numpy.random.seed", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.ResetWorkspace", "numpy.random.permutation", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.core.DeviceOption", "caffe2.python.data_parallel_model.Parallelize_GPU", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.core.DeviceScope", "<builtin>.enumerate", "caffe2.python.workspace.CreateNet"], "data_parallel_model_test.SparseDataParallelModelTest.run_model.input_builder_fun": [], "data_parallel_model_test.SparseDataParallelModelTest.run_model.model_build_fun": ["caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope"], "data_parallel_model_test.SparseDataParallelModelTest.run_model.param_update_fun": ["<builtin>.isinstance"], "numpy.random.permutation": [], "data_parallel_model_test.SparseDataParallelModelTest._test_equiv_sparse": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.NumCudaDevices", "numpy.allclose", "data_parallel_model_test.SparseDataParallelModelTest.run_model", "<builtin>.range", "<builtin>.list"], "data_parallel_model_test.SparseDataParallelModelTest.test_equiv_sparse": ["data_parallel_model_test.SparseDataParallelModelTest._test_equiv_sparse"], "data_parallel_model_test.ParallelizeBMUFTest._run_model": [], "data_parallel_model_test.ParallelizeBMUFTest._run_model.input_builder_fun": [], "data_parallel_model_test.ParallelizeBMUFTest._model_build_fun": [], "data_parallel_model_test.ParallelizeBMUFTest._param_update_fun": [], "data_parallel_model_test.ParallelizeBMUFTest._generate_data": ["numpy.round", "numpy.random.seed", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FeedBlob", "<builtin>.len", "numpy.random.rand", "<builtin>.enumerate", "<builtin>.range"], "hypothesis.strategies.booleans": [], "data_parallel_model_test.ParallelizeBMUFTest": ["hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.given"], "data_parallel_model_test.ParallelizeBMUFTest.test_parallelize_bmuf": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.data_parallel_model.RunInitNet", "caffe2.python.workspace.FetchBlob", "caffe2.python.data_parallel_model.Parallelize_BMUF", "numpy.zeros", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.ResetWorkspace", "future.utils.viewkeys", "caffe2.python.workspace.RunNetOnce", "data_parallel_model_test.ParallelizeBMUFTest._generate_data", "<builtin>.list", "hypothesis.assume", "numpy.testing.assert_equal", "caffe2.python.data_parallel_model.RunNet"], "hypothesis.assume": [], "data_parallel_model_test.ParallelizeBMUFTest.test_parallelize_bmuf.input_builder_fun": [], "caffe2.python.data_parallel_model.Parallelize_BMUF": [], "numpy.testing.assert_equal": [], "data_parallel_model_test.SparseDataParallelModelTestWithSharedIndices.run_model": ["<builtin>.zip", "numpy.random.seed", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.core.NameScope", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "<builtin>.len", "caffe2.python.data_parallel_model.Parallelize_GPU", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.ResetWorkspace", "<builtin>.range", "<builtin>.enumerate", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "numpy.random.permutation", "caffe2.python.workspace.CreateNet"], "data_parallel_model_test.SparseDataParallelModelTestWithSharedIndices.run_model.input_builder_fun": [], "data_parallel_model_test.SparseDataParallelModelTestWithSharedIndices.run_model.model_build_fun": ["<builtin>.len", "<builtin>.enumerate"], "data_parallel_model_test.SparseDataParallelModelTestWithSharedIndices.run_model.param_update_fun": ["<builtin>.isinstance"], "data_parallel_model_test.SparseDataParallelModelTestWithSharedIndices.test_sparse_shared_indices_gpu": ["data_parallel_model_test.SparseDataParallelModelTestWithSharedIndices.run_model", "<builtin>.list", "<builtin>.range", "caffe2.python.workspace.NumGpuDevices"], "data_workers": ["logging.getLogger", "data_workers.GlobalCoordinator.__init__"], "data_workers.get_worker_ids": ["<builtin>.range", "<builtin>.list"], "data_workers.init_data_input_workers": ["data_workers.DataWorker.__init__", "caffe2.python.scope.CurrentNameScope", "caffe2.proto.caffe2_pb2.DeviceOption", "data_workers.BatchFeeder.__init__", "caffe2.python.parallel_workers.GlobalWorkerCoordinator.add", "data_workers.GlobalCoordinator.get_queue", "caffe2.python.parallel_workers.WorkerCoordinator", "caffe2.python.parallel_workers.Metrics", "caffe2.python.scope.CurrentDeviceScope", "threading.Thread", "<builtin>.range", "caffe2.python.parallel_workers.GlobalWorkerCoordinator.get_new_worker_id"], "caffe2.python.parallel_workers.Metrics": [], "data_workers.GlobalCoordinator.get_queue": ["queue.Queue", "<builtin>.isinstance"], "data_workers.BatchFeeder.__init__": ["data_workers.BatchFeeder._create_caffe2_queues", "data_workers.BatchFeeder._create_caffe2_ops", "time.time", "data_workers.BatchFeeder._init_scratch"], "caffe2.python.parallel_workers.GlobalWorkerCoordinator.get_new_worker_id": [], "caffe2.python.parallel_workers.WorkerCoordinator": [], "data_workers.DataWorker.__init__": ["caffe2.python.parallel_workers.Worker.__init__"], "caffe2.python.parallel_workers.GlobalWorkerCoordinator.add": [], "data_workers.BatchFeeder._create_caffe2_queues": ["data_workers.BatchFeeder._create_caffe2_queues.create_queue"], "data_workers.BatchFeeder._create_caffe2_ops": ["<builtin>.float", "<builtin>.zip"], "data_workers.BatchFeeder._init_scratch": ["caffe2.python.core.BlobReference", "caffe2.python.workspace.FeedBlob", "itertools.chain", "numpy.array"], "data_workers.BatchFeeder.start": ["time.time"], "data_workers.BatchFeeder.stop": ["caffe2.python.core.CreateOperator", "data_workers.BatchFeeder._log_inputs_per_interval", "caffe2.python.workspace.RunOperatorOnce"], "data_workers.BatchFeeder._log_inputs_per_interval": ["<builtin>.int", "time.time"], "data_workers.BatchFeeder.cleanup": ["caffe2.python.utils.ResetBlobs"], "caffe2.python.utils.ResetBlobs": [], "data_workers.BatchFeeder._get": ["time.time"], "data_workers.BatchFeeder._validate_chunk": ["<builtin>.len", "<builtin>.isinstance"], "data_workers.BatchFeeder.put": ["caffe2.python.parallel_workers.Worker._coordinator.is_active", "time.time", "data_workers.BatchFeeder._validate_chunk", "data_workers.BatchFeeder._log_inputs_per_interval"], "caffe2.python.parallel_workers.Worker._coordinator.is_active": [], "data_workers.BatchFeeder._enqueue_batch_direct": ["data_workers.BatchFeeder._enqueue", "data_workers.BatchFeeder._get", "<builtin>.zip"], "data_workers.BatchFeeder._enqueue": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce"], "data_workers.BatchFeeder._enqueue_batch": ["numpy.split", "numpy.append", "data_workers.BatchFeeder._get", "data_workers.BatchFeeder._enqueue_batch_direct", "time.time", "numpy.array", "data_workers.BatchFeeder._enqueue", "<builtin>.enumerate", "<builtin>.zip"], "numpy.append": [], "numpy.split": [], "data_workers.BatchFeeder._create_caffe2_queues.create_queue": ["caffe2.python.core.CreateOperator", "caffe2.python.core.ScopedBlobReference", "caffe2.python.workspace.RunOperatorOnce"], "data_workers.GlobalCoordinator.__init__": ["caffe2.python.parallel_workers.GlobalWorkerCoordinator.__init__"], "caffe2.python.parallel_workers.GlobalWorkerCoordinator.__init__": [], "data_workers.GlobalCoordinator.reset_data_input": ["caffe2.python.parallel_workers.GlobalWorkerCoordinator._coordinators._state._create_caffe2_ops"], "caffe2.python.parallel_workers.GlobalWorkerCoordinator._coordinators._state._create_caffe2_ops": [], "caffe2.python.parallel_workers.Worker.__init__": [], "data_workers.DataWorker.run": ["data_workers.BatchFeeder.put", "caffe2.python.parallel_workers.Worker._worker_fun"], "caffe2.python.parallel_workers.Worker._worker_fun": [], "data_workers.DataWorker.finish": ["caffe2.python.parallel_workers.Worker._metrics.put_metric", "time.time"], "caffe2.python.parallel_workers.Worker._metrics.put_metric": [], "data_workers.enqueuer": [], "data_workers_test": [], "data_workers_test.dummy_fetcher": ["numpy.zeros", "numpy.random.randint", "<builtin>.range", "numpy.array"], "data_workers_test.dummy_fetcher_rnn": ["numpy.random.rand", "numpy.random.randint"], "data_workers_test.DataWorkersTest.testNonParallelModel": ["<builtin>.range", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.model_helper.ModelHelper", "caffe2.python.data_workers.init_data_input_workers", "caffe2.python.timeout_guard.CompleteInTimeOrDie", "unittest.TestCase.assertEqual", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.data_workers.init_data_input_workers": [], "caffe2.python.timeout_guard.CompleteInTimeOrDie": [], "data_workers_test.DataWorkersTest.testRNNInput": ["unittest.TestCase.assertTrue", "time.sleep", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.model_helper.ModelHelper", "caffe2.python.data_workers.init_data_input_workers", "unittest.TestCase.assertEqual", "caffe2.python.workspace.RunNetOnce"], "data_workers_test.DataWorkersTest": ["unittest.skip"], "data_workers_test.DataWorkersTest.testInputOrder": ["<builtin>.print", "time.sleep", "caffe2.python.workspace.FetchBlob", "<builtin>.range", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet", "unittest.TestCase.assertTrue", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.model_helper.ModelHelper", "caffe2.python.data_workers.init_data_input_workers", "caffe2.python.timeout_guard.CompleteInTimeOrDie", "unittest.TestCase.assertEqual", "caffe2.python.workspace.RunNetOnce"], "data_workers_test.DataWorkersTest.testInputOrder.dummy_fetcher_rnn_ordered1": ["numpy.zeros", "numpy.random.randint"], "db_file_reader": [], "db_file_reader.DBFileReader.__init__": ["db_file_reader.DBFileReader._extract_db_name_from_db_path", "os.path.expanduser", "db_file_reader.DBFileReader._init_reader_schema", "<builtin>.super", "caffe2.python._import_c_extension.registered_dbs", "caffe2.python.dataset.Dataset"], "os.path.expanduser": [], "db_file_reader.DBFileReader._extract_db_name_from_db_path": ["os.path.basename"], "db_file_reader.DBFileReader._init_reader_schema": ["caffe2.python.scope.CurrentNameScope", "caffe2.python.core.NameScope", "<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.schema.from_column_list", "caffe2.python.workspace.RunOperatorOnce", "os.path.exists", "<builtin>.sorted", "caffe2.python.workspace.Blobs"], "db_file_reader.DBFileReader._init_name": ["db_file_reader.DBFileReader._extract_db_name_from_db_path"], "caffe2.python.workspace.Blobs": [], "db_file_reader.DBFileReader.setup_ex": ["db_file_reader.DBFileReader._init_field_blobs_as_empty", "db_file_reader.DBFileReader._feed_field_blobs_from_db_file"], "db_file_reader.DBFileReader._init_field_blobs_as_empty": ["caffe2.python.core.NameScope"], "db_file_reader.DBFileReader._feed_field_blobs_from_db_file": ["os.path.exists"], "db_file_reader.DBFileReader.read": [], "db_test": [], "db_test.TestDB.setUp": ["tempfile.mkstemp", "os.close", "<builtin>.range"], "os.close": [], "db_test.TestDB.testSimple": ["unittest.TestCase.assertEqual", "caffe2.python.workspace.C.create_db"], "caffe2.python.workspace.C.create_db": [], "device_checker": [], "device_checker.DeviceChecker.__init__": [], "device_checker.DeviceChecker.CheckSimple": ["<builtin>.print", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.ResetWorkspace", "<builtin>.len", "<builtin>.range", "numpy.max", "numpy.array", "caffe2.python.core.InferOpBlobDevicesAsDict", "caffe2.python.workspace.CurrentWorkspace", "copy.deepcopy", "caffe2.python.workspace.FetchBlob", "numpy.abs", "numpy.allclose", "caffe2.python.workspace.FeedBlob", "<builtin>.enumerate", "caffe2.python.workspace.SwitchWorkspace"], "caffe2.python.workspace.CurrentWorkspace": [], "caffe2.python.workspace.SwitchWorkspace": [], "caffe2.python.core.InferOpBlobDevicesAsDict": [], "numpy.abs": [], "device_checker.DeviceChecker.CheckNet": ["<builtin>.set", "<builtin>.sum", "<builtin>.len", "<builtin>.range", "<builtin>.print", "numpy.max", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CurrentWorkspace", "caffe2.python.workspace.FetchBlob", "numpy.abs", "<builtin>.list", "numpy.allclose", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.SwitchWorkspace", "future.utils.viewitems"], "dyndep": ["<builtin>.set", "threading.Lock"], "dyndep.InitOpsLibrary": ["dyndep._init_impl", "os.path.exists", "<builtin>.print"], "dyndep._init_impl": ["caffe2.python.core.RefreshRegisteredOperators", "caffe2.python.extension_loader.DlopenGuard", "ctypes.CDLL"], "dyndep.GetImportedOpsLibraries": [], "caffe2.python.extension_loader.DlopenGuard": [], "ctypes.CDLL": [], "caffe2.python.core.RefreshRegisteredOperators": [], "embedding_generation_benchmark": ["caffe2.python.utils.debug", "logging.getLogger", "embedding_generation_benchmark.GetArgumentParser", "logging.basicConfig", "caffe2.python.core.DeviceScope", "embedding_generation_benchmark.Benchmark", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.GlobalInit"], "embedding_generation_benchmark.generate_data": ["caffe2.python.workspace.RunNetOnce", "numpy.arange", "numpy.random.seed", "caffe2.python.workspace.FeedBlob", "numpy.tile", "<builtin>.range", "caffe2.python.core.Net", "<builtin>.max"], "embedding_generation_benchmark.generate_embedding_table": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net"], "embedding_generation_benchmark.create_model": ["caffe2.python.model_helper.ModelHelper"], "embedding_generation_benchmark.Caffe2EmbeddingGeneration": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CreateNet", "embedding_generation_benchmark.create_model", "time.time", "<builtin>.range", "embedding_generation_benchmark.generate_embedding_table", "embedding_generation_benchmark.generate_data", "<builtin>.min", "caffe2.python.workspace.RunNet"], "caffe2.python.utils.debug": [], "embedding_generation_benchmark.Benchmark": ["embedding_generation_benchmark.Caffe2EmbeddingGeneration"], "embedding_generation_benchmark.GetArgumentParser": ["argparse.ArgumentParser"], "experiment_util": [], "experiment_util.ExternalLogger": ["abc.abstractmethod"], "experiment_util.ExternalLogger.set_runtime_args": ["<builtin>.NotImplementedError"], "experiment_util.ExternalLogger.log": ["<builtin>.NotImplementedError"], "experiment_util.ModelTrainerLog.__init__": ["datetime.datetime.fromtimestamp", "<builtin>.dict", "<builtin>.isinstance", "socket.gethostname", "experiment_util.ModelTrainerLog.logstr", "time.time", "<builtin>.str", "<builtin>.vars"], "datetime.datetime.fromtimestamp": [], "experiment_util.ModelTrainerLog.logstr": ["logging.getLogger", "<builtin>.open"], "experiment_util.ModelTrainerLog.log": ["collections.OrderedDict", "<builtin>.list", "experiment_util.ModelTrainerLog.logstr", "<builtin>.sorted", "logging.warning", "time.time", "future.utils.viewkeys", "future.utils.viewvalues", "<builtin>.str"], "extension_loader": ["contextlib.contextmanager", "<builtin>.hasattr"], "extension_loader.DlopenGuard": ["sys.setdlopenflags", "sys.getdlopenflags"], "sys.getdlopenflags": [], "sys.setdlopenflags": [], "fakefp16_transform_lib": [], "fakefp16_transform_lib.fakeFp16FuseOps": ["caffe2.proto.caffe2_pb2.NetDef", "caffe2.python._import_c_extension.fakeFp16FuseOps"], "caffe2.python._import_c_extension.fakeFp16FuseOps": [], "filler_test": [], "filler_test.TestFiller.test_filler": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.HasBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.workspace.FillRandomNetworkInputs"], "caffe2.python.workspace.HasBlob": [], "caffe2.python.workspace.FillRandomNetworkInputs": [], "functional": ["logging.getLogger", "_jit_internal._overload", "_jit_internal.boolean_dispatch", "torch._C._add_docstr"], "functional.namedtupledict": ["collections.namedtuple", "<builtin>.enumerate"], "functional.namedtupledict.getitem": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.super"], "functional._Functional.__getattribute__": [], "functional._Functional.__getattribute__.op_func": ["caffe2.python.core.DeviceOption", "<builtin>.ValueError", "<builtin>.len", "functional.namedtupledict", "caffe2.python.core.CreateOperator", "caffe2.python.onnx.workspace.Workspace", "<builtin>.enumerate", "functional._Functional.__getattribute__.op_func.get_name_list", "<builtin>.range", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.C.OpSchema.get"], "caffe2.python.onnx.workspace.Workspace": [], "caffe2.python.workspace.C.OpSchema.get": [], "functional._Functional.__getattribute__.op_func.get_name_list": ["<builtin>.range", "<builtin>.min", "<builtin>.str"], "functional_test": ["hypothesis.strategies.composite", "unittest.main"], "hypothesis.strategies.composite": [], "functional_test._tensor_splits": ["hypothesis.strategies.integers", "numpy.array", "numpy.ones", "hypothesis.strategies.lists", "<builtin>.sorted", "numpy.diff", "caffe2.python.hypothesis_test_util.tensor", "<builtin>.len", "<builtin>.range"], "caffe2.python.hypothesis_test_util.tensor": [], "hypothesis.strategies.lists": [], "numpy.diff": [], "functional_test.TestFunctional": ["hypothesis.strategies.sampled_from", "functional_test._tensor_splits", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.given", "hypothesis.strategies.booleans"], "functional_test.TestFunctional.test_relu": ["caffe2.python.workspace.WorkspaceGuard", "caffe2.python.workspace.FeedBlob", "numpy.sign", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.functional.Functional.Relu", "numpy.testing.assert_array_equal"], "numpy.sign": [], "caffe2.python.functional.Functional.Relu": [], "caffe2.python.workspace.WorkspaceGuard": [], "functional_test.TestFunctional.test_concat": ["caffe2.python.functional.Functional.Concat", "numpy.array", "numpy.concatenate", "numpy.testing.assert_array_equal"], "caffe2.python.functional.Functional.Concat": [], "functional_test.TestFunctional.test_split": ["numpy.concatenate", "<builtin>.dict", "caffe2.python.functional.Functional.Split", "functional_test.TestFunctional.test_split.split_ref", "<builtin>.enumerate", "<builtin>.len", "numpy.testing.assert_array_equal"], "caffe2.python.functional.Functional.Split": [], "functional_test.TestFunctional.test_split.split_ref": ["<builtin>.list", "numpy.array", "numpy.cumsum", "numpy.arange", "<builtin>.len", "<builtin>.range"], "numpy.cumsum": [], "fused_8bit_rowwise_conversion_ops_test": ["numpy.vectorize"], "numpy.vectorize": [], "fused_8bit_rowwise_conversion_ops_test.bytes_to_floats": ["struct.unpack", "<builtin>.enumerate", "<builtin>.bytearray", "numpy.empty", "numpy.shape"], "numpy.shape": [], "numpy.empty": [], "<builtin>.bytearray": [], "struct.unpack": [], "fused_8bit_rowwise_conversion_ops_test.floats_to_bytes": ["<builtin>.enumerate", "<builtin>.isinstance", "struct.pack", "<builtin>.list", "numpy.empty", "numpy.shape", "<builtin>.ord"], "fused_8bit_rowwise_conversion_ops_test.fused_rowwise_8bit_quantize_reference": ["fused_8bit_rowwise_conversion_ops_test.floats_to_bytes", "numpy.max", "numpy.concatenate", "numpy.min", "<builtin>.print"], "numpy.min": [], "fused_8bit_rowwise_conversion_ops_test.fused_rowwise_8bit_quantize_dequantize_reference": ["fused_8bit_rowwise_conversion_ops_test.bytes_to_floats", "fused_8bit_rowwise_conversion_ops_test.fused_rowwise_8bit_quantize_reference"], "fused_8bit_rowwise_conversion_ops_test.TestFused8BitRowwiseQuantizationConversion": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.given"], "fused_8bit_rowwise_conversion_ops_test.TestFused8BitRowwiseQuantizationConversion.test_quantize_op": ["numpy.testing.assert_array_almost_equal", "fused_8bit_rowwise_conversion_ops_test.fused_rowwise_8bit_quantize_reference", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator"], "fused_8bit_rowwise_conversion_ops_test.TestFused8BitRowwiseQuantizationConversion.test_quantize_and_dequantize_op": ["numpy.testing.assert_array_almost_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "fused_8bit_rowwise_conversion_ops_test.fused_rowwise_8bit_quantize_dequantize_reference", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator"], "gradient_checker": [], "gradient_checker.getGradientForOp": ["caffe2.python.core.GradientRegistry.GetGradientForOp"], "caffe2.python.core.GradientRegistry.GetGradientForOp": [], "gradient_checker._get_grad_blob": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "<builtin>.isinstance"], "gradient_checker._get_grad": ["caffe2.python.workspace.RunNetOnce", "<builtin>.str", "gradient_checker._get_grad_blob"], "gradient_checker._assert_close": ["numpy.mean", "numpy.testing.assert_allclose", "<builtin>.max", "numpy.abs"], "gradient_checker.NetGradientChecker.CompareNets": ["<builtin>.zip", "<builtin>.open", "gradient_checker._get_grad", "<builtin>.len", "gradient_checker._assert_close", "<builtin>.str", "gradient_checker.NetGradientChecker.CompareNets._get_output_with_grad_names", "<builtin>.enumerate", "caffe2.python.net_drawer.GetPydotGraph"], "gradient_checker.NetGradientChecker.CompareNets._get_output_with_grad_names": [], "caffe2.python.net_drawer.GetPydotGraph": [], "gradient_checker.NetGradientChecker.Check": ["numpy.zeros_like", "gradient_checker.NetGradientChecker.Check.GetValue", "gradient_checker._assert_close", "<builtin>.range", "gradient_checker.NetGradientChecker.Check.GetLoss", "gradient_checker._get_grad"], "gradient_checker.NetGradientChecker.Check.GetLoss": ["caffe2.python.workspace.RunNetOnce", "<builtin>.sum"], "gradient_checker.NetGradientChecker.Check.GetValue": [], "gradient_checker.GradientChecker.__init__": ["caffe2.proto.caffe2_pb2.DeviceOption"], "gradient_checker.GradientChecker.GetLossAndGrad": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "numpy.zeros_like", "<builtin>.len", "caffe2.python.workspace.FetchBlob", "numpy.ones", "<builtin>.range", "caffe2.python.workspace.RunOperatorsOnce", "caffe2.python.core.CreateOperator", "<builtin>.isinstance"], "caffe2.python.workspace.RunOperatorsOnce": [], "gradient_checker.GradientChecker.CheckSimple": ["numpy.flatnonzero", "<builtin>.print", "caffe2.python.workspace.FeedBlob", "numpy.zeros_like", "numpy.isclose", "gradient_checker.GradientChecker._assertInferTensorChecks", "gradient_checker.getGradientForOp", "caffe2.python.core.InferOpBlobDevicesAsDict", "<builtin>.range", "gradient_checker.GradientChecker.GetLossAndGrad", "numpy.vstack", "numpy.any", "os.getenv", "caffe2.python.workspace.ResetWorkspace", "<builtin>.enumerate", "caffe2.python.workspace.CurrentWorkspace", "caffe2.python.workspace.SwitchWorkspace", "<builtin>.Exception"], "gradient_checker.GradientChecker._assertInferTensorChecks": ["<builtin>.list", "numpy.dtype", "<builtin>.set", "caffe2.python.workspace.FetchBlob", "<builtin>.str", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.InferShapesAndTypes", "<builtin>.type", "<builtin>.Exception"], "numpy.any": [], "numpy.flatnonzero": [], "numpy.vstack": [], "numpy.dtype": [], "gradient_check_test": ["caffe2.python.workspace.NumGpuDevices", "caffe2.python.workspace.GlobalInit", "caffe2.python.gradient_checker.GradientChecker", "unittest.main", "caffe2.python.device_checker.DeviceChecker", "caffe2.proto.caffe2_pb2.DeviceOption"], "caffe2.python.device_checker.DeviceChecker": [], "caffe2.python.gradient_checker.GradientChecker": [], "gradient_check_test.TestLRN.setUp": [], "gradient_check_test.TestLRN.testLRN": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "caffe2.python.device_checker.CheckSimple": [], "gradient_check_test.TestFlatten.testFlatten": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "gradient_check_test.TestConcat.setUp": [], "gradient_check_test.TestConcat.testConcatNHWC": ["<builtin>.range", "caffe2.python.core.CreateOperator", "caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "numpy.random.rand"], "gradient_check_test.TestConcat.testConcatNCHW": ["<builtin>.range", "caffe2.python.core.CreateOperator", "caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "numpy.random.rand"], "gradient_check_test.TestRelu.setUp": [], "gradient_check_test.TestRelu.testRelu": ["caffe2.python.core.CreateOperator", "numpy.sign", "caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "numpy.random.rand"], "gradient_check_test.TestTanh.setUp": [], "gradient_check_test.TestTanh.testTanh": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "gradient_check_test.TestAbs.setUp": [], "gradient_check_test.TestAbs.testAbs": ["caffe2.python.core.CreateOperator", "numpy.sign", "caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "numpy.random.rand"], "gradient_check_test.TestExp.setUp": [], "gradient_check_test.TestExp.testExp": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "gradient_check_test.TestCos.setUp": [], "gradient_check_test.TestCos.testCos": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "gradient_check_test.TestSin.setUp": [], "gradient_check_test.TestSin.testSin": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "gradient_check_test.TestSigmoid.setUp": [], "gradient_check_test.TestSigmoid.testSigmoid": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "gradient_check_test.TestSum.setUp": [], "gradient_check_test.TestSum.testSum": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "gradient_check_test.TestMakeTwoClass.setUp": [], "gradient_check_test.TestMakeTwoClass.testMakeTwoClass": ["caffe2.python.device_checker.CheckSimple", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "gradient_check_test.TestNetGradientChecker.test_net_gradient_checker": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.brew.fc", "caffe2.python.model_helper.ModelHelper", "caffe2.python.gradient_checker.NetGradientChecker.Check"], "caffe2.python.gradient_checker.NetGradientChecker.Check": [], "gradient_check_test.TestNetGradientChecker.test_net_comparison": ["numpy.array", "caffe2.python.gradient_checker.NetGradientChecker.CompareNets", "<builtin>.enumerate", "caffe2.python.core.Net"], "caffe2.python.gradient_checker.NetGradientChecker.CompareNets": [], "gradient_check_test.TestIf.testIf": ["caffe2.python.net_builder.ops.UniformFill", "caffe2.python.workspace.RunNetOnce", "<builtin>.len", "caffe2.python.net_builder.ops.IfNet", "caffe2.python.net_builder.ops.Else", "caffe2.python.workspace.CreateNet", "<builtin>.range", "caffe2.python.net_builder.ops.Add", "caffe2.python.net_builder.NetBuilder", "caffe2.python.net_builder.ops.SquaredL2Distance", "caffe2.python.workspace.FetchBlob", "caffe2.python.net_builder.ops.LT", "<builtin>.abs", "caffe2.python.net_builder.ops.GaussianFill", "caffe2.python.net_builder.ops.FC", "caffe2.python.net_builder.ops.ConstantFill", "caffe2.python.workspace.RunNet", "caffe2.python.net_builder.ops.GivenTensorFill", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.test_util.TestCase.assertEqual"], "caffe2.python.net_builder.NetBuilder": [], "caffe2.python.net_builder.ops.UniformFill": [], "caffe2.python.net_builder.ops.ConstantFill": [], "caffe2.python.net_builder.ops.GivenTensorFill": [], "caffe2.python.net_builder.ops.GaussianFill": [], "caffe2.python.net_builder.ops.LT": [], "caffe2.python.net_builder.ops.IfNet": [], "caffe2.python.net_builder.ops.FC": [], "caffe2.python.net_builder.ops.Else": [], "caffe2.python.net_builder.ops.SquaredL2Distance": [], "gradient_check_test.TestWhile": ["unittest.skip"], "gradient_check_test.TestWhile.testWhile": ["caffe2.python.net_builder.ops.Condition", "caffe2.python.net_builder.ops.LE", "<builtin>.len", "caffe2.python.test_util.TestCase.assertAlmostEqual", "caffe2.python.net_builder.ops.WhileNet", "caffe2.python.net_builder.ops.IfNet", "caffe2.python.net_builder.ops.Add", "caffe2.python.workspace.RunNetOnce", "caffe2.python.net_builder.NetBuilder", "caffe2.python.workspace.FetchBlob", "caffe2.python.net_builder.ops.Copy", "caffe2.python.net_builder.ops.Const", "caffe2.python.net_builder.ops.Else", "caffe2.python.net_builder.ops.Pow", "caffe2.python.net_builder.ops.LT"], "caffe2.python.net_builder.ops.WhileNet": [], "caffe2.python.net_builder.ops.Condition": [], "caffe2.python.net_builder.ops.LE": [], "caffe2.python.net_builder.ops.Pow": [], "caffe2.python.test_util.TestCase.assertAlmostEqual": [], "gru_cell": ["functools.partial"], "gru_cell.GRUCell.__init__": ["<builtin>.float", "<builtin>.super"], "gru_cell.GRUCell._apply": ["caffe2.python.rnn_cell.RNNCell.scope", "gru_cell.GRUCell.get_state_names", "<builtin>.list", "caffe2.python.brew.fc"], "caffe2.python.rnn_cell.RNNCell.scope": [], "gru_cell.GRUCell.get_state_names": ["caffe2.python.rnn_cell.RNNCell.scope"], "gru_cell.GRUCell.prepare_input": ["caffe2.python.rnn_cell.RNNCell.scope", "caffe2.python.brew.fc"], "gru_cell.GRUCell.get_output_dim": [], "hip_test_util": [], "hip_test_util.run_in_hip": [], "hsm_util": [], "hsm_util.create_node_with_words": ["caffe2.proto.hsm_pb2.NodeProto"], "caffe2.proto.hsm_pb2.NodeProto": [], "hsm_util.create_node_with_nodes": ["caffe2.proto.hsm_pb2.NodeProto"], "hsm_util.create_hierarchy": ["hsm_util.create_hierarchy.recursive_path_builder", "caffe2.proto.hsm_pb2.HierarchyProto"], "hsm_util.create_hierarchy.create_path": ["caffe2.proto.hsm_pb2.PathProto"], "caffe2.proto.hsm_pb2.PathProto": [], "hsm_util.create_hierarchy.recursive_path_builder": ["hsm_util.create_hierarchy.create_path", "hsm_util.create_hierarchy.recursive_path_builder", "<builtin>.enumerate", "<builtin>.len"], "caffe2.proto.hsm_pb2.HierarchyProto": [], "hypothesis_test": ["caffe2.python.dyndep.InitOpsLibrary", "hypothesis.strategies.composite", "unittest.main"], "hypothesis_test.settings": [], "hypothesis_test.settings.wrapped": ["hypothesis.settings"], "hypothesis_test.sigmoid": ["numpy.exp"], "hypothesis_test._tensor_and_prefix": ["hypothesis.assume", "<builtin>.len", "hypothesis.strategies.lists", "caffe2.python.hypothesis_test_util.arrays", "caffe2.python.hypothesis_test_util.dims"], "caffe2.python.hypothesis_test_util.dims": [], "caffe2.python.hypothesis_test_util.arrays": [], "hypothesis_test._tensor_and_indices": ["caffe2.python.hypothesis_test_util.dims", "hypothesis.strategies.tuples", "hypothesis.strategies.integers", "hypothesis.strategies.lists"], "hypothesis_test._tensor_and_indices.<lambda1>": ["hypothesis.strategies.just", "hypothesis.strategies.tuples", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.arrays"], "hypothesis.strategies.just": [], "hypothesis.strategies.tuples": [], "hypothesis_test._dtypes": ["hypothesis.strategies.sampled_from"], "hypothesis_test._test_binary": ["hypothesis_test.settings.wrapped", "hypothesis_test._dtypes", "hypothesis.given", "hypothesis_test.TestOperators.test_div.div_dtypes", "hypothesis.settings", "hypothesis.strategies.sampled_from"], "hypothesis_test._test_binary.<lambda1>": ["caffe2.python.hypothesis_test_util.elements_of_type", "caffe2.python.hypothesis_test_util.tensors"], "caffe2.python.hypothesis_test_util.elements_of_type": [], "caffe2.python.hypothesis_test_util.tensors": [], "hypothesis_test.TestOperators.test_div.div_dtypes": ["hypothesis.strategies.sampled_from"], "hypothesis_test._test_binary.test_binary": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks": [], "hypothesis_test._test_binary_broadcast": ["hypothesis_test.settings.wrapped", "hypothesis_test._dtypes", "hypothesis.given", "hypothesis_test.TestOperators.test_div.div_dtypes", "hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.strategies.just"], "hypothesis_test._test_binary_broadcast.<lambda1>": ["caffe2.python.hypothesis_test_util.elements_of_type", "hypothesis_test._tensor_and_prefix"], "hypothesis_test._test_binary_broadcast.test_binary_broadcast": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test._test_binary_broadcast.test_binary_broadcast.cast_ref": ["hypothesis_test.TestOperators.test_sub.ref", "hypothesis_test.TestOperators.test_mul.ref", "numpy.array", "hypothesis_test.TestOperators.test_div.ref", "hypothesis_test.TestOperators.test_add.ref"], "hypothesis_test.TestOperators.test_sub.ref": [], "hypothesis_test.TestOperators.test_mul.ref": [], "hypothesis_test.TestOperators.test_add.ref": [], "hypothesis_test.TestOperators.test_div.ref": [], "hypothesis_test.TestOperators.test_comparison_ops": ["hypothesis_test._test_binary_broadcast.test_binary_broadcast", "hypothesis_test._test_binary_broadcast", "hypothesis_test._test_binary.test_binary", "hypothesis_test._test_binary", "future.utils.viewitems"], "hypothesis_test.TestOperators.test_comparison_ops.<dict1>.<lambda1>": [], "hypothesis_test.TestOperators.test_comparison_ops.<dict1>.<lambda2>": [], "hypothesis_test.TestOperators.test_comparison_ops.<dict1>.<lambda3>": [], "hypothesis_test.TestOperators.test_comparison_ops.<dict1>.<lambda4>": [], "hypothesis_test.TestOperators": ["hypothesis_test.settings.wrapped", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.floats", "hypothesis.given", "hypothesis.strategies.lists", "caffe2.python.hypothesis_test_util.arrays", "future.utils.viewkeys", "hypothesis_test._dtypes", "caffe2.python.hypothesis_test_util.tensor", "unittest.skipIf", "hypothesis.strategies.text", "hypothesis.strategies.booleans", "hypothesis.settings", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.strategies.sampled_from", "<builtin>.list"], "hypothesis_test.TestOperators.test_sum": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_row_mul": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_row_mul.ref": ["<builtin>.range", "numpy.zeros"], "hypothesis_test.TestOperators.test_max": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.logical_and", "caffe2.python.core.CreateOperator"], "numpy.logical_and": [], "hypothesis_test.TestOperators.test_max.elementwise_max": ["numpy.maximum"], "hypothesis_test.TestOperators.test_add": ["hypothesis_test._test_binary.test_binary", "hypothesis_test._test_binary_broadcast.test_binary_broadcast", "hypothesis_test._test_binary", "hypothesis_test._test_binary_broadcast"], "hypothesis_test.TestOperators.test_add.not_overflow": ["<builtin>.isinstance", "<builtin>.abs"], "hypothesis_test.TestOperators.test_sub": ["hypothesis_test._test_binary.test_binary", "hypothesis_test._test_binary_broadcast.test_binary_broadcast", "hypothesis_test._test_binary", "hypothesis_test._test_binary_broadcast"], "hypothesis_test.TestOperators.test_mul": ["hypothesis_test._test_binary.test_binary", "hypothesis_test._test_binary_broadcast.test_binary_broadcast", "hypothesis_test._test_binary", "hypothesis_test._test_binary_broadcast"], "hypothesis_test.TestOperators.test_mul.not_overflow": ["<builtin>.isinstance", "<builtin>.abs"], "hypothesis_test.TestOperators.test_div": ["hypothesis_test._test_binary.test_binary", "hypothesis_test._test_binary_broadcast.test_binary_broadcast", "hypothesis_test._test_binary", "hypothesis_test._test_binary_broadcast"], "hypothesis_test.TestOperators.test_div.non_zero": ["<builtin>.abs"], "hypothesis_test.TestOperators.test_negative": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_tanh": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_averaged_loss": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_softsign": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_softsign.softsign": ["numpy.abs"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises": [], "hypothesis_test.TestOperators.test_random_seed_behaviour": ["hypothesis.assume", "<builtin>.len", "numpy.testing.assert_array_equal", "hypothesis_test.TestOperators.test_random_seed_behaviour.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "copy.deepcopy"], "hypothesis_test.TestOperators.test_random_seed_behaviour.run": ["caffe2.python.workspace.C.Workspace", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.ResetWorkspace"], "hypothesis_test.TestOperators.test_fully_connected_axis": ["<builtin>.enumerate", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "hypothesis_test.TestOperators.test_fully_connected_axis.prod", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.list", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_fully_connected_axis.prod": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual": [], "caffe2.python.hypothesis_test_util.floats": [], "hypothesis_test.TestOperators.test_recurrent": ["<builtin>.enumerate", "hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.randn", "numpy.empty", "numpy.random.rand", "numpy.random.seed", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_depth_concat": ["hypothesis.assume", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_depth_concat.depth_concat": ["<builtin>.len", "<builtin>.range", "numpy.concatenate", "numpy.shape", "numpy.array", "numpy.expand_dims", "<builtin>.list"], "hypothesis_test.TestOperators.test_depth_concat_with_order": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_depth_concat_with_order.depth_concat_with_order": ["numpy.array", "numpy.concatenate", "<builtin>.list", "numpy.shape"], "hypothesis_test.TestOperators.test_last_n_windows": ["caffe2.python.core.execution_step", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "<builtin>.range", "numpy.array", "numpy.testing.assert_almost_equal", "caffe2.python.core.Plan", "numpy.zeros", "caffe2.python.workspace.RunPlan", "caffe2.python.workspace.CreateBlob"], "caffe2.python.workspace.CreateBlob": [], "hypothesis_test.TestOperators.test_print": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.random.permutation", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_momentum_sgd": ["<builtin>.int", "numpy.asarray", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "numpy.asarray": [], "hypothesis_test.TestOperators.test_momentum_sgd.momentum_sgd": [], "hypothesis_test.TestOperators.test_rmsprop_sgd": ["numpy.asarray", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.abs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_rmsprop_sgd.rmsprop": ["numpy.square", "numpy.sqrt"], "numpy.square": [], "hypothesis_test.TestOperators._dense_ftrl": ["numpy.take", "numpy.stack", "numpy.abs", "numpy.asscalar", "<builtin>.isinstance", "numpy.sign", "numpy.sqrt"], "numpy.asscalar": [], "numpy.take": [], "numpy.stack": [], "hypothesis_test.TestOperators.test_ftrl_sgd": ["functools.partial", "numpy.stack", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.abs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators._dense_gftrl": ["numpy.take", "numpy.stack", "<builtin>.range", "numpy.linalg.norm", "numpy.asscalar", "<builtin>.isinstance", "numpy.sqrt"], "hypothesis_test.TestOperators.test_gftrl_sgd": ["functools.partial", "numpy.stack", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.abs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_sparse_ftrl_sgd": ["numpy.stack", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.arange", "numpy.abs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_sparse_ftrl_sgd.ftrl": ["hypothesis_test.TestOperators._dense_ftrl"], "hypothesis_test.TestOperators._dense_ftrl_send_alpha_by_input": ["hypothesis_test.TestOperators._dense_ftrl"], "hypothesis_test.TestOperators.test_ftrl_sgd_send_alpha_by_input": ["functools.partial", "numpy.stack", "numpy.array", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.abs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_sparse_ftrl_sgd_send_alpha_by_input": ["numpy.stack", "numpy.array", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.arange", "numpy.abs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_sparse_ftrl_sgd_send_alpha_by_input.ftrl": ["hypothesis_test.TestOperators._dense_ftrl_send_alpha_by_input"], "hypothesis_test.TestOperators.test_unique": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertValidationChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_unique.unique_valid": ["<builtin>.len", "<builtin>.set", "numpy.testing.assert_array_equal", "<builtin>.range", "<builtin>.sorted", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertValidationChecks": [], "hypothesis_test.TestOperators.test_accuracy": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_accuracy.op_ref": ["<builtin>.enumerate", "<builtin>.range", "<builtin>.len", "<builtin>.sorted"], "hypothesis_test.TestOperators.test_accuracy.op_ref.<lambda1>": [], "hypothesis_test.TestOperators.test_perplexity": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_perplexity.op_ref": ["functools.reduce", "numpy.power"], "hypothesis_test.TestOperators.test_perplexity.op_ref.<lambda1>": [], "hypothesis_test.TestOperators.test_lengths_to_segment_ids": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_lengths_to_segment_ids.op_ref": ["<builtin>.enumerate", "numpy.array"], "hypothesis_test.TestOperators.test_lengths_range_fill": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_lengths_range_fill.op_ref": ["<builtin>.enumerate", "<builtin>.range", "<builtin>.list", "numpy.array"], "hypothesis_test.TestOperators.test_segment_ids_to_ranges": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "hypothesis_test.TestOperators.test_segment_ids_to_ranges.lengths_to_segment_ids", "numpy.array", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_segment_ids_to_ranges.op_ref": ["<builtin>.enumerate", "numpy.array"], "hypothesis_test.TestOperators.test_segment_ids_to_ranges.lengths_to_segment_ids": ["<builtin>.enumerate", "numpy.array"], "hypothesis_test.TestOperators.test_lengths_to_ranges": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_lengths_to_ranges.op_ref": ["numpy.cumsum", "numpy.concatenate", "numpy.column_stack"], "numpy.column_stack": [], "hypothesis_test.TestOperators.test_lengths_to_offsets": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_lengths_to_offsets.op_ref": ["numpy.cumsum", "<builtin>.tuple", "numpy.sum", "numpy.concatenate", "numpy.array"], "hypothesis_test.TestOperators.test_multi_class_accuracy": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_multi_class_accuracy.op_ref": ["<builtin>.range", "numpy.empty", "numpy.argmax"], "hypothesis_test.TestOperators.test_segment_ids_to_lengths": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "hypothesis_test.TestOperators.test_segment_ids_to_lengths.lengths_to_ids", "numpy.array", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_segment_ids_to_lengths.lengths_to_ids": ["<builtin>.enumerate"], "hypothesis_test.TestOperators.test_segment_ids_to_lengths.ids_to_lengths": ["<builtin>.range", "<builtin>.len", "numpy.array"], "hypothesis_test.TestOperators.test_lengths_to_weights": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_lengths_to_weights.lengths_to_weights": ["numpy.array"], "hypothesis_test.TestOperators.test_abs": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_abs.abs_ref": ["numpy.abs"], "hypothesis_test.TestOperators.test_cos": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_cos.cos_ref": ["numpy.cos"], "hypothesis_test.TestOperators.test_sin": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_sin.sin_ref": ["numpy.sin"], "hypothesis_test.TestOperators.test_exp": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_exp.exp_ref": ["numpy.exp"], "hypothesis_test.TestOperators.test_log": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_log.log_ref": ["numpy.log"], "numpy.log": [], "hypothesis_test.TestOperators.test_blobs_dequeue_timeout": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGreater", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "time.time", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_blobs_dequeue_timeout.<lambda1>": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGreater": [], "hypothesis_test.TestOperators.test_blobs_queue_threading": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.array_equal", "queue.Queue", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "<builtin>.any", "numpy.vstack", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "threading.Thread", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_blobs_queue_threading.enqueue": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "<builtin>.zip", "caffe2.python.core.CreateOperator"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue": [], "hypothesis_test.TestOperators.test_safe_blobs_queue": ["caffe2.python.core.execution_step", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.range", "caffe2.python.core.Net", "<builtin>.str", "caffe2.python.core.Plan", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "hypothesis_test.TestOperators.test_weighted_sample_blobs_queue": ["caffe2.python.core.execution_step", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.random.uniform", "<builtin>.print", "<builtin>.len", "numpy.random.randint", "<builtin>.range", "caffe2.python.core.Net", "caffe2.python.core.Plan"], "hypothesis_test.TestOperators.test_weighted_sample_blobs_queue.append": [], "hypothesis_test.TestOperators.test_squeeze_expand_dims": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.len", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_squeeze_expand_dims.expand_dims_ref": ["numpy.expand_dims", "<builtin>.set", "<builtin>.list"], "hypothesis_test.TestOperators.test_squeeze_expand_dims.squeeze_ref": ["numpy.squeeze", "<builtin>.set", "<builtin>.list"], "numpy.squeeze": [], "hypothesis_test.TestOperators.test_tt_layer": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "caffe2.python.tt_core.init_tt_cores", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.linalg.norm", "numpy.array", "numpy.random.rand", "numpy.expand_dims", "numpy.random.seed", "caffe2.python.core.CreateOperator"], "caffe2.python.tt_core.init_tt_cores": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual": [], "hypothesis_test.TestOperators.test_tt_sls_layer": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "numpy.ones", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.linalg.norm", "numpy.array", "<builtin>.list", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_tt_sls_gradientop": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.ones", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.array", "<builtin>.list", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_tt_sls_gradientop1": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.ones", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.array", "<builtin>.list", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_tt_sls": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.ones", "numpy.array", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_tt_sls_repro": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "numpy.ones", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.linalg.norm", "numpy.array", "<builtin>.list", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_tt_sls_gradientop2": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.ones", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.array", "<builtin>.list", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_dag_net_forking": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "<builtin>.print", "numpy.testing.assert_array_equal", "<builtin>.range", "numpy.sum", "hypothesis_test.TestOperators.test_dag_net_forking.run", "<builtin>.str", "numpy.random.randn", "<builtin>.reversed", "<builtin>.dict", "caffe2.python.model_helper.ModelHelper", "numpy.square", "caffe2.python.brew.fc", "numpy.random.seed"], "hypothesis_test.TestOperators.test_dag_net_forking.run": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "<builtin>.str", "numpy.random.randn", "numpy.random.seed"], "hypothesis_test.TestOperators.test_slice": ["numpy.ones", "<builtin>.len", "<builtin>.min", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.max", "numpy.zeros", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "<builtin>.list", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_slice.slice_ref": ["<builtin>.len", "<builtin>.slice", "<builtin>.zip"], "hypothesis_test.TestOperators.test_shape": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_shape.<lambda1>": [], "hypothesis_test.TestOperators.test_shape_with_axes": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "<builtin>.len", "numpy.random.randint"], "hypothesis_test.TestOperators.test_shape_with_axes.shape_ref": [], "hypothesis_test.TestOperators.test_has_elements": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_has_elements.<lambda1>": ["<builtin>.len"], "hypothesis_test.TestOperators.test_has_elements.<lambda2>": ["<builtin>.len"], "hypothesis_test.TestOperators.test_should_stop_as_criteria_net_execution_step": ["caffe2.python.core.execution_step", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.BlobReference", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.asarray", "<builtin>.max", "caffe2.python.core.Plan", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "hypothesis_test.TestOperators.test_disabled_execution_step": ["caffe2.python.core.execution_step", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.enumerate", "caffe2.python.core.BlobReference", "hypothesis_test.TestOperators.test_disabled_execution_step.createNets", "caffe2.python.core.Plan", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "hypothesis_test.TestOperators.test_disabled_execution_step.createNets": ["caffe2.python.core.Net"], "hypothesis_test.TestOperators.test_iter_count_with_execution_step": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.asarray", "caffe2.python.core.Plan", "caffe2.python.core.ExecutionStep", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "caffe2.python.core.ExecutionStep": [], "hypothesis_test.TestOperators.test_atomic_iter_with_concurrent_steps": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "<builtin>.range", "numpy.asarray", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.core.Plan", "caffe2.python.core.ExecutionStep", "<builtin>.list", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "hypothesis_test.TestOperators.test_cast": ["caffe2.proto.caffe2_pb2.TensorProto.DataType.Name", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.iinfo", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.clip", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "numpy.clip": [], "hypothesis_test.TestOperators.test_cast.ref": [], "caffe2.proto.caffe2_pb2.TensorProto.DataType.Name": [], "hypothesis_test.TestOperators.test_logit": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_logit.ref": ["numpy.clip", "numpy.log"], "hypothesis_test.TestOperators.test_replace_nan": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_replace_nan.ref": ["numpy.isnan", "numpy.copy"], "numpy.copy": [], "numpy.isnan": [], "hypothesis_test.TestOperators.<lambda1>": ["caffe2.python.hypothesis_test_util.elements_of_type", "caffe2.python.hypothesis_test_util.tensor"], "hypothesis_test.TestOperators.test_constant_fill": ["<builtin>.tuple", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.dtype", "<builtin>.list", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_constant_fill.ref": ["numpy.full"], "hypothesis_test.TestOperators.<lambda2>": ["caffe2.python.hypothesis_test_util.elements_of_type", "caffe2.python.hypothesis_test_util.tensor"], "hypothesis_test.TestOperators.test_constant_fill_from_tensor": ["numpy.array", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.dtype", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_constant_fill_from_tensor.ref": ["numpy.full"], "hypothesis_test.TestOperators.test_elman_recurrent_network": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.random.randint", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.str", "numpy.random.randn", "<builtin>.zip", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.brew.fc", "caffe2.python.core.GradientRegistry.GetBackwardPass", "numpy.random.seed", "future.utils.viewitems"], "hypothesis_test.TestOperators.test_elman_recurrent_network.reference": ["numpy.dot", "hypothesis_test.sigmoid", "<builtin>.range", "numpy.zeros"], "numpy.dot": [], "hypothesis_test.TestOperators.test_space_to_batch": ["hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_batch_to_space": ["hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_scale": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "hypothesis.strategies.text": [], "hypothesis_test.TestOperators.test_string_serde": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "hypothesis_test.TestOperators.test_same_pad_image": ["hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_same_pad_image.numpy_pad_ref": ["numpy.pad"], "numpy.pad": [], "hypothesis_test.TestOperators.test_pad_image": ["hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.max", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_pad_image.numpy_pad_ref": ["numpy.pad"], "hypothesis_test.TestOperators.test_instance_norm": ["caffe2.python.workspace.C.Workspace", "numpy.testing.assert_array_equal", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.random.seed", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_instance_norm.ref_nchw": ["numpy.sqrt"], "hypothesis_test.TestOperators.test_instance_norm.ref_nhwc": ["hypothesis_test.TestOperators.test_instance_norm.ref_nchw"], "hypothesis_test.TestOperators.<lambda3>": ["hypothesis_test._tensor_and_indices", "caffe2.python.hypothesis_test_util.elements_of_type"], "hypothesis_test.TestOperators.test_sparse_to_dense": ["hypothesis.assume", "<builtin>.print", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.iinfo", "numpy.abs", "numpy.zeros", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.dtype", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_sparse_to_dense.sparse_to_dense": ["<builtin>.enumerate", "numpy.zeros"], "hypothesis_test.TestOperators.test_sparse_to_dense.sparse_to_dense_noshapeinfer": ["<builtin>.enumerate", "numpy.max", "numpy.zeros"], "hypothesis_test.TestOperators.test_dot_product": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_dot_product.dotproduct": ["numpy.sum"], "hypothesis_test.TestOperators.test_dot_product_with_padding": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_dot_product_with_padding.dotproduct": ["<builtin>.max", "numpy.sum", "numpy.ones"], "hypothesis_test.TestOperators.test_dot_product_with_rep_padding": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_dot_product_with_rep_padding.dotproduct": ["numpy.sum", "numpy.matlib.repmat"], "numpy.matlib.repmat": [], "hypothesis_test.TestOperators.test_ensure_dense": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_ensure_dense.<lambda1>": [], "hypothesis_test.TestOperators.test_ensure_dense.<lambda2>": [], "hypothesis_test.TestOperators.test_accumulate_histogram_op": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "hypothesis_test.TestOperators.test_accumulate_histogram_op.histogram": ["<builtin>.range", "numpy.zeros"], "hypothesis_test.TestOperators.test_safe_dequeue_blob__raises_exception_when_hang": ["caffe2.python.workspace.Workspace", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "threading.Thread"], "hypothesis_test.TestOperators.test_safe_dequeue_blob__raises_exception_when_hang._net_instance_cancel": ["time.sleep"], "caffe2.python.workspace.Workspace": [], "hypothesis_test_util": ["contextlib.contextmanager", "os.getenv", "hypothesis.strategies.sampled_from", "caffe2.python.workspace.NumGpuDevices", "<builtin>.range", "<builtin>.dict", "hypothesis_test_util.device_checker_device_options", "hypothesis.settings.load_profile", "hypothesis_test_util.gradient_checker_device_option", "caffe2.proto.caffe2_pb2.DeviceOption", "hypothesis.strategies.just", "hypothesis_test_util.settings", "hypothesis_test_util.is_sandcastle", "hypothesis.settings.register_profile"], "hypothesis_test_util.is_sandcastle": ["os.getenv"], "hypothesis_test_util.is_travis": [], "hypothesis_test_util.to_float32": ["<builtin>.float", "struct.pack", "struct.unpack"], "hypothesis_test_util.settings": ["hypothesis.settings"], "hypothesis_test_util.floats": ["hypothesis.strategies.floats", "hypothesis_test_util.to_float32"], "hypothesis.strategies.floats": [], "hypothesis.settings.register_profile": [], "hypothesis.settings.load_profile": [], "hypothesis_test_util.dims": ["hypothesis.strategies.integers"], "hypothesis_test_util.elements_of_type": ["<builtin>.ValueError", "hypothesis_test_util.floats", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "hypothesis_test_util.arrays": ["hypothesis_test_util.elements_of_type", "hypothesis.extra.numpy.arrays"], "hypothesis.extra.numpy.arrays": [], "hypothesis_test_util.tensor": ["hypothesis.strategies.lists", "hypothesis_test_util.dims"], "hypothesis_test_util.tensor.<lambda1>": ["hypothesis_test_util.arrays"], "hypothesis_test_util.tensor1d": ["hypothesis_test_util.tensor"], "hypothesis_test_util.segment_ids": ["numpy.empty", "hypothesis.strategies.booleans", "hypothesis_test_util.arrays", "hypothesis.strategies.just", "hypothesis.strategies.integers"], "hypothesis_test_util.segment_ids.<lambda1>": ["numpy.cumsum"], "hypothesis_test_util.lengths": ["numpy.empty", "<builtin>.max", "hypothesis.strategies.just", "hypothesis.strategies.integers"], "hypothesis_test_util.lengths.<lambda1>": ["numpy.append", "numpy.array"], "hypothesis_test_util.lengths.<lambda2>": ["hypothesis.extra.numpy.arrays", "hypothesis.strategies.integers"], "hypothesis_test_util.segmented_tensor": ["hypothesis.strategies.lists", "hypothesis_test_util.dims", "hypothesis.strategies.booleans", "hypothesis.strategies.just", "hypothesis.strategies.tuples"], "hypothesis_test_util.segmented_tensor.<lambda1>": [], "hypothesis_test_util.segmented_tensor.<lambda2>": ["hypothesis_test_util.segment_ids", "hypothesis.strategies.tuples", "hypothesis_test_util.arrays"], "hypothesis_test_util.lengths_tensor": ["functools.partial", "hypothesis_test_util.segmented_tensor"], "hypothesis_test_util.sparse_segmented_tensor": ["hypothesis.strategies.lists", "hypothesis_test_util.dims", "hypothesis.strategies.booleans", "hypothesis.strategies.just", "hypothesis.strategies.tuples"], "hypothesis_test_util.sparse_segmented_tensor.<lambda1>": ["hypothesis.strategies.just", "hypothesis.strategies.tuples", "hypothesis.strategies.integers"], "hypothesis_test_util.sparse_segmented_tensor.<lambda2>": ["hypothesis_test_util.lengths", "hypothesis_test_util.arrays", "hypothesis_test_util.segment_ids", "hypothesis.strategies.tuples", "hypothesis.strategies.integers"], "hypothesis_test_util.sparse_lengths_tensor": ["hypothesis_test_util.sparse_segmented_tensor"], "hypothesis_test_util.tensors": ["hypothesis.strategies.lists", "hypothesis_test_util.dims"], "hypothesis_test_util.tensors.<lambda1>": ["hypothesis.strategies.lists", "hypothesis_test_util.arrays"], "hypothesis_test_util.tensors1d": ["hypothesis_test_util.tensors"], "hypothesis_test_util.device_checker_device_options": ["hypothesis.strategies.just"], "hypothesis_test_util.gradient_checker_device_option": ["hypothesis.strategies.sampled_from"], "hypothesis_test_util.temp_workspace": ["caffe2.python.workspace.SwitchWorkspace", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.CurrentWorkspace"], "hypothesis_test_util.runOpBenchmark": ["hypothesis_test_util.temp_workspace", "caffe2.python.core.InferOpBlobDevicesAsDict", "caffe2.python.workspace.BenchmarkNet", "caffe2.python.workspace.CreateNet", "<builtin>.zip", "copy.deepcopy", "caffe2.python.workspace.FeedBlob", "caffe2.proto.caffe2_pb2.NetDef"], "hypothesis_test_util.runOpOnInput": ["<builtin>.ValueError", "hypothesis_test_util.temp_workspace", "caffe2.python.core.InferOpBlobDevicesAsDict", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.range", "<builtin>.list", "<builtin>.zip", "copy.deepcopy", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "hypothesis_test_util.HypothesisTestCase.assertDeviceChecks": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.device_checker.DeviceChecker"], "hypothesis_test_util.HypothesisTestCase.assertGradientChecks": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.gradient_checker.GradientChecker", "<builtin>.str"], "hypothesis_test_util.HypothesisTestCase._assertGradReferenceChecks": ["numpy.testing.assert_allclose", "caffe2.python.test_util.TestCase.assertIsNone", "<builtin>.str", "caffe2.python.test_util.TestCase.assertEqual", "<builtin>.isinstance", "<builtin>.zip", "caffe2.python.workspace.RunOperatorsOnce", "caffe2.python.core.GradientRegistry.GetBackwardPass", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "hypothesis_test_util.HypothesisTestCase._assertInferTensorChecks": ["caffe2.python.test_util.TestCase.assertTrue", "os.getenv", "<builtin>.str", "numpy.testing.assert_equal", "numpy.array", "numpy.dtype", "numpy.testing.assert_array_equal", "<builtin>.type", "logging.warning", "caffe2.python.workspace.FetchBlob"], "hypothesis_test_util.HypothesisTestCase.assertReferenceChecks": ["<builtin>.RuntimeError", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_allclose", "<builtin>.str", "<builtin>.list", "copy.deepcopy", "<builtin>.len", "hypothesis_test_util.HypothesisTestCase._assertInferTensorChecks", "<builtin>.ValueError", "hypothesis_test_util.temp_workspace", "os.getenv", "<builtin>.range", "numpy.testing.assert_array_equal", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.core.Net", "<builtin>.isinstance", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.InferOpBlobDevicesAsDict", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.DeviceScope", "<builtin>.zip", "hypothesis_test_util.HypothesisTestCase._assertGradReferenceChecks", "logging.warning", "caffe2.python.workspace.FetchBlob"], "hypothesis_test_util.HypothesisTestCase.assertValidationChecks": ["hypothesis_test_util.temp_workspace", "caffe2.python.core.InferOpBlobDevicesAsDict", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.list", "<builtin>.dict", "<builtin>.zip", "copy.deepcopy", "<builtin>.len", "<builtin>.set", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "hypothesis_test_util.HypothesisTestCase.assertRunOpRaises": ["hypothesis_test_util.temp_workspace", "caffe2.python.core.InferOpBlobDevicesAsDict", "caffe2.python.test_util.TestCase.assertRaisesRegex", "<builtin>.zip", "caffe2.python.test_util.TestCase.assertRaises", "copy.deepcopy", "caffe2.python.workspace.FeedBlob"], "caffe2.python.test_util.TestCase.assertRaisesRegex": [], "ideep_test_util": ["caffe2.proto.caffe2_pb2.DeviceOption", "ideep_test_util.gradient_checker_device_option", "hypothesis.strategies.just", "ideep_test_util.device_checker_device_options", "hypothesis.strategies.sampled_from", "<builtin>.dict"], "ideep_test_util.device_checker_device_options": ["hypothesis.strategies.just"], "ideep_test_util.gradient_checker_device_option": ["hypothesis.strategies.sampled_from"], "layers_test": ["logging.getLogger"], "layers_test.TestLayers.testSparseDropoutWithReplacement": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.assertBlobsEqual", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.workspace.RunNetOnce", "caffe2.python.layer_test_util.LayersTestCase.model.SparseDropoutWithReplacement", "caffe2.python.schema.List", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct", "caffe2.python.workspace.FeedBlob", "numpy.array"], "caffe2.python.layer_test_util.LayersTestCase.model.SparseDropoutWithReplacement": [], "caffe2.python.schema.List": [], "caffe2.python.layer_test_util.LayersTestCase.assertEqual": [], "caffe2.python.layer_test_util.LayersTestCase.get_training_nets": [], "caffe2.python.layer_test_util.LayersTestCase.get_eval_net": [], "caffe2.python.layer_test_util.LayersTestCase.get_predict_net": [], "caffe2.python.layer_test_util.LayersTestCase.assertBlobsEqual": [], "layers_test.TestLayers.testAddLoss": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.tuple", "caffe2.python.core.BlobReference", "caffe2.python.layer_test_util.LayersTestCase.model.loss.field_blobs", "caffe2.python.layer_test_util.LayersTestCase.model.BatchLRLoss", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.add_loss", "caffe2.python.schema.NamedTuple", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.new_record": [], "caffe2.python.layer_test_util.LayersTestCase.model.BatchLRLoss": [], "caffe2.python.layer_test_util.LayersTestCase.model.add_loss": [], "caffe2.python.layer_test_util.LayersTestCase.model.loss.field_blobs": [], "caffe2.python.schema.NamedTuple": [], "layers_test.TestLayers.testFilterMetricSchema": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.model.add_metric_field", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.model.filter_metrics_schema"], "caffe2.python.layer_test_util.LayersTestCase.model.add_metric_field": [], "caffe2.python.layer_test_util.LayersTestCase.model.filter_metrics_schema": [], "layers_test.TestLayers.testAddOutputSchema": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.assertRaises", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.model.add_output_schema"], "caffe2.python.layer_test_util.LayersTestCase.model.add_output_schema": [], "caffe2.python.layer_test_util.LayersTestCase.assertRaises": [], "layers_test.TestLayers._test_net": ["caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps": [], "layers_test.TestLayers.testFCWithoutBias": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.input_feature_schema.float_features", "caffe2.python.layer_test_util.LayersTestCase.model.FCWithoutBias", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets"], "caffe2.python.layer_test_util.LayersTestCase.model.FCWithoutBias": [], "caffe2.python.layer_test_util.OpSpec": [], "caffe2.python.layer_test_util.LayersTestCase.model.input_feature_schema.float_features": [], "layers_test.TestLayers.testFCWithBootstrap": ["<builtin>.len", "caffe2.python.layer_model_instantiator.generate_predict_net", "caffe2.python.core.BlobReference", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "<builtin>.enumerate", "<builtin>.list", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.layer_test_util.LayersTestCase.model.FCWithBootstrap"], "caffe2.python.layer_test_util.LayersTestCase.model.FCWithBootstrap": [], "caffe2.python.layer_model_instantiator.generate_predict_net": [], "layers_test.TestLayers.testFCwithAxis2": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.FC", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.FC": [], "layers_test.TestLayers.testFCTransposed": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.FC", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct"], "layers_test.TestLayers.testFCTransposedWithMaxFCSize": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.FC", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct"], "layers_test.TestLayers.testSparseLookupSumPoolingWithEviction": ["caffe2.python.schema.Scalar", "caffe2.python.schema.ListWithEvicted", "caffe2.python.workspace.FetchBlob", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup", "caffe2.python.layer_test_util.LayersTestCase.assertEquals", "caffe2.python.workspace.RunNetOnce", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct", "caffe2.python.workspace.FeedBlob", "numpy.array"], "caffe2.python.schema.Metadata": [], "caffe2.python.schema.ListWithEvicted": [], "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup": [], "caffe2.python.layer_test_util.LayersTestCase.assertEquals": [], "layers_test.TestLayers.testSparseLookupSumPooling": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.List", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct"], "layers_test.TestLayers": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.arrays", "hypothesis.given", "hypothesis.strategies.booleans"], "layers_test.TestLayers.testSparseFeatureHashIdList": ["<builtin>.len", "caffe2.python.schema.Scalar", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.List", "caffe2.python.schema.Metadata", "caffe2.python.layer_test_util.LayersTestCase.model.SparseFeatureHash"], "caffe2.python.layer_test_util.LayersTestCase.model.SparseFeatureHash": [], "layers_test.TestLayers.testSparseFeatureHashIdScoreList": ["<builtin>.len", "caffe2.python.schema.Scalar", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Metadata", "caffe2.python.layer_test_util.LayersTestCase.model.SparseFeatureHash", "caffe2.python.schema.Map"], "caffe2.python.schema.Map": [], "layers_test.TestLayers.testSparseLookupIncorrectPositionWeightedOnIdList": ["caffe2.python.schema.Scalar", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup", "caffe2.python.layer_test_util.LayersTestCase.assertRaises", "caffe2.python.schema.List", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct"], "layers_test.TestLayers.testSparseLookupPositionWeightedOnIdList": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.layer_test_util.LayersTestCase.model.PositionWeighted", "caffe2.python.layers.layers.get_key", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.List", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct", "caffe2.python.schema.Map"], "caffe2.python.layer_test_util.LayersTestCase.model.PositionWeighted": [], "caffe2.python.layers.layers.get_key": [], "layers_test.TestLayers.testSparseLookupPositionWeightedOnIdScoreList": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct", "caffe2.python.schema.Map"], "layers_test.TestLayers.testSparseLookupIncorrectRecencyWeightedOnIdList": ["caffe2.python.schema.Scalar", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup", "caffe2.python.layer_test_util.LayersTestCase.assertRaises", "caffe2.python.schema.List", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct"], "layers_test.TestLayers.testSparseLookupRecencyWeightedOnIdScoreList": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct", "caffe2.python.schema.Map"], "layers_test.TestLayers.testPairwiseSimilarityWithAllEmbeddings": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.model.PairwiseSimilarity"], "caffe2.python.layer_test_util.LayersTestCase.model.PairwiseSimilarity": [], "layers_test.TestLayers.testPairwiseSimilarityWithXandYEmbeddings": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.model.PairwiseSimilarity"], "layers_test.TestLayers.testPairwiseSimilarityWithXandYEmbeddingsAndGather": ["<builtin>.len", "caffe2.python.schema.Scalar", "<builtin>.str", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.layer_test_util.LayersTestCase.model.add_global_constant", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.model.net.NextScopedBlob", "caffe2.python.layer_test_util.LayersTestCase.model.PairwiseSimilarity"], "caffe2.python.layer_test_util.LayersTestCase.model.net.NextScopedBlob": [], "caffe2.python.layer_test_util.LayersTestCase.model.add_global_constant": [], "layers_test.TestLayers.testPairwiseSimilarityIncorrectInput": ["caffe2.python.schema.Scalar", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertRaises", "caffe2.python.schema.List", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.model.PairwiseSimilarity"], "layers_test.TestLayers.testConcat": ["<builtin>.len", "caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.model.Concat", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.Concat": [], "layers_test.TestLayers.testSamplingTrain": ["<builtin>.len", "caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.input_feature_schema.float_features", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.LayersTestCase.model.SamplingTrain", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.SamplingTrain": [], "layers_test.TestLayers.testBatchLRLoss": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.model.BatchLRLoss", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.Struct"], "layers_test.TestLayers.testBatchLRLossWithUncertainty": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.model.BatchLRLoss", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.Struct"], "layers_test.TestLayers.testMarginRankLoss": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.run_train_net_forward_only", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.FeedRecord", "caffe2.python.schema.List", "caffe2.python.layer_test_util.LayersTestCase.model.MarginRankLoss", "caffe2.python.schema.Struct", "numpy.array"], "caffe2.python.layer_test_util.LayersTestCase.model.MarginRankLoss": [], "caffe2.python.layer_test_util.LayersTestCase.run_train_net_forward_only": [], "layers_test.TestLayers.testBPRLoss": ["caffe2.python.schema.Scalar", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_array_almost_equal", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.run_train_net_forward_only", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.FeedRecord", "caffe2.python.schema.List", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.model.BPRLoss", "numpy.array"], "caffe2.python.layer_test_util.LayersTestCase.model.BPRLoss": [], "layers_test.TestLayers.testBatchMSELoss": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.BatchMSELoss", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.BatchMSELoss": [], "layers_test.TestLayers.testBatchHuberLoss": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.BatchHuberLoss", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.BatchHuberLoss": [], "layers_test.TestLayers.testBatchSigmoidCrossEntropyLoss": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.BatchSigmoidCrossEntropyLoss", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.BatchSigmoidCrossEntropyLoss": [], "layers_test.TestLayers.testBatchSoftmaxLoss": ["caffe2.python.schema.Scalar", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.BatchSoftmaxLoss"], "caffe2.python.layer_test_util.LayersTestCase.model.BatchSoftmaxLoss": [], "layers_test.TestLayers.testBatchSoftmaxLossWeight": ["caffe2.python.schema.Scalar", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.tuple", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.BatchSoftmaxLoss"], "layers_test.TestLayers.testBatchNormalization": ["caffe2.python.layer_test_util.LayersTestCase.model.BatchNormalization", "caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.BatchNormalization": [], "layers_test.TestLayers.testLayerNormalization": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.layer_test_util.LayersTestCase.model.LayerNormalization", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.LayerNormalization": [], "layers_test.TestLayers.testLastNWindowCollector": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.testing.assert_array_equal", "caffe2.python.layer_test_util.LayersTestCase.model.LastNWindowCollector", "caffe2.python.schema.FeedRecord", "caffe2.python.schema.FetchRecord", "<builtin>.max", "caffe2.python.layer_test_util.LayersTestCase.run_train_net_forward_only"], "caffe2.python.layer_test_util.LayersTestCase.model.LastNWindowCollector": [], "caffe2.python.schema.FetchRecord": [], "layers_test.TestLayers.testReservoirSamplingWithID": ["caffe2.python.workspace.SerializeBlob", "caffe2.python.schema.Scalar", "<builtin>.str", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.testing.assert_array_equal", "caffe2.python.layer_test_util.LayersTestCase.model.ReservoirSampling", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.model.PackRecords", "caffe2.python.workspace.DeserializeBlob", "caffe2.python.layer_model_instantiator.generate_training_nets_forward_only", "caffe2.python.workspace.CreateNet", "caffe2.python.schema.FetchRecord", "caffe2.python.schema.Struct", "caffe2.python.workspace.RunNet", "numpy.array"], "caffe2.python.layer_test_util.LayersTestCase.model.PackRecords": [], "caffe2.python.layer_test_util.LayersTestCase.model.ReservoirSampling": [], "caffe2.python.layer_model_instantiator.generate_training_nets_forward_only": [], "caffe2.python.workspace.SerializeBlob": [], "caffe2.python.workspace.DeserializeBlob": [], "layers_test.TestLayers.testUniformSampling": ["<builtin>.len", "caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.model.UniformSampling", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.testing.assert_array_equal", "<builtin>.float", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.FeedRecord", "numpy.testing.assert_almost_equal", "caffe2.python.layer_test_util.LayersTestCase.run_train_net", "numpy.array"], "caffe2.python.layer_test_util.LayersTestCase.model.UniformSampling": [], "caffe2.python.layer_test_util.LayersTestCase.run_train_net": [], "layers_test.TestLayers.testUniformSamplingWithIncorrectSampleSize": ["caffe2.python.layer_test_util.LayersTestCase.assertRaises", "caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.model.UniformSampling", "caffe2.python.layer_test_util.LayersTestCase.new_record"], "layers_test.TestLayers.testGatherRecord": ["caffe2.python.schema.Scalar", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.run_train_net_forward_only", "caffe2.python.layer_test_util.LayersTestCase.model.GatherRecord", "numpy.testing.assert_array_equal", "caffe2.python.schema.equal_schemas", "<builtin>.range", "caffe2.python.schema.FeedRecord", "<builtin>.list", "caffe2.python.schema.List", "numpy.concatenate", "caffe2.python.schema.Struct", "numpy.array", "caffe2.python.layer_test_util.LayersTestCase.assertTrue"], "caffe2.python.layer_test_util.LayersTestCase.model.GatherRecord": [], "caffe2.python.schema.equal_schemas": [], "caffe2.python.layer_test_util.LayersTestCase.assertTrue": [], "layers_test.TestLayers.testMapToRange": ["caffe2.python.schema.Scalar", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.testing.assert_array_equal", "caffe2.python.layer_test_util.LayersTestCase.model.MapToRange", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct", "numpy.array"], "caffe2.python.layer_test_util.LayersTestCase.model.MapToRange": [], "layers_test.TestLayers.testSelectRecordByContext": ["caffe2.python.layer_test_util.LayersTestCase.model.SelectRecordByContext", "caffe2.python.layer_test_util.LayersTestCase.model.Log", "caffe2.python.layer_model_instantiator.generate_predict_net", "caffe2.python.layer_model_instantiator.generate_eval_net", "numpy.testing.assert_array_equal", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "numpy.log", "caffe2.python.layer_model_instantiator.generate_training_nets_forward_only", "caffe2.python.schema.FetchRecord", "caffe2.python.layers.tags.Tags", "caffe2.python.schema.Struct", "numpy.array"], "caffe2.python.layers.tags.Tags": [], "caffe2.python.layer_test_util.LayersTestCase.model.Log": [], "caffe2.python.layer_test_util.LayersTestCase.model.SelectRecordByContext": [], "caffe2.python.layer_model_instantiator.generate_eval_net": [], "layers_test.TestLayers.testFunctionalLayer": ["<builtin>.len", "caffe2.python.layer_model_instantiator.generate_predict_net", "caffe2.python.layer_test_util.LayersTestCase.model.input_feature_schema.float_features", "caffe2.python.layer_test_util.LayersTestCase.model.FC", "caffe2.python.layer_test_util.LayersTestCase.model.Functional"], "layers_test.TestLayers.testFunctionalLayer.normalize": [], "caffe2.python.layer_test_util.LayersTestCase.model.Functional": [], "layers_test.TestLayers.testFunctionalLayerHelper": ["<builtin>.len", "caffe2.python.layer_model_instantiator.generate_predict_net", "caffe2.python.layer_test_util.LayersTestCase.model.input_feature_schema.float_features", "caffe2.python.layer_test_util.LayersTestCase.model.Sub", "caffe2.python.layer_test_util.LayersTestCase.model.FC", "caffe2.python.layer_test_util.LayersTestCase.model.ReduceFrontMean", "caffe2.python.schema.Tuple"], "caffe2.python.layer_test_util.LayersTestCase.model.ReduceFrontMean": [], "caffe2.python.schema.Tuple": [], "caffe2.python.layer_test_util.LayersTestCase.model.Sub": [], "layers_test.TestLayers.testFunctionalLayerHelperAutoInference": ["<builtin>.len", "caffe2.python.layer_model_instantiator.generate_predict_net", "caffe2.python.layer_test_util.LayersTestCase.model.input_feature_schema.float_features", "caffe2.python.layer_test_util.LayersTestCase.model.FC", "caffe2.python.layer_test_util.LayersTestCase.model.Softsign", "caffe2.python.schema.Tuple"], "caffe2.python.layer_test_util.LayersTestCase.model.Softsign": [], "layers_test.TestLayers.testHalfToFloatTypeInference": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.model.FloatToHalf", "caffe2.python.layer_test_util.LayersTestCase.model.HalfToFloat"], "caffe2.python.layer_test_util.LayersTestCase.model.FloatToHalf": [], "caffe2.python.layer_test_util.LayersTestCase.model.HalfToFloat": [], "layers_test.TestLayers.testFunctionalLayerHelperAutoInferenceScalar": ["<builtin>.len", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.AveragedLoss", "<builtin>.tuple"], "caffe2.python.layer_test_util.LayersTestCase.model.AveragedLoss": [], "layers_test.TestLayers.testFunctionalLayerInputCoercion": ["caffe2.python.layer_test_util.LayersTestCase.run_train_net", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.model.Add", "numpy.testing.assert_array_equal"], "caffe2.python.layer_test_util.LayersTestCase.model.Add": [], "layers_test.TestLayers.testFunctionalLayerWithOutputNames": ["<builtin>.len", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.TopK"], "caffe2.python.layer_test_util.LayersTestCase.model.TopK": [], "layers_test.TestLayers.testFunctionalLayerSameOperatorOutputNames": ["caffe2.python.layer_test_util.LayersTestCase.assertNotEqual", "<builtin>.str", "caffe2.python.layer_test_util.LayersTestCase.model.ConstantFill"], "caffe2.python.layer_test_util.LayersTestCase.model.ConstantFill": [], "caffe2.python.layer_test_util.LayersTestCase.assertNotEqual": [], "layers_test.TestLayers.testFunctionalLayerWithOutputDtypes": ["<builtin>.len", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.AveragedLoss"], "layers_test.TestLayers.testPropagateRequestOnly": ["caffe2.python.schema.Scalar", "caffe2.python.layers.layers.set_request_only", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.model.Concat", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layers.layers.is_request_only_scalar", "caffe2.python.schema.Struct"], "caffe2.python.layers.layers.set_request_only": [], "caffe2.python.layers.layers.is_request_only_scalar": [], "layers_test.TestLayers.testSetRequestOnly": ["caffe2.python.schema.Scalar", "caffe2.python.layers.layers.set_request_only", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.schema.FeatureSpec", "caffe2.python.schema.Metadata", "caffe2.python.schema.attach_metadata_to_scalars"], "caffe2.python.schema.FeatureSpec": [], "caffe2.python.schema.attach_metadata_to_scalars": [], "layers_test.TestLayers.testDropout": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.model.Dropout", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Struct"], "caffe2.python.layer_test_util.LayersTestCase.model.Dropout": [], "layers_test.TestLayers.testMergeIdListsLayer": ["caffe2.python.schema.Scalar", "caffe2.python.schema.equal_schemas", "<builtin>.range", "caffe2.python.schema.NewRecord", "caffe2.python.schema.FeedRecord", "caffe2.python.schema.List", "caffe2.python.schema.Metadata", "caffe2.python.layer_test_util.LayersTestCase.model.MergeIdLists", "numpy.random.randint", "caffe2.python.schema.Tuple"], "caffe2.python.layer_test_util.LayersTestCase.model.MergeIdLists": [], "layers_test.TestLayers.testRandomFourierFeatures": ["caffe2.python.schema.Scalar", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.sqrt", "numpy.random.random", "layers_test.TestLayers._test_net", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "layers_test.TestLayers.testRandomFourierFeatures._rff_hypothesis_test", "caffe2.python.layer_test_util.LayersTestCase.model.RandomFourierFeatures", "caffe2.python.schema.Struct"], "layers_test.TestLayers.testRandomFourierFeatures._rff_hypothesis_test": ["numpy.transpose", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_allclose", "numpy.cos", "numpy.dot"], "numpy.transpose": [], "numpy.random.random": [], "caffe2.python.layer_test_util.LayersTestCase.model.RandomFourierFeatures": [], "layers_test.TestLayers.testArcCosineFeatureMap": ["caffe2.python.schema.Scalar", "caffe2.python.schema.Struct", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.model.ArcCosineFeatureMap", "<builtin>.float", "layers_test.TestLayers._test_net", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.layer_test_util.LayersTestCase.model.create_init_net", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.random.normal", "layers_test.TestLayers.testArcCosineFeatureMap._arc_cosine_hypothesis_test"], "layers_test.TestLayers.testArcCosineFeatureMap._arc_cosine_hypothesis_test": ["numpy.transpose", "caffe2.python.workspace.FetchBlob", "numpy.multiply", "numpy.piecewise", "numpy.matmul", "numpy.testing.assert_allclose", "numpy.power"], "numpy.piecewise": [], "layers_test.TestLayers.testArcCosineFeatureMap._arc_cosine_hypothesis_test.<list4>.<lambda1>": [], "numpy.random.normal": [], "caffe2.python.layer_test_util.LayersTestCase.model.ArcCosineFeatureMap": [], "caffe2.python.layer_test_util.LayersTestCase.model.create_init_net": [], "layers_test.TestLayers.testSemiRandomFeatures": ["caffe2.python.schema.Scalar", "caffe2.python.schema.Struct", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.float", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "layers_test.TestLayers._test_net", "layers_test.TestLayers.testSemiRandomFeatures._semi_random_hypothesis_test", "caffe2.python.layer_test_util.LayersTestCase.model.create_init_net", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.layer_test_util.LayersTestCase.model.SemiRandomFeatures", "numpy.random.normal"], "layers_test.TestLayers.testSemiRandomFeatures._semi_random_hypothesis_test": ["numpy.transpose", "caffe2.python.workspace.FetchBlob", "numpy.multiply", "numpy.piecewise", "numpy.matmul", "numpy.testing.assert_allclose", "numpy.power"], "layers_test.TestLayers.testSemiRandomFeatures._semi_random_hypothesis_test.<list4>.<lambda1>": [], "caffe2.python.layer_test_util.LayersTestCase.model.SemiRandomFeatures": [], "layers_test.TestLayers.testConv": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.random.random", "caffe2.python.layer_test_util.LayersTestCase.model.Conv", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.FetchRecord", "caffe2.python.layer_test_util.LayersTestCase.run_train_net_forward_only"], "caffe2.python.layer_test_util.LayersTestCase.model.Conv": [], "layers_test.TestLayers.testAdaptiveWeight": ["<builtin>.len", "caffe2.python.layer_test_util.LayersTestCase.model.AdaptiveWeight", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.random.random", "<builtin>.range", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "numpy.log", "numpy.sum", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.testing.assert_allclose", "numpy.array", "caffe2.python.schema.RawTuple"], "caffe2.python.schema.RawTuple": [], "caffe2.python.layer_test_util.LayersTestCase.model.AdaptiveWeight": [], "layers_test.TestLayers.testConstantWeight": ["caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.random.random", "caffe2.python.layer_test_util.LayersTestCase.model.ConstantWeight", "caffe2.python.schema.FeedRecord", "caffe2.python.workspace.RunNetOnce", "numpy.sum", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.testing.assert_allclose", "numpy.array", "caffe2.python.schema.RawTuple"], "caffe2.python.layer_test_util.LayersTestCase.model.ConstantWeight": [], "layers_test.TestLayers.testHomotopyWeight": ["caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.random.random", "caffe2.python.layer_test_util.LayersTestCase.model.HomotopyWeight", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.workspace.CreateNet", "numpy.testing.assert_allclose", "numpy.array", "caffe2.python.workspace.RunNet", "caffe2.python.schema.RawTuple", "<builtin>.int"], "caffe2.python.layer_test_util.LayersTestCase.model.HomotopyWeight": [], "layers_test.TestLayers._testLabelSmooth": ["caffe2.python.schema.Scalar", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "numpy.random.random", "caffe2.python.layer_test_util.LayersTestCase.model.LabelSmooth", "caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.FeedRecord", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.testing.assert_allclose", "numpy.random.randint", "numpy.array", "<builtin>.int"], "caffe2.python.layer_test_util.LayersTestCase.model.LabelSmooth": [], "layers_test.TestLayers.testLabelSmoothForCategoricalLabel": ["layers_test.TestLayers._testLabelSmooth"], "layers_test.TestLayers.testLabelSmoothForBinaryProbLabel": ["layers_test.TestLayers._testLabelSmooth"], "layers_test.TestLayers.testBlobWeightedSum": ["caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.schema.equal_schemas", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.new_record", "<builtin>.range", "caffe2.python.schema.Tuple", "<builtin>.len", "caffe2.python.schema.Scalar", "numpy.random.random", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.LayersTestCase.model.BlobWeightedSum", "caffe2.python.schema.FeedRecord", "caffe2.python.workspace.RunNetOnce", "layers_test.TestLayers.testBlobWeightedSum.get_blob_weighted_sum", "caffe2.python.layer_test_util.LayersTestCase.run_train_net_forward_only", "numpy.testing.assert_almost_equal", "numpy.random.seed"], "layers_test.TestLayers.testBlobWeightedSum.get_blob_weighted_sum": ["caffe2.python.workspace.HasBlob", "<builtin>.range", "caffe2.python.workspace.FetchBlob", "numpy.sum"], "caffe2.python.layer_test_util.LayersTestCase.model.BlobWeightedSum": [], "layers_test.TestLayers.testFeatureSparseToDenseGetAccessedFeatures": ["<builtin>.len", "caffe2.python.layer_test_util.LayersTestCase.new_record", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "<builtin>.set", "caffe2.python.layer_test_util.LayersTestCase.model.FeatureSparseToDense", "caffe2.python.schema.List", "caffe2.python.schema.FeatureSpec", "caffe2.python.layers.layers.AccessedFeatures", "caffe2.python.schema.Struct", "caffe2.python.schema.Map"], "caffe2.python.layer_test_util.LayersTestCase.model.FeatureSparseToDense": [], "caffe2.python.layers.layers.AccessedFeatures": [], "layers_test.TestLayers.test_get_key": ["caffe2.python.schema.Scalar", "caffe2.python.layers.layers.get_key", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "layers_test.TestLayers.test_get_key.old_get_sparse_key_logic", "caffe2.python.schema.List", "caffe2.python.schema.Metadata", "caffe2.python.schema.Map"], "layers_test.TestLayers.test_get_key._is_id_list": ["caffe2.python.layers.layers.almost_equal_schemas"], "caffe2.python.layers.layers.almost_equal_schemas": [], "layers_test.TestLayers.test_get_key._is_id_score_list": ["caffe2.python.layers.layers.almost_equal_schemas"], "layers_test.TestLayers.test_get_key.old_get_sparse_key_logic": ["layers_test.TestLayers.test_get_key._is_id_list", "<builtin>.NotImplementedError", "layers_test.TestLayers.test_get_key._is_id_score_list"], "layers_test.TestLayers.testSparseLookupWithAttentionWeightOnIdScoreList": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.assertNetContainOps", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.model.SparseLookup", "caffe2.python.layer_test_util.OpSpec", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct", "caffe2.python.schema.Map"], "layers_test.TestLayers.testSparseItemwiseDropoutWithReplacement": ["caffe2.python.schema.Scalar", "caffe2.python.layer_test_util.LayersTestCase.get_eval_net", "caffe2.python.workspace.FetchBlob", "caffe2.python.layer_test_util.LayersTestCase.assertBlobsEqual", "caffe2.python.schema.NewRecord", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.layer_test_util.LayersTestCase.get_predict_net", "caffe2.python.workspace.RunNetOnce", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.schema.List", "caffe2.python.layer_test_util.LayersTestCase.model.SparseItemwiseDropoutWithReplacement", "caffe2.python.schema.Struct", "caffe2.python.workspace.FeedBlob", "numpy.array"], "caffe2.python.layer_test_util.LayersTestCase.model.SparseItemwiseDropoutWithReplacement": [], "layer_model_helper": ["logging.getLogger"], "layer_model_helper.LayerModelHelper.__init__": ["caffe2.python.schema.NewRecord", "<builtin>.set", "layer_model_helper.LayerModelHelper._init_global_constants", "layer_model_helper.LayerModelHelper.create_init_net", "<builtin>.super", "caffe2.python.schema.Struct"], "layer_model_helper.LayerModelHelper._init_global_constants": ["<builtin>.float", "layer_model_helper.LayerModelHelper.add_global_constant"], "layer_model_helper.LayerModelHelper.create_init_net": ["caffe2.python.core.Net", "layer_model_helper.LayerModelHelper._add_global_constants"], "layer_model_helper.LayerModelHelper.clear_output_schema": [], "layer_model_helper.LayerModelHelper.set_initialize_params": [], "layer_model_helper.LayerModelHelper.add_metric_field": ["caffe2.python.schema.Struct"], "layer_model_helper.LayerModelHelper.filter_metrics_schema": ["caffe2.python.schema.Scalar", "caffe2.python.schema.Struct"], "layer_model_helper.LayerModelHelper.add_ad_hoc_plot_blob": ["<builtin>.isinstance", "caffe2.python.schema.Scalar", "<builtin>.type", "layer_model_helper.LayerModelHelper.add_metric_field", "<builtin>.str"], "layer_model_helper.LayerModelHelper._get_global_constant_initializer_op": ["numpy.array"], "layer_model_helper.LayerModelHelper._get_global_constant_initializer_op.initializer": ["caffe2.python.core.CreateOperator"], "layer_model_helper.LayerModelHelper.add_global_constant": ["layer_model_helper.LayerModelHelper._get_global_constant_initializer_op", "caffe2.python.model_helper.ModelHelper.net.NextBlob", "<builtin>.isinstance"], "caffe2.python.model_helper.ModelHelper.net.NextBlob": [], "layer_model_helper.LayerModelHelper.maybe_add_global_constant": ["layer_model_helper.LayerModelHelper._get_global_constant_initializer_op", "<builtin>.str", "layer_model_helper.LayerModelHelper.add_global_constant", "caffe2.python.utils.OpAlmostEqual"], "caffe2.python.utils.OpAlmostEqual": [], "layer_model_helper.LayerModelHelper._add_global_constants": ["future.utils.viewvalues"], "layer_model_helper.LayerModelHelper._validate_param_shape": ["<builtin>.ValueError", "caffe2.python.scope.CurrentNameScope"], "layer_model_helper.LayerModelHelper._validate_param_optim": ["<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance"], "layer_model_helper.LayerModelHelper.create_param": ["<builtin>.isinstance", "caffe2.python.core.BlobReference", "layer_model_helper.LayerModelHelper._validate_param_optim", "caffe2.python.core.CreateOperator", "caffe2.python.modeling.parameter_sharing.parameter_sharing_context.get_parameter_name", "<builtin>.str", "copy.deepcopy", "<builtin>.len", "layer_model_helper.LayerModelHelper._validate_param_shape", "<builtin>.ValueError"], "caffe2.python.modeling.parameter_sharing.parameter_sharing_context.get_parameter_name": [], "layer_model_helper.LayerModelHelper.next_layer_name": ["<builtin>.str", "caffe2.python.core.ScopedName"], "caffe2.python.core.ScopedName": [], "layer_model_helper.LayerModelHelper.add_layer": ["<builtin>.ValueError", "<builtin>.isinstance", "caffe2.python.model_helper.ModelHelper.params.append", "<builtin>.str"], "caffe2.python.model_helper.ModelHelper.params.append": [], "layer_model_helper.LayerModelHelper.get_parameter_blobs": [], "layer_model_helper.LayerModelHelper.add_post_grad_net_modifiers": ["<builtin>.isinstance"], "layer_model_helper.LayerModelHelper.add_final_net_modifiers": ["<builtin>.isinstance"], "layer_model_helper.LayerModelHelper.seed": [], "layer_model_helper.LayerModelHelper.sequence_seed": [], "layer_model_helper.LayerModelHelper.store_seed": [], "layer_model_helper.LayerModelHelper.apply_seed": [], "layer_model_helper.LayerModelHelper.default_optimizer": [], "layer_model_helper.LayerModelHelper.input_feature_schema": [], "layer_model_helper.LayerModelHelper.trainer_extra_schema": [], "layer_model_helper.LayerModelHelper.metrics_schema": [], "layer_model_helper.LayerModelHelper.output_schema": [], "layer_model_helper.LayerModelHelper.preproc_output_schema": [], "layer_model_helper.LayerModelHelper.prediction": [], "layer_model_helper.LayerModelHelper.add_prediction": [], "layer_model_helper.LayerModelHelper.transfer_learning_blob_name_mappings": [], "layer_model_helper.LayerModelHelper.loss": [], "layer_model_helper.LayerModelHelper.has_loss": [], "layer_model_helper.LayerModelHelper.add_loss": ["<builtin>.str", "<builtin>.isinstance", "caffe2.python.schema.Struct"], "layer_model_helper.LayerModelHelper.add_output_schema": ["<builtin>.type", "<builtin>.isinstance", "caffe2.python.schema.Struct"], "layer_model_helper.LayerModelHelper.add_trainer_extra_schema": ["caffe2.python.schema.NewRecord"], "layer_model_helper.LayerModelHelper.__getattr__": ["<builtin>.AttributeError", "layer_model_helper.LayerModelHelper.__getattr__.resolve_functional_layer", "layer_model_helper.LayerModelHelper.__getattr__.is_functional_layer"], "layer_model_helper.LayerModelHelper.__getattr__.is_functional_layer": ["caffe2.python.core.IsOperator"], "layer_model_helper.LayerModelHelper.__getattr__.resolve_functional_layer": ["<builtin>.ValueError", "caffe2.python.core.IsOperator", "<builtin>.len"], "layer_model_helper.LayerModelHelper.__getattr__.wrapper": ["layer_model_helper.LayerModelHelper.add_layer"], "layer_model_helper.LayerModelHelper.__getattr__.wrapper.apply_operator": [], "layer_model_helper.LayerModelHelper.layers": [], "layer_model_helper.LayerModelHelper.apply_regularizers_on_loss": ["future.utils.viewitems", "<builtin>.isinstance", "caffe2.python.schema.Scalar", "layer_model_helper.LayerModelHelper.add_loss", "<builtin>.str"], "layer_model_helper.LayerModelHelper.apply_regularizers_after_optimizer": ["caffe2.python.muji.OnCPU", "future.utils.viewitems", "<builtin>.isinstance", "<builtin>.str", "caffe2.python.core.DeviceScope", "caffe2.python.optimizer.get_param_device"], "caffe2.python.muji.OnCPU": [], "caffe2.python.optimizer.get_param_device": [], "layer_model_helper.LayerModelHelper.apply_post_grad_net_modifiers": [], "layer_model_helper.LayerModelHelper.apply_final_net_modifiers": [], "layer_model_helper.LayerModelHelper.apply_optimizers": ["caffe2.python.muji.OnCPU", "future.utils.viewitems", "<builtin>.str", "caffe2.python.core.DeviceScope", "caffe2.python.optimizer.get_param_device"], "layer_model_helper.LayerModelHelper._GetOne": [], "layer_model_helper.LayerModelHelper.NoOptim": [], "layer_model_helper.LayerModelHelper.breakdown_map": ["<builtin>.range", "<builtin>.isinstance", "<builtin>.sorted", "<builtin>.list", "<builtin>.len", "<builtin>.all"], "layer_model_instantiator": [], "layer_model_instantiator._filter_layers": ["<builtin>.set"], "layer_model_instantiator.shrink_output_schema": ["caffe2.python.schema.from_column_list", "<builtin>.zip", "<builtin>.len"], "layer_model_instantiator.generate_predict_net": ["layer_model_instantiator._filter_layers", "layer_model_instantiator.shrink_output_schema", "caffe2.python.core.Net"], "layer_model_instantiator.generate_eval_net": ["layer_model_instantiator._filter_layers", "layer_model_instantiator.shrink_output_schema", "caffe2.python.core.Net"], "layer_model_instantiator._generate_training_net_only": ["layer_model_instantiator._filter_layers", "layer_model_instantiator.shrink_output_schema", "caffe2.python.core.Net"], "layer_model_instantiator.generate_training_nets_forward_only": ["layer_model_instantiator._generate_training_net_only"], "layer_model_instantiator.generate_training_nets": ["layer_model_instantiator._generate_training_net_only"], "layer_parameter_sharing_test": [], "layer_parameter_sharing_test.ParameterSharingTest.test_layer_parameter_name": ["caffe2.python.layer_test_util.LayersTestCase.assertEquals", "caffe2.python.scope.NameScope", "caffe2.python.layer_test_util.LayersTestCase.model.FC"], "layer_parameter_sharing_test.ParameterSharingTest.test_layer_shared_parameter_name_different_namescopes": ["caffe2.python.layer_test_util.LayersTestCase.assertEquals", "caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.scope.NameScope", "caffe2.python.layer_test_util.LayersTestCase.model.FC"], "caffe2.python.modeling.parameter_sharing.ParameterSharing": [], "layer_parameter_sharing_test.ParameterSharingTest.test_layer_shared_parameter_name_within_same_namescope": ["caffe2.python.layer_test_util.LayersTestCase.assertEquals", "caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.scope.NameScope", "caffe2.python.layer_test_util.LayersTestCase.model.FC"], "layer_parameter_sharing_test.ParameterSharingTest.test_layer_shared_parameter_name_within_same_namescope_customized_name": ["caffe2.python.layer_test_util.LayersTestCase.assertEquals", "caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.scope.NameScope", "caffe2.python.layer_test_util.LayersTestCase.model.FC"], "layer_parameter_sharing_test.ParameterSharingTest.test_layer_shared_parameter_name_different_shapes": ["caffe2.python.layer_test_util.LayersTestCase.assertEquals", "caffe2.python.layer_test_util.LayersTestCase.assertRaisesRegex", "caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.scope.NameScope", "caffe2.python.layer_test_util.LayersTestCase.model.FC"], "caffe2.python.layer_test_util.LayersTestCase.assertRaisesRegex": [], "layer_parameter_sharing_test.ParameterSharingTest.test_layer_duplicated_parameter_init": ["caffe2.python.layer_test_util.LayersTestCase.assertEquals", "caffe2.python.layer_test_util.LayersTestCase.model.layers.add_operators", "caffe2.python.core.Net", "<builtin>.sorted", "caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.scope.NameScope", "caffe2.python.layer_test_util.LayersTestCase.model.FC"], "caffe2.python.layer_test_util.LayersTestCase.model.layers.add_operators": [], "layer_parameter_sharing_test.ParameterSharingTest.test_layer_shared_parameter_optim_validator": ["caffe2.python.optimizer.AdamOptimizer", "caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.scope.NameScope", "caffe2.python.layer_test_util.LayersTestCase.model.FC", "caffe2.python.optimizer.AdagradOptimizer", "caffe2.python.layer_test_util.LayersTestCase.assertRaises"], "caffe2.python.optimizer.AdagradOptimizer": [], "caffe2.python.optimizer.AdamOptimizer": [], "layer_test_util": [], "layer_test_util.OpSpec.__new__": ["<builtin>.super"], "layer_test_util.LayersTestCase.setUp": ["<builtin>.super", "layer_test_util.LayersTestCase.setup_example"], "layer_test_util.LayersTestCase.setup_example": ["layer_test_util.LayersTestCase.reset_model", "caffe2.python.workspace.ResetWorkspace"], "layer_test_util.LayersTestCase.reset_model": ["caffe2.python.schema.Scalar", "caffe2.python.schema.Struct", "caffe2.python.layer_model_helper.LayerModelHelper"], "caffe2.python.layer_model_helper.LayerModelHelper": [], "layer_test_util.LayersTestCase.new_record": ["caffe2.python.schema.NewRecord"], "layer_test_util.LayersTestCase.get_training_nets": ["caffe2.python.core.Net"], "layer_test_util.LayersTestCase.get_eval_net": ["caffe2.python.layer_model_instantiator.generate_eval_net"], "layer_test_util.LayersTestCase.get_predict_net": ["caffe2.python.layer_model_instantiator.generate_predict_net"], "layer_test_util.LayersTestCase.run_train_net": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.Struct", "caffe2.python.layer_model_instantiator.generate_training_nets"], "caffe2.python.layer_model_instantiator.generate_training_nets": [], "layer_test_util.LayersTestCase.run_train_net_forward_only": ["caffe2.python.schema.Struct", "caffe2.python.workspace.CreateNet", "caffe2.python.layer_model_instantiator.generate_training_nets_forward_only", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet"], "layer_test_util.LayersTestCase.assertBlobsEqual": ["caffe2.python.test_util.TestCase.assertEqual", "<builtin>.zip", "<builtin>.len"], "layer_test_util.LayersTestCase.assertArgsEqual": ["caffe2.python.test_util.TestCase.assertEqual", "layer_test_util.LayersTestCase.assertArgsEqual.parse_args", "<builtin>.len"], "layer_test_util.LayersTestCase.assertArgsEqual.parse_args": ["caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.python.utils.MakeArgument"], "layer_test_util.LayersTestCase.assertNetContainOps": ["caffe2.python.test_util.TestCase.assertEqual", "<builtin>.zip", "<builtin>.len", "layer_test_util.LayersTestCase.assertArgsEqual", "layer_test_util.LayersTestCase.assertBlobsEqual"], "lazy": [], "lazy.RegisterLazyImport": [], "lazy.TriggerLazyImport": [], "lazy_dyndep": ["caffe2.python.lazy.RegisterLazyImport", "<builtin>.set"], "lazy_dyndep.RegisterOpsLibrary": ["os.path.exists", "<builtin>.print"], "lazy_dyndep.SetErrorHandler": [], "lazy_dyndep.GetImportedOpsLibraries": ["caffe2.python.dyndep.GetImportedOpsLibraries", "lazy_dyndep._import_lazy"], "lazy_dyndep._import_lazy": ["caffe2.python.dyndep.InitOpLibrary", "<builtin>.list"], "caffe2.python.dyndep.GetImportedOpsLibraries": [], "caffe2.python.dyndep.InitOpLibrary": [], "caffe2.python.lazy.RegisterLazyImport": [], "lazy_dyndep_test": ["unittest.main"], "lazy_dyndep_test.TemporaryDirectory.__enter__": ["tempfile.mkdtemp"], "lazy_dyndep_test.TemporaryDirectory.__exit__": ["shutil.rmtree"], "lazy_dyndep_test.allcompare_process": ["caffe2.python.data_parallel_model._RunComparison", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceOption", "<builtin>.dict", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.lazy_dyndep.RegisterOpsLibrary", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.lazy_dyndep.RegisterOpsLibrary": [], "lazy_dyndep_test.TestLazyDynDepAllCompare": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.settings"], "lazy_dyndep_test.TestLazyDynDepAllCompare.test_allcompare": ["<builtin>.len", "<builtin>.tuple", "numpy.random.randint", "numpy.random.ranf", "<builtin>.range", "multiprocessing.Process"], "lazy_dyndep_test.TestLazyDynDepError.test_errorhandler": ["tempfile.NamedTemporaryFile", "unittest.TestCase.assertRaises", "caffe2.python.lazy_dyndep.SetErrorHandler", "caffe2.python.core.RefreshRegisteredOperators", "caffe2.python.lazy_dyndep.RegisterOpsLibrary"], "lazy_dyndep_test.TestLazyDynDepError.test_errorhandler.handler": ["<builtin>.ValueError"], "caffe2.python.lazy_dyndep.SetErrorHandler": [], "lazy_dyndep_test.TestLazyDynDepError.test_importaftererror": ["tempfile.NamedTemporaryFile", "unittest.TestCase.assertRaises", "caffe2.python.lazy_dyndep.SetErrorHandler", "caffe2.python.core.RefreshRegisteredOperators", "caffe2.python.lazy_dyndep.RegisterOpsLibrary"], "lazy_dyndep_test.TestLazyDynDepError.test_importaftererror.handler": ["<builtin>.ValueError"], "lazy_dyndep_test.TestLazyDynDepError.test_importaftererror.handlernoop": [], "lazy_dyndep_test.TestLazyDynDepError.test_workspacecreatenet": ["tempfile.NamedTemporaryFile", "unittest.TestCase.assertRaises", "caffe2.python.lazy_dyndep.SetErrorHandler", "caffe2.python.lazy_dyndep.RegisterOpsLibrary", "caffe2.python.workspace.CreateNet"], "lazy_dyndep_test.TestLazyDynDepError.test_workspacecreatenet.handler": ["<builtin>.ValueError"], "lengths_reducer_fused_8bit_rowwise_ops_test": [], "lengths_reducer_fused_8bit_rowwise_ops_test.compare_rowwise": ["numpy.amax", "numpy.isclose", "numpy.amin", "<builtin>.print", "<builtin>.range"], "numpy.amax": [], "numpy.amin": [], "lengths_reducer_fused_8bit_rowwise_ops_test.TestLengthsReducerOpsFused8BitRowwise": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.strategies.booleans"], "lengths_reducer_fused_8bit_rowwise_ops_test.TestLengthsReducerOpsFused8BitRowwise.test_sparse_lengths_sum": ["numpy.random.rand", "<builtin>.len", "lengths_reducer_fused_8bit_rowwise_ops_test.compare_rowwise", "numpy.testing.assert_array_almost_equal", "numpy.random.randint", "numpy.ones", "numpy.random.uniform", "caffe2.python.workspace.FeedBlob", "numpy.clip", "numpy.random.seed", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "numpy.zeros", "caffe2.python.core.Net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.GlobalInit"], "lengths_reducer_fused_8bit_rowwise_ops_test.TestLengthsReducerOpsFused8BitRowwise.test_sparse_lengths_mean": ["numpy.random.rand", "<builtin>.len", "lengths_reducer_fused_8bit_rowwise_ops_test.compare_rowwise", "numpy.testing.assert_array_almost_equal", "numpy.random.randint", "numpy.ones", "caffe2.python.workspace.FeedBlob", "numpy.clip", "numpy.random.seed", "<builtin>.print", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "numpy.zeros", "caffe2.python.core.Net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.GlobalInit"], "lengths_reducer_rowwise_8bit_ops_test": [], "lengths_reducer_rowwise_8bit_ops_test.FakeQuantization8BitsRowwise": ["numpy.min", "numpy.max", "numpy.round"], "lengths_reducer_rowwise_8bit_ops_test.TestQuantize8bits.test_quantize_op": ["caffe2.python.workspace.RunOperatorOnce", "lengths_reducer_rowwise_8bit_ops_test.FakeQuantization8BitsRowwise", "caffe2.python.workspace.FeedBlob", "numpy.float32", "numpy.testing.assert_array_almost_equal", "numpy.asarray", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob"], "numpy.float32": [], "lengths_reducer_rowwise_8bit_ops_test.TestQuantize8bits.test_quantize_tensor_with_const_row_op": ["caffe2.python.workspace.RunOperatorOnce", "lengths_reducer_rowwise_8bit_ops_test.FakeQuantization8BitsRowwise", "caffe2.python.workspace.FeedBlob", "numpy.float32", "numpy.testing.assert_array_almost_equal", "numpy.asarray", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob"], "lengths_reducer_rowwise_8bit_ops_test.TestQuantize8bits.test_SparseSegmentUint8": ["numpy.testing.assert_array_almost_equal", "caffe2.python.core.Net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.GlobalInit", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob"], "lstm_benchmark": ["caffe2.python.core.DeviceOption", "logging.getLogger", "caffe2.python.core.DeviceScope", "lstm_benchmark.GetArgumentParser", "lstm_benchmark.Benchmark", "logging.basicConfig", "caffe2.python.utils.debug", "caffe2.python.workspace.GlobalInit"], "lstm_benchmark.generate_data": ["caffe2.python.workspace.RunNetOnce", "<builtin>.range", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "<builtin>.max", "numpy.random.seed", "<builtin>.print", "caffe2.python.core.Net"], "lstm_benchmark.create_model": ["caffe2.python.rnn_cell.LSTM", "<builtin>.range", "<builtin>.print", "caffe2.python.recurrent.set_rnn_executor_config", "caffe2.python.model_helper.ModelHelper", "numpy.zeros", "caffe2.python.rnn_cell.cudnn_LSTM", "caffe2.python.workspace.FeedBlob"], "caffe2.python.rnn_cell.cudnn_LSTM": [], "caffe2.python.recurrent.set_rnn_executor_config": [], "lstm_benchmark.Caffe2LSTM": ["numpy.sum", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "<builtin>.range", "time.time", "caffe2.python.utils.GetGPUMemoryUsageStats", "<builtin>.min", "caffe2.python.workspace.CreateNet", "lstm_benchmark.generate_data", "lstm_benchmark.create_model", "numpy.array", "caffe2.python.workspace.FeedBlob"], "caffe2.python.utils.GetGPUMemoryUsageStats": [], "lstm_benchmark.Benchmark": ["lstm_benchmark.Caffe2LSTM"], "lstm_benchmark.GetArgumentParser": ["argparse.ArgumentParser"], "memonger": ["collections.namedtuple", "logging.getLogger"], "memonger.share_grad_blobs": ["caffe2.proto.caffe2_pb2.NetDef", "memonger.share_grad_blobs.is_grad_blob", "time.time", "<builtin>.list", "caffe2.python._import_c_extension.memonger_compute_blob_recycling_for_dag", "memonger.share_grad_blobs.is_grad_op", "<builtin>.str", "memonger.verify_inplace_blobs", "memonger.verify_graph_equality", "<builtin>.set", "<builtin>.enumerate", "copy.deepcopy"], "memonger.share_grad_blobs.is_grad_blob": ["<builtin>.str"], "memonger.share_grad_blobs.is_grad_op": ["<builtin>.list", "memonger.share_grad_blobs.is_grad_blob"], "caffe2.python._import_c_extension.memonger_compute_blob_recycling_for_dag": [], "memonger.verify_graph_equality": ["<builtin>.len", "memonger.verify_graph_equality.parent_list", "<builtin>.print", "<builtin>.zip"], "memonger.verify_inplace_blobs": ["memonger.verify_inplace_blobs.get_inplaces", "<builtin>.zip"], "memonger.optimize_inference_for_dag": ["caffe2.proto.caffe2_pb2.NetDef", "time.time", "<builtin>.list", "caffe2.python._import_c_extension.memonger_compute_blob_recycling_for_dag", "<builtin>.str", "memonger.optimize_inference_for_dag.is_activation_blob", "memonger.verify_inplace_blobs", "<builtin>.AssertionError", "memonger.verify_graph_equality", "<builtin>.set", "<builtin>.enumerate", "copy.deepcopy"], "memonger.optimize_inference_for_dag.is_activation_blob": [], "memonger.estimate_memory_usage": ["memonger.estimate_memory_usage.num_bytes", "memonger.estimate_memory_usage.split_net", "<builtin>.set", "collections.defaultdict", "<builtin>.max"], "memonger.estimate_memory_usage.split_net": [], "memonger.estimate_memory_usage.num_bytes": ["numpy.prod"], "numpy.prod": [], "memonger.estimate_memory_usage.<lambda1>": [], "memonger.release_blobs_when_used": ["<builtin>.range", "<builtin>.list", "caffe2.python.core.CreateOperator", "<builtin>.reversed", "<builtin>.len", "<builtin>.set", "copy.deepcopy"], "memonger._find_source_nodes": ["<builtin>.list"], "memonger._find_target_nodes": ["<builtin>.list"], "memonger._add_single_target_ifneeded": ["<builtin>.len", "memonger._find_target_nodes", "memonger._add_single_target_ifneeded._next_available_idx", "copy.deepcopy"], "memonger._add_single_target_ifneeded._next_available_idx": [], "memonger._get_path": ["<builtin>.min", "<builtin>.list", "<builtin>.reversed", "<builtin>.all"], "memonger._get_path.<lambda1>": [], "memonger._get_longest_paths": ["<builtin>.len", "memonger._get_path", "networkx.bellman_ford_predecessor_and_distance", "copy.deepcopy"], "networkx.bellman_ford_predecessor_and_distance": [], "memonger._build_tree": ["<builtin>.zip", "memonger._compute_tree_height", "networkx.DiGraph", "<builtin>.all"], "networkx.DiGraph": [], "memonger._compute_tree_height": ["memonger._compute_tree_height._get_height"], "memonger._compute_tree_height._get_height": ["<builtin>.list", "memonger._compute_tree_height._get_height", "<builtin>.max"], "memonger._sort_tree_leaves": ["memonger._sort_tree_leaves._get_sorted_leaves"], "memonger._sort_tree_leaves._get_height": [], "memonger._sort_tree_leaves._get_sorted_leaves": ["<builtin>.range", "memonger._sort_tree_leaves._get_sorted_leaves", "<builtin>.list", "<builtin>.len", "memonger._sort_tree_leaves._get_height", "<builtin>.sorted"], "memonger._sort_tree_leaves._get_sorted_leaves.<lambda1>": [], "memonger.topological_sort_traversal_longest_path": ["memonger._sort_tree_leaves", "memonger._add_single_target_ifneeded", "<builtin>.list", "memonger._find_source_nodes", "future.utils.viewvalues", "networkx.topological_sort", "networkx.algorithms.dag.lexicographical_topological_sort", "<builtin>.dict", "memonger._get_longest_paths", "<builtin>.len", "networkx.descendants", "<builtin>.set", "<builtin>.enumerate", "memonger._build_tree", "<builtin>.sorted"], "networkx.topological_sort": [], "networkx.descendants": [], "memonger.topological_sort_traversal_longest_path.<lambda1>": [], "networkx.algorithms.dag.lexicographical_topological_sort": [], "memonger.topological_sort_traversal": ["<builtin>.list", "networkx.topological_sort"], "memonger.compute_ranges": ["<builtin>.min", "<builtin>.enumerate", "collections.defaultdict", "<builtin>.max"], "memonger.compute_ranges.<lambda1>": [], "memonger.is_compatible": [], "memonger.compute_blob_assignments": ["<builtin>.len"], "memonger._get_max_size": ["<builtin>.max"], "memonger.get_memory_usage": ["memonger._get_max_size"], "memonger.compute_assignments_greedy": ["memonger._get_max_size", "<builtin>.abs", "<builtin>.float", "memonger.is_compatible", "<builtin>.enumerate"], "memonger._get_count": ["<builtin>.len", "<builtin>.sum"], "memonger.compute_assignments_dp": ["memonger._get_count", "memonger.compute_assignments_dp._find_best", "memonger.compute_assignments_dp._get_compatible_prev", "<builtin>.len", "<builtin>.enumerate", "copy.deepcopy"], "memonger.compute_assignments_dp._get_compatible_prev": ["memonger.compute_assignments_dp._get_compatible_prev.is_compatible_all"], "memonger.compute_assignments_dp._get_compatible_prev.is_compatible_all": ["memonger.is_compatible", "<builtin>.all"], "memonger.compute_assignments_dp._find_best": ["<builtin>.min", "<builtin>.range", "memonger.compute_assignments_dp", "memonger.is_compatible", "<builtin>.all", "<builtin>.len", "<builtin>.enumerate", "copy.deepcopy"], "memonger.compute_assignments_dp._find_best.<lambda1>": ["memonger.get_memory_usage"], "memonger.get_updated_ranges": ["memonger.get_updated_ranges._get_max_live", "memonger.get_updated_ranges._update_range"], "memonger.get_updated_ranges._get_max_live": ["<builtin>.max"], "memonger.get_updated_ranges._update_range": [], "memonger.compute_assignments": ["memonger.compute_assignments_greedy", "future.utils.viewitems", "memonger.compute_assignments_dp", "<builtin>.len", "memonger.get_updated_ranges", "<builtin>.sorted"], "memonger.compute_assignments.<lambda1>": [], "memonger.verify_assignments": ["<builtin>.zip"], "memonger.compute_interference_graph": ["networkx.is_directed_acyclic_graph", "networkx.DiGraph", "<builtin>.set", "<builtin>.enumerate", "<builtin>.any"], "networkx.is_directed_acyclic_graph": [], "memonger.apply_assignments": ["memonger.apply_assignments.canonical_name", "<builtin>.enumerate", "memonger.apply_recurrent_blob_assignments"], "memonger.apply_assignments.canonical_name": [], "memonger.apply_recurrent_blob_assignments": ["<builtin>.list", "future.utils.viewitems", "<builtin>.str", "memonger.apply_assignments.canonical_name", "caffe2.proto.caffe2_pb2.Argument", "<builtin>.enumerate", "memonger.apply_assignments"], "memonger.optimize_inference_fast": ["<builtin>.str", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python._import_c_extension.memonger_optimize_inference_net"], "caffe2.python._import_c_extension.memonger_optimize_inference_net": [], "memonger.optimize_interference": ["memonger.topological_sort_traversal", "memonger.compute_blob_assignments", "memonger.compute_assignments", "memonger.compute_interference_graph", "memonger.compute_ranges", "copy.deepcopy", "memonger.apply_assignments"], "memonger.verify_inplace_blobs.get_inplaces": ["<builtin>.list", "<builtin>.enumerate"], "memonger.verify_graph_equality.parent_list": ["<builtin>.enumerate"], "memonger.blob_nbytes": ["caffe2.python.workspace.FetchBlob"], "memonger.compute_statistics": ["future.utils.viewvalues", "memonger.blob_nbytes", "<builtin>.sum", "<builtin>.max"], "memonger.collect_blob_sizes": ["memonger.blob_nbytes"], "memonger_test": ["unittest.main"], "memonger_test.has_blob": [], "memonger_test.count_blobs": ["<builtin>.set", "<builtin>.len"], "memonger_test.MemongerTest": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.given", "unittest.skipIf"], "memonger_test.MemongerTest.test_simple_memonger": ["numpy.random.randint", "caffe2.python.workspace.RunNetOnce", "caffe2.python.model_helper.ModelHelper", "caffe2.python.memonger.optimize_interference", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "numpy.testing.assert_almost_equal", "caffe2.python.memonger.compute_statistics", "<builtin>.str", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLessEqual", "caffe2.python.memonger.collect_blob_sizes", "numpy.random.randn", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.brew.fc"], "caffe2.python.memonger.optimize_interference": [], "caffe2.python.memonger.compute_statistics": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess": [], "caffe2.python.memonger.collect_blob_sizes": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLessEqual": [], "memonger_test.MemongerTest.test_fast_memonger": ["numpy.random.randint", "caffe2.python.workspace.RunNetOnce", "caffe2.python.model_helper.ModelHelper", "memonger_test.count_blobs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "numpy.testing.assert_almost_equal", "<builtin>.str", "caffe2.python.memonger.optimize_inference_fast", "numpy.random.randn", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.brew.fc"], "caffe2.python.memonger.optimize_inference_fast": [], "memonger_test.MemongerTest.test_fast_memonger_unique_outputs": ["caffe2.python.brew.relu", "caffe2.python.brew.sum", "caffe2.python.model_helper.ModelHelper", "<builtin>.range", "<builtin>.len", "<builtin>.set", "<builtin>.str", "caffe2.python.memonger.optimize_inference_fast", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.brew.concat", "caffe2.python.brew.fc"], "memonger_test.MemongerTest.test_gradient_optim": ["<builtin>.set", "numpy.random.randn", "memonger_test.has_blob", "caffe2.python.brew.fc", "caffe2.python.model_helper.ModelHelper", "memonger_test.count_blobs", "future.utils.viewvalues", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "numpy.array", "caffe2.python.memonger.share_grad_blobs", "caffe2.python.core.NameScope", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLessEqual", "<builtin>.str", "numpy.random.randint", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.testing.assert_almost_equal", "caffe2.python.workspace.FetchBlob"], "memonger_test.MemongerTest.test_memonger_mix_cpu_gpu": ["<builtin>.list", "caffe2.python.model_helper.ModelHelper", "memonger_test.count_blobs", "caffe2.python.memonger.share_grad_blobs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "future.utils.viewvalues", "<builtin>.set", "caffe2.python.core.DeviceOption", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEquals", "caffe2.python.brew.fc", "caffe2.python.core.DeviceScope"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEquals": [], "memonger_test.MemongerTest.test_gradient_optim_tree": ["numpy.random.randint", "caffe2.python.workspace.RunNetOnce", "numpy.array", "caffe2.python.model_helper.ModelHelper", "memonger_test.count_blobs", "caffe2.python.memonger.share_grad_blobs", "caffe2.python.core.NameScope", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "future.utils.viewvalues", "<builtin>.set", "numpy.random.randn", "<builtin>.str", "numpy.testing.assert_almost_equal", "memonger_test.has_blob", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.brew.fc"], "memonger_test.MemongerTest.test_forward_optim_tree_daggy": ["numpy.random.randint", "caffe2.python.brew.sum", "caffe2.python.workspace.RunNetOnce", "caffe2.python.model_helper.ModelHelper", "memonger_test.count_blobs", "caffe2.python.core.NameScope", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "caffe2.python.memonger.optimize_inference_for_dag", "numpy.testing.assert_almost_equal", "numpy.random.randn", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.brew.fc"], "caffe2.python.memonger.optimize_inference_for_dag": [], "memonger_test.MemongerTest.test_forward_optim_tree_harder": ["numpy.random.randint", "caffe2.python.brew.sum", "<builtin>.print", "caffe2.python.workspace.RunNetOnce", "caffe2.python.model_helper.ModelHelper", "memonger_test.count_blobs", "caffe2.python.core.NameScope", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "caffe2.python.memonger.optimize_inference_for_dag", "numpy.testing.assert_almost_equal", "<builtin>.str", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "numpy.random.randn", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.brew.fc"], "memonger_test.MemongerTest.test_forward_optim_tree_dag_traversal": ["caffe2.python.brew.sum", "caffe2.python.model_helper.ModelHelper", "memonger_test.count_blobs", "caffe2.python.core.NameScope", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "caffe2.python.memonger.optimize_inference_for_dag", "caffe2.python.brew.fc"], "memonger_test.MemongerTest.test_forward_optim_tree_enforce_inplace_op_invalid": ["caffe2.python.memonger.optimize_inference_for_dag", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "caffe2.python.model_helper.ModelHelper"], "memonger_test.MemongerTest.test_forward_optim_tree_enforce_inplace_op_valid_and_as_head": ["memonger_test.count_blobs", "caffe2.python.memonger.optimize_inference_for_dag", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "caffe2.python.model_helper.ModelHelper"], "memonger_test.MemongerTest.test_rnn": ["caffe2.python.workspace.RunNetOnce", "numpy.array", "caffe2.python.model_helper.ModelHelper", "<builtin>.range", "memonger_test.count_blobs", "caffe2.python.rnn_cell.LSTM", "caffe2.python.memonger.share_grad_blobs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess", "numpy.zeros", "numpy.random.rand", "future.utils.viewvalues", "<builtin>.set", "caffe2.python.workspace.FeedBlob"], "memonger_test.MemongerTest.test_compute_interference_graph_inplace_ops": ["<builtin>.list", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.memonger.compute_interference_graph", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.memonger.compute_interference_graph": [], "memonger_test.MemongerTest.test_topological_sort_longest_path": ["<builtin>.list", "caffe2.python.memonger.topological_sort_traversal_longest_path", "caffe2.python.model_helper.ModelHelper", "caffe2.python.memonger.compute_interference_graph", "caffe2.python.brew.conv", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.memonger.topological_sort_traversal"], "caffe2.python.memonger.topological_sort_traversal": [], "caffe2.python.memonger.topological_sort_traversal_longest_path": [], "memonger_test.MemongerTest.test_topological_sort_longest_path_multi_target": ["<builtin>.list", "caffe2.python.memonger.topological_sort_traversal_longest_path", "caffe2.python.model_helper.ModelHelper", "caffe2.python.memonger.compute_interference_graph", "caffe2.python.brew.conv", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.memonger.topological_sort_traversal"], "memonger_test.MemongerTest.test_topological_sort_longest_path_single_node": ["<builtin>.list", "caffe2.python.memonger.topological_sort_traversal_longest_path", "caffe2.python.model_helper.ModelHelper", "caffe2.python.memonger.compute_interference_graph", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.memonger.topological_sort_traversal"], "memonger_test.MemongerTest.test_compute_assignments_greedy": ["caffe2.python.memonger.compute_assignments_greedy", "caffe2.python.memonger.LiveRange", "caffe2.python.memonger.get_memory_usage", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "caffe2.python.memonger.LiveRange": [], "caffe2.python.memonger.compute_assignments_greedy": [], "caffe2.python.memonger.get_memory_usage": [], "memonger_test.MemongerTest.test_compute_assignments_dp": ["caffe2.python.memonger.compute_assignments_dp", "caffe2.python.memonger.LiveRange", "caffe2.python.memonger.get_memory_usage", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "caffe2.python.memonger.compute_assignments_dp": [], "memonger_test.MemongerTest.test_compute_assignments_dp1": ["caffe2.python.memonger.compute_assignments_dp", "caffe2.python.memonger.LiveRange", "caffe2.python.memonger.get_memory_usage", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "memonger_test.MemongerTest.test_verify_graph_equality": ["caffe2.python.brew.sum", "caffe2.python.model_helper.ModelHelper", "caffe2.python.memonger.verify_graph_equality", "caffe2.python.core.NameScope", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.brew.fc"], "caffe2.python.memonger.verify_graph_equality": [], "memonger_test.MemongerTest.test_verify_graph_equality_harder": ["caffe2.python.brew.sum", "caffe2.python.model_helper.ModelHelper", "caffe2.python.memonger.verify_graph_equality", "caffe2.python.core.NameScope", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.brew.fc"], "memonger_test.MemongerTest.test_verify_graph_inequality": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertFalse", "caffe2.python.brew.sum", "caffe2.python.model_helper.ModelHelper", "caffe2.python.memonger.verify_graph_equality", "caffe2.python.core.NameScope", "caffe2.python.brew.fc"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertFalse": [], "memonger_test.MemongerTest.test_verify_graph_inequality_harder": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertFalse", "caffe2.python.brew.sum", "caffe2.python.model_helper.ModelHelper", "caffe2.python.memonger.verify_graph_equality", "caffe2.python.core.NameScope", "caffe2.python.brew.fc"], "memonger_test.MemongerTest.test_release_blobs_when_used": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertFalse", "caffe2.python.brew.sum", "caffe2.python.model_helper.ModelHelper", "<builtin>.set", "caffe2.python.memonger.release_blobs_when_used", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.brew.fc"], "mkl_test_util": ["mkl_test_util.gradient_checker_device_option", "caffe2.proto.caffe2_pb2.DeviceOption", "mkl_test_util.device_checker_device_options", "<builtin>.dict", "hypothesis.strategies.just", "hypothesis.strategies.sampled_from"], "mkl_test_util.device_checker_device_options": ["hypothesis.strategies.just"], "mkl_test_util.gradient_checker_device_option": ["hypothesis.strategies.sampled_from"], "model_device_test": ["unittest.main"], "model_device_test.TestMiniAlexNet._MiniAlexNetNoDropout": ["caffe2.python.brew.group_conv", "caffe2.python.brew.max_pool", "caffe2.python.brew.softmax", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.lrn", "caffe2.python.brew.fc", "caffe2.python.brew.relu", "caffe2.python.brew.conv"], "model_device_test.TestMiniAlexNet._testMiniAlexNet": ["numpy.array", "<builtin>.str", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.ResetWorkspace", "numpy.random.rand", "caffe2.python.device_checker.DeviceChecker", "<builtin>.dict", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.FetchBlob", "caffe2.proto.caffe2_pb2.DeviceOption", "model_device_test.TestMiniAlexNet._MiniAlexNetNoDropout"], "model_device_test.TestMiniAlexNet": ["unittest.skipIf"], "model_device_test.TestMiniAlexNet.testMiniAlexNetNCHW": ["model_device_test.TestMiniAlexNet._testMiniAlexNet"], "model_helper": [], "model_helper.ModelHelper.__init__": ["caffe2.python.core.Net"], "model_helper.ModelHelper.arg_scope": [], "model_helper.ModelHelper.get_name": [], "model_helper.ModelHelper._infer_param_shape": ["<builtin>.list", "<builtin>.str"], "model_helper.ModelHelper._update_param_info_deprecated": ["caffe2.python.modeling.parameter_info.ParameterInfo", "<builtin>.isinstance", "<builtin>.str", "model_helper.ModelHelper._infer_param_shape", "<builtin>.len", "<builtin>.ValueError"], "caffe2.python.modeling.parameter_info.ParameterInfo": [], "model_helper.ModelHelper._normalize_tags": ["<builtin>.isinstance", "<builtin>.set"], "model_helper.ModelHelper.create_param": ["caffe2.python.core.BlobReference", "caffe2.python.optimizer_context.OptimizerContext.current", "caffe2.python.regularizer_context.RegularizerContext.current", "caffe2.python.modeling.parameter_sharing.parameter_sharing_context.get_parameter_name", "<builtin>.isinstance", "<builtin>.str", "model_helper.ModelHelper.AddParameter", "<builtin>.TypeError", "model_helper.ModelHelper._normalize_tags"], "caffe2.python.optimizer_context.OptimizerContext.current": [], "caffe2.python.regularizer_context.RegularizerContext.current": [], "model_helper.ModelHelper.AddParameter": ["<builtin>.isinstance", "model_helper.ModelHelper._normalize_tags"], "model_helper.ModelHelper.get_param_info": ["<builtin>.isinstance"], "model_helper.ModelHelper.add_param_DEPRECATED": ["<builtin>.len", "model_helper.ModelHelper._update_param_info_deprecated", "logging.warning", "caffe2.python.modeling.parameter_info.ParameterInfo", "<builtin>.isinstance", "<builtin>.str", "model_helper.ModelHelper.AddParameter", "model_helper.ModelHelper._infer_param_shape", "<builtin>.ValueError"], "model_helper.ModelHelper._NormalizeNamescope": ["caffe2.python.scope.CurrentNameScope"], "model_helper.ModelHelper.GetParams": ["model_helper.ModelHelper._NormalizeNamescope"], "model_helper.ModelHelper.Proto": [], "model_helper.ModelHelper.InitProto": [], "model_helper.ModelHelper.RunAllOnGPU": [], "model_helper.ModelHelper.CreateDB": [], "model_helper.ModelHelper.AddGradientOperators": ["model_helper.ModelHelper.get_param_to_grad", "<builtin>.RuntimeError", "model_helper.ModelHelper.Validate", "caffe2.python.modeling.parameter_info.ParameterInfo", "model_helper.ModelHelper.get_param_info"], "model_helper.ModelHelper.Validate": ["model_helper.ModelHelper._Validate"], "model_helper.ModelHelper.get_param_to_grad": ["<builtin>.str", "<builtin>.RuntimeError"], "model_helper.ModelHelper.GetOptimizationParamInfo": ["future.utils.viewitems", "model_helper.ModelHelper.get_param_to_grad", "<builtin>.isinstance", "<builtin>.RuntimeError", "model_helper.ModelHelper.get_param_info"], "model_helper.ModelHelper._Validate": ["<builtin>.set", "<builtin>.enumerate", "<builtin>.sorted", "<builtin>.str", "<builtin>.len"], "model_helper.ModelHelper.GetComputedParams": ["model_helper.ModelHelper._NormalizeNamescope"], "model_helper.ModelHelper.GetAllParams": ["model_helper.ModelHelper.GetParams", "model_helper.ModelHelper.GetComputedParams"], "model_helper.ModelHelper.TensorProtosDBInput": ["caffe2.python.helpers.db_input.db_input", "<builtin>.len"], "caffe2.python.helpers.db_input.db_input": [], "model_helper.ModelHelper.GetDevices": ["<builtin>.len"], "model_helper.ModelHelper.__getattr__": ["caffe2.python.workspace.C.nearby_opnames", "caffe2.python.core.IsOperator", "logging.warning", "<builtin>.AttributeError"], "model_helper.ModelHelper.__dir__": ["itertools.chain", "future.utils.viewkeys", "<builtin>.dir", "<builtin>.type", "<builtin>.sorted", "<builtin>.set"], "model_helper.ModelHelper.GetCompleteNet": [], "model_helper.ModelHelper.ConstructInitTrainNetfromNet": ["<builtin>.enumerate"], "model_helper.ExtractPredictorNet": ["<builtin>.len", "<builtin>.range", "logging.debug", "caffe2.python.core.Net", "<builtin>.max", "<builtin>.list", "<builtin>.str", "<builtin>.min", "model_helper.ExtractPredictorNet.validate_op", "model_helper.ExtractPredictorNet.rename_list", "<builtin>.Exception", "<builtin>.set"], "model_helper.ExtractPredictorNet.validate_op": ["<builtin>.Exception", "<builtin>.str"], "model_helper.ExtractPredictorNet.rename_list": ["<builtin>.enumerate"], "logging.debug": [], "model_helper_test": [], "model_helper_test.ModelHelperTest.test_get_complete_net_type": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.conv", "unittest.TestCase.assertTrue"], "model_helper_test.ModelHelperTest.test_get_complete_net": ["caffe2.python.brew.relu", "unittest.TestCase.assertEqual", "caffe2.python.brew.fc", "caffe2.python.brew.spatial_bn", "<builtin>.zip", "<builtin>.sorted", "caffe2.python.brew.conv", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.softmax", "<builtin>.map"], "modifier_context": [], "modifier_context.ModifierContext.__init__": [], "modifier_context.ModifierContext._rebuild_modifiers": [], "modifier_context.ModifierContext._has_modifier": [], "modifier_context.ModifierContext._get_modifier": [], "modifier_context.ModifierContext.push_modifiers": [], "modifier_context.ModifierContext.pop_modifiers": ["<builtin>.len", "modifier_context.ModifierContext._rebuild_modifiers"], "modifier_context.UseModifierBase.__init__": ["<builtin>.isinstance"], "modifier_context.UseModifierBase._context_class": [], "modifier_context.UseModifierBase.__enter__": ["modifier_context.UseModifierBase._context_class"], "modifier_context.UseModifierBase.__exit__": ["modifier_context.UseModifierBase._context_class"], "muji": [], "muji.OnGPU": ["caffe2.proto.caffe2_pb2.DeviceOption"], "muji.OnCPU": ["caffe2.proto.caffe2_pb2.DeviceOption"], "muji.Allreduce": ["<builtin>.len", "<builtin>.range", "caffe2.python.workspace.GetGpuPeerAccessPattern", "numpy.all", "<builtin>.RuntimeError", "muji.Allreduce8", "muji.Allreduce4Group2", "muji.Allreduce2", "<builtin>.list", "muji.Allreduce4", "muji.AllreduceFallback"], "muji.Allreduce2": ["muji.OnGPU"], "muji.Allreduce4": ["<builtin>.str", "muji.OnGPU"], "muji.Allreduce4Group2": ["<builtin>.str", "muji.OnGPU"], "muji.Allreduce8": ["<builtin>.str", "muji.OnGPU"], "muji.AllreduceFallback": ["<builtin>.len", "<builtin>.range", "muji.OnGPU"], "muji_test": ["unittest.main"], "muji_test.TestMuji.RunningAllreduceWithGPUs": ["caffe2.python.workspace.Blobs", "caffe2.python.muji.Allreduce", "caffe2.python.muji.Allreduce4Group2", "<builtin>.str", "caffe2.python.muji.AllreduceFallback", "<builtin>.float", "caffe2.python.muji.Allreduce4", "caffe2.python.workspace.RunNetOnce", "caffe2.python.muji.Allreduce2", "<builtin>.sum", "caffe2.python.muji.OnGPU", "caffe2.python.workspace.FetchBlob", "<builtin>.print", "numpy.testing.assert_array_equal", "<builtin>.len", "caffe2.python.muji.Allreduce8", "caffe2.python.core.Net"], "caffe2.python.muji.OnGPU": [], "caffe2.python.muji.Allreduce": [], "caffe2.python.muji.Allreduce4Group2": [], "caffe2.python.muji.Allreduce2": [], "caffe2.python.muji.AllreduceFallback": [], "caffe2.python.muji.Allreduce8": [], "caffe2.python.muji.Allreduce4": [], "muji_test.TestMuji.testAllreduceFallback": ["<builtin>.list", "caffe2.python.workspace.NumGpuDevices", "<builtin>.range", "muji_test.TestMuji.RunningAllreduceWithGPUs"], "muji_test.TestMuji.testAllreduceSingleGPU": ["caffe2.python.workspace.NumGpuDevices", "<builtin>.range", "muji_test.TestMuji.RunningAllreduceWithGPUs"], "muji_test.TestMuji.testAllreduceWithTwoGPUs": ["<builtin>.print", "caffe2.python.workspace.GetGpuPeerAccessPattern", "muji_test.TestMuji.RunningAllreduceWithGPUs", "numpy.all"], "muji_test.TestMuji.testAllreduceWithFourGPUs": ["<builtin>.print", "caffe2.python.workspace.GetGpuPeerAccessPattern", "muji_test.TestMuji.RunningAllreduceWithGPUs", "numpy.all"], "muji_test.TestMuji.testAllreduceWithFourGPUsAndTwoGroups": ["<builtin>.print", "caffe2.python.workspace.GetGpuPeerAccessPattern", "muji_test.TestMuji.RunningAllreduceWithGPUs", "numpy.all"], "muji_test.TestMuji.testAllreduceWithEightGPUs": ["caffe2.python.workspace.GetGpuPeerAccessPattern", "<builtin>.list", "muji_test.TestMuji.RunningAllreduceWithGPUs", "<builtin>.print", "<builtin>.range", "numpy.all"], "net_builder": [], "net_builder.NetBuilder.__init__": ["<builtin>.str", "<builtin>.set", "caffe2.python.context.Managed.current"], "net_builder.NetBuilder.stop_blob": ["caffe2.python.context.Managed.NextName", "caffe2.python.core.Net", "caffe2.python.core.BlobReference", "caffe2.python.context.Managed.Const", "net_builder.NetBuilder.current_net"], "net_builder.NetBuilder.current_net": ["net_builder.NetBuilder._assert_mutable", "caffe2.python.core.Net", "net_builder.NetBuilder.add"], "caffe2.python.context.Managed.NextName": [], "caffe2.python.context.Managed.Const": [], "net_builder.NetBuilder.stop_if": ["net_builder.NetBuilder.stop_blob"], "net_builder.NetBuilder._assert_mutable": [], "net_builder.NetBuilder._update_lexical_scope": ["<builtin>.isinstance", "<builtin>.set"], "net_builder.NetBuilder._reset_children": ["<builtin>.set"], "net_builder.NetBuilder.add": ["<builtin>.isinstance", "net_builder.NetBuilder._assert_mutable", "net_builder.NetBuilder._update_lexical_scope"], "net_builder.NetBuilder.freeze": ["<builtin>.hasattr"], "net_builder.NetBuilder.get": ["net_builder.NetBuilder.freeze"], "net_builder.NetBuilder.__exit__": ["net_builder.NetBuilder.freeze", "net_builder.NetBuilder.merge_nets", "net_builder.NetBuilder._reset_children", "<builtin>.super", "<builtin>.len"], "net_builder.NetBuilder.merge_nets": ["<builtin>.isinstance", "<builtin>.len"], "net_builder.NetBuilder.__str__": [], "net_builder.Operations.net": ["caffe2.python.context.Managed.current"], "net_builder.Operations.__getattr__": ["caffe2.python.context.Managed.current", "net_builder.Operations.net", "<builtin>.AttributeError", "<builtin>.getattr"], "net_builder.Operations.task_group": ["caffe2.python.task.Node", "caffe2.python.task.Cluster", "caffe2.python.context.Managed.current", "caffe2.python.task.TaskGroup"], "net_builder.Operations.stop": ["net_builder.Operations.stop_if"], "net_builder.Operations.stop_if": ["caffe2.python.context.Managed.current"], "net_builder.Operations.loop": ["caffe2.python.context.Managed.current", "net_builder._Loop.__init__"], "net_builder._Loop.__init__": ["net_builder.NetBuilder.__init__", "<builtin>.isinstance"], "net_builder.Operations.stop_guard": ["net_builder._StopGuard.__init__", "caffe2.python.context.Managed.current"], "net_builder._StopGuard.__init__": ["net_builder._RunOnce.__init__"], "net_builder.Operations.If": ["net_builder._RunIf.__init__", "caffe2.python.context.Managed.current"], "net_builder._RunIf.__init__": ["net_builder._RunOnce.__init__"], "net_builder.Operations.IfNet": ["caffe2.python.context.Managed.current", "net_builder._RunIfNet.__init__"], "net_builder._RunIfNet.__init__": ["net_builder.NetBuilder.__init__"], "net_builder.Operations.Else": ["net_builder._RunElseNet.__init__"], "net_builder._RunElseNet.__init__": ["net_builder.NetBuilder.__init__", "caffe2.python.context.Managed.current", "<builtin>.len", "<builtin>.isinstance"], "net_builder.Operations.WhileNet": ["caffe2.python.context.Managed.current", "net_builder._RunWhileNet.__init__"], "net_builder._RunWhileNet.__init__": ["net_builder.NetBuilder.__init__"], "net_builder.Operations.Condition": ["<builtin>.isinstance", "caffe2.python.context.Managed.current", "net_builder._RunWhileCondition.__init__"], "net_builder._RunWhileCondition.__init__": ["net_builder.NetBuilder.__init__", "caffe2.python.context.Managed.current", "<builtin>.len", "<builtin>.isinstance"], "net_builder.Operations.task_init": ["net_builder.Operations.net", "net_builder._SetupBuilder.__init__"], "net_builder._SetupBuilder.__init__": ["net_builder.NetBuilder.__init__"], "net_builder.Operations.task_exit": ["net_builder.Operations.net", "net_builder._SetupBuilder.__init__"], "net_builder.Operations.task_instance_init": ["net_builder.Operations.net", "net_builder._SetupBuilder.__init__"], "net_builder.Operations.task_instance_exit": ["net_builder.Operations.net", "net_builder._SetupBuilder.__init__"], "net_builder.Operations.local_init": ["net_builder.Operations.net", "net_builder._SetupBuilder.__init__"], "net_builder.Operations.local_exit": ["net_builder.Operations.net", "net_builder._SetupBuilder.__init__"], "net_builder.Operations.task_reporter": ["net_builder.Operations.net", "net_builder._ReporterBuilder.__init__"], "net_builder._ReporterBuilder.__init__": ["net_builder.NetBuilder.__init__"], "net_builder.Operations.local_reporter": ["net_builder._ReporterBuilder.__init__"], "net_builder._ReporterBuilder.__exit__": ["net_builder._RunElseNet.__exit__", "net_builder._ReporterBuilder.__exit__", "net_builder._RunWhileCondition.__exit__", "net_builder.NetBuilder.__exit__", "caffe2.python.task.TaskGroup.current", "caffe2.python.core.to_execution_step"], "caffe2.python.core.to_execution_step": [], "caffe2.python.task.TaskGroup.current": [], "net_builder._RunElseNet.__exit__": ["net_builder._RunElseNet.__exit__", "net_builder.NetBuilder.merge_nets", "net_builder._ReporterBuilder.__exit__", "net_builder.NetBuilder.__exit__", "net_builder._RunWhileCondition.__exit__", "net_builder.NetBuilder._reset_children", "caffe2.python.core.Net", "caffe2.python.control_ops_util.add_if_op"], "net_builder._RunWhileCondition.__exit__": ["net_builder._RunElseNet.__exit__", "net_builder.NetBuilder.merge_nets", "net_builder._ReporterBuilder.__exit__", "net_builder.NetBuilder.__exit__", "net_builder._RunWhileCondition.__exit__", "net_builder.NetBuilder._reset_children", "caffe2.python.core.BlobReference", "<builtin>.len"], "net_builder._SetupBuilder.setup": ["caffe2.python.core.to_execution_step"], "net_builder._SetupBuilder.exit": ["caffe2.python.core.to_execution_step"], "net_builder._RunOnce.__init__": ["net_builder.NetBuilder.__init__"], "net_builder._RunOnce.__exit__": ["net_builder._ReporterBuilder.__exit__", "net_builder._RunElseNet.__exit__", "net_builder._RunWhileCondition.__exit__", "net_builder.NetBuilder.__exit__", "net_builder.Operations.stop"], "net_builder._StopGuard.__enter__": ["caffe2.python.context.Managed.__enter__"], "caffe2.python.context.Managed.__enter__": [], "net_builder._StopGuard.__exit__": ["net_builder._RunOnce.__exit__"], "net_builder._StopGuard.has_stopped": [], "net_builder._Loop.iter": [], "net_builder._Loop.__enter__": ["caffe2.python.context.Managed.__enter__", "net_builder.Operations.stop_if"], "net_builder._Loop.__exit__": ["caffe2.python.context.Managed.Add", "net_builder._ReporterBuilder.__exit__", "net_builder._RunElseNet.__exit__", "net_builder._RunWhileCondition.__exit__", "net_builder.NetBuilder.__exit__", "net_builder.NetBuilder.current_net"], "caffe2.python.context.Managed.Add": [], "net_builder._RunIf.__enter__": ["caffe2.python.context.Managed.__enter__", "net_builder.Operations.stop_if"], "net_builder._RunIf.Elif": ["net_builder._RunIf.__init__", "caffe2.python.context.Managed.current"], "net_builder._RunIf.Else": ["net_builder._RunIf.__init__", "caffe2.python.context.Managed.current"], "net_builder._RunIfNet.add": ["net_builder.NetBuilder.add"], "net_builder._RunIfNet.__exit__": ["net_builder._RunElseNet.__exit__", "net_builder.NetBuilder.merge_nets", "net_builder._ReporterBuilder.__exit__", "net_builder.NetBuilder.__exit__", "net_builder._RunWhileCondition.__exit__", "net_builder.NetBuilder._reset_children", "caffe2.python.core.Net", "caffe2.python.control_ops_util.add_if_op"], "caffe2.python.control_ops_util.add_if_op": [], "net_builder._RunWhileNet.__exit__": ["net_builder._RunElseNet.__exit__", "net_builder.NetBuilder.merge_nets", "net_builder._ReporterBuilder.__exit__", "net_builder.NetBuilder.__exit__", "caffe2.python.control_ops_util.add_while_op", "net_builder.NetBuilder._reset_children", "caffe2.python.core.Net", "net_builder._RunWhileCondition.__exit__"], "caffe2.python.control_ops_util.add_while_op": [], "net_builder_test": [], "net_builder_test.PythonOpStats": ["threading.Lock"], "net_builder_test.python_op_builder": [], "net_builder_test.python_op_builder.my_op": [], "net_builder_test._test_loop": ["caffe2.python.net_builder.ops.Const", "caffe2.python.net_builder.ops.EQ", "caffe2.python.net_builder.ops.Add", "caffe2.python.net_builder.ops.stop_if", "caffe2.python.net_builder.ops.loop"], "caffe2.python.net_builder.ops.EQ": [], "caffe2.python.net_builder.ops.stop_if": [], "net_builder_test._test_inner_stop": ["caffe2.python.net_builder.ops.LT", "caffe2.python.net_builder.ops.Const", "caffe2.python.net_builder.ops.stop_if"], "net_builder_test._test_outer": ["caffe2.python.net_builder.ops.stop_guard", "caffe2.python.net_builder.ops.Const", "net_builder_test._test_inner_stop"], "caffe2.python.net_builder.ops.stop_guard": [], "net_builder_test._test_if": ["caffe2.python.net_builder.ops.stop", "caffe2.python.net_builder.ops.If", "caffe2.python.net_builder.ops.Const", "caffe2.python.net_builder.ops.LT", "caffe2.python.net_builder.ops.GT"], "caffe2.python.net_builder.ops.GT": [], "caffe2.python.net_builder.ops.If": [], "caffe2.python.net_builder.ops.stop": [], "net_builder_test.TestNetBuilder.test_ops": ["net_builder_test._test_outer", "unittest.TestCase.assertEquals", "<builtin>.str", "caffe2.python.net_builder.ops.Const", "caffe2.python.core.Plan", "net_builder_test._test_if", "caffe2.python.net_builder.NetBuilder", "net_builder_test._test_loop", "caffe2.python.core.to_execution_step", "caffe2.python.workspace.C.Workspace"], "unittest.TestCase.assertEquals": [], "net_builder_test.TestNetBuilder._expected_loop": ["<builtin>.range"], "net_builder_test.TestNetBuilder._actual_loop": ["caffe2.python.task.final_output", "caffe2.python.net_builder.ops.If", "caffe2.python.net_builder.ops.Const", "caffe2.python.net_builder.ops.Mul", "caffe2.python.net_builder.ops.Add", "caffe2.python.net_builder.ops.GE", "caffe2.python.net_builder.ops.loop"], "caffe2.python.net_builder.ops.GE": [], "net_builder_test.TestNetBuilder.test_net_multi_use": ["caffe2.python.task.final_output", "unittest.TestCase.assertEquals", "caffe2.python.net_builder.ops.net", "caffe2.python.task.Task", "caffe2.python.net_builder.ops.Const", "caffe2.python.session.LocalSession", "caffe2.python.core.Net"], "net_builder_test.TestNetBuilder.test_loops": ["<builtin>.zip", "unittest.TestCase.assertEquals", "net_builder_test.TestNetBuilder._expected_loop", "caffe2.python.task.Task", "net_builder_test.TestNetBuilder._actual_loop", "caffe2.python.session.LocalSession"], "net_builder_test.TestNetBuilder.test_setup": ["caffe2.python.task.final_output", "unittest.TestCase.assertEquals", "caffe2.python.task.Task", "caffe2.python.net_builder.ops.Const", "caffe2.python.net_builder.ops.task_exit", "caffe2.python.net_builder.ops.Add", "caffe2.python.session.LocalSession", "caffe2.python.net_builder.ops.task_init"], "net_builder_test.TestNetBuilder.test_multi_instance_python_op": ["caffe2.python.net_builder.ops.Python", "unittest.TestCase.assertEquals", "caffe2.python.task.Task", "caffe2.python.session.LocalSession", "caffe2.python.net_builder.ops.loop"], "net_builder_test.TestNetBuilder.test_multi_instance": ["caffe2.python.net_builder.ops.loop", "caffe2.python.task.final_output", "unittest.TestCase.assertEquals", "caffe2.python.task.Task", "caffe2.python.net_builder.ops.CountUp", "caffe2.python.net_builder.ops.Mul", "caffe2.python.net_builder.ops.task_exit", "caffe2.python.net_builder.ops.CreateCounter", "caffe2.python.net_builder.ops.task_instance_exit", "caffe2.python.net_builder.ops.RetrieveCount", "caffe2.python.session.LocalSession", "caffe2.python.task.TaskGroup", "caffe2.python.net_builder.ops.task_instance_init", "caffe2.python.net_builder.ops.task_init"], "net_builder_test.TestNetBuilder.test_if_net": ["unittest.TestCase.assertEquals", "<builtin>.str", "caffe2.python.net_builder.ops.IfNet", "caffe2.python.net_builder.ops.Const", "caffe2.python.core.Plan", "caffe2.python.net_builder.ops.EQ", "caffe2.python.workspace.C.Workspace", "caffe2.python.net_builder.ops.Add", "caffe2.python.net_builder.NetBuilder", "caffe2.python.net_builder.ops.Else", "caffe2.python.net_builder.ops.LT", "caffe2.python.core.to_execution_step", "caffe2.python.net_builder.ops.GT", "unittest.TestCase.assertTrue"], "net_builder_test.TestNetBuilder.test_while_net": ["<builtin>.str", "caffe2.python.net_builder.ops.Const", "caffe2.python.core.Plan", "caffe2.python.net_builder.ops.Condition", "caffe2.python.net_builder.ops.Add", "unittest.TestCase.assertEqual", "caffe2.python.net_builder.NetBuilder", "caffe2.python.net_builder.ops.LT", "caffe2.python.core.to_execution_step", "caffe2.python.net_builder.ops.WhileNet", "caffe2.python.workspace.C.Workspace"], "net_drawer": ["net_drawer.main", "logging.getLogger", "<builtin>.print"], "net_drawer._rectify_operator_and_name": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.type", "<builtin>.RuntimeError"], "net_drawer._escape_label": ["json.dumps"], "net_drawer.GetOpNodeProducer": [], "net_drawer.GetOpNodeProducer.ReallyGetOpNode": ["pydot.Node"], "pydot.Node": [], "net_drawer.GetBlobNodeProducer": [], "net_drawer.GetBlobNodeProducer.ReallyGetBlobNode": ["pydot.Node"], "net_drawer.GetPydotGraph": ["<builtin>.str", "collections.defaultdict", "pydot.Dot", "net_drawer._escape_label", "net_drawer.GetBlobNodeProducer.ReallyGetBlobNode", "net_drawer.GetBlobNodeProducer", "pydot.Edge", "<builtin>.enumerate", "net_drawer._rectify_operator_and_name", "net_drawer.GetOpNodeProducer", "net_drawer.GetOpNodeProducer.ReallyGetOpNode"], "pydot.Dot": [], "pydot.Edge": [], "net_drawer.GetPydotGraphMinimal": ["collections.defaultdict", "pydot.Dot", "<builtin>.all", "pydot.Edge", "<builtin>.enumerate", "net_drawer._rectify_operator_and_name", "net_drawer.GetOpNodeProducer", "net_drawer.GetOpNodeProducer.ReallyGetOpNode"], "net_drawer.GetOperatorMapForPlan": ["<builtin>.enumerate"], "net_drawer._draw_nets": ["<builtin>.enumerate", "net_drawer._escape_label", "pydot.Node", "pydot.Edge"], "net_drawer._draw_steps": ["net_drawer._draw_steps", "<builtin>.len", "pydot.Edge", "net_drawer._escape_label", "net_drawer._draw_nets", "<builtin>.enumerate", "net_drawer._draw_steps.get_label", "pydot.Node", "net_drawer._draw_steps.substep_edge", "<builtin>.ValueError"], "net_drawer._draw_steps.get_label": [], "net_drawer._draw_steps.substep_edge": ["pydot.Edge"], "net_drawer.GetPlanGraph": ["pydot.Dot", "net_drawer._draw_steps"], "net_drawer.GetGraphInJson": ["<builtin>.str", "json.dump", "<builtin>.len", "collections.defaultdict", "net_drawer._escape_label", "<builtin>.enumerate", "net_drawer._rectify_operator_and_name", "<builtin>.open"], "net_drawer.GetGraphPngSafe": ["<builtin>.isinstance", "<builtin>.ValueError"], "net_drawer.main": ["net_drawer.GetPydotGraphMinimal", "net_drawer.GetPydotGraph", "argparse.ArgumentParser", "net_drawer.GetOpNodeProducer", "future.utils.viewitems", "caffe2.python.utils.GetContentFromProtoString", "<builtin>.print", "<builtin>.open"], "net_drawer.main.<dict1>.<lambda1>": [], "net_drawer.main.<lambda1>": ["net_drawer.GetOperatorMapForPlan"], "net_drawer.main.<dict1>.<lambda2>": [], "caffe2.python.utils.GetContentFromProtoString": [], "net_printer": ["net_printer.Visitor.register._register", "net_printer.Visitor.register"], "net_printer.Visitor.register": ["<builtin>.hasattr"], "net_printer.Visitor.register._register": [], "net_printer.Visitor.__call__": ["<builtin>.TypeError", "<builtin>.type"], "net_printer.Analyzer.__init__": ["collections.defaultdict"], "net_printer.Analyzer.__init__.<lambda1>": ["collections.defaultdict"], "net_printer.Analyzer.__init__.<lambda1>.<lambda1>": [], "net_printer.Analyzer.workspace": [], "net_printer.Analyzer": ["contextlib.contextmanager"], "net_printer.Analyzer.set_workspace": ["<builtin>.str", "copy.copy"], "net_printer.Analyzer.define_blob": [], "net_printer.Analyzer.need_blob": ["<builtin>.any"], "net_printer.analyze_op": [], "net_printer.analyze_net": [], "net_printer.analyze_step": ["future.utils.viewkeys", "<builtin>.len", "<builtin>.set"], "net_printer.analyze_task": ["<builtin>.len", "caffe2.python.core.Plan"], "net_printer.analyze_task_group": [], "net_printer.analyze_job": [], "net_printer.analyze": ["net_printer.Analyzer.__init__"], "net_printer.Text.__init__": [], "net_printer.Text": ["contextlib.contextmanager"], "net_printer.Text.context": ["net_printer.Text.add"], "net_printer.Text.add": [], "net_printer.Text.__str__": [], "net_printer.Printer.__init__": ["<builtin>.super"], "net_printer._sanitize_str": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.str"], "net_printer._arg_val": ["<builtin>.list", "<builtin>.str", "net_printer._sanitize_str"], "net_printer.commonprefix": ["<builtin>.enumerate", "<builtin>.max", "<builtin>.min"], "net_printer.format_value": ["<builtin>.isinstance", "<builtin>.str"], "net_printer.factor_prefix": ["<builtin>.len", "net_printer.format_value", "net_printer.commonprefix"], "net_printer.call": ["itertools.chain", "<builtin>.isinstance", "net_printer.factor_prefix"], "net_printer.format_device_option": ["net_printer.call"], "net_printer.print_op": ["net_printer._arg_val", "net_printer.call", "<builtin>.list", "net_printer.format_device_option"], "net_printer.print_net_def": ["net_printer.call"], "net_printer.print_net": [], "net_printer._get_step_context": ["<builtin>.len", "net_printer.call"], "net_printer.print_step": ["<builtin>.isinstance", "net_printer.call", "<builtin>.str", "net_printer._get_step_context"], "net_printer._print_task_output": ["<builtin>.isinstance", "<builtin>.str"], "net_printer.print_task": ["net_printer._print_task_output", "net_printer.call"], "net_printer.print_task_group": ["net_printer.call"], "net_printer.print_job": ["net_printer._print_task_output"], "net_printer.to_string": ["<builtin>.str", "net_printer.Printer.__init__"], "net_printer.debug_net": ["net_printer.Text.__init__", "<builtin>.isinstance", "net_printer.print_op", "caffe2.python.core.Net", "<builtin>.str"], "net_printer_test": [], "net_printer_test.example_loop": ["caffe2.python.net_builder.ops.loop", "caffe2.python.net_builder.ops.Const", "caffe2.python.net_builder.ops.GE", "caffe2.python.net_builder.ops.If", "caffe2.python.net_builder.ops.Mul", "caffe2.python.net_builder.ops.Add", "caffe2.python.task.Task"], "net_printer_test.example_task": ["caffe2.python.task.final_output", "caffe2.python.net_builder.ops.LogInfo", "caffe2.python.net_builder.ops.task_exit", "caffe2.python.net_builder.ops.Const", "caffe2.python.net_builder.ops.task_instance_init", "caffe2.python.net_builder.ops.Add", "caffe2.python.task.Task", "caffe2.python.net_builder.ops.task_init"], "caffe2.python.net_builder.ops.LogInfo": [], "net_printer_test.example_job": ["caffe2.python.checkpoint.Job", "net_printer_test.example_loop", "net_printer_test.example_task"], "net_printer_test.TestNetPrinter.test_print": ["caffe2.python.net_printer.to_string", "unittest.TestCase.assertTrue", "net_printer_test.example_job", "<builtin>.len"], "caffe2.python.net_printer.to_string": [], "net_printer_test.TestNetPrinter.test_valid_job": ["<builtin>.print", "net_printer_test.example_job", "caffe2.python.net_printer.to_string", "caffe2.python.net_builder.ops.Add", "caffe2.python.task.Task"], "net_printer_test.TestNetPrinter.test_undefined_blob": ["caffe2.python.net_printer.analyze", "unittest.TestCase.assertEqual", "<builtin>.str", "unittest.TestCase.assertRaises", "net_printer_test.example_job", "caffe2.python.net_builder.ops.Add", "caffe2.python.task.Task"], "caffe2.python.net_printer.analyze": [], "net_printer_test.TestNetPrinter.test_multiple_definition": ["caffe2.python.net_printer.analyze", "caffe2.python.net_builder.ops.Const", "unittest.TestCase.assertRaises", "net_printer_test.example_job", "caffe2.python.net_builder.ops.Add", "caffe2.python.task.Task"], "nomnigraph": [], "nomnigraph.NNModule.__init__": ["caffe2.python._import_c_extension.NNModule", "<builtin>.Exception", "caffe2.python._import_c_extension.NNModuleFromProtobuf", "<builtin>.isinstance", "caffe2.python._import_c_extension.NNModuleFromProtobufDistributed"], "caffe2.python._import_c_extension.NNModuleFromProtobufDistributed": [], "caffe2.python._import_c_extension.NNModuleFromProtobuf": [], "caffe2.python._import_c_extension.NNModule": [], "nomnigraph.NNModule.dataFlow": [], "nomnigraph.NNModule.controlFlow": [], "nomnigraph.NNModule.nodes": [], "nomnigraph.NNModule.operators": [], "nomnigraph.NNModule.tensors": [], "nomnigraph.NNModule.createNode": [], "nomnigraph.NNModule.deleteNode": [], "nomnigraph.NNModule.createEdge": [], "nomnigraph.NNModule.deleteEdge": [], "nomnigraph.NNModule.replaceNode": [], "nomnigraph.NNModule.replaceProducer": ["caffe2.python._import_c_extension.replaceProducer"], "caffe2.python._import_c_extension.replaceProducer": [], "nomnigraph.NNModule.replaceAllUsesWith": ["caffe2.python._import_c_extension.replaceAllUsesWith"], "caffe2.python._import_c_extension.replaceAllUsesWith": [], "nomnigraph.NNModule.replaceAsConsumer": ["caffe2.python._import_c_extension.replaceAsConsumer"], "caffe2.python._import_c_extension.replaceAsConsumer": [], "nomnigraph.NNModule.replaceSubgraph": [], "nomnigraph.NNModule.deleteSubgraph": [], "nomnigraph.NNModule.createUniqueDataNode": [], "nomnigraph.NNModule.convertToCaffe2Proto": ["caffe2.proto.caffe2_pb2.NetDef"], "nomnigraph.NNModule.match": ["caffe2.python._import_c_extension.matchSubgraph"], "caffe2.python._import_c_extension.matchSubgraph": [], "nomnigraph.render": ["nomnigraph.render.<lambda1>", "<builtin>.str", "subprocess.Popen", "<builtin>.print"], "nomnigraph.render.<lambda1>": ["<builtin>.any", "os.getenv", "os.access", "os.path.join"], "os.access": [], "nomnigraph_test": [], "nomnigraph_test.TestBindings.test_simple": ["caffe2.python.nomnigraph.NeuralNetData", "caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "<builtin>.len"], "caffe2.python.nomnigraph.NNModule": [], "caffe2.python.nomnigraph.NeuralNetData": [], "caffe2.python.nomnigraph.NeuralNetOperator": [], "nomnigraph_test.TestBindings.test_core_net_simple": ["caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net"], "nomnigraph_test.TestBindings.test_core_net_controlflow": ["caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net", "<builtin>.len"], "nomnigraph_test.TestBindings.test_core_net_nn_accessors": ["<builtin>.set", "caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net"], "nomnigraph_test.TestBindings.test_netdef_simple": ["caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net"], "nomnigraph_test.TestBindings.test_operatordef_simple": ["caffe2.python.core.CreateOperator", "caffe2.python.nomnigraph.NNModule"], "nomnigraph_test.TestBindings.test_invalid_node": ["caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.nomnigraph.NNModule"], "nomnigraph_test.TestBindings.test_edges_simple": ["caffe2.python.nomnigraph.NeuralNetOperator", "<builtin>.str", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.NNSubgraph", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.nomnigraph.NeuralNetData"], "caffe2.python.nomnigraph.NNSubgraph": [], "nomnigraph_test.TestBindings": ["hypothesis.strategies.sampled_from", "hypothesis.given"], "nomnigraph_test.TestBindings.test_edges_complex": ["caffe2.python.nomnigraph.NeuralNetOperator", "<builtin>.str", "random.seed", "<builtin>.range", "caffe2.python.nomnigraph.NNModule", "random.getrandbits", "caffe2.python.nomnigraph.NeuralNetData", "<builtin>.bool"], "random.getrandbits": [], "nomnigraph_test.TestBindings.test_traversal": ["caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net"], "nomnigraph_test.TestBindings.test_debug": ["caffe2.python.nomnigraph.NeuralNetData", "caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.render"], "caffe2.python.nomnigraph.render": [], "nomnigraph_test.TestBindings.test_match_graph_node": ["caffe2.python.nomnigraph.NeuralNetOperator", "<builtin>.str", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.NNMatchGraph", "<builtin>.len", "caffe2.python.nomnigraph.NeuralNetData"], "caffe2.python.nomnigraph.NNMatchGraph": [], "nomnigraph_test.TestBindings.test_match_graph_node_strict": ["caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.NNMatchGraph", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.nomnigraph.NeuralNetData"], "nomnigraph_test.TestBindings.test_match_graph": ["caffe2.python.nomnigraph.NeuralNetOperator", "<builtin>.print", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.NNMatchGraph", "<builtin>.len", "caffe2.python.nomnigraph.NeuralNetData"], "nomnigraph_test.TestBindings.test_delete_subgraph": ["caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.NNMatchGraph", "<builtin>.len", "caffe2.python.nomnigraph.NeuralNetData"], "nomnigraph_test.TestBindings.test_replace_subraph": ["caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.NNMatchGraph", "<builtin>.len", "caffe2.python.nomnigraph.NeuralNetData"], "nomnigraph_test.TestBindings.test_genericGraph": ["caffe2.python.nomnigraph.Graph", "caffe2.python.nomnigraph.render"], "caffe2.python.nomnigraph.Graph": [], "nomnigraph_test.TestBindings.test_createUniqueDataNode": ["caffe2.python.nomnigraph.Operator", "caffe2.python.test_util.TestCase.assertNotEqual", "caffe2.python.nomnigraph.NNModule", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net"], "caffe2.python.nomnigraph.Operator": [], "nomnigraph_test.TestBindings.test_convertToProto": ["<builtin>.print", "<builtin>.zip", "<builtin>.range", "caffe2.python.nomnigraph.NNModule", "<builtin>.len", "caffe2.python.core.Net"], "nomnigraph_test.TestBindings.test_node_interactions": ["caffe2.python.nomnigraph.Operator", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.Data", "<builtin>.len"], "caffe2.python.nomnigraph.Data": [], "nomnigraph_test.TestBindings.test_delete_node": ["caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "<builtin>.len"], "nomnigraph_test.TestBindings.test_replace_producer": ["caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net", "<builtin>.len"], "nomnigraph_test.TestBindings.test_replace_all_uses_with": ["caffe2.python.nomnigraph.NeuralNetData", "caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net"], "nomnigraph_test.TestBindings.test_replace_as_consumer": ["caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net", "<builtin>.len"], "nomnigraph_test.TestBindings.test_annotation_basic": ["caffe2.python.nomnigraph.Annotation"], "caffe2.python.nomnigraph.Annotation": [], "nomnigraph_test.TestBindings.test_annotation_from_graph": ["caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule"], "nomnigraph_test.TestBindings.test_annotation_operator_def": ["caffe2.python.core.CreateOperator", "caffe2.python.nomnigraph.NNModule", "<builtin>.len"], "nomnigraph_test.TestBindings.test_annotation_device_option": ["caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule"], "nomnigraph_test.TestBindings.test_has_device_option": ["caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule"], "nomnigraph_test.TestBindings.test_distributed_annotations": ["caffe2.python.nomnigraph.NeuralNetOperator", "caffe2.python.nomnigraph.NNModule", "caffe2.python.nomnigraph.Annotation", "<builtin>.len", "caffe2.python.nomnigraph.NeuralNetData"], "nomnigraph_test.TestBindings.test_distributed_device_map": ["caffe2.python.test_util.TestCase.assertRaises", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.nomnigraph.NNModule", "caffe2.python.core.Net"], "nomnigraph_transformations": [], "nomnigraph_transformations.transpose_network": ["caffe2.python.core.CreateOperator", "collections.defaultdict", "<builtin>.len", "caffe2.python.utils.ArgsToDict", "<builtin>.range", "caffe2.python.nomnigraph.NeuralNetOperator"], "nomnigraph_transformations.transpose_network.<lambda1>": [], "caffe2.python.utils.ArgsToDict": [], "nomnigraph_transformations_test": [], "nomnigraph_transformations_test.TestNomnigraphTransformations.test_simple_replace": ["caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.nomnigraph.NNModule", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.ResetWorkspace", "numpy.testing.assert_almost_equal", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net"], "nomnigraph_transformations_test.TestNomnigraphTransformations.test_simple_rewire": ["caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.nomnigraph.NNModule", "numpy.testing.assert_almost_equal", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net"], "nomnigraph_transformations_test.TestNomnigraphTransformations": ["hypothesis.given", "hypothesis.strategies.integers"], "nomnigraph_transformations_test.TestNomnigraphTransformations.test_transpose_network": ["<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.test_util.randBlobFloat32", "numpy.random.seed", "caffe2.python.nomnigraph.NNModule", "numpy.testing.assert_almost_equal", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FetchBlobs", "caffe2.python.workspace.RunNetOnce", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.test_util.randBlobsFloat32", "<builtin>.zip", "caffe2.python.nomnigraph_transformations.transpose_network", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net"], "caffe2.python.test_util.randBlobFloat32": [], "caffe2.python.test_util.randBlobsFloat32": [], "caffe2.python.workspace.FetchBlobs": [], "caffe2.python.nomnigraph_transformations.transpose_network": [], "normalizer": [], "normalizer.Normalizer.__init__": [], "normalizer.Normalizer.__call__": ["normalizer.Normalizer._run"], "normalizer.Normalizer._run": ["<builtin>.Exception"], "normalizer.BatchNormalizer.__init__": ["<builtin>.float", "<builtin>.super"], "normalizer.BatchNormalizer._run": [], "normalizer.LayerNormalizer.__init__": ["<builtin>.float", "<builtin>.super"], "normalizer.LayerNormalizer._run": [], "normalizer_context": [], "normalizer_context.NormalizerContext.has_normalizer": ["caffe2.python.modifier_context.ModifierContext._has_modifier"], "caffe2.python.modifier_context.ModifierContext._has_modifier": [], "normalizer_context.NormalizerContext.get_normalizer": ["normalizer_context.NormalizerContext.has_normalizer", "caffe2.python.modifier_context.ModifierContext._get_modifier"], "caffe2.python.modifier_context.ModifierContext._get_modifier": [], "normalizer_context.UseNormalizer._context_class": [], "normalizer_test": [], "normalizer_test.TestNormalizerContext.test_normalizer_context": ["caffe2.python.layer_test_util.LayersTestCase.assertEquals", "caffe2.python.normalizer_context.NormalizerContext.current", "caffe2.python.normalizer_context.UseNormalizer", "caffe2.python.normalizer.BatchNormalizer"], "caffe2.python.normalizer.BatchNormalizer": [], "caffe2.python.normalizer_context.UseNormalizer": [], "caffe2.python.normalizer_context.NormalizerContext.current": [], "numa_benchmark": ["numa_benchmark.main", "caffe2.python.core.GlobalInit"], "numa_benchmark.build_net": ["<builtin>.str", "<builtin>.range", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.Net"], "numa_benchmark.main": ["caffe2.python.workspace.GetNumNUMANodes", "time.time", "caffe2.python.workspace.IsNUMAEnabled", "caffe2.python.workspace.CreateNet", "<builtin>.print", "numa_benchmark.build_net", "caffe2.python.workspace.RunNet", "<builtin>.range"], "caffe2.python.workspace.IsNUMAEnabled": [], "caffe2.python.workspace.GetNumNUMANodes": [], "caffe2.python.core.GlobalInit": [], "numa_test": ["unittest.main", "caffe2.python.core.GlobalInit"], "numa_test.build_test_net": ["caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.core.Net"], "numa_test.NUMATest.test_numa": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.test_util.TestCase.assertEqual", "numa_test.build_test_net", "caffe2.python.workspace.GetBlobNUMANode"], "caffe2.python.workspace.GetBlobNUMANode": [], "observer_test": ["caffe2.python.workspace.ResetWorkspace", "caffe2.quantization.server.dnnlowp_pybind11.ObserveHistogramOfOutput", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "<builtin>.print", "caffe2.quantization.server.dnnlowp_pybind11.AddOutputColumnMaxHistogramObserver", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.Net", "numpy.array", "caffe2.quantization.server.dnnlowp_pybind11.ObserveMinMaxOfOutput"], "observer_test.TestObservers.setUp": ["caffe2.python.brew.fc", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.CreateNet", "numpy.zeros", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.GlobalInit", "caffe2.python.workspace.RunNetOnce", "<builtin>.dict"], "observer_test.TestObservers.testObserver": ["caffe2.python.workspace.RunNet", "<builtin>.print"], "observer_test.TestObservers": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "observer_test.TestObservers.test_observer_rnn_executor": ["numpy.random.rand", "<builtin>.print", "numpy.array", "caffe2.python.model_helper.ModelHelper", "observer_test.TestObservers.enable_rnn_executor", "<builtin>.range", "<builtin>.len", "numpy.zeros", "caffe2.python.workspace.ResetWorkspace", "numpy.random.seed", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "<builtin>.int", "unittest.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.rnn_cell.LSTM", "unittest.TestCase.assertTrue"], "observer_test.TestObservers.enable_rnn_executor": ["unittest.TestCase.assertEqual"], "operator_fp_exceptions_test": ["unittest.main"], "operator_fp_exceptions_test.setThrowIfFpExceptions": ["caffe2.python.core.GlobalInit"], "operator_fp_exceptions_test.OperatorFPExceptionsTest.test_fp_exception_divbyzero": ["operator_fp_exceptions_test.setThrowIfFpExceptions", "numpy.array", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertEquals"], "optimizer": ["collections.namedtuple", "logging.getLogger", "collections.defaultdict", "torch.jit.script"], "optimizer.reset_optimizer_instance_count": [], "optimizer.Optimizer.__init__": ["torch._C._log_api_usage_once", "collections.defaultdict", "optimizer.Optimizer.add_param_group", "<builtin>.TypeError", "torch.typename", "<builtin>.ValueError", "optimizer.Optimizer._hook_for_profile", "<builtin>.len", "<builtin>.list", "<builtin>.isinstance"], "optimizer.Optimizer.__call__": ["optimizer.FP16SgdOptimizer._run", "optimizer.RmsPropOptimizer._run", "optimizer.MultiPrecisionSgdOptimizer._run", "optimizer.StormOptimizer._run", "optimizer.FtrlOptimizer._run", "optimizer.Optimizer._run", "optimizer.AdagradOptimizer._run", "optimizer.AdamOptimizer._run", "caffe2.python.core.BlobReference", "optimizer.DecayAdagradOptimizer._run", "optimizer.WeightDecayBuilder._run", "optimizer.GFtrlOptimizer._run", "<builtin>.isinstance", "optimizer.WngradOptimizer._run", "optimizer.YellowFinOptimizer._run", "optimizer.AdadeltaOptimizer._run", "caffe2.python.modeling.parameter_info.ParameterInfo", "optimizer.SgdOptimizer._run"], "optimizer.FP16SgdOptimizer._run": ["optimizer.Optimizer.build_lr", "<builtin>.isinstance", "<builtin>.str", "<builtin>.AssertionError"], "optimizer.RmsPropOptimizer._run": ["caffe2.python.core.DeviceOption", "optimizer.Optimizer.build_lr", "caffe2.python.scope.CurrentDeviceScope", "<builtin>.str", "<builtin>.isinstance"], "optimizer.MultiPrecisionSgdOptimizer._run": ["optimizer.FP16SgdOptimizer._run", "optimizer.Optimizer.build_lr", "optimizer.MultiPrecisionSgdOptimizer._run", "<builtin>.str", "<builtin>.isinstance", "optimizer.SgdOptimizer._run"], "optimizer.StormOptimizer._run": ["caffe2.python.core.IsGPUDeviceType", "optimizer.Optimizer.dedup", "numpy.finfo", "optimizer.Optimizer.build_lr", "optimizer.Optimizer.create_lars_inputs", "caffe2.python.scope.CurrentDeviceScope", "optimizer.Optimizer._add_local_lr_multiplier", "<builtin>.str", "<builtin>.isinstance", "optimizer.Optimizer._clear_local_lr_multiplier", "optimizer.Optimizer.make_unique_blob_name"], "optimizer.FtrlOptimizer._run": ["optimizer.Optimizer.dedup", "<builtin>.str", "<builtin>.isinstance"], "optimizer.Optimizer._run": ["<builtin>.Exception"], "optimizer.AdagradOptimizer._run": ["caffe2.python.core.IsGPUDeviceType", "optimizer.Optimizer.dedup", "numpy.finfo", "optimizer.Optimizer.build_lr", "<builtin>.float", "<builtin>.len", "<builtin>.AssertionError", "optimizer.Optimizer.create_lars_inputs", "caffe2.python.scope.CurrentDeviceScope", "optimizer.Optimizer._add_local_lr_multiplier", "<builtin>.str", "<builtin>.isinstance", "caffe2.python.workspace.InferShapesAndTypes", "optimizer.Optimizer._clear_local_lr_multiplier", "<builtin>.NotImplementedError", "optimizer.Optimizer.make_unique_blob_name"], "optimizer.AdamOptimizer._run": ["optimizer.Optimizer.dedup", "optimizer.Optimizer.build_lr", "<builtin>.str", "<builtin>.isinstance", "caffe2.python.workspace.InferShapesAndTypes"], "optimizer.DecayAdagradOptimizer._run": ["optimizer.Optimizer.build_lr", "<builtin>.str", "<builtin>.isinstance"], "optimizer.WeightDecayBuilder._run": ["<builtin>.isinstance", "<builtin>.ValueError", "caffe2.python.scope.CurrentDeviceScope", "caffe2.python.core.DeviceOption"], "optimizer.GFtrlOptimizer._run": ["<builtin>.str"], "optimizer.WngradOptimizer._run": ["caffe2.python.core.IsGPUDeviceType", "optimizer.Optimizer.dedup", "numpy.finfo", "optimizer.Optimizer.build_lr", "optimizer.Optimizer.create_lars_inputs", "caffe2.python.scope.CurrentDeviceScope", "optimizer.Optimizer._add_local_lr_multiplier", "<builtin>.str", "<builtin>.isinstance", "optimizer.Optimizer._clear_local_lr_multiplier", "optimizer.Optimizer.make_unique_blob_name"], "optimizer.YellowFinOptimizer._run": ["caffe2.python.utils.BuildUniqueMutexIter", "<builtin>.isinstance"], "optimizer.AdadeltaOptimizer._run": ["optimizer.Optimizer.build_lr", "optimizer.Optimizer.dedup", "<builtin>.str", "<builtin>.isinstance"], "optimizer.SgdOptimizer._run": ["caffe2.python.core.IsGPUDeviceType", "optimizer.Optimizer.dedup", "caffe2.python.core.DeviceOption", "numpy.finfo", "optimizer.Optimizer.build_lr", "optimizer.Optimizer.create_lars_inputs", "caffe2.python.scope.CurrentDeviceScope", "optimizer.Optimizer._add_local_lr_multiplier", "<builtin>.str", "<builtin>.isinstance", "optimizer.Optimizer._clear_local_lr_multiplier", "optimizer.Optimizer.make_unique_blob_name"], "optimizer.Optimizer.get_cpu_blob_name": [], "optimizer.Optimizer.get_gpu_blob_name": [], "optimizer.Optimizer.attributes": ["copy.deepcopy"], "optimizer.Optimizer.make_unique_blob_name": ["caffe2.python.core.IsGPUDeviceType", "optimizer.Optimizer.get_gpu_blob_name", "optimizer.Optimizer.get_cpu_blob_name", "caffe2.python.scope.CurrentDeviceScope"], "optimizer.Optimizer.build_lr": ["caffe2.python.core.IsGPUDeviceType", "caffe2.python.utils.BuildUniqueMutexIter", "optimizer.Optimizer.make_unique_blob_name", "caffe2.python.scope.CurrentDeviceScope"], "caffe2.python.utils.BuildUniqueMutexIter": [], "optimizer.Optimizer.add_lr_multiplier": [], "optimizer.Optimizer._add_local_lr_multiplier": [], "optimizer.Optimizer._clear_local_lr_multiplier": [], "optimizer.Optimizer.dedup": ["<builtin>.isinstance"], "optimizer.Optimizer.get_auxiliary_parameters": [], "optimizer.Optimizer.scale_learning_rate": ["<builtin>.NotImplementedError"], "optimizer.Optimizer.create_lars_inputs": [], "optimizer.SgdOptimizer.__init__": ["<builtin>.super"], "numpy.finfo": [], "optimizer.SgdOptimizer.scale_learning_rate": [], "optimizer.MultiPrecisionSgdOptimizer.__init__": ["<builtin>.super"], "optimizer.FP16SgdOptimizer.__init__": ["<builtin>.super"], "optimizer.WeightDecayBuilder.__init__": [], "optimizer.AdagradOptimizer.__init__": ["optimizer.AdagradOptimizer._process_swa_options", "<builtin>.float", "<builtin>.locals", "optimizer.AdagradOptimizer._process_ema_options", "optimizer.AdagradOptimizer._process_pruning_options", "<builtin>.super"], "<builtin>.locals": [], "optimizer.AdagradOptimizer._process_pruning_options": ["<builtin>.type", "<builtin>.len", "<builtin>.isinstance"], "optimizer.AdagradOptimizer._process_swa_options": [], "optimizer.AdagradOptimizer._process_ema_options": [], "optimizer.AdagradOptimizer.scale_learning_rate": [], "optimizer.WngradOptimizer.__init__": ["<builtin>.super"], "optimizer.WngradOptimizer.scale_learning_rate": [], "optimizer.StormOptimizer.__init__": ["<builtin>.super"], "optimizer.StormOptimizer.scale_learning_rate": [], "optimizer.AdadeltaOptimizer.__init__": ["<builtin>.super"], "optimizer.AdadeltaOptimizer.scale_learning_rate": [], "optimizer.FtrlOptimizer.__init__": ["<builtin>.super"], "optimizer.FtrlOptimizer.scale_learning_rate": [], "optimizer.GFtrlOptimizer.__init__": ["<builtin>.super"], "optimizer.GFtrlOptimizer.scale_learning_rate": [], "optimizer.AdamOptimizer.__init__": ["<builtin>.NotImplementedError", "<builtin>.super"], "optimizer.AdamOptimizer.scale_learning_rate": [], "optimizer.DecayAdagradOptimizer.__init__": ["optimizer.DecayAdagradOptimizer._process_ema_options", "<builtin>.super"], "optimizer.DecayAdagradOptimizer._process_ema_options": [], "optimizer.DecayAdagradOptimizer.scale_learning_rate": [], "optimizer.YellowFinOptimizer.__init__": ["<builtin>.super"], "optimizer.YellowFinOptimizer.scale_learning_rate": [], "optimizer.RmsPropOptimizer.__init__": ["<builtin>.super"], "optimizer.RmsPropOptimizer.scale_learning_rate": [], "optimizer._get_param_to_device": ["caffe2.python.core.InferBlobDevices"], "caffe2.python.core.InferBlobDevices": [], "optimizer.get_param_device": ["<builtin>.str", "<builtin>.isinstance"], "optimizer.get_lr_injection": ["caffe2.python.workspace.FetchBlob"], "optimizer.set_lr_injection": ["<builtin>.float", "caffe2.python.workspace.FeedBlob", "numpy.array"], "optimizer._calc_norm_ratio": ["caffe2.python.core.DeviceOption", "<builtin>.float", "optimizer.get_param_device", "caffe2.python.core.DeviceScope", "<builtin>.enumerate", "<builtin>.str", "<builtin>.isinstance", "caffe2.python.core.NameScope"], "optimizer._build": ["optimizer.get_param_device", "caffe2.python.core.DeviceScope", "optimizer.SgdOptimizer.__init__", "optimizer.AdamOptimizer.__init__", "<builtin>.str", "optimizer.AdadeltaOptimizer.__init__", "optimizer.AdagradOptimizer.__init__", "optimizer.WngradOptimizer.__init__", "optimizer.FP16SgdOptimizer.__init__", "optimizer._calc_norm_ratio", "optimizer._get_param_to_device", "optimizer.FtrlOptimizer.__init__", "optimizer.YellowFinOptimizer.__init__", "optimizer.Optimizer.add_lr_multiplier", "optimizer.StormOptimizer.__init__", "optimizer.GFtrlOptimizer.__init__", "optimizer.DecayAdagradOptimizer.__init__", "optimizer.MultiPrecisionSgdOptimizer.__init__", "optimizer.WeightDecayBuilder.__init__", "optimizer.RmsPropOptimizer.__init__"], "optimizer.add_weight_decay": ["optimizer.WeightDecayBuilder.__init__", "optimizer._build"], "optimizer.build_sgd": ["optimizer.SgdOptimizer.__init__", "optimizer._build"], "optimizer.build_multi_precision_sgd": ["optimizer.MultiPrecisionSgdOptimizer.__init__", "optimizer._build"], "optimizer.build_fp16_sgd": ["optimizer.FP16SgdOptimizer.__init__", "optimizer._build"], "optimizer.build_ftrl": ["optimizer.FtrlOptimizer.__init__", "caffe2.python.core.IsOperator", "optimizer._build"], "optimizer.build_gftrl": ["optimizer.GFtrlOptimizer.__init__", "caffe2.python.core.IsOperator", "optimizer._build"], "optimizer.build_adagrad": ["optimizer.AdagradOptimizer.__init__", "optimizer._build"], "optimizer.build_wngrad": ["optimizer.WngradOptimizer.__init__", "optimizer._build"], "optimizer.build_storm": ["optimizer.StormOptimizer.__init__", "optimizer._build"], "optimizer.build_adadelta": ["optimizer.AdadeltaOptimizer.__init__", "optimizer._build"], "optimizer.build_adam": ["optimizer.AdamOptimizer.__init__", "optimizer._build"], "optimizer.build_decay_adagrad": ["optimizer.DecayAdagradOptimizer.__init__", "optimizer._build"], "optimizer.build_yellowfin": ["optimizer._build", "optimizer.YellowFinOptimizer.__init__"], "optimizer.build_rms_prop": ["optimizer.RmsPropOptimizer.__init__", "optimizer._build"], "optimizer_context": [], "optimizer_context.OptimizerContext.has_optimizer": ["caffe2.python.modifier_context.ModifierContext._has_modifier"], "optimizer_context.OptimizerContext.get_optimizer": ["caffe2.python.modifier_context.ModifierContext._get_modifier", "optimizer_context.OptimizerContext.has_optimizer"], "optimizer_context.UseOptimizer._context_class": [], "optimizer_test": [], "optimizer_test.TestLars.testSparse": ["unittest.SkipTest"], "unittest.SkipTest": [], "optimizer_test.TestLars.build_optimizer": ["caffe2.python.optimizer.build_sgd"], "optimizer_test.TestLars.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_allclose", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "numpy.array"], "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue": [], "caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse": [], "optimizer_test.TestMomentumSgd.build_optimizer": ["caffe2.python.optimizer.build_sgd"], "optimizer_test.TestMomentumSgd.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob", "numpy.array", "numpy.testing.assert_allclose"], "optimizer_test.TestSgd.build_optimizer": ["caffe2.python.optimizer.build_sgd"], "optimizer_test.TestSgd.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_allclose", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "numpy.array"], "optimizer_test.TestMultiPrecisionSgd.build_optimizer": ["caffe2.python.optimizer.build_multi_precision_sgd"], "caffe2.python.optimizer.build_multi_precision_sgd": [], "optimizer_test.TestMultiPrecisionSgd.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_allclose", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "numpy.array"], "optimizer_test.TestMultiPrecisionSgd": ["unittest.skipIf"], "optimizer_test.TestMultiPrecisionSgd.testGPUDense": ["<builtin>.super"], "optimizer_test.TestFtrl.build_optimizer": ["caffe2.python.optimizer.build_ftrl"], "caffe2.python.optimizer.build_ftrl": [], "optimizer_test.TestFtrl.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob"], "optimizer_test.TestGFtrl.testSparse": ["unittest.SkipTest"], "optimizer_test.TestGFtrl.build_optimizer": ["caffe2.python.optimizer.build_gftrl"], "caffe2.python.optimizer.build_gftrl": [], "optimizer_test.TestGFtrl.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob"], "optimizer_test.TestAdagrad.build_optimizer": ["caffe2.python.optimizer.build_adagrad"], "caffe2.python.optimizer.build_adagrad": [], "optimizer_test.TestAdagrad.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob"], "optimizer_test.TestRowWiseAdagrad.build_optimizer": ["caffe2.python.optimizer.build_adagrad"], "optimizer_test.TestRowWiseAdagrad.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob"], "optimizer_test.TestRowWiseAdagrad.testDense": ["unittest.SkipTest"], "optimizer_test.TestRowWiseAdagrad.testGPUDense": ["unittest.SkipTest"], "optimizer_test.TestRowWiseAdagradWithCounter.build_optimizer": ["caffe2.python.optimizer.build_adagrad"], "optimizer_test.TestRowWiseAdagradWithCounter.check_optimizer": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "numpy.testing.assert_allclose", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "numpy.array"], "optimizer_test.TestRowWiseAdagradWithCounter.testDense": ["unittest.SkipTest"], "optimizer_test.TestRowWiseAdagradWithCounter.testGPUDense": ["unittest.SkipTest"], "optimizer_test.TestWngrad.build_optimizer": ["caffe2.python.optimizer.build_wngrad"], "caffe2.python.optimizer.build_wngrad": [], "optimizer_test.TestWngrad.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob"], "optimizer_test.TestStorm.build_optimizer": ["caffe2.python.optimizer.build_storm"], "caffe2.python.optimizer.build_storm": [], "optimizer_test.TestStorm.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob"], "optimizer_test.TestAdadelta.build_optimizer": ["caffe2.python.optimizer.build_adadelta"], "caffe2.python.optimizer.build_adadelta": [], "optimizer_test.TestAdadelta.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob"], "optimizer_test.TestAdam.build_optimizer": ["caffe2.python.optimizer.build_adam"], "caffe2.python.optimizer.build_adam": [], "optimizer_test.TestAdam.check_optimizer": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "numpy.testing.assert_allclose", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "numpy.array"], "optimizer_test.TestSmartDecayAdam.build_optimizer": ["caffe2.python.optimizer.build_adam"], "optimizer_test.TestSmartDecayAdam.check_optimizer": ["<builtin>.any", "caffe2.python.workspace.Blobs", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue"], "optimizer_test.TestDecayAdagrad.build_optimizer": ["caffe2.python.optimizer.build_decay_adagrad"], "caffe2.python.optimizer.build_decay_adagrad": [], "optimizer_test.TestDecayAdagrad.check_optimizer": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "numpy.testing.assert_allclose", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "numpy.array"], "optimizer_test.TestDecayAdagrad.testSparse": ["unittest.SkipTest"], "optimizer_test.TestSparseRAdam.build_optimizer": ["caffe2.python.optimizer.build_adam"], "optimizer_test.TestSparseRAdam.check_optimizer": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "numpy.testing.assert_allclose", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "numpy.array"], "optimizer_test.TestYellowFin.build_optimizer": ["caffe2.python.optimizer.build_yellowfin"], "caffe2.python.optimizer.build_yellowfin": [], "optimizer_test.TestYellowFin.check_optimizer": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "numpy.testing.assert_allclose", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "numpy.array"], "optimizer_test.TestYellowFin.testSparse": ["unittest.SkipTest"], "optimizer_test.TestYellowFin.deb": [], "optimizer_test.TestYellowFin.get_lr_mu": ["<builtin>.min", "math.fabs", "math.sqrt", "<builtin>.max", "math.pow", "numpy.sqrt"], "math.fabs": [], "math.pow": [], "optimizer_test.TestYellowFin.caffe2_yellowfin": ["caffe2.python.workspace.CreateNet", "<builtin>.range", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.optimizer.YellowFinOptimizer", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "<builtin>.max", "optimizer_test.TestYellowFin.deb", "numpy.exp", "caffe2.python.core.DeviceScope"], "optimizer_test.TestYellowFin.caffe2_yellowfin.<lambda1>": [], "caffe2.python.optimizer.YellowFinOptimizer": [], "optimizer_test.TestYellowFin.numpy_yellowfin": ["<builtin>.range", "numpy.linalg.norm", "numpy.log", "numpy.ones", "<builtin>.max", "optimizer_test.TestYellowFin.get_lr_mu", "numpy.exp", "numpy.sum"], "optimizer_test.TestYellowFin.compare_yellowfin_models": ["numpy.testing.assert_equal", "<builtin>.len", "<builtin>.range", "<builtin>.str", "optimizer_test.TestYellowFin.numpy_yellowfin", "numpy.testing.assert_allclose", "optimizer_test.TestYellowFin.caffe2_yellowfin"], "optimizer_test.TestYellowFin": ["unittest.skipIf", "unittest.skip"], "optimizer_test.TestYellowFin.test_caffe2_cpu_vs_numpy": ["caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "optimizer_test.TestYellowFin.compare_yellowfin_models"], "optimizer_test.TestYellowFin.test_caffe2_gpu_vs_numpy": ["caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "optimizer_test.TestYellowFin.compare_yellowfin_models"], "optimizer_test.TestRmsProp.build_optimizer": ["caffe2.python.optimizer.build_rms_prop"], "caffe2.python.optimizer.build_rms_prop": [], "optimizer_test.TestRmsProp.check_optimizer": ["caffe2.python.optimizer_test_util.OptimizerTestBase.assertFalse", "caffe2.python.optimizer_test_util.OptimizerTestBase.assertTrue", "caffe2.python.workspace.FetchBlob"], "optimizer_test.TestRmsProp.testSparse": ["unittest.SkipTest"], "optimizer_test.TestMultiOptimizers.test_multiple_optimizers": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.fc", "optimizer_test.TestMultiOptimizers.test_multiple_optimizers.infer_blob_device", "caffe2.python.optimizer._get_param_to_device", "caffe2.python.optimizer.AdagradOptimizer", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.optimizer.SgdOptimizer", "caffe2.python.core.DeviceScope"], "caffe2.python.optimizer._get_param_to_device": [], "optimizer_test.TestMultiOptimizers.test_multiple_optimizers.infer_blob_device": ["caffe2.python.optimizer.get_param_device"], "caffe2.python.optimizer.SgdOptimizer": [], "optimizer_test.TestWeightDecay.test_weight_decay": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.fc", "caffe2.python.brew.conv", "caffe2.python.optimizer.add_weight_decay", "<builtin>.print", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.optimizer.build_sgd", "<builtin>.set"], "caffe2.python.optimizer.add_weight_decay": [], "optimizer_test.TestOptimizerContext.test_optimizer_context": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.optimizer_context.UseOptimizer", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.fc", "caffe2.python.brew.conv", "caffe2.python.optimizer.add_weight_decay", "<builtin>.print", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.optimizer.build_sgd", "<builtin>.set", "caffe2.python.test_util.TestCase.assertAlmostEqual", "caffe2.python.optimizer.SgdOptimizer"], "caffe2.python.optimizer_context.UseOptimizer": [], "optimizer_test_util": [], "optimizer_test_util.OptimizerTestBase._createDense": ["numpy.dot", "caffe2.python.brew.fc", "caffe2.python.model_helper.ModelHelper", "numpy.array", "numpy.random.randint", "numpy.random.seed"], "optimizer_test_util.OptimizerTestBase.testDense": ["caffe2.python.workspace.FeedBlob", "numpy.testing.assert_allclose", "numpy.random.randint", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "optimizer_test_util.OptimizerTestBase._createDense", "caffe2.python.workspace.RunNet", "<builtin>.range", "caffe2.python.workspace.CreateNet"], "optimizer_test_util.OptimizerTestBase": ["unittest.skipIf"], "optimizer_test_util.OptimizerTestBase.testGPUDense": ["caffe2.python.brew.fc", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceScope", "optimizer_test_util.OptimizerTestBase._createDense", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.CreateNet"], "optimizer_test_util.OptimizerTestBase.testSparse": ["numpy.dot", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.cnn.CNNModelHelper", "numpy.testing.assert_allclose", "<builtin>.range", "numpy.random.randint", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateBlob", "numpy.random.seed", "numpy.repeat", "caffe2.python.workspace.CreateNet", "numpy.arange"], "numpy.repeat": [], "optimizer_test_util.LRModificationTestBase._gradient_ratio_reference": ["<builtin>.isinstance", "numpy.sqrt", "numpy.maximum", "caffe2.python.workspace.FetchBlob", "numpy.power", "numpy.linalg.norm"], "optimizer_test_util.LRModificationTestBase.test_global_norm_based_gradient_clipping": ["caffe2.python.workspace.FeedBlob", "<builtin>.isinstance", "optimizer_test_util.LRModificationTestBase._gradient_ratio_reference", "numpy.testing.assert_almost_equal", "numpy.random.randint", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet"], "optimizer_test_util.LRModificationTestBase.test_lr_injection": ["caffe2.python.workspace.FeedBlob", "caffe2.python.optimizer.get_lr_injection", "caffe2.python.optimizer.set_lr_injection", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet"], "caffe2.python.optimizer.get_lr_injection": [], "caffe2.python.optimizer.set_lr_injection": [], "parallelize_bmuf_distributed_test": ["logging.getLogger"], "parallelize_bmuf_distributed_test.bmuf_process": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.DeviceOption", "parallelize_bmuf_distributed_test.bmuf_process._device_pid", "parallelize_bmuf_distributed_test.bmuf_process._generate_data", "numpy.testing.assert_equal", "caffe2.python.workspace.FeedBlob", "caffe2.python.cnn.CNNModelHelper", "<builtin>.dict", "numpy.zeros", "caffe2.python.data_parallel_model.RunNet", "caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.data_parallel_model.RunInitNet", "caffe2.python.workspace.NumGpuDevices", "caffe2.python.workspace.RunNetOnce", "numpy.array", "caffe2.python.data_parallel_model.Parallelize_BMUF", "caffe2.python.core.CreateOperator"], "parallelize_bmuf_distributed_test.bmuf_process._model_build_fun": [], "parallelize_bmuf_distributed_test.bmuf_process._input_builder_fun": [], "parallelize_bmuf_distributed_test.bmuf_process._param_update_fun": [], "parallelize_bmuf_distributed_test.bmuf_process._generate_data": ["<builtin>.len", "numpy.random.rand", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "<builtin>.range", "caffe2.python.workspace.FeedBlob", "numpy.random.seed", "numpy.round", "<builtin>.enumerate"], "parallelize_bmuf_distributed_test.bmuf_process._device_pid": [], "parallelize_bmuf_distributed_test.DistributedTest": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.booleans"], "parallelize_bmuf_distributed_test.DistributedTest.test_bmuf_distributed": ["parallelize_bmuf_distributed_test.DistributedTest._test_bmuf_distributed"], "parallelize_bmuf_distributed_test.DistributedTest._test_bmuf_distributed": ["<builtin>.len", "tempfile.mkdtemp", "<builtin>.range", "numpy.testing.assert_equal", "numpy.testing.assert_almost_equal", "shutil.rmtree", "unittest.TestCase.assertEqual", "multiprocessing.Process", "multiprocessing.Manager"], "multiprocessing.Manager": [], "parallel_workers": ["parallel_workers.GlobalWorkerCoordinator.__init__", "logging.getLogger"], "parallel_workers.init_workers": ["<builtin>.range", "parallel_workers.WorkerCoordinator.__init__", "parallel_workers.GlobalWorkerCoordinator.get_new_worker_id", "threading.Thread", "parallel_workers.GlobalWorkerCoordinator.add", "parallel_workers.Metrics.__init__", "parallel_workers.Worker.__init__"], "parallel_workers.Metrics.__init__": ["collections.defaultdict"], "parallel_workers.GlobalWorkerCoordinator.get_new_worker_id": [], "parallel_workers.WorkerCoordinator.__init__": [], "parallel_workers.Worker.__init__": [], "parallel_workers.GlobalWorkerCoordinator.add": [], "parallel_workers.Metrics.__init__.<lambda1>": [], "parallel_workers.Metrics.reset_metrics": ["collections.defaultdict"], "parallel_workers.Metrics.reset_metrics.<lambda1>": [], "parallel_workers.Metrics.log_metrics": ["<builtin>.print"], "parallel_workers.Metrics.put_metric": [], "parallel_workers.State": ["abc.abstractmethod"], "parallel_workers.State.start": [], "parallel_workers.State.stop": [], "parallel_workers.State.cleanup": [], "parallel_workers.WorkerCoordinator.is_active": [], "parallel_workers.WorkerCoordinator.init": [], "parallel_workers.WorkerCoordinator._start": [], "parallel_workers.WorkerCoordinator._stop": [], "parallel_workers.WorkerCoordinator._wait_finish": ["<builtin>.print", "threading.current_thread"], "threading.current_thread": [], "parallel_workers.WorkerCoordinator.get_worker_ids": [], "parallel_workers.GlobalWorkerCoordinator.__init__": ["parallel_workers.GlobalWorkerCoordinator.register_shutdown_handler"], "parallel_workers.GlobalWorkerCoordinator.register_shutdown_handler": ["atexit.register"], "parallel_workers.GlobalWorkerCoordinator.get_worker_ids": [], "parallel_workers.GlobalWorkerCoordinator.start": [], "parallel_workers.GlobalWorkerCoordinator.stop": [], "parallel_workers.GlobalWorkerCoordinator.stop_coordinator": [], "parallel_workers.GlobalWorkerCoordinator.register_shutdown_handler.cleanup": ["parallel_workers.GlobalWorkerCoordinator.stop"], "parallel_workers.Worker.start": ["time.time"], "parallel_workers.Worker.run": [], "parallel_workers.Worker.handle_exception": ["traceback.print_exc", "parallel_workers.WorkerCoordinator._stop", "logging.exception"], "logging.exception": [], "parallel_workers.Worker.finish": ["parallel_workers.Metrics.put_metric", "parallel_workers.Metrics.log_metrics", "time.time"], "parallel_workers.run_worker": [], "parallel_workers_test": [], "parallel_workers_test.create_queue": ["<builtin>.range", "<builtin>.str", "caffe2.python.workspace.C.Workspace.current.create_blob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator"], "caffe2.python.workspace.C.Workspace.current.create_blob": [], "parallel_workers_test.create_worker": [], "parallel_workers_test.create_worker.dummy_worker": ["<builtin>.str", "parallel_workers_test.ParallelWorkersTest.testParallelWorkers.<lambda1>", "caffe2.python.workspace.RunOperatorOnce", "parallel_workers_test.ParallelWorkersTest.testParallelWorkersShutdownFun.<lambda1>", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "parallel_workers_test.ParallelWorkersTest.testParallelWorkersInitFun.<lambda1>"], "parallel_workers_test.ParallelWorkersTest.testParallelWorkersShutdownFun.<lambda1>": ["<builtin>.str"], "parallel_workers_test.ParallelWorkersTest.testParallelWorkersInitFun.<lambda1>": ["caffe2.python.workspace.FetchBlob"], "parallel_workers_test.ParallelWorkersTest.testParallelWorkers.<lambda1>": ["<builtin>.str"], "parallel_workers_test.dequeue_value": ["caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce"], "parallel_workers_test.ParallelWorkersTest.testParallelWorkers": ["caffe2.python.parallel_workers.init_workers", "parallel_workers_test.dequeue_value", "<builtin>.range", "parallel_workers_test.create_worker", "caffe2.python.workspace.ResetWorkspace", "<builtin>.str", "unittest.TestCase.assertTrue", "parallel_workers_test.create_queue"], "caffe2.python.parallel_workers.init_workers": [], "parallel_workers_test.ParallelWorkersTest.testParallelWorkersInitFun": ["caffe2.python.parallel_workers.init_workers", "parallel_workers_test.dequeue_value", "caffe2.python.workspace.ResetWorkspace", "parallel_workers_test.create_worker", "<builtin>.range", "<builtin>.str", "unittest.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "parallel_workers_test.create_queue"], "parallel_workers_test.ParallelWorkersTest.testParallelWorkersInitFun.init_fun": ["caffe2.python.workspace.FeedBlob"], "parallel_workers_test.ParallelWorkersTest.testParallelWorkersShutdownFun": ["caffe2.python.parallel_workers.init_workers", "caffe2.python.workspace.ResetWorkspace", "parallel_workers_test.create_worker", "caffe2.python.workspace.FetchBlob", "<builtin>.str", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "parallel_workers_test.create_queue"], "parallel_workers_test.ParallelWorkersTest.testParallelWorkersShutdownFun.shutdown_fun": ["caffe2.python.workspace.FeedBlob"], "pipeline": [], "pipeline.Output.__init__": ["caffe2.python.net_builder.NetBuilder.current", "<builtin>.isinstance", "<builtin>.len", "<builtin>.list", "caffe2.python.schema.as_record"], "caffe2.python.schema.as_record": [], "pipeline._init_output": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.hasattr", "caffe2.python.queue_util.Queue"], "caffe2.python.queue_util.Queue": [], "pipeline.make_processor": ["pipeline.NetProcessor.__init__", "<builtin>.isinstance", "<builtin>.hasattr"], "pipeline.make_processor.<lambda1>": [], "pipeline.NetProcessor.__init__": ["<builtin>.isinstance", "<builtin>.str"], "pipeline.make_processor.processor_schema": [], "pipeline.normalize_processor_output": ["<builtin>.isinstance", "<builtin>.len", "pipeline.Output.__init__"], "pipeline.pipe": ["pipeline._pipe_step"], "pipeline._pipe_step": ["<builtin>.isinstance", "pipeline.ProcessingReader.__init__", "<builtin>.ValueError", "<builtin>.type", "<builtin>.hasattr", "pipeline._runtime_threads_task", "pipeline._static_threads_task", "pipeline.processor_name"], "pipeline.pipe_and_output": ["pipeline._pipe_step", "<builtin>.type"], "pipeline.processor_name": ["<builtin>.hasattr"], "pipeline._runtime_threads_task": ["caffe2.python.dataio.Reader.read_record_ex", "caffe2.python.net_builder.ops.task_exit", "caffe2.python.net_builder.ops.task_instance_exit", "<builtin>.str", "caffe2.python.task.Node.current", "pipeline.ProcessingReader.setup_ex", "pipeline._init_output", "caffe2.python.net_builder.ops.task_init", "caffe2.python.net_builder.ops.net", "caffe2.python.net_builder.ops.task_instance_init", "caffe2.python.core.Net", "<builtin>.list", "caffe2.python.core.execution_step", "caffe2.python.task.Task", "pipeline.processor_name"], "caffe2.python.task.Node.current": [], "pipeline.ProcessingReader.setup_ex": ["pipeline.ProcessingReader.setup_ex"], "caffe2.python.dataio.Reader.read_record_ex": [], "pipeline._static_threads_task": ["caffe2.python.dataio.Reader.read_record_ex", "<builtin>.str", "caffe2.python.task.Node.current", "pipeline.ProcessingReader.setup_ex", "pipeline._init_output", "caffe2.python.net_builder.ops.net", "caffe2.python.core.to_execution_step", "caffe2.python.core.Net", "<builtin>.list", "caffe2.python.core.execution_step", "caffe2.python.task.Task", "<builtin>.range", "caffe2.python.net_builder.NetBuilder", "pipeline.processor_name"], "pipeline.ProcessingReader.__init__": ["pipeline.make_processor", "caffe2.python.dataio.Reader.__init__"], "pipeline.ProcessingReader.schema": ["pipeline.NetProcessor.schema"], "pipeline.NetProcessor.schema": [], "pipeline.ProcessingReader.read_ex": ["caffe2.python.dataio.Reader.read_record_ex", "pipeline.NetProcessor.__init__", "caffe2.python.core.Net", "pipeline.make_processor.<lambda1>", "caffe2.python.dataio.Reader._set_schema", "caffe2.python.net_builder.NetBuilder", "<builtin>.hasattr", "pipeline.normalize_processor_output"], "caffe2.python.dataio.Reader._set_schema": [], "pipeline.NetProcessor.setup": [], "pipeline.NetProcessor.__call__": ["caffe2.python.net_builder.NetBuilder.current", "<builtin>.str", "caffe2.python.core.clone_and_bind_net", "caffe2.python.core.BlobReference", "pipeline.Output.__init__"], "caffe2.python.core.clone_and_bind_net": [], "pipeline.NetProcessor.blob_maps": [], "pipeline_test": [], "pipeline_test.TestPipeline.test_dequeue_many": ["<builtin>.str", "caffe2.python.schema.Struct", "caffe2.python.core.NameScope", "math.ceil", "caffe2.python.core.Net", "numpy.testing.assert_array_equal", "<builtin>.int", "caffe2.python.schema.FeedRecord", "<builtin>.range", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.workspace.C.Workspace", "caffe2.python.task.TaskGroup", "caffe2.python.schema.NewRecord", "caffe2.python.queue_util.Queue", "<builtin>.float", "numpy.array", "caffe2.python.schema.FetchRecord", "caffe2.python.schema.InitEmptyRecord", "<builtin>.zip", "caffe2.python.pipeline.pipe", "caffe2.python.dataset.Dataset", "caffe2.python.session.LocalSession"], "pipeline_test.TestPipeline.test_dequeue_many.proc1": ["caffe2.python.net_builder.ops.Add", "caffe2.python.core.NameScope", "caffe2.python.schema.NewRecord"], "pipeline_test.TestPipeline.test_dequeue_many.proc2": ["caffe2.python.net_builder.ops.Add", "caffe2.python.net_builder.ops.Sub", "caffe2.python.core.NameScope", "caffe2.python.schema.NewRecord"], "caffe2.python.net_builder.ops.Sub": [], "predictor_constants": ["caffe2.proto.predictor_consts_pb2.PredictorConsts"], "caffe2.proto.predictor_consts_pb2.PredictorConsts": [], "python_op_test": ["unittest.main"], "python_op_test.SubFunctionThatThrowsCustomError": [], "python_op_test.MainOpFunctionThatThrowsCustomError": ["python_op_test.SubFunctionThatThrowsCustomError"], "python_op_test.MainOpFunctionThatThrowsCustomErrorInBuilder": [], "python_op_test.op_builder": [], "python_op_test.op_builder.my_op": [], "python_op_test.PythonOpTest": ["caffe2.python.hypothesis_test_util.tensors", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.settings"], "python_op_test.PythonOpTest.test_feed": ["caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreatePythonOperator", "caffe2.python.workspace.RunOperatorOnce"], "python_op_test.PythonOpTest.test_feed.f": ["numpy.testing.assert_almost_equal", "<builtin>.type", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "caffe2.python.core.CreatePythonOperator": [], "python_op_test.PythonOpTest.test_exception": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaisesRegex", "caffe2.python.core.CreatePythonOperator", "caffe2.python.workspace.RunOperatorOnce"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaisesRegex": [], "python_op_test.PythonOpTest.test_exception_builder": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaisesRegex", "caffe2.python.core.CreatePythonOperator", "caffe2.python.workspace.RunOperatorOnce"], "python_op_test.PythonOpTest.test_feed_with_helper_function": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob"], "python_op_test.PythonOpTest.test_feed_with_helper_function.f": ["numpy.testing.assert_almost_equal", "<builtin>.type", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "python_op_test.PythonOpTest.test_builder_tuple": ["caffe2.python.workspace.CreateNet", "numpy.array", "<builtin>.range", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNet"], "python_op_test.PythonOpTest.test_feed_with_gc": ["caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreatePythonOperator", "caffe2.python.workspace.RunOperatorOnce"], "python_op_test.PythonOpTest.test_feed_with_gc.f": ["numpy.testing.assert_almost_equal", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "python_op_test.PythonOpTest.test_reshape": ["numpy.testing.assert_almost_equal", "caffe2.python.core.CreatePythonOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "python_op_test.PythonOpTest.test_reshape.f": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "python_op_test.PythonOpTest.test_workspace_manipulation": ["caffe2.python.core.Net", "caffe2.python.workspace.C.Workspace"], "python_op_test.PythonOpTest.test_workspace_manipulation.f": ["numpy.testing.assert_almost_equal"], "python_op_test.PythonOpTest.test_caught_exception_doesnt_terminate": ["caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreatePythonOperator", "caffe2.python.workspace.RunOperatorOnce"], "python_op_test.PythonOpTest.test_caught_exception_doesnt_terminate.f": ["<builtin>.Exception"], "python_op_test.PythonOpTest.test_multithreaded_evaluation": ["caffe2.python.workspace.FeedBlob", "numpy.testing.assert_almost_equal", "caffe2.python.core.CreatePythonOperator", "<builtin>.str", "caffe2.python.core.Plan", "caffe2.python.workspace.RunPlan", "<builtin>.range", "caffe2.python.core.Net", "caffe2.python.core.ExecutionStep", "caffe2.python.workspace.FetchBlob"], "python_op_test.PythonOpTest.test_multithreaded_evaluation.f": [], "python_op_test.PythonOpTest.test_gradient": ["caffe2.python.core.CreatePythonOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "python_op_test.PythonOpTest.test_gradient.f": [], "python_op_test.PythonOpTest.test_gradient.grad_f": [], "python_op_test.PythonOpTest.test_gradient_multiple": ["caffe2.python.core.CreatePythonOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "python_op_test.PythonOpTest.test_gradient_multiple.f": ["<builtin>.type", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "python_op_test.PythonOpTest.test_gradient_multiple.grad_f": ["<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "python_op_test.PythonOpTest.test_gradient_multiple_with_indices": ["caffe2.python.core.CreatePythonOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "python_op_test.PythonOpTest.test_gradient_multiple_with_indices.f": ["<builtin>.type", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "python_op_test.PythonOpTest.test_gradient_multiple_with_indices.grad_f": ["<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "queue_util": ["logging.getLogger"], "queue_util._QueueReader.__init__": ["caffe2.python.dataio.Pipe.schema", "caffe2.python.dataio.Reader.__init__"], "caffe2.python.dataio.Pipe.schema": [], "queue_util._QueueReader.setup_ex": [], "queue_util._QueueReader.read_ex": ["caffe2.python.dataio.Reader.schema", "caffe2.python.core.Net", "<builtin>.len", "queue_util.QueueWrapper.queue", "queue_util.dequeue", "caffe2.python.dataio.Pipe._new_reader"], "caffe2.python.dataio.Pipe._new_reader": [], "queue_util.QueueWrapper.queue": [], "caffe2.python.dataio.Reader.schema": [], "queue_util.dequeue": ["<builtin>.list", "<builtin>.len", "<builtin>.range"], "queue_util._QueueReader.read": ["queue_util._QueueReader.read_ex"], "queue_util._QueueWriter.__init__": [], "queue_util._QueueWriter.setup_ex": [], "queue_util._QueueWriter.write_ex": ["caffe2.python.dataio.Writer.schema", "caffe2.python.core.Net", "caffe2.python.dataio.Pipe._new_writer", "queue_util.enqueue", "queue_util.QueueWrapper.queue"], "caffe2.python.dataio.Writer.schema": [], "caffe2.python.dataio.Pipe._new_writer": [], "queue_util.enqueue": [], "queue_util.QueueWrapper.__init__": ["caffe2.python.dataio.Pipe.__init__"], "caffe2.python.dataio.Pipe.__init__": [], "queue_util.QueueWrapper.reader": ["queue_util._QueueReader.__init__"], "queue_util.QueueWrapper.writer": ["queue_util._QueueWriter.__init__"], "queue_util.Queue.__init__": ["caffe2.python.core.Net", "queue_util.QueueWrapper.__init__"], "queue_util.Queue.setup": ["<builtin>.len"], "queue_util.close_queue": ["caffe2.python.core.Net", "<builtin>.str", "caffe2.python.core.execution_step"], "record_queue": [], "record_queue._QueueReader.__init__": ["<builtin>.super"], "record_queue._QueueReader.read": ["caffe2.python.core.NameScope"], "record_queue._QueueWriter.__init__": [], "record_queue._QueueWriter.write": ["<builtin>.isinstance"], "record_queue.RecordQueue.__init__": ["record_queue._QueueReader.__init__", "record_queue._QueueWriter.__init__", "caffe2.python.schema.from_column_list", "caffe2.python.core.Net", "<builtin>.isinstance", "caffe2.python.core.workspace.RunNetOnce", "caffe2.python.core.execution_step", "<builtin>.str", "<builtin>.len"], "caffe2.python.core.workspace.RunNetOnce": [], "record_queue.RecordQueue.build": ["caffe2.python.core.Net", "caffe2.python.core.execution_step", "record_queue._QueueWriter.write", "<builtin>.str", "<builtin>.range"], "recurrent": [], "recurrent.recurrent_net": ["future.utils.viewitems", "caffe2.python.core.Net", "caffe2.python.core.BlobReference", "<builtin>.len", "caffe2.python.core.GradientRegistry.GetBackwardPass", "future.utils.viewkeys", "<builtin>.enumerate", "<builtin>.list", "<builtin>.str", "caffe2.python.core.get_ssa", "recurrent.recurrent_net.s", "caffe2.python.core.get_undefined_blobs", "recurrent.recurrent_net.unpack_triple", "<builtin>.set"], "recurrent.recurrent_net.s": ["<builtin>.str"], "recurrent.recurrent_net.unpack_triple": ["<builtin>.zip"], "recurrent.recurrent_net.map_to_dual_list": ["<builtin>.list", "<builtin>.str"], "recurrent.set_rnn_executor_config": ["recurrent.set_rnn_executor_config.add_arg"], "recurrent.set_rnn_executor_config.add_arg": ["caffe2.proto.caffe2_pb2.Argument"], "recurrent.retrieve_step_blobs": ["caffe2.python.workspace.FetchBlob", "<builtin>.str", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce"], "regularizer": [], "regularizer.Regularizer.__init__": [], "regularizer.Regularizer.__call__": ["<builtin>.isinstance", "caffe2.python.utils.EnumClassKeyVals", "<builtin>.getattr", "<builtin>.hasattr"], "caffe2.python.utils.EnumClassKeyVals": [], "regularizer.Regularizer._run_on_loss": [], "regularizer.Regularizer._run_after_optimizer": [], "regularizer.Regularizer._feature_grouping": [], "regularizer.Regularizer._ensure_clipped": ["<builtin>.isinstance"], "regularizer.L1Norm.__init__": ["<builtin>.super"], "regularizer.L1Norm._run_on_loss": [], "regularizer.LpNorm.__init__": ["<builtin>.super"], "regularizer.LpNorm._run_on_loss": ["regularizer.Regularizer._feature_grouping"], "regularizer.L0ApproxNorm.__init__": ["<builtin>.super", "<builtin>.float"], "regularizer.L0ApproxNorm._run_on_loss": ["regularizer.Regularizer._feature_grouping"], "regularizer.L1NormTrimmed.__init__": ["<builtin>.isinstance", "<builtin>.super"], "regularizer.L1NormTrimmed._run_on_loss": [], "regularizer.L2Norm.__init__": ["<builtin>.super"], "regularizer.L2Norm._run_on_loss": [], "regularizer.ElasticNet.__init__": ["<builtin>.super"], "regularizer.ElasticNet._run_on_loss": [], "regularizer.ElasticNetL1NormTrimmed.__init__": ["<builtin>.super"], "regularizer.ElasticNetL1NormTrimmed._run_on_loss": [], "regularizer.MaxNorm.__init__": ["<builtin>.super"], "regularizer.MaxNorm._run_after_optimizer": ["<builtin>.isinstance", "<builtin>.NotImplementedError"], "regularizer.ConstantNorm.__init__": ["<builtin>.super"], "regularizer.ConstantNorm._run_after_optimizer": ["<builtin>.isinstance", "<builtin>.NotImplementedError"], "regularizer.SparseLpNorm.__init__": ["<builtin>.super"], "regularizer.SparseLpNorm._run_after_optimizer": ["<builtin>.isinstance", "<builtin>.NotImplementedError"], "regularizer.SparseL1Norm.__init__": ["<builtin>.super"], "regularizer.SparseL2Norm.__init__": ["<builtin>.super"], "regularizer.LogBarrier.__init__": ["<builtin>.super"], "regularizer.LogBarrier._run_on_loss": ["caffe2.python.utils.BuildUniqueMutexIter"], "regularizer.LogBarrier._run_after_optimizer": ["regularizer.Regularizer._ensure_clipped"], "regularizer.BoundedGradientProjection.__init__": ["<builtin>.super", "<builtin>.float"], "regularizer.BoundedGradientProjection._run_after_optimizer": ["regularizer.Regularizer._ensure_clipped"], "regularizer.GroupL1Norm.__init__": ["<builtin>.isinstance", "<builtin>.super"], "regularizer.GroupL1Norm._run_on_loss": [], "regularizer_context": [], "regularizer_context.RegularizerContext.has_regularizer": ["caffe2.python.modifier_context.ModifierContext._has_modifier"], "regularizer_context.RegularizerContext.get_regularizer": ["caffe2.python.modifier_context.ModifierContext._get_modifier", "regularizer_context.RegularizerContext.has_regularizer"], "regularizer_context.UseRegularizer._context_class": [], "regularizer_test": [], "regularizer_test.TestRegularizerContext": ["hypothesis.given", "caffe2.python.hypothesis_test_util.arrays"], "regularizer_test.TestRegularizerContext.test_regularizer_context": ["caffe2.python.schema.Scalar", "<builtin>.range", "caffe2.python.schema.FeedRecord", "caffe2.python.regularizer.L1Norm", "caffe2.python.regularizer_context.UseRegularizer", "caffe2.python.optimizer.SgdOptimizer", "caffe2.python.layer_model_instantiator.generate_training_nets", "caffe2.python.layer_test_util.LayersTestCase.assertEqual", "caffe2.python.regularizer_context.RegularizerContext.current", "caffe2.python.layer_test_util.LayersTestCase.model.FC", "<builtin>.len", "caffe2.python.schema.Struct", "caffe2.python.layer_test_util.LayersTestCase.new_record"], "caffe2.python.regularizer.L1Norm": [], "caffe2.python.regularizer_context.UseRegularizer": [], "regularizer_test.TestRegularizer": ["hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.strategies.data", "hypothesis.strategies.floats", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.floats", "caffe2.python.hypothesis_test_util.arrays"], "regularizer_test.TestRegularizer.test_log_barrier": ["<builtin>.zip", "regularizer_test.TestRegularizer.test_log_barrier.ref", "caffe2.python.workspace.FeedBlob", "caffe2.python.regularizer.LogBarrier", "caffe2.python.core.BlobReference", "caffe2.python.workspace.FetchBlobs", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.testing.assert_allclose", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.regularizer.LogBarrier": [], "regularizer_test.TestRegularizer.test_log_barrier.ref": ["numpy.sum", "numpy.clip", "numpy.log", "numpy.array"], "regularizer_test.TestRegularizer.test_bounded_grad_proj": ["regularizer_test.TestRegularizer.test_bounded_grad_proj.ref", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.BlobReference", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "caffe2.python.regularizer.BoundedGradientProjection", "numpy.testing.assert_allclose", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.regularizer.BoundedGradientProjection": [], "regularizer_test.TestRegularizer.test_bounded_grad_proj.ref": ["numpy.clip"], "regularizer_test.TestRegularizer.test_group_l1_norm": ["caffe2.python.regularizer.GroupL1Norm", "regularizer_test.TestRegularizer.test_group_l1_norm.compare_reference", "<builtin>.range", "numpy.random.randint", "caffe2.python.workspace.FeedBlob", "numpy.append", "numpy.sort", "caffe2.python.core.BlobReference", "numpy.random.rand", "numpy.diff", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.random.choice", "caffe2.python.workspace.RunNetOnce"], "regularizer_test.TestRegularizer.test_group_l1_norm.compare_reference": ["numpy.array", "numpy.sqrt", "numpy.multiply", "numpy.testing.assert_almost_equal", "numpy.hsplit", "numpy.sum", "numpy.square"], "numpy.hsplit": [], "numpy.random.choice": [], "numpy.sort": [], "caffe2.python.regularizer.GroupL1Norm": [], "regularizer_test.TestRegularizer.test_l1_norm_trimmed": ["numpy.absolute", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.BlobReference", "numpy.sort", "caffe2.python.regularizer.L1NormTrimmed", "numpy.random.rand", "numpy.testing.assert_almost_equal", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.sum", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.regularizer.L1NormTrimmed": [], "numpy.absolute": [], "regularizer_test.TestRegularizer.test_elastic_l1_norm_trimmed": ["numpy.absolute", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.BlobReference", "caffe2.python.regularizer.ElasticNetL1NormTrimmed", "numpy.random.rand", "numpy.sort", "numpy.testing.assert_almost_equal", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.sum", "numpy.square", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.regularizer.ElasticNetL1NormTrimmed": [], "hypothesis.strategies.data": [], "regularizer_test.TestRegularizer.test_fp16_max_norm": ["numpy.arange", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.GradientSlice", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "numpy.sqrt", "caffe2.python.core.BlobReference", "numpy.random.rand", "numpy.testing.assert_almost_equal", "caffe2.python.hypothesis_test_util.tensor", "caffe2.python.layer_test_util.LayersTestCase.get_training_nets", "numpy.sum", "numpy.unique", "numpy.clip", "hypothesis.strategies.sampled_from", "caffe2.python.regularizer.MaxNorm"], "numpy.unique": [], "caffe2.python.core.GradientSlice": [], "caffe2.python.regularizer.MaxNorm": [], "rnn_cell": ["functools.partial"], "rnn_cell._RectifyName": ["<builtin>.Exception", "<builtin>.isinstance", "caffe2.python.core.ScopedBlobReference"], "rnn_cell._RectifyNames": ["rnn_cell._RectifyName"], "rnn_cell.RNNCell.__init__": [], "rnn_cell.RNNCell.initializer": [], "rnn_cell.RNNCell.scope": [], "rnn_cell.RNNCell.apply_over_sequence": ["<builtin>.len", "rnn_cell.MILSTMCell._apply", "rnn_cell.MultiRNNCell._prepare_output_sequence", "rnn_cell.RNNCell._apply", "<builtin>.set", "rnn_cell.MultiRNNCellInitializer.create_states", "caffe2.python.model_helper.ModelHelper", "rnn_cell.MultiRNNCell._apply", "rnn_cell.RNNCell.get_state_names", "<builtin>.dict", "rnn_cell.RNNCell.get_output_state_index", "rnn_cell.RNNCell.prepare_input", "caffe2.python.recurrent.recurrent_net", "<builtin>.zip", "rnn_cell.MultiRNNCell.prepare_input", "caffe2.python.utils.raiseIfNotEqual", "rnn_cell.MultiRNNCell.get_state_names", "<builtin>.Exception", "<builtin>.list", "rnn_cell.RNNCell._prepare_output_sequence", "rnn_cell.MultiRNNCell.get_output_state_index", "rnn_cell.LSTMCell.prepare_input"], "rnn_cell.MultiRNNCellInitializer.create_states": ["<builtin>.Exception", "<builtin>.enumerate", "caffe2.python.core.NameScope"], "rnn_cell.LSTMCell.prepare_input": ["rnn_cell.RNNCell.scope", "caffe2.python.brew.fc"], "rnn_cell.MultiRNNCell.prepare_input": ["rnn_cell._RectifyName", "caffe2.python.core.NameScope"], "rnn_cell.RNNCell.prepare_input": [], "rnn_cell.MultiRNNCell.get_state_names": [], "rnn_cell.RNNCell.get_state_names": ["rnn_cell.LSTMCell.get_state_names_override", "rnn_cell.RNNCell.scope", "rnn_cell.RNNCell.get_state_names_override"], "caffe2.python.utils.raiseIfNotEqual": [], "rnn_cell.MILSTMCell._apply": ["rnn_cell.RNNCell.scope", "caffe2.python.brew.sum", "<builtin>.sum", "<builtin>.list", "caffe2.python.modeling.initializers.Initializer", "caffe2.python.brew.fc", "<builtin>.zip", "caffe2.python.brew.concat"], "rnn_cell.RNNCell._apply": ["rnn_cell.RNNCell._rectify_apply_inputs", "rnn_cell.LSTMCell.apply_override", "rnn_cell.RNNCell.apply_override", "caffe2.python.core.NameScope"], "rnn_cell.MultiRNNCell._apply": ["<builtin>.len", "rnn_cell.RNNCell.scope", "caffe2.python.brew.sum", "<builtin>.sum", "caffe2.python.core.NameScope", "<builtin>.enumerate", "rnn_cell.RNNCell._rectify_apply_inputs"], "rnn_cell.RNNCell.get_output_state_index": [], "rnn_cell.MultiRNNCell.get_output_state_index": ["<builtin>.len"], "rnn_cell.MultiRNNCell._prepare_output_sequence": ["caffe2.python.brew.sum", "<builtin>.len", "rnn_cell.RNNCell.scope", "<builtin>.enumerate"], "rnn_cell.RNNCell._prepare_output_sequence": ["rnn_cell.RNNCell.get_output_state_index", "rnn_cell.MultiRNNCell.get_output_state_index"], "rnn_cell.RNNCell.apply": ["rnn_cell.MILSTMCell._apply", "rnn_cell.MultiRNNCell.prepare_input", "rnn_cell.RNNCell._apply", "rnn_cell.MultiRNNCell._prepare_output", "rnn_cell.RNNCell.prepare_input", "rnn_cell.LSTMCell.prepare_input", "rnn_cell.RNNCell._prepare_output", "rnn_cell.MultiRNNCell._apply"], "rnn_cell.MultiRNNCell._prepare_output": ["caffe2.python.brew.sum", "<builtin>.len", "rnn_cell.RNNCell.scope", "<builtin>.enumerate"], "rnn_cell.RNNCell._prepare_output": ["rnn_cell.RNNCell.get_output_state_index", "rnn_cell.MultiRNNCell.get_output_state_index"], "rnn_cell.RNNCell._rectify_apply_inputs": ["inspect.getargspec", "rnn_cell._RectifyNames", "<builtin>.zip"], "rnn_cell.LSTMCell.apply_override": ["caffe2.python.brew.sum", "<builtin>.sum", "<builtin>.list", "caffe2.python.brew.fc", "<builtin>.zip", "caffe2.python.brew.concat"], "rnn_cell.RNNCell.apply_override": ["<builtin>.NotImplementedError"], "rnn_cell.LSTMCell.get_state_names_override": [], "rnn_cell.RNNCell.get_state_names_override": ["<builtin>.NotImplementedError"], "rnn_cell.RNNCell.get_output_dim": ["<builtin>.NotImplementedError"], "rnn_cell.LSTMInitializer.__init__": [], "rnn_cell.LSTMInitializer.create_states": ["caffe2.python.modeling.initializers.Initializer"], "caffe2.python.modeling.initializers.Initializer": [], "rnn_cell.BasicRNNCell.__init__": ["<builtin>.RuntimeError", "<builtin>.super"], "rnn_cell.BasicRNNCell.apply_override": ["<builtin>.RuntimeError", "caffe2.python.brew.sum", "caffe2.python.brew.fc"], "rnn_cell.BasicRNNCell.prepare_input": ["rnn_cell.RNNCell.scope", "caffe2.python.brew.fc"], "rnn_cell.BasicRNNCell.get_state_names": ["rnn_cell.RNNCell.scope"], "rnn_cell.BasicRNNCell.get_output_dim": [], "rnn_cell.LSTMCell.__init__": ["<builtin>.float", "<builtin>.super", "rnn_cell.LSTMInitializer.__init__"], "rnn_cell.LSTMCell.get_input_params": ["rnn_cell.RNNCell.scope"], "rnn_cell.LSTMCell.get_recurrent_params": ["rnn_cell.RNNCell.scope"], "rnn_cell.LSTMCell.get_output_dim": [], "rnn_cell.LayerNormLSTMCell.__init__": ["<builtin>.float", "<builtin>.super", "rnn_cell.LSTMInitializer.__init__"], "rnn_cell.LayerNormLSTMCell._apply": ["rnn_cell.RNNCell.scope", "caffe2.python.brew.sum", "<builtin>.sum", "<builtin>.list", "rnn_cell.LayerNormLSTMCell.get_state_names", "caffe2.python.brew.fc", "caffe2.python.brew.layer_norm", "<builtin>.zip", "caffe2.python.brew.concat"], "caffe2.python.brew.layer_norm": [], "rnn_cell.LayerNormLSTMCell.get_state_names": ["rnn_cell.RNNCell.scope"], "rnn_cell.LayerNormLSTMCell.get_input_params": ["rnn_cell.RNNCell.scope"], "rnn_cell.LayerNormLSTMCell.prepare_input": ["rnn_cell.RNNCell.scope", "caffe2.python.brew.fc"], "rnn_cell.LayerNormMILSTMCell._apply": ["rnn_cell.RNNCell.scope", "caffe2.python.brew.sum", "<builtin>.sum", "<builtin>.list", "caffe2.python.modeling.initializers.Initializer", "caffe2.python.brew.fc", "caffe2.python.brew.layer_norm", "<builtin>.zip", "caffe2.python.brew.concat"], "rnn_cell.DropoutCell.__init__": ["<builtin>.super"], "rnn_cell.DropoutCell._apply": [], "rnn_cell.DropoutCell._prepare_output": ["rnn_cell.DropoutCell._apply_dropout"], "rnn_cell.DropoutCell._apply_dropout": ["<builtin>.float", "caffe2.python.brew.dropout", "<builtin>.str", "caffe2.python.core.NameScope"], "rnn_cell.DropoutCell._prepare_output_sequence": ["rnn_cell.DropoutCell._apply_dropout"], "rnn_cell.MultiRNNCellInitializer.__init__": [], "rnn_cell.MultiRNNCell.__init__": ["<builtin>.len", "<builtin>.range", "<builtin>.enumerate", "rnn_cell.MultiRNNCell.layer_scoper", "<builtin>.map", "<builtin>.super", "rnn_cell.MultiRNNCellInitializer.__init__"], "rnn_cell.MultiRNNCell.layer_scoper": [], "rnn_cell.MultiRNNCell.layer_scoper.helper": [], "rnn_cell.AttentionCell.__init__": ["<builtin>.super"], "rnn_cell.AttentionCell._apply": ["rnn_cell.RNNCell.scope", "caffe2.python.attention.apply_dot_attention", "caffe2.python.attention.apply_recurrent_attention", "<builtin>.Exception", "<builtin>.list", "caffe2.python.attention.apply_soft_coverage_attention", "caffe2.python.attention.apply_regular_attention"], "caffe2.python.attention.apply_recurrent_attention": [], "caffe2.python.attention.apply_regular_attention": [], "caffe2.python.attention.apply_dot_attention": [], "caffe2.python.attention.apply_soft_coverage_attention": [], "rnn_cell.AttentionCell.get_attention_weights": [], "rnn_cell.AttentionCell.prepare_input": ["caffe2.python.brew.transpose", "rnn_cell.RNNCell.scope", "caffe2.python.brew.fc"], "rnn_cell.AttentionCell.build_initial_coverage": ["rnn_cell.RNNCell.scope", "caffe2.python.scope.CurrentDeviceScope", "caffe2.python.core.IsGPUDeviceType", "caffe2.python.brew.fc"], "rnn_cell.AttentionCell.get_state_names": ["rnn_cell.RNNCell.scope", "rnn_cell.AttentionCell.get_output_state_index", "<builtin>.list"], "rnn_cell.AttentionCell.get_output_state_index": [], "rnn_cell.AttentionCell.get_output_dim": [], "rnn_cell.AttentionCell._prepare_output": ["caffe2.python.brew.concat", "caffe2.python.core.NameScope"], "rnn_cell.AttentionCell._prepare_output_sequence": ["rnn_cell.AttentionCell.get_state_names", "<builtin>.len", "caffe2.python.brew.concat", "caffe2.python.core.NameScope"], "rnn_cell.LSTMWithAttentionCell.__init__": ["<builtin>.super", "rnn_cell.LSTMCell.__init__"], "rnn_cell.MILSTMWithAttentionCell.__init__": ["<builtin>.super", "rnn_cell.LSTMCell.__init__"], "rnn_cell._LSTM": ["<builtin>.len", "<builtin>.list", "<builtin>.tuple", "<builtin>.range", "<builtin>.type", "rnn_cell.UnrolledCell.__init__", "rnn_cell.MultiRNNCell.__init__"], "rnn_cell.UnrolledCell.__init__": [], "rnn_cell.UnrolledCell.apply_over_sequence": ["<builtin>.len", "<builtin>.str", "<builtin>.list", "<builtin>.tuple", "<builtin>.range", "<builtin>.set", "caffe2.python.scope.NameScope", "caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.core.DeviceOption", "<builtin>.zip", "logging.debug"], "rnn_cell.GetLSTMParamNames": [], "rnn_cell.InitFromLSTMParams": ["caffe2.python.workspace.FetchBlob", "rnn_cell.GetLSTMParamNames", "future.utils.viewkeys", "caffe2.python.workspace.FeedBlob", "numpy.array", "numpy.append"], "rnn_cell.cudnn_LSTM": ["caffe2.python.core.Net", "caffe2.python.core.NameScope", "rnn_cell.GetLSTMParamNames", "<builtin>.range", "caffe2.python.modeling.initializers.Initializer", "rnn_cell.cudnn_LSTM.init", "random.randint"], "rnn_cell.cudnn_LSTM.init": [], "rnn_cell.LSTMWithAttention": ["rnn_cell.UnrolledCell.apply_over_sequence", "rnn_cell.LSTMWithAttentionCell.__init__", "rnn_cell.AttentionCell.build_initial_coverage", "rnn_cell.RNNCell.apply_over_sequence"], "rnn_cell._layered_LSTM": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.locals", "<builtin>.enumerate"], "schema": ["logging.getLogger", "collections.namedtuple"], "schema._join_field_name": [], "schema._normalize_field": ["schema.Scalar.clone", "<builtin>.isinstance", "schema.Scalar.__init__", "schema.Struct.clone", "<builtin>.type"], "schema.Scalar.clone": ["schema.Scalar.__init__"], "schema.Struct.clone": ["<builtin>.type", "future.utils.viewitems", "schema._normalize_field"], "schema.Scalar.__init__": ["<builtin>.super", "schema.Scalar.set"], "schema.Field.__init__": ["<builtin>.len"], "schema.Field.clone_schema": ["schema.Scalar.clone", "schema.List.clone", "schema.Struct.clone", "schema.ListWithEvicted.clone", "schema.Field.clone"], "schema.List.clone": ["<builtin>.type", "schema.Scalar.__init__", "schema._normalize_field"], "schema.ListWithEvicted.clone": ["<builtin>.type", "schema.Scalar.__init__", "schema._normalize_field"], "schema.Field.clone": ["<builtin>.NotImplementedError"], "schema.Field.field_names": ["<builtin>.NotImplementedError"], "schema.Field.field_types": ["<builtin>.NotImplementedError"], "schema.Field.field_metadata": ["<builtin>.NotImplementedError"], "schema.Field.field_blobs": ["<builtin>.NotImplementedError"], "schema.Field.all_scalars": ["<builtin>.NotImplementedError"], "schema.Field.has_blobs": ["<builtin>.NotImplementedError"], "schema.Field._set_parent": [], "schema.Field.slice": ["<builtin>.len", "schema.List.field_names", "schema.Field._child_base_id", "schema.ListWithEvicted.field_names", "schema.Struct.field_names", "schema.Field.slice", "schema.Field.field_names", "schema.Scalar.field_names"], "schema.Field._child_base_id": [], "schema.ListWithEvicted.field_names": ["schema._join_field_name", "schema.Scalar.field_names"], "schema.Struct.field_names": ["schema._join_field_name", "future.utils.viewitems"], "schema.List.field_names": ["schema._join_field_name", "schema.Scalar.field_names"], "schema.Scalar.field_names": [], "schema.Field.__eq__": ["schema.ListWithEvicted.field_types", "schema.Scalar.field_types", "schema.List.field_names", "schema.Field.field_types", "schema.ListWithEvicted.field_metadata", "schema.Field.field_metadata", "schema.Scalar.field_metadata", "schema.ListWithEvicted.field_names", "schema.Struct.field_names", "schema.Struct.field_types", "schema.Struct.field_metadata", "schema.List.field_types", "schema.List.field_metadata", "schema.Field.field_names", "schema.Scalar.field_names"], "schema.ListWithEvicted.field_types": ["schema.Scalar.field_types"], "schema.Scalar.field_types": [], "schema.Struct.field_types": ["future.utils.viewitems"], "schema.List.field_types": ["schema.Scalar.field_types"], "schema.Struct.field_metadata": ["future.utils.viewitems"], "schema.ListWithEvicted.field_metadata": ["schema.Scalar.field_metadata"], "schema.List.field_metadata": ["schema.Scalar.field_metadata"], "schema.Scalar.field_metadata": [], "schema.Field._pprint_impl": ["<builtin>.NotImplementedError"], "schema.Field.__repr__": ["schema.ListWithEvicted._pprint_impl", "schema.Field._pprint_impl", "six.StringIO", "schema.List._pprint_impl", "schema.Struct._pprint_impl", "schema.Scalar._pprint_impl"], "six.StringIO": [], "schema.ListWithEvicted._pprint_impl": ["schema.Scalar._pprint_impl"], "schema.List._pprint_impl": ["schema.Scalar._pprint_impl"], "schema.Struct._pprint_impl": ["future.utils.viewitems"], "schema.Scalar._pprint_impl": [], "schema.List.__init__": ["<builtin>.super", "<builtin>.isinstance", "schema.Scalar.__init__", "schema._normalize_field", "schema.Field._set_parent"], "schema.List.field_blobs": ["schema.Scalar.field_blobs"], "schema.Scalar.field_blobs": [], "schema.List.all_scalars": ["schema.Scalar.all_scalars"], "schema.Scalar.all_scalars": [], "schema.List.has_blobs": ["schema.Scalar.has_blobs"], "schema.Scalar.has_blobs": [], "schema.List.__getattr__": ["<builtin>.isinstance", "<builtin>.getattr", "<builtin>.AttributeError"], "schema.List.__getitem__": ["<builtin>.len", "<builtin>.KeyError"], "schema.ListWithEvicted.__init__": ["<builtin>.super", "<builtin>.isinstance", "schema.Scalar.__init__", "schema._normalize_field"], "schema.ListWithEvicted.field_blobs": ["schema.Scalar.field_blobs"], "schema.ListWithEvicted.all_scalars": ["schema.Scalar.all_scalars"], "schema.ListWithEvicted.has_blobs": ["schema.Scalar.has_blobs"], "schema.ListWithEvicted.__getattr__": ["<builtin>.isinstance", "<builtin>.getattr", "<builtin>.AttributeError"], "schema.ListWithEvicted.__getitem__": ["<builtin>.len", "<builtin>.KeyError"], "schema.Struct.__init__": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance", "<builtin>.super", "schema._normalize_field", "schema.Struct._struct_from_nested_name", "future.utils.viewvalues", "collections.OrderedDict", "<builtin>.ValueError", "future.utils.viewitems"], "schema.Struct._struct_from_nested_name": ["<builtin>.len", "schema.Struct._struct_from_nested_name.create_internal"], "schema.Struct._struct_from_nested_name.create_internal": ["<builtin>.len", "schema.Struct._struct_from_nested_name.create_internal", "schema.Struct.__init__"], "schema.Struct.get_children": ["<builtin>.list", "future.utils.viewitems"], "schema.Struct.field_blobs": ["future.utils.viewitems"], "schema.Struct.all_scalars": ["future.utils.viewitems"], "schema.Struct.has_blobs": ["<builtin>.all", "future.utils.viewvalues"], "schema.Struct._get_field_by_nested_name": ["<builtin>.len"], "schema.Struct.__contains__": ["schema.Struct._get_field_by_nested_name"], "schema.Struct.__len__": ["<builtin>.len"], "schema.Struct.__getitem__": ["<builtin>.isinstance", "<builtin>.KeyError", "<builtin>.list", "future.utils.viewvalues", "future.utils.viewkeys", "schema.Struct._get_field_by_nested_name", "itertools.islice", "schema.Struct.__init__", "<builtin>.next"], "itertools.islice": [], "schema.Struct.get": ["<builtin>.getattr"], "schema.Struct.__getattr__": ["<builtin>.super", "<builtin>.AttributeError"], "schema.Struct.__setattr__": ["<builtin>.super", "<builtin>.TypeError", "<builtin>.getattr"], "schema.Struct.__add__": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.str", "collections.OrderedDict", "schema.Struct.__init__", "<builtin>.type", "future.utils.viewitems", "schema.Struct.get_children"], "schema.Struct.__sub__": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.str", "collections.OrderedDict", "schema.Struct.__init__", "<builtin>.type", "schema.Struct.get_children"], "schema.Scalar.set": ["schema.Scalar.set_metadata", "<builtin>.isinstance", "<builtin>.len", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.str", "schema.Scalar._validate_metadata", "numpy.array", "<builtin>.type", "numpy.dtype"], "schema.Scalar.field_type": [], "schema.Scalar.get": [], "schema.Scalar.__call__": ["schema.Scalar.get"], "schema.Scalar.metadata": [], "schema.Scalar.set_metadata": ["<builtin>.isinstance", "<builtin>.type", "schema.Scalar._validate_metadata"], "schema.Scalar._validate_metadata": ["numpy.issubdtype"], "numpy.issubdtype": [], "schema.Scalar.set_value": ["<builtin>.isinstance", "schema.Scalar.set"], "schema.Scalar.set_type": ["numpy.dtype", "schema.Scalar._validate_metadata"], "schema.Scalar.id": ["schema.Field._child_base_id"], "schema.Map": ["schema.List.__init__", "schema.Struct.__init__"], "schema.MapWithEvicted": ["schema.ListWithEvicted.__init__", "schema.Struct.__init__"], "schema.NamedTuple": ["<builtin>.enumerate", "schema.Struct.__init__"], "schema.Tuple": ["schema.NamedTuple"], "schema.RawTuple": ["<builtin>.isinstance", "schema.NamedTuple"], "schema.from_dtype": ["<builtin>.isinstance", "schema.Scalar.__init__", "schema.Struct.__init__", "numpy.dtype", "schema.from_dtype"], "schema._SchemaNode.__init__": [], "schema._SchemaNode.add_child": ["schema._SchemaNode.__init__"], "schema._SchemaNode.get_field": ["<builtin>.len", "schema.Map", "<builtin>.set", "schema.List.__init__", "schema.Struct.__init__"], "schema._SchemaNode.print_recursively": [], "schema.from_column_list": ["<builtin>.len", "<builtin>.range", "schema.Scalar.__init__", "schema._SchemaNode.add_child", "schema._SchemaNode.__init__", "schema._SchemaNode.get_field", "<builtin>.zip"], "schema.from_blob_list": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.zip"], "schema.as_record": ["<builtin>.len", "<builtin>.isinstance", "schema._normalize_field", "<builtin>.all", "schema.Struct.__init__", "schema.Tuple", "schema.as_record", "future.utils.viewitems"], "schema.FetchRecord": ["<builtin>.all", "<builtin>.isinstance", "schema.FetchRecord.fetch", "schema.from_blob_list"], "schema.FetchRecord.fetch": ["<builtin>.str", "caffe2.python.workspace.FetchBlob"], "schema.FeedRecord": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.all", "schema.FeedRecord.feed", "<builtin>.zip"], "schema.FeedRecord.feed": ["<builtin>.str", "caffe2.python.workspace.FeedBlob"], "schema.NewRecord": ["<builtin>.isinstance", "schema.from_blob_list"], "schema.ConstRecord": ["schema.NewRecord", "<builtin>.zip"], "schema.InitEmptyRecord": ["<builtin>.list", "schema.NewRecord", "schema.data_type_for_dtype", "<builtin>.zip"], "schema.data_type_for_dtype": ["<builtin>.str", "<builtin>.TypeError"], "schema.is_schema_subset": ["<builtin>.set"], "schema.equal_schemas": ["<builtin>.isinstance"], "schema.schema_check": ["schema.equal_schemas", "schema.as_record"], "schema.dtype_for_core_type": ["<builtin>.str", "<builtin>.TypeError"], "schema.attach_metadata_to_scalars": [], "schema_test": [], "schema_test.TestField.testInitShouldSetEmptyParent": ["caffe2.python.schema.Field", "unittest.TestCase.assertTupleEqual"], "caffe2.python.schema.Field": [], "unittest.TestCase.assertTupleEqual": [], "schema_test.TestField.testInitShouldSetFieldOffsets": ["caffe2.python.schema.Field", "unittest.TestCase.assertListEqual", "caffe2.python.schema.Struct", "caffe2.python.schema.List", "caffe2.python.schema.Scalar"], "unittest.TestCase.assertListEqual": [], "schema_test.TestField.testInitShouldSetFieldOffsetsIfNoChildren": ["caffe2.python.schema.Field", "unittest.TestCase.assertListEqual"], "schema_test.TestDB.testPicklable": ["<builtin>.getattr", "caffe2.python.schema.Struct", "caffe2.python.schema.List", "pickle.loads", "<builtin>.isinstance", "unittest.TestCase.assertTrue", "pickle.dumps", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testListSubclassClone": ["unittest.TestCase.assertEqual", "unittest.TestCase.assertIsInstance", "caffe2.python.schema.List.clone", "caffe2.python.schema.List.__init__", "caffe2.python.schema.Scalar", "unittest.TestCase.assertIsNot"], "caffe2.python.schema.List.__init__": [], "caffe2.python.schema.List.clone": [], "unittest.TestCase.assertIsInstance": [], "unittest.TestCase.assertIsNot": [], "schema_test.TestDB.testListWithEvictedSubclassClone": ["caffe2.python.schema.ListWithEvicted.clone", "unittest.TestCase.assertEqual", "unittest.TestCase.assertIsInstance", "caffe2.python.schema.ListWithEvicted.__init__", "caffe2.python.schema.Scalar", "unittest.TestCase.assertIsNot"], "caffe2.python.schema.ListWithEvicted.__init__": [], "caffe2.python.schema.ListWithEvicted.clone": [], "schema_test.TestDB.testStructSubclassClone": ["unittest.TestCase.assertEqual", "caffe2.python.schema.Struct.clone", "unittest.TestCase.assertIsInstance", "caffe2.python.schema.Struct.__init__", "caffe2.python.schema.Scalar", "unittest.TestCase.assertIsNot"], "caffe2.python.schema.Struct.__init__": [], "caffe2.python.schema.Struct.clone": [], "schema_test.TestDB.testNormalizeField": ["caffe2.python.schema.Struct", "caffe2.python.schema.Scalar", "unittest.TestCase.assertEquals"], "schema_test.TestDB.testTuple": ["caffe2.python.schema.Struct", "unittest.TestCase.assertEquals", "<builtin>.enumerate", "caffe2.python.schema.Tuple", "caffe2.python.schema.Scalar", "<builtin>.zip"], "schema_test.TestDB.testRawTuple": ["caffe2.python.schema.Struct", "caffe2.python.schema.RawTuple", "caffe2.python.schema.Scalar", "unittest.TestCase.assertEquals"], "schema_test.TestDB.testStructIndexing": ["caffe2.python.schema.Struct", "caffe2.python.schema.Scalar", "caffe2.python.schema.List", "unittest.TestCase.assertEquals"], "schema_test.TestDB.testListInStructIndexing": ["unittest.TestCase.assertRaises", "caffe2.python.schema.Struct", "caffe2.python.schema.List", "unittest.TestCase.assertEquals", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testListWithEvictedInStructIndexing": ["caffe2.python.schema.ListWithEvicted", "unittest.TestCase.assertRaises", "caffe2.python.schema.Struct", "unittest.TestCase.assertEquals", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testMapInStructIndexing": ["unittest.TestCase.assertRaises", "caffe2.python.schema.Struct", "caffe2.python.schema.Map", "unittest.TestCase.assertEquals", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testPreservesMetadata": ["numpy.array", "caffe2.python.schema.Metadata", "caffe2.python.schema.from_blob_list", "unittest.TestCase.assertEqual", "caffe2.python.schema.Struct", "caffe2.python.schema.List", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testDupField": ["caffe2.python.schema.Struct", "unittest.TestCase.assertRaises", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testAssignToField": ["caffe2.python.schema.Struct", "unittest.TestCase.assertRaises", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testPreservesEmptyFields": ["numpy.array", "caffe2.python.schema.from_blob_list", "unittest.TestCase.assertEqual", "caffe2.python.schema.Struct", "<builtin>.len", "unittest.TestCase.assertIn", "caffe2.python.schema.Scalar"], "unittest.TestCase.assertIn": [], "schema_test.TestDB.testStructSubstraction": ["caffe2.python.schema.Struct", "unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testStructNestedSubstraction": ["caffe2.python.schema.Struct", "unittest.TestCase.assertEqual", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testStructAddition": ["caffe2.python.schema.Struct", "unittest.TestCase.assertIn", "unittest.TestCase.assertRaises", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testStructNestedAddition": ["caffe2.python.schema.Struct", "unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testGetFieldByNestedName": ["unittest.TestCase.assertRaises", "caffe2.python.schema.Struct", "unittest.TestCase.assertIn", "unittest.TestCase.assertTrue", "<builtin>.isinstance", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testAddFieldByNestedName": ["unittest.TestCase.assertRaises", "unittest.TestCase.assertEqual", "caffe2.python.schema.Struct", "caffe2.python.schema.Scalar", "caffe2.python.core.BlobReference"], "schema_test.TestDB.testContains": ["caffe2.python.schema.Struct", "unittest.TestCase.assertTrue", "caffe2.python.schema.Scalar", "unittest.TestCase.assertFalse"], "schema_test.TestDB.testFromEmptyColumnList": ["unittest.TestCase.assertEqual", "caffe2.python.schema.Struct", "caffe2.python.schema.from_column_list"], "schema_test.TestDB.testFromColumnList": ["<builtin>.sorted", "caffe2.python.schema.from_column_list", "unittest.TestCase.assertEqual", "caffe2.python.schema.Struct", "caffe2.python.schema.Map", "caffe2.python.schema.List", "random.shuffle", "unittest.TestCase.assertTrue", "<builtin>.str", "<builtin>.range", "caffe2.python.schema.Scalar", "caffe2.python.core.BlobReference"], "random.shuffle": [], "schema_test.TestDB.testStructGet": ["caffe2.python.schema.NewRecord", "caffe2.python.schema.Scalar", "caffe2.python.core.Net", "caffe2.python.schema.Tuple"], "schema_test.TestDB.testScalarForVoidType": ["unittest.TestCase.assertRaises", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testScalarShape": ["unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises", "caffe2.python.schema.Scalar"], "schema_test.TestDB.testDtypeForCoreType": ["unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises", "caffe2.python.schema.dtype_for_core_type"], "caffe2.python.schema.dtype_for_core_type": [], "scope": ["contextlib.contextmanager", "threading.local"], "scope.CurrentNameScope": ["<builtin>.hasattr"], "scope.CurrentDeviceScope": ["<builtin>.hasattr"], "scope.NameScope": ["scope.CurrentNameScope", "<builtin>.isinstance"], "scope.DeviceScope": ["scope.CurrentDeviceScope", "<builtin>.isinstance", "<builtin>.hasattr", "caffe2.proto.caffe2_pb2.DeviceOption"], "scope.EmptyNameScope": ["scope.CurrentNameScope"], "scope.EmptyDeviceScope": ["scope.CurrentDeviceScope"], "scope_test": [], "scope_test.thread_runner": ["caffe2.python.scope.NameScope", "caffe2.python.core.DeviceOption", "caffe2.python.scope.CurrentDeviceScope", "time.sleep", "caffe2.python.scope.DeviceScope", "caffe2.python.scope.CurrentNameScope"], "scope_test.TestScope.testNamescopeBasic": ["caffe2.python.scope.NameScope", "unittest.TestCase.assertEquals", "caffe2.python.scope.CurrentNameScope"], "scope_test.TestScope.testNamescopeAssertion": ["<builtin>.Exception", "caffe2.python.scope.NameScope", "unittest.TestCase.assertEquals", "caffe2.python.scope.CurrentNameScope"], "scope_test.TestScope.testEmptyNamescopeBasic": ["caffe2.python.scope.EmptyNameScope", "caffe2.python.scope.NameScope", "unittest.TestCase.assertEquals", "caffe2.python.scope.CurrentNameScope"], "caffe2.python.scope.EmptyNameScope": [], "scope_test.TestScope.testDevicescopeBasic": ["caffe2.python.scope.DeviceScope", "caffe2.python.scope.CurrentDeviceScope", "unittest.TestCase.assertEquals", "caffe2.python.core.DeviceOption"], "scope_test.TestScope.testEmptyDevicescopeBasic": ["caffe2.python.core.DeviceOption", "caffe2.python.scope.CurrentDeviceScope", "caffe2.python.scope.EmptyDeviceScope", "caffe2.python.scope.DeviceScope", "unittest.TestCase.assertEquals"], "caffe2.python.scope.EmptyDeviceScope": [], "scope_test.TestScope.testDevicescopeAssertion": ["caffe2.python.core.DeviceOption", "caffe2.python.scope.CurrentDeviceScope", "caffe2.python.scope.DeviceScope", "unittest.TestCase.assertEquals", "<builtin>.Exception"], "scope_test.TestScope.testTags": ["caffe2.python.scope.DeviceScope", "caffe2.python.scope.CurrentDeviceScope", "unittest.TestCase.assertEquals", "caffe2.python.core.DeviceOption"], "scope_test.TestScope.testMultiThreaded": ["caffe2.python.scope.NameScope", "caffe2.python.scope.CurrentDeviceScope", "<builtin>.range", "unittest.TestCase.assertEquals", "caffe2.python.scope.CurrentNameScope", "threading.Thread"], "session": [], "session.CompiledRunnable.__init__": [], "session.Session.__init__": [], "session.Session.is_open": [], "session.Session.compile": ["session.Session._compile_task_group", "session.CompiledRunnable.__init__", "<builtin>.len", "<builtin>.isinstance", "caffe2.python.task.Task", "caffe2.python.task.TaskGroup", "caffe2.python.core.execution_step"], "session.Session._compile_task_group": [], "session.Session.run": ["session.Session.is_open", "session.Session._run_compiled", "session.Session.compile"], "session.Session._run_compiled": ["<builtin>.NotImplementedError"], "session.Session.close": ["session.Session.is_open", "session.Session._do_close"], "session.Session._do_close": [], "session.Session.fetch_output": ["<builtin>.NotImplementedError"], "session.Session.__enter__": [], "session.Session.__exit__": ["session.Session.close"], "session.LocalSession.__init__": ["session.Session.__init__"], "session.LocalSession._compile_task_group": ["caffe2.python.core.Plan", "caffe2.python.task.Cluster"], "session.LocalSession._run_compiled": ["caffe2.python.workspace.C.Workspace", "caffe2.python.workspace.WorkspaceGuard", "<builtin>.str", "caffe2.python.core.BlobReference"], "session.LocalSession._fetch_output": ["<builtin>.str"], "session_test": [], "session_test.TestLocalSession.test_local_session": ["numpy.array", "<builtin>.zip", "caffe2.python.core.NameScope", "caffe2.python.session.LocalSession", "caffe2.python.schema.NewRecord", "caffe2.python.schema.FetchRecord", "caffe2.python.task.TaskGroup", "numpy.testing.assert_array_equal", "caffe2.python.schema.Struct", "caffe2.python.dataset.Dataset", "caffe2.python.pipeline.pipe", "caffe2.python.workspace.C.Workspace", "caffe2.python.schema.FeedRecord", "caffe2.python.core.Net", "caffe2.python.schema.InitEmptyRecord"], "session_test.TestLocalSession.test_local_session.proc1": ["caffe2.python.core.NameScope", "caffe2.python.core.Net", "caffe2.python.schema.NewRecord"], "session_test.TestLocalSession.test_local_session.proc2": ["caffe2.python.core.NameScope", "caffe2.python.core.Net", "caffe2.python.schema.NewRecord"], "sparse_to_dense_mask_test": [], "sparse_to_dense_mask_test.TestSparseToDenseMask.test_sparse_to_dense_mask_float": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.assertEqual"], "sparse_to_dense_mask_test.TestSparseToDenseMask.test_sparse_to_dense_mask_invalid_inputs": ["caffe2.python.workspace.RunOperatorMultiple", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.fail"], "caffe2.python.test_util.TestCase.fail": [], "sparse_to_dense_mask_test.TestSparseToDenseMask.test_sparse_to_dense_mask_subtensor": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.assertEqual"], "sparse_to_dense_mask_test.TestSparseToDenseMask.test_sparse_to_dense_mask_string": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.assertEqual"], "sparse_to_dense_mask_test.TestSparseToDenseMask.test_sparse_to_dense_mask_empty_lengths": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.assertEqual"], "sparse_to_dense_mask_test.TestSparseToDenseMask.test_sparse_to_dense_mask_no_lengths": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.assertEqual"], "sparse_to_dense_mask_test.TestSparseToDenseMask.test_sparse_to_dense_mask_presence_mask": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.assertEqual"], "sparse_to_dense_test": [], "sparse_to_dense_test.TestSparseToDense.test_sparse_to_dense": ["caffe2.python.workspace.RunOperatorOnce", "numpy.zeros", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_array_equal", "numpy.array", "<builtin>.print", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator"], "sparse_to_dense_test.TestSparseToDense.test_sparse_to_dense_shape_inference": ["numpy.zeros", "numpy.array", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.core.CreateOperator"], "sparse_to_dense_test.TestSparseToDense.test_sparse_to_dense_invalid_inputs": ["caffe2.python.workspace.RunOperatorOnce", "numpy.array", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator"], "sparse_to_dense_test.TestSparseToDense.test_sparse_to_dense_with_data_to_infer_dim": ["numpy.zeros", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_array_equal", "numpy.array", "<builtin>.print", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator"], "task": [], "task._merge_node_kwargs": ["copy.copy"], "task.Cluster.__init__": [], "task.Cluster.add_node": ["task._merge_node_kwargs", "<builtin>.str"], "task.Cluster.nodes": [], "task.Cluster.node_kwargs": [], "task.Cluster.__repr__": ["task.Cluster.nodes", "task.Cluster.node_kwargs"], "task.Node.__init__": ["<builtin>.str", "caffe2.python.context.DefaultManaged.current"], "task.Node.__str__": [], "task.Node.__repr__": [], "task.Node.kwargs": [], "task.get_setup_nets": ["<builtin>.TypeError", "<builtin>.hasattr", "caffe2.python.core.Net", "<builtin>.type", "<builtin>.len", "<builtin>.isinstance"], "task.add_setup_steps": ["<builtin>.len", "caffe2.python.core.execution_step"], "task.TaskGroup.__init__": [], "task.TaskGroup.add_remote_net": [], "task.TaskGroup.remote_nets": [], "task.TaskGroup.add": [], "task.TaskGroup.tasks": ["task.TaskGroup.add"], "task.TaskGroup.num_registered_tasks": ["<builtin>.len"], "task.TaskGroup.used_nodes": [], "task.TaskGroup.report_step": ["<builtin>.str", "caffe2.python.core.to_execution_step", "caffe2.python.context.DefaultManaged.current"], "task.TaskGroup.report_net": ["<builtin>.str", "caffe2.python.core.Net", "caffe2.python.context.DefaultManaged.current"], "task.TaskGroup.tasks_by_node": ["collections.defaultdict", "future.utils.viewitems", "caffe2.python.core.execution_step", "task.TaskGroup.tasks", "task.get_setup_nets", "task.Task.__init__", "task.TaskGroup.report_step", "<builtin>.len", "task.TaskGroup.__init__"], "task.Task.__init__": ["<builtin>.str", "caffe2.python.context.Managed.current", "task.Task.add_outputs", "task.Task.set_step", "task.Task._get_next_name", "<builtin>.isinstance", "caffe2.python.context.DefaultManaged.current", "task.Node.__init__"], "task.TaskGroup.to_task": ["<builtin>.str", "task.TaskGroup.tasks", "task.Task.__init__", "task.TaskGroup.tasks_by_node", "<builtin>.len", "caffe2.python.context.DefaultManaged.current"], "task.TaskGroup.to_task.<lambda1>": [], "task.TaskGroup.workspace_type": [], "task.TaskGroup.__repr__": ["task.TaskGroup.workspace_type", "task.TaskGroup.remote_nets"], "task.TaskOutput.__init__": ["<builtin>.type", "<builtin>.isinstance"], "task.TaskOutput.set": ["<builtin>.len"], "task.TaskOutput.get": ["caffe2.python.schema.from_blob_list"], "task.TaskOutput.fetch": ["caffe2.python.schema.from_blob_list"], "task.TaskOutput.__repr__": [], "task.final_output": ["task.Task.__init__", "caffe2.python.context.Managed.current"], "task.TaskOutputList.__init__": [], "task.TaskOutputList.names": [], "task.TaskOutputList.set_values": ["<builtin>.len"], "task.TaskOutputList.__repr__": [], "task.Task": ["<builtin>.set"], "task.Task._get_next_name": ["<builtin>.str", "<builtin>.set"], "task.Task.set_step": ["caffe2.python.core.to_execution_step", "task.Task._assert_not_used"], "task.Task.add_outputs": ["<builtin>.type", "task.Task._assert_not_used", "task.Task.add_output"], "task.Task.__enter__": ["<builtin>.super", "caffe2.python.net_builder.NetBuilder", "task.Task._assert_not_used"], "task.Task._assert_not_used": [], "task.Task.__exit__": ["<builtin>.super", "task.Task.set_step"], "task.Task.workspace_type": [], "task.Task.add_output": ["task.TaskOutput.__init__", "<builtin>.isinstance", "task.Task._assert_not_used"], "task.Task.get_step": ["task.add_setup_steps", "caffe2.python.core.execution_step", "task.Task.add_output", "task.get_setup_nets", "<builtin>.hasattr", "caffe2.python.core.Net", "<builtin>.len"], "task.Task.output_list": ["task.TaskOutputList.__init__"], "task.Task.outputs": [], "task.Task._notify_used": ["task.Task.get_step"], "task.Task.__repr__": ["task.Task.outputs"], "task.SetupNets.__init__": [], "task.SetupNets.setup": [], "task.SetupNets.exit": [], "task.SetupNets.__repr__": [], "task_test": [], "task_test.TestTask.testRepr": ["caffe2.python.task.SetupNets", "unittest.TestCase.assertEqual", "caffe2.python.task.Cluster", "caffe2.python.task.TaskOutput", "caffe2.python.task.Node", "caffe2.python.task.Task", "caffe2.python.task.TaskGroup"], "caffe2.python.task.TaskOutput": [], "caffe2.python.task.SetupNets": [], "task_test.TestTask.testEffectlessRepr": ["unittest.TestCase.assertFalse", "caffe2.python.task.TaskGroup"], "test_util": [], "test_util.rand_array": ["numpy.random.rand", "numpy.array"], "test_util.randBlob": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "test_util.randBlobFloat32": ["test_util.randBlob"], "test_util.randBlobsFloat32": ["test_util.randBlobFloat32"], "test_util.numOps": ["<builtin>.len"], "test_util.str_compare": ["<builtin>.isinstance"], "test_util.get_default_test_flags": [], "test_util.caffe2_flaky": [], "test_util.is_flaky_test_mode": ["os.getenv"], "test_util.TestCase.setUpClass": ["caffe2.python.core.SetEnginePref", "test_util.get_default_test_flags", "caffe2.python.workspace.GlobalInit"], "caffe2.python.core.SetEnginePref": [], "test_util.TestCase.setUp": ["<builtin>.getattr", "unittest.SkipTest", "test_util.is_flaky_test_mode", "caffe2.python.workspace.C.Workspace", "caffe2.python.workspace.ResetWorkspace"], "test_util.TestCase.tearDown": ["caffe2.python.workspace.ResetWorkspace"], "test_util.TestCase.make_tempdir": ["unittest.TestCase.addCleanup", "tempfile.mkdtemp", "pathlib.Path"], "unittest.TestCase.addCleanup": [], "test_util.TestCase._remove_tempdir": ["shutil.rmtree", "<builtin>.str"], "test_util.TestCase._remove_tempdir._onerror": ["<builtin>.isinstance"], "text_file_reader": [], "text_file_reader.TextFileReader.__init__": ["caffe2.python.schema.data_type_for_dtype", "<builtin>.isinstance", "caffe2.python.dataio.Reader.__init__"], "caffe2.python.schema.data_type_for_dtype": [], "text_file_reader.TextFileReader.read": ["<builtin>.type", "caffe2.python.dataio.Reader.schema", "caffe2.python.core.ScopedBlobReference", "<builtin>.len"], "timeout_guard": ["contextlib.contextmanager"], "timeout_guard.WatcherThread.__init__": ["threading.current_thread", "threading.Thread.__init__", "threading.Condition"], "threading.Thread.__init__": [], "threading.Condition": [], "timeout_guard.WatcherThread.run": ["future.utils.viewitems", "os.getpid", "<builtin>.print", "logging.getLogger", "sys._current_frames", "traceback.extract_stack", "time.time", "os.kill", "threading.Thread"], "timeout_guard.WatcherThread.run.forcequit": ["future.utils.viewitems", "<builtin>.print", "sys._current_frames", "os.abort", "traceback.extract_stack", "time.sleep"], "sys._current_frames": [], "traceback.extract_stack": [], "os.abort": [], "timeout_guard.CompleteInTimeOrDie": ["threading.Thread.start", "timeout_guard.WatcherThread.__init__"], "threading.Thread.start": [], "timeout_guard.EuthanizeIfNecessary": ["threading.Thread.start", "timeout_guard.WatcherThread.__init__"], "toy_regression_test": ["unittest.main"], "toy_regression_test.TestToyRegression.testToyRegression": ["caffe2.python.core.ExecutionStep", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.Plan", "numpy.testing.assert_array_almost_equal", "caffe2.python.workspace.RunPlan", "caffe2.python.core.Net"], "transformations": [], "transformations.Transformer.__init__": [], "transformations.Transformer.runTransform": ["caffe2.python._import_c_extension.workspace_transform_exists", "caffe2.python._import_c_extension.run_transform", "caffe2.python._import_c_extension.transform_exists", "<builtin>.AttributeError", "caffe2.python._import_c_extension.run_workspace_transform"], "caffe2.python._import_c_extension.transform_exists": [], "caffe2.python._import_c_extension.run_transform": [], "caffe2.python._import_c_extension.workspace_transform_exists": [], "caffe2.python._import_c_extension.run_workspace_transform": [], "transformations.Transformer.__getattr__": [], "transformations.Transformer.__getattr__.<lambda1>": ["transformations.Transformer.runTransform"], "transformations.fuseNNPACKConvRelu": ["caffe2.python._import_c_extension.transform_fuseNNPACKConvRelu"], "caffe2.python._import_c_extension.transform_fuseNNPACKConvRelu": [], "transformations.optimizeForMKLDNN": ["caffe2.python._import_c_extension.transform_optimizeForMKLDNN"], "caffe2.python._import_c_extension.transform_optimizeForMKLDNN": [], "transformations.fuseConvBN": ["caffe2.python._import_c_extension.transform_fuseConvBN"], "caffe2.python._import_c_extension.transform_fuseConvBN": [], "transformations_test": ["caffe2.python.transformations.Transformer"], "caffe2.python.transformations.Transformer": [], "transformations_test.TestTransformations._base_test_net": ["caffe2.python.core.Net"], "transformations_test.TestTransformations._add_nnpack": ["caffe2.python.test_util.str_compare"], "caffe2.python.test_util.str_compare": [], "transformations_test.TestTransformations._fuse_nnpack_convrelu": ["caffe2.python.test_util.numOps", "transformations_test.TestTransformations._add_nnpack", "caffe2.python.test_util.str_compare", "caffe2.python.test_util.TestCase.assertEquals"], "caffe2.python.test_util.numOps": [], "transformations_test.TestTransformations.test_transformer_AddNNPACK": ["transformations_test.TestTransformations._base_test_net", "transformations_test.TestTransformations._add_nnpack"], "transformations_test.TestTransformations.test_transformer_FuseNNPACKConvRelu": ["transformations_test.TestTransformations._base_test_net", "transformations_test.TestTransformations._fuse_nnpack_convrelu"], "transformations_test.TestTransformations.test_noFuseNNPACKConvRelu": ["transformations_test.TestTransformations._base_test_net", "transformations_test.TestTransformations._fuse_nnpack_convrelu"], "transformations_test.TestTransformations.test_transformer_FuseNNPACKConvReluNoInplace": ["transformations_test.TestTransformations._base_test_net", "transformations_test.TestTransformations._fuse_nnpack_convrelu"], "transformations_test.TestTransformations.test_transformer_FuseNNPACKConvReluInplaceRelu": ["transformations_test.TestTransformations._base_test_net", "transformations_test.TestTransformations._fuse_nnpack_convrelu"], "transformations_test.TestTransformations.test_transformer_FuseNNPACKConvReluPingPongNaming": ["transformations_test.TestTransformations._base_test_net", "transformations_test.TestTransformations._fuse_nnpack_convrelu"], "transformations_test.TestTransformations.test_transformer_FuseNNPACKConvReluFollowedByMultipleInputOp": ["transformations_test.TestTransformations._base_test_net", "transformations_test.TestTransformations._fuse_nnpack_convrelu"], "transformations_test.TestTransformations.test_transformer_FuseNNPACKConvReluInplaceFollowedByMultipleInputOp": ["transformations_test.TestTransformations._base_test_net", "transformations_test.TestTransformations._fuse_nnpack_convrelu"], "transformations_test.TestTransformations": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.floats"], "transformations_test.TestTransformations.test_transformer_FuseConvBN": ["numpy.allclose", "caffe2.python.core.Net", "caffe2.python.test_util.numOps", "numpy.zeros", "caffe2.python.workspace.RunNetOnce", "caffe2.python.test_util.randBlobsFloat32", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "numpy.random.seed", "caffe2.python.test_util.randBlobFloat32", "caffe2.python.workspace.ResetWorkspace"], "transformations_test.TestTransformations.test_transformer_FuseConvBNNoConvBias": ["numpy.allclose", "caffe2.python.core.Net", "caffe2.python.test_util.numOps", "numpy.zeros", "caffe2.python.workspace.RunNetOnce", "caffe2.python.test_util.randBlobsFloat32", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "numpy.random.seed", "caffe2.python.test_util.randBlobFloat32", "caffe2.python.workspace.ResetWorkspace"], "transformations_test.TestTransformations.test_transformer_FuseConvBNNoConvBiasDuplicatedName": ["numpy.allclose", "caffe2.python.core.Net", "caffe2.python.test_util.numOps", "<builtin>.print", "numpy.zeros", "caffe2.python.workspace.RunNetOnce", "caffe2.python.test_util.randBlobsFloat32", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "numpy.random.seed", "caffe2.python.test_util.randBlobFloat32", "caffe2.python.workspace.ResetWorkspace"], "transformations_test.TestTransformations.test_transformer_FuseConv3DBN": ["numpy.allclose", "caffe2.python.core.Net", "caffe2.python.test_util.numOps", "numpy.zeros", "caffe2.python.workspace.RunNetOnce", "caffe2.python.test_util.randBlobsFloat32", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "numpy.random.seed", "caffe2.python.test_util.randBlobFloat32", "caffe2.python.workspace.ResetWorkspace"], "transformations_test.TestTransformations.test_converterDontEnforceUnusedInputs": ["caffe2.python.core.Net"], "transformations_test.TestTransformations.test_converterDontEnforceUnusedOutputs": ["caffe2.python.core.Net"], "tt_core": [], "tt_core.init_tt_cores": ["numpy.array", "<builtin>.str", "numpy.random.normal", "<builtin>.range", "numpy.random.seed", "numpy.prod", "numpy.dot", "numpy.linalg.qr", "numpy.zeros", "<builtin>.len", "numpy.sum"], "numpy.linalg.qr": [], "tt_core.matrix_to_tt": ["numpy.array", "<builtin>.str", "tt_core.tt_svd", "numpy.transpose", "<builtin>.range", "numpy.tile", "numpy.repeat", "numpy.prod", "numpy.reshape", "numpy.concatenate", "numpy.arange", "numpy.zeros", "<builtin>.len"], "tt_core.tt_svd": ["<builtin>.range", "numpy.linalg.svd", "numpy.reshape", "numpy.diag", "numpy.dot", "<builtin>.len", "numpy.zeros", "numpy.sum"], "numpy.linalg.svd": [], "numpy.diag": [], "tt_core.fc_net_to_tt_net": [], "tt_core_test": ["unittest.main"], "tt_core_test.TestTTSVD.test_full_tt_svd": ["caffe2.python.workspace.FeedBlob", "numpy.zeros", "caffe2.python.core.CreateOperator", "numpy.random.rand", "numpy.expand_dims", "caffe2.python.tt_core.matrix_to_tt", "caffe2.python.workspace.FetchBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEquals", "numpy.random.seed", "<builtin>.len", "numpy.linalg.norm", "caffe2.python.workspace.RunOperatorOnce"], "caffe2.python.tt_core.matrix_to_tt": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEquals": [], "utils.OpAlmostEqual": ["<builtin>.str", "<builtin>.all", "utils.OpAlmostEqual.clean_op", "<builtin>.isinstance"], "utils.OpAlmostEqual.clean_op": ["copy.deepcopy"], "utils.CaffeBlobToNumpyArray": ["numpy.asarray"], "utils.Caffe2TensorToNumpyArray": ["<builtin>.RuntimeError", "numpy.asarray", "<builtin>.str"], "utils.NumpyArrayToCaffe2Tensor": ["<builtin>.list", "<builtin>.RuntimeError", "<builtin>.str", "caffe2.proto.caffe2_pb2.TensorProto"], "caffe2.proto.caffe2_pb2.TensorProto": [], "utils.MakeArgument": ["numpy.asscalar", "<builtin>.isinstance", "<builtin>.all", "<builtin>.set", "<builtin>.type", "<builtin>.ValueError", "caffe2.proto.caffe2_pb2.Argument"], "utils.TryReadProtoWithClass": ["google.protobuf.text_format.Parse"], "google.protobuf.text_format.Parse": [], "utils.GetContentFromProto": ["future.utils.viewitems", "<builtin>.type"], "utils.GetContentFromProtoString": ["utils.TryReadProtoWithClass", "future.utils.viewitems"], "utils.ConvertProtoToBinary": ["<builtin>.open", "utils.TryReadProtoWithClass"], "utils.GetGPUMemoryUsageStats": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "numpy.sum", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.RunOperatorOnce"], "utils.ResetBlobs": ["caffe2.python.core.CreateOperator", "caffe2.python.core.DeviceOption", "<builtin>.list", "caffe2.python.workspace.RunOperatorOnce"], "utils.DebugMode.run": ["sys.exit", "<builtin>.print", "utils.debug.wrapper.func", "pdb.post_mortem", "sys.exc_info"], "utils.debug.wrapper.func": [], "sys.exc_info": [], "pdb.post_mortem": [], "utils.raiseIfNotEqual": ["<builtin>.Exception"], "utils.debug": ["functools.wraps"], "utils.debug.wrapper": ["utils.DebugMode.run"], "utils.BuildUniqueMutexIter": ["caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope"], "utils.EnumClassKeyVals": ["<builtin>.dir", "<builtin>.getattr", "<builtin>.isinstance", "<builtin>.type"], "utils.ArgsToDict": ["<builtin>.len", "<builtin>.getattr"], "utils.NHWC2NCHW": ["<builtin>.range", "<builtin>.tuple"], "utils.NCHW2NHWC": ["<builtin>.range", "<builtin>.tuple"], "utils_test": [], "utils_test.TestUtils.testArgsToDict": ["caffe2.python.test_util.TestCase.assertEqual", "numpy.array", "caffe2.python.utils.ArgsToDict", "caffe2.python.utils.MakeArgument"], "utils_test.TestUtils.testBuildUniqueMutexIter": ["caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.utils.BuildUniqueMutexIter", "caffe2.python.core.Net"], "visualize": ["visualize.PatchVisualizer.__init__"], "visualize.ChannelFirst": [], "visualize.ChannelLast": [], "visualize.PatchVisualizer.__init__": [], "visualize.PatchVisualizer.ShowSingle": ["matplotlib.pyplot.imshow", "<builtin>.len", "visualize.PatchVisualizer.get_patch_shape", "<builtin>.ValueError"], "visualize.PatchVisualizer.get_patch_shape": ["numpy.sqrt", "numpy.floor", "<builtin>.ValueError", "<builtin>.int"], "matplotlib.pyplot.imshow": [], "visualize.PatchVisualizer.ShowMultiple": ["<builtin>.int", "<builtin>.float", "numpy.array", "<builtin>.tuple", "matplotlib.pyplot.imshow", "numpy.sqrt", "<builtin>.len", "<builtin>.ValueError", "numpy.ones", "<builtin>.range", "numpy.ceil", "visualize.PatchVisualizer.get_patch_shape", "matplotlib.pyplot.axis"], "numpy.ceil": [], "matplotlib.pyplot.axis": [], "visualize.PatchVisualizer.ShowImages": ["numpy.max", "numpy.finfo", "visualize.PatchVisualizer.ShowMultiple", "numpy.min"], "visualize.PatchVisualizer.ShowChannels": ["numpy.swapaxes", "<builtin>.len", "<builtin>.ValueError", "visualize.PatchVisualizer.ShowMultiple"], "numpy.swapaxes": [], "visualize.NHWC.ShowSingle": ["visualize.PatchVisualizer.ShowSingle"], "visualize.NHWC.ShowMultiple": ["visualize.PatchVisualizer.ShowMultiple"], "visualize.NHWC.ShowImages": ["visualize.PatchVisualizer.ShowImages"], "visualize.NHWC.ShowChannels": ["visualize.PatchVisualizer.ShowChannels"], "visualize.NCHW.ShowSingle": ["visualize.ChannelLast", "visualize.PatchVisualizer.ShowSingle"], "visualize.NCHW.ShowMultiple": ["visualize.ChannelLast", "visualize.PatchVisualizer.ShowMultiple"], "visualize.NCHW.ShowImages": ["visualize.ChannelLast", "visualize.PatchVisualizer.ShowImages"], "visualize.NCHW.ShowChannels": ["visualize.ChannelLast", "visualize.PatchVisualizer.ShowChannels"], "workspace": ["contextlib.contextmanager", "collections.defaultdict", "logging.getLogger", "collections.namedtuple"], "workspace.GetGpuPeerAccessPattern": ["caffe2.python._import_c_extension.get_cuda_peer_access_pattern", "caffe2.python._import_c_extension.get_hip_peer_access_pattern", "numpy.asarray"], "caffe2.python._import_c_extension.get_cuda_peer_access_pattern": [], "workspace.<lambda1>": [], "workspace.<lambda2>": [], "workspace.<lambda3>": [], "caffe2.python._import_c_extension.get_hip_peer_access_pattern": [], "workspace.<lambda4>": [], "workspace.<lambda5>": [], "workspace.<lambda6>": ["numpy.array"], "workspace.<lambda7>": [], "workspace.FillRandomNetworkInputs": ["caffe2.python._import_c_extension.fill_random_network_inputs"], "caffe2.python._import_c_extension.fill_random_network_inputs": [], "workspace._GetFreeFlaskPort": ["socket.socket"], "workspace.StartMint": ["<builtin>.print", "multiprocessing.Process", "caffe2.python._import_c_extension.root_folder", "workspace._GetFreeFlaskPort", "<builtin>.str", "socket.getfqdn"], "caffe2.python._import_c_extension.root_folder": [], "workspace.StringifyProto": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "<builtin>.hasattr"], "workspace.ResetWorkspace": ["caffe2.python._import_c_extension.reset_workspace", "os.path.exists", "os.makedirs", "caffe2.python._import_c_extension.root_folder"], "caffe2.python._import_c_extension.reset_workspace": [], "workspace.CreateNet": ["workspace.GetNetName", "caffe2.python._import_c_extension.create_blob", "caffe2.python.lazy.TriggerLazyImport", "workspace.CallWithExceptionIntercept", "workspace.StringifyProto"], "caffe2.python._import_c_extension.create_blob": [], "workspace.GetNetName": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.str", "<builtin>.Exception"], "workspace.CallWithExceptionIntercept": ["caffe2.python._import_c_extension.run_net_once", "caffe2.python._import_c_extension.run_net", "caffe2.python._import_c_extension.create_net", "caffe2.python._import_c_extension.Workspace.current._last_failed_op_net_position", "<builtin>.reversed"], "workspace.Predictor": ["workspace.StringifyProto", "caffe2.python._import_c_extension.Predictor"], "caffe2.python._import_c_extension.Predictor": [], "workspace.GetOperatorCost": ["workspace.StringifyProto", "caffe2.python._import_c_extension.get_operator_cost"], "caffe2.python._import_c_extension.get_operator_cost": [], "workspace.RunOperatorOnce": ["workspace.StringifyProto", "caffe2.python._import_c_extension.run_operator_once"], "caffe2.python._import_c_extension.run_operator_once": [], "workspace.RunOperatorMultiple": ["workspace.StringifyProto", "caffe2.python._import_c_extension.run_operator_multiple"], "caffe2.python._import_c_extension.run_operator_multiple": [], "workspace.RunOperatorsOnce": ["workspace.RunOperatorOnce"], "workspace.ClearGlobalNetObserver": ["caffe2.python._import_c_extension.clear_global_net_observer"], "caffe2.python._import_c_extension.clear_global_net_observer": [], "caffe2.python._import_c_extension.run_net_once": [], "caffe2.python._import_c_extension.run_net": [], "caffe2.python._import_c_extension.create_net": [], "caffe2.python._import_c_extension.Workspace.current._last_failed_op_net_position": [], "workspace.RunNetOnce": ["workspace.StringifyProto", "workspace.CallWithExceptionIntercept", "workspace.GetNetName"], "workspace.RunNet": ["workspace.CallWithExceptionIntercept", "workspace.StringifyNetName", "workspace.GetNetName"], "workspace.StringifyNetName": ["workspace._StringifyName"], "workspace.RunPlan": ["workspace.StringifyProto", "<builtin>.isinstance", "caffe2.python._import_c_extension.run_plan", "caffe2.python.core.Plan"], "caffe2.python._import_c_extension.run_plan": [], "workspace.RunPlanInBackground": ["workspace.StringifyProto", "<builtin>.isinstance", "caffe2.python._import_c_extension.run_plan_in_background", "caffe2.python.core.Plan"], "caffe2.python._import_c_extension.run_plan_in_background": [], "workspace.InferShapesAndTypes": ["caffe2.proto.caffe2_pb2.TensorShapes", "<builtin>.list", "caffe2.python._import_c_extension.infer_shapes_and_types_from_workspace", "workspace.StringifyProto", "caffe2.python._import_c_extension.infer_shapes_and_types_from_map"], "caffe2.python._import_c_extension.infer_shapes_and_types_from_workspace": [], "caffe2.python._import_c_extension.infer_shapes_and_types_from_map": [], "caffe2.proto.caffe2_pb2.TensorShapes": [], "workspace._StringifyName": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.str"], "workspace.StringifyBlobName": ["workspace._StringifyName"], "workspace.FeedBlob": ["workspace._Workspace_feed_blob"], "workspace._Workspace_feed_blob": ["caffe2.python.scope.CurrentDeviceScope", "caffe2.python.utils.Caffe2TensorToNumpyArray", "workspace.StringifyBlobName", "numpy.dtype", "<builtin>.type", "<builtin>.str", "caffe2.python._import_c_extension.Workspace.current.create_blob"], "workspace.FetchBlobs": ["workspace.FetchBlob"], "workspace.FetchBlob": ["<builtin>.isinstance", "<builtin>.TypeError", "caffe2.python._import_c_extension.fetch_blob", "workspace.StringifyBlobName"], "caffe2.python._import_c_extension.fetch_blob": [], "workspace.FetchTorch": [], "workspace.FetchInt8Blob": ["<builtin>.isinstance", "caffe2.python._import_c_extension.fetch_blob", "workspace.StringifyBlobName"], "workspace.FetchInt8BlobRealVal": ["<builtin>.int", "<builtin>.isinstance", "caffe2.python._import_c_extension.fetch_blob", "workspace.StringifyBlobName"], "workspace._Workspace_fetch_int8_blob": ["<builtin>.isinstance", "workspace.StringifyBlobName"], "workspace.ApplyTransform": ["<builtin>.str", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python._import_c_extension.apply_transform"], "caffe2.python._import_c_extension.apply_transform": [], "workspace.ApplyTransformIfFaster": ["<builtin>.float", "<builtin>.str", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python._import_c_extension.apply_transform_if_faster"], "caffe2.python._import_c_extension.apply_transform_if_faster": [], "workspace.GetNameScope": ["caffe2.python.scope.CurrentNameScope"], "workspace._BlobDict.__getitem__": ["workspace.FetchBlob"], "workspace._BlobDict.__setitem__": ["workspace.FeedBlob"], "workspace._BlobDict.__len__": ["<builtin>.len", "caffe2.python._import_c_extension.blobs"], "caffe2.python._import_c_extension.blobs": [], "workspace._BlobDict.__iter__": ["caffe2.python._import_c_extension.blobs"], "workspace._BlobDict.__contains__": ["caffe2.python._import_c_extension.has_blob"], "caffe2.python._import_c_extension.has_blob": [], "workspace.IsImmediate": [], "workspace.WorkspaceGuard": ["caffe2.python._import_c_extension.switch_workspace", "caffe2.python._import_c_extension.current_workspace"], "caffe2.python._import_c_extension.current_workspace": [], "caffe2.python._import_c_extension.switch_workspace": [], "workspace.StartImmediate": ["workspace.IsImmediate", "<builtin>.print", "workspace.ResetWorkspace", "workspace.WorkspaceGuard", "workspace.StopImmediate", "tempfile.mkdtemp"], "workspace.StopImmediate": ["workspace.ResetWorkspace", "workspace.IsImmediate", "workspace.WorkspaceGuard", "shutil.rmtree"], "workspace.ImmediateBlobs": ["workspace.WorkspaceGuard", "caffe2.python._import_c_extension.blobs"], "workspace.RunOperatorImmediate": ["workspace.WorkspaceGuard", "workspace.RunOperatorOnce"], "workspace.FetchImmediate": ["workspace.WorkspaceGuard", "workspace.FetchBlob"], "workspace.FeedImmediate": ["workspace.WorkspaceGuard", "workspace.FeedBlob"], "workspace._Workspace_create_net_with_exception_intercept": ["workspace.StringifyProto", "workspace.CallWithExceptionIntercept", "workspace.GetNetName"], "workspace._Workspace_run": ["workspace.GetNetName", "workspace.CallWithExceptionIntercept", "<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "<builtin>.hasattr"], "caffe2.python._import_c_extension.Workspace.current.create_blob": [], "workspace._Workspace_remove_blob": ["<builtin>.str"], "workspace._Blob_feed": ["workspace.StringifyProto", "<builtin>.type", "<builtin>.isinstance", "torch._C._tensor_impl_raw_handle"], "torch._C._tensor_impl_raw_handle": [], "workspace._Tensor_to_torch": ["torch._C._wrap_tensor_impl"], "torch._C._wrap_tensor_impl": [], "workspace._Blob_to_torch": ["<builtin>.RuntimeError"], "workspace_test": ["unittest.main"], "workspace_test.TestWorkspace.setUp": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.Net"], "workspace_test.TestWorkspace.testRootFolder": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.RootFolder", "unittest.TestCase.assertEqual"], "caffe2.python.workspace.RootFolder": [], "workspace_test.TestWorkspace.testWorkspaceHasBlobWithNonexistingName": ["unittest.TestCase.assertEqual", "caffe2.python.workspace.HasBlob"], "workspace_test.TestWorkspace.testRunOperatorOnce": ["unittest.TestCase.assertEqual", "caffe2.python.workspace.HasBlob", "caffe2.python.workspace.Blobs", "<builtin>.len", "caffe2.python.workspace.RunOperatorOnce"], "workspace_test.TestWorkspace.testGetOperatorCost": ["numpy.zeros", "unittest.TestCase.assertTupleEqual", "caffe2.python.workspace.GetOperatorCost", "caffe2.python.core.CreateOperator", "collections.namedtuple", "caffe2.python.workspace.FeedBlob"], "caffe2.python.workspace.GetOperatorCost": [], "workspace_test.TestWorkspace.testRunNetOnce": ["caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual", "caffe2.python.workspace.HasBlob"], "workspace_test.TestWorkspace.testCurrentWorkspaceWrapper": ["unittest.TestCase.assertEqual", "unittest.TestCase.assertNotIn", "caffe2.python.workspace.HasBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertIn", "caffe2.python.workspace.ResetWorkspace"], "unittest.TestCase.assertNotIn": [], "workspace_test.TestWorkspace.testRunPlan": ["caffe2.python.workspace.RunPlan", "unittest.TestCase.assertEqual", "caffe2.python.workspace.HasBlob", "caffe2.python.core.ExecutionStep", "caffe2.python.core.Plan"], "workspace_test.TestWorkspace.testRunPlanInBackground": ["caffe2.python.workspace.RunPlanInBackground", "unittest.TestCase.assertEqual", "caffe2.python.workspace.HasBlob", "caffe2.python.core.ExecutionStep", "caffe2.python.core.Plan"], "caffe2.python.workspace.RunPlanInBackground": [], "workspace_test.TestWorkspace.testConstructPlanFromSteps": ["caffe2.python.workspace.RunPlan", "caffe2.python.core.ExecutionStep", "unittest.TestCase.assertEqual", "caffe2.python.workspace.HasBlob"], "workspace_test.TestWorkspace.testResetWorkspace": ["caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual", "caffe2.python.workspace.HasBlob", "caffe2.python.workspace.ResetWorkspace"], "workspace_test.TestWorkspace.testTensorAccess": ["<builtin>.range", "caffe2.python.workspace.C.Workspace", "unittest.TestCase.assertEquals", "numpy.testing.assert_array_equal", "unittest.TestCase.assertRaises", "numpy.zeros", "numpy.array"], "workspace_test.TestWorkspace.testFetchFeedBlob": ["caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertEqual", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testFetchFeedBlobViaBlobReference": ["caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertEqual", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testFetchFeedBlobTypes": ["caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertEqual", "numpy.testing.assert_array_equal", "numpy.random.rand", "numpy.iinfo", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testFetchFeedBlobBool": ["caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertEqual", "numpy.testing.assert_array_equal", "numpy.zeros", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testGetBlobSizeBytes": ["unittest.TestCase.assertEqual", "numpy.random.randn", "unittest.TestCase.assertTrue", "numpy.array", "<builtin>.len", "caffe2.python.workspace.GetBlobSizeBytes", "numpy.dtype", "caffe2.python.workspace.FeedBlob"], "caffe2.python.workspace.GetBlobSizeBytes": [], "workspace_test.TestWorkspace.testFetchFeedBlobZeroDim": ["numpy.empty", "unittest.TestCase.assertEqual", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testFetchFeedLongStringTensor": ["caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertEqual", "<builtin>.range", "numpy.array", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testFetchFeedShortStringTensor": ["caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertEqual", "<builtin>.range", "numpy.array", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testFetchFeedPlainString": ["caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testFetchBlobs": ["unittest.TestCase.assertEquals", "caffe2.python.workspace.FetchBlobs", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspace.testFetchFeedViaBlobDict": ["unittest.TestCase.assertEqual", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "<builtin>.len"], "workspace_test.TestWorkspace.testTorchInterop": ["caffe2.python.workspace.FetchBlob", "torch.ones", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchTorch", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.array"], "caffe2.python.workspace.FetchTorch": [], "workspace_test.TestMultiWorkspaces.setUp": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.SwitchWorkspace"], "workspace_test.TestMultiWorkspaces.testCreateWorkspace": ["unittest.TestCase.assertEqual", "caffe2.python.workspace.HasBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertTrue", "caffe2.python.workspace.Workspaces", "caffe2.python.core.Net", "caffe2.python.workspace.SwitchWorkspace"], "caffe2.python.workspace.Workspaces": [], "workspace_test.TestWorkspaceGPU.setUp": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.Net"], "workspace_test.TestWorkspaceGPU.testFetchBlobGPU": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestWorkspaceGPU.testGetGpuPeerAccessPattern": ["<builtin>.type", "caffe2.python.workspace.GetGpuPeerAccessPattern", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.NumGpuDevices"], "workspace_test.TestWorkspaceGPU": ["unittest.skipIf"], "workspace_test.TestWorkspaceGPU.testTorchInterop": ["caffe2.python.workspace.FetchBlob", "torch.ones", "caffe2.python.workspace.ResetWorkspace", "numpy.testing.assert_array_equal", "caffe2.python.core.DeviceOption", "numpy.array", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.FetchTorch", "caffe2.python.workspace.RunOperatorOnce", "torch.cuda.memory_allocated", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertGreater", "caffe2.python.test_util.TestCase.assertTrue"], "torch.cuda.memory_allocated": [], "workspace_test.TestWorkspaceIDEEP.testFeedFetchBlobIDEEP": ["caffe2.python.workspace.FetchBlob", "numpy.random.randn", "numpy.testing.assert_array_equal", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestImmedibate.testImmediateEnterExit": ["caffe2.python.workspace.StopImmediate", "caffe2.python.workspace.IsImmediate", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.workspace.StartImmediate", "caffe2.python.test_util.TestCase.assertTrue"], "caffe2.python.workspace.StartImmediate": [], "caffe2.python.workspace.StopImmediate": [], "workspace_test.TestImmedibate.testImmediateRunsCorrectly": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FetchImmediate", "caffe2.python.workspace.StopImmediate", "numpy.testing.assert_array_equal", "caffe2.python.workspace.ImmediateBlobs", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.workspace.FeedImmediate", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.Net", "caffe2.python.workspace.StartImmediate", "caffe2.python.test_util.TestCase.assertTrue"], "caffe2.python.workspace.ImmediateBlobs": [], "caffe2.python.workspace.FetchImmediate": [], "caffe2.python.workspace.FeedImmediate": [], "workspace_test.TestImmedibate.testImmediateRootFolder": ["caffe2.python.workspace.StopImmediate", "os.path.isdir", "<builtin>.len", "caffe2.python.test_util.TestCase.assertFalse", "os.path.exists", "caffe2.python.workspace.StartImmediate", "caffe2.python.test_util.TestCase.assertTrue"], "workspace_test.TestCppEnforceAsException.testEnforce": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.CreateOperator"], "workspace_test.TestCWorkspace.test_net_execution": ["caffe2.python.workspace.C.Workspace", "numpy.testing.assert_array_equal", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "<builtin>.len", "numpy.ones", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIn", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIn": [], "workspace_test.TestCWorkspace": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.text", "hypothesis.strategies.sampled_from", "hypothesis.strategies.floats", "hypothesis.given"], "workspace_test.TestCWorkspace.test_operator_run": ["numpy.testing.assert_allclose", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIn", "caffe2.python.workspace.C.Workspace"], "workspace_test.TestCWorkspace.test_net_run": ["caffe2.python.workspace.C.Workspace", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotIn", "numpy.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIn", "caffe2.python.core.Net"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotIn": [], "workspace_test.TestCWorkspace.test_plan_run": ["caffe2.python.workspace.C.Workspace", "caffe2.python.core.ExecutionStep", "numpy.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIn", "caffe2.python.core.Net", "caffe2.python.core.Plan"], "workspace_test.TestCWorkspace.test_net_create": ["numpy.testing.assert_allclose", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIn", "caffe2.python.workspace.C.Workspace"], "workspace_test.TestCWorkspace.test_array_serde": ["numpy.testing.assert_equal", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIn", "caffe2.python.workspace.C.Workspace"], "workspace_test.TestCWorkspace.test_string_serde": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIn", "caffe2.python.workspace.C.Workspace"], "workspace_test.TestCWorkspace.test_exception": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "caffe2.python.workspace.C.Workspace"], "workspace_test.TestPredictor._create_model": ["caffe2.python.brew.fc", "<builtin>.dict", "caffe2.python.model_helper.ModelHelper"], "workspace_test.TestPredictor.test_predictor_memory_model": ["caffe2.python.workspace.Predictor", "numpy.array", "numpy.testing.assert_array_almost_equal", "workspace_test.TestPredictor._create_model", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "numpy.zeros", "caffe2.python.workspace.StringifyProto"], "caffe2.python.workspace.StringifyProto": [], "caffe2.python.workspace.Predictor": [], "workspace_test.TestTransform": ["hypothesis.given", "hypothesis.strategies.floats", "hypothesis.settings", "hypothesis.strategies.integers"], "workspace_test.TestTransform.test_simple_transform": ["caffe2.python.workspace.ApplyTransform", "caffe2.python.brew.conv", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.fc", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "caffe2.python.workspace.ApplyTransform": [], "workspace_test.TestTransform.test_registry_invalid": ["caffe2.python.brew.fc", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.ApplyTransform", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises"], "workspace_test.TestTransform.test_apply_transform_if_faster": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.ApplyTransformIfFaster", "caffe2.python.brew.conv", "caffe2.python.model_helper.ModelHelper", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "caffe2.python.workspace.ApplyTransformIfFaster": [], "workspace_test.MyModule.__init__": ["torch.nn.Parameter", "<builtin>.super", "torch.tensor"], "workspace_test.MyModule": ["torch.jit.script_method"], "workspace_test.MyModule.forward": [], "workspace_test.MyModule.multi_input": [], "workspace_test.MyModule.multi_input_tensor_list": [], "workspace_test.MyModule.multi_output": [], "workspace_test.TestScriptModule._createFeedModule": ["workspace_test.MyModule.__init__", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestScriptModule.testCreation": ["caffe2.python.workspace.FetchBlob", "caffe2.python.test_util.TestCase.assertTrue", "workspace_test.MyModule.__init__", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestScriptModule.testForward": ["workspace_test.TestScriptModule._createFeedModule", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_almost_equal", "caffe2.python.workspace.RunOperatorOnce", "numpy.array", "numpy.matmul", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestScriptModule.testMultiInputOutput": ["workspace_test.TestScriptModule._createFeedModule", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_almost_equal", "caffe2.python.workspace.RunOperatorOnce", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestScriptModule.testMultiTensorListInput": ["workspace_test.TestScriptModule._createFeedModule", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_almost_equal", "caffe2.python.workspace.RunOperatorOnce", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob"], "workspace_test.TestScriptModule.testSerialization": ["workspace_test.TestScriptModule._createFeedModule", "caffe2.python.workspace.ResetWorkspace", "numpy.random.rand", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "os.path.join", "tempfile.mkdtemp", "numpy.testing.assert_almost_equal", "numpy.array", "numpy.matmul", "shutil.rmtree", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue"], "workspace_test.TestScriptModuleFromString._createFeedModule": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "workspace_test.TestScriptModuleFromString._get_modules_bytes", "workspace_test.MyModule.__init__"], "workspace_test.TestScriptModuleFromString._get_modules_bytes": ["io.BytesIO", "torch.jit.save"], "io.BytesIO": [], "_import_c_extension": ["logging.warning", "<builtin>.property", "logging.info", "logging.critical", "atexit.register", "caffe2.python.extension_loader.DlopenGuard", "sys.exit", "<builtin>.str"], "logging.critical": [], "_import_c_extension._TensorCPU_shape": ["<builtin>.tuple"], "_import_c_extension._TensorCPU_reshape": ["<builtin>.list"], "<builtin>.property": [], "autograd": [], "autograd.DifferentiabilityInfo.has_derivatives": ["<builtin>.len"], "autograd.uses_ident": ["re.search", "tools.codegen.utils.IDENT_REGEX.format"], "tools.codegen.utils.IDENT_REGEX.format": [], "autograd.uses_retain_variables": ["autograd.uses_ident"], "autograd.uses_single_grad": ["autograd.uses_ident"], "autograd.dispatch_strategy": [], "autograd.match_differentiability_info": ["re.sub", "re.search", "<builtin>.bool", "autograd.match_differentiability_info.replace_self_with_original_self", "<builtin>.RuntimeError", "<builtin>.len", "tools.codegen.utils.IDENT_REGEX.format", "autograd.match_differentiability_info.find_info"], "autograd.match_differentiability_info.find_info": [], "autograd.match_differentiability_info.replace_self_with_original_self": ["re.sub", "tools.codegen.utils.IDENT_REGEX.format"], "autograd.match_differentiability_info.replace_self_with_original_self.repl": [], "autograd.match_differentiability_info.repl": [], "autograd.is_differentiable": [], "autograd.gen_differentiable_outputs": ["tools.codegen.api.cpp.return_type", "autograd.uses_single_grad", "<builtin>.RuntimeError", "tools.codegen.api.cpp.return_names", "<builtin>.zip", "<builtin>.filter", "<builtin>.list"], "tools.codegen.api.cpp.return_type": [], "tools.codegen.api.cpp.return_names": [], "autograd.gen_differentiable_outputs.<lambda1>": ["autograd.is_differentiable"], "<builtin>.filter": [], "cpp": [], "cpp.name": ["<builtin>.str"], "cpp.valuetype_type": ["<builtin>.isinstance", "<builtin>.repr", "<builtin>.AssertionError", "<builtin>.str", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.ArrayCType", "tools.codegen.api.types.OptionalCType", "cpp.valuetype_type", "tools.codegen.api.types.NamedCType"], "tools.codegen.api.types.BaseCType": [], "tools.codegen.api.types.NamedCType": [], "tools.codegen.api.types.OptionalCType": [], "tools.codegen.api.types.ArrayCType": [], "<builtin>.repr": [], "cpp.argumenttype_type": ["tools.codegen.local.use_const_ref_for_mutable_tensors", "<builtin>.isinstance", "tools.codegen.api.types.ConstRefCType", "cpp.argumenttype_type", "<builtin>.repr", "<builtin>.AssertionError", "tools.codegen.api.types.ArrayRefCType", "<builtin>.str", "cpp.valuetype_type", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.ListCType", "tools.codegen.api.types.OptionalCType", "tools.codegen.api.types.MutRefCType", "tools.codegen.api.types.NamedCType"], "tools.codegen.local.use_const_ref_for_mutable_tensors": [], "tools.codegen.api.types.MutRefCType": [], "tools.codegen.api.types.ConstRefCType": [], "tools.codegen.api.types.ArrayRefCType": [], "tools.codegen.api.types.ListCType": [], "cpp.argument_type": ["cpp.argumenttype_type"], "cpp.returntype_type": ["tools.codegen.local.use_const_ref_for_mutable_tensors", "<builtin>.isinstance", "tools.codegen.api.types.ConstRefCType", "<builtin>.AssertionError", "cpp.returntype_type", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.MutRefCType", "tools.codegen.api.types.VectorCType", "cpp.valuetype_type"], "tools.codegen.api.types.VectorCType": [], "cpp.return_type": ["cpp.returntype_type"], "cpp.returns_type": ["cpp.return_type", "tools.codegen.api.types.TupleCType", "tools.codegen.api.types.BaseCType", "<builtin>.len"], "tools.codegen.api.types.TupleCType": [], "cpp.return_names": ["<builtin>.any", "<builtin>.enumerate", "<builtin>.len"], "cpp.default_expr": ["<builtin>.isinstance", "cpp.default_expr", "<builtin>.len", "<builtin>.ValueError", "<builtin>.str"], "cpp.argument": ["<builtin>.isinstance", "cpp.default_expr", "<builtin>.all", "cpp.argument_type", "tools.codegen.api.types.BaseCType", "tools.codegen.model.assert_never", "cpp.argument.sub_argument", "tools.codegen.api.types.Binding", "tools.codegen.api.types.NamedCType"], "cpp.argument.sub_argument": ["cpp.argument"], "tools.codegen.api.types.Binding": [], "tools.codegen.model.assert_never": [], "cpp.arguments": ["cpp.argument"], "dispatcher": [], "dispatcher.name": ["tools.codegen.api.cpp.name"], "tools.codegen.api.cpp.name": [], "dispatcher.argumenttype_type": ["tools.codegen.api.cpp.argumenttype_type"], "tools.codegen.api.cpp.argumenttype_type": [], "dispatcher.argument_type": ["dispatcher.argumenttype_type"], "dispatcher.returns_type": ["tools.codegen.api.cpp.returns_type"], "tools.codegen.api.cpp.returns_type": [], "dispatcher.jit_arguments": ["itertools.chain", "<builtin>.list", "tools.codegen.utils.concatMap"], "dispatcher.jit_arguments.to_argument": ["<builtin>.isinstance", "tools.codegen.model.assert_never"], "tools.codegen.utils.concatMap": [], "dispatcher.arguments": ["dispatcher.jit_arguments", "tools.codegen.api.types.Binding", "dispatcher.argument_type"], "meta": [], "meta.name": ["<builtin>.str"], "native": [], "native.name": ["<builtin>.str"], "native.argumenttype_type": ["tools.codegen.api.types.MutRefCType", "tools.codegen.local.use_const_ref_for_mutable_tensors", "tools.codegen.api.types.ListCType", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.ConstRefCType", "<builtin>.str", "tools.codegen.api.cpp.argumenttype_type", "tools.codegen.api.types.NamedCType", "tools.codegen.api.types.OptionalCType"], "native.returns_type": ["tools.codegen.api.cpp.returns_type"], "native.argument_type": ["native.argumenttype_type"], "native.argument": ["tools.codegen.model.assert_never", "native.argument_type", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.OptionalCType", "tools.codegen.api.cpp.default_expr", "tools.codegen.api.types.Binding", "tools.codegen.api.types.NamedCType", "<builtin>.isinstance", "native.argument"], "tools.codegen.api.cpp.default_expr": [], "native.arguments": ["native.argument"], "python": [], "python.PythonReturns.named_tuple_pyi": ["python.argument_type_str_pyi", "python.namedtuple_fieldnames", "<builtin>.zip"], "python.argument_type_str_pyi": ["<builtin>.RuntimeError", "python.argument_type_str_pyi", "<builtin>.isinstance", "<builtin>.str", "<builtin>.repr"], "python.namedtuple_fieldnames": ["<builtin>.ValueError", "<builtin>.any", "<builtin>.list", "<builtin>.map", "<builtin>.len", "<builtin>.all"], "python.PythonReturns.returns_str_pyi": ["python.argument_type_str_pyi", "<builtin>.len", "python.PythonReturns.named_tuple_pyi"], "python.PythonArgument.argument_str": ["python.argument_type_str"], "python.argument_type_str": ["<builtin>.RuntimeError", "python.argument_type_str", "<builtin>.isinstance", "<builtin>.str", "<builtin>.repr"], "python.PythonArgument.argument_str_pyi": ["python.argument_type_str_pyi", "<builtin>.isinstance", "tools.codegen.model.BaseType"], "tools.codegen.model.BaseType": [], "python.PythonOutArgument.from_outputs": ["tools.codegen.model.ListType", "<builtin>.RuntimeError", "<builtin>.AssertionError", "<builtin>.any", "<builtin>.map", "<builtin>.len", "tools.codegen.model.BaseType"], "python.PythonOutArgument.from_outputs.<lambda1>": [], "tools.codegen.model.ListType": [], "python.PythonSignature.deprecated": [], "python.PythonSignature.arguments": ["<builtin>.tuple"], "python.PythonSignature.arguments_count": ["<builtin>.len", "python.PythonSignature.arguments"], "python.PythonSignature.output_idx": ["<builtin>.len"], "python.PythonSignature.signature_str": ["<builtin>.len", "python.PythonSignature.arguments", "<builtin>.list", "<builtin>.map"], "python.PythonSignature.signature_str.<lambda1>": [], "python.PythonSignature.signature_str_pyi": ["<builtin>.len", "python.PythonSignature.arguments", "<builtin>.list", "<builtin>.map"], "python.PythonSignature.signature_str_pyi.<lambda1>": [], "python.PythonSignature.signature_str_pyi_vararg": ["python.PythonSignature.arguments", "python.PythonSignature.arguments_count", "<builtin>.list", "<builtin>.map", "<builtin>.isinstance", "<builtin>.len", "<builtin>.str"], "python.PythonSignature.signature_str_pyi_vararg.<lambda1>": [], "python.PythonSignatureDeprecated.deprecated": [], "python.PythonSignatureDeprecated.signature_str": ["python.PythonSignature.signature_str"], "python.PythonSignatureDeprecated.signature_str_pyi": ["<builtin>.len", "python.PythonSignature.arguments", "<builtin>.list", "<builtin>.map"], "python.PythonSignatureDeprecated.signature_str_pyi.<lambda1>": [], "python.PythonSignatureDeprecated.signature_str_pyi_vararg": [], "python.PythonArgParserOutputExpr.is_none_expr": [], "python._cpp_signature": ["tools.codegen.api.types.CppSignatureGroup.from_native_function"], "tools.codegen.api.types.CppSignatureGroup.from_native_function": [], "python.has_tensor_options": [], "python.argument_type_size": ["<builtin>.str"], "python.argument": ["<builtin>.str", "tools.codegen.api.cpp.default_expr", "tools.codegen.gen.pythonify_default"], "tools.codegen.gen.pythonify_default": [], "python.signature": ["<builtin>.tuple", "<builtin>.ValueError", "tools.codegen.model.OptionalType", "python.PythonOutArgument.from_outputs", "<builtin>.any", "tools.codegen.api.cpp.name", "<builtin>.map", "<builtin>.set", "<builtin>.str", "tools.codegen.model.BaseType", "<builtin>.filter", "python._dtype_default_type_hack"], "python.signature.<lambda1>": [], "python.signature.<lambda2>": [], "python.signature.<lambda3>": [], "python._dtype_default_type_hack": [], "tools.codegen.model.OptionalType": [], "python.namedtuple_fieldnames.<lambda1>": [], "python.namedtuple_fieldnames.<lambda2>": [], "python.namedtuple_fieldnames.<lambda3>": ["<builtin>.str"], "python.dispatch_lambda_args": ["<builtin>.tuple", "<builtin>.list", "<builtin>.map", "python._cpp_signature", "<builtin>.isinstance", "<builtin>.set", "<builtin>.filter", "<builtin>.dict"], "python.dispatch_lambda_args.<lambda1>": [], "python.dispatch_lambda_args.<lambda2>": [], "python.dispatch_lambda_args.dispatch_lambda_arg": ["<builtin>.len"], "python.dispatch_lambda_return_str": ["tools.codegen.api.cpp.returns_type", "<builtin>.tuple", "<builtin>.RuntimeError", "<builtin>.map"], "python.dispatch_lambda_return_str.<lambda1>": ["tools.codegen.model.Return"], "tools.codegen.model.Return": [], "python.cpp_dispatch_target": ["python.has_tensor_options", "tools.codegen.api.cpp.name", "<builtin>.RuntimeError"], "python.cpp_dispatch_exprs": ["<builtin>.tuple", "<builtin>.map", "python._cpp_signature", "<builtin>.isinstance", "<builtin>.filter"], "python.cpp_dispatch_exprs.<lambda1>": [], "python.cpp_dispatch_exprs.<lambda2>": [], "python.arg_parser_unpack_method": ["<builtin>.isinstance", "<builtin>.str", "python.arg_parser_unpack_method", "<builtin>.RuntimeError"], "python.arg_parser_output_expr": ["python.arg_parser_unpack_method"], "python.arg_parser_output_exprs": ["<builtin>.enumerate", "python.arg_parser_output_expr"], "python.dispatch_lambda_exprs": ["<builtin>.enumerate", "python.dispatch_lambda_args", "<builtin>.tuple", "<builtin>.RuntimeError", "<builtin>.list", "<builtin>.map", "<builtin>.all", "<builtin>.isinstance", "python.has_tensor_options", "<builtin>.str", "<builtin>.len", "<builtin>.dict", "python.arg_parser_output_exprs"], "python.dispatch_lambda_exprs.<lambda1>": [], "python.dispatch_lambda_exprs.<lambda2>": [], "python.dispatch_lambda_exprs.<lambda3>": [], "python.dispatch_lambda_exprs.<lambda4>": [], "structured": [], "structured.argumenttype_type": ["<builtin>.isinstance", "tools.codegen.api.types.NamedCType", "tools.codegen.api.types.ArrayRefCType", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.OptionalCType", "tools.codegen.api.types.ConstRefCType", "tools.codegen.model.BaseType", "<builtin>.str", "<builtin>.repr", "<builtin>.AssertionError", "tools.codegen.api.cpp.valuetype_type", "structured.argumenttype_type"], "tools.codegen.api.cpp.valuetype_type": [], "structured.argument_type": ["structured.argumenttype_type"], "structured.argument": ["<builtin>.isinstance", "tools.codegen.model.assert_never", "structured.argument", "structured.argument_type", "tools.codegen.api.types.Binding", "<builtin>.AssertionError"], "structured.impl_arguments": ["structured.argument"], "structured.meta_arguments": ["structured.argument"], "structured.out_arguments": ["structured.argument"], "translate": ["tools.codegen.api.types.ConstRefCType", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.NamedCType", "logging.getLogger", "logging.StreamHandler", "translate.main"], "translate.translate": ["translate.translate.solve", "tools.codegen.api.types.OptionalCType", "tools.codegen.api.types.ConstRefCType", "tools.codegen.api.types.MutRefCType", "tools.codegen.api.types.Expr", "<builtin>.str", "tools.codegen.api.types.NamedCType", "<builtin>.isinstance", "tools.codegen.api.types.BaseCType"], "tools.codegen.api.types.Expr": [], "translate.translate.unsat": [], "translate.translate.solve": ["translate.translate.solve", "tools.codegen.api.types.OptionalCType", "tools.codegen.api.types.NamedCType", "translate.translate.unsat", "<builtin>.isinstance", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.MutRefCType", "translate.translate.solve.direct_solve"], "translate.translate.solve.direct_solve": ["translate.translate.solve"], "types": ["typing.TypeVar", "enum.Enum"], "typing.TypeVar": [], "enum.Enum": [], "types.BaseCppType.__str__": [], "types.BaseCType.cpp_type": ["<builtin>.str"], "types.BaseCType.cpp_type_registration_declarations": ["<builtin>.str"], "types.BaseCType.remove_const_ref": [], "types.ConstRefCType.cpp_type": [], "types.ConstRefCType.cpp_type_registration_declarations": [], "types.ConstRefCType.remove_const_ref": [], "types.MutRefCType.cpp_type": [], "types.MutRefCType.cpp_type_registration_declarations": [], "types.MutRefCType.remove_const_ref": [], "types.OptionalCType.cpp_type": [], "types.OptionalCType.cpp_type_registration_declarations": [], "types.OptionalCType.remove_const_ref": [], "types.ListCType.cpp_type": [], "types.ListCType.cpp_type_registration_declarations": [], "types.ListCType.remove_const_ref": [], "types.ArrayRefCType.cpp_type": [], "types.ArrayRefCType.cpp_type_registration_declarations": [], "types.ArrayRefCType.remove_const_ref": [], "types.VectorCType.cpp_type": [], "types.VectorCType.cpp_type_registration_declarations": [], "types.VectorCType.remove_const_ref": [], "types.ArrayCType.cpp_type": [], "types.ArrayCType.cpp_type_registration_declarations": [], "types.ArrayCType.remove_const_ref": [], "types.TupleCType.cpp_type": [], "types.TupleCType.cpp_type_registration_declarations": [], "types.TupleCType.remove_const_ref": [], "types.NamedCType.cpp_type": [], "types.NamedCType.cpp_type_registration_declarations": [], "types.NamedCType.remove_const_ref": [], "types.NamedCType.with_name": [], "types.Binding.type": [], "types.Binding.no_default": [], "types.Binding.decl": [], "types.Binding.decl_registration_declarations": [], "types.Binding.defn": [], "types.CppSignature.arguments": ["tools.codegen.api.cpp.arguments"], "tools.codegen.api.cpp.arguments": [], "types.CppSignature.name": ["tools.codegen.api.cpp.name"], "types.CppSignature.decl": ["tools.codegen.api.cpp.returns_type", "types.CppSignature.arguments", "types.CppSignature.name"], "types.CppSignature.defn": ["tools.codegen.api.cpp.returns_type", "types.CppSignature.arguments", "types.CppSignature.name"], "types.CppSignature.ptr_type": ["types.CppSignature.arguments", "tools.codegen.api.cpp.returns_type"], "types.CppSignature.type": ["types.CppSignature.arguments", "tools.codegen.api.cpp.returns_type"], "types.CppSignatureGroup.most_faithful_signature": [], "types.CppSignatureGroup.from_native_function": ["<builtin>.len"], "types.DispatcherSignature.arguments": ["tools.codegen.api.dispatcher.arguments"], "tools.codegen.api.dispatcher.arguments": [], "types.DispatcherSignature.name": ["tools.codegen.api.dispatcher.name"], "tools.codegen.api.dispatcher.name": [], "types.DispatcherSignature.decl": ["types.DispatcherSignature.returns_type", "types.DispatcherSignature.name", "types.DispatcherSignature.arguments"], "types.DispatcherSignature.returns_type": ["tools.codegen.api.dispatcher.returns_type"], "types.DispatcherSignature.defn": ["types.DispatcherSignature.returns_type", "types.DispatcherSignature.name", "types.DispatcherSignature.arguments"], "types.DispatcherSignature.exprs": ["types.DispatcherSignature.arguments"], "tools.codegen.api.dispatcher.returns_type": [], "types.DispatcherSignature.ptr_type": ["types.DispatcherSignature.returns_type", "types.DispatcherSignature.arguments"], "types.DispatcherSignature.type": ["types.DispatcherSignature.returns_type", "types.DispatcherSignature.arguments"], "types.DispatcherSignature.from_schema": [], "types.NativeSignature.name": ["tools.codegen.api.native.name"], "tools.codegen.api.native.name": [], "types.NativeSignature.decl": ["tools.codegen.api.native.returns_type", "types.NativeSignature.name", "types.NativeSignature.arguments"], "types.NativeSignature.arguments": ["tools.codegen.api.native.arguments"], "tools.codegen.api.native.returns_type": [], "types.NativeSignature.defn": ["tools.codegen.api.native.returns_type", "types.NativeSignature.name", "types.NativeSignature.arguments"], "types.NativeSignature.ptr_type": ["tools.codegen.api.native.returns_type", "types.NativeSignature.arguments"], "tools.codegen.api.native.arguments": [], "types.NativeSignature.returns_type": ["tools.codegen.api.native.returns_type"], "types.NativeSignature.dispatcher_exprs": ["tools.codegen.api.translate.translate", "tools.codegen.api.dispatcher.arguments", "types.NativeSignature.arguments"], "tools.codegen.api.translate.translate": [], "types.kernel_signature": ["types.DispatcherSignature.from_schema"], "native_functions": ["tools.codegen.context.with_native_function_and_index"], "tools.codegen.context.with_native_function_and_index": [], "native_functions.gen_unstructured": ["tools.codegen.api.types.kernel_signature"], "tools.codegen.api.types.kernel_signature": [], "native_functions.gen_structured": ["tools.codegen.api.meta.name", "tools.codegen.api.structured.impl_arguments"], "tools.codegen.api.meta.name": [], "tools.codegen.api.structured.impl_arguments": [], "native_functions.compute_native_function_declaration": ["native_functions.gen_unstructured", "<builtin>.isinstance", "<builtin>.list", "native_functions.gen_structured", "<builtin>.AssertionError", "tools.codegen.utils.mapMaybe"], "native_functions.compute_native_function_declaration.<lambda1>": ["native_functions.gen_unstructured"], "tools.codegen.utils.mapMaybe": [], "register_dispatch_key": [], "register_dispatch_key.RegisterDispatchKey.gen_device_check": [], "register_dispatch_key.RegisterDispatchKey": ["tools.codegen.context.method_with_native_function"], "tools.codegen.context.method_with_native_function": [], "register_dispatch_key.RegisterDispatchKey.__call__": ["register_dispatch_key.RegisterDispatchKey.gen_unstructured", "tools.codegen.utils.mapMaybe", "<builtin>.list", "tools.codegen.model.assert_never", "register_dispatch_key.RegisterDispatchKey.gen_structured", "<builtin>.isinstance"], "register_dispatch_key.RegisterDispatchKey.gen_structured": ["tools.codegen.utils.mapMaybe", "<builtin>.list"], "register_dispatch_key.RegisterDispatchKey.__call__.<lambda1>": ["register_dispatch_key.RegisterDispatchKey.gen_unstructured"], "register_dispatch_key.RegisterDispatchKey.gen_unstructured": ["register_dispatch_key.RegisterDispatchKey.gen_device_check", "register_dispatch_key.RegisterDispatchKey.gen_unstructured.generate_defn", "register_dispatch_key.RegisterDispatchKey.gen_out_inplace_wrapper", "<builtin>.isinstance", "<builtin>.len", "itertools.chain", "<builtin>.any", "<builtin>.next", "<builtin>.list", "register_dispatch_key.RegisterDispatchKey.wrapper_kernel_sig", "tools.codegen.api.types.CppSignatureGroup.from_native_function", "tools.codegen.model.is_cuda_dispatch_key", "tools.codegen.context.native_function_manager", "tools.codegen.model.assert_never", "tools.codegen.model.gets_generated_out_inplace_wrapper"], "register_dispatch_key.RegisterDispatchKey.wrapper_kernel_sig": ["tools.codegen.api.types.kernel_signature"], "register_dispatch_key.RegisterDispatchKey.gen_out_inplace_wrapper": ["tools.codegen.api.cpp.return_names", "<builtin>.len", "<builtin>.AssertionError", "tools.codegen.api.translate.translate", "register_dispatch_key.RegisterDispatchKey.wrapper_kernel_sig", "<builtin>.enumerate"], "register_dispatch_key.RegisterDispatchKey.gen_structured.<lambda1>": ["register_dispatch_key.RegisterDispatchKey.gen_unstructured"], "tools.codegen.context.native_function_manager": [], "tools.codegen.model.gets_generated_out_inplace_wrapper": [], "register_dispatch_key.RegisterDispatchKey.gen_unstructured.generate_defn": ["tools.codegen.api.translate.translate"], "tools.codegen.model.is_cuda_dispatch_key": [], "register_dispatch_key.StructuredRegisterDispatchKey.gen_class_set_output": ["register_dispatch_key.StructuredRegisterDispatchKey.gen_class_set_output_body", "textwrap.indent"], "register_dispatch_key.StructuredRegisterDispatchKey.gen_class_set_output_body": ["tools.codegen.model.assert_never", "<builtin>.AssertionError"], "register_dispatch_key.StructuredRegisterDispatchKey.gen_class_ctor": ["<builtin>.range", "tools.codegen.model.assert_never"], "register_dispatch_key.StructuredRegisterDispatchKey.gen_class": ["register_dispatch_key.StructuredRegisterDispatchKey.gen_class_ctor", "register_dispatch_key.StructuredRegisterDispatchKey.gen_class_set_output", "textwrap.indent", "<builtin>.len"], "register_dispatch_key.StructuredRegisterDispatchKey": ["tools.codegen.context.method_with_native_function"], "register_dispatch_key.StructuredRegisterDispatchKey.gen_one": ["register_dispatch_key.StructuredRegisterDispatchKey.gen_class", "tools.codegen.api.types.CppSignatureGroup.from_native_function", "<builtin>.range", "tools.codegen.api.types.NamedCType", "tools.codegen.model.assert_never", "register_dispatch_key.StructuredRegisterDispatchKey.gen_one.generate_defn", "tools.codegen.api.structured.meta_arguments", "tools.codegen.api.types.Expr", "<builtin>.list", "tools.codegen.api.translate.translate", "<builtin>.enumerate", "tools.codegen.model.is_cuda_dispatch_key", "tools.codegen.api.types.BaseCType", "<builtin>.len", "itertools.chain", "tools.codegen.api.types.MutRefCType", "register_dispatch_key.RegisterDispatchKey.gen_device_check", "tools.codegen.api.structured.out_arguments", "tools.codegen.api.structured.impl_arguments", "tools.codegen.api.types.ConstRefCType", "tools.codegen.api.meta.name", "tools.codegen.api.types.NativeSignature"], "tools.codegen.api.types.NativeSignature": [], "register_dispatch_key.StructuredRegisterDispatchKey.gen_one.generate_defn": ["tools.codegen.api.translate.translate"], "tools.codegen.api.structured.meta_arguments": [], "tools.codegen.api.structured.out_arguments": [], "operator": [], "operator.SelectiveBuildOperator.from_yaml_dict": ["<builtin>.len", "<builtin>.map", "<builtin>.isinstance", "<builtin>.Exception", "<builtin>.set", "<builtin>.tuple"], "operator.SelectiveBuildOperator.from_yaml_dict.<lambda1>": ["<builtin>.str"], "operator.SelectiveBuildOperator.from_legacy_operator_name_without_overload": [], "operator.SelectiveBuildOperator.to_dict": [], "operator.merge_debug_info": ["<builtin>.set", "<builtin>.tuple"], "operator.combine_operators": ["<builtin>.Exception", "<builtin>.str", "operator.merge_debug_info"], "operator.merge_operator_dicts": ["operator.combine_operators", "<builtin>.list"], "operator.strip_operator_overload_name": [], "selector": [], "selector.SelectiveBuilder.get_nop_selector": ["selector.SelectiveBuilder.from_yaml_dict"], "selector.SelectiveBuilder.from_yaml_dict": ["<builtin>.set", "<builtin>.map", "<builtin>.isinstance", "<builtin>.Exception", "tools.codegen.selective_build.operator.SelectiveBuildOperator.from_yaml_dict", "<builtin>.len", "<builtin>.tuple", "<builtin>.str", "<builtin>.list"], "selector.SelectiveBuilder.from_yaml_dict.<lambda1>": ["<builtin>.str"], "tools.codegen.selective_build.operator.SelectiveBuildOperator.from_yaml_dict": [], "selector.SelectiveBuilder.from_yaml_dict.<lambda2>": ["<builtin>.str"], "selector.SelectiveBuilder.from_yaml_str": ["selector.SelectiveBuilder.from_yaml_dict", "yaml.safe_load"], "yaml.safe_load": [], "selector.SelectiveBuilder.from_yaml_path": ["<builtin>.open", "selector.SelectiveBuilder.from_yaml_dict", "yaml.safe_load"], "selector.SelectiveBuilder.from_legacy_op_registration_allow_list": ["selector.SelectiveBuilder.from_yaml_dict"], "selector.SelectiveBuilder.is_operator_selected": ["tools.codegen.selective_build.operator.strip_operator_overload_name"], "tools.codegen.selective_build.operator.strip_operator_overload_name": [], "selector.SelectiveBuilder.is_native_function_selected": ["selector.op_name_from_native_function", "selector.SelectiveBuilder.is_operator_selected"], "selector.op_name_from_native_function": [], "selector.SelectiveBuilder.is_operator_selected_for_training": ["tools.codegen.selective_build.operator.strip_operator_overload_name", "selector.SelectiveBuilder.is_operator_selected", "tools.codegen.selective_build.operator.SelectiveBuildOperator"], "tools.codegen.selective_build.operator.SelectiveBuildOperator": [], "selector.SelectiveBuilder.is_native_function_selected_for_training": ["selector.op_name_from_native_function", "selector.SelectiveBuilder.is_operator_selected_for_training"], "selector.SelectiveBuilder.is_root_operator": ["tools.codegen.selective_build.operator.strip_operator_overload_name", "selector.SelectiveBuilder.is_operator_selected"], "selector.SelectiveBuilder.is_kernel_dtype_selected": [], "selector.SelectiveBuilder.to_dict": ["<builtin>.list", "<builtin>.sorted"], "selector.merge_kernel_metadata": ["<builtin>.set", "<builtin>.list"], "selector.combine_selective_builders": ["tools.codegen.selective_build.operator.merge_debug_info", "tools.codegen.selective_build.operator.merge_operator_dicts", "selector.merge_kernel_metadata"], "tools.codegen.selective_build.operator.merge_debug_info": [], "tools.codegen.selective_build.operator.merge_operator_dicts": [], "add_ops_list_test": ["operator_benchmark.config_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.op_list"], "add_ops_list_test.UnaryOpBenchmark.init": ["torch.rand"], "add_ops_list_test.UnaryOpBenchmark.forward": [], "operator_benchmark.benchmark_runner.main": [], "c2_cpu_gpu_forward_backward_test": ["operator_benchmark.generate_c2_test", "operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_c2_gradient_test"], "c2_cpu_gpu_forward_backward_test.AddBenchmark.init": ["operator_benchmark.Caffe2BenchmarkBase.tensor", "operator_benchmark.Caffe2BenchmarkBase.set_module_name"], "operator_benchmark.Caffe2BenchmarkBase.set_module_name": [], "operator_benchmark.Caffe2BenchmarkBase.tensor": [], "c2_cpu_gpu_forward_backward_test.AddBenchmark.forward": ["caffe2.python.core.CreateOperator"], "c2_cpu_gpu_forward_backward_test.AddBenchmark.backward": ["caffe2.python.core.CreateOperator"], "operator_benchmark.generate_c2_test": [], "operator_benchmark.generate_c2_gradient_test": [], "jit_forward_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "torch.jit.script"], "jit_forward_test.torch_sumall": ["<builtin>.range", "torch.sum", "<builtin>.float"], "jit_forward_test.TorchSumBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "operator_benchmark.TorchBenchmarkBase.set_module_name": [], "jit_forward_test.TorchSumBenchmark.jit_forward": ["jit_forward_test.torch_sumall"], "pt_backward_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_gradient_test", "operator_benchmark.benchmark_runner.main"], "pt_backward_test.AddBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.auto_set", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand"], "operator_benchmark.TorchBenchmarkBase.auto_set": [], "pt_backward_test.AddBenchmark.forward": ["torch.add"], "pt_configs_list_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main"], "pt_configs_list_test.AddBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "pt_configs_list_test.AddBenchmark.forward": ["torch.add"], "pt_cpu_gpu_forward_backward_test": ["operator_benchmark.generate_pt_gradient_test", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main"], "pt_cpu_gpu_forward_backward_test.AddBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand"], "pt_cpu_gpu_forward_backward_test.AddBenchmark.forward": ["torch.add"], "random_sample_test": ["operator_benchmark.random_sample_configs", "operator_benchmark.generate_pt_test", "operator_benchmark.attr_probs", "operator_benchmark.benchmark_runner.main"], "operator_benchmark.attr_probs": [], "operator_benchmark.random_sample_configs": [], "random_sample_test.AddBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand"], "random_sample_test.AddBenchmark.forward": ["torch.add"], "aten_test": ["unittest.main"], "aten_test.TestATen": ["caffe2.python.hypothesis_test_util.tensors", "hypothesis.given", "hypothesis.strategies.integers"], "aten_test.TestATen.test_add": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "aten_test.TestATen.test_add.ref": [], "aten_test.TestATen.test_add_half": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "aten_test.TestATen.test_add_half.ref": [], "aten_test.TestATen.test_pow": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "aten_test.TestATen.test_pow.ref": ["numpy.square"], "aten_test.TestATen.test_sort": ["numpy.random.permutation", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "aten_test.TestATen.test_sort.ref": ["numpy.argsort", "numpy.sort"], "aten_test.TestATen.test_sum": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "aten_test.TestATen.test_sum.ref": ["numpy.sum"], "aten_test.TestATen.test_index_uint8": ["numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "aten_test.TestATen.test_index_uint8.ref": [], "aten_test.TestATen.test_index_put": ["numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "aten_test.TestATen.test_index_put.ref": [], "aten_test.TestATen.test_unique": ["aten_test.TestATen.test_unique.ref", "<builtin>.print", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.array"], "aten_test.TestATen.test_unique.ref": ["numpy.unique"], "gen_op": ["<builtin>.set", "gen_op.emit_assignments", "gen_op.attribute_names", "gen_op.read", "tools.codegen.code_template.CodeTemplate", "<builtin>.any", "<builtin>.ValueError", "argparse.ArgumentParser", "gen_op.value_is_tensor_type", "gen_op.write", "os.path.exists", "gen_op.expand", "gen_op.get_num_inputs", "os.path.join", "sys.path.insert", "tools.codegen.code_template.CodeTemplate.from_file", "<builtin>.sum", "gen_op.supports", "yaml.load", "<builtin>.enumerate", "<builtin>.str", "gen_op.find_factory_methods"], "sys.path.insert": [], "tools.codegen.code_template.CodeTemplate.from_file": [], "gen_op.write": ["<builtin>.open"], "gen_op.read": ["<builtin>.open"], "gen_op.value_has_tensors": [], "gen_op.value_is_tensor_type": ["gen_op.value_has_tensors"], "gen_op.expand": ["copy.deepcopy", "<builtin>.sum", "<builtin>.range"], "gen_op.supports": ["gen_op.value_has_tensors", "<builtin>.print", "<builtin>.len"], "tools.codegen.code_template.CodeTemplate": [], "gen_op.get_output": ["<builtin>.len"], "gen_op.attribute_names": ["gen_op.value_has_tensors", "<builtin>.sorted"], "gen_op.required_attribute_names": ["gen_op.value_has_tensors", "<builtin>.sorted"], "gen_op.self_as_first_argument": [], "gen_op.get_num_inputs": ["<builtin>.str", "gen_op.value_has_tensors"], "gen_op.find_factory_methods": ["<builtin>.any"], "gen_op.emit_assignments": ["gen_op.get_output", "gen_op.value_is_tensor_type", "tools.codegen.code_template.CodeTemplate", "<builtin>.enumerate"], "yaml.load": [], "gloo_test": ["unittest.main", "caffe2.python.dyndep.InitOpsLibrary"], "gloo_test.TemporaryDirectory.__enter__": ["tempfile.mkdtemp"], "gloo_test.TemporaryDirectory.__exit__": ["shutil.rmtree"], "gloo_test.TestCase.run_test_locally": ["multiprocessing.Process", "multiprocessing.Queue", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertFalse", "<builtin>.isinstance", "<builtin>.range"], "gloo_test.TestCase.run_test_locally.run_fn": ["gloo_test.TestCase._test_io_error", "gloo_test.TestCase._test_close_connection", "gloo_test.TestCase._test_barrier", "caffe2.python.core.DeviceScope", "gloo_test.TestCase._test_broadcast", "caffe2.python.workspace.ResetWorkspace", "gloo_test.TestCase._test_allreduce", "gloo_test.TestCase._test_reduce_scatter", "gloo_test.TestCase._test_allreduce_multicw", "gloo_test.TestCase._test_allgather"], "gloo_test.TestCase._test_io_error": ["caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "numpy.full", "<builtin>.range", "gloo_test.TestCase.create_common_world"], "gloo_test.TestCase._test_close_connection": ["caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "time.sleep", "gloo_test.TestCase.create_common_world"], "gloo_test.TestCase._test_barrier": ["caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "<builtin>.range", "gloo_test.TestCase.create_common_world"], "gloo_test.TestCase._test_allreduce": ["caffe2.python.workspace.CreateNet", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "gloo_test.TestCase.synchronize", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "numpy.full", "caffe2.python.workspace.FetchBlob", "<builtin>.range", "gloo_test.TestCase.create_common_world"], "gloo_test.TestCase._test_reduce_scatter": ["caffe2.python.workspace.CreateNet", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "numpy.zeros", "<builtin>.min", "gloo_test.TestCase.synchronize", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "numpy.full", "caffe2.python.workspace.FetchBlob", "numpy.resize", "<builtin>.range", "gloo_test.TestCase.create_common_world"], "gloo_test.TestCase._test_allreduce_multicw": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.Net", "numpy.full", "caffe2.python.workspace.FetchBlob", "<builtin>.int", "caffe2.python.workspace.RunNetOnce", "<builtin>.range", "gloo_test.TestCase.create_common_world"], "gloo_test.TestCase._test_allgather": ["numpy.concatenate", "caffe2.python.workspace.CreateNet", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "gloo_test.TestCase.synchronize", "numpy.array", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "numpy.full", "caffe2.python.workspace.FetchBlob", "<builtin>.range", "gloo_test.TestCase.create_common_world"], "gloo_test.TestCase._test_broadcast": ["caffe2.python.workspace.CreateNet", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "gloo_test.TestCase.synchronize", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "numpy.full", "caffe2.python.workspace.FetchBlob", "<builtin>.range", "gloo_test.TestCase.create_common_world"], "gloo_test.TestCase.run_test_distributed": ["os.getenv", "gloo_test.TestCase._test_io_error", "gloo_test.TestCase._test_close_connection", "gloo_test.TestCase._test_barrier", "caffe2.python.core.DeviceScope", "gloo_test.TestCase._test_broadcast", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIsNotNone", "caffe2.python.workspace.ResetWorkspace", "<builtin>.int", "gloo_test.TestCase._test_allreduce", "gloo_test.TestCase._test_reduce_scatter", "gloo_test.TestCase._test_allreduce_multicw", "gloo_test.TestCase._test_allgather"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertIsNotNone": [], "gloo_test.TestCase.create_common_world": ["os.getenv", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.str", "<builtin>.int", "caffe2.python.core.CreateOperator"], "gloo_test.TestCase.synchronize": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "pickle.dumps", "pickle.loads", "caffe2.python.core.CreateOperator"], "gloo_test.TestCase": ["hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.strategies.booleans", "<builtin>.int", "hypothesis.given", "hypothesis.strategies.integers"], "gloo_test.TestCase.test_broadcast": ["gloo_test.TestCase.run_test_locally", "os.getenv", "gloo_test.TestCase.run_test_distributed"], "gloo_test.TestCase.test_allreduce": ["gloo_test.TestCase.run_test_locally", "os.getenv", "gloo_test.TestCase.run_test_distributed"], "numpy.resize": [], "gloo_test.TestCase.test_reduce_scatter": ["gloo_test.TestCase.run_test_locally", "os.getenv", "gloo_test.TestCase.run_test_distributed"], "gloo_test.TestCase.test_allgather": ["gloo_test.TestCase.run_test_locally", "os.getenv", "gloo_test.TestCase.run_test_distributed"], "gloo_test.TestCase.test_forked_cw": ["gloo_test.TestCase.run_test_locally", "os.getenv", "gloo_test.TestCase.run_test_distributed"], "gloo_test.TestCase.test_barrier": ["gloo_test.TestCase.run_test_locally", "os.getenv", "gloo_test.TestCase.run_test_distributed"], "gloo_test.TestCase.test_close_connection": ["os.getenv", "time.time", "gloo_test.TestCase.run_test_locally", "gloo_test.TestCase.run_test_distributed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertLess"], "gloo_test.TestCase.test_io_error": ["gloo_test.TestCase.run_test_locally", "os.getenv", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "gloo_test.TestCase.run_test_distributed"], "nccl_ops_test": ["numpy.random.seed", "caffe2.python.dyndep.InitOpsLibrary"], "nccl_ops_test.gpu_device": ["caffe2.proto.caffe2_pb2.DeviceOption"], "nccl_ops_test.benchmark": ["caffe2.python.core.ExecutionStep", "<builtin>.range", "caffe2.python.core.Plan", "time.time", "<builtin>.float", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.print"], "nccl_ops_test.NCCLOpsTest": ["hypothesis.strategies.booleans", "unittest.skipIf", "hypothesis.strategies.integers", "caffe2.python.workspace.NumGpuDevices", "hypothesis.strategies.sampled_from", "hypothesis.given", "os.environ.get"], "nccl_ops_test.NCCLOpsTest.test_nccl_allreduce": ["numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "numpy.testing.assert_array_equal", "nccl_ops_test.gpu_device", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "<builtin>.str", "<builtin>.enumerate", "caffe2.python.core.CreateOperator"], "nccl_ops_test.NCCLOpsTest.test_nccl_allreduce.allreduce": ["<builtin>.len", "numpy.sum", "<builtin>.range"], "nccl_ops_test.NCCLOpsTest.test_nccl_broadcast": ["numpy.random.randn", "nccl_ops_test.gpu_device", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "hypothesis.assume", "<builtin>.str", "<builtin>.enumerate", "caffe2.python.core.CreateOperator"], "nccl_ops_test.NCCLOpsTest.test_nccl_broadcast.broadcast": ["<builtin>.len", "<builtin>.range"], "nccl_ops_test.NCCLOpsTest.test_nccl_reduce": ["numpy.random.randn", "nccl_ops_test.gpu_device", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "hypothesis.assume", "<builtin>.str", "<builtin>.enumerate", "caffe2.python.core.CreateOperator"], "nccl_ops_test.NCCLOpsTest.test_nccl_reduce.reduce": ["<builtin>.len", "numpy.sum"], "nccl_ops_test.NCCLOpsTest.test_nccl_allgather": ["numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "numpy.testing.assert_array_equal", "nccl_ops_test.gpu_device", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "<builtin>.str", "<builtin>.enumerate", "caffe2.python.core.CreateOperator"], "nccl_ops_test.NCCLOpsTest.test_nccl_allgather.allgather": ["<builtin>.len", "numpy.stack", "<builtin>.range"], "nccl_ops_test.NCCLOpsTest.test_nccl_reduce_scatter": ["numpy.random.randn", "nccl_ops_test.gpu_device", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "<builtin>.str", "<builtin>.enumerate", "caffe2.python.core.CreateOperator"], "nccl_ops_test.NCCLOpsTest.test_nccl_reduce_scatter.reduce_scatter": ["<builtin>.len", "<builtin>.sum", "<builtin>.range"], "nccl_ops_test.NCCLOpsTest._test_nccl_sync": ["caffe2.python.core.Net", "numpy.full", "numpy.testing.assert_array_equal", "nccl_ops_test.gpu_device", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.str"], "nccl_ops_test.NCCLOpsTest.test_timings": ["numpy.random.randn", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "nccl_ops_test.gpu_device", "nccl_ops_test.benchmark", "<builtin>.range", "caffe2.python.workspace.NumGpuDevices", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.str", "caffe2.python.muji.Allreduce", "<builtin>.print"], "nnpack_ops_test": ["caffe2.python.dyndep.InitOpsLibrary", "numpy.random.seed"], "nnpack_ops_test.benchmark": ["<builtin>.print", "caffe2.python.core.ExecutionStep", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.Plan", "<builtin>.float", "<builtin>.range", "time.time"], "nnpack_ops_test.has_avx2": ["subprocess.check_output"], "nnpack_ops_test.NNPackOpsTest": ["hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.given", "os.environ.get", "hypothesis.strategies.sampled_from", "hypothesis.settings", "unittest.skipIf"], "nnpack_ops_test.NNPackOpsTest.test_convolution_correctness": ["hypothesis.assume", "<builtin>.int", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "numpy.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob"], "nnpack_ops_test.NNPackOpsTest.test_max_pool_correctness": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "numpy.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob"], "nnpack_ops_test.NNPackOpsTest.test_relu_correctness": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "numpy.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob"], "nnpack_ops_test.NNPackOpsTest.test_leaky_relu_correctness": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "numpy.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob"], "nnpack_ops_test.NNPackOpsTest.test_timings": ["hypothesis.assume", "<builtin>.print", "numpy.random.rand", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "nnpack_ops_test.benchmark", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob"], "nnpack_ops_test.NNPackOpsTest.test_relu_timings": ["<builtin>.print", "numpy.random.rand", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "nnpack_ops_test.benchmark", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob"], "AnyExpOnTerm": ["logging.basicConfig", "caffe2.contrib.playground.AnyExp.aquireDatasets", "caffe2.contrib.playground.AnyExp.initDefaultModuleMap", "argparse.ArgumentParser", "logging.getLogger", "AnyExpOnTerm.runShardedTrainLoop", "caffe2.contrib.playground.AnyExp.initOpts", "AnyExpOnTerm.trainFun", "<builtin>.str"], "AnyExpOnTerm.runShardedTrainLoop": ["AnyExpOnTerm.trainFun.simpleTrainFun", "<builtin>.range", "os.path.exists", "caffe2.contrib.playground.checkpoint.initialize_params_from_file", "<builtin>.str"], "caffe2.contrib.playground.checkpoint.initialize_params_from_file": [], "AnyExpOnTerm.trainFun.simpleTrainFun": ["caffe2.contrib.playground.AnyExp.overrideAdditionalMethods", "caffe2.contrib.playground.AnyExp.createTrainerClass"], "AnyExpOnTerm.trainFun": [], "caffe2.contrib.playground.AnyExp.createTrainerClass": [], "caffe2.contrib.playground.AnyExp.overrideAdditionalMethods": [], "caffe2.contrib.playground.AnyExp.initOpts": [], "caffe2.contrib.playground.AnyExp.initDefaultModuleMap": [], "caffe2.contrib.playground.AnyExp.aquireDatasets": [], "AnyExp": ["logging.basicConfig", "logging.getLogger"], "AnyExp.initOpts": ["caffe2.python.workspace.GlobalInit"], "AnyExp.initDefaultModuleMap": ["AnyExp.registerModuleMap"], "AnyExp.registerModuleMap": ["ModuleRegister.registerModuleMap"], "ModuleRegister.registerModuleMap": ["inspect.getsource"], "AnyExp.aquireDatasets": ["ModuleRegister.getModule"], "ModuleRegister.getModule": ["inspect.getmembers", "<builtin>.str", "inspect.getsource"], "AnyExp.createTrainerClass": ["ModuleRegister.constructTrainerClass"], "ModuleRegister.constructTrainerClass": ["<builtin>.dir", "<builtin>.type", "ModuleRegister.getModule"], "AnyExp.overrideAdditionalMethods": ["ModuleRegister.overrideAdditionalMethods"], "ModuleRegister.overrideAdditionalMethods": ["<builtin>.setattr", "inspect.getmembers", "inspect.getsource", "ModuleRegister.getModule"], "AnyExp.initialize_params_from_file": ["checkpoint.initialize_params_from_file"], "checkpoint.initialize_params_from_file": ["checkpoint.initialize_master_xpu_model_params", "checkpoint.broadcast_parameters"], "AnyExp.AnyExpTrainer.__init__": ["<builtin>.range", "logging.getLogger", "<builtin>.len", "<builtin>.str", "logging.basicConfig"], "AnyExp.AnyExpTrainer": ["abc.abstractmethod"], "AnyExp.AnyExpTrainer.get_input_dataset": [], "AnyExp.AnyExpTrainer.get_model_input_fun": [], "AnyExp.AnyExpTrainer.init_model": [], "AnyExp.AnyExpTrainer.init_metrics": ["AnyExp.AnyExpTrainer.getMeterClass", "AnyExp.AnyExpTrainer.add_metric"], "AnyExp.AnyExpTrainer.getMeterClass": ["ModuleRegister.getClassFromModule"], "AnyExp.AnyExpTrainer.add_metric": [], "ModuleRegister.getClassFromModule": ["inspect.getmembers", "inspect.getsource", "<builtin>.getattr"], "AnyExp.AnyExpTrainer.extendMetricsOutput": [], "AnyExp.AnyExpTrainer.init_plots": [], "AnyExp.AnyExpTrainer.add_plot": [], "AnyExp.AnyExpTrainer.init_logs": [], "AnyExp.AnyExpTrainer.list_of_epochs": ["<builtin>.min", "<builtin>.range"], "AnyExp.AnyExpTrainer.list_of_epoch_iters": ["<builtin>.range"], "AnyExp.AnyExpTrainer.fun_per_epoch_b4RunNet": [], "AnyExp.AnyExpTrainer.fun_per_epoch_aftRunNet": [], "AnyExp.AnyExpTrainer.checkpoint": ["<builtin>.float", "AnyExp.AnyExpTrainer.gen_checkpoint_path"], "AnyExp.AnyExpTrainer.gen_checkpoint_path": [], "AnyExp.AnyExpTrainer.fun_per_iter_b4RunNet": [], "AnyExp.AnyExpTrainer.fun_per_iter_aftRunNetB4Test": [], "AnyExp.AnyExpTrainer.fun_per_iter_aftRunNetAftTest": [], "AnyExp.AnyExpTrainer.fun_conclude_operator": [], "AnyExp.AnyExpTrainer.createMetricsPlotsModelsOutputs": ["AnyExp.AnyExpTrainer.extendMetricsOutput"], "AnyExp.AnyExpTrainer.assembleAllOutputs": [], "AnyExp.AnyExpTrainer.gen_input_builder_fun": [], "AnyExp.AnyExpTrainer.gen_forward_pass_builder_fun": [], "AnyExp.AnyExpTrainer.gen_param_update_builder_fun": [], "AnyExp.AnyExpTrainer.gen_optimizer_fun": [], "AnyExp.AnyExpTrainer.gen_rendezvous_ctx": [], "AnyExp.AnyExpTrainer.run_training_net": [], "AnyExp.AnyExpTrainer.run_testing_net": ["caffe2.python.workspace.RunNet", "caffe2.python.timeout_guard.CompleteInTimeOrDie"], "AnyExp.AnyExpTrainer.planning_output": ["AnyExp.AnyExpTrainer.init_logs", "AnyExp.AnyExpTrainer.init_plots", "AnyExp.AnyExpTrainer.init_metrics"], "AnyExp.AnyExpTrainer.prep_data_parallel_models": ["AnyExp.AnyExpTrainer.prep_a_data_parallel_model"], "AnyExp.AnyExpTrainer.prep_a_data_parallel_model": ["AnyExp.AnyExpTrainer.gen_param_update_builder_fun", "AnyExp.AnyExpTrainer.gen_forward_pass_builder_fun", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CreateNet", "caffe2.python.data_parallel_model.Parallelize", "AnyExp.AnyExpTrainer.gen_optimizer_fun", "AnyExp.AnyExpTrainer.gen_input_builder_fun", "AnyExp.AnyExpTrainer.gen_rendezvous_ctx"], "AnyExp.AnyExpTrainer.loadCheckpoint": ["os.path.exists", "caffe2.python.data_parallel_model.FinalizeAfterCheckpoint"], "caffe2.python.data_parallel_model.FinalizeAfterCheckpoint": [], "AnyExp.AnyExpTrainer.buildModelAndTrain": ["<builtin>.range", "time.time", "<builtin>.type", "inspect.getsource", "AnyExp.AnyExpTrainer.init_model", "AnyExp.AnyExpTrainer.run_testing_net", "AnyExp.AnyExpTrainer.checkpoint", "AnyExp.AnyExpTrainer.assembleAllOutputs", "<builtin>.float", "AnyExp.AnyExpTrainer.prep_data_parallel_models", "<builtin>.dir", "AnyExp.AnyExpTrainer.createMetricsPlotsModelsOutputs", "AnyExp.AnyExpTrainer.loadCheckpoint", "AnyExp.AnyExpTrainer.fun_per_epoch_b4RunNet", "AnyExp.AnyExpTrainer.fun_conclude_operator", "AnyExp.AnyExpTrainer.fun_per_iter_aftRunNetAftTest", "<builtin>.str", "AnyExp.AnyExpTrainer.list_of_epoch_iters", "AnyExp.AnyExpTrainer.get_model_input_fun", "AnyExp.AnyExpTrainer.run_training_net", "AnyExp.AnyExpTrainer.fun_per_epoch_aftRunNet", "AnyExp.AnyExpTrainer.list_of_epochs", "AnyExp.AnyExpTrainer.fun_per_iter_b4RunNet", "AnyExp.AnyExpTrainer.fun_per_iter_aftRunNetB4Test", "AnyExp.AnyExpTrainer.planning_output"], "inspect.getsource": [], "checkpoint.initialize_master_xpu_model_params": ["pickle.load", "caffe2.python.workspace.Blobs", "<builtin>.str", "caffe2.python.core.DeviceOption", "checkpoint.scoped_name", "collections.OrderedDict", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.NameScope", "caffe2.python.core.DeviceScope", "<builtin>.open", "<builtin>.float", "checkpoint.unscope_name"], "checkpoint.broadcast_parameters": ["<builtin>.enumerate", "<builtin>.int", "<builtin>.len", "<builtin>.str", "caffe2.python.core.DeviceOption", "<builtin>.range", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceScope"], "checkpoint.unscope_name": [], "checkpoint.scoped_name": ["caffe2.python.scope.CurrentNameScope"], "checkpoint.save_model_params": ["checkpoint.save_model_params_blob", "<builtin>.str"], "checkpoint.save_model_params_blob": ["<builtin>.str", "caffe2.python.workspace.FetchBlob", "<builtin>.dict", "pickle.dump", "<builtin>.open", "checkpoint.unscope_name"], "compute_loss": [], "compute_loss.ComputeLoss.__init__": [], "compute_loss.ComputeLoss.Reset": [], "compute_loss.ComputeLoss.Add": ["caffe2.python.workspace.FetchBlob", "<builtin>.range"], "compute_loss.ComputeLoss.Compute": ["compute_loss.ComputeLoss.Reset"], "compute_topk_accuracy": [], "compute_topk_accuracy.ComputeTopKAccuracy.__init__": [], "compute_topk_accuracy.ComputeTopKAccuracy.Reset": [], "compute_topk_accuracy.ComputeTopKAccuracy.Add": ["numpy.squeeze", "<builtin>.range", "caffe2.python.workspace.FetchBlob", "numpy.argsort", "numpy.sum", "numpy.repeat", "<builtin>.len"], "compute_topk_accuracy.ComputeTopKAccuracy.Compute": ["compute_topk_accuracy.ComputeTopKAccuracy.Reset"], "meter": [], "meter.Meter": ["abc.abstractmethod"], "meter.Meter.__init__": [], "meter.Meter.Reset": [], "meter.Meter.Add": [], "meter.Meter.Compute": [], "ModuleRegister": ["logging.basicConfig", "logging.getLogger"], "inspect.getmembers": [], "module_map": [], "output_generator": [], "output_generator.fun_conclude_operator": ["caffe2.python.timeout_guard.EuthanizeIfNecessary"], "caffe2.python.timeout_guard.EuthanizeIfNecessary": [], "output_generator.assembleAllOutputs": [], "cuda_profile_ops_test": ["caffe2.python.dyndep.InitOpsLibrary"], "cuda_profile_ops_test.CudaProfileOpsTest": ["caffe2.python.workspace.NumCudaDevices", "unittest.skipIf"], "cuda_profile_ops_test.CudaProfileOpsTest.test_run": ["caffe2.python.core.DeviceScope", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet", "caffe2.python.core.Net", "caffe2.python.core.DeviceOption"], "tensorboard": ["click.Path", "click.option", "click.group", "tensorboard.cli"], "tensorboard._show_graph": ["numpy.random.rand", "<builtin>.str", "<builtin>.repr"], "tensorboard.visualize_cnn": ["caffe2.contrib.tensorboard.tensorboard_exporter.cnn_to_graph_def", "tensorboard._show_graph"], "caffe2.contrib.tensorboard.tensorboard_exporter.cnn_to_graph_def": [], "tensorboard.visualize_net": ["tensorboard._show_graph", "caffe2.contrib.tensorboard.tensorboard_exporter.nets_to_graph_def"], "caffe2.contrib.tensorboard.tensorboard_exporter.nets_to_graph_def": [], "tensorboard.visualize_ops": ["tensorboard._show_graph", "caffe2.contrib.tensorboard.tensorboard_exporter.ops_to_graph_def"], "caffe2.contrib.tensorboard.tensorboard_exporter.ops_to_graph_def": [], "click.group": [], "tensorboard.cli": [], "tensorboard.write_events": ["tensorflow.train.SummaryWriter", "<builtin>.len", "tensorboard.summary.writer.event_file_writer.EventFileWriter", "tensorflow.summary.FileWriter"], "tensorflow.train.SummaryWriter": [], "tensorboard.summary.writer.event_file_writer.EventFileWriter": [], "tensorflow.summary.FileWriter": [], "tensorboard.graph_def_to_event": ["tensorflow.core.util.event_pb2.Event", "tensorboard.compat.proto.event_pb2.Event"], "tensorflow.core.util.event_pb2.Event": [], "tensorboard.compat.proto.event_pb2.Event": [], "click.Path": [], "click.option": [], "tensorboard.tensorboard_graphs": ["<builtin>.len", "<builtin>.enumerate", "tensorboard.write_events", "caffe2.contrib.tensorboard.tensorboard_exporter.nets_to_graph_def", "tensorboard.tensorboard_graphs.parse_net_def", "logging.getLogger", "tensorboard.graph_def_to_event"], "tensorboard.tensorboard_graphs.parse_net_def": ["caffe2.python.core.Net", "caffe2.proto.caffe2_pb2.NetDef", "<builtin>.open"], "tensorboard.tensorboard_events": ["collections.namedtuple", "tensorboard.tensorboard_events.get_named_summaries", "<builtin>.len", "numpy.random.seed", "tensorboard.write_events", "logging.getLogger", "tensorboard.tensorboard_events.named_summaries_to_events"], "tensorboard.tensorboard_events.parse_summary": ["<builtin>.open", "<builtin>.float"], "tensorboard.tensorboard_events.get_named_summaries": ["tensorboard.tensorboard_events.parse_summary", "os.path.join", "os.walk"], "os.walk": [], "tensorboard.tensorboard_events.inferred_histo": ["<builtin>.len", "numpy.iinfo", "numpy.random.seed", "tensorflow.core.framework.summary_pb2.HistogramProto", "numpy.random.randn", "numpy.histogram", "numpy.clip", "<builtin>.hash", "tensorboard.compat.proto.summary_pb2.HistogramProto"], "numpy.histogram": [], "tensorboard.compat.proto.summary_pb2.HistogramProto": [], "tensorflow.core.framework.summary_pb2.HistogramProto": [], "tensorboard.tensorboard_events.named_summaries_to_events": ["<builtin>.list", "<builtin>.enumerate", "<builtin>.zip", "tensorboard.tensorboard_events.named_summaries_to_events.event"], "tensorboard.tensorboard_events.named_summaries_to_events.event": ["tensorboard.tensorboard_events.inferred_histo", "tensorflow.core.util.event_pb2.Event", "tensorboard.compat.proto.event_pb2.Event", "<builtin>.int", "tensorflow.core.framework.summary_pb2.Summary", "<builtin>.zip", "tensorflow.core.framework.summary_pb2.Summary.Value", "tensorboard.compat.proto.summary_pb2.Summary", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "tensorflow.core.framework.summary_pb2.Summary": [], "tensorboard.compat.proto.summary_pb2.Summary": [], "tensorflow.core.framework.summary_pb2.Summary.Value": [], "tensorboard.compat.proto.summary_pb2.Summary.Value": [], "tensorboard_exporter": [], "tensorboard_exporter._make_unique_name": [], "tensorboard_exporter._convert_to_ssa": ["tensorboard_exporter._convert_to_ssa.ssa_name", "<builtin>.set", "<builtin>.list", "caffe2.python.core.IR", "<builtin>.zip"], "tensorboard_exporter._convert_to_ssa.ssa_name": ["tensorboard_exporter._make_unique_name"], "tensorboard_exporter._get_blob_names": ["<builtin>.set"], "tensorboard_exporter._remap_keys": ["tensorboard_exporter._rename_all.g"], "tensorboard_exporter._rename_all.g": ["tensorboard_exporter._make_unique_name", "tensorboard_exporter._add_gradient_scope.f", "tensorboard_exporter._replace_colons.f"], "tensorboard_exporter._rename_all": ["tensorboard_exporter._rename_all.g", "tensorboard_exporter._remap_keys", "<builtin>.list", "<builtin>.set"], "tensorboard_exporter._add_gradient_scope.f": [], "tensorboard_exporter._replace_colons.f": [], "tensorboard_exporter._add_gradient_scope": ["tensorboard_exporter._rename_all"], "tensorboard_exporter._replace_colons": ["tensorboard_exporter._rename_all"], "tensorboard_exporter._fill_missing_operator_names": ["os.path.dirname", "<builtin>.set", "os.path.join", "tensorboard_exporter._make_unique_name", "os.path.commonprefix"], "os.path.commonprefix": [], "tensorboard_exporter._tf_device": ["<builtin>.Exception"], "tensorboard_exporter._add_tf_shape": ["tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto", "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim"], "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto": [], "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto": [], "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim": [], "tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto.Dim": [], "tensorboard_exporter._set_tf_attr": ["<builtin>.str", "tensorboard_exporter._add_tf_shape", "<builtin>.isinstance"], "tensorboard_exporter._operator_to_node": ["tensorboard_exporter._add_tf_shape", "tensorboard.compat.proto.node_def_pb2.NodeDef", "tensorboard_exporter._tf_device", "tensorflow.NodeDef", "tensorboard_exporter._set_tf_attr", "tensorflow.core.framework.graph_pb2.NodeDef"], "tensorflow.NodeDef": [], "tensorboard.compat.proto.node_def_pb2.NodeDef": [], "tensorflow.core.framework.graph_pb2.NodeDef": [], "tensorboard_exporter._blob_to_node": ["tensorboard_exporter._add_tf_shape", "tensorboard.compat.proto.node_def_pb2.NodeDef", "<builtin>.all", "tensorboard_exporter._tf_device", "tensorflow.NodeDef", "tensorflow.core.framework.graph_pb2.NodeDef"], "tensorboard_exporter._operators_to_graph_def": ["tensorboard_exporter._replace_colons", "tensorflow.core.framework.graph_pb2.GraphDef", "tensorflow.GraphDef", "tensorboard_exporter._fill_missing_operator_names", "tensorboard.compat.proto.graph_pb2.GraphDef", "<builtin>.set", "<builtin>.enumerate", "tensorboard_exporter._get_blob_names", "tensorboard_exporter._convert_to_ssa", "tensorboard_exporter._add_gradient_scope"], "tensorflow.core.framework.graph_pb2.GraphDef": [], "tensorflow.GraphDef": [], "tensorboard.compat.proto.graph_pb2.GraphDef": [], "tensorboard_exporter._propagate_device_option": [], "tensorboard_exporter._try_get_shapes": ["caffe2.python.workspace.InferShapesAndTypes", "logging.warning"], "tensorboard_exporter.nets_to_graph_def": ["tensorboard_exporter._try_get_shapes", "tensorboard_exporter._operators_to_graph_def", "tensorboard_exporter._propagate_device_option", "copy.deepcopy"], "tensorboard_exporter.cnn_to_graph_def": ["tensorboard_exporter.nets_to_graph_def"], "tensorboard_exporter.ops_to_graph_def": ["tensorboard_exporter._operators_to_graph_def", "copy.deepcopy"], "tensorboard_exporter_test": ["unittest.main"], "tensorboard_exporter_test.TensorboardExporterTest.test_that_operators_gets_non_colliding_names": ["caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.contrib.tensorboard.tensorboard_exporter._fill_missing_operator_names", "unittest.TestCase.assertEqual"], "caffe2.contrib.tensorboard.tensorboard_exporter._fill_missing_operator_names": [], "tensorboard_exporter_test.TensorboardExporterTest.test_that_replacing_colons_gives_non_colliding_names": ["caffe2.contrib.tensorboard.tensorboard_exporter._replace_colons", "caffe2.contrib.tensorboard.tensorboard_exporter._get_blob_names", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.proto.caffe2_pb2.OperatorDef"], "caffe2.contrib.tensorboard.tensorboard_exporter._get_blob_names": [], "caffe2.contrib.tensorboard.tensorboard_exporter._replace_colons": [], "tensorboard_exporter_test.TensorboardExporterTest.test_that_adding_gradient_scope_does_no_fancy_renaming": ["caffe2.contrib.tensorboard.tensorboard_exporter._get_blob_names", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.contrib.tensorboard.tensorboard_exporter._add_gradient_scope"], "caffe2.contrib.tensorboard.tensorboard_exporter._add_gradient_scope": [], "tensorboard_exporter_test.TensorboardExporterTest.test_that_auto_ssa_gives_non_colliding_names": ["caffe2.contrib.tensorboard.tensorboard_exporter._get_blob_names", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.contrib.tensorboard.tensorboard_exporter._convert_to_ssa"], "caffe2.contrib.tensorboard.tensorboard_exporter._convert_to_ssa": [], "tensorboard_exporter_test.TensorboardExporterTest.test_simple_cnnmodel": ["caffe2.python.core.NameScope", "unittest.TestCase.assertEqual", "<builtin>.sorted", "<builtin>.str", "caffe2.contrib.tensorboard.tensorboard_exporter.cnn_to_graph_def", "unittest.TestCase.assertMultiLineEqual", "caffe2.python.cnn.CNNModelHelper"], "unittest.TestCase.assertMultiLineEqual": [], "tensorboard_test": ["unittest.main"], "tensorboard_test.load_events": ["<builtin>.list", "tensorflow.train.summary_iterator", "tensorboard.backend.event_processing.event_file_loader.EventFileLoader"], "tensorboard.backend.event_processing.event_file_loader.EventFileLoader": [], "tensorflow.train.summary_iterator": [], "tensorboard_test.TensorboardTest.test_events": ["numpy.random.seed", "tempfile.mkdtemp", "os.path.join", "<builtin>.str", "<builtin>.list", "<builtin>.enumerate", "os.walk", "<builtin>.len", "tensorboard_test.load_events", "<builtin>.open", "numpy.random.randn", "unittest.TestCase.assertEqual"], "tensorboard_test.TensorboardTest.test_tensorboard_graphs": ["caffe2.python.model_helper.ModelHelper", "tempfile.mkdtemp", "os.path.join", "<builtin>.str", "caffe2.python.brew.relu", "<builtin>.zip", "unittest.TestCase.assertMultiLineEqual", "caffe2.python.brew.max_pool", "<builtin>.enumerate", "caffe2.python.brew.softmax", "caffe2.python.brew.image_input", "caffe2.contrib.tensorboard.tensorboard_exporter.nets_to_graph_def", "tensorboard.compat.proto.graph_pb2.GraphDef", "tensorboard_test.load_events", "<builtin>.open", "unittest.TestCase.assertEqual", "tensorflow.GraphDef", "<builtin>.list", "caffe2.python.brew.fc", "os.walk", "<builtin>.len", "caffe2.python.core.NameScope", "caffe2.python.brew.conv"], "ctc_ops_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "ctc_ops_test.softmax": ["numpy.sum", "numpy.amax", "numpy.exp"], "ctc_ops_test.CTCOpsTest.verify_cost": ["caffe2.python.test_util.TestCase.ws.create_blob", "caffe2.python.test_util.TestCase.ws.run", "<builtin>.print", "numpy.asarray", "numpy.array_equal", "caffe2.python.test_util.TestCase.assertEqual", "ctc_ops_test.softmax", "caffe2.python.test_util.TestCase.assertAlmostEqual", "caffe2.python.core.Net", "numpy.exp"], "caffe2.python.test_util.TestCase.ws.create_blob": [], "caffe2.python.test_util.TestCase.ws.run": [], "ctc_ops_test.CTCOpsTest.test_ctc_cost_cpu": ["caffe2.proto.caffe2_pb2.DeviceOption", "ctc_ops_test.CTCOpsTest.verify_cost"], "ctc_ops_test.CTCOpsTest.test_ctc_cost_gpu": ["caffe2.proto.caffe2_pb2.DeviceOption", "ctc_ops_test.CTCOpsTest.verify_cost"], "ctc_ops_test.CTCOpsTest.test_ctc_forward_only_cpu": ["caffe2.proto.caffe2_pb2.DeviceOption", "ctc_ops_test.CTCOpsTest.verify_cost"], "ctc_ops_test.CTCOpsTest.test_ctc_forward_only_gpu": ["caffe2.proto.caffe2_pb2.DeviceOption", "ctc_ops_test.CTCOpsTest.verify_cost"], "op_gen": ["argparse.ArgumentParser", "op_gen.gen_enum", "op_gen.gen_classes", "op_gen.parse_lines", "subprocess.call", "<builtin>.open", "op_gen.gen_names"], "op_gen.parse_lines": ["<builtin>.len"], "op_gen.gen_class": ["textwrap.dedent", "<builtin>.len"], "op_gen.gen_classes": ["op_gen.gen_class"], "op_gen.gen_enum": [], "op_gen.gen_names": ["textwrap.dedent"], "subprocess.call": [], "conf": ["os.path.abspath", "os.path.join", "os.path.dirname", "textwrap.dedent", "warnings.warn", "<builtin>.str", "conf.replace", "pytorch_sphinx_theme.get_html_theme_path", "os.environ.get"], "conf.setup": ["<builtin>.getattr"], "bench_ops": ["bench_ops.test_batch_norm", "torch.testing.assert_allclose", "torch.rand", "<builtin>.print", "torch.jit.trace", "<builtin>.range", "torch._C._debug_set_fusion_group_inlining", "torch.set_num_threads", "timeit.timeit", "<builtin>.globals", "torch._C._jit_override_can_fuse_on_cpu"], "torch._C._debug_set_fusion_group_inlining": [], "bench_ops.hardswish": ["torch.clamp"], "bench_ops.<lambda1>": [], "torch.testing.assert_allclose": [], "bench_ops.test_batch_norm": ["<builtin>.locals", "torch.nn.functional.batch_norm", "torch.testing.assert_allclose", "torch.rand", "<builtin>.print", "torch.jit.trace", "<builtin>.range", "timeit.timeit"], "bench_ops.test_batch_norm.<lambda1>": ["torch.nn.functional.batch_norm"], "autocast_mode": [], "autocast_mode.autocast.__init__": ["warnings.warn", "common.amp_definitely_not_available"], "autocast_mode.autocast.__enter__": ["torch.autocast_increment_nesting", "torch.is_autocast_cpu_enabled", "torch.set_autocast_cpu_enabled", "torch.get_autocast_cpu_dtype", "torch.set_autocast_cpu_dtype", "torch.set_autocast_enabled", "torch.is_autocast_enabled"], "torch.is_autocast_cpu_enabled": [], "torch.get_autocast_cpu_dtype": [], "torch.set_autocast_cpu_enabled": [], "torch.set_autocast_cpu_dtype": [], "torch.autocast_increment_nesting": [], "autocast_mode.autocast.__exit__": ["torch.set_autocast_cpu_dtype", "torch.set_autocast_cpu_enabled", "torch.clear_autocast_cache", "torch.autocast_decrement_nesting", "torch.set_autocast_enabled"], "torch.autocast_decrement_nesting": [], "torch.clear_autocast_cache": [], "autocast_mode.autocast.__call__": ["functools.wraps"], "autocast_mode.autocast.__call__.decorate_autocast": [], "configure": ["configure.main", "confu.standard_parser"], "confu.standard_parser": [], "configure.main": ["confu.Build.from_options"], "confu.Build.from_options": [], "generate-wrapper": ["os.path.join", "os.path.isdir", "<builtin>.open", "<builtin>.print", "os.path.dirname", "os.makedirs"], "test_deploy_from_python": [], "test_deploy_from_python.TestDeployFromPython.test_deploy_from_python": ["test_deploy_python_ext.run", "libfb.py.testutil.BaseFacebookTestCase.assertTrue"], "test_deploy_python_ext.run": [], "libfb.py.testutil.BaseFacebookTestCase.assertTrue": [], "test_deploy_python": [], "test_deploy_python.python_path": ["<builtin>.RuntimeError", "pathlib.Path", "<builtin>.str", "subprocess.check_output"], "test_deploy_python.setup": ["sys.path.append", "test_deploy_python.python_path", "sys.path.extend"], "sys.path.extend": [], "sys.path.append": [], "test_deploy_python.numpy_test": ["<builtin>.int", "<builtin>.range", "numpy.array"], "common.amp_definitely_not_available": ["importlib.util.find_spec", "torch.cuda.is_available"], "torch.is_autocast_enabled": [], "torch.set_autocast_enabled": [], "autocast_mode._cast": ["autocast_mode._cast", "<builtin>.type", "<builtin>.map", "<builtin>.isinstance"], "autocast_mode._cast.<lambda1>": ["autocast_mode._cast"], "autocast_mode.custom_fwd": ["<builtin>.len", "functools.wraps", "functools.partial"], "autocast_mode.custom_fwd.decorate_fwd": ["autocast_mode._cast", "autocast_mode.autocast.__init__", "torch.is_autocast_enabled"], "autocast_mode.custom_bwd": ["functools.wraps"], "autocast_mode.custom_bwd.decorate_bwd": ["autocast_mode.autocast.__init__"], "importlib.util.find_spec": [], "grad_scaler": [], "grad_scaler._MultiDeviceReplicator.__init__": [], "grad_scaler._MultiDeviceReplicator.get": [], "grad_scaler._refresh_per_optimizer_state": [], "grad_scaler.GradScaler.__init__": ["warnings.warn", "collections.defaultdict", "common.amp_definitely_not_available"], "grad_scaler.GradScaler._check_scale_growth_tracker": [], "grad_scaler.GradScaler._lazy_init_scale_growth_tracker": ["torch.full"], "grad_scaler.GradScaler.scale": ["grad_scaler.GradScaler.scale.apply_scale", "grad_scaler.GradScaler._lazy_init_scale_growth_tracker", "<builtin>.isinstance"], "grad_scaler.GradScaler.scale.apply_scale": ["<builtin>.isinstance", "grad_scaler._MultiDeviceReplicator.__init__", "<builtin>.type", "<builtin>.len", "<builtin>.map", "<builtin>.ValueError", "grad_scaler.GradScaler._lazy_init_scale_growth_tracker"], "grad_scaler.GradScaler._unscale_grads_": ["grad_scaler._MultiDeviceReplicator.__init__", "<builtin>.ValueError", "torch.no_grad", "grad_scaler._MultiDeviceReplicator.get", "torch._amp_foreach_non_finite_check_and_unscale_", "collections.defaultdict"], "grad_scaler.GradScaler._unscale_grads_.<lambda1>": ["collections.defaultdict"], "torch._amp_foreach_non_finite_check_and_unscale_": [], "grad_scaler.GradScaler.unscale_": ["<builtin>.RuntimeError", "grad_scaler.GradScaler._check_scale_growth_tracker", "<builtin>.id", "grad_scaler.GradScaler._unscale_grads_", "torch.full"], "grad_scaler.GradScaler._maybe_opt_step": ["<builtin>.sum"], "grad_scaler.GradScaler.step": ["<builtin>.RuntimeError", "grad_scaler.GradScaler._check_scale_growth_tracker", "grad_scaler.GradScaler.unscale_", "<builtin>.dict", "<builtin>.id", "<builtin>.hasattr", "<builtin>.len", "grad_scaler.GradScaler._maybe_opt_step"], "grad_scaler.GradScaler.update": ["grad_scaler.GradScaler._check_scale_growth_tracker", "<builtin>.isinstance", "<builtin>.len", "torch._amp_update_scale_", "collections.defaultdict", "<builtin>.range"], "torch._amp_update_scale_": [], "grad_scaler.GradScaler._get_scale_async": [], "grad_scaler.GradScaler.get_scale": ["grad_scaler.GradScaler._get_scale_async"], "grad_scaler.GradScaler.get_growth_factor": [], "grad_scaler.GradScaler.set_growth_factor": [], "grad_scaler.GradScaler.get_backoff_factor": [], "grad_scaler.GradScaler.set_backoff_factor": [], "grad_scaler.GradScaler.get_growth_interval": [], "grad_scaler.GradScaler.set_growth_interval": [], "grad_scaler.GradScaler._get_growth_tracker": [], "grad_scaler.GradScaler.is_enabled": [], "grad_scaler.GradScaler.state_dict": ["grad_scaler.GradScaler._get_growth_tracker", "grad_scaler.GradScaler.get_scale"], "grad_scaler.GradScaler.load_state_dict": ["<builtin>.RuntimeError", "<builtin>.len"], "grad_scaler.GradScaler.__getstate__": ["grad_scaler.GradScaler._get_growth_tracker", "<builtin>.len", "grad_scaler.GradScaler.get_scale"], "grad_scaler.GradScaler.__setstate__": [], "grad_scaler.GradScaler._check_inf_per_device": ["<builtin>.id", "grad_scaler.GradScaler._check_scale_growth_tracker", "grad_scaler.GradScaler._unscale_grads_", "torch.full"], "grad_scaler.GradScaler._found_inf_per_device": ["<builtin>.id"], "stringify_file": ["datetime.datetime.now", "<builtin>.open", "pathlib.Path", "argparse.ArgumentParser"], "callable": ["dill.extend", "typing.TypeVar"], "dill.extend": [], "callable.default_fn": [], "callable.MapIterDataPipe.__init__": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.hasattr", "warnings.warn"], "callable.MapIterDataPipe._apply": ["callable.MapIterDataPipe._apply", "<builtin>.type", "<builtin>.IndexError", "callable.default_fn", "<builtin>.isinstance"], "<builtin>.IndexError": [], "callable.MapIterDataPipe.__iter__": ["callable.MapIterDataPipe._apply"], "callable.MapIterDataPipe.__len__": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance", "<builtin>.len"], "callable.MapIterDataPipe.__getstate__": ["dill.dumps"], "dill.dumps": [], "callable.MapIterDataPipe.__setstate__": ["dill.loads"], "dill.loads": [], "callable.CollateIterDataPipe.__init__": ["<builtin>.super"], "callable.TransformsIterDataPipe.__init__": ["<builtin>.TypeError", "<builtin>.super", "<builtin>.isinstance"], "combinatorics": ["typing.TypeVar"], "combinatorics.SamplerIterDataPipe.__init__": ["<builtin>.isinstance", "torch.utils.data.SequentialSampler", "<builtin>.super"], "torch.utils.data.SequentialSampler": [], "combinatorics.SamplerIterDataPipe.__iter__": ["<builtin>.iter"], "combinatorics.SamplerIterDataPipe.__len__": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.len", "<builtin>.TypeError"], "combinatorics.ShuffleIterDataPipe.__init__": ["<builtin>.super"], "combinatorics.ShuffleIterDataPipe.buffer_replace": ["random.randint"], "combinatorics.ShuffleIterDataPipe.__iter__": ["random.shuffle", "<builtin>.len", "combinatorics.ShuffleIterDataPipe.buffer_replace"], "combinatorics.ShuffleIterDataPipe.__len__": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.len", "<builtin>.TypeError"], "combining": ["typing.TypeVar"], "combining.ConcatIterDataPipe.__init__": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.len", "<builtin>.all"], "combining.ConcatIterDataPipe.__iter__": [], "combining.ConcatIterDataPipe.__len__": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance", "<builtin>.sum", "<builtin>.len", "<builtin>.all"], "combining.IterateBuffer.__init__": [], "combining.IterateBuffer.__iter__": [], "combining.ForkIterDataPipe.__new__": ["combining.IterateBuffer.__init__", "<builtin>.range", "<builtin>.list"], "combining.DemultiplexerIterDataPipe.__new__": ["torch.utils.data.IterDataPipe.filter", "combining.IterateBuffer.__init__", "functools.partial", "<builtin>.range", "<builtin>.list"], "combining.DemultiplexerIterDataPipe.__new__.filter_fn": [], "torch.utils.data.IterDataPipe.filter": [], "combining.MultiplexerIterDataPipe.__init__": [], "combining.MultiplexerIterDataPipe.__iter__": ["<builtin>.iter", "<builtin>.len", "<builtin>.range"], "combining.ZipIterDataPipe.__init__": ["<builtin>.super", "<builtin>.TypeError", "<builtin>.all", "<builtin>.isinstance"], "combining.ZipIterDataPipe.__iter__": ["<builtin>.zip"], "combining.ZipIterDataPipe.__len__": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance", "<builtin>.len", "<builtin>.all", "<builtin>.min"], "grouping": ["typing.TypeVar"], "grouping.ShardingFilterIterDataPipe.__init__": [], "grouping.ShardingFilterIterDataPipe.is_shardable": [], "grouping.ShardingFilterIterDataPipe.apply_sharding": [], "grouping.ShardingFilterIterDataPipe.__iter__": ["<builtin>.enumerate"], "grouping.BatchIterDataPipe.__init__": ["<builtin>.super"], "grouping.BatchIterDataPipe.__iter__": ["<builtin>.len", "torch.utils.data.DataChunk"], "torch.utils.data.DataChunk": [], "grouping.BatchIterDataPipe.__len__": ["<builtin>.len", "<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance"], "grouping.UnBatchIterDataPipe.__init__": [], "grouping.UnBatchIterDataPipe.__iter__": ["grouping.UnBatchIterDataPipe._dive"], "grouping.UnBatchIterDataPipe._dive": ["<builtin>.IndexError", "grouping.UnBatchIterDataPipe._dive", "<builtin>.ValueError", "<builtin>.isinstance"], "grouping.BucketBatchIterDataPipe.__init__": ["warnings.warn", "grouping.BatchIterDataPipe.__init__", "<builtin>.super"], "grouping.BucketBatchIterDataPipe.__iter__": ["<builtin>.list", "<builtin>.isinstance", "<builtin>.range", "<builtin>.len", "grouping.BatchIterDataPipe.__iter__", "grouping.BatchIterDataPipe.__init__"], "grouping.BucketBatchIterDataPipe.__len__": ["<builtin>.len", "<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance"], "grouping.default_group_key_fn": ["os.path.splitext"], "os.path.splitext": [], "grouping.default_sort_data_fn": ["functools.cmp_to_key", "<builtin>.sorted"], "grouping.default_sort_data_fn.cmp_fn": ["os.path.splitext"], "grouping.GroupByIterDataPipe.__init__": [], "grouping.GroupByIterDataPipe._remove_biggest_key": ["<builtin>.len", "<builtin>.str", "<builtin>.RuntimeError"], "grouping.GroupByIterDataPipe.__iter__": ["<builtin>.len", "collections.defaultdict", "grouping.GroupByIterDataPipe._remove_biggest_key", "torch.utils.data.DataChunk"], "grouping.GroupByKeyIterDataPipe.__init__": ["<builtin>.super"], "grouping.GroupByKeyIterDataPipe.__iter__": ["grouping.default_group_key_fn", "<builtin>.RuntimeError", "<builtin>.OverflowError", "<builtin>.str", "<builtin>.len", "grouping.default_sort_data_fn"], "<builtin>.OverflowError": [], "grouping.GroupByKeyIterDataPipe.__len__": ["<builtin>.type", "<builtin>.TypeError"], "httpreader": [], "httpreader.HTTPReaderIterDataPipe.__init__": [], "httpreader.HTTPReaderIterDataPipe.__iter__": ["<builtin>.Exception", "urllib.request.urlopen"], "urllib.request.urlopen": [], "listdirfiles": [], "listdirfiles.ListDirFilesIterDataPipe.__init__": ["<builtin>.super"], "listdirfiles.ListDirFilesIterDataPipe.__iter__": ["torch.utils.data.datapipes.utils.common.get_file_pathnames_from_root"], "torch.utils.data.datapipes.utils.common.get_file_pathnames_from_root": [], "listdirfiles.ListDirFilesIterDataPipe.__len__": ["<builtin>.TypeError", "<builtin>.type"], "loadfilesfromdisk": [], "loadfilesfromdisk.LoadFilesFromDiskIterDataPipe.__init__": ["<builtin>.ValueError", "<builtin>.super"], "loadfilesfromdisk.LoadFilesFromDiskIterDataPipe.__iter__": ["torch.utils.data.datapipes.utils.common.get_file_binaries_from_pathnames"], "torch.utils.data.datapipes.utils.common.get_file_binaries_from_pathnames": [], "loadfilesfromdisk.LoadFilesFromDiskIterDataPipe.__len__": ["<builtin>.TypeError", "<builtin>.type"], "readfilesfromtar": [], "readfilesfromtar.ReadFilesFromTarIterDataPipe.__init__": ["<builtin>.super"], "readfilesfromtar.ReadFilesFromTarIterDataPipe.__iter__": ["tarfile.open", "os.path.normpath", "<builtin>.type", "<builtin>.TypeError", "os.path.join", "<builtin>.isinstance", "warnings.warn", "torch.utils.data.datapipes.utils.common.validate_pathname_binary_tuple", "typing.cast"], "torch.utils.data.datapipes.utils.common.validate_pathname_binary_tuple": [], "tarfile.open": [], "os.path.normpath": [], "readfilesfromtar.ReadFilesFromTarIterDataPipe.__len__": ["<builtin>.type", "<builtin>.TypeError"], "readfilesfromzip": [], "readfilesfromzip.ReadFilesFromZipIterDataPipe.__init__": ["<builtin>.super"], "readfilesfromzip.ReadFilesFromZipIterDataPipe.__iter__": ["typing.cast", "zipfile.ZipFile", "warnings.warn", "torch.utils.data.datapipes.utils.common.validate_pathname_binary_tuple", "<builtin>.type", "os.path.join", "os.path.normpath", "<builtin>.TypeError", "<builtin>.isinstance"], "zipfile.ZipFile": [], "readfilesfromzip.ReadFilesFromZipIterDataPipe.__len__": ["<builtin>.type", "<builtin>.TypeError"], "readlinesfromfile": [], "readlinesfromfile.ReadLinesFromFileIterDataPipe.__init__": [], "readlinesfromfile.ReadLinesFromFileIterDataPipe.__iter__": ["<builtin>.open"], "routeddecoder": [], "routeddecoder.RoutedDecoderIterDataPipe.__init__": ["<builtin>.super", "torch.utils.data.datapipes.utils.decoder.Decoder", "torch.utils.data.datapipes.utils.decoder.imagehandler"], "torch.utils.data.datapipes.utils.decoder.imagehandler": [], "torch.utils.data.datapipes.utils.decoder.Decoder": [], "routeddecoder.RoutedDecoderIterDataPipe.add_handler": [], "routeddecoder.RoutedDecoderIterDataPipe.__iter__": [], "routeddecoder.RoutedDecoderIterDataPipe.__len__": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.len", "<builtin>.isinstance"], "selecting": ["typing.TypeVar"], "selecting.FilterIterDataPipe.__init__": ["<builtin>.super"], "selecting.FilterIterDataPipe.__iter__": ["selecting.FilterIterDataPipe._isNonEmpty", "selecting.FilterIterDataPipe._applyFilter"], "selecting.FilterIterDataPipe._applyFilter": ["<builtin>.filter", "selecting.FilterIterDataPipe._returnIfTrue", "<builtin>.IndexError", "selecting.FilterIterDataPipe._applyFilter", "callable.MapIterDataPipe.datapipe.raw_iterator", "<builtin>.isinstance", "<builtin>.list", "<builtin>.type"], "selecting.FilterIterDataPipe._isNonEmpty": ["<builtin>.isinstance", "<builtin>.len"], "selecting.FilterIterDataPipe._returnIfTrue": ["<builtin>.ValueError", "<builtin>.isinstance", "callable.MapIterDataPipe.fn"], "callable.MapIterDataPipe.datapipe.raw_iterator": [], "callable.MapIterDataPipe.fn": [], "selecting.FilterIterDataPipe.__len__": ["<builtin>.type", "<builtin>.TypeError"], "tobytes": [], "tobytes.ToBytesIterDataPipe.__init__": [], "tobytes.ToBytesIterDataPipe.__iter__": [], "callable.MapMapDataPipe.__init__": ["warnings.warn", "<builtin>.super", "<builtin>.hasattr"], "callable.MapMapDataPipe.__len__": ["<builtin>.len"], "callable.MapMapDataPipe.__getitem__": ["callable.default_fn"], "callable.MapMapDataPipe.__getstate__": ["dill.dumps"], "callable.MapMapDataPipe.__setstate__": ["dill.loads"], "combining.ConcatMapDataPipe.__init__": ["<builtin>.ValueError", "<builtin>.all", "<builtin>.TypeError", "<builtin>.len", "<builtin>.isinstance"], "combining.ConcatMapDataPipe.__getitem__": ["<builtin>.IndexError", "<builtin>.len"], "combining.ConcatMapDataPipe.__len__": ["<builtin>.len", "<builtin>.sum"], "common.match_masks": ["<builtin>.isinstance", "fnmatch.fnmatch"], "fnmatch.fnmatch": [], "common.get_file_pathnames_from_root": ["os.path.abspath", "common.match_masks", "os.walk", "os.path.join"], "common.get_file_pathnames_from_root.onerror": ["warnings.warn"], "common.get_file_binaries_from_pathnames": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.open", "<builtin>.type"], "common.validate_pathname_binary_tuple": ["<builtin>.TypeError", "<builtin>.str", "<builtin>.isinstance", "<builtin>.len", "<builtin>.type"], "decoder": [], "decoder.basichandlers": ["torch.load", "pickle.loads", "json.loads", "io.BytesIO", "<builtin>.int"], "decoder.handle_extension": [], "decoder.handle_extension.g": ["<builtin>.len"], "decoder.ImageHandler.__init__": ["<builtin>.list"], "decoder.ImageHandler.__call__": ["io.BytesIO", "<builtin>.ModuleNotFoundError", "numpy.asarray", "torch.tensor", "numpy.array"], "<builtin>.ModuleNotFoundError": [], "decoder.imagehandler": ["decoder.ImageHandler.__init__"], "decoder.videohandler": ["tempfile.TemporaryDirectory", "<builtin>.open", "<builtin>.ModuleNotFoundError"], "tempfile.TemporaryDirectory": [], "decoder.audiohandler": ["tempfile.TemporaryDirectory", "torchaudio.load", "<builtin>.open", "<builtin>.ModuleNotFoundError"], "torchaudio.load": [], "decoder.MatHandler.__init__": ["<builtin>.ModuleNotFoundError"], "decoder.MatHandler.__call__": ["io.BytesIO", "scipy.io.loadmat"], "scipy.io.loadmat": [], "decoder.mathandler": ["decoder.MatHandler.__init__"], "decoder.extension_extract_fn": [], "decoder.Decoder.__init__": ["<builtin>.list"], "decoder.Decoder.add_handler": ["<builtin>.list"], "decoder.Decoder.decode1": ["<builtin>.isinstance"], "decoder.Decoder.decode": ["decoder.Decoder.decode1", "<builtin>.isinstance", "decoder.extension_extract_fn"], "decoder.Decoder.__call__": ["decoder.Decoder.decode"], "collate": ["re.compile"], "re.compile": [], "collate.default_convert": ["collate.default_convert", "torch.as_tensor", "<builtin>.isinstance", "<builtin>.type", "<builtin>.hasattr"], "collate.default_collate": ["<builtin>.next", "<builtin>.zip", "<builtin>.sum", "torch.utils.data.get_worker_info", "<builtin>.all", "<builtin>.TypeError", "torch.as_tensor", "<builtin>.len", "collate.default_collate", "<builtin>.isinstance", "<builtin>.type", "torch.tensor", "<builtin>.hasattr", "<builtin>.iter", "<builtin>.RuntimeError", "torch.stack"], "torch.utils.data.get_worker_info": [], "fetch": [], "fetch._BaseDatasetFetcher.__init__": [], "fetch._BaseDatasetFetcher.fetch": ["<builtin>.NotImplementedError"], "fetch._IterableDatasetFetcher.__init__": ["<builtin>.super", "<builtin>.iter"], "fetch._IterableDatasetFetcher.fetch": ["<builtin>.len", "<builtin>.next"], "fetch._MapDatasetFetcher.__init__": ["<builtin>.super"], "fetch._MapDatasetFetcher.fetch": [], "pin_memory": [], "pin_memory._pin_memory_loop": ["<builtin>.isinstance", "torch.set_num_threads", "pin_memory.pin_memory", "torch.cuda.set_device", "torch._utils.ExceptionWrapper"], "torch.cuda.set_device": [], "pin_memory.pin_memory": ["<builtin>.hasattr", "pin_memory.pin_memory", "<builtin>.isinstance", "<builtin>.type"], "torch._utils.ExceptionWrapper": [], "signal_handling": [], "signal_handling._set_SIGCHLD_handler": ["threading.current_thread", "signal.getsignal", "<builtin>.callable", "<builtin>.isinstance", "signal.signal"], "signal.getsignal": [], "signal_handling._set_SIGCHLD_handler.handler": ["torch._C._error_if_any_worker_fails", "<builtin>.callable"], "torch._C._error_if_any_worker_fails": [], "signal.signal": [], "worker.ManagerWatchdog.__init__": ["ctypes.WinError", "ctypes.WinDLL", "ctypes.get_last_error", "os.getppid"], "os.getppid": [], "ctypes.WinDLL": [], "ctypes.get_last_error": [], "ctypes.WinError": [], "worker.ManagerWatchdog.is_alive": ["os.getppid"], "worker.WorkerInfo.__init__": ["<builtin>.setattr", "<builtin>.tuple"], "worker.WorkerInfo.__setattr__": ["<builtin>.RuntimeError", "<builtin>.super"], "worker.WorkerInfo.__repr__": ["<builtin>.getattr"], "worker.get_worker_info": [], "worker._generate_state": ["<builtin>.range", "<builtin>.len", "worker._generate_state.mix", "worker._generate_state.hash"], "worker._generate_state.hash": [], "worker._generate_state.mix": [], "worker._worker_loop": ["worker._generate_state", "numpy.random.seed", "torch._utils.ExceptionWrapper", "signal_handling._set_worker_signal_handlers", "worker.ManagerWatchdog.__init__", "torch.manual_seed", "<builtin>.isinstance", "torch.utils.data._DatasetKind.create_fetcher", "worker.WorkerInfo.__init__", "worker.ManagerWatchdog.is_alive", "random.seed", "torch.set_num_threads"], "signal_handling._set_worker_signal_handlers": [], "torch.utils.data._DatasetKind.create_fetcher": [], "compare_ddp": ["compare_ddp.main"], "compare_ddp.LatencyData.__init__": [], "compare_ddp.serialize": ["compare_ddp.LatencyData.__init__", "<builtin>.print", "os.mkdir", "pickle.dump", "os.path.exists", "os.path.join", "<builtin>.open"], "compare_ddp.load_detailed_metrics": ["<builtin>.print", "<builtin>.len", "os.path.exists", "collections.OrderedDict", "os.path.join", "glob.glob", "pickle.load", "<builtin>.open"], "glob.glob": [], "compare_ddp.setup": ["torch.distributed.init_process_group"], "torch.distributed.init_process_group": [], "compare_ddp.create_ddp_model": ["python_ddp.PythonDDP.__init__", "torch.nn.parallel.DistributedDataParallel"], "torch.nn.parallel.DistributedDataParallel": [], "python_ddp.PythonDDP.__init__": ["<builtin>.set", "<builtin>.max", "functools.partial", "python_ddp.PythonDDP._build_buckets_for_params", "torch.distributed.get_world_size", "<builtin>.super"], "compare_ddp.run_ddp": ["<builtin>.print", "python_ddp.PythonDDP.all_reduce_grads", "torch.distributed.distributed_c10d._get_default_group", "python_ddp.PythonDDP.__init__", "numpy.mean", "torch.cuda.manual_seed", "torch.rand", "torchvision.models.resnet50", "numpy.array", "torch.cuda.synchronize", "torch.device", "torch.optim.SGD", "torch.manual_seed", "<builtin>.len", "torch.cuda.Event", "compare_ddp.setup", "compare_ddp.create_ddp_model", "<builtin>.range", "numpy.percentile", "torch.nn.Module.parameters", "compare_ddp.serialize", "torch.nn.MSELoss"], "torch.cuda.manual_seed": [], "torch.device": [], "torch.distributed.distributed_c10d._get_default_group": [], "torch.optim.SGD": [], "python_ddp.PythonDDP.all_reduce_grads": ["torch.nn.Module.buckets.param_to_offset.items", "torch.distributed.all_reduce", "torch.nn.Module.buckets.is_full", "torch.nn.Module.buckets.empty", "torch.nn.Module.buckets.buffer.div_"], "compare_ddp.append_delta": [], "compare_ddp.print_summary": ["tabulate.tabulate", "compare_ddp.append_delta", "<builtin>.print", "numpy.percentile", "numpy.array", "numpy.mean"], "tabulate.tabulate": [], "compare_ddp.main": ["<builtin>.str", "<builtin>.print", "compare_ddp.load_detailed_metrics", "torch.multiprocessing.spawn", "compare_ddp.print_summary"], "torch.multiprocessing.spawn": [], "python_ddp": [], "python_ddp.PythonDDP.Bucket.__init__": [], "python_ddp.PythonDDP.Bucket.__str__": ["<builtin>.len"], "python_ddp.PythonDDP.Bucket.is_full": ["<builtin>.len"], "python_ddp.PythonDDP.Bucket.empty": [], "python_ddp.PythonDDP.Bucket.try_hold_param": [], "python_ddp.PythonDDP._build_buckets_for_params": ["<builtin>.print", "<builtin>.set", "<builtin>.len", "python_ddp.PythonDDP.Bucket.try_hold_param", "python_ddp.PythonDDP.Bucket.__init__", "<builtin>.next"], "python_ddp.PythonDDP._on_param_grad_ready": ["torch.distributed.all_reduce"], "python_ddp.PythonDDP.forward": [], "torch.nn.Module.buckets.is_full": [], "torch.nn.Module.buckets.buffer.div_": [], "torch.nn.Module.buckets.param_to_offset.items": [], "torch.nn.Module.buckets.empty": [], "examples": [], "examples.Simple.__init__": ["<builtin>.super", "torch.rand", "torch.nn.Parameter"], "examples.Simple.forward": [], "examples.load_library": ["torch.ops.load_library"], "torch.ops.load_library": [], "examples.conv1x1": ["torch.nn.Conv2d"], "examples.conv3x3": ["torch.nn.Conv2d"], "examples.BasicBlock.__init__": ["<builtin>.super", "examples.conv3x3", "torch.nn.ReLU", "torch.nn.BatchNorm2d"], "examples.BasicBlock.forward": [], "examples.ResNet.__init__": ["torch.nn.Module.modules", "torch.nn.BatchNorm2d", "<builtin>.super", "torch.nn.MaxPool2d", "examples.ResNet._make_layer", "<builtin>.isinstance", "torch.nn.init.constant_", "torch.nn.ReLU", "torch.nn.init.kaiming_normal_", "torch.nn.Conv2d", "torch.nn.Linear", "torch.nn.AdaptiveAvgPool2d"], "examples.ResNet._make_layer": ["examples.conv1x1", "examples.BasicBlock.__init__", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "<builtin>.range"], "examples.ResNet.forward": [], "examples.resnet18": ["examples.ResNet.__init__"], "examples.BatchedModel.forward": [], "examples.BatchedModel.make_prediction": ["examples.BatchedModel.forward"], "examples.BatchedModel.make_batch": ["<builtin>.int", "<builtin>.len", "<builtin>.range"], "examples.MultiReturn.__init__": ["<builtin>.super"], "examples.MultiReturn.forward": ["torch.ones_like"], "torch.ones_like": [], "generate_examples": ["examples.Simple", "examples.resnet18", "generate_examples.save", "torch.rand", "<builtin>.str", "argparse.ArgumentParser", "pathlib.Path", "examples.MultiReturn", "torch.jit.script", "torch.package.PackageExporter", "examples.BatchedModel", "generate_examples.generate_fx_example", "torch.jit.trace"], "generate_examples.generate_fx_example": ["<builtin>.str", "torch.fx.symbolic_trace", "torch.jit.script", "fx.examples.SimpleWithLeaf", "torch.package.PackageExporter"], "fx.examples.SimpleWithLeaf": [], "torch.fx.symbolic_trace": [], "torch.package.PackageExporter": [], "generate_examples.save": ["torch.package.PackageExporter", "<builtin>.str"], "examples.Simple": [], "examples.MultiReturn": [], "examples.BatchedModel": [], "fx.examples": [], "fx.examples.SimpleWithLeaf.__init__": ["<builtin>.super"], "fx.examples.SimpleWithLeaf.forward": ["some_dependency.a_non_torch_leaf"], "some_dependency.a_non_torch_leaf": [], "fx.some_dependency": [], "fx.some_dependency.a_non_torch_leaf": [], "gpu_wrapper": ["gpu_wrapper.GPUWrapper.__init__", "torch.package.PackageImporter", "gpu_wrapper.check_close"], "gpu_wrapper.to_device": ["<builtin>.tuple", "<builtin>.RuntimeError", "gpu_wrapper.to_device", "<builtin>.isinstance"], "gpu_wrapper.GPUWrapper.__init__": ["torch.cuda.device_count", "<builtin>.super", "<builtin>.range", "copy.deepcopy"], "gpu_wrapper.GPUWrapper.__getstate__": [], "gpu_wrapper.GPUWrapper.__setstate__": ["<builtin>.super", "torch.cuda.synchronize"], "gpu_wrapper.GPUWrapper.forward": ["torch.cuda.stream", "<builtin>.len", "torch.cuda.Stream", "gpu_wrapper.to_device"], "torch.cuda.Stream": [], "torch.cuda.stream": [], "gpu_wrapper.check_close": ["<builtin>.print", "<builtin>.isinstance", "torch.abs", "gpu_wrapper.check_close", "<builtin>.zip", "torch.max", "torch.allclose"], "torch.abs": [], "torch.allclose": [], "torch.package.PackageImporter": [], "freeze": ["argparse.ArgumentParser", "freeze.Freezer.compile_path", "pathlib.Path.exists", "freeze.Freezer.__init__", "freeze.Freezer.write_bytecode", "pathlib.Path", "freeze.Freezer.write_main", "<builtin>.sorted"], "freeze.indent_msg": ["functools.wraps"], "freeze.indent_msg.wrapper": ["freeze.Freezer.compile_package", "freeze.Freezer.compile_file"], "freeze.Freezer.compile_package": ["<builtin>.any", "freeze.Freezer.compile_path", "freeze.Freezer.msg"], "freeze.Freezer.compile_file": ["<builtin>.len", "marshal.dumps", "<builtin>.compile", "freeze.Freezer.msg", "freeze.Freezer.get_module_qualname", "<builtin>.open"], "freeze.Freezer.__init__": [], "freeze.Freezer.msg": ["<builtin>.range", "<builtin>.print"], "freeze.Freezer.write_bytecode": ["freeze.Freezer.write_frozen", "<builtin>.next", "<builtin>.range", "<builtin>.open", "itertools.cycle", "os.path.join"], "itertools.cycle": [], "freeze.Freezer.write_frozen": ["<builtin>.len", "<builtin>.bytes", "<builtin>.range"], "freeze.Freezer.write_main": ["<builtin>.open", "os.path.join"], "<builtin>.bytes": [], "freeze.Freezer.compile_path": ["freeze.Freezer.compile_package", "freeze.Freezer.compile_file"], "freeze.Freezer": ["freeze.indent_msg"], "freeze.Freezer.get_module_qualname": ["<builtin>.list"], "<builtin>.compile": [], "marshal.dumps": [], "pathlib.Path.exists": [], "join": [], "join.JoinHook.main_hook": [], "join.JoinHook.post_hook": [], "join.Joinable": ["abc.abstractmethod"], "join.Joinable.__init__": ["<builtin>.super", "join._JoinConfig.construct_disabled_join_config"], "join._JoinConfig.construct_disabled_join_config": ["typing.NamedTuple.__init__"], "join.Joinable.join_hook": [], "join.Joinable.join_device": [], "join.Joinable.join_process_group": [], "join.Join.__init__": ["<builtin>.ValueError", "join.Join._extract_dist_info", "join.Join._set_joinable_configs", "<builtin>.len"], "join.Join._set_joinable_configs": ["typing.NamedTuple.__init__", "<builtin>.len"], "join.Join._extract_dist_info": ["<builtin>.ValueError", "torch.distributed.get_rank"], "join.Join.__enter__": [], "join.Join.__exit__": ["warnings.warn", "join.Join._notify_procs_to_terminate", "join.Join._get_num_nonjoined_procs", "warnings.simplefilter"], "warnings.simplefilter": [], "join.Join._get_num_nonjoined_procs": ["torch.distributed.all_reduce", "torch.zeros"], "join.Join._notify_procs_to_terminate": ["torch.ones", "torch.distributed.all_reduce", "<builtin>.RuntimeError"], "join.Join.notify_join_context": ["torch.ones", "<builtin>.RuntimeError", "<builtin>.type", "<builtin>.hasattr", "torch.zeros", "torch.distributed.all_reduce"], "quantization": ["torch.finfo", "torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "quantization.DQuantType.__str__": [], "quantization._fp32_to_fp16_with_clamp": ["torch.clamp"], "quantization._quantize_tensor": ["<builtin>.type", "quantization._fp32_to_fp16_with_clamp", "<builtin>.isinstance", "<builtin>.RuntimeError"], "quantization._quantize_tensor_list": ["<builtin>.type", "<builtin>.all", "<builtin>.isinstance", "<builtin>.RuntimeError", "quantization._quantize_tensor"], "quantization._dequantize_tensor": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.RuntimeError"], "quantization._dequantize_tensor_list": ["<builtin>.type", "<builtin>.all", "quantization._dequantize_tensor", "<builtin>.isinstance", "<builtin>.RuntimeError"], "quantization.auto_quantize": ["functools.wraps"], "quantization.auto_quantize.wrapper": ["torch.distributed.all_to_all", "<builtin>.RuntimeError", "quantization._dequantize_tensor_list", "quantization._quantize_tensor", "quantization._quantize_tensor_list", "<builtin>.enumerate", "torch.distributed.all_gather"], "torch.distributed.all_to_all": [], "benchmark_ddp_rpc": ["<builtin>.print", "torch.multiprocessing.spawn", "argparse.ArgumentParser", "benchmark_ddp_rpc._run_printable"], "benchmark_ddp_rpc.HybridModel.__init__": ["torch.nn.Sequential", "torch.nn.Linear", "torch.nn.parallel.DistributedDataParallel", "<builtin>.super", "torch.nn.ReLU"], "benchmark_ddp_rpc.HybridModel.forward": ["<builtin>.int", "torch.cat"], "benchmark_ddp_rpc._retrieve_embedding_parameters": ["torch.distributed.rpc.RRef"], "torch.distributed.rpc.RRef": [], "benchmark_ddp_rpc._print_header": ["benchmark_ddp_rpc._print_cont"], "benchmark_ddp_rpc._print_cont": ["<builtin>.print"], "benchmark_ddp_rpc._print_benchmark": ["<builtin>.sorted", "numpy.percentile", "benchmark_ddp_rpc._print_cont"], "benchmark_ddp_rpc._run_printable": ["<builtin>.list", "torch.ByteTensor", "torch.IntTensor", "shlex.split", "torch.load", "subprocess.run", "torch.save", "io.BytesIO", "numpy.asarray"], "shlex.split": [], "torch.ByteTensor": [], "torch.IntTensor": [], "benchmark_ddp_rpc._run_trainer": ["torch.distributed.autograd.backward", "torch.distributed.rpc.rpc_sync", "<builtin>.enumerate", "torch.distributed.autograd.context", "benchmark_ddp_rpc._run_trainer.get_next_batch", "<builtin>.range", "torch.nn.Module.parameters", "torch.distributed.optim.DistributedOptimizer", "<builtin>.len", "benchmark_ddp_rpc.HybridModel.__init__", "torch.nn.CrossEntropyLoss", "time.time", "torch.distributed.rpc.RRef"], "torch.distributed.rpc.rpc_sync": [], "torch.distributed.optim.DistributedOptimizer": [], "benchmark_ddp_rpc._run_trainer.get_next_batch": ["<builtin>.range", "random.randint", "torch.LongTensor"], "torch.distributed.autograd.context": [], "torch.distributed.autograd.backward": [], "benchmark_ddp_rpc.run_worker": ["torch.distributed.rpc.init_rpc", "torch.distributed.rpc.remote", "benchmark_ddp_rpc._print_benchmark", "torch.distributed.init_process_group", "torch.distributed.rpc.TensorPipeRpcBackendOptions", "torch.distributed.rpc.rpc_async", "<builtin>.range", "benchmark_ddp_rpc._print_header", "torch.distributed.rpc.shutdown"], "torch.distributed.rpc.TensorPipeRpcBackendOptions": [], "torch.distributed.rpc.init_rpc": [], "torch.distributed.rpc.remote": [], "torch.distributed.rpc.rpc_async": [], "torch.distributed.rpc.shutdown": [], "benchmark.allgather_object": ["torch.distributed.all_gather_object", "<builtin>.range", "torch.distributed.get_world_size"], "torch.distributed.all_gather_object": [], "benchmark.allgather_run": ["shlex.split", "benchmark.allgather_object", "subprocess.run"], "benchmark.allequal": ["<builtin>.next", "<builtin>.all", "<builtin>.iter"], "benchmark.benchmark_process_group": ["torch.cuda.current_device", "torch.optim.SGD", "torch.cuda.manual_seed", "torch.nn.parallel.DistributedDataParallel", "torch.manual_seed", "torch.cuda.synchronize", "time.time", "torch.nn.CrossEntropyLoss"], "benchmark.run_benchmark": ["torch.distributed.new_group", "itertools.chain", "<builtin>.dict", "benchmark.allgather_object", "<builtin>.set", "torch.distributed.destroy_process_group", "benchmark.benchmark_process_group", "<builtin>.list", "torch.distributed.get_rank", "torch.distributed.barrier"], "torch.distributed.new_group": [], "torch.distributed.destroy_process_group": [], "torch.distributed.barrier": [], "benchmark.sweep": ["benchmark.sweep.print_header", "<builtin>.range", "torch.distributed.get_world_size", "<builtin>.sorted", "benchmark.sweep.append_benchmark", "benchmark.run_benchmark", "benchmark.sweep.print_measurements", "<builtin>.list", "torch.distributed.get_rank"], "benchmark.sweep.append_benchmark": ["<builtin>.len"], "benchmark.sweep.local_print": ["<builtin>.print", "torch.distributed.get_rank"], "benchmark.sweep.print_header": ["benchmark.sweep.local_print"], "benchmark.sweep.print_measurements": ["<builtin>.sorted", "numpy.percentile", "benchmark.sweep.local_print"], "benchmark.sweep.<lambda1>": ["<builtin>.len"], "benchmark.Benchmark.__str__": [], "benchmark.Benchmark.create_model": [], "benchmark.Benchmark.generate_inputs": [], "benchmark.Benchmark.generate_target": [], "benchmark.TorchvisionBenchmark.__init__": ["<builtin>.super"], "benchmark.TorchvisionBenchmark.__str__": [], "benchmark.TorchvisionBenchmark.create_model": [], "benchmark.TorchvisionBenchmark.generate_inputs": ["torch.rand"], "benchmark.TorchvisionBenchmark.generate_target": ["torch.tensor"], "benchmark.main": ["argparse.ArgumentParser", "sys.exit", "benchmark.allequal", "<builtin>.print", "torch.distributed.init_process_group", "benchmark.sweep", "<builtin>.open", "torch.device", "torch.cuda.device_count", "benchmark.allgather_run", "benchmark.TorchvisionBenchmark.__init__", "<builtin>.str", "json.dump", "torch.cuda.set_device", "torch.distributed.get_rank"], "diff": ["diff.main"], "diff.load": ["<builtin>.open", "json.load"], "json.load": [], "diff.main": ["<builtin>.set", "<builtin>.len", "diff.load", "<builtin>.str", "<builtin>.int", "<builtin>.enumerate", "<builtin>.sorted", "numpy.percentile", "<builtin>.zip", "<builtin>.RuntimeError", "<builtin>.print", "argparse.ArgumentParser"], "api.LaunchConfig": ["dataclasses.field"], "api.LaunchConfig.__post_init__": [], "api.elastic_launch.__init__": [], "api.elastic_launch.__call__": ["<builtin>.list", "api.launch_agent"], "api.launch_agent": ["torch.distributed.elastic.agent.server.local_elastic_agent.LocalElasticAgent", "torch.distributed.elastic.multiprocessing.errors.ChildFailedError", "torch.distributed.elastic.metrics.initialize_metrics", "torch.distributed.elastic.rendezvous.registry.get_rendezvous_handler", "api._get_entrypoint_name", "uuid.uuid4", "api._get_addr_and_port", "<builtin>.tuple", "api._construct_event", "torch.distributed.elastic.metrics.MetricsConfig", "torch.distributed.elastic.agent.server.api.WorkerSpec", "torch.distributed.elastic.events.record", "<builtin>.str", "torch.distributed.elastic.rendezvous.RendezvousParameters"], "api._construct_event": ["torch.distributed.elastic.events.Event", "typing.cast"], "api._get_entrypoint_name": ["<builtin>.next", "<builtin>.isinstance"], "api._get_addr_and_port": ["<builtin>.ValueError", "torch.distributed.elastic.rendezvous.utils.parse_rendezvous_endpoint"], "torch.distributed.elastic.rendezvous.utils.parse_rendezvous_endpoint": [], "torch.distributed.elastic.rendezvous.RendezvousParameters": [], "torch.distributed.elastic.rendezvous.registry.get_rendezvous_handler": [], "torch.distributed.elastic.agent.server.api.WorkerSpec": [], "torch.distributed.elastic.metrics.MetricsConfig": [], "torch.distributed.elastic.metrics.initialize_metrics": [], "torch.distributed.elastic.agent.server.local_elastic_agent.LocalElasticAgent": [], "torch.distributed.elastic.multiprocessing.errors.ChildFailedError": [], "functional.broadcast": ["torch.autograd.Function.apply"], "functional.gather": ["torch.autograd.Function.apply"], "functional.scatter": ["torch.autograd.Function.apply"], "functional.reduce": ["torch.autograd.Function.apply"], "functional.all_gather": ["torch.autograd.Function.apply"], "functional.all_to_all": ["torch.autograd.Function.apply"], "functional.all_reduce": ["torch.autograd.Function.apply"], "functional._Broadcast.forward": ["torch.distributed.broadcast", "torch.distributed.get_rank"], "functional._Broadcast.backward": ["torch.autograd.Function.apply"], "functional._Gather.forward": ["torch.distributed.get_world_size", "torch.zeros_like", "<builtin>.tuple", "<builtin>.range", "torch.distributed.gather", "torch.distributed.get_rank"], "torch.distributed.gather": [], "functional._Gather.backward": ["torch.autograd.Function.apply"], "functional._Scatter.forward": ["<builtin>.list", "torch.distributed.scatter", "torch.zeros_like", "<builtin>.all", "torch.distributed.get_rank"], "torch.distributed.scatter": [], "functional._Scatter.backward": ["torch.autograd.Function.apply"], "functional._Reduce.forward": ["torch.distributed.reduce"], "torch.distributed.reduce": [], "functional._Reduce.backward": ["torch.autograd.Function.apply"], "functional._AllGather.forward": ["torch.distributed.get_world_size", "<builtin>.tuple", "torch.empty_like", "<builtin>.range", "torch.distributed.all_gather"], "functional._AllGather.backward": ["torch.stack", "torch.autograd.Function.apply", "torch.sum"], "functional._AlltoAll.forward": ["torch.distributed.get_world_size", "<builtin>.list", "torch.distributed.scatter", "torch.empty_like", "<builtin>.tuple", "<builtin>.range", "torch.distributed.get_backend", "torch.distributed.all_to_all", "torch.distributed.get_rank"], "functional._AlltoAll.backward": ["torch.autograd.Function.apply"], "functional._AllReduce.forward": ["torch.distributed.all_reduce"], "functional._AllReduce.backward": ["torch.autograd.Function.apply"], "functional_adadelta": [], "functional_adadelta._FunctionalAdadelta.__init__": ["torch.jit.annotate", "<builtin>.ValueError", "<builtin>.len"], "functional_adadelta._FunctionalAdadelta.step": ["<builtin>.ValueError", "<builtin>.len", "torch.optim._functional.adadelta", "torch.tensor", "<builtin>.zip", "torch.no_grad", "torch.zeros_like"], "torch.optim._functional.adadelta": [], "functional_adagrad": [], "functional_adagrad._FunctionalAdagrad.__init__": ["<builtin>.ValueError", "torch.jit.annotate", "torch.tensor", "<builtin>.len", "torch.full_like"], "functional_adagrad._FunctionalAdagrad.step": ["<builtin>.ValueError", "torch.optim._functional.adagrad", "torch.no_grad", "<builtin>.len", "<builtin>.zip"], "torch.optim._functional.adagrad": [], "functional_adamax": [], "functional_adamax._FunctionalAdamax.__init__": ["<builtin>.ValueError", "torch.jit.annotate", "<builtin>.len"], "functional_adamax._FunctionalAdamax.step": ["torch.optim._functional.adamax", "torch.no_grad", "torch.tensor", "<builtin>.ValueError", "<builtin>.len", "torch.zeros_like", "<builtin>.zip"], "torch.optim._functional.adamax": [], "functional_adamw": [], "functional_adamw._FunctionalAdamW.__init__": ["<builtin>.ValueError", "torch.jit.annotate", "<builtin>.len"], "functional_adamw._FunctionalAdamW.step": ["<builtin>.ValueError", "torch.zeros_like", "torch.optim._functional.adamw", "<builtin>.zip", "torch.tensor", "torch.no_grad", "<builtin>.len"], "torch.optim._functional.adamw": [], "functional_adam": [], "functional_adam._FunctionalAdam.__init__": ["<builtin>.ValueError", "<builtin>.len", "torch.jit.annotate"], "functional_adam._FunctionalAdam.step_param": ["torch.zeros_like", "torch.optim._functional.adam", "torch.no_grad", "torch.tensor"], "torch.optim._functional.adam": [], "functional_adam._FunctionalAdam.step": ["torch.tensor", "<builtin>.ValueError", "torch.optim._functional.adam", "<builtin>.len", "<builtin>.zip", "torch.zeros_like", "torch.no_grad"], "functional_rmsprop": [], "functional_rmsprop._FunctionalRMSprop.__init__": ["<builtin>.ValueError", "<builtin>.len", "torch.jit.annotate"], "functional_rmsprop._FunctionalRMSprop.step": ["torch.optim._functional.rmsprop", "<builtin>.zip", "torch.zeros_like", "torch.no_grad", "<builtin>.ValueError", "torch.tensor", "<builtin>.len"], "torch.optim._functional.rmsprop": [], "functional_rprop": [], "functional_rprop._FunctionalRprop.__init__": ["<builtin>.ValueError", "<builtin>.len", "torch.jit.annotate"], "functional_rprop._FunctionalRprop.step": ["torch.full_like", "<builtin>.zip", "torch.tensor", "torch.no_grad", "torch.optim._functional.rprop", "<builtin>.ValueError", "torch.zeros_like", "<builtin>.len"], "torch.optim._functional.rprop": [], "functional_sgd": [], "functional_sgd._FunctionalSGD.__init__": ["<builtin>.len", "<builtin>.ValueError", "torch.jit.annotate"], "functional_sgd._FunctionalSGD.step_param": ["torch.no_grad", "torch.optim._functional.sgd"], "torch.optim._functional.sgd": [], "functional_sgd._FunctionalSGD.step": ["torch.no_grad", "<builtin>.len", "<builtin>.enumerate", "<builtin>.zip", "<builtin>.ValueError", "torch.optim._functional.sgd"], "optimizer._ScriptLocalOptimizerInterface.step": [], "optimizer._ScriptLocalOptimizer": ["torch.jit.export", "threading.Lock"], "optimizer._ScriptLocalOptimizer.__init__": ["<builtin>.super"], "optimizer._ScriptLocalOptimizer.step": ["torch.distributed.autograd.get_gradients"], "torch.distributed.autograd.get_gradients": [], "optimizer._LocalOptimizer": ["threading.Lock"], "optimizer._LocalOptimizer.__init__": [], "optimizer._LocalOptimizer.step": ["torch.distributed.autograd.get_gradients"], "optimizer._new_local_optimizer": ["torch.distributed.rpc.RRef", "optimizer._LocalOptimizer.__init__"], "optimizer._local_optimizer_step": [], "optimizer._new_script_local_optimizer": ["torch.distributed.rpc.RRef", "torch.jit.script", "optimizer._ScriptLocalOptimizer.__init__"], "optimizer._script_local_optimizer_step": [], "optimizer._wait_for_all": [], "optimizer.DistributedOptimizer.__init__": ["torch.distributed.optim.functional_optim_map.get", "collections.defaultdict", "torch.distributed.rpc.rpc_async", "optimizer._wait_for_all"], "torch.distributed.optim.functional_optim_map.get": [], "optimizer.DistributedOptimizer.step": ["torch.distributed.autograd._is_valid_context", "torch.distributed.rpc.rpc_async", "optimizer._wait_for_all"], "torch.distributed.autograd._is_valid_context": [], "post_localSGD_optimizer": [], "post_localSGD_optimizer.PostLocalSGDOptimizer.__init__": ["<builtin>.list", "<builtin>.iter"], "post_localSGD_optimizer.PostLocalSGDOptimizer.step": ["<builtin>.iter"], "post_localSGD_optimizer.PostLocalSGDOptimizer.zero_grad": [], "post_localSGD_optimizer.PostLocalSGDOptimizer.state_dict": [], "post_localSGD_optimizer.PostLocalSGDOptimizer.load_state_dict": [], "zero_redundancy_optimizer": [], "zero_redundancy_optimizer._recursive_copy_to_device": ["<builtin>.isinstance", "zero_redundancy_optimizer._recursive_copy_to_device", "<builtin>.tuple"], "zero_redundancy_optimizer._is_trainable": [], "zero_redundancy_optimizer._broadcast_object": ["torch.load", "<builtin>.len", "torch.save", "<builtin>.int", "torch.empty", "torch.distributed.broadcast", "<builtin>.bytearray", "torch.distributed.get_rank", "io.BytesIO", "torch.LongTensor", "torch.ByteTensor"], "zero_redundancy_optimizer._get_global_rank": ["torch.distributed.distributed_c10d._get_global_rank"], "torch.distributed.distributed_c10d._get_global_rank": [], "zero_redundancy_optimizer._ZeROJoinHook.__init__": ["<builtin>.super", "<builtin>.isinstance"], "zero_redundancy_optimizer._ZeROJoinHook.main_hook": ["zero_redundancy_optimizer.ZeroRedundancyOptimizer.step"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.step": ["zero_redundancy_optimizer.ZeroRedundancyOptimizer._init_zero_for_overlap", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._local_step", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_params"], "zero_redundancy_optimizer._OverlapInfo.__init__": ["torch.distributed.get_world_size", "<builtin>.range"], "zero_redundancy_optimizer._OverlapInfo.wait_for_broadcasts": ["<builtin>.len", "<builtin>.map", "<builtin>.list"], "zero_redundancy_optimizer._OverlapInfo.wait_for_broadcasts.<lambda1>": [], "zero_redundancy_optimizer._OverlapInfo.clear_per_iter_info": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.__init__": ["torch.optim.Optimizer.__init__", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._build_param_buckets", "torch.distributed.algorithms.join.Joinable.__init__", "logging.warning", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._verify_and_init_params", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._verify_same_dense_param_type", "zero_redundancy_optimizer._OverlapInfo.__init__", "zero_redundancy_optimizer._get_global_rank", "torch.distributed.get_world_size", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._get_optimizer_constructor", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._get_is_trainable_mask", "torch.distributed.get_rank", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._init_local_optimizer"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._verify_and_init_params": ["<builtin>.len", "<builtin>.list", "<builtin>.ValueError", "<builtin>.isinstance", "torch.typename", "<builtin>.TypeError"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._verify_same_dense_param_type": ["<builtin>.ValueError", "torch.typename"], "torch.optim.Optimizer.__init__": [], "torch.distributed.algorithms.join.Joinable.__init__": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._get_is_trainable_mask": ["<builtin>.list", "<builtin>.map"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._get_optimizer_constructor": ["torch.distributed.optim.functional_optim_map.values", "<builtin>.ValueError", "logging.info"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._init_local_optimizer": ["<builtin>.len", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_param_groups", "<builtin>.hasattr", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._build_param_buckets": ["<builtin>.len", "torch.zeros", "<builtin>.enumerate", "<builtin>.range", "zero_redundancy_optimizer._is_trainable", "torch.empty"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._clear_cache": ["torch.optim.Optimizer._device_to_params_per_rank_cache.clear", "torch.optim.Optimizer._param_to_rank_cache.clear", "torch.optim.Optimizer._device_to_buckets_cache.clear"], "torch.optim.Optimizer._param_to_rank_cache.clear": [], "torch.optim.Optimizer._device_to_params_per_rank_cache.clear": [], "torch.optim.Optimizer._device_to_buckets_cache.clear": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.add_param_group": ["zero_redundancy_optimizer.ZeroRedundancyOptimizer._build_param_buckets", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._clear_cache", "<builtin>.len", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters", "torch.optim.Optimizer.optim.add_param_group", "<builtin>.RuntimeError", "<builtin>.super"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters": ["<builtin>.len", "<builtin>.sorted", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._verify_params_per_rank", "<builtin>.RuntimeError", "<builtin>.range", "<builtin>.min", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_param_group"], "torch.optim.Optimizer.optim.add_param_group": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.consolidate_state_dict": ["torch.tensor", "torch.optim.Optimizer.optim.state_dict", "<builtin>.range", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_param_groups", "zero_redundancy_optimizer._recursive_copy_to_device", "zero_redundancy_optimizer._get_global_rank", "torch.device", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._check_overlap_initialized", "zero_redundancy_optimizer._broadcast_object"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._check_overlap_initialized": ["<builtin>.RuntimeError"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_param_groups": ["<builtin>.zip", "<builtin>.len", "<builtin>.filter"], "torch.optim.Optimizer.optim.state_dict": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._verify_params_per_rank": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.set"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_param_group": ["<builtin>.enumerate", "copy.copy"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters.<lambda1>": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._param_to_rank": ["<builtin>.enumerate", "<builtin>.len", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._param_to_index": ["<builtin>.enumerate", "<builtin>.len", "itertools.chain"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._index_to_param": ["<builtin>.len", "itertools.chain", "<builtin>.list"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._broadcast_params_from_rank": ["zero_redundancy_optimizer._get_global_rank", "torch.distributed.broadcast", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_params": ["zero_redundancy_optimizer.ZeroRedundancyOptimizer._broadcast_params_from_rank", "<builtin>.list", "<builtin>.map", "<builtin>.range"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_params.<lambda1>": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._device_to_params_per_rank": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.range", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._device_to_buckets": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.range", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._ddp_bucket_index_to_rank", "typing.NamedTuple.__init__"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._ddp_bucket_index_to_rank": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._local_step": ["zero_redundancy_optimizer.ZeroRedundancyOptimizer._build_param_buckets", "logging.warning", "<builtin>.RuntimeError", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_param_groups", "torch.distributed.algorithms.join.Join.notify_join_context", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._get_is_trainable_mask", "torch.optim.Optimizer.optim.step"], "torch.distributed.algorithms.join.Join.notify_join_context": [], "torch.optim.Optimizer.optim.step": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._init_zero_for_overlap": ["zero_redundancy_optimizer.ZeroRedundancyOptimizer._clear_cache", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._build_ddp_param_buckets", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._init_local_optimizer", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.join_hook": ["zero_redundancy_optimizer._ZeROJoinHook.__init__"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.join_device": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.join_process_group": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.load_state_dict": ["<builtin>.super", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._check_overlap_initialized", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_param_groups", "zero_redundancy_optimizer._recursive_copy_to_device"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer.state_dict": ["<builtin>.len", "<builtin>.sorted", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._partition_parameters", "<builtin>.RuntimeError", "<builtin>.enumerate", "<builtin>.zip", "<builtin>.super", "<builtin>.dict", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._check_overlap_initialized"], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._sync_param_groups.<lambda1>": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._build_ddp_param_buckets": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.range", "zero_redundancy_optimizer._is_trainable", "torch.empty"], "torch.typename": [], "zero_redundancy_optimizer.ZeroRedundancyOptimizer._get_assigned_ddp_bucket_indices": ["<builtin>.len", "<builtin>.range", "zero_redundancy_optimizer.ZeroRedundancyOptimizer._ddp_bucket_index_to_rank"], "torch.distributed.optim.functional_optim_map.values": [], "benchmark_dataset": [], "benchmark_dataset.collate_sentences_lm": ["torch.stack", "torch.LongTensor", "<builtin>.len"], "benchmark_dataset.BenchmarkLMDataset.__init__": [], "benchmark_dataset.BenchmarkLMDataset.__getitem__": ["torch.randint"], "benchmark_dataset.BenchmarkLMDataset.__len__": [], "pipe": ["pipe.bench_single_process", "argparse.ArgumentParser", "<builtin>.print", "<builtin>.TypeError"], "pipe.sizeof_fmt": ["<builtin>.abs"], "pipe.init_random_seed": ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "pipe.EmbeddingLayer.__init__": ["<builtin>.super", "torch.nn.Embedding.weight.data.uniform_"], "torch.nn.Embedding.weight.data.uniform_": [], "pipe.EmbeddingLayer.forward": ["<builtin>.super", "math.sqrt"], "pipe.PositionalEncodingLayer.__init__": ["math.log", "torch.sin", "torch.cos", "torch.nn.Dropout", "<builtin>.super", "torch.zeros", "torch.exp", "torch.arange", "torch.nn.Module.register_buffer"], "pipe.PositionalEncodingLayer.forward": [], "pipe.TransformerDecoderLayer.__init__": ["<builtin>.super"], "pipe.TransformerDecoderLayer.forward": ["<builtin>.super", "torch.nn.Transformer.generate_square_subsequent_mask", "<builtin>.len"], "pipe.LinearLayer.__init__": ["<builtin>.super", "torch.nn.Linear.weight.data.uniform_", "torch.nn.Linear.bias.data.zero_"], "torch.nn.Linear.bias.data.zero_": [], "torch.nn.Linear.weight.data.uniform_": [], "pipe.TransformerLMSequential.__init__": ["pipe.EmbeddingLayer.__init__", "pipe.LinearLayer.__init__", "pipe.PositionalEncodingLayer.__init__", "<builtin>.range", "<builtin>.super", "pipe.TransformerDecoderLayer.__init__"], "pipe.make_model": ["torch.nn.CrossEntropyLoss", "torch.nn.Sequential.to", "pipe.TransformerLMSequential.__init__"], "torch.nn.Sequential.to": [], "pipe.make_model.make_adam": ["torch.optim.Adam"], "torch.optim.Adam": [], "pipe.train": ["torch.cuda.memory_stats", "<builtin>.sum", "pipe.train.get_first_device", "<builtin>.enumerate", "pipe.sizeof_fmt", "torch.distributed.get_rank", "<builtin>.range", "<builtin>.print", "torch.nn.utils.clip_grad_value_", "math.exp", "<builtin>.len", "<builtin>.RuntimeError", "time.time", "pipe.train.get_last_device"], "pipe.train.get_first_device": ["torch.cuda.current_device"], "pipe.train.get_last_device": ["torch.cuda.current_device"], "torch.nn.utils.clip_grad_value_": [], "math.exp": [], "torch.cuda.memory_stats": [], "pipe.generate_balance": ["<builtin>.range", "<builtin>.int", "math.ceil"], "pipe.make_model_and_data": ["torch.utils.data.DataLoader", "pipe.make_model", "torch.device", "torch.cuda.is_available", "benchmark_dataset.BenchmarkLMDataset.__init__"], "torch.utils.data.DataLoader": [], "pipe.bench_single_process": ["torch.device", "pipe.generate_balance", "torch.distributed.rpc.init_rpc", "pipe.make_model_and_data", "pipe.train", "<builtin>.min", "torch.distributed.pipeline.sync.Pipe", "torch.cuda.device_count", "torch.distributed.pipeline.sync.utils.partition_model", "<builtin>.len", "os.environ.update", "pipe.init_random_seed", "torch.cuda.is_available"], "os.environ.update": [], "torch.distributed.pipeline.sync.utils.partition_model": [], "torch.distributed.pipeline.sync.Pipe": [], "api._use_rpc_pickler": [], "api._require_initialized": ["functools.wraps"], "api._require_initialized.wrapper": ["<builtin>.RuntimeError", "torch._C._distributed_rpc._is_current_rpc_agent_set", "api._wait_all_workers", "api._barrier", "api.rpc_async", "api.rpc_sync", "api.get_worker_info", "api._all_gather", "api.remote", "api.shutdown"], "torch._C._distributed_rpc._is_current_rpc_agent_set": [], "api.get_worker_info": ["torch._C._distributed_rpc._get_current_rpc_agent"], "api._all_gather": ["<builtin>.RuntimeError", "api.rpc_async", "api._gather_to_leader", "<builtin>.str", "api.rpc_sync", "<builtin>.dict", "torch._C._distributed_rpc.get_rpc_timeout", "torch._C._distributed_rpc._get_current_rpc_agent", "<builtin>.sorted"], "api._wait_all_workers": ["api._all_gather"], "api.remote": ["torch._C._distributed_rpc._invoke_remote_torchscript", "torch._C._distributed_rpc._invoke_remote_builtin", "api._to_worker_info", "torch.autograd._profiler_enabled", "internal._internal_rpc_pickler.serialize", "internal.PythonUDF", "torch._jit_internal._qualified_name", "torch._C._distributed_rpc._invoke_remote_python_udf", "torch.jit._builtins._find_builtin", "api._enable_rpc_profiler", "<builtin>.isinstance", "<builtin>.hasattr"], "api._barrier": ["api._all_gather", "<builtin>.set"], "api.shutdown": ["api._finalize_shutdown", "api._wait_all_workers", "torch._C._distributed_rpc._get_current_rpc_agent", "torch._C._distributed_rpc._delete_all_user_and_unforked_owner_rrefs"], "api.rpc_async": ["api._invoke_rpc", "<builtin>.hasattr"], "api.rpc_sync": ["api._invoke_rpc"], "api.AllGatherStates.__init__": ["threading.Event"], "threading.Event": [], "threading.RLock": [], "api._init_rpc_states": ["torch._C._distributed_rpc._set_and_start_rpc_agent", "torch._C._distributed_rpc._is_current_rpc_agent_set"], "torch._C._distributed_rpc._set_and_start_rpc_agent": [], "api._gather_to_leader": ["<builtin>.set"], "api._broadcast_to_followers": [], "api._wait_all": ["torch.futures.wait_all"], "torch.futures.wait_all": [], "torch._C._distributed_rpc._get_current_rpc_agent": [], "torch._C._distributed_rpc.get_rpc_timeout": [], "torch._C._distributed_rpc._delete_all_user_and_unforked_owner_rrefs": [], "api._finalize_shutdown": ["torch._C._distributed_rpc._cleanup_python_rpc_handler", "torch._C._distributed_rpc._destroy_rref_context", "torch._C._distributed_rpc._reset_current_rpc_agent", "torch._C._distributed_rpc._get_current_rpc_agent"], "torch._C._distributed_rpc._destroy_rref_context": [], "torch._C._distributed_rpc._cleanup_python_rpc_handler": [], "torch._C._distributed_rpc._reset_current_rpc_agent": [], "api._to_worker_info": ["api.get_worker_info", "<builtin>.isinstance", "<builtin>.ValueError"], "api._rref_typeof_on_owner": ["<builtin>.type"], "api._rref_typeof_on_user": ["api.rpc_async"], "api.method_factory": [], "api.method_factory.method": ["<builtin>.super", "<builtin>.getattr"], "torch.jit._builtins._find_builtin": [], "torch.autograd._profiler_enabled": [], "api._enable_rpc_profiler": ["torch._C._distributed_rpc.RemoteProfilerManager.set_current_profiling_key", "contextlib.suppress", "torch.autograd.profiler.record_function", "api.get_worker_info", "torch._jit_internal._qualified_name", "internal._build_rpc_profiling_key", "<builtin>.isinstance"], "torch._C._distributed_rpc._invoke_remote_builtin": [], "torch._jit_internal._qualified_name": [], "torch._C._distributed_rpc._invoke_remote_torchscript": [], "internal.PythonUDF": [], "internal._internal_rpc_pickler.serialize": [], "torch._C._distributed_rpc._invoke_remote_python_udf": [], "api._invoke_rpc": ["torch._C._distributed_rpc._invoke_rpc_python_udf", "torch._C._distributed_rpc._invoke_rpc_torchscript", "api._to_worker_info", "torch.autograd._profiler_enabled", "internal._internal_rpc_pickler.serialize", "<builtin>.TypeError", "internal.PythonUDF", "torch._jit_internal._qualified_name", "torch.jit._builtins._find_builtin", "<builtin>.callable", "api._enable_rpc_profiler", "torch._C._distributed_rpc._invoke_rpc_builtin", "<builtin>.isinstance", "<builtin>.hasattr"], "torch._C._distributed_rpc._invoke_rpc_builtin": [], "torch._C._distributed_rpc._invoke_rpc_torchscript": [], "torch._C._distributed_rpc._invoke_rpc_python_udf": [], "contextlib.suppress": [], "internal._build_rpc_profiling_key": [], "torch._C._distributed_rpc.RemoteProfilerManager.set_current_profiling_key": [], "backend_registry": ["enum.Enum", "backend_registry.register_backend", "<builtin>.dict", "collections.namedtuple"], "backend_registry._backend_type_repr": [], "backend_registry.backend_registered": [], "backend_registry.register_backend": ["backend_registry.backend_registered", "<builtin>.RuntimeError", "<builtin>.dict", "enum.Enum"], "backend_registry.<lambda1>": [], "backend_registry.<lambda2>": [], "backend_registry.construct_rpc_backend_options": [], "backend_registry.init_backend": [], "backend_registry._init_process_group": ["<builtin>.RuntimeError", "torch.distributed.ProcessGroupGloo"], "torch.distributed.ProcessGroupGloo": [], "backend_registry._tensorpipe_construct_rpc_backend_options_handler": ["TensorPipeRpcBackendOptions"], "TensorPipeRpcBackendOptions": [], "backend_registry._tensorpipe_validate_devices": ["<builtin>.all"], "backend_registry._tensorpipe_exchange_and_check_all_device_maps": ["<builtin>.ValueError", "backend_registry._tensorpipe_validate_devices", "<builtin>.list", "<builtin>.range", "<builtin>.sorted", "torch.device", "<builtin>.set", "<builtin>.len", "torch.distributed.all_gather_object"], "backend_registry._tensorpipe_exchange_and_check_all_device_maps.<lambda1>": [], "backend_registry._tensorpipe_init_backend_handler": ["torch.cuda.device_count", "api._init_rpc_states", "<builtin>.TypeError", "TensorPipeAgent", "torch.cuda.init", "torch.cuda.is_available", "backend_registry._tensorpipe_exchange_and_check_all_device_maps", "backend_registry._init_process_group", "api._all_gather", "<builtin>.isinstance"], "torch.cuda.init": [], "TensorPipeAgent": [], "constants": ["datetime.timedelta"], "dist_autograd_test": ["torch.jit.script", "torch.ones", "<builtin>.set"], "dist_autograd_test._set_rpc_done": [], "dist_autograd_test._check_rpc_done": ["time.sleep"], "dist_autograd_test._torch_ones": ["torch.ones"], "dist_autograd_test._compare_owner_value": ["torch.equal", "torch.distributed.autograd.get_gradients"], "torch.equal": [], "dist_autograd_test.create_tensor": ["torch.ones"], "dist_autograd_test.create_torchscript_tensor": ["torch.ones"], "dist_autograd_test.my_py_add": ["torch.add"], "dist_autograd_test.my_scalar_add": [], "dist_autograd_test.my_rref_add": ["torch.add"], "dist_autograd_test.my_script_add": ["torch.add"], "dist_autograd_test.my_script_ref_add": ["torch.add"], "dist_autograd_test.my_nested_rref_add": ["torch.distributed.rpc.rpc_sync"], "dist_autograd_test.ret_requires_grad": [], "dist_autograd_test.my_py_nested_call": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "torch.testing._internal.dist_utils.worker_name": [], "dist_autograd_test._all_contexts_cleaned_up": ["torch.distributed.autograd._retrieve_context", "time.time", "<builtin>.set"], "torch.distributed.autograd._retrieve_context": [], "dist_autograd_test._run_trainer": ["torch.distributed.autograd.context", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.backward"], "dist_autograd_test._run_trainer_torchscript": ["torch.distributed.autograd.context", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.backward"], "dist_autograd_test.SimulateBackwardError.forward": [], "dist_autograd_test.SimulateBackwardError": ["torch.autograd.function.once_differentiable"], "torch.autograd.function.once_differentiable": [], "dist_autograd_test.SimulateBackwardError.backward": ["<builtin>.Exception"], "dist_autograd_test.CommonDistAutogradTest._exec_func_with_dst": ["<builtin>.isinstance", "torch.testing._internal.dist_utils.worker_name", "torch.linalg.multi_dot", "<builtin>.len", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.remote", "dist_autograd_test.DistAutogradTest._mixed_requires_grad", "<builtin>.ValueError", "torch.stack", "torch.div", "torch.matmul", "torch.cos", "torch.add", "dist_autograd_test.my_py_add", "torch.split", "dist_autograd_test.DistAutogradTest._complex_python_udf", "torch.bmm", "dist_autograd_test.my_script_add", "torch.distributed.rpc.rpc_sync", "torch.mul"], "torch.div": [], "torch.linalg.multi_dot": [], "dist_autograd_test.DistAutogradTest._mixed_requires_grad": [], "torch.bmm": [], "dist_autograd_test.DistAutogradTest._complex_python_udf": ["torch.nn.functional.linear", "torch.linalg.multi_dot"], "dist_autograd_test.CommonDistAutogradTest._exec_func": ["dist_autograd_test.CommonDistAutogradTest._exec_func_with_dst", "dist_autograd_test.CommonDistAutogradTest._next_rank"], "dist_autograd_test.CommonDistAutogradTest._next_rank": ["dist_autograd_test.CommonDistAutogradTest._next_rank", "<builtin>.hasattr"], "dist_autograd_test.CommonDistAutogradTest._check_rpc_done": ["dist_autograd_test.CommonDistAutogradTest._check_rpc_done"], "dist_autograd_test.CommonDistAutogradTest._verify_backwards": ["torch.autograd.backward", "dist_autograd_test.CommonDistAutogradTest._verify_backwards_remote"], "dist_autograd_test.CommonDistAutogradTest._verify_backwards_remote": ["torch.distributed.autograd.backward", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotIn", "<builtin>.len", "torch.distributed.autograd.get_gradients"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotIn": [], "dist_autograd_test.DistAutogradTest": ["torch.testing._internal.common_utils.sandcastle_skip_if", "torch.testing._internal.dist_utils.dist_init"], "torch.testing._internal.dist_utils.dist_init": [], "dist_autograd_test.DistAutogradTest.test_autograd_context": ["torch.distributed.autograd._retrieve_context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.autograd.context", "torch.distributed.autograd._get_max_id"], "torch.distributed.autograd._get_max_id": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex": [], "dist_autograd_test.DistAutogradTest.test_nested_context": ["torch.distributed.autograd.context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "dist_autograd_test.DistAutogradTest._verify_graph_for_first_rpc_call": ["<builtin>.len", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "dist_autograd_test.DistAutogradTest._verify_graph_for_rpc_call_exec": ["<builtin>.len", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "dist_autograd_test.DistAutogradTest._verify_graph_for_nested_rpc_call": ["<builtin>.list", "<builtin>.len", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "dist_autograd_test.DistAutogradTest._test_graph": ["torch.distributed.autograd._retrieve_context", "torch.distributed.rpc.remote", "torch.distributed.autograd._current_context", "dist_autograd_test.CommonDistAutogradTest._check_rpc_done", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "dist_autograd_test.DistAutogradTest._verify_graph_for_rpc_call_exec", "torch.testing._internal.dist_utils.initialize_pg", "<builtin>.ValueError", "torch.distributed.barrier", "torch.testing._internal.dist_utils.worker_name", "torch.zeros", "torch.distributed.rpc.rpc_sync", "<builtin>.list", "torch.distributed.autograd.context", "dist_autograd_test.DistAutogradTest._verify_graph_for_first_rpc_call", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises", "<builtin>.len", "torch.ones"], "torch.testing._internal.dist_utils.initialize_pg": [], "torch.distributed.autograd._current_context": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises": [], "dist_autograd_test.DistAutogradTest.test_graph_for_builtin_call": ["dist_autograd_test.DistAutogradTest._test_graph"], "dist_autograd_test.DistAutogradTest.test_graph_for_python_call": ["dist_autograd_test.DistAutogradTest._test_graph"], "dist_autograd_test.DistAutogradTest.test_graph_for_builtin_remote_call": ["dist_autograd_test.DistAutogradTest._test_graph"], "dist_autograd_test.DistAutogradTest.test_graph_for_python_remote_call": ["dist_autograd_test.DistAutogradTest._test_graph"], "dist_autograd_test.DistAutogradTest._test_graph_for_py_nested_call": ["torch.distributed.autograd._retrieve_context", "torch.distributed.rpc.remote", "torch.distributed.autograd._current_context", "dist_autograd_test.DistAutogradTest._verify_graph_for_rpc_call_exec", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.initialize_pg", "dist_autograd_test.DistAutogradTest._verify_graph_for_nested_rpc_call", "<builtin>.ValueError", "torch.distributed.barrier", "torch.testing._internal.dist_utils.worker_name", "torch.zeros", "torch.distributed.rpc.rpc_sync", "<builtin>.list", "torch.distributed.autograd.context", "dist_autograd_test.DistAutogradTest._verify_graph_for_first_rpc_call", "<builtin>.len", "torch.ones"], "dist_autograd_test.DistAutogradTest.test_graph_for_py_nested_call": ["dist_autograd_test.DistAutogradTest._test_graph_for_py_nested_call"], "dist_autograd_test.DistAutogradTest.test_graph_for_py_nested_remote_call": ["dist_autograd_test.DistAutogradTest._test_graph_for_py_nested_call"], "dist_autograd_test.DistAutogradTest._test_graph_for_py_nested_call_itself": ["torch.distributed.autograd._retrieve_context", "torch.distributed.rpc.remote", "torch.distributed.autograd._current_context", "dist_autograd_test.DistAutogradTest._verify_graph_for_rpc_call_exec", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "dist_autograd_test.CommonDistAutogradTest._check_rpc_done", "torch.testing._internal.dist_utils.initialize_pg", "dist_autograd_test.DistAutogradTest._verify_graph_for_nested_rpc_call", "<builtin>.ValueError", "torch.distributed.barrier", "torch.testing._internal.dist_utils.worker_name", "torch.zeros", "torch.distributed.rpc.rpc_sync", "<builtin>.list", "torch.distributed.autograd.context", "dist_autograd_test.DistAutogradTest._verify_graph_for_first_rpc_call", "<builtin>.len", "torch.ones"], "dist_autograd_test.DistAutogradTest.test_graph_for_py_nested_call_itself": ["dist_autograd_test.DistAutogradTest._test_graph_for_py_nested_call_itself"], "dist_autograd_test.DistAutogradTest.test_graph_for_py_nested_remote_call_itself": ["dist_autograd_test.DistAutogradTest._test_graph_for_py_nested_call_itself"], "dist_autograd_test.DistAutogradTest._test_no_graph_with_tensors_not_require_grad": ["torch.distributed.autograd._retrieve_context", "torch.distributed.rpc.remote", "torch.distributed.autograd._current_context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.initialize_pg", "<builtin>.ValueError", "torch.distributed.barrier", "torch.testing._internal.dist_utils.worker_name", "torch.zeros", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._check_rpc_done", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotEqual", "<builtin>.len", "torch.ones"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotEqual": [], "dist_autograd_test.DistAutogradTest.test_no_graph_with_tensors_not_require_grad": ["dist_autograd_test.DistAutogradTest._test_no_graph_with_tensors_not_require_grad"], "dist_autograd_test.DistAutogradTest.test_no_graph_with_tensors_not_require_grad_remote": ["dist_autograd_test.DistAutogradTest._test_no_graph_with_tensors_not_require_grad"], "dist_autograd_test.DistAutogradTest._test_grad_only_on_return_value": ["torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn", "torch.testing._internal.dist_utils.initialize_pg", "<builtin>.ValueError", "torch.distributed.barrier", "<builtin>.len", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._check_rpc_done", "torch.distributed.autograd.backward", "torch.ones_like", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.DistAutogradTest.test_grad_only_on_return_value": ["dist_autograd_test.DistAutogradTest._test_grad_only_on_return_value"], "dist_autograd_test.DistAutogradTest.test_grad_only_on_return_value_remote": ["dist_autograd_test.DistAutogradTest._test_grad_only_on_return_value"], "dist_autograd_test.DistAutogradTest._test_rpc_complex_args": ["dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.distributed.rpc.remote", "torch.distributed.autograd._current_context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "<builtin>.ValueError", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "<builtin>.list", "torch.distributed.autograd.context", "torch.stack", "<builtin>.len", "torch.ones"], "dist_autograd_test.DistAutogradTest.test_rpc_complex_args": ["dist_autograd_test.DistAutogradTest._test_rpc_complex_args"], "dist_autograd_test.DistAutogradTest.test_remote_complex_args": ["dist_autograd_test.DistAutogradTest._test_rpc_complex_args"], "dist_autograd_test.DistAutogradTest.context_cleanup_test_helper": ["torch.distributed.autograd._retrieve_context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "dist_autograd_test._all_contexts_cleaned_up", "<builtin>.range", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.barrier", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue": [], "dist_autograd_test.DistAutogradTest.test_context_cleanup_tensor_with_grad": ["dist_autograd_test.DistAutogradTest.context_cleanup_test_helper", "torch.zeros", "torch.ones"], "dist_autograd_test.DistAutogradTest.test_context_cleanup_tensor_no_grad": ["dist_autograd_test.DistAutogradTest.context_cleanup_test_helper", "torch.ones"], "dist_autograd_test.DistAutogradTest.test_context_cleanup_no_tensors": ["dist_autograd_test.DistAutogradTest.context_cleanup_test_helper"], "dist_autograd_test.DistAutogradTest.test_context_cleanup_nested_rpc": ["dist_autograd_test.DistAutogradTest.context_cleanup_test_helper", "torch.zeros", "torch.ones"], "dist_autograd_test.DistAutogradTest.test_worker_ids_recorded": ["torch.distributed.autograd._current_context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.testing._internal.dist_utils.worker_name", "torch.zeros", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.ones"], "dist_autograd_test.DistAutogradTest.test_dist_autograd_profiling": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertGreater", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "dist_autograd_test.DistAutogradTest.test_dist_autograd_profiling.get_event", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.autograd.profiler.profile", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest.test_dist_autograd_profiling.get_event": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertGreater": [], "dist_autograd_test.DistAutogradTest.test_error_in_context": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises"], "dist_autograd_test.DistAutogradTest.test_backward_no_grad_on_tensor": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIsNotNone", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIsNone", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.add", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIsNone": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIsNotNone": [], "dist_autograd_test.DistAutogradTest._test_backward_simple": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func_with_dst"], "dist_autograd_test.DistAutogradTest.test_backward_simple": ["dist_autograd_test.DistAutogradTest._test_backward_simple", "dist_autograd_test.CommonDistAutogradTest._next_rank"], "dist_autograd_test.DistAutogradTest.test_backward_simple_self": ["dist_autograd_test.DistAutogradTest._test_backward_simple"], "dist_autograd_test.DistAutogradTest._test_backward_rref": ["torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.rpc_sync", "torch.add", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.ones", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.DistAutogradTest.test_backward_rref": ["dist_autograd_test.DistAutogradTest._test_backward_rref", "torch.testing._internal.dist_utils.worker_name", "dist_autograd_test.CommonDistAutogradTest._next_rank"], "dist_autograd_test.DistAutogradTest.test_backward_rref_multi": ["dist_autograd_test.DistAutogradTest._test_backward_rref"], "dist_autograd_test.DistAutogradTest.test_backward_rref_nested": ["dist_autograd_test.DistAutogradTest._test_backward_rref", "torch.testing._internal.dist_utils.worker_name"], "dist_autograd_test.DistAutogradTest._test_trainer_ps": ["torch.futures.wait_all", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "dist_autograd_test._set_rpc_done", "torch.testing._internal.dist_utils.worker_name", "torch.zeros", "torch.add", "dist_autograd_test.CommonDistAutogradTest._check_rpc_done", "torch.ones", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.DistAutogradTest.test_trainer_ps": ["dist_autograd_test.DistAutogradTest._test_trainer_ps"], "dist_autograd_test.DistAutogradTest.test_trainer_ps_torchscript_functions": ["dist_autograd_test.DistAutogradTest._test_trainer_ps"], "dist_autograd_test.DistAutogradTest.test_backward_multiple_round_trips": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.DistAutogradTest.test_backward_different_tensor_dims": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.DistAutogradTest.test_backward_unused_tensors": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.narrow", "torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "torch.narrow": [], "dist_autograd_test.DistAutogradTest.test_backward_multiple_output_tensors": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.DistAutogradTest._run_test_backward_unused_send_function_in_thread": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.distributed.autograd.backward", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.mul"], "dist_autograd_test.DistAutogradTest.test_backward_unused_send_function": ["threading.Thread", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue"], "dist_autograd_test.DistAutogradTest.test_backward_autograd_engine_error": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.autograd.Function.apply", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "torch.testing._internal.common_utils.sandcastle_skip_if": [], "dist_autograd_test.DistAutogradTest.test_backward_node_failure": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "<builtin>.range", "torch.testing._internal.dist_utils.initialize_pg", "torch.testing._internal.dist_utils.wait_until_node_failure", "torch.distributed.barrier", "torch.distributed.rpc._set_rpc_timeout", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_shutdown_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "torch.distributed.rpc._set_rpc_timeout": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_shutdown_error_regex": [], "torch.testing._internal.dist_utils.wait_until_node_failure": [], "dist_autograd_test.DistAutogradTest.test_backward_without_context": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest.test_backward_without_rpc": ["torch.rand", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn", "<builtin>.len", "torch.add", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.ones", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.DistAutogradTest.test_backward_invalid_args": ["torch.distributed.autograd.context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.autograd.backward", "torch.rand"], "dist_autograd_test.DistAutogradTest.test_backward_multiple_roots": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.DistAutogradTest.test_backward_different_dtypes": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.DistAutogradTest.test_backward_simple_python_udf": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.DistAutogradTest.test_backward_simple_script_call": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "torch.nn.functional.linear": [], "dist_autograd_test.DistAutogradTest.test_backward_complex_python_udf": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.DistAutogradTest._python_udf_with_backward_error": ["torch.linalg.multi_dot", "torch.autograd.Function.apply"], "dist_autograd_test.DistAutogradTest._nested_rpc_call_backward_error": ["torch.linalg.multi_dot", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "dist_autograd_test.DistAutogradTest.test_backward_python_udf_error": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest.test_backward_node_failure_python_udf": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "datetime.timedelta", "torch.testing._internal.dist_utils.initialize_pg", "torch.testing._internal.dist_utils.wait_until_node_failure", "torch.distributed.barrier", "torch.distributed.rpc._set_rpc_timeout", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.distributed_c10d._get_default_store", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_shutdown_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "torch.distributed.distributed_c10d._get_default_store": [], "dist_autograd_test.DistAutogradTest._nested_python_udf": ["torch.linalg.multi_dot", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "dist_autograd_test.DistAutogradTest.test_backwards_nested_python_udf": ["torch.autograd.backward", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.linalg.multi_dot", "torch.distributed.autograd.backward", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.DistAutogradTest.MyBackwardFunc.forward": [], "dist_autograd_test.DistAutogradTest.MyBackwardFunc": ["torch.autograd.function.once_differentiable"], "dist_autograd_test.DistAutogradTest.MyBackwardFunc.backward": ["torch.distributed.barrier", "torch.distributed.autograd._release_context", "dist_autograd_test._all_contexts_cleaned_up"], "torch.distributed.autograd._release_context": [], "dist_autograd_test.DistAutogradTest.test_clean_context_during_backward": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.autograd.Function.apply", "torch.distributed.autograd.backward", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.autograd._new_context", "torch.distributed.rpc.shutdown", "torch.distributed.barrier", "sys.exit", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "<builtin>.len"], "torch.distributed.autograd._new_context": [], "dist_autograd_test.DistAutogradTest._call_remote_embedding": [], "dist_autograd_test.DistAutogradTest._get_grad": ["torch.distributed.autograd.get_gradients"], "dist_autograd_test.DistAutogradTest.test_embedding_bag_with_no_grad_tensors": ["torch.autograd.backward", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.nn.EmbeddingBag", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.LongTensor", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest.test_mixed_requires_grad": ["torch.rand", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotIn", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "dist_autograd_test.CommonDistAutogradTest._exec_func", "torch.distributed.autograd.get_gradients"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse": [], "dist_autograd_test.DistAutogradTest.TestDebugInfoFunc.forward": [], "dist_autograd_test.DistAutogradTest.TestDebugInfoFunc": ["torch.autograd.function.once_differentiable"], "dist_autograd_test.DistAutogradTest.TestDebugInfoFunc.backward": ["torch.distributed.autograd._get_debug_info", "<builtin>.int"], "torch.distributed.autograd._get_debug_info": [], "dist_autograd_test.DistAutogradTest.test_debug_info": ["torch.rand", "torch.autograd.Function.apply", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "dist_autograd_test._all_contexts_cleaned_up", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.barrier", "torch.distributed.autograd._get_debug_info", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "<builtin>.len", "torch.distributed.autograd.context", "<builtin>.int", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest._workload_thread": ["torch.distributed.autograd.context", "torch.rand", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest.test_async_dist_autograd": ["threading.Thread", "<builtin>.range", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.barrier"], "dist_autograd_test.DistAutogradTest.test_backward_accumulate_grads": ["torch.autograd.backward", "torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.matmul", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn", "<builtin>.len", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.DistAutogradTest._test_nested_backward_accumulate_grads": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "dist_autograd_test.DistAutogradTest.test_nested_backward_accumulate_grads": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest.test_multiple_backward": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "<builtin>.range", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest.test_multiple_backward_with_errors": ["torch.rand", "dist_autograd_test.CommonDistAutogradTest._next_rank", "<builtin>.range", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "dist_autograd_test.DistAutogradTest.test_backward_verify_hooks": ["torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "dist_autograd_test.CommonDistAutogradTest._exec_func", "torch.ones"], "dist_autograd_test.DistAutogradTest.test_backward_verify_hooks.<lambda1>": [], "dist_autograd_test.DistAutogradTest.test_no_grad_copy": ["torch.autograd.Function.apply", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.distributed.autograd.get_gradients", "torch.randn"], "dist_autograd_test.DistAutogradTest.test_no_grad_copy.MyFunc.forward": [], "dist_autograd_test.DistAutogradTest.test_no_grad_copy.MyFunc.backward": [], "dist_autograd_test.DistAutogradTest.test_no_grad_copy.MyFuncSingleGrad.forward": [], "dist_autograd_test.DistAutogradTest.test_no_grad_copy.MyFuncSingleGrad.backward": [], "dist_autograd_test.DistAutogradTest.test_no_grad_copy.NonContGradFunc.forward": ["torch.tensor"], "dist_autograd_test.DistAutogradTest.test_no_grad_copy.NonContGradFunc.backward": ["torch.ones"], "dist_autograd_test.DistAutogradTest.test_no_grad_copy_sparse": ["torch.autograd.Function.apply", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.nn.functional.embedding_bag", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.tensor", "torch.distributed.autograd.get_gradients", "torch.randn"], "dist_autograd_test.DistAutogradTest.test_no_grad_copy_sparse.MyFunc.forward": [], "dist_autograd_test.DistAutogradTest.test_no_grad_copy_sparse.MyFunc.backward": [], "dist_autograd_test.DistAutogradTest.test_no_grad_copy_sparse.NonContGradFunc.forward": [], "dist_autograd_test.DistAutogradTest.test_no_grad_copy_sparse.NonContGradFunc.backward": ["torch.rand", "torch.Size", "torch.ones", "torch.sparse.FloatTensor"], "torch.sparse.FloatTensor": [], "torch.nn.functional.embedding_bag": [], "dist_autograd_test.DistAutogradTest.test_grad_copy_sparse_indices_extra_ref": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIsNotNone", "torch.autograd.Function.apply", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.nn.functional.embedding_bag", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.tensor", "torch.distributed.autograd.get_gradients", "torch.randn"], "dist_autograd_test.DistAutogradTest.test_grad_copy_sparse_indices_extra_ref.MyFunc.forward": [], "dist_autograd_test.DistAutogradTest.test_grad_copy_sparse_indices_extra_ref.MyFunc.backward": [], "dist_autograd_test.DistAutogradTest.test_post_hooks": ["torch.rand", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.len", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.DistAutogradTest.test_post_hooks.post_hook_add_one": [], "dist_autograd_test.DistAutogradTest.test_post_hooks.post_hook_add_two": [], "dist_autograd_test.DistAutogradTest._slow_add": ["time.sleep"], "dist_autograd_test.DistAutogradTest.test_thread_local_context_id": ["torch.rand", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.distributed.autograd.backward"], "torch.testing._internal.common_distributed.skip_if_lt_x_gpu": [], "dist_autograd_test.CudaDistAutogradTest": ["torch.testing._internal.dist_utils.dist_init", "torch.testing._internal.common_distributed.skip_if_lt_x_gpu"], "dist_autograd_test.CudaDistAutogradTest.test_gpu_simple": ["torch.rand", "torch.distributed.autograd.backward", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.autograd.context", "<builtin>.len", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.CudaDistAutogradTest.test_gpu_to_cpu_continuation": ["torch.rand", "<builtin>.range", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.CudaDistAutogradTest.test_gpu_to_cpu_continuation_gpu_root": ["torch.rand", "<builtin>.range", "dist_autograd_test.CommonDistAutogradTest._verify_backwards", "torch.distributed.autograd.context", "dist_autograd_test.CommonDistAutogradTest._exec_func"], "dist_autograd_test.FaultyAgentDistAutogradTest.context_cleanup_test_helper": ["torch.distributed.autograd._retrieve_context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "dist_autograd_test._all_contexts_cleaned_up", "<builtin>.range", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.barrier", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises"], "dist_autograd_test.FaultyAgentDistAutogradTest": ["torch.testing._internal.dist_utils.dist_init"], "dist_autograd_test.FaultyAgentDistAutogradTest.test_context_cleanup_tensor_with_grad": ["dist_autograd_test.FaultyAgentDistAutogradTest.context_cleanup_test_helper", "torch.zeros", "torch.ones"], "dist_autograd_test.FaultyAgentDistAutogradTest.test_verify_backend_options": ["<builtin>.len", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "dist_autograd_test.WrapperModule.__init__": ["<builtin>.super"], "dist_autograd_test.WrapperModule.forward": [], "dist_autograd_test.WrapperModule.gradients": ["torch.distributed.autograd.get_gradients"], "dist_autograd_test.TensorPipeCudaDistAutogradTest": ["torch.testing._internal.common_distributed.skip_if_lt_x_gpu"], "dist_autograd_test.TensorPipeCudaDistAutogradTest.test_device_maps_backward_pass": ["torch.rand", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.shutdown", "torch.distributed.autograd.context", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.init_rpc", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.autograd.backward", "torch.ones", "torch.distributed.autograd.get_gradients"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map": [], "dist_autograd_test.TensorPipeCudaDistAutogradTest.MyRemoteCompute.__init__": ["<builtin>.super"], "dist_autograd_test.TensorPipeCudaDistAutogradTest.MyRemoteCompute.forward": [], "dist_autograd_test.TensorPipeCudaDistAutogradTest.MyLocalCompute.__init__": ["<builtin>.super"], "dist_autograd_test.TensorPipeCudaDistAutogradTest.MyLocalCompute.forward": [], "dist_autograd_test.TensorPipeCudaDistAutogradTest.test_dist_autograd_sync_streams": ["torch.rand", "torch.distributed.rpc.remote", "random.random", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.distributed.rpc.shutdown", "torch.distributed.autograd.context", "torch.testing._internal.dist_utils.worker_name", "dist_autograd_test.TensorPipeCudaDistAutogradTest.MyLocalCompute.__init__", "torch.distributed.rpc.init_rpc", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.autograd.backward", "torch.distributed.autograd.get_gradients"], "dist_autograd_test.TensorPipeCudaDistAutogradTest.test_gradients_synchronizations": ["torch.nn.Sequential", "torch.distributed.rpc.remote", "torch.distributed.autograd.backward", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.distributed.rpc.shutdown", "<builtin>.zip", "torch.distributed.autograd.context", "torch.testing._internal.dist_utils.worker_name", "<builtin>.len", "torch.distributed.rpc.init_rpc", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.nn.Linear", "torch.randn"], "dist_optimizer_test": [], "dist_optimizer_test.MyModule": ["threading.Lock"], "dist_optimizer_test.MyModule.__init__": ["torch.Generator", "torch.rand"], "torch.Generator": [], "dist_optimizer_test.MyModule.forward": ["torch.mm"], "dist_optimizer_test.MyModule.get_w": [], "dist_optimizer_test.FailingOptimizer.__init__": ["<builtin>.super"], "dist_optimizer_test.FailingOptimizer.step": ["<builtin>.ValueError"], "dist_optimizer_test.OptimizerFailingOnConstructor.__init__": ["<builtin>.super", "<builtin>.ValueError"], "dist_optimizer_test.OptimizerFailingOnConstructor.step": [], "dist_optimizer_test._call_method": [], "dist_optimizer_test.remote_method": ["<builtin>.list", "torch.distributed.rpc.remote"], "dist_optimizer_test.rpc_async_method": ["<builtin>.list", "torch.distributed.rpc.rpc_async"], "dist_optimizer_test.DistOptimizerTest": ["torch.testing._internal.dist_utils.dist_init"], "dist_optimizer_test.DistOptimizerTest.test_dist_optim_exception": ["torch.Generator", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.rand", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.distributed.optim.DistributedOptimizer", "torch.add", "dist_optimizer_test.remote_method", "torch.distributed.rpc.remote", "dist_optimizer_test.rpc_async_method"], "dist_optimizer_test.DistOptimizerTest.test_dist_optim_exception_on_constructor": ["torch.distributed.optim.DistributedOptimizer", "dist_optimizer_test.remote_method", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.remote"], "dist_optimizer_test.DistOptimizerTest._test_dist_optim_base": ["torch.optim.Adagrad", "torch.optim.RMSprop", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "dist_optimizer_test.MyModule.get_w", "torch.optim.AdamW", "torch.distributed.autograd.context", "dist_optimizer_test.remote_method", "torch.optim.Adamax", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adadelta", "torch.distributed.optim.DistributedOptimizer", "torch.optim.Rprop", "torch.distributed.rpc.remote", "torch.Generator", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotEqual", "torch.rand", "dist_optimizer_test.MyModule.forward", "torch.distributed.autograd.backward", "torch.add", "dist_optimizer_test.MyModule.__init__", "dist_optimizer_test.rpc_async_method"], "torch.optim.Adadelta": [], "torch.optim.RMSprop": [], "torch.optim.Rprop": [], "torch.optim.AdamW": [], "torch.optim.Adagrad": [], "torch.optim.Adamax": [], "dist_optimizer_test.DistOptimizerTest.test_dist_optim": ["dist_optimizer_test.DistOptimizerTest._test_dist_optim_base"], "dist_optimizer_test.DistOptimizerTest._test_dist_optim_none_grads": ["dist_optimizer_test.MyModule.get_w", "torch.Generator", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotEqual", "torch.rand", "dist_optimizer_test.MyModule.forward", "torch.distributed.autograd.backward", "torch.optim.SGD", "torch.optim.Adadelta", "torch.optim.RMSprop", "torch.add", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.optim.DistributedOptimizer", "torch.distributed.autograd.context", "torch.optim.Rprop", "dist_optimizer_test.MyModule.__init__", "torch.distributed.rpc.remote"], "dist_optimizer_test.DistOptimizerTest.test_dist_optim_none_grads": ["dist_optimizer_test.DistOptimizerTest._test_dist_optim_none_grads"], "faulty_rpc_agent_test_fixture": [], "faulty_rpc_agent_test_fixture.FaultyRpcAgentTestFixture.__init__": ["<builtin>.super"], "faulty_rpc_agent_test_fixture.FaultyRpcAgentTestFixture.rpc_backend": [], "faulty_rpc_agent_test_fixture.FaultyRpcAgentTestFixture.rpc_backend_options": ["torch.distributed.rpc.backend_registry.construct_rpc_backend_options"], "torch.distributed.rpc.backend_registry.construct_rpc_backend_options": [], "faulty_rpc_agent_test_fixture.FaultyRpcAgentTestFixture.setup_fault_injection": [], "faulty_rpc_agent_test_fixture.FaultyRpcAgentTestFixture.get_shutdown_error_regex": [], "faulty_rpc_agent_test_fixture.FaultyRpcAgentTestFixture.get_timeout_error_regex": [], "functions": [], "functions.async_execution": ["functools.wraps"], "functions.async_execution.wrapper": [], "internal": ["threading.local", "collections.namedtuple", "internal._InternalRPCPickler.__init__"], "internal._InternalRPCPickler.__init__": ["copyreg.dispatch_table.copy"], "copyreg.dispatch_table.copy": [], "internal._InternalRPCPickler._register_reducer": [], "internal._InternalRPCPickler._tensor_receiver": [], "internal._InternalRPCPickler._tensor_reducer": ["<builtin>.len"], "internal._InternalRPCPickler._py_rref_receiver": ["torch.distributed.rpc.PyRRef._deserialize"], "torch.distributed.rpc.PyRRef._deserialize": [], "internal._InternalRPCPickler._py_rref_reducer": [], "internal._InternalRPCPickler._rref_reducer": ["internal._InternalRPCPickler._py_rref_reducer"], "internal._InternalRPCPickler._script_module_receiver": ["torch.jit.load", "io.BytesIO"], "torch.jit.load": [], "internal._InternalRPCPickler._script_module_reducer": ["io.BytesIO", "torch.jit.save"], "internal._InternalRPCPickler.serialize": ["io.BytesIO", "<builtin>.hasattr", "pickle.Pickler", "<builtin>.isinstance"], "pickle.Pickler": [], "internal._InternalRPCPickler.deserialize": ["io.BytesIO", "pickle.Unpickler", "<builtin>.AttributeError", "<builtin>.hasattr", "<builtin>.str"], "pickle.Unpickler": [], "internal.serialize": ["internal._InternalRPCPickler.serialize"], "internal.deserialize": ["internal._InternalRPCPickler.deserialize"], "internal._run_function": ["torch._C._distributed_rpc._get_current_rpc_agent", "traceback.format_exc", "<builtin>.repr", "<builtin>.isinstance", "<builtin>.print", "<builtin>.type"], "internal._handle_exception": ["<builtin>.isinstance"], "internal._start_record_function": ["torch.autograd._profiler_enabled", "torch.autograd._run_before_callbacks", "<builtin>.str", "torch.autograd._RecordFunction"], "torch.autograd._RecordFunction": [], "torch.autograd._run_before_callbacks": [], "options": [], "options._to_device": ["torch.device", "<builtin>.ValueError"], "options._to_device_map": ["torch.device", "<builtin>.ValueError"], "options._to_device_list": ["<builtin>.list", "<builtin>.map"], "options.TensorPipeRpcBackendOptions.__init__": ["options._to_device_map", "<builtin>.super", "options._to_device_list"], "options.TensorPipeRpcBackendOptions.set_device_map": ["options._to_device_map", "<builtin>.super", "<builtin>.ValueError"], "options.TensorPipeRpcBackendOptions.set_devices": ["options._to_device_list"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\distributed\\rpc\\process_group_agent_test_fixture": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\distributed\\rpc\\process_group_agent_test_fixture.ProcessGroupRpcAgentTestFixture.rpc_backend": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\distributed\\rpc\\process_group_agent_test_fixture.ProcessGroupRpcAgentTestFixture.rpc_backend_options": ["torch.distributed.rpc.backend_registry.construct_rpc_backend_options"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\distributed\\rpc\\process_group_agent_test_fixture.ProcessGroupRpcAgentTestFixture.get_shutdown_error_regex": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\distributed\\rpc\\process_group_agent_test_fixture.ProcessGroupRpcAgentTestFixture.get_timeout_error_regex": [], "rpc_agent_test_fixture": [], "rpc_agent_test_fixture.RpcAgentTestFixture.world_size": [], "rpc_agent_test_fixture.RpcAgentTestFixture.init_method": ["os.environ.get"], "rpc_agent_test_fixture.RpcAgentTestFixture.file_init_method": [], "rpc_agent_test_fixture.RpcAgentTestFixture": ["abc.abstractmethod"], "rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend": [], "rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options": [], "rpc_agent_test_fixture.RpcAgentTestFixture.setup_fault_injection": [], "rpc_agent_test_fixture.RpcAgentTestFixture.get_shutdown_error_regex": [], "rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex": [], "rpc_test": ["torch.distributed.rpc.functions.async_execution", "torch.jit.script", "collections.namedtuple", "torch.jit.ignore"], "rpc_test.foo_add": ["torch.add", "torch.ones"], "rpc_test.udf_with_torch_ops": ["torch.autograd.profiler.record_function", "torch.mul", "torch.ones", "torch.add", "contextlib.suppress", "torch.cuda.device"], "rpc_test._increment_count": [], "rpc_test._reset_count": [], "rpc_test.StubRpcAgent.__init__": [], "rpc_test.StubRpcAgent.get_worker_infos": ["<builtin>.range", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.WorkerInfo"], "torch.distributed.rpc.WorkerInfo": [], "rpc_test._stub_construct_rpc_backend_options_handler": ["unittest.mock.Mock"], "unittest.mock.Mock": [], "rpc_test._stub_init_rpc_backend_handler": ["rpc_test.StubRpcAgent.__init__"], "rpc_test.set_value": [], "rpc_test.wait_for_value_future": [], "rpc_test.set_and_check_done": [], "rpc_test.MyPickleClass.__init__": [], "rpc_test.MyPickleClass.__getstate__": ["torch.ones", "torch.distributed.rpc.internal._internal_rpc_pickler.serialize", "torch.distributed.rpc.internal.PythonUDF"], "torch.distributed.rpc.internal.PythonUDF": [], "torch.distributed.rpc.internal._internal_rpc_pickler.serialize": [], "rpc_test.MyPickleClass.__setstate__": ["torch.distributed.rpc.internal._internal_rpc_pickler.deserialize"], "torch.distributed.rpc.internal._internal_rpc_pickler.deserialize": [], "rpc_test.MyPickleClass.set": [], "rpc_test.SlowPickleClass.__init__": [], "rpc_test.SlowPickleClass.__getstate__": ["time.sleep"], "rpc_test.SlowPickleClass.__setstate__": ["time.sleep"], "rpc_test.MyClass.__init__": ["time.sleep"], "rpc_test.MyClass.my_instance_method": [], "rpc_test.MyClass.my_class_method": [], "rpc_test.MyClass.my_static_method": [], "rpc_test.MyClass.increment_value": [], "rpc_test.MyClass.get_value": [], "rpc_test.MyClass.my_slow_method": ["torch.add", "time.sleep"], "rpc_test._call_method_on_rref": [], "rpc_test.get_rref_list": ["rpc_test.MyClass.__init__", "torch.distributed.rpc.RRef"], "rpc_test.add_rref_to_value": [], "rpc_test.run_nested_pickle": [], "rpc_test.build_sparse_tensor": ["torch.sparse_coo_tensor"], "rpc_test.build_complex_tensors": ["torch.ones"], "rpc_test.non_cont_test": ["torch.equal", "<builtin>.Exception"], "rpc_test.my_function": [], "rpc_test.my_tensor_function": [], "rpc_test.my_sleep_func": ["time.sleep", "torch.mul", "torch.tensor"], "rpc_test.my_complex_tensor_function": [], "rpc_test.my_rref_function": [], "rpc_test.delayed_add": ["time.sleep"], "rpc_test.no_result": ["<builtin>.print"], "rpc_test.raise_or_inc": ["<builtin>.ValueError"], "rpc_test.nested_rpc": ["torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.multi_layer_nested_async_rpc": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_async"], "rpc_test.nested_rref": ["torch.ones", "torch.distributed.rpc.remote"], "rpc_test.nested_remote": ["torch.ones", "torch.distributed.rpc.remote"], "rpc_test.rref_forward_chain": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.rpc_return_rref": ["torch.ones", "torch.distributed.rpc.remote"], "rpc_test.light_rpc": [], "rpc_test.heavy_rpc": ["<builtin>.range"], "rpc_test.heavy_rpc_torchscript": ["<builtin>.range"], "rpc_test.my_script_func": ["torch.add"], "rpc_test.raise_func": ["<builtin>.ValueError"], "rpc_test.raise_func_script": ["<builtin>.ValueError"], "rpc_test.raise_func_escape": ["<builtin>.ValueError"], "rpc_test.set_global_rref": [], "rpc_test.clear_global_rref": [], "rpc_test.check_rref_confirmed": [], "rpc_test.get_rref_debug_info": ["torch.distributed.rpc._rref_context_get_debug_info"], "torch.distributed.rpc._rref_context_get_debug_info": [], "rpc_test.add_use_future_cb": ["torch.distributed.rpc.rpc_async"], "rpc_test.add_use_future_cb.callback": [], "rpc_test.get_events_from_profile": [], "rpc_test.add_use_future_set_result": ["torch.distributed.rpc.rpc_async", "torch.futures.Future"], "torch.futures.Future": [], "rpc_test.add_use_future_set_result.<lambda1>": [], "rpc_test.add_use_future_nested_cb": ["torch.distributed.rpc.rpc_async", "torch.futures.Future"], "rpc_test.add_use_future_nested_cb.callback": ["torch.distributed.rpc.rpc_async"], "rpc_test.add_use_future_nested_cb.callback.<lambda1>": [], "rpc_test.fail_on_fut": [], "torch.distributed.rpc.functions.async_execution": [], "rpc_test.async_raise_func": ["<builtin>.RuntimeError"], "rpc_test.async_wrong_type": ["torch.zeros"], "rpc_test.async_add": ["torch.distributed.rpc.rpc_async"], "rpc_test.slow_add": ["torch.add", "time.sleep"], "rpc_test.slow_async_add": ["torch.distributed.rpc.rpc_async"], "rpc_test.async_add_with_future_ctor": ["torch.distributed.rpc.rpc_async", "torch.futures.Future"], "rpc_test.async_add_with_future_ctor.<lambda1>": [], "rpc_test.async_add_chained": ["torch.distributed.rpc.rpc_async"], "rpc_test.async_add_chained.<lambda1>": [], "rpc_test.async_add_chained_multi": ["<builtin>.range", "torch.distributed.rpc.rpc_async"], "rpc_test.async_add_chained_multi.<lambda1>": [], "rpc_test.async_add_nested": ["torch.distributed.rpc.rpc_async"], "rpc_test.async_add_nested.<lambda1>": [], "rpc_test.async_add_multi_fanout": ["torch.zeros_like", "threading.Lock", "<builtin>.range", "torch.distributed.rpc.rpc_async", "torch.futures.Future"], "rpc_test.async_add_multi_fanout.inc_and_set": ["<builtin>.len"], "rpc_test.async_cuda_sleep_and_set_to_one": ["rpc_test.get_cycles_per_ms", "torch.cuda.current_stream", "torch.cuda._sleep", "<builtin>.int", "torch.cuda.stream", "torch.cuda.Stream", "torch.futures.Future"], "torch.cuda.current_stream": [], "rpc_test.get_cycles_per_ms": ["torch.cuda.Event", "torch.cuda._sleep"], "torch.cuda._sleep": [], "rpc_test.async_cuda_nested_add": ["torch.distributed.rpc.rpc_async"], "rpc_test.async_cuda_nested_add.cb": ["torch.cuda._sleep", "<builtin>.int", "rpc_test.get_cycles_per_ms"], "rpc_test.TensorWrapper.__init__": ["torch.cuda.Event", "threading.Lock"], "rpc_test.TensorWrapper.increase": [], "rpc_test.TensorWrapper.sum": [], "rpc_test.AsyncExecutionClass": ["torch.distributed.rpc.functions.async_execution"], "rpc_test.AsyncExecutionClass.static_async_add": ["torch.distributed.rpc.rpc_async"], "rpc_test.AsyncExecutionClass.static_async_add.<lambda1>": [], "rpc_test.AsyncExecutionClass.class_async_add": ["torch.distributed.rpc.rpc_async", "torch.futures.Future"], "rpc_test.AsyncExecutionClass.class_async_add.<lambda1>": [], "rpc_test.AsyncExecutionClass.bound_async_add": ["torch.distributed.rpc.rpc_async"], "rpc_test.AsyncExecutionClass.bound_async_add.<lambda1>": [], "rpc_test.return_future": ["torch.futures.Future"], "rpc_test.FooBackendOptions.__init__": ["torch.distributed.rpc.RpcBackendOptions.__init__"], "torch.distributed.rpc.RpcBackendOptions.__init__": [], "rpc_test.RpcTest": ["os.environ.get", "unittest.mock.patch.object", "torch.testing._internal.dist_utils.dist_init", "torch.testing._internal.common_utils.sandcastle_skip_if"], "rpc_test.RpcTest.test_worker_id": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.get_worker_info", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "torch.distributed.rpc.get_worker_info": [], "rpc_test.RpcTest.test_get_worker_infos": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.api._get_current_rpc_agent", "<builtin>.range", "<builtin>.set"], "torch.distributed.rpc.api._get_current_rpc_agent": [], "rpc_test.RpcTest.test_self_add": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_send_to_rank": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises", "rpc_test.RpcTest._run_func_in_mode"], "rpc_test.RpcTest._run_func_in_mode": ["torch.distributed.rpc.rpc_async", "torch.distributed.rpc.remote", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_self_py_udf_remote": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.get_worker_info", "torch.distributed.rpc.remote"], "rpc_test.RpcTest._test_self_remote_rref_as_rpc_arg": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.remote", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_self_remote_rref_as_rpc_arg": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.RpcTest._test_self_remote_rref_as_rpc_arg"], "rpc_test.RpcTest.test_self_remote_rref_as_self_rpc_arg": ["torch.distributed.rpc.get_worker_info", "rpc_test.RpcTest._test_self_remote_rref_as_rpc_arg"], "rpc_test.RpcTest._test_self_remote_rref_as_remote_arg": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.get_worker_info", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_self_remote_rref_as_remote_arg": ["rpc_test.RpcTest._test_self_remote_rref_as_remote_arg", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.RpcTest.test_rref_proxy_non_exist": ["torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.remote"], "rpc_test.RpcTest._test_rref_proxy_tensor": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_rref_proxy_tensor": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.RpcTest._test_rref_proxy_tensor"], "rpc_test.RpcTest.test_rref_proxy_tensor_self": ["rpc_test.RpcTest._test_rref_proxy_tensor", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_rref_proxy_reuse": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest._test_rref_proxy_class": ["rpc_test.MyClass.__init__", "rpc_test.MyClass.my_class_method", "rpc_test.MyClass.get_value", "rpc_test.MyClass.increment_value", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.ones", "rpc_test.MyClass.my_static_method", "rpc_test.MyClass.my_instance_method", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_rref_proxy_class": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.RpcTest._test_rref_proxy_class"], "rpc_test.RpcTest.test_rref_proxy_class_self": ["rpc_test.RpcTest._test_rref_proxy_class", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_self_remote_rref_as_self_remote_arg": ["rpc_test.RpcTest._test_self_remote_rref_as_remote_arg", "torch.distributed.rpc.get_worker_info"], "unittest.mock.patch.object": [], "rpc_test.RpcTest.test_register_rpc_backend_and_set_and_start_rpc_backend": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc", "torch.distributed.rpc.backend_registry.register_backend"], "torch.distributed.rpc.backend_registry.register_backend": [], "rpc_test.RpcTest.test_duplicate_name": ["torch.distributed.rpc._init_rpc_backend", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rendezvous", "<builtin>.next"], "torch.distributed.rendezvous": [], "torch.distributed.rpc._init_rpc_backend": [], "rpc_test.RpcTest.test_duplicate_name_2": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_reinit": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.rpc.shutdown", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "os.environ.get", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_world_size_one": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.remote", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_invalid_names": ["<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.WorkerInfo"], "rpc_test.RpcTest.test_add": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.return_callee_id": ["torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_int_callee": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_add_with_id": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_scalar_add": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_async_add": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_async"], "rpc_test.RpcTest.test_nonzero": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_multi_rpc": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest._run_uneven_workload": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.futures.wait_all", "torch.futures.collect_all"], "torch.futures.collect_all": [], "rpc_test.RpcTest.test_wait_all_workers": ["rpc_test.RpcTest._run_uneven_workload", "torch.distributed.rpc.api._wait_all_workers", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.rpc.shutdown", "torch.distributed.barrier", "torch.distributed.rpc.init_rpc"], "torch.distributed.rpc.api._wait_all_workers": [], "rpc_test.RpcTest.test_wait_all_workers_twice": ["rpc_test.RpcTest._run_uneven_workload", "torch.distributed.rpc.api._wait_all_workers", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.rpc.shutdown", "torch.distributed.barrier", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_all_gather": ["torch.distributed.rpc.api._all_gather", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc._get_current_rpc_agent", "torch.distributed.rpc.get_worker_info"], "torch.distributed.rpc.api._all_gather": [], "torch.distributed.rpc._get_current_rpc_agent": [], "rpc_test.RpcTest.test_all_gather_timeout": ["torch.distributed.rpc._set_rpc_timeout", "torch.distributed.rpc.api._all_gather", "rpc_test.SlowPickleClass.__init__", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex": [], "rpc_test.RpcTest._test_barrier_helper": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.api._barrier", "torch.distributed.rpc.rpc_sync", "<builtin>.sorted", "<builtin>.len"], "torch.distributed.rpc.api._barrier": [], "rpc_test.RpcTest.test_rpc_barrier_all": ["rpc_test.RpcTest._test_barrier_helper", "torch.distributed.rpc._get_current_rpc_agent", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_rpc_barrier_subset": ["rpc_test.RpcTest._test_barrier_helper", "torch.distributed.rpc._get_current_rpc_agent", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_rpc_barrier_partial_subset": ["rpc_test.RpcTest._test_barrier_helper", "torch.distributed.rpc._get_current_rpc_agent", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_rpc_barrier_multithreaded": ["<builtin>.range", "threading.Thread", "torch.distributed.rpc._get_current_rpc_agent", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_graceful_shutdown_with_uneven_workload": ["rpc_test.RpcTest._run_uneven_workload"], "rpc_test.RpcTest.test_shutdown_followed_by_rpc": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_expected_src": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_py_built_in": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "<builtin>.min"], "rpc_test.RpcTest.test_py_user_defined": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "rpc_test.my_function"], "rpc_test.RpcTest.test_build_rpc_profiling_key": ["torch.distributed.rpc.internal._build_rpc_profiling_key", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn"], "torch.distributed.rpc.internal._build_rpc_profiling_key": [], "rpc_test.RpcTest.check_profiling_info": ["torch._jit_internal._qualified_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "<builtin>.isinstance"], "rpc_test.RpcTest.test_profiler_rpc_record_shapes": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.autograd.profiler_legacy.profile", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.add"], "torch.autograd.profiler_legacy.profile": [], "rpc_test.RpcTest.test_profiler_rpc_memory": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.autograd.profiler_legacy.profile", "torch.distributed.rpc.rpc_async", "<builtin>.set", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotEqual"], "rpc_test.RpcTest.test_profiler_export_trace": ["<builtin>.open", "torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.common_utils.TemporaryFileName", "torch.autograd.profiler_legacy.profile", "<builtin>.any", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "json.load"], "torch.testing._internal.common_utils.TemporaryFileName": [], "rpc_test.RpcTest.test_profiler_rpc_key_names": ["<builtin>.range", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.RpcTest.test_profiler_rpc_key_names.rpc_with_profiling": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.internal._build_rpc_profiling_key", "torch.autograd.profiler_legacy.profile", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "<builtin>.len", "<builtin>.set", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest._run_test_profiler_remote_events_profiled": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.internal._build_rpc_profiling_key", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "rpc_test.RpcTest._run_test_profiler_remote_events_profiled.convert_remote_to_local", "rpc_test.RpcTest.check_profiling_info", "torch.autograd.profiler_legacy.profile", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "<builtin>.set", "torch.testing._internal.dist_utils.get_function_event"], "torch.testing._internal.dist_utils.get_function_event": [], "rpc_test.RpcTest._run_test_profiler_remote_events_profiled.convert_remote_to_local": ["<builtin>.len"], "rpc_test.RpcTest.test_profiler_remote_events_profiled": ["rpc_test.RpcTest._run_test_profiler_remote_events_profiled"], "rpc_test.RpcTest.test_profiler_remote_events_profiled_single_threaded": ["rpc_test.RpcTest._run_test_profiler_remote_events_profiled"], "rpc_test.RpcTest.run_profiling_workload": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_async", "torch.tensor"], "rpc_test.RpcTest._run_rpc_profiling_async_function": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.internal._build_rpc_profiling_key", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.autograd.profiler_legacy.profile", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.jit._builtins._find_builtin", "<builtin>.len"], "rpc_test.RpcTest.test_rpc_profiling_async_function": ["torch.distributed.barrier", "rpc_test.RpcTest._run_rpc_profiling_async_function", "torch.testing._internal.dist_utils.initialize_pg", "torch.cuda.is_available"], "rpc_test.RpcTest.test_rpc_profiling_async_function_single_threaded": ["torch.distributed.barrier", "rpc_test.RpcTest._run_rpc_profiling_async_function", "torch.testing._internal.dist_utils.initialize_pg", "torch.cuda.is_available"], "rpc_test.RpcTest.test_rpc_profiling_remote_record_function": ["rpc_test.RpcTest.test_rpc_profiling_remote_record_function.get_cpu_children", "torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "rpc_test.RpcTest.test_rpc_profiling_remote_record_function.convert_remote_to_local", "torch.autograd.profiler_legacy.profile", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "<builtin>.len", "rpc_test.udf_with_torch_ops"], "rpc_test.RpcTest.test_rpc_profiling_remote_record_function.get_cpu_children": ["rpc_test.RpcTest.test_rpc_profiling_remote_record_function.get_cpu_children"], "rpc_test.RpcTest.test_rpc_profiling_remote_record_function.convert_remote_to_local": ["<builtin>.len"], "rpc_test.RpcTest.validate_profiling_workload": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "rpc_test.RpcTest.check_profiling_info", "rpc_test.RpcTest.validate_profiling_workload.convert_remote_to_local", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue"], "rpc_test.RpcTest.validate_profiling_workload.convert_remote_to_local": ["<builtin>.len"], "rpc_test.RpcTest._run_test_profiler_with_autograd_context": ["rpc_test.RpcTest.run_profiling_workload", "rpc_test.RpcTest.validate_profiling_workload", "torch.distributed.autograd.context", "torch.autograd.profiler_legacy.profile"], "rpc_test.RpcTest.test_profiler_with_autograd_context_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_autograd_context"], "rpc_test.RpcTest.test_profiler_with_autograd_context": ["rpc_test.RpcTest._run_test_profiler_with_autograd_context"], "rpc_test.RpcTest._profiler_test_with_rpc": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertLessEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertGreaterEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.next", "torch.autograd.profiler.record_function", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertLess", "rpc_test.RpcTest.check_profiling_info", "torch.autograd.profiler_legacy.profile", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.rpc_async", "<builtin>.len", "<builtin>.enumerate", "torch.distributed.rpc.remote", "contextlib.suppress", "torch.testing._internal.dist_utils.get_function_event"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertGreaterEqual": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertLessEqual": [], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertLess": [], "rpc_test.RpcTest._run_test_profiler_with_sync_rpc_udf": ["rpc_test.RpcTest._profiler_test_with_rpc"], "rpc_test.RpcTest.test_profiler_with_sync_rpc_udf": ["rpc_test.RpcTest._run_test_profiler_with_sync_rpc_udf"], "rpc_test.RpcTest.test_profiler_with_sync_rpc_udf_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_sync_rpc_udf"], "rpc_test.RpcTest._run_test_profiler_with_sync_rpc_builtin": ["torch.ones", "rpc_test.RpcTest._profiler_test_with_rpc"], "rpc_test.RpcTest.test_profiler_with_sync_rpc_builtin": ["rpc_test.RpcTest._run_test_profiler_with_sync_rpc_builtin"], "rpc_test.RpcTest.test_profiler_with_sync_rpc_builtin_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_sync_rpc_builtin"], "rpc_test.RpcTest._run_test_profiler_with_async_rpc_udf": ["rpc_test.RpcTest._profiler_test_with_rpc"], "rpc_test.RpcTest.test_profiler_with_async_rpc_udf": ["rpc_test.RpcTest._run_test_profiler_with_async_rpc_udf"], "rpc_test.RpcTest.test_profiler_with_async_rpc_udf_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_async_rpc_udf"], "rpc_test.RpcTest._run_test_profiler_with_async_rpc_builtin": ["torch.ones", "rpc_test.RpcTest._profiler_test_with_rpc"], "rpc_test.RpcTest.test_profiler_with_async_rpc_builtin": ["rpc_test.RpcTest._run_test_profiler_with_async_rpc_builtin"], "rpc_test.RpcTest.test_profiler_with_async_rpc_builtin_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_async_rpc_builtin"], "rpc_test.RpcTest._run_test_profiler_with_remote_udf": ["rpc_test.RpcTest._profiler_test_with_rpc"], "rpc_test.RpcTest.test_profiler_with_remote_udf": ["rpc_test.RpcTest._run_test_profiler_with_remote_udf"], "rpc_test.RpcTest.test_profiler_with_remote_udf_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_remote_udf"], "rpc_test.RpcTest._run_test_profiler_with_remote_builtin": ["torch.ones", "rpc_test.RpcTest._profiler_test_with_rpc"], "rpc_test.RpcTest.test_profiler_with_remote_builtin": ["rpc_test.RpcTest._run_test_profiler_with_remote_builtin"], "rpc_test.RpcTest.test_profiler_with_remote_builtin_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_remote_builtin"], "rpc_test.RpcTest._run_test_profiler_with_script_async_rpc": ["rpc_test.RpcTest._profiler_test_with_rpc", "torch.tensor"], "rpc_test.RpcTest.test_profiler_with_script_async_rpc": ["rpc_test.RpcTest._run_test_profiler_with_script_async_rpc"], "rpc_test.RpcTest.test_profiler_with_script_async_rpc_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_script_async_rpc"], "rpc_test.RpcTest._run_test_profiler_with_script_sync_rpc": ["rpc_test.RpcTest._profiler_test_with_rpc", "torch.tensor"], "rpc_test.RpcTest.test_profiler_with_script_sync_rpc": ["rpc_test.RpcTest._run_test_profiler_with_script_sync_rpc"], "rpc_test.RpcTest.test_profiler_with_script_sync_rpc_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_script_sync_rpc"], "rpc_test.RpcTest._run_test_profiler_with_script_remote_rpc": ["rpc_test.RpcTest._profiler_test_with_rpc", "torch.tensor"], "rpc_test.RpcTest.test_profiler_with_script_remote_rpc": ["rpc_test.RpcTest._run_test_profiler_with_script_remote_rpc"], "rpc_test.RpcTest.test_profiler_with_script_remote_rpc_single_threaded": ["rpc_test.RpcTest._run_test_profiler_with_script_remote_rpc"], "rpc_test.RpcTest._assert_top_level_events": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.sorted"], "rpc_test.RpcTest.test_server_process_global_profiler": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.RpcTest._assert_top_level_events", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.remote", "torch.tensor"], "rpc_test.RpcTest.test_async_record_function_double_end_callbacks": ["torch.testing._internal.dist_utils.worker_name", "torch.autograd.profiler.record_function", "torch.autograd.profiler_legacy.profile", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_async_record_function_cbs_jit_call": ["torch.testing._internal.dist_utils.worker_name", "torch.add", "torch.distributed.rpc.internal._build_rpc_profiling_key", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ops.profiler._call_end_callbacks_on_jit_fut", "torch.autograd.profiler.record_function", "torch.autograd.profiler_legacy.profile", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch._jit_internal._qualified_name", "torch.testing._internal.dist_utils.get_function_event", "torch.tensor"], "torch.ops.profiler._call_end_callbacks_on_jit_fut": [], "rpc_test.RpcTest.test_py_class_constructor": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_py_class_instance_method": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.MyClass.__init__", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.rpc_sync", "rpc_test.MyClass.my_instance_method"], "rpc_test.RpcTest.test_py_class_method": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "rpc_test.MyClass.my_class_method"], "rpc_test.RpcTest.test_py_class_static_method": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "rpc_test.MyClass.my_static_method", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_py_multi_async_call": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "rpc_test.MyClass.my_static_method", "torch.distributed.rpc.rpc_async", "<builtin>.min", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_py_no_return_result": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "rpc_test.no_result"], "rpc_test.RpcTest.test_py_tensors": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "rpc_test.my_tensor_function", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_py_tensors_multi_async_call": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "rpc_test.my_tensor_function", "<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.futures.wait_all"], "rpc_test.RpcTest.test_py_tensors_in_container": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.rpc_sync", "rpc_test.build_complex_tensors", "rpc_test.my_complex_tensor_function"], "rpc_test.RpcTest.test_py_nested_pickle": ["rpc_test.run_nested_pickle", "torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "rpc_test.my_tensor_function", "torch.ones", "rpc_test.MyPickleClass.set", "torch.distributed.rpc.rpc_sync", "rpc_test.MyPickleClass.__init__"], "rpc_test.RpcTest.test_py_function_exception": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_py_raise_in_user_func": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.dist_utils.initialize_pg", "torch.testing._internal.common_distributed.captured_output", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "torch.testing._internal.common_distributed.captured_output": [], "rpc_test.RpcTest.test_py_raise_in_user_func_escaped_str": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "<builtin>.str"], "rpc_test.RpcTest.test_nested_rpc": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest._stress_test_rpc": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.distributed.rpc.rpc_async", "<builtin>.print", "torch.futures.wait_all", "time.time"], "rpc_test.RpcTest.test_stress_light_rpc": ["rpc_test.RpcTest._stress_test_rpc"], "rpc_test.RpcTest.test_stress_heavy_rpc": ["torch.ones", "rpc_test.RpcTest._stress_test_rpc"], "rpc_test.RpcTest.test_stress_heavy_rpc_torchscript": ["torch.ones", "rpc_test.RpcTest._stress_test_rpc"], "rpc_test.RpcTest.test_builtin_remote_ret": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_builtin_remote_self": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest._test_multi_remote_call": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.RpcTest.test_multi_py_udf_remote.kwargs_fn", "rpc_test.my_function", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "rpc_test.RpcTest.<lambda2>", "rpc_test.RpcTest.test_multi_builtin_remote_ret.args_fn", "rpc_test.RpcTest.<lambda1>", "torch.add", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_multi_builtin_remote_ret.args_fn": ["torch.ones"], "rpc_test.RpcTest.<lambda1>": [], "rpc_test.RpcTest.<lambda2>": [], "rpc_test.RpcTest.test_multi_py_udf_remote.kwargs_fn": ["torch.ones"], "rpc_test.RpcTest.test_multi_builtin_remote_ret": ["rpc_test.RpcTest._test_multi_remote_call"], "rpc_test.RpcTest.test_py_udf_remote": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote", "rpc_test.my_function"], "rpc_test.RpcTest.test_multi_py_udf_remote": ["rpc_test.RpcTest._test_multi_remote_call"], "rpc_test.RpcTest.test_py_rref_args": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_py_rref_args_user_share": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_py_rpc_rref_args": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_nested_remote": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_nested_rref": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "<builtin>.len", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_nested_rref_stress": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.ones", "<builtin>.len", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_multi_layer_nested_async_rpc": ["rpc_test.multi_layer_nested_async_rpc"], "rpc_test.RpcTest.test_remote_with_exception": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_rpc_return_rref": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_rref_forward_chain": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.ones", "<builtin>.len", "torch.add", "rpc_test.rref_forward_chain"], "rpc_test.RpcTest.test_local_rref_no_fork": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.RRef"], "rpc_test.RpcTest.test_local_value_not_on_owner": ["torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_return_local_rrefs": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest._test_rref_type": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.type", "torch.autograd.profiler_legacy.profile", "<builtin>.range", "torch.ones", "rpc_test.RpcTest._test_rref_type.launched_rpc", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.distributed.rpc.remote"], "rpc_test.RpcTest._test_rref_type.launched_rpc": ["<builtin>.any"], "rpc_test.RpcTest._test_rref_type.verify": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "rpc_test.RpcTest.test_rref_type_blocking": ["rpc_test.RpcTest._test_rref_type"], "rpc_test.RpcTest.test_rref_type_non_blocking": ["rpc_test.RpcTest._test_rref_type"], "rpc_test.RpcTest._test_rref_type_with_error": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_rref_type_with_error_blocking": ["rpc_test.RpcTest._test_rref_type_with_error"], "rpc_test.RpcTest.test_rref_type_with_error_non_blocking": ["rpc_test.RpcTest._test_rref_type_with_error"], "rpc_test.RpcTest._test_rref_type_owner": ["rpc_test.MyClass.__init__", "torch.distributed.rpc.RRef", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.type", "torch.ones"], "rpc_test.RpcTest.test_rref_type_owner_blocking": ["rpc_test.RpcTest._test_rref_type_owner"], "rpc_test.RpcTest.test_rref_type_owner_non_blocking": ["rpc_test.RpcTest._test_rref_type_owner"], "rpc_test.RpcTest._slow_add": ["time.sleep"], "rpc_test.RpcTest.test_rref_type_slow_init": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.type", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_owner_equality": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.RRef", "<builtin>.dict", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "<builtin>.len", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotEqual", "torch.distributed.rpc.get_worker_info"], "rpc_test.RpcTest.test_pass_local_rrefs": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.RRef", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_remote_same_worker": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_call_method_on_rref": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.sum", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.remote"], "rpc_test.RpcTest._test_rref_leak": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.barrier", "torch.distributed.rpc.remote", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_rref_leak": ["rpc_test.RpcTest._test_rref_leak"], "rpc_test.RpcTest.test_ignore_rref_leak": ["rpc_test.RpcTest._test_rref_leak"], "rpc_test.RpcTest.test_rref_str": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.RRef", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_rref_get_future": ["torch.testing._internal.dist_utils.worker_name", "torch.tensor", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIsInstance", "torch.distributed.rpc.remote"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIsInstance": [], "rpc_test.RpcTest.test_rref_context_debug_info": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed", "torch.distributed.rpc.RRef", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "time.sleep", "torch.testing._internal.dist_utils.initialize_pg", "torch.ones", "<builtin>.int", "torch.distributed.rpc.rpc_sync", "torch.distributed.barrier", "torch.distributed.rpc._rref_context_get_debug_info", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn"], "torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed": [], "rpc_test.RpcTest.test_disable_gil_profiling": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.api._get_current_rpc_agent", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.enable_gil_profiling", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn"], "rpc_test.RpcTest.test_disable_gil_profiling.<lambda1>": [], "torch.distributed.rpc.enable_gil_profiling": [], "rpc_test.RpcTest.test_local_shutdown": ["torch.distributed.rpc.init_rpc", "torch.distributed.rpc.shutdown"], "rpc_test.RpcTest.test_debug_info": ["torch.distributed.rpc._get_debug_info", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.autograd._get_debug_info", "torch.distributed.rpc.api._get_current_rpc_agent", "<builtin>.len", "torch.distributed.rpc._rref_context_get_debug_info", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn"], "torch.distributed.rpc._get_debug_info": [], "rpc_test.RpcTest.test_handle_send_exceptions": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc._set_rpc_timeout", "torch.testing._internal.dist_utils.initialize_pg", "torch.testing._internal.dist_utils.wait_until_node_failure", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_shutdown_error_regex", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_deadlock": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.is_initialized", "torch.distributed.init_process_group", "torch.ones", "torch.distributed.rpc.rpc_async"], "torch.distributed.is_initialized": [], "rpc_test.RpcTest.test_local_shutdown_with_rpc": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.barrier", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_set_and_get_default_rpc_timeout": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.shutdown", "torch.distributed.rpc.get_rpc_timeout", "torch.distributed.rpc.init_rpc"], "torch.distributed.rpc.get_rpc_timeout": [], "rpc_test.RpcTest.test_default_timeout_used": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc._set_rpc_timeout", "<builtin>.range", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_rpc_timeouts": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc._set_rpc_timeout", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_dist_init_decorator": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "rpc_test.RpcTest.test_dist_init_decorator.test_func", "torch.testing._internal.dist_utils.dist_init"], "rpc_test.RpcTest.test_dist_init_decorator.test_func": [], "rpc_test.RpcTest.test_use_rpc_pickler": ["torch.distributed.rpc.api._use_rpc_pickler", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue"], "torch.distributed.rpc.api._use_rpc_pickler": [], "rpc_test.RpcTest.test_wait_all": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.api._wait_all", "<builtin>.hasattr", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.isinstance", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "<builtin>.len"], "torch.distributed.rpc.api._wait_all": [], "rpc_test.RpcTest.test_wait_all_multiple_call": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.api._wait_all", "<builtin>.hasattr", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.rpc_sync", "<builtin>.len", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse"], "rpc_test.RpcTest.test_wait_all_timeout": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.api._wait_all", "<builtin>.hasattr", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_wait_all_raise_in_user_func": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.api._wait_all", "<builtin>.hasattr", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises"], "rpc_test.RpcTest.test_wait_all_raise_in_body": ["<builtin>.hasattr", "torch.distributed.rpc.api._wait_all", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises", "rpc_test.raise_func"], "rpc_test.RpcTest.timed_out_rpc": [], "rpc_test.RpcTest.test_wait_all_exit_early_python": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.rpc.rpc_async", "torch.futures.wait_all", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "threading.Event"], "rpc_test.RpcTest.test_wait_all_exit_early_builtin": ["torch.testing._internal.dist_utils.worker_name", "torch.rand", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.rpc.rpc_async", "torch.futures.wait_all", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "threading.Event"], "rpc_test.RpcTest.test_wait_all_exit_early_script_function": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.rpc.rpc_async", "torch.futures.wait_all", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "threading.Event"], "rpc_test.RpcTest.test_function_not_on_callee": ["<builtin>.hasattr", "<builtin>.delattr", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_sync", "rpc_test.wait_for_value_future", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_non_garbage_collected_user_rref_due_to_local_circular_dependency": ["torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote", "rpc_test.MyClass.__init__"], "rpc_test.RpcTest.test_use_rref_after_shutdown": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.remote", "torch.distributed.rpc.internal.serialize", "torch.distributed.rpc.init_rpc"], "torch.distributed.rpc.internal.serialize": [], "rpc_test.RpcTest._return_gpu_tensor": ["torch.rand"], "rpc_test.RpcTest._return_gpu_tensor_list": ["torch.rand"], "rpc_test.RpcTest._gpu_tensor_list_arg": ["torch.rand"], "rpc_test.RpcTest._create_rref": ["torch.testing._internal.dist_utils.worker_name", "torch.zeros", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_user_rrefs_confirmed": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "rpc_test.RpcTest._create_rref"], "rpc_test.RpcTest.test_user_rrefs_confirmed_remote": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote", "rpc_test.RpcTest._create_rref"], "rpc_test.RpcTest.test_rref_py_pickle_not_supported": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.common_utils.TemporaryFileName", "torch.distributed.rpc.RRef", "torch.save"], "rpc_test.RpcTest.test_remote_throw": ["torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_non_cont_tensors": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.rand", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_callback_simple": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_async"], "rpc_test.RpcTest.test_callback_simple.callback": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones"], "rpc_test.RpcTest.test_callback_wrong_arg_num": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_callback_wrong_arg_type": ["torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_callback_wrong_arg_type.<lambda1>": [], "rpc_test.RpcTest.test_callback_multi": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "functools.partial", "<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_async"], "rpc_test.RpcTest.test_callback_multi.callback": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones"], "rpc_test.RpcTest.test_callback_chain": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_async"], "rpc_test.RpcTest.test_callback_chain.callback": [], "rpc_test.RpcTest.test_callback_in_rpc": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_callback_with_ret": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_async"], "rpc_test.RpcTest.test_callback_with_ret.callback": ["torch.distributed.rpc.rpc_async"], "rpc_test.RpcTest.test_callback_with_ret.callback.<lambda1>": [], "rpc_test.RpcTest.test_callback_with_error": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_callback_with_error.callback": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "<builtin>.RuntimeError"], "rpc_test.RpcTest.test_callback_none": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_add_done_callback": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async"], "rpc_test.RpcTest.test_add_done_callback.callback": [], "rpc_test.RpcTest.test_add_done_callback.<lambda1>": [], "rpc_test.RpcTest.test_mark_future_twice": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_pickle_future": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.common_utils.TemporaryFileName", "torch.distributed.rpc.remote", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.futures.Future"], "rpc_test.RpcTest.test_future_done": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.zeros"], "rpc_test.RpcTest.test_future_done_exception": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest._test_future_cb": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest.test_future_in_rpc": ["rpc_test.RpcTest._test_future_cb"], "rpc_test.RpcTest.test_future_nested_callback": ["rpc_test.RpcTest._test_future_cb"], "rpc_test.RpcTest._test_async_function_raise": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "rpc_test.RpcTest._run_func_in_mode"], "rpc_test.RpcTest.test_async_function_raise": ["rpc_test.RpcTest._test_async_function_raise"], "rpc_test.RpcTest.test_async_function_raise_async": ["rpc_test.RpcTest._test_async_function_raise"], "rpc_test.RpcTest.test_async_function_raise_remote": ["rpc_test.RpcTest._test_async_function_raise"], "rpc_test.RpcTest._test_async_function_wrong_return_type": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "rpc_test.RpcTest._run_func_in_mode"], "rpc_test.RpcTest.test_async_function_wrong_return_type": ["rpc_test.RpcTest._test_async_function_wrong_return_type"], "rpc_test.RpcTest.test_async_function_wrong_return_type_async": ["rpc_test.RpcTest._test_async_function_wrong_return_type"], "rpc_test.RpcTest.test_async_function_wrong_return_type_remote": ["rpc_test.RpcTest._test_async_function_wrong_return_type"], "rpc_test.RpcTest.test_async_function_simple": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.RpcTest._test_async_function": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "rpc_test.RpcTest._run_func_in_mode"], "rpc_test.RpcTest.test_async_function_with_future_ctor": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_function_with_future_ctor_remote": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_function_chained": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_function_chained_remote": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_function_nested": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_function_nested_remote": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_static_method": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_static_method_remote": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_class_method": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest.test_async_class_method_remote": ["rpc_test.RpcTest._test_async_function"], "rpc_test.RpcTest._test_test_async_class_rref_proxy": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_async_class_rref_proxy": ["rpc_test.RpcTest._test_test_async_class_rref_proxy"], "rpc_test.RpcTest.test_async_class_rref_proxy_async": ["rpc_test.RpcTest._test_test_async_class_rref_proxy"], "rpc_test.RpcTest.test_async_class_rref_proxy_remote": ["rpc_test.RpcTest._test_test_async_class_rref_proxy"], "rpc_test.RpcTest._test_async_function_multi": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "rpc_test.RpcTest._run_func_in_mode"], "rpc_test.RpcTest.test_async_function_multi_chained": ["rpc_test.RpcTest._test_async_function_multi"], "rpc_test.RpcTest.test_async_function_multi_chained_async": ["rpc_test.RpcTest._test_async_function_multi"], "rpc_test.RpcTest.test_async_function_multi_chained_remote": ["rpc_test.RpcTest._test_async_function_multi"], "rpc_test.RpcTest.test_async_function_multi_fanout": ["rpc_test.RpcTest._test_async_function_multi"], "rpc_test.RpcTest.test_async_function_multi_fanout_async": ["rpc_test.RpcTest._test_async_function_multi"], "rpc_test.RpcTest.test_async_function_multi_fanout_remote": ["rpc_test.RpcTest._test_async_function_multi"], "rpc_test.RpcTest._test_return_future": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "rpc_test.RpcTest._run_func_in_mode"], "rpc_test.RpcTest.test_return_future": ["rpc_test.RpcTest._test_return_future"], "rpc_test.RpcTest.test_return_future_async": ["rpc_test.RpcTest._test_return_future"], "rpc_test.RpcTest.test_return_future_remote": ["rpc_test.RpcTest._test_return_future"], "rpc_test.RpcTest.test_rref_timeout": ["torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.dist_utils.wait_until_owners_and_forks_on_rank", "torch.distributed.rpc.remote"], "torch.testing._internal.dist_utils.wait_until_owners_and_forks_on_rank": [], "rpc_test.RpcTest.test_init_pg_then_rpc": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.init_process_group", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.barrier", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_init_rpc_then_pg": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.init_process_group", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.barrier", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_wait_all_with_exception": ["torch.testing._internal.dist_utils.worker_name", "<builtin>.range", "torch.distributed.rpc.rpc_async", "torch.futures.wait_all", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_wait_all_with_partial_exception": ["torch.testing._internal.dist_utils.worker_name", "<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.futures.wait_all", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest.test_init_rpc_twice": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.shutdown", "torch.testing._internal.dist_utils.initialize_pg", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.barrier", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_wrong_types": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_cannot_infer_backend_from_options": ["rpc_test.FooBackendOptions.__init__", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.RpcTest.test_owner_rref_backward": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.RRef", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones_like", "torch.rand", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.context", "torch.distributed.autograd.get_gradients", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.RpcTest._sum": [], "rpc_test.RpcTest._identity": [], "rpc_test.RpcTest.test_user_rref_backward": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones_like", "torch.rand", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.autograd.get_gradients", "torch.distributed.autograd.context", "torch.distributed.rpc.remote"], "rpc_test.RpcTest.test_shutdown_errors": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.shutdown", "torch.testing._internal.dist_utils.initialize_pg", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "rpc_test.RpcTest.test_shutdown_errors.raise_error": ["torch.distributed.rpc.api._broadcast_to_followers", "<builtin>.RuntimeError"], "torch.distributed.rpc.api._broadcast_to_followers": [], "rpc_test.RpcTest.test_shutdown_errors.rref_error": ["<builtin>.RuntimeError"], "rpc_test.CudaRpcTest": ["torch.testing._internal.dist_utils.dist_init", "torch.testing._internal.common_distributed.skip_if_lt_x_gpu"], "rpc_test.CudaRpcTest.test_profiler_remote_cuda": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertGreater", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.autograd.profiler_legacy.profile", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "<builtin>.len", "<builtin>.set", "rpc_test.CudaRpcTest.test_profiler_remote_cuda.get_name"], "rpc_test.CudaRpcTest.test_profiler_remote_cuda.get_name": ["<builtin>.len"], "rpc_test.FaultyAgentRpcTest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test.FaultyAgentRpcTest.test_check_failed_messages": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.api._delete_all_user_and_unforked_owner_rrefs", "torch.add", "torch.distributed.rpc.remote"], "torch.distributed.rpc.api._delete_all_user_and_unforked_owner_rrefs": [], "rpc_test.FaultyAgentRpcTest.test_verify_backend_options": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.len"], "rpc_test.FaultyAgentRpcTest.test_custom_faulty_messages": ["<builtin>.set", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "rpc_test.FaultyAgentRpcTest.test_no_faulty_messages": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.len"], "rpc_test.FaultyAgentRpcTest.test_custom_messages_to_delay": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "rpc_test.FaultyAgentRpcTest._test_remote_message_dropped_pickle": ["torch.distributed.rpc.rpc_async", "torch.distributed.rpc.remote", "torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.FaultyAgentRpcTest.test_remote_message_dropped_pickle": ["rpc_test.FaultyAgentRpcTest._test_remote_message_dropped_pickle"], "rpc_test.FaultyAgentRpcTest.test_remote_message_dropped_pickle_to_self": ["rpc_test.FaultyAgentRpcTest._test_remote_message_dropped_pickle"], "rpc_test.FaultyAgentRpcTest._test_remote_message_dropped_timeout": ["torch.distributed.rpc.remote", "torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.FaultyAgentRpcTest.test_builtin_remote_message_dropped_timeout": ["torch.tensor", "rpc_test.FaultyAgentRpcTest._test_remote_message_dropped_timeout"], "rpc_test.FaultyAgentRpcTest.test_builtin_remote_message_dropped_timeout_to_self": ["torch.tensor", "rpc_test.FaultyAgentRpcTest._test_remote_message_dropped_timeout"], "rpc_test.FaultyAgentRpcTest.test_udf_remote_message_dropped_timeout": ["rpc_test.FaultyAgentRpcTest._test_remote_message_dropped_timeout"], "rpc_test.FaultyAgentRpcTest.test_udf_remote_message_dropped_timeout_to_self": ["rpc_test.FaultyAgentRpcTest._test_remote_message_dropped_timeout"], "rpc_test.FaultyAgentRpcTest._test_remote_message_delay_timeout": ["torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.dist_utils.wait_until_owners_and_forks_on_rank", "torch.distributed.rpc.remote"], "rpc_test.FaultyAgentRpcTest.test_udf_remote_message_delay_timeout": ["rpc_test.FaultyAgentRpcTest._test_remote_message_delay_timeout"], "rpc_test.FaultyAgentRpcTest.test_udf_remote_message_delay_timeout_to_self": ["rpc_test.FaultyAgentRpcTest._test_remote_message_delay_timeout"], "rpc_test.FaultyAgentRpcTest.test_remote_message_builtin_delay_timeout": ["rpc_test.FaultyAgentRpcTest._test_remote_message_delay_timeout", "torch.tensor"], "rpc_test.FaultyAgentRpcTest.test_remote_message_builtin_delay_timeout_to_self": ["rpc_test.FaultyAgentRpcTest._test_remote_message_delay_timeout", "torch.tensor"], "rpc_test.FaultyAgentRpcTest.test_remote_message_script_delay_timeout": ["rpc_test.FaultyAgentRpcTest._test_remote_message_delay_timeout", "torch.tensor"], "rpc_test.FaultyAgentRpcTest.test_remote_message_script_delay_timeout_to_self": ["rpc_test.FaultyAgentRpcTest._test_remote_message_delay_timeout", "torch.tensor"], "rpc_test.FaultyAgentRpcTest.test_rref_to_here_timeout": ["torch.distributed.rpc.remote", "torch.tensor", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.FaultyAgentRpcTest.test_rpc_builtin_timeout": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc._set_rpc_timeout", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.get_rpc_timeout", "torch.tensor"], "rpc_test.FaultyAgentRpcTest.test_rpc_script_timeout": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc._set_rpc_timeout", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.get_rpc_timeout", "torch.tensor"], "rpc_test.TensorPipeAgentRpcTest.test_mismatched_type_for_options": ["rpc_test.FooBackendOptions.__init__", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.TensorPipeAgentRpcTest.test_infer_backend_from_options": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIsInstance", "torch.distributed.rpc.api._get_current_rpc_agent", "torch.distributed.rpc.TensorPipeRpcBackendOptions", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentRpcTest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test.TensorPipeAgentRpcTest.test_set_and_get_num_worker_threads": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.api._get_current_rpc_agent", "torch.distributed.rpc.shutdown", "<builtin>.int", "torch.distributed.rpc.TensorPipeRpcBackendOptions", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentRpcTest.test_tensorpipe_set_default_timeout": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.shutdown", "torch.distributed.rpc.TensorPipeRpcBackendOptions", "torch.distributed.rpc.get_rpc_timeout", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentRpcTest.test_tensorpipe_options_throw_on_timedelta_timeout": ["datetime.timedelta", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.TensorPipeRpcBackendOptions"], "rpc_test.TensorPipeAgentRpcTest._test_rref_get_type_timeout": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.TensorPipeAgentRpcTest.test_rref_get_type_timeout_blocking": ["rpc_test.TensorPipeAgentRpcTest._test_rref_get_type_timeout"], "rpc_test.TensorPipeAgentRpcTest.test_rref_get_type_timeout_non_blocking": ["rpc_test.TensorPipeAgentRpcTest._test_rref_get_type_timeout"], "rpc_test.TensorPipeAgentRpcTest.test_op_with_invalid_args": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.TensorPipeAgentRpcTest._test_rref_proxy_timeout": ["torch.testing._internal.dist_utils.worker_name", "<builtin>.getattr", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.distributed.rpc.remote"], "rpc_test.TensorPipeAgentRpcTest.test_rref_proxy_timeout": ["rpc_test.TensorPipeAgentRpcTest._test_rref_proxy_timeout"], "rpc_test.MyConvNetForMNIST.__init__": ["torch.nn.MaxPool2d", "<builtin>.super", "torch.nn.Linear", "torch.nn.Flatten", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Conv2d"], "torch.nn.Flatten": [], "rpc_test.MyConvNetForMNIST.forward": ["torch.cuda._sleep", "torch.cuda.current_stream", "torch.cuda.stream"], "rpc_test.MyConvNetForMNIST.__getstate__": [], "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.api._is_current_rpc_agent_set", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "torch.distributed.rpc.api._is_current_rpc_agent_set": [], "rpc_test.TensorPipeAgentCudaRpcTest": ["torch.testing._internal.dist_utils.dist_init", "torch.testing._internal.common_distributed.skip_if_lt_x_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_wrong_worker_name": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_invalid_max_local_device": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps", "torch.testing._internal.dist_utils.worker_name", "torch.cuda.device_count", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_invalid_max_remote_device": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps", "torch.testing._internal.dist_utils.worker_name", "torch.cuda.device_count", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_many_to_one": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps", "torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_one_to_many": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_invalid_min_device": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map"], "rpc_test.TensorPipeAgentCudaRpcTest._gpu_add": ["<builtin>.all", "<builtin>.ValueError"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_gpu": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.init_rpc", "torch.device"], "rpc_test.TensorPipeAgentCudaRpcTest._gpu_add_given_devices": ["<builtin>.ValueError"], "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_cpu": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_cpu_to_gpu_default": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_cpu_to_gpu_non_default": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_to_cpu_default": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_to_cpu_non_default": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_default": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_non_default": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_default_to_non_default": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_non_default_to_default": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_1": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_2": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_3": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_4": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_5": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_6": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_7": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_8": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_self_1": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_self_2": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_self_3": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_self_4": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_self_5": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_self_6": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_self_7": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_map_gpu_mixed_self_8": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest._gpu_add_multi_gpu": ["<builtin>.all", "<builtin>.ValueError"], "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_multi_gpu": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.init_rpc", "torch.device"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_multi_gpu": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_multi_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_multi_gpu_self": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_multi_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest._gpu_add_return_to_gpu": ["<builtin>.ValueError"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_in_options": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.TensorPipeRpcBackendOptions", "torch.distributed.rpc.init_rpc", "torch.device"], "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_return_to_gpu": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.shutdown", "<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_sync", "<builtin>.len", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.init_rpc", "torch.device"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_return_to_gpu": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_return_to_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_return_to_gpu_self": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_return_to_gpu"], "rpc_test.TensorPipeAgentCudaRpcTest._add_to_gpu": [], "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "<builtin>.ValueError"], "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config_response": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "<builtin>.ValueError"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_missing_config": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_missing_config_not_timeout": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.shutdown", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config", "time.time", "torch.distributed.rpc.get_rpc_timeout", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_missing_config_loop": ["<builtin>.range", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_missing_config_response": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config_response"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_missing_config_response_loop": ["<builtin>.range", "rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config_response"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_missing_config_remote": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_missing_config_remote_response": ["rpc_test.TensorPipeAgentCudaRpcTest._test_device_maps_missing_config_response"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_maps_remote": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.shutdown", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.remote", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest._slow_add_on_user_stream": ["torch.cuda._sleep", "torch.cuda.Stream", "torch.cuda.current_stream", "torch.cuda.stream"], "rpc_test.TensorPipeAgentCudaRpcTest._test_custom_stream": ["torch.testing._internal.dist_utils.worker_name", "rpc_test.TensorPipeAgentCudaRpcTest._test_stream_nested_multi_async", "rpc_test.TensorPipeAgentCudaRpcTest._test_stream_multi_async", "rpc_test.TensorPipeAgentCudaRpcTest._test_stream_sync", "torch.distributed.rpc.shutdown", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "rpc_test.TensorPipeAgentCudaRpcTest._test_stream_nested_sync", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest._test_stream_nested_sync": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.dist_utils.worker_name", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.TensorPipeAgentCudaRpcTest._test_stream_multi_async": ["<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "rpc_test.TensorPipeAgentCudaRpcTest._test_stream_nested_multi_async": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_async"], "rpc_test.TensorPipeAgentCudaRpcTest._test_stream_sync": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.distributed.rpc.rpc_sync"], "rpc_test.TensorPipeAgentCudaRpcTest.test_custom_stream": ["rpc_test.TensorPipeAgentCudaRpcTest._test_custom_stream"], "rpc_test.TensorPipeAgentCudaRpcTest.test_custom_stream_multi": ["rpc_test.TensorPipeAgentCudaRpcTest._test_custom_stream"], "rpc_test.TensorPipeAgentCudaRpcTest._nested_slow_add_on_user_stream": ["rpc_test.TensorPipeAgentCudaRpcTest._slow_add_on_user_stream", "torch.distributed.rpc.rpc_sync"], "rpc_test.TensorPipeAgentCudaRpcTest.test_custom_stream_nested": ["rpc_test.TensorPipeAgentCudaRpcTest._test_custom_stream"], "rpc_test.TensorPipeAgentCudaRpcTest.test_custom_stream_nested_multi": ["rpc_test.TensorPipeAgentCudaRpcTest._test_custom_stream"], "rpc_test.TensorPipeAgentCudaRpcTest._gpu_add_wrong_gpus": ["<builtin>.ValueError"], "rpc_test.TensorPipeAgentCudaRpcTest.test_device_mismatch": ["torch.testing._internal.dist_utils.worker_name", "torch.zeros", "torch.distributed.rpc.shutdown", "torch.ones", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest._test_rref_synchronization": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.randn", "torch.distributed.rpc.shutdown", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.remote", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_to_here_synchronization1": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_to_here_synchronization2": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_to_here_synchronization3": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_to_here_synchronization4": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest._test_rref_as_arg_synchronization": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.RRef", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.randn", "torch.distributed.rpc.shutdown", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_devices", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.remote", "torch.distributed.rpc.init_rpc"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_devices": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_as_arg_synchronization1": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_as_arg_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_as_arg_synchronization2": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_as_arg_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_as_arg_synchronization3": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_as_arg_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_as_arg_synchronization4": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_as_arg_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_as_arg_synchronization5": ["<builtin>.range", "rpc_test.TensorPipeAgentCudaRpcTest._test_rref_as_arg_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest._rref_relay": [], "rpc_test.TensorPipeAgentCudaRpcTest._test_rref_forward_synchronization": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.RRef", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.randn", "torch.distributed.rpc.shutdown", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.remote", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_forward_synchronization1": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_forward_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_forward_synchronization2": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_forward_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_forward_synchronization3": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_forward_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_forward_synchronization4": ["rpc_test.TensorPipeAgentCudaRpcTest._test_rref_forward_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest._test_owner_rref_forward_synchronization": ["torch.distributed.rpc.RRef", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.rand", "torch.distributed.rpc.shutdown", "<builtin>.range", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.remote", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest.test_owner_rref_forward_synchronization1": ["rpc_test.TensorPipeAgentCudaRpcTest._test_owner_rref_forward_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_owner_rref_forward_synchronization2": ["rpc_test.TensorPipeAgentCudaRpcTest._test_owner_rref_forward_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_owner_rref_forward_synchronization3": ["rpc_test.TensorPipeAgentCudaRpcTest._test_owner_rref_forward_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest.test_owner_rref_forward_synchronization4": ["rpc_test.TensorPipeAgentCudaRpcTest._test_owner_rref_forward_synchronization"], "rpc_test.TensorPipeAgentCudaRpcTest._return_tensor_view": ["torch.ones", "torch.cuda._sleep"], "rpc_test.TensorPipeAgentCudaRpcTest.test_tensor_view_as_return_value": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.shutdown", "<builtin>.range", "torch.ones", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest.test_devices_option_mismatch": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.shutdown", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_devices", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest.test_devices_option_mismatch_reverse": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.shutdown", "torch.distributed.rpc.TensorPipeRpcBackendOptions", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.distributed.rpc.init_rpc"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_device_as_int": ["torch.futures.Future"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_device_as_str": ["torch.futures.Future"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_device_as_device": ["torch.futures.Future", "torch.device"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_device_not_cuda": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.futures.Future"], "rpc_test.TensorPipeAgentCudaRpcTest._test_cuda_future_extraction": ["rpc_test.build_sparse_tensor", "rpc_test.get_cycles_per_ms", "torch.cuda.device", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.cuda._sleep", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "<builtin>.int", "torch.cuda.stream", "torch.cuda.Stream", "torch.futures.Future", "torch.eq"], "torch.eq": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_cuda_tensor": ["rpc_test.TensorPipeAgentCudaRpcTest._test_cuda_future_extraction"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_cuda_tensor.<lambda1>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_cuda_tensor.<lambda2>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_list_with_cuda_tensor": ["rpc_test.TensorPipeAgentCudaRpcTest._test_cuda_future_extraction"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_list_with_cuda_tensor.<lambda1>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_list_with_cuda_tensor.<lambda2>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_custom_class_with_cuda_tensor": ["rpc_test.TensorPipeAgentCudaRpcTest._test_cuda_future_extraction"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_custom_class_with_cuda_tensor.<lambda1>": ["rpc_test.TensorWrapper.__init__"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_custom_class_with_cuda_tensor.<lambda2>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_cuda_sparse_tensor": ["rpc_test.TensorPipeAgentCudaRpcTest._test_cuda_future_extraction"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_cuda_sparse_tensor.<lambda1>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_cuda_sparse_tensor.<lambda2>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_list_with_cuda_sparse_tensor": ["rpc_test.TensorPipeAgentCudaRpcTest._test_cuda_future_extraction"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_list_with_cuda_sparse_tensor.<lambda1>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_list_with_cuda_sparse_tensor.<lambda2>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_custom_class_with_cuda_sparse_tensor": ["rpc_test.TensorPipeAgentCudaRpcTest._test_cuda_future_extraction"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_custom_class_with_cuda_sparse_tensor.<lambda1>": ["rpc_test.TensorWrapper.__init__"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_can_extract_custom_class_with_cuda_sparse_tensor.<lambda2>": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_callback_changes_devices": ["rpc_test.get_cycles_per_ms", "torch.cuda.device", "torch.zeros", "torch.cuda._sleep", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "<builtin>.int", "torch.cuda.stream", "torch.cuda.Stream", "torch.futures.Future", "torch.eq"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_callback_changes_devices.cb": [], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_value_on_bad_device": ["rpc_test.get_cycles_per_ms", "torch.cuda.device", "torch.zeros", "torch.cuda._sleep", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "<builtin>.int", "torch.cuda.stream", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.cuda.Stream", "torch.futures.Future", "torch.eq"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_value_on_bad_device.cb": ["torch.cuda._sleep", "<builtin>.int", "rpc_test.get_cycles_per_ms", "torch.cuda.device"], "rpc_test.TensorPipeAgentCudaRpcTest.test_async_execution_with_cuda_future": ["torch.testing._internal.dist_utils.worker_name", "torch.cuda.stream", "torch.zeros", "torch.distributed.rpc.shutdown", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.cuda.Stream", "torch.distributed.rpc.init_rpc", "torch.eq"], "rpc_test.TensorPipeAgentCudaRpcTest.test_async_execution_nested_with_cuda_future": ["torch.testing._internal.dist_utils.worker_name", "torch.cuda.stream", "torch.distributed.rpc.shutdown", "torch.ones", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.cuda.Stream", "torch.distributed.rpc.init_rpc", "torch.eq"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_modify_tensor_inplace": ["torch.zeros", "torch.futures.Future"], "rpc_test.TensorPipeAgentCudaRpcTest.test_cuda_future_replace_tensor": ["torch.ones", "torch.zeros", "torch.futures.Future"], "rpc_test.TensorPipeAgentCudaRpcTest.test_rref_with_unpickleable_attributes": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.zeros", "torch.distributed.rpc.shutdown", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.rpc_backend_options.set_device_map", "torch.distributed.rpc.remote", "torch.distributed.rpc.init_rpc"], "rref_proxy": ["functions.async_execution"], "rref_proxy._local_invoke": ["<builtin>.getattr"], "rref_proxy._local_invoke_async_execution": ["<builtin>.getattr"], "rref_proxy._invoke_rpc": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.issubclass"], "rref_proxy.RRefProxy.__init__": [], "rref_proxy.RRefProxy.__getattr__": ["functools.partial"], "server_process_global_profiler": [], "server_process_global_profiler._server_process_global_profile.__init__": ["<builtin>.super"], "server_process_global_profiler._server_process_global_profile.__enter__": ["_enable_server_process_global_profiler", "torch.autograd.ProfilerConfig", "<builtin>.RuntimeError"], "torch.autograd.ProfilerConfig": [], "_enable_server_process_global_profiler": [], "server_process_global_profiler._server_process_global_profile.__exit__": ["<builtin>.list", "torch.autograd.profiler_util.EventList", "torch.autograd.profiler_legacy._parse_legacy_records", "itertools.chain", "_disable_server_process_global_profiler"], "_disable_server_process_global_profiler": [], "torch.autograd.profiler_legacy._parse_legacy_records": [], "server_process_global_profiler._server_process_global_profile.__exit__.<lambda1>": [], "torch.autograd.profiler_util.EventList": [], "tensorpipe_rpc_agent_test_fixture": [], "tensorpipe_rpc_agent_test_fixture.TensorPipeRpcAgentTestFixture.rpc_backend": [], "tensorpipe_rpc_agent_test_fixture.TensorPipeRpcAgentTestFixture.rpc_backend_options": ["torch.distributed.rpc.backend_registry.construct_rpc_backend_options"], "tensorpipe_rpc_agent_test_fixture.TensorPipeRpcAgentTestFixture.get_shutdown_error_regex": [], "tensorpipe_rpc_agent_test_fixture.TensorPipeRpcAgentTestFixture.get_timeout_error_regex": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\distributed\\rpc\\utils": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\distributed\\rpc\\utils._parse_remote_device": ["<builtin>.len", "<builtin>.RuntimeError"], "api.load_with_process_group": ["<builtin>.RuntimeError"], "api.ShardedTensorMetadata": ["torch.get_default_dtype", "torch.Size", "dataclasses.field"], "torch.get_default_dtype": [], "api.ShardedTensorMetadata.__getstate__": ["<builtin>.RuntimeError"], "api.ShardedTensorMetadata.__setstate__": ["<builtin>.RuntimeError"], "api._register_remote_shards": ["<builtin>.RuntimeError"], "api.ShardedTensor.__init__": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.isinstance", "torch.get_default_dtype", "api.ShardedTensor._prepare_init", "<builtin>.type", "<builtin>.list", "api.ShardedTensor._init_chunked", "api.ShardedTensor._post_init", "api.ShardedTensor._init_enumerable"], "api.ShardedTensor._prepare_init": ["torch.distributed.distributed_c10d._get_default_group"], "api.ShardedTensor._init_chunked": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.ValueError", "torch.distributed._sharding_spec._internals.is_valid_device", "<builtin>.min", "torch.empty", "<builtin>.isinstance", "api.ShardedTensor._parse_and_validate_remote_device", "torch.distributed._sharding_spec.ShardMetadata", "torch.distributed.get_rank"], "api.ShardedTensor._init_enumerable": ["torch.empty", "api.ShardedTensor._parse_and_validate_remote_device", "torch.distributed.get_rank", "torch.distributed._sharding_spec._internals.check_tensor"], "api.ShardedTensor._post_init": ["torch.distributed.rpc._is_current_rpc_agent_set", "api.ShardedTensor._init_rpc", "<builtin>.RuntimeError"], "torch.distributed.rpc._is_current_rpc_agent_set": [], "api.ShardedTensor._init_rpc": ["<builtin>.len", "torch.distributed.rpc.api._all_gather", "<builtin>.ValueError", "torch.distributed.rpc.get_worker_info", "torch.futures.wait_all", "torch.distributed.get_world_size", "<builtin>.range", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc._get_current_rpc_agent", "torch.distributed.rpc.RRef", "torch.distributed.get_rank", "api.ShardedTensor.local_shards"], "api.ShardedTensor.__del__": [], "api.ShardedTensor.local_shards": [], "api.ShardedTensor._init_from_local_shards": ["<builtin>.len", "<builtin>.str", "<builtin>.ValueError", "torch.distributed._sharding_spec._internals.check_tensor", "torch.distributed._sharding_spec._internals.validate_non_overlapping_shards_metadata", "<builtin>.RuntimeError", "<builtin>.list", "torch.distributed.get_rank"], "torch.distributed._sharding_spec._internals.validate_non_overlapping_shards_metadata": [], "torch.distributed._sharding_spec._internals.check_tensor": [], "torch.distributed._sharding_spec._internals.is_valid_device": [], "api.ShardedTensor._parse_and_validate_remote_device": ["<builtin>.ValueError", "torch.distributed.rpc._is_current_rpc_agent_set", "torch.distributed.utils._parse_remote_device", "torch.distributed.get_world_size", "<builtin>.isinstance", "torch.distributed.distributed_c10d._rank_not_in_group", "torch.distributed.rpc._get_current_rpc_agent", "<builtin>.RuntimeError"], "torch.distributed._sharding_spec.ShardMetadata": [], "torch.distributed.utils._parse_remote_device": [], "torch.distributed.distributed_c10d._rank_not_in_group": [], "api.ShardedTensor.sharding_spec": [], "api.ShardedTensor.__torch_function__": ["<builtin>.RuntimeError"], "api.ShardedTensor.metadata": [], "api.ShardedTensor.size": [], "api.ShardedTensor._register_remote_shards": [], "api.ShardedTensor.remote_shards": ["<builtin>.RuntimeError"], "api.ShardedTensor.__repr__": ["<builtin>.str"], "api.ShardedTensor.__getstate__": ["torch.distributed.distributed_c10d.get_rank", "torch.distributed.distributed_c10d.get_world_size"], "torch.distributed.distributed_c10d.get_rank": [], "torch.distributed.distributed_c10d.get_world_size": [], "api.ShardedTensor.__setstate__": ["torch.distributed.distributed_c10d.get_world_size", "torch.distributed.distributed_c10d._get_default_group", "torch.distributed.distributed_c10d.get_rank", "<builtin>.RuntimeError", "torch.distributed.distributed_c10d.is_initialized", "api.ShardedTensor._post_init"], "torch.distributed.distributed_c10d.is_initialized": [], "api.DevicePlacementSpec.__post_init__": ["<builtin>.ValueError", "_internals.is_valid_device"], "_internals.is_valid_device": ["torch.distributed.utils._parse_remote_device", "torch.device"], "api.ChunkShardingSpec.__post_init__": ["api.ChunkShardingSpec._verify_dim", "api.ChunkShardingSpec._verify_devices"], "api.ChunkShardingSpec._verify_dim": ["<builtin>.ValueError", "<builtin>.isinstance"], "api.ChunkShardingSpec._verify_devices": ["<builtin>.ValueError", "<builtin>.len", "_internals.is_valid_device"], "api.EnumerableShardingSpec.__post_init__": ["_internals.validate_non_overlapping_shards_metadata", "<builtin>.ValueError", "<builtin>.len"], "_internals.validate_non_overlapping_shards_metadata": ["<builtin>.range", "_internals._check_shard_metadata_pair_overlap", "<builtin>.len", "<builtin>.ValueError"], "_internals": [], "_internals.ShardMetadata.__post_init__": ["<builtin>.range", "<builtin>.len", "_internals.is_valid_device", "<builtin>.ValueError"], "_internals._check_shard_metadata_pair_overlap": ["<builtin>.range", "<builtin>.len"], "_internals.check_tensor": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.ValueError"], "process": ["process.insert", "os.path.exists", "os.walk", "shutil.rmtree", "os.path.join", "<builtin>.print", "os.makedirs", "os.path.dirname", "os.system", "os.chdir", "os.path.splitext"], "process.insert": ["<builtin>.open", "os.rename", "<builtin>.print"], "os.rename": [], "os.chdir": [], "os.system": [], "pytorch_sphinx_theme.get_html_theme_path": [], "conf.replace": [], "conf.replace.visit_reference": ["sphinx.writers.html.HTMLTranslator.visit_reference", "<builtin>.len", "sphinx.writers.html5.HTML5Translator.visit_reference"], "sphinx.writers.html.HTMLTranslator.visit_reference": [], "sphinx.writers.html5.HTML5Translator.visit_reference": [], "conf.patched_make_field": ["docutils.nodes.field", "<builtin>.len", "docutils.nodes.list_item", "docutils.nodes.field_body", "conf.patched_make_field.handle_item", "docutils.nodes.field_name"], "conf.patched_make_field.handle_item": ["<builtin>.len", "docutils.nodes.paragraph", "sphinx.addnodes.literal_strong", "docutils.nodes.Text", "<builtin>.isinstance"], "docutils.nodes.paragraph": [], "sphinx.addnodes.literal_strong": [], "docutils.nodes.Text": [], "docutils.nodes.field_name": [], "docutils.nodes.list_item": [], "docutils.nodes.field_body": [], "docutils.nodes.field": [], "linear": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "linear.Linear.__init__": ["<builtin>.super", "torch.nn.parameter.Parameter", "linear.Linear.reset_parameters", "module.Module.register_parameter", "torch.empty", "torch.zeros", "torch.ao.nn.sparse.quantized.linear.LinearPackedParams", "torch._empty_affine_quantized", "<builtin>.NotImplementedError", "<builtin>.RuntimeError", "linear.LinearPackedParams.set_weight_bias", "linear.LinearPackedParams.__init__", "torch.nn.quantized.Linear._packed_params._weight_bias"], "linear.Linear.forward": ["<builtin>.RuntimeError", "torch.ops.quantized.linear_dynamic", "torch.ops.quantized.linear_dynamic_fp16", "functional.linear", "torch.nn.functional.linear", "torch.ops.sparse.qlinear_dynamic", "torch.ops.quantized.linear", "torch.ops.sparse.qlinear", "torch.quantize_per_tensor"], "torch.ops.quantized.linear_dynamic": [], "torch.ops.quantized.linear_dynamic_fp16": [], "linear.Linear._get_name": [], "linear.Linear.extra_repr": ["torch.nn.quantized.Linear.weight", "linear.Linear.weight"], "torch.nn.quantized.Linear.weight": [], "linear.Linear._load_from_state_dict": ["<builtin>.super", "<builtin>.int", "<builtin>.float"], "linear.Linear.from_float": ["<builtin>.hasattr", "torch.nn.quantized.Linear.set_weight_bias", "<builtin>.str", "torch.nn.quantized.modules.utils._quantize_weight", "<builtin>.RuntimeError", "torch.quantization.qconfig.default_dynamic_qconfig.weight", "linear.Linear.__init__", "<builtin>.type", "torch.ao.nn.sparse.quantized.utils.LinearBlockSparsePattern.block_size", "<builtin>.getattr", "<builtin>.isinstance", "torch.any", "<builtin>.float", "<builtin>.int", "linear.Linear._get_name"], "torch.quantization.qconfig.default_dynamic_qconfig.weight": [], "torch.nn.quantized.modules.utils._quantize_weight": [], "torch.nn.quantized.Linear.set_weight_bias": [], "rnn.apply_permutation": [], "rnn.PackedParameter.__init__": ["<builtin>.super"], "rnn.PackedParameter._save_to_state_dict": ["<builtin>.super"], "rnn.PackedParameter._load_from_state_dict": ["<builtin>.super"], "rnn.RNNBase.__init__": ["<builtin>.super", "torch.ops.quantized.make_quantized_cell_params_dynamic", "torch.quantize_per_tensor", "torch.randn", "<builtin>.isinstance", "rnn.PackedParameter.__init__", "torch.nn.ModuleList", "<builtin>.ValueError", "torch.ops.quantized.make_quantized_cell_params_fp16", "<builtin>.range", "<builtin>.float", "warnings.warn", "torch.ops.quantized.linear_prepack", "torch.ops.quantized.linear_prepack_fp16", "<builtin>.zip", "<builtin>.setattr", "parameter.Parameter", "rnn.RNNBase.flatten_parameters", "rnn.RNNBase.reset_parameters", "torch.empty"], "torch.ops.quantized.linear_prepack": [], "torch.ops.quantized.make_quantized_cell_params_dynamic": [], "torch.ops.quantized.linear_prepack_fp16": [], "torch.ops.quantized.make_quantized_cell_params_fp16": [], "rnn.RNNBase._get_name": [], "rnn.RNNBase.extra_repr": [], "rnn.RNNBase.__repr__": ["rnn.GRU._get_name", "rnn.RNNBase.extra_repr", "rnn.LSTM._get_name", "<builtin>.isinstance", "rnn.RNNBase._get_name", "torch.nn.modules.module._addindent", "<builtin>.repr", "<builtin>.len"], "torch.nn.modules.module._addindent": [], "rnn.GRU._get_name": [], "rnn.LSTM._get_name": [], "rnn.RNNBase.check_input": ["<builtin>.RuntimeError"], "rnn.RNNBase.get_expected_hidden_size": ["<builtin>.int"], "rnn.RNNBase.check_hidden_size": ["<builtin>.RuntimeError", "<builtin>.list"], "rnn.RNNBase.check_forward_args": ["rnn.RNNBase.check_input", "rnn.RNNBase.check_hidden_size", "rnn.RNNBase.get_expected_hidden_size"], "rnn.RNNBase.permute_hidden": ["rnn.apply_permutation"], "rnn.RNNBase._load_from_state_dict": ["<builtin>.super"], "rnn.RNNBase.from_float": ["torch.ops.quantized.make_quantized_cell_params_dynamic", "torch.ops.quantized.linear_prepack_fp16", "<builtin>.RuntimeError", "<builtin>.type", "rnn.PackedParameter.__init__", "rnn.RNNBase.from_float.quantize_and_pack", "torch.nn.ModuleList", "rnn.GRU.__init__", "<builtin>.NotImplementedError", "<builtin>.hasattr", "torch.ops.quantized.make_quantized_cell_params_fp16", "<builtin>.range", "rnn.LSTM.__init__", "rnn.RNNBase.from_float.retrieve_weight_bias", "<builtin>.set", "torch.quantization.qconfig.default_dynamic_qconfig.weight"], "rnn.LSTM.__init__": ["<builtin>.super", "<builtin>.float", "warnings.warn", "<builtin>.range", "<builtin>.isinstance", "torch.nn.ModuleList", "<builtin>.ValueError", "rnn._LSTMLayer.__init__"], "rnn.GRU.__init__": ["<builtin>.super", "<builtin>.ValueError"], "rnn.RNNBase.from_float.retrieve_weight_bias": ["<builtin>.getattr"], "rnn.RNNBase.from_float.quantize_and_pack": ["torch.nn.quantized.modules.utils._quantize_weight", "torch.ops.quantized.linear_prepack", "torch.quantization.qconfig.default_dynamic_qconfig.weight"], "rnn.RNNBase._weight_bias": ["<builtin>.range"], "rnn.RNNBase.get_weight": ["rnn.RNNBase._weight_bias"], "rnn.RNNBase.get_bias": ["rnn.RNNBase._weight_bias"], "rnn.LSTM.forward_impl": ["torch.zeros", "rnn.LSTM.check_forward_args", "rnn.LSTM.permute_hidden", "<builtin>.float", "torch.quantized_lstm"], "rnn.LSTM.permute_hidden": ["rnn.apply_permutation"], "rnn.LSTM.check_forward_args": ["rnn.RNNBase.check_input", "rnn.RNNBase.check_hidden_size", "rnn.RNNBase.get_expected_hidden_size", "rnn.LSTM.get_expected_cell_size"], "torch.quantized_lstm": [], "rnn.LSTM": ["torch.jit.export", "torch.jit.ignore", "typing.overload", "torch._jit_internal._overload_method"], "rnn.LSTM.forward_tensor": ["rnn.LSTM.forward_impl", "rnn.LSTM.permute_hidden"], "rnn.LSTM.forward_packed": ["torch.nn.utils.rnn.PackedSequence", "<builtin>.int", "rnn.LSTM.forward_impl", "rnn.LSTM.permute_hidden"], "torch.nn.utils.rnn.PackedSequence": [], "torch.jit.ignore": [], "rnn.LSTM.forward": ["rnn.LSTM.forward_packed", "rnn.LSTM.forward_tensor", "<builtin>.isinstance", "torch.zeros", "<builtin>.int", "rnn.LSTM.check_forward_args", "_VF.lstm", "utils.rnn.PackedSequence", "rnn.LSTM.permute_hidden", "<builtin>.range", "torch.stack", "torch.quantize_per_tensor", "torch.jit._unwrap_optional"], "rnn.LSTM.from_float": ["<builtin>.super", "<builtin>.range", "<builtin>.isinstance", "torch.quantization.prepare", "rnn._LSTMLayer.from_float", "<builtin>.getattr", "rnn.LSTM.__init__", "<builtin>.hasattr"], "rnn.GRU.check_forward_args": ["rnn.RNNBase.check_input", "rnn.RNNBase.check_hidden_size", "rnn.RNNBase.get_expected_hidden_size"], "rnn.GRU.forward_impl": ["rnn.GRU.check_forward_args", "torch.zeros", "rnn.GRU.permute_hidden", "torch.quantized_gru"], "rnn.GRU.permute_hidden": ["rnn.apply_permutation"], "torch.quantized_gru": [], "rnn.GRU": ["torch.jit.export", "torch.jit.ignore", "typing.overload", "torch._jit_internal._overload_method"], "rnn.GRU.forward_tensor": ["rnn.GRU.forward_impl", "rnn.GRU.permute_hidden"], "rnn.GRU.forward_packed": ["torch.nn.utils.rnn.PackedSequence", "rnn.GRU.forward_impl", "<builtin>.int", "rnn.GRU.permute_hidden"], "rnn.GRU.forward": ["rnn.GRU.forward_packed", "rnn.GRU.forward_tensor", "<builtin>.isinstance", "_VF.gru", "torch.zeros", "<builtin>.int", "rnn.RNNBase.check_forward_args", "rnn.RNNBase.permute_hidden", "utils.rnn.PackedSequence"], "rnn.GRU.from_float": ["<builtin>.super"], "rnn.RNNCellBase.__init__": ["<builtin>.super", "torch.nn.Module.register_parameter", "torch.quantize_per_tensor", "torch.randn", "torch.ops.quantized.linear_prepack", "torch.ops.quantized.linear_prepack_fp16", "parameter.Parameter", "torch.empty", "module.Module.register_parameter", "rnn.RNNCellBase.reset_parameters"], "torch.nn.Module.register_parameter": [], "rnn.RNNCellBase._get_name": [], "rnn.RNNCellBase.extra_repr": [], "rnn.RNNCellBase.check_forward_input": ["<builtin>.RuntimeError"], "rnn.RNNCellBase.check_forward_hidden": ["<builtin>.RuntimeError"], "rnn.RNNCellBase.from_float": ["rnn.RNNCell.__init__", "rnn.RNNCellBase.from_float.process_weights", "rnn.LSTMCell.__init__", "rnn.GRUCell.__init__", "<builtin>.RuntimeError", "<builtin>.type", "<builtin>.NotImplementedError", "<builtin>.hasattr", "<builtin>.set", "torch.quantization.qconfig.default_dynamic_qconfig.weight"], "rnn.LSTMCell.__init__": ["<builtin>.super", "torch.nn.Linear", "torch.nn.quantized.FloatFunctional"], "rnn.GRUCell.__init__": ["<builtin>.super"], "rnn.RNNCell.__init__": ["<builtin>.super"], "rnn.RNNCellBase.from_float.process_weights": ["torch.nn.quantized.modules.utils._quantize_weight", "torch.ops.quantized.linear_prepack", "torch.quantization.qconfig.default_dynamic_qconfig.weight", "torch.ops.quantized.linear_prepack_fp16"], "rnn.RNNCellBase._weight_bias": [], "rnn.RNNCellBase.get_weight": ["rnn.RNNCellBase._weight_bias"], "rnn.RNNCellBase.get_bias": ["rnn.RNNCellBase._weight_bias"], "rnn.RNNCellBase._save_to_state_dict": ["<builtin>.super"], "rnn.RNNCellBase._load_from_state_dict": ["<builtin>.super"], "rnn.RNNCell._get_name": [], "rnn.RNNCell.forward": ["torch.ops.quantized.quantized_rnn_tanh_cell_dynamic", "torch.zeros", "<builtin>.RuntimeError", "rnn.RNNCellBase.check_forward_input", "rnn.RNNCellBase.check_forward_hidden", "torch.ops.quantized.quantized_rnn_relu_cell_dynamic", "_VF.rnn_relu_cell", "_VF.rnn_tanh_cell"], "torch.ops.quantized.quantized_rnn_tanh_cell_dynamic": [], "torch.ops.quantized.quantized_rnn_relu_cell_dynamic": [], "rnn.RNNCell.from_float": ["<builtin>.super"], "rnn.LSTMCell._get_name": [], "rnn.LSTMCell.forward": ["torch.zeros", "rnn.RNNCellBase.check_forward_input", "rnn.RNNCellBase.check_forward_hidden", "torch.ops.quantized.quantized_lstm_cell_dynamic", "_VF.lstm_cell", "torch.sigmoid", "rnn.LSTMCell.initialize_hidden", "torch.tanh"], "torch.ops.quantized.quantized_lstm_cell_dynamic": [], "rnn.LSTMCell.from_float": ["<builtin>.super", "<builtin>.type", "rnn.LSTMCell.from_params", "<builtin>.hasattr"], "rnn.GRUCell._get_name": [], "rnn.GRUCell.forward": ["torch.ops.quantized.quantized_gru_cell_dynamic", "torch.zeros", "rnn.RNNCellBase.check_forward_input", "rnn.RNNCellBase.check_forward_hidden", "_VF.gru_cell"], "torch.ops.quantized.quantized_gru_cell_dynamic": [], "rnn.GRUCell.from_float": ["<builtin>.super"], "api.Event": ["dataclasses.field"], "api.Event.__str__": ["api.Event.serialize"], "api.Event.serialize": ["dataclasses.asdict", "json.dumps"], "api.Event.deserialize": ["json.loads", "<builtin>.isinstance"], "dataclasses.asdict": [], "api.RdzvEvent.__str__": ["api.RdzvEvent.serialize"], "api.RdzvEvent.serialize": ["dataclasses.asdict", "json.dumps"], "api.RdzvEvent.deserialize": ["json.loads", "<builtin>.isinstance"], "handlers": ["logging.NullHandler", "logging.StreamHandler"], "logging.StreamHandler": [], "logging.NullHandler": [], "handlers.get_logging_handler": [], "api.MetricsConfig.__init__": [], "api.MetricHandler": ["abc.abstractmethod"], "api.MetricHandler.emit": [], "api.ConsoleMetricHandler.emit": ["<builtin>.print"], "api.NullMetricHandler.emit": [], "api.MetricStream.__init__": [], "api.MetricStream.add_value": ["api.NullMetricHandler.emit", "time.time"], "abc.ABC.__init__": [], "api.configure": ["<builtin>.type", "logging.info"], "api.getStream": ["api.MetricStream.__init__"], "api._get_metric_name": ["<builtin>.len"], "api.prof": ["api.prof.wrap"], "api.prof.wrap": ["functools.wraps"], "api.prof.wrap.wrapper": ["api.get_elapsed_time_ms", "time.time", "api.put_metric", "api._get_metric_name"], "api.put_metric": ["api.getStream", "api.MetricStream.add_value"], "api.get_elapsed_time_ms": ["time.time", "<builtin>.int"], "api.profile": ["warnings.warn"], "api.profile.wrap": ["functools.wraps"], "api.profile.wrap.wrapper": ["api.publish_metric", "api.get_elapsed_time_ms", "time.time"], "api.publish_metric": ["warnings.warn", "api.MetricStream.add_value", "api.getStream"], "api.SignalException.__init__": ["<builtin>.super"], "api._terminate_process_handler": ["api.SignalException.__init__", "signal.Signals", "os.getpid"], "signal.Signals": [], "api._get_kill_signal": [], "api._get_default_signal": [], "api._validate_full_rank": ["abc.ABC._return_values.keys", "<builtin>.range", "<builtin>.set", "<builtin>.RuntimeError"], "abc.ABC._return_values.keys": [], "api.Std.from_str": ["<builtin>.int", "api.Std.from_str.to_std", "<builtin>.ValueError", "re.match"], "api.Std.from_str.to_std": ["<builtin>.int"], "api.to_map": ["<builtin>.range", "<builtin>.isinstance"], "api.RunProcsResult": ["dataclasses.field"], "api.RunProcsResult.is_failed": ["<builtin>.len"], "api.PContext.__init__": ["torch.distributed.elastic.multiprocessing.tail_log.TailLog", "<builtin>.len", "api._validate_full_rank"], "torch.distributed.elastic.multiprocessing.tail_log.TailLog": [], "api.PContext.start": ["api.PContext._start", "signal.signal"], "api.PContext._start": ["<builtin>.NotImplementedError"], "api.PContext": ["abc.abstractmethod"], "api.PContext._poll": ["<builtin>.NotImplementedError"], "api.PContext.wait": ["api.PContext._poll", "time.time", "time.sleep"], "api.PContext.pids": ["<builtin>.NotImplementedError"], "api.PContext._close": ["<builtin>.NotImplementedError"], "api.PContext.close": ["api.PContext._close", "api._get_default_signal"], "api._nullcontext.__init__": [], "api._nullcontext.__enter__": [], "api._nullcontext.__exit__": [], "api.get_std_cm": ["torch.distributed.elastic.multiprocessing.redirects.redirect_stdout", "api._nullcontext.__init__", "torch.distributed.elastic.multiprocessing.redirects.redirect_stderr"], "torch.distributed.elastic.multiprocessing.redirects.redirect_stdout": [], "torch.distributed.elastic.multiprocessing.redirects.redirect_stderr": [], "api._wrap": ["api.get_std_cm", "torch.distributed.elastic.multiprocessing.errors.record"], "torch.distributed.elastic.multiprocessing.errors.record": [], "api.MultiprocessContext.__init__": ["<builtin>.range", "torch.multiprocessing.get_context", "<builtin>.super"], "torch.multiprocessing.get_context": [], "api.MultiprocessContext._start": ["torch.multiprocessing.start_processes", "<builtin>.ValueError"], "torch.multiprocessing.start_processes": [], "api.MultiprocessContext._is_done": ["<builtin>.len"], "api.MultiprocessContext._poll": ["api._validate_full_rank", "<builtin>.range", "api.PContext.close", "api.MultiprocessContext._is_done"], "api.MultiprocessContext.pids": ["<builtin>.enumerate"], "api.MultiprocessContext._close": ["time.monotonic", "api._get_kill_signal", "os.kill"], "api.SubprocessHandler.__init__": ["<builtin>.str", "api.SubprocessHandler._popen", "<builtin>.open", "os.environ.copy"], "os.environ.copy": [], "api.SubprocessHandler._popen": ["subprocess.Popen"], "api.SubprocessHandler.close": ["api._get_default_signal"], "api.SubprocessContext.__init__": ["<builtin>.range", "<builtin>.super", "<builtin>.set"], "api.SubprocessContext._start": ["<builtin>.range", "<builtin>.ValueError", "api.SubprocessHandler.__init__"], "api.SubprocessContext._poll": ["abc.ABC._running_local_ranks.difference_update", "api.PContext.close", "torch.distributed.elastic.multiprocessing.errors.ProcessFailure", "<builtin>.min", "api.RunProcsResult.is_failed", "<builtin>.range", "<builtin>.set"], "torch.distributed.elastic.multiprocessing.errors.ProcessFailure": [], "abc.ABC._running_local_ranks.difference_update": [], "api.SubprocessContext._poll.<lambda1>": [], "api.SubprocessContext.pids": [], "api.SubprocessContext._close": ["time.monotonic", "api._get_kill_signal"], "redirects": ["functools.partial", "logging.getLogger", "redirects.get_libc", "contextlib.contextmanager"], "redirects.get_libc": ["ctypes.CDLL"], "redirects._c_std": ["ctypes.c_void_p.in_dll"], "ctypes.c_void_p.in_dll": [], "redirects._python_std": [], "redirects.redirect": ["redirects.redirect._redirect", "redirects._python_std", "redirects._c_std", "<builtin>.ValueError", "os.dup", "os.fdopen", "<builtin>.open"], "redirects.redirect._redirect": ["os.dup2"], "os.dup2": [], "os.dup": [], "os.fdopen": [], "tail_log": ["logging.getLogger"], "tail_log.tail_logfile": ["os.path.exists", "time.sleep", "<builtin>.open"], "tail_log.TailLog.__init__": ["<builtin>.len", "concurrent.futures.thread.ThreadPoolExecutor", "threading.Event"], "concurrent.futures.thread.ThreadPoolExecutor": [], "tail_log.TailLog.start": [], "tail_log.TailLog.stop": ["<builtin>.enumerate"], "tail_log.TailLog.stopped": [], "api.RendezvousHandler": ["abc.abstractmethod"], "api.RendezvousHandler.get_backend": [], "api.RendezvousHandler.next_rendezvous": [], "api.RendezvousHandler.is_closed": [], "api.RendezvousHandler.set_closed": [], "api.RendezvousHandler.num_nodes_waiting": [], "api.RendezvousHandler.get_run_id": [], "api.RendezvousHandler.shutdown": [], "api.RendezvousParameters.__init__": ["<builtin>.ValueError"], "api.RendezvousParameters.get": [], "api.RendezvousParameters.get_as_bool": ["<builtin>.isinstance", "<builtin>.ValueError", "api.RendezvousParameters.get"], "api.RendezvousParameters.get_as_int": ["<builtin>.int", "<builtin>.ValueError", "api.RendezvousParameters.get"], "api.RendezvousHandlerRegistry.__init__": [], "api.RendezvousHandlerRegistry.register": ["<builtin>.ValueError"], "api.RendezvousHandlerRegistry.create_handler": ["<builtin>.RuntimeError", "<builtin>.ValueError"], "c10d_rendezvous_backend": ["logging.getLogger"], "c10d_rendezvous_backend.C10dRendezvousBackend.__init__": ["<builtin>.ValueError", "c10d_rendezvous_backend.C10dRendezvousBackend._call_store"], "c10d_rendezvous_backend.C10dRendezvousBackend._call_store": ["api.RendezvousConnectionError", "<builtin>.getattr"], "c10d_rendezvous_backend.C10dRendezvousBackend.name": [], "c10d_rendezvous_backend.C10dRendezvousBackend.get_state": ["c10d_rendezvous_backend.C10dRendezvousBackend._decode_state", "c10d_rendezvous_backend.C10dRendezvousBackend._call_store"], "c10d_rendezvous_backend.C10dRendezvousBackend._decode_state": ["api.RendezvousStateError", "base64.b64decode"], "c10d_rendezvous_backend.C10dRendezvousBackend.set_state": ["<builtin>.isinstance", "c10d_rendezvous_backend.C10dRendezvousBackend._decode_state", "c10d_rendezvous_backend.C10dRendezvousBackend._call_store", "base64.b64encode", "c10d_rendezvous_backend.C10dRendezvousBackend.get_state"], "base64.b64encode": [], "api.RendezvousConnectionError": [], "base64.b64decode": [], "api.RendezvousStateError": [], "c10d_rendezvous_backend._create_tcp_store": ["<builtin>.ValueError", "utils.parse_rendezvous_endpoint", "utils._matches_machine_hostname", "api.RendezvousConnectionError", "torch.distributed.TCPStore", "torch.distributed.elastic.events.construct_and_record_rdzv_event", "os.getpid", "datetime.timedelta", "typing.cast"], "utils.parse_rendezvous_endpoint": ["<builtin>.ValueError", "re.match", "<builtin>.len", "utils._try_parse_port"], "utils._matches_machine_hostname": ["socket.getaddrinfo", "<builtin>.str", "socket.gethostname", "ipaddress.ip_address"], "torch.distributed.TCPStore": [], "torch.distributed.elastic.events.construct_and_record_rdzv_event": [], "c10d_rendezvous_backend._create_file_store": ["torch.distributed.FileStore", "api.RendezvousError", "tempfile.mkstemp", "api.RendezvousConnectionError"], "api.RendezvousError": [], "torch.distributed.FileStore": [], "c10d_rendezvous_backend.create_backend": ["<builtin>.ValueError", "<builtin>.str", "c10d_rendezvous_backend._create_tcp_store", "c10d_rendezvous_backend._create_file_store", "c10d_rendezvous_backend.C10dRendezvousBackend.__init__", "<builtin>.type", "torch.distributed.elastic.events.construct_and_record_rdzv_event"], "dynamic_rendezvous": ["logging.getLogger"], "dynamic_rendezvous.get_method_name": ["inspect.stack", "<builtin>.len"], "inspect.stack": [], "dynamic_rendezvous.RendezvousBackend": ["abc.abstractmethod"], "dynamic_rendezvous.RendezvousBackend.name": [], "dynamic_rendezvous.RendezvousBackend.get_state": [], "dynamic_rendezvous.RendezvousBackend.set_state": [], "dynamic_rendezvous.RendezvousTimeout": ["datetime.timedelta"], "dynamic_rendezvous.RendezvousTimeout.__init__": ["dynamic_rendezvous.RendezvousTimeout._set_timeouts"], "dynamic_rendezvous.RendezvousTimeout._set_timeouts": ["<builtin>.ValueError", "<builtin>.setattr"], "dynamic_rendezvous.RendezvousTimeout.join": [], "dynamic_rendezvous.RendezvousTimeout.last_call": [], "dynamic_rendezvous.RendezvousTimeout.close": [], "dynamic_rendezvous.RendezvousTimeout.heartbeat": [], "dynamic_rendezvous._NodeDesc.__repr__": [], "dynamic_rendezvous._NodeDescGenerator.__init__": ["threading.Lock"], "dynamic_rendezvous._NodeDescGenerator.generate": ["socket.getfqdn", "os.getpid"], "dynamic_rendezvous._RendezvousState.__init__": ["<builtin>.set"], "dynamic_rendezvous._remove_participant_epilogue": ["<builtin>.len"], "dynamic_rendezvous._RendezvousStateHolder": ["abc.abstractmethod"], "dynamic_rendezvous._RendezvousStateHolder.state": [], "dynamic_rendezvous._RendezvousStateHolder.sync": [], "dynamic_rendezvous._RendezvousStateHolder.mark_dirty": [], "dynamic_rendezvous._BackendRendezvousStateHolder.__init__": ["dynamic_rendezvous._RendezvousState.__init__"], "dynamic_rendezvous._BackendRendezvousStateHolder._record": ["torch.distributed.elastic.events.construct_and_record_rdzv_event", "dynamic_rendezvous.get_method_name"], "dynamic_rendezvous._BackendRendezvousStateHolder.state": [], "dynamic_rendezvous._BackendRendezvousStateHolder.sync": ["dynamic_rendezvous._RendezvousState.__init__", "time.monotonic", "pickle.dumps", "dynamic_rendezvous._BackendRendezvousStateHolder._sanitize", "<builtin>.max", "dynamic_rendezvous._BackendRendezvousStateHolder._record", "api.RendezvousStateError", "pickle.loads"], "dynamic_rendezvous._BackendRendezvousStateHolder._sanitize": ["datetime.datetime.utcnow", "dynamic_rendezvous._remove_participant_epilogue"], "datetime.datetime.utcnow": [], "dynamic_rendezvous._BackendRendezvousStateHolder.mark_dirty": [], "dynamic_rendezvous._RendezvousContext.__init__": [], "dynamic_rendezvous._RendezvousOpExecutor": ["abc.abstractmethod"], "dynamic_rendezvous._RendezvousOpExecutor.run": [], "dynamic_rendezvous._DistributedRendezvousOpExecutor.__init__": [], "dynamic_rendezvous._DistributedRendezvousOpExecutor._record": ["torch.distributed.elastic.events.construct_and_record_rdzv_event", "dynamic_rendezvous.get_method_name"], "dynamic_rendezvous._DistributedRendezvousOpExecutor.run": ["dynamic_rendezvous._DistributedRendezvousOpExecutor._add_to_participants", "dynamic_rendezvous._DistributedRendezvousOpExecutor._keep_alive", "dynamic_rendezvous._DistributedRendezvousOpExecutor._remove_from_participants", "dynamic_rendezvous._DistributedRendezvousOpExecutor._mark_rendezvous_complete", "dynamic_rendezvous._DistributedRendezvousOpExecutor._remove_from_wait_list", "dynamic_rendezvous._RendezvousContext.__init__", "dynamic_rendezvous._DistributedRendezvousOpExecutor._record", "utils._delay", "dynamic_rendezvous._BackendRendezvousStateHolder.mark_dirty", "api.RendezvousClosedError", "api.RendezvousTimeoutError", "dynamic_rendezvous._DistributedRendezvousOpExecutor._mark_rendezvous_closed", "dynamic_rendezvous._DistributedRendezvousOpExecutor._add_to_wait_list", "dynamic_rendezvous._BackendRendezvousStateHolder.sync"], "api.RendezvousClosedError": [], "api.RendezvousTimeoutError": [], "utils._delay": ["time.sleep", "<builtin>.isinstance", "random.uniform"], "dynamic_rendezvous._DistributedRendezvousOpExecutor._keep_alive": ["datetime.datetime.utcnow", "dynamic_rendezvous._DistributedRendezvousOpExecutor._record"], "dynamic_rendezvous._DistributedRendezvousOpExecutor._add_to_participants": ["datetime.datetime.utcnow", "dynamic_rendezvous._DistributedRendezvousOpExecutor._keep_alive", "<builtin>.len", "dynamic_rendezvous._DistributedRendezvousOpExecutor._mark_rendezvous_complete", "dynamic_rendezvous._DistributedRendezvousOpExecutor._record"], "dynamic_rendezvous._DistributedRendezvousOpExecutor._add_to_wait_list": ["dynamic_rendezvous._DistributedRendezvousOpExecutor._record", "dynamic_rendezvous._DistributedRendezvousOpExecutor._keep_alive"], "dynamic_rendezvous._DistributedRendezvousOpExecutor._remove_from_participants": ["dynamic_rendezvous._DistributedRendezvousOpExecutor._record", "dynamic_rendezvous._remove_participant_epilogue"], "dynamic_rendezvous._DistributedRendezvousOpExecutor._remove_from_wait_list": ["dynamic_rendezvous._DistributedRendezvousOpExecutor._record"], "dynamic_rendezvous._DistributedRendezvousOpExecutor._mark_rendezvous_complete": ["<builtin>.enumerate", "dynamic_rendezvous._DistributedRendezvousOpExecutor._record", "<builtin>.sorted"], "dynamic_rendezvous._DistributedRendezvousOpExecutor._mark_rendezvous_closed": ["dynamic_rendezvous._DistributedRendezvousOpExecutor._record"], "dynamic_rendezvous._should_keep_alive": ["datetime.datetime.utcnow"], "dynamic_rendezvous._RendezvousExitOp.__call__": ["time.monotonic"], "dynamic_rendezvous._RendezvousJoinOp.__call__": ["time.monotonic", "datetime.datetime.utcnow", "dynamic_rendezvous._should_keep_alive", "<builtin>.len", "typing.cast"], "dynamic_rendezvous._RendezvousCloseOp.__call__": ["time.monotonic"], "dynamic_rendezvous._RendezvousKeepAliveOp.__call__": ["time.monotonic", "dynamic_rendezvous._should_keep_alive"], "dynamic_rendezvous.DynamicRendezvousHandler": ["dynamic_rendezvous._NodeDescGenerator.__init__"], "dynamic_rendezvous.DynamicRendezvousHandler.from_backend": ["dynamic_rendezvous._NodeDescGenerator.generate", "datetime.timedelta", "dynamic_rendezvous.DynamicRendezvousHandler.__init__", "dynamic_rendezvous._BackendRendezvousStateHolder.__init__", "dynamic_rendezvous.RendezvousTimeout.__init__"], "dynamic_rendezvous.DynamicRendezvousHandler.__init__": ["dynamic_rendezvous._DistributedRendezvousOpExecutor.__init__", "<builtin>.ValueError", "threading.Lock"], "dynamic_rendezvous.DynamicRendezvousHandler._record": ["torch.distributed.elastic.events.construct_and_record_rdzv_event", "dynamic_rendezvous.get_method_name"], "dynamic_rendezvous.DynamicRendezvousHandler.settings": [], "dynamic_rendezvous.DynamicRendezvousHandler.get_backend": [], "dynamic_rendezvous.DynamicRendezvousHandler.next_rendezvous": ["dynamic_rendezvous.DynamicRendezvousHandler._get_world", "<builtin>.str", "dynamic_rendezvous._DistributedRendezvousOpExecutor.run", "dynamic_rendezvous.DynamicRendezvousHandler._get_deadline", "dynamic_rendezvous.DynamicRendezvousHandler._get_store", "dynamic_rendezvous.DynamicRendezvousHandler._stop_heartbeats", "utils._delay", "dynamic_rendezvous.DynamicRendezvousHandler._start_heartbeats", "dynamic_rendezvous.DynamicRendezvousHandler._record", "<builtin>.type"], "dynamic_rendezvous.DynamicRendezvousHandler._stop_heartbeats": [], "dynamic_rendezvous.DynamicRendezvousHandler._get_deadline": ["time.monotonic"], "dynamic_rendezvous.DynamicRendezvousHandler._start_heartbeats": ["utils._PeriodicTimer", "weakref.ref"], "dynamic_rendezvous.DynamicRendezvousHandler._get_world": ["<builtin>.len"], "dynamic_rendezvous.DynamicRendezvousHandler._get_store": ["torch.distributed.PrefixStore"], "dynamic_rendezvous.DynamicRendezvousHandler.is_closed": ["dynamic_rendezvous.DynamicRendezvousHandler._record", "<builtin>.str", "<builtin>.type", "dynamic_rendezvous._BackendRendezvousStateHolder.sync"], "dynamic_rendezvous.DynamicRendezvousHandler.set_closed": ["dynamic_rendezvous.DynamicRendezvousHandler._record", "<builtin>.type", "<builtin>.str", "dynamic_rendezvous.DynamicRendezvousHandler._close"], "dynamic_rendezvous.DynamicRendezvousHandler._close": ["dynamic_rendezvous.DynamicRendezvousHandler._record", "dynamic_rendezvous._DistributedRendezvousOpExecutor.run", "dynamic_rendezvous.DynamicRendezvousHandler._get_deadline"], "dynamic_rendezvous.DynamicRendezvousHandler.num_nodes_waiting": ["<builtin>.str", "<builtin>.len", "dynamic_rendezvous.DynamicRendezvousHandler._record", "<builtin>.type", "dynamic_rendezvous._BackendRendezvousStateHolder.sync"], "dynamic_rendezvous.DynamicRendezvousHandler.get_run_id": [], "dynamic_rendezvous.DynamicRendezvousHandler.shutdown": ["<builtin>.str", "dynamic_rendezvous.DynamicRendezvousHandler._close", "dynamic_rendezvous.DynamicRendezvousHandler._stop_heartbeats", "dynamic_rendezvous.DynamicRendezvousHandler._record", "<builtin>.type"], "dynamic_rendezvous.DynamicRendezvousHandler._keep_alive_weak": [], "dynamic_rendezvous.DynamicRendezvousHandler._keep_alive": ["dynamic_rendezvous.DynamicRendezvousHandler._record", "<builtin>.type", "dynamic_rendezvous._DistributedRendezvousOpExecutor.run", "dynamic_rendezvous.DynamicRendezvousHandler._get_deadline"], "weakref.ref": [], "utils._PeriodicTimer": [], "torch.distributed.PrefixStore": [], "dynamic_rendezvous._get_timeout": ["datetime.timedelta"], "dynamic_rendezvous.create_handler": ["<builtin>.str", "dynamic_rendezvous._get_timeout", "dynamic_rendezvous.DynamicRendezvousHandler.from_backend", "torch.distributed.elastic.events.construct_and_record_rdzv_event", "dynamic_rendezvous.RendezvousTimeout.__init__", "<builtin>.type"], "etcd_rendezvous_backend": [], "etcd_rendezvous_backend.EtcdRendezvousBackend.__init__": ["<builtin>.ValueError"], "etcd_rendezvous_backend.EtcdRendezvousBackend.name": [], "etcd_rendezvous_backend.EtcdRendezvousBackend.get_state": ["api.RendezvousConnectionError", "etcd_rendezvous_backend.EtcdRendezvousBackend._decode_state"], "etcd_rendezvous_backend.EtcdRendezvousBackend._decode_state": ["base64.b64decode", "api.RendezvousStateError"], "etcd_rendezvous_backend.EtcdRendezvousBackend.set_state": ["<builtin>.int", "base64.b64encode", "api.RendezvousConnectionError", "etcd_rendezvous_backend.EtcdRendezvousBackend._decode_state", "etcd_rendezvous_backend.EtcdRendezvousBackend.set_state.get_state"], "etcd_rendezvous_backend.EtcdRendezvousBackend.set_state.get_state": ["etcd_rendezvous_backend.EtcdRendezvousBackend.get_state"], "etcd_rendezvous_backend._create_etcd_client": ["typing.cast", "api.RendezvousConnectionError", "etcd.Client", "<builtin>.ValueError", "utils.parse_rendezvous_endpoint"], "etcd.Client": [], "etcd_rendezvous_backend.create_backend": ["etcd_rendezvous_backend.EtcdRendezvousBackend.__init__", "etcd_store.EtcdStore", "etcd_rendezvous_backend._create_etcd_client"], "etcd_store.EtcdStore": [], "etcd_server": ["logging.getLogger"], "etcd_server.find_free_port": ["socket.getaddrinfo", "<builtin>.print", "socket.socket", "<builtin>.RuntimeError"], "etcd_server.stop_etcd": ["shutil.rmtree"], "etcd_server.EtcdServer.__init__": ["os.path.join", "os.environ.get", "os.path.isfile", "tempfile.mkdtemp", "os.path.dirname"], "etcd_server.EtcdServer._get_etcd_server_process": ["<builtin>.RuntimeError"], "etcd_server.EtcdServer.get_port": [], "etcd_server.EtcdServer.get_host": [], "etcd_server.EtcdServer.get_endpoint": [], "etcd_server.EtcdServer.start": ["os.path.join", "os.makedirs", "etcd_server.EtcdServer._start", "etcd_server.stop_etcd", "<builtin>.str", "atexit.register", "shutil.rmtree"], "etcd_server.EtcdServer._start": ["shlex.split", "subprocess.Popen", "etcd_server.EtcdServer._wait_for_ready", "etcd_server.find_free_port"], "etcd_server.EtcdServer._wait_for_ready": ["etcd.Client", "<builtin>.TimeoutError", "<builtin>.RuntimeError", "etcd_server.EtcdServer._get_etcd_server_process", "time.sleep", "time.time"], "etcd_server.EtcdServer.get_client": ["etcd.Client"], "<builtin>.TimeoutError": [], "etcd_server.EtcdServer.stop": ["etcd_server.stop_etcd"], "etcd_store": [], "etcd_store.cas_delay": ["random.uniform", "time.sleep"], "random.uniform": [], "etcd_store.EtcdStore.__init__": ["<builtin>.super", "torch.distributed.Store.set_timeout"], "torch.distributed.Store.set_timeout": [], "etcd_store.EtcdStore.set": ["etcd_store.EtcdStore._encode"], "etcd_store.EtcdStore._encode": ["base64.b64encode", "<builtin>.type", "<builtin>.ValueError"], "etcd_store.EtcdStore.get": ["etcd_store.EtcdStore._decode", "etcd_store.EtcdStore._encode", "<builtin>.LookupError", "etcd_store.EtcdStore._try_wait_get"], "etcd_store.EtcdStore._try_wait_get": ["time.time", "<builtin>.len"], "<builtin>.LookupError": [], "etcd_store.EtcdStore._decode": ["<builtin>.type", "base64.b64decode", "<builtin>.ValueError"], "etcd_store.EtcdStore.add": ["<builtin>.str", "etcd_store.EtcdStore._encode", "etcd_store.EtcdStore._decode", "<builtin>.int", "etcd_store.cas_delay"], "etcd_store.EtcdStore.wait": ["etcd_store.EtcdStore._encode", "<builtin>.LookupError", "etcd_store.EtcdStore._try_wait_get"], "etcd_store.EtcdStore.check": ["datetime.timedelta", "etcd_store.EtcdStore._encode", "etcd_store.EtcdStore._try_wait_get"], "registry": [], "registry._create_static_handler": ["static_tcp_rendezvous.create_rdzv_handler"], "static_tcp_rendezvous.create_rdzv_handler": ["typing.cast", "<builtin>.ValueError", "torch.distributed.elastic.rendezvous.utils.parse_rendezvous_endpoint", "static_tcp_rendezvous.StaticTCPRendezvous.__init__", "<builtin>.int"], "registry._create_etcd_handler": ["etcd_rendezvous.create_rdzv_handler"], "etcd_rendezvous.create_rdzv_handler": [], "registry._create_etcd_v2_handler": ["dynamic_rendezvous.create_handler", "etcd_rendezvous_backend.create_backend"], "registry._create_c10d_handler": ["c10d_rendezvous_backend.create_backend", "dynamic_rendezvous.create_handler"], "registry._register_default_handlers": ["api.rendezvous_handler_registry.register"], "api.rendezvous_handler_registry.register": [], "registry.get_rendezvous_handler": ["api.rendezvous_handler_registry.create_handler"], "api.rendezvous_handler_registry.create_handler": [], "static_tcp_rendezvous": ["logging.getLogger"], "static_tcp_rendezvous.StaticTCPRendezvous.__init__": ["datetime.timedelta"], "static_tcp_rendezvous.StaticTCPRendezvous.get_backend": [], "static_tcp_rendezvous.StaticTCPRendezvous.next_rendezvous": ["torch.distributed.PrefixStore", "torch.distributed.TCPStore"], "static_tcp_rendezvous.StaticTCPRendezvous.is_closed": [], "static_tcp_rendezvous.StaticTCPRendezvous.set_closed": [], "static_tcp_rendezvous.StaticTCPRendezvous.num_nodes_waiting": [], "static_tcp_rendezvous.StaticTCPRendezvous.get_run_id": [], "static_tcp_rendezvous.StaticTCPRendezvous.shutdown": [], "utils._parse_rendezvous_config": ["<builtin>.ValueError"], "utils._try_parse_port": ["<builtin>.int", "re.match"], "ipaddress.ip_address": [], "utils._PeriodicTimer.__init__": ["threading.Event"], "utils._PeriodicTimer.name": [], "utils._PeriodicTimer.set_name": ["<builtin>.RuntimeError"], "utils._PeriodicTimer.start": ["threading.Thread", "weakref.finalize", "<builtin>.RuntimeError"], "weakref.finalize": [], "utils._PeriodicTimer.cancel": [], "utils._PeriodicTimer._run": [], "utils._PeriodicTimer._stop_thread": [], "api.TimerRequest.__init__": [], "api.TimerRequest.__eq__": ["<builtin>.isinstance"], "api.TimerClient": ["abc.abstractmethod"], "api.TimerClient.acquire": [], "api.TimerClient.release": [], "api.RequestQueue": ["abc.abstractmethod"], "api.RequestQueue.size": [], "api.RequestQueue.get": [], "api.TimerServer.__init__": ["<builtin>.super"], "api.TimerServer": ["abc.abstractmethod"], "api.TimerServer.register_timers": [], "api.TimerServer.clear_timers": [], "api.TimerServer.get_expired_timers": [], "api.TimerServer._reap_worker": [], "api.TimerServer._reap_worker_no_throw": ["logging.error", "api.TimerServer._reap_worker"], "api.TimerServer._watchdog_loop": ["logging.error", "api.TimerServer._run_watchdog"], "api.TimerServer._run_watchdog": ["logging.error", "time.time", "api.TimerServer.clear_timers", "logging.info", "<builtin>.set", "api.TimerServer._get_scopes", "api.TimerServer._reap_worker_no_throw", "<builtin>.max", "api.TimerServer.register_timers", "api.TimerServer.get_expired_timers"], "api.TimerServer._get_scopes": [], "api.TimerServer.start": ["<builtin>.type", "threading.Thread", "logging.info"], "api.TimerServer.stop": ["<builtin>.type", "logging.info"], "api.expires": ["inspect.getframeinfo", "inspect.stack", "time.time", "<builtin>.RuntimeError"], "local_timer": [], "local_timer.LocalTimerClient.__init__": ["<builtin>.super"], "local_timer.LocalTimerClient.acquire": ["api.TimerRequest", "os.getpid"], "api.TimerRequest": [], "local_timer.LocalTimerClient.release": ["api.TimerRequest", "os.getpid"], "local_timer.MultiprocessingRequestQueue.__init__": ["<builtin>.super"], "local_timer.MultiprocessingRequestQueue.size": [], "local_timer.MultiprocessingRequestQueue.get": ["time.time", "<builtin>.range"], "local_timer.LocalTimerServer.__init__": ["local_timer.MultiprocessingRequestQueue.__init__", "<builtin>.super"], "local_timer.LocalTimerServer.register_timers": ["api.TimerServer._timers.pop"], "api.TimerServer._timers.pop": [], "local_timer.LocalTimerServer.clear_timers": ["api.TimerServer._timers.pop", "api.TimerServer._timers.keys", "<builtin>.list"], "api.TimerServer._timers.keys": [], "local_timer.LocalTimerServer.get_expired_timers": ["api.TimerServer._timers.values"], "api.TimerServer._timers.values": [], "local_timer.LocalTimerServer._reap_worker": ["os.kill", "logging.info", "logging.error"], "api.get_env_variable_or_raise": ["<builtin>.ValueError", "os.environ.get"], "api.get_socket_with_port": ["socket.getaddrinfo", "socket.socket", "<builtin>.RuntimeError"], "api.macros.substitute": ["<builtin>.isinstance", "string.Template"], "string.Template": [], "distributed": ["torch.distributed.elastic.utils.logging.get_logger", "torch.distributed.is_available", "torch.distributed.rpc.is_available", "typing.TypeVar"], "distributed.create_c10d_store": ["<builtin>.IOError", "<builtin>.str", "datetime.timedelta", "distributed.get_free_port", "distributed._check_full_rank", "<builtin>.TimeoutError", "<builtin>.ValueError", "torch.distributed.TCPStore"], "distributed.get_free_port": ["distributed.get_socket_with_port", "contextlib.closing"], "distributed._check_full_rank": ["<builtin>.str", "<builtin>.TimeoutError"], "<builtin>.IOError": [], "distributed.get_socket_with_port": ["<builtin>.RuntimeError", "socket.getaddrinfo", "socket.socket"], "logging": [], "logging.get_logger": ["logging._setup_logger", "logging._derive_module_name"], "logging._derive_module_name": ["os.path.basename", "warnings.warn", "inspect.stack", "os.path.splitext", "inspect.getmodule", "<builtin>.len"], "logging._setup_logger": ["os.environ.get"], "inspect.getmodule": [], "store": [], "store.get_all": ["<builtin>.range"], "store.synchronize": ["datetime.timedelta", "store.get_all"], "store.barrier": ["store.synchronize"], "compare.FauxTorch.sparse": ["compare.FauxTorch.Sparse.__init__"], "compare.FauxTorch.Sparse.__init__": [], "compare.FauxTorch.Sparse.extra_overhead": ["time.sleep", "<builtin>.sum"], "compare.FauxTorch.Sparse.mm": ["torch.sparse.mm", "compare.FauxTorch.Sparse.extra_overhead"], "torch.sparse.mm": [], "compare.generate_coo_data": ["torch.tensor", "torch.rand"], "compare.gen_sparse": ["torch.sparse_coo_tensor", "compare.generate_coo_data", "<builtin>.int", "<builtin>.len"], "torch.utils.benchmark.FuzzedSparseTensor": [], "torch.utils.benchmark.op_fuzzers.sparse_unary.UnaryOpSparseFuzzer": [], "torch.utils.benchmark.op_fuzzers.sparse_binary.BinaryOpSparseFuzzer": [], "examples.SimpleWithLeaf.__init__": ["<builtin>.super"], "examples.SimpleWithLeaf.forward": ["some_dependency.a_non_torch_leaf"], "some_dependency": [], "fx2trt": [], "fx2trt.torch_dtype_to_trt": ["<builtin>.TypeError"], "fx2trt.torch_dtype_from_trt": ["<builtin>.TypeError"], "fx2trt.TRTModule.__init__": ["torch.nn.Module._register_state_dict_hook", "<builtin>.super"], "torch.nn.Module._register_state_dict_hook": [], "fx2trt.TRTModule._on_state_dict": ["<builtin>.bytearray"], "fx2trt.TRTModule._load_from_state_dict": ["tensorrt.Runtime", "tensorrt.Logger"], "tensorrt.Logger": [], "tensorrt.Runtime": [], "fx2trt.TRTModule.forward": ["<builtin>.len", "fx2trt.torch_dtype_from_trt", "torch.empty", "<builtin>.enumerate", "torch.cuda.current_stream", "<builtin>.tuple", "<builtin>.range"], "fx2trt.TRTModule.enable_profiling": ["tensorrt.Profiler", "<builtin>.RuntimeError"], "tensorrt.Profiler": [], "fx2trt.tensorrt_converter": [], "fx2trt.tensorrt_converter.register_converter": [], "fx2trt.InputTensorSpec": ["torch.device"], "fx2trt.InputTensorSpec.from_tensor": ["typing.NamedTuple.__init__"], "fx2trt.InputTensorSpec.from_tensors": ["fx2trt.InputTensorSpec.from_tensor"], "fx2trt.get_dynamic_dims": ["<builtin>.enumerate"], "fx2trt.BaseTRTInterpreter.__init__": ["<builtin>.super", "<builtin>.int", "tensorrt.Builder", "tensorrt.Logger", "fx2trt.BaseTRTInterpreter.validate_input_specs"], "tensorrt.Builder": [], "fx2trt.BaseTRTInterpreter.validate_input_specs": ["<builtin>.all", "<builtin>.len", "<builtin>.range", "fx2trt.get_dynamic_dims"], "fx2trt.BaseTRTInterpreter.run": ["<builtin>.super", "warnings.warn"], "fx2trt.BaseTRTInterpreter.run_node": ["<builtin>.str", "<builtin>.super"], "fx2trt.BaseTRTInterpreter.placeholder": ["<builtin>.tuple", "<builtin>.enumerate", "fx2trt.torch_dtype_to_trt", "torch.fx.Interpreter._input_names.append"], "torch.fx.Interpreter._input_names.append": [], "fx2trt.BaseTRTInterpreter.call_module": ["<builtin>.type", "<builtin>.RuntimeError", "<builtin>.isinstance", "torch.fx.Interpreter.fetch_attr"], "torch.fx.Interpreter.fetch_attr": [], "fx2trt.BaseTRTInterpreter.call_function": ["torch.typename", "<builtin>.RuntimeError"], "fx2trt.BaseTRTInterpreter.call_method": ["<builtin>.RuntimeError", "<builtin>.isinstance"], "fx2trt.BaseTRTInterpreter.output": ["<builtin>.len", "<builtin>.RuntimeError", "<builtin>.isinstance", "torch.fx.Interpreter._output_names.append", "<builtin>.all", "<builtin>.enumerate"], "torch.fx.Interpreter._output_names.append": [], "fx2trt.TRTInterpreter.__init__": ["<builtin>.isinstance", "copy.deepcopy", "<builtin>.super", "torch.fx.symbolic_trace", "torch.fx.experimental.normalize.NormalizeArgs"], "torch.fx.experimental.normalize.NormalizeArgs": [], "base_pruner": [], "base_pruner._module_to_path": ["base_pruner._module_to_path"], "base_pruner._path_to_module": ["<builtin>.getattr"], "base_pruner.BasePruner.__init__": ["<builtin>.isinstance", "<builtin>.type", "copy.deepcopy", "<builtin>.super", "<builtin>.dict", "base_pruner._module_to_path"], "base_pruner.BasePruner.__getstate__": [], "base_pruner.BasePruner.__setstate__": ["abc.ABC.__dict__.update"], "abc.ABC.__dict__.update": [], "base_pruner.BasePruner.__repr__": ["<builtin>.enumerate", "<builtin>.sorted"], "base_pruner.BasePruner.bias_hook": ["<builtin>.len", "<builtin>.getattr"], "base_pruner.BasePruner.prepare": ["torch.nn.utils.parametrize.register_parametrization", "base_pruner._path_to_module", "<builtin>.isinstance", "torch.nn.Parameter", "parametrization.Conv2dActivationReconstruction", "parametrization.LinearActivationReconstruction", "<builtin>.getattr", "<builtin>.NotImplementedError", "torch.tensor"], "torch.nn.utils.parametrize.register_parametrization": [], "parametrization.LinearActivationReconstruction": [], "parametrization.Conv2dActivationReconstruction": [], "base_pruner.BasePruner.convert": ["base_pruner._path_to_module", "<builtin>.getattr", "<builtin>.delattr", "torch.nn.utils.parametrize.remove_parametrizations"], "torch.nn.utils.parametrize.remove_parametrizations": [], "base_pruner.BasePruner.step": ["base_pruner._path_to_module", "torch.no_grad", "base_pruner.BasePruner.update_mask"], "base_pruner.BasePruner.update_mask": [], "base_pruner.BasePruner": ["abc.abstractmethod"], "parametrization": [], "parametrization.PruningParametrization.__init__": ["<builtin>.super", "<builtin>.range", "<builtin>.set"], "parametrization.PruningParametrization.forward": ["<builtin>.list"], "parametrization.LinearActivationReconstruction.__init__": [], "parametrization.LinearActivationReconstruction.__call__": ["torch.zeros", "<builtin>.list", "<builtin>.len"], "parametrization.Conv2dActivationReconstruction.__init__": [], "parametrization.Conv2dActivationReconstruction.__call__": ["torch.zeros", "<builtin>.list", "<builtin>.len"], "dispatch.dispatch": [], "core._reify": ["core.reify", "<builtin>.map", "functools.partial", "<builtin>.dict", "<builtin>.tuple", "<builtin>.iter", "<builtin>.list"], "core.reify": ["core.reify", "variable.isvar", "core._reify"], "variable.isvar": ["utils.hashable"], "core._unify": ["<builtin>.zip", "<builtin>.len", "core.unify"], "core.unify": ["variable.isvar", "unification_tools.assoc", "core.unify", "utils.transitive_get", "core._unify"], "utils.transitive_get": ["utils.hashable"], "unification_tools.assoc": [], "dispatch": ["<builtin>.dict", "functools.partial"], "match": ["<builtin>.dict"], "match.Dispatcher.__init__": ["<builtin>.dict"], "match.Dispatcher.add": ["utils.freeze"], "utils.freeze": ["<builtin>.frozenset", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.map"], "match.Dispatcher.__call__": ["match.Dispatcher.resolve"], "match.Dispatcher.resolve": ["utils.freeze", "<builtin>.len", "core.unify", "<builtin>.NotImplementedError", "<builtin>.str"], "match.Dispatcher.register": [], "match.Dispatcher.register._": ["match.Dispatcher.add"], "match.VarDispatcher.__call__": ["match.Dispatcher.resolve", "<builtin>.dict"], "match.match": [], "match.match._": [], "match.supercedes": ["core.reify", "<builtin>.dict", "core.unify", "variable.isvar"], "match.edge": ["match.supercedes"], "match.ordering": ["<builtin>.list", "<builtin>.map", "<builtin>.dict", "match.edge", "utils._toposort", "unification_tools.groupby"], "unification_tools.groupby": ["unification_tools.getter", "unification_tools.getter.<lambda2>", "unification_tools.getter.<lambda1>", "collections.defaultdict", "<builtin>.callable"], "utils._toposort": ["<builtin>.ValueError", "<builtin>.any", "<builtin>.set", "<builtin>.dict", "utils.reverse_dict", "collections.OrderedDict.fromkeys", "collections.OrderedDict"], "more": ["dispatch.dispatch"], "more.unifiable": [], "more.reify_object": ["more._reify_object_dict", "more._reify_object_slots", "<builtin>.hasattr"], "more._reify_object_slots": ["<builtin>.type", "<builtin>.zip", "core.reify", "<builtin>.getattr", "<builtin>.setattr"], "more._reify_object_dict": ["core.reify", "<builtin>.type"], "more._reify": ["core.reify", "<builtin>.slice"], "more.unify_object": ["<builtin>.type", "<builtin>.getattr", "core.unify", "<builtin>.hasattr"], "more._unify": ["core.unify"], "unification_tools": [], "unification_tools._get_factory": ["<builtin>.TypeError"], "unification_tools.merge": ["<builtin>.len", "<builtin>.isinstance", "unification_tools._get_factory"], "unification_tools.merge_with": ["<builtin>.len", "<builtin>.isinstance", "unification_tools.valmap", "unification_tools._get_factory"], "unification_tools.valmap": ["<builtin>.map", "<builtin>.zip"], "unification_tools.keymap": ["<builtin>.map", "<builtin>.zip"], "unification_tools.itemmap": ["<builtin>.map"], "unification_tools.valfilter": [], "unification_tools.keyfilter": [], "unification_tools.itemfilter": [], "unification_tools.dissoc": ["<builtin>.len", "<builtin>.set", "unification_tools._get_factory"], "unification_tools.assoc_in": ["unification_tools.update_in"], "unification_tools.assoc_in.<lambda1>": [], "unification_tools.update_in": ["<builtin>.next", "unification_tools.assoc_in.<lambda1>", "<builtin>.iter"], "unification_tools.get_in": ["functools.reduce"], "unification_tools.getter": ["<builtin>.len", "<builtin>.isinstance", "operator.itemgetter"], "unification_tools.getter.<lambda1>": [], "operator.itemgetter": [], "unification_tools.getter.<lambda2>": [], "unification_tools.groupby.<lambda1>": [], "unification_tools.first": ["<builtin>.next", "<builtin>.iter"], "utils.hashable": ["<builtin>.hash"], "utils.raises": [], "utils.reverse_dict": ["<builtin>.tuple", "collections.OrderedDict"], "utils.xfail": ["<builtin>.Exception"], "<builtin>.frozenset": [], "variable": ["dispatch.dispatch", "contextlib.contextmanager", "<builtin>.set", "torch._C._ImperativeEngine"], "variable.Var.__new__": ["<builtin>.len"], "variable.Var.__str__": ["<builtin>.str"], "variable.Var.__eq__": ["<builtin>.type"], "variable.Var.__hash__": ["<builtin>.hash", "<builtin>.type"], "variable.var": [], "variable.var.<lambda1>": [], "variable.vars": [], "variable.vars.<lambda1>": ["<builtin>.range", "variable.var"], "variable.variables": ["<builtin>.set"], "convnet_benchmarks.net_DAG_Builder": ["<builtin>.print", "caffe2.python.SparseTransformer.netbuilder"], "caffe2.python.SparseTransformer.netbuilder": [], "convnet_benchmarks.AddInput": ["<builtin>.float"], "device_reduce_sum_bench": ["logging.basicConfig", "os.path.basename", "logging.getLogger", "caffe2.python.workspace.GlobalInit", "device_reduce_sum_bench.main"], "device_reduce_sum_bench.BenchmarkMeta.__new__": [], "device_reduce_sum_bench.Benchmark.__init__": [], "device_reduce_sum_bench.Benchmark.display": ["<builtin>.print", "<builtin>.type"], "device_reduce_sum_bench.SumElements.run": ["itertools.cycle", "caffe2.python.hypothesis_test_util.runOpBenchmark", "caffe2.python.core.CreateOperator", "numpy.random.rand", "itertools.imap", "<builtin>.range"], "itertools.imap": [], "caffe2.python.hypothesis_test_util.runOpBenchmark": [], "device_reduce_sum_bench.SumSqrElements.run": ["itertools.cycle", "caffe2.python.hypothesis_test_util.runOpBenchmark", "caffe2.python.core.CreateOperator", "numpy.random.rand", "itertools.imap", "<builtin>.range"], "device_reduce_sum_bench.SoftMaxWithLoss.run": ["itertools.cycle", "caffe2.python.hypothesis_test_util.runOpBenchmark", "caffe2.python.core.CreateOperator", "numpy.random.rand", "itertools.imap", "<builtin>.range"], "device_reduce_sum_bench.parse_args": ["argparse.ArgumentParser", "os.path.basename"], "device_reduce_sum_bench.main": ["device_reduce_sum_bench.parse_args"], "funhash_op_test": [], "funhash_op_test.TestFunHash": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.floats"], "funhash_op_test.TestFunHash.test_funhash": ["caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "scipy.sparse.coo_matrix"], "scipy.sparse.coo_matrix": [], "net_construct_bench": ["logging.getLogger", "caffe2.python.workspace.GlobalInit", "cProfile.run", "logging.basicConfig"], "net_construct_bench.AddMomentumParameterUpdate": ["<builtin>.len"], "net_construct_bench.Create": ["caffe2.python.data_parallel_model.Parallelize_GPU", "time.time", "<builtin>.range", "caffe2.python.cnn.CNNModelHelper", "<builtin>.list", "<builtin>.len"], "net_construct_bench.Create.create_resnet50_model_ops": ["caffe2.python.models.resnet.create_resnet50"], "caffe2.python.models.resnet.create_resnet50": [], "net_construct_bench.Create.add_parameter_update_ops": ["<builtin>.int", "net_construct_bench.AddMomentumParameterUpdate"], "net_construct_bench.Create.add_image_input": [], "net_construct_bench.main": ["argparse.ArgumentParser", "net_construct_bench.Create"], "cProfile.run": [], "SparseTransformer": [], "SparseTransformer.NetDefNode.__init__": ["SparseTransformer.NetDefNode.insertInput"], "SparseTransformer.NetDefNode.insertInput": ["<builtin>.isinstance"], "SparseTransformer.NetDefNode.deleteInput": ["<builtin>.isinstance"], "SparseTransformer.maskNallocate": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "SparseTransformer.transFCRelu": ["<builtin>.str", "<builtin>.len", "<builtin>.print", "SparseTransformer.NetDefNode.__init__", "SparseTransformer.maskNallocate"], "SparseTransformer.Prune2Sparse": ["SparseTransformer.transFCRelu", "SparseTransformer.Prune2Sparse"], "SparseTransformer.net2list": [], "SparseTransformer.netbuilder": ["SparseTransformer.NetDefNode.insertInput", "<builtin>.enumerate", "<builtin>.print", "SparseTransformer.NetDefNode.__init__"], "sparse_funhash_op_test": [], "sparse_funhash_op_test.TestFunHash": ["hypothesis.strategies.floats", "hypothesis.strategies.integers", "hypothesis.given"], "sparse_funhash_op_test.TestFunHash.test_funhash": ["scipy.sparse.coo_matrix", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "sparse_reshape_op_test": [], "sparse_reshape_op_test.test_reshape": ["scipy.sparse.coo_matrix", "caffe2.python.workspace.FeedBlob", "numpy.random.random_sample", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_array_equal"], "sparse_reshape_op_test.TestSparseMatrixReshapeOp.test_basic_reshape": ["sparse_reshape_op_test.test_reshape"], "sparse_reshape_op_test.TestSparseMatrixReshapeOp.test_missing_dim": ["sparse_reshape_op_test.test_reshape"], "sparse_reshape_op_test.TestSparseMatrixReshapeOp.test_stride_only": ["sparse_reshape_op_test.test_reshape"], "sparse_reshape_op_test.TestSparseMatrixReshapeOp.test_sparse_reshape_mm": ["scipy.sparse.coo_matrix", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "numpy.testing.assert_allclose", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob"], "tt_contraction_op_test": [], "tt_contraction_op_test.TestTTContraction": ["hypothesis.given", "hypothesis.strategies.integers"], "tt_contraction_op_test.TestTTContraction.test_tt_contraction": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "tt_contraction_op_test.TestTTContraction.test_tt_contraction.tt_contraction_ref": [], "tt_pad_op_test": [], "tt_pad_op_test.TestTTPad": ["hypothesis.given", "hypothesis.strategies.integers"], "tt_pad_op_test.TestTTPad.test_tt_pad": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "tt_pad_op_test.TestTTPad.test_tt_pad.tt_pad_ref": ["numpy.zeros", "numpy.vstack", "numpy.array"], "test_batchmatmul_nnpi_fp16": ["unittest.main", "caffe2.python.core.GlobalInit"], "test_batchmatmul_nnpi_fp16.TestBatchMatMul": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.settings", "datetime.timedelta"], "test_batchmatmul_nnpi_fp16.TestBatchMatMul.test_batch_matmul": ["numpy.random.randint", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "numpy.allclose", "<builtin>.sum", "numpy.random.seed", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_equal", "numpy.random.rand", "<builtin>.print", "numpy.abs"], "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net": [], "caffe2.python.fakelowp.test_utils.print_test_debug_info": [], "test_batchnorm_nnpi_fp16": ["caffe2.python.core.GlobalInit"], "test_batchnorm_nnpi_fp16.reference_spatialbn_test16": ["numpy.sqrt"], "test_batchnorm_nnpi_fp16.BatchnormTest": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.settings", "datetime.timedelta"], "test_batchnorm_nnpi_fp16.BatchnormTest.test_bn": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "<builtin>.sum", "numpy.testing.assert_equal", "numpy.random.randn", "numpy.allclose", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.abs", "caffe2.python.core.CreateOperator", "numpy.random.seed", "caffe2.python.workspace.RunNet", "numpy.random.rand", "caffe2.python.workspace.CreateNet", "numpy.max", "caffe2.proto.caffe2_pb2.NetDef"], "test_chunking": ["caffe2.python.workspace.GlobalInit"], "test_chunking.Fusions._get_scale_zp": ["numpy.float32", "<builtin>.int", "numpy.clip", "numpy.min", "<builtin>.min", "<builtin>.round", "numpy.max", "numpy.float16"], "numpy.float16": [], "test_chunking.Fusions": ["hypothesis.strategies.floats", "hypothesis.given", "datetime.timedelta", "hypothesis.strategies.integers", "hypothesis.settings"], "test_chunking.Fusions.test_ParallelFC": ["numpy.abs", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_equal", "test_chunking.Fusions._get_scale_zp", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.ResetWorkspace", "numpy.random.seed", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "numpy.allclose", "<builtin>.print", "numpy.random.uniform", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet", "caffe2.python.core.CreateOperator", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.python.workspace.FeedBlob", "<builtin>.sum", "numpy.zeros", "caffe2.python.workspace.FetchBlob"], "test_deq_swish_quant_nnpi": ["caffe2.python.core.GlobalInit"], "test_deq_swish_quant_nnpi.DeqSwishQuantTest._get_scale_zp": ["numpy.min", "numpy.float16", "numpy.float32", "<builtin>.int", "numpy.max", "numpy.clip", "<builtin>.round", "<builtin>.min"], "test_deq_swish_quant_nnpi.DeqSwishQuantTest._sigmoid": ["numpy.exp", "numpy.float32"], "test_deq_swish_quant_nnpi.DeqSwishQuantTest._swish": ["numpy.float32", "test_deq_swish_quant_nnpi.DeqSwishQuantTest._sigmoid"], "test_deq_swish_quant_nnpi.DeqSwishQuantTest": ["datetime.timedelta", "hypothesis.settings"], "test_deq_swish_quant_nnpi.DeqSwishQuantTest.test_swish_int8": ["caffe2.python.core.Net", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.ResetWorkspace", "<builtin>.sum", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.random.seed", "numpy.testing.assert_equal", "caffe2.python.workspace.FetchInt8Blob", "numpy.zeros", "caffe2.python.workspace.FeedBlob", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "numpy.identity", "caffe2.python.core.CreateOperator", "numpy.abs", "numpy.linspace", "numpy.count_nonzero", "test_deq_swish_quant_nnpi.DeqSwishQuantTest._get_scale_zp", "numpy.max", "test_deq_swish_quant_nnpi.DeqSwishQuantTest._swish", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNetOnce"], "numpy.linspace": [], "numpy.identity": [], "caffe2.python.workspace.FetchInt8Blob": [], "numpy.count_nonzero": [], "test_fc_nnpi_fp16": ["unittest.main", "caffe2.python.core.GlobalInit"], "test_fc_nnpi_fp16.FCTest": ["datetime.timedelta", "hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.given"], "test_fc_nnpi_fp16.FCTest.test_clip": ["caffe2.python.workspace.CreateNet", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunNet", "numpy.random.seed", "numpy.full", "numpy.random.randint", "caffe2.python.workspace.SwitchWorkspace", "caffe2.proto.caffe2_pb2.NetDef", "numpy.testing.assert_allclose", "caffe2.python.workspace.GlobalInit"], "test_fc_nnpi_fp16.FCTest.test_fc_exercise": ["caffe2.python.workspace.CreateNet", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "numpy.abs", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "<builtin>.sum", "caffe2.python.workspace.FetchBlob", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunNet", "numpy.random.seed", "numpy.testing.assert_equal", "numpy.random.randint", "<builtin>.range", "caffe2.proto.caffe2_pb2.NetDef", "numpy.allclose", "caffe2.python.workspace.SwitchWorkspace"], "test_fc_nnpi_fp16.FCTest.test_fc_numeric_cases": ["<builtin>.sum", "numpy.max", "numpy.testing.assert_equal", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.python.core.CreateOperator", "numpy.random.seed", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.ResetWorkspace", "numpy.array", "caffe2.python.workspace.FeedBlob", "numpy.abs", "<builtin>.len", "caffe2.python.workspace.RunNet", "<builtin>.range", "caffe2.python.workspace.CreateNet", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "numpy.count_nonzero"], "test_fc_nnpi_fp16.FCTest.test_fc_num0": ["caffe2.python.workspace.CreateNet", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "numpy.abs", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "<builtin>.sum", "caffe2.python.workspace.FetchBlob", "numpy.max", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunNet", "numpy.testing.assert_equal", "numpy.count_nonzero", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.SwitchWorkspace"], "test_fusions": ["caffe2.python.workspace.GlobalInit"], "test_fusions.Fusions": ["hypothesis.strategies.floats", "hypothesis.given", "hypothesis.settings", "datetime.timedelta", "hypothesis.strategies.integers"], "test_fusions.Fusions.test_tanhquantize": ["caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "numpy.tanh", "caffe2.python.workspace.RunNet", "caffe2.python.core.CreateOperator", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.linspace", "numpy.random.seed", "numpy.array_equal", "numpy.testing.assert_equal", "<builtin>.sum", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchInt8Blob", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.CreateNet"], "test_int8_ops_nnpi": ["caffe2.python.core.GlobalInit"], "test_int8_ops_nnpi.Int8OpsTest._get_scale_zp": ["numpy.max", "<builtin>.round", "<builtin>.min", "numpy.float32", "<builtin>.int", "numpy.float16", "numpy.min", "numpy.clip"], "test_int8_ops_nnpi.Int8OpsTest": ["hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.strategies.integers", "datetime.timedelta"], "test_int8_ops_nnpi.Int8OpsTest.test_int8_quantize": ["numpy.random.rand", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.allclose", "numpy.testing.assert_equal", "test_int8_ops_nnpi.Int8OpsTest._get_scale_zp", "caffe2.python.workspace.RunNet", "numpy.random.uniform", "numpy.identity", "<builtin>.print", "caffe2.python.workspace.CreateNet", "numpy.abs", "<builtin>.sum", "numpy.random.seed", "caffe2.python.workspace.ResetWorkspace", "numpy.zeros", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "test_int8_ops_nnpi.Int8OpsTest.test_int8_fc": ["caffe2.python.workspace.RunNetOnce", "<builtin>.float", "caffe2.python.core.Net", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.allclose", "numpy.testing.assert_equal", "test_int8_ops_nnpi.Int8OpsTest._get_scale_zp", "caffe2.python.workspace.RunNet", "numpy.random.uniform", "<builtin>.print", "caffe2.python.workspace.CreateNet", "numpy.abs", "numpy.dot", "<builtin>.sum", "numpy.random.seed", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "test_int8_ops_nnpi.Int8OpsTest.test_int8_small_input": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.allclose", "numpy.testing.assert_equal", "test_int8_ops_nnpi.Int8OpsTest._get_scale_zp", "caffe2.python.workspace.RunNet", "numpy.random.uniform", "numpy.identity", "<builtin>.print", "caffe2.python.workspace.CreateNet", "numpy.abs", "<builtin>.sum", "numpy.random.seed", "caffe2.python.workspace.ResetWorkspace", "numpy.zeros", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "test_int8_quant": ["caffe2.python.workspace.GlobalInit"], "test_int8_quant.QuantTest": ["datetime.timedelta", "hypothesis.settings"], "test_int8_quant.QuantTest.test_dequantize": ["<builtin>.print", "<builtin>.sum", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet", "numpy.asarray", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "<builtin>.len", "numpy.testing.assert_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.proto.caffe2_pb2.NetDef"], "test_int8_quant.QuantTest.test_quantize": ["<builtin>.print", "caffe2.python.workspace.FetchInt8Blob", "<builtin>.sum", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet", "numpy.asarray", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_equal", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.proto.caffe2_pb2.NetDef"], "test_layernorm_nnpi_fp16": ["caffe2.python.core.GlobalInit"], "test_layernorm_nnpi_fp16.LayerNorm": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.given", "datetime.timedelta", "hypothesis.strategies.floats"], "test_layernorm_nnpi_fp16.LayerNorm.test_layernorm": ["numpy.abs", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "numpy.array", "caffe2.python.core.CreateOperator", "numpy.random.seed", "numpy.random.uniform", "numpy.allclose", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "<builtin>.sum", "caffe2.python.workspace.RunNet", "numpy.testing.assert_equal", "numpy.random.randn", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.ResetWorkspace"], "test_layernorm_nnpi_fp16.LayerNorm._get_scale_zp": ["numpy.float16", "<builtin>.min", "numpy.clip", "numpy.float32", "numpy.max", "numpy.min", "<builtin>.round", "<builtin>.int"], "test_layernorm_nnpi_fp16.LayerNorm._layernorm_transform": ["numpy.outer", "numpy.mean", "numpy.ones", "numpy.std"], "numpy.outer": [], "numpy.std": [], "test_layernorm_nnpi_fp16.LayerNorm.test_fused_ln_quantize": ["numpy.abs", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchInt8Blob", "numpy.random.uniform", "numpy.allclose", "<builtin>.sum", "numpy.testing.assert_equal", "test_layernorm_nnpi_fp16.LayerNorm._get_scale_zp", "numpy.array", "test_layernorm_nnpi_fp16.LayerNorm._layernorm_transform", "caffe2.python.workspace.RunNet", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "numpy.random.seed", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.random.randn", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "<builtin>.print"], "test_op_nnpi_fp16": ["caffe2.python.core.GlobalInit"], "test_op_nnpi_fp16.ArithmeticOpsTest._test_binary_op_graph": ["caffe2.python.workspace.ResetWorkspace", "<builtin>.range", "caffe2.python.workspace.FetchBlob", "numpy.concatenate", "caffe2.python.core.CreateOperator", "numpy.testing.assert_equal", "<builtin>.print", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "<builtin>.sum", "numpy.abs", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.SwitchWorkspace", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "numpy.allclose", "numpy.random.seed", "numpy.isfinite", "numpy.random.uniform", "numpy.finfo", "caffe2.python.workspace.CreateNet", "numpy.array", "numpy.random.randint"], "numpy.isfinite": [], "test_op_nnpi_fp16.ArithmeticOpsTest": ["hypothesis.given", "hypothesis.strategies.integers", "datetime.timedelta", "hypothesis.settings"], "test_op_nnpi_fp16.ArithmeticOpsTest.test_add_graph": ["test_op_nnpi_fp16.ArithmeticOpsTest._test_binary_op_graph"], "test_op_nnpi_fp16.ArithmeticOpsTest.test_sub_graph": ["test_op_nnpi_fp16.ArithmeticOpsTest._test_binary_op_graph"], "test_op_nnpi_fp16.ArithmeticOpsTest.test_mul_graph": ["test_op_nnpi_fp16.ArithmeticOpsTest._test_binary_op_graph"], "test_op_nnpi_fp16.ArithmeticOpsTest.test_div_graph": ["test_op_nnpi_fp16.ArithmeticOpsTest._test_binary_op_graph"], "test_op_nnpi_fp16.UnaryOpTest._test_unary_op": ["caffe2.python.workspace.RunNet", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.workspace.ResetWorkspace", "caffe2.proto.caffe2_pb2.NetDef", "<builtin>.sum", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "numpy.abs", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.allclose", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.save", "numpy.testing.assert_equal", "<builtin>.print"], "numpy.save": [], "test_op_nnpi_fp16.UnaryOpTest._test_op_w_ulp_error": ["numpy.max", "<builtin>.print", "caffe2.python.fakelowp.test_utils.compute_ulp_error", "<builtin>.max", "numpy.abs", "numpy.linspace", "test_op_nnpi_fp16.UnaryOpTest._test_unary_op"], "caffe2.python.fakelowp.test_utils.compute_ulp_error": [], "test_op_nnpi_fp16.UnaryOpTest": ["hypothesis.given", "hypothesis.strategies.integers", "datetime.timedelta", "hypothesis.settings"], "test_op_nnpi_fp16.UnaryOpTest.test_sigmoid": ["numpy.random.seed", "test_op_nnpi_fp16.UnaryOpTest._test_op_w_ulp_error"], "test_op_nnpi_fp16.UnaryOpTest.test_tanh": ["numpy.random.seed", "test_op_nnpi_fp16.UnaryOpTest._test_op_w_ulp_error"], "test_op_nnpi_fp16.UnaryOpTest.test_swish": ["numpy.random.seed", "test_op_nnpi_fp16.UnaryOpTest._test_op_w_ulp_error"], "test_op_nnpi_fp16.UnaryOpTest.test_logit": ["caffe2.python.workspace.RunNet", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.SwitchWorkspace", "numpy.random.seed", "caffe2.python.workspace.ResetWorkspace", "caffe2.proto.caffe2_pb2.NetDef", "<builtin>.sum", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "numpy.abs", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.python.workspace.FeedBlob", "numpy.linspace", "numpy.save", "numpy.testing.assert_equal", "numpy.nanmax", "<builtin>.print"], "numpy.nanmax": [], "test_op_nnpi_fp16.ReluTest": ["hypothesis.given", "hypothesis.strategies.integers", "datetime.timedelta", "hypothesis.settings"], "test_op_nnpi_fp16.ReluTest.relu_test": ["caffe2.python.workspace.RunNet", "caffe2.python.workspace.SwitchWorkspace", "numpy.random.seed", "caffe2.proto.caffe2_pb2.NetDef", "<builtin>.sum", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "numpy.abs", "numpy.allclose", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.testing.assert_equal", "<builtin>.print"], "test_sls_4bit_nnpi_fp16": ["unittest.main", "caffe2.python.workspace.GlobalInit"], "test_sls_4bit_nnpi_fp16.SparseLengthsSum4BitFakeNNPIFp16Test": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "datetime.timedelta", "hypothesis.settings", "hypothesis.given"], "test_sls_4bit_nnpi_fp16.SparseLengthsSum4BitFakeNNPIFp16Test.test_slws_fused_4bit_rowwise_all_same": ["numpy.sum", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "numpy.ones", "<builtin>.sum", "numpy.allclose", "numpy.random.randint", "numpy.random.seed", "<builtin>.print", "numpy.random.uniform", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_equal", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.RunNet", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.proto.caffe2_pb2.NetDef", "numpy.zeros", "<builtin>.len"], "test_sls_4bit_nnpi_fp16.SparseLengthsSum4BitFakeNNPIFp16Test.test_slws_fused_4bit_rowwise": ["numpy.random.rand", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "numpy.arange", "<builtin>.sum", "numpy.max", "numpy.allclose", "numpy.random.seed", "numpy.random.uniform", "numpy.random.choice", "numpy.asarray", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_equal", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.RunNet", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.proto.caffe2_pb2.NetDef", "<builtin>.len"], "test_sls_8bit_nnpi_fp16": ["unittest.main", "caffe2.python.workspace.GlobalInit"], "test_sls_8bit_nnpi_fp16.SparseLengthsSum8BitFakeNNPIFp16Test.Skip_test_SLS_NonQuantized_fp16": ["caffe2.python.workspace.FetchBlob", "<builtin>.sum", "<builtin>.print", "caffe2.python.core.Net", "numpy.random.randint", "numpy.testing.assert_allclose", "numpy.testing.assert_equal", "caffe2.python.workspace.RunNetOnce", "numpy.asarray", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.allclose", "caffe2.python.core.CreateOperator", "numpy.random.random_sample", "caffe2.python.workspace.FeedBlob", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.proto.caffe2_pb2.NetDef", "numpy.abs"], "test_sls_8bit_nnpi_fp16.SparseLengthsSum8BitFakeNNPIFp16Test": ["datetime.timedelta", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "test_sls_8bit_nnpi_fp16.SparseLengthsSum8BitFakeNNPIFp16Test.test_slws_fused_8bit_rowwise_all_same": ["numpy.random.uniform", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.CreateOperator", "numpy.zeros", "numpy.ones", "<builtin>.sum", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunOperatorOnce", "numpy.random.seed", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "caffe2.python.workspace.FeedBlob", "<builtin>.len", "numpy.random.randint", "numpy.allclose", "numpy.testing.assert_equal", "numpy.sum", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FetchBlob", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.RunNet"], "test_sls_8bit_nnpi_fp16.SparseLengthsSum8BitFakeNNPIFp16Test.test_slws_fused_8bit_rowwise": ["numpy.random.uniform", "caffe2.python.workspace.ResetWorkspace", "numpy.arange", "numpy.max", "caffe2.python.core.CreateOperator", "<builtin>.sum", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunOperatorOnce", "numpy.random.seed", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "numpy.random.choice", "caffe2.python.workspace.FeedBlob", "numpy.abs", "<builtin>.len", "numpy.testing.assert_equal", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "numpy.asarray", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.RunNet"], "test_sls_8bit_nnpi_fp16.SparseLengthsSum8BitFakeNNPIFp16Test.test_small_sls": ["numpy.random.uniform", "caffe2.python.workspace.ResetWorkspace", "numpy.max", "caffe2.python.core.CreateOperator", "<builtin>.sum", "<builtin>.print", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunOperatorOnce", "numpy.random.seed", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "<builtin>.range", "numpy.array", "caffe2.python.workspace.FeedBlob", "numpy.abs", "numpy.random.random_sample", "numpy.testing.assert_equal", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FetchBlob", "numpy.set_printoptions", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.RunNet"], "numpy.set_printoptions": [], "test_sls_8bit_nnpi_fp16.SparseLengthsSum8BitFakeNNPIFp16Test.test_sls_layernorm": ["numpy.random.uniform", "caffe2.python.workspace.ResetWorkspace", "numpy.max", "caffe2.python.core.CreateOperator", "<builtin>.print", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunOperatorOnce", "numpy.random.seed", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "<builtin>.range", "numpy.array", "caffe2.python.workspace.FeedBlob", "numpy.abs", "numpy.random.random_sample", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FetchBlob", "numpy.set_printoptions", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.RunNet"], "test_sls_8bit_nnpi_fp32": ["unittest.main", "caffe2.python.workspace.GlobalInit"], "test_sls_8bit_nnpi_fp32.SparseLengthsSum8BitFakeNNPIFp32Test": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "datetime.timedelta"], "test_sls_8bit_nnpi_fp32.SparseLengthsSum8BitFakeNNPIFp32Test.test_slws_fused_8bit_rowwise_acc32_nnpi": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "<builtin>.sum", "numpy.random.uniform", "caffe2.python.workspace.RunNet", "numpy.arange", "numpy.asarray", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "numpy.testing.assert_equal", "numpy.random.seed", "numpy.abs", "<builtin>.len", "caffe2.python.core.CreateOperator", "numpy.random.choice", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.GlobalInit", "numpy.max"], "test_sls_8bit_nnpi_fp32.SparseLengthsSum8BitFakeNNPIFp32Test.test_small_sls_acc32": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.fakelowp.test_utils.print_test_debug_info", "<builtin>.sum", "numpy.random.uniform", "caffe2.python.workspace.RunNet", "numpy.array", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "numpy.random.random_sample", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_equal", "numpy.random.seed", "numpy.abs", "numpy.set_printoptions", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.ResetWorkspace", "<builtin>.range", "caffe2.python.workspace.GlobalInit", "numpy.max", "<builtin>.print"], "activation": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "activation.common_activation": ["helper_functions.mark_as_int8_layer", "activation.sigmoid.activation_dyn_range_fn", "activation.relu.activation_dyn_range_fn"], "activation.sigmoid.activation_dyn_range_fn": ["activation.sigmoid.activation_dyn_range_fn.sigmoid_fn"], "activation.relu.activation_dyn_range_fn": ["<builtin>.max"], "helper_functions.mark_as_int8_layer": ["<builtin>.range"], "torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter": [], "activation.relu": ["<builtin>.isinstance", "<builtin>.len", "activation.common_activation", "<builtin>.RuntimeError"], "activation.sigmoid": ["<builtin>.isinstance", "<builtin>.len", "activation.common_activation", "<builtin>.RuntimeError"], "activation.sigmoid.activation_dyn_range_fn.sigmoid_fn": ["numpy.exp"], "adaptive_avgpool": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "adaptive_avgpool.adaptive_avgpool2d": ["helper_functions.extend_attr_to_tuple", "helper_functions.mark_as_int8_layer", "<builtin>.isinstance", "<builtin>.len", "<builtin>.RuntimeError"], "helper_functions.extend_attr_to_tuple": ["<builtin>.isinstance", "<builtin>.getattr"], "add": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "add.add": ["<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.all", "<builtin>.len"], "add.quantized_add": ["<builtin>.RuntimeError", "helper_functions.get_dyn_range", "<builtin>.all", "helper_functions.mark_as_int8_layer", "<builtin>.isinstance"], "helper_functions.get_dyn_range": ["<builtin>.RuntimeError"], "add.quantized_add_relu": ["<builtin>.RuntimeError", "helper_functions.get_dyn_range", "<builtin>.all", "helper_functions.mark_as_int8_layer", "<builtin>.isinstance"], "batchnorm": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter", "typing.TypeVar"], "batchnorm.common_batchnorm": ["numpy.ones_like", "helper_functions.mark_as_int8_layer", "numpy.sqrt", "helper_functions.get_dyn_range", "helper_functions.to_numpy"], "helper_functions.to_numpy": [], "numpy.ones_like": [], "batchnorm.batchnorm2d": ["<builtin>.isinstance", "batchnorm.common_batchnorm", "<builtin>.len", "<builtin>.RuntimeError"], "batchnorm.quantized_batchnorm2d": ["<builtin>.isinstance", "batchnorm.common_batchnorm", "<builtin>.RuntimeError"], "convolution": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "convolution.common_conv": ["<builtin>.RuntimeError", "helper_functions.mark_as_int8_layer", "helper_functions.get_dyn_range", "helper_functions.extend_attr_to_tuple", "helper_functions.to_numpy"], "convolution.common_conv_relu": ["helper_functions.mark_as_int8_layer", "convolution.common_conv"], "convolution.conv2d": ["<builtin>.len", "convolution.common_conv", "<builtin>.RuntimeError", "<builtin>.isinstance"], "convolution.quantized_conv2d": ["<builtin>.isinstance", "<builtin>.RuntimeError", "convolution.common_conv"], "convolution.quantized_conv_relu2d": ["<builtin>.isinstance", "<builtin>.RuntimeError", "convolution.common_conv_relu"], "helper_functions": [], "helper_functions.get_inputs_from_args_and_kwargs": ["<builtin>.enumerate"], "linear.common_linear": ["<builtin>.tuple", "helper_functions.get_dyn_range", "helper_functions.mark_as_int8_layer", "helper_functions.to_numpy"], "linear.linear": ["<builtin>.isinstance", "<builtin>.len", "linear.common_linear", "<builtin>.RuntimeError"], "linear.quantized_linear": ["<builtin>.isinstance", "linear.common_linear", "<builtin>.RuntimeError"], "maxpool": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "maxpool.common_maxpool": ["helper_functions.extend_attr_to_tuple", "helper_functions.mark_as_int8_layer"], "maxpool.maxpool2d": ["<builtin>.len", "<builtin>.isinstance", "maxpool.common_maxpool", "<builtin>.RuntimeError"], "mul": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "mul.mul": ["<builtin>.RuntimeError", "<builtin>.all", "<builtin>.len", "<builtin>.isinstance"], "mul.quantized_mul": ["<builtin>.RuntimeError", "helper_functions.mark_as_int8_layer", "<builtin>.len", "<builtin>.isinstance", "<builtin>.all", "helper_functions.get_dyn_range"], "quantization.dequantize": ["<builtin>.isinstance", "<builtin>.RuntimeError"], "quantization.quantize": ["<builtin>.isinstance", "helper_functions.get_inputs_from_args_and_kwargs", "helper_functions.get_dyn_range", "<builtin>.RuntimeError"], "quantization.identity": ["<builtin>.isinstance", "<builtin>.RuntimeError"], "transformation": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "transformation.torch_flatten": ["<builtin>.len", "helper_functions.mark_as_int8_layer", "<builtin>.tuple", "<builtin>.enumerate", "<builtin>.RuntimeError", "<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter": ["torch.fx.experimental.fx2trt.fx2trt.tensorrt_converter"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.process_attr": ["<builtin>.isinstance", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.to_numpy": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.torch_nn_modules_conv_Conv2d": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.process_attr", "<builtin>.RuntimeError", "torch.fx.experimental.fx2trt.fx2trt.torch_dtype_to_trt", "tensorrt.Weights", "<builtin>.isinstance", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.to_numpy"], "torch.fx.experimental.fx2trt.fx2trt.torch_dtype_to_trt": [], "tensorrt.Weights": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.torch_nn_modules_batchnorm_BatchNorm2d": ["numpy.ones_like", "<builtin>.RuntimeError", "numpy.sqrt", "<builtin>.isinstance", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.to_numpy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.torch_nn_modules_activation_ReLU": ["<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.torch_nn_modules_pooling_MaxPool2d": ["<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.process_attr", "<builtin>.isinstance", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.torch_add": ["<builtin>.all", "<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.torch_nn_modules_pooling_AdaptiveAvgPool2d": ["<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.process_attr", "<builtin>.isinstance", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.torch_flatten": ["<builtin>.tuple", "<builtin>.RuntimeError", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.torch_nn_modules_linear_Linear": ["<builtin>.tuple", "<builtin>.RuntimeError", "torch.fx.experimental.fx2trt.fx2trt.torch_dtype_to_trt", "tensorrt.Weights", "<builtin>.isinstance", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\experimental\\fx2trt\\converter\\vanilla_converter.to_numpy"], "fx2trt_example": ["torch.testing.assert_allclose", "<builtin>.print", "torch.fx.passes.splitter_base._SplitterBase.split_preview", "time.time", "torch.cuda.synchronize", "torch.fx.symbolic_trace", "<builtin>.range", "torch.fx.passes.operator_support.OperatorSupport.__init__", "torch.randn", "fx2trt_example.lower_mod_to_trt", "torchvision.models.resnet18", "torch.fx.passes.splitter_base._SplitterBase.node_support_preview", "fx2trt_example.TensorRTSplitter.__init__"], "fx2trt_example.lower_mod_to_trt": ["torch.fx.experimental.fx2trt.fx2trt.InputTensorSpec.from_tensors", "torch.fx.experimental.fx2trt.fx2trt.TRTInterpreter", "torch.fx.experimental.fx2trt.fx2trt.TRTModule"], "torch.fx.experimental.fx2trt.fx2trt.InputTensorSpec.from_tensors": [], "torch.fx.experimental.fx2trt.fx2trt.TRTInterpreter": [], "torch.fx.experimental.fx2trt.fx2trt.TRTModule": [], "fx2trt_example.OpSupport.is_node_supported": ["torch.fx.passes.operator_support.get_node_target"], "torch.fx.passes.operator_support.get_node_target": [], "fx2trt_example.TensorRTMinimizer.__init__": ["torch.fx.passes.net_min_base._MinimizerSettingBase", "<builtin>.super"], "torch.fx.passes.net_min_base._MinimizerSettingBase": [], "fx2trt_example.TensorRTMinimizer.run_a": ["torch.no_grad"], "fx2trt_example.TensorRTMinimizer.run_b": ["fx2trt_example.lower_mod_to_trt", "torch.fx.passes.net_min_base.FxNetMinimizerRunFuncError"], "torch.fx.passes.net_min_base.FxNetMinimizerRunFuncError": [], "fx2trt_example.TensorRTSplitter.__init__": ["torch.fx.passes.operator_support.OperatorSupport", "torch.fx.passes.splitter_base._SplitterSettingBase", "<builtin>.super"], "torch.fx.passes.operator_support.OperatorSupport": [], "torch.fx.passes.splitter_base._SplitterSettingBase": [], "fx2trt_example.TensorRTSplitter._lower_model_to_backend": ["fx2trt_example.lower_mod_to_trt"], "fx2trt_example.TensorRTSplitter._find_culprit": ["<builtin>.len", "fx2trt_example.TensorRTMinimizer.__init__", "torch.fx.passes.net_min_base._MinimizerBase.minimize"], "fx2trt_example.TensorRTSplitter._find_culprit.<lambda1>": [], "torch.fx.passes.net_min_base._MinimizerBase.minimize": [], "torch.fx.passes.operator_support.OperatorSupport.__init__": [], "torch.fx.passes.splitter_base._SplitterBase.node_support_preview": [], "torch.fx.passes.splitter_base._SplitterBase.split_preview": [], "accelerator_partitioner": [], "accelerator_partitioner.DAGNode.__init__": [], "accelerator_partitioner.DAGNode.__str__": ["<builtin>.str"], "accelerator_partitioner.DAG.__init__": [], "accelerator_partitioner.DAG.create_node": ["accelerator_partitioner.DAGNode.__init__"], "accelerator_partitioner.reset_partition_device": [], "accelerator_partitioner.combine_two_partitions": ["accelerator_partitioner.reorganize_partitions", "<builtin>.len", "torch.fx.experimental.partitioner_utils.Partition"], "torch.fx.experimental.partitioner_utils.Partition": [], "accelerator_partitioner.reorganize_partitions": ["accelerator_partitioner.set_parents_and_children", "<builtin>.enumerate"], "accelerator_partitioner.set_parents_and_children": ["<builtin>.set"], "accelerator_partitioner.get_bfs_level_partition": ["<builtin>.set", "<builtin>.len"], "accelerator_partitioner.get_node_to_partition_mapping": [], "accelerator_partitioner.get_logical_id_to_device": [], "accelerator_partitioner.get_device_partition_stats": ["accelerator_partitioner.get_logical_id_to_device"], "accelerator_partitioner.get_device_to_partitions_mapping": ["accelerator_partitioner.get_device_to_partitions_mapping.find_device_for", "<builtin>.sorted", "accelerator_partitioner.get_device_partition_stats"], "accelerator_partitioner.get_device_to_partitions_mapping.calculate_extra_mem_bytes_needed_for": ["<builtin>.set", "<builtin>.len", "torch.fx.experimental.partitioner_utils.get_extra_size_of"], "torch.fx.experimental.partitioner_utils.get_extra_size_of": [], "accelerator_partitioner.get_device_to_partitions_mapping.find_device_for": ["accelerator_partitioner.get_device_to_partitions_mapping.calculate_extra_mem_bytes_needed_for"], "accelerator_partitioner.get_device_to_partitions_mapping.<lambda1>": [], "accelerator_partitioner.check_dependency": ["<builtin>.set"], "accelerator_partitioner.Partitioner.__init__": [], "accelerator_partitioner.Partitioner.partition_graph": ["accelerator_partitioner.Partitioner.saturate_host", "accelerator_partitioner.Partitioner.aot_based_partition", "accelerator_partitioner.Partitioner.kl_based_partition", "accelerator_partitioner.Partitioner.sparse_nn_partition", "accelerator_partitioner.Partitioner.do_partition", "<builtin>.RuntimeError", "<builtin>.sum", "typing.NamedTuple.__init__", "<builtin>.all", "torch.fx.experimental.graph_manipulation.get_size_of_all_nodes", "accelerator_partitioner.Partitioner.cost_aware_partition", "<builtin>.max", "accelerator_partitioner.Partitioner.size_based_partition", "accelerator_partitioner.Partitioner.find_single_partition", "<builtin>.len", "accelerator_partitioner.Partitioner.dump_dag"], "torch.fx.experimental.graph_manipulation.get_size_of_all_nodes": [], "accelerator_partitioner.Partitioner.partition_graph.<lambda1>": [], "accelerator_partitioner.Partitioner.aot_based_partition": ["torch.fx.experimental.partitioner_utils.Partition"], "accelerator_partitioner.Partitioner.find_single_partition": ["accelerator_partitioner.Partitioner.create_partition", "accelerator_partitioner.get_node_to_partition_mapping"], "accelerator_partitioner.Partitioner.sparse_nn_partition": ["accelerator_partitioner.set_parents_and_children", "accelerator_partitioner.Partitioner.sparse_nn_partition.is_embedding_node", "accelerator_partitioner.Partitioner.sparse_nn_partition.combine_partitions_based_on_size", "accelerator_partitioner.Partitioner.sparse_nn_partition.reset_partition_in_sparse_nn", "accelerator_partitioner.Partitioner.create_partition", "<builtin>.RuntimeError", "accelerator_partitioner.get_node_to_partition_mapping", "<builtin>.enumerate", "<builtin>.str", "<builtin>.len", "torch.fx.experimental.partitioner_utils.get_extra_size_of"], "accelerator_partitioner.Partitioner.cost_aware_partition": ["accelerator_partitioner.set_parents_and_children", "accelerator_partitioner.Partitioner.create_single_node_partition", "accelerator_partitioner.reorganize_partitions", "accelerator_partitioner.get_node_to_partition_mapping", "accelerator_partitioner.get_bfs_level_partition", "accelerator_partitioner.Partitioner.cost_aware_partition.search_combination"], "accelerator_partitioner.Partitioner.kl_based_partition": ["accelerator_partitioner.Partitioner.kl_based_partition.swap_nodes", "torch.fx.experimental.partitioner_utils.get_latency_of_partitioned_graph", "accelerator_partitioner.reorganize_partitions", "torch.fx.experimental.partitioner_utils.get_partition_to_latency_mapping", "accelerator_partitioner.Partitioner.kl_based_partition.swap_node_to_partition", "<builtin>.enumerate", "accelerator_partitioner.get_device_to_partitions_mapping", "accelerator_partitioner.Partitioner.size_based_partition", "<builtin>.len"], "accelerator_partitioner.Partitioner.size_based_partition": ["accelerator_partitioner.Partitioner.create_single_node_partition", "accelerator_partitioner.Partitioner.size_based_partition.find_device_based_on_size", "accelerator_partitioner.reorganize_partitions", "accelerator_partitioner.Partitioner.create_partition", "accelerator_partitioner.get_node_to_partition_mapping", "<builtin>.RuntimeError", "accelerator_partitioner.get_device_to_partitions_mapping", "<builtin>.len", "torch.fx.experimental.partitioner_utils.get_extra_size_of"], "accelerator_partitioner.Partitioner.saturate_host": ["<builtin>.min", "<builtin>.len", "<builtin>.print", "accelerator_partitioner.get_device_partition_stats"], "accelerator_partitioner.Partitioner.do_partition": ["torch.fx.passes.split_module.split_module"], "accelerator_partitioner.Partitioner.dump_dag": ["accelerator_partitioner.DAG.create_node", "accelerator_partitioner.DAG.__init__", "<builtin>.list", "<builtin>.int", "<builtin>.len", "torch.fx.node.map_arg"], "accelerator_partitioner.Partitioner.create_partition": ["<builtin>.len", "torch.fx.experimental.partitioner_utils.Partition"], "accelerator_partitioner.Partitioner.size_based_partition.find_device_based_on_size": ["<builtin>.RuntimeError", "torch.fx.experimental.partitioner_utils.Device", "<builtin>.set", "<builtin>.str", "torch.fx.experimental.partitioner_utils.get_extra_size_of"], "torch.fx.experimental.partitioner_utils.Device": [], "accelerator_partitioner.Partitioner.create_single_node_partition": ["accelerator_partitioner.Partitioner.create_partition"], "accelerator_partitioner.Partitioner.saturate_host.<lambda1>": [], "accelerator_partitioner.Partitioner.do_partition.<lambda1>": [], "torch.fx.passes.split_module.split_module": [], "accelerator_partitioner.Partitioner.dump_dag.<lambda1>": [], "torch.fx.node.map_arg": [], "accelerator_partitioner.Partitioner.dump_dag.<lambda2>": [], "accelerator_partitioner.Partitioner.sparse_nn_partition.combine_partitions_based_on_size": ["<builtin>.sorted", "accelerator_partitioner.Partitioner.sparse_nn_partition.find_partition_to_combine_based_on_size", "accelerator_partitioner.get_bfs_level_partition"], "accelerator_partitioner.Partitioner.sparse_nn_partition.combine_partitions_based_on_size.<lambda1>": [], "accelerator_partitioner.Partitioner.sparse_nn_partition.find_partition_to_combine_based_on_size": ["accelerator_partitioner.combine_two_partitions", "<builtin>.abs", "accelerator_partitioner.Partitioner.sparse_nn_partition.calculate_mem_bytes_needed"], "accelerator_partitioner.Partitioner.sparse_nn_partition.calculate_mem_bytes_needed": ["torch.fx.experimental.partitioner_utils.get_extra_size_of"], "accelerator_partitioner.Partitioner.sparse_nn_partition.reset_partition_in_sparse_nn": ["accelerator_partitioner.Partitioner.create_partition"], "accelerator_partitioner.Partitioner.sparse_nn_partition.is_embedding_node": ["<builtin>.getattr", "<builtin>.str", "<builtin>.RuntimeError", "<builtin>.hasattr"], "accelerator_partitioner.Partitioner.cost_aware_partition.try_combining_partitions": ["accelerator_partitioner.combine_two_partitions", "torch.fx.experimental.partitioner_utils.get_latency_of_partitioned_graph", "accelerator_partitioner.check_dependency", "torch.fx.experimental.partitioner_utils.get_partition_to_latency_mapping", "<builtin>.abs", "accelerator_partitioner.reset_partition_device", "accelerator_partitioner.get_device_to_partitions_mapping", "<builtin>.float"], "torch.fx.experimental.partitioner_utils.get_partition_to_latency_mapping": [], "torch.fx.experimental.partitioner_utils.get_latency_of_partitioned_graph": [], "accelerator_partitioner.Partitioner.cost_aware_partition.search_combination": ["accelerator_partitioner.combine_two_partitions", "accelerator_partitioner.Partitioner.cost_aware_partition.try_combining_partitions", "torch.fx.experimental.partitioner_utils.get_latency_of_partitioned_graph", "<builtin>.range", "accelerator_partitioner.reorganize_partitions", "torch.fx.experimental.partitioner_utils.get_partition_to_latency_mapping", "accelerator_partitioner.reset_partition_device", "accelerator_partitioner.get_bfs_level_partition", "accelerator_partitioner.get_device_to_partitions_mapping", "<builtin>.len"], "accelerator_partitioner.Partitioner.kl_based_partition.swap_nodes": [], "accelerator_partitioner.Partitioner.kl_based_partition.try_swap_nodes": ["accelerator_partitioner.Partitioner.kl_based_partition.swap_nodes", "torch.fx.experimental.partitioner_utils.get_latency_of_partitioned_graph", "accelerator_partitioner.reorganize_partitions", "accelerator_partitioner.check_dependency", "torch.fx.experimental.partitioner_utils.get_partition_to_latency_mapping", "accelerator_partitioner.reset_partition_device", "accelerator_partitioner.get_device_to_partitions_mapping", "<builtin>.float"], "accelerator_partitioner.Partitioner.kl_based_partition.swap_node_to_partition": ["accelerator_partitioner.Partitioner.kl_based_partition.try_swap_nodes", "<builtin>.list", "<builtin>.float"], "const_fold": [], "const_fold._make_tuple": ["<builtin>.isinstance"], "const_fold.FoldedGraphModule.__init__": ["<builtin>.super"], "const_fold.FoldedGraphModule.__call__": ["const_fold.FoldedGraphModule.run_folding", "<builtin>.super"], "const_fold.FoldedGraphModule.run_folding": ["const_fold._make_tuple", "<builtin>.setattr", "<builtin>.len", "<builtin>.range"], "const_fold.split_const_subgraphs": ["re.sub", "<builtin>.range", "<builtin>.enumerate", "<builtin>.set", "<builtin>.int", "const_fold.FoldedGraphModule.__init__", "torch.fx.passes.split_module.split_module", "<builtin>.len", "re.match", "<builtin>.iter", "const_fold._make_tuple", "<builtin>.setattr", "<builtin>.next", "<builtin>.hasattr"], "const_fold.split_const_subgraphs.mod_partition": [], "graph_gradual_typechecker": ["graph_gradual_typechecker.register_inference_rule", "graph_gradual_typechecker.register_inference_rule.register", "graph_gradual_typechecker.register_refinement_rule", "graph_gradual_typechecker.register_refinement_rule.register"], "graph_gradual_typechecker.expand_to_tensor_dim": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "<builtin>.len", "<builtin>.TypeError", "<builtin>.tuple"], "torch.fx.tensor_type.TensorType": [], "graph_gradual_typechecker.broadcast_types": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.list", "<builtin>.len", "<builtin>.tuple", "<builtin>.TypeError", "<builtin>.range", "torch.fx.tensor_type.is_consistent", "<builtin>.zip"], "torch.fx.tensor_type.is_consistent": [], "graph_gradual_typechecker.register_inference_rule": [], "graph_gradual_typechecker.register_inference_rule.register": ["<builtin>.RuntimeError"], "graph_gradual_typechecker.register_refinement_rule": [], "graph_gradual_typechecker.register_refinement_rule.register": ["<builtin>.RuntimeError"], "graph_gradual_typechecker.add_inference_rule": ["graph_gradual_typechecker.broadcast_types", "<builtin>.isinstance", "<builtin>.TypeError", "torch.fx.tensor_type.is_consistent", "torch.fx.tensor_type.is_more_precise", "<builtin>.str"], "torch.fx.tensor_type.is_more_precise": [], "graph_gradual_typechecker.get_attr_inference_rule": ["<builtin>.TypeError"], "graph_gradual_typechecker.transpose_inference_rule": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "<builtin>.TypeError"], "graph_gradual_typechecker.reshape_inference_rule": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "functools.reduce", "<builtin>.TypeError"], "graph_gradual_typechecker.reshape_inference_rule.<lambda1>": [], "graph_gradual_typechecker.reshape_inference_rule.<lambda2>": [], "graph_gradual_typechecker.reshape_inference_rule.<lambda3>": [], "graph_gradual_typechecker.reshape_inference_rule.<lambda4>": [], "graph_gradual_typechecker.bn2d_inference_rule": ["<builtin>.isinstance", "<builtin>.TypeError", "graph_gradual_typechecker.get_greatest_upper_bound", "graph_gradual_typechecker.expand_to_tensor_dim", "torch.fx.tensor_type.is_consistent"], "graph_gradual_typechecker.get_greatest_upper_bound": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.TypeError", "torch.fx.tensor_type.is_consistent", "torch.fx.tensor_type.is_more_precise", "<builtin>.zip"], "graph_gradual_typechecker.calculate_out_dimension": ["<builtin>.TypeError", "<builtin>.isinstance"], "graph_gradual_typechecker.conv2d_inference_rule": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "<builtin>.TypeError", "graph_gradual_typechecker.get_greatest_upper_bound", "graph_gradual_typechecker.expand_to_tensor_dim", "torch.fx.tensor_type.is_consistent", "graph_gradual_typechecker.calculate_out_dimension"], "graph_gradual_typechecker.relu_inference_rule": ["<builtin>.len", "<builtin>.isinstance", "graph_gradual_typechecker.get_greatest_upper_bound", "graph_gradual_typechecker.expand_to_tensor_dim"], "graph_gradual_typechecker.maxpool2d_check": ["torch.fx.tensor_type.TensorType", "<builtin>.list", "<builtin>.len", "<builtin>.TypeError", "graph_gradual_typechecker.calculate_out_dimension", "<builtin>.tuple"], "graph_gradual_typechecker.maxpool2d_inference_rule": ["<builtin>.isinstance", "<builtin>.len", "graph_gradual_typechecker.maxpool2d_check", "graph_gradual_typechecker.get_greatest_upper_bound", "graph_gradual_typechecker.expand_to_tensor_dim"], "graph_gradual_typechecker.linear_check": ["torch.fx.tensor_type.TensorType", "<builtin>.list", "<builtin>.len", "<builtin>.TypeError", "torch.fx.tensor_type.is_consistent", "<builtin>.tuple"], "graph_gradual_typechecker.linear_inference_rule": ["<builtin>.isinstance", "<builtin>.len", "graph_gradual_typechecker.linear_check", "graph_gradual_typechecker.get_greatest_upper_bound", "graph_gradual_typechecker.expand_to_tensor_dim"], "graph_gradual_typechecker.adaptiveavgpool2d_check": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "<builtin>.TypeError", "<builtin>.tuple"], "graph_gradual_typechecker.adaptiveavgpool2d_inference_rule": ["graph_gradual_typechecker.adaptiveavgpool2d_check", "<builtin>.isinstance", "<builtin>.len", "graph_gradual_typechecker.get_greatest_upper_bound", "graph_gradual_typechecker.expand_to_tensor_dim"], "graph_gradual_typechecker.flatten_check": ["torch.fx.tensor_type.TensorType", "<builtin>.list", "<builtin>.len", "<builtin>.TypeError", "functools.reduce", "<builtin>.tuple"], "graph_gradual_typechecker.flatten_check.<list2>.<lambda1>": [], "graph_gradual_typechecker.flatten_inference_rule": ["<builtin>.isinstance", "<builtin>.len", "graph_gradual_typechecker.get_greatest_upper_bound", "graph_gradual_typechecker.expand_to_tensor_dim", "graph_gradual_typechecker.flatten_check"], "graph_gradual_typechecker.GraphTypeChecker.__init__": [], "graph_gradual_typechecker.GraphTypeChecker.type_check": ["graph_gradual_typechecker.GraphTypeChecker.type_check_node"], "graph_gradual_typechecker.GraphTypeChecker.type_check_node": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "<builtin>.RuntimeError", "torch.fx.node.map_arg", "<builtin>.type", "<builtin>.NotImplementedError"], "graph_gradual_typechecker.GraphTypeChecker.type_check_node.get_node_type": [], "graph_gradual_typechecker.first_one": ["torch.fx.experimental.refinement_types.Equality", "<builtin>.isinstance"], "torch.fx.experimental.refinement_types.Equality": [], "graph_gradual_typechecker.all_eq": ["<builtin>.len", "torch.fx.experimental.refinement_types.Equality", "<builtin>.isinstance", "<builtin>.range"], "graph_gradual_typechecker.add_eq": ["graph_gradual_typechecker.broadcast_types", "torch.fx.experimental.refinement_types.Equality", "<builtin>.isinstance", "<builtin>.zip"], "graph_gradual_typechecker.first_two": ["torch.fx.experimental.refinement_types.Equality", "<builtin>.isinstance"], "graph_gradual_typechecker.flatten_refinement_rule": ["<builtin>.len", "torch.fx.experimental.refinement_types.Equality", "<builtin>.isinstance", "<builtin>.zip"], "graph_gradual_typechecker.Refine.__init__": ["itertools.count"], "itertools.count": [], "graph_gradual_typechecker.Refine.refine": ["graph_gradual_typechecker.Refine.refine_node"], "graph_gradual_typechecker.Refine.refine_node": ["<builtin>.isinstance", "<builtin>.type", "graph_gradual_typechecker.Refine.replace_dyn_with_fresh_var"], "graph_gradual_typechecker.Refine.replace_dyn_with_fresh_var": ["torch.fx.tensor_type.TensorType", "<builtin>.isinstance", "<builtin>.next", "graph_gradual_typechecker.Refine.replace_dyn_with_fresh_var", "<builtin>.tuple", "torch.fx.experimental.unification.Var"], "torch.fx.experimental.unification.Var": [], "graph_manipulation": [], "graph_manipulation.replace_target_nodes_with": ["torch.fx.graph.Graph", "<builtin>.isinstance", "torch.fx.node.map_arg"], "torch.fx.graph.Graph": [], "graph_manipulation.replace_target_nodes_with.<lambda1>": [], "graph_manipulation.replace_target_nodes_with.<lambda2>": [], "graph_manipulation.replace_target_nodes_with.<lambda3>": [], "graph_manipulation.get_size_of_all_nodes": ["graph_manipulation.get_size_of_node", "torch.fx.passes.shape_prop.ShapeProp"], "torch.fx.passes.shape_prop.ShapeProp": [], "graph_manipulation.get_size_of_node": ["graph_manipulation.get_tensor_meta", "typing.NamedTuple.__init__", "<builtin>.dict", "torch.tensor", "torch._empty_affine_quantized"], "graph_manipulation.get_tensor_meta": ["<builtin>.RuntimeError"], "torch._empty_affine_quantized": [], "graph_manipulation.serialize_shape": ["<builtin>.str", "<builtin>.list"], "graph_manipulation.serialize_stride": ["<builtin>.str", "<builtin>.list"], "graph_manipulation.serialize_tensor_quantization": ["<builtin>.str", "graph_manipulation.serialize_weight"], "graph_manipulation.serialize_weight": ["graph_manipulation.serialize_stride", "graph_manipulation.serialize_shape", "<builtin>.str", "graph_manipulation.serialize_tensor_quantization"], "graph_manipulation.serialize_leaf_module": ["<builtin>.str", "<builtin>.isinstance", "graph_manipulation.serialize_weight"], "graph_manipulation.serialize_module": ["torch.fx.node.map_aggregate", "torch.fx.node.map_arg", "<builtin>.str", "torch.fx.experimental.param_fetch.lift_lowering_attrs_to_nodes", "<builtin>.len", "<builtin>.getattr", "<builtin>.dict", "graph_manipulation.serialize_module", "graph_manipulation.serialize_weight", "graph_manipulation.serialize_module.get_node_info", "graph_manipulation.serialize_module.add_weight_tensors", "graph_manipulation.serialize_leaf_module", "torch.fx.node._get_qualified_name", "<builtin>.isinstance", "<builtin>.list"], "graph_manipulation.serialize_module.add_weight_tensors": ["<builtin>.isinstance", "graph_manipulation.serialize_weight"], "graph_manipulation.serialize_module.get_node_info": ["graph_manipulation.serialize_stride", "<builtin>.str", "graph_manipulation.get_tensor_meta", "graph_manipulation.serialize_shape"], "torch.fx.experimental.param_fetch.lift_lowering_attrs_to_nodes": [], "torch.fx.node._get_qualified_name": [], "graph_manipulation.serialize_module.get_user_info": ["<builtin>.str"], "graph_manipulation.serialize_module.get_arg_info": ["<builtin>.str", "<builtin>.isinstance"], "graph_manipulation.serialize_module.get_output_arg_info": ["graph_manipulation.serialize_module.get_node_info", "graph_manipulation.serialize_module.get_arg_info"], "torch.fx.node.map_aggregate": [], "merge_matmul": [], "merge_matmul.get_first_dim": [], "merge_matmul.legalize_graph": ["torch.fx.graph.Graph"], "merge_matmul.legalize_graph.<lambda1>": [], "merge_matmul.legalize_graph.<lambda2>": [], "merge_matmul.may_depend_on": ["<builtin>.len", "merge_matmul.may_depend_on"], "merge_matmul.are_nodes_independent": ["itertools.combinations", "merge_matmul.may_depend_on"], "itertools.combinations": [], "merge_matmul.merge_matmul": ["<builtin>.zip", "<builtin>.isinstance", "torch.fx._symbolic_trace.symbolic_trace", "merge_matmul.legalize_graph", "<builtin>.len", "<builtin>.range", "merge_matmul.are_nodes_independent"], "torch.fx._symbolic_trace.symbolic_trace": [], "normalize": [], "normalize.NormalizeArgs.__init__": ["<builtin>.super"], "normalize.NormalizeArgs.run_node": ["<builtin>.tuple", "<builtin>.isinstance", "normalize.NormalizeArgs.run_node.get_type", "torch.fx.Transformer.fetch_args_kwargs_from_env", "<builtin>.super", "normalize.NormalizeArgs.call_function", "torch.fx.operator_schemas.create_type_hint", "torch.fx.node.map_aggregate"], "torch.fx.Transformer.fetch_args_kwargs_from_env": [], "normalize.NormalizeArgs.run_node.get_type": ["<builtin>.isinstance", "<builtin>.type"], "torch.fx.operator_schemas.create_type_hint": [], "normalize.NormalizeArgs.call_function": ["torch.fx.Transformer.tracer.create_proxy", "<builtin>.callable", "torch.fx.operator_schemas.normalize_function", "<builtin>.super"], "torch.fx.operator_schemas.normalize_function": [], "torch.fx.Transformer.tracer.create_proxy": [], "normalize.NormalizeArgs.call_module": ["<builtin>.isinstance", "torch.fx.operator_schemas.normalize_module", "<builtin>.super"], "torch.fx.operator_schemas.normalize_module": [], "normalize.NormalizeOperators.call_function": ["<builtin>.callable", "<builtin>.super", "<builtin>.len"], "optimization": [], "optimization._parent_name": [], "optimization.matches_module_pattern": ["<builtin>.type", "<builtin>.len", "<builtin>.zip", "<builtin>.isinstance"], "optimization.replace_node_module": ["optimization._parent_name", "<builtin>.setattr", "<builtin>.isinstance"], "optimization.fuse": ["torch.nn.utils.fusion.fuse_conv_bn_eval", "torch.fx.GraphModule", "<builtin>.dict", "torch.fx.symbolic_trace", "optimization.matches_module_pattern", "optimization.replace_node_module", "copy.deepcopy", "<builtin>.len"], "torch.nn.utils.fusion.fuse_conv_bn_eval": [], "torch.fx.GraphModule": [], "optimization.remove_dropout": ["torch.fx.symbolic_trace", "torch.fx.Transformer.__init__", "torch.fx.Transformer.transform"], "optimization.remove_dropout.DropoutRemover.call_module": ["<builtin>.super", "<builtin>.len", "<builtin>.isinstance"], "torch.fx.Transformer.__init__": [], "torch.fx.Transformer.transform": [], "optimization.extract_subgraph": ["torch.fx.Graph", "torch.fx.GraphModule"], "torch.fx.Graph": [], "optimization.extract_subgraph.<lambda1>": [], "optimization.<dict1>.<lambda1>": [], "torch.utils.mkldnn.MkldnnBatchNorm": [], "optimization.<lambda1>": ["torch.utils.mkldnn.MkldnnBatchNorm"], "optimization.modules_to_mkldnn": ["optimization.replace_node_module", "<builtin>.type", "copy.deepcopy", "<builtin>.isinstance"], "optimization.reset_modules": ["optimization.replace_node_module", "<builtin>.isinstance"], "optimization.MklSubgraph.__init__": [], "optimization.gen_mkl_autotuner": [], "optimization.gen_mkl_autotuner.use_mkl_heuristic": ["optimization.gen_mkl_autotuner.use_mkl_heuristic.benchmark", "optimization.reset_modules", "<builtin>.dict", "torch.fx.passes.shape_prop.ShapeProp", "optimization.extract_subgraph", "torch.randn", "typing.cast"], "optimization.gen_mkl_autotuner.use_mkl_heuristic.benchmark": ["time.time", "<builtin>.range", "optimization.gen_mkl_autotuner.use_mkl_heuristic.<lambda2>", "optimization.gen_mkl_autotuner.use_mkl_heuristic.<lambda1>"], "optimization.gen_mkl_autotuner.use_mkl_heuristic.<lambda2>": [], "optimization.gen_mkl_autotuner.use_mkl_heuristic.<lambda1>": [], "optimization.use_mkl_length": ["<builtin>.len"], "optimization.UnionFind.__init__": [], "optimization.UnionFind.make_set": [], "optimization.UnionFind.find": ["optimization.UnionFind.find", "typing.cast"], "optimization.UnionFind.join": ["optimization.UnionFind.find"], "optimization.optimize_for_inference": ["collections.defaultdict", "optimization.UnionFind.make_set", "<builtin>.enumerate", "copy.deepcopy", "<builtin>.RuntimeError", "optimization.UnionFind.join", "<builtin>.next", "torch.fx.GraphModule", "<builtin>.hasattr", "optimization.modules_to_mkldnn", "optimization.remove_dropout", "<builtin>.dict", "optimization.optimize_for_inference.get_color", "torch.fx.map_arg", "optimization.UnionFind.__init__", "optimization.reset_modules", "torch.device", "<builtin>.len", "typing.cast", "optimization.UnionFind.find", "<builtin>.type", "optimization.fuse", "optimization.use_mkl_length", "<builtin>.list", "logging.info", "<builtin>.sorted", "<builtin>.any", "<builtin>.isinstance"], "optimization.optimize_for_inference.<lambda1>": [], "torch.fx.map_arg": [], "optimization.optimize_for_inference.get_color": ["optimization.UnionFind.find", "<builtin>.hasattr"], "optimization.optimize_for_inference.<lambda2>": ["optimization.MklSubgraph.__init__"], "param_fetch": [], "param_fetch.default_matching": [], "param_fetch.extract_attrs_for_lowering": ["torch.typename", "<builtin>.RuntimeError", "<builtin>.type", "<builtin>.getattr"], "param_fetch.lift_lowering_attrs_to_nodes": ["param_fetch.extract_attrs_for_lowering", "param_fetch.lift_lowering_attrs_to_nodes", "<builtin>.isinstance", "<builtin>.dict"], "partitioner_utils": [], "partitioner_utils.Partition.__init__": ["<builtin>.set"], "partitioner_utils.Partition.__str__": ["<builtin>.str"], "partitioner_utils.Partition.recalculate_mem_size": ["partitioner_utils.get_extra_size_of"], "partitioner_utils.get_extra_size_of": ["torch.fx.node.map_arg", "<builtin>.RuntimeError", "<builtin>.getattr"], "partitioner_utils.Partition.add_node": ["torch.fx.node.map_arg", "partitioner_utils.Partition.recalculate_mem_size"], "partitioner_utils.Partition.add_node.<lambda1>": [], "partitioner_utils.Partition.add_node.<lambda2>": [], "partitioner_utils.Partition.remove_node": ["torch.fx.node.map_arg", "partitioner_utils.Partition.recalculate_mem_size", "<builtin>.all"], "partitioner_utils.Partition.remove_node.<lambda1>": [], "partitioner_utils.Partition.remove_node.<lambda2>": [], "partitioner_utils.get_extra_size_of.<lambda1>": [], "partitioner_utils.get_extra_size_of.<lambda2>": [], "partitioner_utils.get_latency_of_one_partition": ["partitioner_utils.get_latency_of_one_partition.get_top_nodes", "partitioner_utils.get_latency_of_one_partition.dfs_helper", "typing.NamedTuple.__init__"], "partitioner_utils.get_latency_of_one_partition.get_top_nodes": ["torch.fx.node.map_arg", "<builtin>.any"], "partitioner_utils.get_latency_of_one_partition.get_top_nodes.<lambda1>": [], "partitioner_utils.get_latency_of_one_partition.get_top_nodes.<lambda2>": [], "partitioner_utils.get_latency_of_one_partition.dfs_helper": ["partitioner_utils.get_latency_of_one_partition.dfs_helper", "<builtin>.set", "<builtin>.max", "typing.NamedTuple.__init__"], "partitioner_utils.get_partition_to_latency_mapping": ["partitioner_utils.get_latency_of_one_partition"], "partitioner_utils.get_comm_latency_between": ["torch.fx.node.map_arg", "<builtin>.set", "<builtin>.getattr"], "partitioner_utils.get_comm_latency_between.<lambda1>": [], "partitioner_utils.get_comm_latency_between.<lambda2>": [], "partitioner_utils.get_latency_of_partitioned_graph": ["partitioner_utils.get_latency_of_partitioned_graph.get_top_partitions", "partitioner_utils.get_latency_of_partitioned_graph.dfs_helper"], "partitioner_utils.get_latency_of_partitioned_graph.dfs_helper": ["partitioner_utils.get_latency_of_partitioned_graph.dfs_helper", "partitioner_utils.get_comm_latency_between"], "partitioner_utils.get_latency_of_partitioned_graph.get_top_partitions": ["<builtin>.len"], "refinement_types": [], "refinement_types.Equality.__init__": [], "refinement_types.Equality.__str__": [], "refinement_types.Equality.__repr__": [], "refinement_types.Equality.__eq__": ["<builtin>.isinstance"], "rewriter": [], "rewriter.AST_Rewriter.rewrite": ["copy.copy", "torch._sources.normalize_source_lines", "ast.NodeTransformer.visit", "inspect.getsourcelines", "<builtin>.list", "<builtin>.set", "ast.fix_missing_locations", "<builtin>.compile", "<builtin>.exec", "<builtin>.len", "textwrap.dedent", "ast.parse"], "inspect.getsourcelines": [], "torch._sources.normalize_source_lines": [], "ast.NodeTransformer.visit": [], "ast.fix_missing_locations": [], "<builtin>.exec": [], "rewriter.AST_Rewriter.visit_Assert": ["ast.Constant", "ast.copy_location", "ast.Expr", "<builtin>.isinstance", "ast.parse"], "ast.Constant": [], "ast.Expr": [], "ast.copy_location": [], "rewriter.AST_Rewriter.visit_AnnAssign": ["ast.Load", "ast.Name", "ast.Call", "ast.Assign"], "ast.Load": [], "ast.Name": [], "ast.Call": [], "ast.Assign": [], "rewriter.RewritingTracer.trace": ["<builtin>.super", "rewriter._rewrite"], "rewriter._rewrite": ["typing.cast", "rewriter._rewrite.rewrite_module", "rewriter.AST_Rewriter.rewrite", "ast.NodeTransformer.__init__", "<builtin>.isinstance"], "rewriter._rewrite.rewrite_module": ["typing.cast", "rewriter.AST_Rewriter.rewrite", "ast.NodeTransformer.__init__", "rewriter._rewrite.rewrite_module.RewrittenModule.__init__"], "rewriter._rewrite.rewrite_module.RewrittenModule.__init__": ["<builtin>.super", "copy.copy", "rewriter._rewrite.rewrite_module", "<builtin>.isinstance"], "ast.NodeTransformer.__init__": [], "schema_type_annotation": [], "schema_type_annotation.AnnotateTypesWithSchema.__init__": ["<builtin>.super"], "schema_type_annotation.AnnotateTypesWithSchema.call_function": ["<builtin>.isinstance", "<builtin>.super", "schema_type_annotation.AnnotateTypesWithSchema._extract_python_return_type", "inspect.signature"], "inspect.signature": [], "schema_type_annotation.AnnotateTypesWithSchema._extract_python_return_type": ["<builtin>.callable", "inspect.signature"], "schema_type_annotation.AnnotateTypesWithSchema.call_module": ["<builtin>.getattr", "<builtin>.super", "torch.fx.Transformer.fetch_attr", "<builtin>.isinstance", "schema_type_annotation.AnnotateTypesWithSchema._extract_python_return_type", "<builtin>.hasattr"], "torch.fx.Transformer.fetch_attr": [], "schema_type_annotation.AnnotateTypesWithSchema.get_attr": ["torch._C._jit_try_infer_type", "<builtin>.getattr", "<builtin>.super", "<builtin>.RuntimeError", "torch.fx.operator_schemas._torchscript_type_to_python_type", "<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.enumerate"], "torch._C._jit_try_infer_type": [], "torch.fx.operator_schemas._torchscript_type_to_python_type": [], "unify_refinements": [], "unify_refinements.infer_symbolic_types_single_pass": ["torch.fx.experimental.graph_gradual_typechecker.Refine", "unify_refinements.unify_eq", "unify_refinements.substitute_all_types"], "torch.fx.experimental.graph_gradual_typechecker.Refine": [], "unify_refinements.unify_eq": ["torch.fx.experimental.unification.unify", "unify_refinements.convert_eq"], "unify_refinements.substitute_all_types": ["unify_refinements.substitute_solution_one_type"], "unify_refinements.infer_symbolic_types": ["unify_refinements.infer_symbolic_types_single_pass"], "unify_refinements.convert_eq": ["<builtin>.tuple"], "torch.fx.experimental.unification.unify": [], "unify_refinements.substitute_solution_one_type": ["<builtin>.tuple", "torch.fx.tensor_type.TensorType", "<builtin>.isinstance"], "unify_refinements.check_for_type_equality": ["<builtin>.zip"], "graph_drawer": [], "graph_drawer.FxGraphDrawer.__init__": ["graph_drawer.FxGraphDrawer._get_leaf_node", "<builtin>.isinstance", "graph_drawer.FxGraphDrawer._to_dot"], "graph_drawer.FxGraphDrawer._to_dot": ["graph_drawer.FxGraphDrawer._get_leaf_node", "graph_drawer.FxGraphDrawer._get_node_label", "graph_drawer.FxGraphDrawer._get_node_style", "pydot.Edge", "pydot.Dot", "pydot.Node", "<builtin>.isinstance", "graph_drawer.FxGraphDrawer._to_dot.get_module_params_or_buffers"], "graph_drawer.FxGraphDrawer._get_leaf_node": ["<builtin>.RuntimeError", "<builtin>.str", "<builtin>.getattr", "<builtin>.hasattr", "<builtin>.isinstance"], "graph_drawer.FxGraphDrawer.get_main_dot_graph": [], "graph_drawer.FxGraphDrawer.get_submod_dot_graph": [], "graph_drawer.FxGraphDrawer.get_all_dot_graphs": [], "graph_drawer.FxGraphDrawer._get_node_style": ["<builtin>.len", "<builtin>.int", "hashlib.md5"], "graph_drawer.FxGraphDrawer._typename": ["torch.typename", "torch.fx.node._get_qualified_name", "<builtin>.isinstance"], "graph_drawer.FxGraphDrawer._get_node_label": ["<builtin>.getattr", "graph_drawer.FxGraphDrawer._tensor_meta_to_label", "graph_drawer.FxGraphDrawer._get_leaf_node", "<builtin>.hasattr", "graph_drawer.FxGraphDrawer._typename"], "graph_drawer.FxGraphDrawer._tensor_meta_to_label": ["<builtin>.RuntimeError", "<builtin>.type", "graph_drawer.FxGraphDrawer._tensor_meta_to_label", "graph_drawer.FxGraphDrawer._stringify_tensor_meta", "<builtin>.isinstance"], "graph_drawer.FxGraphDrawer._stringify_tensor_meta": ["<builtin>.tuple", "<builtin>.hasattr", "<builtin>.str", "<builtin>.print"], "graph_drawer.FxGraphDrawer._get_tensor_label": ["<builtin>.str", "<builtin>.list"], "graph_drawer.FxGraphDrawer._to_dot.get_module_params_or_buffers": ["pydot.Edge", "graph_drawer.FxGraphDrawer._get_tensor_label", "pydot.Node"], "net_min_base": [], "net_min_base._MinimizerSettingBase.__init__": ["argparse.ArgumentParser"], "net_min_base._MinimizerSettingBase.__str__": ["<builtin>.vars"], "net_min_base._MinimizerBase.__init__": ["shape_prop.ShapeProp", "<builtin>.len", "<builtin>.isinstance", "tools_common.FxNetAccFusionsFinder", "<builtin>.enumerate"], "shape_prop.ShapeProp": [], "tools_common.FxNetAccFusionsFinder": [], "net_min_base._MinimizerBase.run_a": ["<builtin>.RuntimeError"], "net_min_base._MinimizerBase.run_b": ["<builtin>.RuntimeError"], "net_min_base._MinimizerBase._store_outputs": ["<builtin>.next", "<builtin>.isinstance", "<builtin>.enumerate"], "net_min_base._MinimizerBase._get_submod_inputs": ["<builtin>.getattr", "<builtin>.set", "<builtin>.print"], "net_min_base._MinimizerBase._get_submod_inputs.get_inputs": [], "net_min_base._MinimizerBase._tag_nodes": ["<builtin>.any"], "net_min_base._MinimizerBase._build_submodule": ["net_min_base._MinimizerBase._tag_nodes", "split_utils.split_by_tags"], "split_utils.split_by_tags": ["split_utils.split_by_tags.flatten", "<builtin>.tuple", "<builtin>.isinstance", "<builtin>.hasattr", "split_utils.HolderModule.__init__", "<builtin>.enumerate", "<builtin>.map", "torch.fx.graph.map_arg", "torch.nn.Module.add_module", "<builtin>.len", "<builtin>.setattr", "<builtin>.getattr", "<builtin>.RuntimeError", "<builtin>.max", "<builtin>.set"], "net_min_base._MinimizerBase._run_and_compare": ["net_min_base._MinimizerBase.run_a", "net_min_base._MinimizerBase._store_outputs", "<builtin>.len", "<builtin>.str", "net_min_base._MinimizerBase._get_submod_inputs", "<builtin>.tuple", "net_min_base._MinimizerBase.run_b", "torch.fx.node.map_arg", "<builtin>.getattr"], "net_min_base._MinimizerBase._run_and_compare.<lambda1>": [], "net_min_base._MinimizerBase._binary_search_impl": ["net_min_base._MinimizerBase._binary_search_impl", "<builtin>.set", "<builtin>.len", "net_min_base._MinimizerBase._build_submodule", "net_min_base._MinimizerBase._run_and_compare"], "net_min_base._MinimizerBase._binary_traverse": ["net_min_base._MinimizerBase._binary_search_impl"], "net_min_base._MinimizerBase._sequential_traverse": ["<builtin>.set", "net_min_base._MinimizerBase._build_submodule", "net_min_base._MinimizerBase._run_and_compare"], "net_min_base._MinimizerBase._accumulate_traverse": ["<builtin>.set", "<builtin>.print", "<builtin>.isinstance", "net_min_base._MinimizerBase._build_submodule", "net_min_base._MinimizerBase._run_and_compare"], "net_min_base._MinimizerBase._collect_nodes": [], "net_min_base._MinimizerBase.run_nodes": ["net_min_base._MinimizerBase._collect_nodes", "<builtin>.set", "<builtin>.print", "net_min_base._MinimizerBase._build_submodule", "net_min_base._MinimizerBase._run_and_compare"], "net_min_base._MinimizerBase.minimize": ["net_min_base._MinimizerBase._sequential_traverse", "net_min_base._MinimizerBase._collect_nodes", "net_min_base._MinimizerBase._accumulate_traverse", "<builtin>.RuntimeError", "<builtin>.print", "net_min_base._MinimizerBase._binary_traverse"], "operator_support": [], "operator_support.OperatorSupport.is_node_supported": ["<builtin>.enumerate", "tools_common.get_node_target", "<builtin>.isinstance", "<builtin>.len"], "tools_common.get_node_target": ["torch.fx.node._get_qualified_name", "torch.typename", "<builtin>.isinstance"], "shape_prop": [], "shape_prop.extract_tensor_metadata": ["typing.NamedTuple.__init__"], "shape_prop.ShapeProp.run_node": ["<builtin>.type", "<builtin>.super", "torch.fx.node.map_aggregate"], "shape_prop.ShapeProp.run_node.extract_tensor_meta": ["<builtin>.isinstance", "shape_prop.extract_tensor_metadata"], "shape_prop.ShapeProp.propagate": ["<builtin>.super"], "splitter_base": [], "splitter_base._SplitterSettingBase.__init__": ["argparse.ArgumentParser"], "splitter_base.FxNetAccNodesFinder.__init__": [], "splitter_base.FxNetAccNodesFinder.reduce_acc_nodes_non_tensor_input_helper": [], "splitter_base.FxNetAccNodesFinder.reduce_acc_nodes_non_tensor_input": ["splitter_base.FxNetAccNodesFinder.reduce_acc_nodes_non_tensor_input_helper"], "splitter_base.FxNetAccNodesFinder.reduce_acc_nodes_non_tensor_output": ["splitter_base.FxNetAccNodesFinder.reduce_acc_nodes_non_tensor_input_helper"], "splitter_base.FxNetAccNodesFinder.__call__": ["<builtin>.dict", "splitter_base.FxNetAccNodesFinder.reduce_acc_nodes_non_tensor_output", "splitter_base.FxNetAccNodesFinder.reduce_acc_nodes_non_tensor_input"], "splitter_base._SplitterBase.__init__": ["splitter_base._SplitterBase.find_deps", "<builtin>.isinstance", "splitter_base.FxNetAccNodesFinder.__init__", "splitter_base._SplitterBase.update_deps_for_fusions", "tools_common.FxNetAccFusionsFinder", "shape_prop.ShapeProp"], "splitter_base._SplitterBase.find_deps": ["collections.defaultdict"], "splitter_base._SplitterBase.update_deps_for_fusions": [], "splitter_base._SplitterBase._lower_model_to_backend": [], "splitter_base._SplitterBase._find_culprit": [], "splitter_base._SplitterBase._draw_graph_based_on_node_support": ["graph_drawer.FxGraphDrawer.__init__", "graph_drawer.FxGraphDrawer.get_main_dot_graph"], "splitter_base._SplitterBase._draw_graph_based_on_node_support.CustomDrawer._get_node_style": ["<builtin>.super"], "splitter_base._SplitterBase.node_support_preview": ["operator_support.get_node_target", "<builtin>.next", "splitter_base._SplitterBase._draw_graph_based_on_node_support", "<builtin>.reversed", "<builtin>.dict", "<builtin>.isinstance", "splitter_base._SplitterBase.node_support_preview.get_dtype", "<builtin>.print", "<builtin>.tuple", "<builtin>.len", "collections.defaultdict", "<builtin>.enumerate"], "splitter_base._SplitterBase.node_support_preview.get_dtype": ["<builtin>.getattr"], "operator_support.get_node_target": [], "splitter_base._SplitterBase.split_preview": ["<builtin>.getattr", "splitter_base._SplitterBase.remove_small_acc_subgraphs", "splitter_base._SplitterBase._lower_model_to_backend", "<builtin>.print", "splitter_base._SplitterBase.tag", "splitter_base._SplitterBase.put_nodes_into_subgraphs", "splitter_base._SplitterBase.split_preview.get_submod_inputs", "torch.fx.node.map_arg", "splitter_base._SplitterBase._find_culprit", "torch.fx.experimental.graph_manipulation.get_size_of_node", "shape_prop.ShapeProp", "<builtin>.max", "<builtin>.len", "<builtin>.enumerate", "splitter_base._SplitterBase.split", "graph_drawer.FxGraphDrawer"], "splitter_base._SplitterBase.put_nodes_into_subgraphs": ["<builtin>.next", "splitter_base._SplitterBase.starter_nodes", "<builtin>.set"], "splitter_base._SplitterBase.remove_small_acc_subgraphs": ["<builtin>.len"], "splitter_base._SplitterBase.tag": ["<builtin>.hasattr", "<builtin>.len"], "splitter_base._SplitterBase.split": ["<builtin>.hasattr", "split_utils.split_by_tags"], "graph_drawer.FxGraphDrawer": [], "splitter_base._SplitterBase.split_preview.get_submod_inputs": [], "splitter_base._SplitterBase.split_preview.get_submod_inputs.get_inputs": [], "torch.fx.experimental.graph_manipulation.get_size_of_node": [], "splitter_base._SplitterBase.split_preview.get_bytes": ["torch.fx.experimental.graph_manipulation.get_size_of_node"], "splitter_base._SplitterBase.find_reverse_deps": ["<builtin>.int", "collections.defaultdict"], "splitter_base._SplitterBase.update_reverse_deps_for_fusions": ["<builtin>.set"], "splitter_base._SplitterBase.find_parent_nodes_of_subgraph": ["<builtin>.set"], "splitter_base._SplitterBase.extend_acc_subgraph": ["splitter_base._SplitterBase.find_parent_nodes_of_subgraph", "splitter_base._SplitterBase.find_reverse_deps", "<builtin>.int", "splitter_base._SplitterBase.update_reverse_deps_for_fusions", "<builtin>.set"], "splitter_base._SplitterBase.starter_nodes": ["<builtin>.set"], "splitter_base._SplitterBase.__call__": ["splitter_base._SplitterBase.put_nodes_into_subgraphs", "splitter_base._SplitterBase.remove_small_acc_subgraphs", "splitter_base._SplitterBase.split", "splitter_base._SplitterBase.tag"], "split_module": [], "split_module.Partition.__init__": ["torch.fx.graph.Graph"], "split_module.Partition.__repr__": [], "split_module.split_module": ["torch.fx.graph.map_arg", "<builtin>.RuntimeError", "torch.fx.proxy.Proxy", "<builtin>.list", "<builtin>.len", "<builtin>.isinstance", "<builtin>.str", "<builtin>.hasattr", "split_module.Partition.__init__", "<builtin>.enumerate", "torch.fx.graph_module.GraphModule", "<builtin>.getattr", "torch.fx.graph.Graph", "<builtin>.tuple"], "split_module.split_module.record_cross_partition_use": ["<builtin>.getattr"], "split_module.split_module.<lambda1>": ["split_module.split_module.record_cross_partition_use"], "torch.fx.graph.map_arg": [], "split_module.split_module.<lambda2>": ["split_module.split_module.record_cross_partition_use"], "split_module.split_module.<lambda3>": ["split_module.split_module.record_cross_partition_use"], "split_module.split_module.<lambda4>": [], "split_module.split_module.<lambda5>": [], "torch.fx.graph_module.GraphModule": [], "torch.fx.proxy.Proxy": [], "split_module.split_module.<lambda6>": [], "split_utils": [], "split_utils.Component": ["dataclasses.field"], "split_utils.HolderModule.__init__": ["torch.nn.Module.add_module", "<builtin>.super"], "torch.nn.Module.add_module": [], "split_utils.split_by_tags.flatten": ["torch.fx.graph.map_arg"], "split_utils.split_by_tags.remap_func": ["<builtin>.next", "<builtin>.enumerate"], "tools_common": [], "tools_common.FxNetAccFusionsFinder.__init__": ["<builtin>.list"], "tools_common.FxNetAccFusionsFinder.FusionGroup.add_node": [], "tools_common.FxNetAccFusionsFinder.recursive_add_node": ["tools_common.FxNetAccFusionsFinder.recursive_add_node"], "tools_common.FxNetAccFusionsFinder.__call__": ["<builtin>.set", "tools_common.FxNetAccFusionsFinder.recursive_add_node", "<builtin>.list", "<builtin>.min"], "ci": [], "ci.main": ["<builtin>.print", "execution.work.WorkOrder", "argparse.ArgumentParser", "time.time", "pdb.set_trace", "hashlib.md5", "<builtin>.open", "json.dump", "<builtin>.tuple", "json.dumps", "<builtin>.int", "execution.runner.Runner", "core.expand.materialize", "<builtin>.str"], "api.AutoLabels.as_dict": [], "api.GroupedSetup.__post_init__": ["<builtin>.getattr", "dataclasses.fields", "textwrap.dedent"], "api.GroupedBenchmark.init_from_stmts": ["<builtin>.isinstance", "textwrap.dedent", "api.GroupedBenchmark._parse_signature", "api.GroupedBenchmark._model_from_py_stmt"], "api.GroupedBenchmark._parse_signature": ["re.search", "<builtin>.tuple", "<builtin>.ValueError"], "api.GroupedBenchmark._model_from_py_stmt": ["textwrap.indent", "textwrap.dedent", "<builtin>.ValueError"], "api.GroupedBenchmark.init_from_model": ["<builtin>.isinstance", "api.GroupedBenchmark._parse_signature", "api.GroupedBenchmark._make_model_invocation", "<builtin>.ValueError"], "api.GroupedBenchmark._make_model_invocation": ["textwrap.dedent"], "api.GroupedBenchmark.init_from_variants": ["<builtin>.set", "api.GroupedBenchmark._parse_variants", "<builtin>.max", "<builtin>.enumerate", "api.GroupedBenchmark.init_from_stmts", "<builtin>.len", "itertools.chain", "<builtin>.zip"], "api.GroupedBenchmark._parse_variants": ["re.search", "textwrap.dedent"], "api.GroupedBenchmark.__post_init__": ["<builtin>.ValueError"], "expand": ["<builtin>.tuple", "itertools.product"], "expand._generate_torchscript_file": ["typing.cast", "os.path.join", "<builtin>.ValueError", "os.remove", "core.utils.get_temp_dir", "os.path.exists", "<builtin>.isinstance", "<builtin>.type", "os.makedirs", "<builtin>.open"], "expand._get_stmt": ["core.api.GroupedBenchmark._make_model_invocation"], "expand._get_setup": ["textwrap.dedent", "textwrap.indent"], "expand.materialize": ["core.api.AutoLabels", "itertools.product", "expand._get_setup", "<builtin>.tuple", "expand._get_stmt", "expand._generate_torchscript_file", "textwrap.dedent", "<builtin>.isinstance", "core.api.TimerArgs", "re.sub", "uuid.uuid4"], "core.api.TimerArgs": [], "utils.get_temp_dir": ["torch.utils.benchmark._make_temp_dir", "atexit.register"], "utils._flatten": ["utils._flatten", "<builtin>.isinstance", "<builtin>.all"], "utils.flatten": ["<builtin>.all", "<builtin>.isinstance", "utils._flatten"], "utils.parse_stmts": ["<builtin>.len", "<builtin>.ValueError", "textwrap.dedent", "re.search"], "setup": ["core.api.GroupedSetup", "core.utils.parse_stmts", "torch.utils.cpp_extension.CppExtension", "setuptools.setup", "<builtin>.open", "setuptools.find_packages", "sysconfig.get_path", "os.path.dirname", "os.path.abspath", "<builtin>.range", "tools.setup_helpers.cmake.CMake.__init__", "sys.exit", "<builtin>.max", "sys.maxsize.bit_length", "sysconfig.get_config_var", "<builtin>.enumerate", "setup.print_box", "<builtin>.map", "platform.python_version", "os.getenv", "setup.report", "tools.generate_torch_version.get_torch_version", "setup.configure_extension_build", "<builtin>.print", "setup.build_deps", "os.path.exists", "os.path.join", "setuptools.dist.Distribution"], "core.api.GroupedSetup": [], "standard": ["core.utils.flatten", "core.api.GroupedVariants", "core.utils.parse_stmts", "core.api.GroupedModules", "core.api.GroupedStmts"], "core.api.GroupedStmts": [], "core.api.GroupedVariants": [], "core.api.GroupedModules": [], "runner.WorkerFailed.__init__": ["<builtin>.super"], "runner.CorePool.__init__": ["threading.Lock", "<builtin>.print", "<builtin>.range"], "runner.CorePool.reserve": ["<builtin>.tuple", "<builtin>.all", "<builtin>.range"], "runner.CorePool.release": [], "runner.Runner.__init__": ["<builtin>.ValueError", "<builtin>.set", "<builtin>.len", "runner.CorePool.__init__", "<builtin>.list"], "runner.Runner.run": ["<builtin>.print", "runner.Runner._run", "runner.Runner._force_shutdown"], "runner.Runner._run": ["runner.Runner._canary_import", "<builtin>.max", "runner.Runner._enqueue_new_jobs", "runner.Runner._update_active_jobs", "time.time", "time.sleep", "<builtin>.print", "runner.Runner._print_progress"], "runner.Runner._force_shutdown": ["textwrap.dedent", "<builtin>.len", "<builtin>.range", "<builtin>.print", "time.sleep"], "runner.Runner._canary_import": ["<builtin>.ImportError", "subprocess.run", "<builtin>.set"], "runner.Runner._update_active_jobs": ["<builtin>.isinstance", "runner.WorkerFailed.__init__"], "runner.Runner._enqueue_new_jobs": ["execution.work.InProgress", "time.sleep", "<builtin>.enumerate"], "runner.Runner._print_progress": ["math.ceil", "<builtin>.len", "time.time", "<builtin>.print", "<builtin>.sum"], "work": [], "work.WorkOrder.__hash__": ["<builtin>.id"], "work.WorkOrder.__str__": ["json.dumps"], "work._BenchmarkProcess.__init__": ["uuid.uuid4", "<builtin>.open", "pickle.dump", "time.time", "subprocess.Popen", "core.utils.get_temp_dir", "os.path.join"], "work._BenchmarkProcess.clone": ["work._BenchmarkProcess.__init__"], "work._BenchmarkProcess.cmd": [], "work._BenchmarkProcess.duration": ["time.time"], "work._BenchmarkProcess.result": ["work._BenchmarkProcess._maybe_collect"], "work._BenchmarkProcess._maybe_collect": ["<builtin>.open", "<builtin>.isinstance", "worker.main.WorkerFailure", "time.time", "worker.main.WorkerUnpickler", "os.remove"], "work._BenchmarkProcess.poll": ["work._BenchmarkProcess._maybe_collect"], "work._BenchmarkProcess.interrupt": [], "work._BenchmarkProcess.terminate": [], "worker.main.WorkerUnpickler": [], "worker.main.WorkerFailure": [], "work.InProgress.__init__": ["work._BenchmarkProcess.__init__"], "work.InProgress.work_order": [], "work.InProgress.cpu_list": [], "work.InProgress.proc": [], "work.InProgress.duration": [], "work.InProgress.check_finished": ["work._BenchmarkProcess.poll", "<builtin>.print", "work._BenchmarkProcess.clone", "subprocess.TimeoutExpired", "work._BenchmarkProcess.interrupt"], "work.InProgress.result": [], "work.InProgress.__hash__": ["<builtin>.id"], "main.WorkerUnpickler.find_class": ["<builtin>.super"], "main.WorkerUnpickler.load_input": ["pickle.Unpickler.load", "<builtin>.isinstance"], "main.WorkerUnpickler.load_output": ["pickle.Unpickler.load", "<builtin>.isinstance"], "main._run": ["torch.utils.benchmark.Timer", "<builtin>.tuple", "torch.utils.benchmark.utils.timer.Timer"], "fused": [], "fused.ConvReLU1d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.ConvReLU2d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.ConvReLU3d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.LinearReLU.__init__": ["<builtin>.super", "<builtin>.type"], "fused.ConvBn1d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.ConvBn2d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.ConvBnReLU1d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.ConvBnReLU2d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.ConvBn3d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.ConvBnReLU3d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.BNReLU2d.__init__": ["<builtin>.super", "<builtin>.type"], "fused.BNReLU3d.__init__": ["<builtin>.super", "<builtin>.type"], "remote_module_template": [], "remote_module_template.get_remote_module_template": [], "codegen_external": ["codegen_external.main"], "codegen_external.num_leading_spaces": ["<builtin>.len"], "codegen_external.deindent": ["<builtin>.map", "<builtin>.min"], "codegen_external.gen_external": ["tools.codegen.gen.FileManager", "<builtin>.isinstance", "tools.codegen.gen.parse_native_yaml", "<builtin>.list", "<builtin>.enumerate", "<builtin>.len"], "tools.codegen.gen.parse_native_yaml": [], "tools.codegen.gen.FileManager": [], "codegen_external.gen_external.<lambda1>": [], "codegen_external.main": ["argparse.ArgumentParser", "codegen_external.gen_external"], "generate_build_files": ["generate_build_files.generate_build_files"], "generate_build_files.run_cmd": ["subprocess.run", "<builtin>.exit", "<builtin>.print"], "<builtin>.exit": [], "generate_build_files.run_timed_cmd": ["generate_build_files.run_cmd"], "generate_build_files.update_submodules": ["generate_build_files.run_cmd"], "generate_build_files.gen_compile_commands": ["generate_build_files.run_timed_cmd"], "generate_build_files.run_autogen": ["generate_build_files.run_timed_cmd"], "generate_build_files.generate_build_files": ["generate_build_files.update_submodules", "generate_build_files.gen_compile_commands", "generate_build_files.run_autogen"], "max_tokens_pragma": ["max_tokens_pragma.main"], "max_tokens_pragma.add_max_tokens_pragma": ["<builtin>.enumerate", "<builtin>.int", "re.match"], "max_tokens_pragma.strip_max_tokens_pragmas": ["re.match"], "max_tokens_pragma.add_max_tokens_pragma_to_files": ["max_tokens_pragma.add_max_tokens_pragma", "<builtin>.open"], "max_tokens_pragma.strip_max_tokens_pragma_from_files": ["<builtin>.open", "max_tokens_pragma.strip_max_tokens_pragmas"], "max_tokens_pragma.parse_args": ["argparse.ArgumentParser"], "max_tokens_pragma.main": ["max_tokens_pragma.parse_args", "<builtin>.set", "max_tokens_pragma.add_max_tokens_pragma_to_files", "max_tokens_pragma.strip_max_tokens_pragma_from_files"], "run": ["collections.namedtuple", "re.compile", "torch.distributed.elastic.utils.logging.get_logger", "run.main", "torch.distributed.elastic.multiprocessing.errors.record"], "run.log": ["<builtin>.print"], "run.CommandResult.__init__": [], "run.CommandResult.failed": [], "run.CommandResult.__add__": ["run.CommandResult.__init__"], "run.CommandResult.__str__": [], "run.CommandResult.__repr__": [], "run.ProgressMeter.__init__": ["run.ProgressMeter._write", "run.log", "run.ProgressMeter._flush"], "run.ProgressMeter._write": ["sys.stderr.write"], "run.ProgressMeter._flush": ["sys.stderr.flush"], "sys.stderr.write": [], "sys.stderr.flush": [], "run.ProgressMeter.update": ["run.ProgressMeter._write", "<builtin>.int", "run.ProgressMeter._flush"], "run.ProgressMeter.print": ["run.ProgressMeter.print", "run.ProgressMeter._flush", "run.ProgressMeter._write"], "run.ClangTidyWarning.__init__": [], "run.ClangTidyWarning.__str__": ["<builtin>.len"], "run.run_shell_command": ["asyncio.create_subprocess_shell", "run.CommandResult.__init__", "run._run_clang_tidy_in_parallel.helper.on_completed", "shlex.quote", "run.log"], "shlex.quote": [], "asyncio.create_subprocess_shell": [], "run._run_clang_tidy_in_parallel.helper.on_completed": ["run.ProgressMeter.update", "run.CommandResult.failed", "<builtin>.str", "run.ProgressMeter.print", "<builtin>.repr"], "run._run_clang_tidy_in_parallel": ["run.CommandResult.__init__", "<builtin>.len", "run._run_clang_tidy_in_parallel.helper", "run.ProgressMeter.__init__", "<builtin>.sum"], "run._run_clang_tidy_in_parallel.gather_with_concurrency": ["run._run_clang_tidy_in_parallel.gather_with_concurrency.sem_task", "asyncio.Semaphore", "asyncio.gather"], "asyncio.Semaphore": [], "run._run_clang_tidy_in_parallel.gather_with_concurrency.sem_task": [], "asyncio.gather": [], "run._run_clang_tidy_in_parallel.helper": ["multiprocessing.cpu_count", "run._run_clang_tidy_in_parallel.gather_with_concurrency", "run.run_shell_command"], "run._run_clang_tidy": ["run.CommandResult.__init__", "yaml.load", "json.dumps", "os.path.exists", "<builtin>.str", "<builtin>.open", "run._run_clang_tidy_in_parallel", "<builtin>.list", "run.map_filename"], "run.map_filename": ["os.path.relpath", "os.path.join", "<builtin>.len"], "run.extract_warnings": ["os.path.isabs", "os.path.join", "run.ClangTidyWarning.__init__", "<builtin>.int", "os.path.abspath", "<builtin>.sorted", "<builtin>.set"], "os.path.isabs": [], "run.apply_nolint": ["<builtin>.open", "<builtin>.sorted", "<builtin>.len"], "os.path.relpath": [], "run.map_filenames": ["run.map_filename"], "run.split_negative_from_positive_patterns": [], "run.get_file_patterns": ["fnmatch.translate", "run.split_negative_from_positive_patterns", "re.compile"], "fnmatch.translate": [], "run.filter_files": ["<builtin>.any", "run.log"], "run.get_all_files": ["<builtin>.str", "run.run_shell_command"], "run.find_changed_lines": ["<builtin>.len", "collections.defaultdict", "<builtin>.dict", "unidiff.PatchSet"], "unidiff.PatchSet": [], "run.filter_from_diff": ["<builtin>.any", "run.find_changed_lines", "<builtin>.list"], "run.filter_from_diff_file": ["<builtin>.open", "run.filter_from_diff"], "run.filter_default": ["run.get_all_files"], "run._run": ["run.CommandResult.__init__", "run._run_clang_tidy", "run.filter_default", "run.filter_files", "run.filter_from_diff_file", "run.apply_nolint", "<builtin>.str", "os.path.relpath", "run.get_file_patterns", "run.extract_warnings", "shutil.copyfile", "run.log", "<builtin>.list", "run.map_filename"], "run.run": ["asyncio.get_event_loop", "run._run", "uuid.uuid4", "run.config_from_args", "<builtin>.str", "torch.distributed.launcher.api.elastic_launch"], "asyncio.get_event_loop": [], "__main__.clang_search_dirs": ["shutil.which", "<builtin>.RuntimeError", "<builtin>.len", "subprocess.run", "re.match"], "shutil.which": [], "__main__.parse_args": ["argparse.ArgumentParser"], "tools.linter.clang_tidy.generate_build_files.generate_build_files": [], "tools.linter.clang_tidy.run.run": [], "clang_tidy": ["<builtin>.print", "<builtin>.exit", "tools.linter.install.download_bin.download", "os.path.join"], "tools.linter.install.download_bin.download": [], "download_bin": ["os.path.dirname", "platform.system", "subprocess.run", "os.path.realpath", "os.path.join"], "platform.system": [], "download_bin.compute_file_sha256": ["<builtin>.open", "os.path.exists", "hashlib.sha256"], "hashlib.sha256": [], "download_bin.report_download_progress": ["sys.stdout.write", "<builtin>.int", "<builtin>.min"], "sys.stdout.write": [], "download_bin.download_bin": ["sys.stdout.isatty", "os.path.join", "<builtin>.print"], "sys.stdout.isatty": [], "download_bin.download": ["os.chmod", "os.mkdir", "os.stat", "download_bin.compute_file_sha256", "<builtin>.print", "os.path.exists", "<builtin>.open", "<builtin>.repr", "os.path.join", "os.unlink", "download_bin.download_bin"], "os.unlink": [], "os.stat": [], "os.chmod": [], "beam_search": [], "beam_search.BeamSearchForwardOnly": ["collections.namedtuple"], "beam_search.BeamSearchForwardOnly.__init__": ["caffe2.python.models.seq2seq.seq2seq_model_helper.Seq2SeqModelHelper"], "caffe2.python.models.seq2seq.seq2seq_model_helper.Seq2SeqModelHelper": [], "beam_search.BeamSearchForwardOnly.get_step_model": [], "beam_search.BeamSearchForwardOnly.get_previous_tokens": [], "beam_search.BeamSearchForwardOnly.get_timestep": [], "beam_search.BeamSearchForwardOnly.apply": ["beam_search.BeamSearchForwardOnly.apply.choose_state_per_hypo", "<builtin>.zip", "<builtin>.float", "<builtin>.str"], "beam_search.BeamSearchForwardOnly.apply.choose_state_per_hypo": ["<builtin>.str"], "seq2seq_beam_search_test": [], "seq2seq_beam_search_test.Seq2SeqBeamSearchTest._build_seq2seq_model": ["os.path.join", "caffe2.python.models.seq2seq.train.Seq2SeqModelCaffe2", "<builtin>.dict"], "caffe2.python.models.seq2seq.train.Seq2SeqModelCaffe2": [], "seq2seq_beam_search_test.Seq2SeqBeamSearchTest._run_compare_train_inference": ["<builtin>.str", "caffe2.python.workspace.RunNet", "seq2seq_beam_search_test.Seq2SeqBeamSearchTest._build_seq2seq_model", "numpy.array", "tempfile.mkdtemp", "<builtin>.len", "caffe2.python.workspace.FetchBlob", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "<builtin>.dict", "<builtin>.list", "numpy.testing.assert_almost_equal", "numpy.random.random_integers", "<builtin>.reversed", "<builtin>.range", "caffe2.python.models.seq2seq.translate.Seq2SeqModelCaffe2EnsembleDecoder"], "caffe2.python.models.seq2seq.translate.Seq2SeqModelCaffe2EnsembleDecoder": [], "seq2seq_beam_search_test.Seq2SeqBeamSearchTest.test_attention": ["seq2seq_beam_search_test.Seq2SeqBeamSearchTest._run_compare_train_inference", "<builtin>.dict"], "seq2seq_beam_search_test.Seq2SeqBeamSearchTest.test_2layer_attention": ["seq2seq_beam_search_test.Seq2SeqBeamSearchTest._run_compare_train_inference", "<builtin>.dict"], "seq2seq_beam_search_test.Seq2SeqBeamSearchTest.test_multi_decoder": ["seq2seq_beam_search_test.Seq2SeqBeamSearchTest._run_compare_train_inference", "<builtin>.dict"], "seq2seq_model_helper": [], "seq2seq_model_helper.Seq2SeqModelHelper.__init__": ["<builtin>.super"], "seq2seq_model_helper.Seq2SeqModelHelper.AddParam": ["<builtin>.type", "caffe2.python.model_helper.ModelHelper.param_init_net.__getattr__", "caffe2.python.model_helper.ModelHelper.params.append", "caffe2.python.model_helper.ModelHelper.net.AddExternalInput", "<builtin>.dict"], "caffe2.python.model_helper.ModelHelper.param_init_net.__getattr__": [], "caffe2.python.model_helper.ModelHelper.net.AddExternalInput": [], "seq2seq_model_helper.Seq2SeqModelHelper.GetNonTrainableParams": ["caffe2.python.scope.CurrentNameScope"], "seq2seq_model_helper.Seq2SeqModelHelper.GetAllParams": ["seq2seq_model_helper.Seq2SeqModelHelper.GetNonTrainableParams", "caffe2.python.model_helper.ModelHelper.GetComputedParams", "caffe2.python.model_helper.ModelHelper.GetParams"], "caffe2.python.model_helper.ModelHelper.GetParams": [], "caffe2.python.model_helper.ModelHelper.GetComputedParams": [], "seq2seq_model_helper_test": ["random.seed", "unittest.main"], "seq2seq_model_helper_test.Seq2SeqModelHelperTest.testConstuctor": ["caffe2.python.models.seq2seq.seq2seq_model_helper.Seq2SeqModelHelper", "caffe2.python.test_util.TestCase.assertEqual"], "seq2seq_model_helper_test.Seq2SeqModelHelperTest.testAddParam": ["caffe2.python.models.seq2seq.seq2seq_model_helper.Seq2SeqModelHelper", "caffe2.python.test_util.TestCase.assertEqual", "<builtin>.str"], "seq2seq_model_helper_test.Seq2SeqModelHelperTest.testGetNonTrainableParams": ["caffe2.python.models.seq2seq.seq2seq_model_helper.Seq2SeqModelHelper", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.scope.NameScope"], "seq2seq_model_helper_test.Seq2SeqModelHelperTest.testGetAllParams": ["caffe2.python.models.seq2seq.seq2seq_model_helper.Seq2SeqModelHelper", "caffe2.python.test_util.TestCase.assertEqual"], "seq2seq_util": [], "seq2seq_util.gen_vocab": ["collections.defaultdict", "<builtin>.open", "future.utils.viewitems"], "seq2seq_util.gen_vocab.<lambda1>": ["<builtin>.len"], "seq2seq_util.gen_vocab.<lambda2>": [], "seq2seq_util.get_numberized_sentence": [], "seq2seq_util.rnn_unidirectional_layer": ["caffe2.python.rnn_cell.LSTMCell", "caffe2.python.core.NameScope", "caffe2.python.rnn_cell.DropoutCell"], "caffe2.python.rnn_cell.LSTMCell": [], "caffe2.python.rnn_cell.DropoutCell": [], "seq2seq_util.rnn_bidirectional_layer": ["seq2seq_util.rnn_unidirectional_layer", "caffe2.python.core.NameScope"], "seq2seq_util.build_embeddings": [], "seq2seq_util.get_layer_scope": [], "seq2seq_util.build_embedding_encoder": ["<builtin>.len", "seq2seq_util.rnn_unidirectional_layer", "<builtin>.enumerate", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "caffe2.python.core.NameScope", "seq2seq_util.get_layer_scope", "seq2seq_util.rnn_bidirectional_layer"], "seq2seq_util.LSTMWithAttentionDecoder.scope": [], "seq2seq_util.LSTMWithAttentionDecoder._get_attention_type": [], "seq2seq_util.LSTMWithAttentionDecoder.__init__": ["<builtin>.len", "caffe2.python.rnn_cell.MultiRNNCell", "caffe2.python.rnn_cell.AttentionCell", "seq2seq_util.LSTMWithAttentionDecoder.scope", "seq2seq_util.LSTMWithAttentionDecoder._get_attention_type"], "caffe2.python.rnn_cell.MultiRNNCell": [], "caffe2.python.rnn_cell.AttentionCell": [], "seq2seq_util.LSTMWithAttentionDecoder.get_state_names": [], "seq2seq_util.LSTMWithAttentionDecoder.get_outputs_with_grads": [], "seq2seq_util.LSTMWithAttentionDecoder.get_output_dim": [], "seq2seq_util.LSTMWithAttentionDecoder.get_attention_weights": [], "seq2seq_util.LSTMWithAttentionDecoder.apply": [], "seq2seq_util.LSTMWithAttentionDecoder.apply_over_sequence": ["seq2seq_util.LSTMWithAttentionDecoder.get_outputs_with_grads"], "seq2seq_util.build_initial_rnn_decoder_states": ["<builtin>.len", "caffe2.python.brew.fc", "<builtin>.enumerate"], "seq2seq_util.build_embedding_decoder": ["seq2seq_util.build_initial_rnn_decoder_states", "seq2seq_util.LSTMWithAttentionDecoder.__init__", "seq2seq_util.LSTMWithAttentionDecoder.get_output_dim", "<builtin>.enumerate", "caffe2.python.rnn_cell.LSTMCell", "caffe2.python.core.DeviceScope", "caffe2.python.rnn_cell.DropoutCell", "caffe2.python.core.DeviceOption", "caffe2.python.core.NameScope", "seq2seq_util.LSTMWithAttentionDecoder.apply_over_sequence", "seq2seq_util.get_layer_scope"], "seq2seq_util.output_projection": ["caffe2.python.brew.fc"], "train": ["logging.StreamHandler", "collections.namedtuple", "train.main", "logging.getLogger"], "train.prepare_batch": ["<builtin>.reversed", "numpy.array", "<builtin>.list", "<builtin>.max", "<builtin>.len"], "train.Seq2SeqModelCaffe2._build_model": ["train.Seq2SeqModelCaffe2.forward_model_build_fun", "train.Seq2SeqModelCaffe2.norm_clipped_sparse_grad_update", "caffe2.python.data_parallel_model.Parallelize_GPU", "train.Seq2SeqModelCaffe2.model_build_fun", "<builtin>.list", "train.Seq2SeqModelCaffe2.norm_clipped_grad_update", "caffe2.python.models.seq2seq.seq2seq_model_helper.Seq2SeqModelHelper", "train.Seq2SeqModelCaffe2._build_embeddings", "<builtin>.range", "train.Seq2SeqModelCaffe2._build_shared"], "train.Seq2SeqModelCaffe2._build_shared": ["<builtin>.float", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "time.time"], "train.Seq2SeqModelCaffe2._build_embeddings": ["math.sqrt", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption"], "train.Seq2SeqModelCaffe2.model_build_fun": ["caffe2.python.workspace.GetNameScope", "caffe2.python.models.seq2seq.seq2seq_util.output_projection", "caffe2.python.models.seq2seq.seq2seq_util.build_embedding_encoder", "caffe2.python.models.seq2seq.seq2seq_util.build_embedding_decoder", "<builtin>.len"], "train.Seq2SeqModelCaffe2.norm_clipped_grad_update": ["<builtin>.isinstance", "train.Seq2SeqModelCaffe2._calc_norm_ratio", "train.Seq2SeqModelCaffe2._apply_norm_ratio"], "train.Seq2SeqModelCaffe2.forward_model_build_fun": ["train.Seq2SeqModelCaffe2.model_build_fun"], "train.Seq2SeqModelCaffe2._build_model.<lambda1>": [], "train.Seq2SeqModelCaffe2._build_model.clipped_grad_update_bound": ["train.Seq2SeqModelCaffe2.norm_clipped_grad_update"], "train.Seq2SeqModelCaffe2._build_model.<lambda2>": [], "train.Seq2SeqModelCaffe2.norm_clipped_sparse_grad_update": ["<builtin>.isinstance", "train.Seq2SeqModelCaffe2._calc_norm_ratio", "train.Seq2SeqModelCaffe2._apply_norm_ratio"], "caffe2.python.workspace.GetNameScope": [], "caffe2.python.models.seq2seq.seq2seq_util.build_embedding_encoder": [], "caffe2.python.models.seq2seq.seq2seq_util.build_embedding_decoder": [], "caffe2.python.models.seq2seq.seq2seq_util.output_projection": [], "train.Seq2SeqModelCaffe2._calc_norm_ratio": ["<builtin>.isinstance", "<builtin>.float", "caffe2.python.core.NameScope", "<builtin>.enumerate"], "train.Seq2SeqModelCaffe2._apply_norm_ratio": ["<builtin>.isinstance", "caffe2.python.core.NameScope"], "train.Seq2SeqModelCaffe2.total_loss_scalar": ["caffe2.python.workspace.FetchBlob", "<builtin>.range"], "train.Seq2SeqModelCaffe2._init_model": ["caffe2.python.workspace.RunNetOnce", "train.Seq2SeqModelCaffe2._init_model.create_net"], "train.Seq2SeqModelCaffe2._init_model.create_net": ["<builtin>.str", "caffe2.python.workspace.CreateNet"], "train.Seq2SeqModelCaffe2.__init__": ["<builtin>.str", "caffe2.python.workspace.GlobalInit"], "train.Seq2SeqModelCaffe2.__enter__": [], "train.Seq2SeqModelCaffe2.__exit__": ["caffe2.python.workspace.ResetWorkspace"], "train.Seq2SeqModelCaffe2.initialize_from_scratch": ["train.Seq2SeqModelCaffe2._init_model", "train.Seq2SeqModelCaffe2._build_model"], "train.Seq2SeqModelCaffe2.get_current_step": ["caffe2.python.workspace.FetchBlob"], "train.Seq2SeqModelCaffe2.inc_current_step": ["caffe2.python.workspace.FeedBlob", "numpy.array", "train.Seq2SeqModelCaffe2.get_current_step"], "train.Seq2SeqModelCaffe2.step": ["caffe2.python.workspace.RunNet", "train.Seq2SeqModelCaffe2.total_loss_scalar", "caffe2.python.workspace.FeedBlob", "train.prepare_batch", "train.Seq2SeqModelCaffe2.inc_current_step", "<builtin>.range", "caffe2.python.core.DeviceOption", "<builtin>.zip"], "train.Seq2SeqModelCaffe2.save": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "os.path.dirname", "<builtin>.open", "os.path.join"], "train.gen_batches": ["caffe2.python.models.seq2seq.seq2seq_util.get_numberized_sentence", "<builtin>.open", "<builtin>.zip", "random.shuffle", "<builtin>.len"], "caffe2.python.models.seq2seq.seq2seq_util.get_numberized_sentence": [], "train.gen_batches.<lambda1>": ["<builtin>.len"], "train.run_seq2seq_model": ["train.Seq2SeqModelCaffe2.__init__", "caffe2.python.models.seq2seq.seq2seq_util.gen_vocab", "<builtin>.range", "<builtin>.len", "train.gen_batches"], "caffe2.python.models.seq2seq.seq2seq_util.gen_vocab": [], "train.main": ["train.run_seq2seq_model", "<builtin>.dict", "random.seed", "argparse.ArgumentParser"], "translate._weighted_sum": ["<builtin>.zip", "<builtin>.len"], "translate.Seq2SeqModelCaffe2EnsembleDecoderBase": ["abc.abstractmethod"], "translate.Seq2SeqModelCaffe2EnsembleDecoderBase.get_model_file": [], "translate.Seq2SeqModelCaffe2EnsembleDecoderBase.get_db_type": [], "translate.Seq2SeqModelCaffe2EnsembleDecoderBase.build_word_rewards": ["numpy.full"], "translate.Seq2SeqModelCaffe2EnsembleDecoderBase.load_models": ["<builtin>.zip", "translate.Seq2SeqModelCaffe2EnsembleDecoderBase.get_db_type", "translate.Seq2SeqModelCaffe2EnsembleDecoderBase.get_model_file", "caffe2.python.core.CreateOperator", "translate.Seq2SeqModelCaffe2EnsembleDecoder.get_db_type", "<builtin>.str", "caffe2.python.workspace.RunOperatorOnce", "translate.Seq2SeqModelCaffe2EnsembleDecoder.get_model_file"], "translate.Seq2SeqModelCaffe2EnsembleDecoder.get_model_file": [], "translate.Seq2SeqModelCaffe2EnsembleDecoder.get_db_type": [], "translate.Seq2SeqModelCaffe2EnsembleDecoder.scope": [], "translate.Seq2SeqModelCaffe2EnsembleDecoder._build_decoder": ["caffe2.python.models.seq2seq.seq2seq_util.build_embeddings", "<builtin>.range", "<builtin>.zip", "caffe2.python.models.seq2seq.seq2seq_util.build_embedding_encoder", "<builtin>.len", "caffe2.python.rnn_cell.LSTMCell", "caffe2.python.models.seq2seq.seq2seq_util.LSTMWithAttentionDecoder", "caffe2.python.models.seq2seq.beam_search.BeamSearchForwardOnly.LinkConfig", "caffe2.python.models.seq2seq.seq2seq_util.output_projection", "caffe2.python.models.seq2seq.beam_search.BeamSearchForwardOnly.StateConfig", "caffe2.python.models.seq2seq.seq2seq_util.build_initial_rnn_decoder_states", "<builtin>.enumerate", "caffe2.python.core.NameScope"], "caffe2.python.models.seq2seq.seq2seq_util.build_embeddings": [], "caffe2.python.models.seq2seq.seq2seq_util.build_initial_rnn_decoder_states": [], "caffe2.python.models.seq2seq.seq2seq_util.LSTMWithAttentionDecoder": [], "caffe2.python.models.seq2seq.beam_search.BeamSearchForwardOnly.LinkConfig": [], "caffe2.python.models.seq2seq.beam_search.BeamSearchForwardOnly.StateConfig": [], "translate.Seq2SeqModelCaffe2EnsembleDecoder.__init__": ["caffe2.python.models.seq2seq.seq2seq_model_helper.Seq2SeqModelHelper", "<builtin>.zip", "<builtin>.range", "translate._weighted_sum", "caffe2.python.models.seq2seq.beam_search.BeamSearchForwardOnly", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "<builtin>.float", "translate.Seq2SeqModelCaffe2EnsembleDecoder._build_decoder", "caffe2.python.workspace.CreateNet", "translate.Seq2SeqModelCaffe2EnsembleDecoderBase.build_word_rewards", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.models.seq2seq.beam_search.BeamSearchForwardOnly": [], "translate.Seq2SeqModelCaffe2EnsembleDecoder.decode": ["numpy.array", "<builtin>.range", "caffe2.python.workspace.FetchBlob", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNet", "<builtin>.reversed", "<builtin>.list"], "translate.run_seq2seq_beam_decoder": ["future.utils.viewitems", "<builtin>.print", "translate.Seq2SeqModelCaffe2EnsembleDecoderBase.load_models", "<builtin>.len", "translate.Seq2SeqModelCaffe2EnsembleDecoder.__init__", "translate.Seq2SeqModelCaffe2EnsembleDecoder.decode", "caffe2.python.models.seq2seq.seq2seq_util.get_numberized_sentence", "<builtin>.dict", "caffe2.python.models.seq2seq.seq2seq_util.gen_vocab"], "translate.main": ["argparse.ArgumentParser", "<builtin>.dict", "translate.run_seq2seq_beam_decoder"], "upsample_nearest_op_test": ["unittest.main", "caffe2.python.dyndep.InitOpsLibrary"], "upsample_nearest_op_test.TestUpsampleNearestOp": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers"], "upsample_nearest_op_test.TestUpsampleNearestOp.test_upsample_nearest_op": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.randn", "caffe2.python.core.CreateOperator"], "upsample_nearest_op_test.TestUpsampleNearestOp.test_upsample_nearest_op.ref": ["numpy.meshgrid", "numpy.arange"], "numpy.meshgrid": [], "error_handler": ["logging.getLogger"], "error_handler._write_error": ["json.dumps", "<builtin>.open", "traceback.format_exc", "json.dump", "<builtin>.type", "<builtin>.str", "time.time", "<builtin>.int"], "error_handler.ErrorHandler._get_error_file_path": ["os.environ.get"], "error_handler.ErrorHandler.initialize": ["warnings.warn", "faulthandler.enable", "<builtin>.type"], "faulthandler.enable": [], "error_handler.ErrorHandler._write_error_file": ["warnings.warn", "<builtin>.type", "<builtin>.open"], "error_handler.ErrorHandler.record_exception": ["error_handler.ErrorHandler._get_error_file_path", "error_handler._write_error"], "error_handler.ErrorHandler.dump_error_file": ["json.dumps", "error_handler.ErrorHandler._get_error_file_path", "<builtin>.open", "<builtin>.isinstance", "json.load", "error_handler.ErrorHandler._write_error_file", "error_handler.ErrorHandler._rm"], "error_handler.ErrorHandler._rm": ["os.remove", "json.dumps", "<builtin>.open", "json.load", "os.path.isfile"], "handlers.get_error_handler": ["torch.distributed.elastic.multiprocessing.errors.error_handler.ErrorHandler"], "torch.distributed.elastic.multiprocessing.errors.error_handler.ErrorHandler": [], "remote_module": ["collections.namedtuple", "typing.TypeVar", "torch.distributed.nn.jit.instantiator.instantiate_non_scriptable_remote_module_template", "torch.distributed.rpc.internal._internal_rpc_pickler._register_reducer"], "torch.distributed.nn.jit.instantiator.instantiate_non_scriptable_remote_module_template": [], "remote_module._instantiate_template": ["torch.distributed.nn.jit.instantiator.instantiate_scriptable_remote_module_template"], "torch.distributed.nn.jit.instantiator.instantiate_scriptable_remote_module_template": [], "remote_module._create_module": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "remote_module._create_module_with_interface": ["torch.distributed.rpc.RRef", "remote_module._create_module", "torch.jit.script"], "remote_module._param_rrefs": ["torch.distributed.rpc.RRef"], "remote_module._raise_not_supported": ["<builtin>.ValueError"], "remote_module._RemoteModule.__init__": ["remote_module._RemoteModule._check_attribute_picklability", "remote_module._RemoteModule._init_template", "torch.distributed.rpc.rpc_sync", "<builtin>.super", "torch.distributed.rpc.rpc_async", "torch.distributed.rpc.remote", "remote_module._RemoteModule._install_generated_methods", "remote_module._RemoteModule._prepare_init"], "remote_module._RemoteModule._prepare_init": ["torch.distributed.utils._parse_remote_device", "torch.distributed.rpc._get_current_rpc_agent", "torch.device", "torch.distributed.rpc._is_current_rpc_agent_set", "<builtin>.bool"], "remote_module._RemoteModule._init_template": ["torch.distributed.nn.jit.instantiator.instantiate_scriptable_remote_module_template"], "remote_module._RemoteModule._install_generated_methods": ["<builtin>.setattr", "types.MethodType", "torch.jit.export"], "remote_module._RemoteModule._check_attribute_picklability": ["torch.nn.Module.__dict__.keys", "<builtin>.AttributeError"], "remote_module._RemoteModule.remote_parameters": ["torch.distributed.rpc.rpc_sync"], "remote_module._RemoteModule.get_module_rref": [], "remote_module._RemoteModule.__getstate__": ["<builtin>.RuntimeError"], "remote_module._RemoteModule.__setstate__": ["<builtin>.RuntimeError"], "remote_module._RemoteModule.register_buffer": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.register_parameter": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.add_module": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.apply": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.cuda": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.xpu": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.cpu": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.type": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.float": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.double": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.half": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.bfloat16": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.to": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.register_backward_hook": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.register_forward_pre_hook": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.register_forward_hook": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.state_dict": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.load_state_dict": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.parameters": ["<builtin>.ValueError"], "remote_module._RemoteModule.named_parameters": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.buffers": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.named_buffers": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.children": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.named_children": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.modules": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.named_modules": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.train": [], "remote_module._RemoteModule.eval": [], "remote_module._RemoteModule.requires_grad_": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.zero_grad": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.share_memory": ["remote_module._raise_not_supported"], "remote_module._RemoteModule.extra_repr": ["remote_module._raise_not_supported"], "torch.nn.Module.__dict__.keys": [], "types.MethodType": [], "remote_module._RemoteModule.init_from_module_rref": [], "remote_module.RemoteModule.__init__": ["<builtin>.super"], "remote_module._remote_module_receiver": ["torch.distributed.rpc.PyRRef._deserialize", "<builtin>.setattr", "types.MethodType", "torch.jit.export"], "remote_module._remote_module_reducer": ["<builtin>.print", "<builtin>.tuple"], "remote_module._recursive_script_module_receiver": ["torch.jit.load", "io.BytesIO"], "remote_module._recursive_script_module_reducer": ["torch.jit.save", "<builtin>.RuntimeError", "<builtin>.hasattr", "io.BytesIO"], "torch.distributed.rpc.internal._internal_rpc_pickler._register_reducer": [], "remote_module_test": ["torch.ones", "torch.nn.Parameter"], "remote_module_test.remote_device": [], "remote_module_test.remote_module_attributes": [], "remote_module_test.remote_forward": [], "remote_module_test.remote_forward_async": [], "remote_module_test.get_remote_training_arg": [], "remote_module_test.MyModuleInterface.forward": [], "remote_module_test.RemoteMyModuleInterface.forward": [], "remote_module_test.RemoteMyModuleInterface.forward_async": [], "remote_module_test.MyModule.__init__": ["<builtin>.super"], "remote_module_test.MyModule.forward": [], "remote_module_test.BadModule.__init__": [], "remote_module_test.create_scripted_module": ["torch.jit.script", "remote_module_test.MyModule.__init__"], "remote_module_test.CommonRemoteModuleTest.world_size": [], "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter": ["<builtin>.dict", "torch.jit.script", "torch.distributed.nn.api.remote_module._RemoteModule", "torch.distributed.nn.RemoteModule", "enum.Enum.__members__.values"], "enum.Enum.__members__.values": [], "torch.distributed.nn.RemoteModule": [], "torch.distributed.nn.api.remote_module._RemoteModule": [], "remote_module_test.RemoteModuleTest": ["torch.testing._internal.dist_utils.dist_init"], "remote_module_test.RemoteModuleTest.test_bad_module": ["<builtin>.dict", "torch.distributed.nn.RemoteModule", "torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "remote_module_test.RemoteModuleTest.test_forward_async": ["torch.ones", "torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "<builtin>.tuple", "<builtin>.reversed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "remote_module_test.RemoteModuleTest.test_forward_async_script": ["torch.ones", "torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.jit.script", "<builtin>.next", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "remote_module_test.RemoteModuleTest.test_forward_async_script.run_forward_async"], "remote_module_test.RemoteModuleTest.test_forward_async_script.run_forward_async": ["torch.ones"], "remote_module_test.RemoteModuleTest.test_forward_sync": ["torch.ones", "torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "<builtin>.tuple", "<builtin>.reversed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "remote_module_test.RemoteModuleTest.test_forward_sync_script": ["torch.ones", "torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.jit.script", "<builtin>.next", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "remote_module_test.RemoteModuleTest.test_forward_sync_script.run_forward"], "remote_module_test.RemoteModuleTest.test_forward_sync_script.run_forward": ["torch.ones"], "remote_module_test.RemoteModuleTest.test_forward_with_kwargs": ["torch.ones", "<builtin>.dict", "torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "<builtin>.tuple", "<builtin>.reversed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "remote_module_test.RemoteModuleTest.test_remote_parameters": ["torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.len", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.equal"], "remote_module_test.RemoteModuleTest.test_get_module_rref": ["torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.equal"], "remote_module_test.RemoteModuleTest.test_train_eval": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "remote_module_test.RemoteModuleTest.test_unsupported_methods": ["torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.nn.Parameter", "torch.rand"], "remote_module_test.RemoteModuleTest.test_unsupported_methods.hook": [], "remote_module_test.RemoteModuleTest.test_send_remote_module_with_a_new_attribute_not_pickled_over_the_wire": ["torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "<builtin>.setattr", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotIn"], "remote_module_test.RemoteModuleTest.test_remote_module_py_pickle_not_supported": ["torch.testing._internal.common_utils.TemporaryFileName", "torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.save"], "remote_module_test.RemoteModuleTest.test_remote_module_py_pickle_not_supported_script": ["torch.testing._internal.common_utils.TemporaryFileName", "torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.save", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises"], "remote_module_test.ThreeWorkersRemoteModuleTest.world_size": [], "remote_module_test.ThreeWorkersRemoteModuleTest": ["torch.testing._internal.dist_utils.dist_init"], "remote_module_test.ThreeWorkersRemoteModuleTest.test_send_remote_module_over_the_wire": ["torch.ones", "<builtin>.list", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertFalse", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertListEqual", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "<builtin>.tuple", "<builtin>.reversed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertListEqual": [], "remote_module_test.ThreeWorkersRemoteModuleTest.test_send_remote_module_over_the_wire_script_not_supported": ["<builtin>.list", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter"], "remote_module_test.ThreeWorkersRemoteModuleTest.test_create_remote_module_from_module_rref": ["torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "remote_module_test.CudaRemoteModuleTest": ["torch.testing._internal.common_distributed.skip_if_lt_x_gpu", "torch.testing._internal.dist_utils.dist_init"], "remote_module_test.CudaRemoteModuleTest.test_valid_device": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "remote_module_test.CudaRemoteModuleTest.test_invalid_devices": ["<builtin>.list", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "torch.testing._internal.dist_utils.worker_name"], "remote_module_test.CudaRemoteModuleTest.test_input_moved_to_cuda_device": ["torch.ones", "<builtin>.dict", "torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "<builtin>.tuple", "<builtin>.reversed", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "remote_module_test.CudaRemoteModuleTest.test_input_moved_to_cuda_device_script": ["torch.ones", "torch.testing._internal.dist_utils.worker_name", "remote_module_test.CommonRemoteModuleTest._create_remote_module_iter", "remote_module_test.CudaRemoteModuleTest.test_input_moved_to_cuda_device_script.run_forward", "torch.jit.script", "<builtin>.next", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual"], "remote_module_test.CudaRemoteModuleTest.test_input_moved_to_cuda_device_script.run_forward": ["torch.ones"], "thnn": [], "thnn._get_thnn_function_backend": [], "instantiator": ["sys.path.append", "logging.getLogger", "tempfile.TemporaryDirectory"], "instantiator.get_arg_return_types_from_interface": ["<builtin>.len", "<builtin>.str", "torch._jit_internal._qualified_name", "<builtin>.getattr", "torch.jit._state._python_cu.get_interface"], "torch.jit._state._python_cu.get_interface": [], "instantiator._write": ["<builtin>.open"], "instantiator._do_instantiate_remote_module_template": ["os.path.join", "instantiator._write", "importlib.invalidate_caches", "torch.distributed.nn.jit.templates.remote_module_template.get_remote_module_template", "importlib.import_module"], "torch.distributed.nn.jit.templates.remote_module_template.get_remote_module_template": [], "importlib.invalidate_caches": [], "importlib.import_module": [], "instantiator.instantiate_scriptable_remote_module_template": ["<builtin>.ValueError", "<builtin>.dict", "torch._jit_internal._qualified_name", "instantiator._do_instantiate_remote_module_template", "<builtin>.getattr", "instantiator.get_arg_return_types_from_interface"], "instantiator.instantiate_non_scriptable_remote_module_template": ["instantiator._do_instantiate_remote_module_template", "<builtin>.dict"], "activation.Threshold.__init__": ["<builtin>.super"], "activation.Threshold.forward": ["functional.threshold"], "functional.threshold": ["torch._ops.ops.quantized.threshold", "<builtin>.ValueError"], "activation.Threshold.extra_repr": [], "activation.ReLU.__init__": ["<builtin>.super"], "activation.ReLU.forward": ["functional.relu"], "functional.relu": ["torch.relu", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.relu_"], "activation.ReLU.extra_repr": [], "activation.RReLU.__init__": ["<builtin>.super"], "activation.RReLU.forward": ["functional.rrelu"], "functional.rrelu": ["torch.rrelu_", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.rrelu"], "activation.RReLU.extra_repr": [], "activation.Hardtanh.__init__": ["<builtin>.super", "warnings.warn"], "activation.Hardtanh.forward": ["functional.hardtanh"], "functional.hardtanh": ["torch._C._nn.hardtanh_", "torch._C._nn.hardtanh", "<builtin>.ValueError", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "activation.Hardtanh.extra_repr": [], "activation.ReLU6.__init__": ["<builtin>.super"], "activation.ReLU6.extra_repr": [], "activation.Sigmoid.forward": ["torch.sigmoid", "torch.ops.quantized.sigmoid"], "activation.Hardsigmoid.__init__": ["<builtin>.super"], "activation.Hardsigmoid.forward": ["functional.hardsigmoid"], "functional.hardsigmoid": ["torch._C._nn.hardsigmoid", "<builtin>.ValueError", "torch._C._nn.hardsigmoid_", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "activation.Tanh.forward": ["torch.tanh"], "activation.SiLU.__init__": ["<builtin>.super"], "activation.SiLU.forward": ["functional.silu"], "functional.silu": ["torch._C._nn.silu_", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._C._nn.silu"], "activation.SiLU.extra_repr": [], "activation.Mish.__init__": ["<builtin>.super"], "activation.Mish.forward": ["functional.mish"], "functional.mish": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._C._nn.mish", "torch._C._nn.mish_"], "activation.Mish.extra_repr": [], "activation.Hardswish.__init__": ["<builtin>.super"], "activation.Hardswish.forward": ["functional.hardswish", "torch.nn.quantized.functional.hardswish"], "functional.hardswish": ["torch._ops.ops.quantized.hardswish", "<builtin>.ValueError", "torch._C._nn.hardswish_", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._C._nn.hardswish"], "activation.ELU.__init__": ["<builtin>.super"], "activation.ELU.forward": ["functional.elu", "torch.nn.quantized.functional.elu"], "functional.elu": ["<builtin>.ValueError", "torch.ops.quantized.elu", "torch._C._nn.elu_", "torch._C._nn.elu", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "activation.ELU.extra_repr": [], "activation.CELU.__init__": ["<builtin>.super"], "activation.CELU.forward": ["functional.celu"], "functional.celu": ["torch.ops.quantized.celu", "<builtin>.ValueError", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.celu", "torch.celu_"], "activation.CELU.extra_repr": [], "activation.SELU.__init__": ["<builtin>.super"], "activation.SELU.forward": ["functional.selu"], "functional.selu": ["torch.selu_", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.selu"], "activation.SELU.extra_repr": [], "activation.GLU.__init__": ["<builtin>.super"], "activation.GLU.forward": ["functional.glu"], "functional.glu": ["<builtin>.RuntimeError", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._C._nn.glu"], "activation.GLU.extra_repr": [], "activation.GELU.forward": ["functional.gelu"], "functional.gelu": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._C._nn.gelu"], "activation.Hardshrink.__init__": ["<builtin>.super"], "activation.Hardshrink.forward": ["functional.hardshrink"], "functional.hardshrink": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.hardshrink"], "activation.Hardshrink.extra_repr": [], "activation.LeakyReLU.__init__": ["<builtin>.super", "torch.nn.LeakyReLU.register_buffer", "torch.tensor"], "activation.LeakyReLU.forward": ["functional.leaky_relu", "torch.ops.quantized.leaky_relu"], "functional.leaky_relu": ["torch._C._nn.leaky_relu", "<builtin>.int", "torch._C._nn.leaky_relu_", "torch._empty_affine_quantized", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "activation.LeakyReLU.extra_repr": [], "activation.LogSigmoid.forward": ["functional.logsigmoid"], "functional.logsigmoid": [], "activation.Softplus.__init__": ["<builtin>.super"], "activation.Softplus.forward": ["functional.softplus"], "functional.softplus": [], "activation.Softplus.extra_repr": [], "activation.Softshrink.__init__": ["<builtin>.super"], "activation.Softshrink.forward": ["functional.softshrink"], "functional.softshrink": [], "activation.Softshrink.extra_repr": ["<builtin>.str"], "activation.MultiheadAttention.__init__": ["torch.empty", "activation.MultiheadAttention._reset_parameters", "module.Module.register_parameter", "linear.NonDynamicallyQuantizableLinear", "<builtin>.super", "torch.nn.parameter.Parameter", "torch.quantization.DeQuantStub", "torch.nn.quantized.FloatFunctional", "torch.quantization.QuantStub", "torch.nn.Linear"], "torch.nn.parameter.Parameter": [], "module.Module.register_parameter": ["<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.AttributeError", "<builtin>.KeyError", "<builtin>.TypeError", "torch.typename", "<builtin>.isinstance"], "linear.NonDynamicallyQuantizableLinear": [], "activation.MultiheadAttention._reset_parameters": ["torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_"], "torch.nn.init.xavier_uniform_": [], "torch.nn.init.xavier_normal_": [], "activation.MultiheadAttention.__setstate__": ["<builtin>.super"], "activation.MultiheadAttention.forward": ["functional.multi_head_attention_forward", "activation.MultiheadAttention._forward_impl"], "functional.multi_head_attention_forward": ["functional._in_projection_packed", "<builtin>.RuntimeError", "functional._scaled_dot_product_attention", "warnings.warn", "<builtin>.isinstance", "torch.cat", "overrides.has_torch_function", "overrides.handle_torch_function", "<builtin>.float", "functional._in_projection", "torch.zeros_like", "torch.zeros", "functional.hardsigmoid"], "activation.PReLU.__init__": ["<builtin>.super", "torch.empty", "torch.nn.parameter.Parameter"], "activation.PReLU.forward": ["functional.prelu"], "functional.prelu": ["torch.prelu", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "activation.PReLU.extra_repr": [], "activation.Softsign.forward": ["functional.softsign"], "functional.softsign": ["overrides.has_torch_function_unary", "overrides.handle_torch_function"], "activation.Tanhshrink.forward": ["functional.tanhshrink"], "functional.tanhshrink": ["overrides.has_torch_function_unary", "overrides.handle_torch_function"], "activation.Softmin.__init__": ["<builtin>.super"], "activation.Softmin.__setstate__": ["<builtin>.hasattr", "module.Module.__dict__.update"], "module.Module.__dict__.update": [], "activation.Softmin.forward": ["functional.softmin"], "functional.softmin": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional._get_softmax_dim"], "activation.Softmin.extra_repr": [], "activation.Softmax.__init__": ["<builtin>.super"], "activation.Softmax.__setstate__": ["<builtin>.hasattr", "module.Module.__dict__.update"], "activation.Softmax.forward": ["functional.softmax"], "functional.softmax": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional._get_softmax_dim"], "activation.Softmax.extra_repr": [], "activation.Softmax2d.forward": ["functional.softmax"], "activation.LogSoftmax.__init__": ["<builtin>.super"], "activation.LogSoftmax.__setstate__": ["<builtin>.hasattr", "module.Module.__dict__.update"], "activation.LogSoftmax.forward": ["functional.log_softmax"], "functional.log_softmax": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional._get_softmax_dim"], "activation.LogSoftmax.extra_repr": [], "adaptive": ["collections.namedtuple"], "adaptive.AdaptiveLogSoftmaxWithLoss.__init__": ["<builtin>.ValueError", "<builtin>.len", "Linear", "<builtin>.super", "<builtin>.int", "<builtin>.list", "<builtin>.max", "<builtin>.min", "<builtin>.range", "<builtin>.set", "<builtin>.sorted", "ModuleList", "<builtin>.any", "Sequential"], "Linear": [], "ModuleList": [], "Sequential": [], "adaptive.AdaptiveLogSoftmaxWithLoss.reset_parameters": [], "adaptive.AdaptiveLogSoftmaxWithLoss.forward": ["<builtin>.RuntimeError", "<builtin>.len", "<builtin>.range", "functional.log_softmax"], "adaptive.AdaptiveLogSoftmaxWithLoss._get_full_log_prob": ["<builtin>.enumerate", "functional.log_softmax", "<builtin>.zip"], "adaptive.AdaptiveLogSoftmaxWithLoss.log_prob": ["adaptive.AdaptiveLogSoftmaxWithLoss._get_full_log_prob"], "adaptive.AdaptiveLogSoftmaxWithLoss.predict": ["torch.argmax", "adaptive.AdaptiveLogSoftmaxWithLoss._get_full_log_prob"], "torch.argmax": [], "batchnorm._NormBase.__init__": ["torch.tensor", "torch.empty", "<builtin>.super", "batchnorm._NormBase.reset_parameters", "module.Module.register_parameter", "torch.zeros", "torch.ones", "module.Module.register_buffer", "torch.nn.parameter.Parameter"], "module.Module.register_buffer": ["<builtin>.hasattr", "<builtin>.AttributeError", "<builtin>.KeyError", "torch.typename", "<builtin>.TypeError", "<builtin>.RuntimeError", "<builtin>.isinstance"], "batchnorm._NormBase.reset_parameters": ["init.ones_", "init.zeros_", "batchnorm._NormBase.reset_running_stats"], "batchnorm._NormBase.reset_running_stats": ["module.Module.num_batches_tracked.zero_"], "module.Module.num_batches_tracked.zero_": [], "init.ones_": ["init._no_grad_fill_"], "init.zeros_": ["init._no_grad_zero_"], "batchnorm._NormBase._check_input_dim": [], "batchnorm._NormBase.extra_repr": [], "batchnorm._NormBase._load_from_state_dict": ["<builtin>.super", "torch.tensor"], "batchnorm._BatchNorm.__init__": ["<builtin>.super"], "batchnorm._BatchNorm.forward": ["functional.batch_norm", "batchnorm._NormBase._check_input_dim", "<builtin>.float"], "functional.batch_norm": ["functional._verify_batch_size", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.batch_norm"], "batchnorm._LazyNormBase.__init__": ["<builtin>.super", "torch.nn.parameter.UninitializedBuffer", "torch.nn.parameter.UninitializedParameter", "torch.tensor"], "torch.nn.parameter.UninitializedParameter": [], "torch.nn.parameter.UninitializedBuffer": [], "batchnorm._LazyNormBase.reset_parameters": ["<builtin>.super", "lazy.LazyModuleMixin.has_uninitialized_params"], "lazy.LazyModuleMixin.has_uninitialized_params": ["parameter.is_lazy", "itertools.chain"], "batchnorm._LazyNormBase.initialize_parameters": ["batchnorm._LazyNormBase.reset_parameters", "<builtin>.isinstance", "lazy.LazyModuleMixin.has_uninitialized_params"], "batchnorm.BatchNorm1d._check_input_dim": ["<builtin>.ValueError"], "batchnorm.LazyBatchNorm1d._check_input_dim": ["<builtin>.ValueError"], "batchnorm.BatchNorm2d._check_input_dim": ["<builtin>.ValueError"], "batchnorm.LazyBatchNorm2d._check_input_dim": ["<builtin>.ValueError"], "batchnorm.BatchNorm3d._check_input_dim": ["<builtin>.ValueError"], "batchnorm.LazyBatchNorm3d._check_input_dim": ["<builtin>.ValueError"], "batchnorm.SyncBatchNorm.__init__": ["<builtin>.super"], "batchnorm.SyncBatchNorm._check_input_dim": ["<builtin>.ValueError"], "batchnorm.SyncBatchNorm._check_non_zero_input_channels": ["<builtin>.ValueError"], "batchnorm.SyncBatchNorm.forward": ["batchnorm.SyncBatchNorm._check_input_dim", "functional.batch_norm", "<builtin>.ValueError", "batchnorm.SyncBatchNorm._check_non_zero_input_channels", "torch.distributed.get_world_size", "module.Module.num_batches_tracked.item", "_functions.SyncBatchNorm.apply"], "module.Module.num_batches_tracked.item": [], "_functions.SyncBatchNorm.apply": [], "batchnorm.SyncBatchNorm.convert_sync_batchnorm": ["batchnorm.SyncBatchNorm.convert_sync_batchnorm", "<builtin>.hasattr", "torch.no_grad", "torch.nn.SyncBatchNorm", "<builtin>.isinstance"], "torch.nn.SyncBatchNorm": [], "channelshuffle": [], "channelshuffle.ChannelShuffle.__init__": ["<builtin>.super"], "channelshuffle.ChannelShuffle.forward": ["functional.channel_shuffle"], "functional.channel_shuffle": [], "channelshuffle.ChannelShuffle.extra_repr": [], "container": ["typing.TypeVar"], "container.Container.__init__": ["<builtin>.super", "module.Module.add_module", "warnings.warn"], "module.Module.add_module": ["<builtin>.hasattr", "<builtin>.KeyError", "<builtin>.TypeError", "torch.typename", "<builtin>.isinstance"], "container.Sequential": ["torch._jit_internal._copy_to_script_wrapper", "typing.overload"], "container.Sequential.__init__": ["module.Module.add_module", "<builtin>.isinstance", "<builtin>.super", "<builtin>.str", "<builtin>.len", "<builtin>.enumerate"], "container.Sequential._get_item_by_idx": ["<builtin>.next", "<builtin>.IndexError", "operator.index", "<builtin>.len", "itertools.islice"], "operator.index": [], "torch._jit_internal._copy_to_script_wrapper": [], "container.Sequential.__getitem__": ["<builtin>.isinstance", "<builtin>.list", "module.Module._modules.values", "container.Sequential._get_item_by_idx", "module.Module.__class__", "collections.OrderedDict", "module.Module._modules.items"], "module.Module._modules.items": [], "module.Module.__class__": [], "module.Module._modules.values": [], "container.Sequential.__setitem__": ["<builtin>.setattr", "module.Module._modules.keys", "container.Sequential._get_item_by_idx"], "module.Module._modules.keys": [], "container.Sequential.__delitem__": ["<builtin>.isinstance", "<builtin>.list", "container.Sequential._get_item_by_idx", "module.Module._modules.keys", "<builtin>.delattr"], "container.Sequential.__len__": ["<builtin>.len"], "container.Sequential.__dir__": ["<builtin>.super"], "container.Sequential.__iter__": ["<builtin>.iter", "module.Module._modules.values"], "container.Sequential.forward": ["container.Sequential.__iter__", "container.Sequential.__init__"], "container.ModuleList.__init__": ["<builtin>.super"], "container.ModuleList._get_abs_string_index": ["<builtin>.IndexError", "operator.index", "<builtin>.len", "<builtin>.str"], "container.ModuleList": ["torch._jit_internal._copy_to_script_wrapper"], "container.ModuleList.__getitem__": ["<builtin>.list", "module.Module.__class__", "<builtin>.isinstance", "container.ModuleList._get_abs_string_index"], "container.ModuleList.__setitem__": ["<builtin>.str", "<builtin>.setattr", "container.ModuleList._get_abs_string_index"], "container.ModuleList.__delitem__": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.str", "<builtin>.range", "<builtin>.len", "container.ModuleList._get_abs_string_index", "collections.OrderedDict", "<builtin>.zip", "<builtin>.delattr"], "container.ModuleList.__len__": ["<builtin>.len"], "container.ModuleList.__iter__": ["<builtin>.iter"], "container.ModuleList.__iadd__": ["container.ModuleList.extend"], "container.ModuleList.extend": ["<builtin>.type", "module.Module.add_module", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.str", "<builtin>.len", "<builtin>.enumerate"], "container.ModuleList.__dir__": ["<builtin>.super"], "container.ModuleList.insert": ["<builtin>.str", "<builtin>.range", "<builtin>.len"], "container.ModuleList.append": ["<builtin>.str", "<builtin>.len", "module.Module.add_module"], "container.ModuleDict.__init__": ["<builtin>.super", "container.ModuleDict.update"], "container.ModuleDict.update": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.str", "<builtin>.len", "<builtin>.ValueError", "<builtin>.enumerate"], "container.ModuleDict": ["torch._jit_internal._copy_to_script_wrapper"], "container.ModuleDict.__getitem__": [], "container.ModuleDict.__setitem__": ["module.Module.add_module"], "container.ModuleDict.__delitem__": [], "container.ModuleDict.__len__": ["<builtin>.len"], "container.ModuleDict.__iter__": ["<builtin>.iter"], "container.ModuleDict.__contains__": [], "container.ModuleDict.clear": ["module.Module._modules.clear"], "module.Module._modules.clear": [], "container.ModuleDict.pop": [], "container.ModuleDict.keys": ["module.Module._modules.keys"], "container.ModuleDict.items": ["module.Module._modules.items"], "container.ModuleDict.values": ["module.Module._modules.values"], "container.ParameterList.__init__": ["<builtin>.super"], "container.ParameterList.__setstate__": ["<builtin>.super"], "container.ParameterList._get_abs_string_index": ["<builtin>.IndexError", "operator.index", "<builtin>.len", "<builtin>.str"], "container.ParameterList": ["typing.overload"], "container.ParameterList.__getitem__": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.str", "module.Module._parameters.values", "module.Module.__class__", "container.ParameterList._get_abs_string_index"], "module.Module._parameters.values": [], "container.ParameterList.__setitem__": ["<builtin>.str", "module.Module.register_parameter", "container.ParameterList._get_abs_string_index"], "container.ParameterList.__setattr__": ["warnings.warn", "<builtin>.isinstance", "<builtin>.super", "<builtin>.getattr", "<builtin>.hasattr"], "container.ParameterList.__len__": ["<builtin>.len"], "container.ParameterList.__iter__": ["module.Module._parameters.values", "<builtin>.iter"], "container.ParameterList.__iadd__": ["container.ParameterList.extend"], "container.ParameterList.extend": ["<builtin>.type", "module.Module.register_parameter", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.str", "<builtin>.len", "<builtin>.enumerate"], "container.ParameterList.__dir__": ["<builtin>.super"], "container.ParameterList.append": ["<builtin>.str", "<builtin>.len", "module.Module.register_parameter"], "container.ParameterList.extra_repr": ["<builtin>.str", "module.Module._parameters.items", "torch.typename"], "module.Module._parameters.items": [], "container.ParameterList.__call__": ["<builtin>.RuntimeError"], "container.ParameterList._replicate_for_data_parallel": ["warnings.warn", "<builtin>.super"], "container.ParameterDict.__init__": ["<builtin>.super", "container.ParameterDict.update"], "container.ParameterDict.update": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.str", "<builtin>.len", "<builtin>.ValueError", "<builtin>.sorted", "<builtin>.enumerate"], "container.ParameterDict.__setstate__": ["<builtin>.super"], "container.ParameterDict.__getitem__": [], "container.ParameterDict.__setitem__": ["module.Module.register_parameter"], "container.ParameterDict.__delitem__": [], "container.ParameterDict.__setattr__": ["warnings.warn", "<builtin>.isinstance", "<builtin>.super", "<builtin>.getattr", "<builtin>.hasattr"], "container.ParameterDict.__len__": ["<builtin>.len"], "container.ParameterDict.__iter__": ["<builtin>.iter", "module.Module._parameters.keys"], "module.Module._parameters.keys": [], "container.ParameterDict.__contains__": [], "container.ParameterDict.clear": ["module.Module._parameters.clear"], "module.Module._parameters.clear": [], "container.ParameterDict.pop": [], "container.ParameterDict.keys": ["module.Module._parameters.keys"], "container.ParameterDict.items": ["module.Module._parameters.items"], "container.ParameterDict.values": ["module.Module._parameters.values"], "container.ParameterDict.extra_repr": ["<builtin>.str", "module.Module._parameters.items", "torch.typename"], "container.ParameterDict.__call__": ["<builtin>.RuntimeError"], "container.ParameterDict._replicate_for_data_parallel": ["warnings.warn", "<builtin>.super"], "conv._ConvNd._conv_forward": [], "conv._ConvNd.__init__": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.len", "<builtin>.zip", "<builtin>.any", "<builtin>.range", "torch.nn.parameter.Parameter", "<builtin>.ValueError", "module.Module.register_parameter", "conv._ConvNd.reset_parameters", "torch.empty", "utils._reverse_repeat_tuple"], "utils._reverse_repeat_tuple": ["<builtin>.range", "<builtin>.tuple", "<builtin>.reversed"], "conv._ConvNd.reset_parameters": ["init.uniform_", "math.sqrt", "init._calculate_fan_in_and_fan_out", "init.kaiming_uniform_"], "init.kaiming_uniform_": ["init._calculate_correct_fan", "torch.no_grad", "math.sqrt", "warnings.warn", "init.calculate_gain"], "init._calculate_fan_in_and_fan_out": ["<builtin>.ValueError"], "init.uniform_": ["init._no_grad_uniform_"], "conv._ConvNd.extra_repr": ["<builtin>.len", "conv._ConvNd.bias"], "conv._ConvNd.__setstate__": ["<builtin>.super", "<builtin>.hasattr", "conv._ConvNd.set_weight_bias"], "conv.Conv1d.__init__": ["<builtin>.super", "utils._single", "<builtin>.isinstance", "torch.nn.modules.utils._single", "torch.nn.quantized.Conv1d.__init__"], "utils._single": [], "conv.Conv1d._conv_forward": ["functional.pad", "functional.conv1d", "utils._single"], "functional.pad": [], "functional.conv1d": ["torch.nn.quantized.modules.utils._pair_from_first", "torch.ops.quantized.conv1d", "torch.ops.quantized.conv1d_prepack", "<builtin>.NotImplementedError", "<builtin>.ValueError"], "conv.Conv1d.forward": ["conv.Conv1d._conv_forward", "conv._reverse_repeat_padding", "torch.nn.functional.pad", "<builtin>.len", "<builtin>.ValueError", "torch._ops.ops.quantized.conv1d", "torch.nn.functional.conv1d", "torch.quantize_per_tensor"], "conv.Conv2d.__init__": ["<builtin>.super", "<builtin>.isinstance", "utils._pair", "torch.nn.modules.utils._pair", "torch.nn.quantized.Conv2d.__init__"], "utils._pair": [], "conv.Conv2d._conv_forward": ["functional.pad", "utils._pair", "functional.conv2d"], "functional.conv2d": ["torch.ops.quantized.conv2d_prepack", "torch.ops.quantized.conv2d", "torch.nn.modules.utils._pair", "<builtin>.NotImplementedError", "<builtin>.ValueError"], "conv.Conv2d.forward": ["conv.Conv2d._conv_forward", "torch.nn.Conv2d._conv_forward", "conv._reverse_repeat_padding", "torch.nn.functional.pad", "<builtin>.len", "<builtin>.ValueError", "torch._ops.ops.quantized.conv2d", "torch.nn.functional.conv2d", "torch.quantize_per_tensor"], "conv.Conv3d.__init__": ["<builtin>.super", "utils._triple", "<builtin>.isinstance", "torch.nn.modules.utils._triple", "torch.nn.quantized.Conv3d.__init__"], "utils._triple": [], "conv.Conv3d._conv_forward": ["functional.conv3d", "utils._triple", "functional.pad"], "functional.conv3d": ["torch.nn.modules.utils._triple", "torch.ops.quantized.conv3d", "<builtin>.NotImplementedError", "torch.ops.quantized.conv3d_prepack", "<builtin>.ValueError"], "conv.Conv3d.forward": ["conv.Conv3d._conv_forward", "torch.nn.Conv3d._conv_forward", "conv._reverse_repeat_padding", "torch._ops.ops.quantized.conv3d", "torch.nn.functional.pad", "<builtin>.len", "<builtin>.ValueError", "torch.nn.functional.conv3d", "torch.quantize_per_tensor"], "conv._ConvTransposeNd.__init__": ["<builtin>.super", "<builtin>.ValueError"], "conv._ConvTransposeNd._output_padding": ["torch.jit.annotate", "<builtin>.len", "utils._single", "<builtin>.range", "<builtin>.ValueError"], "conv.ConvTranspose1d.__init__": ["<builtin>.super", "utils._single", "torch.nn.modules.utils._pair"], "conv.ConvTranspose1d.forward": ["conv._ConvTransposeNd._output_padding", "<builtin>.isinstance", "<builtin>.ValueError", "functional.conv_transpose1d", "torch.ops.quantized.conv_transpose1d", "<builtin>.len"], "functional.conv_transpose1d": [], "conv.ConvTranspose2d.__init__": ["<builtin>.super", "utils._pair", "torch.nn.modules.utils._pair"], "conv.ConvTranspose2d.forward": ["conv._ConvTransposeNd._output_padding", "functional.conv_transpose2d", "<builtin>.isinstance", "<builtin>.ValueError", "torch._ops.ops.quantized.conv_transpose2d", "<builtin>.len"], "functional.conv_transpose2d": [], "conv.ConvTranspose3d.__init__": ["<builtin>.super", "utils._triple", "torch.nn.modules.utils._pair"], "conv.ConvTranspose3d.forward": ["conv._ConvTransposeNd._output_padding", "<builtin>.isinstance", "<builtin>.ValueError", "functional.conv_transpose3d", "torch._ops.ops.quantized.conv_transpose3d", "<builtin>.len"], "functional.conv_transpose3d": [], "conv._ConvTransposeMixin.__init__": ["<builtin>.super", "warnings.warn"], "conv._LazyConvXdMixin.reset_parameters": ["<builtin>.super", "lazy.LazyModuleMixin.has_uninitialized_params"], "conv._LazyConvXdMixin.initialize_parameters": ["lazy.LazyModuleMixin.has_uninitialized_params", "<builtin>.isinstance", "<builtin>.ValueError", "conv._LazyConvXdMixin.reset_parameters"], "conv.LazyConv1d.__init__": ["<builtin>.super", "torch.nn.parameter.UninitializedParameter"], "conv.LazyConv2d.__init__": ["<builtin>.super", "torch.nn.parameter.UninitializedParameter"], "conv.LazyConv3d.__init__": ["<builtin>.super", "torch.nn.parameter.UninitializedParameter"], "conv.LazyConvTranspose1d.__init__": ["<builtin>.super", "torch.nn.parameter.UninitializedParameter"], "conv.LazyConvTranspose2d.__init__": ["<builtin>.super", "torch.nn.parameter.UninitializedParameter"], "conv.LazyConvTranspose3d.__init__": ["<builtin>.super", "torch.nn.parameter.UninitializedParameter"], "distance": [], "distance.PairwiseDistance.__init__": ["<builtin>.super"], "distance.PairwiseDistance.forward": ["functional.pairwise_distance"], "functional.pairwise_distance": ["torch.pairwise_distance", "overrides.handle_torch_function", "overrides.has_torch_function_variadic"], "distance.CosineSimilarity.__init__": ["<builtin>.super"], "distance.CosineSimilarity.forward": ["functional.cosine_similarity"], "functional.cosine_similarity": [], "dropout": [], "dropout._DropoutNd.__init__": ["<builtin>.super", "<builtin>.ValueError"], "dropout._DropoutNd.extra_repr": [], "dropout.Dropout.forward": ["functional.dropout"], "functional.dropout": ["torch._VF.dropout", "overrides.handle_torch_function", "torch._VF.dropout_", "overrides.has_torch_function_unary", "<builtin>.ValueError"], "dropout.Dropout2d.forward": ["functional.dropout2d"], "functional.dropout2d": ["torch._VF.feature_dropout", "overrides.handle_torch_function", "torch._VF.feature_dropout_", "overrides.has_torch_function_unary", "<builtin>.ValueError"], "dropout.Dropout3d.forward": ["functional.dropout3d"], "functional.dropout3d": ["torch._VF.feature_dropout", "overrides.handle_torch_function", "torch._VF.feature_dropout_", "overrides.has_torch_function_unary", "<builtin>.ValueError"], "dropout.AlphaDropout.forward": ["functional.alpha_dropout"], "functional.alpha_dropout": ["torch._VF.alpha_dropout", "overrides.handle_torch_function", "torch._VF.alpha_dropout_", "overrides.has_torch_function_unary", "<builtin>.ValueError"], "dropout.FeatureAlphaDropout.forward": ["functional.feature_alpha_dropout"], "functional.feature_alpha_dropout": ["torch._VF.feature_alpha_dropout_", "torch._VF.feature_alpha_dropout", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "<builtin>.ValueError"], "flatten": [], "flatten.Flatten.__init__": ["<builtin>.super"], "flatten.Flatten.forward": [], "flatten.Flatten.extra_repr": [], "flatten.Unflatten.__init__": ["flatten.Unflatten._require_tuple_tuple", "<builtin>.TypeError", "<builtin>.super", "<builtin>.isinstance", "flatten.Unflatten._require_tuple_int"], "flatten.Unflatten._require_tuple_int": ["<builtin>.type", "<builtin>.enumerate", "<builtin>.TypeError", "<builtin>.isinstance"], "flatten.Unflatten._require_tuple_tuple": ["<builtin>.type", "<builtin>.enumerate", "<builtin>.TypeError", "<builtin>.isinstance"], "flatten.Unflatten.forward": [], "flatten.Unflatten.extra_repr": [], "fold": [], "fold.Fold.__init__": ["<builtin>.super"], "fold.Fold.forward": ["functional.fold"], "functional.fold": ["torch._C._nn.col2im", "functional.assert_int_or_pair", "<builtin>.NotImplementedError", "modules.utils._pair", "overrides.handle_torch_function", "overrides.has_torch_function_unary"], "fold.Fold.extra_repr": [], "fold.Unfold.__init__": ["<builtin>.super"], "fold.Unfold.forward": ["functional.unfold"], "functional.unfold": ["functional.assert_int_or_pair", "<builtin>.NotImplementedError", "modules.utils._pair", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "torch._C._nn.im2col"], "fold.Unfold.extra_repr": [], "instancenorm": [], "instancenorm._InstanceNorm.__init__": ["<builtin>.super"], "instancenorm._InstanceNorm._check_input_dim": [], "instancenorm._InstanceNorm._load_from_state_dict": ["<builtin>.super", "<builtin>.len"], "instancenorm._InstanceNorm.forward": ["functional.instance_norm", "instancenorm._InstanceNorm._check_input_dim"], "functional.instance_norm": ["functional._verify_spatial_size", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.instance_norm"], "instancenorm.InstanceNorm1d._check_input_dim": ["<builtin>.ValueError"], "instancenorm.LazyInstanceNorm1d._check_input_dim": ["<builtin>.ValueError"], "instancenorm.InstanceNorm2d._check_input_dim": ["<builtin>.ValueError"], "instancenorm.LazyInstanceNorm2d._check_input_dim": ["<builtin>.ValueError"], "instancenorm.InstanceNorm3d._check_input_dim": ["<builtin>.ValueError"], "instancenorm.LazyInstanceNorm3d._check_input_dim": ["<builtin>.ValueError"], "lazy._LazyProtocol._register_load_state_dict_pre_hook": [], "lazy._LazyProtocol.register_forward_pre_hook": [], "lazy._LazyProtocol._lazy_load_hook": [], "lazy._LazyProtocol._get_name": [], "lazy._LazyProtocol._infer_parameters": [], "lazy._LazyProtocol._parameters": [], "lazy._LazyProtocol._buffers": [], "lazy._LazyProtocol._non_persistent_buffers_set": [], "lazy._LazyProtocol._load_hook": [], "lazy._LazyProtocol._initialize_hook": [], "lazy.LazyModuleMixin.__init__": ["<builtin>.super", "warnings.warn"], "lazy.LazyModuleMixin._save_to_state_dict": ["parameter.is_lazy"], "parameter.is_lazy": ["<builtin>.isinstance"], "lazy.LazyModuleMixin._lazy_load_hook": ["parameter.is_lazy", "itertools.chain", "torch.no_grad"], "lazy.LazyModuleMixin.initialize_parameters": ["<builtin>.NotImplementedError"], "lazy.LazyModuleMixin._infer_parameters": ["<builtin>.delattr", "<builtin>.RuntimeError"], "lazy.LazyModuleMixin._replicate_for_data_parallel": ["<builtin>.RuntimeError"], "linear.Identity.__init__": ["<builtin>.super"], "linear.Identity.forward": [], "linear.Linear.reset_parameters": ["init._calculate_fan_in_and_fan_out", "math.sqrt", "init.uniform_", "init.kaiming_uniform_"], "functional.linear": ["torch.ops.quantized.linear_prepack", "torch.ops.quantized.linear", "torch._C._nn.linear", "overrides.handle_torch_function", "overrides.has_torch_function_variadic"], "linear.NonDynamicallyQuantizableLinear.__init__": ["<builtin>.super"], "linear.Bilinear.__init__": ["torch.nn.parameter.Parameter", "linear.Bilinear.reset_parameters", "<builtin>.super", "module.Module.register_parameter", "torch.empty"], "linear.Bilinear.reset_parameters": ["init.uniform_", "math.sqrt"], "linear.Bilinear.forward": ["functional.bilinear"], "functional.bilinear": ["torch.bilinear", "overrides.handle_torch_function", "overrides.has_torch_function_variadic"], "linear.Bilinear.extra_repr": [], "linear.LazyLinear.__init__": ["<builtin>.super", "torch.nn.parameter.UninitializedParameter"], "linear.LazyLinear.reset_parameters": ["<builtin>.super", "lazy.LazyModuleMixin.has_uninitialized_params"], "linear.LazyLinear.initialize_parameters": ["linear.LazyLinear.reset_parameters", "lazy.LazyModuleMixin.has_uninitialized_params", "torch.no_grad"], "loss": [], "loss._Loss.__init__": ["<builtin>.super", "_reduction.legacy_get_string"], "_reduction.legacy_get_string": ["warnings.warn"], "loss._WeightedLoss.__init__": ["<builtin>.super", "module.Module.register_buffer"], "loss.L1Loss.__init__": ["<builtin>.super"], "loss.L1Loss.forward": ["functional.l1_loss"], "functional.l1_loss": ["torch._C._nn.l1_loss", "torch.broadcast_tensors", "warnings.warn", "_reduction.legacy_get_string", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.NLLLoss.__init__": ["<builtin>.super"], "loss.NLLLoss.forward": ["functional.nll_loss"], "functional.nll_loss": ["_reduction.legacy_get_string", "overrides.handle_torch_function", "torch._C._nn.nll_loss_nd", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.NLLLoss2d.__init__": ["<builtin>.super", "warnings.warn"], "loss.PoissonNLLLoss.__init__": ["<builtin>.super"], "loss.PoissonNLLLoss.forward": ["functional.poisson_nll_loss"], "functional.poisson_nll_loss": ["_reduction.legacy_get_string", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum", "torch.poisson_nll_loss", "<builtin>.ValueError"], "loss.GaussianNLLLoss.__init__": ["<builtin>.super"], "loss.GaussianNLLLoss.forward": ["functional.gaussian_nll_loss"], "functional.gaussian_nll_loss": ["torch.unsqueeze", "torch.any", "torch.log", "math.log", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "<builtin>.ValueError", "torch.no_grad"], "loss.KLDivLoss.__init__": ["<builtin>.super"], "loss.KLDivLoss.forward": ["functional.kl_div"], "functional.kl_div": ["warnings.warn", "torch.kl_div", "_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.MSELoss.__init__": ["<builtin>.super"], "loss.MSELoss.forward": ["functional.mse_loss"], "functional.mse_loss": ["torch.broadcast_tensors", "warnings.warn", "_reduction.legacy_get_string", "torch._C._nn.mse_loss", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.BCELoss.__init__": ["<builtin>.super"], "loss.BCELoss.forward": ["functional.binary_cross_entropy"], "functional.binary_cross_entropy": ["torch._C._infer_size", "torch._C._nn.binary_cross_entropy", "_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum", "<builtin>.ValueError"], "loss.BCEWithLogitsLoss.__init__": ["<builtin>.super", "module.Module.register_buffer"], "loss.BCEWithLogitsLoss.forward": ["functional.binary_cross_entropy_with_logits"], "functional.binary_cross_entropy_with_logits": ["torch.binary_cross_entropy_with_logits", "_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum", "<builtin>.ValueError"], "loss.HingeEmbeddingLoss.__init__": ["<builtin>.super"], "loss.HingeEmbeddingLoss.forward": ["functional.hinge_embedding_loss"], "functional.hinge_embedding_loss": ["_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum", "torch.hinge_embedding_loss"], "loss.MultiLabelMarginLoss.__init__": ["<builtin>.super"], "loss.MultiLabelMarginLoss.forward": ["functional.multilabel_margin_loss"], "functional.multilabel_margin_loss": ["torch._C._nn.multilabel_margin_loss", "_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.SmoothL1Loss.__init__": ["<builtin>.super"], "loss.SmoothL1Loss.forward": ["functional.smooth_l1_loss"], "functional.smooth_l1_loss": ["torch.broadcast_tensors", "torch._C._nn.smooth_l1_loss", "warnings.warn", "_reduction.legacy_get_string", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.HuberLoss.__init__": ["<builtin>.super"], "loss.HuberLoss.forward": ["functional.huber_loss"], "functional.huber_loss": ["torch.broadcast_tensors", "warnings.warn", "overrides.handle_torch_function", "torch._C._nn.huber_loss", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.SoftMarginLoss.__init__": ["<builtin>.super"], "loss.SoftMarginLoss.forward": ["functional.soft_margin_loss"], "functional.soft_margin_loss": ["torch._C._nn.soft_margin_loss", "_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.CrossEntropyLoss.__init__": ["<builtin>.super"], "loss.CrossEntropyLoss.forward": ["functional.cross_entropy"], "functional.cross_entropy": ["_reduction.legacy_get_string", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum", "torch._C._nn.cross_entropy_loss"], "loss.MultiLabelSoftMarginLoss.__init__": ["<builtin>.super"], "loss.MultiLabelSoftMarginLoss.forward": ["functional.multilabel_soft_margin_loss"], "functional.multilabel_soft_margin_loss": ["_reduction.legacy_get_string", "<builtin>.ValueError", "overrides.handle_torch_function", "overrides.has_torch_function_variadic"], "loss.CosineEmbeddingLoss.__init__": ["<builtin>.super"], "loss.CosineEmbeddingLoss.forward": ["functional.cosine_embedding_loss"], "functional.cosine_embedding_loss": ["torch.cosine_embedding_loss", "_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.MarginRankingLoss.__init__": ["<builtin>.super"], "loss.MarginRankingLoss.forward": ["functional.margin_ranking_loss"], "functional.margin_ranking_loss": ["<builtin>.RuntimeError", "_reduction.legacy_get_enum", "overrides.handle_torch_function", "torch.margin_ranking_loss", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.MultiMarginLoss.__init__": ["<builtin>.super", "<builtin>.ValueError"], "loss.MultiMarginLoss.forward": ["functional.multi_margin_loss"], "functional.multi_margin_loss": ["_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum", "<builtin>.ValueError", "torch._C._nn.multi_margin_loss"], "loss.TripletMarginLoss.__init__": ["<builtin>.super"], "loss.TripletMarginLoss.forward": ["functional.triplet_margin_loss"], "functional.triplet_margin_loss": ["torch.triplet_margin_loss", "_reduction.legacy_get_enum", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "loss.TripletMarginWithDistanceLoss.__init__": ["<builtin>.super", "distance.PairwiseDistance"], "distance.PairwiseDistance": [], "loss.TripletMarginWithDistanceLoss.forward": ["functional.triplet_margin_with_distance_loss"], "functional.triplet_margin_with_distance_loss": ["torch.min", "torch.clamp", "<builtin>.NotImplementedError", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "_reduction.get_enum", "torch.jit.is_scripting"], "loss.CTCLoss.__init__": ["<builtin>.super"], "loss.CTCLoss.forward": ["functional.ctc_loss"], "functional.ctc_loss": ["overrides.handle_torch_function", "torch.ctc_loss", "overrides.has_torch_function_variadic", "_reduction.get_enum"], "module": ["typing.TypeVar", "collections.OrderedDict"], "module._IncompatibleKeys.__repr__": ["<builtin>.super"], "module._addindent": ["<builtin>.len"], "module.register_module_forward_pre_hook": ["torch.utils.hooks.RemovableHandle"], "torch.utils.hooks.RemovableHandle": [], "module.register_module_forward_hook": ["torch.utils.hooks.RemovableHandle"], "module.register_module_backward_hook": ["<builtin>.RuntimeError", "torch.utils.hooks.RemovableHandle"], "module.register_module_full_backward_hook": ["<builtin>.RuntimeError", "torch.utils.hooks.RemovableHandle"], "module._forward_unimplemented": [], "module.Module.__init__": ["<builtin>.set", "torch._C._log_api_usage_once", "collections.OrderedDict"], "torch._C._log_api_usage_once": [], "module.Module.get_submodule": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.isinstance", "<builtin>.AttributeError"], "module.Module.get_parameter": ["<builtin>.hasattr", "<builtin>.AttributeError", "<builtin>.getattr", "module.Module.get_submodule", "<builtin>.isinstance"], "module.Module.get_buffer": ["<builtin>.hasattr", "<builtin>.getattr", "module.Module.get_submodule", "<builtin>.AttributeError"], "module.Module._apply": ["parameter.Parameter", "module.Module._apply.compute_should_use_set_data", "torch.no_grad", "module.Module.to.convert", "<builtin>.isinstance", "module.Module.children"], "module.Module.children": ["module.Module.named_children"], "module.Module._apply.compute_should_use_set_data": ["torch.__future__.get_overwrite_module_params_on_conversion", "torch._has_compatible_shallow_copy_type"], "torch._has_compatible_shallow_copy_type": [], "torch.__future__.get_overwrite_module_params_on_conversion": [], "module.Module.to.convert": [], "parameter.Parameter": [], "module.Module.apply": ["module.Module.children"], "module.Module.cuda": ["module.Module._apply"], "module.Module.cuda.<lambda1>": [], "module.Module.xpu": ["module.Module._apply"], "module.Module.xpu.<lambda1>": [], "module.Module.cpu": ["module.Module._apply"], "module.Module.cpu.<lambda1>": [], "module.Module.type": ["module.Module._apply"], "module.Module.type.<lambda1>": [], "module.Module.float": ["module.Module._apply"], "module.Module.float.<lambda1>": [], "module.Module.double": ["module.Module._apply"], "module.Module.double.<lambda1>": [], "module.Module.half": ["module.Module._apply"], "module.Module.half.<lambda1>": [], "module.Module.bfloat16": ["module.Module._apply"], "module.Module.bfloat16.<lambda1>": [], "module.Module.to_empty": ["module.Module._apply"], "module.Module.to_empty.<lambda1>": ["torch.empty_like"], "module.Module": ["typing.TypeVar", "typing.overload"], "module.Module.to": ["<builtin>.TypeError", "torch._C._nn._parse_to", "warnings.warn", "module.Module._apply"], "torch._C._nn._parse_to": [], "module.Module.register_backward_hook": ["<builtin>.RuntimeError", "torch.utils.hooks.RemovableHandle"], "module.Module.register_full_backward_hook": ["<builtin>.RuntimeError", "torch.utils.hooks.RemovableHandle"], "module.Module._get_backward_hooks": [], "module.Module._maybe_warn_non_full_backward_hook": ["<builtin>.len", "<builtin>.isinstance", "warnings.warn", "<builtin>.all"], "module.Module.register_forward_pre_hook": ["torch.utils.hooks.RemovableHandle"], "module.Module.register_forward_hook": ["torch.utils.hooks.RemovableHandle"], "module.Module._slow_forward": ["torch._C._get_tracing_state", "<builtin>.isinstance"], "torch._C._get_tracing_state": [], "module.Module._call_impl": ["module.Module._get_backward_hooks", "torch.utils.hooks.BackwardHook", "functools.update_wrapper", "<builtin>.next", "functools.partial", "torch._C._get_tracing_state", "module.Module._maybe_warn_non_full_backward_hook", "<builtin>.isinstance"], "torch.utils.hooks.BackwardHook": [], "functools.update_wrapper": [], "module.Module.__setstate__": ["<builtin>.set", "collections.OrderedDict"], "module.Module.__getattr__": ["module.Module.type", "<builtin>.AttributeError"], "module.Module.__setattr__": ["module.Module.__setattr__.remove_from", "<builtin>.AttributeError", "torch.typename", "<builtin>.TypeError", "module.Module.register_parameter", "<builtin>.isinstance"], "module.Module.__setattr__.remove_from": ["<builtin>.isinstance"], "module.Module.__delattr__": [], "module.Module._register_state_dict_hook": ["torch.utils.hooks.RemovableHandle"], "module.Module._save_to_state_dict": [], "module.Module.state_dict": ["<builtin>.dict", "collections.OrderedDict", "module.Module._save_to_state_dict"], "module.Module._register_load_state_dict_pre_hook": ["functools.partial", "torch.utils.hooks.RemovableHandle"], "module.Module._load_from_state_dict": ["<builtin>.len", "torch.no_grad", "torch.nn.parameter.is_lazy", "itertools.chain"], "torch.nn.parameter.is_lazy": [], "module.Module.load_state_dict": ["<builtin>.len", "<builtin>.getattr", "<builtin>.RuntimeError", "module.Module.load_state_dict.load"], "module.Module.load_state_dict.load": ["module.Module._load_from_state_dict", "module.Module.load_state_dict.load"], "module.Module._named_members": ["<builtin>.set", "module.Module.named_modules"], "module.Module.named_modules": ["<builtin>.set"], "module.Module.parameters": ["module.Module.named_parameters"], "module.Module.named_parameters": ["module.Module._named_members"], "module.Module.named_parameters.<lambda1>": [], "module.Module.buffers": ["module.Module.named_buffers"], "module.Module.named_buffers": ["module.Module._named_members"], "module.Module.named_buffers.<lambda1>": [], "module.Module.named_children": ["<builtin>.set"], "module.Module.modules": ["module.Module.named_modules"], "module.Module.train": ["<builtin>.ValueError", "<builtin>.isinstance", "module.Module.children"], "module.Module.eval": ["module.Module.train"], "module.Module.requires_grad_": ["module.Module.parameters"], "module.Module.zero_grad": ["<builtin>.getattr", "warnings.warn", "module.Module.parameters"], "module.Module.share_memory": ["module.Module._apply"], "module.Module.share_memory.<lambda1>": [], "module.Module._get_name": [], "module.Module.extra_repr": [], "module.Module.__repr__": ["module.Module.extra_repr", "<builtin>.repr", "module._addindent", "<builtin>.len", "module.Module._get_name"], "module.Module.__dir__": ["<builtin>.sorted", "<builtin>.dir", "<builtin>.list"], "module.Module._replicate_for_data_parallel": ["module.Module.type", "collections.OrderedDict"], "normalization.LocalResponseNorm.__init__": ["<builtin>.super"], "normalization.LocalResponseNorm.forward": ["functional.local_response_norm"], "functional.local_response_norm": ["<builtin>.ValueError", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional.hardsigmoid"], "normalization.LocalResponseNorm.extra_repr": [], "normalization.CrossMapLRN2d.__init__": ["<builtin>.super"], "normalization.CrossMapLRN2d.forward": ["_functions.CrossMapLRN2d.apply"], "_functions.CrossMapLRN2d.apply": [], "normalization.CrossMapLRN2d.extra_repr": [], "normalization.LayerNorm.__init__": ["module.Module.register_parameter", "normalization.LayerNorm.reset_parameters", "<builtin>.tuple", "<builtin>.super", "torch.empty", "torch.nn.parameter.Parameter", "<builtin>.isinstance", "torch.tensor", "torch.nn.LayerNorm.register_buffer"], "normalization.LayerNorm.reset_parameters": ["init.ones_", "init.zeros_"], "normalization.LayerNorm.forward": ["functional.layer_norm", "torch.ops.quantized.layer_norm"], "functional.layer_norm": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.layer_norm"], "normalization.LayerNorm.extra_repr": [], "normalization.GroupNorm.__init__": ["module.Module.register_parameter", "<builtin>.super", "torch.empty", "normalization.GroupNorm.reset_parameters", "torch.nn.parameter.Parameter", "torch.tensor", "torch.nn.GroupNorm.register_buffer"], "normalization.GroupNorm.reset_parameters": ["init.ones_", "init.zeros_"], "normalization.GroupNorm.forward": ["functional.group_norm", "torch.ops.quantized.group_norm"], "functional.group_norm": ["functional._verify_batch_size", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "torch.group_norm", "<builtin>.list"], "normalization.GroupNorm.extra_repr": [], "padding": [], "padding._ConstantPadNd.__init__": ["<builtin>.super"], "padding._ConstantPadNd.forward": ["functional.pad"], "padding._ConstantPadNd.extra_repr": [], "padding.ConstantPad1d.__init__": ["<builtin>.super", "utils._pair"], "padding.ConstantPad2d.__init__": ["<builtin>.super", "utils._quadruple"], "utils._quadruple": [], "padding.ConstantPad3d.__init__": ["<builtin>.super", "utils._ntuple"], "utils._ntuple": [], "padding._ReflectionPadNd.forward": ["functional.pad"], "padding._ReflectionPadNd.extra_repr": [], "padding.ReflectionPad1d.__init__": ["<builtin>.super", "utils._pair"], "padding.ReflectionPad2d.__init__": ["<builtin>.super", "utils._quadruple"], "padding.ReflectionPad3d.__init__": ["<builtin>.super", "utils._ntuple"], "padding._ReplicationPadNd.forward": ["functional.pad"], "padding._ReplicationPadNd.extra_repr": [], "padding.ReplicationPad1d.__init__": ["<builtin>.super", "utils._pair"], "padding.ReplicationPad2d.__init__": ["<builtin>.super", "utils._quadruple"], "padding.ReplicationPad3d.__init__": ["<builtin>.super", "utils._ntuple"], "padding.ZeroPad2d.__init__": ["<builtin>.super"], "pixelshuffle": [], "pixelshuffle.PixelShuffle.__init__": ["<builtin>.super"], "pixelshuffle.PixelShuffle.forward": ["functional.pixel_shuffle"], "functional.pixel_shuffle": [], "pixelshuffle.PixelShuffle.extra_repr": [], "pixelshuffle.PixelUnshuffle.__init__": ["<builtin>.super"], "pixelshuffle.PixelUnshuffle.forward": ["functional.pixel_unshuffle"], "functional.pixel_unshuffle": [], "pixelshuffle.PixelUnshuffle.extra_repr": [], "pooling._MaxPoolNd.__init__": ["<builtin>.super"], "pooling._MaxPoolNd.extra_repr": [], "pooling.MaxPool1d.forward": ["functional.max_pool1d"], "functional.max_pool1d": ["<builtin>.NotImplementedError", "torch.jit.annotate", "torch.nn.functional.max_pool1d"], "pooling.MaxPool2d.forward": ["functional.max_pool2d"], "functional.max_pool2d": ["torch.nn.functional.max_pool2d", "<builtin>.NotImplementedError", "torch.jit.annotate"], "pooling.MaxPool3d.forward": ["functional.max_pool3d"], "functional.max_pool3d": [], "pooling._MaxUnpoolNd.extra_repr": [], "pooling.MaxUnpool1d.__init__": ["<builtin>.super", "utils._single"], "pooling.MaxUnpool1d.forward": ["functional.max_unpool1d"], "functional.max_unpool1d": ["functional._unpool_output_size", "<builtin>.isinstance", "torch._C._nn.max_unpool2d", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "modules.utils._single"], "pooling.MaxUnpool2d.__init__": ["<builtin>.super", "utils._pair"], "pooling.MaxUnpool2d.forward": ["functional.max_unpool2d"], "functional.max_unpool2d": ["functional._unpool_output_size", "torch._C._nn.max_unpool2d", "modules.utils._pair", "overrides.handle_torch_function", "overrides.has_torch_function_unary"], "pooling.MaxUnpool3d.__init__": ["<builtin>.super", "utils._triple"], "pooling.MaxUnpool3d.forward": ["functional.max_unpool3d"], "functional.max_unpool3d": ["modules.utils._triple", "functional._unpool_output_size", "overrides.handle_torch_function", "torch._C._nn.max_unpool3d", "overrides.has_torch_function_unary"], "pooling._AvgPoolNd.extra_repr": [], "pooling.AvgPool1d.__init__": ["<builtin>.super", "utils._single"], "pooling.AvgPool1d.forward": ["functional.avg_pool1d"], "functional.avg_pool1d": [], "pooling.AvgPool2d.__init__": ["<builtin>.super"], "pooling.AvgPool2d.forward": ["functional.avg_pool2d"], "functional.avg_pool2d": ["torch.nn.functional.avg_pool2d", "<builtin>.ValueError"], "pooling.AvgPool3d.__init__": ["<builtin>.super"], "pooling.AvgPool3d.forward": ["functional.avg_pool3d"], "functional.avg_pool3d": ["<builtin>.ValueError", "torch.nn.functional.avg_pool3d"], "pooling.AvgPool3d.__setstate__": ["<builtin>.super", "module.Module.__dict__.setdefault"], "module.Module.__dict__.setdefault": [], "pooling.FractionalMaxPool2d.__init__": ["<builtin>.super", "utils._pair", "<builtin>.ValueError", "module.Module.register_buffer"], "pooling.FractionalMaxPool2d.forward": ["functional.fractional_max_pool2d"], "functional.fractional_max_pool2d": [], "pooling.FractionalMaxPool3d.__init__": ["<builtin>.super", "<builtin>.ValueError", "utils._triple", "module.Module.register_buffer"], "pooling.FractionalMaxPool3d.forward": ["functional.fractional_max_pool3d"], "functional.fractional_max_pool3d": [], "pooling._LPPoolNd.__init__": ["<builtin>.super"], "pooling._LPPoolNd.extra_repr": [], "pooling.LPPool1d.forward": ["<builtin>.float", "functional.lp_pool1d"], "functional.lp_pool1d": ["torch.sign", "torch.abs", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "functional.hardsigmoid"], "pooling.LPPool2d.forward": ["<builtin>.float", "functional.lp_pool2d"], "functional.lp_pool2d": ["functional.hardsigmoid", "torch.abs", "overrides.handle_torch_function", "modules.utils._pair", "overrides.has_torch_function_unary", "torch.sign"], "pooling._AdaptiveMaxPoolNd.__init__": ["<builtin>.super"], "pooling._AdaptiveMaxPoolNd.extra_repr": [], "pooling.AdaptiveMaxPool1d.forward": ["functional.adaptive_max_pool1d"], "functional.adaptive_max_pool1d": [], "pooling.AdaptiveMaxPool2d.forward": ["functional.adaptive_max_pool2d"], "functional.adaptive_max_pool2d": [], "pooling.AdaptiveMaxPool3d.forward": ["functional.adaptive_max_pool3d"], "functional.adaptive_max_pool3d": [], "pooling._AdaptiveAvgPoolNd.__init__": ["<builtin>.super"], "pooling._AdaptiveAvgPoolNd.extra_repr": [], "pooling.AdaptiveAvgPool1d.forward": ["functional.adaptive_avg_pool1d"], "functional.adaptive_avg_pool1d": [], "pooling.AdaptiveAvgPool2d.forward": ["functional.adaptive_avg_pool2d"], "functional.adaptive_avg_pool2d": ["torch.nn.functional.adaptive_avg_pool2d", "<builtin>.ValueError", "torch._C._nn.adaptive_avg_pool2d", "modules.utils._list_with_default", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "pooling.AdaptiveAvgPool3d.forward": ["functional.adaptive_avg_pool3d"], "functional.adaptive_avg_pool3d": ["<builtin>.ValueError", "torch.nn.functional.adaptive_avg_pool3d", "modules.utils._list_with_default", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._C._nn.adaptive_avg_pool3d"], "rnn.RNNBase.__init__.<lambda1>": ["<builtin>.getattr", "<builtin>.hasattr"], "rnn.RNNBase.flatten_parameters": ["<builtin>.set", "torch.cuda.device_of", "<builtin>.bool", "<builtin>.len", "torch.backends.cudnn.is_acceptable", "torch.backends.cudnn.rnn.get_cudnn_mode", "torch._use_cudnn_rnn_flatten_weight", "torch._cudnn_rnn_flatten_weight", "<builtin>.isinstance", "torch.no_grad"], "rnn.RNNBase.reset_parameters": ["math.sqrt", "module.Module.parameters", "init.uniform_"], "rnn.RNNBase.__setattr__": ["<builtin>.super", "<builtin>.hasattr"], "torch.backends.cudnn.is_acceptable": [], "torch.cuda.device_of": [], "torch._use_cudnn_rnn_flatten_weight": [], "torch.backends.cudnn.rnn.get_cudnn_mode": [], "torch._cudnn_rnn_flatten_weight": [], "rnn.RNNBase._apply": ["rnn.RNNBase.flatten_parameters", "<builtin>.super"], "rnn.RNNBase._apply.<lambda1>": ["<builtin>.getattr", "<builtin>.hasattr"], "rnn.RNNBase.forward": ["torch.zeros", "<builtin>.int", "rnn.RNNBase.check_forward_args", "rnn.RNNBase.permute_hidden", "utils.rnn.PackedSequence", "typing.cast", "<builtin>.isinstance"], "utils.rnn.PackedSequence": [], "rnn.RNNBase.__setstate__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.range"], "rnn.RNNBase.__setstate__.<lambda1>": ["<builtin>.getattr", "<builtin>.hasattr"], "rnn.RNNBase.all_weights": ["<builtin>.getattr"], "rnn.RNNBase._replicate_for_data_parallel": ["<builtin>.super"], "rnn.RNN.__init__": ["<builtin>.super", "<builtin>.ValueError"], "rnn.LSTM.get_expected_cell_size": ["<builtin>.int"], "torch._jit_internal._overload_method": [], "_VF.lstm": [], "_VF.gru": [], "rnn.RNNCellBase.reset_parameters": ["math.sqrt", "module.Module.parameters", "init.uniform_"], "_VF.rnn_tanh_cell": [], "_VF.rnn_relu_cell": [], "_VF.lstm_cell": [], "_VF.gru_cell": [], "sparse": [], "sparse.Embedding.__init__": ["torch.nn.parameter.Parameter", "<builtin>.super", "sparse.Embedding.reset_parameters", "torch.empty", "<builtin>.list"], "sparse.Embedding.reset_parameters": ["sparse.Embedding._fill_padding_idx_with_zero", "init.normal_"], "init.normal_": ["init._no_grad_normal_"], "sparse.Embedding._fill_padding_idx_with_zero": ["torch.no_grad"], "sparse.Embedding.forward": ["functional.embedding"], "functional.embedding": ["overrides.handle_torch_function", "functional._no_grad_embedding_renorm_", "overrides.has_torch_function_variadic", "torch.embedding"], "sparse.Embedding.extra_repr": [], "sparse.Embedding.from_pretrained": ["sparse.Embedding.__init__"], "sparse.EmbeddingBag.__init__": ["torch.nn.parameter.Parameter", "<builtin>.super", "torch.empty", "sparse.EmbeddingBag.reset_parameters", "<builtin>.list"], "sparse.EmbeddingBag.reset_parameters": ["sparse.EmbeddingBag._fill_padding_idx_with_zero", "init.normal_"], "sparse.EmbeddingBag._fill_padding_idx_with_zero": ["torch.no_grad"], "sparse.EmbeddingBag.forward": ["functional.embedding_bag"], "functional.embedding_bag": ["<builtin>.str", "warnings.warn", "<builtin>.NotImplementedError", "overrides.handle_torch_function", "functional._no_grad_embedding_renorm_", "overrides.has_torch_function_variadic", "torch.embedding_bag", "torch.arange", "<builtin>.ValueError", "torch.jit.is_scripting", "<builtin>.type"], "sparse.EmbeddingBag.extra_repr": [], "sparse.EmbeddingBag.from_pretrained": ["sparse.EmbeddingBag.__init__"], "transformer": [], "transformer.Transformer.__init__": ["normalization.LayerNorm", "transformer.TransformerDecoderLayer.__init__", "transformer.TransformerDecoder.__init__", "<builtin>.super", "transformer.TransformerEncoderLayer.__init__", "transformer.Transformer._reset_parameters", "transformer.TransformerEncoder.__init__"], "transformer.TransformerEncoderLayer.__init__": ["dropout.Dropout", "normalization.LayerNorm", "linear.Linear", "<builtin>.super", "transformer._get_activation_fn", "activation.MultiheadAttention", "<builtin>.isinstance"], "normalization.LayerNorm": [], "transformer.TransformerEncoder.__init__": ["transformer._get_clones", "<builtin>.super"], "transformer.TransformerDecoderLayer.__init__": ["dropout.Dropout", "normalization.LayerNorm", "linear.Linear", "<builtin>.super", "transformer._get_activation_fn", "activation.MultiheadAttention", "<builtin>.isinstance"], "transformer.TransformerDecoder.__init__": ["transformer._get_clones", "<builtin>.super"], "transformer.Transformer._reset_parameters": ["module.Module.parameters", "init.xavier_uniform_"], "transformer.Transformer.forward": ["transformer.TransformerDecoder.__init__", "<builtin>.RuntimeError", "transformer.TransformerEncoder.__init__"], "transformer.Transformer.generate_square_subsequent_mask": ["<builtin>.float", "torch.full", "torch.triu"], "torch.triu": [], "init.xavier_uniform_": ["init._calculate_fan_in_and_fan_out", "math.sqrt", "<builtin>.float", "init._no_grad_uniform_"], "transformer._get_clones": ["container.ModuleList", "copy.deepcopy", "<builtin>.range"], "transformer.TransformerEncoder.forward": [], "transformer.TransformerDecoder.forward": [], "activation.MultiheadAttention": ["torch.jit.unused"], "linear.Linear": [], "dropout.Dropout": [], "transformer._get_activation_fn": ["<builtin>.RuntimeError"], "transformer.TransformerEncoderLayer.__setstate__": ["<builtin>.super"], "transformer.TransformerEncoderLayer.forward": ["transformer.TransformerEncoderLayer._ff_block", "transformer.TransformerEncoderLayer._sa_block"], "transformer.TransformerEncoderLayer._sa_block": [], "transformer.TransformerEncoderLayer._ff_block": ["functional.gelu", "functional.relu"], "transformer.TransformerDecoderLayer.__setstate__": ["<builtin>.super"], "transformer.TransformerDecoderLayer.forward": ["transformer.TransformerDecoderLayer._sa_block", "transformer.TransformerDecoderLayer._ff_block", "transformer.TransformerDecoderLayer._mha_block"], "transformer.TransformerDecoderLayer._sa_block": [], "transformer.TransformerDecoderLayer._mha_block": [], "transformer.TransformerDecoderLayer._ff_block": ["functional.gelu", "functional.relu"], "upsampling": [], "upsampling.Upsample.__init__": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.type", "<builtin>.float", "<builtin>.tuple"], "upsampling.Upsample.forward": ["functional.interpolate"], "functional.interpolate": ["torch.nn.functional.interpolate", "<builtin>.ValueError", "<builtin>.isinstance", "torch._C._get_tracing_state", "torch._C._nn.upsample_linear1d", "overrides.handle_torch_function", "<builtin>.float", "torch._C._nn.upsample_nearest2d", "torch._C._nn.upsample_trilinear3d", "torch._C._nn.upsample_nearest3d", "warnings.warn", "<builtin>.NotImplementedError", "torch.tensor", "overrides.has_torch_function_unary", "torch._C._nn.upsample_bilinear2d", "torch._C._nn.upsample_bicubic2d", "torch.floor", "<builtin>.len", "torch.jit.is_scripting", "math.floor", "<builtin>.range", "torch._C._nn.upsample_nearest1d", "functional.hardsigmoid", "<builtin>.int"], "upsampling.Upsample.extra_repr": ["<builtin>.str"], "upsampling.UpsamplingNearest2d.__init__": ["<builtin>.super"], "upsampling.UpsamplingBilinear2d.__init__": ["<builtin>.super"], "utils._ntuple.parse": ["itertools.repeat", "<builtin>.tuple", "<builtin>.isinstance"], "itertools.repeat": [], "utils._list_with_default": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.zip"], "utils.consume_prefix_in_state_dict_if_present": ["<builtin>.sorted", "<builtin>.list", "<builtin>.len"], "_functions": [], "_functions.SyncBatchNorm.forward": ["torch.cat", "<builtin>.range", "torch.batch_norm_gather_stats_with_counts", "torch.stack", "<builtin>.ValueError", "torch.reshape", "torch.empty_like", "torch.full", "torch.batch_norm_stats", "<builtin>.int", "torch.split", "torch.distributed.all_gather", "torch.batch_norm_elemt", "torch.distributed._all_gather_base", "torch.empty"], "torch.batch_norm_stats": [], "torch.distributed._all_gather_base": [], "torch.reshape": [], "torch.batch_norm_gather_stats_with_counts": [], "torch.batch_norm_elemt": [], "_functions.SyncBatchNorm.backward": ["torch.cat", "torch.batch_norm_backward_elemt", "torch.batch_norm_backward_reduce", "torch.split", "torch.distributed.all_reduce"], "torch.batch_norm_backward_reduce": [], "torch.batch_norm_backward_elemt": [], "_functions.CrossMapLRN2d.forward": ["torch.pow", "<builtin>.range", "<builtin>.int"], "_functions.CrossMapLRN2d.backward": ["torch.pow", "<builtin>.range", "torch.mul", "torch.sum", "<builtin>.int"], "_functions.BackwardHookFunction.forward": [], "_functions.BackwardHookFunction.backward": [], "comm": [], "comm.broadcast": ["torch._C._broadcast", "<builtin>.RuntimeError", "torch._utils._get_device_index", "torch._C._broadcast_out", "torch._utils._handle_complex"], "torch._utils._handle_complex": [], "torch._utils._get_device_index": [], "torch._C._broadcast": [], "torch._C._broadcast_out": [], "comm.broadcast_coalesced": ["torch._C._broadcast_coalesced", "torch._utils._get_device_index", "torch._utils._handle_complex"], "torch._C._broadcast_coalesced": [], "comm.reduce_add": ["<builtin>.RuntimeError", "<builtin>.str", "torch.cuda.nccl.reduce", "<builtin>.enumerate", "<builtin>.ValueError", "torch._utils._get_device_index", "<builtin>.len", "torch.device", "torch.empty_like", "torch.cuda.nccl.is_available"], "torch.cuda.nccl.is_available": [], "torch.cuda.nccl.reduce": [], "comm.reduce_add_coalesced": ["<builtin>.all", "torch._utils._take_tensors", "torch._utils._reorder_tensors_as", "<builtin>.tuple", "torch._utils._flatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "<builtin>.zip", "comm.reduce_add"], "torch._utils._take_tensors": [], "torch._utils._flatten_dense_tensors": [], "torch._utils._unflatten_dense_tensors": [], "torch._utils._reorder_tensors_as": [], "comm.scatter": ["<builtin>.RuntimeError", "torch._utils._get_device_index", "<builtin>.tuple", "torch._C._scatter", "torch._utils._handle_complex", "torch._C._scatter_out"], "torch._C._scatter": [], "torch._C._scatter_out": [], "comm.gather": ["torch._C._gather", "<builtin>.RuntimeError", "warnings.warn", "torch._C._gather_out", "torch._utils._get_device_index", "torch._utils._handle_complex"], "torch._C._gather": [], "torch._C._gather_out": [], "data_parallel": [], "data_parallel._check_balance": ["torch._utils._get_devices_properties", "torch._utils._get_device_index", "data_parallel._check_balance.warn_imbalance"], "torch._utils._get_devices_properties": [], "data_parallel._check_balance.warn_imbalance": ["warnings.warn", "<builtin>.max", "operator.itemgetter", "<builtin>.min", "data_parallel._check_balance.<lambda1>", "<builtin>.enumerate", "data_parallel._check_balance.<lambda2>"], "data_parallel._check_balance.<lambda1>": [], "data_parallel._check_balance.<lambda2>": [], "data_parallel.DataParallel.__init__": ["data_parallel._check_balance", "torch._utils._get_device_index", "<builtin>.super", "<builtin>.len", "torch._utils._get_available_device_type", "torch.device", "torch._utils._get_all_device_indices"], "torch._utils._get_available_device_type": [], "torch._utils._get_all_device_indices": [], "data_parallel.DataParallel.forward": ["torch.autograd.profiler.record_function", "data_parallel.DataParallel.scatter", "data_parallel.DataParallel.gather", "data_parallel.DataParallel.replicate", "data_parallel.DataParallel.parallel_apply", "<builtin>.RuntimeError", "<builtin>.len", "itertools.chain"], "data_parallel.DataParallel.scatter": ["scatter_gather.scatter_kwargs"], "data_parallel.DataParallel.replicate": ["torch.is_grad_enabled", "data_parallel.DataParallel.replicate"], "data_parallel.DataParallel.parallel_apply": ["data_parallel.DataParallel.parallel_apply", "<builtin>.len"], "data_parallel.DataParallel.gather": ["data_parallel.DataParallel.gather"], "torch.is_grad_enabled": [], "scatter_gather.scatter_kwargs": ["scatter_gather.scatter", "<builtin>.len", "<builtin>.range", "<builtin>.tuple"], "data_parallel.data_parallel": ["replicate.replicate", "itertools.chain", "scatter_gather.gather", "torch._utils._get_device_index", "parallel_apply.parallel_apply", "<builtin>.RuntimeError", "scatter_gather.scatter_kwargs", "torch._utils._get_available_device_type", "torch.device", "<builtin>.len", "torch._utils._get_all_device_indices", "<builtin>.isinstance"], "replicate.replicate": ["<builtin>.list", "<builtin>.len", "replicate._replicatable_module", "<builtin>.RuntimeError", "<builtin>.enumerate", "<builtin>.range", "replicate._broadcast_coalesced_reshape", "<builtin>.setattr", "collections.OrderedDict", "torch._utils._get_device_index"], "parallel_apply.parallel_apply": ["torch.is_autocast_enabled", "torch.is_grad_enabled", "threading.Thread", "<builtin>.zip", "<builtin>.enumerate", "threading.Lock", "parallel_apply.parallel_apply._worker", "torch.cuda._utils._get_device_index", "<builtin>.isinstance", "<builtin>.range", "<builtin>.len"], "scatter_gather.gather": ["scatter_gather.gather.gather_map"], "torch.distributed.is_available": [], "torch.distributed.rpc.is_available": [], "distributed._tree_flatten_with_rref": ["torch.utils._pytree.tree_flatten", "<builtin>.isinstance"], "torch.utils._pytree.tree_flatten": [], "distributed._tree_unflatten_with_rref": ["torch.utils._pytree.tree_unflatten", "torch.distributed.rpc.RRef"], "torch.utils._pytree.tree_unflatten": [], "distributed._find_tensors": ["distributed._find_tensors", "itertools.chain", "<builtin>.isinstance", "<builtin>.map"], "distributed._dump_DDP_relevant_env_vars": ["<builtin>.print"], "distributed._DDPSink.forward": [], "distributed._DDPSink.backward": ["torch.autograd.Variable._execution_engine.queue_callback"], "torch.autograd.Variable._execution_engine.queue_callback": [], "distributed._DDPJoinHook.__init__": ["<builtin>.isinstance", "<builtin>.super"], "distributed._DDPJoinHook.main_hook": ["distributed.DistributedDataParallel._match_all_reduce_for_bwd_pass", "distributed.DistributedDataParallel._check_and_sync_module_buffers", "distributed.DistributedDataParallel._match_unused_params_allreduce", "distributed.DistributedDataParallel._check_global_requires_backward_grad_sync"], "distributed.DistributedDataParallel._check_and_sync_module_buffers": ["distributed.DistributedDataParallel.will_sync_module_buffers", "distributed.DistributedDataParallel._find_common_rank", "distributed.DistributedDataParallel._distributed_broadcast_coalesced"], "distributed.DistributedDataParallel._check_global_requires_backward_grad_sync": ["torch.ones", "torch.distributed.all_reduce", "torch.zeros"], "distributed.DistributedDataParallel._match_all_reduce_for_bwd_pass": [], "distributed.DistributedDataParallel._match_unused_params_allreduce": [], "distributed._DDPJoinHook.post_hook": ["distributed.DistributedDataParallel._sync_final_model"], "distributed.DistributedDataParallel._sync_final_model": ["distributed.DistributedDataParallel._find_common_rank", "distributed.DistributedDataParallel._sync_params_and_buffers"], "distributed.DistributedDataParallel.__init__": ["torch.distributed.algorithms.join.Joinable.__init__", "warnings.warn", "<builtin>.list", "distributed.DistributedDataParallel._build_params_for_reducer", "torch.distributed.distributed_c10d._get_default_group", "<builtin>.any", "torch.distributed._verify_model_across_ranks", "<builtin>.isinstance", "torch.distributed._get_debug_mode", "os.environ.get", "<builtin>.len", "<builtin>.hasattr", "distributed.DistributedDataParallel._ddp_init_helper", "distributed.DistributedDataParallel._log_and_throw", "<builtin>.super", "distributed.DistributedDataParallel._build_param_to_name_mapping", "<builtin>.int", "torch._utils._get_device_index", "distributed.DistributedDataParallel._sync_params_and_buffers"], "distributed.DistributedDataParallel._log_and_throw": ["<builtin>.str"], "distributed.DistributedDataParallel._build_params_for_reducer": ["distributed.DistributedDataParallel._build_params_for_reducer.produces_sparse_gradient", "distributed.DistributedDataParallel._get_parameters", "<builtin>.set", "<builtin>.list"], "torch.distributed._verify_model_across_ranks": [], "distributed.DistributedDataParallel._sync_params_and_buffers": ["distributed.DistributedDataParallel._distributed_broadcast_coalesced", "<builtin>.len"], "torch.distributed._get_debug_mode": [], "distributed.DistributedDataParallel._build_param_to_name_mapping": ["<builtin>.range", "<builtin>.set", "distributed.DistributedDataParallel._log_and_throw", "<builtin>.len"], "distributed.DistributedDataParallel._ddp_init_helper": ["<builtin>.reversed", "distributed.DistributedDataParallel._passing_sync_batchnorm_handle", "torch.distributed.Reducer", "<builtin>.list", "torch.distributed._compute_bucket_assignment_by_size", "torch.distributed.Logger"], "distributed.DistributedDataParallel._distributed_broadcast_coalesced": ["torch.distributed._broadcast_coalesced"], "torch.distributed._compute_bucket_assignment_by_size": [], "torch.distributed.Reducer": [], "torch.distributed.Logger": [], "distributed.DistributedDataParallel._passing_sync_batchnorm_handle": ["<builtin>.isinstance", "distributed.DistributedDataParallel._log_and_throw"], "distributed.DistributedDataParallel.__getstate__": ["copy.copy", "distributed.DistributedDataParallel._check_default_group"], "distributed.DistributedDataParallel._check_default_group": ["distributed.DistributedDataParallel._log_and_throw", "torch.distributed.distributed_c10d._get_default_group"], "distributed.DistributedDataParallel.__setstate__": ["torch.distributed._get_debug_mode", "distributed.DistributedDataParallel._build_params_for_reducer", "distributed.DistributedDataParallel._build_param_to_name_mapping", "distributed.DistributedDataParallel._set_static_graph", "torch.distributed.distributed_c10d._get_default_group", "distributed.DistributedDataParallel._ddp_init_helper", "modules.Module.__dict__.setdefault", "<builtin>.super"], "modules.Module.__dict__.setdefault": [], "distributed.DistributedDataParallel._set_static_graph": ["warnings.warn"], "distributed.DistributedDataParallel._build_params_for_reducer.produces_sparse_gradient": ["<builtin>.isinstance"], "distributed.DistributedDataParallel._get_parameters": ["distributed.DistributedDataParallel._get_parameters.model_parameters"], "distributed.DistributedDataParallel._get_parameters.model_parameters": ["<builtin>.hasattr"], "distributed.DistributedDataParallel": ["contextlib.contextmanager"], "distributed.DistributedDataParallel.no_sync": [], "distributed.DistributedDataParallel.forward": ["torch.is_grad_enabled", "<builtin>.range", "distributed._tree_unflatten_with_rref", "distributed.DistributedDataParallel._sync_params", "distributed.DistributedDataParallel.to_kwargs", "distributed._tree_flatten_with_rref", "distributed._find_tensors", "<builtin>.list", "<builtin>.len", "torch.autograd.profiler.record_function", "torch.distributed.algorithms.join.Join.notify_join_context", "logging.info", "distributed.DistributedDataParallel._check_global_requires_backward_grad_sync", "<builtin>.enumerate", "torch.autograd.Function.apply", "torch.is_tensor"], "distributed.DistributedDataParallel._sync_params": ["distributed.DistributedDataParallel.will_sync_module_buffers", "torch.no_grad", "distributed.DistributedDataParallel._find_common_rank", "distributed.DistributedDataParallel._distributed_broadcast_coalesced"], "distributed.DistributedDataParallel.to_kwargs": ["<builtin>.tuple", "<builtin>.range", "distributed.DistributedDataParallel._recursive_to", "<builtin>.len"], "torch.is_tensor": [], "distributed.DistributedDataParallel.scatter": ["scatter_gather.scatter_kwargs"], "distributed.DistributedDataParallel._recursive_to": ["distributed.DistributedDataParallel._recursive_to.to_map"], "distributed.DistributedDataParallel._recursive_to.to_map": ["_functions._get_stream", "<builtin>.zip", "<builtin>.len", "<builtin>.list", "torch.cuda.device", "scatter_gather.is_namedtuple", "torch.cuda.current_stream", "<builtin>.type", "torch.device", "<builtin>.isinstance", "torch.cuda.stream", "<builtin>.map"], "_functions._get_stream": ["torch.cuda.Stream", "torch.cuda.device_count"], "scatter_gather.is_namedtuple": ["<builtin>.isinstance", "<builtin>.hasattr"], "distributed.DistributedDataParallel.gather": ["distributed.DistributedDataParallel.gather"], "distributed.DistributedDataParallel.train": ["<builtin>.super"], "distributed.DistributedDataParallel._schedule_shadow_all_reduce_for_fwd_pass": ["torch.distributed.all_reduce", "torch.zeros"], "distributed.DistributedDataParallel.will_sync_module_buffers": ["<builtin>.len"], "distributed.DistributedDataParallel._find_common_rank": ["torch.tensor", "torch.distributed.all_reduce", "distributed.DistributedDataParallel._log_and_throw"], "distributed.DistributedDataParallel.join": ["torch.distributed.algorithms.join.Join"], "torch.distributed.algorithms.join.Join": [], "distributed.DistributedDataParallel.join_hook": ["distributed._DDPJoinHook.__init__"], "distributed.DistributedDataParallel.join_device": [], "distributed.DistributedDataParallel.join_process_group": [], "distributed.DistributedDataParallel.register_comm_hook": ["torch.distributed._register_comm_hook", "distributed.DistributedDataParallel._check_comm_hook"], "distributed.DistributedDataParallel._check_comm_hook": ["inspect.signature", "distributed.DistributedDataParallel._log_and_throw", "<builtin>.callable"], "torch.distributed._register_comm_hook": [], "distributed.DistributedDataParallel._register_builtin_comm_hook": ["<builtin>.str", "torch.distributed._register_builtin_comm_hook"], "torch.distributed._register_builtin_comm_hook": [], "torch.distributed._broadcast_coalesced": [], "distributed.DistributedDataParallel._distributed_rank": ["torch.distributed.get_rank"], "distributed.DistributedDataParallel._set_params_and_buffers_to_ignore_for_model": [], "distributed.DistributedDataParallel._get_ddp_logging_data": [], "distributed.DistributedDataParallel._set_ddp_runtime_logging_sample_rate": ["distributed.DistributedDataParallel._log_and_throw"], "parallel_apply": [], "parallel_apply.get_a_var": ["<builtin>.isinstance", "<builtin>.map"], "torch.cuda._utils._get_device_index": [], "parallel_apply.parallel_apply._worker": ["parallel_apply.get_a_var", "torch.set_grad_enabled", "torch._utils.ExceptionWrapper", "torch.cuda.amp.autocast", "<builtin>.isinstance", "torch.cuda.device"], "torch.set_grad_enabled": [], "torch.cuda.amp.autocast": [], "replicate": [], "replicate._is_script_module": ["<builtin>.isinstance"], "replicate._is_script_method": ["<builtin>.isinstance"], "replicate._init_script_module": [], "replicate._is_jit_enabled": [], "replicate._replicatable_module": ["replicate._is_script_module", "replicate._is_jit_enabled", "replicate._replicatable_module", "replicate._replicatable_module.descendant_modules", "<builtin>.set", "<builtin>.all"], "replicate._replicatable_module.descendant_modules": ["<builtin>.next"], "replicate._broadcast_coalesced_reshape": ["comm.broadcast_coalesced", "_functions.Broadcast.apply", "<builtin>.range", "<builtin>.len"], "_functions.Broadcast.apply": [], "scatter_gather": [], "scatter_gather.scatter": ["scatter_gather.scatter.scatter_map"], "scatter_gather.scatter.scatter_map": ["<builtin>.map", "<builtin>.len", "<builtin>.zip", "<builtin>.list", "_functions.Scatter.apply", "<builtin>.isinstance", "<builtin>.type", "scatter_gather.is_namedtuple"], "_functions.Scatter.apply": [], "scatter_gather.gather.gather_map": ["<builtin>.map", "<builtin>.len", "<builtin>.ValueError", "_functions.Gather.apply", "<builtin>.zip", "scatter_gather.gather.gather_map", "<builtin>.isinstance", "<builtin>.type", "scatter_gather.is_namedtuple", "<builtin>.all"], "_functions.Gather.apply": [], "_functions.Broadcast.forward": ["<builtin>.tuple", "<builtin>.enumerate", "<builtin>.all", "comm.broadcast_coalesced", "<builtin>.len", "torch._utils._get_device_index"], "_functions.Broadcast.backward": ["torch.autograd.Function.apply"], "_functions.ReduceAddCoalesced.forward": ["<builtin>.range", "comm.reduce_add_coalesced", "<builtin>.len"], "_functions.ReduceAddCoalesced.backward": ["torch.autograd.Function.apply"], "_functions.Gather.forward": ["<builtin>.tuple", "<builtin>.all", "torch._utils._get_device_index", "comm.gather", "warnings.warn"], "_functions.Gather.backward": ["<builtin>.tuple", "torch.autograd.Function.apply"], "_functions.Scatter.forward": ["<builtin>.enumerate", "torch.cuda.device", "_functions._get_stream", "torch.cuda.current_stream", "comm.scatter", "torch._utils._get_device_index", "torch.cuda.is_available"], "_functions.Scatter.backward": ["torch.autograd.Function.apply"], "torch.nn.functional.avg_pool3d": [], "torch.nn.functional.adaptive_avg_pool2d": [], "torch.nn.functional.adaptive_avg_pool3d": [], "torch.nn.quantized.modules.utils._pair_from_first": [], "torch.ops.quantized.conv1d_prepack": [], "torch.ops.quantized.conv1d": [], "torch.nn.modules.utils._pair": [], "torch.ops.quantized.conv2d_prepack": [], "torch.ops.quantized.conv2d": [], "torch.nn.modules.utils._triple": [], "torch.ops.quantized.conv3d_prepack": [], "torch.ops.quantized.conv3d": [], "torch.ops.quantized.linear": [], "torch.nn.functional.max_pool1d": [], "torch.ops.quantized.celu": [], "torch._C._nn.leaky_relu": [], "torch._C._nn.leaky_relu_": [], "torch._C._nn.hardtanh_": [], "torch._C._nn.hardtanh": [], "torch._ops.ops.quantized.hardswish": [], "torch._ops.ops.quantized.threshold": [], "torch.ops.quantized.elu": [], "torch._C._nn.hardsigmoid": [], "functional.clamp": ["torch.clamp", "<builtin>.ValueError"], "functional.upsample": ["warnings.warn", "functional.interpolate", "functional.hardsigmoid"], "functional.upsample_bilinear": ["warnings.warn", "functional.interpolate", "functional.hardsigmoid"], "functional.upsample_nearest": ["warnings.warn", "functional.interpolate", "functional.hardsigmoid"], "clip_grad": [], "clip_grad.clip_grad_norm_": ["torch.logical_or", "torch.clamp", "<builtin>.float", "<builtin>.RuntimeError", "<builtin>.isinstance", "torch.stack", "<builtin>.len", "torch.tensor", "torch.max", "torch.norm"], "torch.logical_or": [], "clip_grad.clip_grad_norm": ["clip_grad.clip_grad_norm_", "warnings.warn"], "clip_grad.clip_grad_value_": ["<builtin>.float", "<builtin>.isinstance", "<builtin>.filter"], "clip_grad.clip_grad_value_.<lambda1>": [], "convert_parameters": [], "convert_parameters.parameters_to_vector": ["torch.cat", "convert_parameters._check_param_device"], "convert_parameters._check_param_device": ["<builtin>.TypeError"], "convert_parameters.vector_to_parameters": ["<builtin>.TypeError", "torch.typename", "convert_parameters._check_param_device", "<builtin>.isinstance"], "fusion": [], "fusion.fuse_conv_bn_eval": ["fusion.fuse_conv_bn_weights", "copy.deepcopy"], "fusion.fuse_conv_bn_weights": ["torch.zeros_like", "torch.rsqrt", "torch.ones_like", "<builtin>.len", "torch.nn.Parameter"], "torch.rsqrt": [], "fusion.fuse_linear_bn_eval": ["fusion.fuse_linear_bn_weights", "copy.deepcopy"], "fusion.fuse_linear_bn_weights": ["torch.nn.Parameter", "torch.zeros_like", "torch.rsqrt"], "init": ["init._make_deprecate"], "init.skip_init": ["<builtin>.issubclass", "inspect.signature", "<builtin>.RuntimeError"], "memory_format": [], "memory_format.convert_conv2d_weight_memory_format": ["<builtin>.isinstance", "memory_format.convert_conv2d_weight_memory_format"], "parametrizations": [], "parametrizations._SpectralNorm.__init__": ["parametrizations._SpectralNorm._reshape_weight_to_matrix", "parametrizations._SpectralNorm._power_method", "<builtin>.ValueError", "<builtin>.super", "<builtin>.IndexError", "modules.Module.register_buffer", "functional.normalize"], "parametrizations._SpectralNorm._reshape_weight_to_matrix": ["<builtin>.range"], "functional.normalize": ["torch.div", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "modules.Module.register_buffer": [], "parametrizations._SpectralNorm._power_method": ["torch.mv", "<builtin>.range", "functional.normalize"], "torch.autograd.no_grad": [], "parametrizations._SpectralNorm": ["torch.autograd.no_grad"], "torch.mv": [], "parametrizations._SpectralNorm.forward": ["parametrizations._SpectralNorm._reshape_weight_to_matrix", "parametrizations._SpectralNorm._power_method", "torch.mv", "torch.dot", "functional.normalize"], "torch.dot": [], "parametrizations._SpectralNorm.right_inverse": [], "parametrizations.spectral_norm": ["<builtin>.ValueError", "<builtin>.isinstance", "utils.parametrize.register_parametrization", "parametrizations._SpectralNorm.__init__", "<builtin>.hasattr", "<builtin>.getattr"], "utils.parametrize.register_parametrization": [], "parametrize": ["contextlib.contextmanager"], "parametrize.cached": [], "parametrize._register_parameter_or_buffer": ["torch.nn.modules.container.ModuleList.register_buffer", "<builtin>.isinstance", "torch.nn.modules.container.ModuleList.register_parameter"], "torch.nn.modules.container.ModuleList.register_parameter": [], "torch.nn.modules.container.ModuleList.register_buffer": [], "parametrize.ParametrizationList.__init__": ["<builtin>.super", "parametrize.ParametrizationList.__init__", "<builtin>.type", "parametrize._register_parameter_or_buffer", "<builtin>.isinstance", "torch.nn.parameter.Parameter", "<builtin>.reversed", "<builtin>.len", "<builtin>.ValueError", "torch.no_grad", "<builtin>.enumerate", "<builtin>.hasattr"], "parametrize.ParametrizationList.right_inverse": ["<builtin>.getattr", "torch.nn.modules.container.ModuleList.original.set_", "<builtin>.type", "<builtin>.isinstance", "<builtin>.reversed", "<builtin>.len", "<builtin>.ValueError", "torch.no_grad", "<builtin>.enumerate", "<builtin>.hasattr"], "torch.nn.modules.container.ModuleList.original.set_": [], "parametrize.ParametrizationList.forward": ["<builtin>.range", "<builtin>.list", "<builtin>.getattr"], "parametrize._inject_new_class": ["<builtin>.type"], "parametrize._inject_new_class.getstate": ["<builtin>.RuntimeError"], "parametrize._inject_property": ["<builtin>.setattr", "<builtin>.property", "<builtin>.hasattr", "torch.jit.unused"], "torch.jit.unused": [], "parametrize._inject_property.get_cached_parametrization": ["<builtin>.id"], "parametrize._inject_property.get_parametrized": ["<builtin>.RuntimeError", "torch.jit.is_scripting", "parametrize._inject_property.get_cached_parametrization", "torch._C._get_tracing_state"], "torch.jit.is_scripting": [], "parametrize._inject_property.set_original": [], "parametrize.register_parametrization": ["parametrize.ParametrizationList.__init__", "<builtin>.type", "parametrize.is_parametrized", "<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.ValueError", "parametrize._inject_new_class", "<builtin>.delattr", "parametrize._inject_property", "<builtin>.getattr", "torch.nn.modules.container.ModuleDict"], "parametrize.is_parametrized": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.getattr"], "torch.nn.modules.container.ModuleDict": [], "parametrize.remove_parametrizations": ["parametrize.is_parametrized", "parametrize._register_parameter_or_buffer", "<builtin>.isinstance", "torch.nn.parameter.Parameter", "<builtin>.ValueError", "torch.no_grad", "<builtin>.delattr", "<builtin>.getattr"], "prune": [], "prune.BasePruningMethod.__init__": [], "prune.BasePruningMethod.__call__": ["prune.BasePruningMethod.apply_mask", "<builtin>.setattr"], "prune.BasePruningMethod.apply_mask": ["<builtin>.getattr"], "prune.BasePruningMethod": ["abc.abstractmethod"], "prune.BasePruningMethod.compute_mask": [], "prune.BasePruningMethod.apply": ["prune.PruningContainer.compute_mask", "<builtin>.setattr", "<builtin>.getattr", "prune.BasePruningMethod.apply._get_composite_method", "<builtin>.isinstance", "torch.ones_like", "prune.BasePruningMethod.apply_mask"], "prune.BasePruningMethod.apply._get_composite_method": ["prune.PruningContainer.__init__", "prune.PruningContainer.add_pruning_method", "<builtin>.isinstance", "prune.BasePruningMethod.__init__"], "prune.PruningContainer.__init__": ["<builtin>.len", "<builtin>.tuple", "prune.PruningContainer.add_pruning_method", "<builtin>.isinstance"], "prune.PruningContainer.add_pruning_method": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.ValueError"], "prune.PruningContainer.compute_mask": ["prune.PruningContainer.compute_mask._combine_masks"], "prune.BasePruningMethod.prune": ["torch.ones_like", "prune.BasePruningMethod.compute_mask", "prune.PruningContainer.compute_mask"], "prune.BasePruningMethod.remove": ["prune.BasePruningMethod.apply_mask", "<builtin>.delattr", "<builtin>.hasattr", "<builtin>.setattr"], "prune.PruningContainer.__len__": ["<builtin>.len"], "prune.PruningContainer.__iter__": ["<builtin>.iter"], "prune.PruningContainer.__getitem__": [], "prune.PruningContainer.compute_mask._combine_masks": ["<builtin>.AttributeError", "<builtin>.len", "<builtin>.IndexError", "<builtin>.ValueError", "<builtin>.slice", "<builtin>.hasattr", "<builtin>.range"], "prune.Identity.compute_mask": [], "prune.Identity.apply": ["<builtin>.super"], "prune.RandomUnstructured.__init__": ["prune._validate_pruning_amount_init"], "prune._validate_pruning_amount_init": ["<builtin>.TypeError", "<builtin>.float", "<builtin>.isinstance", "<builtin>.ValueError"], "prune.RandomUnstructured.compute_mask": ["prune._validate_pruning_amount", "torch.rand_like", "torch.topk", "prune._compute_nparams_toprune"], "prune._compute_nparams_toprune": ["<builtin>.round", "<builtin>.int", "<builtin>.isinstance"], "prune._validate_pruning_amount": ["<builtin>.isinstance", "<builtin>.ValueError"], "prune.RandomUnstructured.apply": ["<builtin>.super"], "prune.L1Unstructured.__init__": ["prune._validate_pruning_amount_init"], "prune.L1Unstructured.compute_mask": ["prune._validate_pruning_amount", "torch.abs", "torch.topk", "prune._compute_nparams_toprune"], "prune.L1Unstructured.apply": ["<builtin>.super"], "prune.RandomStructured.__init__": ["prune._validate_pruning_amount_init"], "prune.RandomStructured.compute_mask": ["prune.RandomStructured.compute_mask.make_mask", "prune._validate_pruning_dim", "prune._compute_nparams_toprune", "prune._validate_pruning_amount", "prune._validate_structured_pruning"], "prune._validate_structured_pruning": ["<builtin>.len", "<builtin>.ValueError"], "prune._validate_pruning_dim": ["<builtin>.IndexError"], "prune.RandomStructured.compute_mask.make_mask": ["torch.zeros_like", "torch.kthvalue", "<builtin>.len", "<builtin>.slice", "torch.rand"], "torch.kthvalue": [], "prune.RandomStructured.apply": ["<builtin>.super"], "prune.LnStructured.__init__": ["prune._validate_pruning_amount_init"], "prune.LnStructured.compute_mask": ["torch.topk", "prune._validate_pruning_dim", "prune._compute_nparams_toprune", "prune.LnStructured.compute_mask.make_mask", "prune._validate_pruning_amount", "prune._compute_norm", "prune._validate_structured_pruning"], "prune._compute_norm": ["torch.norm", "<builtin>.list", "<builtin>.range"], "prune.LnStructured.compute_mask.make_mask": ["<builtin>.slice", "torch.zeros_like", "<builtin>.len"], "prune.LnStructured.apply": ["<builtin>.super"], "prune.CustomFromMask.__init__": [], "prune.CustomFromMask.compute_mask": [], "prune.CustomFromMask.apply": ["<builtin>.super"], "prune.identity": ["prune.Identity.apply"], "prune.random_unstructured": ["prune.RandomUnstructured.apply"], "prune.l1_unstructured": ["prune.L1Unstructured.apply"], "prune.random_structured": ["prune.RandomStructured.apply"], "prune.ln_structured": ["prune.LnStructured.apply"], "prune.global_unstructured": ["prune.PruningContainer.compute_mask", "prune.PruningContainer.__init__", "torch.nn.utils.parameters_to_vector", "<builtin>.getattr", "prune.PruningContainer.add_pruning_method", "<builtin>.isinstance", "prune.custom_from_mask", "<builtin>.TypeError", "torch.ones_like"], "torch.nn.utils.parameters_to_vector": [], "prune.custom_from_mask": ["prune.CustomFromMask.apply"], "prune.remove": ["<builtin>.isinstance", "<builtin>.ValueError"], "prune.is_pruned": ["<builtin>.isinstance"], "rnn.bind": ["rnn.PackedSequence.to.<lambda2>", "rnn.PackedSequence.to.<lambda1>"], "rnn.PackedSequence.to.<lambda2>": [], "rnn.PackedSequence.to.<lambda1>": [], "rnn.PackedSequence.__new__": ["rnn._packed_sequence_init_args", "<builtin>.super"], "rnn._packed_sequence_init_args": ["<builtin>.ValueError", "<builtin>.len", "rnn.invert_permutation", "<builtin>.isinstance"], "rnn.PackedSequence.pin_memory": ["rnn.bind", "<builtin>.type"], "rnn.PackedSequence.pin_memory.<lambda1>": [], "rnn.PackedSequence.pin_memory.<lambda2>": [], "rnn.PackedSequence.cuda": ["torch.tensor", "rnn.PackedSequence.to"], "rnn.PackedSequence.to": ["<builtin>.filter", "rnn.bind", "<builtin>.type"], "rnn.PackedSequence.cpu": ["torch.tensor", "rnn.PackedSequence.to"], "rnn.PackedSequence.double": ["rnn.PackedSequence.to"], "rnn.PackedSequence.float": ["rnn.PackedSequence.to"], "rnn.PackedSequence.half": ["rnn.PackedSequence.to"], "rnn.PackedSequence.long": ["rnn.PackedSequence.to"], "rnn.PackedSequence.int": ["rnn.PackedSequence.to"], "rnn.PackedSequence.short": ["rnn.PackedSequence.to"], "rnn.PackedSequence.char": ["rnn.PackedSequence.to"], "rnn.PackedSequence.byte": ["rnn.PackedSequence.to"], "rnn.PackedSequence.to.<lambda3>": [], "rnn.PackedSequence.is_cuda": [], "rnn.PackedSequence.is_pinned": [], "rnn.invert_permutation": ["torch.arange", "torch.empty_like"], "rnn._packed_sequence_init": ["rnn._packed_sequence_init_args"], "rnn.pack_padded_sequence": ["rnn._packed_sequence_init", "torch.as_tensor", "_VF._pack_padded_sequence", "<builtin>.isinstance", "torch._C._get_tracing_state", "warnings.warn", "torch.sort"], "torch.sort": [], "_VF._pack_padded_sequence": [], "rnn.pad_packed_sequence": ["_VF._pad_packed_sequence", "<builtin>.ValueError"], "_VF._pad_packed_sequence": [], "rnn.pad_sequence": ["torch._C._nn.pad_sequence"], "torch._C._nn.pad_sequence": [], "rnn.pack_sequence": ["rnn.pack_padded_sequence", "rnn.pad_sequence", "torch.as_tensor"], "spectral_norm": ["typing.TypeVar"], "spectral_norm.SpectralNorm.__init__": ["<builtin>.ValueError"], "spectral_norm.SpectralNorm.reshape_weight_to_matrix": ["<builtin>.range"], "spectral_norm.SpectralNorm.compute_weight": ["torch.no_grad", "<builtin>.getattr", "torch.nn.functional.normalize", "spectral_norm.SpectralNorm.reshape_weight_to_matrix", "<builtin>.range", "torch.dot", "torch.mv"], "torch.nn.functional.normalize": [], "spectral_norm.SpectralNorm.remove": ["torch.no_grad", "spectral_norm.SpectralNorm.compute_weight", "<builtin>.delattr", "torch.nn.Parameter"], "spectral_norm.SpectralNorm.__call__": ["spectral_norm.SpectralNorm.compute_weight", "<builtin>.setattr"], "spectral_norm.SpectralNorm._solve_v_and_rescale": ["torch.dot", "torch.mv", "torch.linalg.multi_dot"], "spectral_norm.SpectralNorm.apply": ["torch.no_grad", "spectral_norm.SpectralNormStateDictHook.__init__", "<builtin>.RuntimeError", "spectral_norm.SpectralNorm.__init__", "<builtin>.delattr", "<builtin>.ValueError", "torch.nn.functional.normalize", "<builtin>.isinstance", "spectral_norm.SpectralNorm.reshape_weight_to_matrix", "spectral_norm.SpectralNormLoadStateDictPreHook.__init__", "<builtin>.setattr"], "spectral_norm.SpectralNormStateDictHook.__init__": [], "spectral_norm.SpectralNormLoadStateDictPreHook.__init__": [], "spectral_norm.SpectralNormLoadStateDictPreHook.__call__": ["torch.no_grad", "<builtin>.all"], "spectral_norm.SpectralNormStateDictHook.__call__": ["<builtin>.RuntimeError"], "spectral_norm.spectral_norm": ["<builtin>.isinstance", "spectral_norm.SpectralNorm.apply"], "spectral_norm.remove_spectral_norm": ["<builtin>.isinstance"], "weight_norm": ["typing.TypeVar"], "weight_norm.WeightNorm.__init__": [], "weight_norm.WeightNorm.compute_weight": ["torch._weight_norm", "<builtin>.getattr"], "torch._weight_norm": [], "weight_norm.WeightNorm.apply": ["<builtin>.RuntimeError", "torch.norm_except_dim", "weight_norm.WeightNorm.__init__", "weight_norm.WeightNorm.compute_weight", "<builtin>.getattr", "<builtin>.ValueError", "torch.nn.parameter.Parameter", "<builtin>.setattr", "<builtin>.isinstance"], "torch.norm_except_dim": [], "weight_norm.WeightNorm.remove": ["<builtin>.delattr", "<builtin>.setattr", "torch.nn.parameter.Parameter", "weight_norm.WeightNorm.compute_weight"], "weight_norm.WeightNorm.__call__": ["<builtin>.setattr", "weight_norm.WeightNorm.compute_weight"], "weight_norm.weight_norm": ["weight_norm.WeightNorm.apply"], "weight_norm.remove_weight_norm": ["<builtin>.isinstance", "<builtin>.ValueError"], "conversion": ["click.option", "click.File", "click.argument", "click.command"], "click.command": [], "click.File": [], "click.argument": [], "conversion.caffe2_to_onnx": ["json.loads", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "click.BadParameter"], "click.BadParameter": [], "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model": [], "conversion.onnx_to_caffe2": ["onnx.ModelProto", "caffe2.python.onnx.backend.Caffe2Backend.onnx_graph_to_caffe2_net"], "onnx.ModelProto": [], "caffe2.python.onnx.backend.Caffe2Backend.onnx_graph_to_caffe2_net": [], "c2_ref_test": ["unittest.main"], "c2_ref_test.TestCaffe2Basic.test_dummy_name": ["caffe2.python._import_c_extension.DummyName"], "caffe2.python._import_c_extension.DummyName": [], "c2_ref_test.TestCaffe2Basic.test_check_arguments": ["onnx.helper.make_node", "caffe2.python._import_c_extension.Caffe2Backend", "caffe2.python.onnx.tests.test_utils.TestCase.assertRaisesRegex"], "caffe2.python._import_c_extension.Caffe2Backend": [], "onnx.helper.make_node": [], "caffe2.python.onnx.tests.test_utils.TestCase.assertRaisesRegex": [], "c2_ref_test.TestCaffe2Basic.test_dynamicslice_3inputs_graph": ["caffe2.python.onnx.backend.prepare", "onnx.helper.make_tensor_value_info", "onnx.helper.make_node", "onnx.helper.make_model", "onnx.helper.make_graph", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "numpy.array"], "onnx.helper.make_tensor_value_info": [], "onnx.helper.make_graph": [], "onnx.helper.make_model": [], "caffe2.python.onnx.backend.prepare": [], "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs": [], "c2_ref_test.TestCaffe2Basic.test_dynamicslice_4inputs_graph": ["caffe2.python.onnx.backend.prepare", "onnx.helper.make_tensor_value_info", "onnx.helper.make_node", "onnx.helper.make_model", "onnx.helper.make_graph", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "numpy.array"], "c2_ref_test.TestCaffe2Basic.test_relu_graph": ["caffe2.python.onnx.backend.prepare", "onnx.helper.make_tensor_value_info", "onnx.helper.make_node", "onnx.helper.make_model", "caffe2.python.onnx.backend.run_node", "onnx.helper.make_graph", "numpy.random.randn", "numpy.clip", "numpy.testing.assert_almost_equal"], "caffe2.python.onnx.backend.run_node": [], "c2_ref_test.TestCaffe2Basic.test_elementwiselinear": ["caffe2.python.onnx.backend.run_model", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "caffe2.proto.caffe2_pb2.NetDef", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.python.onnx.helper.c2_native_run_net", "caffe2.python.core.CreateOperator"], "caffe2.python.onnx.helper.c2_native_run_net": [], "caffe2.python.onnx.backend.run_model": [], "c2_ref_test.TestCaffe2Basic.test_initializer": ["caffe2.python.onnx.backend.prepare", "onnx.helper.make_tensor_value_info", "onnx.helper.make_node", "onnx.helper.make_model", "onnx.helper.make_tensor", "onnx.helper.make_graph", "numpy.tanh", "numpy.testing.assert_almost_equal", "c2_ref_test.TestCaffe2Basic.test_initializer.sigmoid", "numpy.array"], "onnx.helper.make_tensor": [], "c2_ref_test.TestCaffe2Basic.test_initializer.sigmoid": ["numpy.exp"], "c2_ref_test.TestCaffe2Basic.test_reducemean": ["caffe2.python.onnx.backend.run_model", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "caffe2.proto.caffe2_pb2.NetDef", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.python.onnx.helper.c2_native_run_net", "caffe2.python.core.CreateOperator"], "c2_ref_test.TestCaffe2Basic.test_upsample": ["caffe2.python.onnx.backend.run_model", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "caffe2.proto.caffe2_pb2.NetDef", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.python.onnx.helper.c2_native_run_net", "caffe2.python.core.CreateOperator"], "c2_ref_test.TestCaffe2Basic.test_fc": ["caffe2.python.onnx.backend.run_model", "numpy.zeros", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "caffe2.proto.caffe2_pb2.NetDef", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.python.onnx.helper.c2_native_run_net", "caffe2.python.core.CreateOperator"], "c2_ref_test.TestCaffe2Basic.test_gemm": ["onnx.helper.make_node", "numpy.transpose", "numpy.random.random", "numpy.dot", "caffe2.python.onnx.backend.run_node", "numpy.random.randn", "numpy.testing.assert_almost_equal"], "c2_ref_test.TestCaffe2Basic.test_gemm_conversion": ["onnx.helper.make_tensor_value_info", "onnx.helper.make_node", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "caffe2.python._import_c_extension.Caffe2Backend"], "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual": [], "c2_ref_test.TestCaffe2Basic.test_mergedim": ["caffe2.python.onnx.backend.run_model", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "caffe2.proto.caffe2_pb2.NetDef", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.python.onnx.helper.c2_native_run_net", "caffe2.python.core.CreateOperator"], "c2_ref_test.TestCaffe2Basic.test_tensor_filling_ops": ["onnx.helper.make_tensor", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "numpy.random.randn", "caffe2.python.onnx.helper.c2_native_run_op", "numpy.testing.assert_almost_equal", "caffe2.python.onnx.backend.Caffe2Backend._create_tensor_filling_op", "<builtin>.len"], "caffe2.python.onnx.backend.Caffe2Backend._create_tensor_filling_op": [], "caffe2.python.onnx.helper.c2_native_run_op": [], "c2_ref_test.TestCaffe2Basic.test_tensor_filling_ops_c_backend": ["caffe2.proto.caffe2_pb2.OperatorDef", "onnx.helper.make_tensor", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "numpy.random.randn", "caffe2.python.onnx.helper.c2_native_run_op", "numpy.testing.assert_almost_equal", "<builtin>.len", "caffe2.python._import_c_extension.Caffe2Backend"], "c2_ref_test.TestCaffe2Basic.test_concat": ["caffe2.python.onnx.backend.run_model", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "caffe2.proto.caffe2_pb2.NetDef", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "<builtin>.range", "caffe2.python.onnx.helper.c2_native_run_net", "caffe2.python.core.CreateOperator"], "c2_ref_test.TestCaffe2Basic.test_slice": ["caffe2.python.onnx.backend.run_model", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "caffe2.proto.caffe2_pb2.NetDef", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.python.onnx.helper.c2_native_run_net", "numpy.array", "caffe2.python.core.CreateOperator"], "c2_ref_test.TestCaffe2Basic.test_cast": ["caffe2.python.onnx.backend.run_model", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "caffe2.proto.caffe2_pb2.NetDef", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.python.onnx.helper.c2_native_run_net", "caffe2.python.core.CreateOperator"], "c2_ref_test.TestCaffe2End2End.setUp": ["caffe2.python.models.download.ModelDownloader"], "caffe2.python.models.download.ModelDownloader": [], "c2_ref_test.TestCaffe2End2End._test_net": ["caffe2.python.onnx.backend.prepare", "caffe2.python.onnx.frontend.caffe2_net_to_onnx_model", "<builtin>.str", "caffe2.python.onnx.tests.test_utils.TestCase.skipTest", "numpy.random.seed", "<builtin>.print", "numpy.random.randn", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.python.onnx.helper.c2_native_run_net"], "caffe2.python.onnx.tests.test_utils.TestCase.skipTest": [], "c2_ref_test.TestCaffe2End2End": ["os.environ.get", "unittest.skipIf"], "c2_ref_test.TestCaffe2End2End.test_alexnet": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_resnet50": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_vgg16": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_zfnet": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_inception_v1": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_inception_v2": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_squeezenet": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_densenet121": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_bvlc_googlenet": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_bvlc_reference_caffenet": ["c2_ref_test.TestCaffe2End2End._test_net"], "c2_ref_test.TestCaffe2End2End.test_bvlc_reference_rcnn_ilsvrc13": ["c2_ref_test.TestCaffe2End2End._test_net"], "conversion_test": [], "conversion_test.TestConversion._run_command": ["textwrap.dedent", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "traceback.format_exception", "click.testing.CliRunner"], "click.testing.CliRunner": [], "traceback.format_exception": [], "conversion_test.TestConversion.test_caffe2_to_onnx": ["tempfile.NamedTemporaryFile", "numpy.zeros", "<builtin>.len", "caffe2.python.brew.relu", "onnx.ModelProto", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "conversion_test.TestConversion._run_command", "caffe2.python.model_helper.ModelHelper"], "conversion_test.TestConversion.test_caffe2_to_onnx_value_info": ["tempfile.NamedTemporaryFile", "<builtin>.len", "caffe2.python.brew.relu", "onnx.ModelProto", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "conversion_test.TestConversion._run_command", "caffe2.python.model_helper.ModelHelper", "caffe2.python.onnx.tests.test_utils.TestCase.assertRaisesRegex"], "conversion_test.TestConversion": ["unittest.skip"], "conversion_test.TestConversion.test_onnx_to_caffe2": ["tempfile.NamedTemporaryFile", "<builtin>.sum", "numpy.zeros", "<builtin>.list", "<builtin>.len", "<builtin>.set", "onnx.helper.make_tensor_value_info", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "conversion_test.TestConversion._run_command", "caffe2.proto.caffe2_pb2.NetDef", "onnx.helper.make_node", "onnx.helper.make_graph", "onnx.helper.make_tensor", "onnx.helper.make_model"], "conversion_test.TestConversion.test_onnx_to_caffe2_zipfile": ["tempfile.NamedTemporaryFile", "zipfile.ZipFile", "numpy.testing.assert_allclose", "numpy.matmul", "onnx.helper.make_tensor_value_info", "caffe2.python.onnx.backend.prepare_zip_archive", "onnx.helper.make_node", "onnx.helper.make_graph", "onnx.helper.make_tensor", "onnx.helper.make_model", "numpy.random.rand"], "caffe2.python.onnx.backend.prepare_zip_archive": [], "conversion_test.TestConversion._make_fake_if_op": ["onnx.helper.make_node", "onnx.helper.make_graph", "onnx.helper.make_tensor", "onnx.helper.make_tensor_value_info"], "conversion_test.TestConversion.test_onnx_to_caffe2_if": ["numpy.testing.assert_allclose", "numpy.matmul", "onnx.helper.make_opsetid", "onnx.helper.make_tensor_value_info", "caffe2.python.onnx.backend.prepare", "conversion_test.TestConversion._make_fake_if_op", "onnx.helper.make_node", "onnx.helper.make_graph", "onnx.helper.make_tensor", "onnx.helper.make_model", "numpy.random.rand"], "onnx.helper.make_opsetid": [], "conversion_test.TestConversion._make_fake_loop_op": ["onnx.helper.make_node", "onnx.helper.make_graph", "onnx.helper.make_tensor", "onnx.helper.make_tensor_value_info"], "conversion_test.TestConversion.test_onnx_to_caffe2_loop": ["conversion_test.TestConversion._make_fake_loop_op", "<builtin>.range", "numpy.testing.assert_allclose", "numpy.matmul", "onnx.helper.make_tensor_value_info", "caffe2.python.onnx.backend.prepare", "onnx.helper.make_node", "onnx.helper.make_graph", "onnx.helper.make_tensor", "onnx.helper.make_model", "numpy.random.rand"], "conversion_test.TestConversion.test_convert_end2end": ["tempfile.NamedTemporaryFile", "<builtin>.range", "numpy.testing.assert_almost_equal", "numpy.matmul", "onnx.ModelProto", "caffe2.python.onnx.backend.run_model", "numpy.random.randn", "caffe2.proto.caffe2_pb2.NetDef", "conversion_test.TestConversion._run_command", "json.dumps", "caffe2.python.core.CreateOperator", "caffe2.python.onnx.helper.c2_native_run_net"], "helper_test": ["unittest.main"], "helper_test.TestCaffe2Basic.test_dummy_name": ["<builtin>.set", "caffe2.python._import_c_extension.DummyName", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "caffe2.python.onnx.tests.test_utils.TestCase.assertFalse", "<builtin>.range"], "caffe2.python.onnx.tests.test_utils.TestCase.assertFalse": [], "onnx_backend_test": ["unittest.main", "caffe2.python.core.SetEnginePref", "<builtin>.globals"], "ssa_test": [], "ssa_test.TestFrontendSSAConversion.test_ssa": ["caffe2.python.onnx.helper.c2_native_run_net", "numpy.random.randn", "caffe2.python.core.CreateOperator", "caffe2.python.onnx.frontend.Caffe2Frontend._ssa_rewrite", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "caffe2.python.onnx.tests.test_utils.TestCase.assertSameOutputs", "caffe2.proto.caffe2_pb2.NetDef"], "caffe2.python.onnx.frontend.Caffe2Frontend._ssa_rewrite": [], "ssa_test.TestFrontendSSAConversion.test_idempotence": ["copy.deepcopy", "caffe2.python.core.CreateOperator", "caffe2.python.onnx.frontend.Caffe2Frontend._ssa_rewrite", "caffe2.python.onnx.tests.test_utils.TestCase.assertEqual", "caffe2.proto.caffe2_pb2.NetDef"], "test_utils": [], "test_utils.TestCase.setUp": ["numpy.random.seed"], "test_utils.TestCase.assertSameOutputs": ["<builtin>.zip", "numpy.testing.assert_almost_equal", "<builtin>.len", "unittest.TestCase.assertEqual"], "test_utils.TestCase.add_test_case": ["<builtin>.setattr", "<builtin>.hasattr", "<builtin>.ValueError"], "add_test": ["operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main", "<builtin>.range", "benchmark_caffe2.generate_c2_test", "operator_benchmark.generate_pt_gradient_test", "operator_benchmark.generate_pt_test"], "add_test.AddBenchmark.init": ["benchmark_caffe2.Caffe2BenchmarkBase.set_module_name", "benchmark_caffe2.Caffe2BenchmarkBase.tensor", "operator_benchmark.TorchBenchmarkBase.set_module_name", "operator_benchmark.TorchBenchmarkBase.auto_set", "torch.rand"], "add_test.AddBenchmark.forward": ["caffe2.python.core.CreateOperator", "torch.add"], "batch_box_cox_test": ["operator_benchmark.config_list", "<builtin>.range", "benchmark_caffe2.generate_c2_test", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs", "hypothesis.strategies.composite", "unittest.main"], "batch_box_cox_test.BatchBoxCoxBenchmark.init": ["benchmark_caffe2.Caffe2BenchmarkBase.set_module_name", "benchmark_caffe2.Caffe2BenchmarkBase.tensor"], "batch_box_cox_test.BatchBoxCoxBenchmark.forward": ["caffe2.python.core.CreateOperator"], "batch_gather_test": ["benchmark_caffe2.generate_c2_test", "operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs"], "batch_gather_test.BatchGatherBenchmark.init": ["benchmark_caffe2.Caffe2BenchmarkBase.set_module_name", "numpy.random.seed", "numpy.random.randint", "benchmark_caffe2.Caffe2BenchmarkBase.tensor", "benchmark_caffe2.Caffe2BenchmarkBase.feed_tensor"], "batch_gather_test.BatchGatherBenchmark.forward": ["caffe2.python.core.CreateOperator"], "clip_ranges_test": ["operator_benchmark.benchmark_runner.main", "benchmark_caffe2.generate_c2_test", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "caffe2.python.dyndep.InitOpsLibrary", "<builtin>.range", "operator_benchmark.generate_pt_test", "torch.ops.load_library"], "clip_ranges_test.ClipRangesBenchmark.init": ["benchmark_caffe2.Caffe2BenchmarkBase.set_module_name", "benchmark_caffe2.Caffe2BenchmarkBase.tensor", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand"], "clip_ranges_test.ClipRangesBenchmark.forward": ["caffe2.python.core.CreateOperator", "torch.ops.fb.clip_ranges"], "concat_test": ["benchmark_caffe2.generate_c2_test", "operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list"], "concat_test.<list8>.<list4>.<list1>.<lambda1>": [], "concat_test.<lambda1>": ["random.randint"], "concat_test.<list8>.<list5>.<list1>.<lambda1>": [], "concat_test.<list8>.<list6>.<list1>.<lambda1>": [], "concat_test.<list8>.<list7>.<list1>.<lambda1>": [], "concat_test.<list8>.<list8>.<list1>.<lambda1>": [], "concat_test.<list8>.<list9>.<list1>.<lambda1>": [], "concat_test.<list14>.<list1>.<list1>.<lambda1>": [], "concat_test.<list14>.<list2>.<list1>.<lambda1>": [], "concat_test.<list14>.<list3>.<list1>.<lambda1>": [], "concat_test.<list14>.<list4>.<list1>.<lambda1>": [], "concat_test.ConcatBenchmark.init": ["<builtin>.callable", "<builtin>.type", "<builtin>.range", "benchmark_caffe2.Caffe2BenchmarkBase.set_module_name", "random.seed", "benchmark_caffe2.Caffe2BenchmarkBase.tensor"], "concat_test.ConcatBenchmark.forward": ["caffe2.python.core.CreateOperator"], "matmul_test": ["benchmark_caffe2.generate_c2_test", "<builtin>.range", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "matmul_test.MatMulBenchmark.init": ["benchmark_caffe2.Caffe2BenchmarkBase.set_module_name", "benchmark_caffe2.Caffe2BenchmarkBase.tensor", "torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "matmul_test.MatMulBenchmark.forward": ["caffe2.python.core.CreateOperator", "torch.matmul"], "quantile_op_test": ["<builtin>.range", "operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main", "benchmark_caffe2.generate_c2_test", "operator_benchmark.cross_product_configs"], "quantile_op_test.QuantileOpBenchmark.init": ["benchmark_caffe2.Caffe2BenchmarkBase.set_module_name", "<builtin>.range", "benchmark_caffe2.Caffe2BenchmarkBase.tensor"], "quantile_op_test.QuantileOpBenchmark.forward": ["caffe2.python.core.CreateOperator"], "replace_nan_test": ["benchmark_caffe2.generate_c2_test", "operator_benchmark.benchmark_runner.main", "<builtin>.range", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "replace_nan_test.ReplaceNaNBenchmark.init": ["benchmark_caffe2.Caffe2BenchmarkBase.tensor", "benchmark_caffe2.Caffe2BenchmarkBase.set_module_name"], "replace_nan_test.ReplaceNaNBenchmark.forward": ["caffe2.python.core.CreateOperator"], "repeat_benchmark": ["<builtin>.print", "time.time", "repeat_benchmark.pt_repeat_n_times", "repeat_benchmark.generate_data_for_repeat"], "repeat_benchmark.generate_data_for_repeat": ["torch.randn", "numpy.prod", "<builtin>.zip"], "repeat_benchmark.pt_repeat": [], "repeat_benchmark.pt_repeat_n_times": ["<builtin>.zip", "repeat_benchmark.pt_repeat", "<builtin>.range"], "add_test.AddmmBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "operator_benchmark.TorchBenchmarkBase.auto_set", "torch.rand"], "add_test.AddmmBenchmark.forward": ["torch.addmm"], "add_test.AddrBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "operator_benchmark.TorchBenchmarkBase.auto_set", "torch.rand"], "add_test.AddrBenchmark.forward": ["torch.addr"], "add_test.AddbmmBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "operator_benchmark.TorchBenchmarkBase.auto_set", "torch.rand"], "add_test.AddbmmBenchmark.forward": ["torch.addbmm"], "as_strided_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "as_strided_test.As_stridedBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "as_strided_test.As_stridedBenchmark.forward": ["torch.as_strided"], "batchnorm_test": ["operator_benchmark.cross_product_configs", "batchnorm_test.cudnn_benchmark_configs", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_gradient_test", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "batchnorm_test.cudnn_benchmark_configs": ["<builtin>.any", "<builtin>.dict"], "batchnorm_test.BatchNormBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.auto_set", "torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "batchnorm_test.BatchNormBenchmark.forward": ["torch.nn.functional.batch_norm", "torch.backends.cudnn.flags"], "batchnorm_test.BatchNorm1dBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.auto_set", "torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "batchnorm_test.BatchNorm1dBenchmark.forward": ["torch.nn.functional.batch_norm", "torch.backends.cudnn.flags"], "binary_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "binary_test.BinaryOpBcastBenchmark.init": ["torch.randn"], "binary_test.BinaryOpBcastBenchmark.forward": [], "binary_test.copy": [], "binary_test.BinaryOpBenchmark.init": ["torch.randn"], "binary_test.BinaryOpBenchmark.forward": [], "bmm_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "bmm_test.BmmBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name", "operator_benchmark.TorchBenchmarkBase.auto_set"], "bmm_test.BmmBenchmark.forward": ["torch.bmm"], "cat_test": ["operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "cat_test.<list8>.<list4>.<list1>.<lambda1>": [], "cat_test.<lambda1>": ["random.randint"], "cat_test.<list8>.<list5>.<list1>.<lambda1>": [], "cat_test.<list8>.<list6>.<list1>.<lambda1>": [], "cat_test.<list8>.<list7>.<list1>.<lambda1>": [], "cat_test.<list8>.<list8>.<list1>.<lambda1>": [], "cat_test.<list8>.<list9>.<list1>.<lambda1>": [], "cat_test.<list14>.<list1>.<list1>.<lambda1>": [], "cat_test.<list14>.<list2>.<list1>.<lambda1>": [], "cat_test.<list14>.<list3>.<list1>.<lambda1>": [], "cat_test.<list14>.<list4>.<list1>.<lambda1>": [], "cat_test.CatBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "<builtin>.callable", "torch.rand", "torch.empty", "<builtin>.type", "random.seed", "<builtin>.range"], "cat_test.CatBenchmark.forward": ["torch.cat"], "channel_shuffle_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "channel_shuffle_test.ChannelSHuffleBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "channel_shuffle_test.ChannelSHuffleBenchmark.forward": ["torch.channel_shuffle"], "chunk_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "chunk_test.ChunkBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "chunk_test.ChunkBenchmark.forward": ["torch.chunk"], "torch.ops.fb.clip_ranges": [], "configs": ["operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "configs.remove_cuda": [], "conv_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test", "unittest.main"], "conv_test.Conv1dBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.auto_set", "torch.rand", "torch.nn.Conv1d", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "conv_test.Conv1dBenchmark.forward": [], "conv_test.ConvTranspose1dBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand", "torch.nn.ConvTranspose1d"], "conv_test.ConvTranspose1dBenchmark.forward": [], "conv_test.Conv2dBenchmark.init": ["torch.rand", "torch.nn.Conv2d", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "conv_test.Conv2dBenchmark.forward": [], "conv_test.ConvTranspose2dBenchmark.init": ["torch.rand", "torch.nn.ConvTranspose2d", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "conv_test.ConvTranspose2dBenchmark.forward": [], "conv_test.Conv3dBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand", "torch.nn.Conv3d"], "conv_test.Conv3dBenchmark.forward": [], "conv_test.ConvTranspose3dBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand", "torch.nn.ConvTranspose3d"], "conv_test.ConvTranspose3dBenchmark.forward": [], "diag_test": ["operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "diag_test.DiagBenchmark.init": ["torch.rand", "torch.tensor", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "diag_test.DiagBenchmark.forward": ["torch.diag"], "embeddingbag_test": ["operator_benchmark.generate_pt_gradient_test", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "embeddingbag_test.EmbeddingBagBenchmark.init": ["torch.cat", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.nn.EmbeddingBag", "numpy.random.seed", "numpy.random.randint", "torch.LongTensor", "torch.tensor"], "embeddingbag_test.EmbeddingBagBenchmark.forward": [], "cpp_extension_test": [], "cpp_extension_test.TestConsumeOp.test_jit_consume_op": ["torch.sum", "<builtin>.str", "unittest.TestCase.assertEqual", "torch.jit.trace", "torch.rand"], "cpp_extension_test.TestConsumeOp.test_jit_consume_op.foo": ["<builtin>.range", "torch.sum", "torch.ops.operator_benchmark._consume"], "cpp_extension_test.TestConsumeOp.test_jit_consume_op_for_list_input": ["torch.allclose", "<builtin>.all", "<builtin>.str", "unittest.TestCase.assertTrue", "torch.chunk", "unittest.TestCase.assertEqual", "torch.jit.trace", "<builtin>.zip", "torch.rand"], "cpp_extension_test.TestConsumeOp.test_jit_consume_op_for_list_input.foo": ["<builtin>.range", "torch.ops.operator_benchmark._consume", "torch.chunk"], "torch.utils.cpp_extension.CppExtension": [], "setuptools.setup": [], "fill_test": ["torch.testing.get_all_device_types", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main"], "fill_test.Fill_Benchmark.init": ["torch.zeros", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "fill_test.Fill_Benchmark.forward": [], "gather_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main"], "gather_test.GatherBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand", "numpy.random.randint", "torch.tensor", "numpy.random.seed"], "gather_test.GatherBenchmark.forward": ["torch.gather"], "gelu_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "gelu_test.GeluBenchmark.init": ["torch.rand"], "gelu_test.GeluBenchmark.forward": ["torch.nn.functional.gelu"], "torch.nn.functional.gelu": [], "groupnorm_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs"], "groupnorm_test.GroupNormBenchmark.init": ["torch.rand"], "groupnorm_test.GroupNormBenchmark.forward": ["torch.nn.functional.group_norm"], "hardsigmoid_test": ["operator_benchmark.config_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.cross_product_configs"], "hardsigmoid_test.HardsigmoidBenchmark.init": ["torch.rand"], "hardsigmoid_test.HardsigmoidBenchmark.forward": [], "hardswish_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.op_list"], "hardswish_test.HardswishBenchmark.init": ["torch.rand"], "hardswish_test.HardswishBenchmark.forward": [], "index_select_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main"], "index_select_test.IndexSelectBenchmark.init": ["numpy.random.randint", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand", "numpy.random.seed", "torch.tensor"], "index_select_test.IndexSelectBenchmark.forward": ["torch.index_select"], "torch.index_select": [], "instancenorm_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main"], "instancenorm_test.InstanceNormBenchmark.init": ["torch.rand"], "instancenorm_test.InstanceNormBenchmark.forward": ["torch.nn.functional.instance_norm"], "interpolate_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list"], "interpolate_test.InterpolateBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.auto_set", "torch.randint", "operator_benchmark.TorchBenchmarkBase.set_module_name", "<builtin>.ValueError"], "interpolate_test.InterpolateBenchmark.forward": ["torch.nn.functional.interpolate"], "layernorm_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "layernorm_test.LayerNormBenchmark.init": ["torch.rand"], "layernorm_test.LayerNormBenchmark.forward": ["torch.nn.functional.layer_norm"], "linear_prepack_fp16_test": ["operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "linear_prepack_fp16_test.LinearPrepackFP16Benchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand"], "linear_prepack_fp16_test.LinearPrepackFP16Benchmark.forward": ["torch.ops.quantized.linear_prepack_fp16"], "linear_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "linear_test.LinearBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand", "torch.nn.Linear"], "linear_test.LinearBenchmark.forward": [], "linear_unpack_fp16_test": ["operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "linear_unpack_fp16_test.LinearUnpackFP16Benchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.ops.quantized.linear_prepack_fp16", "torch.rand"], "linear_unpack_fp16_test.LinearUnpackFP16Benchmark.forward": ["torch.ops.quantized.linear_unpack_fp16"], "torch.ops.quantized.linear_unpack_fp16": [], "nan_to_num_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.op_list", "operator_benchmark.benchmark_runner.main", "<builtin>.range"], "nan_to_num_test.ReplaceNaNBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.randn", "<builtin>.float"], "nan_to_num_test.ReplaceNaNBenchmark.forward": [], "pool_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.op_list"], "pool_test.Pool1dBenchmark.init": ["torch.rand"], "pool_test.Pool1dBenchmark.forward": [], "pool_test.<list25>.<list3>.<lambda1>": [], "pool_test.<lambda1>": ["torch.nn.FractionalMaxPool2d", "torch.nn.FractionalMaxPool3d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool3d"], "pool_test.<list25>.<list4>.<lambda1>": [], "pool_test.Pool2dBenchmark.init": ["torch.rand"], "pool_test.Pool2dBenchmark.forward": [], "pool_test.<list39>.<list3>.<lambda1>": [], "pool_test.<list39>.<list4>.<lambda1>": [], "pool_test.Pool3dBenchmark.init": ["torch.rand"], "pool_test.Pool3dBenchmark.forward": [], "qactivation_test": ["torch.nn.ReLU", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.op_list"], "qactivation_test.QActivationBenchmarkBase._setup": ["torch.rand", "torch.quantize_per_tensor", "<builtin>.list", "<builtin>.range"], "qactivation_test.QActivationBenchmarkBase.init": ["qactivation_test.QActivationBenchmarkBase._setup"], "qactivation_test.QActivationBenchmark.forward": [], "qactivation_test.QActivationScaleZeroPointBenchmark.forward": [], "qarithmetic_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_tests_from_op_list"], "qarithmetic_test._QFunctionalBinaryArithmeticBenchmarkBase.setup": ["torch.rand", "<builtin>.range", "torch.nn.quantized.QFunctional", "torch.quantize_per_tensor", "<builtin>.list"], "qarithmetic_test.QFunctionalBenchmark.init": ["<builtin>.super"], "qarithmetic_test.QFunctionalBenchmark.forward": [], "qarithmetic_test.QFunctionalScalarBenchmark.init": ["<builtin>.super"], "qarithmetic_test.QFunctionalScalarBenchmark.forward": [], "qbatchnorm_test": ["operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main"], "qbatchnorm_test.QBatchNormBenchmark.init": ["torch.quantize_per_tensor", "qbatchnorm_test.QBatchNormBenchmark._init", "torch.rand"], "qbatchnorm_test.QBatchNormBenchmark._init": [], "qbatchnorm_test.QBatchNormBenchmark.forward": [], "qbatchnorm_test.QBatchNorm1dBenchmark._init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand", "operator_benchmark.TorchBenchmarkBase.auto_set"], "qbatchnorm_test.QBatchNorm1dBenchmark.forward": ["torch.ops.quantized.batch_norm1d"], "qbatchnorm_test.QBatchNorm2dBenchmark._init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand", "operator_benchmark.TorchBenchmarkBase.auto_set"], "qbatchnorm_test.QBatchNorm2dBenchmark.forward": ["torch.ops.quantized.batch_norm2d"], "qcat_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "qcat_test.QCatBenchmark.init": ["<builtin>.range", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.quantize_per_tensor", "torch.rand", "torch.nn.quantized.QFunctional", "<builtin>.tuple"], "qcat_test.QCatBenchmark.forward": [], "qcomparators_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs"], "qcomparators_test.QComparatorBenchmark.init": ["torch.rand", "torch.quantize_per_tensor", "<builtin>.list", "<builtin>.range"], "qcomparators_test.QComparatorBenchmark.forward": ["torch.tensor"], "qconv_test": ["pt.configs.remove_cuda", "operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main"], "qconv_test.QConv1dBenchmark.init": ["torch.quantize_per_tensor", "torch.tensor", "torch.nn.quantized.Conv1d", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.randn"], "qconv_test.QConv1dBenchmark.forward": [], "qconv_test.QConv2dBenchmark.init": ["torch.quantize_per_tensor", "torch.tensor", "torch.nn.quantized.Conv2d", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.randn"], "qconv_test.QConv2dBenchmark.forward": [], "qembeddingbag_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main"], "qembeddingbag_test.QEmbeddingBagBenchmark.init": ["torch.nn.quantized.EmbeddingBag", "torch.LongTensor", "torch.cat", "numpy.random.seed", "torch.tensor", "operator_benchmark.TorchBenchmarkBase.set_module_name", "numpy.random.randint"], "qembeddingbag_test.QEmbeddingBagBenchmark.forward": [], "qembedding_bag_lookups_test": ["operator_benchmark.generate_pt_tests_from_op_list", "torch.ops.load_library", "operator_benchmark.op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main", "<builtin>.range"], "qembedding_bag_lookups_test.get_pruned_weights_and_mapping": ["numpy.random.uniform", "torch.from_numpy", "torch.ops.fb.embedding_bag_rowwise_prune"], "torch.ops.fb.embedding_bag_rowwise_prune": [], "qembedding_bag_lookups_test.EmbedddingBag4BitRowwiseOffsetsTest.init": ["torch.testing._internal.common_quantization.lengths_to_offsets", "torch.cat", "<builtin>.len", "qembedding_bag_lookups_test.get_pruned_weights_and_mapping", "torch.tensor", "torch.ops.quantized.embedding_bag_4bit_prepack", "numpy.random.random_sample", "numpy.random.randint", "torch.from_numpy", "numpy.sum", "numpy.random.uniform"], "torch.testing._internal.common_quantization.lengths_to_offsets": [], "torch.ops.quantized.embedding_bag_4bit_prepack": [], "qembedding_bag_lookups_test.EmbedddingBag4BitRowwiseOffsetsTest.forward": [], "qembedding_bag_lookups_test.EmbedddingBagByteRowwiseOffsetsTest.init": ["torch.testing._internal.common_quantization.lengths_to_offsets", "torch.cat", "<builtin>.len", "qembedding_bag_lookups_test.get_pruned_weights_and_mapping", "torch.tensor", "numpy.random.random_sample", "numpy.random.randint", "torch.from_numpy", "numpy.sum", "numpy.random.uniform", "torch.ops.quantized.embedding_bag_byte_prepack"], "torch.ops.quantized.embedding_bag_byte_prepack": [], "qembedding_bag_lookups_test.EmbedddingBagByteRowwiseOffsetsTest.forward": [], "qembedding_pack_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main"], "qembedding_pack_test.EmbeddingBagFloatToFusedBase.init": ["numpy.random.random_sample", "torch.from_numpy"], "qembedding_pack_test.EmbeddingBagFloatToFusedBase.forward": [], "qembedding_pack_test.EmbeddingBagFusedToFloatBase.init": ["torch.randn"], "qembedding_pack_test.EmbeddingBagFusedToFloatBase.forward": [], "qgroupnorm_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "qgroupnorm_test.QGroupNormBenchmark.init": ["torch.rand", "torch.quantize_per_tensor"], "qgroupnorm_test.QGroupNormBenchmark.forward": ["torch.ops.quantized.group_norm"], "qinstancenorm_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main"], "qinstancenorm_test.QInstanceNormBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "qinstancenorm_test.QInstanceNormBenchmark.forward": ["torch.ops.quantized.instance_norm"], "qinterpolate_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "qinterpolate_test.QInterpolateBenchmark.init": ["torch.quantize_per_tensor", "torch.rand", "<builtin>.list", "operator_benchmark.TorchBenchmarkBase.set_module_name", "<builtin>.range"], "qinterpolate_test.QInterpolateBenchmark.forward": ["torch.nn.functional.interpolate"], "qlayernorm_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main"], "qlayernorm_test.QLayerNormBenchmark.init": ["torch.rand", "torch.quantize_per_tensor"], "qlayernorm_test.QLayerNormBenchmark.forward": ["torch.ops.quantized.layer_norm"], "qlinear_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main", "pt.configs.remove_cuda"], "qlinear_test._QLinearBenchmarkBase.init": ["torch.randn", "torch.quantize_per_tensor", "torch.tensor"], "qlinear_test._QLinearBenchmarkBase.forward": [], "qlinear_test.QLinearBenchmark.init": ["operator_benchmark.TorchBenchmarkBase.set_module_name", "<builtin>.super", "torch.nn.quantized.Linear"], "qlinear_test.QDynamicLinearBenchmark.init": ["torch.nn.quantized.dynamic.Linear", "operator_benchmark.TorchBenchmarkBase.set_module_name", "<builtin>.super"], "qobserver_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.op_list", "operator_benchmark.benchmark_runner.main"], "qobserver_test.QObserverBenchmark.init": ["torch.rand"], "qobserver_test.QObserverBenchmark.forward": [], "qobserver_test.QObserverBenchmarkCalculateQparams.init": ["torch.rand"], "qobserver_test.QObserverBenchmarkCalculateQparams.forward": [], "qpool_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main"], "qpool_test._QPool2dBenchmarkBase.setup": ["torch.rand", "torch.quantize_per_tensor"], "qpool_test._QPool2dBenchmarkBase.forward": [], "qpool_test.QMaxPool2dBenchmark.init": ["<builtin>.super", "torch.nn.MaxPool2d"], "qpool_test.QAvgPool2dBenchmark.init": ["<builtin>.super", "torch.nn.AvgPool2d"], "qpool_test.QAdaptiveAvgPool2dBenchmark.init": ["torch.nn.AdaptiveAvgPool2d", "<builtin>.super"], "qrnn_test": ["operator_benchmark.config_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_test"], "qrnn_test.LSTMBenchmark.init": ["torch.randn", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.nn.Sequential", "torch.nn.LSTM", "torch.quantization.quantize_dynamic"], "qrnn_test.LSTMBenchmark.forward": [], "qtensor_method_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs"], "qtensor_method_test._QMethodBenchmarkBase.init": ["<builtin>.range", "<builtin>.list", "torch.rand", "torch.quantize_per_tensor"], "qtensor_method_test.QMethodTensorInputCopyBenchmark.forward": [], "quantization_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.cross_product_configs", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_gradient_tests_from_op_list", "operator_benchmark.op_list", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.config_list"], "quantization_test.QuantizePerTensorBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.nn.quantized.Quantize", "torch.nn.quantized.DeQuantize"], "quantization_test.QuantizePerTensorBenchmark.forward": [], "quantization_test.QuantizePerChannelBenchmark.init": ["torch.rand", "quantization_test.QuantizePerChannelBenchmark.init.dequant", "torch.tensor", "torch.quantize_per_channel", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "quantization_test.QuantizePerChannelBenchmark.init.dequant": [], "quantization_test.QuantizePerChannelBenchmark.forward": ["torch.quantize_per_channel", "quantization_test.QuantizePerChannelBenchmark.init.dequant"], "quantization_test.FakeQuantizeBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.quantization.FakeQuantize"], "quantization_test.FakeQuantizeBenchmark.forward": [], "quantization_test.fakeQuantizePerTensorLearnableKernel": ["torch._fake_quantize_learnable_per_tensor_affine"], "quantization_test.fakeQuantizePerTensorOriginalKernel": ["torch.fake_quantize_per_tensor_affine"], "quantization_test.FakeQuantizePerTensorBaseOpBenchmark.init": ["torch.rand", "torch.tensor", "torch.nn.Parameter", "operator_benchmark.TorchBenchmarkBase.auto_set"], "quantization_test.FakeQuantizePerTensorBaseOpBenchmark.forward": [], "quantization_test.fakeQuantizePerChannelLearnableKernel": ["torch._fake_quantize_learnable_per_channel_affine"], "quantization_test.fakeQuantizePerChannelOriginalKernel": ["torch.fake_quantize_per_channel_affine"], "quantization_test.FakeQuantizePerChannelOpBenchmark.init": ["torch.rand", "operator_benchmark.TorchBenchmarkBase.auto_set", "torch.ones", "torch.nn.Parameter", "torch.zeros"], "quantization_test.FakeQuantizePerChannelOpBenchmark.forward": [], "qunary_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_tests_from_op_list"], "qunary_test.QUnaryOpBenchmark.init": ["torch.quantize_per_tensor", "torch.rand"], "qunary_test.QUnaryOpBenchmark.forward": [], "qunary_test.QTopkOpBenchmark.init": ["torch.quantize_per_tensor", "operator_benchmark.TorchBenchmarkBase.set_module_name", "torch.rand"], "qunary_test.QTopkOpBenchmark.forward": ["torch.topk"], "remainder_test": ["operator_benchmark.op_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_tests_from_op_list"], "remainder_test.RemainderOpBenchmark.init": ["torch.rand"], "remainder_test.RemainderOpBenchmark.forward": [], "softmax_test": ["operator_benchmark.op_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.cross_product_configs", "operator_benchmark.config_list"], "softmax_test.SoftmaxBenchmark.init": ["torch.rand"], "softmax_test.SoftmaxBenchmark.forward": [], "split_test": ["operator_benchmark.cross_product_configs", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main"], "split_test.SplitBenchmark.init": ["<builtin>.int", "torch.rand", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "split_test.SplitBenchmark.forward": ["torch.split"], "stack_test": ["<builtin>.list", "<builtin>.range", "operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.generate_pt_test"], "stack_test.StackBenchmark.init": ["<builtin>.type", "<builtin>.range", "torch.rand", "random.seed", "operator_benchmark.TorchBenchmarkBase.set_module_name", "<builtin>.callable"], "stack_test.StackBenchmark.forward": ["torch.stack"], "sum_test": ["operator_benchmark.generate_pt_test", "operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs"], "sum_test.SumBenchmark.init": ["torch.rand", "torch.empty", "operator_benchmark.TorchBenchmarkBase.set_module_name"], "sum_test.SumBenchmark.forward": [], "tensor_to_test": ["operator_benchmark.benchmark_runner.main", "operator_benchmark.cross_product_configs", "operator_benchmark.generate_pt_test"], "tensor_to_test.FloatToHalfTensorConversionBenchmark.init": ["torch.rand"], "tensor_to_test.FloatToHalfTensorConversionBenchmark.forward": [], "tensor_to_test.HalfToFloatTensorConversionBenchmark.init": ["torch.rand"], "tensor_to_test.HalfToFloatTensorConversionBenchmark.forward": [], "unary_test": ["operator_benchmark.generate_pt_tests_from_op_list", "operator_benchmark.benchmark_runner.main", "operator_benchmark.config_list", "operator_benchmark.cross_product_configs", "operator_benchmark.op_list"], "unary_test.UnaryOpBenchmark.init": ["torch.rand"], "unary_test.UnaryOpBenchmark.forward": [], "unary_test.bernoulli_": [], "unary_test.cauchy_": [], "unary_test.digamma_": [], "unary_test.exponential_": [], "unary_test.normal_": [], "unary_test.random_": [], "unary_test.sign_": [], "unary_test.uniform_": [], "unary_test.half_": [], "unary_test.long_": [], "adadelta": [], "adadelta.Adadelta.__init__": ["<builtin>.ValueError", "<builtin>.dict", "<builtin>.super"], "adadelta.Adadelta": ["torch.no_grad"], "adadelta.Adadelta.step": ["<builtin>.RuntimeError", "_functional.adadelta", "<builtin>.len", "torch.enable_grad", "torch.zeros_like"], "torch.enable_grad": [], "_functional.adadelta": ["torch._foreach_div_", "torch._foreach_addcmul_", "torch._foreach_add_", "torch._foreach_sqrt_", "torch._foreach_mul_", "torch._foreach_add", "<builtin>.zip"], "adadelta.Adadelta.zero_grad": ["collections.defaultdict", "torch._foreach_zero_"], "adadelta.Adadelta.zero_grad.<lambda1>": ["collections.defaultdict"], "torch._foreach_zero_": [], "adagrad": [], "adagrad.Adagrad.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.dict", "torch.full_like"], "adagrad.Adagrad.share_memory": [], "adagrad.Adagrad": ["torch.no_grad"], "adagrad.Adagrad.step": ["torch.enable_grad", "_functional.adagrad"], "_functional.adagrad": ["_functional._make_sparse", "torch._foreach_addcmul_", "torch._foreach_addcdiv_", "<builtin>.enumerate", "torch._foreach_add_", "torch._foreach_mul", "<builtin>.zip", "torch._foreach_sqrt", "torch._foreach_add", "<builtin>.RuntimeError"], "adamax": [], "adamax.Adamax.__init__": ["<builtin>.ValueError", "<builtin>.dict", "<builtin>.super"], "adamax.Adamax": ["torch.no_grad"], "adamax.Adamax.step": ["<builtin>.len", "torch.zeros_like", "_functional.adamax", "<builtin>.RuntimeError", "torch.enable_grad"], "_functional.adamax": ["torch._foreach_addcdiv_", "torch._foreach_add_", "torch.max", "<builtin>.zip", "torch.cat", "torch._foreach_mul_", "torch.amax", "<builtin>.enumerate"], "adamax.Adamax.zero_grad": ["collections.defaultdict", "torch._foreach_zero_"], "adamax.Adamax.zero_grad.<lambda1>": ["collections.defaultdict"], "adamw": [], "adamw.AdamW.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.dict"], "adamw.AdamW.__setstate__": ["optimizer.Optimizer.param_groups.setdefault", "<builtin>.super"], "optimizer.Optimizer.param_groups.setdefault": [], "adamw.AdamW": ["torch.no_grad"], "adamw.AdamW.step": ["torch._foreach_add", "torch._foreach_add_", "torch._foreach_addcmul_", "<builtin>.len", "torch._foreach_maximum", "torch.zeros_like", "torch._foreach_div_", "torch._foreach_sqrt", "torch._foreach_mul_", "math.sqrt", "torch.enable_grad", "torch._foreach_addcdiv_", "<builtin>.RuntimeError", "_functional.adamw"], "torch._foreach_mul_": [], "torch._foreach_add_": [], "torch._foreach_addcmul_": [], "torch._foreach_maximum": [], "torch._foreach_sqrt": [], "torch._foreach_div_": [], "torch._foreach_add": [], "torch._foreach_addcdiv_": [], "adamw.AdamW.zero_grad": ["torch._foreach_zero_", "collections.defaultdict"], "adamw.AdamW.zero_grad.<lambda1>": ["collections.defaultdict"], "adam": [], "adam.Adam.__init__": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.dict"], "adam.Adam.__setstate__": ["<builtin>.super", "optimizer.Optimizer.param_groups.setdefault"], "adam.Adam": ["torch.no_grad"], "adam.Adam.step": ["torch.enable_grad", "torch._foreach_maximum", "torch._foreach_add", "torch._foreach_sqrt", "torch._foreach_add_", "torch._foreach_div_", "torch._foreach_mul_", "torch._foreach_addcdiv_", "math.sqrt", "torch.zeros_like", "torch._foreach_addcmul_", "<builtin>.RuntimeError", "<builtin>.len", "_functional.adam"], "adam.Adam.zero_grad": ["collections.defaultdict", "torch._foreach_zero_"], "adam.Adam.zero_grad.<lambda1>": ["collections.defaultdict"], "asgd": [], "asgd.ASGD.__init__": ["<builtin>.dict", "<builtin>.ValueError", "<builtin>.super"], "asgd.ASGD": ["torch.no_grad"], "asgd.ASGD.step": ["_functional.asgd", "<builtin>.len", "torch.enable_grad", "<builtin>.RuntimeError", "torch.zeros_like", "<builtin>.max", "<builtin>.zip", "math.pow"], "_functional.asgd": ["torch._foreach_add_", "<builtin>.range", "<builtin>.len", "math.pow", "torch._foreach_mul_", "<builtin>.max", "<builtin>.enumerate"], "asgd.ASGD.zero_grad": ["torch._foreach_zero_", "collections.defaultdict"], "asgd.ASGD.zero_grad.<lambda1>": ["collections.defaultdict"], "nadam": [], "nadam.NAdam.__init__": ["<builtin>.dict", "<builtin>.ValueError", "<builtin>.super"], "nadam.NAdam": ["torch.no_grad"], "nadam.NAdam.step": ["torch.enable_grad", "<builtin>.len", "<builtin>.RuntimeError", "torch.zeros_like", "_functional.nadam", "<builtin>.zip"], "_functional.nadam": ["torch._foreach_div_", "torch._foreach_add", "torch._foreach_addcmul_", "torch._foreach_addcdiv_", "torch._foreach_sqrt", "torch._foreach_add_", "<builtin>.zip", "torch._foreach_mul_", "math.sqrt", "<builtin>.enumerate"], "nadam.NAdam.zero_grad": ["torch._foreach_zero_", "collections.defaultdict"], "nadam.NAdam.zero_grad.<lambda1>": ["collections.defaultdict"], "radam": [], "radam.RAdam.__init__": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.dict"], "radam.RAdam": ["torch.no_grad"], "radam.RAdam.step": ["<builtin>.len", "torch.enable_grad", "<builtin>.RuntimeError", "_functional.radam", "torch.zeros_like"], "_functional.radam": ["torch.ones_like", "torch._foreach_addcmul_", "torch._foreach_addcdiv_", "torch._foreach_sqrt", "torch._foreach_add_", "torch._foreach_div", "<builtin>.zip", "torch._foreach_mul_", "math.sqrt", "<builtin>.enumerate"], "radam.RAdam.zero_grad": ["collections.defaultdict", "torch._foreach_zero_"], "radam.RAdam.zero_grad.<lambda1>": ["collections.defaultdict"], "rmsprop": [], "rmsprop.RMSprop.__init__": ["<builtin>.ValueError", "<builtin>.dict", "<builtin>.super"], "rmsprop.RMSprop.__setstate__": ["<builtin>.super", "optimizer.Optimizer.param_groups.setdefault"], "rmsprop.RMSprop": ["torch.no_grad"], "rmsprop.RMSprop.step": ["<builtin>.len", "torch.enable_grad", "torch._foreach_sqrt_", "torch._foreach_mul_", "<builtin>.RuntimeError", "torch._foreach_addcdiv_", "torch._foreach_addcmul_", "torch._foreach_addcmul", "torch._foreach_sqrt", "torch._foreach_add_", "torch.zeros_like", "_functional.rmsprop"], "torch._foreach_addcmul": [], "torch._foreach_sqrt_": [], "rmsprop.RMSprop.zero_grad": ["collections.defaultdict", "torch._foreach_zero_"], "rmsprop.RMSprop.zero_grad.<lambda1>": ["collections.defaultdict"], "rprop": [], "rprop.Rprop.__init__": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.dict"], "rprop.Rprop": ["torch.no_grad"], "rprop.Rprop.step": ["torch.enable_grad", "<builtin>.range", "<builtin>.RuntimeError", "torch._foreach_addcmul_", "torch._foreach_mul_", "<builtin>.len", "torch._foreach_mul", "torch.zeros_like", "_functional.rprop"], "torch._foreach_mul": [], "rprop.Rprop.zero_grad": ["collections.defaultdict", "torch._foreach_zero_"], "rprop.Rprop.zero_grad.<lambda1>": ["collections.defaultdict"], "sgd": [], "sgd.SGD.__init__": ["<builtin>.ValueError", "<builtin>.dict", "<builtin>.super"], "sgd.SGD.__setstate__": ["<builtin>.super", "optimizer.Optimizer.param_groups.setdefault"], "sgd.SGD": ["torch.no_grad"], "sgd.SGD.step": ["torch._foreach_add", "<builtin>.len", "torch._foreach_mul_", "<builtin>.RuntimeError", "torch.clone", "torch.enable_grad", "torch._foreach_add_", "<builtin>.range", "_functional.sgd", "<builtin>.zip"], "sgd.SGD.zero_grad": ["collections.defaultdict", "torch._foreach_zero_"], "sgd.SGD.zero_grad.<lambda1>": ["collections.defaultdict"], "_functional": [], "_functional._make_sparse": ["torch.empty_like", "torch.sparse_coo_tensor"], "torch._foreach_div": [], "is_from_package": [], "is_from_package.is_from_package": ["_mangling.is_mangled", "<builtin>.type"], "_mangling.is_mangled": ["re.match", "<builtin>.bool"], "trace_dependencies": [], "trace_dependencies.trace_dependencies": ["sys.setprofile", "<builtin>.set", "<builtin>.list"], "trace_dependencies.trace_dependencies.record_used_modules": ["<builtin>.getattr"], "sys.setprofile": [], "cov_json": [], "cov_json.get_json_report": ["tool.clang_coverage.merge", "run.gcc_run", "run.clang_run", "util.utils.check_compiler_type", "init.detect_compiler_type", "tool.clang_coverage.export"], "init.detect_compiler_type": [], "util.utils.check_compiler_type": [], "run.clang_run": ["util.utils.get_raw_profiles_folder", "util.utils.print_time", "utils.get_oss_binary_file", "time.time", "tool.clang_coverage.run_target", "os.path.join"], "tool.clang_coverage.merge": [], "tool.clang_coverage.export": [], "run.gcc_run": ["tool.gcc_coverage.run_target", "util.utils.print_time", "utils.get_oss_binary_file", "time.time"], "init.initialization": ["init.empty_list_if_none", "util.utils_init.add_arguments_utils", "argparse.ArgumentParser", "init.parse_arguments", "init.add_arguments_oss", "utils.clean_up_gcda", "util.utils.clean_up", "os.path.join", "init.print_init_info", "init.get_test_list", "util.utils.remove_file", "util.utils_init.create_folders"], "util.utils_init.create_folders": [], "util.utils_init.add_arguments_utils": [], "init.add_arguments_oss": [], "init.parse_arguments": ["util.utils_init.get_options"], "utils.clean_up_gcda": ["utils.get_gcda_files", "util.utils.remove_file"], "util.utils.clean_up": [], "init.get_test_list": ["util.utils.raise_no_test_found_exception", "utils.get_oss_binary_folder", "init.get_test_list_by_type", "init.get_python_run_only"], "init.empty_list_if_none": [], "init.print_init_info": ["util.utils.print_log", "typing.cast", "utils.get_llvm_tool_path", "utils.get_oss_binary_folder", "utils.detect_compiler_type", "utils.get_pytorch_folder"], "util.utils.remove_file": [], "util.utils_init.get_options": [], "init.get_test_list_by_type": ["os.walk", "util.setting.Test", "utils.get_oss_binary_folder"], "utils.get_oss_binary_folder": ["os.path.join", "utils.get_pytorch_folder"], "util.setting.Test": [], "init.get_python_run_only": ["utils.detect_compiler_type", "os.walk", "utils.get_oss_binary_folder"], "util.utils.raise_no_test_found_exception": [], "init.gcc_export_init": ["util.utils.create_folder", "util.utils.remove_folder"], "util.utils.remove_folder": [], "util.utils.create_folder": [], "utils.detect_compiler_type": ["subprocess.check_output", "<builtin>.RuntimeError", "os.environ.get", "caffe2.fb.code_coverage.tool.package.fbcode.utils.detect_compiler_type", "utils.check_compiler_type", "package.oss.utils.detect_compiler_type"], "utils.get_pytorch_folder": ["os.path.abspath", "os.path.join", "os.environ.get"], "util.utils.print_log": [], "utils.get_llvm_tool_path": ["os.environ.get"], "util.utils.get_raw_profiles_folder": [], "utils.get_oss_binary_file": ["os.path.join", "utils.get_oss_binary_folder"], "tool.clang_coverage.run_target": [], "util.utils.print_time": [], "tool.gcc_coverage.run_target": [], "utils.get_oss_shared_library": ["os.listdir", "os.path.join", "utils.get_pytorch_folder"], "utils.get_gcda_files": ["os.path.join", "utils.get_pytorch_folder", "subprocess.check_output", "os.path.isdir"], "utils.run_oss_python_test": ["subprocess.check_call", "util.utils.print_error", "utils.get_oss_binary_folder"], "subprocess.check_call": [], "util.utils.print_error": [], "clang_coverage": [], "clang_coverage.create_corresponding_folder": ["util.utils.create_folder", "util.utils.convert_to_relative_path", "os.path.join"], "util.utils.convert_to_relative_path": [], "clang_coverage.run_target": ["util.utils.print_log", "utils.run_cpp_test", "oss.utils.run_oss_python_test"], "oss.utils.run_oss_python_test": [], "utils.run_cpp_test": ["subprocess.check_call", "util.utils.print_error"], "clang_coverage.merge_target": ["subprocess.check_call", "utils.get_tool_path_by_platform", "util.utils.print_log"], "utils.get_tool_path_by_platform": ["oss.utils.get_llvm_tool_path", "caffe2.fb.code_coverage.tool.package.fbcode.utils.get_llvm_tool_path"], "clang_coverage.export_target": ["utils.get_tool_path_by_platform", "<builtin>.Exception", "util.utils.print_log", "os.system"], "clang_coverage.merge": ["util.utils.convert_to_relative_path", "os.walk", "util.utils.related_to_test_list", "util.utils.print_time", "util.utils.replace_extension", "<builtin>.print", "clang_coverage.merge_target", "time.time", "os.path.join", "clang_coverage.create_corresponding_folder", "util.utils.get_raw_profiles_folder"], "util.utils.related_to_test_list": [], "util.utils.replace_extension": [], "clang_coverage.export": ["util.utils.convert_to_relative_path", "oss.utils.get_oss_binary_file", "os.walk", "clang_coverage.export_target", "util.utils.related_to_test_list", "util.utils.check_platform_type", "util.utils.print_time", "util.utils.replace_extension", "<builtin>.print", "time.time", "caffe2.fb.code_coverage.tool.package.fbcode.utils.get_fbcode_binary_folder", "util.utils.get_test_name_from_whole_path", "os.path.join", "oss.utils.get_oss_shared_library", "clang_coverage.create_corresponding_folder"], "util.utils.check_platform_type": [], "caffe2.fb.code_coverage.tool.package.fbcode.utils.get_fbcode_binary_folder": [], "util.utils.get_test_name_from_whole_path": [], "oss.utils.get_oss_binary_file": [], "oss.utils.get_oss_shared_library": [], "gcc_coverage": [], "gcc_coverage.update_gzip_dict": ["<builtin>.str"], "gcc_coverage.run_target": ["time.time", "util.utils.print_time", "oss.utils.run_oss_python_test", "util.utils.print_log", "utils.run_cpp_test"], "gcc_coverage.export": ["time.time", "util.utils.print_time", "oss.utils.get_gcda_files", "gcc_coverage.update_gzip_dict", "os.rename", "subprocess.check_output", "os.path.join", "os.path.basename", "subprocess.check_call"], "oss.utils.get_gcda_files": [], "print_report": [], "print_report.key_by_percentage": [], "print_report.key_by_name": [], "print_report.is_intrested_file": [], "print_report.is_this_type_of_tests": [], "print_report.print_test_by_type": ["print_report.is_this_type_of_tests", "<builtin>.print"], "print_report.print_test_condition": ["<builtin>.print", "print_report.print_test_by_type"], "print_report.line_oriented_report": ["os.path.join", "<builtin>.print", "print_report.print_test_condition", "<builtin>.sorted", "<builtin>.open"], "print_report.print_file_summary": ["<builtin>.print"], "print_report.print_file_oriented_report": ["print_report.print_test_condition", "<builtin>.str", "<builtin>.print", "print_report.print_file_summary"], "print_report.file_oriented_report": ["os.path.join", "<builtin>.len", "<builtin>.round", "<builtin>.open", "print_report.print_file_oriented_report"], "print_report.get_html_ignored_pattern": [], "print_report.html_oriented_report": ["os.path.join", "subprocess.check_call", "print_report.get_html_ignored_pattern", "utils.get_pytorch_folder"], "summarize_jsons": ["<builtin>.set"], "summarize_jsons.transform_file_name": ["<builtin>.len", "utils.get_pytorch_folder"], "summarize_jsons.is_intrested_file": ["<builtin>.any", "utils.get_pytorch_folder"], "summarize_jsons.get_json_obj": ["json.loads", "<builtin>.open"], "summarize_jsons.parse_json": ["parser.llvm_coverage_parser.LlvmCoverageParser", "util.utils.detect_compiler_type", "parser.gcov_coverage_parser.GcovCoverageParser", "<builtin>.RuntimeError", "<builtin>.print", "summarize_jsons.get_json_obj"], "util.utils.detect_compiler_type": [], "parser.llvm_coverage_parser.LlvmCoverageParser": [], "parser.gcov_coverage_parser.GcovCoverageParser": [], "summarize_jsons.parse_jsons": ["util.utils.related_to_test_list", "util.utils.detect_compiler_type", "os.path.join", "util.utils.print_error", "summarize_jsons.update_coverage", "summarize_jsons.parse_json", "os.walk"], "summarize_jsons.update_coverage": ["summarize_jsons.is_intrested_file", "<builtin>.set", "summarize_jsons.transform_file_name"], "summarize_jsons.update_set": [], "summarize_jsons.summarize_jsons": ["print_report.file_oriented_report", "time.time", "print_report.line_oriented_report", "util.utils.detect_compiler_type", "summarize_jsons.parse_jsons", "print_report.html_oriented_report", "util.utils.print_time", "summarize_jsons.update_set"], "oss.utils.get_llvm_tool_path": [], "caffe2.fb.code_coverage.tool.package.fbcode.utils.get_llvm_tool_path": [], "setting": ["os.path.realpath", "os.path.join", "os.path.dirname"], "setting.Test.__init__": [], "utils.convert_time": ["<builtin>.round", "<builtin>.int"], "utils.print_time": ["utils.convert_time", "<builtin>.open", "<builtin>.print", "os.path.join", "time.time"], "utils.print_log": ["<builtin>.print", "<builtin>.open", "os.path.join"], "utils.print_error": ["<builtin>.print", "<builtin>.open", "os.path.join"], "utils.remove_file": ["os.path.exists", "os.remove"], "utils.remove_folder": ["shutil.rmtree"], "utils.create_folder": ["os.makedirs"], "utils.clean_up": ["sys.exit", "utils.remove_folder"], "utils.convert_to_relative_path": ["<builtin>.RuntimeError", "<builtin>.len"], "utils.replace_extension": [], "utils.related_to_test_list": [], "utils.get_raw_profiles_folder": ["os.environ.get", "os.path.join"], "caffe2.fb.code_coverage.tool.package.fbcode.utils.detect_compiler_type": [], "package.oss.utils.detect_compiler_type": ["os.environ.get", "subprocess.check_output", "<builtin>.RuntimeError"], "utils.check_compiler_type": ["<builtin>.Exception"], "utils.get_test_name_from_whole_path": [], "utils.check_platform_type": ["<builtin>.Exception"], "utils.check_test_type": ["<builtin>.Exception"], "utils.raise_no_test_found_exception": ["<builtin>.RuntimeError"], "utils_init": [], "utils_init.remove_files": ["utils.remove_file", "os.path.join"], "utils_init.create_folders": ["utils.get_raw_profiles_folder", "utils.create_folder"], "utils_init.add_arguments_utils": [], "utils_init.have_option": [], "utils_init.get_options": ["<builtin>.any", "<builtin>.vars", "setting.Option"], "setting.Option": [], "DummyData": [], "DummyData.DummyData.__init__": ["DummyData.DummyData.__init__.generate_input", "torch.randint"], "DummyData.DummyData.__init__.generate_input": ["<builtin>.list", "random.randint", "numpy.array", "torch.from_numpy", "<builtin>.float", "random.shuffle", "<builtin>.int", "<builtin>.range"], "DummyData.DummyData.__len__": ["<builtin>.len"], "DummyData.DummyData.__getitem__": [], "CPUMetric": [], "CPUMetric.CPUMetric.__init__": [], "CPUMetric.CPUMetric.record_start": ["time.time"], "CPUMetric.CPUMetric.record_end": ["time.time"], "CPUMetric.CPUMetric.elapsed_time": ["<builtin>.RuntimeError"], "CUDAMetric": [], "CUDAMetric.CUDAMetric.__init__": [], "CUDAMetric.CUDAMetric.record_start": ["torch.cuda.Event", "torch.cuda.device"], "CUDAMetric.CUDAMetric.record_end": ["torch.cuda.Event", "torch.cuda.device"], "CUDAMetric.CUDAMetric.elapsed_time": ["<builtin>.RuntimeError"], "CUDAMetric.CUDAMetric.synchronize": [], "MetricBase": [], "MetricBase.MetricBase.__init__": [], "MetricBase.MetricBase": ["abc.abstractmethod"], "MetricBase.MetricBase.record_start": [], "MetricBase.MetricBase.record_end": [], "MetricBase.MetricBase.elapsed_time": [], "MetricBase.MetricBase.get_name": [], "MetricBase.MetricBase.get_end": [], "MetricsLogger": [], "MetricsLogger.MetricsLogger.__init__": [], "MetricsLogger.MetricsLogger.record_start": ["<builtin>.RuntimeError", "CUDAMetric.CUDAMetric", "CPUMetric.CPUMetric"], "CUDAMetric.CUDAMetric": [], "CPUMetric.CPUMetric": [], "MetricsLogger.MetricsLogger.record_end": ["<builtin>.RuntimeError"], "MetricsLogger.MetricsLogger.clear_metrics": [], "MetricsLogger.MetricsLogger.get_metrics": [], "MetricsLogger.MetricsLogger.get_processed_metrics": ["<builtin>.isinstance"], "ProcessedMetricsPrinter": [], "ProcessedMetricsPrinter.ProcessedMetricsPrinter.print_data_frame": ["tabulate.tabulate", "<builtin>.print", "ProcessedMetricsPrinter.ProcessedMetricsPrinter.get_data_frame"], "ProcessedMetricsPrinter.ProcessedMetricsPrinter.get_data_frame": ["statistics.stdev", "pandas.DataFrame", "<builtin>.sorted", "statistics.mean", "statistics.variance"], "ProcessedMetricsPrinter.ProcessedMetricsPrinter.combine_processed_metrics": [], "statistics.mean": [], "statistics.variance": [], "statistics.stdev": [], "ProcessedMetricsPrinter.ProcessedMetricsPrinter.print_metrics": ["ProcessedMetricsPrinter.ProcessedMetricsPrinter.print_data_frame", "ProcessedMetricsPrinter.ProcessedMetricsPrinter.combine_processed_metrics"], "ProcessedMetricsPrinter.ProcessedMetricsPrinter.save_to_file": [], "DummyModel": [], "DummyModel.DummyModel.__init__": ["<builtin>.super", "<builtin>.range", "torch.nn.EmbeddingBag", "torch.nn.Sequential", "torch.nn.Linear"], "DummyModel.DummyModel.forward": ["torch.nn.functional.softmax"], "server": [], "server.ParameterServerBase.__init__": ["metrics.MetricsLogger.MetricsLogger"], "metrics.MetricsLogger.MetricsLogger": [], "server.ParameterServerBase": ["abc.abstractmethod"], "server.ParameterServerBase.process_gradient": [], "server.ParameterServerBase.average_gradient": [], "server.ParameterServerBase.reset_state": [], "server.ParameterServerBase.record_start": [], "server.ParameterServerBase.record_end": [], "server.ParameterServerBase.record_straggler_start": [], "server.ParameterServerBase.record_straggler_end": [], "server.ParameterServerBase.record_batch_start": [], "server.ParameterServerBase.record_batch_end": [], "server.ParameterServerBase.record_method": [], "server.ParameterServerBase.record_method.decorator": ["functools.wraps"], "server.ParameterServerBase.record_method.decorator.wrapper": ["time.time"], "server.ParameterServerBase.get_metrics": [], "server.ParameterServerBase.clear_metrics": [], "server.AverageParameterServer.__init__": ["threading.Lock", "<builtin>.super"], "server.AverageParameterServer.reset_state": [], "server.AverageParameterServer.param_key": [], "server.AverageParameterServer.clear_batch_state": [], "server.AverageParameterServer.process_gradient": ["server.ParameterServerBase.record_batch_start", "server.ParameterServerBase.record_straggler_start", "server.AverageParameterServer.param_key"], "server.AverageParameterServer": ["server.ParameterServerBase.record_method", "server.ParameterServerBase.record_method.decorator", "torch.distributed.rpc.functions.async_execution"], "server.AverageParameterServer.average": [], "server.AverageParameterServer.average_gradient": ["<builtin>.len", "utils.sparse_tensor_to_rpc_format", "<builtin>.type", "utils.sparse_rpc_format_to_tensor", "torch.futures.Future"], "utils.sparse_rpc_format_to_tensor": ["torch.sparse_coo_tensor"], "utils.sparse_tensor_to_rpc_format": [], "server.AverageBatchParameterServer.__init__": ["<builtin>.super"], "server.AverageBatchParameterServer.process_gradient": ["server.ParameterServerBase.record_batch_start", "server.ParameterServerBase.record_straggler_start", "server.AverageParameterServer.param_key"], "server.AverageBatchParameterServer": ["server.ParameterServerBase.record_method", "server.ParameterServerBase.record_method.decorator"], "server.AverageBatchParameterServer.average": [], "criterions": [], "criterions.cel": ["torch.nn.CrossEntropyLoss"], "ddp_models": [], "ddp_models.basic_ddp_model": ["torch.nn.parallel.DistributedDataParallel"], "hooks": [], "hooks.allreduce_hook": [], "hooks.allreduce_hook.callback": [], "hooks.hybrid_hook": ["torch.distributed.all_reduce", "torch.futures.Future"], "hooks.hybrid_hook.callback": [], "hooks.rpc_hook": ["utils.process_bucket_with_remote_server"], "utils.process_bucket_with_remote_server": ["utils.sparse_tensor_to_rpc_format"], "hooks.sparse_rpc_hook": ["utils.process_bucket_with_remote_server"], "hooks.sparse_rpc_hook.callback": [], "hook_states": [], "hook_states.BasicHookState.__init__": [], "hook_states.BasicHookState.get_key": [], "hook_states.BasicHookState.next_batch": [], "iteration_steps": [], "iteration_steps.basic_iteration_step": [], "preprocess_data": [], "preprocess_data.preprocess_dummy_data": ["<builtin>.len", "<builtin>.range"], "trainer": [], "trainer.TrainerBase.__init__": ["metrics.MetricsLogger.MetricsLogger"], "trainer.TrainerBase": ["abc.abstractmethod"], "trainer.TrainerBase.train": [], "trainer.TrainerBase.record_start": [], "trainer.TrainerBase.record_end": [], "trainer.TrainerBase.record_batch_start": [], "trainer.TrainerBase.record_batch_end": [], "trainer.TrainerBase.record_forward_start": [], "trainer.TrainerBase.record_forward_end": [], "trainer.TrainerBase.record_backward_start": [], "trainer.TrainerBase.record_backward_end": [], "trainer.TrainerBase.methodmetric": [], "trainer.TrainerBase.methodmetric.decorator": ["functools.wraps"], "trainer.TrainerBase.methodmetric.decorator.wrapper": ["time.time"], "trainer.TrainerBase.get_metrics": [], "trainer.TrainerBase.clear_metrics": [], "trainer.DdpTrainer.__init__": ["<builtin>.super"], "trainer.DdpTrainer.epoch_key": [], "trainer.DdpTrainer.train": ["<builtin>.range", "<builtin>.print", "torch.optim.SGD", "torch.cuda.synchronize", "<builtin>.enumerate"], "batchnorm.DeferredBatchNorm.__init__": ["torch.zeros_like", "torch.nn.modules.batchnorm._BatchNorm.register_buffer", "<builtin>.super"], "torch.nn.modules.batchnorm._BatchNorm.register_buffer": [], "batchnorm.DeferredBatchNorm._check_input_dim": ["<builtin>.ValueError"], "batchnorm.DeferredBatchNorm._track": ["torch.no_grad", "<builtin>.range"], "batchnorm.DeferredBatchNorm._commit": ["torch.nn.modules.batchnorm._BatchNorm.sum.zero_", "torch.nn.modules.batchnorm._BatchNorm.sum_squares.zero_", "<builtin>.float"], "torch.nn.modules.batchnorm._BatchNorm.sum.zero_": [], "torch.nn.modules.batchnorm._BatchNorm.sum_squares.zero_": [], "batchnorm.DeferredBatchNorm.forward": ["checkpoint.is_recomputing", "batchnorm.DeferredBatchNorm._track", "torch.nn.functional.batch_norm", "batchnorm.DeferredBatchNorm._commit"], "checkpoint.is_recomputing": [], "batchnorm.DeferredBatchNorm.convert_deferred_batch_norm": ["torch.nn.modules.batchnorm._BatchNorm.register_parameter", "torch.nn.modules.batchnorm._BatchNorm.register_buffer", "batchnorm.DeferredBatchNorm.__init__", "typing.cast", "batchnorm.DeferredBatchNorm.convert_deferred_batch_norm", "<builtin>.isinstance", "torch.nn.modules.batchnorm._BatchNorm.add_module"], "torch.nn.modules.batchnorm._BatchNorm.register_parameter": [], "torch.nn.modules.batchnorm._BatchNorm.add_module": [], "checkpoint.Function.__call__": [], "checkpoint.checkpoint": ["checkpoint.Checkpointing.checkpoint", "checkpoint.Checkpointing.__init__", "microbatch.Batch", "checkpoint.Checkpointing.recompute", "<builtin>.ValueError", "torch.autograd.Function.apply"], "microbatch.Batch": ["typing.overload"], "checkpoint.Checkpointing.__init__": ["collections.deque"], "checkpoint.Checkpointing.checkpoint": ["<builtin>.tuple", "torch.is_tensor", "phony.get_phony", "torch.autograd.Function.apply", "<builtin>.isinstance", "microbatch.Batch"], "checkpoint.Checkpointing.recompute": ["dependency.fork", "dependency.join", "torch.autograd.Function.apply", "<builtin>.tuple"], "collections.deque": [], "phony.get_phony": ["stream.default_stream", "stream.use_stream", "torch.empty"], "dependency.fork": ["phony.get_phony", "torch.is_grad_enabled", "torch.autograd.Function.apply"], "dependency.join": ["torch.is_grad_enabled", "torch.autograd.Function.apply"], "checkpoint.ThreadLocal.__init__": [], "checkpoint.enable_checkpointing": [], "checkpoint.enable_recomputing": [], "checkpoint.is_checkpointing": [], "checkpoint.Context.save_for_backward": [], "checkpoint.save_rng_states": ["torch.cuda.get_rng_state", "torch.get_rng_state"], "torch.get_rng_state": [], "torch.cuda.get_rng_state": [], "checkpoint.restore_rng_states": ["torch.cuda.set_rng_state", "torch.set_rng_state", "torch.random.fork_rng"], "torch.set_rng_state": [], "torch.cuda.set_rng_state": [], "checkpoint.Checkpoint.forward": ["checkpoint.enable_checkpointing", "checkpoint.save_rng_states", "<builtin>.len", "torch.is_tensor", "torch.no_grad"], "checkpoint.Checkpoint.backward": ["<builtin>.any", "<builtin>.tuple", "torch.is_tensor", "<builtin>.isinstance", "torch.autograd.backward"], "checkpoint.Recompute.forward": ["torch.is_tensor"], "checkpoint.Recompute.backward": ["torch.enable_grad", "<builtin>.tuple", "torch.is_tensor", "<builtin>.len", "checkpoint.restore_rng_states", "checkpoint.enable_recomputing", "<builtin>.RuntimeError"], "copy": [], "copy.Copy.forward": ["stream.use_stream", "stream.get_device", "stream.record_stream", "torch.is_tensor", "<builtin>.tuple", "stream.current_stream"], "stream.get_device": ["torch.device", "stream.as_cuda", "stream.is_cuda"], "stream.current_stream": ["torch.cuda.current_stream"], "stream.use_stream": ["torch.cuda.stream", "stream.as_cuda", "stream.is_cuda"], "stream.record_stream": ["stream.as_cuda", "stream.is_cuda"], "copy.Copy.backward": ["stream.use_stream", "stream.get_device", "stream.record_stream", "<builtin>.reversed", "collections.deque", "<builtin>.tuple", "<builtin>.len", "stream.current_stream"], "copy.Wait.forward": ["torch.is_tensor", "stream.wait_stream", "<builtin>.tuple"], "stream.wait_stream": ["stream.as_cuda", "stream.is_cuda"], "copy.Wait.backward": ["stream.wait_stream"], "dependency": [], "dependency.Fork.forward": ["phony.get_phony"], "dependency.Fork.backward": [], "dependency.Join.forward": [], "dependency.Join.backward": [], "microbatch": [], "microbatch.NoChunk.__init__": ["<builtin>.TypeError", "torch.is_tensor"], "microbatch.NoChunk.tensor": [], "microbatch.Batch.__init__": ["<builtin>.TypeError", "<builtin>.any", "torch.is_tensor"], "microbatch.Batch.tensor": ["typing.cast", "<builtin>.AttributeError"], "microbatch.Batch.values": [], "microbatch.Batch.find_tensor_idx": ["<builtin>.TypeError", "<builtin>.enumerate", "torch.is_tensor"], "microbatch.Batch.get_device": ["torch.is_tensor"], "microbatch.Batch.call": ["microbatch.Batch.__init__"], "microbatch.Batch.__repr__": [], "microbatch.Batch.__iter__": [], "microbatch.Batch.__len__": ["<builtin>.len"], "microbatch.Batch.__getitem__": ["<builtin>.IndexError"], "microbatch.Batch.__setitem__": ["microbatch.Batch._setitem_by_slice", "microbatch.Batch._setitem_by_index", "<builtin>.isinstance"], "microbatch.Batch._setitem_by_index": ["<builtin>.IndexError"], "microbatch.Batch._setitem_by_slice": ["<builtin>.len", "<builtin>.NotImplementedError", "<builtin>.IndexError"], "microbatch.check": ["<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.any", "torch.is_tensor"], "microbatch.scatter": ["<builtin>.isinstance", "torch.is_tensor", "microbatch.Batch.__init__", "<builtin>.RuntimeError", "<builtin>.len", "<builtin>.range", "<builtin>.enumerate"], "microbatch.gather": ["<builtin>.TypeError", "<builtin>.tuple", "torch.is_tensor", "torch.cat", "<builtin>.len", "<builtin>.range", "<builtin>.type"], "phony": [], "stream.default_stream": ["torch.cuda.default_stream"], "pipe._recommend_auto_balance": [], "pipe._verify_module": ["<builtin>.len", "<builtin>.list", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.TypeError"], "pipe._verify_splitting": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.range", "<builtin>.sum", "<builtin>.list"], "pipe._retrieve_device": ["<builtin>.ValueError", "torch.device"], "pipe.PipeSequential.forward": ["<builtin>.isinstance", "torch.nn.Sequential.__init__"], "torch.nn.Sequential.__init__": [], "pipe._assemble_partition": ["<builtin>.isinstance", "torch.nn.Sequential.__init__"], "pipe._split_module": ["typing.cast", "torch.nn.ModuleList", "pipe._retrieve_device", "pipe._assemble_partition"], "pipe.Pipe.__init__": ["skip.skippable.verify_skippables", "pipeline.Pipeline", "<builtin>.RuntimeError", "<builtin>.ValueError", "pipe._verify_splitting", "pipe.Pipe._ensure_copy_streams", "batchnorm.DeferredBatchNorm.convert_deferred_batch_norm", "<builtin>.int", "torch.distributed.rpc._is_current_rpc_agent_set", "<builtin>.str", "pipe._verify_module", "skip.layout.inspect_skip_layout", "pipe._split_module", "<builtin>.super"], "skip.skippable.verify_skippables": [], "skip.layout.inspect_skip_layout": [], "pipe.Pipe._ensure_copy_streams": ["<builtin>.range", "stream.new_stream", "torch.nn.Module._copy_streams.append"], "pipeline.Pipeline": [], "pipe.Pipe.__len__": ["<builtin>.len", "<builtin>.sum"], "pipe.Pipe.__getitem__": ["<builtin>.len"], "pipe.Pipe.__iter__": [], "pipe.Pipe.cuda": [], "pipe.Pipe.cpu": [], "pipe.Pipe.to": ["<builtin>.isinstance", "<builtin>.super", "torch.is_tensor"], "stream.new_stream": ["torch.cuda.Stream"], "torch.nn.Module._copy_streams.append": [], "pipe.Pipe.forward": ["<builtin>.len", "torch.device", "microbatch.scatter", "microbatch.gather", "microbatch.check", "torch.distributed.rpc.RRef"], "stream": ["contextlib.contextmanager"], "torch.cuda.default_stream": [], "stream.use_device": ["torch.cuda.device"], "stream.is_cuda": [], "stream.as_cuda": ["typing.cast"], "utils.partition_model": ["<builtin>.range", "torch.nn.Sequential"], "worker.Task.__init__": ["torch.is_grad_enabled"], "worker.Task.compute": ["torch.set_grad_enabled", "stream.use_stream"], "worker.Task.finalize": ["torch.set_grad_enabled", "stream.use_stream"], "worker.worker": ["typing.cast", "stream.use_device", "sys.exc_info"], "worker.create_workers": ["worker.create_workers.normalize_device", "threading.Thread", "queue.Queue"], "worker.create_workers.normalize_device": ["torch.device", "torch.cuda.current_device"], "worker.spawn_workers": ["worker.create_workers"], "caffe2_resnet50_default_forward": [], "caffe2_resnet50_default_forward.gen_forward_pass_builder_fun": [], "caffe2_resnet50_default_forward.gen_forward_pass_builder_fun.create_resnet50_model_ops": ["caffe2.python.models.resnet.create_resnet50"], "caffe2_resnet50_default_param_update": [], "caffe2_resnet50_default_param_update.gen_param_update_builder_fun": [], "caffe2_resnet50_default_param_update.gen_param_update_builder_fun.add_parameter_update_ops": ["<builtin>.len", "<builtin>.int"], "explicit_resnet_forward": ["logging.getLogger", "logging.basicConfig"], "explicit_resnet_forward.gen_forward_pass_builder_fun": [], "explicit_resnet_forward.gen_forward_pass_builder_fun.model_creator": ["explicit_resnet_forward.resnet_imagenet_create_model"], "explicit_resnet_forward.resnet_imagenet_create_model": ["explicit_resnet_forward.ResNetModelHelper.__init__", "explicit_resnet_forward.ResNetModelHelper.residual_layer"], "explicit_resnet_forward.ResNetModelHelper.__init__": [], "explicit_resnet_forward.ResNetModelHelper.residual_layer": ["explicit_resnet_forward.ResNetModelHelper.bottleneck_block", "<builtin>.range", "explicit_resnet_forward.ResNetModelHelper.basic_block"], "explicit_resnet_forward.ResNetModelHelper.add_shortcut": [], "explicit_resnet_forward.ResNetModelHelper.conv_bn": [], "explicit_resnet_forward.ResNetModelHelper.conv_bn_relu": ["explicit_resnet_forward.ResNetModelHelper.conv_bn"], "explicit_resnet_forward.ResNetModelHelper.multiway_bottleneck_block": ["explicit_resnet_forward.ResNetModelHelper.add_shortcut", "explicit_resnet_forward.ResNetModelHelper.conv_bn_relu", "explicit_resnet_forward.ResNetModelHelper.conv_bn"], "explicit_resnet_forward.ResNetModelHelper.group_bottleneck_block": ["explicit_resnet_forward.ResNetModelHelper.add_shortcut", "explicit_resnet_forward.ResNetModelHelper.conv_bn_relu", "explicit_resnet_forward.ResNetModelHelper.conv_bn"], "explicit_resnet_forward.ResNetModelHelper.bottleneck_block": ["explicit_resnet_forward.ResNetModelHelper.add_shortcut", "explicit_resnet_forward.ResNetModelHelper.conv_bn_relu", "explicit_resnet_forward.ResNetModelHelper.conv_bn"], "explicit_resnet_forward.ResNetModelHelper.basic_block": ["explicit_resnet_forward.ResNetModelHelper.add_shortcut", "explicit_resnet_forward.ResNetModelHelper.conv_bn_relu", "explicit_resnet_forward.ResNetModelHelper.conv_bn"], "explicit_resnet_param_update": [], "explicit_resnet_param_update.gen_param_update_builder_fun": ["<builtin>.range", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.CreateBlob"], "explicit_resnet_param_update.gen_param_update_builder_fun.add_parameter_update_ops": ["<builtin>.len", "<builtin>.str"], "gfs_IN1k": [], "gfs_IN1k.gen_input_builder_fun": [], "gfs_IN1k.gen_input_builder_fun.AddImageInput": [], "gfs_IN1k.gen_input_builder_fun.add_image_input": ["gfs_IN1k.gen_input_builder_fun.AddImageInput"], "gfs_IN1k.get_input_dataset": [], "gfs_IN1k.get_model_input_fun": [], "IN1k_resnet": [], "IN1k_resnet.init_model": ["caffe2.python.cnn.CNNModelHelper"], "IN1k_resnet.fun_per_epoch_b4RunNet": [], "IN1k_resnet.fun_per_iter_b4RunNet": ["numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "<builtin>.range"], "IN1k_resnet.run_training_net": ["caffe2.python.workspace.RunNet", "caffe2.python.timeout_guard.CompleteInTimeOrDie"], "IN1k_resnet_no_test_model": [], "IN1k_resnet_no_test_model.init_model": ["caffe2.python.cnn.CNNModelHelper"], "IN1k_resnet_no_test_model.fun_per_epoch_b4RunNet": [], "IN1k_resnet_no_test_model.fun_per_iter_b4RunNet": ["caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "numpy.array", "caffe2.python.workspace.FeedBlob", "<builtin>.range"], "IN1k_resnet_no_test_model.run_training_net": ["caffe2.python.workspace.RunNet", "caffe2.python.timeout_guard.CompleteInTimeOrDie"], "override_no_test_model_no_checkpoint": [], "override_no_test_model_no_checkpoint.checkpoint": [], "override_no_test_model_no_checkpoint.prep_data_parallel_models": [], "override_no_test_model_no_checkpoint.run_testing_net": [], "rendezvous_filestore": ["caffe2.python.dyndep.InitOpsLibrary"], "rendezvous_filestore.gen_rendezvous_ctx": ["caffe2.python.core.CreateOperator", "<builtin>.dict", "caffe2.python.workspace.RunOperatorOnce"], "concat_benchmark": ["argparse.ArgumentParser", "concat_benchmark.benchmark_concat", "caffe2.python.core.GlobalInit"], "concat_benchmark.benchmark_concat": ["caffe2.python.workspace.BenchmarkNet", "numpy.random.randn", "<builtin>.print", "caffe2.python.workspace.CreateNet", "numpy.prod", "caffe2.python.core.Net", "<builtin>.range", "caffe2.python.workspace.FeedBlob"], "fused_rowwise_nbit_conversion_bench": ["fused_rowwise_nbit_conversion_bench.main", "argparse.ArgumentParser"], "fused_rowwise_nbit_conversion_bench.main": ["caffe2.python.core.Net", "caffe2.python.workspace.GlobalInit", "caffe2.python.workspace.BenchmarkNet", "<builtin>.str", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.CreateNet", "numpy.random.rand", "<builtin>.print", "caffe2.python.core.CreateOperator"], "sparse_lengths_sum_nbit_benchmark": ["caffe2.python.core.GlobalInit", "argparse.ArgumentParser", "sparse_lengths_sum_nbit_benchmark.benchmark_sparse_lengths_sum"], "sparse_lengths_sum_nbit_benchmark.benchmark_sparse_lengths_sum": ["<builtin>.str", "caffe2.python.workspace.BenchmarkNet", "numpy.random.seed", "<builtin>.print", "numpy.random.randn", "caffe2.python.workspace.CreateNet", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "datetime.datetime.now", "caffe2.python.workspace.RunNetOnce", "numpy.ones", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob"], "sparse_lengths_sum_nbit_benchmark.benchmark_sparse_lengths_sum.f": ["numpy.random.randint", "numpy.sum", "<builtin>.int"], "sparse_normalize_benchmark": ["argparse.ArgumentParser", "sparse_normalize_benchmark.benchmark_sparse_normalize", "caffe2.python.core.GlobalInit"], "sparse_normalize_benchmark.benchmark_sparse_normalize": ["numpy.random.seed", "caffe2.python.workspace.RunNetOnce", "<builtin>.print", "numpy.ones", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.BenchmarkNet", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "numpy.random.randn", "caffe2.python.workspace.CreateNet", "<builtin>.str", "caffe2.python.workspace.FetchBlob", "datetime.datetime.now"], "sparse_normalize_benchmark.benchmark_sparse_normalize.f": ["numpy.sum", "<builtin>.int", "numpy.random.randint"], "formatter": [], "formatter.Formatter.__init__": [], "formatter.Formatter.clone": [], "formatter.Formatter.dump": [], "formatter.Formatter.parseAndAdd": ["caffe2.python.docs.parser.Parser", "formatter.Formatter.addRaw"], "caffe2.python.docs.parser.Parser": [], "formatter.Formatter.addRaw": ["<builtin>.Exception"], "formatter.Formatter.addLine": ["<builtin>.Exception"], "formatter.Formatter.addLinebreak": ["<builtin>.Exception"], "formatter.Formatter.addHeader": ["<builtin>.Exception"], "formatter.Formatter.addEmphasis": ["<builtin>.Exception"], "formatter.Formatter.addList": ["<builtin>.Exception"], "formatter.Formatter.addLink": ["<builtin>.Exception"], "formatter.Formatter.addCode": ["<builtin>.Exception"], "formatter.Formatter.addCodeLink": ["<builtin>.Exception"], "formatter.Formatter.addTable": ["<builtin>.Exception"], "formatter.Formatter.addBreak": ["<builtin>.Exception"], "formatter.Markdown.addRaw": [], "formatter.Markdown.addLine": [], "formatter.Markdown.addLinebreak": [], "formatter.Markdown.addHeader": ["formatter.Markdown.addLine"], "formatter.Markdown.addEmphasis": ["formatter.Markdown.addRaw"], "formatter.Markdown.addList": ["formatter.Markdown.addLinebreak", "formatter.Markdown.addLine"], "formatter.Markdown.addLink": ["formatter.Markdown.addRaw"], "formatter.Markdown.addCodeLink": ["formatter.Markdown.addRaw"], "formatter.Markdown.addCode": ["formatter.Markdown.addRaw"], "formatter.Markdown.addTable": ["formatter.Markdown.addLinebreak", "<builtin>.len", "formatter.Markdown.addLine", "<builtin>.range"], "formatter.Markdown.addBreak": ["formatter.Markdown.addLine"], "generator": ["generator.DocUploader.__init__", "<builtin>.open", "argparse.ArgumentParser", "generator.OpDocGenerator.createBody", "generator.DocGenerator.__init__", "caffe2.python.docs.formatter.Markdown"], "generator.DocUploader.__init__": [], "generator.DocUploader.upload": [], "generator.DocGenerator.__init__": [], "generator.DocGenerator.create_body": [], "generator.DocGenerator.update": [], "generator.OpDocGenerator.getOperatorDoc": ["generator.OperatorDoc.__init__"], "generator.OperatorDoc.__init__": ["<builtin>.print"], "generator.OpDocGenerator.getOperatorEngine": ["generator.OperatorEngine.__init__"], "generator.OperatorEngine.__init__": [], "generator.OpDocGenerator.getOperators": ["<builtin>.sorted", "generator.OpDocGenerator.getOperatorEngine", "generator.OpDocGenerator.getOperatorDoc", "generator.OpDocGenerator.getOperators.filePriority", "future.utils.viewitems", "os.path.dirname", "future.utils.viewvalues", "caffe2.python.workspace.C.OpSchema.get", "caffe2.python.core._GetRegisteredOperators"], "generator.OpDocGenerator.getOperators.filePriority": [], "caffe2.python.core._GetRegisteredOperators": [], "generator.OpDocGenerator.getOperators.<lambda1>": [], "generator.OpDocGenerator.createBody": ["generator.OpDocGenerator.getOperators"], "generator.OperatorEngine.getDeviceImpl": [], "generator.OperatorEngine.generateDoc": ["generator.OperatorEngine.getDeviceImpl"], "generator.OperatorDoc.addEngines": [], "generator.OperatorDoc.generateDoc": [], "generator.OperatorDoc.generateTable": [], "generator.OperatorDoc.generateInterface": ["generator.OperatorDoc.generateTable", "<builtin>.print", "generator.OperatorDoc.generateInterface.makeDesc"], "generator.OperatorDoc.generateInterface.makeDesc": ["<builtin>.len", "<builtin>.isinstance"], "generator.OperatorDoc.generateCodeLink": [], "generator.OperatorDoc.getInfo": [], "generator.OperatorDoc.generateDevices": ["caffe2.python.workspace.C.OpSchema.get_cuda_impl", "caffe2.python.workspace.C.OpSchema.get_cpu_impl", "generator.OperatorDoc.getInfo"], "caffe2.python.workspace.C.OpSchema.get_cpu_impl": [], "caffe2.python.workspace.C.OpSchema.get_cuda_impl": [], "generator.OperatorDoc.generateEngines": ["<builtin>.len"], "generator.OperatorDoc.generateSchema": ["generator.OperatorDoc.generateEngines", "generator.OperatorDoc.generateCodeLink", "generator.OperatorDoc.generateDevices", "generator.OperatorDoc.generateDoc", "generator.OperatorDoc.generateInterface"], "caffe2.python.docs.formatter.Markdown": [], "github": ["github.GHOpDocGenerator.createBody", "caffe2.python.docs.formatter.Markdown.__init__", "<builtin>.open", "caffe2.python.docs.generator.OpDocGenerator.__init__", "argparse.ArgumentParser", "<builtin>.print"], "github.GHOpDocUploader.__init__": [], "github.GHOpDocUploader.upload": ["<builtin>.print"], "github.GHMarkdown.addHeader": ["caffe2.python.docs.formatter.Markdown.addLine"], "caffe2.python.docs.formatter.Markdown.addLine": [], "github.GHMarkdown.addDocHeader": ["caffe2.python.docs.formatter.Markdown.addLine"], "github.GHMarkdown.addTable": ["caffe2.python.docs.formatter.Markdown.addLine", "<builtin>.range", "caffe2.python.docs.formatter.Markdown.addLinebreak", "<builtin>.len"], "caffe2.python.docs.formatter.Markdown.addLinebreak": [], "github.GHMarkdown.addTableHTML": ["caffe2.python.docs.formatter.Markdown.addLine", "caffe2.python.docs.formatter.Markdown.addRaw"], "caffe2.python.docs.formatter.Markdown.addRaw": [], "github.getCodeLink": ["os.path.relpath"], "github.GHOperatorEngine.generateDoc": ["caffe2.python.docs.generator.OperatorEngine.getDeviceImpl"], "caffe2.python.docs.generator.OperatorEngine.getDeviceImpl": [], "github.GHOperatorDoc.generateCodeLink": ["github.getCodeLink"], "github.GHOperatorDoc.getInfo": [], "github.GHOperatorDoc.generateSchema": ["caffe2.python.docs.generator.OperatorDoc.generateInterface", "github.GHOperatorDoc.generateCodeLink", "caffe2.python.docs.generator.OperatorDoc.generateDoc"], "caffe2.python.docs.generator.OperatorDoc.generateDoc": [], "caffe2.python.docs.generator.OperatorDoc.generateInterface": [], "github.GHOpDocGenerator.getOperatorDoc": ["caffe2.python.docs.generator.OperatorDoc.__init__"], "caffe2.python.docs.generator.OperatorDoc.__init__": [], "github.GHOpDocGenerator.getOperatorEngine": ["caffe2.python.docs.generator.OperatorEngine.__init__"], "caffe2.python.docs.generator.OperatorEngine.__init__": [], "github.GHOpDocGenerator.createBody": ["caffe2.python.docs.generator.OpDocGenerator.formatter.dump", "caffe2.python.docs.generator.OpDocGenerator.formatter.addDocHeader", "caffe2.python.docs.generator.OpDocGenerator.getOperators"], "caffe2.python.docs.generator.OpDocGenerator.formatter.addDocHeader": [], "caffe2.python.docs.generator.OpDocGenerator.getOperators": [], "caffe2.python.docs.generator.OpDocGenerator.formatter.dump": [], "caffe2.python.docs.formatter.Markdown.__init__": [], "caffe2.python.docs.generator.OpDocGenerator.__init__": [], "parser": [], "parser.Parser.<list1>.<lambda1>": [], "parser.Parser.<list1>.<lambda2>": [], "parser.Parser.<list1>.<lambda3>": [], "parser.Parser.<list1>.<lambda4>": [], "parser.Parser.<list1>.<lambda5>": [], "parser.Parser.<list1>.<lambda6>": [], "parser.Parser.<list1>.<lambda7>": [], "parser.Parser.<list1>.<lambda8>": [], "parser.Parser.__init__": [], "parser.Parser.parseText": ["<builtin>.len", "re.search"], "parser.Parser.parse": ["parser.Parser.parseText"], "char_rnn": ["caffe2.python.utils.debug", "char_rnn.main", "logging.basicConfig", "logging.getLogger", "caffe2.python.workspace.GlobalInit"], "char_rnn.CreateNetOnce": ["caffe2.python.workspace.CreateNet"], "char_rnn.CharRNN.__init__": ["<builtin>.print", "<builtin>.open", "<builtin>.set", "<builtin>.list", "<builtin>.enumerate", "<builtin>.len"], "char_rnn.CharRNN.CreateModel": ["caffe2.python.optimizer.build_sgd", "caffe2.python.model_helper.ModelHelper", "caffe2.python.core.Net", "caffe2.python.rnn_cell.LSTM", "caffe2.python.brew.fc"], "char_rnn.CharRNN._idx_at_pos": [], "char_rnn.CharRNN.TrainModel": ["caffe2.python.workspace.RunNetOnce", "char_rnn.CharRNN._idx_at_pos", "<builtin>.print", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.CreateNet", "<builtin>.list", "<builtin>.sum", "<builtin>.len", "<builtin>.int", "numpy.log", "caffe2.python.workspace.RunNet", "numpy.array", "char_rnn.CreateNetOnce", "datetime.datetime.now", "numpy.zeros", "char_rnn.CharRNN.GenerateText", "<builtin>.range", "numpy.random.choice"], "char_rnn.CharRNN.GenerateText": ["char_rnn.CreateNetOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNet", "numpy.zeros", "<builtin>.print", "caffe2.python.workspace.FeedBlob", "<builtin>.range", "numpy.random.choice", "numpy.array"], "char_rnn.main": ["char_rnn.CharRNN.__init__", "caffe2.python.core.DeviceOption", "char_rnn.CharRNN.CreateModel", "argparse.ArgumentParser", "caffe2.python.core.DeviceScope", "char_rnn.CharRNN.TrainModel"], "imagenet_trainer": ["logging.getLogger", "logging.basicConfig", "caffe2.python.dyndep.InitOpsLibrary", "imagenet_trainer.main", "caffe2.python.workspace.GlobalInit"], "imagenet_trainer.AddImageInput": ["caffe2.python.brew.image_input", "caffe2.python.core.IsGPUDeviceType"], "imagenet_trainer.AddNullInput": [], "imagenet_trainer.SaveModel": ["caffe2.python.predictor.predictor_exporter.PredictorExportMeta", "caffe2.python.data_parallel_model.GetCheckpointParams", "caffe2.python.predictor.predictor_exporter.save_to_db"], "caffe2.python.predictor.predictor_exporter.PredictorExportMeta": [], "caffe2.python.predictor.predictor_exporter.save_to_db": [], "imagenet_trainer.LoadModel": ["caffe2.python.workspace.FetchBlob", "caffe2.python.core.DeviceOption", "caffe2.python.predictor.predictor_py_utils.GetNet", "caffe2.python.workspace.FeedBlob", "caffe2.python.predictor.predictor_exporter.load_from_db", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.predictor.predictor_exporter.load_from_db": [], "caffe2.python.predictor.predictor_py_utils.GetNet": [], "imagenet_trainer.RunEpoch": ["time.time", "<builtin>.range", "caffe2.python.data_parallel_model.GetLearningRateBlobNames", "caffe2.python.workspace.FetchBlob", "numpy.asscalar", "<builtin>.int", "caffe2.python.timeout_guard.CompleteInTimeOrDie", "caffe2.python.workspace.RunNet"], "imagenet_trainer.Train": ["os.getenv", "<builtin>.range", "caffe2.python.data_parallel_model.OptimizeGradientMemory", "os.path.isfile", "<builtin>.str", "caffe2.python.workspace.RunOperatorOnce", "imagenet_trainer.RunEpoch", "imagenet_trainer.SaveModel", "<builtin>.int", "caffe2.python.workspace.CreateNet", "caffe2.python.core.CreateOperator", "caffe2.python.experiment_util.ModelTrainerLog", "<builtin>.list", "caffe2.python.data_parallel_model.FinalizeAfterCheckpoint", "<builtin>.len", "imagenet_trainer.LoadModel", "<builtin>.dict", "caffe2.python.workspace.RunNetOnce", "caffe2.python.data_parallel_model.Parallelize", "caffe2.python.model_helper.ModelHelper", "<builtin>.set", "os.remove"], "imagenet_trainer.Train.create_resnext_model_ops": ["caffe2.python.models.resnet.create_resnext", "caffe2.python.brew.arg_scope", "caffe2.python.brew.accuracy"], "caffe2.python.models.resnet.create_resnext": [], "imagenet_trainer.Train.create_shufflenet_model_ops": ["caffe2.python.models.shufflenet.create_shufflenet", "caffe2.python.brew.arg_scope", "caffe2.python.brew.accuracy"], "caffe2.python.models.shufflenet.create_shufflenet": [], "imagenet_trainer.Train.add_optimizer": ["caffe2.python.optimizer.add_weight_decay", "caffe2.python.optimizer.build_fp16_sgd", "<builtin>.int", "caffe2.python.optimizer.build_multi_precision_sgd"], "caffe2.python.optimizer.build_fp16_sgd": [], "imagenet_trainer.Train.add_image_input": ["imagenet_trainer.AddImageInput", "imagenet_trainer.AddNullInput"], "imagenet_trainer.Train.add_post_sync_ops": [], "caffe2.python.data_parallel_model.OptimizeGradientMemory": [], "imagenet_trainer.Train.test_input_fn": ["imagenet_trainer.AddImageInput"], "caffe2.python.experiment_util.ModelTrainerLog": [], "imagenet_trainer.main": ["imagenet_trainer.Train", "argparse.ArgumentParser"], "lmdb_create_example": ["lmdb_create_example.main"], "lmdb_create_example.create_db": ["caffe2.proto.caffe2_pb2.TensorProtos", "numpy.sum", "<builtin>.print", "<builtin>.int", "lmdb.open", "numpy.random.rand", "<builtin>.range", "numpy.prod"], "lmdb.open": [], "lmdb_create_example.read_db_with_caffe2": ["caffe2.python.workspace.CreateNet", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FetchBlob", "numpy.sum", "<builtin>.print", "caffe2.python.workspace.RunNetOnce", "<builtin>.int", "numpy.abs", "caffe2.python.workspace.RunNet", "<builtin>.range"], "lmdb_create_example.main": ["argparse.ArgumentParser", "lmdb_create_example.read_db_with_caffe2", "lmdb_create_example.create_db"], "resnet50_trainer": [], "init_shared_libs": ["ctypes.CDLL", "<builtin>.print"], "test_utils.print_test_debug_info": ["<builtin>.print", "<builtin>.open", "numpy.set_printoptions"], "test_utils.print_net": ["<builtin>.print"], "test_utils._sigmoid": ["numpy.exp", "numpy.float64"], "numpy.float64": [], "test_utils._tanh": ["numpy.tanh", "numpy.float64"], "test_utils._swish": ["test_utils._sigmoid", "numpy.float64"], "test_utils._gelu_by_sigmoid": ["numpy.exp", "numpy.float64"], "test_utils._acc_func": ["test_utils._sigmoid", "test_utils._tanh", "test_utils._gelu_by_sigmoid", "test_utils._swish"], "test_utils._get_ulp16": ["numpy.log2", "numpy.abs", "numpy.floor"], "test_utils.compute_ulp_error": ["test_utils._get_ulp16", "test_utils._acc_func", "numpy.float64"], "algebra": [], "algebra.transpose": [], "algebra.sum": [], "algebra.reduce_sum": [], "algebra.sub": [], "algebra.mat_mul": [], "algebra.arg_min": [], "algebra.batch_mat_mul": [], "algebra.sparse_lengths_sum_4bit_rowwise_sparse": [], "arg_scope": ["threading.local", "contextlib.contextmanager"], "arg_scope.arg_scope": ["<builtin>.callable", "copy.deepcopy", "arg_scope.get_current_scope", "<builtin>.isinstance"], "arg_scope.get_current_scope": ["<builtin>.hasattr"], "array_helpers": [], "array_helpers.concat": [], "array_helpers.depth_concat": ["<builtin>.print", "array_helpers.concat"], "control_ops": [], "control_ops.cond": ["caffe2.python.control_ops_util.add_if_op"], "control_ops.loop": ["caffe2.python.control_ops_util.add_while_op"], "conv._ConvBase": ["caffe2.python.modeling.initializers.update_initializer", "<builtin>.len", "<builtin>.int", "caffe2.python.modeling.initializers.ExternalInitializer", "<builtin>.ValueError", "<builtin>.isinstance"], "caffe2.python.modeling.initializers.update_initializer": [], "caffe2.python.modeling.initializers.ExternalInitializer": [], "conv.conv_nd": ["conv._ConvBase"], "conv.conv": ["conv._ConvBase"], "conv.conv_transpose": ["caffe2.python.core.ScopedBlobReference"], "conv.group_conv": ["conv.conv"], "conv.group_conv_deprecated": ["<builtin>.range", "caffe2.python.core.ScopedBlobReference", "<builtin>.int", "<builtin>.str", "<builtin>.ValueError"], "db_input": [], "db_input.db_input": [], "dropout.dropout": [], "elementwise_linear": [], "elementwise_linear._elementwise_linear": ["caffe2.python.core.ScopedBlobReference"], "elementwise_linear.elementwise_linear": ["elementwise_linear._elementwise_linear"], "fc": [], "fc._FC_or_packed_FC": ["caffe2.python.modeling.initializers.update_initializer", "caffe2.python.modeling.initializers.ExternalInitializer"], "fc.fc": ["fc._FC_or_packed_FC"], "fc.packed_fc": ["fc._FC_or_packed_FC"], "fc.fc_decomp": ["caffe2.python.modeling.initializers.update_initializer"], "fc.fc_prune": ["caffe2.python.core.ScopedBlobReference"], "fc.fc_sparse": ["<builtin>.print"], "nonlinearity": [], "nonlinearity.prelu": ["caffe2.python.core.ScopedBlobReference"], "nonlinearity.relu": [], "nonlinearity.tanh": [], "normalization.lrn": ["caffe2.python.scope.CurrentDeviceScope"], "normalization.softmax": [], "normalization.instance_norm": ["normalization.instance_norm.init_blob"], "normalization.instance_norm.init_blob": [], "normalization.spatial_bn": ["caffe2.python.modeling.initializers.update_initializer", "caffe2.python.modeling.initializers.ExternalInitializer"], "normalization.spatial_gn": ["caffe2.python.modeling.initializers.update_initializer", "caffe2.python.modeling.initializers.ExternalInitializer"], "normalization.layer_norm": ["caffe2.python.modeling.initializers.Initializer", "<builtin>.isinstance"], "normalization.moments_with_running_stats": ["caffe2.python.modeling.initializers.update_initializer", "caffe2.python.modeling.initializers.ExternalInitializer"], "pooling.max_pool": [], "pooling.average_pool": [], "pooling.max_pool_with_index": [], "quantization.fused_8bit_rowwise_quantized_to_float": [], "tools": [], "tools.image_input": ["<builtin>.tuple", "<builtin>.list"], "tools.video_input": [], "train._get_weights": ["caffe2.python.scope.CurrentNameScope"], "train.iter": ["caffe2.python.core.DeviceOption"], "train.accuracy": ["caffe2.python.scope.CurrentDeviceScope", "caffe2.python.core.DeviceOption"], "train.add_weight_decay": ["train._get_weights"], "adam_op_test": ["unittest.main"], "adam_op_test.TestAdamOps": ["hypothesis.strategies.floats", "hypothesis.given", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.strategies.integers"], "adam_op_test.TestAdamOps.test_adam": ["numpy.absolute", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "adam_op_test.TestAdamOps.test_adam_output_grad": ["numpy.absolute", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "blobs_queue_db_test": ["unittest.main"], "blobs_queue_db_test.BlobsQueueDBTest.test_create_blobs_queue_db_string": ["caffe2.python.core.DeviceScope", "blobs_queue_db_test.BlobsQueueDBTest._test_create_blobs_queue_db", "caffe2.python.core.DeviceOption"], "blobs_queue_db_test.BlobsQueueDBTest.test_create_blobs_queue_db_string.add_blobs": ["<builtin>.range", "caffe2.python.core.BlobReference", "blobs_queue_db_test.BlobsQueueDBTest._create_test_tensor_protos", "blobs_queue_db_test.BlobsQueueDBTest._add_blob_to_queue"], "blobs_queue_db_test.BlobsQueueDBTest._create_test_tensor_protos": ["caffe2.proto.caffe2_pb2.TensorProtos"], "blobs_queue_db_test.BlobsQueueDBTest._add_blob_to_queue": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob"], "blobs_queue_db_test.BlobsQueueDBTest._test_create_blobs_queue_db": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob", "<builtin>.len", "blobs_queue_db_test.BlobsQueueDBTest.test_create_blobs_queue_db_string.add_blobs", "caffe2.python.timeout_guard.CompleteInTimeOrDie", "<builtin>.int", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "<builtin>.enumerate", "caffe2.python.workspace.CreateNet", "unittest.TestCase.assertEqual", "<builtin>.range", "caffe2.python.workspace.RunNet", "blobs_queue_db_test.BlobsQueueDBTest.test_create_blobs_queue_db_tensor.add_blobs", "caffe2.python.test_util.TestCase.assertEqual", "<builtin>.print"], "blobs_queue_db_test.BlobsQueueDBTest.test_create_blobs_queue_db_tensor": ["caffe2.python.core.DeviceScope", "blobs_queue_db_test.BlobsQueueDBTest._test_create_blobs_queue_db", "caffe2.python.core.DeviceOption"], "blobs_queue_db_test.BlobsQueueDBTest.test_create_blobs_queue_db_tensor.add_blobs": ["blobs_queue_db_test.BlobsQueueDBTest._create_test_tensor_protos", "numpy.array", "blobs_queue_db_test.BlobsQueueDBTest._add_blob_to_queue", "<builtin>.range", "caffe2.python.core.BlobReference"], "channel_shuffle_op_test": ["unittest.main"], "channel_shuffle_op_test.ChannelShuffleTest": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.given"], "channel_shuffle_op_test.ChannelShuffleTest.test_channel_shuffle": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "concat_split_op_test": ["unittest.main", "hypothesis.strategies.composite"], "concat_split_op_test._tensor_splits": ["<builtin>.sorted", "<builtin>.range", "numpy.array", "<builtin>.list", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.integers", "<builtin>.set", "numpy.ones", "hypothesis.strategies.lists", "numpy.diff", "<builtin>.len"], "concat_split_op_test.TestConcatSplitOps": ["concat_split_op_test._tensor_splits", "hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.settings", "caffe2.python.serialized_test.serialized_test_util.given", "caffe2.python.hypothesis_test_util.lengths_tensor"], "concat_split_op_test.TestConcatSplitOps.test_concat": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "concat_split_op_test.TestConcatSplitOps.test_split": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "<builtin>.len", "<builtin>.dict", "numpy.concatenate", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "concat_split_op_test.TestConcatSplitOps.test_split.split_ref": ["<builtin>.range", "numpy.array", "<builtin>.list", "numpy.arange", "<builtin>.len", "numpy.cumsum"], "concat_split_op_test.TestConcatSplitOps.test_concat_add_axis": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "concat_split_op_test.TestConcatSplitOps.test_concat_with_TensorCPU": ["numpy.allclose", "<builtin>.range", "numpy.max", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "<builtin>.enumerate", "<builtin>.print", "caffe2.python.workspace.FeedBlob", "numpy.abs", "caffe2.python.core.CreateOperator", "<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue"], "convfusion_op_test": ["unittest.main"], "convfusion_op_test.ConvFusionTest": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.strategies.booleans"], "convfusion_op_test.ConvFusionTest.test_convolution_relu_fusion": ["caffe2.python.workspace.ResetWorkspace", "numpy.random.rand", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "numpy.allclose", "<builtin>.print", "numpy.max", "<builtin>.len", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.transformations.optimizeForMKLDNN", "caffe2.python.workspace.CurrentWorkspace", "numpy.abs", "caffe2.python.core.Net"], "caffe2.python.transformations.optimizeForMKLDNN": [], "convfusion_op_test.ConvFusionTest.test_convolution_sum_fusion": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "math.ceil", "caffe2.python.transformations.optimizeForMKLDNN", "caffe2.python.workspace.SwitchWorkspace", "numpy.abs", "caffe2.python.core.Net", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FeedBlob", "<builtin>.print", "<builtin>.float", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.RunNetOnce", "numpy.random.rand", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.python.core.CreateOperator", "numpy.allclose", "numpy.max", "<builtin>.int", "caffe2.python.workspace.CurrentWorkspace"], "convfusion_op_test.ConvFusionTest.test_convolution_sum_relu_fusion": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.transformations.optimizeForMKLDNN", "caffe2.python.workspace.SwitchWorkspace", "numpy.abs", "caffe2.python.core.Net", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FeedBlob", "<builtin>.print", "caffe2.python.workspace.RunNetOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.random.rand", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.python.core.CreateOperator", "numpy.allclose", "numpy.max", "caffe2.python.workspace.CurrentWorkspace"], "convfusion_op_test.ConvFusionTest.test_convolution_grouped_sum_relu_fusion": ["caffe2.python.workspace.ResetWorkspace", "numpy.random.rand", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "numpy.allclose", "<builtin>.print", "numpy.max", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.workspace.RunNetOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.transformations.optimizeForMKLDNN", "caffe2.python.workspace.CurrentWorkspace", "numpy.abs", "caffe2.python.core.Net"], "convfusion_op_test.ConvFusionTest.test_convolution_bn_folding": ["caffe2.python.workspace.ResetWorkspace", "numpy.random.randn", "numpy.absolute", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.transformations.optimizeForMKLDNN", "caffe2.python.workspace.SwitchWorkspace", "numpy.abs", "caffe2.python.core.Net", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.FeedBlob", "<builtin>.print", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.random.rand", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.python.core.CreateOperator", "numpy.allclose", "numpy.max", "caffe2.python.workspace.CurrentWorkspace"], "convfusion_op_test.ConvFusionTest.test_convolution_affch_folding": ["caffe2.python.workspace.ResetWorkspace", "numpy.random.rand", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "numpy.allclose", "<builtin>.print", "numpy.max", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.transformations.optimizeForMKLDNN", "caffe2.python.workspace.CurrentWorkspace", "numpy.abs", "caffe2.python.core.Net"], "conv_op_test": ["unittest.main"], "conv_op_test.ConvTest": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.booleans"], "conv_op_test.ConvTest.test_convolution": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "<builtin>.range", "<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.rand"], "conv_op_test.ConvTest.test_winograd_convolution": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "<builtin>.range", "<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.rand"], "conv_op_test.ConvTest.test_depthwise_convolution": ["caffe2.python.transformations.optimizeForMKLDNN", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FetchBlob", "numpy.max", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.print", "caffe2.python.core.CreateOperator", "caffe2.proto.caffe2_pb2.NetDef", "numpy.abs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.SwitchWorkspace", "numpy.allclose", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "caffe2.python.core.Net"], "conv_transpose_test": ["unittest.main"], "conv_transpose_test.ConvTransposeTest": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.settings"], "conv_transpose_test.ConvTransposeTest.test_convolution_transpose_gradients": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "copy_op_test": ["unittest.main"], "copy_op_test.CopyTest._get_deep_device": ["caffe2.proto.caffe2_pb2.DeviceOption"], "copy_op_test.CopyTest.test_copy_to_ideep": ["caffe2.python.workspace.RunOperatorOnce", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob", "random.randint", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "copy_op_test.CopyTest._get_deep_device"], "copy_op_test.CopyTest.test_copy_to_ideep_zero_dim": ["caffe2.python.workspace.RunOperatorOnce", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob", "random.randint", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "copy_op_test.CopyTest._get_deep_device"], "copy_op_test.CopyTest.test_copy_from_ideep": ["caffe2.python.workspace.RunOperatorOnce", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob", "random.randint", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "copy_op_test.CopyTest._get_deep_device"], "copy_op_test.CopyTest.test_copy_from_ideep_zero_dim": ["caffe2.python.workspace.RunOperatorOnce", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob", "random.randint", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "copy_op_test.CopyTest._get_deep_device"], "copy_op_test.CopyTest.test_copy_from_ideep_fallthrough": ["caffe2.python.workspace.RunOperatorOnce", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob", "random.randint", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "copy_op_test.CopyTest._get_deep_device"], "dropout_op_test": ["unittest.main"], "dropout_op_test.DropoutTest": ["hypothesis.strategies.booleans", "unittest.skipIf", "hypothesis.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.floats"], "dropout_op_test.DropoutTest.test_dropout_is_test": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "dropout_op_test.DropoutTest.test_dropout_is_test.reference_dropout_test": ["numpy.ones"], "dropout_op_test.DropoutTest.test_dropout_ratio0": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "dropout_op_test.DropoutTest.test_dropout_ratio0.reference_dropout_ratio0": ["numpy.ones"], "elementwise_sum_op_test": ["unittest.main"], "elementwise_sum_op_test.ElementwiseSumTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.booleans"], "elementwise_sum_op_test.ElementwiseSumTest.test_elementwise_sum": ["<builtin>.range", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "elementwise_sum_op_test.ElementwiseSumTest.test_elementwise_sum_fallback": ["<builtin>.enumerate", "numpy.allclose", "<builtin>.print", "numpy.max", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "<builtin>.range", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "numpy.abs"], "elementwise_sum_op_test.ElementwiseSumTest.test_int8_elementwise_sum": ["numpy.square", "numpy.max", "<builtin>.range", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.SwitchWorkspace", "numpy.random.rand", "<builtin>.enumerate", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.abs", "numpy.absolute", "caffe2.proto.caffe2_pb2.NetDef", "<builtin>.print", "numpy.subtract", "caffe2.python.workspace.CurrentWorkspace", "caffe2.python.workspace.ResetWorkspace"], "numpy.subtract": [], "expanddims_squeeze_op_test": ["unittest.main"], "expanddims_squeeze_op_test.ExpandDimsSqueezeTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.lists"], "expanddims_squeeze_op_test.ExpandDimsSqueezeTest.test_squeeze": ["caffe2.python.core.CreateOperator", "<builtin>.range", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.randint"], "expanddims_squeeze_op_test.ExpandDimsSqueezeTest.test_squeeze_fallback": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "numpy.allclose", "caffe2.python.workspace.FetchBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.FeedBlob", "numpy.max", "<builtin>.range", "<builtin>.print", "numpy.random.rand", "numpy.abs", "numpy.random.randint"], "expanddims_squeeze_op_test.ExpandDimsSqueezeTest.test_expand_dims": ["caffe2.python.core.CreateOperator", "<builtin>.len", "<builtin>.range", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.randint"], "expanddims_squeeze_op_test.ExpandDimsSqueezeTest.test_expand_dims_fallback": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "numpy.allclose", "caffe2.python.workspace.FetchBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.FeedBlob", "numpy.max", "<builtin>.len", "<builtin>.range", "<builtin>.print", "numpy.random.rand", "numpy.abs", "numpy.random.randint"], "fc_op_test": ["unittest.main"], "fc_op_test.FcTest": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers"], "fc_op_test.FcTest.test_fc_2_dims": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "fc_op_test.FcTest.test_fc_with_axis": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.abs", "functools.reduce", "numpy.max", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.workspace.ResetWorkspace", "<builtin>.print", "numpy.allclose"], "fc_op_test.FcTest.test_fc_with_axis.<lambda1>": [], "fc_op_test.FcTest.test_fc_with_axis.<lambda2>": [], "fc_op_test.FcTest.test_fc_with_axis_w": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.abs", "functools.reduce", "numpy.max", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.workspace.ResetWorkspace", "<builtin>.print", "numpy.allclose"], "fc_op_test.FcTest.test_fc_with_axis_w.<lambda1>": [], "fc_op_test.FcTest.test_fc_with_axis_w.<lambda2>": [], "fc_op_test.FcTest.test_fc_4_dims_src": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "fc_op_test.FcTest.test_fc_4_dims": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "fc_op_test.FcTest.test_int8_fc_4_dims": ["numpy.absolute", "caffe2.python.core.CreateOperator", "numpy.abs", "numpy.rint", "numpy.max", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CurrentWorkspace", "numpy.transpose", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.SwitchWorkspace", "numpy.square", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.random.rand", "numpy.subtract", "caffe2.proto.caffe2_pb2.NetDef", "numpy.array", "<builtin>.print", "<builtin>.range"], "numpy.rint": [], "leaky_relu_op_test": ["unittest.main"], "leaky_relu_op_test.LeakyReluTest._get_inputs": ["numpy.random.rand", "numpy.logical_and"], "leaky_relu_op_test.LeakyReluTest._get_op": ["caffe2.python.core.CreateOperator"], "leaky_relu_op_test.LeakyReluTest._feed_inputs": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "<builtin>.zip"], "leaky_relu_op_test.LeakyReluTest": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.given"], "leaky_relu_op_test.LeakyReluTest.test_leaky_relu_gradients": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.seed", "leaky_relu_op_test.LeakyReluTest._get_inputs", "leaky_relu_op_test.LeakyReluTest._get_op"], "leaky_relu_op_test.LeakyReluTest.test_leaky_relu_model_helper_helper": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_net", "numpy.random.seed", "caffe2.python.model_helper.ModelHelper", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.random.rand"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_net": [], "LRN_op_test": ["unittest.main"], "LRN_op_test.LRNTest": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.sampled_from"], "LRN_op_test.LRNTest.test_LRN": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "moment_sgd_op_test": ["unittest.main"], "moment_sgd_op_test.TestMomentumSGDUpdateOps": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "moment_sgd_op_test.TestMomentumSGDUpdateOps.test_MomentumSGDUpdate": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand", "<builtin>.int"], "operator_fallback_op_test": ["unittest.main"], "operator_fallback_op_test.TestFallbackOps": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given"], "operator_fallback_op_test.TestFallbackOps.test_in_place": ["caffe2.python.workspace.RunNetOnce", "numpy.abs", "caffe2.python.workspace.RunOperatorOnce", "numpy.max", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.CurrentWorkspace", "caffe2.proto.caffe2_pb2.OperatorDef", "numpy.allclose", "caffe2.proto.caffe2_pb2.NetDef", "<builtin>.print", "caffe2.python.workspace.SwitchWorkspace", "numpy.random.randn", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.workspace.ResetWorkspace"], "order_switch_op_test": ["unittest.main"], "order_switch_op_test.OrderSwitchTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.settings"], "order_switch_op_test.OrderSwitchTest.test_nchw2nhwc": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand"], "order_switch_op_test.OrderSwitchTest.test_nhwc2nchw": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.allclose", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "caffe2.python.workspace.ResetWorkspace", "numpy.abs", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.print", "numpy.max", "caffe2.python.workspace.CurrentWorkspace", "caffe2.python.workspace.FetchBlob"], "pool_op_test": ["unittest.main"], "pool_op_test.PoolTest": ["hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers"], "pool_op_test.PoolTest.test_pooling": ["numpy.random.rand", "hypothesis.assume", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "pool_op_test.PoolTest.test_int8_pooling": ["numpy.random.rand", "caffe2.python.workspace.SwitchWorkspace", "hypothesis.assume", "numpy.absolute", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunNetOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FetchBlob", "numpy.max", "<builtin>.print", "numpy.square", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.workspace.CurrentWorkspace", "numpy.abs", "numpy.subtract"], "pre_convert_test": ["unittest.main"], "pre_convert_test.PreConvertTest": ["hypothesis.given", "hypothesis.strategies.integers"], "pre_convert_test.PreConvertTest.test_preConvert": ["numpy.max", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.CurrentWorkspace", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FeedBlob", "numpy.abs", "numpy.allclose", "pre_convert_test.PreConvertTest.test_preConvert.AddModel", "numpy.random.randint", "caffe2.python.model_helper.ModelHelper", "caffe2.python.core.DeviceScope", "numpy.random.rand", "<builtin>.len", "<builtin>.range", "caffe2.python.transformations.optimizeForMKLDNN", "caffe2.python.core.DeviceOption", "pre_convert_test.PreConvertTest.test_preConvert.AddTrainingOperators", "<builtin>.print", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.workspace.CreateNet", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue"], "pre_convert_test.PreConvertTest.test_preConvert.AddModel": ["caffe2.python.brew.conv_transpose", "caffe2.python.brew.fc", "caffe2.python.brew.conv", "caffe2.python.brew.softmax"], "pre_convert_test.PreConvertTest.test_preConvert.AddTrainingOperators": [], "relu_op_test": ["unittest.main"], "relu_op_test.ReluTest": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.given"], "relu_op_test.ReluTest.test_relu": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.sign", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "relu_op_test.ReluTest.test_int8_relu": ["caffe2.python.workspace.SwitchWorkspace", "numpy.random.rand", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.FetchBlob", "<builtin>.print", "caffe2.python.workspace.FeedBlob", "numpy.square", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.CurrentWorkspace", "caffe2.python.workspace.RunNetOnce", "numpy.subtract", "numpy.sign", "numpy.absolute", "caffe2.python.workspace.RunOperatorOnce", "numpy.abs", "numpy.max"], "reshape_op_test": ["unittest.main"], "reshape_op_test.TestReShapeOps.test_reshape_ops": ["caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "numpy.zeros", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce"], "reshape_op_test.TestReShapeOps.test_basic_reshape": ["reshape_op_test._test_reshape"], "reshape_op_test._test_reshape": ["numpy.asarray", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "caffe2.python.core.CreateOperator", "numpy.testing.assert_allclose", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce"], "reshape_op_test.TestReShapeOps.test_int64_reshape_input": ["reshape_op_test._test_reshape"], "reshape_op_test.TestReShapeOps.test_missing_dim": ["reshape_op_test._test_reshape"], "reshape_op_test.TestReShapeOps.test_in_place": ["reshape_op_test._test_reshape"], "reshape_op_test.TestReShapeOps.test_zero_dim": ["reshape_op_test._test_reshape"], "reshape_op_test.TestReShapeOps.test_zero_dim_and_missing_dim": ["reshape_op_test._test_reshape"], "reshape_op_test.TestReShapeOps.test_backprop": ["caffe2.python.core.DeviceScope", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "caffe2.python.core.Net", "numpy.testing.assert_array_equal", "numpy.testing.assert_allclose"], "reshape_op_test.TestReShapeOps.test_input_shape_changes": ["caffe2.python.core.DeviceScope", "caffe2.python.workspace.CreateNet", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.RunNet", "numpy.random.rand", "caffe2.python.core.Net", "numpy.array", "caffe2.python.workspace.FeedBlob"], "shape_op_test": ["unittest.main"], "shape_op_test.ShapeTest": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.given", "hypothesis.strategies.lists"], "shape_op_test.ShapeTest.test_shape": ["<builtin>.print", "caffe2.python.workspace.FeedBlob", "numpy.abs", "numpy.max", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.FetchBlob", "numpy.allclose", "numpy.random.rand", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator"], "shape_op_test.ShapeTest.test_shape_with_axes": ["<builtin>.print", "caffe2.python.workspace.FeedBlob", "numpy.abs", "numpy.max", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.FetchBlob", "numpy.allclose", "numpy.random.rand", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.set", "<builtin>.list", "caffe2.python.core.CreateOperator"], "sigmoid_op_test": ["unittest.main"], "sigmoid_op_test.SigmoidTest": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.booleans", "caffe2.python.hypothesis_test_util.tensor"], "sigmoid_op_test.SigmoidTest.test_sigmoid": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "softmax_op_test": ["unittest.main"], "softmax_op_test.SoftmaxTest": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given"], "softmax_op_test.SoftmaxTest.test_softmax": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand"], "spatial_bn_op_test": ["unittest.main"], "spatial_bn_op_test.TestSpatialBN": ["hypothesis.strategies.floats", "hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.strategies.integers", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.booleans", "unittest.skipIf"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_test_mode": ["numpy.random.seed", "numpy.random.rand", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "hypothesis.assume", "caffe2.python.hip_test_util.run_in_hip", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_test_mode.reference_spatialbn_test": ["numpy.sqrt"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_train_mode": ["numpy.random.seed", "numpy.random.rand", "<builtin>.print", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "hypothesis.assume", "caffe2.python.hip_test_util.run_in_hip", "numpy.transpose"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_train_mode_gradient_check": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.seed", "numpy.random.rand", "numpy.random.randn", "caffe2.python.core.CreateOperator", "hypothesis.assume", "caffe2.python.hip_test_util.run_in_hip", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "test_ideep_net": ["test_ideep_net.GetArgumentParser", "test_ideep_net.benchmark"], "test_ideep_net.GetArgumentParser": ["argparse.ArgumentParser"], "test_ideep_net.benchmark": ["<builtin>.Exception", "time.time", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FeedBlob", "<builtin>.print", "caffe2.python.workspace.Blobs", "numpy.random.randn", "caffe2.python.core.DeviceOption", "caffe2.python.models.download.ModelDownloader", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.BenchmarkNet"], "transform_ideep_net": ["transform_ideep_net.GetArgumentParser", "transform_ideep_net.Optimize"], "transform_ideep_net.pairwise": ["itertools.tee", "<builtin>.next", "<builtin>.zip"], "transform_ideep_net.last_producer": ["<builtin>.ValueError", "<builtin>.list", "<builtin>.enumerate", "<builtin>.reversed"], "transform_ideep_net.blob_uses": ["<builtin>.enumerate"], "transform_ideep_net.GetArgumentParser": ["argparse.FileType", "argparse.ArgumentParser"], "argparse.FileType": [], "transform_ideep_net.fuse_first_bn": ["transform_ideep_net.blob_uses", "copy.deepcopy", "numpy.zeros", "<builtin>.len", "numpy.sqrt", "<builtin>.enumerate", "transform_ideep_net.pairwise"], "transform_ideep_net.fuse_bn": ["<builtin>.len", "<builtin>.any", "<builtin>.Exception", "transform_ideep_net.fuse_first_bn"], "transform_ideep_net.fuse_first_mul_add": ["<builtin>.Exception", "transform_ideep_net.blob_uses", "copy.deepcopy", "transform_ideep_net.fuse_first_mul_add.s", "<builtin>.len", "numpy.zeros_like", "numpy.ones_like", "<builtin>.enumerate", "caffe2.python.utils.MakeArgument", "transform_ideep_net.pairwise"], "transform_ideep_net.fuse_first_mul_add.s": [], "transform_ideep_net.fuse_mul_add": ["<builtin>.len", "transform_ideep_net.fuse_first_mul_add"], "transform_ideep_net.add_tensor": ["numpy.dtype", "<builtin>.str", "caffe2.python.core.CreateOperator", "caffe2.python.utils.MakeArgument"], "transform_ideep_net.gen_init_net_from_blobs": ["transform_ideep_net.add_tensor", "caffe2.proto.caffe2_pb2.NetDef"], "transform_ideep_net.fuse_conv_relu": ["caffe2.python._import_c_extension.transform_optimizeForMKLDNN", "copy.deepcopy", "caffe2.python.core.DeviceOption", "caffe2.proto.caffe2_pb2.NetDef"], "transform_ideep_net.Optimize": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.ResetWorkspace", "transform_ideep_net.gen_init_net_from_blobs", "caffe2.python.workspace.FetchBlob", "<builtin>.open", "numpy.allclose", "caffe2.proto.caffe2_pb2.NetDef", "json.load", "<builtin>.print", "transform_ideep_net.fuse_mul_add", "<builtin>.enumerate", "caffe2.python.workspace.Blobs", "caffe2.python.core.DeviceScope", "numpy.random.randn", "transform_ideep_net.fuse_bn", "transform_ideep_net.fuse_conv_relu"], "transpose_op_test": ["unittest.main"], "transpose_op_test.TransposeTest": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.settings"], "transpose_op_test.TransposeTest.test_transpose": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.shuffle", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.arange", "<builtin>.len"], "numpy.random.shuffle": [], "transpose_op_test.TransposeTest.test_transpose.transpose_ref": ["numpy.transpose"], "weightedsum_op_test": ["unittest.main"], "weightedsum_op_test.TestWeightedSumOp": ["hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.given"], "weightedsum_op_test.TestWeightedSumOp.test_weighted_sum": ["<builtin>.vars", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "<builtin>.range", "<builtin>.str", "caffe2.python.core.CreateOperator"], "weightedsum_op_test.TestWeightedSumOp.test_weighted_sum.weighted_sum_op_ref": ["<builtin>.range", "numpy.zeros"], "adaptive_weight": [], "adaptive_weight.AdaptiveWeight.__init__": ["caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.str", "caffe2.python.layers.layers.ModelLayer.input_record.field_blobs", "caffe2.python.layers.layers.ModelLayer.model.add_ad_hoc_plot_blob", "<builtin>.len", "caffe2.python.schema.Scalar", "<builtin>.range", "numpy.array", "<builtin>.min", "<builtin>.super", "<builtin>.float", "<builtin>.getattr"], "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference": [], "caffe2.python.layers.layers.ModelLayer.input_record.field_blobs": [], "caffe2.python.layers.layers.ModelLayer.model.add_ad_hoc_plot_blob": [], "adaptive_weight.AdaptiveWeight.concat_data": ["<builtin>.range"], "adaptive_weight.AdaptiveWeight.log_std_init": ["numpy.log", "caffe2.python.layers.layers.ModelLayer.create_param"], "caffe2.python.layers.layers.ModelLayer.create_param": [], "adaptive_weight.AdaptiveWeight.log_std_weight": [], "adaptive_weight.AdaptiveWeight.log_std_reg": [], "adaptive_weight.AdaptiveWeight.inv_var_init": ["caffe2.python.regularizer.LogBarrier", "<builtin>.TypeError", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.regularizer.BoundedGradientProjection"], "adaptive_weight.AdaptiveWeight.inv_var_weight": [], "adaptive_weight.AdaptiveWeight.inv_var_reg": [], "adaptive_weight.AdaptiveWeight._add_ops_impl": ["adaptive_weight.AdaptiveWeight.concat_data", "<builtin>.range"], "adaptive_weight.AdaptiveWeight.add_ops": ["adaptive_weight.AdaptiveWeight._add_ops_impl"], "add_bias": [], "add_bias.AddBias.__init__": ["<builtin>.len", "<builtin>.isinstance", "math.sqrt", "caffe2.python.layers.layers.ModelLayer.create_param", "<builtin>.super", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.Scalar"], "add_bias.AddBias.add_ops": [], "arc_cosine_feature_map": [], "arc_cosine_feature_map.ArcCosineFeatureMap.__init__": ["numpy.sqrt", "<builtin>.isinstance", "arc_cosine_feature_map.ArcCosineFeatureMap._initialize_params", "numpy.random.normal", "<builtin>.super", "<builtin>.type", "numpy.random.uniform", "caffe2.python.schema.Scalar"], "arc_cosine_feature_map.ArcCosineFeatureMap._initialize_params": ["caffe2.python.layers.layers.ModelLayer.create_param"], "arc_cosine_feature_map.ArcCosineFeatureMap._heaviside_with_power": ["<builtin>.float"], "arc_cosine_feature_map.ArcCosineFeatureMap.add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.field_blobs", "arc_cosine_feature_map.ArcCosineFeatureMap._heaviside_with_power"], "batch_huber_loss": [], "batch_huber_loss.BatchHuberLoss.__init__": ["<builtin>.super", "caffe2.python.schema.Scalar", "caffe2.python.layers.layers.ModelLayer.tags.update", "caffe2.python.schema.Struct", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.is_schema_subset"], "caffe2.python.schema.is_schema_subset": [], "caffe2.python.layers.layers.ModelLayer.tags.update": [], "batch_huber_loss.BatchHuberLoss.add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.weight.field_type", "caffe2.python.layers.layers.ModelLayer.input_record.prediction", "caffe2.python.schema.data_type_for_dtype", "caffe2.python.layers.layers.ModelLayer.input_record.prediction.field_type", "<builtin>.float", "caffe2.python.layers.layers.ModelLayer.input_record.weight", "caffe2.python.layers.layers.ModelLayer.input_record.label.field_blobs", "caffe2.python.layers.layers.ModelLayer.input_record.label.field_type"], "caffe2.python.layers.layers.ModelLayer.input_record.prediction": [], "caffe2.python.layers.layers.ModelLayer.input_record.label.field_blobs": [], "caffe2.python.layers.layers.ModelLayer.input_record.label.field_type": [], "caffe2.python.layers.layers.ModelLayer.input_record.prediction.field_type": [], "caffe2.python.layers.layers.ModelLayer.input_record.weight": [], "caffe2.python.layers.layers.ModelLayer.input_record.weight.field_type": [], "batch_lr_loss": [], "batch_lr_loss.BatchLRLoss.__init__": ["caffe2.python.schema.Struct", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.is_schema_subset", "<builtin>.super", "caffe2.python.schema.Scalar", "batch_lr_loss.BatchLRLoss.init_weight", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.layers.layers.ModelLayer.tags.update"], "batch_lr_loss.BatchLRLoss.init_weight": ["caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.layers.layers.ModelLayer.model.add_global_constant"], "caffe2.python.layers.layers.ModelLayer.model.add_global_constant": [], "batch_lr_loss.BatchLRLoss.update_weight": [], "batch_lr_loss.BatchLRLoss.add_ops": ["<builtin>.float", "batch_lr_loss.BatchLRLoss.update_weight", "caffe2.python.layers.layers.ModelLayer.input_record.weight", "caffe2.python.layers.layers.ModelLayer.input_record.label", "caffe2.python.layers.layers.ModelLayer.input_record.weight.field_type", "caffe2.python.layers.layers.ModelLayer.input_record.prediction", "caffe2.python.layers.layers.ModelLayer.input_record.log_variance"], "caffe2.python.layers.layers.ModelLayer.input_record.label": [], "caffe2.python.layers.layers.ModelLayer.input_record.log_variance": [], "batch_mse_loss": [], "batch_mse_loss.BatchMSELoss.__init__": ["caffe2.python.layers.layers.ModelLayer.tags.update", "<builtin>.super", "caffe2.python.schema.Struct", "caffe2.python.schema.Scalar", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.is_schema_subset"], "batch_mse_loss.BatchMSELoss.add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.prediction", "caffe2.python.schema.data_type_for_dtype", "caffe2.python.layers.layers.ModelLayer.input_record.label.field_blobs", "caffe2.python.layers.layers.ModelLayer.input_record.label.field_type", "caffe2.python.layers.layers.ModelLayer.input_record.weight", "caffe2.python.layers.layers.ModelLayer.input_record.prediction.field_type", "caffe2.python.layers.layers.ModelLayer.input_record.weight.field_type"], "batch_normalization": [], "batch_normalization.BatchNormalization.__init__": ["<builtin>.isinstance", "<builtin>.len", "caffe2.python.schema.Scalar", "<builtin>.ValueError", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.super", "caffe2.python.layers.layers.ModelLayer.create_param"], "batch_normalization.BatchNormalization._add_ops": ["<builtin>.len", "caffe2.python.layers.layers.ModelLayer.input_record.field_blobs"], "batch_normalization.BatchNormalization.add_train_ops": ["batch_normalization.BatchNormalization._add_ops"], "batch_normalization.BatchNormalization.add_eval_ops": ["batch_normalization.BatchNormalization._add_ops"], "batch_normalization.BatchNormalization.add_ops": ["batch_normalization.BatchNormalization.add_eval_ops"], "batch_sigmoid_cross_entropy_loss": [], "batch_sigmoid_cross_entropy_loss.BatchSigmoidCrossEntropyLoss.__init__": ["<builtin>.tuple", "caffe2.python.schema.Scalar", "<builtin>.super", "caffe2.python.layers.layers.ModelLayer.tags.update", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.Struct", "caffe2.python.schema.is_schema_subset"], "batch_sigmoid_cross_entropy_loss.BatchSigmoidCrossEntropyLoss.add_ops": [], "batch_softmax_loss": [], "batch_softmax_loss.BatchSoftmaxLoss.__init__": ["caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.super", "caffe2.python.schema.Struct", "caffe2.python.schema.Scalar", "caffe2.python.schema.is_schema_subset", "batch_softmax_loss.BatchSoftmaxLoss.initialize_label_smoothing_constants"], "batch_softmax_loss.BatchSoftmaxLoss.initialize_label_smoothing_constants": ["numpy.dtype", "numpy.array", "caffe2.python.layers.layers.ModelLayer.model.add_global_constant", "<builtin>.len"], "batch_softmax_loss.BatchSoftmaxLoss.compute_smoothed_label": ["caffe2.python.layers.layers.ModelLayer.input_record.label.field_type", "caffe2.python.layers.layers.ModelLayer.input_record.label"], "batch_softmax_loss.BatchSoftmaxLoss.add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.weight", "caffe2.python.layers.layers.ModelLayer.input_record.label.field_types", "caffe2.python.layers.layers.ModelLayer.input_record.label.field_blobs", "batch_softmax_loss.BatchSoftmaxLoss.compute_smoothed_label", "caffe2.python.layers.layers.ModelLayer.input_record.prediction.field_blobs", "caffe2.python.layers.layers.ModelLayer.input_record.weight.field_type"], "caffe2.python.layers.layers.ModelLayer.input_record.label.field_types": [], "caffe2.python.layers.layers.ModelLayer.input_record.prediction.field_blobs": [], "blob_weighted_sum": [], "blob_weighted_sum.BlobWeightedSum.__init__": ["caffe2.python.layers.layers.ModelLayer.input_record.field_blobs", "<builtin>.float", "<builtin>.super", "<builtin>.range", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.schema.Scalar", "<builtin>.len", "<builtin>.all"], "blob_weighted_sum.BlobWeightedSum.add_ops": ["<builtin>.zip"], "bpr_loss": [], "bpr_loss.BPRLoss.__init__": ["caffe2.python.schema.Struct", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.layers.layers.ModelLayer.tags.update", "caffe2.python.schema.List", "caffe2.python.schema.is_schema_subset", "caffe2.python.schema.Scalar", "<builtin>.super"], "bpr_loss.BPRLoss.add_ops": [], "bucket_weighted": ["logging.getLogger"], "bucket_weighted.BucketWeighted.__init__": ["caffe2.python.layers.layers.get_categorical_limit", "<builtin>.isinstance", "caffe2.python.schema.Scalar", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.layers.layers.ModelLayer.tags.update", "caffe2.python.schema.Struct", "<builtin>.super", "<builtin>.len"], "caffe2.python.layers.layers.get_categorical_limit": [], "bucket_weighted.BucketWeighted.get_memory_usage": [], "bucket_weighted.BucketWeighted.add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.values"], "caffe2.python.layers.layers.ModelLayer.input_record.values": [], "build_index": [], "build_index.MapToRange.__init__": ["caffe2.python.schema.Scalar", "caffe2.python.layers.layers.ModelLayer.create_param", "<builtin>.super", "caffe2.python.schema.Struct", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.isinstance"], "build_index.MapToRange.add_train_ops": ["caffe2.python.layers.layers.ModelLayer.input_record", "caffe2.python.layers.layers.ModelLayer.input_record.field_type"], "caffe2.python.layers.layers.ModelLayer.input_record.field_type": [], "caffe2.python.layers.layers.ModelLayer.input_record": [], "build_index.MapToRange.add_eval_ops": ["build_index.MapToRange.add_train_ops"], "build_index.MapToRange.add_ops": ["build_index.MapToRange.add_eval_ops"], "concat.get_concatenated_feature_to_index": ["collections.defaultdict", "<builtin>.isinstance", "<builtin>.dict", "<builtin>.hasattr"], "concat.Concat.__init__": ["caffe2.python.schema.FeatureSpec", "<builtin>.len", "<builtin>.str", "caffe2.python.schema.Metadata", "<builtin>.list", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.Scalar", "<builtin>.super", "concat.get_concatenated_feature_to_index", "future.utils.viewitems", "caffe2.python.schema.from_blob_list", "<builtin>.isinstance"], "concat.Concat.add_ops": [], "constant_weight": [], "constant_weight.ConstantWeight.__init__": ["caffe2.python.layers.layers.ModelLayer.model.add_global_constant", "caffe2.python.schema.Scalar", "<builtin>.len", "<builtin>.range", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.layers.layers.ModelLayer.input_record.field_blobs", "<builtin>.float", "<builtin>.super"], "constant_weight.ConstantWeight.add_ops": ["<builtin>.zip"], "conv.Conv.__init__": ["caffe2.python.schema.Scalar", "<builtin>.isinstance", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.layers.layers.ModelLayer.create_param", "<builtin>.int", "<builtin>.super"], "conv.Conv.add_ops": [], "dropout.Dropout.__init__": ["<builtin>.super", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.isinstance"], "dropout.Dropout._add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.field_blobs"], "dropout.Dropout.add_train_ops": ["dropout.Dropout._add_ops"], "dropout.Dropout.add_eval_ops": ["dropout.Dropout._add_ops"], "dropout.Dropout.add_ops": ["dropout.Dropout.add_eval_ops"], "fc.get_fc_predictor_version": [], "fc.FC.__init__": ["math.sqrt", "<builtin>.len", "<builtin>.super", "<builtin>.enumerate", "caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.get_next_blob_reference", "fc.FC.calculate_fc_output_dims", "caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.create_param", "<builtin>.tuple", "numpy.prod", "caffe2.python.schema.Scalar", "<builtin>.isinstance", "<builtin>.list"], "fc.FC.calculate_fc_output_dims": ["<builtin>.sum", "<builtin>.int", "numpy.floor"], "caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.create_param": [], "caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.get_next_blob_reference": [], "fc.FC._insert_fc_ops": ["<builtin>.Exception"], "fc.FC._add_ops": ["<builtin>.len", "<builtin>.zip", "<builtin>.str", "<builtin>.range", "<builtin>.int", "fc.FC._insert_fc_ops"], "fc.FC.add_ops": ["caffe2.python.helpers.arg_scope.get_current_scope", "fc.FC._add_ops"], "caffe2.python.helpers.arg_scope.get_current_scope": [], "fc.FC.add_train_ops": ["fc.FC._add_ops"], "fc.FC.get_fp16_compatible_parameters": ["<builtin>.len"], "fc.FC.param_blobs": ["<builtin>.len"], "fc_without_bias": [], "fc_without_bias.FCWithoutBias.__init__": ["caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.create_param", "<builtin>.len", "<builtin>.super", "math.sqrt", "caffe2.python.schema.Scalar", "caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.get_next_blob_reference", "<builtin>.isinstance"], "fc_without_bias.FCWithoutBias._add_ops": [], "fc_without_bias.FCWithoutBias.param_blobs": [], "fc_with_bootstrap": [], "fc_with_bootstrap.get_fc_predictor_version": [], "fc_with_bootstrap.FCWithBootstrap.__init__": ["caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.get_next_blob_reference", "numpy.prod", "<builtin>.len", "<builtin>.super", "<builtin>.range", "<builtin>.tuple", "<builtin>.list", "<builtin>.isinstance", "math.sqrt", "caffe2.python.schema.Struct"], "fc_with_bootstrap.FCWithBootstrap._generate_bootstrapped_indices": ["numpy.array", "caffe2.python.core.NameScope"], "fc_with_bootstrap.FCWithBootstrap._bootstrap_ops": ["caffe2.python.schema.Scalar"], "fc_with_bootstrap.FCWithBootstrap._insert_fc_ops": ["caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.input_record.field_blobs", "<builtin>.Exception"], "caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.input_record.field_blobs": [], "fc_with_bootstrap.FCWithBootstrap._add_ops": ["fc_with_bootstrap.FCWithBootstrap._insert_fc_ops", "<builtin>.zip", "<builtin>.len", "<builtin>.str"], "fc_with_bootstrap.FCWithBootstrap.add_ops": ["caffe2.python.helpers.arg_scope.get_current_scope", "fc_with_bootstrap.FCWithBootstrap._generate_bootstrapped_indices", "caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.input_record.field_blobs", "fc_with_bootstrap.FCWithBootstrap._add_ops", "<builtin>.range"], "fc_with_bootstrap.FCWithBootstrap.add_train_ops": ["fc_with_bootstrap.FCWithBootstrap._generate_bootstrapped_indices", "caffe2.python.layers.sampling_trainable_mixin.SamplingTrainableMixin.input_record.field_blobs", "fc_with_bootstrap.FCWithBootstrap._add_ops", "<builtin>.range", "fc_with_bootstrap.FCWithBootstrap._bootstrap_ops"], "fc_with_bootstrap.FCWithBootstrap.get_fp16_compatible_parameters": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.Exception"], "fc_with_bootstrap.FCWithBootstrap.param_blobs": ["<builtin>.len", "<builtin>.Exception"], "feature_sparse_to_dense": [], "feature_sparse_to_dense.FeatureSparseToDense.__init__": ["<builtin>.float", "caffe2.python.schema.Scalar", "caffe2.python.schema.attach_metadata_to_scalars", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "numpy.isnan", "caffe2.python.schema.Metadata", "caffe2.python.schema.Struct", "<builtin>.super", "<builtin>.len", "<builtin>.TypeError"], "feature_sparse_to_dense.FeatureSparseToDense.add_ops": [], "feature_sparse_to_dense.FeatureSparseToDense.get_metadata": [], "feature_sparse_to_dense.FeatureSparseToDense.get_accessed_features": ["collections.defaultdict", "<builtin>.set", "caffe2.python.layers.layers.AccessedFeatures"], "functional.Functional.__init__": ["caffe2.python.core.Net", "<builtin>.tuple", "<builtin>.range", "caffe2.python.schema.as_record", "<builtin>.isinstance", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.schema.Struct", "caffe2.python.schema.RawTuple", "caffe2.python.scope.NameScope", "caffe2.python.schema.InitEmptyRecord", "<builtin>.str", "caffe2.python.schema.NewRecord", "<builtin>.zip", "<builtin>.super", "<builtin>.len"], "functional.Functional.add_ops": [], "gather_record": [], "gather_record.GatherRecord.__init__": ["<builtin>.super", "caffe2.python.schema.NewRecord", "caffe2.python.layers.layers.ModelLayer.input_record.indices"], "caffe2.python.layers.layers.ModelLayer.input_record.indices": [], "gather_record.GatherRecord._gather_scalar": [], "gather_record.GatherRecord._gather_struct": ["gather_record.GatherRecord._dispatch"], "gather_record.GatherRecord._dispatch": ["<builtin>.isinstance", "gather_record.GatherRecord._gather_scalar", "gather_record.GatherRecord._gather_list", "gather_record.GatherRecord._gather_struct"], "gather_record.GatherRecord._gather_list": ["gather_record.GatherRecord._gather_scalar", "gather_record.GatherRecord._dispatch", "<builtin>.str"], "gather_record.GatherRecord.add_ops": ["gather_record.GatherRecord._dispatch"], "homotopy_weight": ["logging.getLogger"], "homotopy_weight.HomotopyWeight.__init__": ["caffe2.python.schema.Scalar", "<builtin>.float", "homotopy_weight.HomotopyWeight.solve_inv_lr_params", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.layers.layers.ModelLayer.input_record.field_blobs", "caffe2.python.layers.layers.ModelLayer.model.add_global_constant", "homotopy_weight.HomotopyWeight.create_atomic_iter", "<builtin>.len", "<builtin>.super"], "homotopy_weight.HomotopyWeight.create_atomic_iter": ["caffe2.python.layers.layers.ModelLayer.create_param"], "homotopy_weight.HomotopyWeight.solve_inv_lr_params": ["<builtin>.float", "numpy.sqrt", "numpy.log"], "homotopy_weight.HomotopyWeight.update_weight": [], "homotopy_weight.HomotopyWeight.add_ops": ["homotopy_weight.HomotopyWeight.update_weight"], "label_smooth": [], "label_smooth.LabelSmooth.__init__": ["label_smooth.LabelSmooth.set_dim", "<builtin>.super", "numpy.array", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "label_smooth.LabelSmooth.set_smooth_matrix", "caffe2.python.schema.Scalar"], "label_smooth.LabelSmooth.set_dim": ["<builtin>.int", "numpy.sqrt"], "label_smooth.LabelSmooth.set_smooth_matrix": ["numpy.dtype", "caffe2.python.layers.layers.ModelLayer.model.add_global_constant"], "label_smooth.LabelSmooth.add_ops_for_binary_prob_label": [], "label_smooth.LabelSmooth.add_ops_for_categorical_label": [], "label_smooth.LabelSmooth.add_ops": ["label_smooth.LabelSmooth.add_ops_for_binary_prob_label", "label_smooth.LabelSmooth.add_ops_for_categorical_label"], "last_n_window_collector": [], "last_n_window_collector.LastNWindowCollector.__init__": ["<builtin>.isinstance", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.schema.Scalar", "caffe2.python.schema.Struct", "<builtin>.super", "caffe2.python.schema.from_blob_list"], "last_n_window_collector.LastNWindowCollector.add_ops": [], "layers": ["caffe2.python.schema.Map", "collections.namedtuple", "logging.getLogger", "caffe2.python.schema.List", "caffe2.python.schema.MapWithEvicted", "caffe2.python.schema.ListWithEvicted"], "caffe2.python.schema.MapWithEvicted": [], "layers.almost_equal_schemas": ["caffe2.python.schema.equal_schemas"], "layers.get_key": ["<builtin>.NotImplementedError", "layers.almost_equal_schemas", "<builtin>.str"], "layers.get_categorical_limit": ["layers.get_key"], "layers.get_avg_length": [], "layers.set_request_only": ["caffe2.python.schema.Metadata", "caffe2.python.schema.FeatureSpec", "numpy.issubdtype"], "layers.register_layer": [], "layers.layer_exists": [], "layers.get_layer_class": [], "layers.create_layer": [], "layers.LayerParameter.__init__": ["<builtin>.isinstance", "<builtin>.str"], "layers.LayerParameter.initializer": ["<builtin>.getattr", "caffe2.python.core.IsOperator", "<builtin>.type", "layers.LayerParameter._infer_shape_from_initializer"], "layers.LayerParameter._infer_shape_from_initializer": ["caffe2.python.core.Net", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.WorkspaceGuard", "<builtin>.list", "caffe2.python.workspace.RunNetOnce"], "layers.LayerParameter.shape": [], "layers.LayerParameter.__str__": ["<builtin>.str"], "layers.is_request_only_scalar": ["<builtin>.getattr", "<builtin>.len"], "layers.ModelLayer.__init__": ["<builtin>.isinstance", "caffe2.python.layers.tags.TagContext.current", "<builtin>.len", "layers.is_request_only_scalar", "<builtin>.set"], "caffe2.python.layers.tags.TagContext.current": [], "layers.ModelLayer.get_type": [], "layers.ModelLayer._check_output_schema": ["caffe2.python.schema.is_schema_subset"], "layers.ModelLayer.predict_input_record": [], "layers.ModelLayer.input_record": [], "layers.ModelLayer.predict_output_schema": ["layers.ModelLayer._check_output_schema"], "layers.ModelLayer.output_schema": ["layers.set_request_only", "layers.ModelLayer._check_output_schema"], "layers.ModelLayer.get_parameters": [], "layers.ModelLayer.get_fp16_compatible_parameters": [], "layers.ModelLayer.get_memory_usage": [], "layers.ModelLayer.get_accessed_features": [], "layers.ModelLayer.add_init_params": ["caffe2.python.utils.OpAlmostEqual", "caffe2.python.scope.CurrentDeviceScope", "caffe2.proto.caffe2_pb2.OperatorDef", "<builtin>.any"], "layers.ModelLayer.create_param": ["<builtin>.all", "caffe2.python.scope.NameScope"], "layers.ModelLayer.get_next_blob_reference": ["caffe2.python.scope.NameScope"], "layers.ModelLayer.add_operators": ["layers.ModelLayer.add_eval_ops", "layers.ModelLayer.add_ops_to_accumulate_pred", "layers.ModelLayer.add_param_copy_operators", "caffe2.python.scope.NameScope", "layers.ModelLayer.add_train_ops", "layers.ModelLayer.add_ops", "layers.ModelLayer.add_init_params"], "layers.ModelLayer.add_train_ops": ["layers.ModelLayer.add_eval_ops"], "layers.ModelLayer.add_eval_ops": ["layers.ModelLayer.add_ops"], "layers.ModelLayer.add_ops_to_accumulate_pred": ["layers.ModelLayer.add_eval_ops"], "layers.ModelLayer.add_ops": [], "layers.ModelLayer.add_param_copy_operators": ["<builtin>.str"], "layers.ModelLayer.export_output_for_metrics": [], "layers.ModelLayer.export_params_for_metrics": ["<builtin>.str", "layers.ModelLayer.get_next_blob_reference"], "layer_normalization": [], "layer_normalization.LayerNormalization.__init__": ["<builtin>.float", "<builtin>.len", "<builtin>.isinstance", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.super", "caffe2.python.schema.Scalar", "caffe2.python.layers.layers.ModelLayer.create_param"], "layer_normalization.LayerNormalization.add_ops_with_layer_norm_op": ["caffe2.python.layers.layers.ModelLayer.input_record.field_blobs"], "layer_normalization.LayerNormalization.add_ops_without_layer_norm_op": ["caffe2.python.layers.layers.ModelLayer.input_record.field_blobs"], "layer_normalization.LayerNormalization.add_ops": ["layer_normalization.LayerNormalization.add_ops_with_layer_norm_op", "layer_normalization.LayerNormalization.add_ops_without_layer_norm_op"], "margin_rank_loss": [], "margin_rank_loss.MarginRankLoss.__init__": ["caffe2.python.schema.is_schema_subset", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.Scalar", "caffe2.python.layers.layers.ModelLayer.tags.update", "<builtin>.super", "caffe2.python.schema.List", "caffe2.python.schema.Struct"], "margin_rank_loss.MarginRankLoss.add_ops": [], "merge_id_lists": [], "merge_id_lists.MergeIdLists.__init__": ["caffe2.python.layers.layers.get_categorical_limit", "<builtin>.super", "<builtin>.max", "caffe2.python.schema.NewRecord", "<builtin>.all", "caffe2.python.schema.equal_schemas", "caffe2.python.schema.Metadata", "caffe2.python.schema.Scalar", "caffe2.python.schema.List"], "merge_id_lists.MergeIdLists.add_ops": [], "pairwise_similarity": [], "pairwise_similarity.PairwiseSimilarity.__init__": ["<builtin>.super", "<builtin>.isinstance", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.Scalar"], "pairwise_similarity.PairwiseSimilarity.add_ops": ["<builtin>.NotImplementedError"], "position_weighted": ["logging.getLogger"], "position_weighted.PositionWeighted.__init__": ["caffe2.python.schema.Scalar", "caffe2.python.layers.layers.ModelLayer.create_param", "<builtin>.isinstance", "caffe2.python.layers.layers.get_categorical_limit", "<builtin>.str", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.layers.layers.ModelLayer.tags.update", "caffe2.python.schema.Struct", "<builtin>.super"], "position_weighted.PositionWeighted.get_memory_usage": [], "position_weighted.PositionWeighted.add_ops": [], "random_fourier_features": [], "random_fourier_features.RandomFourierFeatures.__init__": ["<builtin>.isinstance", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.super", "caffe2.python.schema.Scalar"], "random_fourier_features.RandomFourierFeatures.add_ops": ["numpy.sqrt"], "reservoir_sampling": [], "reservoir_sampling.ReservoirSampling.__init__": ["<builtin>.super", "caffe2.python.schema.from_blob_list", "caffe2.python.schema.Scalar", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.schema.Struct"], "reservoir_sampling.ReservoirSampling.add_ops": [], "sampling_trainable_mixin": [], "sampling_trainable_mixin.SamplingTrainableMixin.__init__": ["<builtin>.super"], "sampling_trainable_mixin.SamplingTrainableMixin": ["abc.abstractmethod"], "sampling_trainable_mixin.SamplingTrainableMixin.param_blobs": [], "sampling_trainable_mixin.SamplingTrainableMixin.train_param_blobs": [], "sampling_trainable_mixin.SamplingTrainableMixin._add_ops": [], "sampling_trainable_mixin.SamplingTrainableMixin.add_ops": ["sampling_trainable_mixin.SamplingTrainableMixin._add_ops"], "sampling_trainable_mixin.SamplingTrainableMixin.add_train_ops": ["sampling_trainable_mixin.SamplingTrainableMixin._add_ops"], "sampling_train": [], "sampling_train.SamplingTrain.__init__": ["<builtin>.str", "caffe2.python.layers.layers.get_layer_class", "<builtin>.isinstance", "<builtin>.super", "<builtin>.issubclass"], "caffe2.python.layers.layers.get_layer_class": [], "sampling_train.SamplingTrain.add_ops": [], "sampling_train.SamplingTrain.add_train_ops": ["<builtin>.zip"], "select_record_by_context": ["logging.getLogger"], "select_record_by_context.SelectRecordByContext.__init__": ["<builtin>.isinstance", "caffe2.python.schema.equal_schemas", "caffe2.python.schema.NewRecord", "<builtin>.super", "<builtin>.len"], "select_record_by_context.SelectRecordByContext._set_output_blobs": ["caffe2.python.layers.layers.ModelLayer.input_record.get", "<builtin>.zip"], "caffe2.python.layers.layers.ModelLayer.input_record.get": [], "select_record_by_context.SelectRecordByContext.add_ops": ["select_record_by_context.SelectRecordByContext._set_output_blobs"], "select_record_by_context.SelectRecordByContext.add_eval_ops": ["select_record_by_context.SelectRecordByContext._set_output_blobs"], "select_record_by_context.SelectRecordByContext.add_train_ops": ["select_record_by_context.SelectRecordByContext._set_output_blobs"], "select_record_by_context.SelectRecordByContext.add_ops_to_accumulate_pred": ["select_record_by_context.SelectRecordByContext._set_output_blobs"], "semi_random_features": [], "semi_random_features.SemiRandomFeatures.__init__": ["caffe2.python.schema.is_schema_subset", "caffe2.python.schema.Scalar", "numpy.sqrt", "<builtin>.super", "caffe2.python.layers.arc_cosine_feature_map.ArcCosineFeatureMap._initialize_params", "caffe2.python.schema.Struct", "<builtin>.isinstance"], "caffe2.python.layers.arc_cosine_feature_map.ArcCosineFeatureMap._initialize_params": [], "semi_random_features.SemiRandomFeatures.add_ops": ["caffe2.python.layers.arc_cosine_feature_map.ArcCosineFeatureMap._heaviside_with_power"], "caffe2.python.layers.arc_cosine_feature_map.ArcCosineFeatureMap._heaviside_with_power": [], "sparse_dropout_with_replacement": [], "sparse_dropout_with_replacement.SparseDropoutWithReplacement.__init__": ["caffe2.python.schema.equal_schemas", "<builtin>.super", "<builtin>.float", "caffe2.python.schema.NewRecord", "<builtin>.int"], "sparse_dropout_with_replacement.SparseDropoutWithReplacement._add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.lengths", "caffe2.python.layers.layers.ModelLayer.input_record.items"], "caffe2.python.layers.layers.ModelLayer.input_record.items": [], "caffe2.python.layers.layers.ModelLayer.input_record.lengths": [], "sparse_dropout_with_replacement.SparseDropoutWithReplacement.add_train_ops": ["sparse_dropout_with_replacement.SparseDropoutWithReplacement._add_ops"], "sparse_dropout_with_replacement.SparseDropoutWithReplacement.add_eval_ops": ["sparse_dropout_with_replacement.SparseDropoutWithReplacement._add_ops"], "sparse_dropout_with_replacement.SparseDropoutWithReplacement.add_ops": ["sparse_dropout_with_replacement.SparseDropoutWithReplacement._add_ops"], "sparse_feature_hash": [], "sparse_feature_hash.SparseFeatureHash.__init__": ["<builtin>.super", "sparse_feature_hash.SparseFeatureHash.extract_hash_size", "caffe2.python.schema.Metadata", "caffe2.python.core.NameScope", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.layers.layers.ModelLayer.tags.update", "caffe2.python.schema.equal_schemas", "caffe2.python.schema.NewRecord", "numpy.array"], "sparse_feature_hash.SparseFeatureHash.extract_hash_size": [], "sparse_feature_hash.SparseFeatureHash.add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.lengths", "<builtin>.NotImplementedError", "caffe2.python.layers.layers.ModelLayer.input_record.items", "caffe2.python.layers.layers.ModelLayer.input_record.keys", "caffe2.python.layers.layers.ModelLayer.input_record.values", "caffe2.python.schema.equal_schemas"], "caffe2.python.layers.layers.ModelLayer.input_record.keys": [], "sparse_itemwise_dropout_with_replacement": [], "sparse_itemwise_dropout_with_replacement.SparseItemwiseDropoutWithReplacement.__init__": ["caffe2.python.schema.equal_schemas", "<builtin>.float", "caffe2.python.schema.NewRecord", "<builtin>.int", "<builtin>.super"], "sparse_itemwise_dropout_with_replacement.SparseItemwiseDropoutWithReplacement._add_ops": ["caffe2.python.layers.layers.ModelLayer.input_record.lengths", "caffe2.python.layers.layers.ModelLayer.input_record.items"], "sparse_itemwise_dropout_with_replacement.SparseItemwiseDropoutWithReplacement.add_train_ops": ["sparse_itemwise_dropout_with_replacement.SparseItemwiseDropoutWithReplacement._add_ops"], "sparse_itemwise_dropout_with_replacement.SparseItemwiseDropoutWithReplacement.add_eval_ops": ["sparse_itemwise_dropout_with_replacement.SparseItemwiseDropoutWithReplacement._add_ops"], "sparse_itemwise_dropout_with_replacement.SparseItemwiseDropoutWithReplacement.add_ops": ["sparse_itemwise_dropout_with_replacement.SparseItemwiseDropoutWithReplacement._add_ops"], "sparse_lookup": ["logging.getLogger"], "sparse_lookup.get_trainer_version_based_on_optim": ["<builtin>.hasattr", "<builtin>.isinstance"], "sparse_lookup.get_sparse_lookup_predictor_version": ["<builtin>.ValueError"], "sparse_lookup.get_sparse_lookup_trainer_version": [], "sparse_lookup._is_id_list": ["caffe2.python.layers.layers.almost_equal_schemas"], "sparse_lookup._is_id_score_list": ["caffe2.python.layers.layers.almost_equal_schemas"], "sparse_lookup.SparseLookup.__init__": ["caffe2.python.schema.Scalar", "<builtin>.repr", "<builtin>.isinstance", "sparse_lookup.get_trainer_version_based_on_optim", "caffe2.python.layers.layers.get_key", "caffe2.python.layers.layers.ModelLayer.input_record.values", "sparse_lookup._is_id_score_list", "<builtin>.type", "caffe2.python.layers.layers.get_categorical_limit", "caffe2.python.layers.layers.LayerPsParam", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.super", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.schema.equal_schemas", "sparse_lookup.SparseLookup._get_default_init_op"], "sparse_lookup.SparseLookup._get_default_init_op": ["<builtin>.NotImplementedError", "math.sqrt"], "caffe2.python.layers.layers.LayerPsParam": [], "sparse_lookup.SparseLookup.get_memory_usage": ["functools.reduce"], "sparse_lookup.SparseLookup.get_fp16_compatible_parameters": [], "sparse_lookup.SparseLookup.support_8bit": ["<builtin>.len"], "sparse_lookup.SparseLookup.get_8bits_compatible_parameters": ["sparse_lookup.SparseLookup.support_8bit", "collections.namedtuple"], "sparse_lookup.SparseLookup._gather_wrapper": [], "sparse_lookup.SparseLookup._sparse_lengths_weighted_reducer": ["<builtin>.len", "caffe2.python.layers.layers.ModelLayer.input_record.lengths"], "sparse_lookup.SparseLookup._add_ops_id_list": ["caffe2.python.layers.layers.ModelLayer.input_record.lengths", "sparse_lookup.SparseLookup._sparse_lengths_weighted_reducer", "caffe2.python.layers.layers.ModelLayer.input_record.items", "<builtin>.len", "sparse_lookup.SparseLookup._gather_wrapper"], "sparse_lookup.SparseLookup._add_ops_id_score_list": ["caffe2.python.layers.layers.ModelLayer.input_record.lengths", "caffe2.python.layers.layers.ModelLayer.input_record.values", "sparse_lookup.SparseLookup._sparse_lengths_weighted_reducer", "caffe2.python.layers.layers.ModelLayer.input_record.keys", "sparse_lookup.SparseLookup._gather_wrapper"], "sparse_lookup.SparseLookup._add_ops": ["sparse_lookup.SparseLookup._add_ops_id_score_list", "sparse_lookup._is_id_list", "sparse_lookup.SparseLookup._add_ops_id_list", "sparse_lookup._is_id_score_list"], "sparse_lookup.SparseLookup.add_train_ops": ["sparse_lookup.SparseLookup._add_ops"], "sparse_lookup.SparseLookup.add_ops": ["sparse_lookup.SparseLookup.support_8bit", "sparse_lookup.SparseLookup._add_ops", "caffe2.python.helpers.arg_scope.get_current_scope", "sparse_lookup.get_sparse_lookup_predictor_version"], "split": [], "split.Split.__init__": ["<builtin>.range", "<builtin>.sum", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "<builtin>.isinstance", "<builtin>.len", "caffe2.python.schema.Tuple", "caffe2.python.schema.Scalar", "<builtin>.int", "<builtin>.super", "<builtin>.list"], "split.Split.add_ops": [], "tags": [], "tags.TagContext.__init__": [], "tags.TagContext.add_tags": [], "tags.TagContext.remove_tags": ["<builtin>.len"], "tags.Tags.__init__": ["<builtin>.isinstance"], "tags.Tags.__enter__": ["caffe2.python.context.DefaultManaged.current"], "tags.Tags.__exit__": ["caffe2.python.context.DefaultManaged.current"], "tags.Tags.__call__": ["functools.wraps"], "tags.Tags.__call__.wrapper": [], "uniform_sampling": [], "uniform_sampling.UniformSampling.__init__": ["<builtin>.float", "<builtin>.super", "caffe2.python.layers.layers.ModelLayer.get_next_blob_reference", "caffe2.python.schema.Scalar", "<builtin>.isinstance", "caffe2.python.layers.layers.ModelLayer.create_param", "caffe2.python.schema.Struct"], "uniform_sampling.UniformSampling.add_ops": [], "app": ["os.path.join", "os.path.abspath", "app.main", "os.path.dirname", "flask.Flask"], "flask.Flask": [], "app.jsonify_nvd3": ["flask.jsonify"], "flask.jsonify": [], "app.visualize_summary": ["numpy.arange", "numpy.loadtxt", "app.jsonify_nvd3", "<builtin>.max", "os.path.basename", "os.path.splitext", "nvd3.lineChart", "<builtin>.str"], "numpy.loadtxt": [], "nvd3.lineChart": [], "app.visualize_print_log": ["numpy.arange", "numpy.loadtxt", "app.jsonify_nvd3", "<builtin>.min", "<builtin>.max", "os.path.basename", "<builtin>.range", "os.path.splitext", "nvd3.lineChart", "<builtin>.str"], "app.visualize_file": ["os.path.join", "app.visualize_summary", "app.visualize_print_log", "flask.jsonify"], "app.index": ["os.path.basename", "glob.glob", "os.path.join", "flask.render_template"], "flask.render_template": [], "app.visualization": ["app.visualize_file"], "app.main": ["<builtin>.print", "argparse.ArgumentParser"], "mkl_concat_op_test": ["unittest.main"], "mkl_concat_op_test.MKLConcatTest": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.lists"], "mkl_concat_op_test.MKLConcatTest.test_mkl_concat": ["caffe2.python.core.CreateOperator", "<builtin>.range", "<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand"], "mkl_conv_op_test": ["unittest.main"], "mkl_conv_op_test.MKLConvTest": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.settings"], "mkl_conv_op_test.MKLConvTest.test_mkl_convolution": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand"], "mkl_copy_op_test": ["unittest.main"], "mkl_copy_op_test.MKCopyTest": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from"], "mkl_copy_op_test.MKCopyTest.test_mkl_copy": ["numpy.testing.assert_array_equal", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.random.rand", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator"], "mkl_copy_op_test.MKCopyTest.test_mkl_zero_copy": ["numpy.testing.assert_equal", "numpy.zeros", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator"], "mkl_elementwise_add_op_test": ["unittest.main"], "mkl_elementwise_add_op_test.MKLElementwiseAddTest": ["hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.given"], "mkl_elementwise_add_op_test.MKLElementwiseAddTest.test_mkl_elementwise_add": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "mkl_elementwise_sum_op_test": ["unittest.main"], "mkl_elementwise_sum_op_test.MKLElementwiseSumTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.booleans"], "mkl_elementwise_sum_op_test.MKLElementwiseSumTest.test_mkl_elementwise_sum": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "mkl_fc_op_test": ["unittest.main"], "mkl_fc_op_test.MKLFcTest": ["hypothesis.strategies.integers", "hypothesis.given"], "mkl_fc_op_test.MKLFcTest.test_mkl_fc": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand"], "mkl_fc_speed_test": ["unittest.main"], "mkl_fc_speed_test.TestMKLBasic.testFCSpeed": ["numpy.random.rand", "numpy.testing.assert_allclose", "caffe2.python.workspace.BenchmarkNet", "caffe2.python.workspace.FeedBlob", "<builtin>.print", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "caffe2.python.core.DeviceOption", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob"], "mkl_fc_speed_test.TestMKLBasic.testConvReluMaxPoolFcSpeed": ["numpy.random.rand", "numpy.testing.assert_allclose", "caffe2.python.workspace.BenchmarkNet", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "caffe2.python.core.DeviceOption", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob"], "mkl_fill_op_test": ["unittest.main"], "mkl_fill_op_test.MKLFillTest": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.given"], "mkl_fill_op_test.MKLFillTest.test_mkl_fill": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "mkl_LRN_op_test": ["unittest.main"], "mkl_LRN_op_test.MKLLRNTest": ["hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers"], "mkl_LRN_op_test.MKLLRNTest.test_mkl_LRN": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "mkl_LRN_speed_test": ["unittest.main"], "mkl_LRN_speed_test.TestMKLBasic.testLRNSpeed": ["caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "numpy.random.rand", "caffe2.python.workspace.FeedBlob", "<builtin>.print", "caffe2.python.workspace.BenchmarkNet", "numpy.testing.assert_allclose", "caffe2.python.core.DeviceOption", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob"], "mkl_LRN_speed_test.TestMKLBasic.testConvReluLRNSpeed": ["caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.BenchmarkNet", "numpy.testing.assert_allclose", "caffe2.python.core.DeviceOption", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob"], "mkl_pool_op_test": ["unittest.main"], "mkl_pool_op_test.MKLPoolTest": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.given"], "mkl_pool_op_test.MKLPoolTest.test_mkl_pooling": ["hypothesis.assume", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "mkl_pool_speed_test": ["unittest.main"], "mkl_pool_speed_test.TestMKLBasic.testMaxPoolingSpeed": ["caffe2.python.core.DeviceOption", "caffe2.python.workspace.BenchmarkNet", "numpy.random.rand", "numpy.testing.assert_allclose", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.CreateNet", "<builtin>.print", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net"], "mkl_pool_speed_test.TestMKLBasic.testAveragePoolingSpeed": ["caffe2.python.core.DeviceOption", "caffe2.python.workspace.BenchmarkNet", "numpy.random.rand", "numpy.testing.assert_allclose", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.CreateNet", "<builtin>.print", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net"], "mkl_pool_speed_test.TestMKLBasic.testConvReluMaxPoolSpeed": ["caffe2.python.core.DeviceOption", "caffe2.python.workspace.BenchmarkNet", "numpy.random.rand", "numpy.testing.assert_allclose", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net"], "mkl_relu_op_test": ["unittest.main"], "mkl_relu_op_test.MKLReluTest": ["hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.given"], "mkl_relu_op_test.MKLReluTest.test_mkl_relu": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "mkl_sbn_op_test": ["unittest.main"], "mkl_sbn_op_test.MKLSpatialBNTest": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.given"], "mkl_sbn_op_test.MKLSpatialBNTest.test_spatialbn_test_mode": ["numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator", "numpy.random.randn"], "mkl_sbn_op_test.MKLSpatialBNTest.test_spatialbn_train_mode": ["numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator", "numpy.random.randn"], "mkl_sbn_speed_test": ["unittest.main"], "mkl_sbn_speed_test.TestMKLBasic.testSpatialBNTestingSpeed": ["numpy.random.rand", "caffe2.python.core.Net", "<builtin>.print", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNet", "numpy.random.randn", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.BenchmarkNet"], "mkl_sbn_speed_test.TestMKLBasic.testSpatialBNTrainingSpeed": ["numpy.random.rand", "caffe2.python.core.Net", "<builtin>.print", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNet", "numpy.random.randn", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.BenchmarkNet"], "mkl_sigmoid_op_test": ["unittest.main"], "mkl_sigmoid_op_test.MKLSigmoidTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.booleans"], "mkl_sigmoid_op_test.MKLSigmoidTest.test_mkl_sigmoid": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "mkl_speed_test": ["unittest.main"], "mkl_speed_test.TestMKLBasic.testReLUSpeed": ["numpy.testing.assert_allclose", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.BenchmarkNet", "<builtin>.print", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "numpy.random.randn", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob"], "mkl_speed_test.TestMKLBasic.testConvSpeed": ["numpy.testing.assert_allclose", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.BenchmarkNet", "<builtin>.print", "numpy.random.rand", "caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob"], "mkl_squeeze_op_test": ["unittest.main"], "mkl_squeeze_op_test.MKLSqueezeTest": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.strategies.lists"], "mkl_squeeze_op_test.MKLSqueezeTest.test_mkl_squeeze": ["numpy.random.randint", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "rewrite_graph": [], "rewrite_graph.rewrite_init_net_simple": [], "rewrite_graph.last_producer": ["<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.list", "<builtin>.reversed"], "rewrite_graph.fix_BoxWithNMSLimit": ["<builtin>.set", "<builtin>.print"], "rewrite_graph.rewrite_run_net_simple": ["rewrite_graph.rewrite_run_net_simple.mkl_tmp", "caffe2.python.core.CreateOperator", "<builtin>.Exception", "rewrite_graph.fix_BoxWithNMSLimit", "caffe2.python.core.DeviceOption", "rewrite_graph.last_producer"], "rewrite_graph.rewrite_run_net_simple.mkl_tmp": [], "rewrite_graph.rewrite_run_net_simple_xrayocr_lstm": ["caffe2.python.core.CreateOperator", "<builtin>.Exception", "<builtin>.set", "rewrite_graph.fix_BoxWithNMSLimit", "caffe2.python.core.DeviceOption", "rewrite_graph.rewrite_run_net_simple_xrayocr_lstm.mkl_tmp", "rewrite_graph.rewrite_run_net_simple_xrayocr_lstm.cpu_tmp", "<builtin>.enumerate", "rewrite_graph.last_producer"], "rewrite_graph.rewrite_run_net_simple_xrayocr_lstm.mkl_tmp": [], "rewrite_graph.rewrite_run_net_simple_xrayocr_lstm.cpu_tmp": [], "rewrite_graph.rewrite_model_helper_simple": ["rewrite_graph.rewrite_init_net_simple", "copy.deepcopy", "rewrite_graph.rewrite_run_net_simple"], "rewrite_graph_test": ["unittest.main"], "rewrite_graph_test.deterministic_io": ["<builtin>.enumerate", "copy.deepcopy"], "rewrite_graph_test.simple_fc": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.fc"], "rewrite_graph_test.double_matmul": ["caffe2.python.model_helper.ModelHelper", "<builtin>.str", "caffe2.python.brew.fc"], "rewrite_graph_test.simple_relu": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.relu"], "rewrite_graph_test.simple_mlp": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.relu", "caffe2.python.brew.fc"], "rewrite_graph_test.simple_cnn": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.spatial_bn", "caffe2.python.brew.conv", "caffe2.python.brew.relu"], "rewrite_graph_test.alexnet": ["caffe2.python.brew.lrn", "caffe2.python.brew.dropout", "caffe2.python.brew.relu", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.max_pool", "caffe2.python.brew.conv", "caffe2.python.brew.fc"], "rewrite_graph_test.simple_resnet": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.models.resnet.create_resnet_32x32"], "caffe2.python.models.resnet.create_resnet_32x32": [], "rewrite_graph_test.complex_resnet": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.models.resnet.create_resnet50"], "rewrite_graph_test.MKLRewriteTest": ["hypothesis.given", "hypothesis.strategies.sampled_from"], "rewrite_graph_test.MKLRewriteTest.test_mkl_simple_rewrite": ["numpy.testing.assert_allclose", "rewrite_graph_test.MKLRewriteTest.test_mkl_simple_rewrite.run", "numpy.random.randn", "caffe2.python.mkl.rewrite_graph.rewrite_model_helper_simple", "rewrite_graph_test.deterministic_io"], "caffe2.python.mkl.rewrite_graph.rewrite_model_helper_simple": [], "rewrite_graph_test.MKLRewriteTest.test_mkl_simple_rewrite.run": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run"], "rewrite_graph_test.MKLRewriteTest.test_mkl_resnet_rewrite": ["rewrite_graph_test.complex_resnet", "numpy.testing.assert_allclose", "numpy.random.seed", "rewrite_graph_test.MKLRewriteTest.test_mkl_resnet_rewrite.run", "numpy.random.randn", "caffe2.python.mkl.rewrite_graph.rewrite_model_helper_simple", "rewrite_graph_test.deterministic_io"], "rewrite_graph_test.MKLRewriteTest.test_mkl_resnet_rewrite.run": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run"], "rewrite_graph_test.MKLRewriteTest.test_mkl_multi_output_rewrite": ["numpy.testing.assert_allclose", "numpy.random.seed", "rewrite_graph_test.MKLRewriteTest.test_mkl_multi_output_rewrite.run", "rewrite_graph_test.double_matmul", "numpy.random.randn", "caffe2.python.mkl.rewrite_graph.rewrite_model_helper_simple", "rewrite_graph_test.deterministic_io"], "rewrite_graph_test.MKLRewriteTest.test_mkl_multi_output_rewrite.run": ["<builtin>.print", "<builtin>.zip", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob"], "rewrite_graph_test.MKLRewriteTest.test_mkl_alexnet_rewrite": ["rewrite_graph_test.alexnet", "numpy.testing.assert_allclose", "numpy.random.seed", "rewrite_graph_test.MKLRewriteTest.test_mkl_alexnet_rewrite.run", "numpy.random.randn", "caffe2.python.mkl.rewrite_graph.rewrite_model_helper_simple", "rewrite_graph_test.deterministic_io"], "rewrite_graph_test.MKLRewriteTest.test_mkl_alexnet_rewrite.run": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run"], "compute_histogram_for_blobs": [], "compute_histogram_for_blobs.ComputeHistogramForBlobs.__init__": ["<builtin>.int", "<builtin>.float"], "compute_histogram_for_blobs.ComputeHistogramForBlobs.modify_net": ["caffe2.python.core.BlobReference", "<builtin>.str", "caffe2.python.schema.Scalar", "caffe2.python.schema.Struct"], "compute_histogram_for_blobs.ComputeHistogramForBlobs.field_name_suffix": [], "compute_histogram_for_blobs_test": [], "compute_histogram_for_blobs_test.ComputeHistogramForBlobsTest.histogram": ["numpy.zeros", "<builtin>.range"], "compute_histogram_for_blobs_test.ComputeHistogramForBlobsTest.test_compute_histogram_for_blobs": ["numpy.linalg.norm", "unittest.TestCase.assertAlmostEqual", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FeedBlob", "unittest.TestCase.assertEqual", "caffe2.python.modeling.compute_histogram_for_blobs.ComputeHistogramForBlobs", "numpy.random.rand", "compute_histogram_for_blobs_test.ComputeHistogramForBlobsTest.histogram", "<builtin>.len", "caffe2.python.brew.fc", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce"], "caffe2.python.modeling.compute_histogram_for_blobs.ComputeHistogramForBlobs": [], "compute_histogram_for_blobs_test.ComputeHistogramForBlobsTest.test_compute_histogram_for_blobs_modify_output_record": ["numpy.linalg.norm", "unittest.TestCase.assertAlmostEqual", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FeedBlob", "unittest.TestCase.assertEqual", "caffe2.python.modeling.compute_histogram_for_blobs.ComputeHistogramForBlobs", "numpy.random.rand", "compute_histogram_for_blobs_test.ComputeHistogramForBlobsTest.histogram", "<builtin>.len", "caffe2.python.brew.fc", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce"], "compute_norm_for_blobs": [], "compute_norm_for_blobs.ComputeNormForBlobs.__init__": ["<builtin>.Exception"], "compute_norm_for_blobs.ComputeNormForBlobs.modify_net": ["caffe2.python.schema.Scalar", "caffe2.python.core.DeviceScope", "caffe2.python.muji.OnCPU", "caffe2.python.schema.Struct", "<builtin>.str", "caffe2.python.core.BlobReference"], "compute_norm_for_blobs.ComputeNormForBlobs.field_name_suffix": [], "compute_norm_for_blobs_test": [], "compute_norm_for_blobs_test.ComputeNormForBlobsTest.test_compute_norm_for_blobs": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.modeling.compute_norm_for_blobs.ComputeNormForBlobs", "caffe2.python.workspace.FetchBlob", "numpy.linalg.norm", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.python.model_helper.ModelHelper", "unittest.TestCase.assertAlmostEqual"], "caffe2.python.modeling.compute_norm_for_blobs.ComputeNormForBlobs": [], "compute_norm_for_blobs_test.ComputeNormForBlobsTest.test_compute_norm_for_blobs_modify_output_record": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.modeling.compute_norm_for_blobs.ComputeNormForBlobs", "caffe2.python.workspace.FetchBlob", "numpy.linalg.norm", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.python.model_helper.ModelHelper", "unittest.TestCase.assertAlmostEqual"], "compute_norm_for_blobs_test.ComputeNormForBlobsTest.test_compute_averaged_norm_for_blobs": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.modeling.compute_norm_for_blobs.ComputeNormForBlobs", "caffe2.python.workspace.FetchBlob", "numpy.linalg.norm", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.python.model_helper.ModelHelper", "unittest.TestCase.assertAlmostEqual"], "compute_norm_for_blobs_test.ComputeNormForBlobsTest.test_compute_norm_for_blobs_no_print": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.modeling.compute_norm_for_blobs.ComputeNormForBlobs", "caffe2.python.workspace.FetchBlob", "numpy.linalg.norm", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.python.model_helper.ModelHelper", "unittest.TestCase.assertAlmostEqual"], "compute_norm_for_blobs_test.ComputeNormForBlobsTest.test_compute_l1_norm_for_blobs": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob", "numpy.abs", "caffe2.python.workspace.RunNetOnce", "caffe2.python.modeling.compute_norm_for_blobs.ComputeNormForBlobs", "caffe2.python.workspace.FetchBlob", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.python.model_helper.ModelHelper", "numpy.sum", "unittest.TestCase.assertAlmostEqual"], "compute_norm_for_blobs_test.ComputeNormForBlobsTest.test_compute_l1_averaged_norm_for_blobs": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob", "numpy.abs", "caffe2.python.workspace.RunNetOnce", "caffe2.python.modeling.compute_norm_for_blobs.ComputeNormForBlobs", "caffe2.python.workspace.FetchBlob", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "<builtin>.len", "caffe2.python.model_helper.ModelHelper", "numpy.sum", "unittest.TestCase.assertAlmostEqual"], "compute_norm_for_blobs_test.ComputeNormForBlobsTest.test_compute_norm_row_index_for_blobs": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.modeling.compute_norm_for_blobs.ComputeNormForBlobs", "caffe2.python.workspace.FetchBlob", "numpy.linalg.norm", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "caffe2.python.model_helper.ModelHelper", "unittest.TestCase.assertAlmostEqual"], "compute_statistics_for_blobs": [], "compute_statistics_for_blobs.ComputeStatisticsForBlobs.__init__": [], "compute_statistics_for_blobs.ComputeStatisticsForBlobs.modify_net": ["caffe2.python.schema.Scalar", "<builtin>.str", "caffe2.python.schema.Struct", "caffe2.python.core.BlobReference"], "compute_statistics_for_blobs.ComputeStatisticsForBlobs.field_name_suffix": [], "compute_statistics_for_blobs_test": [], "compute_statistics_for_blobs_test.ComputeStatisticsForBlobsTest.test_compute_statistics_for_blobs": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertAlmostEqual", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "numpy.random.rand", "numpy.linalg.norm", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FeedBlob", "caffe2.python.modeling.compute_statistics_for_blobs.ComputeStatisticsForBlobs", "numpy.array"], "caffe2.python.modeling.compute_statistics_for_blobs.ComputeStatisticsForBlobs": [], "compute_statistics_for_blobs_test.ComputeStatisticsForBlobsTest.test_compute_statistics_for_blobs_modify_output_record": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "unittest.TestCase.assertAlmostEqual", "caffe2.python.brew.fc", "unittest.TestCase.assertEqual", "numpy.random.rand", "numpy.linalg.norm", "<builtin>.len", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FeedBlob", "caffe2.python.modeling.compute_statistics_for_blobs.ComputeStatisticsForBlobs", "numpy.array"], "get_entry_from_blobs": [], "get_entry_from_blobs.GetEntryFromBlobs.__init__": [], "get_entry_from_blobs.GetEntryFromBlobs.modify_net": ["caffe2.python.schema.Scalar", "caffe2.python.core.BlobReference", "caffe2.python.schema.Struct", "<builtin>.ValueError", "<builtin>.str"], "get_entry_from_blobs.GetEntryFromBlobs.field_name_suffix": [], "get_entry_from_blobs_test": [], "get_entry_from_blobs_test.GetEntryFromBlobsTest.test_get_entry_from_blobs": ["numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "caffe2.python.modeling.get_entry_from_blobs.GetEntryFromBlobs", "numpy.random.randint", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.brew.fc", "caffe2.python.workspace.FeedBlob", "unittest.TestCase.assertEqual"], "caffe2.python.modeling.get_entry_from_blobs.GetEntryFromBlobs": [], "get_entry_from_blobs_test.GetEntryFromBlobsTest.test_get_entry_from_blobs_modify_output_record": ["numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "<builtin>.range", "caffe2.python.modeling.get_entry_from_blobs.GetEntryFromBlobs", "numpy.random.randint", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.brew.fc", "caffe2.python.workspace.FeedBlob", "unittest.TestCase.assertEqual"], "gradient_clipping": ["logging.getLogger"], "gradient_clipping.GradientClipping.__init__": ["<builtin>.float"], "gradient_clipping.GradientClipping.modify_net": ["caffe2.python.optimizer.get_param_device", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "<builtin>.Exception", "<builtin>.isinstance", "caffe2.python.core.BlobReference", "<builtin>.str"], "gradient_clipping_test": [], "gradient_clipping_test.GradientClippingTest.test_gradient_clipping_by_norm": ["caffe2.python.modeling.gradient_clipping.GradientClipping", "caffe2.python.brew.fc", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual"], "caffe2.python.modeling.gradient_clipping.GradientClipping": [], "gradient_clipping_test.GradientClippingTest.test_gradient_clipping_by_norm_l1_norm": ["caffe2.python.modeling.gradient_clipping.GradientClipping", "caffe2.python.brew.fc", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual"], "gradient_clipping_test.GradientClippingTest.test_gradient_clipping_by_norm_using_param_norm": ["caffe2.python.modeling.gradient_clipping.GradientClipping", "caffe2.python.brew.fc", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual"], "gradient_clipping_test.GradientClippingTest.test_gradient_clipping_by_norm_compute_norm_ratio": ["caffe2.python.modeling.gradient_clipping.GradientClipping", "caffe2.python.brew.fc", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual"], "gradient_clipping_test.GradientClippingTest.test_gradient_clipping_by_value": ["caffe2.python.modeling.gradient_clipping.GradientClipping", "numpy.amax", "caffe2.python.brew.fc", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "numpy.amin", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertLessEqual", "unittest.TestCase.assertGreaterEqual", "unittest.TestCase.assertEqual"], "unittest.TestCase.assertLessEqual": [], "unittest.TestCase.assertGreaterEqual": [], "gradient_clipping_test.GradientClippingTest.test_gradient_clipping_by_norm_including_blobs": ["caffe2.python.modeling.gradient_clipping.GradientClipping", "caffe2.python.brew.fc", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual"], "gradient_clipping_test.GradientClippingTest.test_gradient_clipping_by_norm_excluding_blobs": ["caffe2.python.modeling.gradient_clipping.GradientClipping", "caffe2.python.brew.fc", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertEqual"], "initializers": [], "initializers.Initializer.__init__": [], "initializers.Initializer.update": ["<builtin>.Exception"], "initializers.Initializer.create_param": ["caffe2.python.modeling.parameter_info.ParameterInfo"], "initializers.ExternalInitializer.create_param": ["<builtin>.TypeError", "caffe2.python.core.BlobReference", "<builtin>.isinstance", "caffe2.python.core.ScopedBlobReference", "caffe2.python.modeling.parameter_info.ParameterInfo", "<builtin>.str"], "initializers.PseudoFP16Initializer.update": ["<builtin>.Exception"], "initializers.PseudoFP16Initializer.create_param": ["caffe2.python.modeling.parameter_info.ParameterInfo"], "initializers.ReversePseudoFP16Initializer.update": ["<builtin>.Exception"], "initializers.ReversePseudoFP16Initializer.create_param": ["caffe2.python.modeling.parameter_info.ParameterInfo"], "initializers.update_initializer": ["initializers.Initializer.__init__", "initializers.update_initializer.get_initializer_args"], "initializers.update_initializer.get_initializer_args": [], "initializers_test": [], "initializers_test.InitializerTest.test_fc_initializer": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.fc"], "initializers_test.InitializerTest": ["unittest.skipIf"], "initializers_test.InitializerTest.test_fc_fp16_initializer": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.fc"], "initializers_test.InitializerTest.test_fc_external_initializer": ["<builtin>.len", "unittest.TestCase.assertEqual", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.fc"], "net_modifier": [], "net_modifier.NetModifier.__init__": [], "net_modifier.NetModifier": ["abc.abstractmethod"], "net_modifier.NetModifier.modify_net": [], "net_modifier.NetModifier.__call__": ["net_modifier.NetModifier.modify_net"], "parameter_info": [], "parameter_info.ParameterInfo.__init__": ["<builtin>.str", "<builtin>.max", "numpy.prod", "<builtin>.isinstance"], "parameter_info.ParameterInfo.parameter": [], "parameter_info.ParameterInfo.optimizer": [], "parameter_info.ParameterInfo.__str__": [], "parameter_sharing": ["logging.getLogger", "contextlib.contextmanager", "parameter_sharing.ParameterSharingContext.__init__"], "parameter_sharing.ParameterSharingContext.__init__": [], "parameter_sharing.ParameterSharingContext._resolve_scope_overrides": ["parameter_sharing.ParameterSharingContext._resolve_scope_overrides", "caffe2.python.scope._NAMESCOPE_SEPARATOR.join", "<builtin>.enumerate"], "caffe2.python.scope._NAMESCOPE_SEPARATOR.join": [], "parameter_sharing.ParameterSharingContext.get_parameter_name": ["caffe2.python.scope.CurrentNameScope", "parameter_sharing.ParameterSharingContext._resolve_scope_overrides"], "parameter_sharing.ParameterSharingContext.add_scope_overrides": [], "parameter_sharing.ParameterSharingContext.pop": ["<builtin>.len"], "parameter_sharing._normalize_namescope": [], "parameter_sharing.ParameterSharing": ["parameter_sharing.ParameterSharingContext.pop", "<builtin>.isinstance", "parameter_sharing._normalize_namescope", "parameter_sharing.ParameterSharingContext.add_scope_overrides", "caffe2.python.scope.CurrentNameScope"], "parameter_sharing_test": [], "parameter_sharing_test.ParameterSharingTest.test_parameter_sharing_default_scopes": ["caffe2.python.modeling.parameter_sharing.parameter_sharing_context.get_parameter_name", "unittest.TestCase.assertEquals", "caffe2.python.scope.NameScope"], "parameter_sharing_test.ParameterSharingTest.test_parameter_sharing_nested_scopes": ["caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.modeling.parameter_sharing.parameter_sharing_context.get_parameter_name", "unittest.TestCase.assertEquals", "caffe2.python.scope.NameScope"], "parameter_sharing_test.ParameterSharingTest.test_parameter_sharing_subscopes": ["caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.modeling.parameter_sharing.parameter_sharing_context.get_parameter_name", "unittest.TestCase.assertEquals", "caffe2.python.scope.NameScope"], "parameter_sharing_test.ParameterSharingTest.test_create_param": ["caffe2.python.scope.NameScope", "caffe2.python.model_helper.ModelHelper", "unittest.TestCase.assertNotEqual", "caffe2.python.modeling.initializers.Initializer"], "unittest.TestCase.assertNotEqual": [], "parameter_sharing_test.ParameterSharingTest.test_deep_hierarchy": ["caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.modeling.initializers.Initializer", "caffe2.python.model_helper.ModelHelper", "unittest.TestCase.assertNotEqual", "caffe2.python.scope.NameScope"], "parameter_sharing_test.ParameterSharingTest.test_parameter_sharing_brew": ["caffe2.python.modeling.parameter_sharing.ParameterSharing", "caffe2.python.brew.fc", "<builtin>.sorted", "<builtin>.len", "<builtin>.set", "unittest.TestCase.assertRaises", "unittest.TestCase.assertEqual", "caffe2.python.model_helper.ModelHelper", "<builtin>.str", "caffe2.python.scope.NameScope"], "download": ["argparse.ArgumentParser", "download.validModelName", "signal.signal", "<builtin>.print", "download.downloadModel"], "download.signalHandler": ["<builtin>.print", "<builtin>.exit"], "download.deleteDirectory": ["os.walk", "os.rmdir", "os.path.join", "os.remove"], "os.rmdir": [], "download.progressBar": ["<builtin>.int", "sys.stdout.write", "sys.stdout.flush", "<builtin>.str"], "download.downloadFromURLToFile": ["<builtin>.open", "<builtin>.int", "download.progressBar", "<builtin>.min", "<builtin>.Exception", "urllib.request.urlopen", "<builtin>.print", "<builtin>.len"], "download.getURLFromName": [], "download.downloadModel": ["<builtin>.input", "<builtin>.exit", "download.deleteDirectory", "os.path.isdir", "os.makedirs", "os.remove", "os.path.dirname", "os.path.realpath", "os.path.exists", "os.symlink", "<builtin>.str", "<builtin>.Exception", "download.downloadFromURLToFile", "download.getURLFromName", "<builtin>.print"], "<builtin>.input": [], "os.symlink": [], "download.validModelName": ["re.match"], "download.ModelDownloader.__init__": [], "download.ModelDownloader._model_dir": ["os.path.expanduser", "os.getenv", "os.path.join"], "download.ModelDownloader._download": ["download.deleteDirectory", "download.ModelDownloader._model_dir", "os.makedirs", "os.path.join", "os.path.exists", "download.downloadFromURLToFile", "download.getURLFromName"], "download.ModelDownloader.get_c2_model_dbg": ["caffe2.proto.caffe2_pb2.NetDef", "download.ModelDownloader._model_dir", "json.load", "os.path.join", "os.path.exists", "download.ModelDownloader._download", "<builtin>.str", "<builtin>.open"], "download.ModelDownloader.get_c2_model": ["download.ModelDownloader.get_c2_model_dbg"], "imagenet_trainer_test_utils": [], "imagenet_trainer_test_utils.has_blob": [], "imagenet_trainer_test_utils.count_blobs": ["<builtin>.set", "<builtin>.len"], "imagenet_trainer_test_utils.count_shared_blobs": ["<builtin>.set", "<builtin>.len"], "imagenet_trainer_test_utils.test_shared_grads": ["caffe2.python.workspace.InferShapesAndTypes", "numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.memonger.share_grad_blobs", "<builtin>.str", "caffe2.python.workspace.FetchBlob", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.RunNetOnce", "numpy.array", "caffe2.python.core.NameScope", "<builtin>.set", "imagenet_trainer_test_utils.count_blobs"], "imagenet_trainer_test_utils.test_forward_only": ["numpy.random.rand", "caffe2.python.memonger.optimize_inference_for_dag", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.NameScope", "imagenet_trainer_test_utils.count_blobs", "imagenet_trainer_test_utils.count_shared_blobs"], "imagenet_trainer_test_utils.test_forward_only_fast_simplenet": ["numpy.random.rand", "time.time", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.cnn.CNNModelHelper", "caffe2.python.memonger.optimize_inference_fast", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.NameScope", "<builtin>.print", "<builtin>.set", "imagenet_trainer_test_utils.count_blobs", "imagenet_trainer_test_utils.count_shared_blobs"], "resnet": ["logging.basicConfig", "logging.getLogger"], "resnet.ResNetBuilder.__init__": [], "resnet.ResNetBuilder.add_conv": ["caffe2.python.brew.conv"], "resnet.ResNetBuilder.add_relu": ["caffe2.python.brew.relu"], "resnet.ResNetBuilder.add_spatial_bn": ["caffe2.python.brew.spatial_bn"], "resnet.ResNetBuilder.add_bottleneck": ["resnet.ResNetBuilder.add_relu", "resnet.ResNetBuilder.add_conv", "caffe2.python.brew.spatial_bn", "caffe2.python.brew.conv", "caffe2.python.brew.sum", "resnet.ResNetBuilder.add_spatial_bn"], "resnet.ResNetBuilder.add_simple_block": ["resnet.ResNetBuilder.add_relu", "resnet.ResNetBuilder.add_conv", "caffe2.python.brew.spatial_bn", "caffe2.python.brew.conv", "caffe2.python.brew.sum", "resnet.ResNetBuilder.add_spatial_bn"], "resnet.create_resnet_32x32": ["caffe2.python.brew.relu", "caffe2.python.brew.average_pool", "resnet.ResNetBuilder.__init__", "resnet.ResNetBuilder.add_simple_block", "caffe2.python.brew.spatial_bn", "caffe2.python.brew.conv", "<builtin>.range", "caffe2.python.brew.fc", "caffe2.python.brew.softmax"], "resnet.create_resnext": ["caffe2.python.brew.relu", "resnet.ResNetBuilder.add_bottleneck", "caffe2.python.brew.average_pool", "resnet.ResNetBuilder.__init__", "caffe2.python.brew.spatial_bn", "caffe2.python.brew.conv", "caffe2.python.brew.max_pool", "<builtin>.range", "caffe2.python.brew.fc", "caffe2.python.brew.softmax"], "resnet.create_resnet50": ["resnet.create_resnext"], "resnet_test": ["unittest.main", "random.seed"], "resnet_test.ResnetMemongerTest": ["hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.settings"], "resnet_test.ResnetMemongerTest.test_resnet_shared_grads": ["caffe2.python.models.imagenet_trainer_test_utils.test_shared_grads", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.testing.assert_almost_equal"], "caffe2.python.models.imagenet_trainer_test_utils.test_shared_grads": [], "resnet_test.ResnetMemongerTest.test_resnet_forward_only": ["caffe2.python.models.imagenet_trainer_test_utils.test_forward_only", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.testing.assert_almost_equal"], "caffe2.python.models.imagenet_trainer_test_utils.test_forward_only": [], "resnet_test.ResnetMemongerTest.test_resnet_forward_only_fast_simplenet": ["numpy.testing.assert_almost_equal", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.models.imagenet_trainer_test_utils.test_forward_only_fast_simplenet"], "caffe2.python.models.imagenet_trainer_test_utils.test_forward_only_fast_simplenet": [], "shufflenet": [], "shufflenet.ShuffleNetV2Builder.__init__": [], "shufflenet.ShuffleNetV2Builder.create": ["<builtin>.zip", "<builtin>.enumerate", "shufflenet.ShuffleNetV2Builder.add_spatial_ds_unit", "shufflenet.ShuffleNetV2Builder.add_basic_unit", "<builtin>.range", "caffe2.python.brew.conv", "caffe2.python.brew.max_pool", "caffe2.python.brew.fc"], "shufflenet.ShuffleNetV2Builder.add_spatial_ds_unit": ["shufflenet.ShuffleNetV2Builder.add_detection_unit", "shufflenet.ShuffleNetV2Builder.add_dwconv3x3_bn", "shufflenet.ShuffleNetV2Builder.add_conv1x1_bn", "caffe2.python.brew.concat"], "shufflenet.ShuffleNetV2Builder.add_basic_unit": ["shufflenet.ShuffleNetV2Builder.add_detection_unit", "shufflenet.ShuffleNetV2Builder.add_dwconv3x3_bn", "shufflenet.ShuffleNetV2Builder.add_conv1x1_bn", "caffe2.python.brew.concat"], "shufflenet.ShuffleNetV2Builder.add_detection_unit": ["caffe2.python.brew.conv", "caffe2.python.brew.spatial_bn"], "shufflenet.ShuffleNetV2Builder.add_dwconv3x3_bn": ["caffe2.python.brew.conv", "caffe2.python.brew.spatial_bn"], "shufflenet.ShuffleNetV2Builder.add_conv1x1_bn": ["caffe2.python.brew.relu", "caffe2.python.brew.conv", "caffe2.python.brew.spatial_bn"], "shufflenet.create_shufflenet": ["shufflenet.ShuffleNetV2Builder.create", "shufflenet.ShuffleNetV2Builder.__init__"], "shufflenet_test": ["random.seed", "unittest.main"], "shufflenet_test.ShufflenetMemongerTest": ["hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.given"], "shufflenet_test.ShufflenetMemongerTest.test_shufflenet_shared_grads": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.models.imagenet_trainer_test_utils.test_shared_grads", "numpy.testing.assert_almost_equal"], "shufflenet_test.ShufflenetMemongerTest.test_shufflenet_forward_only": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.models.imagenet_trainer_test_utils.test_forward_only", "numpy.testing.assert_almost_equal"], "shufflenet_test.ShufflenetMemongerTest.test_shufflenet_forward_only_fast_simplenet": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.models.imagenet_trainer_test_utils.test_forward_only_fast_simplenet", "numpy.testing.assert_almost_equal"], "__sym_init__": ["__sym_init__._parseFile"], "__sym_init__._parseFile": ["caffe2.proto.caffe2_pb2.NetDef", "os.path.dirname", "<builtin>.open"], "backend": ["collections.namedtuple"], "backend.force_unicode": [], "backend.get_device_option": ["caffe2.python.core.DeviceOption"], "backend.OnnxAttributes.from_onnx": ["backend.convertAttributeProto"], "backend.convertAttributeProto": ["<builtin>.ValueError", "<builtin>.len", "backend.Caffe2Backend._graph_to_net", "<builtin>.list"], "backend.OnnxAttributes.caffe2": ["backend.OnnxAttributes.<lambda1>"], "backend.OnnxAttributes.<lambda1>": [], "backend.Caffe2Backend._graph_to_net": ["<builtin>.print", "caffe2.proto.caffe2_pb2.NetDef", "backend.Caffe2Backend._onnx_node_to_caffe2_op"], "backend.OnnxNode.__init__": ["<builtin>.list", "backend.OnnxAttributes.from_onnx", "<builtin>.str"], "backend.Caffe2Backend": ["caffe2.python._import_c_extension.DummyName"], "backend.Caffe2Backend.dummy_name": [], "backend.Caffe2Backend.run_node": ["<builtin>.super", "caffe2.python.onnx.workspace.Workspace", "<builtin>.zip", "onnx.helper.make_tensor_value_info", "caffe2.proto.caffe2_pb2.OperatorDef", "backend.get_device_option", "caffe2.python.core.DeviceScope", "onnx.backend.base.Device", "<builtin>.len", "onnx.backend.base.namedtupledict", "<builtin>.isinstance", "caffe2.python._import_c_extension.Caffe2Backend"], "onnx.backend.base.Device": [], "onnx.backend.base.namedtupledict": [], "backend.Caffe2Backend._create_tensor_filling_op": ["backend.Caffe2Backend._create_tensor_filling_op.tensor2list", "<builtin>.RuntimeError", "caffe2.proto.caffe2_pb2.OperatorDef"], "backend.Caffe2Backend._create_tensor_filling_op.tensor2list": ["onnx.numpy_helper.to_array"], "onnx.numpy_helper.to_array": [], "backend.Caffe2Backend._rnn_reform_weights": ["<builtin>.zip", "<builtin>.enumerate"], "backend.Caffe2Backend._make_rnn_direction": ["<builtin>.list", "backend.Caffe2Backend._create_rnn_variant.make_cell", "backend.Caffe2Backend.dummy_name", "backend.Caffe2Backend._create_rnn_variant.reform"], "backend.Caffe2Backend._create_rnn_variant.reform": ["backend.Caffe2Backend._rnn_reform_weights"], "backend.Caffe2Backend._create_rnn_variant.make_cell": ["caffe2.python.gru_cell.GRU", "caffe2.python.rnn_cell.LSTM", "caffe2.python.rnn_cell.BasicRNN"], "backend.Caffe2Backend._create_rnn_variant": ["caffe2.python.core.Net", "itertools.chain", "caffe2.python.model_helper.ModelHelper", "<builtin>.all", "<builtin>.list", "<builtin>.dict", "backend.force_unicode", "backend.Caffe2Backend._create_rnn_variant.make_rnn", "backend.Caffe2Backend.dummy_name", "<builtin>.len", "<builtin>.str", "<builtin>.range"], "caffe2.python.rnn_cell.BasicRNN": [], "backend.Caffe2Backend._create_rnn_variant.make_rnn": ["backend.Caffe2Backend._make_rnn_direction"], "backend.Caffe2Backend._create_rnn_variant.make_rnn.<lambda1>": [], "caffe2.python.gru_cell.GRU": [], "backend.Caffe2Backend._create_control_op": ["backend.Caffe2Backend._common_onnx_node_to_caffe2_op"], "backend.Caffe2Backend._common_onnx_node_to_caffe2_op": ["backend.OnnxAttributes.caffe2", "caffe2.python.core.IsOperator", "caffe2.proto.caffe2_pb2.OperatorDef", "<builtin>.float", "<builtin>.ValueError"], "backend.Caffe2Backend._remove_ssa": ["<builtin>.enumerate"], "backend.Caffe2Backend._create_if": ["backend.Caffe2Backend._create_control_op", "<builtin>.len"], "backend.Caffe2Backend._create_loop": ["backend.Caffe2Backend._create_control_op", "<builtin>.len"], "backend.Caffe2Backend._substitute_raw_value": ["<builtin>.bytes", "<builtin>.RuntimeError"], "backend.Caffe2Backend._visit_and_substitute_raw_values": ["backend.Caffe2Backend._visit_and_substitute_raw_values", "backend.Caffe2Backend._substitute_raw_value"], "backend.Caffe2Backend._external_value_resolution_pass": ["backend.Caffe2Backend._visit_and_substitute_raw_values", "backend.Caffe2Backend._substitute_raw_value"], "backend.Caffe2Backend._direct_initialize_parameters": ["onnx.numpy_helper.to_array"], "backend.Caffe2Backend._direct_initialize_inputs": ["numpy.ones", "<builtin>.list"], "backend.Caffe2Backend.optimize_onnx": ["onnx.optimizer.optimize"], "onnx.optimizer.optimize": [], "backend.Caffe2Backend.prepare_zip_archive": ["onnx.load", "<builtin>.set", "backend.Caffe2Backend.prepare", "zipfile.ZipFile"], "backend.Caffe2Backend.prepare": ["backend.Caffe2Backend._external_value_resolution_pass", "backend.Caffe2Backend._direct_initialize_parameters", "<builtin>.super", "caffe2.python.onnx.workspace.Workspace", "caffe2.python.onnx.backend_rep.Caffe2Rep", "backend.Caffe2Backend._direct_initialize_inputs", "backend.get_device_option", "onnx.backend.base.Device", "onnx.shape_inference.infer_shapes", "warnings.warn", "backend.Caffe2Backend._onnx_model_to_caffe2_net", "<builtin>.RuntimeError"], "onnx.shape_inference.infer_shapes": [], "backend.Caffe2Backend._onnx_model_to_caffe2_net": ["backend.Caffe2Backend._onnx_node_to_caffe2_op", "<builtin>.RuntimeError", "<builtin>.print", "backend.get_device_option", "backend.Caffe2Backend._create_tensor_filling_op", "onnx.backend.base.Device", "backend.Caffe2Backend.optimize_onnx", "<builtin>.len", "caffe2.proto.caffe2_pb2.NetDef", "onnx.utils.polish_model", "warnings.warn", "backend.Caffe2Backend._all_names_in_graph"], "caffe2.python.onnx.backend_rep.Caffe2Rep": [], "backend.Caffe2Backend._onnx_node_to_caffe2_op": ["backend.OnnxNode.__init__", "itertools.chain", "caffe2.proto.caffe2_pb2.OperatorDef", "backend.Caffe2Backend._common_onnx_node_to_caffe2_op", "<builtin>.getattr", "<builtin>.isinstance", "caffe2.python._import_c_extension.Caffe2Backend"], "backend.Caffe2Backend._common_onnx_node_to_caffe2_op.kmap": [], "backend.Caffe2Backend._all_names_in_graph": ["<builtin>.set"], "onnx.utils.polish_model": [], "backend.Caffe2Backend.onnx_graph_to_caffe2_net": ["backend.Caffe2Backend._onnx_model_to_caffe2_net"], "backend.Caffe2Backend.supports_device": ["onnx.backend.base.Device", "caffe2.python.core.IsGPUDeviceType"], "backend.Caffe2Backend.is_compatible": ["<builtin>.super", "<builtin>.hasattr", "<builtin>.callable"], "backend_cpp_rep": [], "backend_cpp_rep.Caffe2CppRep.__init__": ["<builtin>.super"], "backend_cpp_rep.Caffe2CppRep.init_net": [], "backend_cpp_rep.Caffe2CppRep.pred_net": [], "backend_cpp_rep.Caffe2CppRep.external_outputs": [], "backend_cpp_rep.Caffe2CppRep.external_inputs": [], "backend_cpp_rep.Caffe2CppRep.run": ["<builtin>.zip", "<builtin>.RuntimeError", "<builtin>.isinstance", "onnx.backend.base.namedtupledict", "<builtin>.len"], "backend_rep": [], "backend_rep.Caffe2Rep.__init__": ["<builtin>.super"], "backend_rep.Caffe2Rep._name_scope": [], "backend_rep.Caffe2Rep.run": ["caffe2.python.core.DeviceScope", "onnx.backend.base.namedtupledict", "<builtin>.len", "caffe2.python.core.NameScope", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.RuntimeError", "<builtin>.super"], "error": [], "frontend": ["logging.basicConfig", "logging.getLogger", "<builtin>.set"], "frontend.Caffe2Frontend": ["caffe2.python._import_c_extension.DummyName"], "frontend.Caffe2Frontend.dummy_name": [], "frontend.Caffe2Frontend._common_caffe2_arg_to_onnx_attr": ["onnx.helper.make_attribute", "<builtin>.ValueError"], "onnx.helper.make_attribute": [], "frontend.Caffe2Frontend.caffe2_arg_to_onnx_attr": ["frontend.Caffe2Frontend._common_caffe2_arg_to_onnx_attr"], "frontend.Caffe2Frontend._common_caffe2_op_to_onnx_node": ["onnx.NodeProto", "frontend.Caffe2Frontend.caffe2_arg_to_onnx_attr", "<builtin>.filter"], "onnx.NodeProto": [], "frontend.Caffe2Frontend.caffe2_op_to_onnx_node": ["caffe2.python._import_c_extension.export_to_onnx", "<builtin>.isinstance", "onnx.NodeProto", "caffe2.python._import_c_extension.support_onnx_export", "frontend.Caffe2Frontend._common_caffe2_op_to_onnx_node", "onnx.TensorProto", "<builtin>.getattr"], "caffe2.python._import_c_extension.support_onnx_export": [], "caffe2.python._import_c_extension.export_to_onnx": [], "onnx.TensorProto": [], "frontend.Caffe2Frontend._all_names_in_net": ["<builtin>.set"], "frontend.Caffe2Frontend._extract_value_info": ["onnx.helper.make_tensor_value_info"], "frontend.Caffe2Frontend.caffe2_net_to_onnx_graph": ["<builtin>.list", "<builtin>.sum", "frontend.Caffe2Frontend.caffe2_init_net_to_initializer", "<builtin>.isinstance", "<builtin>.set", "onnx.helper.make_tensor_value_info", "frontend.Caffe2Frontend._ssa_rewrite", "frontend.Caffe2Frontend._filter_fake_init", "numpy.random.randn", "<builtin>.ValueError", "<builtin>.hasattr", "frontend.Caffe2Frontend.caffe2_op_to_onnx_node", "frontend.Caffe2Frontend._all_names_in_net", "<builtin>.RuntimeError", "frontend.Caffe2Frontend._extract_value_info", "itertools.chain", "caffe2.python.onnx.helper.c2_native_run_net", "onnx.GraphProto"], "frontend.Caffe2Frontend._filter_fake_init": ["<builtin>.len", "re.match"], "frontend.Caffe2Frontend._ssa_rewrite": ["re.match", "<builtin>.zip", "caffe2.python.core.get_ssa", "<builtin>.len", "frontend.Caffe2Frontend._ssa_rewrite.ssa_name"], "frontend.Caffe2Frontend.caffe2_init_net_to_initializer": ["caffe2.python.onnx.helper.c2_native_run_net", "<builtin>.set", "onnx.numpy_helper.from_array", "<builtin>.sorted"], "onnx.GraphProto": [], "onnx.numpy_helper.from_array": [], "frontend.Caffe2Frontend.ssa_rewrite": ["frontend.Caffe2Frontend._ssa_rewrite"], "frontend.Caffe2Frontend._ssa_rewrite.ssa_name": ["<builtin>.len"], "frontend.Caffe2Frontend.caffe2_net_to_onnx_model": ["onnx.checker.check_model", "frontend.Caffe2Frontend.caffe2_net_to_onnx_graph", "onnx.OperatorSetIdProto", "onnx.helper.make_model"], "onnx.OperatorSetIdProto": [], "onnx.checker.check_model": [], "helper": ["logging.getLogger"], "helper.c2_native_run_op": ["onnx.backend.base.namedtupledict", "<builtin>.len", "<builtin>.zip", "caffe2.python.onnx.workspace.Workspace", "<builtin>.isinstance"], "helper.c2_native_run_net": ["<builtin>.print", "<builtin>.type", "<builtin>.range", "onnx.backend.base.namedtupledict", "<builtin>.len", "<builtin>.zip", "caffe2.python.onnx.workspace.Workspace", "<builtin>.isinstance"], "helper.load_caffe2_net": ["<builtin>.open", "caffe2.proto.caffe2_pb2.NetDef"], "helper.save_caffe2_net": ["<builtin>.open", "<builtin>.str"], "helper.benchmark_caffe2_model": ["caffe2.python.onnx.workspace.Workspace"], "helper.benchmark_pytorch_model": ["<builtin>.range", "time.time"], "onnxifi": [], "onnxifi.onnxifi_set_option": ["caffe2.python._import_c_extension.onnxifi_set_option", "<builtin>.str"], "caffe2.python._import_c_extension.onnxifi_set_option": [], "onnxifi.onnxifi_get_option": ["caffe2.python._import_c_extension.onnxifi_get_option"], "caffe2.python._import_c_extension.onnxifi_get_option": [], "onnxifi.onnxifi_caffe2_net": ["caffe2.proto.caffe2_pb2.NetDef", "caffe2.proto.caffe2_pb2.TensorBoundShapes", "caffe2.proto.caffe2_pb2.TensorBoundShape", "<builtin>.type", "<builtin>.len", "caffe2.python._import_c_extension.onnxifi"], "caffe2.proto.caffe2_pb2.TensorBoundShapes": [], "caffe2.proto.caffe2_pb2.TensorBoundShape": [], "caffe2.python._import_c_extension.onnxifi": [], "test_onnxifi": [], "test_onnxifi._print_net": ["<builtin>.print"], "test_onnxifi.OnnxifiTest": ["unittest.skip"], "test_onnxifi.OnnxifiTest.test_relu_graph": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_almost_equal", "onnx.helper.make_graph", "onnx.helper.make_tensor_value_info", "onnx.helper.make_node", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "numpy.random.randn", "onnx.helper.make_model", "numpy.maximum"], "test_onnxifi.OnnxifiTest.test_conv_graph": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_almost_equal", "numpy.array", "onnx.helper.make_graph", "onnx.helper.make_tensor_value_info", "onnx.helper.make_node", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "onnx.helper.make_model"], "test_onnxifi.OnnxifiTransformTest.setUp": ["caffe2.python.models.download.ModelDownloader"], "test_onnxifi.OnnxifiTransformTest._add_head_tail": ["caffe2.proto.caffe2_pb2.NetDef", "caffe2.proto.caffe2_pb2.OperatorDef"], "test_onnxifi.OnnxifiTransformTest": ["unittest.skip"], "test_onnxifi.OnnxifiTransformTest.test_resnet50_core": ["caffe2.python.workspace.FeedBlob", "time.time", "onnx.backend.base.namedtupledict", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.RunNet", "caffe2.python.onnx.onnxifi.onnxifi_caffe2_net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNetOnce", "<builtin>.range", "caffe2.python.workspace.FetchBlob", "numpy.random.randn", "caffe2.python.core.DeviceScope", "<builtin>.print", "test_onnxifi.OnnxifiTransformTest._add_head_tail", "numpy.testing.assert_allclose", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.core.DeviceOption"], "workspace._WorkspaceCtx.__init__": [], "workspace._WorkspaceCtx.__enter__": ["caffe2.python.workspace.CurrentWorkspace", "caffe2.python.workspace.SwitchWorkspace"], "workspace._WorkspaceCtx.__exit__": ["caffe2.python.workspace.SwitchWorkspace"], "workspace.Workspace.__init__": ["<builtin>.str", "workspace._WorkspaceCtx.__init__", "uuid.uuid4"], "workspace.Workspace.__getattr__": [], "workspace.Workspace.__getattr__.f": ["<builtin>.getattr"], "workspace.Workspace.__del__": [], "activation_ops_test": ["unittest.main"], "activation_ops_test.TestActivations": ["caffe2.python.hypothesis_test_util.tensor", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.given", "unittest.skipIf", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.floats"], "activation_ops_test.TestActivations.test_relu": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.sign"], "activation_ops_test.TestActivations.test_relu.relu_ref": ["numpy.maximum"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks": [], "activation_ops_test.TestActivations.test_relu_empty_input": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "activation_ops_test.TestActivations.test_relu_empty_input.relu_ref": ["numpy.maximum"], "activation_ops_test.TestActivations.test_relu_fp16": ["caffe2.python.core.CreateOperator", "hypothesis.assume", "caffe2.python.core.IsGPUDeviceType", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.sign"], "activation_ops_test.TestActivations.test_relu_fp16.relu_ref": ["numpy.maximum"], "activation_ops_test.TestActivations.test_relu_fp16.relu_grad_ref": [], "caffe2.python.serialized_test.serialized_test_util.given": [], "activation_ops_test.TestActivations.test_relu_n": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.sign"], "activation_ops_test.TestActivations.test_relu_n.relu_n_ref": ["numpy.minimum", "numpy.maximum"], "activation_ops_test.TestActivations.test_elu": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.sign"], "activation_ops_test.TestActivations.test_elu.elu_ref": ["numpy.exp"], "activation_ops_test.TestActivations.test_prelu": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.randn", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.sign"], "activation_ops_test.TestActivations.test_prelu.prelu_ref": ["<builtin>.len"], "activation_ops_test.TestActivations.test_leaky_relu": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.sign", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "activation_ops_test.TestActivations.test_leaky_relu.leaky_relu_ref": [], "activation_ops_test.TestActivations.test_leaky_relu_default": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.sign", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "activation_ops_test.TestActivations.test_leaky_relu_default.leaky_relu_ref": [], "activation_ops_test.TestActivations.test_gelu": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "activation_ops_test.TestActivations.test_gelu.gelu_ref": ["scipy.stats.norm.cdf"], "scipy.stats.norm.cdf": [], "activation_ops_test.TestActivations.test_mish": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "activation_ops_test.TestActivations.test_mish.mish_ref": ["numpy.tanh", "numpy.log1p", "numpy.exp"], "numpy.log1p": [], "adadelta_test": [], "adadelta_test.TestAdadelta.ref_adadelta": ["numpy.sqrt"], "adadelta_test.TestAdadelta": ["caffe2.python.hypothesis_test_util.floats", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.strategies.floats", "hypothesis.settings", "hypothesis.given"], "adadelta_test.TestAdadelta.test_adadelta": ["functools.partial", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.abs", "numpy.array"], "adadelta_test.TestAdadelta.test_sparse_adadelta": ["numpy.arange", "numpy.random.randint", "numpy.random.choice", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.abs", "numpy.array"], "adadelta_test.TestAdadelta.test_sparse_adadelta.ref_sparse": ["<builtin>.enumerate", "numpy.copy", "adadelta_test.TestAdadelta.ref_adadelta"], "adadelta_test.TestAdadelta.test_sparse_adadelta_empty": ["<builtin>.str", "numpy.empty", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.abs", "numpy.array", "hypothesis.note"], "hypothesis.note": [], "adadelta_test.TestAdadelta.test_sparse_adadelta_empty.ref_sparse_empty": ["numpy.copy"], "adagrad_test": [], "adagrad_test.TestAdagrad": ["hypothesis.given", "hypothesis.settings", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.strategies.sampled_from", "hypothesis.strategies.floats"], "adagrad_test.TestAdagrad.test_adagrad": ["numpy.array", "functools.partial", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.abs"], "adagrad_test.TestAdagrad.test_adagrad_output_effective_lr": ["numpy.array", "functools.partial", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.abs"], "adagrad_test.TestAdagrad.test_adagrad_output_effective_lr_and_update": ["numpy.array", "functools.partial", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.abs"], "adagrad_test.TestAdagrad.test_sparse_adagrad": ["caffe2.python.operator_test.adagrad_test_helper.adagrad_sparse_test_helper"], "caffe2.python.operator_test.adagrad_test_helper.adagrad_sparse_test_helper": [], "adagrad_test.TestAdagrad.test_sparse_adagrad_empty": ["caffe2.python.operator_test.adagrad_test_helper.adagrad_sparse_test_helper", "numpy.empty", "<builtin>.print"], "adagrad_test.TestAdagrad.test_row_wise_sparse_adagrad": ["caffe2.python.operator_test.adagrad_test_helper.adagrad_sparse_test_helper", "functools.partial"], "adagrad_test.TestAdagrad.test_row_wise_sparse_adagrad_empty": ["caffe2.python.operator_test.adagrad_test_helper.adagrad_sparse_test_helper", "numpy.empty"], "adagrad_test_helper": [], "adagrad_test_helper.ref_adagrad": ["numpy.mean", "numpy.square", "numpy.sqrt"], "adagrad_test_helper.adagrad_sparse_test_helper": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "numpy.abs", "numpy.random.randint", "<builtin>.print", "numpy.random.choice", "numpy.arange", "numpy.empty", "numpy.array"], "adagrad_test_helper.adagrad_sparse_test_helper.ref_sparse": ["numpy.copy", "<builtin>.enumerate", "functools.partial"], "adam_test": ["unittest.main"], "adam_test.TestAdam.ref_adam": ["numpy.square", "numpy.sqrt", "numpy.power"], "adam_test.TestAdam.ref_smart_decay_adam": ["numpy.square", "<builtin>.range", "<builtin>.type", "numpy.ones_like", "<builtin>.print", "numpy.sqrt", "<builtin>.locals"], "adam_test.TestAdam.ref_row_wise_adam": ["numpy.mean", "numpy.square", "numpy.sqrt", "numpy.power"], "adam_test.TestAdam": ["hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.given", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.strategies.data"], "adam_test.TestAdam.test_adam": ["numpy.array", "functools.partial", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.abs"], "adam_test.TestAdam.test_adam_output_grad": ["numpy.array", "functools.partial", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.abs"], "adam_test.TestAdam.test_sparse_adam": ["numpy.array", "hypothesis.strategies.sampled_from", "numpy.absolute", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.tensor", "caffe2.python.core.CreateOperator", "numpy.arange", "numpy.array_equal", "hypothesis.assume", "numpy.sort", "numpy.unique"], "adam_test.TestAdam.test_sparse_adam.ref_sparse": ["<builtin>.enumerate", "numpy.copy", "adam_test.TestAdam.ref_adam"], "adam_test.TestAdam.test_smart_decay_sparse_adam": ["numpy.array", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "numpy.absolute", "hypothesis.extra.numpy.arrays", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.tensor", "caffe2.python.core.CreateOperator", "numpy.arange", "numpy.array_equal", "hypothesis.assume", "numpy.sort", "numpy.unique"], "adam_test.TestAdam.test_smart_decay_sparse_adam.ref_sparse": ["<builtin>.enumerate", "numpy.copy", "adam_test.TestAdam.ref_smart_decay_adam"], "adam_test.TestAdam.test_sparse_adam_output_grad": ["numpy.array", "hypothesis.strategies.sampled_from", "numpy.absolute", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.tensor", "functools.partial", "caffe2.python.core.CreateOperator", "numpy.arange", "numpy.array_equal", "hypothesis.assume", "numpy.sort", "numpy.unique"], "adam_test.TestAdam.test_sparse_adam_output_grad.ref_sparse_output_grad": ["<builtin>.enumerate", "numpy.copy", "adam_test.TestAdam.ref_adam"], "adam_test.TestAdam.test_row_wise_sparse_adam": ["<builtin>.str", "numpy.array", "hypothesis.strategies.sampled_from", "numpy.absolute", "caffe2.python.hypothesis_test_util.elements_of_type", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "hypothesis.note", "caffe2.python.hypothesis_test_util.tensor", "caffe2.python.core.CreateOperator", "numpy.arange", "numpy.array_equal", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "hypothesis.assume", "numpy.sort", "caffe2.python.hypothesis_test_util.tensor1d", "numpy.unique"], "caffe2.python.hypothesis_test_util.tensor1d": [], "adam_test.TestAdam.test_row_wise_sparse_adam.ref_row_wise_sparse": ["<builtin>.enumerate", "numpy.copy", "adam_test.TestAdam.ref_row_wise_adam"], "adam_test.TestAdam.test_row_wise_sparse_adam_output_grad": ["<builtin>.str", "numpy.array", "hypothesis.strategies.sampled_from", "numpy.absolute", "caffe2.python.hypothesis_test_util.elements_of_type", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "hypothesis.note", "caffe2.python.hypothesis_test_util.tensor", "functools.partial", "caffe2.python.core.CreateOperator", "numpy.arange", "numpy.array_equal", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "hypothesis.assume", "numpy.sort", "caffe2.python.hypothesis_test_util.tensor1d", "numpy.unique"], "adam_test.TestAdam.test_row_wise_sparse_adam_output_grad.ref_row_wise_sparse_output_grad": ["<builtin>.enumerate", "numpy.copy", "adam_test.TestAdam.ref_row_wise_adam"], "affine_channel_op_test": [], "affine_channel_op_test.TestAffineChannelOp.affine_channel_nchw_ref": [], "affine_channel_op_test.TestAffineChannelOp.affine_channel_nhwc_ref": [], "affine_channel_op_test.TestAffineChannelOp": ["hypothesis.given", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "affine_channel_op_test.TestAffineChannelOp.test_affine_channel_2d": ["<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "affine_channel_op_test.TestAffineChannelOp.test_affine_channel_2d.ref_op": ["affine_channel_op_test.TestAffineChannelOp.affine_channel_nchw_ref", "affine_channel_op_test.TestAffineChannelOp.affine_channel_nhwc_ref"], "affine_channel_op_test.TestAffineChannelOp.test_affine_channel_3d": ["<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "affine_channel_op_test.TestAffineChannelOp.test_affine_channel_3d.ref_op": ["affine_channel_op_test.TestAffineChannelOp.affine_channel_nchw_ref", "affine_channel_op_test.TestAffineChannelOp.affine_channel_nhwc_ref"], "alias_with_name_test": [], "alias_with_name_test.TestAliasWithNameOp": ["hypothesis.strategies.lists", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.given"], "alias_with_name_test.TestAliasWithNameOp.test_alias_with_name_op": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.utils.MakeArgument", "caffe2.python.core.CreateOperator", "numpy.random.random"], "alias_with_name_test.TestAliasWithNameOp.test_alias_with_name_op.reference_func": [], "apmeter_test": [], "apmeter_test.calculate_ap": ["numpy.argsort", "<builtin>.max", "numpy.cumsum", "numpy.zeros", "numpy.arange", "<builtin>.range"], "apmeter_test.TestAPMeterOps": ["hypothesis.strategies.integers", "hypothesis.given", "caffe2.python.hypothesis_test_util.floats", "caffe2.python.hypothesis_test_util.arrays"], "apmeter_test.TestAPMeterOps.test_average_precision": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "apmeter_test.TestAPMeterOps.test_average_precision.op_ref": ["apmeter_test.calculate_ap"], "apmeter_test.TestAPMeterOps.test_average_precision_small_buffer": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "apmeter_test.TestAPMeterOps.test_average_precision_small_buffer.op_ref": ["apmeter_test.calculate_ap"], "arg_ops_test": ["unittest.main"], "arg_ops_test.TestArgOps": ["hypothesis.settings", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.integers"], "arg_ops_test.TestArgOps.test_argmax": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "arg_ops_test.TestArgOps.test_argmax.argmax_ref": ["numpy.argmax", "<builtin>.tuple", "<builtin>.list"], "arg_ops_test.TestArgOps.test_argmin": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "arg_ops_test.TestArgOps.test_argmin.argmin_ref": ["numpy.argmin", "<builtin>.tuple", "<builtin>.list"], "numpy.argmin": [], "assert_test": [], "assert_test.TestAssert": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.lists", "hypothesis.settings", "hypothesis.strategies.sampled_from"], "assert_test.TestAssert.test_assert": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.dtype", "numpy.all"], "assert_test.TestAssert.test_assert.assert_ref": [], "async_net_barrier_test": [], "async_net_barrier_test.TestAsyncNetBarrierOp": ["hypothesis.strategies.lists", "hypothesis.given", "hypothesis.strategies.integers"], "async_net_barrier_test.TestAsyncNetBarrierOp.test_async_net_barrier_op": ["numpy.random.random", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "caffe2.python.core.CreateOperator"], "async_net_barrier_test.TestAsyncNetBarrierOp.test_async_net_barrier_op.reference_func": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEquals", "<builtin>.len"], "atomic_ops_test": ["unittest.main"], "atomic_ops_test.TestAtomicOps": ["unittest.skip"], "atomic_ops_test.TestAtomicOps.test_atomic_ops": ["<builtin>.range", "caffe2.python.core.execution_step", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "caffe2.python.core.Plan", "caffe2.python.workspace.RunPlan"], "atomic_ops_test.TestAtomicOps.test_atomic64_ops": ["<builtin>.range", "caffe2.python.core.execution_step", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "caffe2.python.core.Plan", "caffe2.python.workspace.RunPlan"], "basic_rnn_test": ["caffe2.python.workspace.GlobalInit", "unittest.main"], "basic_rnn_test.basic_rnn_reference": ["numpy.ones", "numpy.dot", "caffe2.python.rnn.rnn_cell_test_util.tanh", "<builtin>.range"], "caffe2.python.rnn.rnn_cell_test_util.tanh": [], "basic_rnn_test.BasicRNNCellTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.settings", "hypothesis.strategies.booleans"], "basic_rnn_test.BasicRNNCellTest.test_basic_rnn": ["caffe2.python.core.DeviceScope", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.hypothesis_test_util.temp_workspace", "numpy.random.randint", "basic_rnn_test.basic_rnn_reference", "numpy.testing.assert_allclose", "caffe2.python.rnn_cell.BasicRNN", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FeedBlob", "numpy.random.seed", "numpy.random.randn"], "caffe2.python.hypothesis_test_util.temp_workspace": [], "batch_box_cox_test._inputs": ["hypothesis.strategies.one_of", "hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.strategies.lists"], "hypothesis.strategies.one_of": [], "batch_box_cox_test.TestBatchBoxCox": ["hypothesis.settings", "batch_box_cox_test._inputs", "hypothesis.given"], "batch_box_cox_test.TestBatchBoxCox.test_batch_box_cox": ["batch_box_cox_test.TestBatchBoxCox.batch_box_cox"], "batch_box_cox_test.TestBatchBoxCox.batch_box_cox": ["numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "batch_box_cox_test.TestBatchBoxCox.test_lambda1_is_all_zero": ["batch_box_cox_test.TestBatchBoxCox.batch_box_cox"], "batch_box_cox_test.TestBatchBoxCox.test_lambda1_is_partially_zero": ["batch_box_cox_test.TestBatchBoxCox.batch_box_cox"], "batch_box_cox_test.TestBatchBoxCox.test_bound_base_away_from_zero": ["batch_box_cox_test.TestBatchBoxCox.batch_box_cox"], "batch_box_cox_test.TestBatchBoxCox.batch_box_cox.ref": ["numpy.log", "numpy.maximum", "numpy.copy", "numpy.power", "<builtin>.range"], "batch_bucketize_op_test": [], "batch_bucketize_op_test.TestBatchBucketize": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.floats", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.given"], "batch_bucketize_op_test.TestBatchBucketize.test_batch_bucketize_example": ["numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "batch_bucketize_op_test.TestBatchBucketize.test_batch_bucketize_example.ref": ["numpy.array"], "batch_bucketize_op_test.TestBatchBucketize.test_batch_bucketize": ["numpy.random.seed", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.choice", "<builtin>.range", "numpy.random.randn", "numpy.append", "numpy.array", "caffe2.python.core.CreateOperator"], "batch_bucketize_op_test.TestBatchBucketize.test_batch_bucketize.ref": ["numpy.zeros", "<builtin>.enumerate", "<builtin>.range", "<builtin>.len"], "batch_moments_op_test": [], "batch_moments_op_test.TestBatchMomentsOp.batch_moments_nchw_ref": ["numpy.square", "numpy.mean"], "batch_moments_op_test.TestBatchMomentsOp.batch_moments_nhwc_ref": ["numpy.square", "numpy.mean"], "batch_moments_op_test.TestBatchMomentsOp": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.settings"], "batch_moments_op_test.TestBatchMomentsOp.test_batch_moments_2d": ["numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "batch_moments_op_test.TestBatchMomentsOp.test_batch_moments_2d.ref": ["batch_moments_op_test.TestBatchMomentsOp.batch_moments_nchw_ref", "batch_moments_op_test.TestBatchMomentsOp.batch_moments_nhwc_ref"], "batch_moments_op_test.TestBatchMomentsOp.test_batch_moments_3d": ["numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "batch_moments_op_test.TestBatchMomentsOp.test_batch_moments_3d.ref": ["batch_moments_op_test.TestBatchMomentsOp.batch_moments_nchw_ref", "batch_moments_op_test.TestBatchMomentsOp.batch_moments_nhwc_ref"], "batch_sparse_to_dense_op_test": [], "batch_sparse_to_dense_op_test.TestBatchSparseToDense": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.settings"], "batch_sparse_to_dense_op_test.TestBatchSparseToDense.test_batch_sparse_to_dense": ["caffe2.python.core.CreateOperator", "numpy.concatenate", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.choice", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array"], "batch_sparse_to_dense_op_test.TestBatchSparseToDense.test_batch_sparse_to_dense.batch_sparse_to_dense_ref": ["numpy.zeros", "<builtin>.range"], "batch_sparse_to_dense_op_test.TestBatchSparseToDense.test_batch_dense_to_sparse": ["caffe2.python.core.CreateOperator", "numpy.concatenate", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.choice", "<builtin>.print", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array"], "batch_sparse_to_dense_op_test.TestBatchSparseToDense.test_batch_dense_to_sparse.batch_dense_to_sparse_ref": ["numpy.zeros", "<builtin>.range"], "bbox_transform_test": [], "bbox_transform_test.bbox_transform": ["numpy.zeros", "numpy.minimum", "numpy.exp", "numpy.log"], "bbox_transform_test.clip_tiled_boxes": ["numpy.minimum", "numpy.maximum"], "bbox_transform_test.generate_rois": ["numpy.vstack", "<builtin>.enumerate", "numpy.random.uniform", "numpy.empty", "numpy.minimum", "numpy.maximum", "<builtin>.len"], "bbox_transform_test.bbox_transform_rotated": ["numpy.zeros", "numpy.log", "numpy.minimum", "numpy.where", "numpy.exp"], "numpy.where": [], "bbox_transform_test.clip_tiled_boxes_rotated": ["numpy.abs", "numpy.minimum", "numpy.maximum", "numpy.where"], "bbox_transform_test.generate_rois_rotated": ["numpy.empty", "bbox_transform_test.generate_rois", "numpy.random.uniform"], "bbox_transform_test.TestBBoxTransformOp": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.strategies.lists", "hypothesis.strategies.integers"], "bbox_transform_test.TestBBoxTransformOp.test_bbox_transform": ["numpy.array", "bbox_transform_test.generate_rois", "caffe2.python.core.CreateOperator", "bbox_transform_test.generate_rois_rotated", "numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "bbox_transform_test.TestBBoxTransformOp.test_bbox_transform.bbox_transform_ref": ["bbox_transform_test.clip_tiled_boxes", "bbox_transform_test.bbox_transform", "bbox_transform_test.clip_tiled_boxes_rotated", "bbox_transform_test.bbox_transform_rotated"], "bbox_transform_test.TestBBoxTransformOp.test_bbox_transform_batch": ["bbox_transform_test.generate_rois", "bbox_transform_test.generate_rois_rotated", "numpy.random.randint", "caffe2.python.core.CreateOperator", "numpy.zeros", "<builtin>.sum", "numpy.random.randn", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "bbox_transform_test.TestBBoxTransformOp.test_bbox_transform_batch.bbox_transform_ref": ["bbox_transform_test.clip_tiled_boxes", "numpy.vstack", "<builtin>.enumerate", "bbox_transform_test.bbox_transform", "bbox_transform_test.bbox_transform_rotated", "numpy.empty", "bbox_transform_test.clip_tiled_boxes_rotated", "<builtin>.len"], "bisect_percentile_op_test": ["unittest.main"], "bisect_percentile_op_test.TestBisectPercentileOp.compare_reference": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.ResetWorkspace", "numpy.testing.assert_array_almost_equal", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "bisect_percentile_op_test.TestBisectPercentileOp.compare_reference.bisect_percentile_op_ref"], "bisect_percentile_op_test.TestBisectPercentileOp.compare_reference.bisect_percentile_op_ref": ["bisect.bisect_left", "<builtin>.len", "numpy.zeros_like", "<builtin>.range"], "bisect.bisect_left": [], "bisect_percentile_op_test.TestBisectPercentileOp.test_bisect_percentil_op_simple": ["numpy.array", "bisect_percentile_op_test.TestBisectPercentileOp.compare_reference"], "bisect_percentile_op_test.TestBisectPercentileOp": ["hypothesis.strategies.booleans", "hypothesis.strategies.floats", "hypothesis.strategies.integers", "hypothesis.strategies.lists", "hypothesis.given"], "bisect_percentile_op_test.TestBisectPercentileOp.test_bisect_percentil_op_large": ["<builtin>.range", "bisect_percentile_op_test.TestBisectPercentileOp.compare_reference", "numpy.random.choice", "numpy.random.uniform", "numpy.sort", "numpy.array", "<builtin>.set", "<builtin>.len", "numpy.arange", "numpy.random.randn", "numpy.random.randint"], "boolean_mask_test": [], "boolean_mask_test.TestBooleanMaskOp": ["hypothesis.given", "hypothesis.settings", "caffe2.python.hypothesis_test_util.floats", "caffe2.python.hypothesis_test_util.tensor1d", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.sampled_from"], "boolean_mask_test.TestBooleanMaskOp.test_boolean_mask_gradient": ["caffe2.python.core.CreateOperator", "numpy.random.choice", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.copy", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "boolean_mask_test.TestBooleanMaskOp.test_boolean_mask": ["caffe2.python.core.CreateOperator", "numpy.random.choice", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "boolean_mask_test.TestBooleanMaskOp.test_boolean_mask.ref": [], "boolean_mask_test.TestBooleanMaskOp.test_boolean_mask_indices": ["caffe2.python.core.CreateOperator", "numpy.random.choice", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "boolean_mask_test.TestBooleanMaskOp.test_boolean_mask_indices.ref": ["numpy.where"], "boolean_mask_test.TestBooleanMaskOp._dtype_conversion": ["caffe2.python.core.IsGPUDeviceType", "hypothesis.assume"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_with_lengths": ["boolean_mask_test.TestBooleanMaskOp._dtype_conversion", "<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_with_lengths.ref": ["<builtin>.range", "numpy.reshape"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_with_window": ["boolean_mask_test.TestBooleanMaskOp._dtype_conversion", "<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_with_window.ref": ["<builtin>.range", "numpy.reshape"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_triangle": ["boolean_mask_test.TestBooleanMaskOp._dtype_conversion", "<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_triangle.compare": [], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_triangle.ref": ["<builtin>.range", "numpy.reshape", "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_triangle.compare"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_batching_lengths": ["<builtin>.int", "boolean_mask_test.TestBooleanMaskOp._dtype_conversion", "numpy.arange", "caffe2.python.core.CreateOperator", "numpy.random.shuffle", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randint", "numpy.prod", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_batching_lengths.ref": ["<builtin>.range", "numpy.reshape"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_batching_window": ["<builtin>.int", "boolean_mask_test.TestBooleanMaskOp._dtype_conversion", "numpy.arange", "caffe2.python.core.CreateOperator", "numpy.random.shuffle", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randint", "numpy.prod", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_batching_window.ref": ["<builtin>.range", "numpy.reshape"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_batching_triangle": ["boolean_mask_test.TestBooleanMaskOp._dtype_conversion", "numpy.arange", "caffe2.python.core.CreateOperator", "numpy.random.shuffle", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_batching_triangle.compare": [], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_batching_triangle.ref": ["<builtin>.int", "<builtin>.range", "numpy.reshape", "numpy.prod", "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_batching_triangle.compare"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_repeated": ["boolean_mask_test.TestBooleanMaskOp._dtype_conversion", "<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "boolean_mask_test.TestBooleanMaskOp.test_sequence_mask_repeated.ref": ["<builtin>.range", "numpy.reshape"], "boolean_unmask_test": ["unittest.main"], "boolean_unmask_test.TestUnmaskOp": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from"], "boolean_unmask_test.TestUnmaskOp.test": ["numpy.random.choice", "numpy.random.permutation", "numpy.random.randint", "caffe2.python.core.CreateOperator", "numpy.split", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.sorted", "numpy.zeros", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.enumerate"], "boolean_unmask_test.TestUnmaskOp.test.ref": [], "box_with_nms_limit_op_test": ["unittest.main"], "box_with_nms_limit_op_test.get_op": ["<builtin>.len", "caffe2.python.core.CreateOperator"], "box_with_nms_limit_op_test.gen_boxes": ["numpy.tile", "numpy.array"], "box_with_nms_limit_op_test.gen_multiple_boxes": ["<builtin>.len", "numpy.vstack", "numpy.ones", "numpy.tile", "box_with_nms_limit_op_test.gen_boxes", "<builtin>.zip"], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.settings"], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_simple": ["numpy.ones", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "box_with_nms_limit_op_test.gen_multiple_boxes", "box_with_nms_limit_op_test.get_op"], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_simple.ref": [], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_score_thresh": ["numpy.ones", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "box_with_nms_limit_op_test.gen_multiple_boxes", "box_with_nms_limit_op_test.get_op"], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_score_thresh.ref": [], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_detections_per_im": ["numpy.ones", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "box_with_nms_limit_op_test.gen_multiple_boxes", "box_with_nms_limit_op_test.get_op"], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_detections_per_im.ref": [], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_multiclass": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.tile", "<builtin>.range", "numpy.random.rand", "numpy.array", "box_with_nms_limit_op_test.get_op", "box_with_nms_limit_op_test.gen_multiple_boxes"], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_multiclass.ref": [], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_detections_per_im_same_thresh": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertValidationChecks", "numpy.ones", "box_with_nms_limit_op_test.gen_multiple_boxes", "box_with_nms_limit_op_test.get_op"], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_detections_per_im_same_thresh.verify": ["numpy.testing.assert_allclose", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertValidationChecks": [], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_detections_per_im_same_thresh_multiclass": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertValidationChecks", "box_with_nms_limit_op_test.gen_multiple_boxes", "box_with_nms_limit_op_test.get_op"], "box_with_nms_limit_op_test.TestBoxWithNMSLimitOp.test_detections_per_im_same_thresh_multiclass.verify": ["numpy.allclose", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertTrue", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertNotEqual"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertTrue": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertNotEqual": [], "bucketize_op_test": ["unittest.main"], "bucketize_op_test.TestBucketizeOp": ["caffe2.python.hypothesis_test_util.floats", "hypothesis.given", "caffe2.python.hypothesis_test_util.tensor"], "bucketize_op_test.TestBucketizeOp.test_bucketize_op": ["numpy.random.randint", "caffe2.python.core.CreateOperator", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "bucketize_op_test.TestBucketizeOp.test_bucketize_op.ref": ["numpy.digitize"], "numpy.digitize": [], "cast_op_test": [], "cast_op_test.TestCastOp": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.given"], "cast_op_test.TestCastOp.test_cast_int_float": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "cast_op_test.TestCastOp.test_cast_int_float_empty": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "cast_op_test.TestCastOp.test_cast_int_to_string": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "cast_op_test.TestCastOp.test_cast_int_to_string.ref": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.temp_workspace"], "ceil_op_test": ["unittest.main"], "ceil_op_test.TestCeil": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "ceil_op_test.TestCeil.test_ceil": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "ceil_op_test.TestCeil.test_ceil.ceil_ref": ["numpy.ceil"], "channel_backprop_stats_op_test": ["unittest.main"], "channel_backprop_stats_op_test.TestChannelBackpropStats": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.given"], "channel_backprop_stats_op_test.TestChannelBackpropStats.testChannelBackpropStats": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.sum", "caffe2.python.core.CreateOperator", "numpy.random.rand", "numpy.sqrt"], "channel_backprop_stats_op_test.TestChannelBackpropStats.testChannelBackpropStats.referenceChannelBackpropStatsTest": ["numpy.zeros", "<builtin>.range"], "channel_shuffle_test.ChannelShuffleOpsTest._channel_shuffle_nchw_ref": ["numpy.transpose", "<builtin>.int", "numpy.prod"], "channel_shuffle_test.ChannelShuffleOpsTest._channel_shuffle_nhwc_ref": ["numpy.transpose", "<builtin>.int", "numpy.prod"], "channel_shuffle_test.ChannelShuffleOpsTest": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from"], "channel_shuffle_test.ChannelShuffleOpsTest.test_channel_shuffle": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "channel_shuffle_test.ChannelShuffleOpsTest.test_channel_shuffle.channel_shuffle_ref": ["channel_shuffle_test.ChannelShuffleOpsTest._channel_shuffle_nchw_ref", "channel_shuffle_test.ChannelShuffleOpsTest._channel_shuffle_nhwc_ref"], "channel_stats_op_test": ["unittest.main"], "channel_stats_op_test.TestChannelStatsOp.channel_stats_nchw_ref": ["numpy.sum"], "channel_stats_op_test.TestChannelStatsOp.channel_stats_nhwc_ref": ["numpy.sum"], "channel_stats_op_test.TestChannelStatsOp": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.given", "hypothesis.strategies.sampled_from"], "channel_stats_op_test.TestChannelStatsOp.test_channel_stats_2d": ["numpy.transpose", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randn", "caffe2.python.core.CreateOperator"], "channel_stats_op_test.TestChannelStatsOp.test_channel_stats_2d.ref_op": ["channel_stats_op_test.TestChannelStatsOp.channel_stats_nhwc_ref", "channel_stats_op_test.TestChannelStatsOp.channel_stats_nchw_ref"], "channel_stats_op_test.TestChannelStatsOp.test_channel_stats_3d": ["numpy.transpose", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randn", "caffe2.python.core.CreateOperator"], "channel_stats_op_test.TestChannelStatsOp.test_channel_stats_3d.ref_op": ["channel_stats_op_test.TestChannelStatsOp.channel_stats_nhwc_ref", "channel_stats_op_test.TestChannelStatsOp.channel_stats_nchw_ref"], "checkpoint_test.CheckpointTest": ["unittest.skipIf", "caffe2.python.core.C.registered_dbs"], "checkpoint_test.CheckpointTest.testCheckpoint": ["tempfile.mkdtemp", "os.path.exists", "caffe2.python.workspace.RunNet", "<builtin>.range", "caffe2.python.workspace.CreateNet", "shutil.rmtree", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertTrue", "os.path.join"], "clip_op_test": ["unittest.main"], "clip_op_test.TestClip": ["hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.given", "hypothesis.settings", "hypothesis.strategies.booleans"], "clip_op_test.TestClip.test_clip": ["numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.abs", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.isscalar"], "numpy.isscalar": [], "clip_op_test.TestClip.test_clip.clip_ref": [], "clip_op_test.TestClip.test_clip_default": ["numpy.array", "caffe2.python.core.CreateOperator", "numpy.sign", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.isscalar"], "clip_op_test.TestClip.test_clip_default.clip_ref": [], "clip_tensor_op_test": ["unittest.main"], "clip_tensor_op_test.TestClipTensorByScalingOp": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.floats", "hypothesis.settings", "hypothesis.strategies.integers"], "clip_tensor_op_test.TestClipTensorByScalingOp.test_clip_tensor_by_scaling": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "numpy.random.rand", "numpy.linalg.norm"], "clip_tensor_op_test.TestClipTensorByScalingOp.test_clip_tensor_by_scaling.clip_tensor_by_scaling_ref": ["<builtin>.float"], "collect_and_distribute_fpn_rpn_proposals_op_test": ["unittest.main"], "collect_and_distribute_fpn_rpn_proposals_op_test.boxes_area": ["numpy.all"], "collect_and_distribute_fpn_rpn_proposals_op_test.map_rois_to_fpn_levels": ["collect_and_distribute_fpn_rpn_proposals_op_test.boxes_area", "numpy.clip", "numpy.floor", "numpy.log2", "numpy.sqrt"], "collect_and_distribute_fpn_rpn_proposals_op_test.collect": ["numpy.concatenate", "numpy.argsort"], "collect_and_distribute_fpn_rpn_proposals_op_test.distribute": ["numpy.where", "numpy.empty", "collect_and_distribute_fpn_rpn_proposals_op_test.map_rois_to_fpn_levels", "<builtin>.range", "numpy.argsort", "numpy.concatenate", "<builtin>.enumerate"], "collect_and_distribute_fpn_rpn_proposals_op_test.collect_and_distribute_fpn_rpn_ref": ["collect_and_distribute_fpn_rpn_proposals_op_test.collect", "<builtin>.len", "collect_and_distribute_fpn_rpn_proposals_op_test.distribute", "<builtin>.range"], "collect_and_distribute_fpn_rpn_proposals_op_test.collect_rpn_ref": ["collect_and_distribute_fpn_rpn_proposals_op_test.collect"], "collect_and_distribute_fpn_rpn_proposals_op_test.distribute_fpn_ref": ["collect_and_distribute_fpn_rpn_proposals_op_test.distribute"], "collect_and_distribute_fpn_rpn_proposals_op_test.TestCollectAndDistributeFpnRpnProposals._create_input": ["numpy.random.rand", "numpy.random.seed", "<builtin>.range"], "collect_and_distribute_fpn_rpn_proposals_op_test.TestCollectAndDistributeFpnRpnProposals": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.settings"], "collect_and_distribute_fpn_rpn_proposals_op_test.TestCollectAndDistributeFpnRpnProposals.test_collect_and_dist": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.utils.MakeArgument", "caffe2.python.core.CreateOperator", "<builtin>.range", "collect_and_distribute_fpn_rpn_proposals_op_test.TestCollectAndDistributeFpnRpnProposals._create_input"], "collect_and_distribute_fpn_rpn_proposals_op_test.TestCollectAndDistributeFpnRpnProposals.test_collect_and_dist_separately": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.utils.MakeArgument", "caffe2.python.core.CreateOperator", "collect_and_distribute_fpn_rpn_proposals_op_test.collect", "<builtin>.range", "collect_and_distribute_fpn_rpn_proposals_op_test.TestCollectAndDistributeFpnRpnProposals._create_input"], "concat_split_op_test.TestConcatSplitOps.test_concat.<lambda1>": ["numpy.concatenate", "numpy.array"], "concat_split_op_test.TestConcatSplitOps.test_concat_add_axis.<lambda1>": ["numpy.concatenate", "numpy.array", "<builtin>.len", "numpy.expand_dims"], "caffe2.python.hypothesis_test_util.lengths_tensor": [], "concat_split_op_test.TestConcatSplitOps.test_split_by_lengths": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.sum", "concat_split_op_test.TestConcatSplitOps.test_split_by_lengths._find_factor_simple", "caffe2.python.core.CreateOperator", "numpy.array", "<builtin>.range"], "concat_split_op_test.TestConcatSplitOps.test_split_by_lengths._find_factor_simple": [], "concat_split_op_test.TestConcatSplitOps.test_split_by_lengths.split_by_lengths_ref": ["numpy.arange", "numpy.cumsum", "<builtin>.list", "numpy.array", "<builtin>.range"], "conditional_test": [], "conditional_test.TestConditionalOp": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers"], "conditional_test.TestConditionalOp.test_conditional": ["numpy.random.random", "numpy.random.choice", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "conditional_test.TestConditionalOp.test_conditional.ref": ["<builtin>.range"], "conftest.pytest_configure": ["caffe2.python.serialized_test.serialized_test_util._output_context.__setattr__"], "caffe2.python.serialized_test.serialized_test_util._output_context.__setattr__": [], "conv_test._cudnn_supports": ["caffe2.python.workspace.GetCuDNNVersion"], "caffe2.python.workspace.GetCuDNNVersion": [], "conv_test._cudnn_convolution_algo_count": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.integers"], "conv_test.TestConvolution": ["hypothesis.given", "conv_test._cudnn_convolution_algo_count", "hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.strategies.integers"], "conv_test.TestConvolution.test_convolution_separate_stride_pad_gradients": ["<builtin>.int", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "hypothesis.assume", "<builtin>.len", "<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaises"], "caffe2.python.utils.NHWC2NCHW": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaises": [], "conv_test.TestConvolution.test_convolution_separate_stride_pad_layout": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "numpy.testing.assert_allclose", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run": [], "conv_test.TestConvolution.test_convolution_gradients": ["conv_test._cudnn_supports", "<builtin>.int", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "hypothesis.assume", "<builtin>.len", "<builtin>.range", "<builtin>.str", "caffe2.python.hip_test_util.run_in_hip", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaises"], "caffe2.python.hip_test_util.run_in_hip": [], "conv_test.TestConvolution._nd_convolution": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.utils.NCHW2NHWC", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "hypothesis.assume", "<builtin>.len", "<builtin>.range", "<builtin>.str", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaises"], "caffe2.python.utils.NCHW2NHWC": [], "conv_test.TestConvolution.test_1d_convolution": ["hypothesis.assume", "conv_test.TestConvolution._nd_convolution", "caffe2.python.hip_test_util.run_in_hip"], "conv_test.TestConvolution.test_3d_convolution": ["hypothesis.assume", "conv_test.TestConvolution._nd_convolution"], "conv_test.TestConvolution.test_3d_convolution_cudnn_nchw": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "<builtin>.len", "<builtin>.range", "<builtin>.str", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaises"], "conv_test.TestConvolution.test_convolution_layout": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run", "conv_test._cudnn_supports", "collections.namedtuple", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "conv_test.TestConvolution.test_convolution_layout.canonical", "numpy.testing.assert_allclose", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "hypothesis.assume", "caffe2.python.hip_test_util.run_in_hip"], "conv_test.TestConvolution.test_convolution_layout.canonical": ["caffe2.python.utils.NHWC2NCHW"], "conv_test.TestConvolution.test_convolution_sync": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run", "caffe2.python.model_helper.ModelHelper", "numpy.sum", "numpy.testing.assert_allclose", "<builtin>.reversed", "numpy.random.seed", "numpy.random.randint", "conv_test.TestConvolution.test_convolution_sync.run", "numpy.testing.assert_array_equal", "<builtin>.range", "caffe2.python.brew.conv", "numpy.square", "numpy.random.randn", "caffe2.python.workspace.ResetWorkspace"], "conv_test.TestConvolution.test_convolution_sync.run": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "numpy.random.seed", "<builtin>.range", "<builtin>.str", "numpy.random.randn"], "conv_test.TestConvolution.test_use_cudnn_engine_interactions": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaises", "functools.partial", "caffe2.python.model_helper.ModelHelper", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual"], "conv_test.TestConvolution.test_1x1_conv": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.len", "hypothesis.assume", "<builtin>.range", "caffe2.python.hip_test_util.run_in_hip", "numpy.random.randn"], "conv_test.TestConvolution.test_1x1_conv.conv_1x1_nchw_ref": ["numpy.add", "numpy.zeros", "numpy.dot", "<builtin>.range"], "numpy.add": [], "conv_test.TestConvolution.test_1x1_conv.conv_1x1_nhwc_ref": ["numpy.add", "numpy.zeros", "numpy.dot", "<builtin>.range"], "conv_transpose_test.TestConvolutionTranspose": ["hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.strategies.booleans"], "conv_transpose_test.TestConvolutionTranspose.test_convolution_transpose_layout_legacy_args": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "hypothesis.assume", "<builtin>.int", "numpy.testing.assert_allclose", "caffe2.python.hip_test_util.run_in_hip", "numpy.random.rand"], "conv_transpose_test.TestConvolutionTranspose.test_convolution_transpose_layout": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "hypothesis.assume", "<builtin>.int", "numpy.testing.assert_allclose", "caffe2.python.hip_test_util.run_in_hip", "numpy.random.rand"], "conv_transpose_test.TestConvolutionTranspose.test_convolution_transpose_separate_stride_pad_adj_layout": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "hypothesis.assume", "numpy.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.random.rand"], "conv_transpose_test.TestConvolutionTranspose.test_convolution_transpose_gradients": ["caffe2.python.core.CreateOperator", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hip_test_util.run_in_hip", "numpy.random.rand"], "conv_transpose_test.TestConvolutionTranspose.test_convolution_transpose_separate_stride_pad_adj_gradient": ["caffe2.python.core.CreateOperator", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.rand"], "conv_transpose_test.TestConvolutionTranspose.test_convolution_transpose_with_group": ["<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.range", "hypothesis.assume", "<builtin>.int", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hip_test_util.run_in_hip", "numpy.random.rand"], "copy_ops_test": [], "copy_ops_test.CopyOpsTest.tearDown": ["caffe2.python.workspace.ResetWorkspace"], "copy_ops_test.CopyOpsTest.run_test_copy_gradient": ["caffe2.python.test_util.TestCase.assertTrue", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "caffe2.python.core.DeviceScope", "numpy.array_equal", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce"], "copy_ops_test.CopyOpsTest.test_copy_gradient_cpu": ["caffe2.python.core.DeviceOption", "copy_ops_test.CopyOpsTest.run_test_copy_gradient"], "copy_ops_test.CopyOpsTest": ["caffe2.python.workspace.NumGpuDevices", "unittest.skipIf"], "copy_ops_test.CopyOpsTest.test_copy_gradient_gpu": ["caffe2.python.core.DeviceOption", "copy_ops_test.CopyOpsTest.run_test_copy_gradient"], "copy_ops_test.CopyOpsTest.test_copy_gradient_multiple_gpus": ["caffe2.python.test_util.TestCase.assertTrue", "numpy.random.rand", "caffe2.python.model_helper.ModelHelper", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "numpy.array_equal", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "copy_ops_test.CopyOpsTest.test_copy_gradient_multiple_gpus.get_op_with_output", "caffe2.python.test_util.TestCase.assertEqual"], "copy_ops_test.CopyOpsTest.test_copy_gradient_multiple_gpus.get_op_with_output": ["<builtin>.len"], "copy_ops_test.CopyOpsTest.test_cpu2gpu_gpu2cpu_sparse_gradients": ["caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.model_helper.ModelHelper", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "<builtin>.isinstance", "caffe2.python.brew.fc"], "copy_ops_test.CopyOpsTest.test_cpu2gpu_gpu2cpu_gradients": ["caffe2.python.workspace.CreateNet", "numpy.random.rand", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.model_helper.ModelHelper", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "numpy.array_equal", "caffe2.python.core.NameScope", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.random.randint", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.RunNet", "caffe2.python.brew.fc"], "copy_rows_to_tensor_op_test": ["logging.getLogger"], "copy_rows_to_tensor_op_test.get_input_tensors": ["caffe2.python.hypothesis_test_util.arrays", "numpy.random.randint", "hypothesis.strategies.integers"], "copy_rows_to_tensor_op_test.TestCopyRowsToTensor": ["hypothesis.given", "copy_rows_to_tensor_op_test.get_input_tensors", "hypothesis.settings"], "copy_rows_to_tensor_op_test.TestCopyRowsToTensor.test_copy_rows_to_tensor": ["numpy.random.choice", "numpy.arange", "caffe2.python.core.CreateOperator", "numpy.random.shuffle", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.shape", "numpy.array", "numpy.random.randint", "numpy.random.rand"], "copy_rows_to_tensor_op_test.TestCopyRowsToTensor.test_copy_rows_to_tensor.ref": [], "copy_rows_to_tensor_op_test.TestCopyRowsToTensor.test_copy_rows_to_tensor_invalid_input": ["numpy.arange", "caffe2.python.core.CreateOperator", "numpy.random.shuffle", "numpy.shape", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRunOpRaises", "numpy.array", "numpy.random.randint", "numpy.random.rand"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRunOpRaises": [], "cosine_embedding_criterion_op_test": ["unittest.main"], "cosine_embedding_criterion_op_test.TestCosineEmbeddingCriterion": ["hypothesis.strategies.floats", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers"], "cosine_embedding_criterion_op_test.TestCosineEmbeddingCriterion.test_cosine_embedding_criterion": ["numpy.abs", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.choice", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.randn", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "cosine_embedding_criterion_op_test.TestCosineEmbeddingCriterion.test_cosine_embedding_criterion.ref_cec": ["numpy.maximum"], "counter_ops_test": ["unittest.main"], "counter_ops_test.TestCounterOps.test_counter_ops": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "<builtin>.range", "tempfile.NamedTemporaryFile"], "crf_test": [], "crf_test.TestCRFOp": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers"], "crf_test.TestCRFOp.test_crf_with_loss_op": ["caffe2.python.workspace.FeedBlob", "numpy.testing.assert_allclose", "caffe2.python.model_helper.ModelHelper", "numpy.random.uniform", "numpy.random.randn", "caffe2.python.brew.fc", "caffe2.python.crf.CRFWithLoss", "caffe2.python.workspace.RunNetOnce", "<builtin>.str", "caffe2.python.workspace.FetchBlob", "crf_test.TestCRFOp._compute_loss_manual", "numpy.random.randint"], "crf_test.TestCRFOp._compute_loss_manual": ["<builtin>.enumerate", "numpy.expand_dims", "numpy.ones", "scipy.special.logsumexp", "numpy.array", "<builtin>.zip", "numpy.concatenate", "<builtin>.sum"], "crf_test.TestCRFOp.test_crf_gradient": ["caffe2.python.workspace.FeedBlob", "<builtin>.enumerate", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.RunNetOnce", "caffe2.python.crf.CRFWithLoss", "numpy.random.randn", "<builtin>.str", "caffe2.python.workspace.FetchBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "scipy.special.logsumexp": [], "cross_entropy_ops_test": ["unittest.main"], "cross_entropy_ops_test.sigmoid": ["numpy.exp"], "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits": ["numpy.maximum", "numpy.log", "numpy.exp", "numpy.abs"], "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits_grad": ["cross_entropy_ops_test.sigmoid"], "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits_with_log_D_trick": ["cross_entropy_ops_test.sigmoid", "numpy.log"], "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits_with_log_D_trick_grad": ["cross_entropy_ops_test.sigmoid"], "cross_entropy_ops_test.unjoined_sigmoid_cross_entropy": ["numpy.maximum", "numpy.log", "numpy.exp", "numpy.abs"], "cross_entropy_ops_test.unjoined_sigmoid_cross_entropy_grad": ["numpy.exp"], "cross_entropy_ops_test.TestCrossEntropyOps.<lambda1>": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.one_of", "caffe2.python.hypothesis_test_util.arrays", "hypothesis.strategies.tuples", "caffe2.python.hypothesis_test_util.floats"], "cross_entropy_ops_test.TestCrossEntropyOps": ["hypothesis.strategies.just", "hypothesis.given", "hypothesis.strategies.one_of", "hypothesis.strategies.tuples", "hypothesis.strategies.lists", "hypothesis.strategies.integers"], "cross_entropy_ops_test.TestCrossEntropyOps.test_sigmoid_cross_entropy_with_logits": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "cross_entropy_ops_test.TestCrossEntropyOps.test_sigmoid_cross_entropy_with_logits.sigmoid_xentr_logit_ref": ["cross_entropy_ops_test.unjoined_sigmoid_cross_entropy", "<builtin>.len", "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits_with_log_D_trick", "numpy.mean", "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits"], "cross_entropy_ops_test.TestCrossEntropyOps.test_sigmoid_cross_entropy_with_logits.sigmoid_xentr_logit_grad_ref": ["cross_entropy_ops_test.unjoined_sigmoid_cross_entropy_grad", "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits_grad", "numpy.expand_dims", "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits_with_log_D_trick_grad"], "cross_entropy_ops_test.TestCrossEntropyOps.test_cross_entropy_and_unjoied_cross_entropy_relation": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "cross_entropy_ops_test.TestCrossEntropyOps.test_cross_entropy_and_unjoied_cross_entropy_relation.sigmoid_xentr_logit_ref": ["cross_entropy_ops_test.unjoined_sigmoid_cross_entropy", "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits", "<builtin>.len", "numpy.mean"], "cross_entropy_ops_test.TestCrossEntropyOps.test_cross_entropy_and_unjoied_cross_entropy_relation.sigmoid_xentr_logit_grad_ref": ["cross_entropy_ops_test.unjoined_sigmoid_cross_entropy_grad", "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits_grad", "numpy.expand_dims"], "cross_entropy_ops_test.TestCrossEntropyOps.<lambda2>": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.one_of", "caffe2.python.hypothesis_test_util.arrays", "hypothesis.strategies.tuples", "caffe2.python.hypothesis_test_util.floats"], "cross_entropy_ops_test.TestCrossEntropyOps.test_weighted_sigmoid_cross_entropy_with_logits": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "cross_entropy_ops_test.TestCrossEntropyOps.test_weighted_sigmoid_cross_entropy_with_logits.weighted_sigmoid_xentr_logit_ref": ["numpy.mean", "numpy.multiply", "cross_entropy_ops_test.sigmoid_cross_entropy_with_logits", "<builtin>.len"], "cross_entropy_ops_test.TestCrossEntropyOps.test_weighted_sigmoid_cross_entropy_with_logits.weighted_sigmoid_xentr_logit_grad_ref": ["numpy.multiply", "cross_entropy_ops_test.sigmoid", "numpy.expand_dims"], "cross_entropy_ops_test.TestCrossEntropyOps.test_soft_label_cross_entropy": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "<builtin>.range", "numpy.random.rand", "numpy.sum"], "cross_entropy_ops_test.TestCrossEntropyOps.test_soft_label_cross_entropy.soft_label_xentr_ref": ["<builtin>.max", "numpy.log", "<builtin>.range", "<builtin>.len", "numpy.sum"], "ctc_beam_search_decoder_op_test": ["unittest.main", "random.seed"], "ctc_beam_search_decoder_op_test.TestCTCBeamSearchDecoderOp": ["hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.settings"], "ctc_beam_search_decoder_op_test.TestCTCBeamSearchDecoderOp.test_ctc_beam_search_decoder": ["ctc_beam_search_decoder_op_test.TestCTCBeamSearchDecoderOp.test_ctc_beam_search_decoder.input_generater", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "<builtin>.min"], "ctc_beam_search_decoder_op_test.TestCTCBeamSearchDecoderOp.test_ctc_beam_search_decoder.input_generater": ["numpy.random.randint", "numpy.random.rand"], "ctc_beam_search_decoder_op_test.TestCTCBeamSearchDecoderOp.test_ctc_beam_search_decoder.ref_ctc_decoder": ["numpy.zeros", "numpy.hstack", "<builtin>.range", "<builtin>.len", "numpy.vstack", "<builtin>.sorted", "numpy.array", "numpy.where", "collections.defaultdict"], "numpy.hstack": [], "ctc_beam_search_decoder_op_test.TestCTCBeamSearchDecoderOp.test_ctc_beam_search_decoder.ref_ctc_decoder_max_time": ["ctc_beam_search_decoder_op_test.TestCTCBeamSearchDecoderOp.test_ctc_beam_search_decoder.ref_ctc_decoder"], "ctc_greedy_decoder_op_test": ["unittest.main", "random.seed"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.sampled_from"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder": ["caffe2.python.core.CreateOperator", "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder.input_generater", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder.input_generater": ["numpy.random.randint", "numpy.random.rand"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder.ref_ctc_decoder": ["numpy.append", "numpy.argmax", "numpy.array", "<builtin>.range"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder.ref_ctc_decoder_max_time": ["ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder.ref_ctc_decoder"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder_no_merge_arg": ["ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder_no_merge_arg.input_generater", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder_no_merge_arg.input_generater": ["numpy.random.randint", "numpy.random.rand"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder_no_merge_arg.ref_ctc_decoder_no_merge_arg": ["numpy.append", "numpy.argmax", "numpy.array", "<builtin>.range"], "ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder_no_merge_arg.ref_ctc_decoder_max_time": ["ctc_greedy_decoder_op_test.TestCTCGreedyDecoderOp.test_ctc_greedy_decoder_no_merge_arg.ref_ctc_decoder_no_merge_arg"], "cudnn_recurrent_test": [], "cudnn_recurrent_test.TestLSTMs.testEqualToCudnn": ["numpy.zeros", "caffe2.python.workspace.FetchBlob", "caffe2.python.rnn_cell.InitFromLSTMParams", "caffe2.python.workspace.RunNet", "unittest.TestCase.assertTrue", "caffe2.python.workspace.CreateNet", "caffe2.python.rnn_cell.cudnn_LSTM", "caffe2.python.rnn_cell.LSTM", "caffe2.python.core.DeviceOption", "numpy.allclose", "future.utils.viewitems", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FeedBlob", "numpy.array", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.rnn_cell.InitFromLSTMParams": [], "dataset_ops_test": ["unittest.main", "hypothesis.strategies.composite"], "dataset_ops_test._assert_arrays_equal": ["numpy.testing.assert_array_equal", "numpy.testing.assert_allclose"], "dataset_ops_test._assert_records_equal": ["<builtin>.len", "<builtin>.zip", "dataset_ops_test._assert_arrays_equal", "<builtin>.isinstance"], "dataset_ops_test._sparse_features_map": ["<builtin>.sum", "hypothesis.strategies.integers", "hypothesis.strategies.lists"], "dataset_ops_test._dense_features_map": ["<builtin>.sum", "hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.strategies.lists"], "dataset_ops_test._dataset": ["dataset_ops_test._sparse_features_map", "caffe2.python.schema.Map", "hypothesis.strategies.integers", "caffe2.python.schema.Struct", "caffe2.python.schema.List", "dataset_ops_test._dense_features_map", "caffe2.python.schema.Scalar", "caffe2.python.schema.from_blob_list", "hypothesis.strategies.lists", "hypothesis.strategies.text"], "dataset_ops_test.TestDatasetOps": ["hypothesis.given", "dataset_ops_test._dataset"], "dataset_ops_test.TestDatasetOps.test_pack_unpack": ["caffe2.python.schema.NewRecord", "<builtin>.len", "<builtin>.zip", "caffe2.python.workspace.FetchBlob", "caffe2.python.schema.FeedRecord", "numpy.testing.assert_array_equal", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce"], "dataset_ops_test.TestDatasetOps.test_dataset_ops": ["caffe2.python.core.NameScope", "<builtin>.len", "<builtin>.zip", "dataset_ops_test._assert_records_equal", "caffe2.python.workspace.FetchBlob", "numpy.array", "caffe2.python.schema.FeedRecord", "caffe2.python.workspace.RunPlan", "caffe2.python.schema.Struct", "caffe2.python.schema.from_blob_list", "<builtin>.range", "<builtin>.str", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.core.execution_step", "numpy.dtype", "caffe2.python.core.Plan", "caffe2.python.schema.NewRecord", "caffe2.python.dataset.Const", "caffe2.python.schema.Map", "caffe2.python.schema.List", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CreateNet", "caffe2.python.schema.FetchRecord", "caffe2.python.schema.Scalar", "caffe2.python.core.Net", "caffe2.python.dataset.Dataset"], "caffe2.python.dataset.Const": [], "dataset_ops_test.TestDatasetOps.test_last_n_window_ops": ["<builtin>.range", "caffe2.python.workspace.CreateBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "caffe2.python.core.execution_step", "<builtin>.list", "caffe2.python.workspace.RunPlan", "numpy.testing.assert_array_equal", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.Plan"], "dataset_ops_test.TestDatasetOps.test_last_n_window_ops_shape_inference": ["caffe2.python.workspace.InferShapesAndTypes", "numpy.array_equal", "caffe2.python.workspace.CreateBlob", "numpy.array", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce"], "dataset_ops_test.TestDatasetOps.test_last_n_window_ops_shape_inference_4d_input": ["caffe2.python.workspace.InferShapesAndTypes", "<builtin>.range", "numpy.array_equal", "caffe2.python.workspace.CreateBlob", "numpy.array", "functools.reduce", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "<builtin>.float", "caffe2.python.workspace.RunNetOnce"], "dataset_ops_test.TestDatasetOps.test_collect_tensor_ops": ["<builtin>.print", "<builtin>.range", "numpy.histogram", "<builtin>.min", "<builtin>.len", "caffe2.python.workspace.FetchBlob", "caffe2.python.test_util.TestCase.assertEqual", "<builtin>.tuple", "caffe2.python.core.execution_step", "caffe2.python.workspace.RunPlan", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.Net", "<builtin>.all", "caffe2.python.core.Plan", "caffe2.python.workspace.RunNetOnce"], "data_couple_op_test": [], "data_couple_op_test.TestDataCoupleOp.test_data_couple_op": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "decay_adagrad_test": ["unittest.main"], "decay_adagrad_test.TestDecayAdagrad.ref_decay_adagrad": ["numpy.power", "numpy.sqrt", "numpy.square"], "decay_adagrad_test.TestDecayAdagrad": ["hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.given", "hypothesis.strategies.integers"], "decay_adagrad_test.TestDecayAdagrad.test_decay_adagrad": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.abs", "numpy.array", "functools.partial", "caffe2.python.core.CreateOperator"], "deform_conv_test": ["unittest.main"], "deform_conv_test._cudnn_supports": ["caffe2.python.workspace.GetCuDNNVersion"], "deform_conv_test._conv_1d_output_size": ["<builtin>.int", "<builtin>.max"], "deform_conv_test._conv_2d_output_size": ["deform_conv_test._conv_1d_output_size"], "deform_conv_test._conv_2d_offsets_dims": ["deform_conv_test._conv_2d_output_size"], "deform_conv_test._conv_2d_random_offsets": ["numpy.random.uniform", "<builtin>.range", "numpy.array", "numpy.random.randint"], "deform_conv_test._conv_2d_shuffle_offsets": ["numpy.random.randint", "numpy.array", "<builtin>.int", "caffe2.python.utils.NCHW2NHWC", "<builtin>.range"], "deform_conv_test.TestConvolution": ["unittest.skipIf", "hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.strategies.sampled_from"], "deform_conv_test.TestConvolution.test_null_offset_convolution": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "deform_conv_test._cudnn_supports", "numpy.zeros", "hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "deform_conv_test._conv_2d_offsets_dims", "caffe2.python.utils.NHWC2NCHW", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "<builtin>.tuple"], "deform_conv_test.TestConvolution.test_null_offset_convolution.reference_conv_op": ["caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce"], "deform_conv_test.TestConvolution.test_flat_input_convolution": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "deform_conv_test._cudnn_supports", "numpy.ones", "hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "deform_conv_test._conv_2d_output_size", "deform_conv_test._conv_2d_random_offsets", "caffe2.python.utils.NHWC2NCHW", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "deform_conv_test.TestConvolution.test_flat_input_convolution.reference_conv_op": ["caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce"], "deform_conv_test.TestConvolution.test_shuffle_input_convolution": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "deform_conv_test._cudnn_supports", "numpy.ones", "deform_conv_test._conv_2d_shuffle_offsets", "hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "deform_conv_test._conv_2d_output_size", "caffe2.python.utils.NHWC2NCHW", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "deform_conv_test.TestConvolution.test_shuffle_input_convolution.reference_conv_op": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator"], "deform_conv_test.TestConvolution.test_conv_separate_stride_pad_gradients": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "deform_conv_test._conv_2d_output_size", "<builtin>.int", "<builtin>.len", "deform_conv_test._conv_2d_random_offsets", "caffe2.python.utils.NHWC2NCHW", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.range", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "deform_conv_test.TestConvolution.test_conv_gradients": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "deform_conv_test._cudnn_supports", "hypothesis.assume", "deform_conv_test._conv_2d_output_size", "<builtin>.len", "deform_conv_test._conv_2d_random_offsets", "caffe2.python.utils.NHWC2NCHW", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.range", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "dense_vector_to_id_list_op_test": ["hypothesis.strategies.composite"], "dense_vector_to_id_list_op_test.id_list_batch": ["hypothesis.extra.numpy.arrays", "numpy.array", "hypothesis.strategies.integers", "<builtin>.range"], "dense_vector_to_id_list_op_test.dense_vector_to_id_list_ref": ["<builtin>.len", "<builtin>.enumerate"], "dense_vector_to_id_list_op_test.TestDenseVectorToIdList.test_dense_vector_to_id_list_ref": ["numpy.testing.assert_array_equal", "numpy.array", "dense_vector_to_id_list_op_test.dense_vector_to_id_list_ref"], "dense_vector_to_id_list_op_test.TestDenseVectorToIdList": ["hypothesis.given", "dense_vector_to_id_list_op_test.id_list_batch"], "dense_vector_to_id_list_op_test.TestDenseVectorToIdList.test_dense_vector_to_id_list_op": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "depthwise_3x3_conv_test": [], "depthwise_3x3_conv_test.Depthwise3x3ConvOpsTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "depthwise_3x3_conv_test.Depthwise3x3ConvOpsTest.test_convolution_gradients": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "caffe2.python.core.CreateOperator", "<builtin>.len"], "detectron_keypoints": [], "detectron_keypoints.heatmaps_to_keypoints": ["<builtin>.range", "numpy.ceil", "cv2.resize", "numpy.maximum", "detectron_keypoints.scores_to_probs", "numpy.transpose", "<builtin>.int", "<builtin>.len", "numpy.zeros"], "cv2.resize": [], "detectron_keypoints.scores_to_probs": ["numpy.sum", "<builtin>.range", "numpy.exp"], "detectron_keypoints.approx_heatmap_keypoint": ["<builtin>.range", "numpy.maximum", "<builtin>.abs", "detectron_keypoints.scores_to_probs", "<builtin>.max", "numpy.transpose", "<builtin>.len", "numpy.zeros"], "distance_op_test": [], "distance_op_test.DistanceTest": ["caffe2.python.hypothesis_test_util.tensors", "hypothesis.strategies.integers", "caffe2.python.serialized_test.serialized_test_util.given"], "distance_op_test.DistanceTest.test_cosine_similarity": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.divide", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run", "numpy.testing.assert_allclose", "numpy.multiply", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "numpy.linalg.norm", "numpy.random.uniform"], "numpy.divide": [], "distance_op_test.DistanceTest.test_dot_product": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "distance_op_test.DistanceTest.test_dot_product.dot_ref": ["numpy.dot", "<builtin>.zip"], "distance_op_test.DistanceTest.test_L1_distance": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.testing.assert_allclose", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.sign", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "numpy.linalg.norm", "<builtin>.zip", "numpy.random.uniform"], "distance_op_test.DistanceTest.test_L2_distance": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.testing.assert_allclose", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run", "numpy.square", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "numpy.random.uniform"], "dropout_op_test.TestDropout": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.floats", "hypothesis.given", "hypothesis.strategies.booleans", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.settings", "hypothesis.strategies.sampled_from"], "dropout_op_test.TestDropout.test_dropout_is_test": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "hypothesis.assume"], "dropout_op_test.TestDropout.test_dropout_is_test.reference_dropout_test": ["numpy.ones"], "dropout_op_test.TestDropout.test_dropout_ratio0": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "hypothesis.assume"], "dropout_op_test.TestDropout.test_dropout_ratio0.reference_dropout_ratio0": ["numpy.ones"], "duplicate_operands_test": ["unittest.main"], "duplicate_operands_test.TestDuplicateOperands.test_duplicate_operands": ["caffe2.python.workspace.FetchBlob", "numpy.allclose", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.Net", "numpy.random.uniform", "caffe2.python.workspace.RunNetOnce"], "elementwise_linear_op_test": [], "elementwise_linear_op_test.TestElementwiseLinearOp": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers"], "elementwise_linear_op_test.TestElementwiseLinearOp.test": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand"], "elementwise_linear_op_test.TestElementwiseLinearOp.test.ref_op": ["numpy.multiply"], "elementwise_logical_ops_test": ["unittest.main"], "elementwise_logical_ops_test.mux": ["numpy.vectorize"], "elementwise_logical_ops_test.mux.<list1>.<lambda1>": [], "elementwise_logical_ops_test.rowmux": ["elementwise_logical_ops_test.mux", "<builtin>.len"], "elementwise_logical_ops_test.TestWhere.test_reference": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertTrue", "numpy.array", "elementwise_logical_ops_test.mux"], "elementwise_logical_ops_test.TestWhere": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "elementwise_logical_ops_test.TestWhere.test_where": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "elementwise_logical_ops_test.TestWhere.test_where_dim2": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "elementwise_logical_ops_test.TestRowWhere.test_reference": ["numpy.array", "elementwise_logical_ops_test.rowmux", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue"], "elementwise_logical_ops_test.TestRowWhere": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from"], "elementwise_logical_ops_test.TestRowWhere.test_rowwhere": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_logical_ops_test.TestRowWhere.test_rowwhere_dim2": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_logical_ops_test.TestIsMemberOf": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "elementwise_logical_ops_test.TestIsMemberOf.test_is_member_of": ["caffe2.python.core.CreateOperator", "<builtin>.set", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.array"], "elementwise_logical_ops_test.TestIsMemberOf.test_is_member_of.test": ["numpy.vectorize"], "elementwise_logical_ops_test.TestIsMemberOf.test_is_member_of.test.<list1>.<lambda1>": [], "elementwise_ops_test": ["unittest.main"], "elementwise_ops_test.TestElementwiseOps": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.sampled_from", "hypothesis.strategies.booleans", "caffe2.python.hypothesis_test_util.floats", "hypothesis.settings", "hypothesis.strategies.integers"], "elementwise_ops_test.TestElementwiseOps.test_abs": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_abs.abs_ref": ["numpy.absolute"], "elementwise_ops_test.TestElementwiseOps.test_exp": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_exp.exp_ref": ["numpy.exp"], "elementwise_ops_test.TestElementwiseOps.test_log": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "elementwise_ops_test.TestElementwiseOps.test_log.log_op": ["numpy.log"], "elementwise_ops_test.TestElementwiseOps.test_powt": ["numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_powt.powt_op": ["numpy.power"], "elementwise_ops_test.TestElementwiseOps.test_powt.powt_grad": ["numpy.log", "numpy.power"], "elementwise_ops_test.TestElementwiseOps.test_sqr": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "elementwise_ops_test.TestElementwiseOps.test_sqr.sqr_op": ["numpy.square"], "elementwise_ops_test.TestElementwiseOps.test_sqrt": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_sqrt.sqrt_op": ["numpy.sqrt"], "elementwise_ops_test.TestElementwiseOps.test_softsign": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_softsign.softsign_ref": ["numpy.absolute"], "elementwise_ops_test.TestElementwiseOps.test_rsqrt": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_rsqrt.rsqrt_ref": ["numpy.sqrt"], "elementwise_ops_test.TestElementwiseOps.test_cube": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_cube.cube_ref": ["numpy.power"], "elementwise_ops_test.TestElementwiseOps.test_cube.cube_grad_ref": ["numpy.square"], "elementwise_ops_test.TestElementwiseOps.test_cbrt": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_cbrt.cbrt_ref": ["numpy.cbrt"], "numpy.cbrt": [], "elementwise_ops_test.TestElementwiseOps.test_cbrt_grad": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "elementwise_ops_test.TestElementwiseOps.test_swish": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "elementwise_ops_test.TestElementwiseOps.test_swish.swish": ["numpy.divide", "numpy.exp"], "elementwise_ops_test.TestElementwiseOps.test_swish_gradient_inplace": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.seed", "numpy.random.rand", "elementwise_ops_test.TestElementwiseOps.test_swish_gradient_inplace.swish", "caffe2.python.core.CreateOperator"], "elementwise_ops_test.TestElementwiseOps.test_swish_gradient_inplace.swish": ["numpy.divide", "numpy.exp"], "elementwise_ops_test.TestElementwiseOps.test_swish_gradient_inplace.swish_gradient": ["numpy.divide", "numpy.exp"], "elementwise_ops_test.TestElementwiseOps.test_mul_gradient_inplace_or_broadcast": ["numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_mul_gradient_inplace_or_broadcast.mul_gradient": ["numpy.sum"], "elementwise_ops_test.TestElementwiseOps.test_div_gradient_inplace_or_broadcast": ["numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_div_gradient_inplace_or_broadcast.div_gradient": ["numpy.sum"], "elementwise_ops_test.TestElementwiseOps.test_add_gradient_inplace_or_broadcast": ["numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_add_gradient_inplace_or_broadcast.add_gradient": ["numpy.sum"], "elementwise_ops_test.TestElementwiseOps.test_sub_gradient_inplace_or_broadcast": ["numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_sub_gradient_inplace_or_broadcast.sub_gradient": ["numpy.sum"], "elementwise_ops_test.TestElementwiseOps.test_sigmoid": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_sigmoid.sigmoid_ref": ["numpy.exp"], "elementwise_ops_test.TestElementwiseOps.test_tanh": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_tanh.tanh_ref": ["numpy.tanh"], "elementwise_ops_test.TestElementwiseOps.test_hard_sigmoid": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.abs", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.sign", "caffe2.python.core.CreateOperator", "hypothesis.assume"], "elementwise_ops_test.TestElementwiseOps.test_hard_sigmoid.hard_sigmoid_ref": ["numpy.maximum", "numpy.minimum"], "elementwise_ops_test.TestElementwiseOps.test_eq": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.list", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "numpy.random.randint", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.InferShapesAndTypes"], "elementwise_ops_test.TestElementwiseOps.test_eq.eq": [], "elementwise_ops_test.TestElementwiseOps.test_eq_bcast": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.str", "<builtin>.list", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "numpy.random.randint", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.InferShapesAndTypes"], "elementwise_ops_test.TestElementwiseOps.test_eq_bcast.eq": [], "elementwise_ops_test.TestElementwiseOps._run_single_test": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.range"], "elementwise_ops_test.TestElementwiseOps._test_binary_op": ["caffe2.python.core.CreateOperator", "numpy.random.rand", "elementwise_ops_test.TestElementwiseOps._run_single_test"], "elementwise_ops_test.TestElementwiseOps._test_binary_op.ref": ["numpy.multiply", "numpy.divide", "numpy.subtract", "numpy.add"], "elementwise_ops_test.TestElementwiseOps._test_binary_op_in_place": ["caffe2.python.core.CreateOperator", "numpy.random.rand", "elementwise_ops_test.TestElementwiseOps._run_single_test"], "elementwise_ops_test.TestElementwiseOps._test_binary_op_in_place.ref": ["numpy.divide", "numpy.subtract", "numpy.add"], "elementwise_ops_test.TestElementwiseOps.test_add": ["elementwise_ops_test.TestElementwiseOps._test_binary_op", "elementwise_ops_test.TestElementwiseOps._test_binary_op_in_place"], "elementwise_ops_test.TestElementwiseOps.test_sub": ["elementwise_ops_test.TestElementwiseOps._test_binary_op", "elementwise_ops_test.TestElementwiseOps._test_binary_op_in_place"], "elementwise_ops_test.TestElementwiseOps.test_mul": ["elementwise_ops_test.TestElementwiseOps._test_binary_op"], "elementwise_ops_test.TestElementwiseOps.test_div": ["elementwise_ops_test.TestElementwiseOps._test_binary_op", "elementwise_ops_test.TestElementwiseOps._test_binary_op_in_place"], "elementwise_ops_test.TestElementwiseOps.test_div_legacy_grad": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.randn"], "elementwise_ops_test.TestElementwiseOps.test_div_legacy_grad.div_grad_ref": ["numpy.sum"], "elementwise_ops_test.TestElementwiseOps._test_bitwise_binary_op": ["caffe2.python.core.CreateOperator", "elementwise_ops_test.TestElementwiseOps._run_single_test", "numpy.random.randint"], "elementwise_ops_test.TestElementwiseOps._test_bitwise_binary_op.ref": ["numpy.bitwise_and", "numpy.bitwise_xor", "numpy.bitwise_or"], "numpy.bitwise_and": [], "numpy.bitwise_xor": [], "numpy.bitwise_or": [], "elementwise_ops_test.TestElementwiseOps.test_bitwise_and": ["elementwise_ops_test.TestElementwiseOps._test_bitwise_binary_op"], "elementwise_ops_test.TestElementwiseOps.test_bitwise_or": ["elementwise_ops_test.TestElementwiseOps._test_bitwise_binary_op"], "elementwise_ops_test.TestElementwiseOps.test_bitwise_xor": ["elementwise_ops_test.TestElementwiseOps._test_bitwise_binary_op"], "elementwise_ops_test.TestElementwiseOps.test_reciprocal": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_reciprocal.reciprocal_op": ["numpy.reciprocal"], "numpy.reciprocal": [], "elementwise_ops_test.TestElementwiseOps.test_not": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_not.not_op": ["numpy.logical_not"], "numpy.logical_not": [], "elementwise_ops_test.TestElementwiseOps.test_log1p": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "elementwise_ops_test.TestElementwiseOps.test_log1p.ref_log1p": ["numpy.log1p"], "elementwise_ops_test.TestElementwiseOps.test_log1p.ref_log1p_grad": [], "elementwise_op_broadcast_test": ["unittest.main"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.__generate_test_cases": ["numpy.random.rand", "<builtin>.dict"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.__test_binary_op": ["operator.mul", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_almost_equal", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "operator.sub", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "elementwise_op_broadcast_test.TestElementwiseBroadcast.__generate_test_cases", "operator.add", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "operator.mul": [], "operator.add": [], "operator.sub": [], "elementwise_op_broadcast_test.TestElementwiseBroadcast": ["hypothesis.given", "hypothesis.strategies.booleans", "unittest.skipIf", "hypothesis.settings"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_Add": ["elementwise_op_broadcast_test.TestElementwiseBroadcast.__test_binary_op"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_Mul": ["elementwise_op_broadcast_test.TestElementwiseBroadcast.__test_binary_op"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_Sub": ["elementwise_op_broadcast_test.TestElementwiseBroadcast.__test_binary_op"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.random.seed", "caffe2.python.core.CreateOperator"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_op": ["numpy.power"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad": ["numpy.power", "numpy.log"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad_broadcast": ["numpy.sum", "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_op_axis1": ["elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_op"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad_axis1": ["numpy.sum", "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_op_axis0": ["elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_op"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad_axis0": ["numpy.sum", "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_op_mixed": ["elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_op"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad_mixed": ["numpy.sum", "numpy.reshape", "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_powt.powt_grad"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_broadcast_scalar": ["caffe2.python.workspace.RunOperatorOnce", "numpy.random.rand", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_almost_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_semantic_broadcast": ["caffe2.python.workspace.RunOperatorOnce", "numpy.random.rand", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_almost_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_sum_reduce_empty_blob": ["caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.DeviceScope"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_sum_reduce": ["caffe2.python.workspace.RunOperatorOnce", "numpy.random.rand", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_almost_equal", "numpy.array", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.sum"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_sum_reduce_fp16": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator", "hypothesis.assume", "caffe2.python.core.IsGPUDeviceType"], "elementwise_op_broadcast_test.TestElementwiseBroadcast.test_sum_reduce_fp16.ref_op": ["numpy.sum"], "emptysample_ops_test": ["unittest.main"], "emptysample_ops_test.TestEmptySampleOps.test_emptysample": ["<builtin>.range", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob"], "enforce_finite_op_test": [], "enforce_finite_op_test.TestEnforceFinite": ["caffe2.python.hypothesis_test_util.tensor", "caffe2.python.hypothesis_test_util.floats", "hypothesis.given", "hypothesis.settings"], "enforce_finite_op_test.TestEnforceFinite.test_enforce_finite": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "enforce_finite_op_test.TestEnforceFinite.test_enforce_finite.all_finite_value", "caffe2.python.core.Net"], "enforce_finite_op_test.TestEnforceFinite.test_enforce_finite.all_finite_value": ["numpy.isfinite"], "enforce_finite_op_test.TestEnforceFinite.test_enforce_finite_device_check": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "ensure_clipped_test": [], "ensure_clipped_test.TestEnsureClipped": ["caffe2.python.hypothesis_test_util.floats", "hypothesis.strategies.booleans", "hypothesis.given", "caffe2.python.hypothesis_test_util.arrays"], "ensure_clipped_test.TestEnsureClipped.test_ensure_clipped": ["numpy.random.rand", "<builtin>.len", "ensure_clipped_test.TestEnsureClipped.test_ensure_clipped.ref", "numpy.nonzero", "caffe2.python.workspace.RunOperatorOnce", "numpy.array", "numpy.testing.assert_allclose", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator"], "numpy.nonzero": [], "ensure_clipped_test.TestEnsureClipped.test_ensure_clipped.ref": ["<builtin>.range", "numpy.array", "numpy.clip"], "ensure_cpu_output_op_test": ["hypothesis.strategies.composite"], "ensure_cpu_output_op_test._dev_options": ["hypothesis.strategies.sampled_from"], "ensure_cpu_output_op_test.TestEnsureCPUOutputOp": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensor", "ensure_cpu_output_op_test._dev_options"], "ensure_cpu_output_op_test.TestEnsureCPUOutputOp.test_ensure_cpu_output": ["caffe2.python.core.Net", "numpy.testing.assert_allclose", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce"], "erf_op_test": ["unittest.main"], "erf_op_test.TestErfOp": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.given", "caffe2.python.hypothesis_test_util.floats", "hypothesis.settings"], "erf_op_test.TestErfOp.test_erf": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "erf_op_test.TestErfOp.test_erf.<lambda1>": ["numpy.vectorize"], "expand_op_test": [], "expand_op_test.TestExpandOp._rand_shape": ["<builtin>.range", "numpy.ones", "<builtin>.len", "<builtin>.reversed", "numpy.random.choice", "numpy.random.randint"], "expand_op_test.TestExpandOp._run_expand_op_test": ["numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "expand_op_test.TestExpandOp._run_expand_op_test.ref": ["numpy.ones", "<builtin>.abs"], "expand_op_test.TestExpandOp": ["hypothesis.settings", "caffe2.python.hypothesis_test_util.tensor", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.sampled_from", "hypothesis.given"], "expand_op_test.TestExpandOp.test_expand_rand_shape": ["expand_op_test.TestExpandOp._rand_shape", "expand_op_test.TestExpandOp._run_expand_op_test"], "expand_op_test.TestExpandOp.test_expand_nonrand_shape1": ["expand_op_test.TestExpandOp._run_expand_op_test"], "expand_op_test.TestExpandOp.test_expand_nonrand_shape2": ["expand_op_test.TestExpandOp._run_expand_op_test"], "fc_operator_test": ["unittest.main"], "fc_operator_test.TestFcOperator._run_test": ["hypothesis.assume", "<builtin>.range", "caffe2.python.core.IsGPUDeviceType", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.proto.caffe2_pb2.Argument", "numpy.random.rand"], "fc_operator_test.TestFcOperator._run_test.fc_op": ["numpy.dot"], "fc_operator_test.TestFcOperator._run_test.fc_transposed_op": ["numpy.dot"], "fc_operator_test.TestFcOperator": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.given"], "fc_operator_test.TestFcOperator.test_fc": ["fc_operator_test.TestFcOperator._run_test"], "fc_operator_test.TestFcOperator.test_fc_transposed": ["fc_operator_test.TestFcOperator._run_test"], "feature_maps_ops_test": [], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_dense_feature_tensors": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_single_scalar_feature_tensors": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_single_scalar_feature_tensors_gradient": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_single_scalar_feature_tensors_gradient_with_strings": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_single_list_feature_tensors": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_single_list_feature_tensors_gradient": ["feature_maps_ops_test.TestFeatureMapsOps._test_merge_single_list_or_map_feature_tensors_gradient"], "feature_maps_ops_test.TestFeatureMapsOps._test_merge_single_list_or_map_feature_tensors_gradient": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_single_map_feature_tensors_gradient": ["feature_maps_ops_test.TestFeatureMapsOps._test_merge_single_list_or_map_feature_tensors_gradient"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_single_map_feature_tensors": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_multi_scalar_feature_tensors": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_multi_scalar_feature_tensors_gradient": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_multi_list_feature_tensors": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_multi_map_feature_tensors": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_multi_list_feature_tensors_gradient": ["feature_maps_ops_test.TestFeatureMapsOps._test_merge_multi_list_or_map_feature_tensors_gradient"], "feature_maps_ops_test.TestFeatureMapsOps._test_merge_multi_list_or_map_feature_tensors_gradient": ["numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "feature_maps_ops_test.TestFeatureMapsOps.test_merge_multi_map_feature_tensors_gradient": ["feature_maps_ops_test.TestFeatureMapsOps._test_merge_multi_list_or_map_feature_tensors_gradient"], "filler_ops_test": ["unittest.main"], "filler_ops_test._fill_diagonal": ["numpy.fill_diagonal", "numpy.zeros"], "numpy.fill_diagonal": [], "filler_ops_test.TestFillerOperator": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.dims", "hypothesis.settings", "hypothesis.given", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.lists"], "filler_ops_test.TestFillerOperator.test_shape_error": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertTrue", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual"], "filler_ops_test.TestFillerOperator.test_int64_shape": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertTrue", "caffe2.python.core.Net", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.CreateNet", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual"], "filler_ops_test.TestFillerOperator.<lambda1>": ["caffe2.python.hypothesis_test_util.arrays", "hypothesis.strategies.integers"], "filler_ops_test.TestFillerOperator.test_uniform_int_fill_op_blob_input": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertTrue", "numpy.testing.assert_array_equal", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.DeviceOption", "caffe2.python.core.Net"], "filler_ops_test.TestFillerOperator.test_uniform_fill_using_arg": ["caffe2.python.workspace.RunNetOnce", "numpy.min", "numpy.testing.assert_array_equal", "numpy.max", "caffe2.python.workspace.FetchBlob", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertNotEqual", "caffe2.python.core.Net", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertLessEqual", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGreaterEqual"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGreaterEqual": [], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertLessEqual": [], "filler_ops_test.TestFillerOperator.test_diagonal_fill_op_float": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "filler_ops_test.TestFillerOperator.test_diagonal_fill_op_int": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "filler_ops_test.TestFillerOperator.test_lengths_range_fill": ["caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "filler_ops_test.TestFillerOperator.test_lengths_range_fill._len_range_fill": ["<builtin>.range", "<builtin>.enumerate", "numpy.array", "<builtin>.list"], "filler_ops_test.TestFillerOperator.test_gaussian_fill_op": ["caffe2.python.core.CreateOperator", "numpy.count_nonzero", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "filler_ops_test.TestFillerOperator.test_msra_fill_op": ["caffe2.python.core.CreateOperator", "numpy.count_nonzero", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "filler_ops_test.TestFillerOperator.test_fp16_uniformfill_op": ["numpy.min", "caffe2.python.workspace.RunOperatorOnce", "numpy.max", "caffe2.python.workspace.FetchBlob", "numpy.mean", "<builtin>.float", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertAlmostEqual", "numpy.var", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertLessEqual", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGreaterEqual"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertAlmostEqual": [], "find_op_test": [], "find_op_test.TestFindOperator": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.sampled_from"], "find_op_test.TestFindOperator.test_find": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "find_op_test.TestFindOperator.test_find.findop": ["<builtin>.list", "numpy.where", "numpy.array", "<builtin>.len", "<builtin>.print"], "flatten_op_test": ["unittest.main"], "flatten_op_test.TestFlatten": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensor"], "flatten_op_test.TestFlatten.test_flatten": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "flatten_op_test.TestFlatten.test_flatten.flatten_ref": ["numpy.prod", "numpy.copy"], "flexible_top_k_test": [], "flexible_top_k_test.TestFlexibleTopK.flexible_top_k_ref": ["<builtin>.sorted", "<builtin>.sum", "collections.OrderedDict", "<builtin>.range", "numpy.ndarray"], "numpy.ndarray": [], "flexible_top_k_test.TestFlexibleTopK": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.settings"], "flexible_top_k_test.TestFlexibleTopK.test_flexible_top_k": ["<builtin>.int", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randint"], "flexible_top_k_test.TestFlexibleTopK.test_flexible_top_k.bind_ref": ["flexible_top_k_test.TestFlexibleTopK.flexible_top_k_ref"], "flexible_top_k_test.TestFlexibleTopK.test_flexible_top_k_grad": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "<builtin>.range", "<builtin>.int", "numpy.random.randint"], "floor_op_test": ["unittest.main"], "floor_op_test.TestFloor": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.settings"], "floor_op_test.TestFloor.test_floor": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "floor_op_test.TestFloor.test_floor.floor_ref": ["numpy.floor"], "fused_nbit_rowwise_conversion_ops_test": ["numpy.vectorize"], "fused_nbit_rowwise_conversion_ops_test.bytes_to_half_floats": ["<builtin>.memoryview", "numpy.shape", "numpy.frombuffer", "<builtin>.enumerate", "numpy.empty"], "<builtin>.memoryview": [], "numpy.frombuffer": [], "fused_nbit_rowwise_conversion_ops_test.half_floats_to_bytes": ["numpy.array", "<builtin>.memoryview", "numpy.shape", "<builtin>.isinstance", "numpy.frombuffer", "<builtin>.enumerate", "numpy.empty"], "fused_nbit_rowwise_conversion_ops_test.int8_to_bytes": ["<builtin>.ord", "struct.pack", "numpy.shape", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.list", "numpy.empty"], "fused_nbit_rowwise_conversion_ops_test.fused_rowwise_nbit_quantize_reference": ["math.isinf", "numpy.round", "numpy.clip", "numpy.concatenate", "numpy.min", "numpy.zeros", "numpy.max", "fused_nbit_rowwise_conversion_ops_test.half_floats_to_bytes", "<builtin>.range"], "math.isinf": [], "fused_nbit_rowwise_conversion_ops_test.fused_rowwise_nbit_quantize_dequantize_reference": ["<builtin>.range", "fused_nbit_rowwise_conversion_ops_test.fused_rowwise_nbit_quantize_reference", "numpy.zeros", "fused_nbit_rowwise_conversion_ops_test.bytes_to_half_floats"], "fused_nbit_rowwise_conversion_ops_test.TestFusedNBitRowwiseQuantizationConversion": ["hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.tensor"], "fused_nbit_rowwise_conversion_ops_test.TestFusedNBitRowwiseQuantizationConversion.test_quantize_op": ["hypothesis.assume", "numpy.testing.assert_array_equal", "caffe2.python.workspace.RunOperatorOnce", "fused_nbit_rowwise_conversion_ops_test.fused_rowwise_nbit_quantize_reference", "<builtin>.str", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "fused_nbit_rowwise_conversion_ops_test.bytes_to_half_floats", "numpy.testing.assert_array_almost_equal"], "fused_nbit_rowwise_conversion_ops_test.TestFusedNBitRowwiseQuantizationConversion.test_quantize_and_dequantize_op": ["hypothesis.assume", "caffe2.python.workspace.RunOperatorOnce", "fused_nbit_rowwise_conversion_ops_test.fused_rowwise_nbit_quantize_dequantize_reference", "<builtin>.str", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "numpy.testing.assert_array_almost_equal"], "fused_nbit_rowwise_conversion_ops_test.ErrorThresholdRow": ["numpy.abs", "numpy.float16", "numpy.maximum", "numpy.min", "numpy.max"], "fused_nbit_rowwise_conversion_ops_test.TestNBitFakeFused": ["hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "fused_nbit_rowwise_conversion_ops_test.TestNBitFakeFused.testNBit": ["numpy.random.randint", "numpy.sum", "numpy.abs", "caffe2.python.workspace.GlobalInit", "caffe2.python.workspace.RunNetOnce", "fused_nbit_rowwise_conversion_ops_test.ErrorThresholdRow", "<builtin>.str", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "caffe2.python.core.Net", "numpy.linalg.norm", "<builtin>.range"], "fused_nbit_rowwise_conversion_ops_test.TestNBitGreedyFused": ["hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "fused_nbit_rowwise_conversion_ops_test.TestNBitGreedyFused.testNBit": ["numpy.random.randint", "caffe2.python.operator_test.fused_nbit_rowwise_test_helper.param_search_greedy", "numpy.abs", "caffe2.python.workspace.GlobalInit", "caffe2.python.workspace.RunNetOnce", "caffe2.python.operator_test.fused_nbit_rowwise_test_helper._compress_uniform_simplified", "<builtin>.str", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "caffe2.python.core.Net", "numpy.linalg.norm", "<builtin>.range"], "caffe2.python.operator_test.fused_nbit_rowwise_test_helper.param_search_greedy": [], "caffe2.python.operator_test.fused_nbit_rowwise_test_helper._compress_uniform_simplified": [], "fused_nbit_rowwise_test_helper": [], "fused_nbit_rowwise_test_helper.param_search_greedy": ["numpy.max", "fused_nbit_rowwise_test_helper._compress_uniform_simplified", "numpy.min", "<builtin>.len", "numpy.float32"], "fused_nbit_rowwise_test_helper._compress_uniform_simplified": ["<builtin>.range", "numpy.zeros", "<builtin>.len", "numpy.float32", "numpy.where", "numpy.clip", "numpy.round", "numpy.sqrt"], "gather_ops_test": ["unittest.main", "hypothesis.strategies.composite"], "gather_ops_test.ref_gather_axis0": [], "gather_ops_test.ref_gather_axis0.inner": ["numpy.zeros"], "gather_ops_test.ref_gather": [], "gather_ops_test.ref_gather.inner": ["numpy.zeros", "<builtin>.tuple", "<builtin>.list"], "gather_ops_test.ref_gather_match_outer": [], "gather_ops_test.ref_gather_match_outer.inner": ["numpy.zeros", "<builtin>.tuple", "<builtin>.range", "<builtin>.list"], "gather_ops_test.TestGatherOps": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers"], "gather_ops_test.TestGatherOps.test_gather_ops": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "gather_ops_test.ref_gather_axis0", "numpy.random.randint", "numpy.random.random", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "gather_ops_test.TestGatherOps.test_gather_ops_axis2": ["caffe2.python.core.CreateOperator", "gather_ops_test.ref_gather", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.randint", "numpy.random.random", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "gather_ops_test.TestGatherOps.test_gather_ops_match_outer": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.randint", "numpy.random.random", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "gather_ops_test.ref_gather_match_outer", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "gather_ops_test.TestGatherOps.test_batch_gather_op_match_outer": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.randint", "numpy.random.random", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "gather_ops_test.ref_gather_match_outer", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "gather_ops_test.TestGatherOps.test_gather_op_match_outer_axis2_data4D_ind4D": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.randint", "numpy.random.random", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "gather_ops_test.ref_gather_match_outer", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "gather_ops_test._inputs": ["hypothesis.extra.numpy.arrays", "caffe2.python.hypothesis_test_util.floats", "hypothesis.strategies.integers"], "gather_ops_test.TestBatchGatherOps": ["hypothesis.given", "gather_ops_test._inputs", "hypothesis.settings"], "gather_ops_test.TestBatchGatherOps.test_batch_gather_ops": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "gather_ops_test.ref_gather", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "gather_ops_test.TestGatherFused8BitRowwise": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers"], "gather_ops_test.TestGatherFused8BitRowwise.test_batch_gather_ops": ["caffe2.python.core.Net", "numpy.testing.assert_array_almost_equal", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FeedBlob", "numpy.random.randint", "caffe2.python.workspace.FetchBlob", "numpy.random.random", "caffe2.python.workspace.RunNetOnce"], "gather_ranges_op_test": ["hypothesis.strategies.composite", "unittest.main"], "gather_ranges_op_test.batched_boarders_and_data": ["hypothesis.strategies.tuples", "hypothesis.strategies.integers"], "gather_ranges_op_test.batched_boarders_and_data.<lambda1>": ["hypothesis.strategies.tuples", "caffe2.python.hypothesis_test_util.arrays", "hypothesis.strategies.integers"], "gather_ranges_op_test._tensor_splits": ["numpy.array", "<builtin>.range", "<builtin>.len", "hypothesis.strategies.floats", "hypothesis.strategies.lists", "hypothesis.strategies.integers", "hypothesis.strategies.permutations"], "hypothesis.strategies.permutations": [], "gather_ranges_op_test._bad_tensor_splits": ["numpy.array", "<builtin>.range", "<builtin>.len", "hypothesis.strategies.floats", "hypothesis.strategies.lists", "hypothesis.strategies.integers", "hypothesis.strategies.permutations"], "gather_ranges_op_test.gather_ranges": ["<builtin>.len"], "gather_ranges_op_test.gather_ranges_to_dense": ["numpy.array", "<builtin>.range", "<builtin>.len"], "gather_ranges_op_test.gather_ranges_to_dense_with_key": ["numpy.array", "<builtin>.range", "<builtin>.len", "<builtin>.zip", "<builtin>.sorted"], "gather_ranges_op_test.gather_ranges_to_dense_with_key.<lambda1>": [], "gather_ranges_op_test.TestGatherRanges": ["hypothesis.given", "gather_ranges_op_test._bad_tensor_splits", "hypothesis.settings", "gather_ranges_op_test.batched_boarders_and_data", "gather_ranges_op_test._tensor_splits"], "gather_ranges_op_test.TestGatherRanges.test_gather_ranges": ["numpy.apply_along_axis", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "gather_ranges_op_test.TestGatherRanges.test_gather_ranges.boarders_to_range": ["<builtin>.sorted", "<builtin>.len"], "numpy.apply_along_axis": [], "gather_ranges_op_test.TestGatherRanges.test_gather_ranges_split": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.range", "<builtin>.len"], "gather_ranges_op_test.TestGatherRanges.test_gather_ranges_with_key_split": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.range", "<builtin>.len"], "gather_ranges_op_test.TestGatherRanges.test_shape_and_type_inference": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.hypothesis_test_util.temp_workspace", "caffe2.python.core.Net"], "gather_ranges_op_test.TestGatherRanges.test_empty_range_check": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "gather_ranges_op_test.TestGatherRanges.test_empty_range_check.getOpWithThreshold", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaises"], "gather_ranges_op_test.TestGatherRanges.test_empty_range_check.getOpWithThreshold": ["caffe2.python.core.CreateOperator", "<builtin>.range", "<builtin>.len"], "given_tensor_byte_string_to_uint8_fill_op_test": ["unittest.main"], "given_tensor_byte_string_to_uint8_fill_op_test.TestGivenTensorByteStringToUInt8FillOps": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensor"], "given_tensor_byte_string_to_uint8_fill_op_test.TestGivenTensorByteStringToUInt8FillOps.test_given_tensor_byte_string_to_uint8_fill": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.print", "<builtin>.str", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "given_tensor_byte_string_to_uint8_fill_op_test.TestGivenTensorByteStringToUInt8FillOps.test_given_tensor_byte_string_to_uint8_fill.constant_fill": [], "given_tensor_byte_string_to_uint8_fill_op_test.TestGivenTensorByteStringToUInt8FillOps.test_empty_given_tensor_byte_string_to_uint8_fill": ["numpy.array", "caffe2.python.core.CreateOperator", "<builtin>.print", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.str", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "given_tensor_byte_string_to_uint8_fill_op_test.TestGivenTensorByteStringToUInt8FillOps.test_empty_given_tensor_byte_string_to_uint8_fill.constant_fill": [], "given_tensor_fill_op_test": ["unittest.main"], "given_tensor_fill_op_test.TestGivenTensorFillOps": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.sampled_from"], "given_tensor_fill_op_test.TestGivenTensorFillOps.test_given_tensor_fill": ["caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.print", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "given_tensor_fill_op_test.TestGivenTensorFillOps.test_given_tensor_fill.constant_fill": [], "glu_op_test": ["unittest.main", "hypothesis.strategies.composite"], "glu_op_test._glu_old_input": ["hypothesis.strategies.lists", "caffe2.python.hypothesis_test_util.arrays", "<builtin>.len", "hypothesis.strategies.integers"], "glu_op_test.TestGlu": ["hypothesis.settings", "glu_op_test._glu_old_input", "hypothesis.given"], "glu_op_test.TestGlu.test_glu_old": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "glu_op_test.TestGlu.test_glu_old.glu_ref": ["numpy.exp", "numpy.split"], "group_conv_test": ["unittest.main"], "group_conv_test.TestGroupConvolution": ["hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.sampled_from"], "group_conv_test.TestGroupConvolution.test_group_convolution": ["numpy.random.rand", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.len", "hypothesis.assume", "caffe2.python.core.CreateOperator", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hip_test_util.run_in_hip"], "group_norm_op_test": ["unittest.main"], "group_norm_op_test.TestGroupNormOp.group_norm_nchw_ref": ["numpy.var", "<builtin>.int", "numpy.sqrt", "numpy.mean"], "group_norm_op_test.TestGroupNormOp.group_norm_nhwc_ref": ["numpy.var", "<builtin>.int", "numpy.sqrt", "numpy.mean"], "group_norm_op_test.TestGroupNormOp": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.given"], "group_norm_op_test.TestGroupNormOp.test_group_norm_2d": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randn"], "group_norm_op_test.TestGroupNormOp.test_group_norm_2d.ref_op": ["group_norm_op_test.TestGroupNormOp.group_norm_nchw_ref", "group_norm_op_test.TestGroupNormOp.group_norm_nhwc_ref"], "group_norm_op_test.TestGroupNormOp.test_group_norm_3d": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randn"], "group_norm_op_test.TestGroupNormOp.test_group_norm_3d.ref_op": ["group_norm_op_test.TestGroupNormOp.group_norm_nchw_ref", "group_norm_op_test.TestGroupNormOp.group_norm_nhwc_ref"], "group_norm_op_test.TestGroupNormOp.test_group_norm_grad": ["caffe2.python.core.CreateOperator", "numpy.random.randn", "numpy.random.shuffle", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.arange", "<builtin>.range"], "gru_test": ["caffe2.python.workspace.GlobalInit", "unittest.main"], "gru_test.gru_unit": ["caffe2.python.rnn.rnn_cell_test_util.sigmoid", "numpy.ones", "caffe2.python.rnn.rnn_cell_test_util.tanh"], "caffe2.python.rnn.rnn_cell_test_util.sigmoid": [], "gru_test.gru_reference": ["<builtin>.print", "numpy.concatenate", "gru_test.gru_unit", "numpy.dot", "caffe2.python.rnn.rnn_cell_test_util.sigmoid", "<builtin>.range", "numpy.zeros"], "gru_test.gru_unit_op_input": ["hypothesis.strategies.tuples", "hypothesis.strategies.integers"], "gru_test.gru_unit_op_input.create_input": ["<builtin>.list", "caffe2.python.hypothesis_test_util.arrays"], "gru_test.gru_input": ["hypothesis.strategies.tuples", "hypothesis.strategies.integers"], "gru_test.gru_input.create_input": ["<builtin>.list", "caffe2.python.hypothesis_test_util.arrays"], "gru_test._prepare_gru_unit_op": ["gru_test._prepare_gru_unit_op.generate_input_state", "<builtin>.print", "caffe2.python.workspace.RunNetOnce", "caffe2.python.scope.NameScope", "caffe2.python.core.DeviceOption", "numpy.random.randint", "caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper"], "gru_test._prepare_gru_unit_op.generate_input_state": ["numpy.random.randn"], "gru_test.GRUCellTest": ["hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.settings", "gru_test.gru_unit_op_input", "caffe2.python.serialized_test.serialized_test_util.given", "gru_test.gru_input", "hypothesis.given"], "gru_test.GRUCellTest.test_gru_unit_op": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "gru_test._prepare_gru_unit_op", "numpy.random.seed", "<builtin>.print", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FetchBlob", "<builtin>.range", "functools.partial", "caffe2.python.workspace.FeedBlob", "<builtin>.str"], "gru_test.GRUCellTest.test_gru_main": ["gru_test.GRUCellTest.gru_base", "numpy.random.seed"], "gru_test.GRUCellTest.gru_base": ["<builtin>.list", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.locals", "<builtin>.print", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FetchBlob", "<builtin>.range", "functools.partial", "caffe2.python.workspace.FeedBlob", "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn"], "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn": [], "heatmap_max_keypoint_op_test": ["unittest.main"], "heatmap_max_keypoint_op_test.heatmap_FAIR_keypoint_ref": ["caffe2.python.operator_test.detectron_keypoints.heatmaps_to_keypoints"], "caffe2.python.operator_test.detectron_keypoints.heatmaps_to_keypoints": [], "heatmap_max_keypoint_op_test.heatmap_approx_keypoint_ref": ["caffe2.python.operator_test.detectron_keypoints.approx_heatmap_keypoint"], "caffe2.python.operator_test.detectron_keypoints.approx_heatmap_keypoint": [], "heatmap_max_keypoint_op_test.c10_op_ref": ["torch.tensor", "torch.ops._caffe2.HeatmapMaxKeypoint"], "torch.ops._caffe2.HeatmapMaxKeypoint": [], "heatmap_max_keypoint_op_test.TestHeatmapMaxKeypointOp.setUp": ["numpy.arange", "caffe2.proto.caffe2_pb2.DeviceOption", "numpy.random.rand", "<builtin>.range", "numpy.random.seed", "caffe2.python.core.CreateOperator", "numpy.zeros", "<builtin>.super", "caffe2.python.utils.MakeArgument", "scipy.interpolate.interp2d"], "scipy.interpolate.interp2d": [], "heatmap_max_keypoint_op_test.TestHeatmapMaxKeypointOp": ["unittest.skipIf"], "heatmap_max_keypoint_op_test.TestHeatmapMaxKeypointOp.test_close_to_FAIR": ["caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "heatmap_max_keypoint_op_test.TestHeatmapMaxKeypointOp.test_approx_heatmap_keypoint": ["caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "heatmap_max_keypoint_op_test.TestHeatmapMaxKeypointOp.test_special_cases": ["caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.array"], "heatmap_max_keypoint_op_test.TestHeatmapMaxKeypointOp.test_caffe2_pytorch_eq": ["caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "histogram_test": ["caffe2.python.core.GlobalInit", "unittest.main"], "histogram_test.TestHistogram": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.given"], "histogram_test.TestHistogram.test_histogram__device_consistency": ["<builtin>.list", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.linspace", "caffe2.python.core.CreateOperator"], "histogram_test.TestHistogram.test_histogram__valid_inputs_0": ["<builtin>.list", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "numpy.array", "caffe2.python.workspace.FetchBlob"], "histogram_test.TestHistogram.test_histogram__valid_inputs_1": ["<builtin>.list", "numpy.logspace", "numpy.random.rand", "histogram_test.TestHistogram._test_histogram", "<builtin>.range", "numpy.random.randint"], "numpy.logspace": [], "histogram_test.TestHistogram._test_histogram": ["<builtin>.len", "caffe2.python.workspace.FeedBlob", "<builtin>.enumerate", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "numpy.sum", "numpy.size", "caffe2.python.workspace.FetchBlob"], "histogram_test.TestHistogram.test_histogram__empty_input_tensor": ["<builtin>.list", "numpy.linspace", "histogram_test.TestHistogram._test_histogram", "numpy.array"], "histogram_test.TestHistogram.test_histogram__non_increasing_bin_edges": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaisesRegex", "histogram_test.TestHistogram._test_histogram", "numpy.random.rand"], "histogram_test.TestHistogram.test_histogram__insufficient_bin_edges": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaisesRegex", "histogram_test.TestHistogram._test_histogram", "numpy.random.rand"], "numpy.size": [], "hsm_test": ["unittest.main", "caffe2.proto.hsm_pb2.TreeProto", "caffe2.python.hsm_util.create_node_with_words", "caffe2.python.hsm_util.create_hierarchy", "caffe2.python.hsm_util.create_node_with_nodes", "caffe2.proto.caffe2_pb2.Argument"], "caffe2.proto.hsm_pb2.TreeProto": [], "caffe2.python.hsm_util.create_node_with_words": [], "caffe2.python.hsm_util.create_node_with_nodes": [], "caffe2.python.hsm_util.create_hierarchy": [], "hsm_test.TestHsm.test_hsm_search": ["hsm_test.TestHsm.test_hsm_search.simulation_hsm_search", "numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEquals", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.GlobalInit", "numpy.sort", "caffe2.python.workspace.RunOperatorOnce", "numpy.argsort", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "numpy.random.rand", "<builtin>.range", "numpy.random.randint"], "hsm_test.TestHsm.test_hsm_search.simulation_hsm_search": ["numpy.vstack", "numpy.log", "numpy.max", "numpy.dot", "<builtin>.enumerate", "numpy.exp"], "hsm_test.TestHsm.test_hsm_run_once": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.GlobalInit", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "numpy.random.randn", "numpy.random.rand"], "hsm_test.TestHsm.test_hsm_forward": ["numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.proto.caffe2_pb2.DeviceOption", "numpy.zeros", "caffe2.python.workspace.GlobalInit", "caffe2.python.core.GradientRegistry.GetGradientForOp", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "caffe2.python.core.CreateOperator", "caffe2.python.gradient_checker.GradientChecker", "<builtin>.range"], "hsm_test.TestHsm": ["hypothesis.given", "hypothesis.settings"], "hsm_test.TestHsm.test_hsm_gradient": ["numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.GlobalInit", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "<builtin>.range", "numpy.random.randint"], "hsm_test.TestHsm.test_huffman_tree_hierarchy": ["<builtin>.list", "numpy.array", "caffe2.python.workspace.FeedBlob", "<builtin>.sum", "caffe2.proto.hsm_pb2.TreeProto", "hsm_test.TestHsm.test_huffman_tree_hierarchy.checkPath", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.GlobalInit", "<builtin>.zip", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.hsm_util.create_hierarchy", "<builtin>.range", "caffe2.proto.caffe2_pb2.Argument"], "hsm_test.TestHsm.test_huffman_tree_hierarchy.checkPath": ["<builtin>.zip", "<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "hyperbolic_ops_test": [], "hyperbolic_ops_test.TestHyperbolicOps._test_hyperbolic_op": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "hyperbolic_ops_test.TestHyperbolicOps._test_hyperbolic_op.ref": ["numpy.sinh", "numpy.tanh", "numpy.cosh"], "numpy.sinh": [], "numpy.cosh": [], "hyperbolic_ops_test.TestHyperbolicOps": ["hypothesis.strategies.sampled_from", "caffe2.python.hypothesis_test_util.tensor", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.booleans"], "hyperbolic_ops_test.TestHyperbolicOps.test_sinh": ["hyperbolic_ops_test.TestHyperbolicOps._test_hyperbolic_op"], "hyperbolic_ops_test.TestHyperbolicOps.test_cosh": ["hyperbolic_ops_test.TestHyperbolicOps._test_hyperbolic_op"], "hyperbolic_ops_test.TestHyperbolicOps.test_tanh": ["hyperbolic_ops_test.TestHyperbolicOps._test_hyperbolic_op"], "im2col_col2im_test": [], "im2col_col2im_test.TestReduceFrontSum": ["hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.strategies.integers"], "im2col_col2im_test.TestReduceFrontSum.test_im2col_layout": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.testing.assert_allclose", "numpy.random.rand", "<builtin>.range", "hypothesis.assume", "<builtin>.int", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run"], "im2col_col2im_test.TestReduceFrontSum.test_col2im_gradients": ["hypothesis.assume", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "image_input_op_test": ["unittest.main"], "image_input_op_test.verify_apply_bounding_box": ["<builtin>.list", "<builtin>.any", "numpy.isnan", "<builtin>.range", "<builtin>.type"], "image_input_op_test.verify_rescale": ["<builtin>.float", "cv2.cvtColor", "<builtin>.min", "<builtin>.str", "<builtin>.int", "cv2.resize", "<builtin>.print", "numpy.ceil"], "cv2.cvtColor": [], "image_input_op_test.verify_crop": [], "image_input_op_test.verify_color_normalize": [], "image_input_op_test.caffe2_img": [], "image_input_op_test.create_test": ["numpy.random.randint", "<builtin>.list", "PIL.Image.fromarray", "image_input_op_test.verify_apply_bounding_box", "image_input_op_test.verify_color_normalize", "<builtin>.enumerate", "numpy.zeros", "lmdb.open", "caffe2.proto.caffe2_pb2.TensorProtos", "image_input_op_test.verify_rescale", "<builtin>.print", "numpy.random.random_integers", "io.BytesIO", "image_input_op_test.verify_crop"], "PIL.Image.fromarray": [], "image_input_op_test.run_test": ["<builtin>.float", "caffe2.python.hypothesis_test_util.temp_workspace", "tempfile.mkdtemp", "caffe2.python.core.CreateOperator", "image_input_op_test.TestImport.test_imageinput.validator", "image_input_op_test.TestImport.test_imageinput_with_additional_outputs.validator", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "image_input_op_test.create_test", "shutil.rmtree"], "image_input_op_test.TestImport.test_imageinput.validator": ["image_input_op_test.TestImport.validate_image_and_label"], "image_input_op_test.TestImport.test_imageinput_with_additional_outputs.validator": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.workspace.FetchBlob", "image_input_op_test.TestImport.validate_image_and_label", "<builtin>.range"], "image_input_op_test.TestImport.validate_image_and_label": ["<builtin>.zip", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.workspace.FetchBlob", "<builtin>.range"], "image_input_op_test.TestImport.<lambda1>": ["hypothesis.strategies.integers", "hypothesis.strategies.just", "hypothesis.strategies.tuples", "<builtin>.min"], "image_input_op_test.TestImport": ["hypothesis.strategies.tuples", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.strategies.floats"], "image_input_op_test.TestImport.test_imageinput": ["image_input_op_test.run_test"], "image_input_op_test.TestImport.<lambda2>": ["hypothesis.strategies.integers", "hypothesis.strategies.just", "hypothesis.strategies.tuples", "<builtin>.min"], "image_input_op_test.TestImport.test_imageinput_with_additional_outputs": ["image_input_op_test.run_test"], "index_hash_ops_test": [], "index_hash_ops_test.TestIndexHashOps.<lambda1>": ["caffe2.python.hypothesis_test_util.tensor"], "index_hash_ops_test.TestIndexHashOps": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers"], "index_hash_ops_test.TestIndexHashOps.test_index_hash_ops": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "index_hash_ops_test.TestIndexHashOps.test_index_hash_ops.index_hash": ["numpy.array"], "index_hash_ops_test.TestIndexHashOps.test_shape_and_type_inference": ["caffe2.python.core.Net", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual", "caffe2.python.hypothesis_test_util.temp_workspace"], "index_ops_test": ["unittest.main"], "index_ops_test.TestIndexOps._test_index_ops": ["caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_equal", "caffe2.python.workspace.RunOperatorOnce", "numpy.array", "caffe2.python.workspace.FetchBlob", "tempfile.NamedTemporaryFile", "caffe2.python.test_util.TestCase.assertEquals", "numpy.concatenate", "<builtin>.isinstance"], "index_ops_test.TestIndexOps.test_string_index_ops": ["index_ops_test.TestIndexOps._test_index_ops"], "index_ops_test.TestIndexOps.test_int_index_ops": ["<builtin>.list", "<builtin>.range", "index_ops_test.TestIndexOps._test_index_ops"], "index_ops_test.TestIndexOps.test_long_index_ops": ["<builtin>.list", "<builtin>.range", "index_ops_test.TestIndexOps._test_index_ops"], "instance_norm_test": ["unittest.main"], "instance_norm_test.TestInstanceNorm._get_inputs": ["<builtin>.Exception", "caffe2.python.utils.NCHW2NHWC", "numpy.random.rand"], "instance_norm_test.TestInstanceNorm._get_op": ["caffe2.python.core.CreateOperator"], "instance_norm_test.TestInstanceNorm._feed_inputs": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "<builtin>.zip"], "instance_norm_test.TestInstanceNorm": ["hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.given", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.floats", "hypothesis.strategies.booleans"], "instance_norm_test.TestInstanceNorm.test_instance_norm_gradients": ["numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.arange", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.shuffle", "numpy.random.seed", "instance_norm_test.TestInstanceNorm._get_op"], "instance_norm_test.TestInstanceNorm.test_instance_norm_layout": ["instance_norm_test.TestInstanceNorm._get_inputs", "instance_norm_test.TestInstanceNorm._feed_inputs", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.run", "caffe2.python.utils.NHWC2NCHW", "numpy.testing.assert_allclose", "numpy.random.seed", "instance_norm_test.TestInstanceNorm._get_op"], "instance_norm_test.TestInstanceNorm.test_instance_norm_reference_check": ["instance_norm_test.TestInstanceNorm._get_inputs", "hypothesis.assume", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.seed", "instance_norm_test.TestInstanceNorm._get_op"], "instance_norm_test.TestInstanceNorm.test_instance_norm_reference_check.ref": ["numpy.sqrt", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.utils.NCHW2NHWC"], "instance_norm_test.TestInstanceNorm.test_instance_norm_device_check": ["instance_norm_test.TestInstanceNorm._get_inputs", "numpy.random.seed", "instance_norm_test.TestInstanceNorm._get_op", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks"], "instance_norm_test.TestInstanceNorm.test_instance_norm_model_helper": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_net", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.utils.NCHW2NHWC", "numpy.random.rand", "caffe2.python.brew.instance_norm", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "numpy.random.seed", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_net": [], "integral_image_ops_test": [], "integral_image_ops_test.TestIntegralImageOps": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.settings"], "integral_image_ops_test.TestIntegralImageOps.test_integral_image_ops": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "integral_image_ops_test.TestIntegralImageOps.test_integral_image_ops.integral_image": ["numpy.random.rand", "<builtin>.range"], "integral_image_ops_test.TestIntegralImageOps.test_integral_image_gradient_ops": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "integral_image_ops_test.TestIntegralImageOps.test_integral_image_gradient_ops.integral_image_gradient": ["numpy.random.rand", "<builtin>.range"], "jsd_ops_test": [], "jsd_ops_test.entropy": ["numpy.log"], "jsd_ops_test.jsd": ["jsd_ops_test.entropy"], "jsd_ops_test.jsd_grad": ["numpy.log"], "jsd_ops_test.TestJSDOps": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers"], "jsd_ops_test.TestJSDOps.test_bernoulli_jsd": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "key_split_ops_test": [], "key_split_ops_test.TestKeySplitOps": ["caffe2.python.hypothesis_test_util.arrays", "hypothesis.given", "hypothesis.strategies.integers"], "key_split_ops_test.TestKeySplitOps.test_key_split_op": ["numpy.array", "<builtin>.range", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.enumerate", "<builtin>.max", "numpy.testing.assert_array_equal", "caffe2.python.workspace.ResetWorkspace"], "lars_test": [], "lars_test.TestLars": ["hypothesis.strategies.floats", "hypothesis.given"], "lars_test.TestLars.test_lars": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.array"], "lars_test.TestLars.test_lars.ref_lars": ["numpy.minimum", "numpy.linalg.norm", "numpy.maximum"], "layer_norm_op_test": ["unittest.main"], "layer_norm_op_test._layer_norm_ref": ["numpy.square", "numpy.mean", "numpy.prod", "<builtin>.int", "numpy.sqrt", "numpy.reshape"], "layer_norm_op_test._layer_norm_with_affine_ref": ["layer_norm_op_test._layer_norm_ref"], "layer_norm_op_test._layer_norm_grad_ref": ["numpy.sum", "numpy.prod", "<builtin>.int", "numpy.reshape", "numpy.power"], "layer_norm_op_test.TestLayerNormOp": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.settings", "hypothesis.strategies.integers", "unittest.skipIf", "hypothesis.strategies.booleans", "hypothesis.strategies.floats"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_grad_op": ["caffe2.python.core.CreateOperator", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "functools.partial", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "layer_norm_op_test._layer_norm_ref"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_op": ["numpy.random.randn", "caffe2.python.core.CreateOperator", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "functools.partial", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_grad": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.randn", "caffe2.python.core.CreateOperator", "numpy.random.shuffle", "<builtin>.range", "<builtin>.len", "numpy.arange"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_op_c10": ["numpy.random.randn", "caffe2.python.core.CreateOperator", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "functools.partial", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_op_c10_preallocated_outputs": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "numpy.random.randn", "caffe2.python.model_helper.ModelHelper", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_net", "numpy.random.randint", "torch.testing.assert_allclose", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.fetch_blob", "layer_norm_op_test._layer_norm_ref"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.fetch_blob": [], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_op_pytorch": ["torch.tensor", "numpy.random.randn", "numpy.random.randint", "torch.ops._caffe2.LayerNorm", "torch.testing.assert_allclose", "<builtin>.len", "layer_norm_op_test._layer_norm_ref"], "torch.ops._caffe2.LayerNorm": [], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_op_pytorch_cuda": ["torch.tensor", "numpy.random.randn", "numpy.random.randint", "torch.ops._caffe2.LayerNorm", "torch.testing.assert_allclose", "<builtin>.len", "layer_norm_op_test._layer_norm_ref"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_op_jit": ["torch.tensor", "numpy.random.randn", "numpy.random.randint", "layer_norm_op_test.TestLayerNormOp.test_layer_norm_op_jit.jit_layer_norm", "torch.testing.assert_allclose", "<builtin>.len", "torch.jit.script", "layer_norm_op_test._layer_norm_ref"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_op_jit.jit_layer_norm": ["torch.ops._caffe2.LayerNorm"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_brew_wrapper": ["caffe2.python.brew.layer_norm", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_blob", "caffe2.python.model_helper.ModelHelper", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.ws.create_net", "numpy.random.randint", "<builtin>.len", "numpy.ndim"], "numpy.ndim": [], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_with_empty_batch": ["numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.randn", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.range", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "layer_norm_op_test.TestLayerNormOp.test_layer_norm_with_empty_batch.ref": ["numpy.zeros_like", "numpy.zeros"], "leaky_relu_test": ["unittest.main"], "leaky_relu_test.TestLeakyRelu._get_inputs": ["numpy.logical_and", "numpy.random.rand", "caffe2.python.utils.NCHW2NHWC"], "leaky_relu_test.TestLeakyRelu._get_op": ["caffe2.python.core.CreateOperator"], "leaky_relu_test.TestLeakyRelu._feed_inputs": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "<builtin>.zip"], "leaky_relu_test.TestLeakyRelu": ["hypothesis.strategies.integers", "hypothesis.strategies.floats", "hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.strategies.sampled_from"], "leaky_relu_test.TestLeakyRelu.test_leaky_relu_gradients": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "leaky_relu_test.TestLeakyRelu._get_op", "leaky_relu_test.TestLeakyRelu._get_inputs"], "leaky_relu_test.TestLeakyRelu.test_leaky_relu_layout": ["leaky_relu_test.TestLeakyRelu._feed_inputs", "numpy.random.seed", "numpy.testing.assert_allclose", "leaky_relu_test.TestLeakyRelu._get_op", "leaky_relu_test.TestLeakyRelu._get_inputs", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run"], "leaky_relu_test.TestLeakyRelu.test_leaky_relu_reference_check": ["numpy.random.seed", "leaky_relu_test.TestLeakyRelu._get_op", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "leaky_relu_test.TestLeakyRelu._get_inputs", "hypothesis.assume"], "leaky_relu_test.TestLeakyRelu.test_leaky_relu_reference_check.ref": [], "leaky_relu_test.TestLeakyRelu.test_leaky_relu_device_check": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.seed", "leaky_relu_test.TestLeakyRelu._get_op", "leaky_relu_test.TestLeakyRelu._get_inputs"], "leaky_relu_test.TestLeakyRelu.test_leaky_relu_model_helper_helper": ["caffe2.python.model_helper.ModelHelper", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.random.rand", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_net", "caffe2.python.utils.NCHW2NHWC"], "learning_rate_adaption_op_test": [], "learning_rate_adaption_op_test.TestLearningRateAdaption": ["caffe2.python.hypothesis_test_util.tensors", "hypothesis.settings", "hypothesis.strategies.floats", "hypothesis.given"], "learning_rate_adaption_op_test.TestLearningRateAdaption.test_learning_rate_adaption_op_normalization": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "learning_rate_adaption_op_test.TestLearningRateAdaption.test_learning_rate_adaption_op_normalization.ref": ["numpy.dot", "numpy.maximum", "numpy.linalg.norm", "<builtin>.float"], "learning_rate_adaption_op_test.TestLearningRateAdaption.test_learning_rate_adaption_op_without_normalization": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "learning_rate_adaption_op_test.TestLearningRateAdaption.test_learning_rate_adaption_op_without_normalization.ref": ["numpy.dot"], "learning_rate_op_test": ["unittest.main"], "learning_rate_op_test.TestLearningRate": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.settings"], "learning_rate_op_test.TestLearningRate.test_alter_learning_rate_op": ["numpy.random.randint", "<builtin>.int", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.float", "numpy.random.random"], "learning_rate_op_test.TestLearningRate.test_alter_learning_rate_op.ref": ["<builtin>.float", "numpy.array"], "learning_rate_op_test.TestLearningRate.test_hill_learning_rate_op": ["numpy.random.randint", "<builtin>.int", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.float", "numpy.random.random"], "learning_rate_op_test.TestLearningRate.test_hill_learning_rate_op.ref": ["<builtin>.float", "numpy.array", "math.pow", "<builtin>.max"], "learning_rate_op_test.TestLearningRate.test_slope_learning_rate_op": ["numpy.random.randint", "<builtin>.int", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.float", "numpy.random.random"], "learning_rate_op_test.TestLearningRate.test_slope_learning_rate_op.ref": ["<builtin>.float", "numpy.array", "<builtin>.max"], "learning_rate_op_test.TestLearningRate.test_gate_learningrate": ["numpy.random.randint", "<builtin>.int", "numpy.random.uniform", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.float"], "learning_rate_op_test.TestLearningRate.test_gate_learningrate.ref": ["<builtin>.float", "numpy.array"], "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op": ["numpy.random.randint", "numpy.random.uniform", "caffe2.python.core.CreateOperator", "functools.partial", "numpy.random.seed", "copy.deepcopy", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.range", "numpy.random.random", "numpy.asarray"], "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.step_lr": ["math.pow"], "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.exp_lr": ["math.pow"], "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.fixed_lr": [], "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.one_policy_check_ref": ["<builtin>.int", "numpy.array", "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.exp_lr"], "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.all_sub_policy_check_ref": ["learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.step_lr", "numpy.array", "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.exp_lr", "learning_rate_op_test.TestLearningRate.test_composite_learning_rate_op.fixed_lr"], "lengths_pad_op_test": [], "lengths_pad_op_test.TestLengthsPadOp": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers", "hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.lengths_tensor"], "lengths_pad_op_test.TestLengthsPadOp.test_lengths_pad": ["numpy.max", "<builtin>.max", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.len", "caffe2.python.core.CreateOperator"], "lengths_pad_op_test.TestLengthsPadOp.test_lengths_pad.lengths_pad_op": ["numpy.ndarray", "<builtin>.len", "<builtin>.range"], "lengths_reducer_fused_nbit_rowwise_ops_test": [], "lengths_reducer_fused_nbit_rowwise_ops_test.TestLengthsReducerOpsFusedNBitRowwise": ["hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.given"], "lengths_reducer_fused_nbit_rowwise_ops_test.TestLengthsReducerOpsFusedNBitRowwise.test_sparse_lengths_sum": ["numpy.zeros", "<builtin>.len", "numpy.clip", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_almost_equal", "numpy.random.rand", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "numpy.random.randint", "<builtin>.str", "caffe2.python.core.Net", "numpy.ones", "caffe2.python.workspace.GlobalInit", "numpy.random.uniform", "numpy.random.seed", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "lengths_reducer_fused_nbit_rowwise_ops_test.TestLengthsReducerOpsFusedNBitRowwise.test_sparse_lengths_mean": ["numpy.zeros", "<builtin>.len", "numpy.clip", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_almost_equal", "numpy.random.rand", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "numpy.random.randint", "<builtin>.str", "caffe2.python.core.Net", "numpy.ones", "caffe2.python.workspace.GlobalInit", "numpy.random.seed", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "lengths_reducer_fused_nbit_rowwise_ops_test.TestLengthsReducerOpsFusedNBitRowwise.test_sparse_lengths_sum_rowwise_sparse": ["numpy.zeros", "<builtin>.len", "numpy.clip", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "numpy.random.randint", "<builtin>.range", "<builtin>.str", "caffe2.python.core.Net", "numpy.ones", "numpy.random.uniform", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "lengths_reducer_fused_nbit_rowwise_ops_test.TestLengthsReducerOpsFusedNBitRowwise.test_sparse_lengths_mean_rowwise_sparse_with_skipped_pruning": ["numpy.zeros", "<builtin>.len", "numpy.clip", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_almost_equal", "numpy.random.rand", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "numpy.random.randint", "<builtin>.str", "caffe2.python.core.Net", "numpy.ones", "caffe2.python.workspace.GlobalInit", "numpy.array", "numpy.random.seed", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "lengths_tile_op_test": [], "lengths_tile_op_test.TestLengthsTileOp.<lambda1>": ["hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.arrays", "hypothesis.strategies.tuples"], "lengths_tile_op_test.TestLengthsTileOp": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers"], "lengths_tile_op_test.TestLengthsTileOp.test_lengths_tile": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "lengths_tile_op_test.TestLengthsTileOp.test_lengths_tile.lengths_tile_op": ["<builtin>.zip", "numpy.concatenate"], "lengths_top_k_ops_test": [], "lengths_top_k_ops_test.TestLengthsTopKOps": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers", "hypothesis.given"], "lengths_top_k_ops_test.TestLengthsTopKOps.test_lengths_top_k_op": ["<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "lengths_top_k_ops_test.TestLengthsTopKOps.test_lengths_top_k_op.lengths_top_k": ["numpy.array", "<builtin>.range"], "lengths_top_k_ops_test.TestLengthsTopKOps.test_lengths_top_k_empty_op": ["numpy.zeros", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "lengths_top_k_ops_test.TestLengthsTopKOps.test_lengths_top_k_empty_op.lengths_top_k": ["numpy.zeros", "numpy.ones"], "length_split_op_test": ["unittest.main"], "length_split_op_test.TestLengthSplitOperator._length_split_op_ref": ["numpy.array", "<builtin>.range"], "length_split_op_test.TestLengthSplitOperator": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers"], "length_split_op_test.TestLengthSplitOperator.test_length_split_edge": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "length_split_op_test.TestLengthSplitOperator.test_length_split_arg": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "length_split_op_test.TestLengthSplitOperator.test_length_split_arg.<lambda1>": ["length_split_op_test.TestLengthSplitOperator._length_split_op_ref"], "length_split_op_test.TestLengthSplitOperator.test_length_split_override_arg": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "length_split_op_test.TestLengthSplitOperator.test_length_split_even_divide": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "numpy.random.randint"], "length_split_op_test.TestLengthSplitOperator.test_length_split_random": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "numpy.random.randint"], "listwise_l2r_operator_test": [], "listwise_l2r_operator_test.TestListwiseL2rOps.ref_lambda_rank_loss": ["numpy.zeros", "<builtin>.range", "<builtin>.len", "listwise_l2r_operator_test.TestListwiseL2rOps.ref_lambda_rank_loss.sigm", "numpy.abs", "<builtin>.max", "listwise_l2r_operator_test.TestListwiseL2rOps.ref_lambda_rank_loss.get_discounts", "<builtin>.sum", "numpy.sum", "listwise_l2r_operator_test.TestListwiseL2rOps.ref_lambda_rank_loss.log_sigm"], "listwise_l2r_operator_test.TestListwiseL2rOps.ref_lambda_rank_loss.get_discounts": ["numpy.argsort", "<builtin>.range", "numpy.log2"], "listwise_l2r_operator_test.TestListwiseL2rOps.ref_lambda_rank_loss.sigm": ["numpy.exp"], "listwise_l2r_operator_test.TestListwiseL2rOps.ref_lambda_rank_loss.log_sigm": ["numpy.exp", "numpy.log"], "listwise_l2r_operator_test.TestListwiseL2rOps": ["hypothesis.strategies.integers", "hypothesis.given"], "listwise_l2r_operator_test.TestListwiseL2rOps.test_lambda_rank_loss": ["numpy.random.random", "caffe2.python.core.CreateOperator", "numpy.random.rand", "numpy.append", "numpy.testing.assert_allclose", "<builtin>.range", "caffe2.python.workspace.RunOperatorOnce", "numpy.repeat", "numpy.random.randint", "numpy.empty", "listwise_l2r_operator_test.TestListwiseL2rOps.ref_lambda_rank_loss"], "load_save_test": ["caffe2.python.workspace.NumGpuDevices", "unittest.main"], "load_save_test.TestLoadSaveBase.__init__": ["<builtin>.super"], "load_save_test.TestLoadSaveBase": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "load_save_test.TestLoadSaveBase.load_save": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "<builtin>.enumerate", "<builtin>.range", "hypothesis.assume", "caffe2.python.workspace.Blobs", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "caffe2.python.test_util.TestCase.assertEqual", "numpy.random.permutation", "load_save_test.TestLoadSaveBase.load_save._LoadTest", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.HasBlob", "caffe2.python.core.IsGPUDeviceType"], "caffe2.python.test_util.TestCase.make_tempdir": [], "load_save_test.TestLoadSaveBase.load_save._LoadTest": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.proto.caffe2_pb2.BlobProto", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.IsGPUDeviceType", "numpy.testing.assert_array_equal", "caffe2.python.workspace.SerializeBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "<builtin>.enumerate"], "caffe2.proto.caffe2_pb2.BlobProto": [], "load_save_test.TestLoadSaveBase.saveFile": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "<builtin>.range", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "<builtin>.str", "numpy.random.permutation", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.HasBlob", "<builtin>.enumerate"], "load_save_test.TestLoadSave.testLoadSave": ["load_save_test.TestLoadSaveBase.load_save"], "load_save_test.TestLoadSave.testRepeatedArgs": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "<builtin>.range", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "numpy.random.permutation", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.HasBlob", "<builtin>.enumerate"], "load_save_test.TestLoadSave.testLoadExcessblobs": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "<builtin>.range", "load_save_test.TestLoadSaveBase.saveFile", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "caffe2.python.workspace.ResetWorkspace"], "load_save_test.TestLoadSave.testTruncatedFile": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "<builtin>.range", "<builtin>.open", "load_save_test.TestLoadSaveBase.saveFile", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir"], "load_save_test.TestLoadSave.testBlobNameOverrides": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "<builtin>.range", "caffe2.python.workspace.Blobs", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.test_util.TestCase.assertEqual", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "caffe2.python.core.CreateOperator", "numpy.random.permutation", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.HasBlob", "<builtin>.enumerate"], "load_save_test.TestLoadSave.testMissingFile": ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "<builtin>.print"], "load_save_test.TestLoadSave.testLoadMultipleFilesGivenSourceBlobNames": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "<builtin>.range", "caffe2.python.workspace.Blobs", "load_save_test.TestLoadSaveBase.saveFile", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.ResetWorkspace", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob"], "load_save_test.TestLoadSave.testLoadAllMultipleFiles": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.workspace.Blobs", "<builtin>.range", "load_save_test.TestLoadSaveBase.saveFile", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.test_util.TestCase.make_tempdir", "<builtin>.str", "caffe2.python.workspace.ResetWorkspace", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob"], "load_save_test.TestLoadSave.testLoadAllMultipleFilesWithSameKey": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.workspace.Blobs", "load_save_test.TestLoadSaveBase.saveFile", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.make_tempdir", "caffe2.python.workspace.ResetWorkspace"], "load_save_test.TestLoadSave.testLoadRepeatedFiles": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.workspace.Blobs", "<builtin>.range", "load_save_test.TestLoadSaveBase.saveFile", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "caffe2.python.workspace.ResetWorkspace"], "load_save_test.TestLoadSave.testLoadWithDBOptions": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.workspace.Blobs", "<builtin>.range", "load_save_test.TestLoadSaveBase.saveFile", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "caffe2.python.workspace.ResetWorkspace"], "load_save_test.TestLoadSave.create_test_blobs": ["load_save_test.TestLoadSave.create_test_blobs.float_array", "caffe2.python.workspace.FeedBlob", "load_save_test.TestLoadSave.create_test_blobs.int_array"], "load_save_test.TestLoadSave.create_test_blobs.int_array": ["numpy.iinfo", "numpy.random.randint"], "load_save_test.TestLoadSave.create_test_blobs.float_array": ["numpy.random.random_sample"], "load_save_test.TestLoadSave.load_blobs": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "caffe2.python.workspace.Blobs", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.ResetWorkspace"], "load_save_test.TestLoadSave.load_and_check_blobs": ["load_save_test.TestLoadSave.load_blobs", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_array_equal"], "load_save_test.TestLoadSave._read_minidb_entries": ["<builtin>.Exception", "<builtin>.len", "struct.Struct", "typing.NamedTuple.__init__"], "struct.Struct": [], "load_save_test.TestLoadSave._read_chunk_info": ["load_save_test.TestLoadSave._read_minidb_entries", "<builtin>.len", "typing.NamedTuple.key.rsplit"], "typing.NamedTuple.key.rsplit": [], "load_save_test.TestLoadSave._test_save_with_chunk_size": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "load_save_test.TestLoadSave.create_test_blobs", "load_save_test.TestLoadSave.load_and_check_blobs", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "pathlib.Path", "load_save_test.TestLoadSave._read_chunk_info", "caffe2.python.test_util.TestCase.assertEqual"], "load_save_test.TestLoadSave.testSaveWithChunkSize": ["load_save_test.TestLoadSave._test_save_with_chunk_size", "math.ceil"], "load_save_test.TestLoadSave.testSaveWithDefaultChunkSize": ["load_save_test.TestLoadSave._test_save_with_chunk_size"], "load_save_test.TestLoadSave.testSaveWithNoChunking": ["load_save_test.TestLoadSave._test_save_with_chunk_size"], "load_save_test.TestLoadSave.testSaveWithOptions": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "load_save_test.TestLoadSave.create_test_blobs", "load_save_test.TestLoadSave.load_and_check_blobs", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "pathlib.Path", "load_save_test.TestLoadSave._read_chunk_info", "caffe2.proto.caffe2_pb2.SerializationOptions", "caffe2.proto.caffe2_pb2.BlobSerializationOptions", "caffe2.python.test_util.TestCase.assertEqual", "math.ceil"], "caffe2.proto.caffe2_pb2.BlobSerializationOptions": [], "caffe2.proto.caffe2_pb2.SerializationOptions": [], "load_save_test.TestLoadSave.testSaveWithDBOptions": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "load_save_test.TestLoadSave.create_test_blobs", "load_save_test.TestLoadSave.load_and_check_blobs", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "pathlib.Path", "load_save_test.TestLoadSave._read_chunk_info", "caffe2.python.test_util.TestCase.assertEqual", "math.ceil"], "load_save_test.TestLoadSave.testSaveFloatToBfloat16": ["caffe2.python.workspace.RunOperatorOnce", "<builtin>.len", "load_save_test.TestLoadSave.load_blobs", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertTrue", "<builtin>.str", "caffe2.python.test_util.TestCase.make_tempdir", "pathlib.Path", "numpy.random.random_sample", "caffe2.proto.caffe2_pb2.SerializationOptions", "caffe2.proto.caffe2_pb2.BlobSerializationOptions", "load_save_test.TestLoadSave._read_chunk_info", "caffe2.python.workspace.FeedBlob", "caffe2.python.test_util.TestCase.assertLess", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_array_almost_equal"], "caffe2.python.test_util.TestCase.assertLess": [], "load_save_test.TestLoadSave.testEstimateBlobSizes": ["pathlib.Path", "caffe2.python.test_util.TestCase.assertLess", "caffe2.proto.caffe2_pb2.BlobSerializationOptions", "<builtin>.len", "<builtin>.sum", "<builtin>.set", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.proto.caffe2_pb2.SerializationOptions", "caffe2.python.workspace.FeedBlob", "<builtin>.abs", "caffe2.python.workspace.RunOperatorOnce", "load_save_test.TestLoadSave._read_chunk_info", "<builtin>.list", "<builtin>.print", "load_save_test.TestLoadSave.testEstimateBlobSizes.check_expected_blob_size", "caffe2.python.core.CreateOperator", "numpy.random.randint", "caffe2.python.test_util.TestCase.make_tempdir", "<builtin>.str", "numpy.random.random_sample", "caffe2.python.workspace.FetchBlob", "<builtin>.enumerate"], "load_save_test.TestLoadSave.testEstimateBlobSizes.check_expected_blob_size": ["<builtin>.len", "caffe2.python.test_util.TestCase.assertEqual"], "locally_connected_op_test": [], "locally_connected_op_test.TestLocallyConnectedOp": ["hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_2d": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.len", "caffe2.python.core.CreateOperator", "<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "hypothesis.assume", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.rand"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_2d.lc_2d_nchw": ["numpy.zeros", "locally_connected_op_test.TestLocallyConnectedOp.test_lc_2d.lc_2d_nchw.conv", "<builtin>.range"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_2d.lc_2d_nchw.conv": ["<builtin>.range"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_2d.lc_2d_nhwc": ["caffe2.python.utils.NHWC2NCHW", "numpy.transpose", "caffe2.python.utils.NCHW2NHWC", "locally_connected_op_test.TestLocallyConnectedOp.test_lc_2d.lc_2d_nchw"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_1d": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.len", "caffe2.python.core.CreateOperator", "<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.rand"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_1d.lc_1d_nchw": ["numpy.zeros", "locally_connected_op_test.TestLocallyConnectedOp.test_lc_1d.lc_1d_nchw.conv", "<builtin>.range"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_1d.lc_1d_nchw.conv": ["<builtin>.range"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_3d": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.len", "caffe2.python.core.CreateOperator", "<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.rand"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_3d.lc_3d_nchw": ["numpy.zeros", "locally_connected_op_test.TestLocallyConnectedOp.test_lc_3d.lc_3d_nchw.conv", "<builtin>.range"], "locally_connected_op_test.TestLocallyConnectedOp.test_lc_3d.lc_3d_nchw.conv": ["<builtin>.range"], "loss_ops_test": [], "loss_ops_test.TestLossOps": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers"], "loss_ops_test.TestLossOps.test_averaged_loss": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "loss_ops_test.TestLossOps.test_averaged_loss.avg_op": ["numpy.mean"], "lpnorm_op_test": [], "lpnorm_op_test.LpnormTest": ["hypothesis.settings", "caffe2.python.hypothesis_test_util.tensors", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.given", "hypothesis.strategies.integers"], "lpnorm_op_test.LpnormTest.test_Lp_Norm": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.testing.assert_allclose", "numpy.sign", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.linalg.norm"], "lpnorm_op_test.LpnormTest.test_lpnorm_shape_inference": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "<builtin>.list", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "<builtin>.bool", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.InferShapesAndTypes"], "map_ops_test": ["unittest.main"], "map_ops_test.TestMap.test_create_map": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.HasBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.RunOperatorOnce", "itertools.product"], "map_ops_test.TestMap.test_map": ["map_ops_test.TestMap.test_map.test_map_func"], "map_ops_test.TestMap.test_map.test_map_func": ["os.path.join", "caffe2.python.workspace.FetchBlob", "tempfile.mkdtemp", "caffe2.python.core.Net", "<builtin>.zip", "caffe2.python.workspace.ResetWorkspace", "<builtin>.set", "numpy.asarray", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce"], "margin_ranking_criterion_op_test": ["unittest.main"], "margin_ranking_criterion_op_test.TestMarginRankingCriterion": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.floats", "hypothesis.strategies.integers"], "margin_ranking_criterion_op_test.TestMarginRankingCriterion.test_margin_ranking_criterion": ["numpy.random.choice", "numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.abs"], "margin_ranking_criterion_op_test.TestMarginRankingCriterion.test_margin_ranking_criterion.ref_cec": ["numpy.maximum"], "math_ops_test": ["unittest.main"], "math_ops_test.TestMathOps": ["hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.settings", "hypothesis.given"], "math_ops_test.TestMathOps.test_elementwise_power": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.abs"], "math_ops_test.TestMathOps.test_elementwise_power.powf": [], "math_ops_test.TestMathOps.test_elementwise_power.powf_grad": [], "math_ops_test.TestMathOps.test_sign": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "math_ops_test.TestMathOps.test_sign.signf": ["numpy.sign"], "matmul_op_test": ["unittest.main"], "matmul_op_test.TestMatMul": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.settings"], "matmul_op_test.TestMatMul.test_matmul": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "matmul_op_test.TestMatMul.test_matmul.matmul_ref": [], "matmul_op_test.TestMatMul.test_matmul_axis": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "matmul_op_test.TestMatMul.test_matmul_axis.size_to_dim": ["<builtin>.range"], "matmul_op_test.TestMatMul.test_matmul_axis.size_from_dim": ["<builtin>.range"], "matmul_op_test.TestMatMul.test_matmul_axis.reshape": ["matmul_op_test.TestMatMul.test_matmul_axis.size_to_dim", "matmul_op_test.TestMatMul.test_matmul_axis.size_from_dim"], "matmul_op_test.TestMatMul.test_matmul_axis.canonical_axis": [], "matmul_op_test.TestMatMul.test_matmul_axis.matmul_ref": ["matmul_op_test.TestMatMul.test_matmul_axis.reshape", "matmul_op_test.TestMatMul.test_matmul_axis.canonical_axis"], "matmul_op_test.TestBatchMatMul": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.settings"], "matmul_op_test.TestBatchMatMul.test_batch_matmul": ["caffe2.python.core.CreateOperator", "caffe2.python.core.IsGPUDeviceType", "hypothesis.assume", "numpy.random.rand", "matmul_op_test.TestBatchMatMul.test_batch_matmul.relax_fp16_check", "numpy.random.randint"], "matmul_op_test.TestBatchMatMul.test_batch_matmul.matmul_ref": ["numpy.matmul"], "matmul_op_test.TestBatchMatMul.test_batch_matmul.relax_fp16_check": ["inspect.getargspec", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "matmul_op_test.TestBatchMatMul._test_batch_matmul_with_broadcast_common": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "matmul_op_test.TestBatchMatMul._test_batch_matmul_with_broadcast_common.matmul_ref": ["numpy.matmul"], "matmul_op_test.TestBatchMatMul.test_numpy_batch_matmul": ["<builtin>.max", "matmul_op_test.TestBatchMatMul._test_batch_matmul_with_broadcast_common", "<builtin>.len", "numpy.random.rand", "numpy.random.randint"], "matmul_op_test.TestBatchMatMul.test_numpy_batch_matmul_1d": ["numpy.random.rand", "matmul_op_test.TestBatchMatMul._test_batch_matmul_with_broadcast_common"], "matmul_op_test.TestBatchMatMul.test_numpy_batch_matmul_1d_2d": ["numpy.random.rand", "matmul_op_test.TestBatchMatMul._test_batch_matmul_with_broadcast_common"], "matmul_op_test.TestBatchMatMul.test_numpy_batch_matmul_2d_1d": ["numpy.random.rand", "matmul_op_test.TestBatchMatMul._test_batch_matmul_with_broadcast_common"], "mean_op_test": ["unittest.main"], "mean_op_test.TestMean": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "mean_op_test.TestMean.test_mean": ["numpy.random.randn", "<builtin>.str", "numpy.random.seed", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.range"], "mean_op_test.TestMean.test_mean.mean_ref": ["numpy.mean"], "merge_id_lists_op_test": ["hypothesis.strategies.composite"], "merge_id_lists_op_test.id_list_batch": ["<builtin>.len", "<builtin>.range", "hypothesis.extra.numpy.arrays", "caffe2.python.hypothesis_test_util.lengths", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from"], "caffe2.python.hypothesis_test_util.lengths": [], "merge_id_lists_op_test.merge_id_lists_ref": ["<builtin>.int", "<builtin>.len", "merge_id_lists_op_test.merge_id_lists_ref.merge_arrays", "<builtin>.range", "numpy.insert", "numpy.array", "numpy.concatenate", "numpy.cumsum"], "numpy.insert": [], "merge_id_lists_op_test.merge_id_lists_ref.merge_arrays": ["numpy.unique", "numpy.sort", "numpy.concatenate", "<builtin>.range"], "merge_id_lists_op_test.TestMergeIdListsOp.test_merge_id_lists_ref": ["numpy.array", "merge_id_lists_op_test.merge_id_lists_ref", "numpy.testing.assert_array_equal"], "merge_id_lists_op_test.TestMergeIdListsOp": ["caffe2.python.serialized_test.serialized_test_util.given", "merge_id_lists_op_test.id_list_batch"], "merge_id_lists_op_test.TestMergeIdListsOp.test_merge_id_lists_op": ["<builtin>.int", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.len", "<builtin>.range", "caffe2.python.core.CreateOperator"], "mkl_packed_fc_op_test": ["unittest.main"], "mkl_packed_fc_op_test.PackedFCTest": ["unittest.skipIf", "hypothesis.given", "hypothesis.strategies.integers", "caffe2.python.core.C.builtin_cpu_supports_avx2"], "caffe2.python.core.C.builtin_cpu_supports_avx2": [], "mkl_packed_fc_op_test.PackedFCTest.test_packed_fc": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.random.seed", "caffe2.python.core.CreateOperator"], "mkl_packed_fc_op_test.PackedFCTest.test_packed_fc.ref": ["numpy.dot"], "mkl_packed_fc_op_test.PackedFCTest.test_packed_fc_axis": ["numpy.random.randn", "numpy.prod", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.random.seed"], "mkl_packed_fc_op_test.PackedFCTest.test_packed_fc_axis.ref": ["<builtin>.list", "numpy.dot", "<builtin>.int"], "mod_op_test": ["hypothesis.strategies.composite", "unittest.main"], "mod_op_test._data": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.integers", "numpy.iinfo"], "mod_op_test.TestMod": ["hypothesis.strategies.integers", "hypothesis.settings", "mod_op_test._data", "hypothesis.given", "numpy.iinfo", "hypothesis.strategies.booleans"], "mod_op_test.TestMod.test_mod": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "mod_op_test.TestMod.test_mod.ref": ["numpy.fmod"], "numpy.fmod": [], "moments_op_test": [], "moments_op_test.TestMomentsOp.run_moments_test": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "moments_op_test.TestMomentsOp.run_moments_test.ref": ["numpy.mean", "numpy.var", "<builtin>.tuple"], "moments_op_test.TestMomentsOp": ["hypothesis.strategies.booleans", "caffe2.python.serialized_test.serialized_test_util.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.integers"], "moments_op_test.TestMomentsOp.test_moments": ["itertools.combinations", "moments_op_test.TestMomentsOp.run_moments_test", "<builtin>.len", "<builtin>.range"], "momentum_sgd_test": ["unittest.main"], "momentum_sgd_test.TestMomentumSGD": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.strategies.booleans", "unittest.skip", "unittest.skipIf", "hypothesis.given", "hypothesis.strategies.data", "hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.tensors"], "momentum_sgd_test.TestMomentumSGD.test_momentum_sgd": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "<builtin>.int"], "momentum_sgd_test.TestMomentumSGD.test_momentum_sgd.momentum_sgd": [], "momentum_sgd_test.TestMomentumSGD.test_sparse_momentum_sgd": ["numpy.abs", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.sampled_from", "numpy.array_equal", "hypothesis.assume", "caffe2.python.core.CreateOperator", "numpy.asarray", "numpy.unique", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.sort", "numpy.arange", "<builtin>.int"], "momentum_sgd_test.TestMomentumSGD.test_sparse_momentum_sgd.momentum_sgd": [], "momentum_sgd_test.TestMomentumSGD.test_sparse_momentum_sgd.sparse": ["momentum_sgd_test.TestMomentumSGD.test_sparse_momentum_sgd.momentum_sgd"], "momentum_sgd_test.TestMomentumSGD.test_fp16momentum_sgd": ["caffe2.python.workspace.GetDeviceProperties", "<builtin>.print", "numpy.random.rand", "hypothesis.assume", "caffe2.python.core.IsGPUDeviceType", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.int"], "caffe2.python.workspace.GetDeviceProperties": [], "momentum_sgd_test.TestMomentumSGD.test_fp16momentum_sgd.momentum_sgd": [], "mpi_test": ["caffe2.python.dyndep.InitOpsLibrary", "mpi_test.SetupMPI", "unittest.main"], "mpi_test.SetupMPI": ["mpi4py.MPI.COMM_WORLD.Get_rank", "mpi4py.MPI.COMM_WORLD.Get_size", "caffe2.python.core.IsOperatorWithEngine"], "mpi4py.MPI.COMM_WORLD.Get_rank": [], "mpi4py.MPI.COMM_WORLD.Get_size": [], "mpi_test.TestMPI": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.tensor"], "mpi_test.TestMPI.test_broadcast": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "mpi_test.TestMPI.test_reduce": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "mpi_test.TestMPI.test_allreduce": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "mpi_test.TestMPI.test_sendrecv": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "<builtin>.range", "caffe2.python.workspace.ResetWorkspace", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce"], "mul_gradient_benchmark": ["caffe2.python.core.GlobalInit", "argparse.ArgumentParser", "mul_gradient_benchmark.benchmark_mul_gradient"], "mul_gradient_benchmark.benchmark_mul_gradient": ["caffe2.python.workspace.BenchmarkNet", "numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.CreateNet", "caffe2.python.core.Net"], "negate_gradient_op_test": [], "negate_gradient_op_test.TestNegateGradient": ["hypothesis.settings", "hypothesis.strategies.lists", "hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.tensor"], "negate_gradient_op_test.TestNegateGradient.test_forward": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "negate_gradient_op_test.TestNegateGradient.test_forward.neg_grad_ref": [], "negate_gradient_op_test.TestNegateGradient.test_grad": ["caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_array_equal", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlobs", "numpy.random.random_sample", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob"], "ngram_ops_test": [], "ngram_ops_test.TestNGramOps": ["hypothesis.given", "hypothesis.strategies.floats", "hypothesis.strategies.integers"], "ngram_ops_test.TestNGramOps.test_ngram_from_categorical_op": ["numpy.random.randint", "numpy.random.seed", "caffe2.python.workspace.ResetWorkspace", "<builtin>.int", "caffe2.python.core.CreateOperator", "numpy.array", "numpy.random.choice", "numpy.prod", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_array_equal", "numpy.random.rand", "<builtin>.max", "<builtin>.range", "<builtin>.enumerate"], "normalize_op_test": [], "normalize_op_test.TestNormalizeOp": ["hypothesis.given", "hypothesis.settings", "caffe2.python.hypothesis_test_util.floats", "caffe2.python.hypothesis_test_util.tensor"], "normalize_op_test.TestNormalizeOp.test_normalize": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "functools.partial", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "copy.copy"], "normalize_op_test.TestNormalizeOp.test_normalize.ref_normalize": ["numpy.maximum", "numpy.sqrt"], "normalize_op_test.TestNormalizeOp.test_normalize_L1": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "functools.partial", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "<builtin>.print"], "normalize_op_test.TestNormalizeOp.test_normalize_L1.ref": ["<builtin>.abs"], "numpy_tile_op_test": ["unittest.main"], "numpy_tile_op_test.TestNumpyTile": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.settings"], "numpy_tile_op_test.TestNumpyTile.test_numpy_tile": ["numpy.random.randint", "numpy.random.randn", "caffe2.python.core.CreateOperator", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "numpy_tile_op_test.TestNumpyTile.test_numpy_tile.tile_ref": ["numpy.tile"], "numpy_tile_op_test.TestNumpyTile.test_numpy_tile_zero_dim": ["numpy.random.randint", "numpy.random.randn", "caffe2.python.core.CreateOperator", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "numpy_tile_op_test.TestNumpyTile.test_numpy_tile_zero_dim.tile_ref": ["numpy.tile"], "one_hot_ops_test": ["unittest.main"], "one_hot_ops_test._one_hots": ["hypothesis.strategies.lists", "hypothesis.strategies.integers", "hypothesis.strategies.tuples"], "one_hot_ops_test._one_hots.<lambda1>": ["hypothesis.strategies.lists", "hypothesis.strategies.just", "hypothesis.strategies.integers", "hypothesis.strategies.tuples", "<builtin>.sum"], "one_hot_ops_test.TestOneHotOps": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.settings", "hypothesis.strategies.integers", "one_hot_ops_test._one_hots", "hypothesis.given", "caffe2.python.hypothesis_test_util.tensor"], "one_hot_ops_test.TestOneHotOps.test_batch_one_hot": ["numpy.array", "caffe2.python.core.CreateOperator", "numpy.unique", "<builtin>.range", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "one_hot_ops_test.TestOneHotOps.test_batch_one_hot.ref": ["numpy.zeros", "<builtin>.range", "<builtin>.enumerate"], "one_hot_ops_test.TestOneHotOps.test_batch_bucketized_one_hot": ["numpy.random.randn", "numpy.array", "numpy.random.randint", "numpy.append", "caffe2.python.core.CreateOperator", "<builtin>.range", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "one_hot_ops_test.TestOneHotOps.test_batch_bucketized_one_hot.ref": ["numpy.add", "numpy.floor_divide", "numpy.zeros", "<builtin>.range", "numpy.digitize", "<builtin>.enumerate"], "numpy.floor_divide": [], "one_hot_ops_test.TestOneHotOps.test_one_hot": ["numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.core.DeviceOption", "<builtin>.max", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "one_hot_ops_test.TestOneHotOps.test_one_hot.one_hot_ref": ["<builtin>.len", "numpy.zeros", "<builtin>.enumerate"], "one_hot_ops_test.TestOneHotOps.test_segment_one_hot": ["caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "one_hot_ops_test.TestOneHotOps.test_segment_one_hot.segment_one_hot_ref": ["<builtin>.len", "numpy.zeros", "<builtin>.enumerate"], "one_hot_ops_test.TestOneHotOps.test_batch_bucket_one_hot_shape_inference": ["<builtin>.list", "numpy.random.randn", "caffe2.python.workspace.InferShapesAndTypes", "numpy.array", "caffe2.python.workspace.RunNetOnce", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual", "numpy.random.randint", "numpy.append", "caffe2.python.core.Net", "<builtin>.range", "numpy.random.seed", "caffe2.python.workspace.FeedBlob"], "onnx_while_test": ["unittest.main"], "onnx_while_test.TestONNXWhile": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.given"], "onnx_while_test.TestONNXWhile.test_onnx_while_fibb": ["numpy.random.seed", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array"], "onnx_while_test.TestONNXWhile.test_onnx_while_fibb.ref": ["numpy.array", "<builtin>.range"], "order_switch_test": [], "order_switch_test.OrderSwitchOpsTest": ["hypothesis.settings", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.sampled_from", "hypothesis.given"], "order_switch_test.OrderSwitchOpsTest.test_nchw2nhwc": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "order_switch_test.OrderSwitchOpsTest.test_nchw2nhwc.nchw2nhwc_ref": ["caffe2.python.utils.NCHW2NHWC"], "order_switch_test.OrderSwitchOpsTest.test_nhwc2nchw": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "order_switch_test.OrderSwitchOpsTest.test_nhwc2nchw.nhwc2nchw_ref": ["caffe2.python.utils.NHWC2NCHW"], "pack_ops_test": ["unittest.main"], "pack_ops_test.TestTensorPackOps.pack_segments_ref": [], "pack_ops_test.TestTensorPackOps.pack_segments_ref.pack_segments_ref": ["numpy.size", "numpy.ones", "numpy.max", "<builtin>.str", "numpy.pad", "<builtin>.range"], "pack_ops_test.TestTensorPackOps": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.settings"], "pack_ops_test.TestTensorPackOps.test_pack_with_max_length_ops": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "numpy.zeros", "numpy.cumsum", "caffe2.python.core.CreateOperator", "time.time", "numpy.arange", "<builtin>.print", "caffe2.python.core.DeviceScope", "pack_ops_test.TestTensorPackOps.test_pack_with_max_length_ops._cal_unpacked_data", "pack_ops_test.TestTensorPackOps.pack_segments_ref", "caffe2.python.workspace.FeedBlob", "numpy.sum", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.range"], "pack_ops_test.TestTensorPackOps.test_pack_with_max_length_ops._cal_unpacked_data": ["numpy.concatenate", "<builtin>.enumerate"], "pack_ops_test.TestTensorPackOps.test_pack_ops": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "numpy.zeros", "numpy.cumsum", "caffe2.python.core.CreateOperator", "time.time", "numpy.arange", "<builtin>.print", "caffe2.python.core.DeviceScope", "pack_ops_test.TestTensorPackOps.pack_segments_ref", "caffe2.python.workspace.FeedBlob", "numpy.sum", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.range"], "pack_ops_test.TestTensorPackOps.test_pack_ops_str": ["caffe2.python.workspace.RunOperatorOnce", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "pack_ops_test.TestTensorPackOps.test_pad_minf": ["caffe2.python.workspace.RunOperatorOnce", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "pack_ops_test.TestTensorPackOps.test_pad_no_minf": ["caffe2.python.workspace.RunOperatorOnce", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "pack_ops_test.TestTensorPackOps.test_presence_mask": ["caffe2.python.workspace.RunOperatorOnce", "numpy.array", "numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEquals", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual", "pack_ops_test.TestTensorPackOps.pack_segments_ref", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEquals": [], "pack_ops_test.TestTensorPackOps.test_presence_mask_empty": ["caffe2.python.workspace.RunOperatorOnce", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEquals", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob"], "pack_ops_test.TestTensorPackOps.test_out_of_bounds": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRunOpRaises", "caffe2.python.core.CreateOperator", "numpy.array"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRunOpRaises": [], "pack_ops_test.TestTensorPackOps.test_under_bounds": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRunOpRaises", "caffe2.python.core.CreateOperator", "numpy.array"], "pack_rnn_sequence_op_test": ["unittest.main"], "pack_rnn_sequence_op_test.TestPackRNNSequenceOperator": ["caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers"], "pack_rnn_sequence_op_test.TestPackRNNSequenceOperator.test_pack_rnn_seqence": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator", "<builtin>.sum", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "pack_rnn_sequence_op_test.TestPackRNNSequenceOperator.test_pack_rnn_seqence.pack_op": ["<builtin>.range", "<builtin>.max", "numpy.zeros", "<builtin>.any"], "pack_rnn_sequence_op_test.TestPackRNNSequenceOperator.test_unpack_rnn_seqence": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "<builtin>.max", "caffe2.python.core.CreateOperator", "<builtin>.any", "numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "pack_rnn_sequence_op_test.TestPackRNNSequenceOperator.test_unpack_rnn_seqence.unpack_op": ["<builtin>.range", "numpy.zeros", "<builtin>.sum"], "pad_test": ["unittest.main"], "pad_test.TestPad": ["hypothesis.strategies.integers", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.sampled_from"], "pad_test.TestPad.test_crop": ["numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "pad_test.TestPad.test_crop.ref": [], "partition_ops_test": ["unittest.main"], "partition_ops_test.TestPartitionOps.test_configs": [], "partition_ops_test.TestPartitionOps.testPartition": ["numpy.random.randint", "<builtin>.enumerate", "<builtin>.zip", "caffe2.python.workspace.FetchBlob", "caffe2.python.test_util.rand_array", "<builtin>.print", "<builtin>.range", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "<builtin>.str", "partition_ops_test.TestPartitionOps.test_configs", "partition_ops_test.TestPartitionOps.testPartition.sharding", "numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "<builtin>.len"], "caffe2.python.test_util.rand_array": [], "partition_ops_test.TestPartitionOps.testPartition.sharding": ["partition_ops_test.TestPartitionOps.testPartition.sharding.join", "<builtin>.range", "<builtin>.enumerate", "<builtin>.len"], "partition_ops_test.TestPartitionOps.testPartition.sharding.join": ["numpy.stack", "numpy.empty"], "partition_ops_test.TestPartitionOps.testLengthsPartition": ["numpy.random.randint", "<builtin>.enumerate", "<builtin>.zip", "caffe2.python.workspace.FetchBlob", "caffe2.python.test_util.rand_array", "<builtin>.range", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "numpy.array", "<builtin>.str", "partition_ops_test.TestPartitionOps.test_configs", "partition_ops_test.TestPartitionOps.testLengthsPartition.sharding", "numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "<builtin>.len"], "partition_ops_test.TestPartitionOps.testLengthsPartition.sharding": ["numpy.zeros", "<builtin>.range", "partition_ops_test.TestPartitionOps.testLengthsPartition.sharding.join", "<builtin>.enumerate", "<builtin>.len"], "partition_ops_test.TestPartitionOps.testLengthsPartition.sharding.join": ["numpy.stack", "numpy.empty"], "percentile_op_test": ["unittest.main"], "percentile_op_test.TestPercentileOp._test_percentile_op": ["caffe2.python.workspace.RunOperatorOnce", "numpy.array", "caffe2.python.core.CreateOperator", "numpy.testing.assert_array_almost_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "percentile_op_test.TestPercentileOp._test_shape_inference"], "percentile_op_test.TestPercentileOp._test_shape_inference": ["numpy.array", "<builtin>.list", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "percentile_op_test.TestPercentileOp.test_percentile_op_with_only_one_dist": ["percentile_op_test.TestPercentileOp._test_percentile_op"], "percentile_op_test.TestPercentileOp.test_percentile_op_with_all_elements_in_map": ["percentile_op_test.TestPercentileOp._test_percentile_op"], "percentile_op_test.TestPercentileOp.test_percentile_op_with_same_value": ["percentile_op_test.TestPercentileOp._test_percentile_op"], "percentile_op_test.TestPercentileOp.test_percentile_op_with_elements_bigger_than_map_range": ["percentile_op_test.TestPercentileOp._test_percentile_op"], "percentile_op_test.TestPercentileOp.test_percentile_op_with_elements_smaller_than_map_range": ["percentile_op_test.TestPercentileOp._test_percentile_op"], "percentile_op_test.TestPercentileOp.test_percentile_op_with_interpolation": ["percentile_op_test.TestPercentileOp._test_percentile_op"], "percentile_op_test.TestPercentileOp.test_percentile_op_with_large_sample_size_per_dist": ["percentile_op_test.TestPercentileOp._test_percentile_op"], "piecewise_linear_transform_test": ["unittest.main"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.constrain": ["piecewise_linear_transform_test.TestPiecewiseLinearTransform.constrain.constrain_internal", "numpy.array"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.constrain.constrain_internal": ["<builtin>.max", "<builtin>.min"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.transform": ["numpy.searchsorted", "numpy.minimum", "piecewise_linear_transform_test.TestPiecewiseLinearTransform.constrain", "<builtin>.len", "numpy.maximum"], "numpy.searchsorted": [], "piecewise_linear_transform_test.TestPiecewiseLinearTransform": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.given"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_multi_predictions_params_from_arg": ["caffe2.python.core.CreateOperator", "numpy.random.uniform", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_multi_predictions_params_from_arg.piecewise": ["numpy.vstack", "piecewise_linear_transform_test.TestPiecewiseLinearTransform.transform"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_binary_predictions_params_from_arg": ["caffe2.python.core.CreateOperator", "numpy.random.uniform", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_binary_predictions_params_from_arg.piecewise": ["numpy.vstack", "piecewise_linear_transform_test.TestPiecewiseLinearTransform.transform"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_multi_predictions_params_from_input": ["caffe2.python.core.CreateOperator", "numpy.random.uniform", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_multi_predictions_params_from_input.piecewise": ["numpy.vstack", "piecewise_linear_transform_test.TestPiecewiseLinearTransform.transform"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_binary_predictions_params_from_input": ["caffe2.python.core.CreateOperator", "numpy.random.uniform", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_binary_predictions_params_from_input.piecewise": ["numpy.vstack", "piecewise_linear_transform_test.TestPiecewiseLinearTransform.transform"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_1D_predictions_params_from_input": ["caffe2.python.core.CreateOperator", "numpy.random.uniform", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "piecewise_linear_transform_test.TestPiecewiseLinearTransform.test_1D_predictions_params_from_input.piecewise": ["piecewise_linear_transform_test.TestPiecewiseLinearTransform.transform"], "pooling_test": ["unittest.main"], "pooling_test.TestPooling": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given", "unittest.skipIf", "os.getenv", "hypothesis.settings", "hypothesis.strategies.sampled_from"], "pooling_test.TestPooling.test_pooling_separate_stride_pad": ["hypothesis.assume", "numpy.max", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "pooling_test.TestPooling.test_pooling_big_batch": ["caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "pooling_test.TestPooling.test_pooling_1d": ["hypothesis.assume", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "pooling_test.TestPooling.test_pooling_3d": ["caffe2.python.hip_test_util.run_in_hip", "hypothesis.assume", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.workspace.GetHIPVersion"], "caffe2.python.workspace.GetHIPVersion": [], "pooling_test.TestPooling.test_global_pooling_3d": ["caffe2.python.hip_test_util.run_in_hip", "hypothesis.assume", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.workspace.GetHIPVersion"], "pooling_test.TestPooling.test_pooling_with_index": ["hypothesis.assume", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "pooling_test.TestPooling.test_global_avg_pool_nchw": ["caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "pooling_test.TestPooling.test_global_max_pool_nchw": ["caffe2.python.workspace.GetCuDNNVersion", "numpy.random.seed", "hypothesis.assume", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "pooling_test.TestPooling.test_pooling": ["caffe2.python.hip_test_util.run_in_hip", "hypothesis.assume", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "pooling_test.TestPooling.test_global_pooling": ["caffe2.python.workspace.GetCuDNNVersion", "caffe2.python.hip_test_util.run_in_hip", "hypothesis.assume", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "pooling_test.TestPooling.test_max_pool_grad": ["numpy.arange", "numpy.random.shuffle", "caffe2.python.hip_test_util.run_in_hip", "numpy.zeros", "hypothesis.assume", "caffe2.python.core.CreateOperator", "<builtin>.str", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.transpose"], "pooling_test.TestPooling.test_avg_pool_count_include_pad": ["caffe2.python.hip_test_util.run_in_hip", "hypothesis.assume", "caffe2.python.core.CreateOperator", "<builtin>.str", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.transpose"], "prepend_dim_test": ["unittest.main"], "prepend_dim_test.TestPrependDim._test_fwd_bwd": ["numpy.testing.assert_array_equal", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net"], "prepend_dim_test.TestPrependDim.test_prepend_dim": ["caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.NumGpuDevices", "prepend_dim_test.TestPrependDim._test_fwd_bwd"], "python_op_test.PythonOpTest.test_simple_python_op": ["<builtin>.str", "<builtin>.range", "caffe2.python.core.CreatePythonOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.ExecutionStep", "caffe2.python.workspace.RunPlan", "caffe2.python.core.Plan", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_almost_equal"], "python_op_test.PythonOpTest.test_simple_python_op.g": [], "python_op_test.PythonOpTest.test_simple_python_op.f": ["python_op_test.PythonOpTest.test_simple_python_op.g"], "quantile_test": ["caffe2.python.core.GlobalInit", "unittest.main"], "quantile_test.TestQuantile._test_quantile": ["numpy.size", "numpy.abs", "numpy.sum", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "<builtin>.enumerate", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "numpy.ceil", "numpy.concatenate"], "quantile_test.TestQuantile.test_quantile_1": ["quantile_test.TestQuantile._test_quantile", "numpy.random.randint", "<builtin>.range", "numpy.random.rand"], "quantile_test.TestQuantile.test_quantile_2": ["quantile_test.TestQuantile._test_quantile", "numpy.random.randint", "<builtin>.range", "numpy.random.rand"], "quantile_test.TestQuantile.test_quantile_3": ["quantile_test.TestQuantile._test_quantile", "numpy.random.randint", "<builtin>.range", "numpy.random.rand"], "quantile_test.TestQuantile.test_quantile_4": ["quantile_test.TestQuantile._test_quantile", "numpy.random.randint", "<builtin>.range", "numpy.random.rand"], "rand_quantization_op_speed_test": ["unittest.main", "numpy.set_printoptions"], "rand_quantization_op_speed_test.TestSpeedFloatToFusedRandRowwiseQuantized": ["hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.given"], "rand_quantization_op_speed_test.TestSpeedFloatToFusedRandRowwiseQuantized.test_speed_of_rand_quantization": ["caffe2.python.workspace.RunNet", "caffe2.python.core.Net", "<builtin>.range", "numpy.random.rand", "caffe2.python.workspace.FeedBlob", "time.time", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.CreateNet", "<builtin>.print"], "rank_loss_operator_test": [], "rank_loss_operator_test.TestPairWiseLossOps": ["caffe2.python.hypothesis_test_util.arrays", "caffe2.python.hypothesis_test_util.floats", "hypothesis.given", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.integers"], "rank_loss_operator_test.TestPairWiseLossOps.test_pair_wise_loss_predictions": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "numpy.asscalar", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertAlmostEqual", "numpy.exp", "caffe2.python.core.Plan", "caffe2.python.core.execution_step", "numpy.log", "caffe2.python.core.Net", "caffe2.python.workspace.RunPlan", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual"], "rank_loss_operator_test.TestPairWiseLossOps.test_pair_wise_loss_gradient": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "numpy.testing.assert_allclose", "numpy.asscalar", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertAlmostEqual", "numpy.exp", "caffe2.python.core.Plan", "caffe2.python.core.execution_step", "<builtin>.abs", "caffe2.python.core.Net", "caffe2.python.workspace.RunPlan", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual"], "rank_loss_operator_test.TestPairWiseLossOps.test_pair_wise_loss_batch": ["numpy.random.randint", "<builtin>.sum", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "rank_loss_operator_test.TestPairWiseLossOps.test_pair_wise_loss_batch.pair_wise_op": ["<builtin>.range", "numpy.zeros", "rank_loss_operator_test.TestPairWiseLossOps.test_pair_wise_loss_batch.pair_wise_op.f"], "rank_loss_operator_test.TestPairWiseLossOps.test_pair_wise_loss_batch.pair_wise_op.f": ["numpy.exp", "numpy.log"], "rebatching_queue_test": ["unittest.main"], "rebatching_queue_test.primefac": [], "rebatching_queue_test.TestReBatchingQueue.test_rebatching_queue_single_enqueue_dequeue": ["<builtin>.range", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertEquals"], "rebatching_queue_test.TestReBatchingQueue.test_rebatching_queue_multi_enqueue_dequeue": ["<builtin>.range", "numpy.testing.assert_array_equal", "caffe2.python.workspace.RunNetOnce", "numpy.array", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob"], "rebatching_queue_test.TestReBatchingQueue.test_rebatching_queue_closes_properly": ["<builtin>.range", "numpy.testing.assert_array_equal", "caffe2.python.workspace.RunNetOnce", "numpy.array", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "caffe2.python.test_util.TestCase.assertRaises"], "rebatching_queue_test.TestReBatchingQueue.test_rebatching_queue_multiple_components": ["<builtin>.range", "numpy.testing.assert_array_equal", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "numpy.array", "caffe2.python.core.Net"], "rebatching_queue_test.TestReBatchingQueue": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.settings"], "rebatching_queue_test.TestReBatchingQueue.test_rebatching_parallel_producer_consumer": ["<builtin>.range", "functools.reduce", "caffe2.python.core.Plan", "caffe2.python.core.execution_step", "<builtin>.len", "rebatching_queue_test.primefac", "caffe2.python.core.Net", "<builtin>.list", "caffe2.python.test_util.TestCase.ws.run", "caffe2.python.test_util.TestCase.assertEquals"], "rebatching_queue_test.TestReBatchingQueue.test_rebatching_parallel_producer_consumer.append": [], "rebatching_queue_test.TestReBatchingQueue.test_rebatching_parallel_producer_consumer.<lambda1>": [], "rebatching_queue_test.TestReBatchingQueue.test_rebatching_parallel_producer_consumer.<lambda2>": [], "record_queue_test": ["unittest.main"], "record_queue_test.TestRecordQueue.test_record_queue": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.schema.Map", "caffe2.python.schema.NewRecord", "<builtin>.sum", "caffe2.python.dataset.Dataset", "caffe2.python.schema.Struct", "caffe2.python.core.workspace.RunPlan", "caffe2.python.schema.Scalar", "caffe2.python.workspace.FetchBlobs", "caffe2.python.core.Plan", "caffe2.python.schema.FeedRecord", "caffe2.python.core.Net", "<builtin>.str", "caffe2.python.record_queue.RecordQueue", "caffe2.python.test_util.TestCase.assertAlmostEqual", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.execution_step", "<builtin>.range", "caffe2.python.schema.from_blob_list"], "caffe2.python.record_queue.RecordQueue": [], "record_queue_test.TestRecordQueue.test_record_queue.process": ["caffe2.python.schema.from_blob_list"], "caffe2.python.core.workspace.RunPlan": [], "recurrent_network_test": [], "recurrent_network_test.RecurrentNetworkTest": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.given"], "recurrent_network_test.RecurrentNetworkTest.test_sum_mul": ["recurrent_network_test.RecurrentNetworkTest.simple_rnn", "caffe2.python.model_helper.ModelHelper"], "recurrent_network_test.RecurrentNetworkTest.simple_rnn": ["<builtin>.print", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.recurrent.recurrent_net", "<builtin>.locals", "numpy.random.randn"], "recurrent_network_test.RecurrentNetworkTest.test_mul": ["recurrent_network_test.RecurrentNetworkTest.simple_rnn", "caffe2.python.model_helper.ModelHelper"], "recurrent_network_test.RecurrentNetworkTest.test_extract": ["<builtin>.range", "caffe2.python.recurrent.recurrent_net", "caffe2.python.workspace.RunNet", "caffe2.python.recurrent.retrieve_step_blobs", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNetOnce", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertTrue", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.model_helper.ModelHelper", "<builtin>.str", "numpy.random.randn"], "caffe2.python.recurrent.retrieve_step_blobs": [], "recurrent_network_test.RecurrentNetworkTest.simple_rnn.reference": ["caffe2.python.workspace.SwitchWorkspace", "<builtin>.range", "numpy.zeros", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CurrentWorkspace", "<builtin>.list"], "recurrent_network_test.RecurrentNetworkTest._convolution_1d": [], "recurrent_network_test.RecurrentNetworkTest.test_stateful_convolution_forward_only": ["numpy.testing.assert_almost_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "recurrent_network_test.RecurrentNetworkTest._convolution_1d", "caffe2.python.model_helper.ModelHelper", "<builtin>.str"], "recurrent_net_executor_test": ["caffe2.python.workspace.GlobalInit", "unittest.main", "random.seed"], "recurrent_net_executor_test.TestRNNExecutor.setUp": ["<builtin>.super"], "recurrent_net_executor_test.TestRNNExecutor": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "recurrent_net_executor_test.TestRNNExecutor.test_lstm_with_attention_equal_simplenet": ["recurrent_net_executor_test.TestRNNExecutor._compare", "numpy.array", "caffe2.python.model_helper.ModelHelper", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.ResetWorkspace", "<builtin>.print", "numpy.random.rand", "caffe2.python.rnn_cell.LSTMWithAttention", "caffe2.python.workspace.FeedBlob", "numpy.zeros"], "caffe2.python.rnn_cell.LSTMWithAttention": [], "recurrent_net_executor_test.TestRNNExecutor._compare": ["<builtin>.str", "<builtin>.range", "caffe2.python.test_util.TestCase.assertEqual", "<builtin>.print", "numpy.random.seed", "caffe2.python.test_util.TestCase.assertFalse", "numpy.allclose", "caffe2.python.workspace.RunNet", "<builtin>.list", "caffe2.python.workspace.RunNetOnce", "<builtin>.type", "recurrent_net_executor_test.TestRNNExecutor.enable_rnn_executor", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "<builtin>.len", "caffe2.python.workspace.Blobs", "caffe2.python.workspace.ResetWorkspace", "numpy.random.rand"], "recurrent_net_executor_test.TestRNNExecutor.init_lstm_model": ["caffe2.python.rnn_cell.LSTM", "caffe2.python.model_helper.ModelHelper", "numpy.array", "<builtin>.range", "numpy.random.rand", "caffe2.python.workspace.FeedBlob", "numpy.zeros"], "recurrent_net_executor_test.TestRNNExecutor.test_empty_sequence": ["caffe2.python.workspace.RunNetOnce", "recurrent_net_executor_test.TestRNNExecutor.init_lstm_model", "caffe2.python.core.DeviceScope", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.proto.caffe2_pb2.DeviceOption", "caffe2.python.workspace.ResetWorkspace", "numpy.random.rand", "caffe2.python.workspace.RunNet", "recurrent_net_executor_test.TestRNNExecutor.enable_rnn_executor", "caffe2.python.workspace.FeedBlob", "numpy.random.seed", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob"], "recurrent_net_executor_test.TestRNNExecutor.enable_rnn_executor": ["caffe2.python.test_util.TestCase.assertEqual"], "recurrent_net_executor_test.TestRNNExecutor.test_lstm_equal_simplenet": ["recurrent_net_executor_test.TestRNNExecutor.init_lstm_model", "recurrent_net_executor_test.TestRNNExecutor._compare", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.ResetWorkspace", "<builtin>.print"], "reduce_ops_test": [], "reduce_ops_test.TestReduceOps.run_reduce_op_test_impl": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.dict", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.set_disable_serialized_check"], "reduce_ops_test.TestReduceOps.run_reduce_op_test_impl.ref": ["<builtin>.tuple", "numpy.max", "reduce_ops_test.getNorm.norm", "numpy.mean", "numpy.min", "numpy.sum"], "reduce_ops_test.getNorm.norm": ["numpy.abs", "numpy.power", "numpy.sum", "numpy.sqrt"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.set_disable_serialized_check": [], "reduce_ops_test.TestReduceOps.run_reduce_op_test": ["<builtin>.range", "<builtin>.len", "itertools.combinations", "reduce_ops_test.TestReduceOps.run_reduce_op_test_impl"], "reduce_ops_test.TestReduceOps": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.strategies.integers", "caffe2.python.serialized_test.serialized_test_util.given"], "reduce_ops_test.TestReduceOps.test_reduce_min": ["numpy.arange", "reduce_ops_test.TestReduceOps.run_reduce_op_test", "numpy.random.shuffle"], "reduce_ops_test.TestReduceOps.test_reduce_max": ["numpy.arange", "reduce_ops_test.TestReduceOps.run_reduce_op_test", "numpy.random.shuffle"], "reduce_ops_test.TestReduceOps.test_reduce_sum": ["numpy.random.randn", "reduce_ops_test.TestReduceOps.run_reduce_op_test"], "reduce_ops_test.TestReduceOps.test_reduce_mean": ["reduce_ops_test.TestReduceOps.run_reduce_op_test"], "reduce_ops_test.TestReduceOps.test_reduce_l1": ["numpy.arange", "reduce_ops_test.TestReduceOps.run_reduce_op_test", "numpy.random.shuffle", "reduce_ops_test.getNorm"], "reduce_ops_test.getNorm": ["<builtin>.RuntimeError"], "reduce_ops_test.TestReduceOps.test_reduce_l2": ["numpy.random.randn", "reduce_ops_test.TestReduceOps.run_reduce_op_test", "reduce_ops_test.getNorm"], "reduce_ops_test.TestReduceFrontReductions.grad_variant_input_test": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_sum.ref_sum", "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum_empty_batch.ref_sum", "numpy.array", "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_mean.ref_mean", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "numpy.testing.assert_array_equal", "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_mean.ref_mean", "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum.ref_sum", "caffe2.python.workspace.ResetWorkspace", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_mean.ref_mean": ["numpy.mean"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_sum.ref_sum": ["numpy.sum"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum.ref_sum": ["<builtin>.range", "<builtin>.tuple", "numpy.sum"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum_empty_batch.ref_sum": ["<builtin>.range", "<builtin>.tuple", "numpy.sum"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_mean.ref_mean": ["<builtin>.range", "<builtin>.tuple", "numpy.mean"], "reduce_ops_test.TestReduceFrontReductions.max_op_test": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_max.ref_backmax", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_max.ref_frontmax", "numpy.array", "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_max_with_length.ref_max", "<builtin>.len", "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_max_with_length.ref_max", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_max.ref_frontmax": ["<builtin>.range", "<builtin>.tuple", "numpy.max"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_max.ref_backmax": ["numpy.max"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_max_with_length.ref_max": ["<builtin>.range", "numpy.max", "numpy.zeros"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_max_with_length.ref_max": ["<builtin>.range", "numpy.max", "numpy.zeros"], "reduce_ops_test.TestReduceFrontReductions.reduce_op_test": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "reduce_ops_test.TestReduceFrontReductions": ["hypothesis.given", "hypothesis.strategies.integers", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.settings"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum": ["reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "reduce_ops_test.TestReduceFrontReductions.grad_variant_input_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum_empty_batch": ["caffe2.python.workspace.FetchBlob", "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum_empty_batch.ref_sum", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceScope", "caffe2.python.core.Net", "caffe2.python.workspace.RunNet", "numpy.testing.assert_allclose", "reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "caffe2.python.workspace.CreateNet", "numpy.random.seed", "caffe2.python.workspace.GetNetName", "reduce_ops_test.TestReduceFrontReductions.grad_variant_input_test", "numpy.random.rand"], "caffe2.python.workspace.GetNetName": [], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum_with_length": ["numpy.random.randint", "numpy.prod", "<builtin>.int", "reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_sum_with_length.ref_sum": ["<builtin>.range", "numpy.sum", "numpy.zeros"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_mean": ["reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "reduce_ops_test.TestReduceFrontReductions.grad_variant_input_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_mean_with_length": ["numpy.random.randint", "numpy.prod", "<builtin>.int", "reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_mean_with_length.ref_mean": ["<builtin>.range", "numpy.mean", "numpy.zeros"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_max": ["reduce_ops_test.TestReduceFrontReductions.max_op_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_front_max_with_length": ["numpy.random.randint", "numpy.prod", "<builtin>.int", "reduce_ops_test.TestReduceFrontReductions.max_op_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_max": ["reduce_ops_test.TestReduceFrontReductions.max_op_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_max_with_length": ["numpy.random.randint", "numpy.prod", "<builtin>.int", "reduce_ops_test.TestReduceFrontReductions.max_op_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_sum": ["reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "reduce_ops_test.TestReduceFrontReductions.grad_variant_input_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_sum_with_length": ["numpy.random.randint", "numpy.prod", "<builtin>.int", "reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_sum_with_length.ref_sum": ["<builtin>.range", "numpy.sum", "numpy.zeros"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_mean": ["reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "reduce_ops_test.TestReduceFrontReductions.grad_variant_input_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_mean_with_length": ["numpy.random.randint", "numpy.prod", "<builtin>.int", "reduce_ops_test.TestReduceFrontReductions.reduce_op_test", "numpy.random.rand"], "reduce_ops_test.TestReduceFrontReductions.test_reduce_back_mean_with_length.ref_mean": ["<builtin>.range", "numpy.mean", "numpy.zeros"], "reduction_ops_test": [], "reduction_ops_test.TestReductionOps": ["hypothesis.strategies.sampled_from", "hypothesis.settings", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.given", "hypothesis.strategies.integers"], "reduction_ops_test.TestReductionOps.test_elementwise_sum": ["numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "reduction_ops_test.TestReductionOps.test_elementwise_sum.sum_op": ["numpy.sum"], "reduction_ops_test.TestReductionOps.test_elementwise_int_sum": ["numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "reduction_ops_test.TestReductionOps.test_elementwise_int_sum.sum_op": ["numpy.sum"], "reduction_ops_test.TestReductionOps.test_elementwise_sqrsum": ["numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "hypothesis.assume", "caffe2.python.core.CreateOperator"], "reduction_ops_test.TestReductionOps.test_elementwise_sqrsum.sumsqr_op": ["numpy.sum"], "reduction_ops_test.TestReductionOps.test_elementwise_avg": ["numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator"], "reduction_ops_test.TestReductionOps.test_elementwise_avg.avg_op": ["numpy.mean"], "reduction_ops_test.TestReductionOps.test_rowwise_max": ["numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "reduction_ops_test.TestReductionOps.test_rowwise_max.rowwise_max": ["numpy.max"], "reduction_ops_test.TestReductionOps.test_columnwise_max": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.list", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.workspace.FeedBlob", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual"], "reduction_ops_test.TestReductionOps.test_columnwise_max.columnwise_max": ["numpy.max"], "reshape_ops_test": ["unittest.main"], "reshape_ops_test.TestLengthsToShapeOps.test_lengths_to_shape_ops": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "numpy.array", "numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob"], "reshape_ops_test.TestLengthsToShapeOps.test_reshape_ops": ["numpy.zeros", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "numpy.array", "numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob"], "reshape_ops_test.TestLengthsToShapeOps.test_basic_reshape": ["reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test._test_reshape_output_and_gradient": ["numpy.testing.assert_allclose", "caffe2.python.workspace.CreateNet", "caffe2.python.core.Net", "<builtin>.len", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FetchBlob", "numpy.asarray", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.RunNetOnce", "numpy.random.rand", "caffe2.python.workspace.NumGpuDevices", "numpy.atleast_1d", "numpy.testing.assert_array_equal", "caffe2.python.workspace.FeedBlob"], "reshape_ops_test.TestLengthsToShapeOps.test_missing_dim": ["reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test.TestLengthsToShapeOps.test_in_place": ["reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test.TestLengthsToShapeOps.test_zero_dim": ["reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test.TestLengthsToShapeOps.test_zero_dim_and_missing_dim": ["reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test.TestLengthsToShapeOps.test_backprop": ["numpy.testing.assert_allclose", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "numpy.random.rand", "numpy.testing.assert_array_equal"], "reshape_ops_test.TestLengthsToShapeOps.test_input_shape_changes": ["caffe2.python.workspace.CreateNet", "caffe2.python.core.Net", "numpy.array", "numpy.random.rand", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.FeedBlob"], "reshape_ops_test.TestLengthsToShapeOps.test_nonempty_tensor_gradient": ["numpy.ones", "reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test.TestLengthsToShapeOps.test_empty_tensor": ["numpy.empty", "reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test.TestLengthsToShapeOps.test_one_dim_empty_tensor_gradient": ["numpy.empty", "reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test.TestLengthsToShapeOps.test_one_dim_and_empty_tensor": ["reshape_ops_test._test_reshape_output_and_gradient"], "reshape_ops_test.TestLengthsToShapeOps.test_scalar_to_tensor": ["reshape_ops_test._test_reshape_output_and_gradient"], "numpy.atleast_1d": [], "resize_op_test": ["unittest.main"], "resize_op_test.TestResize": ["hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.just", "hypothesis.settings", "hypothesis.strategies.floats"], "resize_op_test.TestResize.test_nearest": ["hypothesis.assume", "numpy.random.rand", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "resize_op_test.TestResize.test_nearest.ref": ["numpy.int32", "numpy.minimum", "numpy.arange", "numpy.meshgrid"], "numpy.int32": [], "resize_op_test.TestResize.test_nearest_grad": ["hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.int32", "caffe2.python.core.CreateOperator"], "resize_op_test.TestResize.test_nearest_grad.ref": ["numpy.zeros_like", "<builtin>.range", "numpy.minimum"], "resize_op_test.TestResize.test_nearest_onnx": ["hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "resize_op_test.TestResize.test_nearest_onnx.ref": ["numpy.int32", "numpy.minimum", "numpy.arange", "numpy.meshgrid"], "resize_op_test.TestResize.test_nearest_onnx_grad": ["hypothesis.assume", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.random.seed", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.array", "numpy.int32", "caffe2.python.core.CreateOperator"], "resize_op_test.TestResize.test_nearest_onnx_grad.ref": ["numpy.zeros_like", "<builtin>.range", "numpy.minimum"], "rmac_regions_op_test": [], "rmac_regions_op_test.RMACRegionsOpTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.settings"], "rmac_regions_op_test.RMACRegionsOpTest.test": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand"], "rmac_regions_op_test.RMACRegionsOpTest.test.ref_op": ["numpy.abs", "<builtin>.len", "numpy.arange", "numpy.minimum", "numpy.maximum", "numpy.argmin", "<builtin>.range", "numpy.array", "<builtin>.round", "numpy.floor", "<builtin>.int"], "rms_norm_op_test": ["unittest.main"], "rms_norm_op_test.TestRMSNormOp": ["hypothesis.settings", "hypothesis.strategies.floats", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.given"], "rms_norm_op_test.TestRMSNormOp.test_rms_norm": ["<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.randn"], "rms_norm_op_test.TestRMSNormOp.test_rms_norm.rms_norm_ref": ["numpy.square", "numpy.mean", "numpy.expand_dims", "numpy.sqrt"], "rnn_cell_test": ["unittest.main", "caffe2.python.workspace.GlobalInit"], "rnn_cell_test.lstm_unit": ["numpy.ones", "caffe2.python.rnn.rnn_cell_test_util.tanh", "caffe2.python.rnn.rnn_cell_test_util.sigmoid"], "rnn_cell_test.layer_norm_with_scale_and_bias_ref": ["numpy.mean", "numpy.prod", "numpy.sqrt", "numpy.reshape", "numpy.square"], "rnn_cell_test.layer_norm_lstm_reference": ["rnn_cell_test.lstm_unit", "numpy.dot", "rnn_cell_test.layer_norm_with_scale_and_bias_ref", "<builtin>.range", "numpy.zeros", "<builtin>.print"], "rnn_cell_test.lstm_reference": ["<builtin>.range", "numpy.dot", "rnn_cell_test.lstm_unit", "numpy.zeros"], "rnn_cell_test.multi_lstm_reference": ["<builtin>.range", "numpy.dot", "<builtin>.len", "rnn_cell_test.lstm_reference"], "rnn_cell_test.compute_regular_attention_logits": ["numpy.sum", "numpy.dot", "numpy.tanh"], "rnn_cell_test.compute_recurrent_attention_logits": ["numpy.sum", "numpy.dot", "numpy.tanh"], "rnn_cell_test.compute_dot_attention_logits": ["numpy.sum", "numpy.matmul", "numpy.transpose", "numpy.expand_dims"], "rnn_cell_test.compute_coverage_attention_logits": ["numpy.sum", "numpy.dot", "numpy.tanh"], "rnn_cell_test.lstm_with_attention_reference": ["numpy.sum", "rnn_cell_test.compute_regular_attention_logits", "numpy.concatenate", "rnn_cell_test.lstm_unit", "numpy.dot", "numpy.exp", "<builtin>.range", "rnn_cell_test.compute_coverage_attention_logits", "numpy.transpose", "numpy.zeros", "rnn_cell_test.compute_recurrent_attention_logits", "rnn_cell_test.compute_dot_attention_logits"], "rnn_cell_test.lstm_with_regular_attention_reference": ["rnn_cell_test.lstm_with_attention_reference"], "rnn_cell_test.lstm_with_recurrent_attention_reference": ["rnn_cell_test.lstm_with_attention_reference"], "rnn_cell_test.lstm_with_dot_attention_reference": ["rnn_cell_test.lstm_with_attention_reference"], "rnn_cell_test.lstm_with_dot_attention_reference_same_dim": ["rnn_cell_test.lstm_with_dot_attention_reference"], "rnn_cell_test.lstm_with_dot_attention_reference_different_dim": ["rnn_cell_test.lstm_with_dot_attention_reference"], "rnn_cell_test.lstm_with_coverage_attention_reference": ["rnn_cell_test.lstm_with_attention_reference"], "rnn_cell_test.milstm_reference": ["<builtin>.range", "numpy.dot", "rnn_cell_test.lstm_unit", "numpy.zeros"], "rnn_cell_test.layer_norm_milstm_reference": ["rnn_cell_test.lstm_unit", "numpy.dot", "rnn_cell_test.layer_norm_with_scale_and_bias_ref", "<builtin>.range", "numpy.zeros"], "rnn_cell_test.lstm_input": ["hypothesis.strategies.integers", "hypothesis.strategies.tuples"], "rnn_cell_test.lstm_input.create_input": ["caffe2.python.hypothesis_test_util.arrays", "<builtin>.list"], "rnn_cell_test._prepare_attention": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.rnn_cell.MILSTMCell", "caffe2.python.workspace.FeedBlob", "caffe2.python.scope.NameScope", "<builtin>.len", "caffe2.python.rnn_cell.MultiRNNCell", "caffe2.python.rnn_cell.DropoutCell", "<builtin>.enumerate", "<builtin>.range", "rnn_cell_test._prepare_attention.generate_input_state", "caffe2.python.rnn_cell.AttentionCell", "caffe2.python.workspace.RunNetOnce", "numpy.random.randint", "caffe2.python.rnn_cell.UnrolledCell", "<builtin>.print"], "rnn_cell_test._prepare_attention.generate_input_state": ["numpy.random.random"], "caffe2.python.rnn_cell.MILSTMCell": [], "caffe2.python.rnn_cell.UnrolledCell": [], "rnn_cell_test.MulCell._apply": ["<builtin>.len"], "rnn_cell_test.MulCell.get_state_names": ["caffe2.python.rnn_cell.RNNCell.scope"], "rnn_cell_test.prepare_mul_rnn": ["caffe2.python.rnn_cell.MultiRNNCell", "<builtin>.range", "caffe2.python.rnn_cell.UnrolledCell", "caffe2.python.rnn_cell.RNNCell.__init__", "<builtin>.print"], "caffe2.python.rnn_cell.RNNCell.__init__": [], "rnn_cell_test.RNNCellTest": ["caffe2.python.utils.debug", "hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.strategies.booleans", "rnn_cell_test.lstm_input", "hypothesis.settings", "hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.integers", "unittest.skip", "hypothesis.strategies.lists"], "rnn_cell_test.RNNCellTest.test_unroll_mul": ["rnn_cell_test.prepare_mul_rnn", "caffe2.python.gradient_checker.NetGradientChecker.CompareNets", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.RunNetOnce"], "rnn_cell_test.RNNCellTest.test_unroll_lstm": ["<builtin>.zip", "caffe2.python.gradient_checker.NetGradientChecker.CompareNets", "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn", "caffe2.python.workspace.FeedBlob"], "rnn_cell_test.RNNCellTest.test_unroll_attention": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FeedBlob", "numpy.random.random", "rnn_cell_test._prepare_attention", "caffe2.python.gradient_checker.NetGradientChecker.CompareNets", "<builtin>.zip", "<builtin>.print"], "rnn_cell_test.RNNCellTest.test_layered_lstm": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.RunNetOnce", "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn", "caffe2.python.workspace.FeedBlob"], "rnn_cell_test.RNNCellTest.test_lstm": ["rnn_cell_test.RNNCellTest.lstm_base"], "rnn_cell_test.RNNCellTest.lstm_base": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.list", "caffe2.python.workspace.FetchBlob", "functools.partial", "caffe2.python.rnn.rnn_cell_test_util._prepare_rnn", "caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertFalse", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.seed"], "rnn_cell_test.RNNCellTest.test_milstm": ["rnn_cell_test.RNNCellTest.lstm_base"], "rnn_cell_test.RNNCellTest.test_norm_lstm": ["rnn_cell_test.RNNCellTest.lstm_base"], "rnn_cell_test.RNNCellTest.test_norm_milstm": ["rnn_cell_test.RNNCellTest.lstm_base"], "rnn_cell_test.RNNCellTest.test_lstm_extract_predictor_net": ["caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.FetchBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "caffe2.python.core.DeviceOption", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "numpy.array", "<builtin>.str", "caffe2.python.workspace.Blobs", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.rnn_cell.LSTM", "caffe2.python.model_helper.ExtractPredictorNet", "numpy.zeros", "caffe2.python.core.DeviceScope", "<builtin>.print"], "rnn_cell_test.RNNCellTest.test_lstm_params": ["caffe2.python.rnn_cell.LSTM", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotEqual", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotEqual": [], "rnn_cell_test.RNNCellTest.test_milstm_params": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotEqual", "caffe2.python.rnn_cell.MILSTM", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.rnn_cell.MILSTM": [], "rnn_cell_test.RNNCellTest.test_layer_norm_lstm_params": ["caffe2.python.rnn_cell.LayerNormLSTM", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertNotEqual", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope", "caffe2.python.model_helper.ModelHelper"], "caffe2.python.rnn_cell.LayerNormLSTM": [], "rnn_cell_test.RNNCellTest.test_lstm_with_regular_attention": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.lstm_with_attention": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.list", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.enumerate", "numpy.random.randn", "caffe2.python.workspace.RunNetOnce", "numpy.zeros", "numpy.random.randint", "caffe2.python.core.DeviceScope", "caffe2.python.model_helper.ModelHelper"], "rnn_cell_test.RNNCellTest.test_lstm_with_recurrent_attention": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.test_lstm_with_dot_attention_same_dim": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.test_lstm_with_dot_attention_different_dim": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.test_lstm_with_coverage_attention": ["rnn_cell_test.RNNCellTest.lstm_with_attention", "functools.partial"], "rnn_cell_test.RNNCellTest.test_lstm_unit_recurrent_network": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "hypothesis.assume", "<builtin>.range", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.seed", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.random.randint", "caffe2.python.core.CreateOperator"], "rnn_cell_test.RNNCellTest.test_lstm_unit_recurrent_network.lstm_unit_reference": ["rnn_cell_test.lstm_unit"], "rnn_cell_test.RNNCellTest.test_multi_lstm": ["<builtin>.str", "caffe2.python.gradient_checker.NetGradientChecker.Check", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.rnn_cell.LSTM", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual", "<builtin>.range", "rnn_cell_test.multi_lstm_reference", "numpy.random.randn", "caffe2.python.workspace.RunNetOnce", "numpy.random.randint", "numpy.abs", "caffe2.python.model_helper.ModelHelper"], "roi_align_rotated_op_test": ["unittest.main"], "roi_align_rotated_op_test.RoIAlignRotatedOp.bbox_xywh_to_xyxy": [], "roi_align_rotated_op_test.RoIAlignRotatedOp": ["hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.given"], "roi_align_rotated_op_test.RoIAlignRotatedOp.test_horizontal_rois": ["numpy.zeros", "caffe2.python.core.CreateOperator", "caffe2.python.core.IsGPUDeviceType", "numpy.random.randn", "numpy.random.uniform", "<builtin>.min", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range"], "roi_align_rotated_op_test.RoIAlignRotatedOp.test_horizontal_rois.roialign_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "copy.deepcopy", "roi_align_rotated_op_test.RoIAlignRotatedOp.bbox_xywh_to_xyxy", "caffe2.python.workspace.FeedBlob"], "roi_align_rotated_op_test.RoIAlignRotatedOp.test_simple_rotations": ["numpy.zeros", "caffe2.python.core.CreateOperator", "caffe2.python.core.IsGPUDeviceType", "numpy.random.randn", "numpy.random.uniform", "<builtin>.min", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range"], "roi_align_rotated_op_test.RoIAlignRotatedOp.test_simple_rotations.roialign_rot90": ["<builtin>.len", "numpy.arange", "roi_align_rotated_op_test.RoIAlignRotatedOp.test_simple_rotations.roialign_flip", "<builtin>.tuple", "numpy.absolute", "numpy.transpose", "<builtin>.ValueError", "numpy.asanyarray"], "numpy.asanyarray": [], "roi_align_rotated_op_test.RoIAlignRotatedOp.test_simple_rotations.roialign_flip": ["<builtin>.tuple", "<builtin>.hasattr", "<builtin>.slice", "<builtin>.ValueError", "numpy.asarray"], "roi_align_rotated_op_test.RoIAlignRotatedOp.test_simple_rotations.roialign_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "copy.deepcopy", "roi_align_rotated_op_test.RoIAlignRotatedOp.bbox_xywh_to_xyxy", "roi_align_rotated_op_test.RoIAlignRotatedOp.test_simple_rotations.roialign_rot90", "caffe2.python.workspace.FeedBlob"], "rowwise_counter_test": ["unittest.main", "caffe2.python.core.GlobalInit"], "rowwise_counter_test.update_counter_ref": ["numpy.log", "numpy.exp"], "rowwise_counter_test.TestRowWiseCounter.test_rowwise_counter": ["caffe2.python.core.Net", "rowwise_counter_test.update_counter_ref", "numpy.unique", "numpy.random.rand", "caffe2.python.workspace.RunNetOnce", "numpy.random.randint", "numpy.array", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "numpy.allclose"], "scale_op_test": ["unittest.main"], "scale_op_test.TestScaleOps": ["hypothesis.strategies.floats", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "caffe2.python.serialized_test.serialized_test_util.given"], "scale_op_test.TestScaleOps.test_scale_ops": ["<builtin>.range", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "numpy.testing.assert_allclose"], "segment_ops_test": ["unittest.main", "functools.partial"], "segment_ops_test.sparse_lengths_sum_ref": ["<builtin>.range", "numpy.zeros", "<builtin>.len"], "segment_ops_test.sparse_lengths_mean_ref": ["segment_ops_test.sparse_lengths_sum_ref"], "segment_ops_test.TesterBase.segment_reduce_op": ["numpy.zeros", "segment_ops_test.SegmentsTester.split", "<builtin>.len", "<builtin>.enumerate", "segment_ops_test.LengthsTester.split"], "segment_ops_test.LengthsTester.split": ["<builtin>.range", "numpy.zeros", "<builtin>.len"], "segment_ops_test.SegmentsTester.split": ["<builtin>.max", "<builtin>.range", "numpy.zeros", "numpy.count_nonzero", "<builtin>.enumerate"], "segment_ops_test.TesterBase.segment_reduce_grad_op": ["segment_ops_test.SegmentsTester.split", "segment_ops_test.SegmentsTester.unsplit", "<builtin>.enumerate", "segment_ops_test.LengthsTester.split", "segment_ops_test.LengthsTester.unsplit"], "segment_ops_test.SegmentsTester.unsplit": ["<builtin>.enumerate", "numpy.zeros", "<builtin>.len", "<builtin>.max"], "segment_ops_test.LengthsTester.unsplit": ["<builtin>.range", "numpy.zeros", "<builtin>.len", "<builtin>.sum"], "segment_ops_test.TesterBase._test": ["hypothesis.given"], "segment_ops_test.TesterBase._test.test_segment_ops": ["<builtin>.range", "<builtin>.print", "<builtin>.len", "caffe2.python.core.CreateOperator"], "segment_ops_test.TesterBase._test.test_segment_ops.seg_reduce": ["<builtin>.len", "segment_ops_test.TesterBase.segment_reduce_op"], "segment_ops_test.TesterBase._test.test_segment_ops.seg_reduce_grad": ["segment_ops_test.TesterBase.segment_reduce_grad_op", "<builtin>.len"], "segment_ops_test.sum_grad": ["numpy.repeat", "numpy.expand_dims"], "segment_ops_test.logsumexp": ["numpy.sum", "numpy.exp", "numpy.log"], "segment_ops_test.logsumexp_grad": ["numpy.sum", "numpy.repeat", "numpy.expand_dims", "numpy.exp"], "segment_ops_test.logmeanexp": ["numpy.mean", "numpy.exp", "numpy.log"], "segment_ops_test.mean": ["numpy.mean"], "segment_ops_test.mean_grad": ["numpy.repeat", "numpy.expand_dims"], "segment_ops_test.max_fwd": ["numpy.amax"], "segment_ops_test.max_grad": ["<builtin>.range", "numpy.array", "numpy.zeros", "numpy.resize"], "segment_ops_test.sparse_lengths_weighted_sum_ref": ["<builtin>.range", "numpy.zeros", "<builtin>.len"], "segment_ops_test.sparse_lengths_weighted_sum_grad_ref": ["<builtin>.range", "<builtin>.print", "numpy.zeros", "<builtin>.len", "numpy.dot"], "segment_ops_test.TestSegmentOps.test_sorted_segment_ops": ["caffe2.python.hypothesis_test_util.segmented_tensor", "segment_ops_test.TesterBase._test", "segment_ops_test.TesterBase._test.test_segment_ops"], "caffe2.python.hypothesis_test_util.segmented_tensor": [], "segment_ops_test.TestSegmentOps.test_unsorted_segment_ops": ["caffe2.python.hypothesis_test_util.segmented_tensor", "segment_ops_test.TesterBase._test", "segment_ops_test.TesterBase._test.test_segment_ops"], "segment_ops_test.TestSegmentOps.test_unsorted_segment_ops_gpu": ["caffe2.python.hypothesis_test_util.segmented_tensor", "segment_ops_test.TesterBase._test", "segment_ops_test.TesterBase._test.test_segment_ops"], "segment_ops_test.TestSegmentOps.test_sparse_sorted_segment_ops": ["segment_ops_test.TesterBase._test", "segment_ops_test.TesterBase._test.test_segment_ops", "caffe2.python.hypothesis_test_util.sparse_segmented_tensor"], "caffe2.python.hypothesis_test_util.sparse_segmented_tensor": [], "segment_ops_test.TestSegmentOps.test_sparse_unsorted_segment_ops": ["segment_ops_test.TesterBase._test", "segment_ops_test.TesterBase._test.test_segment_ops", "caffe2.python.hypothesis_test_util.sparse_segmented_tensor"], "segment_ops_test.TestSegmentOps.test_lengths_ops": ["segment_ops_test.TesterBase._test", "segment_ops_test.TesterBase._test.test_segment_ops", "caffe2.python.hypothesis_test_util.lengths_tensor"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_ops": ["caffe2.python.hypothesis_test_util.sparse_lengths_tensor", "segment_ops_test.TesterBase._test", "segment_ops_test.TesterBase._test.test_segment_ops"], "caffe2.python.hypothesis_test_util.sparse_lengths_tensor": [], "segment_ops_test.TestSegmentOps": ["caffe2.python.hypothesis_test_util.tensor", "caffe2.python.hypothesis_test_util.lengths_tensor", "hypothesis.settings", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.booleans", "caffe2.python.hypothesis_test_util.sparse_lengths_tensor", "unittest.skipIf", "hypothesis.strategies.data", "hypothesis.given", "hypothesis.strategies.integers"], "segment_ops_test.TestSegmentOps.test_unsorted_sums_large": ["numpy.random.randint", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "segment_ops_test.TestSegmentOps.test_sorted_segment_range_mean": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.array", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "segment_ops_test.TestSegmentOps.test_sorted_segment_range_log_mean_exp": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.array", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "segment_ops_test.TestSegmentOps.test_unsorted_means_large": ["numpy.random.randint", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "segment_ops_test.TestSegmentOps.test_lengths_sum": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "segment_ops_test.TestSegmentOps.test_lengths_sum.ref": ["<builtin>.range", "numpy.zeros", "<builtin>.len"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_sum": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_sum.ref": ["<builtin>.range", "numpy.zeros", "<builtin>.len"], "segment_ops_test.TestSegmentOps.test_lengths_mean": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "segment_ops_test.TestSegmentOps.test_lengths_mean.ref": ["<builtin>.range", "numpy.zeros", "<builtin>.len"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_mean": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_mean.ref": ["<builtin>.range", "numpy.zeros", "<builtin>.len"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_weighted_sum": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.seed", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "functools.partial", "<builtin>.int"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_indices_in_gradient_sum_gpu": ["numpy.asarray", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.randint", "numpy.random.rand"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_indices_in_gradient_mean_gpu": ["numpy.asarray", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.randint", "numpy.random.rand"], "segment_ops_test.TestSegmentOps.test_legacy_sparse_and_lengths_sum_gradient": ["caffe2.python.workspace.FeedBlob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "numpy.asarray", "numpy.random.rand", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_sum_invalid_index": ["caffe2.python.workspace.FeedBlob", "numpy.asarray", "caffe2.python.core.CreateOperator", "numpy.random.randint", "numpy.random.rand", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_positional_weighted_sum": ["numpy.asarray", "caffe2.python.core.CreateOperator", "numpy.random.randint", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_positional_weighted_sum.ref_sparse": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.CreateOperator"], "segment_ops_test.TestSegmentOps.test_sparse_lengths_fp16": ["caffe2.python.hypothesis_test_util.tensor", "caffe2.python.hypothesis_test_util.arrays", "numpy.sum", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.arange", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "<builtin>.int"], "self_binning_histogram_test": ["caffe2.python.core.GlobalInit", "unittest.main"], "self_binning_histogram_test.TestSelfBinningHistogramBase.__init__": [], "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram": ["caffe2.python.workspace.FetchBlob", "numpy.sum", "numpy.array_equal", "<builtin>.len", "numpy.size", "<builtin>.sum", "<builtin>.range", "numpy.allclose", "numpy.zeros"], "self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net": ["<builtin>.len", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "<builtin>.range", "caffe2.python.workspace.RunNetOnce"], "self_binning_histogram_test.TestSelfBinningHistogramBase": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_device_consistency": ["numpy.random.rand", "caffe2.python.core.CreateOperator"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_bin_to_fewer": ["self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net", "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram", "numpy.array"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_bin_to_more": ["self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net", "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram", "numpy.array"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_bin_to_two": ["self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net", "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram", "numpy.array"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_min_max_equal": ["numpy.float", "self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net", "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram", "numpy.array"], "numpy.float": [], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_min_max_equal_nonzero": ["self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net", "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram", "numpy.array"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_empty_input_tensor": ["self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net", "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram", "numpy.array"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_multi_input": ["self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net", "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram", "numpy.array"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_very_small_range_for_stride_underflow": ["self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net", "self_binning_histogram_test.TestSelfBinningHistogramBase._check_histogram", "numpy.array"], "self_binning_histogram_test.TestSelfBinningHistogramBase.test_histogram_insufficient_bins": ["numpy.random.rand", "self_binning_histogram_test.TestSelfBinningHistogramBase._run_single_op_net"], "self_binning_histogram_test.TestSelfBinningHistogramLinear.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__": [], "self_binning_histogram_test.TestSelfBinningHistogramLogarithmic.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "self_binning_histogram_test.TestSelfBinningHistogramLinearFloat.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "self_binning_histogram_test.TestSelfBinningHistogramLogarithmicFloat.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "self_binning_histogram_test.TestSelfBinningHistogramLinearWithAbs.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "self_binning_histogram_test.TestSelfBinningHistogramLogarithmicWithAbs.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "self_binning_histogram_test.TestSelfBinningHistogramLinearFloatWithAbs.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "self_binning_histogram_test.TestSelfBinningHistogramLogarithmicFloatWithAbs.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "self_binning_histogram_test.TestSelfBinningHistogramLinearWithNoneAbs.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "self_binning_histogram_test.TestSelfBinningHistogramLinearFloatWithNoneAbs.__init__": ["self_binning_histogram_test.TestSelfBinningHistogramBase.__init__", "caffe2.python.hypothesis_test_util.HypothesisTestCase.__init__"], "selu_op_test": ["unittest.main"], "selu_op_test.TestSelu": ["hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.settings", "caffe2.python.serialized_test.serialized_test_util.given", "caffe2.python.hypothesis_test_util.tensor"], "selu_op_test.TestSelu.test_selu_1": ["selu_op_test.TestSelu.fix0", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "selu_op_test.TestSelu.fix0": ["numpy.sign"], "selu_op_test.TestSelu.test_selu_1.<lambda1>": ["selu_op_test.TestSelu.selu_ref"], "selu_op_test.TestSelu.selu_ref": ["numpy.exp"], "selu_op_test.TestSelu.test_selu_2": ["selu_op_test.TestSelu.fix0", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "selu_op_test.TestSelu.test_selu_2.<lambda1>": ["selu_op_test.TestSelu.selu_ref"], "selu_op_test.TestSelu.test_selu_3": ["selu_op_test.TestSelu.fix0", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "selu_op_test.TestSelu.test_selu_3.<lambda1>": ["selu_op_test.TestSelu.selu_ref"], "selu_op_test.TestSelu.test_selu_inplace": ["selu_op_test.TestSelu.fix0", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.ones_like", "selu_op_test.TestSelu.selu_ref"], "sequence_ops_test": ["unittest.main"], "sequence_ops_test._gen_test_add_padding": ["hypothesis.strategies.lists", "hypothesis.strategies.tuples", "hypothesis.strategies.integers"], "sequence_ops_test._gen_test_add_padding.gen_with_size": ["hypothesis.strategies.just", "<builtin>.sum", "caffe2.python.hypothesis_test_util.arrays", "numpy.array", "hypothesis.strategies.tuples"], "sequence_ops_test._add_padding_ref": ["numpy.zeros", "numpy.ndarray", "<builtin>.len"], "sequence_ops_test._remove_padding_ref": ["numpy.ndarray", "<builtin>.len"], "sequence_ops_test._gather_padding_ref": ["numpy.zeros", "<builtin>.range"], "sequence_ops_test.TestSequenceOps": ["hypothesis.strategies.integers", "hypothesis.settings", "sequence_ops_test._gen_test_add_padding", "unittest.skip", "caffe2.python.hypothesis_test_util.floats", "hypothesis.strategies.lists", "hypothesis.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.booleans"], "sequence_ops_test.TestSequenceOps.test_add_padding": ["functools.partial", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.array"], "sequence_ops_test.TestSequenceOps._local_test_add_padding_shape_and_type": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.InferShapesAndTypes", "<builtin>.len", "caffe2.python.workspace.FeedBlob", "<builtin>.list", "numpy.array", "caffe2.python.core.Net", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.ResetWorkspace"], "sequence_ops_test.TestSequenceOps.test_add_padding_shape_and_type_3": ["numpy.random.rand", "sequence_ops_test.TestSequenceOps._local_test_add_padding_shape_and_type", "<builtin>.range"], "sequence_ops_test.TestSequenceOps.test_add_padding_shape_and_type_4": ["numpy.random.rand", "sequence_ops_test.TestSequenceOps._local_test_add_padding_shape_and_type", "<builtin>.range"], "sequence_ops_test.TestSequenceOps.test_add_padding_shape_and_type_5": ["numpy.random.rand", "sequence_ops_test.TestSequenceOps._local_test_add_padding_shape_and_type", "<builtin>.range"], "sequence_ops_test.TestSequenceOps.test_add_padding_shape_and_type": ["<builtin>.len", "numpy.random.seed", "<builtin>.sum", "numpy.random.randint", "sequence_ops_test.TestSequenceOps._local_test_add_padding_shape_and_type", "<builtin>.range", "numpy.random.randn"], "sequence_ops_test.TestSequenceOps.test_add_zero_padding": ["functools.partial", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "sequence_ops_test.TestSequenceOps.test_add_padding_no_length": ["functools.partial", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.array"], "sequence_ops_test.TestSequenceOps.test_remove_padding": ["functools.partial", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "sequence_ops_test.TestSequenceOps.test_gather_padding": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "functools.partial", "sequence_ops_test._add_padding_ref", "caffe2.python.core.CreateOperator"], "sequence_ops_test.TestSequenceOps.test_reverse_packed_segs": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.randint"], "sequence_ops_test.TestSequenceOps.test_reverse_packed_segs.op_ref": ["<builtin>.range", "numpy.array"], "sequence_ops_test.TestSequenceOps.test_reverse_packed_segs.op_grad_ref": ["sequence_ops_test.TestSequenceOps.test_reverse_packed_segs.op_ref"], "sequence_ops_test.TestSequenceOps.test_remove_data_blocks": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.array"], "sequence_ops_test.TestSequenceOps.test_remove_data_blocks.op_ref": ["numpy.sort", "numpy.unique", "numpy.delete"], "numpy.delete": [], "sequence_ops_test.TestSequenceOps.test_find_duplicate_elements": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.array"], "sequence_ops_test.TestSequenceOps.test_find_duplicate_elements.op_ref": ["numpy.array", "<builtin>.enumerate"], "shape_inference_test": ["unittest.main"], "shape_inference_test.TestShapeInference.testShapeInferenceSimpleFC": ["caffe2.python.brew.fc", "caffe2.python.model_helper.ModelHelper", "caffe2.python.test_util.TestCase.assertEquals", "caffe2.python.workspace.InferShapesAndTypes"], "shape_inference_test.TestShapeInference.testFCAxis2": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.InferTensorRunAndCompare": ["<builtin>.type", "<builtin>.str", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.CreateNet", "numpy.array", "caffe2.python.test_util.TestCase.assertFalse", "caffe2.python.test_util.TestCase.assertEqual", "numpy.dtype", "caffe2.python.workspace.RunNetOnce", "numpy.array_equal", "caffe2.python.workspace.Blobs"], "shape_inference_test.TestShapeInference.testFCTransposed": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferenceSlice": ["caffe2.python.model_helper.ModelHelper", "numpy.array", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testShapeInferenceDistances": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferenceReduceBackFrontX": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testGather": ["caffe2.python.model_helper.ModelHelper", "numpy.array", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testShapeInferenceConvNet": ["caffe2.python.brew.fc", "caffe2.python.brew.conv", "caffe2.python.brew.softmax", "caffe2.python.brew.dropout", "caffe2.python.model_helper.ModelHelper", "caffe2.python.brew.spatial_bn", "caffe2.python.brew.relu", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.brew.max_pool", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testShapeInferenceTranspose": ["caffe2.python.model_helper.ModelHelper", "numpy.random.permutation", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.brew.transpose", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testShapeInferencePad": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferenceTwoClass": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferencePadZero": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferenceMatMul": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferenceSoftmaxWithLoss": ["numpy.random.randint", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testShapeInferenceIm2Col": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferenceTile": ["caffe2.python.model_helper.ModelHelper", "<builtin>.range", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testShapeInferenceFlatten": ["caffe2.python.model_helper.ModelHelper", "<builtin>.range", "numpy.random.randn", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testShapeInferenceReshape": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferenceUnique": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testLengthsSum": ["caffe2.python.model_helper.ModelHelper", "numpy.array", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testLengthsPad": ["caffe2.python.model_helper.ModelHelper", "numpy.array", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testConcat": ["caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.InferShapesAndTypes"], "shape_inference_test.TestShapeInference.testConcatInt32": ["caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.InferShapesAndTypes"], "shape_inference_test.TestShapeInference.testSqueeze": ["caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.InferShapesAndTypes"], "shape_inference_test.TestShapeInference.testCast": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferenceRoiPool": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testShapeInferencePow": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "shape_inference_test.TestShapeInference.testInt8Conversion": ["caffe2.python.workspace.FetchBlob", "caffe2.python.model_helper.ModelHelper", "numpy.allclose", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testHalfInt8Conversion": ["caffe2.python.workspace.FetchBlob", "caffe2.python.model_helper.ModelHelper", "numpy.allclose", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand", "caffe2.python.workspace.FeedBlob"], "shape_inference_test.TestShapeInference.testLearningRateOp": ["caffe2.python.core.Net", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.workspace.InferShapesAndTypes"], "shape_inference_test.TestShapeInference.testShapeOp": ["caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "shape_inference_test.TestShapeInference.InferTensorRunAndCompare", "numpy.random.rand"], "sinusoid_position_encoding_op_test": [], "sinusoid_position_encoding_op_test.TestSinusoidPositionEncodingOp": ["hypothesis.strategies.floats", "hypothesis.settings", "caffe2.python.hypothesis_test_util.arrays", "hypothesis.strategies.integers", "hypothesis.given"], "sinusoid_position_encoding_op_test.TestSinusoidPositionEncodingOp.test_sinusoid_embedding": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.tile"], "sinusoid_position_encoding_op_test.TestSinusoidPositionEncodingOp.test_sinusoid_embedding.sinusoid_encoding": ["math.pow", "math.cos", "math.sin"], "math.sin": [], "math.cos": [], "sinusoid_position_encoding_op_test.TestSinusoidPositionEncodingOp.test_sinusoid_embedding.sinusoid_embedding_op": ["numpy.zeros", "sinusoid_position_encoding_op_test.TestSinusoidPositionEncodingOp.test_sinusoid_embedding.sinusoid_encoding", "<builtin>.enumerate", "<builtin>.len", "<builtin>.range"], "softmax_ops_test": ["random.seed", "unittest.main"], "softmax_ops_test.TestSoftmaxOps": ["hypothesis.strategies.integers", "hypothesis.given", "unittest.skipIf", "hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.strategies.sampled_from", "caffe2.python.serialized_test.serialized_test_util.given"], "softmax_ops_test.TestSoftmaxOps.test_softmax": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "softmax_ops_test.TestSoftmaxOps.test_softmax.label_softmax": ["<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max"], "softmax_ops_test.TestSoftmaxOps.test_softmax_grad": ["numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "softmax_ops_test.TestSoftmaxOps.test_softmax_grad.label_softmax_grad": ["numpy.dot", "<builtin>.range"], "softmax_ops_test.TestSoftmaxOps.test_softmax_axis": ["numpy.random.randn", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "softmax_ops_test.TestSoftmaxOps.test_softmax_axis.prod", "caffe2.python.core.CreateOperator", "<builtin>.list"], "softmax_ops_test.TestSoftmaxOps.test_softmax_axis.prod": [], "softmax_ops_test.TestSoftmaxOps.test_softmax_axis.label_softmax": ["<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss.label_softmax_crossent": ["<builtin>.float", "numpy.sum", "<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max", "numpy.log"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_axis_2": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_axis_2.label_softmax_crossent": ["<builtin>.float", "<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max", "numpy.log"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_large": ["numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_large.label_softmax_crossent": ["<builtin>.float", "numpy.sum", "<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max", "numpy.log"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_label_prob": ["numpy.sum", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_label_prob.label_softmax_crossent": ["<builtin>.float", "numpy.sum", "<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max", "numpy.log"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_weighted": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_weighted.label_softmax_crossent_weighted": ["numpy.sum", "<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max", "numpy.log"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_label_prob_weighted": ["numpy.sum", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_label_prob_weighted.label_softmax_crossent_weighted": ["numpy.sum", "<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max", "numpy.log"], "softmax_ops_test.TestSoftmaxOps.test_spatial_softmax_with_loss": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "softmax_ops_test.TestSoftmaxOps.test_spatial_softmax_with_loss.label_softmax_crossent_spatial": ["<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.print", "<builtin>.max", "numpy.log"], "softmax_ops_test.TestSoftmaxOps.test_spatial_softmax_with_loss_allignore": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.zeros", "numpy.random.seed", "numpy.random.rand", "<builtin>.print", "caffe2.python.core.CreateOperator"], "softmax_ops_test.TestSoftmaxOps.test_spatial_softmax_with_loss_allignore.label_softmax_crossent_spatial": ["<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max", "numpy.log"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_zero_weight": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.zeros", "numpy.random.seed", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "softmax_ops_test.TestSoftmaxOps.test_softmax_with_loss_zero_weight.label_softmax_crossent": ["<builtin>.sum", "numpy.zeros", "<builtin>.range", "numpy.exp", "<builtin>.max"], "softmax_ops_test.TestSoftmaxOps.test_compare_cpugpu": ["<builtin>.int", "caffe2.python.workspace.FetchBlob", "numpy.random.rand", "<builtin>.range", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceOption", "<builtin>.print", "caffe2.python.core.CreateOperator", "numpy.testing.assert_allclose", "caffe2.python.workspace.RunOperatorOnce"], "softplus_op_test": ["unittest.main"], "softplus_op_test.TestSoftplus": ["hypothesis.given", "hypothesis.settings", "caffe2.python.hypothesis_test_util.tensor"], "softplus_op_test.TestSoftplus.test_softplus": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks"], "sparse_dropout_with_replacement_op_test": [], "sparse_dropout_with_replacement_op_test.SparseDropoutWithReplacementTest": ["hypothesis.given"], "sparse_dropout_with_replacement_op_test.SparseDropoutWithReplacementTest.test_no_dropout": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator", "numpy.array", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertListEqual", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run"], "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertListEqual": [], "sparse_dropout_with_replacement_op_test.SparseDropoutWithReplacementTest.test_all_dropout": ["<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator", "numpy.array", "<builtin>.sum", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "sparse_dropout_with_replacement_op_test.SparseDropoutWithReplacementTest.test_all_dropout_empty_input": ["<builtin>.len", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator", "numpy.array", "<builtin>.sum", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "sparse_gradient_checker_test": ["unittest.main"], "sparse_gradient_checker_test.TestSparseGradient": ["hypothesis.strategies.floats", "hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.given"], "sparse_gradient_checker_test.TestSparseGradient.test_sparse_gradient": ["scipy.sparse.coo_matrix", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "numpy.random.randn"], "sparse_itemwise_dropout_with_replacement_op_test": [], "sparse_itemwise_dropout_with_replacement_op_test.SparseItemwiseDropoutWithReplacementTest": ["hypothesis.given"], "sparse_itemwise_dropout_with_replacement_op_test.SparseItemwiseDropoutWithReplacementTest.test_no_dropout": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertListEqual", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.array"], "sparse_itemwise_dropout_with_replacement_op_test.SparseItemwiseDropoutWithReplacementTest.test_all_dropout": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.len", "numpy.array", "<builtin>.sum"], "sparse_itemwise_dropout_with_replacement_op_test.SparseItemwiseDropoutWithReplacementTest.test_all_dropout_empty_input": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.len", "numpy.array", "<builtin>.sum"], "sparse_lengths_sum_benchmark": ["argparse.ArgumentParser", "caffe2.python.core.GlobalInit", "<builtin>.list", "sparse_lengths_sum_benchmark.benchmark_sparse_lengths_sum"], "sparse_lengths_sum_benchmark.benchmark_sparse_lengths_sum": ["<builtin>.print", "datetime.datetime.now", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.CreateNet", "<builtin>.str", "numpy.concatenate", "caffe2.python.workspace.BenchmarkNet", "numpy.ones", "numpy.random.randint", "numpy.random.randn", "numpy.random.rand", "caffe2.python.workspace.FetchBlob", "numpy.random.seed", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob"], "sparse_lengths_sum_benchmark.benchmark_sparse_lengths_sum.f": ["numpy.random.randint", "<builtin>.int", "numpy.round", "numpy.sum"], "sparse_lp_regularizer_test": [], "sparse_lp_regularizer_test.TestSparseLpNorm.ref_lpnorm": ["numpy.sign", "numpy.ones_like", "numpy.abs"], "sparse_lp_regularizer_test.TestSparseLpNorm": ["hypothesis.strategies.data", "hypothesis.strategies.floats", "hypothesis.given", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.strategies.integers", "hypothesis.settings"], "sparse_lp_regularizer_test.TestSparseLpNorm.test_sparse_lpnorm": ["caffe2.python.core.CreateOperator", "numpy.sort", "caffe2.python.hypothesis_test_util.tensor", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "hypothesis.strategies.sampled_from", "<builtin>.str", "numpy.array_equal", "hypothesis.assume", "numpy.sign", "<builtin>.float", "hypothesis.note", "numpy.arange", "numpy.unique"], "sparse_lp_regularizer_test.TestSparseLpNorm.test_sparse_lpnorm.ref_sparse_lp_regularizer": ["sparse_lp_regularizer_test.TestSparseLpNorm.ref_lpnorm", "<builtin>.enumerate", "numpy.copy"], "sparse_normalize_test": [], "sparse_normalize_test.TestSparseNormalize.ref_normalize": ["numpy.linalg.norm"], "sparse_normalize_test.TestSparseNormalize": ["caffe2.python.hypothesis_test_util.tensors", "hypothesis.strategies.floats", "hypothesis.strategies.data", "hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.settings"], "sparse_normalize_test.TestSparseNormalize.test_sparse_normalize": ["hypothesis.assume", "numpy.sort", "numpy.array_equal", "hypothesis.strategies.sampled_from", "numpy.unique", "caffe2.python.hypothesis_test_util.tensor", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.str", "numpy.sign", "caffe2.python.core.CreateOperator", "numpy.arange", "hypothesis.note"], "sparse_normalize_test.TestSparseNormalize.test_sparse_normalize.ref_sparse_normalize": ["<builtin>.enumerate", "sparse_normalize_test.TestSparseNormalize.ref_normalize", "numpy.copy"], "sparse_ops_test": ["unittest.main"], "sparse_ops_test.TestScatterOps": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.strategies.lists"], "sparse_ops_test.TestScatterOps.testScatterWeightedSum": ["<builtin>.range", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.test_util.rand_array", "numpy.random.randint", "<builtin>.str", "numpy.array", "caffe2.python.core.CreateOperator"], "sparse_ops_test.TestScatterOps.testScatterWeightedSum.ref": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.range"], "sparse_ops_test.TestScatterOps.testScatterAssign": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.test_util.rand_array", "numpy.random.choice"], "sparse_ops_test.TestScatterOps.testScatterAssign.ref": [], "sparse_to_dense_mask_op_test": ["unittest.main"], "sparse_to_dense_mask_op_test.TestFcOperator": ["hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers"], "sparse_to_dense_mask_op_test.TestFcOperator.test_sparse_to_dense_mask": ["numpy.arange", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.sum", "numpy.random.randint", "numpy.random.rand", "numpy.random.shuffle"], "sparse_to_dense_mask_op_test.TestFcOperator.test_sparse_to_dense_mask_with_int64": ["numpy.arange", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.sum", "numpy.random.randint", "numpy.random.rand", "numpy.random.shuffle"], "sparse_to_dense_mask_op_test.TestFcOperator.test_sparse_to_dense_mask_high_dim": ["numpy.arange", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertGradientChecks", "<builtin>.sum", "<builtin>.tuple", "numpy.random.randint", "numpy.random.rand", "numpy.random.shuffle"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_test_mode_3d": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.utils.NCHW2NHWC", "numpy.random.randn", "numpy.random.rand", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_test_mode_3d.reference_spatialbn_test": ["numpy.sqrt"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_test_mode_1d": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "hypothesis.assume", "caffe2.python.hip_test_util.run_in_hip", "caffe2.python.core.CreateOperator", "numpy.random.randn", "numpy.random.rand", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_test_mode_1d.reference_spatialbn_test": ["numpy.sqrt"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_train_mode.batch_norm_ref": ["numpy.mean", "numpy.zeros", "numpy.sqrt", "numpy.var", "<builtin>.float", "numpy.reshape", "numpy.transpose"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_train_mode_gradient_check_1d": ["hypothesis.assume", "caffe2.python.hip_test_util.run_in_hip", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.randn", "numpy.random.rand", "numpy.random.seed"], "spatial_bn_op_test.TestSpatialBN.test_spatial_bn_multi_batch": ["numpy.random.randn", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "spatial_bn_op_test.TestSpatialBN.test_spatial_bn_multi_batch.spatial_bn_multi_batch_ref": ["numpy.square", "numpy.reshape", "numpy.sqrt", "numpy.zeros"], "spatial_bn_op_test.TestSpatialBN.test_spatial_bn_multi_batch_grad": ["numpy.random.randn", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "spatial_bn_op_test.TestSpatialBN.test_spatial_bn_multi_batch_grad.spatial_bn_multi_batch_grad_ref": ["numpy.reshape", "numpy.zeros"], "spatial_bn_op_test.TestSpatialBN.test_spatialbn_brew_wrapper": ["caffe2.python.brew.spatial_bn", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.model_helper.ModelHelper", "numpy.random.rand", "numpy.random.seed"], "specialized_segment_ops_test": ["unittest.main"], "specialized_segment_ops_test.TestSpecializedSegmentOps": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.settings"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_sum_cpu": ["hypothesis.assume", "<builtin>.sum", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.zeros", "caffe2.python.hip_test_util.run_in_hip", "<builtin>.print", "caffe2.python.core.CreateOperator", "numpy.random.randint"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_sum_cpu.sparse_lengths_sum_ref": ["<builtin>.range", "numpy.insert", "<builtin>.float", "numpy.zeros", "<builtin>.len", "numpy.cumsum"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_weightedsum_cpu": ["hypothesis.assume", "<builtin>.sum", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.zeros", "caffe2.python.hip_test_util.run_in_hip", "<builtin>.print", "caffe2.python.core.CreateOperator", "numpy.random.randint"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_weightedsum_cpu.sparse_lengths_weightedsum_ref": ["<builtin>.range", "numpy.insert", "numpy.zeros", "<builtin>.len", "numpy.cumsum"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_weightedsum_8BitsRowwiseOp_cpu": ["<builtin>.sum", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.zeros", "<builtin>.print", "caffe2.python.core.CreateOperator", "numpy.random.randint"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_weightedsum_8BitsRowwiseOp_cpu.sparse_lengths_weightedsum_8BitsRowwiseOp_cpu_ref": ["<builtin>.range", "numpy.insert", "<builtin>.float", "numpy.zeros", "<builtin>.len", "numpy.cumsum"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_sum_8BitsRowwiseOp_cpu": ["<builtin>.sum", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "numpy.random.rand", "numpy.zeros", "<builtin>.print", "caffe2.python.core.CreateOperator", "numpy.random.randint"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_sum_8BitsRowwiseOp_cpu.sparse_lengths_sum_8BitsRowwiseOp_cpu_reg": ["<builtin>.range", "numpy.insert", "<builtin>.float", "numpy.zeros", "<builtin>.len", "numpy.cumsum"], "specialized_segment_ops_test.TestSpecializedSegmentOps.test_sparse_lengths_sum_8BitsRowwiseOp_cpu_invalid_index": ["<builtin>.sum", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertRaises", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.random.randint"], "square_root_divide_op_test": ["unittest.main"], "square_root_divide_op_test._data_and_scale": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.tuples", "hypothesis.strategies.integers"], "square_root_divide_op_test._data_and_scale.<lambda1>": ["caffe2.python.hypothesis_test_util.floats", "caffe2.python.hypothesis_test_util.arrays", "hypothesis.strategies.tuples", "hypothesis.strategies.integers"], "square_root_divide_op_test.divide_by_square_root": ["math.sqrt", "<builtin>.range", "numpy.copy", "numpy.multiply", "<builtin>.len"], "square_root_divide_op_test.grad": ["square_root_divide_op_test.divide_by_square_root"], "square_root_divide_op_test.TestSquareRootDivide": ["caffe2.python.serialized_test.serialized_test_util.given", "square_root_divide_op_test._data_and_scale"], "square_root_divide_op_test.TestSquareRootDivide.test_square_root_divide": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.list", "functools.partial"], "stats_ops_test": [], "stats_ops_test.TestCounterOps.test_stats_ops": ["caffe2.python.workspace.FetchBlob", "<builtin>.len", "numpy.array", "<builtin>.range", "caffe2.python.test_util.TestCase.assertEqual", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertIn", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "stats_put_ops_test": [], "stats_put_ops_test.TestPutOps.test_default_value": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "<builtin>.zip", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertIn", "<builtin>.dict", "caffe2.python.test_util.TestCase.assertEquals", "<builtin>.int"], "stats_put_ops_test.TestPutOps.test_clamp": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "<builtin>.zip", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertIn", "<builtin>.dict", "caffe2.python.test_util.TestCase.assertEquals", "<builtin>.int"], "stats_put_ops_test.TestPutOps.test_clamp_with_out_of_bounds": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "<builtin>.float", "<builtin>.zip", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertIn", "<builtin>.dict", "caffe2.python.test_util.TestCase.assertEquals"], "stats_put_ops_test.TestPutOps.test_avg_put_ops": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "<builtin>.zip", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertIn", "<builtin>.dict", "caffe2.python.test_util.TestCase.assertEquals"], "stats_put_ops_test.TestPutOps.test_increment_put_ops": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "<builtin>.zip", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertIn", "<builtin>.dict", "caffe2.python.test_util.TestCase.assertEquals"], "stats_put_ops_test.TestPutOps.test_stddev_put_ops": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "numpy.array", "<builtin>.zip", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "caffe2.python.test_util.TestCase.assertIn", "<builtin>.dict", "caffe2.python.test_util.TestCase.assertEquals"], "storm_test": [], "storm_test.TestStorm": ["caffe2.python.hypothesis_test_util.tensors", "hypothesis.settings", "hypothesis.given", "hypothesis.strategies.floats", "hypothesis.strategies.data"], "storm_test.TestStorm.test_storm_dense": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "functools.partial", "numpy.array"], "storm_test.TestStorm.test_storm_dense.ref_dense": ["numpy.power", "numpy.sum", "numpy.square"], "storm_test.TestStorm.test_storm_sparse": ["functools.partial", "numpy.random.randint", "numpy.array", "numpy.random.choice", "numpy.arange", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "storm_test.TestStorm.test_storm_sparse.ref_sparse": ["numpy.copy", "numpy.power", "numpy.sum", "numpy.square", "<builtin>.enumerate"], "storm_test.TestStorm.test_storm_sparse_empty": ["functools.partial", "numpy.empty", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks"], "storm_test.TestStorm.test_storm_sparse_empty.ref_sparse_empty": ["numpy.copy"], "string_ops_test": ["unittest.main"], "string_ops_test._string_lists": ["hypothesis.strategies.text", "hypothesis.strategies.lists"], "string_ops_test.TestStringOps": ["hypothesis.settings", "string_ops_test._string_lists", "hypothesis.strategies.text", "hypothesis.given"], "string_ops_test.TestStringOps.test_string_prefix": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "string_ops_test.TestStringOps.test_string_prefix.string_prefix_ref": ["numpy.array"], "string_ops_test.TestStringOps.test_string_suffix": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "string_ops_test.TestStringOps.test_string_suffix.string_suffix_ref": ["numpy.array"], "string_ops_test.TestStringOps.test_string_starts_with": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.str", "numpy.array", "caffe2.python.core.CreateOperator"], "string_ops_test.TestStringOps.test_string_starts_with.string_starts_with_ref": ["numpy.array"], "string_ops_test.TestStringOps.test_string_ends_with": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.str", "numpy.array", "caffe2.python.core.CreateOperator"], "string_ops_test.TestStringOps.test_string_ends_with.string_ends_with_ref": ["numpy.array"], "string_ops_test.TestStringOps.test_string_equals": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.str", "numpy.array", "caffe2.python.core.CreateOperator"], "string_ops_test.TestStringOps.test_string_equals.string_equals_ref": ["numpy.array"], "text_file_reader_test": ["unittest.main"], "text_file_reader_test.TestTextFileReader.test_text_file_reader": ["<builtin>.list", "caffe2.python.schema.Struct", "<builtin>.len", "numpy.array", "caffe2.python.schema.FetchRecord", "numpy.testing.assert_array_equal", "numpy.tile", "numpy.testing.assert_array_almost_equal", "<builtin>.str", "<builtin>.zip", "caffe2.python.schema.Scalar", "caffe2.python.workspace.RunNetOnce", "numpy.append", "tempfile.NamedTemporaryFile", "caffe2.python.text_file_reader.TextFileReader", "<builtin>.range", "caffe2.python.core.Net", "caffe2.python.workspace.FetchBlob"], "caffe2.python.text_file_reader.TextFileReader": [], "thresholded_relu_op_test": ["unittest.main"], "thresholded_relu_op_test.TestThresholdedRelu": ["caffe2.python.serialized_test.serialized_test_util.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.floats", "hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.given"], "thresholded_relu_op_test.TestThresholdedRelu.test_thresholded_relu_1": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "thresholded_relu_op_test.TestThresholdedRelu.test_thresholded_relu_1.defaultRef": ["numpy.copy"], "thresholded_relu_op_test.TestThresholdedRelu.test_thresholded_relu_2": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "thresholded_relu_op_test.TestThresholdedRelu.test_thresholded_relu_2.ref": ["numpy.copy"], "thresholded_relu_op_test.TestThresholdedRelu.test_thresholded_relu_3": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "<builtin>.float", "thresholded_relu_op_test.TestThresholdedRelu.fix_input"], "thresholded_relu_op_test.TestThresholdedRelu.fix_input": ["numpy.sign"], "tile_op_test": ["unittest.main"], "tile_op_test.TestTile": ["unittest.skipIf", "hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers"], "tile_op_test.TestTile.test_tile": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand"], "tile_op_test.TestTile.test_tile.tile_ref": ["numpy.asarray", "numpy.tile"], "tile_op_test.TestTile.test_tile_grad": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand"], "tile_op_test.TestTile.test_tile_grad.tile_ref": ["numpy.asarray", "numpy.tile"], "tile_op_test.TestTile.test_tilewinput": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "numpy.array"], "tile_op_test.TestTile.test_tilewinput.tile_ref": ["numpy.asarray", "numpy.tile"], "top_k_test": [], "top_k_test.TestTopK.top_k_ref": ["<builtin>.range", "<builtin>.len", "numpy.ndarray", "<builtin>.sorted", "<builtin>.tuple", "<builtin>.list"], "top_k_test.TestTopK.top_k_ref.<lambda1>": [], "top_k_test.TestTopK": ["hypothesis.given", "caffe2.python.serialized_test.serialized_test_util.given", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.strategies.integers"], "top_k_test.TestTopK.test_top_k": ["numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.seed", "caffe2.python.core.CreateOperator"], "top_k_test.TestTopK.test_top_k.bind_ref": ["top_k_test.TestTopK.top_k_ref"], "top_k_test.TestTopK.test_top_k_1": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "top_k_test.TestTopK.test_top_k_1.bind_ref": ["top_k_test.TestTopK.top_k_ref"], "top_k_test.TestTopK.test_top_k_2": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "top_k_test.TestTopK.test_top_k_2.bind_ref": ["top_k_test.TestTopK.top_k_ref"], "top_k_test.TestTopK.test_top_k_3": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "top_k_test.TestTopK.test_top_k_3.bind_ref": ["top_k_test.TestTopK.top_k_ref"], "top_k_test.TestTopK.test_top_k_4": ["numpy.random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "top_k_test.TestTopK.test_top_k_4.bind_ref": ["top_k_test.TestTopK.top_k_ref"], "top_k_test.TestTopK.test_top_k_5": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "top_k_test.TestTopK.test_top_k_5.bind_ref": ["top_k_test.TestTopK.top_k_ref"], "top_k_test.TestTopK.test_top_k_6": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "top_k_test.TestTopK.test_top_k_6.bind_ref": ["top_k_test.TestTopK.top_k_ref"], "top_k_test.TestTopK.test_top_k_axis": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "<builtin>.len", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "top_k_test.TestTopK.test_top_k_axis.bind_ref": ["top_k_test.TestTopK.top_k_ref"], "top_k_test.TestTopK.test_top_k_grad": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.shuffle", "numpy.arange", "<builtin>.range", "<builtin>.len", "caffe2.python.core.CreateOperator"], "torch_integration_test": ["numpy.vectorize", "unittest.main"], "torch_integration_test.generate_rois": ["numpy.random.uniform", "numpy.maximum", "<builtin>.enumerate", "numpy.vstack", "<builtin>.len", "numpy.empty", "numpy.minimum"], "torch_integration_test.generate_rois_rotated": ["numpy.empty", "torch_integration_test.generate_rois", "numpy.random.uniform"], "torch_integration_test.create_bbox_transform_inputs": ["numpy.random.randint", "torch_integration_test.generate_rois", "numpy.random.randn", "<builtin>.len", "torch_integration_test.generate_rois_rotated", "numpy.zeros", "<builtin>.sum"], "torch_integration_test.bytes_to_floats": ["<builtin>.bytearray", "struct.unpack", "<builtin>.enumerate", "numpy.shape", "numpy.empty"], "torch_integration_test.floats_to_bytes": ["<builtin>.ord", "struct.pack", "<builtin>.enumerate", "<builtin>.list", "numpy.shape", "<builtin>.isinstance", "numpy.empty"], "torch_integration_test.fused_rowwise_8bit_quantize_reference": ["numpy.max", "numpy.concatenate", "torch_integration_test.floats_to_bytes", "numpy.min"], "torch_integration_test.fused_rowwise_8bit_quantize_dequantize_reference": ["torch_integration_test.fused_rowwise_8bit_quantize_reference", "torch_integration_test.bytes_to_floats"], "torch_integration_test.TorchIntegration": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.strategies.lists", "unittest.skipIf", "caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.floats", "caffe2.python.hypothesis_test_util.lengths_tensor", "hypothesis.strategies.sampled_from", "hypothesis.settings"], "torch_integration_test.TorchIntegration.test_bbox_transform": ["torch.tensor", "torch.testing.assert_allclose", "torch_integration_test.create_bbox_transform_inputs", "torch_integration_test.TorchIntegration.test_bbox_transform.bbox_transform_ref", "torch.ops._caffe2.BBoxTransform"], "torch_integration_test.TorchIntegration.test_bbox_transform.bbox_transform_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.BBoxTransform": [], "torch_integration_test.TorchIntegration.test_box_with_nms_limits": ["torch.tensor", "<builtin>.int", "torch.testing.assert_allclose", "torch_integration_test.TorchIntegration.test_box_with_nms_limits.box_with_nms_limit_ref", "<builtin>.float", "<builtin>.zip", "torch_integration_test.create_bbox_transform_inputs", "numpy.random.randn", "torch.ops._caffe2.BoxWithNMSLimit", "<builtin>.sum", "torch.ops._caffe2.BBoxTransform"], "torch_integration_test.TorchIntegration.test_box_with_nms_limits.box_with_nms_limit_ref": ["caffe2.python.core.CreateOperator", "<builtin>.float", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "<builtin>.int"], "torch.ops._caffe2.BoxWithNMSLimit": [], "torch_integration_test.TorchIntegration.test_sparse_to_dense_mask": ["torch.tensor", "numpy.array", "torch.testing.assert_allclose", "numpy.random.rand", "torch_integration_test.TorchIntegration.test_sparse_to_dense_mask.sparse_to_dense_mask_ref", "numpy.zeros", "torch.ops._caffe2.SparseToDenseMask", "<builtin>.range"], "torch_integration_test.TorchIntegration.test_sparse_to_dense_mask.sparse_to_dense_mask_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.SparseToDenseMask": [], "torch_integration_test.TorchIntegration.test_generate_proposals": ["torch.tensor", "torch.ops._caffe2.GenerateProposals", "torch.testing.assert_allclose", "numpy.linspace", "numpy.ones", "torch_integration_test.TorchIntegration.test_generate_proposals.generate_proposals_ref"], "torch_integration_test.TorchIntegration.test_generate_proposals.generate_proposals_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.GenerateProposals": [], "torch_integration_test.TorchIntegration.test_inference_lstm": ["torch.tensor", "torch.testing.assert_allclose", "torch_integration_test.TorchIntegration.test_inference_lstm.inference_lstm_ref", "torch.from_numpy", "numpy.random.randn", "numpy.zeros", "torch.nn.LSTM", "torch.ops._caffe2.InferenceLSTM"], "torch_integration_test.TorchIntegration.test_inference_lstm.inference_lstm_ref": ["caffe2.python.core.CreateOperator", "<builtin>.enumerate", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.InferenceLSTM": [], "torch_integration_test.TorchIntegration.test_generate_proposals_cuda": ["torch.tensor", "torch.ops._caffe2.GenerateProposals", "torch.testing.assert_allclose", "numpy.linspace", "numpy.ones", "torch_integration_test.TorchIntegration.test_generate_proposals_cuda.generate_proposals_ref"], "torch_integration_test.TorchIntegration.test_generate_proposals_cuda.generate_proposals_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch_integration_test.TorchIntegration._test_roi_align": ["torch.tensor", "numpy.array", "torch.testing.assert_allclose", "torch_integration_test.TorchIntegration._test_roi_align.roi_align_ref", "torch_integration_test.TorchIntegration._test_roi_align.rand_roi", "numpy.random.randn", "torch.ops._caffe2.RoIAlign", "<builtin>.range"], "torch_integration_test.TorchIntegration._test_roi_align.rand_roi": ["numpy.array", "numpy.random.rand", "<builtin>.float", "<builtin>.int"], "torch_integration_test.TorchIntegration._test_roi_align.roi_align_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.RoIAlign": [], "torch_integration_test.TorchIntegration.test_roi_align_cpu": ["torch_integration_test.TorchIntegration._test_roi_align"], "torch_integration_test.TorchIntegration.test_roi_align_cuda": ["torch_integration_test.TorchIntegration._test_roi_align"], "torch_integration_test.TorchIntegration._test_roi_align_rotated": ["torch.tensor", "torch.ops._caffe2.RoIAlignRotated", "numpy.array", "torch_integration_test.TorchIntegration._test_roi_align_rotated.rand_rotated_roi", "torch.testing.assert_allclose", "torch_integration_test.TorchIntegration._test_roi_align_rotated.roi_align_ref", "numpy.random.randn", "<builtin>.range"], "torch_integration_test.TorchIntegration._test_roi_align_rotated.rand_rotated_roi": ["numpy.array", "numpy.random.rand", "<builtin>.float", "<builtin>.int"], "torch_integration_test.TorchIntegration._test_roi_align_rotated.roi_align_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.RoIAlignRotated": [], "torch_integration_test.TorchIntegration.test_roi_align_rotated_cpu": ["torch_integration_test.TorchIntegration._test_roi_align_rotated"], "torch_integration_test.TorchIntegration.test_roi_align_rotated_cuda": ["torch_integration_test.TorchIntegration._test_roi_align_rotated"], "torch_integration_test.TorchIntegration.test_collect_and_distribute_fpn_rpn_proposals_op": ["torch.tensor", "numpy.random.randint", "torch.ops._caffe2.CollectAndDistributeFpnRpnProposals", "torch.ops._caffe2.CollectRpnProposals", "torch.testing.assert_allclose", "<builtin>.zip", "torch_integration_test.generate_rois", "torch.ops._caffe2.DistributeFpnProposals", "<builtin>.len", "torch.rand", "<builtin>.sum", "<builtin>.range"], "torch.ops._caffe2.CollectRpnProposals": [], "torch.ops._caffe2.DistributeFpnProposals": [], "torch.ops._caffe2.CollectAndDistributeFpnRpnProposals": [], "torch_integration_test.TorchIntegration._test_gelu_op": ["torch.tensor", "torch_integration_test.TorchIntegration._test_gelu_op._gelu_ref", "torch.ops._caffe2.Gelu", "torch.testing.assert_allclose"], "torch_integration_test.TorchIntegration._test_gelu_op._gelu_ref": ["scipy.stats.norm.cdf"], "torch.ops._caffe2.Gelu": [], "torch_integration_test.TorchIntegration.test_gelu_op": ["torch_integration_test.TorchIntegration._test_gelu_op"], "torch_integration_test.TorchIntegration.test_gelu_op_cuda": ["torch_integration_test.TorchIntegration._test_gelu_op"], "torch_integration_test.TorchIntegration._test_lengths_op": ["torch.tensor", "torch.testing.assert_allclose", "torch_integration_test.TorchIntegration._test_lengths_op._lengths_ref"], "torch_integration_test.TorchIntegration._test_lengths_op._lengths_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch_integration_test.TorchIntegration._test_lengths_sum_op": ["torch_integration_test.TorchIntegration._test_lengths_op"], "torch_integration_test.TorchIntegration.test_lengths_sum_op": ["torch_integration_test.TorchIntegration._test_lengths_sum_op"], "torch_integration_test.TorchIntegration.test_lengths_sum_op_cuda": ["torch_integration_test.TorchIntegration._test_lengths_sum_op"], "torch_integration_test.TorchIntegration._test_lengths_mean_op": ["torch_integration_test.TorchIntegration._test_lengths_op"], "torch_integration_test.TorchIntegration.test_lengths_mean_op": ["torch_integration_test.TorchIntegration._test_lengths_mean_op"], "torch_integration_test.TorchIntegration.test_lengths_mean_op_cuda": ["torch_integration_test.TorchIntegration._test_lengths_mean_op"], "torch_integration_test.TorchIntegration._test_lengths_max_op": ["torch_integration_test.TorchIntegration._test_lengths_op"], "torch_integration_test.TorchIntegration.test_lengths_max_op": ["torch_integration_test.TorchIntegration._test_lengths_max_op"], "torch_integration_test.TorchIntegration.test_lengths_max_op_cuda": ["torch_integration_test.TorchIntegration._test_lengths_max_op"], "torch_integration_test.TorchIntegration._test_resize_nearest_op": ["torch.tensor", "torch_integration_test.TorchIntegration._test_resize_nearest_op._resize_nearest_ref", "torch.ops._caffe2.ResizeNearest", "torch.testing.assert_allclose", "numpy.random.rand"], "torch_integration_test.TorchIntegration._test_resize_nearest_op._resize_nearest_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.ResizeNearest": [], "torch_integration_test.TorchIntegration.test_resize_nearest_op_cpu": ["torch_integration_test.TorchIntegration._test_resize_nearest_op"], "torch_integration_test.TorchIntegration.test_resize_nearest_op_cuda": ["torch_integration_test.TorchIntegration._test_resize_nearest_op"], "torch_integration_test.TorchIntegration.test_Fused8BitRowwiseQuantizedToFloat": ["caffe2.python.core.CreateOperator", "torch.tensor", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "torch_integration_test.fused_rowwise_8bit_quantize_dequantize_reference", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_array_almost_equal", "torch.ops._caffe2.Fused8BitRowwiseQuantizedToFloat"], "torch.ops._caffe2.Fused8BitRowwiseQuantizedToFloat": [], "torch_integration_test.TorchIntegration.test_piecewise_linear_op": ["torch.tensor", "numpy.sort", "torch.testing.assert_allclose", "torch_integration_test.TorchIntegration.test_piecewise_linear_op._piecewise_linear_ref", "numpy.random.rand", "numpy.zeros", "torch.ops._caffe2.PiecewiseLinearTransform"], "torch_integration_test.TorchIntegration.test_piecewise_linear_op._piecewise_linear_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.PiecewiseLinearTransform": [], "torch_integration_test.TorchIntegration.test_alias_with_name_is_in_place": ["torch.tensor", "torch.ops._caffe2.AliasWithName", "torch.testing.assert_allclose"], "torch.ops._caffe2.AliasWithName": [], "torch_integration_test.TorchIntegration.test_copy_between_cpu_and_gpu": ["torch.tensor", "torch.testing.assert_allclose", "torch.ops._caffe2.CopyGPUToCPU", "torch.ops._caffe2.CopyCPUToGPU"], "torch.ops._caffe2.CopyCPUToGPU": [], "torch.ops._caffe2.CopyGPUToCPU": [], "torch_integration_test.TorchIntegration.test_index_hash_op": ["torch.tensor", "numpy.random.randint", "torch.ops._caffe2.IndexHash", "torch_integration_test.TorchIntegration.test_index_hash_op._index_hash_ref", "torch.testing.assert_allclose"], "torch_integration_test.TorchIntegration.test_index_hash_op._index_hash_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.IndexHash": [], "torch_integration_test.TorchIntegration.test_bucketize_op": ["torch.tensor", "torch.ops._caffe2.Bucketize", "numpy.array", "torch.testing.assert_allclose", "numpy.random.rand", "torch_integration_test.TorchIntegration.test_bucketize_op._bucketize_ref"], "torch_integration_test.TorchIntegration.test_bucketize_op._bucketize_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.Bucketize": [], "torch_integration_test.TorchIntegration.test_logit": ["torch.tensor", "torch.testing.assert_allclose", "torch.ops._caffe2.Logit", "torch_integration_test.TorchIntegration.test_logit.ref"], "torch_integration_test.TorchIntegration.test_logit.ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.Logit": [], "torch_integration_test.TorchIntegration.test_percentile": ["torch.tensor", "numpy.array", "torch.testing.assert_allclose", "torch_integration_test.TorchIntegration.test_percentile._percentile_ref", "torch.ops._caffe2.Percentile"], "torch_integration_test.TorchIntegration.test_percentile._percentile_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.Percentile": [], "torch_integration_test.TorchIntegration.test_batch_bucket_one_hot_op": ["torch.tensor", "numpy.array", "torch.ops._caffe2.BatchBucketOneHot", "torch.testing.assert_allclose", "torch_integration_test.TorchIntegration.test_batch_bucket_one_hot_op._batch_bucket_one_hot_ref"], "torch_integration_test.TorchIntegration.test_batch_bucket_one_hot_op._batch_bucket_one_hot_ref": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.BatchBucketOneHot": [], "torch_integration_test.TorchIntegration.test_gather_ranges_to_dense_op": ["caffe2.python.core.CreateOperator", "numpy.array", "<builtin>.len", "torch.ops._caffe2.GatherRangesToDense", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "torch.from_numpy", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "numpy.testing.assert_array_almost_equal", "<builtin>.range"], "torch.ops._caffe2.GatherRangesToDense": [], "torch_integration_test.TorchIntegration.test_merge_id_lists": ["torch.tensor", "numpy.array", "torch.testing.assert_allclose", "numpy.arange", "torch_integration_test.TorchIntegration.test_merge_id_lists._merge_id_lists", "numpy.random.choice", "torch.ops._caffe2.MergeIdLists"], "torch_integration_test.TorchIntegration.test_merge_id_lists._merge_id_lists": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob"], "torch.ops._caffe2.MergeIdLists": [], "torch_integration_test.TorchIntegration.test_learning_rate": ["torch.tensor", "torch.ops._caffe2.LearningRate", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertAlmostEqual"], "torch.ops._caffe2.LearningRate": [], "torch_integration_test.TorchIntegration.test_pack_segments": ["torch.tensor", "torch.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "torch.ops._caffe2.UnpackSegments", "torch.ops._caffe2.PackSegments", "torch.rand"], "torch.ops._caffe2.PackSegments": [], "torch.ops._caffe2.UnpackSegments": [], "transpose_op_test.TestTransposeOp": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.given", "unittest.skipIf", "hypothesis.settings"], "transpose_op_test.TestTransposeOp.test_transpose": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.arange", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.shuffle"], "transpose_op_test.TestTransposeOp.test_transpose.transpose_ref": ["numpy.transpose"], "transpose_op_test.TestTransposeOp.test_transpose_large_matrix": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "transpose_op_test.TestTransposeOp.test_transpose_large_matrix.transpose_ref": ["numpy.transpose"], "transpose_op_test.TestTransposeOp.test_transpose_cudnn": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.arange", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.random.shuffle"], "transpose_op_test.TestTransposeOp.test_transpose_cudnn.transpose_ref": ["numpy.transpose"], "trigonometric_op_test": ["unittest.main"], "trigonometric_op_test.TestTrigonometricOp": ["caffe2.python.hypothesis_test_util.tensor", "hypothesis.given", "hypothesis.settings", "caffe2.python.hypothesis_test_util.floats"], "trigonometric_op_test.TestTrigonometricOp.test_acos": ["trigonometric_op_test.TestTrigonometricOp.assertTrigonometricChecks"], "trigonometric_op_test.TestTrigonometricOp.test_acos.<lambda1>": ["numpy.arccos"], "numpy.arccos": [], "trigonometric_op_test.TestTrigonometricOp.assertTrigonometricChecks": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "trigonometric_op_test.TestTrigonometricOp.test_asin": ["trigonometric_op_test.TestTrigonometricOp.assertTrigonometricChecks"], "trigonometric_op_test.TestTrigonometricOp.test_asin.<lambda1>": ["numpy.arcsin"], "numpy.arcsin": [], "trigonometric_op_test.TestTrigonometricOp.test_atan": ["trigonometric_op_test.TestTrigonometricOp.assertTrigonometricChecks"], "trigonometric_op_test.TestTrigonometricOp.test_atan.<lambda1>": ["numpy.arctan"], "numpy.arctan": [], "trigonometric_op_test.TestTrigonometricOp.test_tan": ["trigonometric_op_test.TestTrigonometricOp.assertTrigonometricChecks"], "trigonometric_op_test.TestTrigonometricOp.test_tan.<lambda1>": ["numpy.tan"], "numpy.tan": [], "unique_ops_test": ["unittest.main"], "unique_ops_test._unique_ref": ["numpy.unique"], "unique_ops_test.TestUniqueOps": ["hypothesis.strategies.integers", "hypothesis.given", "caffe2.python.hypothesis_test_util.tensor1d", "hypothesis.settings", "hypothesis.strategies.booleans"], "unique_ops_test.TestUniqueOps.test_unique_op": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "functools.partial", "numpy.sort", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "unique_uniform_fill_op_test": ["unittest.main"], "unique_uniform_fill_op_test.TestUniqueUniformFillOp": ["hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.lists"], "unique_uniform_fill_op_test.TestUniqueUniformFillOp.test_unique_uniform_int_fill": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "<builtin>.set", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.Net", "numpy.array", "<builtin>.len"], "unsafe_coalesce_test": [], "unsafe_coalesce_test.TestUnsafeCoalesceOp": ["hypothesis.strategies.integers", "hypothesis.strategies.lists", "hypothesis.given"], "unsafe_coalesce_test.TestUnsafeCoalesceOp.test_unsafe_coalesce_op": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "<builtin>.range", "caffe2.python.workspace.ResetWorkspace", "numpy.random.random"], "unsafe_coalesce_test.TestUnsafeCoalesceOp.test_unsafe_coalesce_op.reference_func": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEquals", "<builtin>.len", "<builtin>.list", "numpy.concatenate"], "unsafe_coalesce_test.TestUnsafeCoalesceOp.test_unsafe_coalesce_op_blob_sharing": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertTrue", "<builtin>.range", "numpy.testing.assert_almost_equal", "numpy.concatenate", "caffe2.python.workspace.ResetWorkspace", "numpy.random.random", "<builtin>.zip", "numpy.random.seed"], "upsample_op_test": ["unittest.main"], "upsample_op_test.TestUpSample": ["hypothesis.strategies.just", "hypothesis.settings", "hypothesis.strategies.floats", "hypothesis.strategies.integers", "hypothesis.given"], "upsample_op_test.TestUpSample.test_upsample": ["caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.seed"], "upsample_op_test.TestUpSample.test_upsample.ref": ["numpy.random.rand", "<builtin>.float", "<builtin>.range", "<builtin>.int", "numpy.int32"], "upsample_op_test.TestUpSample.test_upsample_grad": ["caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.int32", "numpy.random.seed"], "upsample_op_test.TestUpSample.test_upsample_grad.ref": ["numpy.zeros_like", "<builtin>.range", "<builtin>.int", "<builtin>.float"], "utility_ops_test": [], "utility_ops_test.TestUtilityOps": ["caffe2.python.hypothesis_test_util.tensor", "caffe2.python.serialized_test.serialized_test_util.given", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.booleans", "caffe2.python.hypothesis_test_util.lengths_tensor", "hypothesis.strategies.integers", "hypothesis.settings"], "utility_ops_test.TestUtilityOps.test_slice": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "random.randint", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "utility_ops_test.TestUtilityOps.test_slice.slice_ref": ["<builtin>.slice"], "utility_ops_test.TestUtilityOps.test_resize_like": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.zeros", "caffe2.python.core.CreateOperator"], "utility_ops_test.TestUtilityOps.test_resize_like.resize_like": [], "utility_ops_test.TestUtilityOps.test_transpose": ["numpy.random.permutation", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "hypothesis.assume", "numpy.random.rand", "caffe2.python.workspace.GetCuDNNVersion", "<builtin>.list", "<builtin>.int", "caffe2.python.core.CreateOperator", "numpy.random.seed"], "utility_ops_test.TestUtilityOps.test_transpose.transpose_ref": ["numpy.transpose"], "utility_ops_test.TestUtilityOps.test_nan_check": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "numpy.random.rand", "<builtin>.float", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertTrue", "numpy.random.randint", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks"], "utility_ops_test.TestUtilityOps.test_nan_check.nan_reference": ["numpy.isnan", "numpy.array"], "utility_ops_test.TestUtilityOps.test_elementwise_max": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "utility_ops_test.TestUtilityOps.test_elementwise_max.max_op": ["numpy.maximum"], "utility_ops_test.TestUtilityOps.test_elementwise_max_grad": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.maximum", "numpy.random.rand", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator"], "utility_ops_test.TestUtilityOps.test_elementwise_max_grad.max_grad_op": ["utility_ops_test.TestUtilityOps.test_elementwise_max_grad.max_grad_op.mx_grad"], "utility_ops_test.TestUtilityOps.test_elementwise_max_grad.max_grad_op.mx_grad": [], "utility_ops_test.TestUtilityOps.test_elementwise_min": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand"], "utility_ops_test.TestUtilityOps.test_elementwise_min.min_op": ["numpy.minimum"], "utility_ops_test.TestUtilityOps.test_elementwise_min_grad": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.minimum"], "utility_ops_test.TestUtilityOps.test_elementwise_min_grad.min_grad_op": ["utility_ops_test.TestUtilityOps.test_elementwise_min_grad.min_grad_op.mx_grad"], "utility_ops_test.TestUtilityOps.test_elementwise_min_grad.min_grad_op.mx_grad": [], "utility_ops_test.TestUtilityOps.test_sum": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.str", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "numpy.random.rand", "<builtin>.range", "numpy.random.seed", "<builtin>.vars"], "utility_ops_test.TestUtilityOps.test_sum.sum_op_ref": ["<builtin>.range", "numpy.zeros"], "utility_ops_test.TestUtilityOps.<lambda1>": ["hypothesis.strategies.just", "<builtin>.len", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.arrays", "hypothesis.strategies.tuples"], "utility_ops_test.TestUtilityOps.<lambda2>": ["hypothesis.strategies.just", "<builtin>.len", "caffe2.python.hypothesis_test_util.dims", "hypothesis.strategies.tuples"], "utility_ops_test.TestUtilityOps.test_lengths_gather": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator"], "utility_ops_test.TestUtilityOps.test_lengths_gather.lengths_gather_op": ["numpy.cumsum", "<builtin>.list", "numpy.concatenate"], "utility_ops_test.TestUtilityOps.test_lengths_to_ranges": ["caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertEqual", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "<builtin>.list", "caffe2.python.core.CreateOperator"], "utility_ops_test.TestUtilityOps.test_lengths_to_ranges.lengths_to_ranges_op": ["numpy.cumsum", "numpy.append", "<builtin>.zip"], "utility_ops_test.TestUtilityOps.test_size_op": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "caffe2.python.core.CreateOperator"], "utility_ops_test.TestUtilityOps.test_size_op.size_op": ["numpy.prod"], "utility_ops_test.TestUtilityOps.test_alias_op": ["caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_array_equal", "caffe2.python.core.CreateOperator", "numpy.arange"], "utility_ops_test.TestUtilityOps.test_range": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.array", "<builtin>.len", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaisesRegex", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.float32"], "utility_ops_test.TestUtilityOps.test_range.<lambda1>": ["numpy.arange"], "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertRaisesRegex": [], "utility_ops_test.TestUtilityOps.test_range.<lambda2>": ["numpy.arange"], "video_input_op_test": ["unittest.main", "unittest.SkipTest"], "video_input_op_test.VideoInputOpTest.create_a_list": ["<builtin>.range", "<builtin>.open"], "video_input_op_test.VideoInputOpTest.create_video_db": ["<builtin>.int", "<builtin>.len", "caffe2.proto.caffe2_pb2.TensorProtos", "sys.getsizeof", "<builtin>.open", "lmdb.open"], "sys.getsizeof": [], "video_input_op_test.VideoInputOpTest.test_rgb_with_temporal_jittering": ["video_input_op_test.VideoInputOpTest.create_a_list", "video_input_op_test.VideoInputOpTest.create_video_db", "tempfile.NamedTemporaryFile", "tempfile.mkdtemp", "os.path.exists", "unittest.SkipTest", "numpy.random.randint", "numpy.testing.assert_equal", "os.remove", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FetchBlob", "shutil.rmtree", "caffe2.python.workspace.RunNetOnce"], "video_input_op_test.VideoInputOpTest.test_rgb_with_uniform_sampling": ["video_input_op_test.VideoInputOpTest.create_a_list", "video_input_op_test.VideoInputOpTest.create_video_db", "tempfile.NamedTemporaryFile", "tempfile.mkdtemp", "os.path.exists", "unittest.SkipTest", "numpy.random.randint", "numpy.testing.assert_equal", "os.remove", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FetchBlob", "shutil.rmtree", "caffe2.python.workspace.RunNetOnce"], "video_input_op_test.VideoInputOpTest.test_optical_flow_with_temporal_jittering": ["video_input_op_test.VideoInputOpTest.create_a_list", "video_input_op_test.VideoInputOpTest.create_video_db", "tempfile.NamedTemporaryFile", "tempfile.mkdtemp", "os.path.exists", "unittest.SkipTest", "numpy.random.randint", "numpy.testing.assert_equal", "os.remove", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FetchBlob", "shutil.rmtree", "caffe2.python.workspace.RunNetOnce"], "video_input_op_test.VideoInputOpTest.test_rgb_use_shorter_edge": ["video_input_op_test.VideoInputOpTest.create_a_list", "video_input_op_test.VideoInputOpTest.create_video_db", "tempfile.NamedTemporaryFile", "tempfile.mkdtemp", "os.path.exists", "unittest.SkipTest", "numpy.random.randint", "numpy.testing.assert_equal", "os.remove", "<builtin>.range", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FetchBlob", "shutil.rmtree", "caffe2.python.workspace.RunNetOnce"], "video_input_op_test.VideoInputOpTest.test_optical_flow_use_shorter_edge": ["video_input_op_test.VideoInputOpTest.create_a_list", "video_input_op_test.VideoInputOpTest.create_video_db", "tempfile.NamedTemporaryFile", "tempfile.mkdtemp", "os.path.exists", "unittest.SkipTest", "numpy.random.randint", "numpy.testing.assert_equal", "os.remove", "<builtin>.range", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.FetchBlob", "shutil.rmtree", "caffe2.python.workspace.RunNetOnce"], "weighted_multi_sample_test": ["unittest.main"], "weighted_multi_sample_test.TestWeightedMultiSample": ["hypothesis.given", "hypothesis.strategies.integers"], "weighted_multi_sample_test.TestWeightedMultiSample.test_weighted_multi_sample": ["caffe2.python.workspace.FetchBlob", "<builtin>.range", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.repeat", "<builtin>.len", "numpy.zeros", "numpy.testing.assert_allclose", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks"], "weighted_sample_test": ["unittest.main"], "weighted_sample_test.TestWeightedSample": ["hypothesis.strategies.integers", "hypothesis.given"], "weighted_sample_test.TestWeightedSample.test_weighted_sample": ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertDeviceChecks", "numpy.array", "numpy.testing.assert_allclose", "numpy.random.rand", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FeedBlob", "<builtin>.range", "numpy.random.randint", "numpy.zeros"], "weighted_sum_test": ["caffe2.python.serialized_test.serialized_test_util.testWithArgs"], "weighted_sum_test.TestWeightedSumOp": ["hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.integers"], "weighted_sum_test.TestWeightedSumOp.test_weighted_sum": ["caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertDeviceChecks", "caffe2.python.core.CreateOperator", "numpy.random.rand", "<builtin>.range", "<builtin>.vars", "<builtin>.str", "numpy.random.seed", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "weighted_sum_test.TestWeightedSumOp.test_weighted_sum.weighted_sum_op_ref": ["<builtin>.range", "numpy.zeros"], "weighted_sum_test.TestWeightedSumOp.test_weighted_sum_grad": ["caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertGradientChecks", "numpy.random.rand", "<builtin>.range", "<builtin>.vars", "<builtin>.str", "numpy.random.seed"], "caffe2.python.serialized_test.serialized_test_util.testWithArgs": [], "weight_scale_test": [], "weight_scale_test.TestWeightScale": ["hypothesis.strategies.floats", "hypothesis.strategies.integers", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.given"], "weight_scale_test.TestWeightScale.test_weight_scale": ["functools.partial", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertReferenceChecks", "caffe2.python.core.CreateOperator", "numpy.array"], "weight_scale_test.TestWeightScale.test_weight_scale.ref_weight_scale": [], "wngrad_test": ["logging.getLogger"], "wngrad_test.ref_wngrad": ["numpy.sum"], "wngrad_test.wngrad_sparse_test_helper": ["numpy.random.randint", "numpy.random.choice", "numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "numpy.arange", "caffe2.python.core.CreateOperator"], "wngrad_test.wngrad_sparse_test_helper.ref_sparse": ["numpy.sum", "<builtin>.enumerate", "numpy.copy"], "wngrad_test.TestWngrad": ["hypothesis.given", "caffe2.python.hypothesis_test_util.tensors", "hypothesis.settings", "hypothesis.strategies.floats"], "wngrad_test.TestWngrad.test_wngrad_dense_base": ["functools.partial", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "wngrad_test.TestWngrad.test_wngrad_dense_output_effective_lr": ["functools.partial", "numpy.array", "caffe2.python.core.CreateOperator", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks"], "wngrad_test.TestWngrad.test_wngrad_dense_output_effective_lr_and_update": ["numpy.array", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "functools.partial", "numpy.abs", "caffe2.python.core.CreateOperator"], "wngrad_test.TestWngrad.test_sparse_wngrad": ["wngrad_test.wngrad_sparse_test_helper"], "wngrad_test.TestWngrad.test_sparse_wngrad_empty": ["hypothesis.note", "<builtin>.print", "numpy.array", "numpy.empty", "caffe2.python.serialized_test.serialized_test_util.SerializedTestCase.assertReferenceChecks", "<builtin>.str", "caffe2.python.core.CreateOperator"], "wngrad_test.TestWngrad.test_sparse_wngrad_empty.ref_sparse": ["numpy.copy"], "mobile_exporter": [], "mobile_exporter.add_tensor": ["<builtin>.isinstance", "caffe2.python.core.CreateOperator", "caffe2.python.utils.MakeArgument", "numpy.dtype"], "mobile_exporter.Export": ["mobile_exporter.add_tensor", "caffe2.proto.caffe2_pb2.NetDef", "caffe2.python.core.get_ssa", "<builtin>.str", "<builtin>.isinstance"], "mobile_exporter_test": [], "mobile_exporter_test.TestMobileExporter.test_mobile_exporter": ["numpy.testing.assert_allclose", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.CreateNet", "caffe2.python.brew.conv", "caffe2.python.brew.softmax", "caffe2.python.predictor.mobile_exporter.Export", "caffe2.python.workspace.Predictor", "<builtin>.len", "caffe2.python.brew.fc", "caffe2.python.workspace.FetchBlob", "caffe2.python.brew.max_pool", "numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "caffe2.python.workspace.RunNet", "caffe2.python.brew.relu", "caffe2.python.workspace.RunNetOnce"], "mobile_exporter_test.TestMobileExporter.test_mobile_exporter_datatypes": ["numpy.testing.assert_allclose", "caffe2.python.workspace.ResetWorkspace", "numpy.dtype", "numpy.array", "caffe2.python.workspace.CreateNet", "<builtin>.len", "caffe2.python.predictor.mobile_exporter.Export", "numpy.random.randint", "numpy.testing.assert_equal", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.Predictor", "caffe2.python.workspace.FeedBlob", "caffe2.python.model_helper.ModelHelper", "<builtin>.isinstance", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.RunNetOnce"], "predictor_exporter": [], "predictor_exporter.get_predictor_exporter_helper": ["caffe2.python.core.Net"], "predictor_exporter.PredictorExportMeta.__new__": ["<builtin>.str", "<builtin>.set", "<builtin>.len", "<builtin>.super", "<builtin>.isinstance"], "predictor_exporter.PredictorExportMeta.inputs_name": ["caffe2.python.predictor.predictor_py_utils.get_comp_name"], "caffe2.python.predictor.predictor_py_utils.get_comp_name": [], "predictor_exporter.PredictorExportMeta.outputs_name": ["caffe2.python.predictor.predictor_py_utils.get_comp_name"], "predictor_exporter.PredictorExportMeta.parameters_name": ["caffe2.python.predictor.predictor_py_utils.get_comp_name"], "predictor_exporter.PredictorExportMeta.global_init_name": ["caffe2.python.predictor.predictor_py_utils.get_comp_name"], "predictor_exporter.PredictorExportMeta.predict_init_name": ["caffe2.python.predictor.predictor_py_utils.get_comp_name"], "predictor_exporter.PredictorExportMeta.predict_net_name": ["caffe2.python.predictor.predictor_py_utils.get_comp_name"], "predictor_exporter.PredictorExportMeta.train_init_plan_name": ["caffe2.python.predictor.predictor_py_utils.get_comp_name"], "predictor_exporter.PredictorExportMeta.train_plan_name": ["caffe2.python.predictor.predictor_py_utils.get_comp_name"], "predictor_exporter.prepare_prediction_net": ["predictor_exporter.load_from_db", "caffe2.python.predictor.predictor_py_utils.GetNet", "caffe2.python.core.Net", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNetOnce"], "predictor_exporter.load_from_db": ["caffe2.python.scope.CurrentDeviceScope", "caffe2.python.core.BlobReference", "<builtin>.str", "caffe2.python.predictor.serde.deserialize_protobuf_struct", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "<builtin>.isinstance"], "predictor_exporter._global_init_net": ["caffe2.python.predictor.predictor_py_utils.AddModelIdArg", "caffe2.python.core.Net"], "caffe2.python.predictor.predictor_py_utils.AddModelIdArg": [], "predictor_exporter.get_meta_net_def": ["caffe2.python.predictor.predictor_py_utils.create_predict_net", "caffe2.python.predictor.predictor_py_utils.AddNet", "caffe2.proto.metanet_pb2.MetaNetDef", "caffe2.python.predictor.predictor_py_utils.AddBlobs", "caffe2.python.predictor.predictor_py_utils.create_predict_init_net", "predictor_exporter._global_init_net"], "caffe2.proto.metanet_pb2.MetaNetDef": [], "caffe2.python.predictor.predictor_py_utils.create_predict_init_net": [], "caffe2.python.predictor.predictor_py_utils.AddNet": [], "caffe2.python.predictor.predictor_py_utils.create_predict_net": [], "caffe2.python.predictor.predictor_py_utils.AddBlobs": [], "predictor_exporter.set_model_info": ["<builtin>.isinstance"], "predictor_exporter.save_to_db": ["caffe2.python.core.DeviceOption", "caffe2.python.predictor.serde.serialize_protobuf_struct", "predictor_exporter.get_meta_net_def", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceScope"], "caffe2.python.predictor.serde.serialize_protobuf_struct": [], "caffe2.python.predictor.serde.deserialize_protobuf_struct": [], "predictor_exporter_test": [], "predictor_exporter_test.MetaNetDefTest.test_minimal": ["caffe2.proto.metanet_pb2.NetsMap", "caffe2.proto.caffe2_pb2.NetDef"], "caffe2.proto.metanet_pb2.NetsMap": [], "predictor_exporter_test.MetaNetDefTest.test_adding_net": ["caffe2.proto.metanet_pb2.MetaNetDef", "caffe2.proto.caffe2_pb2.NetDef"], "predictor_exporter_test.MetaNetDefTest.test_replace_blobs": ["caffe2.proto.metanet_pb2.MetaNetDef", "unittest.TestCase.assertEqual", "caffe2.python.predictor.predictor_py_utils.GetBlobs", "caffe2.python.predictor.predictor_py_utils.ReplaceBlobs", "caffe2.python.predictor.predictor_py_utils.AddBlobs"], "caffe2.python.predictor.predictor_py_utils.GetBlobs": [], "caffe2.python.predictor.predictor_py_utils.ReplaceBlobs": [], "predictor_exporter_test.PredictorExporterTest._create_model": ["caffe2.python.cnn.CNNModelHelper"], "predictor_exporter_test.PredictorExporterTest.setUp": ["caffe2.python.predictor.predictor_exporter.PredictorExportMeta", "predictor_exporter_test.PredictorExporterTest._create_model", "caffe2.python.workspace.RunNetOnce", "<builtin>.str", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.FetchBlob", "numpy.random.seed"], "predictor_exporter_test.PredictorExporterTest.test_meta_constructor": ["caffe2.python.predictor.predictor_exporter.PredictorExportMeta", "predictor_exporter_test.PredictorExporterTest._create_model"], "predictor_exporter_test.PredictorExporterTest.test_param_intersection": ["unittest.TestCase.assertRaises", "caffe2.python.predictor.predictor_exporter.PredictorExportMeta", "predictor_exporter_test.PredictorExporterTest._create_model"], "predictor_exporter_test.PredictorExporterTest.test_meta_net_def_net_runs": ["numpy.testing.assert_array_almost_equal", "<builtin>.print", "caffe2.python.predictor.predictor_exporter.load_from_db", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.Blobs", "numpy.random.randn", "caffe2.python.core.Net", "numpy.zeros", "numpy.ones", "caffe2.python.workspace.RunNetOnce", "caffe2.python.predictor.predictor_exporter.PredictorExportMeta", "unittest.TestCase.assertEqual", "caffe2.python.workspace.ResetWorkspace", "future.utils.viewitems", "caffe2.python.workspace.FetchBlob", "caffe2.python.predictor.predictor_exporter.save_to_db", "caffe2.python.workspace.HasBlob", "numpy.testing.assert_array_equal", "unittest.TestCase.assertTrue", "tempfile.NamedTemporaryFile", "caffe2.python.predictor.predictor_py_utils.GetNet"], "predictor_exporter_test.PredictorExporterTest.test_load_device_scope": ["caffe2.python.predictor.predictor_exporter.PredictorExportMeta", "caffe2.python.predictor.predictor_exporter.load_from_db", "tempfile.NamedTemporaryFile", "caffe2.python.workspace.FeedBlob", "<builtin>.list", "unittest.TestCase.assertEqual", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.DeviceOption", "caffe2.python.core.Net", "caffe2.python.core.DeviceScope", "caffe2.python.predictor.predictor_exporter.save_to_db", "caffe2.python.predictor.predictor_py_utils.GetNet"], "predictor_exporter_test.PredictorExporterTest.test_db_fails_without_params": ["caffe2.python.predictor.predictor_exporter.save_to_db", "unittest.TestCase.assertRaises", "tempfile.NamedTemporaryFile"], "predictor_py_utils": [], "predictor_py_utils.create_predict_net": ["caffe2.python.core.Net"], "predictor_py_utils.create_predict_init_net": ["predictor_py_utils.AddModelIdArg", "predictor_py_utils.create_predict_init_net.zero_fill", "caffe2.python.core.Net"], "predictor_py_utils.create_predict_init_net.zero_fill": ["<builtin>.Exception", "caffe2.python.scope.EmptyDeviceScope"], "predictor_py_utils.AddModelIdArg": ["predictor_py_utils.GetArgumentByName"], "predictor_py_utils.get_comp_name": [], "predictor_py_utils.to_first_match_dict": [], "predictor_py_utils._ProtoMapGet": [], "predictor_py_utils.GetPlan": ["predictor_py_utils._ProtoMapGet"], "predictor_py_utils.GetPlanOriginal": ["predictor_py_utils._ProtoMapGet"], "predictor_py_utils.GetBlobs": ["predictor_py_utils._ProtoMapGet"], "predictor_py_utils.GetBlobsByTypePrefix": ["<builtin>.sorted", "<builtin>.len"], "predictor_py_utils.GetBlobsByTypePrefix.<lambda1>": [], "predictor_py_utils.GetNet": ["predictor_py_utils._ProtoMapGet"], "predictor_py_utils.GetNetOriginal": ["predictor_py_utils._ProtoMapGet"], "predictor_py_utils.GetApplicationSpecificInfo": ["predictor_py_utils._ProtoMapGet"], "predictor_py_utils.GetApplicationSpecificInfoDict": ["predictor_py_utils.to_first_match_dict"], "predictor_py_utils.AddBlobs": ["predictor_py_utils._ProtoMapGet"], "predictor_py_utils.ReplaceBlobs": ["predictor_py_utils._ProtoMapGet"], "predictor_py_utils.AddPlan": [], "predictor_py_utils.AddNet": [], "predictor_py_utils.SetBlobsOrder": [], "predictor_py_utils.SetPreLoadBlobs": [], "predictor_py_utils.SetRequestOnlyEmbeddings": [], "predictor_py_utils.GetBlobsOrder": [], "predictor_py_utils.SetTensorBoundShapes": [], "predictor_py_utils.SetAOTConfig": [], "predictor_py_utils.GetArgumentByName": [], "predictor_test": [], "predictor_test.TestPredictor.setUp": ["numpy.random.seed"], "predictor_test.TestPredictor._predict_net": ["caffe2.proto.caffe2_pb2.NetDef"], "predictor_test.TestPredictor._init_net": ["caffe2.proto.caffe2_pb2.NetDef"], "predictor_test.TestPredictor.test_run": ["caffe2.python.workspace.Predictor", "numpy.ones", "unittest.TestCase.assertEqual", "<builtin>.len", "numpy.testing.assert_almost_equal", "numpy.dot"], "predictor_test.TestPredictor.test_run_map": ["numpy.zeros", "caffe2.python.workspace.Predictor", "numpy.ones", "unittest.TestCase.assertEqual", "<builtin>.len", "numpy.testing.assert_almost_equal", "numpy.dot"], "serde": [], "serde.serialize_protobuf_struct": [], "serde.deserialize_protobuf_struct": [], "lstm_comparison": ["caffe2.python.workspace.GlobalInit", "lstm_comparison.Compare", "caffe2.python.utils.debug", "caffe2.python.lstm_benchmark.GetArgumentParser"], "lstm_comparison.Compare": ["caffe2.python.core.DeviceScope", "<builtin>.len", "copy.copy", "caffe2.python.lstm_benchmark.Benchmark", "<builtin>.print", "<builtin>.float", "<builtin>.str", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.DeviceOption"], "caffe2.python.lstm_benchmark.Benchmark": [], "caffe2.python.lstm_benchmark.GetArgumentParser": [], "rnn_cell_test_util": [], "rnn_cell_test_util.sigmoid": ["numpy.exp"], "rnn_cell_test_util.tanh": ["rnn_cell_test_util.sigmoid"], "rnn_cell_test_util._prepare_rnn": ["<builtin>.enumerate", "caffe2.python.scope.NameScope", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FeedBlob", "numpy.random.randint", "<builtin>.range", "rnn_cell_test_util._prepare_rnn.generate_input_state", "<builtin>.print", "caffe2.python.model_helper.ModelHelper"], "rnn_cell_test_util._prepare_rnn.generate_input_state": ["numpy.random.randn"], "coverage": [], "coverage.gen_serialized_test_coverage": ["<builtin>.open", "<builtin>.int", "coverage.gen_coverage_sets", "<builtin>.sorted", "os.path.join", "<builtin>.len"], "coverage.gen_coverage_sets": ["<builtin>.set", "coverage.gen_covered_ops", "caffe2.python.core._GetRegisteredOperators", "caffe2.python.workspace.C.OpSchema.get"], "coverage.gen_covered_ops": ["<builtin>.open", "coverage.gen_covered_ops.parse_proto", "os.path.isfile", "os.path.join", "<builtin>.set", "zipfile.ZipFile", "os.listdir", "tempfile.mkdtemp"], "coverage.gen_covered_ops.parse_proto": ["caffe2.proto.caffe2_pb2.OperatorDef"], "serialized_test_util": ["os.path.realpath", "os.path.join", "os.path.dirname", "threading.local"], "serialized_test_util.given": [], "serialized_test_util.given.wrapper": ["hypothesis.seed", "hypothesis.settings", "hypothesis.given"], "hypothesis.seed": [], "serialized_test_util.given.wrapper.func": [], "serialized_test_util._getGradientOrNone": ["caffe2.python.gradient_checker.getGradientForOp"], "caffe2.python.gradient_checker.getGradientForOp": [], "serialized_test_util._transformList": ["<builtin>.enumerate", "numpy.empty", "<builtin>.len"], "serialized_test_util._prepare_dir": ["os.path.exists", "shutil.rmtree", "os.makedirs"], "serialized_test_util.SerializedTestCase.get_output_dir": ["<builtin>.getattr", "os.path.exists", "os.path.join", "os.getcwd"], "os.getcwd": [], "serialized_test_util.SerializedTestCase.get_output_filename": ["inspect.getfile", "caffe2.python.hypothesis_test_util.HypothesisTestCase.id", "os.path.basename"], "inspect.getfile": [], "caffe2.python.hypothesis_test_util.HypothesisTestCase.id": [], "serialized_test_util.SerializedTestCase.serialize_test": ["os.path.join", "<builtin>.int", "zipfile.ZipFile", "serialized_test_util.SerializedTestCase.get_output_dir", "serialized_test_util._transformList", "<builtin>.open", "serialized_test_util._prepare_dir", "numpy.savez_compressed", "shutil.rmtree", "serialized_test_util.SerializedTestCase.get_output_filename", "<builtin>.enumerate", "os.path.basename"], "numpy.savez_compressed": [], "serialized_test_util.SerializedTestCase.compare_test": ["zipfile.ZipFile", "numpy.array_equal", "shutil.rmtree", "caffe2.proto.caffe2_pb2.DeviceOption", "serialized_test_util.SerializedTestCase.get_output_filename", "caffe2.python.hypothesis_test_util.runOpOnInput", "serialized_test_util.SerializedTestCase.compare_test.parse_proto", "<builtin>.len", "os.path.join", "serialized_test_util.SerializedTestCase._assertSameOps", "serialized_test_util.SerializedTestCase.get_output_dir", "serialized_test_util._getGradientOrNone", "<builtin>.range", "numpy.load", "<builtin>.open", "<builtin>.zip", "numpy.testing.assert_allclose", "<builtin>.int", "tempfile.mkdtemp"], "serialized_test_util.SerializedTestCase.compare_test.parse_proto": ["caffe2.proto.caffe2_pb2.OperatorDef"], "caffe2.python.hypothesis_test_util.runOpOnInput": [], "serialized_test_util.SerializedTestCase._assertSameOps": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.proto.caffe2_pb2.OperatorDef"], "serialized_test_util.SerializedTestCase._assertSameOps.<lambda1>": [], "serialized_test_util.SerializedTestCase._assertSameOps.<lambda2>": [], "serialized_test_util.SerializedTestCase.assertSerializedOperatorChecks": ["<builtin>.getattr", "caffe2.python.serialized_test.coverage.gen_serialized_test_coverage", "serialized_test_util.SerializedTestCase.get_output_dir", "serialized_test_util.SerializedTestCase.serialize_test", "serialized_test_util.SerializedTestCase.compare_test"], "caffe2.python.serialized_test.coverage.gen_serialized_test_coverage": [], "serialized_test_util.SerializedTestCase.assertReferenceChecks": ["<builtin>.getattr", "serialized_test_util.SerializedTestCase.assertSerializedOperatorChecks", "serialized_test_util._getGradientOrNone", "<builtin>.super"], "serialized_test_util.SerializedTestCase": ["contextlib.contextmanager"], "serialized_test_util.SerializedTestCase.set_disable_serialized_check": ["<builtin>.getattr"], "serialized_test_util.testWithArgs": ["argparse.ArgumentParser", "unittest.main"], "blob_deallocation_test": ["unittest.main", "caffe2.python.core.GlobalInit"], "blob_deallocation_test.BlobDeallocationTest.test": ["caffe2.python.workspace.ResetWorkspace", "caffe2.python.core.Net", "caffe2.python.workspace.RunNetOnce", "unittest.TestCase.assertTrue"], "do_op_test": ["unittest.main"], "do_op_test.DoOpTest.test_operator": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.test_util.TestCase.assertTrue", "numpy.all", "caffe2.python.workspace.ResetWorkspace", "do_op_test.DoOpTest.test_operator.make_net", "caffe2.python.workspace.FeedBlob", "numpy.asarray", "caffe2.python.workspace.FetchBlob"], "do_op_test.DoOpTest.test_operator.make_net": ["caffe2.python.core.Net"], "do_op_test.DoOpTest.test_reuse_workspace": ["caffe2.python.workspace.RunNetOnce", "caffe2.python.test_util.TestCase.assertTrue", "numpy.all", "caffe2.python.workspace.ResetWorkspace", "do_op_test.DoOpTest.test_reuse_workspace.make_net", "numpy.asarray", "caffe2.python.workspace.FetchBlob"], "do_op_test.DoOpTest.test_reuse_workspace.make_net": ["caffe2.python.core.Net"], "executor_test": ["unittest.main"], "executor_test.ExecutorCPUConvNetTest": ["hypothesis.given", "hypothesis.strategies.sampled_from", "caffe2.python.test.executor_test_util.executor_test_model_names", "caffe2.python.test.executor_test_util.executor_test_settings"], "caffe2.python.test.executor_test_util.executor_test_model_names": [], "caffe2.python.test.executor_test_util.executor_test_settings": [], "executor_test.ExecutorCPUConvNetTest.test_executor": ["caffe2.python.test.executor_test_util.ExecutorTestBase.compare_executors", "caffe2.python.test.executor_test_util.build_conv_model"], "caffe2.python.test.executor_test_util.build_conv_model": [], "executor_test.ExecutorCPUConvNetTest.test_executor.run_model": ["caffe2.python.workspace.RunNet"], "caffe2.python.test.executor_test_util.ExecutorTestBase.compare_executors": [], "executor_test.ExecutorGPUResNetTest": ["hypothesis.given", "hypothesis.strategies.sampled_from", "caffe2.python.test.executor_test_util.executor_test_settings"], "executor_test.ExecutorGPUResNetTest.test_executor": ["caffe2.python.workspace.NumGpuDevices", "caffe2.python.test.executor_test_util.build_resnet50_dataparallel_model", "caffe2.python.test.executor_test_util.ExecutorTestBase.compare_executors"], "caffe2.python.test.executor_test_util.build_resnet50_dataparallel_model": [], "executor_test.ExecutorGPUResNetTest.test_executor.run_model": ["caffe2.python.test.executor_test_util.run_resnet50_epoch"], "caffe2.python.test.executor_test_util.run_resnet50_epoch": [], "executor_test.ExecutorFailingOpTest.test_failing_op": ["caffe2.python.test_util.TestCase.assertRaises", "caffe2.python.workspace.RunNet", "caffe2.python.test_util.TestCase.assertFalse", "executor_test.ExecutorFailingOpTest.test_failing_op.create_failing_net", "caffe2.python.workspace.ResetWorkspace", "caffe2.python.workspace.CreateNet"], "executor_test.ExecutorFailingOpTest.test_failing_op.create_failing_net": ["caffe2.python.core.Net"], "executor_test_util": [], "executor_test_util.executor_test_settings": ["caffe2.python.hypothesis_test_util.is_sandcastle", "caffe2.python.hypothesis_test_util.settings", "caffe2.python.hypothesis_test_util.is_travis"], "caffe2.python.hypothesis_test_util.is_sandcastle": [], "caffe2.python.hypothesis_test_util.is_travis": [], "caffe2.python.hypothesis_test_util.settings": [], "executor_test_util.gen_test_resnet50": ["caffe2.python.models.resnet.create_resnet50", "caffe2.python.cnn.CNNModelHelper"], "executor_test_util.conv_model_generators": [], "executor_test_util.executor_test_model_names": ["<builtin>.sorted", "executor_test_util.conv_model_generators", "caffe2.python.hypothesis_test_util.is_sandcastle", "caffe2.python.hypothesis_test_util.is_travis"], "executor_test_util.build_conv_model": ["executor_test_util.conv_model_generators", "caffe2.python.brew.iter"], "executor_test_util.build_resnet50_dataparallel_model": ["<builtin>.list", "caffe2.python.data_parallel_model.Parallelize", "<builtin>.range", "caffe2.python.model_helper.ModelHelper"], "executor_test_util.build_resnet50_dataparallel_model.create_resnet50_model_ops": ["caffe2.python.brew.accuracy", "caffe2.python.models.resnet.create_resnet50", "caffe2.python.brew.arg_scope"], "executor_test_util.build_resnet50_dataparallel_model.add_optimizer": ["caffe2.python.optimizer.build_multi_precision_sgd", "caffe2.python.optimizer.add_weight_decay", "<builtin>.int"], "executor_test_util.build_resnet50_dataparallel_model.add_image_input": [], "executor_test_util.build_resnet50_dataparallel_model.add_post_sync_ops": [], "executor_test_util.run_resnet50_epoch": ["time.time", "<builtin>.range", "<builtin>.int", "caffe2.python.workspace.FetchBlob", "<builtin>.print", "caffe2.python.timeout_guard.CompleteInTimeOrDie", "caffe2.python.workspace.RunNet"], "executor_test_util.ExecutorTestBase.compare_executors": ["<builtin>.str", "caffe2.python.test_util.TestCase.assertTrue", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "<builtin>.type", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.ResetWorkspace", "numpy.testing.assert_array_equal", "caffe2.python.workspace.Blobs"], "fakefp16_transform_test": [], "fakefp16_transform_test.Transformer.test_fuse": ["caffe2.python.core.CreateOperator", "<builtin>.print", "caffe2.python.core.Net", "caffe2.python.fakefp16_transform_lib.fakeFp16FuseOps", "<builtin>.len"], "caffe2.python.fakefp16_transform_lib.fakeFp16FuseOps": [], "gpu_context_test": ["unittest.main"], "gpu_context_test.TestGPUInit.testTHCAllocator": ["caffe2.python.core.DeviceOption", "caffe2.python.workspace.RunOperatorOnce", "unittest.TestCase.assertGreater", "caffe2.python.core.CreateOperator", "caffe2.python.core.GlobalInit", "torch.cuda.memory_allocated"], "unittest.TestCase.assertGreater": [], "inference_lstm_op_test": [], "inference_lstm_op_test.TestC2LSTM": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.settings"], "inference_lstm_op_test.TestC2LSTM.test_c2_lstm": ["numpy.zeros", "torch.from_numpy", "numpy.testing.assert_array_almost_equal", "numpy.random.randn", "caffe2.python.core.Net", "torch.nn.LSTM", "torch.ops._caffe2.InferenceLSTM"], "python_protobuf_test": [], "python_protobuf_test.TestCrossProtoCalls.testSimple": ["caffe2.proto.metanet_pb2.MetaNetDef", "caffe2.proto.caffe2_pb2.NetDef"], "test_pt_onnx_trt": ["tensorrt.Logger", "unittest.main"], "test_pt_onnx_trt.allocate_buffers": ["tensorrt.volume", "pycuda.driver.pagelocked_empty", "pycuda.driver.Stream", "pycuda.driver.mem_alloc", "tensorrt.nptype"], "tensorrt.volume": [], "tensorrt.nptype": [], "pycuda.driver.pagelocked_empty": [], "pycuda.driver.mem_alloc": [], "pycuda.driver.Stream": [], "test_pt_onnx_trt.load_normalized_test_case": ["test_pt_onnx_trt.load_normalized_test_case.normalize_image", "numpy.copyto", "PIL.Image.open"], "test_pt_onnx_trt.load_normalized_test_case.normalize_image": ["tensorrt.nptype", "numpy.asarray"], "PIL.Image.open": [], "numpy.copyto": [], "test_pt_onnx_trt.Test_PT_ONNX_TRT.__enter__": [], "test_pt_onnx_trt.Test_PT_ONNX_TRT.setUp": ["os.path.join", "os.path.dirname", "<builtin>.open", "os.path.exists", "<builtin>.FileNotFoundError", "<builtin>.enumerate", "os.path.abspath"], "<builtin>.FileNotFoundError": [], "test_pt_onnx_trt.Test_PT_ONNX_TRT.build_engine_onnx": ["tensorrt.Builder", "unittest.TestCase.fail", "tensorrt.OnnxParser", "<builtin>.range", "<builtin>.open"], "tensorrt.OnnxParser": [], "unittest.TestCase.fail": [], "test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model": ["os.path.basename", "<builtin>.getattr", "test_pt_onnx_trt.Test_PT_ONNX_TRT.build_engine_onnx", "os.path.splitext", "pycuda.driver.memcpy_dtoh_async", "test_pt_onnx_trt.load_normalized_test_case", "torch.randn", "pycuda.driver.memcpy_htod_async", "unittest.TestCase.assertLessEqual", "numpy.argmax", "test_pt_onnx_trt.allocate_buffers", "<builtin>.enumerate", "torch.onnx.export"], "torch.onnx.export": [], "pycuda.driver.memcpy_htod_async": [], "pycuda.driver.memcpy_dtoh_async": [], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_alexnet": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_resnet18": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_resnet34": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_resnet50": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_resnet101": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT": ["unittest.skip"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_resnet152": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_resnet50_2": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_resnet101_2": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_squeezenet1_0": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_squeezenet1_1": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_googlenet": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_inception_v3": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_mnasnet0_5": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_mnasnet1_0": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_mobilenet_v2": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_shufflenet_v2_x0_5": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_shufflenet_v2_x1_0": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_vgg11": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_vgg11_bn": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_vgg13": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_vgg13_bn": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_vgg16": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_vgg16_bn": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_vgg19": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_vgg19_bn": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_densenet121": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_densenet161": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_densenet169": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_pt_onnx_trt.Test_PT_ONNX_TRT.test_densenet201": ["test_pt_onnx_trt.Test_PT_ONNX_TRT._test_model"], "test_trt": [], "test_trt._print_net": ["<builtin>.print"], "test_trt._base_url": [], "test_trt._download_onnx_model": ["six.moves.urllib.request.urlretrieve", "test_trt._base_url", "tarfile.open", "tempfile.NamedTemporaryFile", "shutil.move", "<builtin>.print"], "shutil.move": [], "six.moves.urllib.request.urlretrieve": [], "test_trt.TensorRTOpTest.setUp": ["onnx.defs.onnx_opset_version"], "onnx.defs.onnx_opset_version": [], "test_trt.TensorRTOpTest._test_relu_graph": ["onnx.helper.make_model", "onnx.helper.make_graph", "onnx.backend.base.namedtupledict", "caffe2.python.core.DeviceScope", "onnx.helper.make_tensor_value_info", "caffe2.python.core.DeviceOption", "caffe2.python.onnx.backend.run_node", "caffe2.python.trt.transform.convert_onnx_model_to_trt_op", "numpy.testing.assert_almost_equal", "onnx.helper.make_node", "caffe2.python.onnx.workspace.Workspace"], "caffe2.python.trt.transform.convert_onnx_model_to_trt_op": [], "test_trt.TensorRTOpTest": ["unittest.skipIf", "unittest.skip"], "test_trt.TensorRTOpTest.test_relu_graph_simple": ["numpy.random.randn", "test_trt.TensorRTOpTest._test_relu_graph"], "test_trt.TensorRTOpTest.test_relu_graph_big_batch": ["numpy.random.randn", "test_trt.TensorRTOpTest._test_relu_graph"], "test_trt.TensorRTOpTest._test_onnx_importer": ["onnx.backend.base.namedtupledict", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "<builtin>.int", "caffe2.python.onnx.workspace.Workspace", "test_trt._download_onnx_model", "caffe2.python.onnx.backend.run_model", "caffe2.python.trt.transform.convert_onnx_model_to_trt_op", "numpy.random.randn", "<builtin>.print", "numpy.testing.assert_allclose", "onnx.load"], "test_trt.TensorRTOpTest.test_resnet50": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTOpTest.test_bvlc_alexnet": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTOpTest.test_densenet121": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTOpTest.test_inception_v1": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTOpTest.test_inception_v2": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTOpTest.test_shufflenet": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTOpTest.test_squeezenet": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTOpTest.test_vgg16": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTOpTest.test_vgg19": ["test_trt.TensorRTOpTest._test_onnx_importer"], "test_trt.TensorRTTransformTest.setUp": ["caffe2.python.models.download.ModelDownloader"], "test_trt.TensorRTTransformTest._add_head_tail": ["caffe2.proto.caffe2_pb2.OperatorDef", "caffe2.proto.caffe2_pb2.NetDef"], "test_trt.TensorRTTransformTest": ["unittest.skipIf"], "test_trt.TensorRTTransformTest.test_resnet50_core": ["onnx.backend.base.namedtupledict", "caffe2.python.core.DeviceScope", "caffe2.python.core.DeviceOption", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.ResetWorkspace", "time.time", "caffe2.python.workspace.SwitchWorkspace", "caffe2.python.workspace.FeedBlob", "caffe2.python.trt.transform.transform_caffe2_net", "caffe2.python.workspace.RunNet", "test_trt.TensorRTTransformTest._add_head_tail", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.CreateNet", "numpy.random.randn", "<builtin>.range", "<builtin>.print", "numpy.testing.assert_allclose"], "caffe2.python.trt.transform.transform_caffe2_net": [], "transform": [], "transform._dim_values_to_list": [], "transform._get_output_shapes": ["<builtin>.dict", "transform._dim_values_to_list", "<builtin>.zip"], "transform.check_gpu_": ["caffe2.python._import_c_extension.get_cuda_version", "<builtin>.Exception"], "caffe2.python._import_c_extension.get_cuda_version": [], "transform.convert_onnx_model_to_trt_op": ["caffe2.python._import_c_extension.onnx_to_trt_op", "transform.check_gpu_", "caffe2.proto.caffe2_pb2.OperatorDef", "transform._get_output_shapes"], "caffe2.python._import_c_extension.onnx_to_trt_op": [], "transform._infer_shapes": ["caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.RunNetOnce", "<builtin>.hasattr"], "transform.transform_caffe2_net": ["transform._infer_shapes", "transform.check_gpu_", "numpy.random.randn", "caffe2.python._import_c_extension.transform_trt", "caffe2.proto.caffe2_pb2.NetDef"], "caffe2.python._import_c_extension.transform_trt": [], "compare-fastrnn-results": ["json.load", "<builtin>.ValueError", "<builtin>.float", "argparse.ArgumentParser", "collections.namedtuple", "<builtin>.open", "<builtin>.set", "<builtin>.print", "json.dumps", "compare-fastrnn-results.get_times", "<builtin>.sorted"], "compare-fastrnn-results.construct_name": [], "compare-fastrnn-results.get_times": ["compare-fastrnn-results.construct_name"], "upload_scribe": ["argparse.FileType", "argparse.ArgumentParser", "upload_scribe.PytorchBenchmarkUploader.post_pytest_benchmarks", "upload_scribe.PytorchBenchmarkUploader.__init__", "json.load"], "upload_scribe.ScribeUploader.__init__": [], "upload_scribe.ScribeUploader.format_message": ["<builtin>.int", "collections.defaultdict", "<builtin>.str", "<builtin>.float", "<builtin>.ValueError"], "upload_scribe.ScribeUploader._upload_intern": ["json.dumps", "subprocess.run"], "upload_scribe.ScribeUploader.upload": ["upload_scribe.ScribeUploader._upload_intern", "json.dumps", "requests.post", "os.environ.get", "<builtin>.ValueError", "<builtin>.print"], "requests.post": [], "upload_scribe.PytorchBenchmarkUploader.__init__": ["<builtin>.super"], "upload_scribe.PytorchBenchmarkUploader.post_pytest_benchmarks": ["<builtin>.int", "upload_scribe.ScribeUploader.upload", "os.environ.get", "time.time", "upload_scribe.ScribeUploader.format_message"], "check_mypy_version": [], "check_mypy_version.get_correct_mypy_version": ["pathlib.Path", "re.finditer"], "re.finditer": [], "check_mypy_version.plugin": ["check_mypy_version.get_correct_mypy_version", "<builtin>.print"], "diagnose_protobuf": ["<builtin>.print", "re.search", "subprocess.Popen"], "get_python_cmake_flags": ["sysconfig.get_path", "<builtin>.print"], "sysconfig.get_path": [], "build_bundled": ["os.path.join", "<builtin>.open", "os.path.dirname", "build_bundled.create_bundled"], "build_bundled.collect_license": ["os.walk", "<builtin>.ValueError", "<builtin>.list", "os.path.join", "<builtin>.set", "build_bundled.identify_license"], "build_bundled.identify_license": ["<builtin>.open", "<builtin>.all", "<builtin>.ValueError", "build_bundled.identify_license.squeeze", "build_bundled.identify_license"], "build_bundled.create_bundled": ["<builtin>.sorted", "build_bundled.collect_license"], "build_bundled.identify_license.squeeze": [], "build_libtorch": ["os.path.abspath", "sys.path.append", "tools.setup_helpers.cmake.CMake", "argparse.ArgumentParser", "build_pytorch_libs.build_caffe2", "os.path.dirname"], "tools.setup_helpers.cmake.CMake": [], "build_pytorch_libs.build_caffe2": ["build_pytorch_libs._create_build_env", "setup_helpers.env.check_negative_env_flag", "os.path.join", "shutil.copy", "glob.glob"], "build_pytorch_libs": [], "build_pytorch_libs._overlay_windows_vcvars": ["setuptools.distutils._msvccompiler._get_vc_env"], "setuptools.distutils._msvccompiler._get_vc_env": [], "build_pytorch_libs._create_build_env": ["<builtin>.len", "build_pytorch_libs._overlay_windows_vcvars", "os.environ.copy", "glob.glob"], "setup_helpers.env.check_negative_env_flag": [], "shutil.copy": [], "download_mnist": ["download_mnist.main"], "download_mnist.report_download_progress": ["sys.stdout.write", "<builtin>.min", "<builtin>.int"], "download_mnist.download": ["urllib.request.urlretrieve", "os.path.exists", "<builtin>.print"], "urllib.request.urlretrieve": [], "download_mnist.unzip": ["gzip.open", "<builtin>.open", "os.path.exists", "<builtin>.print", "os.path.splitext"], "gzip.open": [], "download_mnist.main": ["download_mnist.download", "os.makedirs", "os.path.exists", "download_mnist.unzip", "argparse.ArgumentParser", "os.path.join", "<builtin>.print"], "extract_scripts": ["extract_scripts.main"], "extract_scripts.extract": [], "extract_scripts.main": ["yaml.safe_load", "<builtin>.str", "<builtin>.open", "pathlib.Path", "extract_scripts.extract", "sys.exit", "argparse.ArgumentParser", "<builtin>.print", "<builtin>.enumerate", "<builtin>.len", "re.sub"], "generate_torch_version": ["argparse.ArgumentParser", "<builtin>.bool", "pathlib.Path", "generate_torch_version.get_torch_version", "<builtin>.repr", "<builtin>.open", "generate_torch_version.get_sha"], "generate_torch_version.get_sha": ["subprocess.check_output"], "generate_torch_version.get_torch_version": ["<builtin>.int", "pathlib.Path", "<builtin>.str", "os.getenv", "<builtin>.open", "generate_torch_version.get_sha"], "nightly": ["nightly.timed", "nightly.timed.dec", "typing.TypeVar", "re.compile", "functools.lru_cache", "contextlib.contextmanager", "nightly.main"], "nightly.Formatter.__init__": ["<builtin>.super"], "nightly.Formatter._filter": [], "nightly.Formatter.formatMessage": ["<builtin>.super"], "nightly.Formatter.format": ["<builtin>.super", "nightly.Formatter._filter"], "nightly.Formatter.redact": [], "functools.lru_cache": [], "nightly.logging_base_dir": ["os.path.join", "os.getcwd", "os.makedirs"], "nightly.logging_run_dir": ["nightly.logging_base_dir", "os.path.join", "uuid.uuid1", "os.makedirs", "datetime.datetime.now"], "uuid.uuid1": [], "nightly.logging_record_argv": ["os.path.join", "subprocess.list2cmdline", "<builtin>.open", "nightly.logging_run_dir"], "subprocess.list2cmdline": [], "nightly.logging_record_exception": ["os.path.join", "<builtin>.open", "<builtin>.type", "nightly.logging_run_dir"], "nightly.logging_rotate": ["os.path.join", "shutil.rmtree", "nightly.logging_base_dir", "os.listdir"], "nightly.logging_manager": ["logging.exception", "logging.StreamHandler", "logging.getLogger", "nightly.logging_record_exception", "os.path.join", "<builtin>.print", "logging.FileHandler", "nightly.logging_record_argv", "nightly.logging_run_dir", "sys.exit", "nightly.Formatter.__init__", "nightly.logging_rotate", "logging.info"], "logging.FileHandler": [], "nightly.check_in_repo": ["os.path.isfile", "<builtin>.open"], "nightly.check_branch": ["subprocess.run"], "nightly.timer": ["time.time"], "nightly.timed": [], "nightly.timed.dec": ["functools.wraps", "typing.cast"], "nightly.timed.dec.wrapper": ["nightly.timer", "typing.cast"], "nightly._make_channel_args": [], "nightly.conda_solve": ["json.loads", "nightly._make_channel_args", "subprocess.run"], "nightly.deps_install": ["subprocess.run"], "nightly.pytorch_install": ["tempfile.TemporaryDirectory", "subprocess.run"], "nightly._site_packages": ["os.path.join", "glob.glob"], "nightly._ensure_commit": ["subprocess.run"], "nightly._nightly_version": ["ast.literal_eval", "os.path.join", "<builtin>.RuntimeError", "nightly._ensure_commit", "<builtin>.print", "subprocess.run", "<builtin>.open"], "nightly.checkout_nightly_version": ["nightly._nightly_version", "subprocess.run"], "nightly.pull_nightly_version": ["nightly._nightly_version", "subprocess.run"], "nightly._get_listing_linux": ["os.path.join", "glob.glob"], "nightly._get_listing_osx": ["os.path.join", "glob.glob"], "nightly._get_listing_win": ["os.path.join", "glob.glob"], "nightly._glob_pyis": ["os.path.join", "glob.iglob", "os.path.relpath"], "glob.iglob": [], "nightly._find_missing_pyi": ["os.path.join", "nightly._glob_pyis"], "nightly._get_listing": ["nightly._get_listing_osx", "nightly._get_listing_win", "nightly._find_missing_pyi", "os.path.join", "<builtin>.RuntimeError", "nightly._get_listing_linux"], "nightly._remove_existing": ["os.remove", "os.path.exists", "shutil.rmtree"], "nightly._move_single": ["os.link", "os.walk", "os.path.join", "<builtin>.print", "os.path.isdir", "os.path.relpath", "shutil.copy2", "os.makedirs", "nightly._remove_existing"], "shutil.copy2": [], "os.link": [], "nightly._copy_files": ["nightly._move_single"], "nightly._link_files": ["nightly._move_single"], "nightly.move_nightly_files": ["nightly._copy_files", "nightly._link_files", "os.path.join", "os.path.abspath", "nightly._get_listing"], "nightly._available_envs": ["<builtin>.map", "<builtin>.len", "subprocess.run"], "nightly.write_pth": ["nightly._site_packages", "os.getcwd", "nightly._available_envs", "os.path.join", "<builtin>.open"], "nightly.install": ["nightly._site_packages", "nightly.conda_solve", "typing.cast", "nightly.checkout_nightly_version", "nightly.pull_nightly_version", "nightly.deps_install", "nightly.move_nightly_files", "nightly.pytorch_install", "<builtin>.ValueError", "nightly.write_pth"], "nightly.make_parser": ["argparse.ArgumentParser"], "nightly.main": ["nightly.check_in_repo", "<builtin>.getattr", "nightly.check_branch", "nightly.logging_manager", "nightly.install", "sys.exit", "nightly.make_parser"], "render_junit": ["render_junit.main", "<builtin>.ImportError", "<builtin>.print"], "render_junit.parse_junit_reports": ["os.path.exists", "os.path.join", "os.path.isdir", "<builtin>.FileNotFoundError", "os.path.isfile", "os.walk", "render_junit.parse_junit_reports.parse_file"], "render_junit.parse_junit_reports.parse_file": ["junitparser.JUnitXml.fromfile", "render_junit.convert_junit_to_testcases", "rich.print"], "junitparser.JUnitXml.fromfile": [], "render_junit.convert_junit_to_testcases": ["render_junit.convert_junit_to_testcases", "<builtin>.isinstance"], "rich.print": [], "render_junit.render_tests": ["<builtin>.print", "<builtin>.isinstance", "rich.print"], "render_junit.parse_args": ["argparse.ArgumentParser"], "render_junit.main": ["render_junit.render_tests", "render_junit.parse_junit_reports", "render_junit.parse_args"], "vscode_settings": ["vscode_settings.main"], "vscode_settings.main": ["json.loads", "pathlib.Path", "<builtin>.open", "json.dump"], "functional.broadcast_tensors": ["overrides.handle_torch_function", "torch._VF.broadcast_tensors", "overrides.has_torch_function"], "overrides.has_torch_function": [], "overrides.handle_torch_function": ["<builtin>.TypeError", "<builtin>.tuple", "<builtin>.map", "overrides._get_overloaded_args", "<builtin>.type"], "torch._VF.broadcast_tensors": [], "functional.broadcast_shapes": ["torch.no_grad", "functional.block_diag", "torch.zeros"], "functional.block_diag": ["overrides.handle_torch_function", "torch._C._VariableFunctions.block_diag", "overrides.has_torch_function"], "functional.split": ["overrides.handle_torch_function", "overrides.has_torch_function_unary"], "overrides.has_torch_function_unary": [], "functional.einsum": ["<builtin>.ValueError", "<builtin>.len", "overrides.has_torch_function", "torch._VF.einsum", "<builtin>.isinstance", "overrides.handle_torch_function", "functional.einsum.parse_subscript", "functional.block_diag"], "functional.einsum.parse_subscript": ["<builtin>.ValueError", "<builtin>.chr", "<builtin>.ord"], "torch._VF.einsum": [], "functional.meshgrid": ["functional._meshgrid"], "functional._meshgrid": ["torch._VF.meshgrid", "<builtin>.len", "overrides.has_torch_function", "<builtin>.isinstance", "overrides.handle_torch_function"], "torch._VF.meshgrid": [], "functional.stft": ["torch._VF.stft", "torch.nn.functional.pad", "<builtin>.int", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "<builtin>.list"], "torch._VF.stft": [], "functional.istft": ["overrides.handle_torch_function", "overrides.has_torch_function_unary", "torch._VF.istft"], "torch._VF.istft": [], "functional._unique_impl": ["overrides.handle_torch_function", "torch._unique2", "overrides.has_torch_function_unary", "torch._VF.unique_dim"], "torch._VF.unique_dim": [], "torch._unique2": [], "functional._unique_consecutive_impl": ["overrides.handle_torch_function", "torch._VF.unique_consecutive", "overrides.has_torch_function_unary"], "torch._VF.unique_consecutive": [], "functional._return_counts": ["overrides.has_torch_function_unary", "functional._unique_impl"], "functional._return_output": ["overrides.has_torch_function_unary", "functional._unique_impl"], "functional._return_inverse": ["overrides.has_torch_function_unary", "functional._unique_impl"], "_jit_internal.boolean_dispatch": ["<builtin>.RuntimeError"], "functional._consecutive_return_counts": ["overrides.has_torch_function_unary", "functional._unique_consecutive_impl"], "functional._consecutive_return_output": ["overrides.has_torch_function_unary", "functional._unique_consecutive_impl"], "functional._consecutive_return_inverse": ["overrides.has_torch_function_unary", "functional._unique_consecutive_impl"], "_jit_internal._overload": ["_jit_internal._check_overload_body", "_jit_internal._qualified_name"], "functional.tensordot": ["torch._VF.tensordot", "torch.jit.annotate", "overrides.has_torch_function_variadic", "<builtin>.int", "<builtin>.isinstance", "overrides.handle_torch_function", "<builtin>.list", "<builtin>.range", "<builtin>.RuntimeError"], "overrides.has_torch_function_variadic": [], "torch._VF.tensordot": [], "functional.cartesian_prod": ["overrides.handle_torch_function", "overrides.has_torch_function", "torch._VF.cartesian_prod"], "torch._VF.cartesian_prod": [], "torch._C._VariableFunctions.block_diag": [], "functional.cdist": ["overrides.handle_torch_function", "overrides.has_torch_function_variadic", "<builtin>.ValueError", "torch._VF.cdist"], "torch._VF.cdist": [], "functional.atleast_1d": ["overrides.handle_torch_function", "torch._VF.atleast_1d", "overrides.has_torch_function", "<builtin>.len"], "torch._VF.atleast_1d": [], "functional.atleast_2d": ["overrides.handle_torch_function", "overrides.has_torch_function", "<builtin>.len", "torch._VF.atleast_2d"], "torch._VF.atleast_2d": [], "functional.atleast_3d": ["overrides.handle_torch_function", "overrides.has_torch_function", "<builtin>.len", "torch._VF.atleast_3d"], "torch._VF.atleast_3d": [], "functional.norm": ["torch._VF.nuclear_norm", "torch._VF.frobenius_norm", "<builtin>.ValueError", "torch._VF.norm", "overrides.has_torch_function_unary", "<builtin>.isinstance", "overrides.handle_torch_function", "<builtin>.list", "<builtin>.range", "<builtin>.RuntimeError"], "torch._VF.frobenius_norm": [], "torch._VF.norm": [], "torch._VF.nuclear_norm": [], "functional.chain_matmul": ["overrides.handle_torch_function", "torch._VF.chain_matmul", "overrides.has_torch_function"], "torch._VF.chain_matmul": [], "functional._lu_impl": ["torch._autograd_functions._LU.apply", "<builtin>.ValueError", "torch._lu_with_info", "torch._jit_internal.is_scripting", "<builtin>.RuntimeError"], "torch._jit_internal.is_scripting": [], "torch._autograd_functions._LU.apply": [], "torch._lu_with_info": [], "functional._check_list_size": ["<builtin>.TypeError", "<builtin>.int", "<builtin>.type", "<builtin>.isinstance"], "functional._lu_with_infos": ["functional._lu_impl", "functional._check_list_size", "<builtin>.len", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "<builtin>.range"], "functional._lu_no_infos": ["functional._lu_impl", "functional._check_list_size", "<builtin>.len", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "<builtin>.range"], "functional.align_tensors": ["<builtin>.RuntimeError"], "hub": ["re.compile"], "hub.tqdm.__init__": [], "hub.tqdm.update": ["sys.stderr.flush", "sys.stderr.write", "<builtin>.float"], "hub.tqdm.close": [], "hub.tqdm.__enter__": [], "hub.tqdm.__exit__": ["sys.stderr.write"], "hub.import_module": ["<builtin>.isinstance"], "hub._remove_if_exists": ["os.path.isfile", "os.remove", "os.path.exists", "shutil.rmtree"], "hub._git_archive_link": [], "hub._load_attr_from_module": ["<builtin>.getattr", "<builtin>.dir"], "hub._get_torch_home": ["os.getenv", "os.path.join", "os.path.expanduser"], "hub._parse_repo_info": [], "hub._read_url": ["urllib.request.urlopen"], "hub._validate_not_a_forked_repo": ["os.environ.get", "hub._read_url", "json.loads", "urllib.request.Request", "<builtin>.ValueError"], "urllib.request.Request": [], "hub._get_cache_or_reload": ["hub._git_archive_link", "hub.get_dir", "hub._validate_not_a_forked_repo", "shutil.move", "os.path.join", "os.makedirs", "hub.download_url_to_file", "zipfile.ZipFile", "hub._parse_repo_info", "sys.stderr.write", "os.path.exists", "hub._remove_if_exists"], "hub.get_dir": ["os.path.join", "os.getenv", "warnings.warn", "hub._get_torch_home"], "hub.download_url_to_file": ["shutil.move", "tqdm.auto.tqdm", "<builtin>.hasattr", "hashlib.sha256", "os.path.expanduser", "urllib.request.urlopen", "os.remove", "<builtin>.len", "os.path.dirname", "<builtin>.int", "tempfile.NamedTemporaryFile", "os.path.exists", "urllib.request.Request", "<builtin>.RuntimeError", "tqdm.tqdm"], "hub._check_module_exists": [], "hub._check_dependencies": ["hub._check_module_exists", "hub._load_attr_from_module", "<builtin>.len", "<builtin>.RuntimeError"], "hub._load_entry_from_hubconf": ["hub._load_attr_from_module", "hub._check_dependencies", "<builtin>.RuntimeError", "<builtin>.callable", "<builtin>.isinstance", "<builtin>.ValueError"], "hub.set_dir": [], "hub.list": ["sys.path.remove", "hub.import_module", "sys.path.insert", "<builtin>.dir", "<builtin>.getattr", "hub._get_cache_or_reload", "<builtin>.callable"], "sys.path.remove": [], "hub.help": ["sys.path.remove", "hub.import_module", "sys.path.insert", "hub._get_cache_or_reload", "hub._load_entry_from_hubconf"], "hub.load": ["hub._load_local", "hub._get_cache_or_reload", "<builtin>.ValueError"], "hub._load_local": ["sys.path.remove", "hub.import_module", "os.path.join", "sys.path.insert", "hub._load_entry_from_hubconf"], "tqdm.auto.tqdm": [], "tqdm.tqdm": [], "hub._download_url_to_file": ["warnings.warn", "hub.download_url_to_file"], "hub._is_legacy_zip_format": ["<builtin>.len", "zipfile.is_zipfile", "zipfile.ZipFile"], "zipfile.is_zipfile": [], "hub._legacy_zip_load": ["warnings.warn", "os.path.join", "torch.load", "<builtin>.len", "<builtin>.RuntimeError", "zipfile.ZipFile"], "hub.load_state_dict_from_url": ["hub.get_dir", "warnings.warn", "os.path.join", "hub._is_legacy_zip_format", "hub._legacy_zip_load", "os.makedirs", "hub.download_url_to_file", "torch.load", "sys.stderr.write", "urllib.parse.urlparse", "os.path.basename", "os.getenv", "os.path.exists"], "urllib.parse.urlparse": [], "overrides": ["functools.lru_cache", "torch._C._add_docstr"], "overrides.get_ignored_functions": [], "overrides.get_default_nowrap_functions": [], "overrides.get_testing_overrides": ["overrides.get_ignored_functions", "<builtin>.len", "<builtin>.getattr", "<builtin>.callable"], "overrides.get_testing_overrides.<dict1>.<lambda1>": [], "overrides.get_testing_overrides.<dict1>.<lambda2>": [], "overrides.get_testing_overrides.<dict1>.<lambda3>": [], "overrides.get_testing_overrides.<dict1>.<lambda4>": [], "overrides.get_testing_overrides.<dict1>.<lambda5>": [], "overrides.get_testing_overrides.<dict1>.<lambda6>": [], "overrides.get_testing_overrides.<dict1>.<lambda7>": [], "overrides.get_testing_overrides.<dict1>.<lambda8>": [], "overrides.get_testing_overrides.<dict1>.<lambda9>": [], "overrides.get_testing_overrides.<dict1>.<lambda10>": [], "overrides.get_testing_overrides.<dict1>.<lambda11>": [], "overrides.get_testing_overrides.<dict1>.<lambda12>": [], "overrides.get_testing_overrides.<dict1>.<lambda13>": [], "overrides.get_testing_overrides.<dict1>.<lambda14>": [], "overrides.get_testing_overrides.<dict1>.<lambda15>": [], "overrides.get_testing_overrides.<dict1>.<lambda16>": [], "overrides.get_testing_overrides.<dict1>.<lambda17>": [], "overrides.get_testing_overrides.<dict1>.<lambda18>": [], "overrides.get_testing_overrides.<dict1>.<lambda19>": [], "overrides.get_testing_overrides.<dict1>.<lambda20>": [], "overrides.get_testing_overrides.<dict1>.<lambda21>": [], "overrides.get_testing_overrides.<dict1>.<lambda22>": [], "overrides.get_testing_overrides.<dict1>.<lambda23>": [], "overrides.get_testing_overrides.<dict1>.<lambda24>": [], "overrides.get_testing_overrides.<dict1>.<lambda25>": [], "overrides.get_testing_overrides.<dict1>.<lambda26>": [], "overrides.get_testing_overrides.<dict1>.<lambda27>": [], "overrides.get_testing_overrides.<dict1>.<lambda28>": [], "overrides.get_testing_overrides.<dict1>.<lambda29>": [], "overrides.get_testing_overrides.<dict1>.<lambda30>": [], "overrides.get_testing_overrides.<dict1>.<lambda31>": [], "overrides.get_testing_overrides.<dict1>.<lambda32>": [], "overrides.get_testing_overrides.<dict1>.<lambda33>": [], "overrides.get_testing_overrides.<dict1>.<lambda34>": [], "overrides.get_testing_overrides.<dict1>.<lambda35>": [], "overrides.get_testing_overrides.<dict1>.<lambda36>": [], "overrides.get_testing_overrides.<dict1>.<lambda37>": [], "overrides.get_testing_overrides.<dict1>.<lambda38>": [], "overrides.get_testing_overrides.<dict1>.<lambda39>": [], "overrides.get_testing_overrides.<dict1>.<lambda40>": [], "overrides.get_testing_overrides.<dict1>.<lambda41>": [], "overrides.get_testing_overrides.<dict1>.<lambda42>": [], "overrides.get_testing_overrides.<dict1>.<lambda43>": [], "overrides.get_testing_overrides.<dict1>.<lambda44>": [], "overrides.get_testing_overrides.<dict1>.<lambda45>": [], "overrides.get_testing_overrides.<dict1>.<lambda46>": [], "overrides.get_testing_overrides.<dict1>.<lambda47>": [], "overrides.get_testing_overrides.<dict1>.<lambda48>": [], "overrides.get_testing_overrides.<dict1>.<lambda49>": [], "overrides.get_testing_overrides.<dict1>.<lambda50>": [], "overrides.get_testing_overrides.<dict1>.<lambda51>": [], "overrides.get_testing_overrides.<dict1>.<lambda52>": [], "overrides.get_testing_overrides.<dict1>.<lambda53>": [], "overrides.get_testing_overrides.<dict1>.<lambda54>": [], "overrides.get_testing_overrides.<dict1>.<lambda55>": [], "overrides.get_testing_overrides.<dict1>.<lambda56>": [], "overrides.get_testing_overrides.<dict1>.<lambda57>": [], "overrides.get_testing_overrides.<dict1>.<lambda58>": [], "overrides.get_testing_overrides.<dict1>.<lambda59>": [], "overrides.get_testing_overrides.<dict1>.<lambda60>": [], "overrides.get_testing_overrides.<dict1>.<lambda61>": [], "overrides.get_testing_overrides.<dict1>.<lambda62>": [], "overrides.get_testing_overrides.<dict1>.<lambda63>": [], "overrides.get_testing_overrides.<dict1>.<lambda64>": [], "overrides.get_testing_overrides.<dict1>.<lambda65>": [], "overrides.get_testing_overrides.<dict1>.<lambda66>": [], "overrides.get_testing_overrides.<dict1>.<lambda67>": [], "overrides.get_testing_overrides.<dict1>.<lambda68>": [], "overrides.get_testing_overrides.<dict1>.<lambda69>": [], "overrides.get_testing_overrides.<dict1>.<lambda70>": [], "overrides.get_testing_overrides.<dict1>.<lambda71>": [], "overrides.get_testing_overrides.<dict1>.<lambda72>": [], "overrides.get_testing_overrides.<dict1>.<lambda73>": [], "overrides.get_testing_overrides.<dict1>.<lambda74>": [], "overrides.get_testing_overrides.<dict1>.<lambda75>": [], "overrides.get_testing_overrides.<dict1>.<lambda76>": [], "overrides.get_testing_overrides.<dict1>.<lambda77>": [], "overrides.get_testing_overrides.<dict1>.<lambda78>": [], "overrides.get_testing_overrides.<dict1>.<lambda79>": [], "overrides.get_testing_overrides.<dict1>.<lambda80>": [], "overrides.get_testing_overrides.<dict1>.<lambda81>": [], "overrides.get_testing_overrides.<dict1>.<lambda82>": [], "overrides.get_testing_overrides.<dict1>.<lambda83>": [], "overrides.get_testing_overrides.<dict1>.<lambda84>": [], "overrides.get_testing_overrides.<dict1>.<lambda85>": [], "overrides.get_testing_overrides.<dict1>.<lambda86>": [], "overrides.get_testing_overrides.<dict1>.<lambda87>": [], "overrides.get_testing_overrides.<dict1>.<lambda88>": [], "overrides.get_testing_overrides.<dict1>.<lambda89>": [], "overrides.get_testing_overrides.<dict1>.<lambda90>": [], "overrides.get_testing_overrides.<dict1>.<lambda91>": [], "overrides.get_testing_overrides.<dict1>.<lambda92>": [], "overrides.get_testing_overrides.<dict1>.<lambda93>": [], "overrides.get_testing_overrides.<dict1>.<lambda94>": [], "overrides.get_testing_overrides.<dict1>.<lambda95>": [], "overrides.get_testing_overrides.<dict1>.<lambda96>": [], "overrides.get_testing_overrides.<dict1>.<lambda97>": [], "overrides.get_testing_overrides.<dict1>.<lambda98>": [], "overrides.get_testing_overrides.<dict1>.<lambda99>": [], "overrides.get_testing_overrides.<dict1>.<lambda100>": [], "overrides.get_testing_overrides.<dict1>.<lambda101>": [], "overrides.get_testing_overrides.<dict1>.<lambda102>": [], "overrides.get_testing_overrides.<dict1>.<lambda103>": [], "overrides.get_testing_overrides.<dict1>.<lambda104>": [], "overrides.get_testing_overrides.<dict1>.<lambda105>": [], "overrides.get_testing_overrides.<dict1>.<lambda106>": [], "overrides.get_testing_overrides.<dict1>.<lambda107>": [], "overrides.get_testing_overrides.<dict1>.<lambda108>": [], "overrides.get_testing_overrides.<dict1>.<lambda109>": [], "overrides.get_testing_overrides.<dict1>.<lambda110>": [], "overrides.get_testing_overrides.<dict1>.<lambda111>": [], "overrides.get_testing_overrides.<dict1>.<lambda112>": [], "overrides.get_testing_overrides.<dict1>.<lambda113>": [], "overrides.get_testing_overrides.<dict1>.<lambda114>": [], "overrides.get_testing_overrides.<dict1>.<lambda115>": [], "overrides.get_testing_overrides.<dict1>.<lambda116>": [], "overrides.get_testing_overrides.<dict1>.<lambda117>": [], "overrides.get_testing_overrides.<dict1>.<lambda118>": [], "overrides.get_testing_overrides.<dict1>.<lambda119>": [], "overrides.get_testing_overrides.<dict1>.<lambda120>": [], "overrides.get_testing_overrides.<dict1>.<lambda121>": [], "overrides.get_testing_overrides.<dict1>.<lambda122>": [], "overrides.get_testing_overrides.<dict1>.<lambda123>": [], "overrides.get_testing_overrides.<dict1>.<lambda124>": [], "overrides.get_testing_overrides.<dict1>.<lambda125>": [], "overrides.get_testing_overrides.<dict1>.<lambda126>": [], "overrides.get_testing_overrides.<dict1>.<lambda127>": [], "overrides.get_testing_overrides.<dict1>.<lambda128>": [], "overrides.get_testing_overrides.<dict1>.<lambda129>": [], "overrides.get_testing_overrides.<dict1>.<lambda130>": [], "overrides.get_testing_overrides.<dict1>.<lambda131>": [], "overrides.get_testing_overrides.<dict1>.<lambda132>": [], "overrides.get_testing_overrides.<dict1>.<lambda133>": [], "overrides.get_testing_overrides.<dict1>.<lambda134>": [], "overrides.get_testing_overrides.<dict1>.<lambda135>": [], "overrides.get_testing_overrides.<dict1>.<lambda136>": [], "overrides.get_testing_overrides.<dict1>.<lambda137>": [], "overrides.get_testing_overrides.<dict1>.<lambda138>": [], "overrides.get_testing_overrides.<dict1>.<lambda139>": [], "overrides.get_testing_overrides.<dict1>.<lambda140>": [], "overrides.get_testing_overrides.<dict1>.<lambda141>": [], "overrides.get_testing_overrides.<dict1>.<lambda142>": [], "overrides.get_testing_overrides.<dict1>.<lambda143>": [], "overrides.get_testing_overrides.<dict1>.<lambda144>": [], "overrides.get_testing_overrides.<dict1>.<lambda145>": [], "overrides.get_testing_overrides.<dict1>.<lambda146>": [], "overrides.get_testing_overrides.<dict1>.<lambda147>": [], "overrides.get_testing_overrides.<dict1>.<lambda148>": [], "overrides.get_testing_overrides.<dict1>.<lambda149>": [], "overrides.get_testing_overrides.<dict1>.<lambda150>": [], "overrides.get_testing_overrides.<dict1>.<lambda151>": [], "overrides.get_testing_overrides.<dict1>.<lambda152>": [], "overrides.get_testing_overrides.<dict1>.<lambda153>": [], "overrides.get_testing_overrides.<dict1>.<lambda154>": [], "overrides.get_testing_overrides.<dict1>.<lambda155>": [], "overrides.get_testing_overrides.<dict1>.<lambda156>": [], "overrides.get_testing_overrides.<dict1>.<lambda157>": [], "overrides.get_testing_overrides.<dict1>.<lambda158>": [], "overrides.get_testing_overrides.<dict1>.<lambda159>": [], "overrides.get_testing_overrides.<dict1>.<lambda160>": [], "overrides.get_testing_overrides.<dict1>.<lambda161>": [], "overrides.get_testing_overrides.<dict1>.<lambda162>": [], "overrides.get_testing_overrides.<dict1>.<lambda163>": [], "overrides.get_testing_overrides.<dict1>.<lambda164>": [], "overrides.get_testing_overrides.<dict1>.<lambda165>": [], "overrides.get_testing_overrides.<dict1>.<lambda166>": [], "overrides.get_testing_overrides.<dict1>.<lambda167>": [], "overrides.get_testing_overrides.<dict1>.<lambda168>": [], "overrides.get_testing_overrides.<dict1>.<lambda169>": [], "overrides.get_testing_overrides.<dict1>.<lambda170>": [], "overrides.get_testing_overrides.<dict1>.<lambda171>": [], "overrides.get_testing_overrides.<dict1>.<lambda172>": [], "overrides.get_testing_overrides.<dict1>.<lambda173>": [], "overrides.get_testing_overrides.<dict1>.<lambda174>": [], "overrides.get_testing_overrides.<dict1>.<lambda175>": [], "overrides.get_testing_overrides.<dict1>.<lambda176>": [], "overrides.get_testing_overrides.<dict1>.<lambda177>": [], "overrides.get_testing_overrides.<dict1>.<lambda178>": [], "overrides.get_testing_overrides.<dict1>.<lambda179>": [], "overrides.get_testing_overrides.<dict1>.<lambda180>": [], "overrides.get_testing_overrides.<dict1>.<lambda181>": [], "overrides.get_testing_overrides.<dict1>.<lambda182>": [], "overrides.get_testing_overrides.<dict1>.<lambda183>": [], "overrides.get_testing_overrides.<dict1>.<lambda184>": [], "overrides.get_testing_overrides.<dict1>.<lambda185>": [], "overrides.get_testing_overrides.<dict1>.<lambda186>": [], "overrides.get_testing_overrides.<dict1>.<lambda187>": [], "overrides.get_testing_overrides.<dict1>.<lambda188>": [], "overrides.get_testing_overrides.<dict1>.<lambda189>": [], "overrides.get_testing_overrides.<dict1>.<lambda190>": [], "overrides.get_testing_overrides.<dict1>.<lambda191>": [], "overrides.get_testing_overrides.<dict1>.<lambda192>": [], "overrides.get_testing_overrides.<dict1>.<lambda193>": [], "overrides.get_testing_overrides.<dict1>.<lambda194>": [], "overrides.get_testing_overrides.<dict1>.<lambda195>": [], "overrides.get_testing_overrides.<dict1>.<lambda196>": [], "overrides.get_testing_overrides.<dict1>.<lambda197>": [], "overrides.get_testing_overrides.<dict1>.<lambda198>": [], "overrides.get_testing_overrides.<dict1>.<lambda199>": [], "overrides.get_testing_overrides.<dict1>.<lambda200>": [], "overrides.get_testing_overrides.<dict1>.<lambda201>": [], "overrides.get_testing_overrides.<dict1>.<lambda202>": [], "overrides.get_testing_overrides.<dict1>.<lambda203>": [], "overrides.get_testing_overrides.<dict1>.<lambda204>": [], "overrides.get_testing_overrides.<dict1>.<lambda205>": [], "overrides.get_testing_overrides.<dict1>.<lambda206>": [], "overrides.get_testing_overrides.<dict1>.<lambda207>": [], "overrides.get_testing_overrides.<dict1>.<lambda208>": [], "overrides.get_testing_overrides.<dict1>.<lambda209>": [], "overrides.get_testing_overrides.<dict1>.<lambda210>": [], "overrides.get_testing_overrides.<dict1>.<lambda211>": [], "overrides.get_testing_overrides.<dict1>.<lambda212>": [], "overrides.get_testing_overrides.<dict1>.<lambda213>": [], "overrides.get_testing_overrides.<dict1>.<lambda214>": [], "overrides.get_testing_overrides.<dict1>.<lambda215>": [], "overrides.get_testing_overrides.<dict1>.<lambda216>": [], "overrides.get_testing_overrides.<dict1>.<lambda217>": [], "overrides.get_testing_overrides.<dict1>.<lambda218>": [], "overrides.get_testing_overrides.<dict1>.<lambda219>": [], "overrides.get_testing_overrides.<dict1>.<lambda220>": [], "overrides.get_testing_overrides.<dict1>.<lambda221>": [], "overrides.get_testing_overrides.<dict1>.<lambda222>": [], "overrides.get_testing_overrides.<dict1>.<lambda223>": [], "overrides.get_testing_overrides.<dict1>.<lambda224>": [], "overrides.get_testing_overrides.<dict1>.<lambda225>": [], "overrides.get_testing_overrides.<dict1>.<lambda226>": [], "overrides.get_testing_overrides.<dict1>.<lambda227>": [], "overrides.get_testing_overrides.<dict1>.<lambda228>": [], "overrides.get_testing_overrides.<dict1>.<lambda229>": [], "overrides.get_testing_overrides.<dict1>.<lambda230>": [], "overrides.get_testing_overrides.<dict1>.<lambda231>": [], "overrides.get_testing_overrides.<dict1>.<lambda232>": [], "overrides.get_testing_overrides.<dict1>.<lambda233>": [], "overrides.get_testing_overrides.<dict1>.<lambda234>": [], "overrides.get_testing_overrides.<dict1>.<lambda235>": [], "overrides.get_testing_overrides.<dict1>.<lambda236>": [], "overrides.get_testing_overrides.<dict1>.<lambda237>": [], "overrides.get_testing_overrides.<dict1>.<lambda238>": [], "overrides.get_testing_overrides.<dict1>.<lambda239>": [], "overrides.get_testing_overrides.<dict1>.<lambda240>": [], "overrides.get_testing_overrides.<dict1>.<lambda241>": [], "overrides.get_testing_overrides.<dict1>.<lambda242>": [], "overrides.get_testing_overrides.<dict1>.<lambda243>": [], "overrides.get_testing_overrides.<dict1>.<lambda244>": [], "overrides.get_testing_overrides.<dict1>.<lambda245>": [], "overrides.get_testing_overrides.<dict1>.<lambda246>": [], "overrides.get_testing_overrides.<dict1>.<lambda247>": [], "overrides.get_testing_overrides.<dict1>.<lambda248>": [], "overrides.get_testing_overrides.<dict1>.<lambda249>": [], "overrides.get_testing_overrides.<dict1>.<lambda250>": [], "overrides.get_testing_overrides.<dict1>.<lambda251>": [], "overrides.get_testing_overrides.<dict1>.<lambda252>": [], "overrides.get_testing_overrides.<dict1>.<lambda253>": [], "overrides.get_testing_overrides.<dict1>.<lambda254>": [], "overrides.get_testing_overrides.<dict1>.<lambda255>": [], "overrides.get_testing_overrides.<dict1>.<lambda256>": [], "overrides.get_testing_overrides.<dict1>.<lambda257>": [], "overrides.get_testing_overrides.<dict1>.<lambda258>": [], "overrides.get_testing_overrides.<dict1>.<lambda259>": [], "overrides.get_testing_overrides.<dict1>.<lambda260>": [], "overrides.get_testing_overrides.<dict1>.<lambda261>": [], "overrides.get_testing_overrides.<dict1>.<lambda262>": [], "overrides.get_testing_overrides.<dict1>.<lambda263>": [], "overrides.get_testing_overrides.<dict1>.<lambda264>": [], "overrides.get_testing_overrides.<dict1>.<lambda265>": [], "overrides.get_testing_overrides.<dict1>.<lambda266>": [], "overrides.get_testing_overrides.<dict1>.<lambda267>": [], "overrides.get_testing_overrides.<dict1>.<lambda268>": [], "overrides.get_testing_overrides.<dict1>.<lambda269>": [], "overrides.get_testing_overrides.<dict1>.<lambda270>": [], "overrides.get_testing_overrides.<dict1>.<lambda271>": [], "overrides.get_testing_overrides.<dict1>.<lambda272>": [], "overrides.get_testing_overrides.<dict1>.<lambda273>": [], "overrides.get_testing_overrides.<dict1>.<lambda274>": [], "overrides.get_testing_overrides.<dict1>.<lambda275>": [], "overrides.get_testing_overrides.<dict1>.<lambda276>": [], "overrides.get_testing_overrides.<dict1>.<lambda277>": [], "overrides.get_testing_overrides.<dict1>.<lambda278>": [], "overrides.get_testing_overrides.<dict1>.<lambda279>": [], "overrides.get_testing_overrides.<dict1>.<lambda280>": [], "overrides.get_testing_overrides.<dict1>.<lambda281>": [], "overrides.get_testing_overrides.<dict1>.<lambda282>": [], "overrides.get_testing_overrides.<dict1>.<lambda283>": [], "overrides.get_testing_overrides.<dict1>.<lambda284>": [], "overrides.get_testing_overrides.<dict1>.<lambda285>": [], "overrides.get_testing_overrides.<dict1>.<lambda286>": [], "overrides.get_testing_overrides.<dict1>.<lambda287>": [], "overrides.get_testing_overrides.<dict1>.<lambda288>": [], "overrides.get_testing_overrides.<dict1>.<lambda289>": [], "overrides.get_testing_overrides.<dict1>.<lambda290>": [], "overrides.get_testing_overrides.<dict1>.<lambda291>": [], "overrides.get_testing_overrides.<dict1>.<lambda292>": [], "overrides.get_testing_overrides.<dict1>.<lambda293>": [], "overrides.get_testing_overrides.<dict1>.<lambda294>": [], "overrides.get_testing_overrides.<dict1>.<lambda295>": [], "overrides.get_testing_overrides.<dict1>.<lambda296>": [], "overrides.get_testing_overrides.<dict1>.<lambda297>": [], "overrides.get_testing_overrides.<dict1>.<lambda298>": [], "overrides.get_testing_overrides.<dict1>.<lambda299>": [], "overrides.get_testing_overrides.<dict1>.<lambda300>": [], "overrides.get_testing_overrides.<dict1>.<lambda301>": [], "overrides.get_testing_overrides.<dict1>.<lambda302>": [], "overrides.get_testing_overrides.<dict1>.<lambda303>": [], "overrides.get_testing_overrides.<dict1>.<lambda304>": [], "overrides.get_testing_overrides.<dict1>.<lambda305>": [], "overrides.get_testing_overrides.<dict1>.<lambda306>": [], "overrides.get_testing_overrides.<dict1>.<lambda307>": [], "overrides.get_testing_overrides.<dict1>.<lambda308>": [], "overrides.get_testing_overrides.<dict1>.<lambda309>": [], "overrides.get_testing_overrides.<dict1>.<lambda310>": [], "overrides.get_testing_overrides.<dict1>.<lambda311>": [], "overrides.get_testing_overrides.<dict1>.<lambda312>": [], "overrides.get_testing_overrides.<dict1>.<lambda313>": [], "overrides.get_testing_overrides.<dict1>.<lambda314>": [], "overrides.get_testing_overrides.<dict1>.<lambda315>": [], "overrides.get_testing_overrides.<dict1>.<lambda316>": [], "overrides.get_testing_overrides.<dict1>.<lambda317>": [], "overrides.get_testing_overrides.<dict1>.<lambda318>": [], "overrides.get_testing_overrides.<dict1>.<lambda319>": [], "overrides.get_testing_overrides.<dict1>.<lambda320>": [], "overrides.get_testing_overrides.<dict1>.<lambda321>": [], "overrides.get_testing_overrides.<dict1>.<lambda322>": [], "overrides.get_testing_overrides.<dict1>.<lambda323>": [], "overrides.get_testing_overrides.<dict1>.<lambda324>": [], "overrides.get_testing_overrides.<dict1>.<lambda325>": [], "overrides.get_testing_overrides.<dict1>.<lambda326>": [], "overrides.get_testing_overrides.<dict1>.<lambda327>": [], "overrides.get_testing_overrides.<dict1>.<lambda328>": [], "overrides.get_testing_overrides.<dict1>.<lambda329>": [], "overrides.get_testing_overrides.<dict1>.<lambda330>": [], "overrides.get_testing_overrides.<dict1>.<lambda331>": [], "overrides.get_testing_overrides.<dict1>.<lambda332>": [], "overrides.get_testing_overrides.<dict1>.<lambda333>": [], "overrides.get_testing_overrides.<dict1>.<lambda334>": [], "overrides.get_testing_overrides.<dict1>.<lambda335>": [], "overrides.get_testing_overrides.<dict1>.<lambda336>": [], "overrides.get_testing_overrides.<dict1>.<lambda337>": [], "overrides.get_testing_overrides.<dict1>.<lambda338>": [], "overrides.get_testing_overrides.<dict1>.<lambda339>": [], "overrides.get_testing_overrides.<dict1>.<lambda340>": [], "overrides.get_testing_overrides.<dict1>.<lambda341>": [], "overrides.get_testing_overrides.<dict1>.<lambda342>": [], "overrides.get_testing_overrides.<dict1>.<lambda343>": [], "overrides.get_testing_overrides.<dict1>.<lambda344>": [], "overrides.get_testing_overrides.<dict1>.<lambda345>": [], "overrides.get_testing_overrides.<dict1>.<lambda346>": [], "overrides.get_testing_overrides.<dict1>.<lambda347>": [], "overrides.get_testing_overrides.<dict1>.<lambda348>": [], "overrides.get_testing_overrides.<dict1>.<lambda349>": [], "overrides.get_testing_overrides.<dict1>.<lambda350>": [], "overrides.get_testing_overrides.<dict1>.<lambda351>": [], "overrides.get_testing_overrides.<dict1>.<lambda352>": [], "overrides.get_testing_overrides.<dict1>.<lambda353>": [], "overrides.get_testing_overrides.<dict1>.<lambda354>": [], "overrides.get_testing_overrides.<dict1>.<lambda355>": [], "overrides.get_testing_overrides.<dict1>.<lambda356>": [], "overrides.get_testing_overrides.<dict1>.<lambda357>": [], "overrides.get_testing_overrides.<dict1>.<lambda358>": [], "overrides.get_testing_overrides.<dict1>.<lambda359>": [], "overrides.get_testing_overrides.<dict1>.<lambda360>": [], "overrides.get_testing_overrides.<dict1>.<lambda361>": [], "overrides.get_testing_overrides.<dict1>.<lambda362>": [], "overrides.get_testing_overrides.<dict1>.<lambda363>": [], "overrides.get_testing_overrides.<dict1>.<lambda364>": [], "overrides.get_testing_overrides.<dict1>.<lambda365>": [], "overrides.get_testing_overrides.<dict1>.<lambda366>": [], "overrides.get_testing_overrides.<dict1>.<lambda367>": [], "overrides.get_testing_overrides.<dict1>.<lambda368>": [], "overrides.get_testing_overrides.<dict1>.<lambda369>": [], "overrides.get_testing_overrides.<dict1>.<lambda370>": [], "overrides.get_testing_overrides.<dict1>.<lambda371>": [], "overrides.get_testing_overrides.<dict1>.<lambda372>": [], "overrides.get_testing_overrides.<dict1>.<lambda373>": [], "overrides.get_testing_overrides.<dict1>.<lambda374>": [], "overrides.get_testing_overrides.<dict1>.<lambda375>": [], "overrides.get_testing_overrides.<dict1>.<lambda376>": [], "overrides.get_testing_overrides.<dict1>.<lambda377>": [], "overrides.get_testing_overrides.<dict1>.<lambda378>": [], "overrides.get_testing_overrides.<dict1>.<lambda379>": [], "overrides.get_testing_overrides.<dict1>.<lambda380>": [], "overrides.get_testing_overrides.<dict1>.<lambda381>": [], "overrides.get_testing_overrides.<dict1>.<lambda382>": [], "overrides.get_testing_overrides.<dict1>.<lambda383>": [], "overrides.get_testing_overrides.<dict1>.<lambda384>": [], "overrides.get_testing_overrides.<dict1>.<lambda385>": [], "overrides.get_testing_overrides.<dict1>.<lambda386>": [], "overrides.get_testing_overrides.<dict1>.<lambda387>": [], "overrides.get_testing_overrides.<dict1>.<lambda388>": [], "overrides.get_testing_overrides.<dict1>.<lambda389>": [], "overrides.get_testing_overrides.<dict1>.<lambda390>": [], "overrides.get_testing_overrides.<dict1>.<lambda391>": [], "overrides.get_testing_overrides.<dict1>.<lambda392>": [], "overrides.get_testing_overrides.<dict1>.<lambda393>": [], "overrides.get_testing_overrides.<dict1>.<lambda394>": [], "overrides.get_testing_overrides.<dict1>.<lambda395>": [], "overrides.get_testing_overrides.<dict1>.<lambda396>": [], "overrides.get_testing_overrides.<dict1>.<lambda397>": [], "overrides.get_testing_overrides.<dict1>.<lambda398>": [], "overrides.get_testing_overrides.<dict1>.<lambda399>": [], "overrides.get_testing_overrides.<dict1>.<lambda400>": [], "overrides.get_testing_overrides.<dict1>.<lambda401>": [], "overrides.get_testing_overrides.<dict1>.<lambda402>": [], "overrides.get_testing_overrides.<dict1>.<lambda403>": [], "overrides.get_testing_overrides.<dict1>.<lambda404>": [], "overrides.get_testing_overrides.<dict1>.<lambda405>": [], "overrides.get_testing_overrides.<dict1>.<lambda406>": [], "overrides.get_testing_overrides.<dict1>.<lambda407>": [], "overrides.get_testing_overrides.<dict1>.<lambda408>": [], "overrides.get_testing_overrides.<dict1>.<lambda409>": [], "overrides.get_testing_overrides.<dict1>.<lambda410>": [], "overrides.get_testing_overrides.<dict1>.<lambda411>": [], "overrides.get_testing_overrides.<dict1>.<lambda412>": [], "overrides.get_testing_overrides.<dict1>.<lambda413>": [], "overrides.get_testing_overrides.<dict1>.<lambda414>": [], "overrides.get_testing_overrides.<dict1>.<lambda415>": [], "overrides.get_testing_overrides.<dict1>.<lambda416>": [], "overrides.get_testing_overrides.<dict1>.<lambda417>": [], "overrides.get_testing_overrides.<dict1>.<lambda418>": [], "overrides.get_testing_overrides.<dict1>.<lambda419>": [], "overrides.get_testing_overrides.<dict1>.<lambda420>": [], "overrides.get_testing_overrides.<dict1>.<lambda421>": [], "overrides.get_testing_overrides.<dict1>.<lambda422>": [], "overrides.get_testing_overrides.<dict1>.<lambda423>": [], "overrides.get_testing_overrides.<dict1>.<lambda424>": [], "overrides.get_testing_overrides.<dict1>.<lambda425>": [], "overrides.get_testing_overrides.<dict1>.<lambda426>": [], "overrides.get_testing_overrides.<dict1>.<lambda427>": [], "overrides.get_testing_overrides.<dict1>.<lambda428>": [], "overrides.get_testing_overrides.<dict1>.<lambda429>": [], "overrides.get_testing_overrides.<dict1>.<lambda430>": [], "overrides.get_testing_overrides.<dict1>.<lambda431>": [], "overrides.get_testing_overrides.<dict1>.<lambda432>": [], "overrides.get_testing_overrides.<dict1>.<lambda433>": [], "overrides.get_testing_overrides.<dict1>.<lambda434>": [], "overrides.get_testing_overrides.<dict1>.<lambda435>": [], "overrides.get_testing_overrides.<dict1>.<lambda436>": [], "overrides.get_testing_overrides.<dict1>.<lambda437>": [], "overrides.get_testing_overrides.<dict1>.<lambda438>": [], "overrides.get_testing_overrides.<dict1>.<lambda439>": [], "overrides.get_testing_overrides.<dict1>.<lambda440>": [], "overrides.get_testing_overrides.<dict1>.<lambda441>": [], "overrides.get_testing_overrides.<dict1>.<lambda442>": [], "overrides.get_testing_overrides.<dict1>.<lambda443>": [], "overrides.get_testing_overrides.<dict1>.<lambda444>": [], "overrides.get_testing_overrides.<dict1>.<lambda445>": [], "overrides.get_testing_overrides.<dict1>.<lambda446>": [], "overrides.get_testing_overrides.<dict1>.<lambda447>": [], "overrides.get_testing_overrides.<dict1>.<lambda448>": [], "overrides.get_testing_overrides.<dict1>.<lambda449>": [], "overrides.get_testing_overrides.<dict1>.<lambda450>": [], "overrides.get_testing_overrides.<dict1>.<lambda451>": [], "overrides.get_testing_overrides.<dict1>.<lambda452>": [], "overrides.get_testing_overrides.<dict1>.<lambda453>": [], "overrides.get_testing_overrides.<dict1>.<lambda454>": [], "overrides.get_testing_overrides.<dict1>.<lambda455>": [], "overrides.get_testing_overrides.<dict1>.<lambda456>": [], "overrides.get_testing_overrides.<dict1>.<lambda457>": [], "overrides.get_testing_overrides.<dict1>.<lambda458>": [], "overrides.get_testing_overrides.<dict1>.<lambda459>": [], "overrides.get_testing_overrides.<dict1>.<lambda460>": [], "overrides.get_testing_overrides.<dict1>.<lambda461>": [], "overrides.get_testing_overrides.<dict1>.<lambda462>": [], "overrides.get_testing_overrides.<dict1>.<lambda463>": [], "overrides.get_testing_overrides.<dict1>.<lambda464>": [], "overrides.get_testing_overrides.<dict1>.<lambda465>": [], "overrides.get_testing_overrides.<dict1>.<lambda466>": [], "overrides.get_testing_overrides.<dict1>.<lambda467>": [], "overrides.get_testing_overrides.<dict1>.<lambda468>": [], "overrides.get_testing_overrides.<dict1>.<lambda469>": [], "overrides.get_testing_overrides.<dict1>.<lambda470>": [], "overrides.get_testing_overrides.<dict1>.<lambda471>": [], "overrides.get_testing_overrides.<dict1>.<lambda472>": [], "overrides.get_testing_overrides.<dict1>.<lambda473>": [], "overrides.get_testing_overrides.<dict1>.<lambda474>": [], "overrides.get_testing_overrides.<dict1>.<lambda475>": [], "overrides.get_testing_overrides.<dict1>.<lambda476>": [], "overrides.get_testing_overrides.<dict1>.<lambda477>": [], "overrides.get_testing_overrides.<dict1>.<lambda478>": [], "overrides.get_testing_overrides.<dict1>.<lambda479>": [], "overrides.get_testing_overrides.<dict1>.<lambda480>": [], "overrides.get_testing_overrides.<dict1>.<lambda481>": [], "overrides.get_testing_overrides.<dict1>.<lambda482>": [], "overrides.get_testing_overrides.<dict1>.<lambda483>": [], "overrides.get_testing_overrides.<dict1>.<lambda484>": [], "overrides.get_testing_overrides.<dict1>.<lambda485>": [], "overrides.get_testing_overrides.<dict1>.<lambda486>": [], "overrides.get_testing_overrides.<dict1>.<lambda487>": [], "overrides.get_testing_overrides.<dict1>.<lambda488>": [], "overrides.get_testing_overrides.<dict1>.<lambda489>": [], "overrides.get_testing_overrides.<dict1>.<lambda490>": [], "overrides.get_testing_overrides.<dict1>.<lambda491>": [], "overrides.get_testing_overrides.<dict1>.<lambda492>": [], "overrides.get_testing_overrides.<dict1>.<lambda493>": [], "overrides.get_testing_overrides.<dict1>.<lambda494>": [], "overrides.get_testing_overrides.<dict1>.<lambda495>": [], "overrides.get_testing_overrides.<dict1>.<lambda496>": [], "overrides.get_testing_overrides.<dict1>.<lambda497>": [], "overrides.get_testing_overrides.<dict1>.<lambda498>": [], "overrides.get_testing_overrides.<dict1>.<lambda499>": [], "overrides.get_testing_overrides.<dict1>.<lambda500>": [], "overrides.get_testing_overrides.<dict1>.<lambda501>": [], "overrides.get_testing_overrides.<dict1>.<lambda502>": [], "overrides.get_testing_overrides.<dict1>.<lambda503>": [], "overrides.get_testing_overrides.<dict1>.<lambda504>": [], "overrides.get_testing_overrides.<dict1>.<lambda505>": [], "overrides.get_testing_overrides.<dict1>.<lambda506>": [], "overrides.get_testing_overrides.<dict1>.<lambda507>": [], "overrides.get_testing_overrides.<dict1>.<lambda508>": [], "overrides.get_testing_overrides.<dict1>.<lambda509>": [], "overrides.get_testing_overrides.<dict1>.<lambda510>": [], "overrides.get_testing_overrides.<dict1>.<lambda511>": [], "overrides.get_testing_overrides.<dict1>.<lambda512>": [], "overrides.get_testing_overrides.<dict1>.<lambda513>": [], "overrides.get_testing_overrides.<dict1>.<lambda514>": [], "overrides.get_testing_overrides.<dict1>.<lambda515>": [], "overrides.get_testing_overrides.<dict1>.<lambda516>": [], "overrides.get_testing_overrides.<dict1>.<lambda517>": [], "overrides.get_testing_overrides.<dict1>.<lambda518>": [], "overrides.get_testing_overrides.<dict1>.<lambda519>": [], "overrides.get_testing_overrides.<dict1>.<lambda520>": [], "overrides.get_testing_overrides.<dict1>.<lambda521>": [], "overrides.get_testing_overrides.<dict1>.<lambda522>": [], "overrides.get_testing_overrides.<dict1>.<lambda523>": [], "overrides.get_testing_overrides.<dict1>.<lambda524>": [], "overrides.get_testing_overrides.<dict1>.<lambda525>": [], "overrides.get_testing_overrides.<dict1>.<lambda526>": [], "overrides.get_testing_overrides.<dict1>.<lambda527>": [], "overrides.get_testing_overrides.<dict1>.<lambda528>": [], "overrides.get_testing_overrides.<dict1>.<lambda529>": [], "overrides.get_testing_overrides.<dict1>.<lambda530>": [], "overrides.get_testing_overrides.<dict1>.<lambda531>": [], "overrides.get_testing_overrides.<dict1>.<lambda532>": [], "overrides.get_testing_overrides.<dict1>.<lambda533>": [], "overrides.get_testing_overrides.<dict1>.<lambda534>": [], "overrides.get_testing_overrides.<dict1>.<lambda535>": [], "overrides.get_testing_overrides.<dict1>.<lambda536>": [], "overrides.get_testing_overrides.<dict1>.<lambda537>": [], "overrides.get_testing_overrides.<dict1>.<lambda538>": [], "overrides.get_testing_overrides.<dict1>.<lambda539>": [], "overrides.get_testing_overrides.<dict1>.<lambda540>": [], "overrides.get_testing_overrides.<dict1>.<lambda541>": [], "overrides.get_testing_overrides.<dict1>.<lambda542>": [], "overrides.get_testing_overrides.<dict1>.<lambda543>": [], "overrides.get_testing_overrides.<dict1>.<lambda544>": [], "overrides.get_testing_overrides.<dict1>.<lambda545>": [], "overrides.get_testing_overrides.<dict1>.<lambda546>": [], "overrides.get_testing_overrides.<dict1>.<lambda547>": [], "overrides.get_testing_overrides.<dict1>.<lambda548>": [], "overrides.get_testing_overrides.<dict1>.<lambda549>": [], "overrides.get_testing_overrides.<dict1>.<lambda550>": [], "overrides.get_testing_overrides.<dict1>.<lambda551>": [], "overrides.get_testing_overrides.<dict1>.<lambda552>": [], "overrides.get_testing_overrides.<dict1>.<lambda553>": [], "overrides.get_testing_overrides.<dict1>.<lambda554>": [], "overrides.get_testing_overrides.<dict1>.<lambda555>": [], "overrides.get_testing_overrides.<dict1>.<lambda556>": [], "overrides.get_testing_overrides.<dict1>.<lambda557>": [], "overrides.get_testing_overrides.<dict1>.<lambda558>": [], "overrides.get_testing_overrides.<dict1>.<lambda559>": [], "overrides.get_testing_overrides.<dict1>.<lambda560>": [], "overrides.get_testing_overrides.<dict1>.<lambda561>": [], "overrides.get_testing_overrides.<dict1>.<lambda562>": [], "overrides.get_testing_overrides.<dict1>.<lambda563>": [], "overrides.get_testing_overrides.<dict1>.<lambda564>": [], "overrides.get_testing_overrides.<dict1>.<lambda565>": [], "overrides.get_testing_overrides.<dict1>.<lambda566>": [], "overrides.get_testing_overrides.<dict1>.<lambda567>": [], "overrides.get_testing_overrides.<dict1>.<lambda568>": [], "overrides.get_testing_overrides.<dict1>.<lambda569>": [], "overrides.get_testing_overrides.<dict1>.<lambda570>": [], "overrides.get_testing_overrides.<dict1>.<lambda571>": [], "overrides.get_testing_overrides.<dict1>.<lambda572>": [], "overrides.get_testing_overrides.<dict1>.<lambda573>": [], "overrides.get_testing_overrides.<dict1>.<lambda574>": [], "overrides.get_testing_overrides.<dict1>.<lambda575>": [], "overrides.get_testing_overrides.<dict1>.<lambda576>": [], "overrides.get_testing_overrides.<dict1>.<lambda577>": [], "overrides.get_testing_overrides.<dict1>.<lambda578>": [], "overrides.get_testing_overrides.<dict1>.<lambda579>": [], "overrides.get_testing_overrides.<dict1>.<lambda580>": [], "overrides.get_testing_overrides.<dict1>.<lambda581>": [], "overrides.get_testing_overrides.<dict1>.<lambda582>": [], "overrides.get_testing_overrides.<dict1>.<lambda583>": [], "overrides.get_testing_overrides.<dict1>.<lambda584>": [], "overrides.get_testing_overrides.<dict1>.<lambda585>": [], "overrides.get_testing_overrides.<dict1>.<lambda586>": [], "overrides.get_testing_overrides.<dict1>.<lambda587>": [], "overrides.get_testing_overrides.<dict1>.<lambda588>": [], "overrides.get_testing_overrides.<dict1>.<lambda589>": [], "overrides.get_testing_overrides.<dict1>.<lambda590>": [], "overrides.get_testing_overrides.<dict1>.<lambda591>": [], "overrides.get_testing_overrides.<dict1>.<lambda592>": [], "overrides.get_testing_overrides.<dict1>.<lambda593>": [], "overrides.get_testing_overrides.<dict1>.<lambda594>": [], "overrides.get_testing_overrides.<dict1>.<lambda595>": [], "overrides.get_testing_overrides.<dict1>.<lambda596>": [], "overrides.get_testing_overrides.<dict1>.<lambda597>": [], "overrides.get_testing_overrides.<dict1>.<lambda598>": [], "overrides.get_testing_overrides.<dict1>.<lambda599>": [], "overrides.get_testing_overrides.<dict1>.<lambda600>": [], "overrides.get_testing_overrides.<dict1>.<lambda601>": [], "overrides.get_testing_overrides.<dict1>.<lambda602>": [], "overrides.get_testing_overrides.<dict1>.<lambda603>": [], "overrides.get_testing_overrides.<dict1>.<lambda604>": [], "overrides.get_testing_overrides.<dict1>.<lambda605>": [], "overrides.get_testing_overrides.<dict1>.<lambda606>": [], "overrides.get_testing_overrides.<dict1>.<lambda607>": [], "overrides.get_testing_overrides.<dict1>.<lambda608>": [], "overrides.get_testing_overrides.<dict1>.<lambda609>": [], "overrides.get_testing_overrides.<dict1>.<lambda610>": [], "overrides.get_testing_overrides.<dict1>.<lambda611>": [], "overrides.get_testing_overrides.<dict1>.<lambda612>": [], "overrides.get_testing_overrides.<dict1>.<lambda613>": [], "overrides.get_testing_overrides.<dict1>.<lambda614>": [], "overrides.get_testing_overrides.<dict1>.<lambda615>": [], "overrides.get_testing_overrides.<dict1>.<lambda616>": [], "overrides.get_testing_overrides.<dict1>.<lambda617>": [], "overrides.get_testing_overrides.<dict1>.<lambda618>": [], "overrides.get_testing_overrides.<dict1>.<lambda619>": [], "overrides.get_testing_overrides.<dict1>.<lambda620>": [], "overrides.get_testing_overrides.<dict1>.<lambda621>": [], "overrides.get_testing_overrides.<dict1>.<lambda622>": [], "overrides.get_testing_overrides.<dict1>.<lambda623>": [], "overrides.get_testing_overrides.<dict1>.<lambda624>": [], "overrides.get_testing_overrides.<dict1>.<lambda625>": [], "overrides.get_testing_overrides.<dict1>.<lambda626>": [], "overrides.get_testing_overrides.<dict1>.<lambda627>": [], "overrides.get_testing_overrides.<dict1>.<lambda628>": [], "overrides.get_testing_overrides.<dict1>.<lambda629>": [], "overrides.get_testing_overrides.<dict1>.<lambda630>": [], "overrides.get_testing_overrides.<dict1>.<lambda631>": [], "overrides.get_testing_overrides.<dict1>.<lambda632>": [], "overrides.get_testing_overrides.<dict1>.<lambda633>": [], "overrides.get_testing_overrides.<dict1>.<lambda634>": [], "overrides.get_testing_overrides.<dict1>.<lambda635>": [], "overrides.get_testing_overrides.<dict1>.<lambda636>": [], "overrides.get_testing_overrides.<dict1>.<lambda637>": [], "overrides.get_testing_overrides.<dict1>.<lambda638>": [], "overrides.get_testing_overrides.<dict1>.<lambda639>": [], "overrides.get_testing_overrides.<dict1>.<lambda640>": [], "overrides.get_testing_overrides.<dict1>.<lambda641>": [], "overrides.get_testing_overrides.<dict1>.<lambda642>": [], "overrides.get_testing_overrides.<dict1>.<lambda643>": [], "overrides.get_testing_overrides.<dict1>.<lambda644>": [], "overrides.get_testing_overrides.<dict1>.<lambda645>": [], "overrides.get_testing_overrides.<dict1>.<lambda646>": [], "overrides.get_testing_overrides.<dict1>.<lambda647>": [], "overrides.get_testing_overrides.<dict1>.<lambda648>": [], "overrides.get_testing_overrides.<dict1>.<lambda649>": [], "overrides.get_testing_overrides.<dict1>.<lambda650>": [], "overrides.get_testing_overrides.<dict1>.<lambda651>": [], "overrides.get_testing_overrides.<dict1>.<lambda652>": [], "overrides.get_testing_overrides.<dict1>.<lambda653>": [], "overrides.get_testing_overrides.<dict1>.<lambda654>": [], "overrides.get_testing_overrides.<dict1>.<lambda655>": [], "overrides.get_testing_overrides.<dict1>.<lambda656>": [], "overrides.get_testing_overrides.<dict1>.<lambda657>": [], "overrides.get_testing_overrides.<dict1>.<lambda658>": [], "overrides.get_testing_overrides.<dict1>.<lambda659>": [], "overrides.get_testing_overrides.<dict1>.<lambda660>": [], "overrides.get_testing_overrides.<dict1>.<lambda661>": [], "overrides.get_testing_overrides.<dict1>.<lambda662>": [], "overrides.get_testing_overrides.<dict1>.<lambda663>": [], "overrides.get_testing_overrides.<dict1>.<lambda664>": [], "overrides.get_testing_overrides.<dict1>.<lambda665>": [], "overrides.get_testing_overrides.<dict1>.<lambda666>": [], "overrides.get_testing_overrides.<dict1>.<lambda667>": [], "overrides.get_testing_overrides.<dict1>.<lambda668>": [], "overrides.get_testing_overrides.<dict1>.<lambda669>": [], "overrides.get_testing_overrides.<dict1>.<lambda670>": [], "overrides.get_testing_overrides.<dict1>.<lambda671>": [], "overrides.get_testing_overrides.<dict1>.<lambda672>": [], "overrides.get_testing_overrides.<dict1>.<lambda673>": [], "overrides.get_testing_overrides.<dict1>.<lambda674>": [], "overrides.get_testing_overrides.<dict1>.<lambda675>": [], "overrides.get_testing_overrides.<dict1>.<lambda676>": [], "overrides.get_testing_overrides.<dict1>.<lambda677>": [], "overrides.get_testing_overrides.<dict1>.<lambda678>": [], "overrides.get_testing_overrides.<dict1>.<lambda679>": [], "overrides.get_testing_overrides.<dict1>.<lambda680>": [], "overrides.get_testing_overrides.<dict1>.<lambda681>": [], "overrides.get_testing_overrides.<dict1>.<lambda682>": [], "overrides.get_testing_overrides.<dict1>.<lambda683>": [], "overrides.get_testing_overrides.<dict1>.<lambda684>": [], "overrides.get_testing_overrides.<dict1>.<lambda685>": [], "overrides.get_testing_overrides.<dict1>.<lambda686>": [], "overrides.get_testing_overrides.<dict1>.<lambda687>": [], "overrides.get_testing_overrides.<dict1>.<lambda688>": [], "overrides.get_testing_overrides.<dict1>.<lambda689>": [], "overrides.get_testing_overrides.<dict1>.<lambda690>": [], "overrides.get_testing_overrides.<dict1>.<lambda691>": [], "overrides.get_testing_overrides.<dict1>.<lambda692>": [], "overrides.get_testing_overrides.<dict1>.<lambda693>": [], "overrides.get_testing_overrides.<dict1>.<lambda694>": [], "overrides.get_testing_overrides.<dict1>.<lambda695>": [], "overrides.get_testing_overrides.<dict1>.<lambda696>": [], "overrides.get_testing_overrides.<dict1>.<lambda697>": [], "overrides.get_testing_overrides.<dict1>.<lambda698>": [], "overrides.get_testing_overrides.<dict1>.<lambda699>": [], "overrides.get_testing_overrides.<dict1>.<lambda700>": [], "overrides.get_testing_overrides.<dict1>.<lambda701>": [], "overrides.get_testing_overrides.<dict1>.<lambda702>": [], "overrides.get_testing_overrides.<dict1>.<lambda703>": [], "overrides.get_testing_overrides.<dict1>.<lambda704>": [], "overrides.get_testing_overrides.<dict1>.<lambda705>": [], "overrides.get_testing_overrides.<dict1>.<lambda706>": [], "overrides.get_testing_overrides.<dict1>.<lambda707>": [], "overrides.get_testing_overrides.<dict1>.<lambda708>": [], "overrides.get_testing_overrides.<dict1>.<lambda709>": [], "overrides.get_testing_overrides.<dict1>.<lambda710>": [], "overrides.get_testing_overrides.<dict1>.<lambda711>": [], "overrides.get_testing_overrides.<dict1>.<lambda712>": [], "overrides.get_testing_overrides.<dict1>.<lambda713>": [], "overrides.get_testing_overrides.<dict1>.<lambda714>": [], "overrides.get_testing_overrides.<dict1>.<lambda715>": [], "overrides.get_testing_overrides.<dict1>.<lambda716>": [], "overrides.get_testing_overrides.<dict1>.<lambda717>": [], "overrides.get_testing_overrides.<dict1>.<lambda718>": [], "overrides.get_testing_overrides.<dict1>.<lambda719>": [], "overrides.get_testing_overrides.<dict1>.<lambda720>": [], "overrides.get_testing_overrides.<dict1>.<lambda721>": [], "overrides.get_testing_overrides.<dict1>.<lambda722>": [], "overrides.get_testing_overrides.<dict1>.<lambda723>": [], "overrides.get_testing_overrides.<dict1>.<lambda724>": [], "overrides.get_testing_overrides.<dict1>.<lambda725>": [], "overrides.get_testing_overrides.<dict1>.<lambda726>": [], "overrides.get_testing_overrides.<dict1>.<lambda727>": [], "overrides.get_testing_overrides.<dict1>.<lambda728>": [], "overrides.get_testing_overrides.<dict1>.<lambda729>": [], "overrides.get_testing_overrides.<dict1>.<lambda730>": [], "overrides.get_testing_overrides.<dict1>.<lambda731>": [], "overrides.get_testing_overrides.<dict1>.<lambda732>": [], "overrides.get_testing_overrides.<dict1>.<lambda733>": [], "overrides.get_testing_overrides.<dict1>.<lambda734>": [], "overrides.get_testing_overrides.<dict1>.<lambda735>": [], "overrides.get_testing_overrides.<dict1>.<lambda736>": [], "overrides.get_testing_overrides.<dict1>.<lambda737>": [], "overrides.get_testing_overrides.<dict1>.<lambda738>": [], "overrides.get_testing_overrides.<dict1>.<lambda739>": [], "overrides.get_testing_overrides.<dict1>.<lambda740>": [], "overrides.get_testing_overrides.<dict1>.<lambda741>": [], "overrides.get_testing_overrides.<dict1>.<lambda742>": [], "overrides.get_testing_overrides.<dict1>.<lambda743>": [], "overrides.get_testing_overrides.<dict1>.<lambda744>": [], "overrides.get_testing_overrides.<dict1>.<lambda745>": [], "overrides.get_testing_overrides.<dict1>.<lambda746>": [], "overrides.get_testing_overrides.<dict1>.<lambda747>": [], "overrides.get_testing_overrides.<dict1>.<lambda748>": [], "overrides.get_testing_overrides.<dict1>.<lambda749>": [], "overrides.get_testing_overrides.<dict1>.<lambda750>": [], "overrides.get_testing_overrides.<dict1>.<lambda751>": [], "overrides.get_testing_overrides.<dict1>.<lambda752>": [], "overrides.get_testing_overrides.<dict1>.<lambda753>": [], "overrides.get_testing_overrides.<dict1>.<lambda754>": [], "overrides.get_testing_overrides.<dict1>.<lambda755>": [], "overrides.get_testing_overrides.<dict1>.<lambda756>": [], "overrides.get_testing_overrides.<dict1>.<lambda757>": [], "overrides.get_testing_overrides.<dict1>.<lambda758>": [], "overrides.get_testing_overrides.<dict1>.<lambda759>": [], "overrides.get_testing_overrides.<dict1>.<lambda760>": [], "overrides.get_testing_overrides.<dict1>.<lambda761>": [], "overrides.get_testing_overrides.<dict1>.<lambda762>": [], "overrides.get_testing_overrides.<dict1>.<lambda763>": [], "overrides.get_testing_overrides.<dict1>.<lambda764>": [], "overrides.get_testing_overrides.<dict1>.<lambda765>": [], "overrides.get_testing_overrides.<dict1>.<lambda766>": [], "overrides.get_testing_overrides.<dict1>.<lambda767>": [], "overrides.get_testing_overrides.<dict1>.<lambda768>": [], "overrides.get_testing_overrides.<dict1>.<lambda769>": [], "overrides.get_testing_overrides.<dict1>.<lambda770>": [], "overrides.get_testing_overrides.<dict1>.<lambda771>": [], "overrides.get_testing_overrides.<dict1>.<lambda772>": [], "overrides.get_testing_overrides.<dict1>.<lambda773>": [], "overrides.get_testing_overrides.<dict1>.<lambda774>": [], "overrides.get_testing_overrides.<dict1>.<lambda775>": [], "overrides.get_testing_overrides.<dict1>.<lambda776>": [], "overrides.get_testing_overrides.<dict1>.<lambda777>": [], "overrides.get_testing_overrides.<dict1>.<lambda778>": [], "overrides.get_testing_overrides.<dict1>.<lambda779>": [], "overrides.get_testing_overrides.<dict1>.<lambda780>": [], "overrides.get_testing_overrides.<dict1>.<lambda781>": [], "overrides.get_testing_overrides.<dict1>.<lambda782>": [], "overrides.get_testing_overrides.<dict1>.<lambda783>": [], "overrides.get_testing_overrides.<dict1>.<lambda784>": [], "overrides.get_testing_overrides.<dict1>.<lambda785>": [], "overrides.get_testing_overrides.<dict1>.<lambda786>": [], "overrides.get_testing_overrides.<dict1>.<lambda787>": [], "overrides.get_testing_overrides.<dict1>.<lambda788>": [], "overrides.get_testing_overrides.<dict1>.<lambda789>": [], "overrides.get_testing_overrides.<dict1>.<lambda790>": [], "overrides.get_testing_overrides.<dict1>.<lambda791>": [], "overrides.get_testing_overrides.<dict1>.<lambda792>": [], "overrides.get_testing_overrides.<dict1>.<lambda793>": [], "overrides.get_testing_overrides.<dict1>.<lambda794>": [], "overrides.get_testing_overrides.<dict1>.<lambda795>": [], "overrides.get_testing_overrides.<dict1>.<lambda796>": [], "overrides.get_testing_overrides.<dict1>.<lambda797>": [], "overrides.get_testing_overrides.<dict1>.<lambda798>": [], "overrides.get_testing_overrides.<dict1>.<lambda799>": [], "overrides.get_testing_overrides.<dict1>.<lambda800>": [], "overrides.wrap_torch_function": [], "overrides.wrap_torch_function.inner": ["functools.wraps"], "overrides.wrap_torch_function.inner.wrapped": ["overrides.handle_torch_function"], "overrides._get_overloaded_args": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.issubclass", "<builtin>.set", "<builtin>.hasattr", "<builtin>.type"], "torch._C._add_docstr": [], "overrides.get_overridable_functions": ["<builtin>.isinstance", "<builtin>.callable", "collections.defaultdict", "overrides.get_ignored_functions", "overrides.get_testing_overrides", "<builtin>.getattr", "<builtin>.dir", "<builtin>.hasattr"], "overrides._get_tensor_methods": ["<builtin>.set", "overrides.get_overridable_functions"], "overrides.is_tensor_method_or_property": ["overrides._get_tensor_methods"], "overrides.is_tensor_like": ["<builtin>.type", "<builtin>.hasattr"], "quasirandom": [], "quasirandom.SobolEngine.__init__": ["torch.zeros", "torch._sobol_engine_initialize_state_", "torch.device", "<builtin>.ValueError", "quasirandom.SobolEngine._scramble"], "torch._sobol_engine_initialize_state_": [], "quasirandom.SobolEngine._scramble": ["torch.pow", "torch.arange", "torch.mv", "torch.device", "torch._sobol_engine_scramble_", "torch.Generator", "torch.randint"], "quasirandom.SobolEngine.draw": ["torch.cat", "torch._sobol_engine_draw"], "torch._sobol_engine_draw": [], "quasirandom.SobolEngine.draw_base2": ["<builtin>.ValueError", "quasirandom.SobolEngine.draw"], "quasirandom.SobolEngine.reset": [], "quasirandom.SobolEngine.fast_forward": ["torch._sobol_engine_ff_"], "torch._sobol_engine_ff_": [], "torch._sobol_engine_scramble_": [], "quasirandom.SobolEngine.__repr__": [], "random": ["contextlib.contextmanager"], "random.set_rng_state": ["torch._C.default_generator.set_state", "torch.device", "_lazy_call", "<builtin>.isinstance"], "torch._C.default_generator.set_state": [], "random.get_rng_state": ["torch._C.default_generator.get_state", "_lazy_init", "current_device", "torch.device", "<builtin>.isinstance"], "torch._C.default_generator.get_state": [], "random.manual_seed": ["torch.cuda.manual_seed_all", "torch._C.default_generator.manual_seed", "torch.cuda._is_in_bad_fork", "<builtin>.int", "_lazy_call"], "torch.cuda._is_in_bad_fork": [], "torch.cuda.manual_seed_all": [], "torch._C.default_generator.manual_seed": [], "torch._C.default_generator.seed": [], "random.initial_seed": ["torch._C.default_generator.initial_seed", "_lazy_init", "current_device"], "torch._C.default_generator.initial_seed": [], "random.fork_rng": ["torch.cuda.set_rng_state", "warnings.warn", "<builtin>.range", "torch.cuda.device_count", "torch.set_rng_state", "<builtin>.list", "<builtin>.zip", "torch.cuda.get_rng_state", "torch.get_rng_state"], "serialization": ["copyreg.pickle", "struct.Struct", "serialization.register_package", "contextlib.contextmanager"], "serialization.mkdtemp": ["tempfile.mkdtemp", "shutil.rmtree"], "serialization._is_zipfile": ["<builtin>.len"], "serialization.register_package": [], "serialization.check_module_version_greater_or_equal": ["<builtin>.tuple", "<builtin>.enumerate", "<builtin>.RuntimeError", "<builtin>.type", "warnings.warn", "<builtin>.str", "pickle.__version__.split"], "pickle.__version__.split": [], "serialization._cpu_tag": ["<builtin>.type"], "serialization._cuda_tag": ["<builtin>.str", "<builtin>.type"], "serialization._cpu_deserialize": [], "serialization.validate_cuda_device": ["torch.cuda._utils._get_device_index", "torch.cuda.is_available", "<builtin>.RuntimeError", "torch.cuda.device_count"], "serialization._cuda_deserialize": ["serialization.validate_cuda_device", "torch.cuda.device", "<builtin>.getattr", "<builtin>.type"], "serialization.location_tag": ["torch.typename", "<builtin>.RuntimeError"], "serialization.default_restore_location": ["torch.typename", "<builtin>.RuntimeError"], "serialization.normalize_storage_type": ["<builtin>.getattr"], "serialization.storage_to_tensor_type": ["_utils._import_dotted_name", "<builtin>.type", "<builtin>.getattr"], "_utils._import_dotted_name": ["<builtin>.getattr", "<builtin>.__import__"], "serialization._is_path": ["<builtin>.isinstance"], "serialization._opener.__init__": [], "serialization._opener.__enter__": [], "serialization._opener.__exit__": [], "serialization._open_file.__init__": ["<builtin>.super", "<builtin>.open"], "serialization._open_file.__exit__": [], "serialization._open_buffer_reader.__init__": ["serialization._check_seekable", "<builtin>.super"], "serialization._check_seekable": ["serialization._check_seekable.raise_err_msg"], "serialization._open_buffer_writer.__exit__": [], "serialization._open_file_like": ["serialization._open_buffer_reader.__init__", "<builtin>.RuntimeError", "serialization._is_path", "serialization._open_file.__init__", "serialization._opener.__init__"], "serialization._open_zipfile_reader.__init__": ["torch._C.PyTorchFileReader", "<builtin>.super"], "torch._C.PyTorchFileReader": [], "serialization._open_zipfile_writer_file.__init__": ["<builtin>.str", "torch._C.PyTorchFileWriter", "<builtin>.super"], "torch._C.PyTorchFileWriter": [], "serialization._open_zipfile_writer_file.__exit__": [], "serialization._open_zipfile_writer_buffer.__init__": ["torch._C.PyTorchFileWriter", "<builtin>.super"], "serialization._open_zipfile_writer_buffer.__exit__": [], "serialization._open_zipfile_writer": ["serialization._open_zipfile_writer_buffer.__init__", "serialization._open_zipfile_writer_file.__init__", "serialization._is_path"], "serialization._is_compressed_file": [], "serialization._should_read_directly": ["serialization._is_compressed_file"], "serialization._check_seekable.raise_err_msg": ["<builtin>.str", "<builtin>.type"], "serialization._check_dill_version": ["<builtin>.str", "serialization.check_module_version_greater_or_equal", "<builtin>.ValueError"], "serialization.save": ["serialization._open_zipfile_writer", "serialization._open_file_like", "serialization._save", "serialization._check_dill_version", "serialization._legacy_save"], "serialization._save": ["<builtin>.sorted", "io.BytesIO", "pickle.Pickler", "<builtin>.len"], "serialization._legacy_save": ["pickle.Pickler", "pickle.dump", "<builtin>.sorted", "serialization._should_read_directly", "<builtin>.dict"], "serialization._legacy_save.persistent_id": ["serialization.location_tag", "<builtin>.type", "<builtin>.issubclass", "torch.is_storage", "typing.cast", "warnings.warn", "<builtin>.str", "serialization.normalize_storage_type", "<builtin>.isinstance", "torch._sources.get_source_lines_and_file"], "torch._sources.get_source_lines_and_file": [], "torch.is_storage": [], "serialization._save.persistent_id": ["serialization.location_tag", "<builtin>.type", "<builtin>.len", "torch.is_storage", "<builtin>.str", "serialization.normalize_storage_type"], "serialization.load": ["serialization._legacy_load", "serialization._is_zipfile", "serialization._is_torchscript_zip", "torch.jit.load", "serialization._open_file_like", "warnings.warn", "serialization._check_dill_version", "serialization._load", "serialization._open_zipfile_reader.__init__"], "serialization._is_torchscript_zip": [], "serialization._load": ["pickle.Unpickler.load", "pickle.Unpickler.__init__", "serialization._get_restore_location", "torch._utils._validate_loaded_sparse_tensors", "io.BytesIO"], "serialization._legacy_load": ["serialization._is_zipfile", "<builtin>.RuntimeError", "<builtin>.hasattr", "<builtin>.type", "pickle.Unpickler", "serialization._get_restore_location", "serialization._legacy_load.legacy_load", "torch._utils._validate_loaded_sparse_tensors", "serialization._check_seekable", "serialization._should_read_directly", "pickle.load"], "serialization._get_layout": ["torch.__dict__.values", "<builtin>.isinstance", "<builtin>.str"], "torch.__dict__.values": [], "serialization.<lambda1>": ["<builtin>.str"], "copyreg.pickle": [], "serialization._get_restore_location": ["<builtin>.isinstance"], "serialization._legacy_load._check_container_source": ["<builtin>.open", "<builtin>.len", "difflib.unified_diff", "warnings.warn", "torch._sources.get_source_lines_and_file", "torch.typename"], "difflib.unified_diff": [], "serialization._legacy_load.legacy_load": ["serialization.default_restore_location", "<builtin>.open", "serialization.mkdtemp", "struct.unpack", "<builtin>.range", "serialization.storage_to_tensor_type", "pickle.Unpickler", "os.path.join", "contextlib.closing", "tarfile.open", "pickle.load"], "serialization._legacy_load.legacy_load.persistent_load": ["<builtin>.all", "<builtin>.isinstance", "<builtin>.int", "serialization._legacy_load._check_container_source"], "serialization._legacy_load.persistent_load": ["serialization.default_restore_location", "<builtin>.RuntimeError", "serialization._legacy_load._check_container_source", "serialization._maybe_decode_ascii", "<builtin>.all", "<builtin>.isinstance"], "serialization._maybe_decode_ascii": ["<builtin>.isinstance"], "torch._utils._validate_loaded_sparse_tensors": [], "serialization._get_restore_location.restore_location": ["serialization.default_restore_location", "<builtin>.str"], "serialization._load.load_tensor": ["serialization.default_restore_location"], "serialization._load.persistent_load": ["serialization._load.load_tensor", "<builtin>.isinstance", "serialization._maybe_decode_ascii"], "serialization._load.UnpicklerWrapper.find_class": ["<builtin>.super"], "storage": ["typing.TypeVar"], "storage._StorageBase.__init__": [], "storage._StorageBase.__len__": [], "storage._StorageBase.__getitem__": [], "storage._StorageBase.copy_": [], "storage._StorageBase.size": [], "storage._StorageBase.type": [], "storage._StorageBase.cuda": [], "storage._StorageBase.element_size": [], "storage._StorageBase.get_device": [], "storage._StorageBase._share_filename_": [], "storage._StorageBase._share_fd_": [], "storage._StorageBase._new_using_filename": [], "storage._StorageBase._new_using_fd": [], "storage._StorageBase.__str__": ["<builtin>.len", "torch.typename", "<builtin>.range", "<builtin>.str"], "storage._StorageBase.__repr__": ["<builtin>.str"], "storage._StorageBase.__iter__": ["<builtin>.iter", "<builtin>.range", "storage._StorageBase.size", "<builtin>.map"], "storage._StorageBase.__iter__.<lambda1>": [], "storage._StorageBase.__copy__": ["storage._StorageBase.clone"], "storage._StorageBase.clone": ["storage._StorageBase.type", "torch.cuda.device", "_utils._type", "storage._StorageBase.size", "storage._StorageBase.get_device"], "storage._StorageBase.__deepcopy__": ["storage._StorageBase.clone"], "storage._StorageBase.__reduce__": ["torch.save", "io.BytesIO"], "storage._StorageBase.__sizeof__": ["<builtin>.super", "storage._StorageBase.element_size", "storage._StorageBase.size"], "_utils._type": ["<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.type", "_utils._import_dotted_name", "_utils._get_async_or_non_blocking", "torch.Tensor._indices", "torch.Tensor._values"], "storage._StorageBase.tolist": ["<builtin>.list"], "storage._StorageBase.cpu": ["<builtin>.getattr", "storage._StorageBase.type", "_utils._type"], "storage._StorageBase.double": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.float": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.half": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.long": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.int": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.short": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.char": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.byte": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.bool": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.bfloat16": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.complex_double": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.complex_float": ["storage._StorageBase.type", "_utils._type"], "storage._StorageBase.pin_memory": ["torch.cuda._host_allocator", "storage._StorageBase.type", "_utils._type", "storage._StorageBase.size", "<builtin>.TypeError"], "torch.cuda._host_allocator": [], "storage._StorageBase.share_memory_": ["storage._StorageBase._share_fd_", "torch.multiprocessing.get_sharing_strategy", "storage._StorageBase._share_filename_"], "torch.multiprocessing.get_sharing_strategy": [], "storage._StorageBase._new_shared": ["storage._StorageBase._new_using_fd", "torch.multiprocessing.get_sharing_strategy", "storage._StorageBase._new_using_filename", "storage._StorageBase.__init__"], "storage._load_from_bytes": ["torch.load", "io.BytesIO"], "torch_version": [], "torch_version.TorchVersion._convert_to_version": ["pkg_resources.packaging.version.Version", "pkg_resources.packaging.version.InvalidVersion", "<builtin>.str", "<builtin>.isinstance"], "pkg_resources.packaging.version.Version": [], "pkg_resources.packaging.version.InvalidVersion": [], "torch_version.TorchVersion.__gt__": ["pkg_resources.packaging.version.Version", "<builtin>.super", "torch_version.TorchVersion._convert_to_version"], "torch_version.TorchVersion.__eq__": ["pkg_resources.packaging.version.Version", "<builtin>.super", "torch_version.TorchVersion._convert_to_version"], "types.Storage.__deepcopy__": [], "types.Storage._new_shared": [], "types.Storage._write_file": [], "types.Storage.element_size": [], "types.Storage.is_shared": [], "types.Storage.share_memory_": [], "types.Storage.size": [], "_appdirs": ["sys.platform.startswith", "<builtin>.int", "<builtin>.print", "platform.java_ver", "_appdirs.AppDirs.__init__", "<builtin>.getattr", "<builtin>.tuple"], "platform.java_ver": [], "_appdirs.user_data_dir": ["os.path.expanduser", "os.path.normpath", "os.path.join", "os.getenv", "_appdirs._get_win_folder_with_jna", "_appdirs._get_win_folder_with_ctypes", "_appdirs._get_win_folder_from_registry", "_appdirs._get_win_folder_with_pywin32"], "_appdirs._get_win_folder_with_ctypes": ["ctypes.create_unicode_buffer", "ctypes.windll.kernel32.GetShortPathNameW", "ctypes.windll.shell32.SHGetFolderPathW", "<builtin>.ord"], "_appdirs._get_win_folder_with_jna": ["com.sun.jna.platform.win32.Kernel32.INSTANCE.GetShortPathName", "com.sun.jna.Native.toString", "array.zeros", "<builtin>.getattr", "<builtin>.ord", "com.sun.jna.platform.win32.Shell32.INSTANCE.SHGetFolderPath"], "_appdirs._get_win_folder_from_registry": ["winreg.OpenKey", "winreg.QueryValueEx"], "_appdirs._get_win_folder_with_pywin32": ["<builtin>.getattr", "<builtin>.ord", "win32api.GetShortPathName", "win32com.shell.shell.SHGetFolderPath"], "_appdirs.site_data_dir": ["os.pathsep.join", "os.path.expanduser", "os.path.normpath", "os.path.join", "os.getenv", "os.sep.join", "_appdirs._get_win_folder_with_jna", "_appdirs._get_win_folder_with_ctypes", "_appdirs._get_win_folder_from_registry", "_appdirs._get_win_folder_with_pywin32"], "os.pathsep.join": [], "os.sep.join": [], "_appdirs.user_config_dir": ["_appdirs.user_data_dir", "os.getenv", "os.path.expanduser", "os.path.join"], "_appdirs.site_config_dir": ["os.pathsep.join", "os.getenv", "os.path.expanduser", "os.path.join", "os.sep.join", "_appdirs.site_data_dir"], "_appdirs.user_cache_dir": ["os.path.expanduser", "os.path.normpath", "os.path.join", "os.getenv", "_appdirs._get_win_folder_with_jna", "_appdirs._get_win_folder_with_ctypes", "_appdirs._get_win_folder_from_registry", "_appdirs._get_win_folder_with_pywin32"], "_appdirs.user_state_dir": ["_appdirs.user_data_dir", "os.getenv", "os.path.expanduser", "os.path.join"], "_appdirs.user_log_dir": ["_appdirs.user_data_dir", "os.path.expanduser", "_appdirs.user_cache_dir", "os.path.join"], "_appdirs.AppDirs.__init__": [], "_appdirs.AppDirs.user_data_dir": ["_appdirs.AppDirs.user_data_dir"], "_appdirs.AppDirs.site_data_dir": ["_appdirs.AppDirs.site_data_dir"], "_appdirs.AppDirs.user_config_dir": ["_appdirs.AppDirs.user_config_dir"], "_appdirs.AppDirs.site_config_dir": ["_appdirs.AppDirs.site_config_dir"], "_appdirs.AppDirs.user_cache_dir": ["_appdirs.AppDirs.user_cache_dir"], "_appdirs.AppDirs.user_state_dir": ["_appdirs.AppDirs.user_state_dir"], "_appdirs.AppDirs.user_log_dir": ["_appdirs.AppDirs.user_log_dir"], "winreg.OpenKey": [], "winreg.QueryValueEx": [], "win32com.shell.shell.SHGetFolderPath": [], "win32api.GetShortPathName": [], "ctypes.create_unicode_buffer": [], "ctypes.windll.shell32.SHGetFolderPathW": [], "ctypes.windll.kernel32.GetShortPathNameW": [], "array.zeros": [], "com.sun.jna.platform.win32.Shell32.INSTANCE.SHGetFolderPath": [], "com.sun.jna.Native.toString": [], "com.sun.jna.platform.win32.Kernel32.INSTANCE.GetShortPathName": [], "_autograd_functions": [], "_autograd_functions._LU.forward": ["torch._lu_with_info"], "_autograd_functions._LU.backward": ["torch.triangular_solve", "torch.lu_unpack"], "torch.lu_unpack": [], "torch.triangular_solve": [], "_classes": ["_classes._Classes.__init__"], "_classes._ClassNamespace.__init__": ["<builtin>.super"], "_classes._ClassNamespace.__getattr__": ["<builtin>.RuntimeError"], "_classes._Classes.__init__": ["<builtin>.super"], "_classes._Classes.__getattr__": ["_classes._ClassNamespace.__init__", "<builtin>.setattr"], "_classes._Classes.loaded_libraries": [], "_classes._Classes.load_library": [], "_deploy": [], "_deploy._save_storages": ["torch.package.OrderedImporter", "io.BytesIO", "<builtin>.isinstance", "torch.package._package_pickler.create_pickler"], "torch.package.OrderedImporter": [], "_deploy._save_storages.persistent_id": ["torch.is_storage", "<builtin>.hasattr", "<builtin>.id", "<builtin>.len"], "torch.package._package_pickler.create_pickler": [], "_deploy._load_storages": ["torch.package.OrderedImporter", "torch.package._package_unpickler.PackageUnpickler", "io.BytesIO", "_deploy._get_package"], "_deploy._load_storages.persistent_load": ["torch.serialization._maybe_decode_ascii", "<builtin>.isinstance"], "torch.serialization._maybe_decode_ascii": [], "_deploy._get_package": ["torch.package.PackageImporter"], "torch.package._package_unpickler.PackageUnpickler": [], "_jit_internal": ["contextlib.contextmanager", "<builtin>.globals", "torch.distributed.rpc.is_available", "weakref.WeakKeyDictionary", "<builtin>.range"], "weakref.WeakKeyDictionary": [], "_jit_internal.createResolutionCallbackFromEnv": [], "_jit_internal.createResolutionCallbackFromEnv.lookupInModule": ["_jit_internal.createResolutionCallbackFromEnv.lookupInModule", "<builtin>.getattr"], "_jit_internal.createResolutionCallbackFromEnv.parseNestedExpr": ["_jit_internal.createResolutionCallbackFromEnv.lookupInModule", "<builtin>.tuple", "_jit_internal.createResolutionCallbackFromEnv.parseNestedExpr", "<builtin>.len"], "_jit_internal.createResolutionCallbackFromEnv.parseExpr": ["_jit_internal.createResolutionCallbackFromEnv.parseNestedExpr", "<builtin>.len"], "_jit_internal.createResolutionCallbackFromEnv.<lambda1>": ["_jit_internal.createResolutionCallbackFromEnv.parseExpr"], "_jit_internal.createResolutionCallbackFromFrame": ["inspect.currentframe", "_jit_internal.createResolutionCallbackFromEnv"], "_jit_internal.createResolutionCallbackFromFrame.env.__getattr__": ["<builtin>.dir", "<builtin>.getattr"], "_jit_internal.get_closure": ["<builtin>.enumerate"], "_jit_internal.createResolutionCallbackFromClosure": ["_jit_internal.createResolutionCallbackFromEnv", "_jit_internal.get_closure"], "_jit_internal.createResolutionCallbackFromClosure.closure_lookup.__getattr__": ["<builtin>.hasattr", "<builtin>.getattr"], "_jit_internal.can_compile_class": ["<builtin>.hasattr", "<builtin>.issubclass", "_jit_internal.is_ignored_fn", "<builtin>.getattr", "inspect.isroutine", "<builtin>.all"], "_jit_internal.is_ignored_fn": ["_jit_internal.get_torchscript_modifier"], "inspect.isroutine": [], "_jit_internal.get_callable_argument_names": ["inspect.signature"], "_jit_internal.get_annotation_str": ["_jit_internal.get_annotation_str", "<builtin>.isinstance"], "_jit_internal.get_type_hint_captures": ["<builtin>.isinstance", "<builtin>.RuntimeError", "textwrap.dedent", "inspect.getsource", "<builtin>.len", "_jit_internal.get_annotation_str", "ast.parse", "inspect.signature"], "_jit_internal.createResolutionCallbackForClassMethods": ["_jit_internal.get_closure", "inspect.isroutine", "_jit_internal.get_type_hint_captures", "<builtin>.getattr"], "_jit_internal.createResolutionCallbackForClassMethods.lookup_in_class": ["<builtin>.getattr"], "_jit_internal.boolean_dispatch.fn": ["<builtin>.len"], "_jit_internal.export": [], "_jit_internal.unused": ["<builtin>.setattr", "<builtin>.isinstance"], "_jit_internal._IgnoreContextManager.__init__": [], "_jit_internal._IgnoreContextManager.__exit__": [], "_jit_internal.ignore": ["<builtin>.RuntimeError", "warnings.warn", "<builtin>.callable", "<builtin>.isinstance"], "_jit_internal.ignore.decorator": [], "_jit_internal._copy_to_script_wrapper": [], "_jit_internal.module_has_exports": ["_jit_internal.get_torchscript_modifier", "<builtin>.hasattr", "<builtin>.callable", "<builtin>.dir", "<builtin>.getattr"], "_jit_internal.get_torchscript_modifier": ["<builtin>.hasattr", "<builtin>.callable", "<builtin>.getattr"], "_jit_internal.should_drop": ["_jit_internal.get_torchscript_modifier"], "_jit_internal.is_static_fn": ["inspect.getattr_static", "<builtin>.isinstance"], "inspect.getattr_static": [], "_jit_internal.get_static_fn": ["inspect.getattr_static"], "_jit_internal.copy_torchscript_modifier": ["_jit_internal.get_torchscript_modifier"], "_jit_internal.get_overload_no_implementation_error_message": ["_jit_internal._qualified_name", "torch._sources.get_source_lines_and_file"], "_jit_internal._qualified_name": ["torch.package._mangling.demangle", "<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.hasattr", "<builtin>.getattr"], "_jit_internal._check_overload_body": ["_jit_internal._check_overload_body.is_ellipsis", "_jit_internal._check_overload_body.is_pass", "<builtin>.RuntimeError", "warnings.warn", "torch._sources.parse_def", "<builtin>.len"], "torch._sources.parse_def": [], "_jit_internal._check_overload_body.is_pass": ["<builtin>.isinstance"], "_jit_internal._check_overload_body.is_ellipsis": ["<builtin>.isinstance"], "_jit_internal._get_fn_overloads": [], "_jit_internal._clear_fn_overloads": [], "_jit_internal.get_class_name_lineno": ["<builtin>.range", "inspect.currentframe"], "_jit_internal._overload_method": ["<builtin>.RuntimeError", "_jit_internal._check_overload_body", "_jit_internal._qualified_name", "_jit_internal.get_class_name_lineno"], "_jit_internal._get_overloaded_methods": ["torch._sources.get_source_lines_and_file", "<builtin>.hasattr", "<builtin>.Exception", "<builtin>.len", "<builtin>.str", "_jit_internal._qualified_name"], "_jit_internal.is_tuple": ["<builtin>.hasattr", "_jit_internal.raise_error_container_parameter_missing", "<builtin>.getattr"], "_jit_internal.raise_error_container_parameter_missing": ["<builtin>.RuntimeError"], "_jit_internal.is_list": ["<builtin>.hasattr", "_jit_internal.raise_error_container_parameter_missing", "<builtin>.getattr"], "_jit_internal.is_dict": ["<builtin>.hasattr", "_jit_internal.raise_error_container_parameter_missing", "<builtin>.getattr"], "_jit_internal.is_optional": ["_jit_internal.is_optional.safe_is_subclass", "<builtin>.type", "<builtin>.getattr", "<builtin>.hasattr", "<builtin>.len", "_jit_internal.raise_error_container_parameter_missing"], "_jit_internal.is_optional.safe_is_subclass": ["<builtin>.issubclass", "inspect.isclass"], "inspect.isclass": [], "_jit_internal.is_future": ["<builtin>.RuntimeError", "<builtin>.getattr"], "_jit_internal.is_rref": ["<builtin>.RuntimeError", "<builtin>.getattr"], "_jit_internal.is_rref_instance": ["<builtin>.isinstance"], "_jit_internal.is_final": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.getattr"], "_jit_internal.BroadcastingListCls.__getitem__": [], "_jit_internal.is_scripting": [], "torch.package._mangling.demangle": [], "_jit_internal._try_get_dispatched_fn": ["<builtin>.callable"], "_jit_internal._get_named_tuple_properties": ["torch._sources.fake_range", "<builtin>.type", "torch._C.TensorType.getInferred", "<builtin>.hasattr", "<builtin>.issubclass", "torch.jit.annotations.ann_to_type"], "torch._sources.fake_range": [], "torch.jit.annotations.ann_to_type": [], "torch._C.TensorType.getInferred": [], "_jit_internal._create_named_tuple": ["collections.namedtuple"], "_jit_internal._disable_emit_hooks": ["torch._C._jit_get_emit_hooks", "torch._C._jit_set_emit_hooks"], "torch._C._jit_get_emit_hooks": [], "torch._C._jit_set_emit_hooks": [], "_jit_internal._disable_emit_hooks_decorator": [], "_jit_internal._disable_emit_hooks_decorator.__enter__": ["torch._C._jit_get_emit_hooks", "torch._C._jit_set_emit_hooks"], "_jit_internal._disable_emit_hooks_decorator.__exit__": ["torch._C._jit_set_emit_hooks"], "_jit_internal._is_exception": ["<builtin>.issubclass", "inspect.isclass"], "_jit_internal.get_origin": ["<builtin>.getattr"], "_jit_internal.get_args": ["<builtin>.getattr"], "_jit_internal.check_args_exist": ["_jit_internal.raise_error_container_parameter_missing"], "_jit_internal.container_checker": ["_jit_internal.container_checker", "_jit_internal.get_args", "<builtin>.isinstance", "<builtin>.zip", "_jit_internal.get_origin", "<builtin>.len", "_jit_internal.check_args_exist"], "_jit_internal._isinstance": ["_jit_internal.container_checker", "_jit_internal._isinstance", "<builtin>.isinstance", "<builtin>.RuntimeError", "_jit_internal.get_origin", "_jit_internal.check_args_exist"], "_jit_internal._TensorExtractor.__init__": ["<builtin>.super"], "_jit_internal._TensorExtractor.persistent_id": ["_jit_internal.is_rref_instance", "<builtin>.isinstance"], "_jit_internal._extract_tensors": ["io.BytesIO", "_jit_internal._TensorExtractor.__init__", "pickle.Pickler.dump"], "pickle.Pickler.dump": [], "_linalg_utils": [], "_linalg_utils.is_sparse": ["torch.jit.is_scripting", "<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "_linalg_utils.get_floating_dtype": [], "_linalg_utils.matmul": ["_linalg_utils.is_sparse", "torch.matmul", "torch.sparse.mm"], "_linalg_utils.conjugate": [], "_linalg_utils.transpose": ["<builtin>.len"], "_linalg_utils.transjugate": ["_linalg_utils.conjugate", "_linalg_utils.transpose"], "_linalg_utils.bform": ["_linalg_utils.matmul", "_linalg_utils.transpose"], "_linalg_utils.qform": ["_linalg_utils.bform"], "_linalg_utils.basis": ["torch.linalg.qr", "torch.geqrf", "torch.orgqr"], "torch.linalg.qr": [], "torch.geqrf": [], "torch.orgqr": [], "_linalg_utils.symeig": ["torch.linalg.eigh", "torch.flip"], "torch.linalg.eigh": [], "torch.flip": [], "_lobpcg": [], "_lobpcg._symeig_backward_complete_eigenspace": ["torch.matmul", "<builtin>.float", "torch.diag_embed"], "torch.diag_embed": [], "_lobpcg._polynomial_coefficients_given_roots": ["<builtin>.range", "<builtin>.list"], "_lobpcg._polynomial_value": ["_lobpcg._vector_polynomial_value.transition", "<builtin>.range", "_lobpcg._matrix_polynomial_value.transition"], "_lobpcg._vector_polynomial_value.transition": ["torch.addcmul"], "_lobpcg._matrix_polynomial_value.transition": [], "_lobpcg._matrix_polynomial_value": ["_lobpcg._polynomial_value", "torch.eye", "<builtin>.len", "<builtin>.list"], "torch.eye": [], "_lobpcg._vector_polynomial_value": ["_lobpcg._polynomial_value"], "torch.addcmul": [], "_lobpcg._symeig_backward_partial_eigenspace": ["torch.Generator", "torch.randn", "torch.linalg.cholesky", "torch.matmul", "_lobpcg._polynomial_coefficients_given_roots", "_lobpcg._symeig_backward_complete_eigenspace", "_lobpcg._matrix_polynomial_value", "torch.cholesky_solve", "_lobpcg._vector_polynomial_value", "<builtin>.range"], "torch.linalg.cholesky": [], "torch.cholesky_solve": [], "_lobpcg._symeig_backward": ["_lobpcg._symeig_backward_complete_eigenspace", "_lobpcg._symeig_backward_partial_eigenspace"], "_lobpcg.LOBPCGAutogradFunction.forward": ["_lobpcg._lobpcg"], "_lobpcg._lobpcg": ["<builtin>.int", "torch.empty", "torch.randn", "<builtin>.len", "_lobpcg.LOBPCG.run", "torch.prod", "_lobpcg.LOBPCG.__init__", "torch.jit.is_scripting", "_linalg_utils.get_floating_dtype", "torch.tensor", "<builtin>.range", "<builtin>.ValueError"], "_lobpcg.LOBPCGAutogradFunction.backward": ["_lobpcg._symeig_backward", "<builtin>.tuple", "<builtin>.ValueError"], "_lobpcg.lobpcg": ["<builtin>.map", "<builtin>.RuntimeError", "<builtin>.type", "overrides.handle_torch_function", "torch.jit.is_scripting", "overrides.has_torch_function", "torch._jit_internal.is_scripting", "torch.autograd.Function.apply", "_lobpcg._lobpcg", "<builtin>.set"], "torch.prod": [], "_lobpcg.LOBPCG.__init__": ["torch.zeros"], "_lobpcg.LOBPCG.run": ["_lobpcg.LOBPCG.update", "torch.jit.is_scripting", "_lobpcg.LOBPCG_call_tracker", "_lobpcg.LOBPCG.call_tracker", "_lobpcg.LOBPCG.stop_iteration"], "_lobpcg.LOBPCG.__str__": [], "_lobpcg.LOBPCG.update": ["<builtin>.float", "_lobpcg.LOBPCG._update_ortho", "_lobpcg.LOBPCG._update_basic", "torch.norm", "_linalg_utils.matmul"], "_lobpcg.LOBPCG._update_ortho": ["_linalg_utils.transpose", "_linalg_utils.basis", "torch.matmul", "_lobpcg.LOBPCG.update_residual", "_lobpcg.LOBPCG._get_rayleigh_ritz_transform", "_linalg_utils.qform", "_lobpcg.LOBPCG.update_converged_count", "_lobpcg.LOBPCG._get_ortho", "_linalg_utils.symeig"], "_lobpcg.LOBPCG._update_basic": ["torch.matmul", "_lobpcg.LOBPCG.update_residual", "_lobpcg.LOBPCG._get_rayleigh_ritz_transform", "_linalg_utils.qform", "_lobpcg.LOBPCG.update_converged_count", "_linalg_utils.matmul", "_linalg_utils.symeig"], "_lobpcg.LOBPCG.update_residual": ["_linalg_utils.matmul"], "_lobpcg.LOBPCG.update_converged_count": ["torch.norm"], "_lobpcg.LOBPCG.stop_iteration": [], "_lobpcg.LOBPCG_call_tracker": [], "_lobpcg.LOBPCG.call_tracker": [], "_lobpcg.LOBPCG": ["torch.jit.unused"], "_lobpcg.LOBPCG._get_rayleigh_ritz_transform": ["torch.inverse", "_linalg_utils.qform", "torch.linalg.cholesky"], "_lobpcg.LOBPCG._get_ortho": ["_linalg_utils.transpose", "<builtin>.float", "torch.numel", "torch.norm", "torch.matmul", "<builtin>.list", "torch.eye", "_linalg_utils.matmul", "<builtin>.range", "_lobpcg.LOBPCG._get_svqb", "<builtin>.ValueError"], "torch.inverse": [], "_lobpcg.LOBPCG._get_svqb": ["_linalg_utils.transpose", "<builtin>.len", "<builtin>.abs", "torch.numel", "torch.matmul", "_linalg_utils.qform", "torch.where", "_linalg_utils.symeig"], "torch.numel": [], "torch.where": [], "_lowrank": [], "_lowrank.get_approximate_basis": ["_linalg_utils.transjugate", "<builtin>.range", "_linalg_utils.get_floating_dtype", "_linalg_utils.matmul", "torch.randn", "torch.linalg.qr"], "_lowrank.svd_lowrank": ["<builtin>.map", "torch.jit.is_scripting", "overrides.has_torch_function", "overrides.handle_torch_function", "_lowrank._svd_lowrank", "<builtin>.type", "<builtin>.set"], "_lowrank._svd_lowrank": ["_linalg_utils.conjugate", "_linalg_utils.transpose", "_lowrank.get_approximate_basis", "_linalg_utils.matmul", "torch.linalg.svd"], "torch.linalg.svd": [], "_lowrank.pca_lowrank": ["_linalg_utils.get_floating_dtype", "torch.jit.is_scripting", "overrides.has_torch_function", "overrides.handle_torch_function", "_lowrank._svd_lowrank", "torch.sparse_coo_tensor", "<builtin>.len", "_linalg_utils.transpose", "_linalg_utils.is_sparse", "torch.sparse.mm", "<builtin>.min", "<builtin>.type", "torch.sparse.sum", "torch.ones", "<builtin>.ValueError", "torch.zeros"], "torch.sparse.sum": [], "_namedtensor_internals": [], "_namedtensor_internals.check_serializing_named_tensor": ["<builtin>.RuntimeError"], "_namedtensor_internals.build_dim_map": ["<builtin>.enumerate", "collections.OrderedDict"], "_namedtensor_internals.unzip_namedshape": ["<builtin>.type", "<builtin>.len", "<builtin>.RuntimeError", "<builtin>.hasattr", "<builtin>.zip", "<builtin>.isinstance"], "_namedtensor_internals.namer_api_name": [], "_namedtensor_internals.is_ellipsis": [], "_namedtensor_internals.single_ellipsis_index": ["_namedtensor_internals.is_ellipsis", "<builtin>.enumerate", "<builtin>.len", "<builtin>.RuntimeError"], "_namedtensor_internals.expand_single_ellipsis": ["<builtin>.len"], "_namedtensor_internals.replace_ellipsis_by_position": ["_namedtensor_internals.expand_single_ellipsis", "<builtin>.len"], "_namedtensor_internals.resolve_ellipsis": ["_namedtensor_internals.single_ellipsis_index", "_namedtensor_internals.replace_ellipsis_by_position"], "_namedtensor_internals.update_names_with_list": ["_namedtensor_internals.namer_api_name", "<builtin>.len", "_namedtensor_internals.resolve_ellipsis"], "_namedtensor_internals.update_names_with_mapping": ["_namedtensor_internals.namer_api_name", "_namedtensor_internals.build_dim_map", "<builtin>.RuntimeError", "<builtin>.tuple"], "_namedtensor_internals.update_names": ["_namedtensor_internals.update_names_with_mapping", "<builtin>.bool", "<builtin>.len", "<builtin>.RuntimeError", "_namedtensor_internals.namer_api_name", "_namedtensor_internals.update_names_with_list"], "_ops": ["contextlib.contextmanager", "_ops._Ops.__init__", "<builtin>.hasattr"], "_ops.dl_open_guard": ["sys.getdlopenflags", "sys.setdlopenflags"], "_ops._OpNamespace.__init__": ["<builtin>.super"], "_ops._OpNamespace.__getattr__": ["<builtin>.setattr"], "_ops._Ops.__init__": ["<builtin>.super", "<builtin>.set"], "_ops._Ops.__getattr__": ["<builtin>.setattr", "_ops._OpNamespace.__init__"], "_ops._Ops.load_library": ["_ops.dl_open_guard", "ctypes.CDLL"], "_python_dispatcher": [], "_python_dispatcher.PythonDispatcher.__init__": ["torch._C._dispatch_library", "torch._C._dispatch_check_invariants"], "torch._C._dispatch_check_invariants": [], "torch._C._dispatch_library": [], "_python_dispatcher.PythonDispatcher.keys": [], "_python_dispatcher.PythonDispatcher.register": ["<builtin>.len", "<builtin>.RuntimeError", "<builtin>.set"], "_python_dispatcher.PythonDispatcher._format_line": [], "_python_dispatcher.PythonDispatcher._format_header": ["_python_dispatcher.PythonDispatcher._format_line"], "_python_dispatcher.PythonDispatcher.rawRegistrations": ["torch._C._dispatch_dump"], "torch._C._dispatch_dump": [], "_python_dispatcher.PythonDispatcher.rawDispatchTable": ["torch._C._dispatch_dump_table"], "torch._C._dispatch_dump_table": [], "_python_dispatcher.PythonDispatcher.registrations": ["<builtin>.any", "_python_dispatcher.PythonDispatcher.rawRegistrations", "_python_dispatcher.PythonDispatcher._format_line", "_python_dispatcher.PythonDispatcher._format_header"], "_python_dispatcher.PythonDispatcher.dispatchTable": ["re.compile", "_python_dispatcher.PythonDispatcher.rawDispatchTable", "_python_dispatcher.PythonDispatcher._format_line", "_python_dispatcher.PythonDispatcher._format_header"], "_six": [], "_six.with_metaclass": [], "_six.with_metaclass.metaclass.__new__": [], "_six.with_metaclass.metaclass.__prepare__": [], "_sources": ["functools.lru_cache"], "_sources.get_source_lines_and_file": ["<builtin>.OSError", "inspect.getsourcefile", "inspect.getsourcelines"], "inspect.getsourcefile": [], "_sources.normalize_source_lines": ["<builtin>.enumerate", "_sources.normalize_source_lines.remove_prefix"], "_sources.normalize_source_lines.remove_prefix": ["<builtin>.len"], "_sources.SourceContext.__init__": ["<builtin>.super"], "_sources.make_source_context": ["_sources.SourceContext.__init__"], "_sources.fake_range": ["_sources.SourceContext.__init__", "torch._C._jit_tree_views.SourceRangeFactory.make_raw_range"], "torch._C._jit_tree_views.SourceRangeFactory.make_raw_range": [], "_sources.parse_def": ["<builtin>.RuntimeError", "_sources.normalize_source_lines", "<builtin>.isinstance", "ast.parse", "textwrap.dedent", "_sources.get_source_lines_and_file", "<builtin>.len", "torch._C.ErrorReport.call_stack", "typing.NamedTuple.__init__", "_sources.make_source_context"], "torch._C.ErrorReport.call_stack": [], "_storage_docs": ["_storage_docs.add_docstr_all"], "_storage_docs.add_docstr_all": ["torch._C._add_docstr", "<builtin>.getattr"], "_tensor": [], "_tensor._wrap_type_error_to_not_implemented": ["functools.wraps"], "_tensor._wrap_type_error_to_not_implemented.wrapped": ["_tensor.Tensor.__rfloordiv__", "_tensor.Tensor.__rrshift__", "torch.overrides.has_torch_function", "_tensor.Tensor.__rlshift__", "_tensor.Tensor.__rpow__", "_tensor.Tensor.__floordiv__", "_tensor._wrap_type_error_to_not_implemented.wrapped", "torch.overrides.handle_torch_function", "torch._C._TensorBase.pow"], "torch.overrides.has_torch_function": [], "torch.overrides.handle_torch_function": [], "_tensor.Tensor.__rpow__": ["torch.tensor", "torch.result_type"], "_tensor.Tensor.__rfloordiv__": ["torch.floor_divide"], "_tensor.Tensor.__rlshift__": ["torch.bitwise_left_shift"], "_tensor.Tensor.__floordiv__": ["torch.floor_divide"], "_tensor.Tensor.__rrshift__": ["torch.bitwise_right_shift"], "torch._C._TensorBase.pow": [], "_tensor._rebuild_from_type": [], "_tensor._rebuild_from_type_v2": ["<builtin>.setattr", "<builtin>.isinstance", "<builtin>.len", "<builtin>.getattr", "<builtin>.RuntimeError"], "_tensor.Tensor.__deepcopy__": ["torch.overrides.has_torch_function_unary", "<builtin>.id", "torch._C._TensorBase.storage", "torch._C._TensorBase.size", "torch._C._TensorBase.new_empty", "torch._C._TensorBase.q_per_channel_axis", "torch._C._TensorBase.is_conj", "torch._C._TensorBase.clone", "torch._C._TensorBase.storage_offset", "torch._utils._rebuild_qtensor", "torch.no_grad", "torch._C._TensorBase.q_zero_point", "torch._C._TensorBase.is_neg", "<builtin>.RuntimeError", "torch.overrides.handle_torch_function", "torch._C._TensorBase.q_per_channel_zero_points", "torch._C._TensorBase.qscheme", "torch._C._TensorBase.q_scale", "torch._C._TensorBase.q_per_channel_scales", "torch._C._TensorBase.stride"], "torch.overrides.has_torch_function_unary": [], "torch._C._TensorBase.clone": [], "torch._C._TensorBase.storage": [], "torch._C._TensorBase.qscheme": [], "torch._C._TensorBase.q_scale": [], "torch._C._TensorBase.q_zero_point": [], "torch._C._TensorBase.q_per_channel_scales": [], "torch._C._TensorBase.q_per_channel_zero_points": [], "torch._C._TensorBase.q_per_channel_axis": [], "torch._C._TensorBase.storage_offset": [], "torch._C._TensorBase.size": [], "torch._C._TensorBase.stride": [], "torch._utils._rebuild_qtensor": [], "torch._C._TensorBase.new_empty": [], "torch._C._TensorBase.is_conj": [], "torch._C._TensorBase.is_neg": [], "_tensor.Tensor.__reduce_ex__": ["<builtin>.type", "torch.overrides.has_torch_function_unary", "_tensor.Tensor._reduce_ex_internal", "<builtin>.hasattr", "torch.overrides.handle_torch_function", "<builtin>.getattr", "copyreg._slotnames"], "_tensor.Tensor._reduce_ex_internal": ["torch._C._TensorBase.storage", "torch._C._TensorBase.size", "<builtin>.NotImplementedError", "torch._namedtensor_internals.check_serializing_named_tensor", "torch._C._TensorBase.q_per_channel_axis", "torch._C._TensorBase.storage_offset", "<builtin>.tuple", "torch.utils.hooks.warn_if_has_hooks", "torch._C._TensorBase.cpu", "torch._C._TensorBase.q_zero_point", "<builtin>.RuntimeError", "collections.OrderedDict", "torch._C._TensorBase.q_per_channel_zero_points", "<builtin>.str", "torch._C._TensorBase.qscheme", "torch._C._TensorBase.q_scale", "torch._C._TensorBase._values", "torch._C._TensorBase.q_per_channel_scales", "torch._C._TensorBase.stride", "torch._C._TensorBase._indices"], "copyreg._slotnames": [], "torch._namedtensor_internals.check_serializing_named_tensor": [], "torch.utils.hooks.warn_if_has_hooks": [], "torch._C._TensorBase.cpu": [], "torch._C._TensorBase._indices": [], "torch._C._TensorBase._values": [], "_tensor.Tensor.__setstate__": ["torch.overrides.has_torch_function_unary", "<builtin>.len", "torch._C._TensorBase.set_", "torch.overrides.handle_torch_function", "<builtin>.RuntimeError"], "torch._C._TensorBase.set_": [], "_tensor.Tensor.__repr__": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch._tensor_str._str"], "torch._tensor_str._str": [], "_tensor.Tensor.backward": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch.autograd.backward"], "_tensor.Tensor.register_hook": ["torch.utils.hooks.RemovableHandle", "torch.overrides.has_torch_function_unary", "collections.OrderedDict", "torch._C._TensorBase.grad_fn._register_hook_dict", "torch.overrides.handle_torch_function", "<builtin>.RuntimeError"], "torch._C._TensorBase.grad_fn._register_hook_dict": [], "_tensor.Tensor.reinforce": ["<builtin>.RuntimeError", "_tensor.Tensor.reinforce.trim"], "_tensor.Tensor.reinforce.trim": [], "_tensor.Tensor": ["_tensor._wrap_type_error_to_not_implemented", "torch._C._add_docstr"], "_tensor.Tensor.is_shared": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.storage", "torch.overrides.handle_torch_function"], "_tensor.Tensor.share_memory_": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.storage", "torch.overrides.handle_torch_function"], "_tensor.Tensor.__reversed__": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.dim", "torch.overrides.handle_torch_function", "torch._C._TensorBase.flip"], "torch._C._TensorBase.dim": [], "torch._C._TensorBase.flip": [], "_tensor.Tensor.norm": ["torch.norm", "torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function"], "_tensor.Tensor.lu": ["<builtin>.ValueError", "torch._autograd_functions._LU.apply", "torch.overrides.has_torch_function_unary", "torch._jit_internal.is_scripting", "torch._C._TensorBase.size", "torch.overrides.handle_torch_function", "torch._lu_with_info", "<builtin>.RuntimeError"], "_tensor.Tensor.stft": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch.stft"], "torch.stft": [], "_tensor.Tensor.istft": ["torch.istft", "torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function"], "torch.istft": [], "_tensor.Tensor.resize": ["torch.overrides.has_torch_function_unary", "torch.autograd._functions.Resize.apply", "torch.overrides.handle_torch_function", "warnings.warn"], "torch.autograd._functions.Resize.apply": [], "_tensor.Tensor.resize_as": ["torch.overrides.handle_torch_function", "torch.autograd._functions.Resize.apply", "torch.overrides.has_torch_function_variadic", "warnings.warn"], "torch.overrides.has_torch_function_variadic": [], "_tensor.Tensor.split": ["<builtin>.super", "<builtin>.isinstance", "torch.overrides.has_torch_function_unary", "<builtin>.int", "torch.overrides.handle_torch_function"], "_tensor.Tensor.unique": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch.unique"], "torch.unique": [], "_tensor.Tensor.unique_consecutive": ["torch.overrides.has_torch_function_unary", "torch.unique_consecutive", "torch.overrides.handle_torch_function"], "torch.unique_consecutive": [], "_tensor.Tensor.__rsub__": ["torch.overrides.handle_torch_function", "torch._C._VariableFunctions.rsub", "torch.overrides.has_torch_function_variadic"], "torch._C._VariableFunctions.rsub": [], "_tensor.Tensor.__rdiv__": ["torch.overrides.handle_torch_function", "torch.overrides.has_torch_function_variadic", "torch._C._TensorBase.reciprocal"], "torch._C._TensorBase.reciprocal": [], "_tensor.Tensor.__rmod__": ["torch.overrides.handle_torch_function", "torch.remainder", "torch.overrides.has_torch_function_variadic"], "torch.remainder": [], "_tensor.Tensor.__format__": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.dim", "torch.overrides.handle_torch_function", "torch._C._TensorBase.item"], "torch._C._TensorBase.item": [], "_tensor.Tensor.__ipow__": ["torch.overrides.handle_torch_function", "torch.overrides.has_torch_function_variadic"], "torch.result_type": [], "torch.floor_divide": [], "torch.bitwise_left_shift": [], "torch.bitwise_right_shift": [], "_tensor.Tensor.__rmatmul__": ["torch.overrides.handle_torch_function", "torch.overrides.has_torch_function_variadic", "torch.matmul"], "_tensor.Tensor.__len__": ["<builtin>.TypeError", "torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch._C._TensorBase.dim", "torch._C._get_tracing_state", "warnings.warn"], "_tensor.Tensor.__iter__": ["<builtin>.iter", "<builtin>.TypeError", "torch._C._TensorBase.unbind", "torch._C._TensorBase.dim", "torch._C._get_tracing_state", "warnings.warn"], "torch._C._TensorBase.unbind": [], "_tensor.Tensor.__hash__": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "<builtin>.id"], "_tensor.Tensor.__dir__": ["<builtin>.list", "torch.overrides.has_torch_function_unary", "<builtin>.dir", "<builtin>.sorted", "torch._C._TensorBase.__dict__.keys", "torch.overrides.handle_torch_function", "warnings.warn"], "torch._C._TensorBase.__dict__.keys": [], "_tensor.Tensor.__array__": ["torch._C._TensorBase.numpy", "torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function"], "torch._C._TensorBase.numpy": [], "_tensor.Tensor.__array_wrap__": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch.from_numpy"], "_tensor.Tensor.__contains__": ["<builtin>.type", "<builtin>.isinstance", "torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "<builtin>.RuntimeError"], "_tensor.Tensor.__cuda_array_interface__": ["<builtin>.dict", "torch.overrides.has_torch_function_unary", "torch._C._TensorBase.is_contiguous", "<builtin>.AttributeError", "torch._C._TensorBase.numel", "torch._C._TensorBase.storage", "<builtin>.tuple", "torch._C._TensorBase.type", "torch._C._TensorBase.data_ptr", "torch.overrides.handle_torch_function", "torch._C._TensorBase.stride", "<builtin>.RuntimeError"], "torch._C._TensorBase.type": [], "torch._C._TensorBase.is_contiguous": [], "torch._C._TensorBase.numel": [], "torch._C._TensorBase.data_ptr": [], "_tensor.Tensor.refine_names": ["torch.overrides.has_torch_function_unary", "torch._namedtensor_internals.resolve_ellipsis", "<builtin>.super", "torch.overrides.handle_torch_function"], "torch._namedtensor_internals.resolve_ellipsis": [], "_tensor.Tensor.align_to": ["<builtin>.super", "torch.overrides.has_torch_function_unary", "torch._namedtensor_internals.single_ellipsis_index", "torch._namedtensor_internals.is_ellipsis", "torch.overrides.handle_torch_function"], "torch._namedtensor_internals.single_ellipsis_index": [], "torch._namedtensor_internals.is_ellipsis": [], "_tensor.Tensor.unflatten": ["<builtin>.super", "<builtin>.isinstance", "torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch._namedtensor_internals.unzip_namedshape", "<builtin>.RuntimeError"], "torch._namedtensor_internals.unzip_namedshape": [], "_tensor.Tensor.rename_": ["torch.overrides.has_torch_function_unary", "torch._namedtensor_internals.update_names", "torch.overrides.handle_torch_function"], "torch._namedtensor_internals.update_names": [], "_tensor.Tensor.rename": ["torch.overrides.has_torch_function_unary", "torch._namedtensor_internals.update_names", "torch.overrides.handle_torch_function"], "_tensor.Tensor.to_sparse_csr": ["torch.bucketize", "torch._C._TensorBase.coalesce", "<builtin>.len", "torch._C._TensorBase.to_sparse", "torch._C._TensorBase.size", "torch.arange", "torch.sparse_csr_tensor", "<builtin>.RuntimeError"], "torch._C._TensorBase.coalesce": [], "torch.bucketize": [], "torch.sparse_csr_tensor": [], "torch._C._TensorBase.to_sparse": [], "_tensor.Tensor._update_names": ["torch.overrides.has_torch_function_unary", "<builtin>.super", "torch.overrides.handle_torch_function"], "_tensor.Tensor.grad": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function"], "_tensor.Tensor.__torch_function__": ["torch._C.DisableTorchFunction", "_tensor._convert", "<builtin>.all", "<builtin>.issubclass", "torch.overrides.get_default_nowrap_functions"], "torch._C.DisableTorchFunction": [], "torch.overrides.get_default_nowrap_functions": [], "_tensor._convert": ["<builtin>.isinstance", "_tensor._convert", "<builtin>.type"], "_tensor_docs": ["_tensor_docs.add_docstr_all", "_torch_docs.parse_kwargs"], "_tensor_docs.add_docstr_all": ["torch._C._add_docstr", "<builtin>.getattr"], "_torch_docs.parse_kwargs": [], "_tensor_str": [], "_tensor_str.set_printoptions": [], "_tensor_str._Formatter.__init__": ["<builtin>.len", "<builtin>.max", "torch.isfinite", "torch.masked_select", "torch.ceil", "torch.no_grad"], "torch.isfinite": [], "torch.masked_select": [], "torch.ceil": [], "_tensor_str._Formatter.width": [], "_tensor_str._Formatter.format": ["<builtin>.len", "math.isinf", "math.isnan"], "math.isnan": [], "_tensor_str._scalar_str": ["_tensor_str._scalar_str", "_tensor_str._Formatter.format"], "_tensor_str._vector_str": ["_tensor_str._vector_str._val_formatter", "<builtin>.len", "<builtin>.max", "<builtin>.int", "math.floor", "<builtin>.range", "_tensor_str._Formatter.width"], "_tensor_str._vector_str._val_formatter": ["_tensor_str._Formatter.format"], "_tensor_str._tensor_str_with_formatter": ["_tensor_str._tensor_str_with_formatter", "_tensor_str._vector_str", "<builtin>.len", "_tensor_str._scalar_str", "<builtin>.range"], "_tensor_str._tensor_str": ["_tensor_str.get_summarized_data", "_tensor_str._Formatter.__init__", "_tensor_str._tensor_str_with_formatter"], "_tensor_str.get_summarized_data": ["<builtin>.len", "_tensor_str.get_summarized_data", "torch.stack", "<builtin>.range", "torch.cat"], "_tensor_str._add_suffixes": ["<builtin>.len"], "_tensor_str._str_intern": ["torch.autograd.forward_ad.unpack_dual", "<builtin>.tuple", "torch.cuda.current_device", "<builtin>.len", "_tensor_str._tensor_str", "torch._C._get_default_device", "torch.get_default_dtype", "_tensor_str._add_suffixes", "<builtin>.str", "<builtin>.type"], "torch.autograd.forward_ad.unpack_dual": [], "torch._C._get_default_device": [], "_tensor_str._str": ["torch.no_grad", "_tensor_str._str_intern"], "_utils": [], "_utils._get_async_or_non_blocking": ["<builtin>.TypeError", "warnings.warn", "<builtin>.len", "<builtin>.list"], "torch.Tensor._values": [], "torch.Tensor._indices": [], "_utils._cuda": ["torch.cuda.current_device", "_utils._get_async_or_non_blocking", "<builtin>.getattr", "torch.cuda.device", "torch.Tensor._indices", "torch.Tensor._values"], "_utils._rebuild_tensor": ["torch.tensor"], "_utils._rebuild_tensor_v2": ["_utils._rebuild_tensor"], "_utils._validate_loaded_sparse_tensors": ["torch._validate_sparse_coo_tensor_args"], "torch._validate_sparse_coo_tensor_args": [], "_utils._rebuild_sparse_tensor": ["torch._sparse_coo_tensor_unsafe", "<builtin>.NotImplementedError"], "torch._sparse_coo_tensor_unsafe": [], "_utils._rebuild_xla_tensor": ["torch.from_numpy"], "_utils._rebuild_mlc_tensor": ["torch.from_numpy"], "_utils._rebuild_meta_tensor_no_storage": ["torch.empty_strided"], "torch.empty_strided": [], "_utils._rebuild_qtensor": ["torch._empty_affine_quantized", "torch.tensor", "<builtin>.RuntimeError", "<builtin>.type", "torch._empty_per_channel_affine_quantized"], "torch._empty_per_channel_affine_quantized": [], "_utils._rebuild_parameter": ["torch.nn.Parameter"], "<builtin>.__import__": [], "_utils._accumulate": ["_utils.<lambda1>", "<builtin>.iter", "<builtin>.next"], "_utils.<lambda1>": [], "_utils._flatten_dense_tensors": ["torch._C._nn.flatten_dense_tensors"], "torch._C._nn.flatten_dense_tensors": [], "_utils._flatten_sparse_tensors": ["torch.Tensor._values", "torch.Tensor._indices", "torch._C._nn.flatten_dense_tensors"], "_utils._unflatten_dense_tensors": ["torch._C._nn.unflatten_dense_tensors"], "torch._C._nn.unflatten_dense_tensors": [], "_utils._unflatten_sparse_tensors": ["<builtin>.zip", "<builtin>.tuple", "torch.Tensor._indices", "torch._C._nn.unflatten_dense_tensors", "torch.Tensor._values"], "_utils._reorder_tensors_as": ["<builtin>.tuple", "<builtin>.iter", "<builtin>.next", "collections.defaultdict"], "_utils._take_tensors": ["<builtin>.len", "torch.Tensor._indices", "collections.defaultdict", "torch.Tensor._values"], "_utils._take_tensors.<lambda1>": [], "_utils.annotate": [], "_utils.annotate.dec": ["<builtin>.dict"], "_utils.KeyErrorMessage.__repr__": [], "_utils.ExceptionWrapper.__init__": ["traceback.format_exception", "sys.exc_info"], "_utils.ExceptionWrapper.reraise": ["<builtin>.getattr", "<builtin>.RuntimeError"], "_utils._get_available_device_type": ["torch.cuda.is_available"], "_utils._get_device_attr": ["_utils._get_available_device_type", "_utils._get_current_device_index.<lambda1>", "_utils._get_devices_properties.<lambda1>", "_utils._get_all_device_indices.<lambda1>"], "_utils._get_current_device_index.<lambda1>": ["torch.cuda.current_device"], "_utils._get_devices_properties.<lambda1>": ["torch.cuda.get_device_properties"], "_utils._get_all_device_indices.<lambda1>": ["torch.cuda.device_count", "<builtin>.list", "<builtin>.range"], "_utils._get_current_device_index": ["_utils._get_device_attr"], "_utils._get_all_device_indices": ["_utils._get_device_attr"], "_utils._get_devices_properties": ["_utils._get_device_attr"], "torch.cuda.get_device_properties": [], "_utils.get_current_device_index": ["torch.cuda.device_count", "torch.cuda.current_device"], "_utils._get_device_index": ["<builtin>.isinstance", "_utils._get_current_device_index", "<builtin>.ValueError", "torch.jit.is_scripting", "torch.device", "_utils.get_current_device_index", "torch._utils._get_device_index"], "_utils._handle_complex": ["<builtin>.isinstance", "torch.view_as_real"], "torch.view_as_real": [], "_utils_internal": ["os.path.dirname", "os.path.basename"], "_utils_internal.get_file_path": ["os.path.join"], "_utils_internal.get_file_path_2": ["os.path.join"], "_utils_internal.get_writable_path": ["os.path.basename", "os.access", "tempfile.mkdtemp"], "_utils_internal.prepare_multiprocessing_environment": [], "_utils_internal.resolve_library_path": ["os.path.realpath"], "_VF": ["_VF.VFModule.__init__"], "_VF.VFModule.__init__": ["<builtin>.super"], "_VF.VFModule.__getattr__": ["<builtin>.getattr"], "_vmap_internals": [], "_vmap_internals._validate_and_get_batch_size": ["<builtin>.any", "<builtin>.ValueError", "<builtin>.zip"], "_vmap_internals._num_outputs": ["<builtin>.isinstance", "<builtin>.len"], "_vmap_internals._as_tuple": ["_vmap_internals._unwrap_batched.<lambda1>", "<builtin>.isinstance", "<builtin>.len", "<builtin>.ValueError"], "_vmap_internals._unwrap_batched.<lambda1>": ["_vmap_internals._get_name"], "_vmap_internals._create_batched_inputs": ["<builtin>.type", "torch.utils._pytree.tree_unflatten", "<builtin>.len", "<builtin>.ValueError", "_vmap_internals._validate_and_get_batch_size", "<builtin>.isinstance", "torch.utils._pytree.tree_flatten", "torch.utils._pytree._broadcast_to_and_flatten", "<builtin>.zip", "torch._add_batch_dim", "_vmap_internals._get_name"], "_vmap_internals._get_name": ["<builtin>.hasattr", "<builtin>.repr"], "torch.utils._pytree._broadcast_to_and_flatten": [], "torch._add_batch_dim": [], "_vmap_internals._unwrap_batched": ["torch._remove_batch_dim", "_vmap_internals._num_outputs", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.tuple", "_vmap_internals._as_tuple"], "torch._remove_batch_dim": [], "_vmap_internals._validate_outputs": ["<builtin>.type", "<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.isinstance", "_vmap_internals._get_name"], "_vmap_internals._check_out_dims_is_int_or_int_tuple": ["<builtin>.isinstance", "_vmap_internals._get_name", "<builtin>.ValueError", "<builtin>.all"], "_vmap_internals.vmap": ["warnings.warn", "_vmap_internals._vmap"], "_vmap_internals._vmap": ["functools.wraps"], "_vmap_internals._vmap.wrapped": ["torch._C._vmapmode_decrement_nesting", "_vmap_internals._create_batched_inputs", "_vmap_internals._validate_outputs", "torch._C._vmapmode_increment_nesting", "_vmap_internals._check_out_dims_is_int_or_int_tuple", "_vmap_internals._unwrap_batched"], "torch._C._vmapmode_increment_nesting": [], "torch._C._vmapmode_decrement_nesting": [], "__config__": [], "__config__.show": ["torch._C._show_config"], "torch._C._show_config": [], "__config__._cxx_flags": ["torch._C._cxx_flags"], "torch._C._cxx_flags": [], "__config__.parallel_info": ["torch._C._parallel_info"], "torch._C._parallel_info": [], "__future__": [], "__future__.set_overwrite_module_params_on_conversion": [], "__future__.get_overwrite_module_params_on_conversion": [], "torch.nn.Conv2d._conv_forward": [], "conv.Conv2d.from_float": ["<builtin>.hasattr", "<builtin>.type", "conv.Conv2d.__init__", "conv._ConvNd.from_float", "conv._ConvTransposeNd.from_float"], "conv.Conv2d.to_float": ["torch.nn.Conv2d.bias.detach", "torch.nn.Parameter", "torch.nn.Conv2d.weight.detach", "torch.nn.Conv2d"], "torch.nn.Conv2d.weight.detach": [], "torch.nn.Conv2d.bias.detach": [], "torch.nn.Conv3d._conv_forward": [], "conv.Conv3d.from_float": ["<builtin>.hasattr", "<builtin>.type", "conv.Conv3d.__init__", "conv._ConvNd.from_float", "conv._ConvTransposeNd.from_float"], "conv.Conv3d.to_float": ["torch.nn.Conv3d.weight.detach", "torch.nn.Conv3d", "torch.nn.Conv3d.bias.detach", "torch.nn.Parameter"], "torch.nn.Conv3d.weight.detach": [], "torch.nn.Conv3d.bias.detach": [], "conv_fused": ["typing.TypeVar"], "conv_fused._ConvBnNd.__init__": ["torch.nn.intrinsic._FusedModule.register_parameter", "conv_fused._ConvBnNd.freeze_bn_stats", "conv_fused._ConvBnNd.update_bn_stats", "torch.empty", "torch.nn.parameter.Parameter", "conv_fused._ConvBnNd.reset_bn_parameters", "torch.nn.modules.conv._ConvNd.__init__"], "torch.nn.modules.conv._ConvNd.__init__": [], "torch.nn.intrinsic._FusedModule.register_parameter": [], "conv_fused._ConvBnNd.reset_bn_parameters": ["torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.zeros_", "torch.nn.init.uniform_", "math.sqrt"], "conv_fused._ConvBnNd.freeze_bn_stats": [], "conv_fused._ConvBnNd.update_bn_stats": [], "conv_fused._ConvBnNd.reset_running_stats": [], "torch.nn.init.zeros_": [], "torch.nn.init._calculate_fan_in_and_fan_out": [], "conv_fused._ConvBnNd.reset_parameters": ["<builtin>.super"], "conv_fused._ConvBnNd._forward": ["torch.zeros_like", "torch.sqrt", "torch.nn.intrinsic._FusedModule._conv_forward", "<builtin>.len", "torch.zeros"], "torch.sqrt": [], "torch.nn.intrinsic._FusedModule._conv_forward": [], "conv_fused._ConvBnNd.extra_repr": ["<builtin>.super"], "conv_fused._ConvBnNd.forward": ["conv_fused._ConvBnNd._forward"], "conv_fused._ConvBnNd.train": ["torch.nn.intrinsic._FusedModule.children"], "torch.nn.intrinsic._FusedModule.children": [], "conv_fused._ConvBnNd._load_from_state_dict": ["<builtin>.super"], "conv_fused._ConvBnNd.from_float": ["<builtin>.hasattr", "<builtin>.type", "conv_fused._ConvBnNd.__init__"], "conv_fused._ConvBnNd.to_float": ["torch.nn.parameter.Parameter", "<builtin>.type", "torch.nn.Parameter", "torch.nn.intrinsic._FusedModule.weight.detach"], "torch.nn.intrinsic._FusedModule.weight.detach": [], "conv_fused.ConvBn1d.__init__": ["conv_fused._ConvBnNd.__init__", "torch.nn.modules.utils._single"], "torch.nn.modules.utils._single": [], "conv_fused.ConvBnReLU1d.__init__": ["<builtin>.super"], "conv_fused.ConvBnReLU1d.forward": ["torch.nn.functional.relu", "conv_fused._ConvBnNd._forward"], "conv_fused.ConvBnReLU1d.from_float": ["<builtin>.super"], "conv_fused.ConvBn2d.__init__": ["conv_fused._ConvBnNd.__init__", "torch.nn.modules.utils._pair"], "conv_fused.ConvBnReLU2d.__init__": ["<builtin>.super"], "conv_fused.ConvBnReLU2d.forward": ["torch.nn.functional.relu", "conv_fused._ConvBnNd._forward"], "conv_fused.ConvBnReLU2d.from_float": ["<builtin>.super"], "conv_fused.ConvReLU2d.__init__": ["<builtin>.super"], "conv_fused.ConvReLU2d.forward": ["torch.nn.functional.relu", "torch.nn.intrinsic._FusedModule._conv_forward"], "conv_fused.ConvReLU2d.from_float": ["<builtin>.super"], "conv_fused.ConvBn3d.__init__": ["torch.nn.modules.utils._triple", "conv_fused._ConvBnNd.__init__"], "conv_fused.ConvBnReLU3d.__init__": ["<builtin>.super"], "conv_fused.ConvBnReLU3d.forward": ["torch.nn.functional.relu", "conv_fused._ConvBnNd._forward"], "conv_fused.ConvBnReLU3d.from_float": ["<builtin>.super"], "conv_fused.ConvReLU3d.__init__": ["<builtin>.super"], "conv_fused.ConvReLU3d.forward": ["torch.nn.functional.relu", "torch.nn.intrinsic._FusedModule._conv_forward"], "conv_fused.ConvReLU3d.from_float": ["<builtin>.super"], "conv_fused.update_bn_stats": ["<builtin>.type", "<builtin>.set"], "conv_fused.freeze_bn_stats": ["<builtin>.type", "<builtin>.set"], "linear.Linear.to_float": ["torch.nn.Linear.bias.detach", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Linear.weight.detach"], "torch.nn.Linear.weight.detach": [], "torch.nn.Linear.bias.detach": [], "linear_relu": [], "linear_relu.LinearReLU.__init__": ["<builtin>.super"], "linear_relu.LinearReLU.forward": ["torch.nn.functional.linear", "torch.nn.qat.Linear.weight_fake_quant", "torch.nn.functional.relu", "torch.ops.quantized.linear_relu", "torch.nn.quantized._reference.Linear._qweight.dequantize", "torch.quantize_per_tensor"], "torch.nn.qat.Linear.weight_fake_quant": [], "linear_relu.LinearReLU.from_float": ["<builtin>.super"], "linear_relu.LinearReLU.to_float": ["torch.nn.Parameter", "torch.nn.intrinsic.LinearReLU", "torch.nn.ReLU", "torch.nn.qat.Linear.bias.detach", "torch.nn.Linear", "torch.nn.qat.Linear.weight.detach"], "torch.nn.qat.Linear.weight.detach": [], "torch.nn.qat.Linear.bias.detach": [], "torch.nn.intrinsic.LinearReLU": [], "torch.nn.quantized.FloatFunctional": [], "torch.quantization.QuantStub": [], "torch.quantization.DeQuantStub": [], "activation.MultiheadAttention._get_name": [], "activation.MultiheadAttention.from_float": ["<builtin>.type", "activation.MultiheadAttention.__init__", "torch.quantization.prepare", "<builtin>.hasattr", "torch.nn.Parameter"], "torch.quantization.prepare": [], "activation.MultiheadAttention.dequantize": ["<builtin>.all", "torch.nn.MultiheadAttention.bias_k.dequantize", "torch.nn.MultiheadAttention.bias_v.dequantize", "torch.nn.MultiheadAttention", "torch.nn.Parameter"], "torch.nn.MultiheadAttention": [], "torch.nn.MultiheadAttention.bias_k.dequantize": [], "torch.nn.MultiheadAttention.bias_v.dequantize": [], "activation.MultiheadAttention.from_observed": ["torch.quantize_per_tensor", "torch.quantization.convert", "<builtin>.setattr", "torch._choose_qparams_per_tensor"], "torch.quantization.convert": [], "torch._choose_qparams_per_tensor": [], "activation.MultiheadAttention._forward_impl": ["<builtin>.RuntimeError", "torch.nn.MultiheadAttention.bias_k.repeat", "torch.nn.functional.dropout", "<builtin>.list", "torch.nn.MultiheadAttention.bias_v.repeat", "torch.nn.functional.pad", "warnings.warn", "torch.cat", "torch.zeros", "torch.nn.functional.softmax", "torch.bmm", "torch.quantize_per_tensor", "<builtin>.float"], "torch.nn.MultiheadAttention.bias_k.repeat": [], "torch.nn.MultiheadAttention.bias_v.repeat": [], "rnn.LSTMCell.initialize_hidden": ["torch.zeros", "torch.quantize_per_tensor"], "rnn.LSTMCell.from_params": ["torch.nn.Parameter", "rnn.LSTMCell.__init__"], "rnn._LSTMSingleLayer.__init__": ["<builtin>.super", "rnn.LSTMCell.__init__"], "rnn._LSTMSingleLayer.forward": ["torch.stack", "rnn.LSTMCell.__init__"], "rnn._LSTMSingleLayer.from_params": ["rnn.LSTMCell.from_params", "rnn._LSTMSingleLayer.__init__"], "rnn._LSTMLayer.__init__": ["<builtin>.super", "rnn._LSTMSingleLayer.__init__"], "rnn._LSTMLayer.forward": ["torch.stack", "rnn._LSTMSingleLayer.__init__", "torch.cat"], "rnn._LSTMLayer.from_float": ["<builtin>.getattr", "rnn._LSTMSingleLayer.from_params", "<builtin>.hasattr", "rnn._LSTMLayer.__init__"], "rnn._LSTMLayer.weight_ih": [], "rnn._LSTMLayer.weight_hh": [], "rnn._LSTMLayer.bias_ih": [], "rnn._LSTMLayer.bias_hh": [], "rnn._LSTMLayer.weight_ih_reverse": [], "rnn._LSTMLayer.weight_hh_reverse": [], "rnn._LSTMLayer.bias_ih_reverse": [], "rnn._LSTMLayer.bias_hh_reverse": [], "torch.jit._unwrap_optional": [], "rnn.LSTM.from_observed": ["torch.quantization.convert"], "convert.run_weight_observers": ["<builtin>.enumerate", "utils.graph_module_from_producer_nodes", "utils.collect_producer_nodes"], "utils.collect_producer_nodes": ["<builtin>.list", "<builtin>.isinstance"], "utils.graph_module_from_producer_nodes": ["<builtin>.len", "utils.graph_module_from_producer_nodes.load_arg", "torch.fx.GraphModule", "torch.fx.graph.Graph"], "convert.fold_weight": ["<builtin>.dict", "<builtin>.setattr", "utils.graph_module_from_producer_nodes", "graph_module.QuantizedGraphModule", "utils.get_new_attr_name_with_prefix", "<builtin>.list", "torch.fx.graph.Graph", "utils.collect_producer_nodes"], "convert.fold_weight.load_arg": ["torch.fx.map_arg"], "convert.fold_weight.load_arg.<lambda1>": [], "utils.get_new_attr_name_with_prefix": [], "graph_module.QuantizedGraphModule": [], "convert.restore_state": ["graph_module.is_observed_module"], "graph_module.is_observed_module": ["<builtin>.isinstance"], "convert.convert": ["quantize.is_activation_post_process", "graph_module.is_observed_standalone_module", "<builtin>.set", "utils.activation_dtype", "convert.run_weight_observers", "_equalize.convert_eq_obs", "<builtin>.dict", "quantize._remove_qconfig", "graph_module.QuantizedGraphModule", "match_utils.find_matches", "convert.convert.insert_quantize_node", "torch.fx.graph.Graph", "collections.defaultdict", "convert.fold_weight", "utils.get_custom_module_class_keys", "torch.fx.map_arg", "_equalize.update_obs_for_equalization", "convert.restore_state", "convert.convert.is_output_quantized", "utils.is_get_tensor_info_node", "<builtin>.len"], "utils.get_custom_module_class_keys": ["<builtin>.list", "<builtin>.set"], "match_utils.find_matches": ["quantization_patterns.StandaloneModuleQuantizeHandler", "match_utils.is_match", "utils.get_qconfig_dtypes", "match_utils.find_matches.is_standalone_module", "graph_module.is_observed_standalone_module", "<builtin>.isinstance", "match_utils.find_matches.record_match", "quantization_patterns.CustomModuleQuantizeHandler", "<builtin>.set", "<builtin>.dict", "<builtin>.type", "<builtin>.reversed"], "_equalize.update_obs_for_equalization": ["_equalize.get_op_node_and_weight_eq_obs", "<builtin>.isinstance", "_equalize.nn_module_supports_equalization", "_equalize.calculate_equalization_scale", "_equalize.fused_module_supports_equalization", "<builtin>.str"], "_equalize.convert_eq_obs": ["_equalize.scale_weight_functional", "_equalize.maybe_get_weight_eq_obs_node", "_equalize.node_supports_equalization", "<builtin>.isinstance", "_equalize.scale_weight_node", "_equalize.remove_node", "torch.tensor", "_equalize.scale_input_observer", "<builtin>.setattr", "_equalize.maybe_get_next_equalization_scale", "utils.get_new_attr_name_with_prefix", "<builtin>.str", "_equalize.clear_weight_quant_obs_node", "<builtin>.ValueError"], "convert.convert.<lambda1>": ["collections.defaultdict"], "convert.convert.load_non_quantized": ["torch.fx.Proxy", "<builtin>.str"], "torch.fx.Proxy": [], "convert.convert.load_quantized": [], "convert.convert.load_quantized.load_quantized_impl": ["convert.convert.load_non_quantized", "<builtin>.str"], "convert.convert.load_x": ["<builtin>.Exception"], "convert.convert.load_arg": ["<builtin>.len", "<builtin>.type", "<builtin>.isinstance"], "convert.convert.load_arg.load_arg_impl": ["<builtin>.type", "convert.convert.load_quantized", "torch.fx.map_arg", "<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance"], "convert.convert.node_arg_is_quantized": ["<builtin>.map", "<builtin>.any", "<builtin>.Exception", "<builtin>.all", "<builtin>.isinstance"], "convert.convert.is_output_quantized": ["utils.node_return_type_is_int", "utils.activation_is_statically_quantized", "convert.convert.node_arg_is_quantized"], "utils.activation_is_statically_quantized": ["utils.activation_dtype"], "utils.node_return_type_is_int": [], "convert.convert.insert_quantize_node": ["utils.quantize_node", "convert.convert.load_non_quantized", "<builtin>.isinstance"], "utils.quantize_node": ["utils.create_getattr_from_value", "<builtin>.tuple", "<builtin>.list", "utils.get_quantize_node_info"], "graph_module.is_observed_standalone_module": ["<builtin>.isinstance"], "utils.activation_dtype": [], "quantize.is_activation_post_process": ["<builtin>.isinstance"], "utils.is_get_tensor_info_node": [], "convert.convert.load_arg_remove": ["torch.fx.map_arg"], "convert.convert.load_arg_remove.<lambda1>": [], "quantize._remove_qconfig": ["quantize._remove_qconfig", "quantize._remove_activation_post_process", "<builtin>.hasattr"], "fuse": [], "fuse.Fuser.fuse": ["<builtin>.dict", "graph_module.FusedGraphModule", "fuse.Fuser._find_matches", "utils.get_combined_dict", "pattern_utils.get_default_fusion_patterns", "<builtin>.set", "torch.fx.graph.Graph"], "pattern_utils.get_default_fusion_patterns": [], "utils.get_combined_dict": [], "fuse.Fuser._find_matches": ["match_utils.is_match", "<builtin>.dict", "fuse.Fuser._find_matches.apply_match", "<builtin>.reversed"], "fuse.Fuser.fuse.load_arg": ["torch.fx.map_arg"], "fuse.Fuser.fuse.load_arg.<lambda1>": [], "graph_module.FusedGraphModule": [], "fuse.Fuser._find_matches.apply_match": ["<builtin>.isinstance", "fuse.Fuser._find_matches.apply_match", "<builtin>.zip"], "match_utils.is_match": ["<builtin>.len", "match_utils.is_match", "<builtin>.all", "<builtin>.callable", "<builtin>.isinstance", "<builtin>.issubclass", "<builtin>.zip", "<builtin>.type"], "fusion_patterns": [], "fusion_patterns.FuseHandler.__init__": [], "fusion_patterns.FuseHandler": ["abc.abstractmethod"], "fusion_patterns.FuseHandler.fuse": [], "fusion_patterns.ConvBNReLUFusion.__init__": ["<builtin>.super", "<builtin>.type", "<builtin>.isinstance"], "fusion_patterns.ConvBNReLUFusion.fuse": ["<builtin>.setattr", "<builtin>.tuple", "<builtin>.NotImplementedError", "utils._parent_name", "<builtin>.type", "torch.nn.Identity", "torch.nn.ReLU", "fuser_method_mappings.get_fuser_method"], "utils._parent_name": ["<builtin>.len"], "fuser_method_mappings.get_fuser_method": ["<builtin>.dict", "utils.get_combined_dict"], "torch.nn.Identity": [], "fusion_patterns.ModuleReLUFusion.__init__": ["<builtin>.super", "<builtin>.isinstance"], "fusion_patterns.ModuleReLUFusion.fuse": ["<builtin>.setattr", "<builtin>.tuple", "utils._parent_name", "<builtin>.type", "torch.nn.ReLU", "fuser_method_mappings.get_fuser_method"], "graph_module": [], "graph_module.FusedGraphModule.__init__": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.setattr", "<builtin>.super"], "graph_module.FusedGraphModule.__deepcopy__": ["graph_module.FusedGraphModule.__init__", "torch.nn.Module", "copy.deepcopy"], "torch.nn.Module": [], "graph_module.ObservedGraphModule.__init__": ["<builtin>.getattr", "<builtin>.super", "<builtin>.hasattr", "<builtin>.setattr", "<builtin>.set"], "graph_module.ObservedGraphModule.__deepcopy__": ["graph_module.ObservedGraphModule.__init__", "torch.nn.Module", "copy.deepcopy"], "graph_module.ObservedStandaloneGraphModule.__init__": ["<builtin>.set", "<builtin>.super"], "graph_module.ObservedStandaloneGraphModule.__deepcopy__": ["graph_module.ObservedStandaloneGraphModule.__init__", "torch.nn.Module", "copy.deepcopy"], "graph_module._save_packed_weight": ["<builtin>.isinstance", "<builtin>.getattr", "<builtin>.dir"], "graph_module.QuantizedGraphModule.__init__": ["<builtin>.getattr", "<builtin>.super", "<builtin>.hasattr", "torch.fx.GraphModule._register_state_dict_hook", "<builtin>.setattr"], "torch.fx.GraphModule._register_state_dict_hook": [], "graph_module.QuantizedGraphModule._load_from_state_dict": ["<builtin>.isinstance", "<builtin>.setattr", "<builtin>.super"], "graph_module.QuantizedGraphModule.__deepcopy__": ["graph_module.ObservedStandaloneGraphModule.__init__", "torch.nn.Module", "copy.deepcopy"], "match_utils": [], "match_utils.find_matches.record_match": ["<builtin>.isinstance", "<builtin>.zip", "match_utils.find_matches.record_match"], "utils.get_qconfig_dtypes": ["<builtin>.hasattr"], "quantization_patterns.CustomModuleQuantizeHandler": [], "match_utils.find_matches.is_standalone_module": ["<builtin>.type"], "quantization_patterns.StandaloneModuleQuantizeHandler": [], "pattern_utils": ["collections.OrderedDict", "<builtin>.dict"], "pattern_utils.register_fusion_pattern": [], "pattern_utils.register_fusion_pattern.insert": [], "pattern_utils.register_quant_pattern": [], "pattern_utils.register_quant_pattern.insert": [], "pattern_utils.get_default_quant_patterns": [], "pattern_utils.get_default_output_activation_post_process_map": [], "prepare.is_activation_post_process_node": ["quantize.is_activation_post_process", "<builtin>.str"], "prepare.node_arg_is_weight": ["<builtin>.enumerate", "<builtin>.isinstance"], "prepare.node_arg_is_bias": ["<builtin>.enumerate", "<builtin>.isinstance"], "prepare.get_standalone_module_configs": ["<builtin>.type"], "prepare.qat_swap_modules": ["utils.get_combined_dict", "quantize.convert", "quantization_mappings.get_default_qat_module_mappings"], "quantization_mappings.get_default_qat_module_mappings": ["copy.deepcopy"], "quantize.convert": ["quantize._remove_qconfig", "torch._C._log_api_usage_once", "quantize._convert", "copy.deepcopy"], "prepare.update_qconfig_for_qat": ["utils.get_combined_dict", "quantization_mappings.get_default_qat_module_mappings"], "prepare.update_qconfig_for_fusion": ["fuser_method_mappings.DEFAULT_OP_LIST_TO_FUSER_METHOD.items", "<builtin>.type", "<builtin>.list", "<builtin>.str", "<builtin>.dict", "<builtin>.LookupError", "fuser_method_mappings.DEFAULT_OP_LIST_TO_FUSER_METHOD.values"], "fuser_method_mappings.DEFAULT_OP_LIST_TO_FUSER_METHOD.values": [], "fuser_method_mappings.DEFAULT_OP_LIST_TO_FUSER_METHOD.items": [], "prepare.insert_observer": ["_equalize.is_equalization_observer", "utils.get_new_attr_name_with_prefix", "utils.assert_and_get_unique_device", "<builtin>.setattr"], "utils.assert_and_get_unique_device": ["<builtin>.iter", "<builtin>.len", "<builtin>.next"], "_equalize.is_equalization_observer": ["<builtin>.isinstance"], "prepare.get_target_activation_dtype_for_node": ["<builtin>.AssertionError", "utils.all_node_args_have_no_tensors", "utils.get_qconfig_dtypes"], "utils.all_node_args_have_no_tensors": ["quantize.is_activation_post_process", "<builtin>.isinstance", "utils.all_node_args_have_no_tensors"], "prepare.maybe_insert_input_observer_for_arg_or_kwarg": ["utils.weight_dtype", "<builtin>.type", "prepare.insert_observer", "prepare.maybe_insert_input_observer_for_arg_or_kwarg", "prepare.get_standalone_module_configs", "utils.activation_dtype", "utils.weight_is_quantized", "utils.activation_is_statically_quantized", "<builtin>.enumerate", "<builtin>.isinstance", "prepare.node_arg_is_bias", "prepare.node_arg_is_weight"], "utils.weight_is_quantized": ["utils.weight_dtype"], "utils.weight_dtype": [], "prepare.maybe_insert_input_observers_for_node": ["prepare.maybe_insert_input_observer_for_arg_or_kwarg", "<builtin>.tuple"], "prepare.maybe_insert_input_equalization_observers_for_node": ["warnings.warn", "prepare.insert_observer", "<builtin>.tuple", "<builtin>.isinstance", "prepare.node_arg_is_bias", "_equalize.node_supports_equalization", "prepare.node_arg_is_weight"], "_equalize.node_supports_equalization": ["_equalize.fused_module_supports_equalization", "_equalize.nn_module_supports_equalization", "<builtin>.str"], "prepare.maybe_insert_output_observer_for_node": ["utils.activation_is_int8_quantized", "prepare.insert_observer", "utils.activation_is_statically_quantized", "pattern_utils.get_default_output_activation_post_process_map", "<builtin>.isinstance"], "utils.activation_is_int8_quantized": ["utils.activation_dtype"], "prepare.maybe_insert_observers_before_graph_output": ["prepare.maybe_insert_observers_before_graph_output._recursive_maybe_replace_node_with_obs"], "prepare.maybe_insert_observers_before_graph_output._recursive_maybe_replace_node_with_obs": ["prepare.maybe_insert_observers_before_graph_output._recursive_maybe_replace_node_with_obs", "<builtin>.isinstance", "prepare.insert_observer", "<builtin>.tuple"], "prepare.maybe_propagate_dtype_for_node": ["<builtin>.isinstance", "prepare.maybe_propagate_dtype_for_node"], "prepare.propagate_dtypes_for_known_nodes": ["utils.node_bool_tensor_arg_indexes", "prepare.maybe_propagate_dtype_for_node"], "utils.node_bool_tensor_arg_indexes": [], "prepare.maybe_make_input_output_share_observers": ["utils._parent_name", "<builtin>.AssertionError", "prepare.is_activation_post_process_node", "<builtin>.enumerate", "<builtin>.setattr", "<builtin>.len", "<builtin>.isinstance", "<builtin>.range"], "prepare.remove_output_observer": ["prepare.is_activation_post_process_node", "<builtin>.list"], "prepare.swap_custom_module_to_observed": ["utils.get_swapped_custom_module_class", "utils._parent_name", "<builtin>.setattr"], "utils.get_swapped_custom_module_class": ["utils.get_quant_type", "<builtin>.type", "quant_type.quant_type_to_str"], "prepare.insert_observers_for_model": ["prepare.maybe_make_input_output_share_observers", "prepare.remove_output_observer", "prepare.maybe_insert_input_observers_for_node", "<builtin>.list", "<builtin>.dict", "prepare.maybe_insert_input_equalization_observers_for_node", "prepare.maybe_insert_output_observer_for_node", "prepare.maybe_insert_observers_before_graph_output", "prepare.propagate_dtypes_for_known_nodes", "<builtin>.len", "prepare.get_target_activation_dtype_for_node", "<builtin>.isinstance", "<builtin>.str", "prepare.swap_custom_module_to_observed"], "prepare.run_prepare_fx_on_standalone_modules": ["utils._parent_name", "graph_module.ObservedStandaloneGraphModule", "<builtin>.set", "torch.quantization.quantize_fx._prepare_standalone_module_fx", "prepare.get_standalone_module_configs", "<builtin>.setattr", "<builtin>.isinstance"], "torch.quantization.quantize_fx._prepare_standalone_module_fx": [], "graph_module.ObservedStandaloneGraphModule": [], "prepare.save_state": [], "prepare.prepare": ["pattern_utils.get_default_quant_patterns", "qconfig_utils.get_flattened_qconfig_dict", "qconfig_utils.generate_qconfig_map", "utils.get_combined_dict", "utils.get_custom_module_class_keys", "prepare.update_qconfig_for_qat", "<builtin>.set", "prepare.save_state", "prepare.insert_observers_for_model", "prepare.run_prepare_fx_on_standalone_modules", "prepare.update_qconfig_for_fusion", "match_utils.find_matches", "<builtin>.dict", "graph_module.ObservedGraphModule", "<builtin>.isinstance", "qconfig_utils.convert_dict_to_ordered_dict", "torch.tensor", "prepare.qat_swap_modules", "torch.quantization.propagate_qconfig_"], "qconfig_utils.convert_dict_to_ordered_dict": ["qconfig_utils.convert_dict_to_ordered_dict._convert_to_ordered_dict"], "qconfig_utils.get_flattened_qconfig_dict": ["<builtin>.dict", "qconfig_utils.get_flattened_qconfig_dict.flatten_key"], "torch.quantization.propagate_qconfig_": [], "qconfig_utils.generate_qconfig_map": ["qconfig_utils.get_object_type_qconfig", "qconfig_utils.maybe_adjust_qconfig_for_module_name_object_type_order", "<builtin>.dict", "collections.defaultdict", "qconfig_utils.maybe_adjust_qconfig_for_module_type_or_name", "utils._parent_name", "torch.quantization.qconfig.add_module_to_qconfig_obs_ctr", "<builtin>.type"], "graph_module.ObservedGraphModule": [], "qconfig_utils": [], "qconfig_utils.get_flattened_qconfig_dict.flatten_key": [], "qconfig_utils.convert_dict_to_ordered_dict._convert_to_ordered_dict": ["collections.OrderedDict"], "qconfig_utils.get_object_type_qconfig": [], "qconfig_utils.get_module_name_regex_qconfig": ["re.match"], "qconfig_utils.maybe_adjust_qconfig_for_module_name_object_type_order": [], "qconfig_utils.get_module_name_qconfig": ["qconfig_utils.get_module_name_qconfig", "utils._parent_name"], "qconfig_utils.maybe_adjust_qconfig_for_module_type_or_name": ["qconfig_utils.get_object_type_qconfig", "qconfig_utils.get_module_name_qconfig", "qconfig_utils.get_module_name_regex_qconfig"], "qconfig_utils.generate_qconfig_map.<lambda1>": ["collections.defaultdict"], "torch.quantization.qconfig.add_module_to_qconfig_obs_ctr": [], "qconfig_utils.check_is_valid_config_dict": ["<builtin>.str", "<builtin>.ValueError"], "qconfig_utils.check_is_valid_qconfig_dict": ["qconfig_utils.check_is_valid_config_dict"], "qconfig_utils.check_is_valid_prepare_custom_config_dict": ["qconfig_utils.check_is_valid_config_dict"], "qconfig_utils.check_is_valid_convert_custom_config_dict": ["qconfig_utils.check_is_valid_config_dict"], "qconfig_utils.check_is_valid_fuse_custom_config_dict": ["qconfig_utils.check_is_valid_config_dict"], "quantization_patterns": [], "quantization_patterns.QuantizeHandler.__init__": ["<builtin>.len"], "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer": ["<builtin>.str", "quantize.is_activation_post_process"], "quantization_patterns.QuantizeHandler.input_output_observed": [], "quantization_patterns.QuantizeHandler.is_general_tensor_value_op": [], "quantization_patterns.QuantizeHandler.is_general_tensor_shape_op": [], "quantization_patterns.QuantizeHandler.should_insert_observer_for_output": ["quantization_patterns.QuantizeHandler.input_output_observed"], "quantization_patterns.QuantizeHandler.should_mark_output_quantized_from_input_quantized_status": [], "quantization_patterns.QuantizeHandler.get_activation_ctr": [], "quantization_patterns.QuantizeHandler": ["abc.abstractmethod"], "quantization_patterns.QuantizeHandler.convert": [], "quantization_patterns._load_weight_qparams": [], "quantization_patterns._save_weight_qparams": ["<builtin>.dir", "<builtin>.isinstance", "<builtin>.getattr"], "quantization_patterns._to_reference": [], "quantization_patterns._to_reference._get_name": [], "quantization_patterns.BinaryOpQuantizeHandler.__init__": ["<builtin>.range", "<builtin>.super", "<builtin>.len", "<builtin>.dict", "<builtin>.str", "utils.all_node_args_have_no_tensors", "<builtin>.isinstance"], "quantization_patterns.BinaryOpQuantizeHandler.should_insert_observer_for_output": ["quantization_patterns.BinaryOpQuantizeHandler.input_output_observed"], "quantization_patterns.BinaryOpQuantizeHandler.input_output_observed": [], "quantization_patterns.BinaryOpQuantizeHandler.is_general_tensor_value_op": [], "quantization_patterns.BinaryOpQuantizeHandler.convert": ["warnings.warn", "<builtin>.float", "utils.create_qparam_nodes", "utils.activation_dtype", "<builtin>.dict", "utils.quantize_node", "<builtin>.int", "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer", "<builtin>.tuple", "utils.all_node_args_have_no_tensors", "utils.get_qconfig_dtypes", "<builtin>.isinstance"], "quantization_patterns.BinaryOpQuantizeHandler.convert.modified_load_arg": [], "utils.create_qparam_nodes": ["utils.create_getattr_from_value"], "quantization_patterns.CatQuantizeHandler.is_general_tensor_value_op": [], "quantization_patterns.CatQuantizeHandler.convert": ["<builtin>.list", "utils.activation_dtype", "utils.quantize_node", "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer"], "quantization_patterns.ConvReluQuantizeHandler.__init__": ["<builtin>.str", "<builtin>.super", "<builtin>.isinstance"], "quantization_patterns.ConvReluQuantizeHandler.convert": ["<builtin>.setattr", "utils.activation_dtype", "utils.quantize_node", "utils.get_qconfig_dtypes", "warnings.warn", "<builtin>.type", "utils.get_qconv_prepack_op", "<builtin>.tuple", "quantization_patterns._to_reference", "utils.create_qparam_nodes", "utils.activation_is_int8_quantized", "<builtin>.len", "utils._parent_name", "utils.get_qconv_op", "utils.get_per_tensor_qparams", "quantization_mappings.get_static_quant_module_class", "<builtin>.isinstance", "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer", "utils.get_qparam_dict", "<builtin>.Exception"], "utils.get_qparam_dict": ["utils.is_per_channel", "<builtin>.RuntimeError", "<builtin>.hasattr", "utils.is_per_tensor"], "quantization_mappings.get_static_quant_module_class": ["<builtin>.str", "utils.get_combined_dict", "copy.deepcopy"], "utils.get_qconv_prepack_op": [], "utils.get_qconv_op": [], "utils.get_per_tensor_qparams": ["<builtin>.float", "<builtin>.int", "utils.is_per_tensor"], "quantization_patterns.LinearReLUQuantizeHandler.__init__": ["<builtin>.str", "<builtin>.super", "<builtin>.isinstance"], "quantization_patterns.LinearReLUQuantizeHandler.convert": ["<builtin>.setattr", "utils.weight_is_statically_quantized", "utils.activation_dtype", "utils.quantize_node", "utils.get_qconfig_dtypes", "warnings.warn", "<builtin>.type", "<builtin>.tuple", "quantization_patterns._to_reference", "utils.create_qparam_nodes", "utils.activation_is_int8_quantized", "<builtin>.len", "quantization_mappings.get_dynamic_quant_module_class", "utils._parent_name", "utils.get_per_tensor_qparams", "quantization_mappings.get_static_quant_module_class", "<builtin>.isinstance", "utils.get_linear_prepack_op_for_dtype", "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer", "utils.get_qparam_dict", "utils.activation_is_statically_quantized"], "quantization_mappings.get_dynamic_quant_module_class": ["<builtin>.str", "utils.get_combined_dict", "copy.deepcopy"], "utils.weight_is_statically_quantized": ["utils.weight_dtype"], "utils.get_linear_prepack_op_for_dtype": ["<builtin>.Exception"], "quantization_patterns.BatchNormQuantizeHandler.__init__": ["<builtin>.str", "<builtin>.super"], "quantization_patterns.BatchNormQuantizeHandler.convert": ["<builtin>.type", "<builtin>.setattr", "utils.activation_dtype", "utils.quantize_node", "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer", "utils._parent_name", "quantization_mappings.get_static_quant_module_class"], "quantization_patterns.EmbeddingQuantizeHandler.__init__": ["<builtin>.super"], "quantization_patterns.EmbeddingQuantizeHandler.input_output_observed": [], "quantization_patterns.EmbeddingQuantizeHandler.convert": ["warnings.warn", "<builtin>.type", "<builtin>.setattr", "utils._parent_name", "<builtin>.str", "utils.get_qconfig_dtypes", "quantization_mappings.get_static_quant_module_class"], "quantization_patterns.RNNDynamicQuantizeHandler.__init__": ["<builtin>.super"], "quantization_patterns.RNNDynamicQuantizeHandler.input_output_observed": [], "quantization_patterns.RNNDynamicQuantizeHandler.convert": ["warnings.warn", "<builtin>.type", "<builtin>.setattr", "quantization_mappings.get_dynamic_quant_module_class", "utils._parent_name", "<builtin>.str", "utils.get_qconfig_dtypes"], "quantization_patterns.DefaultNodeQuantizeHandler.__init__": ["<builtin>.str", "<builtin>.super", "<builtin>.type"], "quantization_patterns.DefaultNodeQuantizeHandler.convert": ["warnings.warn", "<builtin>.float", "<builtin>.type", "utils.create_qparam_nodes", "quantization_mappings.get_quantized_operator", "<builtin>.setattr", "utils.activation_dtype", "utils.quantize_node", "<builtin>.int", "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer", "utils._parent_name", "<builtin>.str", "utils.get_qconfig_dtypes", "quantization_mappings.get_static_quant_module_class", "<builtin>.isinstance"], "quantization_mappings.get_quantized_operator": ["<builtin>.str"], "quantization_patterns.FixedQParamsOpQuantizeHandler.__init__": ["<builtin>.super"], "quantization_patterns.FixedQParamsOpQuantizeHandler.should_insert_observer_for_output": ["utils.activation_dtype"], "quantization_patterns.FixedQParamsOpQuantizeHandler.should_mark_output_quantized_from_input_quantized_status": ["utils.activation_dtype"], "quantization_patterns.FixedQParamsOpQuantizeHandler.get_activation_ctr": ["utils.activation_dtype", "pattern_utils.get_default_output_activation_post_process_map"], "quantization_patterns.FixedQParamsOpQuantizeHandler.convert": ["utils.get_qconfig_dtypes"], "quantization_patterns.CopyNodeQuantizeHandler.should_mark_output_quantized_from_input_quantized_status": [], "quantization_patterns.CopyNodeQuantizeHandler.is_general_tensor_value_op": [], "quantization_patterns.CopyNodeQuantizeHandler.convert": ["<builtin>.list", "utils.activation_dtype", "utils.quantize_node", "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer"], "quantization_patterns.CustomModuleQuantizeHandler.convert": ["<builtin>.setattr", "utils.get_swapped_custom_module_class", "quantization_patterns.QuantizeHandler._maybe_get_last_node_only_observer", "utils._parent_name", "<builtin>.str", "utils.activation_is_statically_quantized"], "quantization_patterns.GeneralTensorShapeOpQuantizeHandler.is_general_tensor_shape_op": [], "quantization_patterns.GeneralTensorShapeOpQuantizeHandler.should_mark_output_quantized_from_input_quantized_status": [], "quantization_patterns.GeneralTensorShapeOpQuantizeHandler.convert": [], "quantization_patterns.StandaloneModuleQuantizeHandler.convert": ["<builtin>.str", "torch.quantization.quantize_fx._convert_standalone_module_fx", "<builtin>.setattr", "utils._parent_name"], "torch.quantization.quantize_fx._convert_standalone_module_fx": [], "quantization_types": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.get_standalone_module_configs": ["<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.insert_observer": ["utils.get_new_attr_name_with_prefix", "<builtin>.setattr", "utils.assert_and_get_unique_device"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.get_target_activation_dtype_for_node": ["utils.all_node_args_have_no_tensors", "<builtin>.AssertionError", "utils.get_qconfig_dtypes"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_insert_input_observer_for_arg_or_kwarg": ["utils.activation_is_statically_quantized", "<builtin>.enumerate", "utils.weight_dtype", "<builtin>.isinstance", "utils.activation_dtype", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.node_arg_is_weight", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.insert_observer", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.get_standalone_module_configs", "<builtin>.type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_insert_input_observer_for_arg_or_kwarg", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.node_arg_is_bias", "utils.weight_is_quantized"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.node_arg_is_weight": ["<builtin>.isinstance", "<builtin>.enumerate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.node_arg_is_bias": ["<builtin>.isinstance", "<builtin>.enumerate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_insert_input_observers_for_node": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_insert_input_observer_for_arg_or_kwarg", "<builtin>.tuple"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_insert_output_observer_for_node": ["utils.activation_is_statically_quantized", "<builtin>.isinstance", "utils.activation_is_int8_quantized", "pattern_utils.get_default_output_activation_post_process_map", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.insert_observer"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_propagate_dtype_for_node": ["<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_propagate_dtype_for_node"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.propagate_dtypes_for_known_nodes": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_propagate_dtype_for_node", "utils.node_bool_tensor_arg_indexes"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.adjust_observers_for_cat": ["utils._parent_name", "<builtin>.enumerate", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.is_activation_post_process_node", "<builtin>.isinstance", "<builtin>.AssertionError", "<builtin>.setattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.is_activation_post_process_node": ["quantize.is_activation_post_process", "<builtin>.str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.insert_observers_for_model": ["<builtin>.dict", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_insert_output_observer_for_node", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.maybe_insert_input_observers_for_node", "<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.is_activation_post_process_node", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.propagate_dtypes_for_known_nodes", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.adjust_observers_for_cat", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.get_target_activation_dtype_for_node", "<builtin>.list"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.run_prepare_fx_on_standalone_modules": ["utils._parent_name", "<builtin>.isinstance", "torch.quantization.quantize_fx._prepare_standalone_module_fx", "graph_module.ObservedStandaloneGraphModule", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.get_standalone_module_configs", "<builtin>.setattr", "<builtin>.set"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._qat_swap_modules": ["utils.get_combined_dict", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer.convert", "quantization_mappings.get_default_qat_module_mappings"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer.convert": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._fold_weight", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._generate_qconfig_map": ["utils._parent_name", "<builtin>.dict", "qconfig_utils.get_object_type_qconfig", "qconfig_utils.get_qconfig", "<builtin>.type"], "qconfig_utils.get_qconfig": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._prepare": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.insert_observers_for_model", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._generate_qconfig_map", "qconfig_utils.convert_dict_to_ordered_dict", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._qat_swap_modules", "<builtin>.dict", "graph_module.ObservedGraphModule", "<builtin>.isinstance", "pattern_utils.get_default_quant_patterns", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._find_matches", "utils.get_combined_dict", "utils.get_custom_module_class_keys", "torch.tensor", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.run_prepare_fx_on_standalone_modules", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer.save_state", "<builtin>.set", "torch.quantization.propagate_qconfig_", "qconfig_utils.get_flattened_qconfig_dict"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._find_matches": ["quantization_patterns.StandaloneModuleQuantizeHandler", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._find_matches.is_standalone_module", "<builtin>.dict", "<builtin>.isinstance", "graph_module.is_observed_standalone_module", "quantization_patterns.CustomModuleQuantizeHandler", "pattern_utils.is_match", "<builtin>.reversed", "<builtin>.type", "<builtin>.set", "utils.get_qconfig_dtypes", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._find_matches.record_match"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer.save_state": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer.restore_state": ["graph_module.is_observed_module"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer.prepare": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._prepare"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._run_weight_observers": ["utils.collect_producer_nodes", "utils.graph_module_from_producer_nodes", "<builtin>.enumerate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer.restore_state", "quantize.is_activation_post_process", "<builtin>.dict", "graph_module.is_observed_standalone_module", "<builtin>.len", "graph_module.QuantizedGraphModule", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._find_matches", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.is_output_quantized", "utils.activation_dtype", "utils.get_custom_module_class_keys", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._run_weight_observers", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.insert_quantize_node", "quantize._remove_qconfig", "<builtin>.set", "torch.fx.map_arg", "torch.fx.graph.Graph"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.load_non_quantized": ["torch.fx.Proxy", "<builtin>.str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.load_quantized": ["<builtin>.str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.load_x": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.load_arg": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.load_arg.load_arg_impl": ["<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.len", "<builtin>.type", "torch.fx.map_arg"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.node_arg_is_quantized": ["<builtin>.all", "<builtin>.isinstance", "<builtin>.any", "<builtin>.Exception", "<builtin>.map"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.is_output_quantized": ["utils.node_return_type_is_int", "utils.activation_is_int8_quantized", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.node_arg_is_quantized"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.insert_quantize_node": ["<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.load_non_quantized", "utils.quantize_node"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.load_arg_simple": ["torch.fx.map_arg"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._convert.load_arg_simple.<lambda1>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._fold_weight": ["<builtin>.dict", "graph_module.QuantizedGraphModule", "utils.collect_producer_nodes", "utils.graph_module_from_producer_nodes", "<builtin>.setattr", "utils.get_new_attr_name_with_prefix", "<builtin>.list", "torch.fx.graph.Graph"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._fold_weight.load_arg": ["torch.fx.map_arg"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._fold_weight.load_arg.<lambda1>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._find_matches.record_match": ["<builtin>.isinstance", "<builtin>.zip", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._find_matches.record_match"], "pattern_utils.is_match": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quantization\\fx\\quantize.Quantizer._find_matches.is_standalone_module": ["<builtin>.type"], "utils.graph_pretty_str": ["<builtin>.len", "<builtin>.zip", "<builtin>.str", "re.compile", "<builtin>.max"], "utils.is_per_tensor": [], "utils.get_quantize_node_info": ["<builtin>.int", "<builtin>.Exception", "<builtin>.float", "<builtin>.str", "utils.is_per_channel"], "utils.is_per_channel": [], "utils.create_getattr_from_value": ["torch.tensor", "utils.get_new_attr_name_with_prefix", "utils.assert_and_get_unique_device", "utils.get_new_attr_name_with_prefix.get_new_attr_name"], "utils.get_new_attr_name_with_prefix.get_new_attr_name": ["<builtin>.hasattr", "utils.get_new_attr_name_with_prefix.get_new_attr_name.get_attr_name"], "utils.get_new_attr_name_with_prefix.get_new_attr_name.get_attr_name": ["<builtin>.str"], "utils.graph_module_from_producer_nodes.load_arg": ["torch.fx.map_arg"], "utils.graph_module_from_producer_nodes.load_arg.<lambda1>": [], "utils.maybe_get_next_module": ["<builtin>.str", "<builtin>.isinstance"], "_equalize": [], "_equalize.reshape_scale": [], "_equalize._InputEqualizationObserver.__init__": ["torch.tensor", "observer.PerChannelMinMaxObserver", "<builtin>.super", "<builtin>.TypeError"], "observer.PerChannelMinMaxObserver": ["torch.jit.export"], "_equalize._InputEqualizationObserver.forward": ["<builtin>.ValueError"], "_equalize._InputEqualizationObserver.get_input_minmax": [], "_equalize._InputEqualizationObserver.set_equalization_scale": ["torch.reshape", "torch.tensor"], "_equalize._InputEqualizationObserver.calculate_scaled_minmax": ["_equalize.reshape_scale", "warnings.warn", "torch.mul", "_equalize._InputEqualizationObserver.get_input_minmax", "torch.tensor", "torch.max", "torch.min"], "<builtin>.classmethod": [], "_equalize._InputEqualizationObserver": ["<builtin>.classmethod"], "_equalize._WeightEqualizationObserver.__init__": ["observer.PerChannelMinMaxObserver", "<builtin>.super", "torch.tensor"], "_equalize._WeightEqualizationObserver.forward": ["<builtin>.ValueError"], "_equalize._WeightEqualizationObserver.get_weight_col_minmax": [], "_equalize._WeightEqualizationObserver.set_equalization_scale": [], "_equalize._WeightEqualizationObserver": ["<builtin>.classmethod"], "_equalize.calculate_equalization_scale": ["warnings.warn", "torch.nan_to_num", "torch.tensor", "torch.sqrt", "utils.check_min_max_valid", "<builtin>.ValueError"], "utils.check_min_max_valid": ["<builtin>.float", "warnings.warn", "torch.all"], "torch.nan_to_num": [], "_equalize.EqualizationQConfig.__new__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.ValueError"], "_equalize.fused_module_supports_equalization": ["<builtin>.type"], "_equalize.nn_module_supports_equalization": ["<builtin>.type"], "_equalize.get_op_node_and_weight_eq_obs": ["_equalize.node_supports_equalization", "<builtin>.isinstance", "_equalize.maybe_get_weight_eq_obs_node", "<builtin>.str"], "_equalize.maybe_get_weight_eq_obs_node": ["<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.str"], "_equalize.maybe_get_next_input_eq_obs": ["_equalize.node_supports_equalization", "<builtin>.isinstance", "<builtin>.str", "utils.maybe_get_next_module"], "_equalize.maybe_get_next_equalization_scale": ["_equalize.maybe_get_next_input_eq_obs", "torch.tensor"], "_equalize.scale_input_observer": ["<builtin>.isinstance", "<builtin>.str"], "_equalize.scale_weight_node": ["_equalize.reshape_scale", "torch.mul", "torch.nn.Parameter", "<builtin>.isinstance", "_equalize.nn_module_supports_equalization", "_equalize.fused_module_supports_equalization", "torch.reciprocal", "<builtin>.str"], "torch.reciprocal": [], "_equalize.scale_weight_functional": ["utils._parent_name", "_equalize.reshape_scale", "_equalize.maybe_get_weight_eq_obs_node", "torch.mul", "<builtin>.isinstance", "<builtin>.setattr", "<builtin>.getattr", "torch.allclose", "torch.reciprocal", "<builtin>.str"], "_equalize.clear_weight_quant_obs_node": ["<builtin>.isinstance", "_equalize.maybe_get_weight_eq_obs_node", "<builtin>.str"], "_equalize.remove_node": ["<builtin>.list"], "_equalize._convert_equalization_ref": ["_equalize.convert_eq_obs", "torch.fx.GraphModule", "<builtin>.dict", "_equalize.update_obs_for_equalization"], "_equalize.get_layer_sqnr_dict": ["torch.quantization._numeric_suite_fx.extract_logger_info", "torch.quantization._numeric_suite_fx.extend_logger_results_with_comparison", "torch.quantization.ns.mappings.get_unmatchable_types_map", "torch.quantization._numeric_suite_fx.add_loggers"], "torch.quantization.ns.mappings.get_unmatchable_types_map": [], "torch.quantization._numeric_suite_fx.add_loggers": [], "torch.quantization._numeric_suite_fx.extract_logger_info": [], "torch.quantization._numeric_suite_fx.extend_logger_results_with_comparison": [], "_equalize.get_equalization_qconfig_dict": ["<builtin>.sorted", "<builtin>.list", "<builtin>.map"], "_equalize.get_equalization_qconfig_dict.<lambda1>": [], "_equalize.get_equalization_qconfig_dict.<lambda2>": [], "graph_matcher": [], "graph_matcher._get_output_nodes": [], "graph_matcher._NSGraphMatchableSubgraphsIterator.__init__": ["<builtin>.set", "graph_matcher._get_output_nodes"], "graph_matcher._NSGraphMatchableSubgraphsIterator.__iter__": [], "graph_matcher._NSGraphMatchableSubgraphsIterator.__next__": ["ns_types.NSSubgraph", "<builtin>.isinstance", "<builtin>.range", "pattern_utils.end_node_matches_reversed_fusion", "graph_matcher._NSGraphMatchableSubgraphsIterator._recursively_add_node_arg_to_stack", "pattern_utils.get_reversed_fusions", "utils.getattr_from_fqn", "<builtin>.len", "graph_matcher._NSGraphMatchableSubgraphsIterator._is_matchable"], "pattern_utils.get_reversed_fusions": ["<builtin>.isinstance", "torch.quantization.fx.pattern_utils.get_default_quant_patterns"], "pattern_utils.end_node_matches_reversed_fusion": ["<builtin>.range", "utils.getattr_from_fqn", "<builtin>.isinstance", "<builtin>.len"], "graph_matcher._NSGraphMatchableSubgraphsIterator._recursively_add_node_arg_to_stack": ["<builtin>.isinstance", "graph_matcher._NSGraphMatchableSubgraphsIterator._recursively_add_node_arg_to_stack", "<builtin>.type"], "graph_matcher._NSGraphMatchableSubgraphsIterator._is_matchable": ["utils.getattr_from_fqn", "<builtin>.isinstance", "<builtin>.any"], "utils.getattr_from_fqn": ["<builtin>.getattr"], "ns_types.NSSubgraph": [], "enum.auto": [], "graph_matcher.SubgraphTypeRelationship": ["enum.auto"], "graph_matcher._get_subgraph_relationship_type": ["utils.getattr_from_fqn", "<builtin>.isinstance", "<builtin>.type"], "graph_matcher._get_name_for_subgraph": ["<builtin>.str", "graph_matcher._get_node_target_type"], "graph_matcher._get_node_target_type": ["utils.getattr_from_fqn", "<builtin>.isinstance", "<builtin>.type"], "graph_matcher.get_matching_subgraph_pairs": ["<builtin>.next", "graph_matcher._NSGraphMatchableSubgraphsIterator.__init__", "mappings.get_unmatchable_types_map", "collections.OrderedDict", "<builtin>.list", "pattern_utils.get_type_a_related_to_b", "mappings.get_base_name_to_sets_of_related_ops", "<builtin>.reversed", "graph_matcher._get_subgraph_relationship_type", "<builtin>.set", "graph_matcher._get_name_for_subgraph", "graph_matcher._get_node_target_type"], "mappings.get_unmatchable_types_map": ["<builtin>.set"], "mappings.get_base_name_to_sets_of_related_ops": ["<builtin>.str", "<builtin>.set"], "pattern_utils.get_type_a_related_to_b": ["<builtin>.range", "<builtin>.list", "<builtin>.set", "<builtin>.len"], "graph_passes": [], "graph_passes._maybe_get_fqn": ["utils.getattr_from_fqn", "<builtin>.isinstance", "torch.quantization.quantize.is_activation_post_process", "<builtin>.hasattr"], "torch.quantization.quantize.is_activation_post_process": [], "graph_passes._insert_logger_after_node": ["<builtin>.setattr", "torch.quantization.fx.utils.get_new_attr_name_with_prefix", "utils.get_target_type_str"], "torch.quantization.fx.utils.get_new_attr_name_with_prefix": [], "utils.get_target_type_str": ["utils.getattr_from_fqn", "<builtin>.isinstance", "<builtin>.str", "<builtin>.type"], "graph_passes.add_loggers_to_model": ["<builtin>.type", "torch.fx.map_arg", "<builtin>.enumerate", "<builtin>.dict", "graph_passes._maybe_get_fqn", "torch.fx.GraphModule", "torch.fx.graph.Graph", "utils.get_arg_indices_of_inputs_to_log", "graph_passes._insert_logger_after_node"], "graph_passes.add_loggers_to_model.load_arg": ["torch.fx.map_arg"], "graph_passes.add_loggers_to_model.load_arg.<lambda1>": [], "utils.get_arg_indices_of_inputs_to_log": ["<builtin>.range", "<builtin>.type", "<builtin>.len"], "graph_passes._insert_quantize_per_tensor_node": ["<builtin>.setattr", "torch.quantization.fx.utils.get_new_attr_name_with_prefix"], "graph_passes._insert_dtype_cast_after_node": ["<builtin>.AssertionError", "<builtin>.type", "graph_passes._insert_quantize_per_tensor_node", "utils.get_node_input_qparams", "torch.quantization.fx.utils.get_new_attr_name_with_prefix", "<builtin>.isinstance", "utils.get_node_first_input_and_output_type", "<builtin>.setattr", "torch.nn.Identity"], "utils.get_node_first_input_and_output_type": ["utils.getattr_from_fqn", "<builtin>.isinstance", "<builtin>.any", "utils.get_node_first_input_and_output_type"], "utils.get_node_input_qparams": ["<builtin>.isinstance", "utils.get_node_input_qparams", "<builtin>.any", "utils.getattr_from_fqn", "utils.get_node_input_qparams._get_scale_zp_from_function_args"], "graph_passes._copy_node_from_a_to_c": ["<builtin>.AssertionError", "graph_passes._copy_node_from_a_to_c", "utils.getattr_from_fqn", "torch.quantization.fx.utils.get_new_attr_name_with_prefix", "<builtin>.setattr", "torch.is_tensor"], "graph_passes._insert_copy_of_subgraph_a_after_input_node_c": ["graph_passes._insert_copy_of_node_a_after_input_node_c", "<builtin>.len", "<builtin>.range", "<builtin>.isinstance"], "graph_passes._insert_copy_of_node_a_after_input_node_c": ["<builtin>.AssertionError", "<builtin>.type", "graph_passes._copy_node_from_a_to_c", "utils.return_first_non_observer_node", "utils.getattr_from_fqn", "torch.quantization.fx.utils.get_new_attr_name_with_prefix", "<builtin>.isinstance", "<builtin>.setattr"], "utils.return_first_non_observer_node": ["torch.quantization.quantize.is_activation_post_process", "<builtin>.isinstance", "utils.getattr_from_fqn", "<builtin>.len"], "graph_passes.create_a_shadows_b": ["graph_passes._maybe_get_fqn", "torch.fx.GraphModule", "<builtin>.isinstance", "torch.fx.graph.Graph", "utils.get_target_type_str", "torch.quantization.ns.mappings.get_node_type_to_io_type_map", "<builtin>.type", "<builtin>.enumerate", "utils.get_node_input_qparams", "utils.get_number_of_non_param_args", "utils.get_node_first_input_and_output_type", "<builtin>.print", "graph_passes._insert_copy_of_subgraph_a_after_input_node_c", "graph_passes._insert_dtype_cast_after_node", "<builtin>.AssertionError", "torch.fx.map_arg", "<builtin>.getattr", "<builtin>.dict", "graph_passes._insert_logger_after_node"], "torch.quantization.ns.mappings.get_node_type_to_io_type_map": [], "graph_passes.create_a_shadows_b.load_arg": ["torch.fx.map_arg"], "graph_passes.create_a_shadows_b.load_arg.<lambda1>": [], "utils.get_number_of_non_param_args": ["<builtin>.isinstance", "utils.getattr_from_fqn"], "mappings": [], "mappings.get_base_name_for_op": [], "mappings.add_op_to_sets_of_related_ops": ["<builtin>.str", "<builtin>.set", "<builtin>.AssertionError"], "mappings.get_node_type_to_io_type_map": ["<builtin>.set"], "ns_types": ["typing.NamedTuple"], "typing.NamedTuple": [], "torch.quantization.fx.pattern_utils.get_default_quant_patterns": [], "utils.NodeInputOrOutputType": ["enum.auto"], "utils.get_node_input_qparams._get_scale_zp_from_function_args": ["utils.getattr_from_fqn", "<builtin>.isinstance"], "utils.rekey_logger_info_on_node_name_of_model": ["<builtin>.len"], "utils.maybe_add_missing_fqns": ["<builtin>.range", "<builtin>.len"], "utils.maybe_dequantize_first_two_tensor_args_and_handle_tuples": [], "utils.maybe_dequantize_first_two_tensor_args_and_handle_tuples.inner": ["<builtin>.zip", "<builtin>.isinstance", "utils.maybe_dequantize_first_two_tensor_args_and_handle_tuples.inner", "utils.compute_cosine_similarity", "utils.compute_sqnr", "utils.compute_normalized_l2_error"], "utils.compute_sqnr": ["torch.norm", "torch.log10"], "utils.compute_cosine_similarity": ["torch.nn.functional.cosine_similarity"], "utils.compute_normalized_l2_error": ["torch.sqrt"], "torch.log10": [], "torch.nn.functional.cosine_similarity": [], "weight_utils": [], "weight_utils.mod_weight_detach": [], "weight_utils.mod_0_weight_detach": [], "weight_utils.mod_weight_bias_0": [], "weight_utils.get_lstm_weight": ["<builtin>.enumerate"], "weight_utils.get_qlstm_weight": [], "weight_utils.get_conv_mod_weight": ["<builtin>.isinstance"], "weight_utils.get_linear_mod_weight": ["<builtin>.isinstance"], "weight_utils.get_lstm_mod_weights": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.enumerate"], "weight_utils.get_conv_fun_weight": ["utils.getattr_from_fqn", "<builtin>.isinstance", "utils.return_first_non_observer_node"], "weight_utils.get_qconv_fun_weight": ["utils.getattr_from_fqn", "<builtin>.isinstance"], "weight_utils.get_linear_fun_weight": ["utils.getattr_from_fqn", "<builtin>.isinstance"], "weight_utils.get_qlinear_fun_weight": ["utils.getattr_from_fqn", "<builtin>.isinstance"], "weight_utils.get_op_to_type_to_weight_extraction_fn": [], "weight_utils.extract_weight_from_node": ["<builtin>.hasattr", "utils.getattr_from_fqn", "ns_types.NSSingleResultValuesType.WEIGHT.value", "<builtin>.type", "utils.get_target_type_str", "<builtin>.isinstance", "weight_utils.get_op_to_type_to_weight_extraction_fn", "<builtin>.str"], "ns_types.NSSingleResultValuesType.WEIGHT.value": [], "batch_matmul_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "batch_matmul_dnnlowp_op_test.DNNLowPBatchMatMulOpTest": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "batch_matmul_dnnlowp_op_test.DNNLowPBatchMatMulOpTest.test_dnnlowp_batch_matmul_int": ["<builtin>.range", "numpy.round", "numpy.transpose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "collections.namedtuple", "numpy.random.rand", "caffe2.quantization.server.dnnlowp_test_utils.avoid_vpmaddubsw_overflow_fc", "itertools.product", "caffe2.python.core.Net"], "caffe2.quantization.server.dnnlowp_test_utils.avoid_vpmaddubsw_overflow_fc": [], "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close": [], "batch_matmul_dnnlowp_op_test.DNNLowPBatchMatMulOpTest.test_dnnlowp_batch_matmul_int_constant_B": ["numpy.round", "numpy.prod", "numpy.ndindex", "caffe2.quantization.server.utils.create_int8_given_tensor_fill", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator", "numpy.zeros", "<builtin>.tuple", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.max", "collections.namedtuple", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "numpy.random.rand", "caffe2.quantization.server.dnnlowp_test_utils.avoid_vpmaddubsw_overflow_fc", "itertools.product", "caffe2.quantization.server.utils.add_quantization_param_args", "numpy.random.randint", "caffe2.python.core.Net"], "numpy.ndindex": [], "caffe2.quantization.server.utils.create_int8_given_tensor_fill": [], "caffe2.quantization.server.utils.add_quantization_param_args": [], "batch_permutation_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "batch_permutation_dnnlowp_op_test.DNNLowPBatchPermutationOpTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.settings"], "batch_permutation_dnnlowp_op_test.DNNLowPBatchPermutationOpTest.test_batch_permutation": ["numpy.testing.assert_allclose", "numpy.round", "numpy.random.shuffle", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.Net", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "batch_permutation_dnnlowp_op_test.DNNLowPBatchPermutationOpTest.test_batch_permutation.batch_permutation_ref", "caffe2.python.workspace.FetchInt8Blob", "numpy.arange"], "batch_permutation_dnnlowp_op_test.DNNLowPBatchPermutationOpTest.test_batch_permutation.batch_permutation_ref": ["numpy.array"], "channel_shuffle_dnnlowp_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "channel_shuffle_dnnlowp_op_test.DNNLowPChannelShuffleOpsTest": ["hypothesis.given", "hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from"], "channel_shuffle_dnnlowp_op_test.DNNLowPChannelShuffleOpsTest.test_channel_shuffle": ["caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_allclose", "channel_shuffle_dnnlowp_op_test.DNNLowPChannelShuffleOpsTest.test_channel_shuffle.channel_shuffle_ref", "caffe2.python.utils.NCHW2NHWC", "numpy.round", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.workspace.FetchBlob"], "channel_shuffle_dnnlowp_op_test.DNNLowPChannelShuffleOpsTest.test_channel_shuffle.channel_shuffle_ref": ["caffe2.python.utils.NCHW2NHWC", "caffe2.python.utils.NHWC2NCHW"], "channel_shuffle_dnnlowp_op_test.DNNLowPChannelShuffleOpsTest.test_channel_shuffle_fast_path": ["channel_shuffle_dnnlowp_op_test.DNNLowPChannelShuffleOpsTest.test_channel_shuffle_fast_path.channel_shuffle_ref", "caffe2.python.workspace.RunNetOnce", "numpy.testing.assert_allclose", "caffe2.python.utils.NCHW2NHWC", "numpy.round", "caffe2.python.core.Net", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "numpy.random.rand", "caffe2.python.workspace.FetchBlob"], "channel_shuffle_dnnlowp_op_test.DNNLowPChannelShuffleOpsTest.test_channel_shuffle_fast_path.channel_shuffle_ref": ["caffe2.python.utils.NCHW2NHWC", "caffe2.python.utils.NHWC2NCHW"], "compute_equalization_scale_test": [], "compute_equalization_scale_test.TestComputeEqualizationScaleOp": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.settings"], "compute_equalization_scale_test.TestComputeEqualizationScaleOp.test_compute_equalization_scale": ["numpy.random.seed", "caffe2.python.core.CreateOperator", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.testing.assert_allclose", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "compute_equalization_scale_test.TestComputeEqualizationScaleOp.test_compute_equalization_scale.ref_compute_equalization_scale"], "compute_equalization_scale_test.TestComputeEqualizationScaleOp.test_compute_equalization_scale.ref_compute_equalization_scale": ["numpy.ones", "numpy.absolute", "numpy.sqrt", "<builtin>.range"], "compute_equalization_scale_test.TestComputeEqualizationScaleOp.test_compute_equalization_scale_shape_inference": ["numpy.array", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.CreateOperator", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.workspace.InferShapesAndTypes"], "concat_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "concat_dnnlowp_op_test.DNNLowPConcatOpTest": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "concat_dnnlowp_op_test.DNNLowPConcatOpTest.test_dnnlowp_concat_int": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.Net", "collections.namedtuple", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.CreateOperator", "numpy.round"], "conv_depthwise_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "conv_depthwise_dnnlowp_op_test.DNNLowPOpConvDepthWiseTest": ["hypothesis.settings", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.strategies.just", "hypothesis.given"], "conv_depthwise_dnnlowp_op_test.DNNLowPOpConvDepthWiseTest.test_dnnlowp_depthwise_3x3_conv": ["caffe2.quantization.server.dnnlowp_test_utils.generate_conv_inputs", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.python.core.CreateOperator", "caffe2.python.core.Net", "collections.namedtuple", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.quantization.server.utils.choose_quantization_params", "caffe2.quantization.server.utils.add_quantization_param_args"], "caffe2.quantization.server.dnnlowp_test_utils.generate_conv_inputs": [], "caffe2.quantization.server.utils.choose_quantization_params": [], "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc": [], "conv_depthwise_dnnlowp_op_test.DNNLowPOpConvDepthWiseTest.test_dnnlowp_depthwise_3x3x3_conv": ["caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.python.core.CreateOperator", "caffe2.python.core.Net", "collections.namedtuple", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.quantization.server.dnnlowp_test_utils.generate_convnd_inputs", "caffe2.quantization.server.utils.choose_quantization_params", "caffe2.quantization.server.utils.add_quantization_param_args"], "caffe2.quantization.server.dnnlowp_test_utils.generate_convnd_inputs": [], "conv_dnnlowp_acc16_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "conv_dnnlowp_acc16_op_test.DNNLowPOpConvAcc16OpTest": ["hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.integers"], "conv_dnnlowp_acc16_op_test.DNNLowPOpConvAcc16OpTest.test_dnnlowp_conv_acc16_int": ["numpy.round", "caffe2.quantization.server.utils.choose_quantization_params", "numpy.random.randn", "<builtin>.len", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "hypothesis.assume", "collections.namedtuple", "caffe2.quantization.server.utils.create_int8_bias_tensor_fill", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.utils.create_int8_given_tensor_fill", "caffe2.quantization.server.utils.add_quantization_param_args", "caffe2.python.core.Net", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "numpy.random.rand"], "caffe2.quantization.server.utils.create_int8_bias_tensor_fill": [], "conv_dnnlowp_acc16_op_test.DNNLowPOpConvAcc16OpTest.test_dnnlowp_conv_acc16_outlier": ["numpy.round", "caffe2.quantization.server.utils.choose_quantization_params", "numpy.random.randn", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "hypothesis.assume", "collections.namedtuple", "caffe2.quantization.server.utils.create_int8_bias_tensor_fill", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.utils.create_int8_given_tensor_fill", "caffe2.quantization.server.utils.add_quantization_param_args", "caffe2.python.core.Net", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "numpy.random.rand"], "conv_dnnlowp_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "conv_dnnlowp_op_test.DNNLowPOpConvTest": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.settings", "hypothesis.strategies.sampled_from"], "conv_dnnlowp_op_test.DNNLowPOpConvTest.test_dnnlowp_conv_int": ["caffe2.quantization.server.utils.add_quantization_param_args", "collections.namedtuple", "<builtin>.len", "caffe2.quantization.server.utils.choose_quantization_params", "caffe2.quantization.server.dnnlowp_test_utils.generate_conv_inputs", "caffe2.quantization.server.utils.create_int8_given_tensor_fill", "hypothesis.assume", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.python.core.Net", "caffe2.quantization.server.utils.create_int8_bias_tensor_fill", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close"], "conv_dnnlowp_op_test.DNNLowPOpConvTest.test_dnnlowp_conv_relu_int": ["collections.namedtuple", "caffe2.quantization.server.dnnlowp_test_utils.generate_conv_inputs", "hypothesis.assume", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.python.core.Net", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close"], "conv_dnnlowp_op_test.DNNLowPOpConvTest._test_dnnlowp_nd_int": ["caffe2.quantization.server.utils.add_quantization_param_args", "<builtin>.len", "collections.namedtuple", "caffe2.quantization.server.dnnlowp_test_utils.generate_convnd_inputs", "caffe2.quantization.server.utils.choose_quantization_params", "caffe2.quantization.server.utils.create_int8_given_tensor_fill", "hypothesis.assume", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.python.core.Net", "caffe2.quantization.server.utils.create_int8_bias_tensor_fill", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close"], "conv_dnnlowp_op_test.DNNLowPOpConvTest.test_dnnlowp_conv3d_int": ["conv_dnnlowp_op_test.DNNLowPOpConvTest._test_dnnlowp_nd_int"], "conv_dnnlowp_op_test.DNNLowPOpConvTest.test_dnnlowp_conv1d_int": ["conv_dnnlowp_op_test.DNNLowPOpConvTest._test_dnnlowp_nd_int"], "conv_groupwise_dnnlowp_acc16_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "conv_groupwise_dnnlowp_acc16_op_test.GroupWiseDNNLowPOpConvAcc16OpTest": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.settings", "hypothesis.given"], "conv_groupwise_dnnlowp_acc16_op_test.GroupWiseDNNLowPOpConvAcc16OpTest.test_groupwise_dnnlowp_conv_acc16_int": ["caffe2.quantization.server.utils.add_quantization_param_args", "numpy.random.rand", "numpy.random.randn", "collections.namedtuple", "<builtin>.range", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.Net", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "hypothesis.assume", "numpy.round"], "conv_groupwise_dnnlowp_acc16_op_test.GroupWiseDNNLowPOpConvAcc16OpTest.test_groupwise_dnnlowp_conv_acc16_outlier": ["caffe2.quantization.server.utils.add_quantization_param_args", "caffe2.quantization.server.utils.choose_quantization_params", "numpy.random.rand", "numpy.random.randn", "collections.namedtuple", "<builtin>.range", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.Net", "caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.CreateOperator", "hypothesis.assume", "numpy.round"], "conv_groupwise_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "conv_groupwise_dnnlowp_op_test.GroupWiseDNNLowPOpConvTest": ["hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.integers"], "conv_groupwise_dnnlowp_op_test.GroupWiseDNNLowPOpConvTest.test_groupwise_dnnlowp_conv_int": ["caffe2.quantization.server.dnnlowp_test_utils.generate_conv_inputs", "hypothesis.assume", "caffe2.python.fb.hardcode_scale_zp.choose_quantization_params", "caffe2.python.core.CreateOperator", "caffe2.python.core.Net", "caffe2.quantization.server.utils.add_quantization_param_args", "collections.namedtuple", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc"], "caffe2.python.fb.hardcode_scale_zp.choose_quantization_params": [], "conv_groupwise_dnnlowp_op_test.GroupWiseDNNLowPOpConvTest.test_groupwise_dnnlowp_conv_relu_int": ["caffe2.quantization.server.dnnlowp_test_utils.generate_conv_inputs", "hypothesis.assume", "caffe2.python.core.CreateOperator", "caffe2.python.core.Net", "caffe2.quantization.server.utils.add_quantization_param_args", "collections.namedtuple", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc"], "dequantize_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "dequantize_dnnlowp_op_test.DNNLowPDequantizeOpTest": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given"], "dequantize_dnnlowp_op_test.DNNLowPDequantizeOpTest.test_dnnlowp_dequantize": ["collections.namedtuple", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "numpy.random.rand", "caffe2.python.core.CreateOperator"], "dnnlowp_test_utils": [], "dnnlowp_test_utils.check_quantized_results_close": ["<builtin>.min", "numpy.min", "<builtin>.abs", "<builtin>.max", "numpy.testing.assert_allclose", "numpy.max"], "dnnlowp_test_utils.pairwise": ["<builtin>.zip", "<builtin>.next", "itertools.tee"], "dnnlowp_test_utils.avoid_vpmaddubsw_overflow_fc": ["<builtin>.float", "<builtin>.int", "<builtin>.range", "numpy.ndindex"], "dnnlowp_test_utils.avoid_vpmaddubsw_overflow": ["<builtin>.all", "numpy.ndindex", "<builtin>.int", "<builtin>.len", "<builtin>.range", "dnnlowp_test_utils.pairwise", "<builtin>.float", "<builtin>.tuple"], "dnnlowp_test_utils.generate_convnd_inputs": ["dnnlowp_test_utils.avoid_vpmaddubsw_overflow", "caffe2.python.utils.NHWC2NCHW", "<builtin>.all", "<builtin>.slice", "numpy.random.randn", "<builtin>.len", "<builtin>.range", "numpy.round", "hypothesis.assume", "numpy.random.rand", "<builtin>.tuple"], "dnnlowp_test_utils.generate_conv_inputs": ["dnnlowp_test_utils.generate_convnd_inputs"], "dnnlowp_test_utils.run_conv_or_fc": ["collections.namedtuple", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.WorkspaceGuard", "<builtin>.int", "<builtin>.range", "caffe2.python.workspace.FetchBlob", "<builtin>.float", "caffe2.python.workspace.FeedBlob", "caffe2.quantization.server.dnnlowp_pybind11.CreateInt8QuantParamsBlob"], "caffe2.quantization.server.dnnlowp_pybind11.CreateInt8QuantParamsBlob": [], "elementwise_add_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "elementwise_add_dnnlowp_op_test.DNNLowPAddOpTest": ["hypothesis.strategies.sampled_from", "hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "elementwise_add_dnnlowp_op_test.DNNLowPAddOpTest.test_dnnlowp_elementwise_add_int": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "collections.namedtuple", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "numpy.round"], "elementwise_add_dnnlowp_op_test.DNNLowPAddOpTest.test_dnnlowp_elementwise_add_broadcast": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "collections.namedtuple", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "numpy.round"], "elementwise_add_dnnlowp_op_test.DNNLowPAddOpTest.test_dnnlowp_elementwise_add_broadcast_axis": ["numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "collections.namedtuple", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "numpy.round"], "elementwise_linear_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "elementwise_linear_dnnlowp_op_test.DNNLowPElementwiseLinearOpTest": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "elementwise_linear_dnnlowp_op_test.DNNLowPElementwiseLinearOpTest.test_dnnlowp_elementwise_linear_int": ["caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.round", "collections.namedtuple", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.random.rand"], "elementwise_mul_dnnlowp_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "elementwise_mul_dnnlowp_op_test.DNNLowPMulOpTest": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from"], "elementwise_mul_dnnlowp_op_test.DNNLowPMulOpTest.test_dnnlowp_elementwise_mul_int": ["caffe2.python.core.Net", "numpy.round", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "collections.namedtuple"], "elementwise_mul_dnnlowp_op_test.DNNLowPMulOpTest.test_dnnlowp_elementwise_mul_broadcast": ["caffe2.python.core.Net", "numpy.round", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "collections.namedtuple"], "elementwise_mul_dnnlowp_op_test.DNNLowPMulOpTest.test_dnnlowp_elementwise_mul_broadcast_axis": ["caffe2.python.core.Net", "numpy.round", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "collections.namedtuple"], "elementwise_sum_dnnlowp_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "elementwise_sum_dnnlowp_op_test.DNNLowPOpSumOpTest": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.integers"], "elementwise_sum_dnnlowp_op_test.DNNLowPOpSumOpTest.test_dnnlowp_elementwise_sum_int": ["caffe2.python.core.Net", "numpy.random.randint", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "collections.namedtuple", "<builtin>.range", "<builtin>.ord", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.chr"], "elementwise_sum_dnnlowp_op_test.DNNLowPOpSumOpTest.test_dnnlowp_elementwise_sum_int_inplace": ["caffe2.python.core.Net", "numpy.random.randint", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "collections.namedtuple", "<builtin>.range", "<builtin>.ord", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.chr"], "elementwise_sum_dnnlowp_op_test.DNNLowPOpSumOpTest.test_dnnlowp_elementwise_sum_relu_int": ["caffe2.python.core.Net", "numpy.random.randint", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "collections.namedtuple", "<builtin>.range", "<builtin>.ord", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.chr"], "elementwise_sum_dnnlowp_op_test.DNNLowPOpSumOpTest.test_dnnlowp_elementwise_sum_relu_int_inplace": ["caffe2.python.core.Net", "numpy.random.randint", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "collections.namedtuple", "<builtin>.range", "<builtin>.ord", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "<builtin>.chr"], "fully_connected_dnnlowp_acc16_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "fully_connected_dnnlowp_acc16_op_test.DNNLowPFullyConnectedAcc16OpTest": ["hypothesis.strategies.sampled_from", "hypothesis.strategies.booleans", "hypothesis.given"], "fully_connected_dnnlowp_acc16_op_test.DNNLowPFullyConnectedAcc16OpTest.test_dnnlowp_fully_connected_acc16_int": ["caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.Net", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "collections.namedtuple", "numpy.round", "numpy.random.randn"], "fully_connected_dnnlowp_acc16_op_test.DNNLowPFullyConnectedAcc16OpTest.test_dnnlowp_fully_connected_acc16_outlier": ["caffe2.quantization.server.utils.choose_quantization_params", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.Net", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "collections.namedtuple", "numpy.round", "numpy.random.randn"], "fully_connected_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "fully_connected_dnnlowp_op_test.DNNLowPFullyConnectedOpTest": ["hypothesis.strategies.integers", "hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from"], "fully_connected_dnnlowp_op_test.DNNLowPFullyConnectedOpTest.test_dnnlowp_fully_connected_int": ["numpy.random.rand", "numpy.testing.assert_equal", "caffe2.python.core.CreateOperator", "collections.namedtuple", "caffe2.quantization.server.utils.create_int8_bias_tensor_fill", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.quantization.server.dnnlowp_test_utils.avoid_vpmaddubsw_overflow_fc", "numpy.round", "<builtin>.len", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.quantization.server.utils.create_int8_given_tensor_fill", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.quantization.server.utils.choose_quantization_params", "caffe2.python.core.Net", "caffe2.quantization.server.utils.add_quantization_param_args", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual"], "fully_connected_fp16_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "fully_connected_fp16_test.mse": ["numpy.sqrt", "<builtin>.len", "numpy.matmul"], "fully_connected_fp16_test.FullyConnectedFP16Test": ["hypothesis.given", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "fully_connected_fp16_test.FullyConnectedFP16Test.test_fully_connected": ["<builtin>.print", "numpy.isclose", "numpy.ones", "collections.namedtuple", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.Net", "numpy.matmul", "numpy.outer", "fully_connected_fp16_test.mse", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.abs", "caffe2.python.core.CreateOperator"], "fully_connected_rowwise_dnnlowp_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "fully_connected_rowwise_dnnlowp_op_test.RowWiseDNNLowPFullyConnectedOpTest": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers"], "fully_connected_rowwise_dnnlowp_op_test.RowWiseDNNLowPFullyConnectedOpTest.test_rowwise_dnnlowp_fully_connected_int": ["caffe2.quantization.server.dnnlowp_test_utils.avoid_vpmaddubsw_overflow_fc", "caffe2.quantization.server.dnnlowp_test_utils.run_conv_or_fc", "caffe2.quantization.server.utils.add_quantization_param_args", "caffe2.quantization.server.utils.choose_quantization_params", "numpy.random.rand", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "numpy.random.randn", "numpy.round", "numpy.zeros", "collections.namedtuple", "caffe2.python.core.Net", "<builtin>.range"], "gather_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "gather_dnnlowp_op_test.DNNLowPGatherOpTest": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given"], "gather_dnnlowp_op_test.DNNLowPGatherOpTest.test_dnnlowp_gather": ["numpy.random.rand", "collections.namedtuple", "caffe2.python.core.Net", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.CreateOperator", "numpy.floor", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close"], "group_norm_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "group_norm_dnnlowp_op_test.DNNLowPOpGroupNormTest": ["hypothesis.given", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers", "hypothesis.strategies.booleans"], "group_norm_dnnlowp_op_test.DNNLowPOpGroupNormTest.test_dnnlowp_group_norm": ["caffe2.quantization.server.utils.choose_quantization_params", "caffe2.quantization.server.utils.create_int8_bias_tensor_fill", "caffe2.python.core.CreateOperator", "<builtin>.len", "caffe2.python.core.Net", "caffe2.quantization.server.utils.create_int8_given_tensor_fill", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "numpy.random.randn", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.utils.NCHW2NHWC", "caffe2.quantization.server.utils.add_quantization_param_args", "collections.namedtuple", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close"], "int8_gen_quant_params_min_max_test": [], "int8_gen_quant_params_min_max_test.TestInt8GenQuantParamsMinMaxOperator": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.given", "hypothesis.strategies.booleans"], "int8_gen_quant_params_min_max_test.TestInt8GenQuantParamsMinMaxOperator.test_int8_gen_quant_params_min_max_op": ["numpy.random.seed", "numpy.max", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.Net", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_pybind11.ObserveInt8QuantParamsBlob", "numpy.array", "numpy.histogram", "caffe2.python.workspace.InferShapesAndTypes", "caffe2.python.workspace.HasBlob", "numpy.random.rand", "caffe2.quantization.server.dnnlowp_pybind11.ChooseStaticQuantizationParams", "numpy.testing.assert_equal", "caffe2.python.workspace.RunNetOnce", "caffe2.quantization.server.dnnlowp_pybind11.CreateInt8QuantSchemeBlob", "numpy.round", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "numpy.min"], "caffe2.quantization.server.dnnlowp_pybind11.ChooseStaticQuantizationParams": [], "caffe2.quantization.server.dnnlowp_pybind11.CreateInt8QuantSchemeBlob": [], "caffe2.quantization.server.dnnlowp_pybind11.ObserveInt8QuantParamsBlob": [], "int8_gen_quant_params_test": [], "int8_gen_quant_params_test.TestInt8GenQuantParamsOperator": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.sampled_from"], "int8_gen_quant_params_test.TestInt8GenQuantParamsOperator.test_int8_gen_quant_params_op": ["numpy.histogram", "caffe2.python.workspace.InferShapesAndTypes", "numpy.random.rand", "caffe2.quantization.server.dnnlowp_pybind11.ChooseStaticQuantizationParams", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.HasBlob", "numpy.max", "caffe2.python.workspace.RunNetOnce", "caffe2.quantization.server.dnnlowp_pybind11.CreateInt8QuantSchemeBlob", "numpy.min", "caffe2.python.hypothesis_test_util.HypothesisTestCase.assertEqual", "caffe2.python.core.Net", "numpy.testing.assert_equal", "caffe2.quantization.server.dnnlowp_pybind11.ObserveInt8QuantParamsBlob", "numpy.random.seed", "caffe2.python.core.CreateOperator", "numpy.round"], "int8_quant_scheme_blob_fill_test": [], "int8_quant_scheme_blob_fill_test.TestInt8QuantSchemeBlobFillOperator": ["hypothesis.given"], "int8_quant_scheme_blob_fill_test.TestInt8QuantSchemeBlobFillOperator.test_int8_quant_scheme_blob_fill_op": ["caffe2.python.core.Net", "caffe2.python.core.CreateOperator", "caffe2.quantization.server.dnnlowp_pybind11.ObserveInt8QuantSchemeBlob", "caffe2.python.workspace.RunNetOnce"], "caffe2.quantization.server.dnnlowp_pybind11.ObserveInt8QuantSchemeBlob": [], "lstm_unit_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "lstm_unit_dnnlowp_op_test.DNNLowPLSTMUnitOpTest": ["hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers"], "lstm_unit_dnnlowp_op_test.DNNLowPLSTMUnitOpTest.test_dnnlowp_lstm_unit": ["caffe2.python.core.Net", "numpy.clip", "numpy.array", "numpy.random.rand", "collections.namedtuple", "numpy.round", "numpy.random.randn", "numpy.testing.assert_allclose", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.CreateOperator"], "caffe2.quantization.server.dnnlowp_pybind11.ObserveMinMaxOfOutput": [], "caffe2.quantization.server.dnnlowp_pybind11.ObserveHistogramOfOutput": [], "caffe2.quantization.server.dnnlowp_pybind11.AddOutputColumnMaxHistogramObserver": [], "pool_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "pool_dnnlowp_op_test.DNNLowPOpPoolTest": ["hypothesis.given", "hypothesis.strategies.booleans", "hypothesis.strategies.sampled_from", "hypothesis.strategies.integers"], "pool_dnnlowp_op_test.DNNLowPOpPoolTest.test_dnnlowp_max_pool": ["numpy.round", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.CreateOperator", "collections.namedtuple", "hypothesis.assume", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.Net"], "pool_dnnlowp_op_test.DNNLowPOpPoolTest.test_dnnlowp_average_pool": ["numpy.round", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.core.CreateOperator", "collections.namedtuple", "hypothesis.assume", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.Net"], "quantize_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "quantize_dnnlowp_op_test.DNNLowPQuantizeOpTest": ["hypothesis.strategies.booleans", "hypothesis.settings", "hypothesis.given", "hypothesis.strategies.integers"], "quantize_dnnlowp_op_test.DNNLowPQuantizeOpTest.test_dnnlowp_quantize": ["numpy.testing.assert_allclose", "<builtin>.int", "caffe2.python.core.CreateOperator", "caffe2.python.core.Net", "numpy.round", "<builtin>.min", "caffe2.python.workspace.RunNetOnce", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchInt8Blob", "<builtin>.max", "<builtin>.float", "caffe2.quantization.server.dnnlowp_pybind11.CreateInt8QuantParamsBlob", "numpy.random.rand", "caffe2.quantization.server.dnnlowp_pybind11.freeze_quantization_params"], "caffe2.quantization.server.dnnlowp_pybind11.freeze_quantization_params": [], "relu_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "relu_dnnlowp_op_test.DNNLowPReluOpTest": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given"], "relu_dnnlowp_op_test.DNNLowPReluOpTest.test_dnnlowp_relu": ["caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "numpy.round", "<builtin>.int", "numpy.random.rand", "collections.namedtuple", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "caffe2.python.core.Net"], "resize_nearest_3d_dnnlowp_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "resize_nearest_3d_dnnlowp_op_test.DNNLowPResizeNearest3DOpTest": ["hypothesis.settings", "hypothesis.strategies.integers", "hypothesis.strategies.just", "hypothesis.strategies.floats", "hypothesis.given"], "resize_nearest_3d_dnnlowp_op_test.DNNLowPResizeNearest3DOpTest.test_resize_nearest": ["numpy.random.rand", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNetOnce", "resize_nearest_3d_dnnlowp_op_test.DNNLowPResizeNearest3DOpTest.test_resize_nearest.resize_nearest_ref", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FetchInt8Blob", "caffe2.python.core.Net", "numpy.round", "numpy.testing.assert_allclose"], "resize_nearest_3d_dnnlowp_op_test.DNNLowPResizeNearest3DOpTest.test_resize_nearest.resize_nearest_ref": ["numpy.minimum", "numpy.arange", "numpy.meshgrid", "numpy.int32"], "resize_nearest_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "resize_nearest_dnnlowp_op_test.DNNLowPResizeNearestOpTest": ["hypothesis.given", "hypothesis.strategies.floats", "hypothesis.settings", "hypothesis.strategies.just", "hypothesis.strategies.integers"], "resize_nearest_dnnlowp_op_test.DNNLowPResizeNearestOpTest.test_resize_nearest": ["caffe2.python.core.Net", "numpy.round", "caffe2.python.workspace.FetchInt8Blob", "numpy.random.rand", "numpy.testing.assert_allclose", "caffe2.python.workspace.FeedBlob", "resize_nearest_dnnlowp_op_test.DNNLowPResizeNearestOpTest.test_resize_nearest.resize_nearest_ref", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.CreateOperator"], "resize_nearest_dnnlowp_op_test.DNNLowPResizeNearestOpTest.test_resize_nearest.resize_nearest_ref": ["numpy.arange", "numpy.minimum", "numpy.meshgrid", "numpy.int32"], "sigmoid_dnnlowp_op_test": ["caffe2.python.workspace.GlobalInit", "caffe2.python.dyndep.InitOpsLibrary"], "sigmoid_dnnlowp_op_test.DNNLowPSigmoidOpTest": ["hypothesis.strategies.booleans", "hypothesis.strategies.integers", "hypothesis.given"], "sigmoid_dnnlowp_op_test.DNNLowPSigmoidOpTest.test_dnnlowp_sigmoid": ["numpy.testing.assert_allclose", "caffe2.python.core.CreateOperator", "collections.namedtuple", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.core.Net", "numpy.random.rand", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob"], "spatial_batch_norm_dnnlowp_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "spatial_batch_norm_dnnlowp_op_test.DNNLowPOpSpatialBNTest": ["hypothesis.strategies.integers", "hypothesis.strategies.booleans", "hypothesis.given", "hypothesis.strategies.sampled_from"], "spatial_batch_norm_dnnlowp_op_test.DNNLowPOpSpatialBNTest.test_dnnlowp_spatial_bn_int": ["caffe2.python.utils.NHWC2NCHW", "caffe2.python.core.Net", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.round", "numpy.abs", "collections.namedtuple", "numpy.random.rand", "caffe2.quantization.server.dnnlowp_test_utils.check_quantized_results_close", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.quantization.server.utils.add_quantization_param_args"], "tanh_dnnlowp_op_test": ["caffe2.python.dyndep.InitOpsLibrary", "caffe2.python.workspace.GlobalInit"], "tanh_dnnlowp_op_test.DNNLowPTanhOpTest": ["hypothesis.strategies.integers", "hypothesis.settings", "hypothesis.given", "hypothesis.strategies.booleans"], "tanh_dnnlowp_op_test.DNNLowPTanhOpTest.test_dnnlowp_tanh": ["numpy.testing.assert_allclose", "caffe2.python.core.Net", "caffe2.python.core.CreateOperator", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.run", "caffe2.python.hypothesis_test_util.HypothesisTestCase.ws.create_blob", "numpy.random.rand", "collections.namedtuple"], "utils.pairwise": ["itertools.tee", "<builtin>.next", "<builtin>.zip"], "utils.blob_uses": ["<builtin>.enumerate"], "utils.fuse_first_bn": ["<builtin>.enumerate", "<builtin>.range", "<builtin>.any", "utils.blob_uses", "numpy.zeros", "<builtin>.len", "numpy.sqrt", "<builtin>.tuple", "copy.deepcopy"], "utils.fuse_bn": ["<builtin>.Exception", "<builtin>.any", "utils.fuse_first_bn"], "utils.fuse_first_scale": ["<builtin>.enumerate", "<builtin>.len", "utils.pairwise", "copy.deepcopy"], "utils.fuse_scale": ["utils.fuse_first_scale", "<builtin>.len"], "utils.fuse_first_relu": ["<builtin>.enumerate", "<builtin>.range", "<builtin>.any", "utils.blob_uses", "<builtin>.len", "copy.deepcopy"], "utils.fuse_relu": ["<builtin>.Exception", "<builtin>.any", "utils.fuse_first_relu"], "utils.last_producer": ["<builtin>.enumerate", "<builtin>.list", "<builtin>.ValueError", "<builtin>.reversed"], "utils.swap_first_concat_relu": ["<builtin>.enumerate", "utils.last_producer", "utils.pairwise", "copy.deepcopy"], "utils.swap_concat_relu": ["<builtin>.len", "utils.swap_first_concat_relu"], "utils.add_version_to_conv_bias": ["<builtin>.len", "copy.deepcopy", "collections.defaultdict", "<builtin>.str"], "utils.add_quantization_param_args_": [], "utils.choose_quantization_params": ["<builtin>.max", "caffe2.python.fb.hardcode_scale_zp.choose_quantization_params", "caffe2.python.fb.hardcode_scale_zp.QuantizationParam", "<builtin>.abs"], "caffe2.python.fb.hardcode_scale_zp.QuantizationParam": [], "utils.add_quantization_param_args": ["utils.choose_quantization_params", "utils.add_quantization_param_args_"], "utils.create_int8_given_tensor_fill": ["caffe2.python.core.CreateOperator", "numpy.maximum", "utils.add_quantization_param_args", "numpy.around", "numpy.minimum"], "numpy.around": [], "utils.create_int8_bias_tensor_fill": ["caffe2.python.core.CreateOperator", "numpy.around", "caffe2.python.fb.hardcode_scale_zp.QuantizationParam", "utils.add_quantization_param_args_"], "torch.ao.nn.sparse.quantized.linear.LinearPackedParams": [], "linear.Linear.weight": ["linear.Linear._weight_bias"], "linear.Linear.__repr__": ["torch.nn.quantized.modules.utils.hide_packed_params_repr"], "torch.nn.quantized.modules.utils.hide_packed_params_repr": [], "torch.ops.sparse.qlinear_dynamic": [], "linear.Linear._save_to_state_dict": ["<builtin>.super", "torch.tensor"], "linear.Linear._weight_bias": ["linear.LinearPackedParams._weight_bias"], "linear.Linear.bias": ["linear.Linear._weight_bias"], "linear.Linear.set_weight_bias": ["linear.LinearPackedParams.set_weight_bias"], "torch.any": [], "torch.ao.nn.sparse.quantized.utils.LinearBlockSparsePattern.block_size": [], "activation.ReLU6.forward": ["torch.ops.quantized.relu6"], "torch.ops.quantized.relu6": [], "activation.ReLU6._get_name": [], "activation.ReLU6.from_float": ["activation.ReLU6.__init__"], "torch.nn.quantized.functional.hardswish": [], "activation.Hardswish._get_name": [], "activation.Hardswish.from_float": ["<builtin>.float", "<builtin>.int", "activation.Hardswish.__init__"], "torch.nn.quantized.functional.elu": [], "activation.ELU._get_name": [], "activation.ELU.from_float": ["<builtin>.float", "activation.ELU.__init__", "<builtin>.int"], "torch.nn.LeakyReLU.register_buffer": [], "torch.ops.quantized.leaky_relu": [], "activation.LeakyReLU._get_name": [], "activation.LeakyReLU.from_float": ["<builtin>.float", "activation.LeakyReLU.__init__", "<builtin>.int"], "activation.Sigmoid.__init__": ["<builtin>.super"], "torch.ops.quantized.sigmoid": [], "activation.Sigmoid.from_float": ["activation.Sigmoid.__init__", "<builtin>.float", "<builtin>.int"], "batchnorm.BatchNorm2d.__init__": ["<builtin>.super"], "batchnorm.BatchNorm2d.forward": ["torch.ops.quantized.batch_norm2d"], "batchnorm.BatchNorm2d._get_name": [], "batchnorm.BatchNorm2d.from_float": ["batchnorm.BatchNorm2d.__init__", "<builtin>.int", "<builtin>.type", "<builtin>.float"], "batchnorm.BatchNorm3d.__init__": ["<builtin>.super"], "batchnorm.BatchNorm3d.forward": ["torch.ops.quantized.batch_norm3d"], "torch.ops.quantized.batch_norm3d": [], "batchnorm.BatchNorm3d._get_name": [], "batchnorm.BatchNorm3d.from_float": ["batchnorm.BatchNorm3d.__init__", "<builtin>.int", "<builtin>.type", "<builtin>.float"], "bn_relu": [], "bn_relu.BNReLU2d.__init__": ["<builtin>.super"], "bn_relu.BNReLU2d.forward": ["<builtin>.ValueError", "<builtin>.len", "torch.ops.quantized.batch_norm2d_relu"], "torch.ops.quantized.batch_norm2d_relu": [], "bn_relu.BNReLU2d._get_name": [], "bn_relu.BNReLU2d.from_float": ["<builtin>.super"], "bn_relu.BNReLU3d.__init__": ["<builtin>.super"], "bn_relu.BNReLU3d.forward": ["<builtin>.ValueError", "<builtin>.len", "torch.ops.quantized.batch_norm3d_relu"], "torch.ops.quantized.batch_norm3d_relu": [], "bn_relu.BNReLU3d._get_name": [], "bn_relu.BNReLU3d.from_float": ["<builtin>.super"], "conv._reverse_repeat_padding": ["<builtin>.range", "<builtin>.len"], "conv._ConvNd._init": ["conv._ConvNd.set_weight_bias", "<builtin>.super", "<builtin>.ValueError", "<builtin>.list", "torch._empty_affine_quantized", "torch.zeros"], "conv._ConvNd.set_weight_bias": [], "conv._ConvNd.bias": [], "conv._ConvNd._weight_bias": [], "conv._ConvNd._save_to_state_dict": ["torch.tensor", "conv._ConvNd._weight_bias", "<builtin>.super"], "conv._ConvNd": ["torch.jit.export"], "conv._ConvNd.__getstate__": ["conv._ConvNd._weight_bias"], "conv._ConvNd._load_from_state_dict": ["<builtin>.super", "conv._ConvNd.set_weight_bias", "<builtin>.int", "<builtin>.float"], "conv._ConvNd.__deepcopy__": ["torch.nn.Module.__init__", "<builtin>.type", "conv._ConvNd.__getstate__"], "conv._ConvNd.__copy__": ["conv._ConvNd.__deepcopy__"], "conv._ConvNd.get_qconv": ["torch.nn.quantized.modules.utils._quantize_weight", "conv._ConvNd.__init__", "<builtin>.int", "<builtin>.float"], "conv._ConvNd.from_float": ["conv._ConvNd.get_qconv", "<builtin>.type", "torch.nn.utils.fuse_conv_bn_weights", "<builtin>.hasattr", "<builtin>.str"], "torch.nn.utils.fuse_conv_bn_weights": [], "conv.Conv1d._get_name": [], "conv.Conv1d.set_weight_bias": ["torch.ops.quantized.conv1d_prepack", "torch.nn.modules.utils._pair"], "conv.Conv1d._weight_bias": ["torch.ops.quantized.conv1d_unpack"], "torch.ops.quantized.conv1d_unpack": [], "conv.Conv1d.weight": ["conv.Conv1d._weight_bias"], "conv.Conv1d.bias": ["conv.Conv1d._weight_bias"], "torch._ops.ops.quantized.conv1d": [], "conv.Conv1d.from_float": ["conv._ConvNd.from_float", "conv._ConvTransposeNd.from_float"], "conv._ConvTransposeNd.from_float": ["torch.nn.quantized.modules.utils._quantize_weight", "<builtin>.type", "<builtin>.int", "<builtin>.hasattr", "conv._ConvTransposeNd.__init__", "torch.nn.Module.activation_post_process.calculate_qparams", "torch.nn.Module.qconfig.weight", "<builtin>.float"], "conv.Conv2d._get_name": [], "conv.Conv2d.set_weight_bias": ["torch.ops.quantized.conv2d_prepack", "torch.nn.modules.utils._pair"], "conv.Conv2d._weight_bias": [], "conv.Conv2d.weight": ["conv.Conv2d._weight_bias"], "conv.Conv2d.bias": ["conv.Conv2d._weight_bias"], "torch._ops.ops.quantized.conv2d": [], "conv.Conv3d._get_name": [], "conv.Conv3d.set_weight_bias": ["torch.ops.quantized.conv3d_prepack", "torch.nn.modules.utils._triple"], "conv.Conv3d._weight_bias": [], "conv.Conv3d.weight": ["conv.Conv3d._weight_bias"], "conv.Conv3d.bias": ["conv.Conv3d._weight_bias"], "torch._ops.ops.quantized.conv3d": [], "conv._ConvTransposeNd._input_padding": ["<builtin>.range", "torch.jit.annotate", "<builtin>.len"], "torch.nn.Module.qconfig.weight": [], "torch.nn.Module.activation_post_process.calculate_qparams": [], "conv.ConvTranspose1d._get_name": [], "conv.ConvTranspose1d.set_weight_bias": ["torch.ops.quantized.conv_transpose1d_prepack"], "torch.ops.quantized.conv_transpose1d_prepack": [], "conv.ConvTranspose1d._weight_bias": ["torch.ops.quantized.conv_transpose1d_unpack"], "torch.ops.quantized.conv_transpose1d_unpack": [], "conv.ConvTranspose1d.weight": ["conv.ConvTranspose1d._weight_bias"], "conv.ConvTranspose1d.bias": ["conv.ConvTranspose1d._weight_bias"], "torch.ops.quantized.conv_transpose1d": [], "conv.ConvTranspose2d._get_name": [], "conv.ConvTranspose2d.set_weight_bias": ["torch.ops.quantized.conv_transpose2d_prepack"], "torch.ops.quantized.conv_transpose2d_prepack": [], "conv.ConvTranspose2d._weight_bias": ["torch.ops.quantized.conv2d_unpack"], "torch.ops.quantized.conv2d_unpack": [], "conv.ConvTranspose2d.weight": ["conv.ConvTranspose2d._weight_bias"], "conv.ConvTranspose2d.bias": ["conv.ConvTranspose2d._weight_bias"], "torch._ops.ops.quantized.conv_transpose2d": [], "conv.ConvTranspose3d._get_name": [], "conv.ConvTranspose3d.set_weight_bias": ["torch.ops.quantized.conv_transpose3d_prepack"], "torch.ops.quantized.conv_transpose3d_prepack": [], "conv.ConvTranspose3d._weight_bias": ["torch.ops.quantized.conv3d_unpack"], "torch.ops.quantized.conv3d_unpack": [], "conv.ConvTranspose3d.weight": ["conv.ConvTranspose3d._weight_bias"], "conv.ConvTranspose3d.bias": ["conv.ConvTranspose3d._weight_bias"], "torch._ops.ops.quantized.conv_transpose3d": [], "conv_relu": [], "conv_relu.ConvReLU1d.__init__": ["<builtin>.super"], "conv_relu.ConvReLU1d.forward": ["<builtin>.len", "torch.ops.quantized.conv1d_relu", "torch.nn.quantized.modules.conv._reverse_repeat_padding", "<builtin>.ValueError", "torch.nn.functional.pad", "torch.nn.quantized._reference.Conv1d._qweight.dequantize", "torch.nn.functional.relu", "torch.nn.functional.conv1d", "torch.quantize_per_tensor"], "torch.nn.quantized.modules.conv._reverse_repeat_padding": [], "torch.ops.quantized.conv1d_relu": [], "conv_relu.ConvReLU1d._get_name": [], "conv_relu.ConvReLU1d.from_float": ["torch.nn.utils.fuse_conv_bn_weights", "<builtin>.super", "<builtin>.type"], "conv_relu.ConvReLU2d.__init__": ["<builtin>.super"], "conv_relu.ConvReLU2d.forward": ["<builtin>.len", "torch.ops.quantized.conv2d_relu", "torch.nn.quantized.modules.conv._reverse_repeat_padding", "<builtin>.ValueError", "torch.nn.functional.pad", "torch.nn.functional.relu", "torch.quantize_per_tensor", "torch.nn.functional.conv2d", "torch.nn.quantized._reference.Conv2d._qweight.dequantize"], "torch.ops.quantized.conv2d_relu": [], "conv_relu.ConvReLU2d._get_name": [], "conv_relu.ConvReLU2d.from_float": ["torch.nn.utils.fuse_conv_bn_weights", "<builtin>.super", "<builtin>.type"], "conv_relu.ConvReLU3d.__init__": ["<builtin>.super"], "conv_relu.ConvReLU3d.forward": ["torch.ops.quantized.conv3d_relu", "<builtin>.len", "torch.nn.quantized.modules.conv._reverse_repeat_padding", "<builtin>.ValueError", "torch.nn.functional.pad", "torch.nn.functional.conv3d", "torch.nn.functional.relu", "torch.nn.quantized._reference.Conv3d._qweight.dequantize", "torch.quantize_per_tensor"], "torch.ops.quantized.conv3d_relu": [], "conv_relu.ConvReLU3d._get_name": [], "conv_relu.ConvReLU3d.from_float": ["torch.nn.utils.fuse_conv_bn_weights", "<builtin>.super", "<builtin>.type"], "embedding_ops": [], "embedding_ops.EmbeddingPackedParams.__init__": ["<builtin>.NotImplementedError", "<builtin>.super", "torch.ones", "torch._empty_per_channel_affine_quantized", "embedding_ops.EmbeddingPackedParams.set_weight", "torch.zeros"], "embedding_ops.EmbeddingPackedParams.set_weight": ["<builtin>.NotImplementedError", "torch.ops.quantized.embedding_bag_prepack"], "embedding_ops.EmbeddingPackedParams": ["torch.jit.export"], "torch.ops.quantized.embedding_bag_prepack": [], "embedding_ops.EmbeddingPackedParams._weight": ["<builtin>.NotImplementedError", "torch.ops.quantized.embedding_bag_unpack"], "torch.ops.quantized.embedding_bag_unpack": [], "embedding_ops.EmbeddingPackedParams.forward": [], "embedding_ops.EmbeddingPackedParams._save_to_state_dict": ["<builtin>.super", "embedding_ops.EmbeddingPackedParams._weight"], "embedding_ops.EmbeddingPackedParams._load_from_state_dict": ["embedding_ops.EmbeddingPackedParams.set_weight", "<builtin>.super"], "embedding_ops.EmbeddingPackedParams.__repr__": ["embedding_ops.EmbeddingPackedParams._weight"], "embedding_ops.Embedding.__init__": ["<builtin>.list", "<builtin>.super", "torch.ones", "torch._empty_per_channel_affine_quantized", "embedding_ops.EmbeddingPackedParams.set_weight", "embedding_ops.EmbeddingPackedParams.__init__", "torch.zeros"], "embedding_ops.Embedding.forward": ["torch.ops.quantized.embedding_byte"], "torch.ops.quantized.embedding_byte": [], "embedding_ops.Embedding._get_name": [], "embedding_ops.Embedding.__repr__": ["torch.nn.quantized.modules.utils.hide_packed_params_repr"], "embedding_ops.Embedding.extra_repr": ["embedding_ops.Embedding.weight"], "embedding_ops.Embedding.weight": ["embedding_ops.EmbeddingPackedParams._weight"], "embedding_ops.Embedding.set_weight": ["embedding_ops.EmbeddingPackedParams.set_weight"], "embedding_ops.Embedding.from_float": ["torch.quantization.float_qparams_weight_only_qconfig.weight", "<builtin>.type", "embedding_ops.Embedding.__init__", "torch.nn.quantized.modules.utils._quantize_weight", "embedding_ops.Embedding.set_weight", "<builtin>.hasattr"], "torch.quantization.float_qparams_weight_only_qconfig.weight": [], "embedding_ops.EmbeddingBag.__init__": ["<builtin>.super"], "embedding_ops.EmbeddingBag.forward": ["torch.ops.quantized.embedding_bag_4bit", "torch.ops.quantized.embedding_bag_byte"], "torch.ops.quantized.embedding_bag_4bit": [], "torch.ops.quantized.embedding_bag_byte": [], "embedding_ops.EmbeddingBag._get_name": [], "embedding_ops.EmbeddingBag.from_float": ["embedding_ops.EmbeddingBag.__init__", "<builtin>.type", "torch.quantization.qconfig.float_qparams_weight_only_qconfig.weight", "torch.nn.quantized.modules.utils._quantize_weight", "embedding_ops.Embedding.set_weight", "<builtin>.hasattr"], "torch.quantization.qconfig.float_qparams_weight_only_qconfig.weight": [], "functional_modules": [], "functional_modules.FloatFunctional.__init__": ["<builtin>.super", "torch.nn.Identity"], "functional_modules.FloatFunctional.forward": ["<builtin>.RuntimeError"], "functional_modules.FloatFunctional.add": ["torch.add"], "functional_modules.FloatFunctional.add_scalar": ["torch.add"], "functional_modules.FloatFunctional.mul": ["torch.mul"], "functional_modules.FloatFunctional.mul_scalar": ["torch.mul"], "functional_modules.FloatFunctional.cat": ["torch.cat"], "functional_modules.FloatFunctional.add_relu": ["torch.nn.functional.relu", "torch.add"], "functional_modules.FXFloatFunctional.forward": ["<builtin>.RuntimeError"], "functional_modules.FXFloatFunctional.add": ["torch.add"], "functional_modules.FXFloatFunctional.add_scalar": ["torch.add"], "functional_modules.FXFloatFunctional.mul": ["torch.mul"], "functional_modules.FXFloatFunctional.mul_scalar": ["torch.mul"], "functional_modules.FXFloatFunctional.cat": ["torch.cat"], "functional_modules.FXFloatFunctional.add_relu": ["torch.nn.functional.relu", "torch.add"], "functional_modules.QFunctional.__init__": ["<builtin>.super", "torch.nn.Identity"], "functional_modules.QFunctional._save_to_state_dict": ["<builtin>.super", "torch.tensor"], "functional_modules.QFunctional._load_from_state_dict": ["<builtin>.super", "<builtin>.float", "<builtin>.int"], "functional_modules.QFunctional._get_name": [], "functional_modules.QFunctional.extra_repr": [], "functional_modules.QFunctional.forward": ["<builtin>.RuntimeError"], "functional_modules.QFunctional.add": ["torch._ops.ops.quantized.add"], "torch._ops.ops.quantized.add": [], "functional_modules.QFunctional.add_scalar": ["torch._ops.ops.quantized.add_scalar"], "torch._ops.ops.quantized.add_scalar": [], "functional_modules.QFunctional.mul": ["torch._ops.ops.quantized.mul"], "torch._ops.ops.quantized.mul": [], "functional_modules.QFunctional.mul_scalar": ["torch._ops.ops.quantized.mul_scalar"], "torch._ops.ops.quantized.mul_scalar": [], "functional_modules.QFunctional.cat": ["torch._ops.ops.quantized.cat"], "torch._ops.ops.quantized.cat": [], "functional_modules.QFunctional.add_relu": ["torch._ops.ops.quantized.add_relu"], "torch._ops.ops.quantized.add_relu": [], "functional_modules.QFunctional.from_float": ["<builtin>.type", "<builtin>.float", "functional_modules.QFunctional.__init__", "<builtin>.int"], "linear.LinearPackedParams.__init__": ["linear.LinearPackedParams.set_weight_bias", "<builtin>.super", "torch._empty_affine_quantized", "torch.zeros", "<builtin>.NotImplementedError"], "linear.LinearPackedParams.set_weight_bias": ["torch.ops.quantized.linear_prepack_fp16", "torch.ops.quantized.linear_prepack", "<builtin>.RuntimeError", "torch.ops.sparse.qlinear_prepack"], "linear.LinearPackedParams": ["torch.jit.export"], "linear.LinearPackedParams._weight_bias": ["torch.ops.quantized.linear_unpack", "torch.ops.quantized.linear_unpack_fp16", "<builtin>.RuntimeError"], "torch.ops.quantized.linear_unpack": [], "linear.LinearPackedParams.forward": [], "linear.LinearPackedParams._save_to_state_dict": ["<builtin>.super", "linear.LinearPackedParams._weight_bias"], "linear.LinearPackedParams._load_from_state_dict": ["linear.LinearPackedParams.set_weight_bias", "<builtin>.super"], "linear.LinearPackedParams.__getstate__": ["linear.LinearPackedParams._weight_bias"], "linear.LinearPackedParams.__setstate__": ["linear.LinearPackedParams.set_weight_bias"], "linear.LinearPackedParams.__repr__": ["linear.LinearPackedParams._weight_bias"], "torch.ops.quantized.linear_relu": [], "linear_relu.LinearReLU._get_name": [], "torch.nn.LayerNorm.register_buffer": [], "normalization.LayerNorm._get_name": [], "normalization.LayerNorm.from_float": ["<builtin>.float", "<builtin>.int", "normalization.LayerNorm.__init__"], "torch.nn.GroupNorm.register_buffer": [], "normalization.GroupNorm._get_name": [], "normalization.GroupNorm.from_float": ["<builtin>.float", "<builtin>.int", "normalization.GroupNorm.__init__"], "normalization.InstanceNorm1d.__init__": ["torch.tensor", "<builtin>.super", "torch.nn.InstanceNorm1d.register_buffer"], "torch.nn.InstanceNorm1d.register_buffer": [], "normalization.InstanceNorm1d.forward": ["torch.ops.quantized.instance_norm"], "normalization.InstanceNorm1d._get_name": [], "normalization.InstanceNorm1d.from_float": ["<builtin>.float", "<builtin>.int", "normalization.InstanceNorm1d.__init__"], "normalization.InstanceNorm2d.__init__": ["torch.tensor", "<builtin>.super", "torch.nn.InstanceNorm2d.register_buffer"], "torch.nn.InstanceNorm2d.register_buffer": [], "normalization.InstanceNorm2d.forward": ["torch.ops.quantized.instance_norm"], "normalization.InstanceNorm2d._get_name": [], "normalization.InstanceNorm2d.from_float": ["<builtin>.float", "<builtin>.int", "normalization.InstanceNorm2d.__init__"], "normalization.InstanceNorm3d.__init__": ["torch.tensor", "<builtin>.super", "torch.nn.InstanceNorm3d.register_buffer"], "torch.nn.InstanceNorm3d.register_buffer": [], "normalization.InstanceNorm3d.forward": ["torch.ops.quantized.instance_norm"], "normalization.InstanceNorm3d._get_name": [], "normalization.InstanceNorm3d.from_float": ["<builtin>.float", "<builtin>.int", "normalization.InstanceNorm3d.__init__"], "utils._quantize_weight": ["torch.quantize_per_channel", "<builtin>.int", "torch.quantize_per_tensor", "<builtin>.float", "<builtin>.ValueError"], "utils._ntuple_from_first": [], "utils._ntuple_from_first.parse": ["<builtin>.len", "<builtin>.isinstance", "itertools.repeat", "<builtin>.tuple"], "utils.hide_packed_params_repr": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.repr", "torch.nn.modules.module._addindent"], "parameter_server_test": [], "parameter_server_test.timed_log": ["datetime.datetime.now", "<builtin>.print"], "parameter_server_test.BatchUpdateParameterServer.__init__": ["torch.optim.SGD", "torch.futures.Future", "threading.Lock", "torch.zeros_like", "torch.nn.Linear"], "parameter_server_test.BatchUpdateParameterServer.get_model": [], "parameter_server_test.BatchUpdateParameterServer": ["torch.distributed.rpc.functions.async_execution"], "parameter_server_test.BatchUpdateParameterServer.update_and_fetch_model": ["<builtin>.zip", "parameter_server_test.timed_log", "torch.futures.Future"], "parameter_server_test.Trainer.__init__": ["torch.nn.L1Loss"], "torch.nn.L1Loss": [], "parameter_server_test.Trainer.get_next_batch": ["<builtin>.range", "torch.randn", "torch.zeros"], "parameter_server_test.Trainer.train": ["parameter_server_test.Trainer.get_next_batch", "parameter_server_test.timed_log", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.get_worker_info"], "parameter_server_test.run_trainer": ["parameter_server_test.Trainer.train", "parameter_server_test.Trainer.__init__"], "parameter_server_test.run_ps": ["torch.distributed.rpc.RRef", "time.perf_counter", "torch.distributed.rpc.rpc_async", "parameter_server_test.BatchUpdateParameterServer.__init__", "torch.futures.wait_all", "<builtin>.len", "parameter_server_test.timed_log"], "time.perf_counter": [], "parameter_server_test.ParameterServerTest": ["torch.testing._internal.dist_utils.dist_init"], "parameter_server_test.ParameterServerTest.test_batch_updating_parameter_server": ["parameter_server_test.run_ps", "<builtin>.range", "torch.distributed.rpc.shutdown", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.init_rpc"], "reinforcement_learning_rpc_test": [], "reinforcement_learning_rpc_test._call_method": [], "reinforcement_learning_rpc_test._remote_method": ["torch.distributed.rpc.rpc_sync", "<builtin>.list"], "reinforcement_learning_rpc_test.Policy.__init__": ["torch.nn.Dropout", "<builtin>.super", "torch.nn.Linear"], "reinforcement_learning_rpc_test.Policy.forward": ["torch.nn.functional.softmax", "torch.nn.functional.relu"], "reinforcement_learning_rpc_test.DummyEnv.__init__": [], "reinforcement_learning_rpc_test.DummyEnv.seed": ["torch.manual_seed"], "reinforcement_learning_rpc_test.DummyEnv.reset": ["torch.randn"], "reinforcement_learning_rpc_test.DummyEnv.step": ["torch.rand", "torch.randn"], "reinforcement_learning_rpc_test.Observer.__init__": ["reinforcement_learning_rpc_test.DummyEnv.seed", "torch.distributed.rpc.get_worker_info", "reinforcement_learning_rpc_test.DummyEnv.__init__"], "reinforcement_learning_rpc_test.Observer.run_episode": ["reinforcement_learning_rpc_test.DummyEnv.step", "reinforcement_learning_rpc_test.DummyEnv.reset", "reinforcement_learning_rpc_test._remote_method", "<builtin>.range"], "reinforcement_learning_rpc_test.Agent.__init__": ["torch.distributed.rpc.remote", "numpy.finfo", "reinforcement_learning_rpc_test.DummyEnv.__init__", "torch.distributed.rpc.get_worker_info", "torch.optim.Adam", "torch.distributed.rpc.RRef", "torch.nn.Module.parameters", "torch.testing._internal.dist_utils.worker_name", "reinforcement_learning_rpc_test.Policy.__init__", "<builtin>.range"], "reinforcement_learning_rpc_test.Agent.select_action": ["reinforcement_learning_rpc_test.Policy.__init__", "torch.distributions.Categorical"], "torch.distributions.Categorical": [], "reinforcement_learning_rpc_test.Agent.report_reward": [], "reinforcement_learning_rpc_test.Agent.run_episode": ["torch.distributed.rpc.rpc_async"], "reinforcement_learning_rpc_test.Agent.finish_episode": ["<builtin>.sum", "<builtin>.min", "torch.cat", "torch.tensor", "<builtin>.zip"], "reinforcement_learning_rpc_test.run_agent": ["reinforcement_learning_rpc_test.Agent.finish_episode", "<builtin>.print", "reinforcement_learning_rpc_test.Agent.run_episode", "itertools.count"], "reinforcement_learning_rpc_test.ReinforcementLearningRpcTest": ["torch.testing._internal.dist_utils.dist_init"], "reinforcement_learning_rpc_test.ReinforcementLearningRpcTest.test_rl_rpc": ["reinforcement_learning_rpc_test.run_agent", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertGreater", "<builtin>.int", "torch.distributed.rpc.shutdown", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.init_rpc", "reinforcement_learning_rpc_test.Agent.__init__"], "dist_autograd_test.local_add": ["torch.add"], "dist_autograd_test.remote_add": ["torch.distributed.rpc.rpc_async"], "dist_autograd_test.fork_add": ["torch.jit._fork", "torch.jit._wait"], "dist_autograd_test.JitDistAutogradTest": ["torch.testing._internal.dist_utils.dist_init"], "dist_autograd_test.JitDistAutogradTest.test_get_gradients": ["torch.ones", "<builtin>.len", "torch.distributed.autograd.context", "torch.rand", "torch.distributed.autograd.backward", "dist_autograd_test.JitDistAutogradTest.test_get_gradients.dist_get_gradients", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.str", "torch.testing.FileCheck", "torch.add", "torch.jit.script", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn"], "dist_autograd_test.JitDistAutogradTest.test_get_gradients.dist_get_gradients": ["torch.distributed.autograd.get_gradients"], "torch.testing.FileCheck": [], "dist_autograd_test.JitDistAutogradTest.test_dist_backward": ["torch.distributed.autograd.context", "torch.rand", "<builtin>.str", "torch.testing.FileCheck", "dist_autograd_test.JitDistAutogradTest.test_dist_backward.dist_backward_script", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.jit.script"], "dist_autograd_test.JitDistAutogradTest.test_dist_backward.dist_backward_script": ["torch.distributed.autograd.backward"], "dist_autograd_test.JitDistAutogradTest.test_jit_fork_within_context": ["<builtin>.len", "torch.distributed.autograd.backward", "torch.distributed.autograd.context", "torch.rand", "torch.distributed.autograd.get_gradients", "torch.testing._internal.dist_utils.worker_name", "dist_autograd_test.fork_add", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertIn"], "dist_autograd_test.JitDistAutogradTest.test_restore_context_after_swtich_to_jit_thread": ["torch.ones", "torch.distributed.autograd.context", "torch.distributed.autograd.backward", "torch.distributed.autograd.get_gradients", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "dist_autograd_test.JitDistAutogradTest.test_restore_context_after_swtich_to_jit_thread.forward_script", "torch.testing._internal.dist_utils.worker_name", "torch.jit.script"], "dist_autograd_test.JitDistAutogradTest.test_restore_context_after_swtich_to_jit_thread.forward_script": ["torch.distributed.rpc.rpc_async"], "rpc_test.rref_isinstance": ["<builtin>.isinstance"], "rpc_test.sleep": ["time.sleep"], "rpc_test.rref_local_value": [], "rpc_test.list_create": [], "rpc_test.rref_list_mutate": [], "rpc_test.return_value": [], "rpc_test.RRefAPITest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test.RRefAPITest.test_rref_is_owner": ["rpc_test.RRefAPITest.test_rref_is_owner.rref_tensor_is_owner", "rpc_test.rpc_return_rref", "torch.jit.script", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.RRefAPITest.test_rref_is_owner.rref_tensor_is_owner": [], "rpc_test.RRefAPITest.test_rref_local_value": ["torch.add", "rpc_test.rref_local_value", "rpc_test.rpc_return_rref", "torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "rpc_test.RRefAPITest.test_local_rref_local_value": ["rpc_test.rref_local_value", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.RRefAPITest._create_rref": ["torch.zeros", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.RRefAPITest.test_user_rrefs_confirmed": ["rpc_test.RRefAPITest._create_rref", "torch.distributed.rpc.rpc_sync", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.RRefAPITest.test_user_rrefs_confirmed_remote": ["rpc_test.RRefAPITest._create_rref", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.RRefAPITest.test_rref_list_mutate": ["torch.distributed.rpc.rpc_sync", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.no_arg": [], "rpc_test.one_arg": [], "rpc_test.script_add_ones": ["torch.add", "torch.ones"], "rpc_test.script_add_ones_with_record_function": ["torch.add", "torch.ones", "torch.autograd.profiler.record_function"], "rpc_test.record_function_on_caller_rpc_async": ["torch.distributed.rpc.rpc_async", "torch.autograd.profiler.record_function", "torch.ones"], "rpc_test.script_fork_wait_udf": ["torch.jit._wait", "torch.jit._fork"], "rpc_test.rref_to_here": [], "rpc_test.return_rref": [], "rpc_test.script_raise_func": ["<builtin>.ValueError"], "rpc_test.script_fork_wait_throw": ["torch.jit._wait", "torch.jit._fork"], "rpc_test.call_rpc_with_profiling": ["torch.tensor", "torch.ops.profiler._call_end_callbacks_on_jit_fut", "torch.distributed.rpc.rpc_async"], "rpc_test.call_rpc_torchscript_with_record_function": ["torch.tensor", "torch.distributed.rpc.rpc_async"], "rpc_test.call_fork_with_profiling": ["torch.tensor", "torch.ops.profiler._call_end_callbacks_on_jit_fut", "torch.jit._fork"], "rpc_test.MyScriptModuleWithRRefs.__init__": ["rpc_test.rpc_return_rref", "<builtin>.range", "<builtin>.super"], "rpc_test.MyScriptModuleWithRRefs": ["torch.jit.script_method"], "rpc_test.MyScriptModuleWithRRefs.forward": ["torch.ones"], "rpc_test.rref_python_annotation": [], "rpc_test.rref_script_annotation": ["rpc_test.rref_python_annotation"], "rpc_test.RRefTypingTest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test.RRefTypingTest.test_rref_as_arg_and_return": ["torch.ones", "torch.testing._internal.dist_utils.worker_name", "rpc_test.one_arg", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.remote"], "rpc_test.RRefTypingTest.test_my_script_module_with_rrefs": ["rpc_test.MyScriptModuleWithRRefs.__init__", "torch.ones", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.RRefTypingTest.test_rref_python_annotation": ["rpc_test.rpc_return_rref", "torch.ones", "rpc_test.rref_script_annotation", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.FutureTypingTest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test.FutureTypingTest.test_future_passed_between_python_and_jit": ["torch.distributed.rpc.rpc_async", "rpc_test.FutureTypingTest.test_future_passed_between_python_and_jit.future_return_to_python", "torch.tensor", "torch.jit.script", "rpc_test.FutureTypingTest.test_future_passed_between_python_and_jit.future_wait_in_script", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.FutureTypingTest.test_future_passed_between_python_and_jit.future_wait_in_script": [], "rpc_test.FutureTypingTest.test_future_passed_between_python_and_jit.future_return_to_python": ["torch.distributed.rpc.rpc_async"], "rpc_test.FutureTypingTest.test_future_python_annotation": ["torch.add", "torch.jit.ignore", "torch.jit.script", "torch.ones", "torch.testing._internal.dist_utils.worker_name", "rpc_test.FutureTypingTest.test_future_python_annotation.script_use_future"], "rpc_test.FutureTypingTest.test_future_python_annotation.python_return_future": ["torch.distributed.rpc.rpc_async"], "rpc_test.FutureTypingTest.test_future_python_annotation.script_use_future": ["rpc_test.FutureTypingTest.test_future_python_annotation.python_return_future"], "rpc_test.MyScriptClass.__init__": [], "rpc_test.MyScriptClass.get_value": [], "rpc_test.MyModuleInterface.forward": [], "rpc_test.MyScriptModule.__init__": ["torch.ones", "<builtin>.super"], "rpc_test.MyScriptModule": ["torch.jit.script_method"], "rpc_test.MyScriptModule.forward": [], "rpc_test.MyScriptModule.custom_func": [], "rpc_test.owner_create_rref_my_script_class": ["torch.distributed.rpc.RRef", "rpc_test.MyScriptClass.__init__"], "rpc_test.owner_create_rref_my_script_module": ["torch.distributed.rpc.RRef", "rpc_test.MyScriptModule.__init__"], "rpc_test.script_rref_get_value_my_script_class": [], "rpc_test.script_rref_run_forward_my_script_module": [], "rpc_test.LocalRRefTest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test.LocalRRefTest.test_create_local_script_class_rref_in_py": ["torch.distributed.rpc.RRef", "rpc_test.MyScriptClass.__init__"], "rpc_test.LocalRRefTest.test_create_local_script_module_rref_in_py": ["torch.distributed.rpc.RRef", "rpc_test.MyScriptModule.__init__", "torch.ones"], "rpc_test.LocalRRefTest.test_return_local_script_class_rref_in_py_and_use_in_script": ["torch.distributed.rpc.rpc_sync", "torch.jit.script", "rpc_test.LocalRRefTest.test_return_local_script_class_rref_in_py_and_use_in_script.use_rref_on_owner", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.LocalRRefTest.test_return_local_script_class_rref_in_py_and_use_in_script.use_rref_on_owner": ["torch.distributed.rpc.rpc_async"], "rpc_test.LocalRRefTest.test_return_local_script_module_rref_in_py_and_use_in_script": ["rpc_test.LocalRRefTest.test_return_local_script_module_rref_in_py_and_use_in_script.use_rref_on_owner", "torch.jit.script", "torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync"], "rpc_test.LocalRRefTest.test_return_local_script_module_rref_in_py_and_use_in_script.use_rref_on_owner": ["torch.distributed.rpc.rpc_async"], "rpc_test.python_function": [], "rpc_test.two_args_two_kwargs": [], "rpc_test.assorted_types_args_kwargs": [], "rpc_test.raise_script": ["<builtin>.RuntimeError"], "rpc_test.script_rpc_async_call": ["torch.distributed.rpc.rpc_async"], "rpc_test.script_rpc_sync_call": ["torch.distributed.rpc.rpc_sync"], "rpc_test.script_rpc_remote_call": ["torch.distributed.rpc.remote"], "rpc_test.JitRpcOpTest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test.JitRpcOpTest.test_all_kwargs_are_populated_by_defaults": ["torch.tensor", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcOpTest.test_some_kwargs_are_populated_by_defaults": ["torch.tensor", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcOpTest.test_no_kwargs_are_populated_by_defaults": ["torch.tensor", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcOpTest.test_args_and_kwargs_contain_different_types": ["torch.tensor", "torch.jit.script", "torch.testing._internal.dist_utils.worker_name", "rpc_test.JitRpcOpTest.test_args_and_kwargs_contain_different_types.script_rpc_async_call_with_assorted_types"], "rpc_test.JitRpcOpTest.test_args_and_kwargs_contain_different_types.script_rpc_async_call_with_assorted_types": ["torch.tensor", "torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcOpTest.test_kwargs_not_passed": ["rpc_test.JitRpcOpTest.test_kwargs_not_passed.script_rpc_async_call_without_kwargs_passed", "torch.jit.script", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcOpTest.test_kwargs_not_passed.script_rpc_async_call_without_kwargs_passed": ["torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcOpTest.test_args_kwargs_are_neither_passed": ["rpc_test.JitRpcOpTest.test_args_kwargs_are_neither_passed.script_rpc_async_call_without_args_kwargs_passed", "torch.jit.script", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcOpTest.test_args_kwargs_are_neither_passed.script_rpc_async_call_without_args_kwargs_passed": ["torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcOpTest.test_less_than_needed_args_are_specified": ["torch.jit.script", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcOpTest.test_less_than_needed_args_are_specified.script_rpc_async_call_with_less_args": ["torch.tensor", "torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcOpTest.test_more_than_needed_args_are_specified": ["torch.jit.script", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcOpTest.test_more_than_needed_args_are_specified.script_rpc_async_call_with_more_args": ["torch.tensor", "torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcOpTest.test_unexepected_kwarg_is_specified": ["torch.jit.script", "torch.testing._internal.dist_utils.worker_name", "rpc_test.JitRpcOpTest.test_unexepected_kwarg_is_specified.script_rpc_async_call_with_unexpected_kwarg"], "rpc_test.JitRpcOpTest.test_unexepected_kwarg_is_specified.script_rpc_async_call_with_unexpected_kwarg": ["torch.tensor", "torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcOpTest.test_call_python_function_remotely_from_script_not_supported": ["torch.jit.script", "torch.testing._internal.dist_utils.worker_name", "rpc_test.JitRpcOpTest.test_call_python_function_remotely_from_script_not_supported.rpc_async_call_remote_py_function_in_torchscript"], "rpc_test.JitRpcOpTest.test_call_python_function_remotely_from_script_not_supported.rpc_async_call_remote_py_function_in_torchscript": ["torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcOpTest.test_call_script_function_that_raises_remotely_from_script": ["torch.jit.script", "torch.testing._internal.dist_utils.worker_name", "rpc_test.JitRpcOpTest.test_call_script_function_that_raises_remotely_from_script.rpc_async_call_remote_raising_torchscript_in_torchscript"], "rpc_test.JitRpcOpTest.test_call_script_function_that_raises_remotely_from_script.rpc_async_call_remote_raising_torchscript_in_torchscript": ["torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcOpTest.test_call_script_function_that_not_exists_remotely_from_script": ["rpc_test.JitRpcOpTest.test_call_script_function_that_not_exists_remotely_from_script.rpc_async_call_remote_nonexisting_torchscript_in_torchscript", "torch.jit.script", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcOpTest.test_call_script_function_that_not_exists_remotely_from_script.nonexisting_script": [], "rpc_test.JitRpcOpTest.test_call_script_function_that_not_exists_remotely_from_script.rpc_async_call_remote_nonexisting_torchscript_in_torchscript": ["torch.distributed.rpc.rpc_async"], "rpc_test.my_script_module_init": ["rpc_test.MyScriptModule.__init__"], "rpc_test.construct_my_script_module": ["rpc_test.my_script_module_init"], "rpc_test.run_ref_script_module": [], "rpc_test.script_check_rref_confirmed": [], "rpc_test.save_rref": ["torch.save"], "rpc_test.script_add": [], "rpc_test.load_script_module_with_pickled_rref": ["torch.jit.load", "io.BytesIO"], "rpc_test.JitRpcTest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test.JitRpcTest.test_torchscript_function": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "rpc_test.one_arg", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.remote"], "rpc_test.JitRpcTest.test_torchscript_function_exception": ["torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.JitRpcTest.test_torchscript_functions_not_supported": ["torch.distributed.rpc.rpc_async", "rpc_test.MyScriptModule.__init__", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.dist_utils.initialize_pg", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.barrier"], "rpc_test.JitRpcTest.test_remote_script_module": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.remote"], "rpc_test.JitRpcTest.test_create_script_module_on_remote": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.isinstance", "torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "torch.distributed.rpc.remote"], "rpc_test.JitRpcTest.test_load_script_module_with_pickled_rref": ["rpc_test.MyScriptModuleWithRRefs.__init__", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc._enable_jit_rref_pickle", "torch.distributed.rpc._disable_jit_rref_pickle", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.rpc_sync", "io.BytesIO", "torch.jit.save"], "torch.distributed.rpc._enable_jit_rref_pickle": [], "torch.distributed.rpc._disable_jit_rref_pickle": [], "rpc_test.JitRpcTest.test_rref_jit_pickle_not_supported": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "rpc_test.rpc_return_rref", "torch.testing._internal.common_utils.TemporaryFileName", "torch.testing._internal.dist_utils.worker_name", "rpc_test.save_rref"], "rpc_test.JitRpcTest.test_remote_script_throw": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.JitRpcTest.test_remote_script_udf": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.JitRpcTest.test_async_script_udf": ["torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_callback_simple": ["torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_callback_simple.callback": [], "rpc_test.JitRpcTest.test_callback_chain": ["torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.range", "torch.ones", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_callback_chain.callback": [], "rpc_test.JitRpcTest.test_add_done_callback": ["torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_add_done_callback.callback": [], "rpc_test.JitRpcTest.test_add_done_callback.<lambda1>": [], "rpc_test.JitRpcTest.test_async_script_throw": ["torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.ones", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_callback_with_exception": ["torch.distributed.rpc.rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.ones", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_callback_with_exception.callback": ["<builtin>.RuntimeError", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex"], "rpc_test.JitRpcTest.test_call_rpc_with_profiling": ["torch.autograd.profiler_legacy.profile", "torch._jit_internal._qualified_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.testing._internal.dist_utils.get_function_event", "torch.distributed.rpc.internal._build_rpc_profiling_key", "rpc_test.call_rpc_with_profiling", "torch.autograd.profiler.record_function"], "rpc_test.JitRpcTest.test_rpc_async_jit_profiled": ["torch.autograd.profiler_legacy.profile", "torch._jit_internal._qualified_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.len", "torch.tensor", "torch.distributed.rpc.internal._build_rpc_profiling_key", "torch.testing._internal.dist_utils.worker_name", "rpc_test.script_rpc_async_call"], "rpc_test.JitRpcTest.test_record_function_on_caller_rpc_async": ["torch.autograd.profiler_legacy.profile", "torch._jit_internal._qualified_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "rpc_test.record_function_on_caller_rpc_async", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "<builtin>.len", "torch.distributed.rpc.internal._build_rpc_profiling_key", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_rpc_torchscript_record_function": ["torch.autograd.profiler_legacy.profile", "torch._jit_internal._qualified_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "rpc_test.call_rpc_torchscript_with_record_function", "torch.distributed.rpc.internal._build_rpc_profiling_key", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_record_function_jit_end_callbacks_with_fork": ["torch.autograd.profiler_legacy.profile", "torch.testing._internal.dist_utils.get_function_event", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertGreaterAlmostEqual", "torch.autograd.profiler.record_function", "torch.jit._fork"], "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertGreaterAlmostEqual": [], "rpc_test.JitRpcTest.test_call_fork_in_jit_with_profiling": ["torch.autograd.profiler_legacy.profile", "rpc_test.call_fork_with_profiling", "torch.testing._internal.dist_utils.get_function_event", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.autograd.profiler.record_function"], "rpc_test.JitRpcTest.test_async_function_simple": ["torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_async_function_wrong_return_type": ["torch.distributed.rpc.rpc_sync", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.dist_utils.worker_name"], "rpc_test.JitRpcTest.test_async_function_wrong_decorator_order": ["torch.jit.script", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaises", "torch.distributed.rpc.functions.async_execution"], "rpc_test.JitRpcTest.test_async_function_wrong_decorator_order.async_wrong_decorator_order": ["torch.distributed.rpc.rpc_async"], "rpc_test.JitRpcTest.test_async_function_remote": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.JitRpcTest.test_async_function_remote_multi": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.ones", "<builtin>.range", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test.JitRpcTest.test_async_function_wrong_return_type_remote": ["torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.testing._internal.dist_utils.worker_name", "torch.distributed.rpc.remote"], "rpc_test_faulty": ["torch.jit.script"], "rpc_test_faulty.two_args_two_kwargs": [], "rpc_test_faulty.script_rpc_async_call": ["torch.distributed.rpc.rpc_async"], "rpc_test_faulty.rpc_async_call_with_timeout": ["torch.distributed.rpc.rpc_async"], "rpc_test_faulty.rpc_async_call_with_timeout_future_ret": ["torch.distributed.rpc.rpc_async"], "rpc_test_faulty.rpc_async_call_future_ret": ["torch.distributed.rpc.rpc_async"], "rpc_test_faulty.rref_to_here": [], "rpc_test_faulty.rref_to_here_with_timeout": [], "rpc_test_faulty.rpc_async_with_rref_arg": ["torch.distributed.rpc.rpc_async"], "rpc_test_faulty.JitFaultyAgentRpcTest": ["torch.testing._internal.dist_utils.dist_init"], "rpc_test_faulty.JitFaultyAgentRpcTest.test_timeout_in_torchscript_function": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "rpc_test_faulty.script_rpc_async_call", "torch.distributed.rpc._set_rpc_timeout", "rpc_test_faulty.rpc_async_call_with_timeout", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.tensor"], "rpc_test_faulty.JitFaultyAgentRpcTest.test_timeout_in_python": ["torch.testing._internal.dist_utils.worker_name", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.distributed.rpc._set_rpc_timeout", "rpc_test_faulty.rpc_async_call_with_timeout_future_ret", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "rpc_test_faulty.rpc_async_call_future_ret", "torch.tensor"], "rpc_test_faulty.JitFaultyAgentRpcTest.test_remote_timeout_to_here_in_jit": ["torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed", "torch.distributed.rpc.remote", "torch.tensor", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "rpc_test_faulty.rref_to_here"], "rpc_test_faulty.JitFaultyAgentRpcTest.test_rref_to_here_timeout_in_jit": ["rpc_test_faulty.rref_to_here_with_timeout", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.get_timeout_error_regex", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.tensor"], "rpc_test_faulty.JitFaultyAgentRpcTest.test_rref_timeout_pickle_in_jit": ["torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "rpc_test_faulty.rpc_async_with_rref_arg", "torch.tensor"], "rpc_test_faulty.JitFaultyAgentRpcTest.test_rref_timeout_pickle_script_func": ["torch.distributed.rpc.rpc_sync", "torch.testing._internal.dist_utils.wait_until_pending_futures_and_users_flushed", "torch.distributed.rpc.remote", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertRaisesRegex", "torch.tensor"], "launcher": ["<builtin>.print", "launcher.main", "argparse.ArgumentParser", "<builtin>.vars"], "launcher.get_name": [], "launcher.get_server_rank": [], "launcher.get_cuda_server_rank": [], "launcher.get_server_rref": ["torch.distributed.rpc.remote", "launcher.get_name"], "launcher.run_trainer": ["torch.distributed.ProcessGroupNCCL", "torch.distributed.init_process_group", "torch.distributed.is_initialized", "torch.distributed.ProcessGroupGloo", "torch.distributed.FileStore", "launcher.load_model"], "torch.distributed.ProcessGroupNCCL": [], "launcher.load_model": ["launcher.get_json_config"], "launcher.call_trainers": ["launcher.get_server_rank", "launcher.get_name", "<builtin>.range", "launcher.get_cuda_server_rank", "torch.distributed.rpc.rpc_async"], "launcher.benchmark_warmup": ["torch.futures.wait_all", "<builtin>.print", "launcher.call_trainers"], "launcher.split_list": ["<builtin>.range"], "launcher.get_server_metrics": [], "launcher.run_master": ["launcher.get_server_metrics", "launcher.get_server_rref", "launcher.get_name", "<builtin>.range", "metrics.ProcessedMetricsPrinter.ProcessedMetricsPrinter", "torch.futures.wait_all", "torch.distributed.rpc.init_rpc", "launcher.benchmark_warmup", "launcher.split_list", "torch.utils.data.DataLoader", "<builtin>.list", "launcher.call_trainers"], "metrics.ProcessedMetricsPrinter.ProcessedMetricsPrinter": [], "launcher.run_benchmark": ["torch.distributed.rpc.shutdown", "launcher.load_extra_configs", "launcher.get_name", "torch.distributed.rpc.init_rpc", "launcher.get_cuda_server_rank", "torch.distributed.rpc.TensorPipeRpcBackendOptions", "torch.manual_seed", "torch.cuda.manual_seed_all", "launcher.run_master"], "launcher.load_extra_configs": ["launcher.get_json_config"], "launcher.get_json_config": ["pathlib.Path", "<builtin>.open", "json.load", "os.path.join"], "launcher.load_data": ["launcher.get_json_config"], "launcher.main": ["torch.multiprocessing.spawn", "launcher.load_data", "json.dump", "<builtin>.print", "<builtin>.range", "time.time", "launcher.print_benchmark_results", "torch.multiprocessing.get_context", "<builtin>.len", "<builtin>.enumerate", "launcher.find_graph_variable", "<builtin>.open"], "metrics.ProcessedMetricsPrinter": [], "metrics.ProcessedMetricsPrinter.ProcessedMetricsPrinter.print_data_frame": ["tabulate.tabulate", "<builtin>.print"], "metrics.ProcessedMetricsPrinter.ProcessedMetricsPrinter.combine_processed_metrics": [], "metrics.ProcessedMetricsPrinter.ProcessedMetricsPrinter.get_data_frame": ["statistics.mean", "<builtin>.sorted", "statistics.variance", "statistics.stdev", "pandas.DataFrame"], "metrics.ProcessedMetricsPrinter.ProcessedMetricsPrinter.print_metrics": [], "metrics.ProcessedMetricsPrinter.ProcessedMetricsPrinter.save_to_file": [], "server.server": [], "server.server.ParameterServerBase.__init__": ["metrics.MetricsLogger.MetricsLogger"], "server.server.ParameterServerBase": ["abc.abstractmethod"], "server.server.ParameterServerBase.process_gradient": [], "server.server.ParameterServerBase.average_gradient": [], "server.server.ParameterServerBase.reset_state": [], "server.server.ParameterServerBase.record_start": [], "server.server.ParameterServerBase.record_end": [], "server.server.ParameterServerBase.record_straggler_start": [], "server.server.ParameterServerBase.record_straggler_end": [], "server.server.ParameterServerBase.record_batch_start": [], "server.server.ParameterServerBase.record_batch_end": [], "server.server.ParameterServerBase.record_method": [], "server.server.ParameterServerBase.record_method.decorator": ["functools.wraps"], "server.server.ParameterServerBase.record_method.decorator.wrapper": ["time.time"], "server.server.ParameterServerBase.get_metrics": [], "server.server.ParameterServerBase.clear_metrics": [], "server.server.AverageParameterServer.__init__": ["threading.Lock", "<builtin>.super"], "server.server.AverageParameterServer.reset_state": [], "server.server.AverageParameterServer.param_key": [], "server.server.AverageParameterServer.clear_batch_state": [], "server.server.AverageParameterServer.process_gradient": ["server.server.AverageParameterServer.param_key", "server.server.ParameterServerBase.record_straggler_start", "server.server.ParameterServerBase.record_batch_start"], "server.server.AverageParameterServer": ["torch.distributed.rpc.functions.async_execution", "server.server.ParameterServerBase.record_method.decorator", "server.server.ParameterServerBase.record_method"], "server.server.AverageParameterServer.average": [], "server.server.AverageParameterServer.average_gradient": ["<builtin>.type", "torch.futures.Future", "utils.sparse_tensor_to_rpc_format", "<builtin>.len", "utils.sparse_rpc_format_to_tensor"], "server.server.AverageBatchParameterServer.__init__": ["<builtin>.super"], "server.server.AverageBatchParameterServer.process_gradient": ["server.server.AverageParameterServer.param_key", "server.server.ParameterServerBase.record_straggler_start", "server.server.ParameterServerBase.record_batch_start"], "server.server.AverageBatchParameterServer": ["server.server.ParameterServerBase.record_method.decorator", "server.server.ParameterServerBase.record_method"], "server.server.AverageBatchParameterServer.average": [], "metrics.MetricsLogger": [], "metrics.MetricsLogger.MetricsLogger.__init__": [], "metrics.MetricsLogger.MetricsLogger.record_start": ["<builtin>.RuntimeError", "CPUMetric.CPUMetric", "CUDAMetric.CUDAMetric"], "metrics.MetricsLogger.MetricsLogger.record_end": ["<builtin>.RuntimeError"], "metrics.MetricsLogger.MetricsLogger.clear_metrics": [], "metrics.MetricsLogger.MetricsLogger.get_metrics": [], "metrics.MetricsLogger.MetricsLogger.get_processed_metrics": ["<builtin>.isinstance"], "metrics.CPUMetric": [], "metrics.CPUMetric.CPUMetric.__init__": [], "metrics.CPUMetric.CPUMetric.record_start": ["time.time"], "metrics.CPUMetric.CPUMetric.record_end": ["time.time"], "metrics.CPUMetric.CPUMetric.elapsed_time": ["<builtin>.RuntimeError"], "metrics.MetricBase": [], "metrics.MetricBase.MetricBase.__init__": [], "metrics.MetricBase.MetricBase": ["abc.abstractmethod"], "metrics.MetricBase.MetricBase.record_start": [], "metrics.MetricBase.MetricBase.record_end": [], "metrics.MetricBase.MetricBase.elapsed_time": [], "metrics.MetricBase.MetricBase.get_name": [], "metrics.MetricBase.MetricBase.get_end": [], "metrics.CUDAMetric": [], "metrics.CUDAMetric.CUDAMetric.__init__": [], "metrics.CUDAMetric.CUDAMetric.record_start": ["torch.cuda.device", "torch.cuda.Event"], "metrics.CUDAMetric.CUDAMetric.record_end": ["torch.cuda.device", "torch.cuda.Event"], "metrics.CUDAMetric.CUDAMetric.elapsed_time": ["<builtin>.RuntimeError"], "metrics.CUDAMetric.CUDAMetric.synchronize": [], "utils.process_bucket_with_remote_server.callback": ["<builtin>.type", "utils.sparse_rpc_format_to_tensor"], "models": [], "models.DummyModel": [], "models.DummyModel.DummyModel.__init__": ["torch.nn.Linear", "<builtin>.range", "torch.nn.Sequential", "torch.nn.EmbeddingBag", "<builtin>.super"], "models.DummyModel.DummyModel.forward": ["torch.nn.functional.softmax"], "trainer.hook_states": [], "trainer.hook_states.BasicHookState.__init__": [], "trainer.hook_states.BasicHookState.get_key": [], "trainer.hook_states.BasicHookState.next_batch": [], "trainer.trainer": [], "trainer.trainer.TrainerBase.__init__": ["metrics.MetricsLogger.MetricsLogger"], "trainer.trainer.TrainerBase": ["abc.abstractmethod"], "trainer.trainer.TrainerBase.train": [], "trainer.trainer.TrainerBase.record_start": [], "trainer.trainer.TrainerBase.record_end": [], "trainer.trainer.TrainerBase.record_batch_start": [], "trainer.trainer.TrainerBase.record_batch_end": [], "trainer.trainer.TrainerBase.record_forward_start": [], "trainer.trainer.TrainerBase.record_forward_end": [], "trainer.trainer.TrainerBase.record_backward_start": [], "trainer.trainer.TrainerBase.record_backward_end": [], "trainer.trainer.TrainerBase.methodmetric": [], "trainer.trainer.TrainerBase.methodmetric.decorator": ["functools.wraps"], "trainer.trainer.TrainerBase.methodmetric.decorator.wrapper": ["time.time"], "trainer.trainer.TrainerBase.get_metrics": [], "trainer.trainer.TrainerBase.clear_metrics": [], "trainer.trainer.DdpTrainer.__init__": ["<builtin>.super"], "trainer.trainer.DdpTrainer.epoch_key": [], "trainer.trainer.DdpTrainer.train": ["<builtin>.range", "torch.cuda.synchronize", "<builtin>.enumerate", "<builtin>.print", "torch.optim.SGD"], "trainer.criterions": [], "trainer.criterions.cel": ["torch.nn.CrossEntropyLoss"], "trainer.preprocess_data": [], "trainer.preprocess_data.preprocess_dummy_data": ["<builtin>.range", "<builtin>.len"], "trainer.iteration_steps": [], "trainer.iteration_steps.basic_iteration_step": [], "trainer.ddp_models": [], "trainer.ddp_models.basic_ddp_model": ["torch.nn.parallel.DistributedDataParallel"], "trainer.hooks": [], "trainer.hooks.allreduce_hook": [], "trainer.hooks.allreduce_hook.callback": [], "trainer.hooks.hybrid_hook": ["torch.distributed.all_reduce", "torch.futures.Future"], "trainer.hooks.hybrid_hook.callback": [], "trainer.hooks.rpc_hook": ["utils.process_bucket_with_remote_server"], "trainer.hooks.sparse_rpc_hook": ["utils.process_bucket_with_remote_server"], "trainer.hooks.sparse_rpc_hook.callback": [], "data": [], "data.DummyData": [], "data.DummyData.DummyData.__init__": ["torch.randint", "data.DummyData.DummyData.__init__.generate_input"], "data.DummyData.DummyData.__init__.generate_input": ["random.shuffle", "<builtin>.float", "<builtin>.range", "<builtin>.int", "random.randint", "numpy.array", "torch.from_numpy", "<builtin>.list"], "data.DummyData.DummyData.__len__": ["<builtin>.len"], "data.DummyData.DummyData.__getitem__": [], "agent": [], "agent.Policy.__init__": ["<builtin>.super", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Flatten", "<builtin>.range"], "agent.Policy.forward": ["torch.nn.functional.softmax"], "agent.AgentBase.__init__": ["torch.futures.Future", "threading.Lock", "torch.distributed.rpc.get_worker_info"], "agent.AgentBase.reset_metrics": [], "agent.AgentBase.set_world": ["torch.nn.Module.parameters", "agent.Policy.__init__", "torch.optim.Adam", "functools.reduce", "torch.distributed.rpc.get_worker_info", "torch.zeros", "<builtin>.range"], "agent.AgentBase.set_world.<lambda1>": [], "agent.AgentBase": ["torch.distributed.rpc.functions.async_execution"], "agent.AgentBase.select_action_batch": ["torch.distributions.Categorical", "time.time", "torch.futures.Future"], "agent.AgentBase.select_action_batch.<lambda1>": [], "agent.AgentBase.select_action_non_batch": ["torch.distributions.Categorical", "time.time"], "agent.AgentBase.finish_episode": [], "coordinator": [], "coordinator.CoordinatorBase.__init__": ["<builtin>.range", "torch.distributed.rpc.remote", "torch.distributed.rpc.get_worker_info"], "coordinator.CoordinatorBase.run_coordinator": ["torch.futures.wait_all", "numpy.percentile", "<builtin>.print", "<builtin>.range", "<builtin>.sorted", "time.time", "<builtin>.int", "<builtin>.len", "<builtin>.round", "<builtin>.str"], "observer": ["<builtin>.str", "abc.ABCMeta"], "observer.ObserverBase.__init__": ["torch.distributed.rpc.get_worker_info", "<builtin>.super"], "observer.ObserverBase.set_state": [], "observer.ObserverBase.reset": ["torch.rand"], "observer.ObserverBase.step": ["random.randint", "torch.rand"], "observer.ObserverBase.run_ob_episode": ["<builtin>.range", "observer.ObserverBase.reset", "observer.ObserverBase.step", "time.time", "torch.distributed.rpc.rpc_sync", "torch.zeros"], "launcher.str2bool": ["<builtin>.isinstance", "argparse.ArgumentTypeError"], "argparse.ArgumentTypeError": [], "launcher.run_worker": ["coordinator.CoordinatorBase.__init__", "<builtin>.list", "<builtin>.map", "torch.distributed.rpc.shutdown", "coordinator.CoordinatorBase.run_coordinator", "torch.distributed.rpc.init_rpc"], "launcher.find_graph_variable": ["<builtin>.list", "<builtin>.map"], "launcher.append_spaces": ["<builtin>.len", "<builtin>.str"], "launcher.print_benchmark_results": ["<builtin>.print", "launcher.append_spaces", "<builtin>.max", "<builtin>.len"], "faulty_agent_backend_registry": ["torch.distributed.rpc.backend_registry.register_backend"], "faulty_agent_backend_registry._init_process_group": ["<builtin>.RuntimeError", "torch.distributed.ProcessGroupGloo"], "faulty_agent_backend_registry._faulty_tensorpipe_construct_rpc_backend_options_handler": ["FaultyTensorPipeRpcBackendOptions"], "FaultyTensorPipeRpcBackendOptions": [], "faulty_agent_backend_registry._faulty_tensorpipe_init_backend_handler": ["torch.distributed.rpc.api._init_rpc_states", "faulty_agent_backend_registry._init_process_group", "<builtin>.TypeError", "<builtin>.isinstance", "FaultyTensorPipeAgent"], "FaultyTensorPipeAgent": [], "torch.distributed.rpc.api._init_rpc_states": [], "update-caffe2-models": ["update-caffe2-models.upload_models", "subprocess.check_call", "update-caffe2-models.cleanup", "update-caffe2-models.generate_models", "<builtin>.print", "update-caffe2-models.download_models", "sys.exit"], "update-caffe2-models.SomeClass._download": ["os.path.exists", "<builtin>.print", "os.path.join", "update-caffe2-models.SomeClass._caffe2_model_dir", "caffe2.python.models.download.downloadFromURLToFile", "caffe2.python.models.download.deleteDirectory", "caffe2.python.models.download.getURLFromName", "<builtin>.exit", "os.makedirs"], "update-caffe2-models.SomeClass._caffe2_model_dir": ["os.path.expanduser", "os.path.join"], "caffe2.python.models.download.getURLFromName": [], "caffe2.python.models.download.downloadFromURLToFile": [], "caffe2.python.models.download.deleteDirectory": [], "update-caffe2-models.SomeClass._onnx_model_dir": ["os.path.dirname", "os.path.expanduser", "os.path.join"], "update-caffe2-models.SomeClass._prepare_model_data": ["six.moves.urllib.request.urlretrieve", "os.path.exists", "tarfile.open", "<builtin>.print", "os.remove", "update-caffe2-models.SomeClass._onnx_model_dir", "tempfile.NamedTemporaryFile", "os.makedirs"], "update-caffe2-models.download_models": ["os.path.exists", "<builtin>.print", "update-caffe2-models.SomeClass._download", "update-caffe2-models.SomeClass._onnx_model_dir", "update-caffe2-models.SomeClass._caffe2_model_dir", "update-caffe2-models.SomeClass._prepare_model_data"], "update-caffe2-models.generate_models": ["subprocess.check_call", "<builtin>.open", "<builtin>.print", "update-caffe2-models.SomeClass._onnx_model_dir", "os.path.join", "update-caffe2-models.SomeClass._caffe2_model_dir"], "update-caffe2-models.upload_models": ["<builtin>.print", "subprocess.check_call", "update-caffe2-models.SomeClass._onnx_model_dir"], "update-caffe2-models.cleanup": ["os.remove", "os.path.dirname", "update-caffe2-models.SomeClass._onnx_model_dir", "os.path.join"], "update-models-from-caffe2": ["onnx.numpy_helper.to_array", "argparse.ArgumentParser", "os.path.join", "update-models-from-caffe2.generate_test_input_data", "onnx.checker.check_model", "os.path.expanduser", "update-models-from-caffe2.upload_onnx_model", "onnx.numpy_helper.from_array", "<builtin>.print", "update-models-from-caffe2.generate_test_output_data", "update-models-from-caffe2.download_caffe2_model", "<builtin>.len", "<builtin>.range", "<builtin>.enumerate", "glob.glob", "update-models-from-caffe2.onnx_verify", "os.remove", "update-models-from-caffe2.download_onnx_model", "<builtin>.list", "<builtin>.open", "os.makedirs", "update-models-from-caffe2.caffe2_to_onnx", "onnx.TensorProto", "shutil.rmtree", "os.path.exists", "numpy.load"], "update-models-from-caffe2.upload_onnx_model": ["tarfile.open", "<builtin>.print", "os.path.join", "boto3.client", "os.stat", "<builtin>.float", "boto3.s3.transfer.S3Transfer"], "boto3.client": [], "boto3.s3.transfer.S3Transfer": [], "update-models-from-caffe2.download_onnx_model": ["tarfile.open", "<builtin>.print", "tempfile.NamedTemporaryFile", "os.makedirs", "os.path.join", "os.remove", "six.moves.urllib.request.urlretrieve", "shutil.rmtree", "os.path.exists", "update-models-from-caffe2.upload_onnx_model"], "update-models-from-caffe2.download_caffe2_model": ["<builtin>.print", "os.makedirs", "os.path.join", "caffe2.python.models.download.getURLFromName", "caffe2.python.models.download.deleteDirectory", "shutil.rmtree", "os.path.exists", "caffe2.python.models.download.downloadFromURLToFile"], "update-models-from-caffe2.caffe2_to_onnx": ["<builtin>.print", "<builtin>.open", "os.path.join", "caffe2.proto.caffe2_pb2.NetDef", "json.loads"], "update-models-from-caffe2.tensortype_to_ndarray": ["numpy.random.rand"], "update-models-from-caffe2.generate_test_input_data": ["<builtin>.set", "<builtin>.list", "update-models-from-caffe2.tensortype_to_ndarray"], "update-models-from-caffe2.generate_test_output_data": ["caffe2.python.workspace.Predictor", "caffe2.python.workspace.ResetWorkspace"], "update-models-from-caffe2.onnx_verify": ["<builtin>.isinstance", "numpy.testing.assert_almost_equal"], "categorize": ["categorize.main"], "categorize.Categorizer.__init__": ["common.CommitDataCache.__init__", "commitlist.CommitList.from_existing"], "common.CommitDataCache.__init__": ["os.path.exists", "common.CommitDataCache.read_from_disk"], "commitlist.CommitList.from_existing": ["commitlist.CommitList.read_from_disk", "commitlist.CommitList.__init__"], "categorize.Categorizer.categorize": ["<builtin>.len", "commitlist.CommitList.filter", "categorize.Categorizer.handle_commit"], "commitlist.CommitList.filter": [], "categorize.Categorizer.handle_commit": ["textwrap.dedent", "os.system", "categorize.Categorizer.update_commit", "<builtin>.input", "<builtin>.len", "<builtin>.print", "categorize.Categorizer.potential_reverts_of", "categorize.Categorizer.features"], "categorize.Categorizer.features": ["common.CommitDataCache.get"], "common.CommitDataCache.get": ["common.get_features", "common.CommitDataCache.write_to_disk"], "categorize.Categorizer.potential_reverts_of": ["categorize.Categorizer.features", "<builtin>.any", "<builtin>.enumerate"], "categorize.Categorizer.update_commit": ["commitlist.CommitList.write_to_disk"], "commitlist.CommitList.write_to_disk": ["csv.writer", "<builtin>.open"], "categorize.main": ["categorize.Categorizer.__init__", "categorize.Categorizer.categorize", "argparse.ArgumentParser"], "commitlist": ["commitlist.main"], "commitlist.Commit.__init__": [], "commitlist.Commit.__eq__": ["<builtin>.isinstance"], "commitlist.Commit.__repr__": [], "commitlist.CommitList.__init__": [], "commitlist.CommitList.read_from_disk": ["csv.reader", "<builtin>.list", "<builtin>.len", "<builtin>.open", "commitlist.Commit.__init__", "<builtin>.all"], "commitlist.CommitList.create_new": ["<builtin>.ValueError", "os.path.exists", "commitlist.CommitList.get_commits_between", "commitlist.CommitList.__init__"], "commitlist.CommitList.get_commits_between": ["common.run", "commitlist.Commit.__init__", "<builtin>.zip"], "csv.reader": [], "csv.writer": [], "common.run": ["locale.getpreferredencoding", "subprocess.Popen"], "commitlist.CommitList.update_to": ["commitlist.CommitList.get_commits_between"], "commitlist.CommitList.stat": ["collections.defaultdict"], "commitlist.CommitList.stat.<lambda1>": ["collections.defaultdict"], "commitlist.create_new": ["commitlist.CommitList.create_new", "commitlist.CommitList.write_to_disk"], "commitlist.update_existing": ["commitlist.CommitList.from_existing", "commitlist.CommitList.update_to", "commitlist.CommitList.write_to_disk"], "commitlist.to_markdown": ["common.CommitDataCache.__init__", "commitlist.CommitList.filter", "common.CommitDataCache.get", "commitlist.to_markdown.cleanup_title"], "commitlist.to_markdown.cleanup_title": ["re.match"], "commitlist.get_markdown_header": [], "commitlist.main": ["commitlist.to_markdown", "commitlist.CommitList.from_existing", "commitlist.create_new", "pprint.pprint", "<builtin>.list", "commitlist.get_markdown_header", "<builtin>.print", "os.path.dirname", "<builtin>.open", "argparse.ArgumentParser", "commitlist.CommitList.stat", "commitlist.update_existing", "os.makedirs"], "pprint.pprint": [], "common.dict_to_features": [], "common.features_to_dict": ["<builtin>.dict"], "locale.getpreferredencoding": [], "common.commit_body": ["common.run"], "common.commit_title": ["common.run"], "common.commit_files_changed": ["common.run"], "common.parse_pr_number": ["<builtin>.len", "<builtin>.print", "re.findall"], "common.get_ghstack_token": ["<builtin>.RuntimeError", "os.path.expanduser", "re.findall", "<builtin>.len", "<builtin>.open"], "common.run_query": ["<builtin>.Exception", "requests.post"], "common.gh_labels": ["common.run_query"], "common.get_features": ["common.gh_labels", "common.commit_title", "common.features_to_dict", "common.commit_files_changed", "common.commit_body", "common.parse_pr_number"], "common.CommitDataCache.read_from_disk": ["<builtin>.open", "json.load", "common.dict_to_features"], "common.CommitDataCache.write_to_disk": ["<builtin>.open", "json.dump"], "namespace_check": ["namespace_check.main"], "namespace_check.get_content": ["<builtin>.getattr", "<builtin>.dir"], "namespace_check.namespace_filter": ["<builtin>.set"], "namespace_check.run": ["namespace_check.namespace_filter", "json.load", "<builtin>.RuntimeError", "<builtin>.set", "namespace_check.get_content", "<builtin>.print", "os.path.exists", "<builtin>.open", "json.dump"], "namespace_check.main": ["namespace_check.run", "argparse.ArgumentParser"], "test_release_notes": ["unittest.main"], "test_release_notes.TestCommitList.test_create_new": ["tempfile.TemporaryDirectory", "unittest.TestCase.assertTrue", "<builtin>.len", "commitlist.CommitList.create_new", "unittest.TestCase.assertEqual"], "test_release_notes.TestCommitList.test_read_write": ["commitlist.CommitList.from_existing", "tempfile.TemporaryDirectory", "<builtin>.zip", "commitlist.CommitList.create_new", "unittest.TestCase.assertEqual", "commitlist.CommitList.write_to_disk"], "test_release_notes.TestCommitList.test_update_to": ["commitlist.CommitList.from_existing", "tempfile.TemporaryDirectory", "<builtin>.len", "commitlist.CommitList.create_new", "commitlist.CommitList.update_to", "unittest.TestCase.assertEqual", "commitlist.CommitList.write_to_disk"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional": ["_jit_internal._overload", "_jit_internal.boolean_dispatch"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.broadcast_tensors": ["torch._VF.broadcast_tensors", "overrides.has_torch_function", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.broadcast_shapes": ["torch.no_grad", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.meshgrid", "torch.zeros"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.meshgrid": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._meshgrid"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.split": ["overrides.has_torch_function_unary", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._indices_product": ["<builtin>.range", "torch.jit.annotate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._index_tensor_with_indices_list": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.einsum": ["overrides.has_torch_function", "overrides.handle_torch_function", "<builtin>.len", "<builtin>.isinstance", "torch._VF.einsum", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.meshgrid"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._meshgrid": ["torch._VF.meshgrid", "overrides.has_torch_function", "overrides.handle_torch_function", "<builtin>.len", "<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.stft": ["torch.nn.functional.pad", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "torch._VF.stft", "<builtin>.list", "<builtin>.int"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.istft": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._VF.istft"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._unique_impl": ["overrides.has_torch_function_unary", "torch._VF.unique_dim", "torch._unique2", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._unique_consecutive_impl": ["overrides.has_torch_function_unary", "torch._VF.unique_consecutive", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._return_counts": ["overrides.has_torch_function_unary", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._unique_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._return_output": ["overrides.has_torch_function_unary", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._unique_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._return_inverse": ["overrides.has_torch_function_unary", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._unique_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._consecutive_return_counts": ["overrides.has_torch_function_unary", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._unique_consecutive_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._consecutive_return_output": ["overrides.has_torch_function_unary", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._unique_consecutive_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._consecutive_return_inverse": ["overrides.has_torch_function_unary", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._unique_consecutive_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.tensordot": ["torch.jit.annotate", "overrides.handle_torch_function", "<builtin>.range", "torch._VF.tensordot", "<builtin>.len", "<builtin>.isinstance", "overrides.has_torch_function_variadic", "<builtin>.list", "<builtin>.RuntimeError", "<builtin>.int"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.cartesian_prod": ["torch._VF.cartesian_prod", "overrides.has_torch_function", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.block_diag": ["torch._C._VariableFunctions.block_diag", "overrides.has_torch_function", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.cdist": ["<builtin>.ValueError", "overrides.has_torch_function_variadic", "torch._VF.cdist", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.atleast_1d": ["torch._VF.atleast_1d", "<builtin>.len", "overrides.has_torch_function", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.atleast_2d": ["<builtin>.len", "torch._VF.atleast_2d", "overrides.has_torch_function", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.atleast_3d": ["<builtin>.len", "torch._VF.atleast_3d", "overrides.has_torch_function", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.norm": ["torch._VF.frobenius_norm", "torch._VF.norm", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "<builtin>.range", "<builtin>.isinstance", "<builtin>.list", "<builtin>.RuntimeError", "torch._VF.nuclear_norm", "<builtin>.ValueError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.chain_matmul": ["torch._VF.chain_matmul", "overrides.has_torch_function", "overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._lu_impl": ["torch._autograd_functions._LU.apply", "torch._jit_internal.is_scripting", "torch._lu_with_info", "<builtin>.RuntimeError", "<builtin>.ValueError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._check_list_size": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.type", "<builtin>.int"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._lu_with_infos": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._check_list_size", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "<builtin>.range", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._lu_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._lu_no_infos": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._check_list_size", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "<builtin>.range", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional._lu_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\functional.align_tensors": ["<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub": ["re.compile"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.tqdm.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.tqdm.update": ["<builtin>.float", "sys.stderr.write", "sys.stderr.flush"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.tqdm.close": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.tqdm.__enter__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.tqdm.__exit__": ["sys.stderr.write"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.import_module": ["<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._remove_if_exists": ["os.path.exists", "os.remove", "shutil.rmtree", "os.path.isfile"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._git_archive_link": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._load_attr_from_module": ["<builtin>.getattr", "<builtin>.dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._get_torch_home": ["os.getenv", "os.path.join", "os.path.expanduser"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._parse_repo_info": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._validate_not_a_forked_repo": ["urllib.request.urlopen", "<builtin>.str", "<builtin>.ValueError", "json.loads"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._get_cache_or_reload": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._git_archive_link", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._parse_repo_info", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.download_url_to_file", "sys.stderr.write", "zipfile.ZipFile", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.get_dir", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._validate_not_a_forked_repo", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._remove_if_exists", "shutil.move", "os.path.exists", "os.makedirs", "os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.get_dir": ["warnings.warn", "os.getenv", "os.path.join", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._get_torch_home"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.download_url_to_file": ["<builtin>.len", "shutil.move", "urllib.request.Request", "os.path.dirname", "urllib.request.urlopen", "hashlib.sha256", "tqdm.tqdm", "tempfile.NamedTemporaryFile", "<builtin>.int", "<builtin>.RuntimeError", "tqdm.auto.tqdm", "<builtin>.hasattr", "os.path.exists", "os.remove", "os.path.expanduser"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._check_module_exists": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._check_dependencies": ["<builtin>.len", "<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._check_module_exists", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._load_attr_from_module"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._load_entry_from_hubconf": ["<builtin>.isinstance", "<builtin>.callable", "<builtin>.ValueError", "<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._load_attr_from_module", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._check_dependencies"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.set_dir": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.list": ["sys.path.remove", "<builtin>.callable", "sys.path.insert", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.import_module", "<builtin>.dir", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._get_cache_or_reload", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.help": ["sys.path.remove", "sys.path.insert", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.import_module", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._load_entry_from_hubconf", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._get_cache_or_reload"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.load": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._load_local", "<builtin>.ValueError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._get_cache_or_reload"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._load_local": ["sys.path.remove", "sys.path.insert", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.import_module", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._load_entry_from_hubconf", "os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._download_url_to_file": ["warnings.warn", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.download_url_to_file"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._is_legacy_zip_format": ["<builtin>.len", "zipfile.is_zipfile", "zipfile.ZipFile"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._legacy_zip_load": ["<builtin>.len", "warnings.warn", "zipfile.ZipFile", "<builtin>.RuntimeError", "torch.load", "os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.load_state_dict_from_url": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._is_legacy_zip_format", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub._legacy_zip_load", "warnings.warn", "os.path.basename", "sys.stderr.write", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.download_url_to_file", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\hub.get_dir", "torch.load", "os.getenv", "os.makedirs", "os.path.join", "os.path.exists", "urllib.parse.urlparse"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides": ["torch._C._add_docstr", "functools.lru_cache"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_ignored_functions": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides": ["<builtin>.getattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_ignored_functions", "<builtin>.len", "<builtin>.callable"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda1>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda2>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda3>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda4>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda5>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda6>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda7>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda8>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda9>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda10>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda11>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda12>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda13>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda14>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda15>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda16>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda17>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda18>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda19>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda20>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda21>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda22>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda23>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda24>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda25>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda26>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda27>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda28>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda29>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda30>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda31>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda32>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda33>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda34>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda35>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda36>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda37>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda38>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda39>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda40>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda41>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda42>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda43>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda44>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda45>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda46>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda47>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda48>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda49>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda50>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda51>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda52>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda53>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda54>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda55>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda56>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda57>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda58>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda59>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda60>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda61>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda62>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda63>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda64>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda65>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda66>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda67>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda68>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda69>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda70>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda71>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda72>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda73>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda74>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda75>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda76>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda77>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda78>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda79>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda80>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda81>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda82>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda83>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda84>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda85>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda86>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda87>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda88>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda89>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda90>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda91>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda92>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda93>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda94>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda95>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda96>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda97>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda98>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda99>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda100>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda101>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda102>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda103>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda104>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda105>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda106>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda107>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda108>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda109>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda110>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda111>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda112>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda113>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda114>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda115>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda116>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda117>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda118>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda119>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda120>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda121>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda122>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda123>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda124>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda125>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda126>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda127>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda128>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda129>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda130>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda131>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda132>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda133>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda134>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda135>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda136>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda137>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda138>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda139>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda140>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda141>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda142>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda143>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda144>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda145>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda146>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda147>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda148>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda149>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda150>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda151>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda152>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda153>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda154>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda155>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda156>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda157>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda158>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda159>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda160>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda161>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda162>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda163>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda164>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda165>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda166>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda167>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda168>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda169>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda170>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda171>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda172>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda173>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda174>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda175>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda176>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda177>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda178>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda179>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda180>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda181>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda182>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda183>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda184>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda185>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda186>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda187>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda188>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda189>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda190>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda191>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda192>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda193>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda194>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda195>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda196>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda197>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda198>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda199>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda200>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda201>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda202>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda203>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda204>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda205>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda206>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda207>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda208>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda209>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda210>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda211>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda212>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda213>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda214>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda215>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda216>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda217>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda218>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda219>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda220>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda221>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda222>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda223>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda224>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda225>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda226>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda227>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda228>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda229>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda230>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda231>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda232>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda233>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda234>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda235>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda236>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda237>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda238>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda239>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda240>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda241>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda242>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda243>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda244>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda245>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda246>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda247>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda248>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda249>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda250>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda251>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda252>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda253>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda254>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda255>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda256>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda257>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda258>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda259>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda260>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda261>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda262>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda263>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda264>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda265>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda266>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda267>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda268>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda269>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda270>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda271>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda272>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda273>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda274>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda275>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda276>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda277>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda278>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda279>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda280>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda281>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda282>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda283>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda284>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda285>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda286>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda287>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda288>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda289>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda290>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda291>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda292>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda293>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda294>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda295>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda296>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda297>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda298>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda299>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda300>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda301>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda302>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda303>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda304>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda305>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda306>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda307>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda308>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda309>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda310>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda311>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda312>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda313>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda314>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda315>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda316>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda317>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda318>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda319>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda320>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda321>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda322>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda323>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda324>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda325>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda326>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda327>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda328>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda329>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda330>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda331>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda332>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda333>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda334>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda335>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda336>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda337>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda338>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda339>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda340>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda341>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda342>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda343>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda344>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda345>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda346>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda347>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda348>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda349>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda350>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda351>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda352>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda353>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda354>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda355>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda356>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda357>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda358>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda359>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda360>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda361>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda362>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda363>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda364>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda365>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda366>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda367>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda368>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda369>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda370>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda371>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda372>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda373>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda374>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda375>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda376>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda377>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda378>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda379>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda380>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda381>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda382>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda383>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda384>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda385>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda386>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda387>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda388>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda389>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda390>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda391>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda392>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda393>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda394>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda395>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda396>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda397>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda398>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda399>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda400>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda401>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda402>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda403>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda404>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda405>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda406>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda407>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda408>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda409>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda410>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda411>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda412>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda413>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda414>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda415>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda416>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda417>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda418>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda419>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda420>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda421>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda422>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda423>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda424>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda425>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda426>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda427>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda428>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda429>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda430>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda431>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda432>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda433>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda434>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda435>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda436>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda437>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda438>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda439>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda440>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda441>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda442>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda443>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda444>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda445>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda446>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda447>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda448>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda449>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda450>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda451>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda452>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda453>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda454>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda455>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda456>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda457>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda458>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda459>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda460>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda461>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda462>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda463>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda464>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda465>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda466>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda467>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda468>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda469>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda470>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda471>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda472>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda473>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda474>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda475>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda476>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda477>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda478>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda479>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda480>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda481>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda482>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda483>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda484>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda485>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda486>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda487>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda488>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda489>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda490>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda491>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda492>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda493>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda494>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda495>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda496>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda497>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda498>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda499>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda500>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda501>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda502>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda503>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda504>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda505>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda506>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda507>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda508>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda509>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda510>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda511>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda512>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda513>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda514>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda515>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda516>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda517>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda518>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda519>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda520>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda521>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda522>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda523>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda524>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda525>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda526>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda527>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda528>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda529>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda530>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda531>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda532>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda533>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda534>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda535>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda536>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda537>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda538>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda539>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda540>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda541>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda542>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda543>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda544>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda545>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda546>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda547>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda548>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda549>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda550>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda551>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda552>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda553>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda554>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda555>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda556>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda557>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda558>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda559>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda560>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda561>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda562>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda563>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda564>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda565>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda566>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda567>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda568>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda569>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda570>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda571>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda572>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda573>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda574>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda575>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda576>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda577>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda578>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda579>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda580>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda581>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda582>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda583>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda584>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda585>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda586>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda587>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda588>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda589>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda590>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda591>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda592>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda593>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda594>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda595>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda596>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda597>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda598>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda599>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda600>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda601>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda602>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda603>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda604>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda605>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda606>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda607>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda608>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda609>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda610>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda611>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda612>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda613>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda614>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda615>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda616>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda617>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda618>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda619>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda620>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda621>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda622>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda623>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda624>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda625>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda626>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda627>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda628>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda629>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda630>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda631>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda632>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda633>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda634>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda635>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda636>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda637>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda638>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda639>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda640>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda641>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda642>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda643>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda644>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda645>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda646>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda647>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda648>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda649>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda650>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda651>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda652>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda653>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda654>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda655>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda656>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda657>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda658>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda659>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda660>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda661>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda662>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda663>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda664>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda665>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda666>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda667>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda668>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda669>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda670>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda671>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda672>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda673>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda674>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda675>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda676>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda677>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda678>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda679>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda680>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda681>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda682>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda683>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda684>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda685>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda686>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda687>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda688>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda689>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda690>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda691>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda692>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda693>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda694>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda695>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda696>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda697>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda698>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda699>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda700>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda701>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda702>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda703>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda704>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda705>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda706>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda707>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda708>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda709>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda710>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda711>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda712>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda713>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda714>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda715>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda716>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda717>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda718>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda719>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda720>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda721>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda722>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda723>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda724>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda725>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda726>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda727>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda728>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda729>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda730>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda731>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda732>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda733>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda734>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda735>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda736>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda737>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda738>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda739>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda740>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda741>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda742>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda743>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda744>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda745>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda746>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda747>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda748>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda749>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda750>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda751>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda752>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda753>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda754>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda755>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda756>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda757>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda758>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides.<dict1>.<lambda759>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.wrap_torch_function": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.wrap_torch_function.inner": ["functools.wraps"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.wrap_torch_function.inner.wrapped": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.handle_torch_function": ["<builtin>.TypeError", "<builtin>.map", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides._get_overloaded_args", "<builtin>.tuple", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides._get_overloaded_args": ["<builtin>.enumerate", "<builtin>.issubclass", "<builtin>.len", "<builtin>.hasattr", "<builtin>.set", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_overridable_functions": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_testing_overrides", "collections.defaultdict", "<builtin>.getattr", "<builtin>.dir", "<builtin>.hasattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_ignored_functions", "<builtin>.isinstance", "<builtin>.callable"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides._get_tensor_methods": ["<builtin>.set", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.get_overridable_functions"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.is_tensor_method_or_property": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides._get_tensor_methods"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\overrides.is_tensor_like": ["<builtin>.type", "<builtin>.hasattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine.__init__": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine._scramble", "torch.zeros", "<builtin>.ValueError", "torch.device", "torch._sobol_engine_initialize_state_"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine._scramble": ["torch.arange", "torch._sobol_engine_scramble_", "torch.pow", "torch.randint", "torch.Generator", "torch.mv", "torch.device"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine.draw": ["torch.cat", "torch._sobol_engine_draw"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine.draw_base2": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine.draw", "<builtin>.ValueError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine.reset": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine.fast_forward": ["torch._sobol_engine_ff_"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\quasirandom.SobolEngine.__repr__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\random": ["contextlib.contextmanager"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\random.set_rng_state": ["torch._C.default_generator.set_state"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\random.get_rng_state": ["torch._C.default_generator.get_state"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\random.manual_seed": ["torch.cuda.manual_seed_all", "torch._C.default_generator.manual_seed", "torch.cuda._is_in_bad_fork", "<builtin>.int"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\random.seed": ["torch._C.default_generator.seed", "torch.cuda._is_in_bad_fork", "torch.cuda.manual_seed_all"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\random.initial_seed": ["torch._C.default_generator.initial_seed"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\random.fork_rng": ["<builtin>.range", "torch.get_rng_state", "<builtin>.list", "torch.set_rng_state", "torch.cuda.device_count", "<builtin>.zip", "torch.cuda.set_rng_state", "torch.cuda.get_rng_state", "warnings.warn"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization": ["contextlib.contextmanager", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.register_package", "copyreg.pickle", "struct.Struct"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.mkdtemp": ["tempfile.mkdtemp", "shutil.rmtree"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_zipfile": ["<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.register_package": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.check_module_version_greater_or_equal": ["<builtin>.str", "<builtin>.enumerate", "<builtin>.type", "<builtin>.tuple", "warnings.warn", "pickle.__version__.split", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._cpu_tag": ["<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._cuda_tag": ["<builtin>.type", "<builtin>.str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._cpu_deserialize": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.validate_cuda_device": ["torch.cuda.is_available", "torch.cuda.device_count", "<builtin>.RuntimeError", "torch.cuda._utils._get_device_index"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._cuda_deserialize": ["torch.cuda.device", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.validate_cuda_device", "<builtin>.getattr", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.location_tag": ["torch.typename", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.default_restore_location": ["torch.typename", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.normalize_storage_type": ["<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.storage_to_tensor_type": ["_utils._import_dotted_name", "<builtin>.type", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_path": ["<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._opener.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._opener.__enter__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._opener.__exit__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_file.__init__": ["<builtin>.super", "<builtin>.open"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_file.__exit__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_buffer_reader.__init__": ["<builtin>.super", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._check_seekable"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._check_seekable": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._check_seekable.raise_err_msg"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_buffer_writer.__exit__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_file_like": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_buffer_reader.__init__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._opener.__init__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_file.__init__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_path", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_reader.__init__": ["torch._C.PyTorchFileReader", "<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_writer_file.__init__": ["torch._C.PyTorchFileWriter", "<builtin>.super", "<builtin>.str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_writer_file.__exit__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_writer_buffer.__init__": ["<builtin>.super", "torch._C.PyTorchFileWriter"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_writer_buffer.__exit__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_writer": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_writer_file.__init__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_path", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_writer_buffer.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_compressed_file": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._should_read_directly": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_compressed_file"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._check_seekable.raise_err_msg": ["<builtin>.str", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._check_dill_version": ["<builtin>.str", "<builtin>.ValueError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.check_module_version_greater_or_equal"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.save": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._save", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_file_like", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_save", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._check_dill_version", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_writer"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._save": ["pickle.Pickler", "io.BytesIO", "<builtin>.len", "<builtin>.sorted"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_save": ["pickle.Pickler", "<builtin>.sorted", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._should_read_directly", "pickle.dump", "<builtin>.dict"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_save.persistent_id": ["typing.cast", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.normalize_storage_type", "torch.is_storage", "<builtin>.type", "<builtin>.issubclass", "<builtin>.str", "<builtin>.isinstance", "torch._utils_internal.get_source_lines_and_file", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.location_tag", "warnings.warn"], "torch._utils_internal.get_source_lines_and_file": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._save.persistent_id": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.normalize_storage_type", "<builtin>.str", "torch.is_storage", "<builtin>.type", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.location_tag"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.load": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_file_like", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._check_dill_version", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._load", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_torchscript_zip", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._open_zipfile_reader.__init__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load", "warnings.warn", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_zipfile", "torch.jit.load"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_torchscript_zip": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._load": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._get_restore_location", "pickle.Unpickler.load", "torch._utils._validate_loaded_sparse_tensors", "io.BytesIO", "pickle.Unpickler.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._get_restore_location", "<builtin>.type", "torch._utils._validate_loaded_sparse_tensors", "<builtin>.hasattr", "pickle.load", "pickle.Unpickler", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._should_read_directly", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._is_zipfile", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._check_seekable", "<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load.legacy_load"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._get_layout": ["torch.__dict__.values", "<builtin>.isinstance", "<builtin>.str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.<lambda1>": ["<builtin>.str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._get_restore_location": ["<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load._check_container_source": ["torch.typename", "difflib.unified_diff", "<builtin>.open", "<builtin>.len", "torch._utils_internal.get_source_lines_and_file", "warnings.warn"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load.legacy_load": ["contextlib.closing", "<builtin>.range", "os.path.join", "<builtin>.open", "pickle.load", "pickle.Unpickler", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.storage_to_tensor_type", "struct.unpack", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.mkdtemp", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.default_restore_location", "tarfile.open"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load.legacy_load.persistent_load": ["<builtin>.all", "<builtin>.int", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load._check_container_source", "<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load.persistent_load": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._legacy_load._check_container_source", "<builtin>.isinstance", "<builtin>.all", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._maybe_decode_ascii", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.default_restore_location", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._maybe_decode_ascii": ["<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._get_restore_location.restore_location": ["<builtin>.str", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.default_restore_location"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._load.load_tensor": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization.default_restore_location"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._load.persistent_load": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._maybe_decode_ascii", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._load.load_tensor", "<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\serialization._load.UnpicklerWrapper.find_class": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage": ["typing.TypeVar"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__len__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__getitem__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.copy_": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.size": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.cuda": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.element_size": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.get_device": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._share_filename_": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._share_fd_": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._new_using_filename": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._new_using_fd": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__str__": ["torch.typename", "<builtin>.range", "<builtin>.str", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__repr__": ["<builtin>.str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__iter__": ["<builtin>.range", "<builtin>.iter", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.size", "<builtin>.map"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__iter__.<lambda1>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__copy__": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.clone"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.clone": ["torch.cuda.device", "_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.get_device", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.size"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__deepcopy__": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.clone"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__reduce__": ["io.BytesIO", "torch.save"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__sizeof__": ["<builtin>.super", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.element_size", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.size"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.tolist": ["<builtin>.list"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.cpu": ["_utils._type", "<builtin>.getattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.double": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.float": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.half": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.long": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.int": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.short": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.char": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.byte": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.bool": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.bfloat16": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.complex_double": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.complex_float": ["_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.pin_memory": ["<builtin>.TypeError", "_utils._type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.type", "torch.cuda._host_allocator", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.size"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.share_memory_": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._share_fd_", "torch.multiprocessing.get_sharing_strategy", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._share_filename_"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._new_shared": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._new_using_filename", "torch.multiprocessing.get_sharing_strategy", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase._new_using_fd", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._StorageBase.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\storage._load_from_bytes": ["io.BytesIO", "torch.load"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\types": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\types.Storage.__deepcopy__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\types.Storage._new_shared": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\types.Storage._write_file": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\types.Storage.element_size": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\types.Storage.is_shared": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\types.Storage.share_memory_": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\types.Storage.size": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\version": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs": ["<builtin>.tuple", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.__init__", "<builtin>.getattr", "platform.java_ver", "sys.platform.startswith", "<builtin>.print", "<builtin>.int"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_data_dir": ["os.path.expanduser", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_pywin32", "os.path.normpath", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_from_registry", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_jna", "os.getenv", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_ctypes", "os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_ctypes": ["ctypes.windll.shell32.SHGetFolderPathW", "ctypes.windll.kernel32.GetShortPathNameW", "ctypes.create_unicode_buffer", "<builtin>.ord"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_pywin32": ["<builtin>.getattr", "win32com.shell.shell.SHGetFolderPath", "win32api.GetShortPathName", "<builtin>.ord"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_from_registry": ["winreg.OpenKey", "winreg.QueryValueEx"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_jna": ["com.sun.jna.platform.win32.Kernel32.INSTANCE.GetShortPathName", "<builtin>.getattr", "com.sun.jna.platform.win32.Shell32.INSTANCE.SHGetFolderPath", "array.zeros", "<builtin>.ord", "com.sun.jna.Native.toString"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.site_data_dir": ["os.path.expanduser", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_pywin32", "os.pathsep.join", "os.path.normpath", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_from_registry", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_jna", "os.sep.join", "os.getenv", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_ctypes", "os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_config_dir": ["os.getenv", "os.path.join", "os.path.expanduser", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_data_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.site_config_dir": ["os.path.expanduser", "os.pathsep.join", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.site_data_dir", "os.sep.join", "os.getenv", "os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_cache_dir": ["os.path.expanduser", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_pywin32", "os.path.normpath", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_from_registry", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_jna", "os.getenv", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs._get_win_folder_with_ctypes", "os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_state_dir": ["os.getenv", "os.path.join", "os.path.expanduser", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_data_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_log_dir": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_cache_dir", "os.path.expanduser", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.user_data_dir", "os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_data_dir": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_data_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.site_data_dir": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.site_data_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_config_dir": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_config_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.site_config_dir": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.site_config_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_cache_dir": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_cache_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_state_dir": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_state_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_log_dir": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_appdirs.AppDirs.user_log_dir"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_autograd_functions": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_autograd_functions._LU.forward": ["torch._lu_with_info"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_autograd_functions._LU.backward": ["torch.triangular_solve", "torch.lu_unpack"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes._Classes.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes._ClassNamespace.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes._ClassNamespace.__getattr__": ["<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes._Classes.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes._Classes.__getattr__": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes._ClassNamespace.__init__", "<builtin>.setattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes._Classes.loaded_libraries": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_classes._Classes.load_library": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_deploy": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_deploy._save_storages": ["torch.package._package_pickler.create_pickler", "torch.package.OrderedImporter", "io.BytesIO", "<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_deploy._save_storages.persistent_id": ["torch.is_storage", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_deploy._load_storages": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_deploy._get_package", "io.BytesIO", "torch.package._package_unpickler.PackageUnpickler", "torch.package.OrderedImporter"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_deploy._load_storages.persistent_load": ["torch.serialization._maybe_decode_ascii", "<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_deploy._get_package": ["torch.package.PackageImporter"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal": ["<builtin>.range", "<builtin>.globals", "weakref.WeakKeyDictionary", "torch.distributed.rpc.is_available", "contextlib.contextmanager"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.lookupInModule": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.lookupInModule", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.parseNestedExpr": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.lookupInModule", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.parseNestedExpr", "<builtin>.tuple", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.parseExpr": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.parseNestedExpr", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.<lambda1>": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv.parseExpr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromFrame": ["inspect.currentframe", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromFrame.env.__getattr__": ["<builtin>.dir", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_closure": ["<builtin>.enumerate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromClosure": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromEnv", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_closure"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackFromClosure.closure_lookup.__getattr__": ["<builtin>.hasattr", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.can_compile_class": ["<builtin>.all", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_ignored_fn", "<builtin>.hasattr", "<builtin>.issubclass", "inspect.isroutine", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_ignored_fn": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_torchscript_modifier"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_callable_argument_names": ["inspect.signature"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_annotation_str": ["<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_annotation_str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_type_hint_captures": ["<builtin>.RuntimeError", "<builtin>.len", "textwrap.dedent", "<builtin>.isinstance", "inspect.getsource", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_annotation_str", "ast.parse", "inspect.signature"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackForClassMethods": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_type_hint_captures", "inspect.isroutine", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_closure", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.createResolutionCallbackForClassMethods.lookup_in_class": ["<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.boolean_dispatch": ["<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.boolean_dispatch.fn": ["<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.export": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.unused": ["<builtin>.isinstance", "<builtin>.setattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._IgnoreContextManager.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._IgnoreContextManager.__exit__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.ignore": ["warnings.warn", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.ignore.decorator": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._copy_to_script_wrapper": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.module_has_exports": ["<builtin>.hasattr", "<builtin>.dir", "<builtin>.callable", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_torchscript_modifier", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_torchscript_modifier": ["<builtin>.callable", "<builtin>.hasattr", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.should_drop": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_torchscript_modifier"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_static_fn": ["<builtin>.isinstance", "inspect.getattr_static"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_static_fn": ["inspect.getattr_static"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.copy_torchscript_modifier": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_torchscript_modifier"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._overload": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._qualified_name"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._qualified_name": ["<builtin>.RuntimeError", "torch.package._mangling.demangle", "<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._get_fn_overloads": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._clear_fn_overloads": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_class_name_lineno": ["inspect.currentframe", "<builtin>.range"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._overload_method": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_class_name_lineno", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._qualified_name", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._get_overloaded_methods": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._qualified_name", "<builtin>.len", "<builtin>.str", "<builtin>.Exception", "<builtin>.hasattr", "torch._utils_internal.get_source_lines_and_file"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_tuple": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.raise_error_container_parameter_missing", "<builtin>.hasattr", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.raise_error_container_parameter_missing": ["<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_list": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.raise_error_container_parameter_missing", "<builtin>.hasattr", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_dict": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.raise_error_container_parameter_missing", "<builtin>.hasattr", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_optional": ["<builtin>.len", "<builtin>.type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_optional.safe_is_subclass", "<builtin>.hasattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.raise_error_container_parameter_missing", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_optional.safe_is_subclass": ["<builtin>.issubclass", "inspect.isclass"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_future": ["<builtin>.RuntimeError", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_rref": ["<builtin>.RuntimeError", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_final": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.BroadcastingListCls.__getitem__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.is_scripting": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.SourceContext.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.fake_range": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.SourceContext.__init__", "torch._C._jit_tree_views.SourceRangeFactory.make_raw_range"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._try_get_dispatched_fn": ["<builtin>.callable"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._get_named_tuple_properties": ["torch._C.TensorType.getInferred", "torch.jit.annotations.ann_to_type", "<builtin>.type", "<builtin>.list", "<builtin>.hasattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.fake_range", "<builtin>.issubclass"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._create_named_tuple": ["collections.namedtuple"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._disable_emit_hooks": ["torch._C._jit_get_emit_hooks", "torch._C._jit_set_emit_hooks"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._disable_emit_hooks_decorator": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._disable_emit_hooks_decorator.__enter__": ["torch._C._jit_get_emit_hooks", "torch._C._jit_set_emit_hooks"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._disable_emit_hooks_decorator.__exit__": ["torch._C._jit_set_emit_hooks"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._is_exception": ["<builtin>.issubclass", "inspect.isclass"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_origin": ["<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_args": ["<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.check_args_exist": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.raise_error_container_parameter_missing"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.container_checker": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_origin", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.check_args_exist", "<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.container_checker", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_args", "<builtin>.zip"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._isinstance": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.check_args_exist", "<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.get_origin", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal.container_checker"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._TensorExtractor.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._TensorExtractor.persistent_id": ["<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._extract_tensors": ["pickle.Pickler.dump", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_jit_internal._TensorExtractor.__init__", "io.BytesIO"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.is_sparse": ["<builtin>.TypeError", "<builtin>.isinstance", "torch.jit.is_scripting", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.get_floating_dtype": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.matmul": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.is_sparse", "torch.sparse.mm", "torch.matmul"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.conjugate": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.transpose": ["<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.transjugate": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.transpose", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.conjugate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.bform": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.transpose", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.matmul"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.qform": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.bform"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.basis": ["torch.linalg.qr", "torch.orgqr", "torch.geqrf"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_linalg_utils.symeig": ["torch.flip", "torch.linalg.eigh"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._symeig_backward_complete_eigenspace": ["torch.diag_embed", "torch.matmul", "<builtin>.float"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._polynomial_coefficients_given_roots": ["<builtin>.range", "<builtin>.list"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._polynomial_value": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._matrix_polynomial_value.transition", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._vector_polynomial_value.transition", "<builtin>.range"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._matrix_polynomial_value.transition": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._vector_polynomial_value.transition": ["torch.addcmul"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._matrix_polynomial_value": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._polynomial_value", "torch.eye", "<builtin>.len", "<builtin>.list"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._vector_polynomial_value": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._polynomial_value"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._symeig_backward_partial_eigenspace": ["torch.linalg.cholesky", "<builtin>.range", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._polynomial_coefficients_given_roots", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._matrix_polynomial_value", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._vector_polynomial_value", "torch.Generator", "torch.cholesky_solve", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._symeig_backward_complete_eigenspace", "torch.matmul", "torch.randn"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._symeig_backward": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._symeig_backward_complete_eigenspace", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._symeig_backward_partial_eigenspace"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCGAutogradFunction.forward": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._lobpcg"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._lobpcg": ["torch.prod", "<builtin>.range", "torch.empty", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.run", "torch.jit.is_scripting", "<builtin>.len", "torch.tensor", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.__init__", "_linalg_utils.get_floating_dtype", "<builtin>.ValueError", "torch.randn", "<builtin>.int"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCGAutogradFunction.backward": ["<builtin>.tuple", "<builtin>.ValueError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._symeig_backward"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.lobpcg": ["torch._jit_internal.is_scripting", "<builtin>.map", "overrides.has_torch_function", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg._lobpcg", "<builtin>.RuntimeError", "torch.jit.is_scripting", "overrides.handle_torch_function", "<builtin>.type", "<builtin>.set", "torch.autograd.Function.apply"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.__init__": ["torch.zeros"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.run": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG_call_tracker", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.stop_iteration", "torch.jit.is_scripting", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.update", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.call_tracker"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.__str__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.update": ["_linalg_utils.matmul", "torch.norm", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._update_ortho", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._update_basic", "<builtin>.float"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._update_ortho": ["_linalg_utils.transpose", "_linalg_utils.basis", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._get_ortho", "_linalg_utils.qform", "torch.matmul", "_linalg_utils.symeig", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._get_rayleigh_ritz_transform", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.update_converged_count", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.update_residual"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._update_basic": ["_linalg_utils.matmul", "_linalg_utils.qform", "torch.matmul", "_linalg_utils.symeig", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._get_rayleigh_ritz_transform", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.update_converged_count", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.update_residual"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.update_residual": ["_linalg_utils.matmul"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.update_converged_count": ["torch.norm"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.stop_iteration": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG.call_tracker": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG_call_tracker": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG": ["torch.jit.unused"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._get_rayleigh_ritz_transform": ["torch.inverse", "_linalg_utils.qform", "torch.linalg.cholesky"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._get_ortho": ["_linalg_utils.transpose", "_linalg_utils.matmul", "torch.numel", "torch.eye", "<builtin>.range", "torch.norm", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._get_svqb", "<builtin>.list", "torch.matmul", "<builtin>.ValueError", "<builtin>.float"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lobpcg.LOBPCG._get_svqb": ["_linalg_utils.transpose", "torch.numel", "<builtin>.abs", "_linalg_utils.qform", "torch.matmul", "<builtin>.len", "_linalg_utils.symeig", "torch.where"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lowrank": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lowrank.get_approximate_basis": ["torch.randn", "<builtin>.range", "_linalg_utils.matmul", "torch.linalg.qr", "_linalg_utils.transjugate", "_linalg_utils.get_floating_dtype"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lowrank.svd_lowrank": ["overrides.handle_torch_function", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lowrank._svd_lowrank", "overrides.has_torch_function", "torch.jit.is_scripting", "<builtin>.map", "<builtin>.set", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lowrank._svd_lowrank": ["torch.linalg.svd", "_linalg_utils.matmul", "_linalg_utils.conjugate", "_linalg_utils.transpose", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lowrank.get_approximate_basis"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lowrank.pca_lowrank": ["overrides.handle_torch_function", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_lowrank._svd_lowrank", "overrides.has_torch_function", "<builtin>.len", "torch.jit.is_scripting", "torch.sparse_coo_tensor", "torch.zeros", "<builtin>.min", "<builtin>.type", "<builtin>.ValueError", "_linalg_utils.is_sparse", "_linalg_utils.transpose", "_linalg_utils.get_floating_dtype", "torch.sparse.mm", "torch.ones", "torch.sparse.sum"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.check_serializing_named_tensor": ["<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.build_dim_map": ["collections.OrderedDict", "<builtin>.enumerate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.unzip_namedshape": ["<builtin>.zip", "<builtin>.len", "<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.RuntimeError", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.namer_api_name": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.is_ellipsis": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.single_ellipsis_index": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.is_ellipsis", "<builtin>.len", "<builtin>.RuntimeError", "<builtin>.enumerate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.expand_single_ellipsis": ["<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.replace_ellipsis_by_position": ["<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.expand_single_ellipsis"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.resolve_ellipsis": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.single_ellipsis_index", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.replace_ellipsis_by_position"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.update_names_with_list": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.namer_api_name", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.resolve_ellipsis"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.update_names_with_mapping": ["<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.namer_api_name", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.build_dim_map", "<builtin>.tuple"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.update_names": ["<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.update_names_with_list", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.update_names_with_mapping", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_namedtensor_internals.namer_api_name", "<builtin>.RuntimeError", "<builtin>.bool"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops": ["contextlib.contextmanager", "<builtin>.hasattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops._Ops.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops.dl_open_guard": ["sys.setdlopenflags", "sys.getdlopenflags"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops._OpNamespace.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops._OpNamespace.__getattr__": ["<builtin>.setattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops._Ops.__init__": ["<builtin>.super", "<builtin>.set"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops._Ops.__getattr__": ["<builtin>.setattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops._OpNamespace.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops._Ops.load_library": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_ops.dl_open_guard", "ctypes.CDLL"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.__init__": ["torch._C._dispatch_library", "torch._C._dispatch_check_invariants"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.keys": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.register": ["<builtin>.set", "<builtin>.RuntimeError", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher._format_line": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher._format_header": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher._format_line"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.rawRegistrations": ["torch._C._dispatch_dump"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.rawDispatchTable": ["torch._C._dispatch_dump_table"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.registrations": ["<builtin>.any", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher._format_header", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.rawRegistrations", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher._format_line"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.dispatchTable": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher._format_header", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher._format_line", "re.compile", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_python_dispatcher.PythonDispatcher.rawDispatchTable"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_six": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_six.with_metaclass": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_six.with_metaclass.metaclass.__new__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_six.with_metaclass.metaclass.__prepare__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_storage_docs": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_storage_docs.add_docstr_all"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_storage_docs.add_docstr_all": ["torch._C._add_docstr", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor._wrap_type_error_to_not_implemented": ["functools.wraps"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor._wrap_type_error_to_not_implemented.wrapped": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__rfloordiv__", "torch.overrides.handle_torch_function", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__rpow__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__floordiv__", "torch.overrides.has_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__rpow__": ["torch.tensor", "torch.result_type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__floordiv__": ["torch.floor_divide"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__rfloordiv__": ["torch.floor_divide"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor._rebuild_from_type": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__deepcopy__": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch._C._TensorBase.qscheme", "torch._C._TensorBase.q_zero_point", "torch._C._TensorBase.q_per_channel_scales", "torch._C._TensorBase.stride", "torch._C._TensorBase.storage_offset", "torch._C._TensorBase.clone", "torch._C._TensorBase.q_scale", "<builtin>.RuntimeError", "<builtin>.id", "torch._C._TensorBase.size", "torch._utils._rebuild_qtensor", "torch._C._TensorBase.q_per_channel_zero_points", "torch._C._TensorBase.q_per_channel_axis", "torch.no_grad", "torch._C._TensorBase.new", "torch._C._TensorBase.storage"], "torch._C._TensorBase.new": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__reduce_ex__": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor._reduce_ex_internal", "torch.overrides.handle_torch_function", "torch.overrides.has_torch_function", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor._reduce_ex_internal": ["collections.OrderedDict", "torch._C._TensorBase.storage_offset", "torch._C._TensorBase.stride", "torch._C._TensorBase.cpu", "torch._namedtensor_internals.check_serializing_named_tensor", "torch._C._TensorBase.qscheme", "<builtin>.RuntimeError", "torch._C._TensorBase.size", "<builtin>.str", "torch._C._TensorBase.q_per_channel_axis", "torch.overrides.handle_torch_function", "<builtin>.tuple", "torch._C._TensorBase.storage", "torch.overrides.has_torch_function_unary", "torch._C._TensorBase._indices", "torch._C._TensorBase._values", "torch._C._TensorBase.q_per_channel_scales", "torch._C._TensorBase.q_zero_point", "torch.utils.hooks.warn_if_has_hooks", "torch._C._TensorBase.q_scale", "torch._C._TensorBase.q_per_channel_zero_points", "<builtin>.NotImplementedError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__setstate__": ["torch.overrides.has_torch_function_unary", "<builtin>.len", "torch.overrides.handle_torch_function", "torch._C._TensorBase.set_", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__repr__": ["torch.overrides.has_torch_function_unary", "torch._tensor_str._str", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.backward": ["torch.overrides.has_torch_function_unary", "torch.autograd.backward", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.register_hook": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.grad_fn._register_hook_dict", "torch.overrides.handle_torch_function", "torch.utils.hooks.RemovableHandle", "collections.OrderedDict", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.reinforce": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.reinforce.trim", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.reinforce.trim": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor": ["torch._C._add_docstr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor._wrap_type_error_to_not_implemented"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.retain_grad": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "weakref.ref", "<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor._wrap_type_error_to_not_implemented.wrapped", "<builtin>.hasattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.retain_grad.retain_grad_hook": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.is_shared": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.storage", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.share_memory_": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.storage", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__reversed__": ["torch._C._TensorBase.dim", "torch.overrides.has_torch_function_unary", "torch._C._TensorBase.flip", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.norm": ["torch.overrides.has_torch_function_unary", "torch.norm", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.lu": ["torch.overrides.has_torch_function_unary", "torch._autograd_functions._LU.apply", "torch.overrides.handle_torch_function", "torch._jit_internal.is_scripting", "<builtin>.RuntimeError", "torch._C._TensorBase.size", "<builtin>.ValueError", "torch._lu_with_info"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.stft": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch.stft"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.istft": ["torch.overrides.has_torch_function_unary", "torch.istft", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.resize": ["torch.autograd._functions.Resize.apply", "torch.overrides.has_torch_function_unary", "warnings.warn", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.resize_as": ["torch.autograd._functions.Resize.apply", "warnings.warn", "torch.overrides.has_torch_function_variadic", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.split": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "<builtin>.isinstance", "<builtin>.int", "<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.unique": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch.unique"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.unique_consecutive": ["torch.unique_consecutive", "torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__rsub__": ["torch._C._VariableFunctions.rsub", "torch.overrides.has_torch_function_variadic", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__rdiv__": ["torch._C._TensorBase.reciprocal", "torch.overrides.has_torch_function_variadic", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__format__": ["torch._C._TensorBase.dim", "torch.overrides.has_torch_function_unary", "torch._C._TensorBase.item", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__ipow__": ["torch.overrides.has_torch_function_variadic", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__len__": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch._C._get_tracing_state", "warnings.warn", "torch._C._TensorBase.dim", "<builtin>.TypeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__iter__": ["<builtin>.TypeError", "torch._C._get_tracing_state", "warnings.warn", "torch._C._TensorBase.dim", "<builtin>.iter", "torch._C._TensorBase.unbind"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__hash__": ["torch.overrides.has_torch_function_unary", "<builtin>.id", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__dir__": ["<builtin>.dir", "torch.overrides.has_torch_function_unary", "torch._C._TensorBase.__dict__.keys", "torch.overrides.handle_torch_function", "<builtin>.list", "warnings.warn", "<builtin>.sorted"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__array__": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.numpy", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__array_wrap__": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "torch.from_numpy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__contains__": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__cuda_array_interface__": ["torch.overrides.has_torch_function_unary", "torch._C._TensorBase.type", "torch._C._TensorBase.data_ptr", "torch.overrides.handle_torch_function", "<builtin>.dict", "torch._C._TensorBase.is_contiguous", "torch._C._TensorBase.numel", "<builtin>.tuple", "<builtin>.AttributeError", "torch._C._TensorBase.stride", "<builtin>.RuntimeError", "torch._C._TensorBase.storage"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.refine_names": ["torch._namedtensor_internals.resolve_ellipsis", "torch.overrides.has_torch_function_unary", "<builtin>.super", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.align_to": ["torch._namedtensor_internals.is_ellipsis", "torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "<builtin>.super", "torch._namedtensor_internals.single_ellipsis_index"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.unflatten": ["torch.overrides.has_torch_function_unary", "torch.overrides.handle_torch_function", "<builtin>.isinstance", "<builtin>.RuntimeError", "torch._namedtensor_internals.unzip_namedshape", "<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.rename_": ["torch.overrides.has_torch_function_unary", "torch._namedtensor_internals.update_names", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.rename": ["torch.overrides.has_torch_function_unary", "torch._namedtensor_internals.update_names", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor._to_sparse_csr": ["torch._C._TensorBase.coalesce", "torch._sparse_csr_tensor", "<builtin>.len", "torch.tensor", "torch._C._TensorBase.to_sparse", "<builtin>.RuntimeError", "torch._C._TensorBase.size", "<builtin>.range"], "torch._sparse_csr_tensor": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor._update_names": ["torch.overrides.has_torch_function_unary", "<builtin>.super", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.grad": ["warnings.warn", "torch.overrides.has_torch_function_unary", "<builtin>.hasattr", "torch.overrides.handle_torch_function"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor.Tensor.__torch_function__": ["<builtin>.issubclass", "torch._C.DisableTorchFunction", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor._convert", "<builtin>.all"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor._convert": ["<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor._convert", "<builtin>.type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_docs": ["_torch_docs.parse_kwargs", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_docs.add_docstr_all"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_docs.add_docstr_all": ["<builtin>.getattr", "torch._C._add_docstr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str.set_printoptions": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._Formatter.__init__": ["torch.masked_select", "<builtin>.len", "torch.no_grad", "torch.isfinite", "torch.ceil", "<builtin>.max"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._Formatter.width": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._Formatter.format": ["math.isnan", "<builtin>.len", "math.isinf"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._scalar_str": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._Formatter.format", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._scalar_str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._vector_str": ["math.floor", "<builtin>.len", "<builtin>.int", "<builtin>.range", "<builtin>.max", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._Formatter.width", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._vector_str._val_formatter"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._vector_str._val_formatter": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._Formatter.format"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._tensor_str_with_formatter": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._tensor_str_with_formatter", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._scalar_str", "<builtin>.range", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._vector_str"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._tensor_str": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._tensor_str_with_formatter", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._Formatter.__init__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str.get_summarized_data"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str.get_summarized_data": ["<builtin>.len", "<builtin>.range", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str.get_summarized_data", "torch.stack", "torch.cat"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._add_suffixes": ["<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._str_intern": ["torch.cuda.current_device", "<builtin>.str", "<builtin>.len", "<builtin>.type", "torch.autograd.forward_ad.unpack_dual", "torch._C._get_default_device", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._tensor_str", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._add_suffixes", "torch.get_default_dtype", "<builtin>.tuple"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._str": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_tensor_str._str_intern", "torch.no_grad"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_torch_docs": ["torch._C._add_docstr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_torch_docs.merge_dicts", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_torch_docs.parse_kwargs"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_torch_docs.parse_kwargs": ["re.compile", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_torch_docs.merge_dicts": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._type": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._import_dotted_name", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_async_or_non_blocking", "torch.Tensor._indices", "torch.Tensor._values"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_async_or_non_blocking": ["<builtin>.len", "warnings.warn", "<builtin>.list", "<builtin>.TypeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._import_dotted_name": ["<builtin>.__import__", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._cuda": ["<builtin>.getattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_async_or_non_blocking", "torch.cuda.device", "torch.cuda.current_device", "torch.Tensor._indices", "torch.Tensor._values"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._rebuild_tensor": ["torch.tensor"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._rebuild_tensor_v2": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._rebuild_tensor"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._validate_loaded_sparse_tensors": ["torch._validate_sparse_coo_tensor_args"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._rebuild_sparse_tensor": ["<builtin>.NotImplementedError", "torch._sparse_coo_tensor_unsafe"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._rebuild_xla_tensor": ["torch.from_numpy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._rebuild_mlc_tensor": ["torch.from_numpy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._rebuild_qtensor": ["<builtin>.type", "torch._empty_per_channel_affine_quantized", "<builtin>.RuntimeError", "torch._empty_affine_quantized", "torch.tensor"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._rebuild_parameter": ["torch.nn.Parameter"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._accumulate": ["<builtin>.iter", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.<lambda1>", "<builtin>.next"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.<lambda1>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._flatten_dense_tensors": ["torch._C._nn.flatten_dense_tensors"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._flatten_sparse_tensors": ["torch._C._nn.flatten_dense_tensors", "torch.Tensor._values", "torch.Tensor._indices"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._unflatten_dense_tensors": ["torch._C._nn.unflatten_dense_tensors"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._unflatten_sparse_tensors": ["torch._C._nn.unflatten_dense_tensors", "<builtin>.zip", "torch.Tensor._indices", "torch.Tensor._values", "<builtin>.tuple"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._reorder_tensors_as": ["<builtin>.tuple", "<builtin>.iter", "collections.defaultdict", "<builtin>.next"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._take_tensors": ["<builtin>.len", "torch.Tensor._values", "collections.defaultdict", "torch.Tensor._indices"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._take_tensors.<lambda1>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.annotate": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.annotate.dec": ["<builtin>.dict"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.KeyErrorMessage.__repr__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.ExceptionWrapper.__init__": ["traceback.format_exception", "sys.exc_info"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.ExceptionWrapper.reraise": ["<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_available_device_type": ["torch.cuda.is_available"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_device_attr": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_current_device_index.<lambda1>", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_all_device_indices.<lambda1>", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_devices_properties.<lambda1>", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_available_device_type"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_current_device_index.<lambda1>": ["torch.cuda.current_device"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_all_device_indices.<lambda1>": ["torch.cuda.device_count", "<builtin>.range", "<builtin>.list"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_devices_properties.<lambda1>": ["torch.cuda.get_device_properties"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_current_device_index": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_device_attr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_all_device_indices": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_device_attr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_devices_properties": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_device_attr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.get_current_device_index": ["torch.cuda.device_count", "torch.cuda.current_device"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_device_index": ["<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils.get_current_device_index", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._get_current_device_index", "<builtin>.ValueError", "torch.device", "torch.jit.is_scripting"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils._handle_complex": ["<builtin>.isinstance", "torch.view_as_real"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils_internal": ["os.path.dirname", "os.path.basename"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils_internal.get_file_path": ["os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils_internal.get_file_path_2": ["os.path.join"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils_internal.get_writable_path": ["tempfile.mkdtemp", "os.access", "os.path.basename"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils_internal.prepare_multiprocessing_environment": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils_internal.resolve_library_path": ["os.path.realpath"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_utils_internal.get_source_lines_and_file": ["<builtin>.OSError", "inspect.getsourcelines", "inspect.getsourcefile"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_VF": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_VF.VFModule.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_VF.VFModule.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_VF.VFModule.__getattr__": ["<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._validate_and_get_batch_size": ["<builtin>.any", "<builtin>.ValueError", "<builtin>.zip"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._num_outputs": ["<builtin>.isinstance", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._as_tuple": ["<builtin>.ValueError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._unwrap_batched.<lambda1>", "<builtin>.isinstance", "<builtin>.len"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._unwrap_batched.<lambda1>": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._get_name"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._create_batched_inputs": ["torch.utils._pytree.tree_flatten", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._validate_and_get_batch_size", "torch._add_batch_dim", "<builtin>.isinstance", "torch.utils._pytree.tree_unflatten", "torch.utils._pytree._broadcast_to_and_flatten", "<builtin>.type", "<builtin>.len", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._get_name", "<builtin>.ValueError", "<builtin>.zip"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._get_name": ["<builtin>.repr", "<builtin>.hasattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._unwrap_batched": ["<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._as_tuple", "torch._remove_batch_dim", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._num_outputs", "<builtin>.tuple", "<builtin>.zip"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._validate_outputs": ["<builtin>.isinstance", "<builtin>.type", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._get_name", "<builtin>.ValueError", "<builtin>.enumerate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._check_out_dims_is_int_or_int_tuple": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._get_name", "<builtin>.isinstance", "<builtin>.all", "<builtin>.ValueError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals.vmap": ["warnings.warn", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._vmap"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._vmap": ["functools.wraps"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._vmap.wrapped": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._unwrap_batched", "torch._C._vmapmode_decrement_nesting", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._create_batched_inputs", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._validate_outputs", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\_vmap_internals._check_out_dims_is_int_or_int_tuple", "torch._C._vmapmode_increment_nesting"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\__config__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\__config__.show": ["torch._C._show_config"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\__config__._cxx_flags": ["torch._C._cxx_flags"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\__config__.parallel_info": ["torch._C._parallel_info"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\__future__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\__future__.set_overwrite_module_params_on_conversion": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\__future__.get_overwrite_module_params_on_conversion": [], "build_activation_images": ["pylab.ylim", "pylab.grid", "matplotlib.use", "pylab.clf", "pylab.title", "<builtin>.print", "pylab.savefig", "build_activation_images.plot_function", "pylab.ylabel", "pylab.xlim", "pylab.xlabel"], "matplotlib.use": [], "build_activation_images.plot_function": ["pylab.plot"], "pylab.plot": [], "pylab.clf": [], "pylab.grid": [], "pylab.title": [], "pylab.xlabel": [], "pylab.ylabel": [], "pylab.xlim": [], "pylab.ylim": [], "pylab.savefig": [], "matmul_bench": ["matmul_bench.parse_args", "torch.cuda.is_available", "matmul_bench.get_tasks", "<builtin>.enumerate", "os.path.join", "torch.utils.benchmark.Compare", "utils.load_dlmc_dataset", "sys.stdout.flush", "torch.utils.benchmark.Timer", "<builtin>.len", "<builtin>.print", "<builtin>.RuntimeError"], "matmul_bench.scipy_matmul": ["scipy.sparse.isspmatrix"], "scipy.sparse.isspmatrix": [], "matmul_bench.matmul_backward": [], "matmul_bench.sparse_matmul_backward": ["torch.sparse.mm"], "matmul_bench.parse_args": ["argparse.ArgumentParser", "<builtin>.iter", "<builtin>.next"], "matmul_bench.get_tasks": ["matmul_bench.get_tasks.filter_ops"], "matmul_bench.get_tasks.filter_ops": ["<builtin>.filter", "<builtin>.list"], "utils.load_dlmc_dataset": ["utils.load_spmm_dataset", "utils.sparse_grad_output", "utils.to_coo_scipy", "utils.load_spmv_dataset"], "utils.to_coo_scipy": ["scipy.sparse.coo_matrix"], "utils.sparse_grad_output": ["torch.rand_like", "torch.sparse.mm"], "utils.read_matrix_params": ["<builtin>.open", "<builtin>.map"], "utils.read_matrix_params.<lambda1>": ["<builtin>.int"], "utils.csr_to_coo": ["torch.tensor", "<builtin>.len", "<builtin>.range"], "utils.load_sparse_matrix": ["<builtin>.list", "<builtin>.map", "<builtin>.open", "torch.sparse_coo_tensor", "utils.csr_to_coo", "torch.randn"], "utils.load_sparse_matrix.<lambda1>": ["<builtin>.int"], "utils.load_sparse_matrix.<lambda2>": ["<builtin>.int"], "utils.load_sparse_matrix.<lambda3>": ["<builtin>.int"], "utils.gen_vector": ["<builtin>.open", "<builtin>.map", "torch.randn"], "utils.gen_vector.<lambda1>": ["<builtin>.int"], "utils.gen_vector.<lambda2>": ["<builtin>.int"], "utils.gen_vector.<lambda3>": ["<builtin>.int"], "utils.gen_matrix": ["<builtin>.open", "<builtin>.map", "torch.randn"], "utils.gen_matrix.<lambda1>": ["<builtin>.int"], "utils.gen_matrix.<lambda2>": ["<builtin>.int"], "utils.gen_matrix.<lambda3>": ["<builtin>.int"], "utils.load_spmv_dataset": ["pathlib.Path", "utils.gen_vector", "<builtin>.zip", "utils.read_matrix_params", "utils.load_sparse_matrix", "<builtin>.print"], "utils.load_spmm_dataset": ["pathlib.Path", "<builtin>.zip", "utils.read_matrix_params", "utils.gen_matrix", "utils.load_sparse_matrix", "<builtin>.print"], "linear.LinearPackedParams._get_name": [], "torch.ops.sparse.qlinear_prepack": [], "torch.ops.sparse.qlinear": [], "utils.is_valid_linear_block_sparse_pattern": [], "utils.LinearBlockSparsePattern": ["threading.RLock"], "utils.LinearBlockSparsePattern.__init__": ["utils.is_valid_linear_block_sparse_pattern"], "utils.LinearBlockSparsePattern.__enter__": [], "utils.LinearBlockSparsePattern.__exit__": [], "utils.LinearBlockSparsePattern.block_size": [], "base_scheduler": [], "base_scheduler.BaseScheduler.__init__": ["base_scheduler.BaseScheduler.step", "<builtin>.isinstance", "<builtin>.TypeError", "base_scheduler.BaseScheduler.__init__.with_counter", "<builtin>.type"], "base_scheduler.BaseScheduler.__init__.with_counter": ["<builtin>.getattr", "weakref.ref", "functools.wraps"], "base_scheduler.BaseScheduler.__init__.with_counter.wrapper": [], "base_scheduler.BaseScheduler.step": ["<builtin>.zip", "base_scheduler.BaseScheduler.print_sl", "<builtin>.enumerate", "warnings.warn", "<builtin>.hasattr", "base_scheduler.BaseScheduler.step._enable_get_sl_call.__init__", "base_scheduler.BaseScheduler.get_sl"], "base_scheduler.BaseScheduler.state_dict": [], "base_scheduler.BaseScheduler.load_state_dict": [], "base_scheduler.BaseScheduler.get_last_sl": [], "base_scheduler.BaseScheduler.get_sl": ["warnings.warn"], "base_scheduler.BaseScheduler.print_sl": ["<builtin>.print"], "base_scheduler.BaseScheduler.__repr__": [], "base_scheduler.BaseScheduler.step._enable_get_sl_call.__init__": [], "base_scheduler.BaseScheduler.step._enable_get_sl_call.__enter__": [], "base_scheduler.BaseScheduler.step._enable_get_sl_call.__exit__": [], "lambda_scheduler": [], "lambda_scheduler.LambdaSL.__init__": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.super", "<builtin>.list", "<builtin>.isinstance"], "lambda_scheduler.LambdaSL.get_sl": ["<builtin>.zip", "warnings.warn"], "base_sparsifier": [], "base_sparsifier._module_to_fqn": ["base_sparsifier._module_to_fqn"], "base_sparsifier._fqn_to_module": ["<builtin>.getattr"], "base_sparsifier.BaseSparsifier.__init__": ["<builtin>.dict", "collections.defaultdict", "<builtin>.super"], "base_sparsifier.BaseSparsifier.__getstate__": [], "base_sparsifier.BaseSparsifier.__setstate__": ["abc.ABC.__dict__.update"], "base_sparsifier.BaseSparsifier.__repr__": ["<builtin>.enumerate", "<builtin>.sorted"], "base_sparsifier.BaseSparsifier._pack_state": ["collections.defaultdict", "<builtin>.isinstance"], "base_sparsifier.BaseSparsifier.state_dict": ["base_sparsifier.BaseSparsifier._pack_state", "<builtin>.dict", "<builtin>.filter"], "base_sparsifier.BaseSparsifier.state_dict.<lambda1>": [], "base_sparsifier.BaseSparsifier.load_state_dict": ["<builtin>.RuntimeError", "torch.ones", "torch.nn.utils.parametrize.register_parametrization", "copy.deepcopy", "utils.FakeSparsity", "<builtin>.isinstance", "base_sparsifier._fqn_to_module", "base_sparsifier.BaseSparsifier.__setstate__"], "utils.FakeSparsity": [], "base_sparsifier.BaseSparsifier.prepare": ["copy.deepcopy", "<builtin>.type", "<builtin>.isinstance", "base_sparsifier.BaseSparsifier._prepare", "base_sparsifier._module_to_fqn"], "base_sparsifier.BaseSparsifier._prepare": ["torch.ones", "torch.nn.utils.parametrize.register_parametrization"], "base_sparsifier.BaseSparsifier.squash_mask": ["torch.nn.utils.parametrize.remove_parametrizations"], "base_sparsifier.BaseSparsifier.convert": ["<builtin>.NotImplementedError"], "base_sparsifier.BaseSparsifier.step": ["base_sparsifier.BaseSparsifier.update_mask", "torch.no_grad"], "base_sparsifier.BaseSparsifier.update_mask": [], "base_sparsifier.BaseSparsifier": ["abc.abstractmethod"], "utils.FakeSparsity.__init__": ["<builtin>.super", "torch.nn.Module.register_buffer"], "utils.FakeSparsity.forward": [], "weight_norm_sparsifier": [], "weight_norm_sparsifier._flat_idx_to_2d": [], "weight_norm_sparsifier.WeightNormSparsifier.__init__": ["<builtin>.super", "functools.reduce"], "weight_norm_sparsifier.WeightNormSparsifier.__init__.<lambda1>": [], "weight_norm_sparsifier.WeightNormSparsifier.update_mask": ["<builtin>.zip", "<builtin>.round", "torch.nn.functional.avg_pool2d", "torch.zeros", "weight_norm_sparsifier._flat_idx_to_2d", "torch.ones", "functools.reduce", "<builtin>.NotImplementedError", "<builtin>.len", "torch.sort", "<builtin>.int"], "weight_norm_sparsifier.WeightNormSparsifier.update_mask.<lambda1>": [], "function_wrapper": [], "gen_vulkan_glsl": ["sys.exit", "gen_vulkan_glsl.main"], "gen_vulkan_glsl.findAllGlsls": ["os.popen", "<builtin>.len"], "os.popen": [], "gen_vulkan_glsl.getName": ["os.path.basename"], "gen_vulkan_glsl.genCppH": ["<builtin>.open", "gen_vulkan_glsl.getName", "<builtin>.len", "tools.codegen.code_template.CodeTemplate.from_file", "<builtin>.print"], "gen_vulkan_glsl.parse_arg_env": [], "gen_vulkan_glsl.main": ["os.makedirs", "gen_vulkan_glsl.parse_arg_env", "gen_vulkan_glsl.findAllGlsls", "os.path.exists", "gen_vulkan_glsl.genCppH", "argparse.ArgumentParser"], "gen_vulkan_spv": ["sys.exit", "gen_vulkan_spv.main"], "gen_vulkan_spv.getName": ["os.path.basename"], "gen_vulkan_spv.genCppH": ["tools.codegen.code_template.CodeTemplate.from_file", "array.array", "<builtin>.len", "subprocess.check_call", "gen_vulkan_spv.getName", "<builtin>.print", "os.popen", "<builtin>.open"], "gen_vulkan_spv.parse_arg_env": [], "gen_vulkan_spv.main": ["gen_vulkan_spv.parse_arg_env", "argparse.ArgumentParser", "os.path.exists", "os.makedirs", "gen_vulkan_spv.genCppH"], "jit_plugin": ["time.time", "coverage.CoverageData"], "coverage.CoverageData": [], "jit_plugin.is_not_builtin_class": ["<builtin>.type", "inspect.isclass"], "jit_plugin.JitPlugin.dynamic_context": ["jit_plugin.is_not_builtin_class", "<builtin>.len", "<builtin>.super", "inspect.iscode", "inspect.getsourcefile", "inspect.getsourcelines", "inspect.ismethod", "<builtin>.range", "inspect.ismodule", "inspect.isfunction"], "inspect.ismodule": [], "inspect.ismethod": [], "inspect.isfunction": [], "inspect.iscode": [], "jit_plugin.coverage_init": ["coverage.CoveragePlugin.__init__"], "coverage.CoveragePlugin.__init__": [], "layout": [], "layout.SkipLayout.__init__": ["<builtin>.range"], "layout.SkipLayout.copy_policy": [], "layout.SkipLayout.requires_copy": [], "layout.inspect_skip_layout": ["layout.SkipLayout.__init__", "<builtin>.isinstance", "<builtin>.enumerate", "layout.inspect_skip_layout.inspect_layer", "<builtin>.len"], "layout.inspect_skip_layout.inspect_layer": ["<builtin>.isinstance"], "namespace": ["<builtin>.type"], "namespace.Namespace.__init__": ["uuid.uuid4"], "namespace.Namespace.__repr__": [], "namespace.Namespace.__hash__": ["<builtin>.hash"], "namespace.Namespace.__lt__": ["<builtin>.isinstance"], "namespace.Namespace.__eq__": ["<builtin>.isinstance"], "tracker": ["tracker.ThreadLocal.__init__", "contextlib.contextmanager"], "tracker.SkipTracker.__init__": [], "tracker.SkipTracker.save": [], "tracker.SkipTracker.load": [], "tracker.SkipTracker.copy": ["<builtin>.TypeError"], "tracker.SkipTrackerThroughPotals.__init__": ["<builtin>.super"], "tracker.SkipTrackerThroughPotals.save": ["checkpoint.is_checkpointing", "portal.Portal", "<builtin>.super", "dependency.join"], "portal.Portal": [], "tracker.SkipTrackerThroughPotals.load": ["dependency.fork", "<builtin>.super"], "tracker.SkipTrackerThroughPotals.copy": ["dependency.fork", "dependency.join"], "tracker.ThreadLocal.__init__": [], "tracker.use_skip_tracker": [], "tracker.current_skip_tracker": ["tracker.SkipTracker.__init__"], "profile.layerwise_sandbox": ["copy.deepcopy"], "profile.detach": ["<builtin>.enumerate"], "profile.profile_times": ["time.time", "profile.detach", "microbatch.Batch", "torch.cuda.synchronize", "<builtin>.sum", "profile.layerwise_sandbox", "<builtin>.tuple", "torch.autograd.backward", "<builtin>.enumerate", "<builtin>.any", "<builtin>.ValueError", "<builtin>.int"], "profile.profile_sizes": ["profile.detach", "microbatch.Batch", "<builtin>.sum", "torch.cuda.memory_allocated", "<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.int", "profile.layerwise_sandbox"], "bisect": ["click.option", "bisect.bisect", "click.command"], "bisect.test": ["<builtin>.print", "subprocess.run"], "bisect.bisect.keep_going": ["<builtin>.range"], "trace_model": ["torch.rand", "torch.utils.mobile_optimizer.optimize_for_mobile", "torchvision.models.mobilenet_v2", "torch.jit.script"], "torch.utils.mobile_optimizer.optimize_for_mobile": [], "custom_build": ["yaml.dump", "<builtin>.open", "torch.jit.trace", "torch.rand", "torchvision.models.mobilenet_v2", "torch.jit.export_opnames"], "autocast_test_lists": [], "autocast_test_lists.AutocastTestLists._rnn_cell_args": ["torch.randn"], "autocast_test_lists.AutocastTestLists.__init__": ["<builtin>.super", "torch.nn._reduction.get_enum", "torch.ones", "torch.randint", "torch.tensor", "torch.rand", "autocast_test_lists.AutocastTestLists._rnn_cell_args", "torch.zeros", "torch.randn"], "torch.nn._reduction.get_enum": [], "autocast_test_lists.AutocastCPUTestLists.__init__": ["<builtin>.super", "torch.randn", "torch.rand"], "common_cuda": ["torch.cuda.get_device_capability", "torch.version.cuda.startswith", "contextlib.contextmanager", "setuptools.distutils.version.LooseVersion", "torch.backends.cudnn.version", "torch.ones", "torch.tensor", "torch.cuda.is_available", "torch.device", "torch.cuda.device_count", "torch.backends.cudnn.is_acceptable"], "torch.backends.cudnn.version": [], "setuptools.distutils.version.LooseVersion": [], "torch.version.cuda.startswith": [], "torch.cuda.get_device_capability": [], "common_cuda.initialize_cuda_context_rng": ["torch.randn", "<builtin>.range", "torch.cuda.device_count"], "common_cuda.tf32_is_not_fp32": ["<builtin>.int", "torch.cuda.get_device_properties", "torch.cuda.is_available", "torch.version.cuda.split", "torch.cuda.current_device"], "torch.version.cuda.split": [], "common_cuda.tf32_off": ["torch.backends.cudnn.flags"], "common_cuda.tf32_on": ["torch.backends.cudnn.flags"], "common_cuda.tf32_on_and_off": [], "common_cuda.tf32_on_and_off.with_tf32_disabled": ["common_cuda.tf32_off", "common_cuda.tf32_on_and_off.wrapper.wrapped.<lambda1>"], "common_cuda.tf32_on_and_off.wrapper.wrapped.<lambda1>": [], "common_cuda.tf32_on_and_off.with_tf32_enabled": ["common_cuda.tf32_on_and_off.wrapper.wrapped.<lambda2>", "common_cuda.tf32_on"], "common_cuda.tf32_on_and_off.wrapper.wrapped.<lambda2>": [], "common_cuda.tf32_on_and_off.wrapper": ["functools.wraps", "inspect.signature", "<builtin>.tuple"], "common_cuda.tf32_on_and_off.wrapper.wrapped": ["common_cuda.tf32_on_and_off.with_tf32_enabled", "common_cuda.tf32_on_and_off.with_tf32_disabled", "torch.device", "<builtin>.zip", "common_cuda.tf32_is_not_fp32"], "common_cuda.with_tf32_off": ["functools.wraps"], "common_cuda.with_tf32_off.wrapped": ["common_cuda.tf32_off"], "common_cuda._get_torch_cuda_version": ["<builtin>.int", "<builtin>.str", "<builtin>.tuple"], "common_device_type": ["runpy.run_path", "<builtin>.globals", "collections.namedtuple", "os.getenv", "os.environ.get", "common_device_type.get_device_type_test_bases"], "common_device_type._dtype_name": ["<builtin>.str"], "common_device_type._dtype_test_suffix": ["<builtin>.isinstance", "<builtin>.len", "common_device_type._dtype_name"], "common_device_type._update_param_kwargs": ["<builtin>.isinstance"], "common_device_type.DeviceTypeTestBase": ["threading.local"], "common_device_type.DeviceTypeTestBase.precision": [], "common_device_type.DeviceTypeTestBase.rel_tol": [], "common_device_type.DeviceTypeTestBase.get_primary_device": [], "common_device_type.DeviceTypeTestBase.get_all_devices": ["common_device_type.DeviceTypeTestBase.get_primary_device"], "common_device_type.DeviceTypeTestBase._get_dtypes": ["<builtin>.hasattr"], "common_device_type.DeviceTypeTestBase._get_precision_override": ["<builtin>.hasattr"], "common_device_type.DeviceTypeTestBase._get_tolerance_override": ["<builtin>.hasattr"], "common_device_type.DeviceTypeTestBase._apply_precision_override_for_test": ["common_device_type.DeviceTypeTestBase._get_tolerance_override", "common_device_type.DeviceTypeTestBase._get_precision_override"], "common_device_type.DeviceTypeTestBase.instantiate_test": ["common_device_type._update_param_kwargs", "common_device_type.DeviceTypeTestBase._get_dtypes", "<builtin>.hasattr", "common_device_type._dtype_test_suffix", "<builtin>.tuple", "common_device_type.DeviceTypeTestBase.instantiate_test.instantiate_test_helper"], "common_device_type.DeviceTypeTestBase.instantiate_test.instantiate_test_helper": ["functools.wraps", "<builtin>.hasattr", "<builtin>.setattr"], "common_device_type.DeviceTypeTestBase.instantiate_test.instantiate_test_helper.instantiated_test": ["common_device_type._update_param_kwargs", "inspect.signature", "common_device_type.DeviceTypeTestBase.get_primary_device", "<builtin>.hasattr", "common_device_type.DeviceTypeTestBase.get_all_devices"], "common_device_type.DeviceTypeTestBase.run": ["<builtin>.super"], "common_device_type.CPUTestBase._should_stop_test_suite": [], "common_device_type.MetaTestBase._should_stop_test_suite": [], "common_device_type.CUDATestBase.has_cudnn": [], "common_device_type.CUDATestBase.get_primary_device": [], "common_device_type.CUDATestBase.get_all_devices": ["torch.cuda.device_count", "common_device_type.CUDATestBase.get_primary_device", "torch.testing._internal.common_utils.TestCase.primary_device.split", "<builtin>.int", "<builtin>.range"], "torch.testing._internal.common_utils.TestCase.primary_device.split": [], "common_device_type.CUDATestBase.setUpClass": ["torch.backends.cudnn.version", "torch.ones", "torch.cuda.current_device", "torch.backends.cudnn.is_acceptable"], "common_device_type.get_device_type_test_bases": ["torch.cuda.is_available", "<builtin>.list"], "common_device_type.filter_desired_device_types": ["<builtin>.filter", "<builtin>.set", "<builtin>.list"], "common_device_type.filter_desired_device_types.<lambda1>": [], "common_device_type.filter_desired_device_types.<lambda2>": [], "runpy.run_path": [], "common_device_type.instantiate_device_type_tests": ["<builtin>.getattr", "<builtin>.set", "inspect.signature", "copy.deepcopy", "<builtin>.type", "os.getenv", "common_device_type.instantiate_device_type_tests.split_if_not_empty", "<builtin>.len", "common_device_type.filter_desired_device_types", "<builtin>.setattr"], "common_device_type.instantiate_device_type_tests.split_if_not_empty": ["<builtin>.len"], "common_device_type._TestParametrizer._parametrize_test": [], "common_device_type._TestParametrizer.__call__": [], "common_device_type.ops.__init__": ["<builtin>.set"], "common_device_type.ops._parametrize_test": ["torch.testing.get_all_dtypes", "functools.wraps", "common_device_type._update_param_kwargs", "<builtin>.RuntimeError", "<builtin>.set", "common_device_type._dtype_test_suffix", "common_device_type.skipIf.__init__", "<builtin>.print"], "torch.testing.get_all_dtypes": [], "common_device_type.skipIf.__init__": [], "common_device_type.ops._parametrize_test.test_wrapper": [], "common_device_type.skipIf.__call__": ["functools.wraps"], "common_device_type.skipIf.__call__.dep_fn": ["<builtin>.isinstance", "<builtin>.getattr", "unittest.SkipTest"], "common_device_type.skipCPUIf.__init__": ["<builtin>.super"], "common_device_type.skipCUDAIf.__init__": ["<builtin>.super"], "common_device_type.skipMetaIf.__init__": ["<builtin>.super"], "common_device_type._has_sufficient_memory": ["torch.cuda.is_available", "gc.collect", "psutil.virtual_memory", "unittest.SkipTest", "torch.cuda.empty_cache", "torch.cuda.memory_allocated", "torch.device", "torch.cuda.get_device_properties"], "torch.cuda.empty_cache": [], "psutil.virtual_memory": [], "common_device_type.largeTensorTest": ["<builtin>.isinstance", "<builtin>.int"], "common_device_type.largeTensorTest.inner": ["functools.wraps"], "common_device_type.largeTensorTest.inner.dep_fn": ["common_device_type._has_sufficient_memory", "<builtin>.callable", "unittest.SkipTest"], "common_device_type.expectedFailure.__init__": [], "common_device_type.expectedFailure.__call__": ["functools.wraps"], "common_device_type.expectedFailure.__call__.efail_fn": [], "common_device_type.onlyOn.__init__": [], "common_device_type.onlyOn.__call__": ["functools.wraps"], "common_device_type.onlyOn.__call__.only_fn": ["unittest.SkipTest"], "common_device_type.deviceCountAtLeast.__init__": [], "common_device_type.deviceCountAtLeast.__call__": ["functools.wraps", "<builtin>.hasattr"], "common_device_type.deviceCountAtLeast.__call__.multi_fn": ["unittest.SkipTest", "<builtin>.len"], "common_device_type.onlyOnCPUAndCUDA": ["functools.wraps"], "common_device_type.onlyOnCPUAndCUDA.only_fn": ["unittest.SkipTest"], "common_device_type.precisionOverride.__init__": ["<builtin>.isinstance"], "common_device_type.precisionOverride.__call__": [], "common_device_type.toleranceOverride.__init__": ["<builtin>.isinstance"], "common_device_type.toleranceOverride.__call__": [], "common_device_type.dtypes.__init__": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.all", "<builtin>.len"], "common_device_type.dtypes.__call__": ["<builtin>.getattr"], "common_device_type.dtypesIfCPU.__init__": ["<builtin>.super"], "common_device_type.dtypesIfCUDA.__init__": ["<builtin>.super"], "common_device_type.onlyCPU": ["common_device_type.onlyOn.__init__"], "common_device_type.onlyCUDA": ["common_device_type.onlyOn.__init__"], "common_device_type.expectedFailureCUDA": ["common_device_type.expectedFailure.__init__"], "common_device_type.expectedFailureMeta": ["common_device_type.expectedFailure.__init__"], "common_device_type.expectedAlertNondeterministic.__init__": [], "common_device_type.expectedAlertNondeterministic.__call__": ["functools.wraps"], "common_device_type.expectedAlertNondeterministic.__call__.efail_fn": ["torch.testing._internal.common_utils.DeterministicGuard", "<builtin>.str"], "torch.testing._internal.common_utils.DeterministicGuard": [], "common_device_type.expectedAlertNondeterministic.__call__.efail_fn_no_device": ["common_device_type.expectedAlertNondeterministic.__call__.efail_fn"], "common_device_type.skipCPUIfNoLapack": ["common_device_type.skipCPUIf.__init__"], "common_device_type.skipCPUIfNoFFT": ["common_device_type.skipCPUIf.__init__"], "common_device_type.skipCPUIfNoMkl": ["common_device_type.skipCPUIf.__init__"], "common_device_type.skipCUDAIfNoMagma": ["common_device_type.skipCUDAIf.__init__", "torch.testing._internal.common_utils.skipCUDANonDefaultStreamIf"], "torch.testing._internal.common_utils.skipCUDANonDefaultStreamIf": [], "common_device_type.skipCUDAIfNoCusolver": ["torch.testing._internal.common_cuda._get_torch_cuda_version", "common_device_type.skipCUDAIf.__init__"], "torch.testing._internal.common_cuda._get_torch_cuda_version": [], "common_device_type.skipCUDAIfNoMagmaAndNoCusolver": ["torch.testing._internal.common_cuda._get_torch_cuda_version", "common_device_type.skipCUDAIfNoMagma"], "common_device_type.skipCUDAIfRocm": ["common_device_type.skipCUDAIf.__init__"], "common_device_type.skipCUDAIfNotRocm": ["common_device_type.skipCUDAIf.__init__"], "common_device_type.skipCUDAVersionIn": [], "common_device_type.skipCUDAVersionIn.dec_fn": ["functools.wraps"], "common_device_type.skipCUDAVersionIn.dec_fn.wrap_fn": ["torch.testing._internal.common_cuda._get_torch_cuda_version", "unittest.SkipTest"], "common_device_type.skipCUDAIfCudnnVersionLessThan": [], "common_device_type.skipCUDAIfCudnnVersionLessThan.dec_fn": ["functools.wraps"], "common_device_type.skipCUDAIfCudnnVersionLessThan.dec_fn.wrap_fn": ["unittest.SkipTest"], "common_device_type.skipCUDAIfNoCudnn": ["common_device_type.skipCUDAIfCudnnVersionLessThan.dec_fn", "common_device_type.skipCUDAIfCudnnVersionLessThan"], "common_device_type.skipMeta": ["common_device_type.skipMetaIf.__init__"], "common_distributed": ["contextlib.contextmanager", "typing.NamedTuple.__init__", "torch.testing._internal.common_utils.retry_on_connect_failures", "logging.getLogger"], "common_distributed.skip_if_no_gpu": ["functools.wraps"], "common_distributed.skip_if_no_gpu.wrapper": ["torch.cuda.is_available", "<builtin>.int", "torch.cuda.device_count", "sys.exit"], "common_distributed.skip_if_small_worldsize": ["functools.wraps"], "common_distributed.skip_if_small_worldsize.wrapper": ["<builtin>.int", "sys.exit"], "common_distributed.require_n_gpus_for_nccl_backend": [], "common_distributed.require_n_gpus_for_nccl_backend.decorator": ["functools.wraps"], "common_distributed.require_n_gpus_for_nccl_backend.decorator.wrapper": ["torch.cuda.device_count", "sys.exit"], "common_distributed.skip_if_lt_x_gpu": [], "common_distributed.skip_if_lt_x_gpu.decorator": ["functools.wraps"], "common_distributed.skip_if_lt_x_gpu.decorator.wrapper": ["torch.cuda.is_available", "torch.cuda.device_count", "sys.exit"], "common_distributed.nccl_skip_if_lt_x_gpu": [], "common_distributed.nccl_skip_if_lt_x_gpu.decorator": ["functools.wraps"], "common_distributed.nccl_skip_if_lt_x_gpu.decorator.wrapper": ["torch.cuda.is_available", "torch.cuda.device_count", "sys.exit"], "common_distributed.verify_ddp_error_logged": [], "common_distributed.with_nccl_blocking_wait": ["functools.wraps"], "common_distributed.with_nccl_blocking_wait.wrapper": [], "common_distributed.with_dist_debug_levels": [], "common_distributed.with_dist_debug_levels.decorator": ["functools.wraps"], "common_distributed.with_dist_debug_levels.decorator.wrapper": ["os.environ.get"], "common_distributed.requires_gloo": ["torch.testing._internal.common_utils.sandcastle_skip_if", "torch.distributed.is_gloo_available"], "torch.distributed.is_gloo_available": [], "common_distributed.requires_nccl_version": ["torch.testing._internal.common_utils.sandcastle_skip", "torch.distributed.is_nccl_available", "torch.testing._internal.common_utils.sandcastle_skip_if", "torch.cuda.nccl.version"], "torch.distributed.is_nccl_available": [], "torch.testing._internal.common_utils.sandcastle_skip": [], "torch.cuda.nccl.version": [], "common_distributed.requires_nccl": ["torch.distributed.is_nccl_available", "torch.testing._internal.common_utils.sandcastle_skip_if"], "common_distributed.requires_mpi": ["torch.testing._internal.common_utils.sandcastle_skip_if", "torch.distributed.is_mpi_available"], "torch.distributed.is_mpi_available": [], "common_distributed.skip_if_rocm": ["functools.wraps"], "common_distributed.skip_if_rocm.wrapper": ["sys.exit"], "common_distributed.skip_if_win32": ["torch.testing._internal.common_utils.sandcastle_skip_if"], "torch.testing._internal.common_utils.retry_on_connect_failures": [], "common_distributed.create_tcp_store": ["torch.classes.dist_c10d.TCPStore", "torch.testing._internal.common_utils.find_free_port", "torch.distributed.TCPStore", "datetime.timedelta", "<builtin>.int"], "torch.testing._internal.common_utils.find_free_port": [], "torch.classes.dist_c10d.TCPStore": [], "common_distributed.create_device": ["torch.distributed.ProcessGroupGloo.create_device"], "torch.distributed.ProcessGroupGloo.create_device": [], "common_distributed.get_timeout": [], "common_distributed.captured_output": ["io.StringIO"], "common_distributed.simple_sparse_reduce_tests": ["<builtin>.range", "common_distributed.simple_sparse_reduce_tests.compute_sum", "functools.partial"], "common_distributed.simple_sparse_reduce_tests.generate": ["torch.arange", "torch.ones", "<builtin>.range", "torch.cat", "torch.sparse_coo_tensor", "torch.reshape", "torch.zeros"], "common_distributed.simple_sparse_reduce_tests.compute_sum": ["<builtin>.range", "functools.reduce"], "common_distributed.simple_sparse_reduce_tests.compute_sum.<lambda1>": [], "common_distributed.initialize_temp_directories": ["os.path.join", "tempfile.TemporaryDirectory", "os.mkdir"], "common_distributed.cleanup_temp_dir": [], "common_distributed.MultiProcessTestCase._should_stop_test_suite": [], "common_distributed.MultiProcessTestCase.world_size": [], "common_distributed.MultiProcessTestCase.join_or_run": ["types.MethodType", "functools.wraps"], "common_distributed.MultiProcessTestCase.join_or_run.wrapper": [], "common_distributed.MultiProcessTestCase.__init__": ["common_distributed.MultiProcessTestCase.join_or_run", "<builtin>.setattr", "<builtin>.getattr", "<builtin>.super"], "common_distributed.MultiProcessTestCase.setUp": ["tempfile.NamedTemporaryFile", "<builtin>.super"], "common_distributed.MultiProcessTestCase.tearDown": ["<builtin>.super"], "common_distributed.MultiProcessTestCase._current_test_name": ["torch.testing._internal.common_utils.TestCase.id"], "torch.testing._internal.common_utils.TestCase.id": [], "common_distributed.MultiProcessTestCase._start_processes": ["torch.multiprocessing.Pipe", "common_distributed.MultiProcessTestCase._current_test_name", "<builtin>.range", "<builtin>.str", "<builtin>.int"], "torch.multiprocessing.Pipe": [], "common_distributed.MultiProcessTestCase._fork_processes": ["torch.multiprocessing.get_context", "common_distributed.MultiProcessTestCase._start_processes"], "common_distributed.MultiProcessTestCase._spawn_processes": ["torch.multiprocessing.get_context", "common_distributed.MultiProcessTestCase._start_processes"], "common_distributed.MultiProcessTestCase._event_listener": ["multiprocessing.connection.wait", "tempfile.NamedTemporaryFile", "faulthandler.dump_traceback"], "multiprocessing.connection.wait": [], "faulthandler.dump_traceback": [], "common_distributed.MultiProcessTestCase._run": ["sys.exit", "torch.multiprocessing.Pipe", "threading.Thread", "common_distributed.MultiProcessTestCase.__init__"], "common_distributed.MultiProcessTestCase.run_test": ["traceback.format_exc", "sys.exit", "<builtin>.getattr", "<builtin>.str", "torch._C._set_print_stack_traces_on_fatal_signal"], "torch._C._set_print_stack_traces_on_fatal_signal": [], "common_distributed.MultiProcessTestCase._get_timedout_process_traceback": ["<builtin>.enumerate"], "common_distributed.MultiProcessTestCase._join_processes": ["torch.testing._internal.common_utils.TestCase.id", "common_distributed.MultiProcessTestCase._get_timedout_process_traceback", "<builtin>.print", "common_distributed.MultiProcessTestCase._check_no_test_errors", "common_distributed.MultiProcessTestCase._check_return_codes", "time.time", "torch.multiprocessing.active_children", "<builtin>.all", "time.sleep", "common_distributed.get_timeout", "<builtin>.enumerate"], "torch.multiprocessing.active_children": [], "common_distributed.MultiProcessTestCase._check_no_test_errors": ["<builtin>.RuntimeError", "torch.testing._internal.common_utils.TestCase.assertNotEqual", "<builtin>.enumerate"], "common_distributed.MultiProcessTestCase._check_return_codes": ["torch.testing._internal.common_utils.TestCase.id", "unittest.SkipTest", "torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.RuntimeError", "<builtin>.enumerate"], "torch.testing._internal.common_utils.TestCase.assertNotEqual": [], "torch.testing._internal.common_utils.TestCase.assertEqual": [], "common_distributed.MultiProcessTestCase.is_master": [], "common_jit": ["<builtin>.frozenset"], "common_jit.check_output_types": ["<builtin>.getattr", "<builtin>.len", "torch._C._jit_assert_is_instance"], "torch._C._jit_assert_is_instance": [], "common_jit.check_against_reference": ["common_jit.check_against_reference.clone_inputs", "common_jit.check_output_types", "<builtin>.zip", "torch.autograd.grad", "torch.testing._internal.common_utils.enable_profiling_mode_for_profiling_tests", "common_jit.check_against_reference.allSum", "common_jit.check_against_reference.get_recording_tensors", "torch.allclose"], "common_jit.check_against_reference.allSum": ["<builtin>.sum", "torch.testing.floating_and_complex_types_and", "<builtin>.isinstance", "<builtin>.enumerate"], "torch.testing.floating_and_complex_types_and": [], "common_jit.check_against_reference.clone_tensor": [], "common_jit.check_against_reference.clone_inputs": ["common_jit.check_against_reference.clone_tensor", "torch.testing._internal.common_utils.is_iterable_of_tensors", "<builtin>.isinstance"], "torch.testing._internal.common_utils.is_iterable_of_tensors": [], "common_jit.check_against_reference.get_recording_tensors": ["torch.testing._internal.common_utils.is_iterable_of_tensors", "<builtin>.isinstance", "<builtin>.filter"], "common_jit.check_against_reference.get_recording_tensors.<lambda1>": [], "torch.testing._internal.common_utils.enable_profiling_mode_for_profiling_tests": [], "torch.autograd.grad": [], "common_jit.JitCommonTestCase.createFunctionFromGraph": ["<builtin>.isinstance", "torch._C._create_function_from_graph"], "torch._C._create_function_from_graph": [], "common_jit.JitCommonTestCase.assertExportImport": ["common_jit.JitCommonTestCase.assertExportImportModule", "common_jit.JitCommonTestCase.createFunctionFromGraph"], "common_jit.JitCommonTestCase.assertExportImportModule": ["torch.testing._internal.common_utils.TestCase.assertEqual", "common_jit.JitCommonTestCase.runAndSaveRNG", "common_jit.JitCommonTestCase.getExportImportCopy"], "common_jit.JitCommonTestCase.getExportImportCopy": ["torch.jit.load", "io.BytesIO", "torch.jit.save", "torch.testing._internal.common_utils.TemporaryFileName"], "common_jit.JitCommonTestCase.runAndSaveRNG": ["torch.testing._internal.common_utils.freeze_rng_state"], "torch.testing._internal.common_utils.freeze_rng_state": [], "common_jit.JitCommonTestCase.autoDiffErrorMessage": ["<builtin>.len"], "common_jit.JitCommonTestCase.assertAutodiffNode": ["itertools.chain.from_iterable", "<builtin>.any", "<builtin>.list", "torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.len", "common_jit.JitCommonTestCase.autoDiffErrorMessage"], "itertools.chain.from_iterable": [], "common_jit.JitCommonTestCase.checkShapeAnalysis": ["torch._C._jit_set_symbolic_shapes_test_mode", "torch.testing._internal.common_utils.TestCase.assertTrue", "<builtin>.next", "torch._C._jit_pass_constant_propagation", "torch._C._jit_pass_propagate_shapes_on_graph", "torch.testing._internal.common_utils.TestCase.assertEqual", "torch._C.TensorType.get", "torch._C._jit_erase_non_input_shape_information", "torch._C._jit_symbolic_shapes_test_mode_enabled"], "torch._C._jit_symbolic_shapes_test_mode_enabled": [], "torch._C._jit_set_symbolic_shapes_test_mode": [], "torch._C._jit_erase_non_input_shape_information": [], "torch._C._jit_pass_constant_propagation": [], "torch._C._jit_pass_propagate_shapes_on_graph": [], "torch._C.TensorType.get": [], "torch.testing._internal.common_utils.TestCase.assertTrue": [], "common_methods_invocations": ["torch.testing.all_types_and_complex_and", "common_methods_invocations.DecorateInfo.__init__", "torch.testing._internal.common_device_type.precisionOverride", "common_methods_invocations.np_unary_ufunc_integer_promotion_wrapper", "common_methods_invocations.ForeachFuncInfo.__init__", "torch.testing.all_types_and_complex", "torch.testing.floating_types_and", "torch.testing.all_types", "setuptools.distutils.version.LooseVersion", "torch.testing.floating_types", "<builtin>.object", "common_methods_invocations.OpInfo.__init__", "collections.namedtuple", "torch.testing.integral_types_and", "common_methods_invocations.SkipInfo.__init__", "common_methods_invocations.MvlGammaInfo.__init__", "functools.partial", "torch.testing.floating_and_complex_types_and", "common_methods_invocations.SpectralFuncInfo.__init__", "torch.testing.complex_types", "torch.testing._internal.common_device_type.toleranceOverride", "torch.testing.double_types", "<builtin>.isinstance", "common_methods_invocations.UnaryUfuncInfo.__init__", "torch.testing.floating_and_complex_types", "common_methods_invocations.ShapeFuncInfo.__init__", "common_methods_invocations.sample_inputs_reduction_wrapper", "_core._dispatch_dtypes", "torch.testing._internal.common_device_type.tol", "common_methods_invocations.skips_mvlgamma", "torch.testing.all_types_and", "<builtin>.float"], "common_methods_invocations.DecorateInfo.__init__": ["<builtin>.isinstance", "<builtin>.list"], "common_methods_invocations.DecorateInfo.is_active": [], "common_methods_invocations.SkipInfo.__init__": ["torch.testing._internal.common_device_type.skipIf", "<builtin>.super"], "torch.testing._internal.common_device_type.skipIf": [], "common_methods_invocations.SampleInput.__init__": ["torch.testing._internal.common_utils.is_iterable_of_tensors", "<builtin>.isinstance"], "common_methods_invocations.SampleInput._repr_helper": ["<builtin>.repr", "common_methods_invocations.SampleInput.summary.formatter", "common_methods_invocations.SampleInput.<lambda1>"], "common_methods_invocations.SampleInput.summary.formatter": ["torch.testing._internal.common_utils.is_iterable_of_tensors", "<builtin>.map", "<builtin>.tuple", "<builtin>.repr", "<builtin>.str", "common_methods_invocations.SampleInput.summary.formatter", "<builtin>.isinstance"], "common_methods_invocations.SampleInput.<lambda1>": [], "common_methods_invocations.SampleInput.__repr__": ["common_methods_invocations.SampleInput._repr_helper"], "common_methods_invocations.SampleInput.__repr__.<lambda1>": [], "common_methods_invocations.SampleInput.summary": ["common_methods_invocations.SampleInput._repr_helper"], "common_methods_invocations.SampleInput.numpy": ["common_methods_invocations.SampleInput.numpy.to_numpy"], "common_methods_invocations.SampleInput.numpy.to_numpy": ["<builtin>.list", "<builtin>.map", "<builtin>.ValueError", "<builtin>.tuple", "<builtin>.type", "common_methods_invocations.SampleInput.numpy.to_numpy._np", "common_methods_invocations.SampleInput.numpy.to_numpy", "<builtin>.isinstance"], "common_methods_invocations.SampleInput.numpy.to_numpy._np": [], "common_methods_invocations.AliasInfo.__init__": ["common_methods_invocations._getattr_qual", "<builtin>.getattr"], "common_methods_invocations._getattr_qual": ["<builtin>.getattr"], "common_methods_invocations.AliasInfo.__call__": ["torch", "numpy"], "torch": [], "numpy": [], "<builtin>.object": [], "common_methods_invocations.OpInfo.__init__": ["<builtin>.map", "common_methods_invocations._getattr_qual", "common_methods_invocations.AliasInfo.__init__", "<builtin>.tuple", "<builtin>.type", "<builtin>.set", "<builtin>.getattr", "<builtin>.callable", "<builtin>.isinstance", "<builtin>.any"], "common_methods_invocations.OpInfo.__init__.<lambda1>": ["<builtin>.isinstance"], "common_methods_invocations.OpInfo.__call__": [], "common_methods_invocations.OpInfo.get_op": [], "common_methods_invocations.OpInfo.get_method": [], "common_methods_invocations.OpInfo.get_inplace": [], "common_methods_invocations.OpInfo.get_operator_variant": [], "common_methods_invocations.OpInfo.conjugate_sample_inputs": ["common_methods_invocations.sample_inputs_narrow", "common_methods_invocations.sample_inputs_copysign", "common_methods_invocations.sample_inputs_topk", "common_methods_invocations.sample_inputs_outer", "common_methods_invocations.sample_inputs_xlog1py", "common_methods_invocations.sample_inputs_roll", "common_methods_invocations.sample_inputs_cross", "common_methods_invocations.sample_inputs_scatter_add", "common_methods_invocations.sample_inputs_eig", "common_methods_invocations.sample_inputs_cov", "common_methods_invocations.sample_inputs_max_min_binary", "common_methods_invocations.sample_inputs_linalg_pinv_hermitian", "common_methods_invocations.sample_inputs_nn_unfold", "common_methods_invocations.sample_inputs_linalg_eigh", "common_methods_invocations.sample_inputs_max_min_reduction_no_dim", "common_methods_invocations.sample_inputs_rot90", "common_methods_invocations.sample_inputs_sort", "common_methods_invocations.sample_inputs_linalg_cond", "common_methods_invocations.sample_inputs_permute", "common_methods_invocations.sample_inputs_comparison_ops", "common_methods_invocations.sample_inputs_take", "common_methods_invocations.sample_inputs_bitwise_shift", "common_methods_invocations.OpInfo.conjugate_sample_inputs.conjugate", "common_methods_invocations.sample_inputs_cdist", "common_methods_invocations.sample_inputs_xlogy", "common_methods_invocations.sample_inputs_linalg_cholesky", "common_methods_invocations.sample_inputs_leaky_relu", "common_methods_invocations.sample_inputs_linalg_solve", "common_methods_invocations.sample_inputs_flip", "common_methods_invocations.sample_inputs_linalg_cholesky_inverse", "common_methods_invocations.sample_inputs_hstack_dstack_vstack", "common_methods_invocations.sample_inputs_logdet", "common_methods_invocations.sample_inputs_avgpool2d", "common_methods_invocations.sample_inputs_norm_nuc", "common_methods_invocations.sample_inputs_hardshrink_hardtanh", "common_methods_invocations.sample_inputs_index_copy", "<builtin>.isinstance", "common_methods_invocations.sample_inputs_tensor_split", "common_methods_invocations.sample_inputs_baddbmm", "common_methods_invocations.sample_inputs_bmm", "common_methods_invocations.sample_inputs_aminmax", "common_methods_invocations.sample_inputs_mode", "common_methods_invocations.sample_inputs_logcumsumexp", "common_methods_invocations.sample_inputs_hsplit", "common_methods_invocations.sample_inputs_atan2", "common_methods_invocations.sample_inputs_norm_inf", "common_methods_invocations.sample_inputs_dot_vdot", "common_methods_invocations.sample_inputs_tensordot", "common_methods_invocations.sample_inputs_nn_activation_relu", "common_methods_invocations.sample_inputs_linalg_norm", "common_methods_invocations.sample_inputs_linalg_invertible", "common_methods_invocations.sample_inputs_prod", "common_methods_invocations.sample_inputs_dsplit", "common_methods_invocations.sample_inputs_trace", "<builtin>.len", "common_methods_invocations.sample_inputs_addr", "common_methods_invocations.sample_inputs_reduction_wrapper.fn", "common_methods_invocations.sample_inputs_linalg_det", "common_methods_invocations.sample_inputs_corrcoef", "common_methods_invocations.sample_inputs_mm", "common_methods_invocations.sample_inputs_vsplit", "common_methods_invocations.sample_inputs_mse_loss", "common_methods_invocations.sample_inputs_inner", "common_methods_invocations.sample_inputs_masked_fill", "common_methods_invocations.sample_inputs_max_min_reduction_with_dim", "common_methods_invocations.sample_inputs_clamp", "common_methods_invocations.sample_inputs_index_put", "common_methods_invocations.sample_inputs_index_add", "common_methods_invocations.sample_inputs_grid_sample", "common_methods_invocations.sample_inputs_gradient", "common_methods_invocations.sample_inputs_clone", "common_methods_invocations.sample_inputs_linalg_multi_dot", "common_methods_invocations.sample_inputs_ravel", "common_methods_invocations.sample_inputs_isin", "common_methods_invocations.sample_inputs_lu_unpack", "common_methods_invocations.sample_inputs_masked_select", "common_methods_invocations.sample_inputs_view_reshape", "common_methods_invocations.sample_inputs_addcmul_addcdiv", "common_methods_invocations.sample_inputs_norm", "common_methods_invocations.sample_inputs_ormqr", "common_methods_invocations.sample_inputs_t", "common_methods_invocations.sample_inputs_view_as_real", "common_methods_invocations.sample_inputs_addmv", "common_methods_invocations.sample_inputs_householder_product", "common_methods_invocations.sample_inputs_linalg_svd", "common_methods_invocations.sample_inputs_logsumexp", "common_methods_invocations.sample_inputs_linalg_qr", "common_methods_invocations.sample_inputs_lu", "common_methods_invocations.sample_inputs_svd", "common_methods_invocations.sample_inputs_linalg_vector_norm", "common_methods_invocations.sample_movedim_moveaxis", "common_methods_invocations.sample_inputs_symeig", "common_methods_invocations.sample_inputs_unfold", "common_methods_invocations.sample_inputs_nextafter", "common_methods_invocations.sample_inputs_cumprod", "common_methods_invocations.sample_inputs_mv", "common_methods_invocations.sample_inputs_addbmm", "common_methods_invocations.sample_inputs_polar", "common_methods_invocations.sample_inputs_squeeze", "common_methods_invocations.sample_inputs_masked_scatter", "common_methods_invocations.sample_cumulative_trapezoid", "common_methods_invocations.sample_inputs_stack", "common_methods_invocations.sample_inputs_select", "common_methods_invocations.sample_inputs_linalg_det_singular", "common_methods_invocations.sample_inputs_zeta", "common_methods_invocations.sample_inputs_hardswish", "<builtin>.list", "common_methods_invocations.sample_inputs_renorm", "common_methods_invocations.sample_inputs_linalg_matrix_power", "common_methods_invocations.sample_inputs_dist", "common_methods_invocations.sample_inputs_softplus", "<builtin>.range", "common_methods_invocations.sample_trapezoid", "common_methods_invocations.sample_inputs_zero_", "common_methods_invocations.sample_inputs_diagonal_diag_embed", "common_methods_invocations.sample_inputs_fliplr_flipud", "common_methods_invocations.sample_inputs_linalg_slogdet", "common_methods_invocations.sample_inputs_split_with_sizes", "common_methods_invocations.sample_inputs_resize_ops", "common_methods_invocations.sample_inputs_histogram", "common_methods_invocations.sample_inputs_where", "common_methods_invocations.sample_inputs_expand", "common_methods_invocations.sample_inputs_to_sparse", "common_methods_invocations.sample_inputs_linalg_eig", "common_methods_invocations.sample_inputs_amax_amin", "common_methods_invocations.sample_inputs_linalg_matrix_norm", "common_methods_invocations.sample_inputs_diag", "common_methods_invocations.sample_inputs_put", "common_methods_invocations.sample_inputs_diff", "common_methods_invocations.sample_inputs_pow", "common_methods_invocations.sample_inputs_lerp", "common_methods_invocations.sample_inputs_hypot", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.sample_inputs_einsum", "common_methods_invocations.sample_inputs_gather", "torch.no_grad", "common_methods_invocations.sample_inputs_view_as_complex", "common_methods_invocations.sample_inputs_norm_fro", "common_methods_invocations.sample_inputs_std_var", "common_methods_invocations.sample_inputs_matmul", "common_methods_invocations.sample_inputs_broadcast_to", "common_methods_invocations.sample_inputs_contiguous", "common_methods_invocations.sample_unsqueeze", "common_methods_invocations.sample_inputs_linalg_svdvals", "common_methods_invocations.sample_inputs_chunk", "common_methods_invocations.sample_inputs_reduction_quantile", "common_methods_invocations.sample_inputs_kthvalue", "common_methods_invocations.sample_inputs_expand_as", "common_methods_invocations.sample_inputs_take_along_dim", "common_methods_invocations.sample_inputs_scatter", "common_methods_invocations.sample_inputs_floor_divide", "common_methods_invocations.sample_inputs_geqrf", "common_methods_invocations.sample_inputs_argmax_argmin", "common_methods_invocations.sample_inputs_one_hot", "common_methods_invocations.sample_inputs_matrix_exp", "common_methods_invocations.sample_inputs_complex", "common_methods_invocations.sample_inputs_rbinops", "common_methods_invocations.sample_inputs_msort", "common_methods_invocations.sample_inputs_transpose_swapdims", "common_methods_invocations.sample_inputs_gelu", "common_methods_invocations.sample_inputs_view_as_reshape_as", "common_methods_invocations.sample_inputs_linalg_lstsq", "common_methods_invocations.sample_inputs_fill_", "common_methods_invocations.sample_inputs_index_select", "<builtin>.tuple", "common_methods_invocations.sample_inputs_tril_triu", "common_methods_invocations.sample_inputs_getitem", "common_methods_invocations.sample_inputs_kron", "common_methods_invocations.sample_inputs_index_fill", "common_methods_invocations.sample_inputs_legacy_solve"], "common_methods_invocations.sample_inputs_copysign": ["<builtin>.list", "common_methods_invocations.sample_inputs_copysign.generator"], "common_methods_invocations.sample_inputs_outer": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_scatter_add": ["common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_scatter_add._gather", "common_methods_invocations.sample_inputs_scatter_add._tensor", "torch.tensor"], "common_methods_invocations.sample_inputs_cov": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations._generate_correlation_inputs", "common_methods_invocations.SampleInput.__init__", "itertools.product", "<builtin>.range"], "common_methods_invocations.sample_inputs_rot90": ["functools.partial", "common_methods_invocations.sample_inputs_rot90.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_sort": ["common_methods_invocations.sample_inputs_sort.large_1d_unique", "common_methods_invocations.SampleInput.__init__", "itertools.product", "common_methods_invocations.sample_inputs_sort.small_3d_unique", "torch.tensor", "common_methods_invocations.sample_inputs_sort.apply_grad", "torch.device", "<builtin>.dict", "<builtin>.range"], "common_methods_invocations.sample_inputs_linalg_cond": ["functools.partial", "common_methods_invocations.sample_inputs_linalg_cond.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_comparison_ops": ["torch.testing._internal.common_utils.make_tensor", "<builtin>.list", "common_methods_invocations.SampleInput.__init__", "<builtin>.tuple", "torch.tensor"], "common_methods_invocations.sample_inputs_xlogy": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_solve": ["torch.randn", "common_methods_invocations.SampleInput.__init__", "torch.testing._internal.common_utils.random_fullrank_matrix_distinct_singular_value", "itertools.product"], "common_methods_invocations.sample_inputs_flip": ["functools.partial", "common_methods_invocations.sample_inputs_flip.gen_samples", "<builtin>.list"], "common_methods_invocations.sample_inputs_hstack_dstack_vstack": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_avgpool2d": ["functools.partial", "common_methods_invocations.sample_inputs_avgpool2d.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_norm_nuc": ["functools.partial", "common_methods_invocations.sample_inputs_norm_nuc.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_index_copy": ["common_methods_invocations.SampleInput.__init__", "torch.repeat_interleave", "common_methods_invocations.sample_inputs_index_copy.make_arg", "itertools.product", "torch.randperm"], "common_methods_invocations.sample_inputs_tensor_split": ["functools.partial", "common_methods_invocations.sample_inputs_tensor_split.generator", "torch.tensor", "<builtin>.list"], "common_methods_invocations.sample_inputs_baddbmm": ["<builtin>.tuple", "<builtin>.dict", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_aminmax": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_mode": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.list"], "common_methods_invocations.sample_inputs_atan2": ["functools.partial", "common_methods_invocations.sample_inputs_atan2.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_dot_vdot": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_tensordot": ["<builtin>.tuple", "<builtin>.dict", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_norm": ["<builtin>.dict", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.len"], "common_methods_invocations.sample_inputs_dsplit": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_addr": ["<builtin>.dict", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_det": ["torch.testing._internal.common_utils.make_tensor", "torch.testing._internal.common_utils.random_symmetric_matrix", "torch.testing._internal.common_utils.random_symmetric_psd_matrix", "common_methods_invocations.SampleInput.__init__", "torch.testing._internal.common_utils.random_fullrank_matrix_distinct_singular_value", "torch.testing._internal.common_utils.random_square_matrix_of_rank", "<builtin>.dict", "torch.testing._internal.common_utils.random_symmetric_pd_matrix"], "common_methods_invocations.sample_inputs_corrcoef": ["common_methods_invocations.SampleInput.__init__", "common_methods_invocations._generate_correlation_inputs"], "common_methods_invocations.sample_inputs_masked_fill": ["functools.partial", "<builtin>.tuple", "common_methods_invocations.sample_inputs_masked_fill.sample_generator"], "common_methods_invocations.sample_inputs_max_min_reduction_with_dim": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.list"], "common_methods_invocations.sample_inputs_clamp": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_clamp.detach"], "common_methods_invocations.sample_inputs_index_put": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.mask_not_all_zeros", "common_methods_invocations.index_variable", "<builtin>.dict", "torch.zeros"], "common_methods_invocations.sample_inputs_index_add": ["functools.partial", "<builtin>.dict", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_grid_sample": ["functools.partial", "<builtin>.dict", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_gradient": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.tuple", "torch.tensor", "<builtin>.dict"], "common_methods_invocations.sample_inputs_isin": ["torch.randint", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_lu_unpack": ["common_methods_invocations.sample_inputs_lu_unpack.generate_samples", "<builtin>.list"], "common_methods_invocations.sample_inputs_view_reshape": ["functools.partial", "common_methods_invocations.sample_inputs_view_reshape.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_addmv": ["functools.partial", "common_methods_invocations.sample_inputs_addmv.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_householder_product": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_logsumexp": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_qr": ["torch.randn", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_linalg_vector_norm": ["<builtin>.dict", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_movedim_moveaxis": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_nextafter": ["functools.partial", "<builtin>.list", "common_methods_invocations.sample_inputs_nextafter.generator"], "common_methods_invocations.sample_cumulative_trapezoid": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_renorm": ["functools.partial", "common_methods_invocations.sample_inputs_renorm.generator", "<builtin>.list", "<builtin>.float"], "common_methods_invocations.sample_inputs_linalg_matrix_power": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "torch.testing._internal.common_utils.random_fullrank_matrix_distinct_singular_value"], "common_methods_invocations.sample_inputs_diagonal_diag_embed": ["functools.partial", "common_methods_invocations.sample_inputs_diagonal_diag_embed.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_histogram": ["common_methods_invocations.SampleInput.__init__", "itertools.product", "functools.partial", "<builtin>.dict", "<builtin>.range"], "common_methods_invocations.sample_inputs_where": ["functools.partial", "common_methods_invocations.sample_inputs_where.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_expand": ["functools.partial", "common_methods_invocations.sample_inputs_expand.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_linalg_eig": ["common_methods_invocations.sample_inputs_linalg_invertible"], "common_methods_invocations.sample_inputs_amax_amin": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_pow": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.list"], "common_methods_invocations.sample_inputs_hypot": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "torch.testing._internal.common_utils.make_tensor": [], "common_methods_invocations.sample_inputs_gather": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "torch.tensor", "common_methods_invocations.gather_variable"], "common_methods_invocations.sample_inputs_std_var": ["<builtin>.dict", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_broadcast_to": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_contiguous": ["functools.partial", "common_methods_invocations.sample_inputs_contiguous.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_reduction_quantile": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations._generate_reduction_inputs", "common_methods_invocations._generate_reduction_kwargs"], "common_methods_invocations.sample_inputs_kthvalue": ["common_methods_invocations.sample_inputs_kthvalue._tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_expand_as": ["functools.partial", "common_methods_invocations.sample_inputs_expand_as.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_scatter": ["common_methods_invocations.sample_inputs_scatter._tensor", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_scatter._gather", "torch.tensor"], "common_methods_invocations.sample_inputs_one_hot": ["<builtin>.dict", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_one_hot.make_input", "itertools.product"], "common_methods_invocations.sample_inputs_gelu": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.range"], "common_methods_invocations.sample_inputs_view_as_reshape_as": ["functools.partial", "common_methods_invocations.sample_inputs_view_as_reshape_as.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_linalg_lstsq": ["torch.testing._internal.common_utils.make_tensor", "torch.testing._internal.common_utils.random_well_conditioned_matrix", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_index_select": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.index_variable", "torch.tensor"], "common_methods_invocations.sample_inputs_tril_triu": ["functools.partial", "common_methods_invocations.sample_inputs_tril_triu.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_diag": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_kron": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_index_fill": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.sample_inputs_index_fill.unique_idx", "common_methods_invocations.SampleInput.__init__", "functools.partial", "common_methods_invocations.index_variable", "torch.tensor", "torch.empty_strided", "<builtin>.range"], "common_methods_invocations.sample_inputs_legacy_solve": ["common_methods_invocations.sample_inputs_linalg_solve"], "common_methods_invocations.sample_inputs_narrow": ["common_methods_invocations.sample_inputs_narrow.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_topk": ["common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_topk.get_tensor_input"], "common_methods_invocations.sample_inputs_xlog1py": ["functools.partial", "common_methods_invocations.sample_inputs_xlog1py.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_roll": ["functools.partial", "common_methods_invocations.sample_inputs_roll.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_cross": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_eig": ["<builtin>.dict", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_max_min_binary": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.list"], "common_methods_invocations.sample_inputs_linalg_pinv_hermitian": ["common_methods_invocations.sample_inputs_linalg_invertible"], "common_methods_invocations.sample_inputs_nn_unfold": ["common_methods_invocations.sample_inputs_nn_unfold.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_linalg_eigh": ["common_methods_invocations.sample_inputs_linalg_invertible", "numpy.random.choice"], "common_methods_invocations.sample_inputs_max_min_reduction_no_dim": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_permute": ["functools.partial", "common_methods_invocations.sample_inputs_permute.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_take": ["functools.partial", "<builtin>.list", "common_methods_invocations.sample_inputs_take.gen_inputs"], "common_methods_invocations.sample_inputs_bitwise_shift": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_cdist": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_cholesky": ["torch.testing._internal.common_utils.random_hermitian_pd_matrix", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_leaky_relu": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.range"], "common_methods_invocations.sample_inputs_linalg_cholesky_inverse": ["common_methods_invocations.SampleInput.__init__", "torch.testing._internal.common_utils.random_hermitian_pd_matrix", "<builtin>.dict", "torch.zeros", "torch.linalg.cholesky"], "common_methods_invocations.sample_inputs_logdet": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.sample_inputs_logdet._helper", "common_methods_invocations.SampleInput.__init__", "<builtin>.tuple", "common_methods_invocations.sample_inputs_logdet.make_nonzero_det"], "common_methods_invocations.sample_inputs_hardshrink_hardtanh": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.range"], "common_methods_invocations.sample_inputs_bmm": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_logcumsumexp": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_hsplit": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_norm_inf": ["functools.partial", "common_methods_invocations.sample_inputs_norm_inf.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_nn_activation_relu": ["functools.partial", "common_methods_invocations.sample_inputs_nn_activation_relu.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_linalg_invertible": ["common_methods_invocations.SampleInput.__init__", "torch.testing._internal.common_utils.random_fullrank_matrix_distinct_singular_value", "itertools.product"], "common_methods_invocations.sample_inputs_prod": ["common_methods_invocations.sample_inputs_prod.sample_generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_trace": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_reduction_wrapper.fn": ["common_methods_invocations.SampleInput.__init__", "common_methods_invocations._generate_reduction_inputs", "common_methods_invocations._generate_reduction_kwargs"], "common_methods_invocations.sample_inputs_mm": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_vsplit": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_mse_loss": ["functools.partial", "<builtin>.dict", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_inner": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_clone": ["functools.partial", "common_methods_invocations.sample_inputs_clone.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_linalg_multi_dot": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.zip"], "common_methods_invocations.sample_inputs_ravel": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_masked_select": ["torch.randn", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "torch.tensor"], "common_methods_invocations.sample_inputs_addcmul_addcdiv": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.tuple", "<builtin>.dict", "<builtin>.isinstance"], "common_methods_invocations.sample_inputs_norm": ["<builtin>.list", "common_methods_invocations.sample_inputs_norm.generator", "functools.partial", "<builtin>.tuple", "copy.deepcopy"], "common_methods_invocations.sample_inputs_ormqr": ["functools.partial", "<builtin>.tuple", "common_methods_invocations.sample_inputs_ormqr.gen_inputs"], "common_methods_invocations.sample_inputs_t": ["functools.partial", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_view_as_real": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_svd": ["common_methods_invocations._sample_inputs_svd"], "common_methods_invocations.sample_inputs_lu": ["common_methods_invocations.sample_inputs_lu.generate_samples", "<builtin>.list"], "common_methods_invocations.sample_inputs_svd": ["common_methods_invocations._sample_inputs_svd"], "common_methods_invocations.sample_inputs_symeig": ["common_methods_invocations.sample_inputs_linalg_invertible", "numpy.random.choice", "<builtin>.bool"], "common_methods_invocations.sample_inputs_unfold": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_cumprod": ["common_methods_invocations.sample_inputs_cumprod.sample_generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_mv": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_addbmm": ["functools.partial", "common_methods_invocations.sample_inputs_addbmm.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_polar": ["common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_polar._make_tensor_helper"], "common_methods_invocations.sample_inputs_squeeze": ["common_methods_invocations.sample_inputs_squeeze.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_masked_scatter": ["functools.partial", "<builtin>.tuple", "common_methods_invocations.sample_inputs_masked_scatter.samples_generator"], "common_methods_invocations.sample_inputs_stack": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_select": ["functools.partial", "common_methods_invocations.sample_inputs_select.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_linalg_det_singular": ["functools.partial", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_linalg_det_singular.sample_generator"], "common_methods_invocations.sample_inputs_zeta": ["functools.partial", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_hardswish": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.range"], "common_methods_invocations.sample_inputs_dist": ["functools.partial", "common_methods_invocations.sample_inputs_dist.generate_samples", "<builtin>.list"], "common_methods_invocations.sample_inputs_softplus": ["functools.partial", "<builtin>.dict", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_trapezoid": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_zero_": ["functools.partial", "common_methods_invocations.sample_inputs_zero_.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_fliplr_flipud": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_slogdet": ["common_methods_invocations.sample_inputs_linalg_invertible"], "common_methods_invocations.sample_inputs_split_with_sizes": ["functools.partial", "<builtin>.int", "common_methods_invocations.sample_inputs_split_with_sizes.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_resize_ops": ["functools.partial", "common_methods_invocations.sample_inputs_resize_ops.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_to_sparse": ["functools.partial", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_matrix_norm": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_put": ["functools.partial", "<builtin>.list", "common_methods_invocations.sample_inputs_put.gen_inputs"], "common_methods_invocations.sample_inputs_diff": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_lerp": ["functools.partial", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_einsum": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_view_as_complex": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_norm_fro": ["functools.partial", "common_methods_invocations.sample_inputs_norm_fro.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_matmul": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.RuntimeError"], "common_methods_invocations.sample_unsqueeze": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_svdvals": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_chunk": ["functools.partial", "common_methods_invocations.sample_inputs_chunk.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_take_along_dim": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.gather_variable"], "common_methods_invocations.sample_inputs_floor_divide": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_geqrf": ["torch.device", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_argmax_argmin": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_matrix_exp": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_complex": ["common_methods_invocations.sample_inputs_complex._make_tensor_helper", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_rbinops": ["common_methods_invocations.sample_inputs_rbinops._make_tensor_helper", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_msort": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_msort.large_1d_unique"], "common_methods_invocations.sample_inputs_transpose_swapdims": ["functools.partial", "<builtin>.list", "common_methods_invocations.sample_inputs_transpose_swapdims.generator"], "common_methods_invocations.sample_inputs_fill_": ["functools.partial", "common_methods_invocations.sample_inputs_fill_.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_getitem": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "torch.LongTensor", "<builtin>.tuple", "common_methods_invocations.mask_not_all_zeros", "common_methods_invocations.index_variable", "<builtin>.slice"], "common_methods_invocations.OpInfo.conjugate_sample_inputs.conjugate": ["torch.no_grad"], "common_methods_invocations.OpInfo.sample_inputs": ["common_methods_invocations.sample_inputs_narrow", "common_methods_invocations.sample_inputs_copysign", "common_methods_invocations.sample_inputs_topk", "common_methods_invocations.sample_inputs_outer", "common_methods_invocations.sample_inputs_xlog1py", "common_methods_invocations.sample_inputs_roll", "common_methods_invocations.sample_inputs_cross", "common_methods_invocations.sample_inputs_scatter_add", "common_methods_invocations.sample_inputs_eig", "common_methods_invocations.sample_inputs_cov", "common_methods_invocations.sample_inputs_max_min_binary", "common_methods_invocations.sample_inputs_linalg_pinv_hermitian", "common_methods_invocations.sample_inputs_nn_unfold", "common_methods_invocations.sample_inputs_linalg_eigh", "common_methods_invocations.sample_inputs_max_min_reduction_no_dim", "common_methods_invocations.sample_inputs_rot90", "common_methods_invocations.sample_inputs_sort", "common_methods_invocations.sample_inputs_linalg_cond", "common_methods_invocations.sample_inputs_permute", "common_methods_invocations.sample_inputs_comparison_ops", "common_methods_invocations.sample_inputs_take", "common_methods_invocations.sample_inputs_bitwise_shift", "common_methods_invocations.sample_inputs_cdist", "common_methods_invocations.sample_inputs_xlogy", "common_methods_invocations.sample_inputs_linalg_cholesky", "common_methods_invocations.sample_inputs_leaky_relu", "common_methods_invocations.sample_inputs_linalg_solve", "common_methods_invocations.sample_inputs_flip", "common_methods_invocations.sample_inputs_linalg_cholesky_inverse", "common_methods_invocations.sample_inputs_hstack_dstack_vstack", "common_methods_invocations.sample_inputs_logdet", "common_methods_invocations.sample_inputs_avgpool2d", "common_methods_invocations.sample_inputs_norm_nuc", "common_methods_invocations.sample_inputs_hardshrink_hardtanh", "common_methods_invocations.sample_inputs_index_copy", "common_methods_invocations.sample_inputs_tensor_split", "common_methods_invocations.sample_inputs_baddbmm", "common_methods_invocations.sample_inputs_bmm", "common_methods_invocations.sample_inputs_aminmax", "common_methods_invocations.sample_inputs_mode", "common_methods_invocations.sample_inputs_logcumsumexp", "common_methods_invocations.sample_inputs_hsplit", "common_methods_invocations.sample_inputs_atan2", "common_methods_invocations.sample_inputs_norm_inf", "common_methods_invocations.sample_inputs_dot_vdot", "common_methods_invocations.sample_inputs_tensordot", "common_methods_invocations.sample_inputs_nn_activation_relu", "common_methods_invocations.sample_inputs_linalg_norm", "common_methods_invocations.sample_inputs_linalg_invertible", "common_methods_invocations.sample_inputs_prod", "common_methods_invocations.sample_inputs_dsplit", "common_methods_invocations.sample_inputs_trace", "common_methods_invocations.sample_inputs_addr", "common_methods_invocations.sample_inputs_reduction_wrapper.fn", "common_methods_invocations.sample_inputs_linalg_det", "common_methods_invocations.sample_inputs_corrcoef", "common_methods_invocations.sample_inputs_mm", "common_methods_invocations.sample_inputs_vsplit", "common_methods_invocations.sample_inputs_mse_loss", "common_methods_invocations.sample_inputs_inner", "common_methods_invocations.sample_inputs_masked_fill", "common_methods_invocations.sample_inputs_max_min_reduction_with_dim", "common_methods_invocations.sample_inputs_clamp", "common_methods_invocations.sample_inputs_index_put", "common_methods_invocations.sample_inputs_index_add", "common_methods_invocations.sample_inputs_grid_sample", "common_methods_invocations.sample_inputs_gradient", "common_methods_invocations.sample_inputs_clone", "common_methods_invocations.sample_inputs_linalg_multi_dot", "common_methods_invocations.sample_inputs_ravel", "common_methods_invocations.sample_inputs_isin", "common_methods_invocations.sample_inputs_lu_unpack", "common_methods_invocations.sample_inputs_masked_select", "common_methods_invocations.sample_inputs_view_reshape", "common_methods_invocations.sample_inputs_addcmul_addcdiv", "common_methods_invocations.sample_inputs_norm", "common_methods_invocations.sample_inputs_ormqr", "common_methods_invocations.sample_inputs_t", "common_methods_invocations.sample_inputs_view_as_real", "common_methods_invocations.sample_inputs_addmv", "common_methods_invocations.sample_inputs_householder_product", "common_methods_invocations.sample_inputs_linalg_svd", "common_methods_invocations.sample_inputs_logsumexp", "common_methods_invocations.sample_inputs_linalg_qr", "common_methods_invocations.sample_inputs_lu", "common_methods_invocations.sample_inputs_svd", "common_methods_invocations.sample_inputs_linalg_vector_norm", "common_methods_invocations.sample_movedim_moveaxis", "common_methods_invocations.sample_inputs_symeig", "common_methods_invocations.sample_inputs_unfold", "common_methods_invocations.sample_inputs_nextafter", "common_methods_invocations.sample_inputs_cumprod", "common_methods_invocations.sample_inputs_mv", "common_methods_invocations.sample_inputs_addbmm", "common_methods_invocations.sample_inputs_polar", "common_methods_invocations.sample_inputs_squeeze", "common_methods_invocations.sample_inputs_masked_scatter", "common_methods_invocations.sample_cumulative_trapezoid", "common_methods_invocations.sample_inputs_stack", "common_methods_invocations.sample_inputs_select", "common_methods_invocations.sample_inputs_linalg_det_singular", "common_methods_invocations.sample_inputs_zeta", "common_methods_invocations.sample_inputs_hardswish", "common_methods_invocations.OpInfo.conjugate_sample_inputs", "<builtin>.list", "common_methods_invocations.sample_inputs_renorm", "common_methods_invocations.sample_inputs_linalg_matrix_power", "common_methods_invocations.sample_inputs_dist", "common_methods_invocations.sample_inputs_softplus", "common_methods_invocations.sample_trapezoid", "common_methods_invocations.sample_inputs_zero_", "common_methods_invocations.sample_inputs_diagonal_diag_embed", "common_methods_invocations.sample_inputs_fliplr_flipud", "common_methods_invocations.sample_inputs_linalg_slogdet", "common_methods_invocations.sample_inputs_split_with_sizes", "common_methods_invocations.sample_inputs_resize_ops", "common_methods_invocations.sample_inputs_histogram", "common_methods_invocations.sample_inputs_where", "common_methods_invocations.sample_inputs_expand", "common_methods_invocations.sample_inputs_to_sparse", "common_methods_invocations.sample_inputs_linalg_eig", "common_methods_invocations.sample_inputs_amax_amin", "common_methods_invocations.sample_inputs_linalg_matrix_norm", "common_methods_invocations.sample_inputs_diag", "common_methods_invocations.sample_inputs_put", "common_methods_invocations.sample_inputs_diff", "common_methods_invocations.sample_inputs_pow", "common_methods_invocations.sample_inputs_lerp", "common_methods_invocations.sample_inputs_hypot", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.sample_inputs_einsum", "common_methods_invocations.sample_inputs_gather", "common_methods_invocations.sample_inputs_view_as_complex", "common_methods_invocations.sample_inputs_norm_fro", "common_methods_invocations.sample_inputs_std_var", "common_methods_invocations.sample_inputs_matmul", "common_methods_invocations.sample_inputs_broadcast_to", "common_methods_invocations.sample_inputs_contiguous", "common_methods_invocations.sample_unsqueeze", "common_methods_invocations.sample_inputs_linalg_svdvals", "common_methods_invocations.sample_inputs_chunk", "common_methods_invocations.sample_inputs_reduction_quantile", "common_methods_invocations.sample_inputs_kthvalue", "common_methods_invocations.sample_inputs_expand_as", "common_methods_invocations.sample_inputs_take_along_dim", "common_methods_invocations.sample_inputs_scatter", "common_methods_invocations.sample_inputs_floor_divide", "common_methods_invocations.sample_inputs_geqrf", "common_methods_invocations.sample_inputs_argmax_argmin", "common_methods_invocations.sample_inputs_one_hot", "common_methods_invocations.sample_inputs_matrix_exp", "common_methods_invocations.sample_inputs_complex", "common_methods_invocations.sample_inputs_rbinops", "common_methods_invocations.sample_inputs_msort", "common_methods_invocations.sample_inputs_transpose_swapdims", "common_methods_invocations.sample_inputs_gelu", "common_methods_invocations.sample_inputs_view_as_reshape_as", "common_methods_invocations.sample_inputs_linalg_lstsq", "common_methods_invocations.sample_inputs_fill_", "common_methods_invocations.sample_inputs_index_select", "<builtin>.tuple", "common_methods_invocations.sample_inputs_tril_triu", "common_methods_invocations.sample_inputs_getitem", "common_methods_invocations.sample_inputs_kron", "common_methods_invocations.sample_inputs_index_fill", "common_methods_invocations.sample_inputs_legacy_solve"], "common_methods_invocations.OpInfo.should_skip": ["<builtin>.any"], "common_methods_invocations.OpInfo.supported_dtypes": [], "common_methods_invocations.OpInfo.supported_backward_dtypes": ["torch.testing.floating_and_complex_types_and", "<builtin>.set"], "common_methods_invocations.OpInfo.supports_complex_autograd": ["<builtin>.any"], "common_methods_invocations.OpInfo.supports_dtype": ["common_methods_invocations.OpInfo.supported_dtypes"], "common_methods_invocations.OpInfo.default_test_dtypes": ["common_methods_invocations.OpInfo.supported_dtypes"], "common_methods_invocations.sample_inputs_unary": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.UnaryUfuncInfo.__init__": ["<builtin>.super"], "common_methods_invocations.sample_inputs_tensor_split.generator": ["common_methods_invocations.SampleInput.__init__"], "torch.testing._internal.common_utils.random_symmetric_matrix": [], "torch.testing._internal.common_utils.random_symmetric_psd_matrix": [], "torch.testing._internal.common_utils.random_symmetric_pd_matrix": [], "torch.testing._internal.common_utils.random_square_matrix_of_rank": [], "torch.testing._internal.common_utils.random_fullrank_matrix_distinct_singular_value": [], "common_methods_invocations.sample_inputs_linalg_det_singular.make_singular_matrix_batch_base": ["torch.topk", "torch.finfo", "torch.no_grad", "torch.lu_unpack", "torch.linalg.matrix_norm"], "torch.linalg.matrix_norm": [], "common_methods_invocations.sample_inputs_linalg_det_singular.sample_generator": ["common_methods_invocations.sample_inputs_linalg_det_singular.make_singular_matrix_batch_base", "<builtin>.range", "itertools.product"], "common_methods_invocations.sample_inputs_nn_activation_relu.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_norm.generator": ["common_methods_invocations.SampleInput.__init__", "itertools.chain"], "common_methods_invocations.sample_inputs_norm_fro.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_norm_nuc.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_norm_inf.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_binary_pwise": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.isinstance"], "common_methods_invocations.sample_inputs_addmm": ["<builtin>.tuple", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_addmv.generator": ["<builtin>.dict", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_addbmm.generator": ["<builtin>.dict", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_xlog1py.generator": ["torch.rand", "common_methods_invocations.SampleInput.__init__", "torch.no_grad"], "common_methods_invocations.sample_inputs_zero_.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_renorm.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_transpose_swapdims.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_linalg_cond.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.np_sinc_with_fp16_as_fp32": ["numpy.sinc"], "numpy.sinc": [], "common_methods_invocations.sample_inputs_fill_.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.gather_variable": ["torch.randperm", "torch.zeros", "<builtin>.range", "<builtin>.len"], "common_methods_invocations.index_variable": ["torch.rand", "<builtin>.isinstance"], "common_methods_invocations.mask_not_all_zeros": ["torch.randn", "<builtin>.len"], "common_methods_invocations.sample_inputs_sort.apply_grad": ["torch.testing.floating_types_and"], "torch.testing.floating_types_and": [], "common_methods_invocations.sample_inputs_sort.small_3d_unique": ["common_methods_invocations.sample_inputs_sort.apply_grad", "torch.randperm"], "torch.randperm": [], "common_methods_invocations.sample_inputs_sort.large_1d_unique": ["common_methods_invocations.sample_inputs_sort.apply_grad", "torch.randperm"], "common_methods_invocations.sample_inputs_index_fill.unique_idx": ["random.sample", "<builtin>.range"], "common_methods_invocations._generate_reduction_inputs": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations._generate_reduction_kwargs": ["<builtin>.tuple", "<builtin>.range"], "common_methods_invocations.sample_inputs_reduction_wrapper": [], "common_methods_invocations.sample_inputs_avgpool2d.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_topk.get_tensor_input": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_dist.generate_samples": ["common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_index_copy.make_arg": ["torch.testing._internal.common_utils.make_tensor"], "torch.repeat_interleave": [], "common_methods_invocations.sample_inputs_put.gen_inputs": ["common_methods_invocations.SampleInput.__init__", "torch.repeat_interleave", "torch.randperm", "itertools.product"], "common_methods_invocations.sample_inputs_take.gen_inputs": ["common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_repeat_tile": ["<builtin>.len", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_narrow.generator": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_nn_unfold.generator": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_squeeze.generator": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_logdet.make_nonzero_det": ["torch.linalg.svd", "<builtin>.range", "<builtin>.list"], "common_methods_invocations.sample_inputs_logdet._helper": ["torch.testing._internal.common_utils.make_symmetric_matrices", "common_methods_invocations.SampleInput.__init__", "torch.testing._internal.common_utils.make_fullrank_matrices_with_distinct_singular_values", "common_methods_invocations.sample_inputs_logdet.make_nonzero_det", "torch.testing._internal.common_utils.make_symmetric_pd_matrices"], "torch.testing._internal.common_utils.make_symmetric_pd_matrices": [], "torch.testing._internal.common_utils.make_symmetric_matrices": [], "torch.testing._internal.common_utils.make_fullrank_matrices_with_distinct_singular_values": [], "common_methods_invocations.np_unary_ufunc_integer_promotion_wrapper": ["functools.wraps"], "common_methods_invocations.np_unary_ufunc_integer_promotion_wrapper.is_integral": [], "common_methods_invocations.np_unary_ufunc_integer_promotion_wrapper.wrapped_fn": ["numpy.exp", "numpy.expm1", "numpy.reciprocal", "torch.get_default_dtype", "numpy.exp2", "numpy.cosh", "numpy.sinh", "common_methods_invocations.np_unary_ufunc_integer_promotion_wrapper.is_integral"], "numpy.expm1": [], "numpy.exp2": [], "common_methods_invocations.sample_inputs_spectral_ops": ["<builtin>.dict", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.SpectralFuncInfo.__init__": ["common_methods_invocations._getattr_qual", "<builtin>.super", "<builtin>.list"], "common_methods_invocations.ShapeFuncInfo.__init__": ["<builtin>.super"], "common_methods_invocations.sample_inputs_foreach": ["torch.testing._internal.common_utils.make_tensor", "<builtin>.range"], "common_methods_invocations.get_foreach_method_names": ["<builtin>.getattr"], "common_methods_invocations.ForeachFuncInfo.__init__": ["common_methods_invocations.get_foreach_method_names", "<builtin>.super"], "torch.testing._internal.common_utils.random_hermitian_pd_matrix": [], "torch.testing._internal.common_utils.random_well_conditioned_matrix": [], "common_methods_invocations.sample_inputs_ormqr.gen_inputs": ["<builtin>.min", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_symeig.<lambda1>": ["<builtin>.abs"], "common_methods_invocations.sample_inputs_linalg_eig.out_fn": ["<builtin>.abs"], "common_methods_invocations.sample_inputs_linalg_eigh.out_fn": ["<builtin>.abs", "<builtin>.isinstance"], "common_methods_invocations.sample_inputs_linalg_slogdet.out_fn": [], "common_methods_invocations.sample_inputs_lu.generate_samples": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_lu_unpack.generate_samples": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.sample_inputs_lu", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_roll.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_rot90.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations._generate_correlation_inputs": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations._sample_inputs_svd": ["common_methods_invocations.SampleInput.__init__", "torch.testing._internal.common_utils.random_fullrank_matrix_distinct_singular_value"], "common_methods_invocations._sample_inputs_svd.slice_V": [], "common_methods_invocations._sample_inputs_svd.uv_loss": [], "common_methods_invocations._sample_inputs_svd.<lambda1>": [], "common_methods_invocations._sample_inputs_svd.<lambda2>": ["<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda3>": ["<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda4>": ["<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda5>": ["<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda6>": ["<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda7>": ["<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda8>": ["<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda9>": ["common_methods_invocations._sample_inputs_svd.slice_V", "<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda10>": ["<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda11>": ["common_methods_invocations._sample_inputs_svd.slice_V", "<builtin>.abs"], "common_methods_invocations._sample_inputs_svd.<lambda12>": ["<builtin>.abs"], "common_methods_invocations.sample_inputs_permute.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_eig.process_output": [], "common_methods_invocations.sample_inputs_flip.gen_samples": ["common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_fmod_remainder": ["functools.partial", "<builtin>.list", "torch.tensor", "common_methods_invocations.sample_inputs_fmod_remainder.generator"], "common_methods_invocations.sample_inputs_fmod_remainder.generator": ["common_methods_invocations.SampleInput.__init__", "<builtin>.isinstance"], "common_methods_invocations.sample_inputs_clamp.detach": [], "common_methods_invocations.sample_inputs_clamp_scalar": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_kwargs_clamp_scalar": ["random.uniform", "random.randint"], "common_methods_invocations.sample_inputs_cumprod.make_arg": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_cumprod.prod_zeros": ["torch.no_grad", "common_methods_invocations.sample_inputs_cumprod.make_arg", "<builtin>.len"], "common_methods_invocations.sample_inputs_cumprod.sample_generator": ["common_methods_invocations.sample_inputs_cumprod.prod_zeros", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_cumprod.make_arg", "<builtin>.range"], "common_methods_invocations.sample_inputs_copysign._make_tensor": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_copysign.generator": ["common_methods_invocations.sample_inputs_copysign._make_tensor", "common_methods_invocations.SampleInput.__init__", "<builtin>.isinstance"], "common_methods_invocations.sample_inputs_prod.make_arg": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_prod.prod_single_zero": ["common_methods_invocations.sample_inputs_prod.make_arg", "torch.no_grad"], "common_methods_invocations.sample_inputs_prod.sample_generator": ["common_methods_invocations.sample_inputs_prod.prod_single_zero", "common_methods_invocations.sample_inputs_cumprod", "common_methods_invocations.SampleInput.__init__", "torch.no_grad", "common_methods_invocations.sample_inputs_prod.make_arg"], "common_methods_invocations.sample_inputs_nextafter.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_diagonal_diag_embed.generator": ["common_methods_invocations.SampleInput.__init__", "itertools.chain", "itertools.product"], "common_methods_invocations.sample_inputs_to_sparse.<lambda1>": [], "common_methods_invocations.sample_inputs_to_sparse.<lambda2>": [], "common_methods_invocations.sample_inputs_softmax_variant": ["functools.partial", "torch.device", "common_methods_invocations.SampleInput.__init__", "<builtin>.dict"], "common_methods_invocations.sample_inputs_logit": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_masked_scatter.samples_generator": ["torch.randn", "common_methods_invocations.SampleInput.__init__", "common_methods_invocations.bernoulli_scalar"], "common_methods_invocations.bernoulli_scalar": ["torch.tensor"], "common_methods_invocations.sample_inputs_masked_fill.sample_generator": ["torch.randn", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_polar._make_tensor_helper": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_complex._make_tensor_helper": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_polygamma": ["functools.partial", "common_methods_invocations.sample_inputs_polygamma.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_polygamma.generator": ["common_methods_invocations.SampleInput.__init__", "itertools.product"], "common_methods_invocations.sample_inputs_mvlgamma": ["functools.partial", "common_methods_invocations.sample_inputs_mvlgamma.generator", "<builtin>.list"], "common_methods_invocations.sample_inputs_mvlgamma.compute_min_val": [], "common_methods_invocations.sample_inputs_mvlgamma.generator": ["common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_mvlgamma.compute_min_val", "itertools.product"], "common_methods_invocations.skips_mvlgamma": ["common_methods_invocations.SkipInfo.__init__"], "common_methods_invocations.MvlGammaInfo.__init__": ["torch.testing.all_types_and", "torch.testing.all_types", "<builtin>.super", "torch.testing._internal.common_device_type.precisionOverride"], "torch.testing._internal.common_device_type.precisionOverride": [], "torch.testing.all_types": [], "torch.testing.all_types_and": [], "common_methods_invocations.sample_inputs_entr": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_i0_i1": ["torch.finfo", "torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__", "torch.no_grad"], "common_methods_invocations.sample_inputs_rsub": ["common_methods_invocations.sample_inputs_rsub._samples_with_alpha_helper", "common_methods_invocations.SampleInput.__init__", "<builtin>.tuple", "common_methods_invocations.sample_inputs_rsub._make_tensor_helper", "<builtin>.Exception"], "common_methods_invocations.sample_inputs_rsub._make_tensor_helper": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_rsub._samples_with_alpha_helper": ["<builtin>.dict", "common_methods_invocations.SampleInput.__init__", "<builtin>.filter", "itertools.product"], "common_methods_invocations.sample_inputs_rsub.filter_fn": ["<builtin>.isinstance"], "common_methods_invocations.sample_inputs_cumulative_ops": ["common_methods_invocations.sample_inputs_cumulative_ops._make_tensor_helper", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_cumulative_ops._make_tensor_helper": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_atan2.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_split": ["functools.partial", "common_methods_invocations.sample_inputs_split.generator", "<builtin>.int", "<builtin>.list"], "common_methods_invocations.sample_inputs_split.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_split_with_sizes.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_msort.apply_grad": ["torch.testing.floating_types_and"], "common_methods_invocations.sample_inputs_msort.large_1d_unique": ["common_methods_invocations.sample_inputs_msort.apply_grad", "torch.randperm"], "common_methods_invocations.sample_inputs_scatter._tensor": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_scatter._gather": ["common_methods_invocations.gather_variable"], "common_methods_invocations.sample_inputs_scatter_add._tensor": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_scatter_add._gather": ["common_methods_invocations.gather_variable"], "common_methods_invocations.sample_inputs_tril_triu.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_clone.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_contiguous.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_resize_ops.generator": ["common_methods_invocations.SampleInput.__init__", "<builtin>.ValueError"], "common_methods_invocations.sample_inputs_view_reshape.generator": ["common_methods_invocations.SampleInput.__init__", "<builtin>.len"], "common_methods_invocations.sample_inputs_view_as_reshape_as.generator": ["common_methods_invocations.SampleInput.__init__", "<builtin>.len"], "common_methods_invocations.sample_inputs_select.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_rbinops._make_tensor_helper": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_expand.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_expand_as.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_where.make_bool_mask": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.sample_inputs_where.make_bool_mask.random_index"], "common_methods_invocations.sample_inputs_where.make_bool_mask.random_index": ["<builtin>.map", "<builtin>.tuple"], "common_methods_invocations.sample_inputs_where.make_bool_mask.random_index.<lambda1>": ["random.randint"], "common_methods_invocations.sample_inputs_where.generator": ["common_methods_invocations.SampleInput.__init__", "common_methods_invocations.sample_inputs_where.make_bool_mask"], "common_methods_invocations.sample_inputs_chunk.generator": ["common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.sample_inputs_kthvalue._tensor": ["torch.testing._internal.common_utils.make_tensor"], "common_methods_invocations.sample_inputs_one_hot.make_input": ["torch.testing._internal.common_utils.make_tensor"], "torch.testing.all_types_and_complex": [], "torch.testing.floating_types": [], "torch.testing.all_types_and_complex_and": [], "common_methods_invocations.reference_sign": ["numpy.sign"], "common_methods_invocations.reference_sgn": ["common_methods_invocations.reference_sign", "numpy.abs", "<builtin>.complex", "numpy.array"], "<builtin>.complex": [], "common_methods_invocations.reference_sigmoid": ["numpy.exp"], "common_methods_invocations.reference_logsigmoid": ["numpy.maximum", "numpy.exp", "numpy.log"], "common_methods_invocations.reference_lgamma": ["numpy.where", "numpy.array", "<builtin>.float"], "common_methods_invocations.reference_polygamma": ["torch.get_default_dtype"], "common_methods_invocations.reference_mvlgamma": [], "common_methods_invocations.reference_softplus": ["numpy.log", "numpy.exp"], "common_methods_invocations.reference_one_hot": ["numpy.put", "numpy.arange", "<builtin>.int", "numpy.amax", "numpy.zeros"], "numpy.put": [], "common_methods_invocations.reference_mse_loss": ["numpy.mean", "numpy.sum"], "common_methods_invocations.gradcheck_wrapper_hermitian_input": [], "common_methods_invocations.gradcheck_wrapper_triangular_input": [], "common_methods_invocations.<list5>.<lambda1>": [], "common_methods_invocations.<lambda1>": ["numpy.add", "numpy.multiply"], "common_methods_invocations.<list5>.<lambda2>": [], "common_methods_invocations.<lambda2>": ["numpy.multiply", "numpy.subtract"], "common_methods_invocations.<list5>.<lambda3>": [], "common_methods_invocations.<lambda3>": ["numpy.multiply", "numpy.add", "numpy.sum", "numpy.asarray", "numpy.matmul"], "torch.testing._internal.common_device_type.tol": [], "torch.testing._internal.common_device_type.toleranceOverride": [], "torch.testing.floating_and_complex_types": [], "common_methods_invocations.<list5>.<lambda4>": [], "common_methods_invocations.<lambda4>": ["numpy.amax"], "common_methods_invocations.<list5>.<lambda5>": [], "common_methods_invocations.<lambda5>": ["numpy.amin"], "torch.testing.complex_types": [], "torch.testing.integral_types_and": [], "common_methods_invocations.<list5>.<lambda6>": [], "common_methods_invocations.<list5>.<lambda7>": [], "common_methods_invocations.<list5>.<lambda8>": [], "common_methods_invocations.<list5>.<lambda9>": [], "numpy.modf": [], "common_methods_invocations.<lambda9>": ["numpy.modf"], "torch.testing.double_types": [], "common_methods_invocations.<list5>.<lambda10>": [], "common_methods_invocations.<lambda10>": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.<list5>.<lambda11>": [], "common_methods_invocations.<lambda11>": ["torch.testing._internal.common_utils.make_tensor", "common_methods_invocations.SampleInput.__init__"], "common_methods_invocations.<list5>.<lambda12>": [], "common_methods_invocations.<lambda12>": ["numpy.amax", "numpy.amin"], "common_methods_invocations.<list5>.<lambda13>": [], "common_methods_invocations.<list5>.<lambda14>": [], "common_methods_invocations.<list5>.<lambda15>": [], "common_methods_invocations.<list5>.<lambda16>": [], "common_methods_invocations.<lambda16>": ["torch.finfo"], "common_methods_invocations.<list5>.<lambda17>": [], "common_methods_invocations.<lambda17>": ["numpy.sqrt", "numpy.reciprocal"], "common_methods_invocations.<list5>.<lambda18>": [], "torch.einsum": [], "common_methods_invocations.<lambda18>": ["torch.einsum"], "common_methods_invocations.<list5>.<lambda19>": [], "torch.polygamma": [], "common_methods_invocations.<lambda19>": ["torch.polygamma"], "common_methods_invocations.<list5>.<lambda20>": [], "common_methods_invocations.<list5>.<lambda21>": [], "torch.special.polygamma": [], "common_methods_invocations.<lambda21>": ["torch.special.polygamma"], "common_methods_invocations.<list5>.<lambda22>": [], "common_methods_invocations.<list5>.<lambda23>": [], "common_methods_invocations.<lambda23>": ["torch.polygamma"], "common_methods_invocations.<list5>.<lambda24>": [], "common_methods_invocations.<list5>.<lambda25>": [], "common_methods_invocations.<lambda25>": ["torch.polygamma"], "common_methods_invocations.<list5>.<lambda26>": [], "common_methods_invocations.<list5>.<lambda27>": [], "common_methods_invocations.<lambda27>": ["torch.polygamma"], "common_methods_invocations.<list5>.<lambda28>": [], "common_methods_invocations.<list5>.<lambda29>": [], "common_methods_invocations.<lambda29>": ["torch.polygamma"], "common_methods_invocations.<list5>.<lambda30>": [], "common_methods_invocations.<list5>.<lambda31>": [], "common_methods_invocations.<list5>.<lambda32>": [], "common_methods_invocations.<list5>.<lambda33>": [], "_core._dispatch_dtypes": [], "common_methods_invocations.<list5>.<lambda34>": [], "common_methods_invocations.<list5>.<lambda35>": [], "common_methods_invocations.<list5>.<lambda36>": [], "torch.fill_": [], "common_methods_invocations.<lambda36>": ["torch.fill_"], "common_methods_invocations.<list5>.<lambda37>": [], "common_methods_invocations.<list5>.<lambda38>": [], "torch.resize_as_": [], "common_methods_invocations.<lambda38>": ["torch.resize_as_"], "common_methods_invocations.<list5>.<lambda39>": [], "torch.zero_": [], "common_methods_invocations.<lambda39>": ["torch.zero_"], "common_methods_invocations.<list5>.<lambda40>": [], "torch.special.zeta": [], "common_methods_invocations.<lambda40>": ["torch.special.zeta"], "common_methods_invocations.<list5>.<lambda41>": [], "common_methods_invocations.<list5>.<lambda42>": [], "common_methods_invocations.<lambda42>": ["torch.where"], "common_methods_invocations._compare_trilu_indices": ["torch.triu_indices", "torch.tril_indices", "torch.empty", "torch.ones"], "torch.tril_indices": [], "torch.triu_indices": [], "common_methods_invocations._compare_large_trilu_indices": ["torch.triu_indices", "torch.tril_indices", "torch.cuda.empty_cache", "torch.ones"], "common_methods_invocations.run_additional_tri_tests": ["torch.triu_indices", "torch.tril_indices", "torch.ones"], "common_methods_invocations.run_additional_tri_tests.<lambda1>": ["torch.triu_indices"], "common_methods_invocations.run_additional_tri_tests.<lambda2>": ["torch.tril_indices"], "common_methods_invocations.unpack_variables": ["<builtin>.tuple", "<builtin>.isinstance", "common_methods_invocations.unpack_variables"], "common_methods_invocations.create_input": ["<builtin>.tuple", "common_methods_invocations.create_input.map_arg", "<builtin>.isinstance"], "common_methods_invocations.create_input.map_arg": ["common_methods_invocations.create_input.map_arg", "common_methods_invocations.create_input.map_arg.maybe_non_contig", "torch.randn", "<builtin>.RuntimeError", "<builtin>.len", "<builtin>.callable", "common_methods_invocations.create_input.map_arg.conjugate", "<builtin>.isinstance"], "common_methods_invocations.create_input.map_arg.maybe_non_contig": ["torch.testing.make_non_contiguous"], "torch.testing.make_non_contiguous": [], "common_methods_invocations.create_input.map_arg.conjugate": [], "common_modules": ["common_modules.ModuleInfo.__init__", "<builtin>.getattr", "itertools.chain", "<builtin>.list"], "common_modules.modules.__init__": [], "common_modules.modules._parametrize_test": ["torch.testing.floating_types", "torch.testing._internal.common_device_type._dtype_test_suffix", "torch.testing._internal.common_device_type._update_param_kwargs", "torch.testing._internal.common_device_type.skipIf", "<builtin>.print", "functools.wraps"], "torch.testing._internal.common_device_type._dtype_test_suffix": [], "torch.testing._internal.common_device_type._update_param_kwargs": [], "common_modules.modules._parametrize_test.test_wrapper": [], "common_modules.formatted_module_name": [], "common_modules.FunctionInput.__init__": [], "common_modules.ModuleInput.__init__": ["functools.wraps"], "common_modules.ModuleInput.__init__.copy_reference_fn": ["copy.deepcopy", "<builtin>.list"], "common_modules.ModuleInfo.__init__": [], "common_modules.ModuleInfo.should_skip": ["<builtin>.any"], "common_modules.ModuleInfo.name": ["common_modules.formatted_module_name"], "common_modules.module_inputs_torch_nn_Linear": ["common_modules.ModuleInput.__init__", "common_modules.FunctionInput.__init__", "functools.partial"], "common_modules.module_inputs_torch_nn_Linear.<list1>.<lambda1>": [], "common_modules.module_inputs_torch_nn_Linear.<lambda1>": ["torch.mm"], "common_modules.module_inputs_torch_nn_Linear.<list1>.<lambda2>": [], "common_modules.module_inputs_torch_nn_Linear.<lambda2>": ["torch.mm"], "common_modules.module_inputs_torch_nn_Linear.<list1>.<lambda3>": [], "common_modules.module_inputs_torch_nn_Linear.<lambda3>": ["torch.mm"], "common_modules.module_inputs_torch_nn_NLLLoss": ["common_modules.ModuleInput.__init__", "torch.empty", "common_modules.FunctionInput.__init__", "functools.partial"], "common_modules.module_inputs_torch_nn_NLLLoss.reference_fn": ["torch.testing._internal.common_nn.nllloss_reference"], "torch.testing._internal.common_nn.nllloss_reference": [], "common_nn": ["common_nn.kldivloss_no_reduce_scalar_test", "common_nn.kldivloss_no_reduce_log_target_test", "common_nn.l1loss_no_reduce_scalar_test", "itertools.product", "common_nn.kldivloss_no_reduce_test", "common_nn.hingeembeddingloss_no_reduce_test", "common_nn.nllloss2d_no_reduce_test", "common_nn.bceloss_no_reduce_test", "common_nn.multimarginloss_no_reduce_test", "common_nn.multimarginloss_p_no_reduce_test", "<builtin>.map", "common_nn.softmarginloss_no_reduce_test", "common_nn.bceloss_weights_no_reduce_scalar_test", "common_nn.nllloss_no_reduce_test", "<builtin>.tuple", "common_nn.multilabelmarginloss_index_neg_test", "common_nn.nllloss2d_no_reduce_weights_test", "common_nn.nllloss_no_reduce_weights_test", "common_nn.bce_with_logistic_legacy_enum_test", "common_nn.multilabelmarginloss_no_reduce_test", "common_nn.fractional_max_pool3d_test", "common_nn.l1loss_no_reduce_complex_test", "common_nn.nllloss_no_reduce_ignore_index_test", "common_nn.huberloss_delta_test", "common_nn.bce_with_logistic_no_reduce_test", "<builtin>.range", "torch.tensor", "common_nn.kldivloss_no_reduce_scalar_log_target_test", "common_nn.wrap_functional", "torch.rand", "common_nn.smoothl1loss_no_reduce_test", "common_nn.nlllossNd_no_reduce_ignore_index_test", "common_nn.nllloss_no_reduce_weights_ignore_index_neg_test", "<builtin>.dict", "common_nn.bceloss_weights_no_reduce_test", "<builtin>.zip", "common_nn.smoothl1loss_beta_test", "common_nn.nllloss2d_no_reduce_ignore_index_test", "common_nn.mseloss_no_reduce_scalar_test", "common_nn.multimarginloss_margin_no_reduce_test", "common_nn.smoothl1loss_no_reduce_scalar_test", "common_nn.nlllossNd_no_reduce_test", "common_nn.fractional_max_pool2d_test", "common_nn.multimarginloss_1d_no_reduce_test", "common_nn.bceloss_no_reduce_scalar_test", "common_nn.kldivloss_with_target_no_reduce_test", "common_nn.kldivloss_with_log_target_no_reduce_test", "common_nn.multilabelmarginloss_1d_no_reduce_test", "common_nn.multimarginloss_1d_input_0d_target_no_reduce_test", "common_nn.l1loss_no_reduce_test", "common_nn.multilabelmarginloss_0d_no_reduce_test", "common_nn.hingeembeddingloss_margin_no_reduce_test", "common_nn.multilabelsoftmarginloss_no_reduce_test", "common_nn.multilabelsoftmarginloss_weights_no_reduce_test", "common_nn.bce_with_logistic_no_reduce_scalar_test", "common_nn.mseloss_no_reduce_test", "common_nn.nllloss_no_reduce_weights_ignore_index_test", "common_nn.nlllossNd_no_reduce_weights_test", "common_nn.smoothl1loss_zero_beta_test", "common_nn.multimarginloss_weights_no_reduce_test", "common_nn.poissonnllloss_no_reduce_test"], "common_nn.get_reduction": ["torch.nn._reduction.legacy_get_string", "<builtin>.getattr"], "torch.nn._reduction.legacy_get_string": [], "common_nn.get_weight": ["<builtin>.getattr"], "common_nn.<list1>.<lambda1>": [], "common_nn.<lambda1>": ["torch.randn", "<builtin>.getattr", "torch.mm", "torch.nn.Conv1d"], "common_nn.<list1>.<lambda2>": [], "common_nn.<lambda2>": ["<builtin>.sum", "<builtin>.getattr", "<builtin>.zip", "torch.mm", "torch.nn.Conv1d"], "common_nn.<list1>.<lambda3>": [], "common_nn.<list1>.<lambda4>": [], "common_nn.<lambda4>": ["torch.flatten", "torch.empty", "torch.nn.Conv1d"], "common_nn.<list1>.<lambda5>": [], "common_nn.<lambda5>": ["common_nn.nllloss_reference", "torch.exp", "common_nn.get_reduction", "torch.nn.Conv1d"], "common_nn.<list1>.<lambda6>": [], "common_nn.<lambda6>": ["torch.exp", "torch.nn.Conv1d", "torch.rand"], "common_nn.<list1>.<lambda7>": [], "common_nn.<lambda7>": ["torch.exp", "torch.nn.ConvTranspose1d", "torch.empty"], "common_nn.<list1>.<lambda8>": [], "common_nn.<lambda8>": ["torch.exp", "torch.nn.ConvTranspose1d", "common_nn.nllloss_reference"], "common_nn.<list1>.<lambda9>": [], "common_nn.<lambda9>": ["torch.rand", "torch.nn.Conv2d", "torch.where"], "common_nn.<list1>.<lambda10>": [], "common_nn.<lambda10>": ["torch.randn", "torch.nn.Conv2d", "torch.rand"], "common_nn.<list1>.<lambda11>": [], "common_nn.<list1>.<lambda12>": [], "common_nn.<lambda12>": ["torch.exp", "common_nn.get_weight", "torch.nn.Conv2d", "common_nn.nllloss_reference", "torch.log"], "torch.log": [], "common_nn.<list1>.<lambda13>": [], "common_nn.<lambda13>": ["torch.exp", "torch.nn.Conv2d", "torch.log", "torch.rand"], "common_nn.<list1>.<lambda14>": [], "common_nn.<lambda14>": ["torch.exp", "torch.nn.ConvTranspose2d", "torch.log", "torch.rand"], "common_nn.<list1>.<lambda15>": [], "common_nn.<lambda15>": ["torch.nn.Conv2d", "torch.clamp", "torch.empty"], "common_nn.<list1>.<lambda16>": [], "common_nn.<lambda16>": ["torch.nn.Conv2d", "torch.clamp", "common_nn.nllloss_reference", "common_nn.get_weight"], "common_nn.<list1>.<lambda17>": [], "common_nn.<lambda17>": ["torch.nn.Conv2d", "torch.clamp", "torch.rand"], "common_nn.<list1>.<lambda18>": [], "common_nn.<lambda18>": ["torch.nn.Conv2d", "torch.clamp", "torch.rand"], "common_nn.<list1>.<lambda19>": [], "common_nn.<lambda19>": ["torch.nn.Conv2d", "torch.clamp", "torch.empty"], "common_nn.<list1>.<lambda20>": [], "common_nn.<lambda20>": ["torch.nn.AvgPool2d", "torch.clamp", "common_nn.nllloss_reference", "common_nn.get_weight"], "common_nn.<list1>.<lambda21>": [], "common_nn.<lambda21>": ["torch.nn.AvgPool2d", "torch.abs", "torch.rand"], "common_nn._rand_tensor_non_equal": ["torch.randperm", "functools.reduce"], "common_nn.wrap_functional": [], "common_nn.wrap_functional.FunctionalModule.forward": [], "common_nn.poissonnllloss_no_reduce_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.poissonnllloss_no_reduce_test.<lambda1>": ["torch.nn.functional.poisson_nll_loss"], "torch.nn.functional.poisson_nll_loss": [], "common_nn.poissonnllloss_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.poissonnllloss_no_reduce_test.<lambda3>": [], "common_nn.bceloss_no_reduce_test": ["torch.randn", "torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional"], "common_nn.bceloss_no_reduce_test.<lambda1>": ["torch.nn.functional.binary_cross_entropy"], "torch.nn.functional.binary_cross_entropy": [], "common_nn.bceloss_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.bceloss_no_reduce_test.<lambda3>": [], "common_nn.bceloss_no_reduce_scalar_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.bceloss_no_reduce_scalar_test.<lambda1>": ["torch.nn.functional.binary_cross_entropy"], "common_nn.bceloss_no_reduce_scalar_test.<lambda2>": ["torch.rand"], "common_nn.bceloss_no_reduce_scalar_test.<lambda3>": [], "common_nn.bceloss_weights_no_reduce_test": ["common_nn.wrap_functional", "torch.rand", "torch.randn", "torch.autograd.Variable", "<builtin>.dict"], "common_nn.bceloss_weights_no_reduce_test.<lambda1>": ["torch.nn.functional.binary_cross_entropy"], "common_nn.bceloss_weights_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.bceloss_weights_no_reduce_test.<lambda3>": [], "common_nn.bceloss_weights_no_reduce_scalar_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.bceloss_weights_no_reduce_scalar_test.<lambda1>": ["torch.nn.functional.binary_cross_entropy"], "common_nn.bceloss_weights_no_reduce_scalar_test.<lambda2>": ["torch.rand"], "common_nn.bceloss_weights_no_reduce_scalar_test.<lambda3>": [], "common_nn.bce_with_logistic_legacy_enum_test": ["common_nn.wrap_functional", "torch.nn.Sigmoid", "torch.randn", "torch.autograd.Variable", "<builtin>.dict"], "torch.nn.Sigmoid": [], "common_nn.bce_with_logistic_legacy_enum_test.<lambda1>": ["torch.nn.functional.binary_cross_entropy_with_logits"], "torch.nn.functional.binary_cross_entropy_with_logits": [], "common_nn.bce_with_logistic_legacy_enum_test.<lambda2>": ["torch.rand"], "common_nn.bce_with_logistic_legacy_enum_test.<lambda3>": [], "common_nn.bce_with_logistic_no_reduce_test": ["common_nn.wrap_functional", "torch.nn.Sigmoid", "torch.randn", "torch.autograd.Variable", "<builtin>.dict"], "common_nn.bce_with_logistic_no_reduce_test.<lambda1>": ["torch.nn.functional.binary_cross_entropy_with_logits"], "common_nn.bce_with_logistic_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.bce_with_logistic_no_reduce_test.<lambda3>": [], "common_nn.bce_with_logistic_no_reduce_scalar_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict", "torch.nn.Sigmoid"], "common_nn.bce_with_logistic_no_reduce_scalar_test.<lambda1>": ["torch.nn.functional.binary_cross_entropy_with_logits"], "common_nn.bce_with_logistic_no_reduce_scalar_test.<lambda2>": ["torch.rand"], "common_nn.bce_with_logistic_no_reduce_scalar_test.<lambda3>": [], "common_nn.kldivloss_with_target_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.kldivloss_with_target_no_reduce_test.<lambda1>": ["torch.nn.functional.kl_div"], "torch.nn.functional.kl_div": [], "common_nn.kldivloss_with_target_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.kldivloss_with_target_no_reduce_test.<lambda3>": [], "common_nn.kldivloss_no_reduce_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.kldivloss_no_reduce_test.<lambda1>": ["torch.nn.functional.kl_div"], "common_nn.kldivloss_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.kldivloss_no_reduce_test.<lambda3>": [], "common_nn.kldivloss_no_reduce_scalar_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.kldivloss_no_reduce_scalar_test.<lambda1>": ["torch.nn.functional.kl_div"], "common_nn.kldivloss_no_reduce_scalar_test.<lambda2>": ["torch.rand"], "common_nn.kldivloss_no_reduce_scalar_test.<lambda3>": [], "common_nn.kldivloss_with_log_target_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.kldivloss_with_log_target_no_reduce_test.<lambda1>": ["torch.nn.functional.kl_div"], "common_nn.kldivloss_with_log_target_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.kldivloss_with_log_target_no_reduce_test.<lambda3>": [], "common_nn.kldivloss_no_reduce_log_target_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.kldivloss_no_reduce_log_target_test.<lambda1>": ["torch.nn.functional.kl_div"], "common_nn.kldivloss_no_reduce_log_target_test.<lambda2>": ["torch.rand"], "common_nn.kldivloss_no_reduce_log_target_test.<lambda3>": [], "common_nn.kldivloss_no_reduce_scalar_log_target_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.kldivloss_no_reduce_scalar_log_target_test.<lambda1>": ["torch.nn.functional.kl_div"], "common_nn.kldivloss_no_reduce_scalar_log_target_test.<lambda2>": ["torch.rand"], "common_nn.kldivloss_no_reduce_scalar_log_target_test.<lambda3>": [], "common_nn.l1loss_no_reduce_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.l1loss_no_reduce_test.<lambda1>": ["torch.nn.functional.l1_loss"], "common_nn.l1loss_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.l1loss_no_reduce_test.<lambda3>": [], "common_nn.l1loss_no_reduce_complex_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.l1loss_no_reduce_complex_test.<lambda1>": ["torch.nn.functional.l1_loss"], "common_nn.l1loss_no_reduce_complex_test.<lambda2>": ["torch.randn"], "common_nn.l1loss_no_reduce_complex_test.<lambda3>": [], "common_nn.l1loss_no_reduce_scalar_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.l1loss_no_reduce_scalar_test.<lambda1>": ["torch.nn.functional.l1_loss"], "common_nn.l1loss_no_reduce_scalar_test.<lambda2>": ["torch.randn"], "common_nn.l1loss_no_reduce_scalar_test.<lambda3>": [], "common_nn.mseloss_no_reduce_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.mseloss_no_reduce_test.<lambda1>": ["torch.nn.functional.mse_loss"], "torch.nn.functional.mse_loss": [], "common_nn.mseloss_no_reduce_test.<lambda2>": [], "common_nn.mseloss_no_reduce_scalar_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.mseloss_no_reduce_scalar_test.<lambda1>": ["torch.nn.functional.mse_loss"], "common_nn.mseloss_no_reduce_scalar_test.<lambda2>": [], "common_nn.nllloss_no_reduce_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.empty"], "common_nn.nllloss_no_reduce_test.<lambda1>": ["torch.nn.functional.nll_loss"], "torch.nn.functional.nll_loss": [], "common_nn.nllloss_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.nllloss_no_reduce_test.<lambda3>": [], "common_nn.nllloss_no_reduce_ignore_index_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.empty"], "common_nn.nllloss_no_reduce_ignore_index_test.<lambda1>": ["<builtin>.str", "<builtin>.int", "torch.nn.functional.nll_loss"], "common_nn.nllloss_no_reduce_ignore_index_test.<lambda2>": ["torch.rand"], "common_nn.nllloss_no_reduce_ignore_index_test.<lambda3>": [], "common_nn.nllloss_no_reduce_weights_test": ["common_nn.wrap_functional", "torch.rand", "torch.empty", "torch.autograd.Variable", "<builtin>.dict"], "common_nn.nllloss_no_reduce_weights_test.kwargs": [], "common_nn.nllloss_no_reduce_weights_test.<lambda1>": ["torch.nn.functional.nll_loss", "common_nn.nllloss_no_reduce_weights_test.kwargs"], "common_nn.nllloss_no_reduce_weights_test.<lambda2>": ["torch.rand"], "common_nn.nllloss_no_reduce_weights_test.<lambda3>": ["common_nn.nllloss_no_reduce_weights_test.kwargs"], "common_nn.nllloss_no_reduce_weights_ignore_index_test": ["common_nn.wrap_functional", "torch.rand", "torch.empty", "torch.autograd.Variable", "<builtin>.dict"], "common_nn.nllloss_no_reduce_weights_ignore_index_test.kwargs": [], "common_nn.nllloss_no_reduce_weights_ignore_index_test.<lambda1>": ["common_nn.nllloss_no_reduce_weights_ignore_index_test.kwargs", "torch.nn.functional.nll_loss"], "common_nn.nllloss_no_reduce_weights_ignore_index_test.<lambda2>": ["torch.rand"], "common_nn.nllloss_no_reduce_weights_ignore_index_test.<lambda3>": ["common_nn.nllloss_no_reduce_weights_ignore_index_test.kwargs"], "common_nn.nllloss_no_reduce_weights_ignore_index_neg_test": ["common_nn.wrap_functional", "torch.rand", "torch.empty", "torch.autograd.Variable", "<builtin>.dict"], "common_nn.nllloss_no_reduce_weights_ignore_index_neg_test.kwargs": [], "common_nn.nllloss_no_reduce_weights_ignore_index_neg_test.<lambda1>": ["common_nn.nllloss_no_reduce_weights_ignore_index_neg_test.kwargs", "torch.nn.functional.nll_loss"], "common_nn.nllloss_no_reduce_weights_ignore_index_neg_test.<lambda2>": ["common_nn.nllloss_no_reduce_weights_ignore_index_neg_test.kwargs"], "common_nn.nllloss2d_no_reduce_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.rand"], "common_nn.nllloss2d_no_reduce_test.<lambda1>": ["torch.nn.functional.nll_loss"], "common_nn.nllloss2d_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.nllloss2d_no_reduce_test.<lambda3>": [], "common_nn.nllloss2d_no_reduce_ignore_index_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.rand"], "common_nn.nllloss2d_no_reduce_ignore_index_test.<lambda1>": ["<builtin>.str", "<builtin>.int", "torch.nn.functional.nll_loss"], "common_nn.nllloss2d_no_reduce_ignore_index_test.<lambda2>": ["torch.rand"], "common_nn.nllloss2d_no_reduce_ignore_index_test.<lambda3>": [], "common_nn.nllloss2d_no_reduce_weights_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.rand"], "common_nn.nllloss2d_no_reduce_weights_test.kwargs": [], "common_nn.nllloss2d_no_reduce_weights_test.<lambda1>": ["torch.nn.functional.nll_loss", "common_nn.nllloss2d_no_reduce_weights_test.kwargs"], "common_nn.nllloss2d_no_reduce_weights_test.<lambda2>": ["torch.rand"], "common_nn.nllloss2d_no_reduce_weights_test.<lambda3>": ["common_nn.nllloss2d_no_reduce_weights_test.kwargs"], "common_nn.nlllossNd_no_reduce_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.rand"], "common_nn.nlllossNd_no_reduce_test.<lambda1>": ["torch.nn.functional.nll_loss"], "common_nn.nlllossNd_no_reduce_test.<lambda2>": ["torch.rand"], "common_nn.nlllossNd_no_reduce_test.<lambda3>": [], "common_nn.nlllossNd_no_reduce_ignore_index_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.rand"], "common_nn.nlllossNd_no_reduce_ignore_index_test.<lambda1>": ["<builtin>.str", "<builtin>.int", "torch.nn.functional.nll_loss"], "common_nn.nlllossNd_no_reduce_ignore_index_test.<lambda2>": ["torch.rand"], "common_nn.nlllossNd_no_reduce_ignore_index_test.<lambda3>": [], "common_nn.nlllossNd_no_reduce_weights_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.rand"], "common_nn.nlllossNd_no_reduce_weights_test.kwargs": [], "common_nn.nlllossNd_no_reduce_weights_test.<lambda1>": ["common_nn.nlllossNd_no_reduce_weights_test.kwargs", "torch.nn.functional.nll_loss"], "common_nn.nlllossNd_no_reduce_weights_test.<lambda2>": ["torch.rand"], "common_nn.nlllossNd_no_reduce_weights_test.<lambda3>": ["common_nn.nlllossNd_no_reduce_weights_test.kwargs"], "common_nn.smoothl1loss_no_reduce_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.smoothl1loss_no_reduce_test.<lambda1>": ["torch.nn.functional.smooth_l1_loss"], "torch.nn.functional.smooth_l1_loss": [], "common_nn.smoothl1loss_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.smoothl1loss_no_reduce_test.<lambda3>": [], "common_nn.smoothl1loss_no_reduce_scalar_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.smoothl1loss_no_reduce_scalar_test.<lambda1>": ["torch.nn.functional.smooth_l1_loss"], "common_nn.smoothl1loss_no_reduce_scalar_test.<lambda2>": ["torch.randn"], "common_nn.smoothl1loss_no_reduce_scalar_test.<lambda3>": [], "common_nn.smoothl1loss_beta_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.smoothl1loss_beta_test.<lambda1>": ["torch.nn.functional.smooth_l1_loss"], "common_nn.smoothl1loss_beta_test.<lambda2>": ["torch.randn"], "common_nn.smoothl1loss_beta_test.<lambda3>": [], "common_nn.smoothl1loss_zero_beta_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.smoothl1loss_zero_beta_test.<lambda1>": ["torch.nn.functional.smooth_l1_loss"], "common_nn.smoothl1loss_zero_beta_test.<lambda2>": ["torch.randn"], "common_nn.smoothl1loss_zero_beta_test.<lambda3>": [], "common_nn.huberloss_delta_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.huberloss_delta_test.<lambda1>": ["torch.nn.functional.huber_loss"], "torch.nn.functional.huber_loss": [], "common_nn.huberloss_delta_test.<lambda2>": ["torch.randn"], "common_nn.huberloss_delta_test.<lambda3>": [], "common_nn.multilabelmarginloss_0d_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.zeros"], "common_nn.multilabelmarginloss_0d_no_reduce_test.<lambda1>": ["torch.nn.functional.multilabel_margin_loss"], "torch.nn.functional.multilabel_margin_loss": [], "common_nn.multilabelmarginloss_0d_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multilabelmarginloss_0d_no_reduce_test.<lambda3>": [], "common_nn.multilabelmarginloss_1d_no_reduce_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.rand"], "common_nn.multilabelmarginloss_1d_no_reduce_test.<lambda1>": ["torch.nn.functional.multilabel_margin_loss"], "common_nn.multilabelmarginloss_1d_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multilabelmarginloss_1d_no_reduce_test.<lambda3>": [], "common_nn.multilabelmarginloss_index_neg_test": ["common_nn.wrap_functional", "torch.clamp", "torch.rand", "torch.autograd.Variable", "<builtin>.dict"], "common_nn.multilabelmarginloss_index_neg_test.<lambda1>": ["torch.nn.functional.multilabel_margin_loss"], "common_nn.multilabelmarginloss_index_neg_test.<lambda2>": ["torch.randn"], "common_nn.multilabelmarginloss_index_neg_test.<lambda3>": [], "common_nn.multilabelmarginloss_no_reduce_test": ["torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional", "torch.rand"], "common_nn.multilabelmarginloss_no_reduce_test.<lambda1>": ["torch.nn.functional.multilabel_margin_loss"], "common_nn.multilabelmarginloss_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multilabelmarginloss_no_reduce_test.<lambda3>": [], "common_nn.hingeembeddingloss_no_reduce_test": ["torch.randn", "torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional"], "common_nn.hingeembeddingloss_no_reduce_test.<lambda1>": ["torch.nn.functional.hinge_embedding_loss"], "torch.nn.functional.hinge_embedding_loss": [], "common_nn.hingeembeddingloss_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.hingeembeddingloss_no_reduce_test.<lambda3>": [], "common_nn.hingeembeddingloss_margin_no_reduce_test": ["torch.randn", "torch.autograd.Variable", "<builtin>.dict", "common_nn.wrap_functional"], "common_nn.hingeembeddingloss_margin_no_reduce_test.<lambda1>": ["torch.nn.functional.hinge_embedding_loss"], "common_nn.hingeembeddingloss_margin_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.hingeembeddingloss_margin_no_reduce_test.<lambda3>": [], "common_nn.softmarginloss_no_reduce_test": ["torch.randn", "common_nn.wrap_functional", "<builtin>.dict"], "common_nn.softmarginloss_no_reduce_test.<lambda1>": ["torch.nn.functional.soft_margin_loss"], "torch.nn.functional.soft_margin_loss": [], "common_nn.softmarginloss_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.softmarginloss_no_reduce_test.<lambda3>": [], "common_nn.multilabelsoftmarginloss_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.multilabelsoftmarginloss_no_reduce_test.<lambda1>": ["torch.nn.functional.multilabel_soft_margin_loss"], "torch.nn.functional.multilabel_soft_margin_loss": [], "common_nn.multilabelsoftmarginloss_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multilabelsoftmarginloss_no_reduce_test.<lambda3>": [], "common_nn.multilabelsoftmarginloss_weights_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.multilabelsoftmarginloss_weights_no_reduce_test.<lambda1>": ["torch.nn.functional.multilabel_soft_margin_loss"], "common_nn.multilabelsoftmarginloss_weights_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multilabelsoftmarginloss_weights_no_reduce_test.<lambda3>": [], "common_nn.multimarginloss_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.multimarginloss_no_reduce_test.<lambda1>": ["torch.nn.functional.multi_margin_loss"], "torch.nn.functional.multi_margin_loss": [], "common_nn.multimarginloss_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multimarginloss_no_reduce_test.<lambda3>": [], "common_nn.multimarginloss_1d_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.multimarginloss_1d_no_reduce_test.<lambda1>": ["torch.nn.functional.multi_margin_loss"], "common_nn.multimarginloss_1d_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multimarginloss_1d_no_reduce_test.<lambda3>": [], "common_nn.multimarginloss_1d_input_0d_target_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.multimarginloss_1d_input_0d_target_no_reduce_test.<lambda1>": ["torch.nn.functional.multi_margin_loss"], "common_nn.multimarginloss_1d_input_0d_target_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multimarginloss_1d_input_0d_target_no_reduce_test.<lambda3>": [], "common_nn.multimarginloss_p_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.multimarginloss_p_no_reduce_test.<lambda1>": ["torch.nn.functional.multi_margin_loss"], "common_nn.multimarginloss_p_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multimarginloss_p_no_reduce_test.<lambda3>": [], "common_nn.multimarginloss_margin_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.multimarginloss_margin_no_reduce_test.<lambda1>": ["torch.nn.functional.multi_margin_loss"], "common_nn.multimarginloss_margin_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multimarginloss_margin_no_reduce_test.<lambda3>": [], "common_nn.multimarginloss_weights_no_reduce_test": ["common_nn.wrap_functional", "<builtin>.dict", "torch.rand"], "common_nn.multimarginloss_weights_no_reduce_test.<lambda1>": ["torch.nn.functional.multi_margin_loss"], "common_nn.multimarginloss_weights_no_reduce_test.<lambda2>": ["torch.randn"], "common_nn.multimarginloss_weights_no_reduce_test.<lambda3>": [], "common_nn.fractional_max_pool2d_test": ["<builtin>.dict", "torch.empty"], "common_nn.fractional_max_pool2d_test.<lambda1>": ["torch.nn.FractionalMaxPool2d"], "common_nn.fractional_max_pool2d_test.<lambda2>": ["torch.nn.FractionalMaxPool2d"], "common_nn.fractional_max_pool3d_test": ["<builtin>.dict", "torch.empty"], "common_nn.fractional_max_pool3d_test.<lambda1>": ["torch.nn.FractionalMaxPool3d"], "common_nn.fractional_max_pool3d_test.<lambda2>": ["torch.nn.FractionalMaxPool3d"], "common_nn.fractional_max_pool3d_test.<lambda3>": ["torch.nn.FractionalMaxPool3d"], "common_nn.single_batch_reference_fn": ["torch.testing._internal.common_utils.freeze_rng_state"], "common_nn.<list2>.<lambda1>": [], "common_nn.<list2>.<lambda2>": [], "common_nn.<list2>.<lambda3>": [], "common_nn.<lambda3>": ["torch.nn.Conv1d", "torch.rand"], "common_nn.<list2>.<lambda4>": [], "common_nn.<list2>.<lambda5>": [], "common_nn.<list2>.<lambda6>": [], "common_nn.<list2>.<lambda7>": [], "common_nn.<list2>.<lambda8>": [], "common_nn.<list2>.<lambda9>": [], "common_nn.<list2>.<lambda10>": [], "common_nn.<list2>.<lambda11>": [], "common_nn.<lambda11>": ["torch.nn.Conv2d", "torch.empty"], "common_nn.<list2>.<lambda12>": [], "common_nn.<list2>.<lambda13>": [], "common_nn.<list2>.<lambda14>": [], "common_nn.<list2>.<lambda15>": [], "common_nn.<list2>.<lambda16>": [], "common_nn.<list2>.<lambda17>": [], "common_nn.<list2>.<lambda18>": [], "common_nn.<list2>.<lambda19>": [], "common_nn.<list2>.<lambda20>": [], "common_nn.<list2>.<lambda21>": [], "common_nn.<list2>.<lambda22>": [], "common_nn.<lambda22>": ["torch.nn.AvgPool2d", "torch.rand"], "common_nn.<list2>.<lambda23>": [], "common_nn.<lambda23>": ["common_nn.kldivloss_reference", "common_nn.get_reduction", "torch.rand"], "common_nn.<list2>.<lambda24>": [], "common_nn.<lambda24>": ["torch.rand"], "common_nn.<list2>.<lambda25>": [], "common_nn.<lambda25>": ["torch.rand"], "common_nn.<list2>.<lambda26>": [], "common_nn.<lambda26>": ["common_nn.get_reduction", "common_nn.kldivloss_log_target_reference", "torch.rand"], "common_nn.<list2>.<lambda27>": [], "common_nn.<lambda27>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda28>": [], "common_nn.<lambda28>": ["common_nn.get_reduction", "torch.rand"], "common_nn.<list2>.<lambda29>": [], "common_nn.<lambda29>": ["torch.rand"], "common_nn.<list2>.<lambda30>": [], "common_nn.<lambda30>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda31>": [], "common_nn.<lambda31>": ["common_nn.get_reduction", "torch.rand"], "common_nn.<list2>.<lambda32>": [], "common_nn.<lambda32>": ["torch.rand"], "common_nn.<list2>.<lambda33>": [], "common_nn.<lambda33>": ["torch.rand"], "common_nn.<list2>.<lambda34>": [], "common_nn.<lambda34>": ["torch.randn", "torch.nn.Conv3d"], "common_nn.<list2>.<lambda35>": [], "common_nn.<lambda35>": ["common_nn.get_reduction", "common_nn.get_weight", "torch.nn.Conv3d"], "common_nn.<list2>.<lambda36>": [], "common_nn.<lambda36>": ["torch.empty", "torch.nn.Conv3d"], "common_nn.<list2>.<lambda37>": [], "common_nn.<lambda37>": ["torch.nn.Conv3d", "torch.rand"], "common_nn.<list2>.<lambda38>": [], "common_nn.<lambda38>": ["torch.empty", "torch.nn.Conv3d"], "common_nn.<list2>.<lambda39>": [], "common_nn.<lambda39>": ["torch.randn", "torch.nn.Conv3d"], "common_nn.<list2>.<lambda40>": [], "torch.nn.AvgPool3d": [], "common_nn.<lambda40>": ["torch.nn.AvgPool3d", "common_nn.hingeembeddingloss_reference", "common_nn.get_reduction"], "common_nn.<list2>.<lambda41>": [], "common_nn.<lambda41>": ["torch.nn.AvgPool3d", "torch.randn"], "common_nn.<list2>.<lambda42>": [], "common_nn.<lambda42>": ["torch.nn.AvgPool3d", "common_nn.hingeembeddingloss_reference", "common_nn.get_reduction"], "common_nn.<list2>.<lambda43>": [], "common_nn.<lambda43>": ["torch.nn.AvgPool3d", "torch.rand"], "common_nn.<list2>.<lambda44>": [], "common_nn.<lambda44>": ["torch.nn.AvgPool3d", "common_nn.get_reduction", "common_nn.multilabelmarginloss_reference"], "common_nn.<list2>.<lambda45>": [], "common_nn.<lambda45>": ["torch.nn.AvgPool3d", "torch.rand"], "common_nn.<list2>.<lambda46>": [], "common_nn.<lambda46>": ["torch.nn.AvgPool3d", "common_nn.get_reduction", "common_nn.multilabelmarginloss_reference"], "common_nn.<list2>.<lambda47>": [], "common_nn.<lambda47>": ["torch.rand"], "common_nn.<list2>.<lambda48>": [], "common_nn.<lambda48>": ["torch.empty"], "common_nn.<list2>.<lambda49>": [], "common_nn.<lambda49>": ["torch.empty", "torch.rand"], "common_nn.<list2>.<lambda50>": [], "common_nn.<lambda50>": ["torch.empty", "common_nn.get_reduction", "common_nn.multimarginloss_reference"], "common_nn.<list2>.<lambda51>": [], "common_nn.<lambda51>": ["torch.empty", "torch.rand"], "common_nn.<list2>.<lambda52>": [], "common_nn.<lambda52>": ["torch.nn.EmbeddingBag", "common_nn.get_reduction", "common_nn.multimarginloss_reference"], "common_nn.<list2>.<lambda53>": [], "common_nn.<lambda53>": ["torch.stack", "torch.rand"], "common_nn.<list2>.<lambda54>": [], "common_nn.<lambda54>": ["torch.nn.EmbeddingBag", "torch.rand"], "common_nn.<list2>.<lambda55>": [], "common_nn.<lambda55>": ["torch.stack", "common_nn.get_reduction", "common_nn.multimarginloss_reference"], "common_nn.<list2>.<lambda56>": [], "common_nn.<lambda56>": ["torch.nn.EmbeddingBag", "torch.rand"], "common_nn.<list2>.<lambda57>": [], "common_nn.<lambda57>": ["torch.stack", "common_nn.get_reduction", "common_nn.multimarginloss_reference"], "common_nn.<list2>.<lambda58>": [], "common_nn.<lambda58>": ["torch.nn.EmbeddingBag", "torch.rand"], "common_nn.<list2>.<lambda59>": [], "common_nn.<lambda59>": ["common_nn.multimarginloss_reference", "common_nn.get_reduction", "torch.randperm", "common_nn.get_weight"], "common_nn.<list2>.<lambda60>": [], "common_nn.<lambda60>": ["torch.randn", "torch.nn.Embedding"], "common_nn.<list2>.<lambda61>": [], "common_nn.<lambda61>": ["common_nn.smoothl1loss_reference", "common_nn.get_reduction", "torch.randperm"], "common_nn.<list2>.<lambda62>": [], "common_nn.<lambda62>": ["torch.randn", "common_nn._rand_tensor_non_equal"], "common_nn.<list2>.<lambda63>": [], "common_nn.<lambda63>": ["common_nn.huberloss_reference", "common_nn._rand_tensor_non_equal", "common_nn.get_reduction"], "common_nn.<list2>.<lambda64>": [], "common_nn.<lambda64>": ["torch.randn", "common_nn._rand_tensor_non_equal"], "common_nn.<list2>.<lambda65>": [], "common_nn.<lambda65>": ["common_nn.softmarginloss_reference", "common_nn._rand_tensor_non_equal", "common_nn.get_reduction"], "common_nn.<list2>.<lambda66>": [], "common_nn.<lambda66>": ["common_nn._rand_tensor_non_equal", "torch.rand"], "common_nn.<list2>.<lambda67>": [], "common_nn.<lambda67>": ["torch.randn", "common_nn._rand_tensor_non_equal"], "common_nn.<list2>.<lambda68>": [], "common_nn.<lambda68>": ["common_nn._rand_tensor_non_equal", "common_nn.get_reduction", "common_nn.cosineembeddingloss_reference"], "common_nn.<list2>.<lambda69>": [], "common_nn.<lambda69>": ["common_nn._rand_tensor_non_equal", "torch.rand"], "common_nn.<list2>.<lambda70>": [], "common_nn.<lambda70>": ["torch.randn", "common_nn._rand_tensor_non_equal"], "common_nn.<list2>.<lambda71>": [], "common_nn.<lambda71>": ["common_nn._rand_tensor_non_equal", "common_nn.get_reduction", "common_nn.cosineembeddingloss_reference"], "common_nn.<list2>.<lambda72>": [], "common_nn.<lambda72>": ["torch.randn", "common_nn._rand_tensor_non_equal"], "common_nn.<list2>.<lambda73>": [], "common_nn.<lambda73>": ["torch.randn", "common_nn._rand_tensor_non_equal"], "common_nn.<list2>.<lambda74>": [], "common_nn.<lambda74>": ["common_nn.marginrankingloss_reference", "common_nn.get_reduction", "torch.rand"], "common_nn.<list2>.<lambda75>": [], "common_nn.<lambda75>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda76>": [], "common_nn.<lambda76>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda77>": [], "common_nn.<lambda77>": ["common_nn.marginrankingloss_reference", "common_nn.get_reduction", "torch.rand"], "common_nn.<list2>.<lambda78>": [], "common_nn.<lambda78>": ["torch.rand"], "common_nn.<list2>.<lambda79>": [], "common_nn.<lambda79>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda80>": [], "common_nn.<lambda80>": ["torch.rand"], "common_nn.<list2>.<lambda81>": [], "common_nn.<lambda81>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda82>": [], "common_nn.<lambda82>": ["torch.rand"], "common_nn.<list2>.<lambda83>": [], "common_nn.<lambda83>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda84>": [], "common_nn.<lambda84>": ["torch.rand"], "common_nn.<list2>.<lambda85>": [], "common_nn.<lambda85>": ["common_nn.get_reduction", "torch.rand"], "common_nn.<list2>.<lambda86>": [], "common_nn.<lambda86>": ["torch.rand"], "common_nn.<list2>.<lambda87>": [], "common_nn.<lambda87>": ["common_nn.get_weight", "torch.where"], "common_nn.<list2>.<lambda88>": [], "common_nn.<lambda88>": ["torch.rand", "torch.where"], "common_nn.<list2>.<lambda89>": [], "common_nn.<lambda89>": ["torch.erf", "math.sqrt"], "common_nn.<list2>.<lambda90>": [], "common_nn.<lambda90>": ["torch.erf", "math.sqrt", "torch.rand"], "common_nn.<list2>.<lambda91>": [], "common_nn.<lambda91>": ["torch.sigmoid", "common_nn.get_reduction"], "common_nn.<list2>.<lambda92>": [], "common_nn.<lambda92>": ["torch.sigmoid", "torch.rand"], "common_nn.<list2>.<lambda93>": [], "torch.nn.functional.softplus": [], "common_nn.<lambda93>": ["torch.nn.functional.softplus", "common_nn.get_reduction", "torch.tanh"], "common_nn.<list2>.<lambda94>": [], "common_nn.<lambda94>": ["torch.nn.functional.softplus", "torch.tanh", "torch.rand"], "common_nn.<list2>.<lambda95>": [], "torch.nn.Unfold": [], "common_nn.<lambda95>": ["common_nn.get_reduction", "torch.nn.Unfold"], "common_nn.<list2>.<lambda96>": [], "torch.nn.Fold": [], "common_nn.<lambda96>": ["torch.nn.Fold", "torch.rand"], "common_nn.<list2>.<lambda97>": [], "common_nn.<lambda97>": ["common_nn.get_weight", "torch.nn.Unfold"], "common_nn.<list2>.<lambda98>": [], "common_nn.<lambda98>": ["torch.nn.Fold", "torch.rand"], "common_nn.<list2>.<lambda99>": [], "common_nn.<list2>.<lambda100>": [], "common_nn.<lambda100>": ["torch.exp", "torch.rand"], "common_nn.<list2>.<lambda101>": [], "common_nn.<lambda101>": ["torch.exp", "common_nn.get_reduction"], "common_nn.<list2>.<lambda102>": [], "common_nn.<list2>.<lambda103>": [], "common_nn.<lambda103>": ["torch.exp", "common_nn.get_reduction", "torch.log"], "common_nn.<list2>.<lambda104>": [], "common_nn.<lambda104>": ["torch.clamp", "torch.rand"], "common_nn.<list2>.<lambda105>": [], "common_nn.<lambda105>": ["common_nn.get_reduction", "torch.abs"], "common_nn.<list2>.<lambda106>": [], "torch.DoubleTensor": [], "common_nn.<lambda106>": ["torch.DoubleTensor", "torch.arange", "torch.rand"], "common_nn.<list2>.<lambda107>": [], "common_nn.<lambda107>": ["common_nn.padding1d_circular", "common_nn.get_reduction"], "common_nn.padding1d_circular": ["torch.cat"], "common_nn.<list2>.<lambda108>": [], "common_nn.<lambda108>": ["torch.DoubleTensor", "torch.arange", "torch.rand"], "common_nn.<list2>.<lambda109>": [], "common_nn.<lambda109>": ["common_nn.padding1d_circular", "common_nn.get_reduction"], "common_nn.<list2>.<lambda110>": [], "common_nn.<lambda110>": ["torch.DoubleTensor", "torch.arange", "torch.rand"], "common_nn.<list2>.<lambda111>": [], "common_nn.<lambda111>": ["common_nn.padding1d_circular", "torch.rand"], "common_nn.<list2>.<lambda112>": [], "common_nn.<lambda112>": ["torch.DoubleTensor", "torch.arange", "common_nn.get_reduction", "common_nn.get_weight"], "common_nn.<list2>.<lambda113>": [], "common_nn.<lambda113>": ["common_nn.padding2d_circular", "torch.rand"], "common_nn.padding2d_circular": ["torch.cat"], "common_nn.<list2>.<lambda114>": [], "common_nn.<lambda114>": ["torch.DoubleTensor", "torch.arange", "torch.rand"], "common_nn.<list2>.<lambda115>": [], "common_nn.<lambda115>": ["common_nn.padding2d_circular", "common_nn.get_reduction", "common_nn.get_weight"], "common_nn.<list2>.<lambda116>": [], "common_nn.<lambda116>": ["torch.DoubleTensor", "torch.arange", "torch.rand"], "common_nn.<list2>.<lambda117>": [], "common_nn.<lambda117>": ["common_nn.padding2d_circular", "torch.rand"], "common_nn.<list2>.<lambda118>": [], "common_nn.<lambda118>": ["torch.DoubleTensor", "torch.arange", "common_nn.get_reduction", "common_nn.get_weight"], "common_nn.<list2>.<lambda119>": [], "common_nn.<lambda119>": ["torch.randn", "common_nn.padding3d_circular"], "common_nn.padding3d_circular": ["torch.cat"], "common_nn.<list2>.<lambda120>": [], "common_nn.<lambda120>": ["torch.DoubleTensor", "torch.arange"], "common_nn.<list2>.<lambda121>": [], "common_nn.<lambda121>": ["torch.randn", "common_nn.padding3d_circular"], "common_nn.<list2>.<lambda122>": [], "common_nn.<lambda122>": ["torch.randn", "torch.DoubleTensor", "torch.arange"], "common_nn.<list2>.<lambda123>": [], "common_nn.<lambda123>": ["common_nn.padding3d_circular"], "common_nn.<list2>.<lambda124>": [], "common_nn.<lambda124>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda125>": [], "common_nn.<lambda125>": ["torch.rand"], "common_nn.<list2>.<lambda126>": [], "common_nn.<lambda126>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda127>": [], "common_nn.<lambda127>": ["torch.randn", "torch.rand"], "common_nn.<list2>.<lambda128>": [], "common_nn.<lambda128>": ["torch.mm"], "common_nn.kldivloss_reference": [], "common_nn.kldivloss_log_target_reference": ["torch.exp"], "common_nn.nlllossNd_reference": ["<builtin>.tuple", "itertools.product", "<builtin>.list", "<builtin>.range", "torch.zeros", "torch.ones"], "common_nn.cross_entropy_loss_prob_target_reference": ["torch.ones", "torch.log_softmax"], "torch.log_softmax": [], "common_nn.cross_entropy_loss_reference": ["common_nn.cross_entropy_loss_prob_target_reference", "common_nn.nlllossNd_reference", "torch.log_softmax"], "common_nn.nllloss_reference": ["<builtin>.zip", "<builtin>.sum", "common_nn.nllloss_reference.nll_loss_helper"], "common_nn.nllloss_reference.nll_loss_helper": [], "common_nn.smoothl1loss_reference": [], "common_nn.huberloss_reference": [], "common_nn._multilabelmarginloss_reference": ["<builtin>.range", "<builtin>.max", "<builtin>.len"], "common_nn.multilabelmarginloss_reference": ["common_nn._multilabelmarginloss_reference", "<builtin>.range"], "common_nn.hingeembeddingloss_reference": ["torch.where"], "common_nn.softmarginloss_reference": [], "common_nn._multimarginloss_reference": ["<builtin>.range", "<builtin>.max", "<builtin>.len"], "common_nn.multimarginloss_reference": ["common_nn._multimarginloss_reference", "<builtin>.range"], "common_nn.cosineembeddingloss_reference": ["torch.where", "common_nn.cosineembeddingloss_reference._cos"], "common_nn.cosineembeddingloss_reference._cos": ["<builtin>.range"], "common_nn.tripletmarginloss_reference": ["torch.clamp", "torch.min", "torch.pairwise_distance"], "torch.pairwise_distance": [], "common_nn.marginrankingloss_reference": [], "common_nn.ctcloss_reference": ["torch.as_tensor", "<builtin>.range", "torch.cat", "torch.where"], "common_nn.<list6>.<lambda1>": [], "common_nn.<list6>.<lambda2>": [], "common_nn.<list6>.<lambda3>": [], "common_nn.<list6>.<lambda4>": [], "common_nn.<list6>.<lambda5>": [], "common_nn.<list6>.<lambda6>": [], "common_nn.<list6>.<lambda7>": [], "common_nn.<list6>.<lambda8>": [], "common_nn.<list6>.<lambda9>": [], "common_nn.<list6>.<lambda10>": [], "common_nn.<list6>.<lambda11>": [], "common_nn.<list6>.<lambda12>": [], "common_nn.<list6>.<lambda13>": [], "common_nn.<list6>.<lambda14>": [], "common_nn.<list6>.<lambda15>": [], "common_nn.<list6>.<lambda16>": [], "common_nn.<list6>.<lambda17>": [], "common_nn.<list6>.<lambda18>": [], "common_nn.<list6>.<lambda19>": [], "common_nn.<list6>.<lambda20>": [], "common_nn.<list6>.<lambda21>": [], "common_nn.<list6>.<lambda22>": [], "common_nn.<list6>.<lambda23>": [], "common_nn.<list6>.<lambda24>": [], "common_nn.<list6>.<lambda25>": [], "common_nn.<list6>.<lambda26>": [], "common_nn.<list6>.<lambda27>": [], "common_nn.<list6>.<lambda28>": [], "common_nn.<list6>.<lambda29>": [], "common_nn.<list6>.<lambda30>": [], "common_nn.<list6>.<lambda31>": [], "common_nn.<list6>.<lambda32>": [], "common_nn.<list6>.<lambda33>": [], "common_nn.<list6>.<lambda34>": [], "common_nn.<list6>.<lambda35>": [], "common_nn.<list6>.<lambda36>": [], "common_nn.<list6>.<lambda37>": [], "common_nn.<list6>.<lambda38>": [], "common_nn.<list6>.<lambda39>": [], "common_nn.<list6>.<lambda40>": [], "common_nn.<list6>.<lambda41>": [], "common_nn.<list6>.<lambda42>": [], "common_nn.<list6>.<lambda43>": [], "common_nn.<list6>.<lambda44>": [], "common_nn.<list6>.<lambda45>": [], "common_nn.<list6>.<lambda46>": [], "common_nn.<list6>.<lambda47>": [], "common_nn.<list6>.<lambda48>": [], "common_nn.<list6>.<lambda49>": [], "common_nn.<list6>.<lambda50>": [], "common_nn.<list6>.<lambda51>": [], "common_nn.<list6>.<lambda52>": [], "common_nn.<list6>.<lambda53>": [], "common_nn.<list6>.<lambda54>": [], "common_nn.<list6>.<lambda55>": [], "common_nn.<list6>.<lambda56>": [], "common_nn.<list6>.<lambda57>": [], "common_nn.<list6>.<lambda58>": [], "common_nn.<list6>.<lambda59>": [], "common_nn.<list6>.<lambda60>": [], "common_nn.<list6>.<lambda61>": [], "common_nn.<list6>.<lambda62>": [], "common_nn.<list6>.<lambda63>": [], "common_nn.<list6>.<lambda64>": [], "common_nn.<list6>.<lambda65>": [], "common_nn.<list6>.<lambda66>": [], "common_nn.<list6>.<lambda67>": [], "common_nn.<list6>.<lambda68>": [], "common_nn.<list6>.<lambda69>": [], "common_nn.<list6>.<lambda70>": [], "common_nn.<list6>.<lambda71>": [], "common_nn.<list6>.<lambda72>": [], "common_nn.<list6>.<lambda73>": [], "common_nn.<list6>.<lambda74>": [], "common_nn.<list6>.<lambda75>": [], "common_nn.<list6>.<lambda76>": [], "common_nn.<list6>.<lambda77>": [], "common_nn.<list6>.<lambda78>": [], "common_nn.<list6>.<lambda79>": [], "common_nn.<list6>.<lambda80>": [], "common_nn.<list6>.<lambda81>": [], "common_nn.<list6>.<lambda82>": [], "common_nn.<list6>.<lambda83>": [], "common_nn.<list6>.<lambda84>": [], "common_nn.<list6>.<lambda85>": [], "common_nn.<list6>.<lambda86>": [], "common_nn.<list6>.<lambda87>": [], "common_nn.<list6>.<lambda88>": [], "common_nn.<list6>.<lambda89>": [], "common_nn.<list6>.<lambda90>": [], "common_nn.<list6>.<lambda91>": [], "common_nn.<list6>.<lambda92>": [], "common_nn.<list6>.<lambda93>": [], "common_nn.<list6>.<lambda94>": [], "common_nn.<list6>.<lambda95>": [], "common_nn.<list6>.<lambda96>": [], "common_nn.<list6>.<lambda97>": [], "common_nn.<list6>.<lambda98>": [], "common_nn.<list6>.<lambda99>": [], "common_nn.<list6>.<lambda100>": [], "common_nn.<list6>.<lambda101>": [], "common_nn.<list6>.<lambda102>": [], "common_nn.<lambda102>": ["torch.rand"], "common_nn.<list6>.<lambda103>": [], "common_nn.<list6>.<lambda104>": [], "common_nn.<list6>.<lambda105>": [], "common_nn.<list6>.<lambda106>": [], "common_nn.<list6>.<lambda107>": [], "common_nn.<list6>.<lambda108>": [], "common_nn.<list6>.<lambda109>": [], "common_nn.<list6>.<lambda110>": [], "common_nn.<list6>.<lambda111>": [], "common_nn.<list6>.<lambda112>": [], "common_nn.<list6>.<lambda113>": [], "common_nn.<list6>.<lambda114>": [], "common_nn.<list6>.<lambda115>": [], "common_nn.<list6>.<lambda116>": [], "common_nn.<list6>.<lambda117>": [], "common_nn.<list6>.<lambda118>": [], "common_nn.<list6>.<lambda119>": [], "common_nn.<list6>.<lambda120>": [], "common_nn.<list6>.<lambda121>": [], "common_nn.<list6>.<lambda122>": [], "common_nn.<list6>.<lambda123>": [], "common_nn.<list6>.<lambda124>": [], "common_nn.<list6>.<lambda125>": [], "common_nn.<list6>.<lambda126>": [], "common_nn.<list6>.<lambda127>": [], "common_nn.<list6>.<lambda128>": [], "common_nn.<list6>.<lambda129>": [], "common_nn.<lambda129>": ["torch.randn"], "common_nn.<list6>.<lambda130>": [], "common_nn.<list6>.<lambda131>": [], "common_nn.<lambda131>": ["torch.rand"], "common_nn.<list6>.<lambda132>": [], "common_nn.<lambda132>": ["torch.rand"], "common_nn.<list6>.<lambda133>": [], "common_nn.<lambda133>": ["common_nn.get_reduction", "common_nn.kldivloss_reference"], "common_nn.<list6>.<lambda134>": [], "common_nn.<lambda134>": ["torch.rand"], "common_nn.<list6>.<lambda135>": [], "common_nn.<lambda135>": ["torch.rand"], "common_nn.<list6>.<lambda136>": [], "common_nn.<lambda136>": ["common_nn.get_reduction", "common_nn.kldivloss_log_target_reference"], "common_nn.<list6>.<lambda137>": [], "common_nn.<lambda137>": ["torch.randn"], "common_nn.<list6>.<lambda138>": [], "common_nn.<lambda138>": ["common_nn.get_reduction"], "common_nn.<list6>.<lambda139>": [], "common_nn.<lambda139>": ["torch.ones"], "common_nn.<list6>.<lambda140>": [], "common_nn.<lambda140>": ["torch.zeros"], "common_nn.<list6>.<lambda141>": [], "common_nn.<lambda141>": ["common_nn.get_reduction"], "common_nn.<list6>.<lambda142>": [], "common_nn.<lambda142>": ["torch.rand"], "common_nn.<list6>.<lambda143>": [], "common_nn.<lambda143>": ["torch.rand"], "common_nn.<list6>.<lambda144>": [], "common_nn.<lambda144>": ["torch.rand"], "common_nn.<list6>.<lambda145>": [], "common_nn.<lambda145>": ["common_nn.get_reduction", "common_nn.get_weight"], "common_nn.<list6>.<lambda146>": [], "common_nn.<lambda146>": ["torch.randn"], "common_nn.<list6>.<lambda147>": [], "common_nn.<lambda147>": ["torch.randn"], "common_nn.<list6>.<lambda148>": [], "common_nn.<lambda148>": ["common_nn.smoothl1loss_reference", "common_nn.get_reduction"], "common_nn.<list6>.<lambda149>": [], "common_nn.<lambda149>": ["torch.randn"], "common_nn.<list6>.<lambda150>": [], "common_nn.<lambda150>": ["torch.rand"], "common_nn.<list6>.<lambda151>": [], "common_nn.<lambda151>": ["common_nn.get_reduction", "common_nn.get_weight"], "common_nn.<list6>.<lambda152>": [], "common_nn.<lambda152>": ["torch.randn"], "common_nn.<list6>.<lambda153>": [], "common_nn.<lambda153>": ["torch.randint"], "common_nn.<list6>.<lambda154>": [], "common_nn.<lambda154>": ["common_nn.get_reduction", "common_nn.ctcloss_reference"], "common_nn.<list6>.<lambda155>": [], "common_nn.<lambda155>": ["torch.randn"], "common_nn.<list6>.<lambda156>": [], "common_nn.<lambda156>": ["torch.randint"], "common_nn.<list6>.<lambda157>": [], "common_nn.<lambda157>": ["common_nn.get_reduction", "common_nn.ctcloss_reference"], "common_nn.<list6>.<lambda158>": [], "common_nn.<lambda158>": ["torch.randn"], "common_nn.<list6>.<lambda159>": [], "common_nn.<lambda159>": ["torch.randint"], "common_nn.<list6>.<lambda160>": [], "common_nn.<lambda160>": ["common_nn.get_reduction", "common_nn.ctcloss_reference"], "common_nn.<list6>.<lambda161>": [], "common_nn.<lambda161>": ["torch.randn"], "common_nn.<list6>.<lambda162>": [], "common_nn.<lambda162>": ["torch.randint"], "common_nn.<list6>.<lambda163>": [], "common_nn.<lambda163>": ["common_nn.get_reduction", "common_nn.ctcloss_reference"], "common_nn.<list6>.<lambda164>": [], "common_nn.<lambda164>": ["torch.randn"], "common_nn.<list6>.<lambda165>": [], "common_nn.<lambda165>": ["torch.randint"], "common_nn.<list6>.<lambda166>": [], "common_nn.<lambda166>": ["common_nn.get_reduction", "common_nn.ctcloss_reference"], "common_nn.single_batch_reference_criterion_fn": ["common_nn.get_reduction"], "common_nn.NNTestCase": ["abc.abstractmethod"], "common_nn.NNTestCase._forward": [], "common_nn.NNTestCase._get_parameters": [], "common_nn.NNTestCase._zero_grad_parameters": [], "common_nn.NNTestCase._backward": [], "common_nn.NNTestCase._jacobian": ["<builtin>.tuple", "common_nn.NNTestCase._jacobian", "<builtin>.isinstance", "torch.zeros"], "common_nn.NNTestCase._flatten_tensors": ["<builtin>.tuple", "common_nn.NNTestCase._flatten_tensors", "<builtin>.isinstance"], "common_nn.NNTestCase._zero_grad_input": ["common_nn.NNTestCase._zero_grad_input", "<builtin>.isinstance"], "common_nn.NNTestCase._analytical_jacobian": ["common_nn.NNTestCase._forward", "<builtin>.tuple", "<builtin>.sum", "common_nn.NNTestCase._zero_grad_input", "common_nn.NNTestCase._get_parameters", "common_nn.NNTestCase._backward", "torch.autograd.gradcheck._iter_tensors", "<builtin>.list", "torch.zeros_like", "common_nn.NNTestCase._zero_grad_parameters", "<builtin>.zip", "<builtin>.range", "torch.cat", "torch.zeros", "common_nn.NNTestCase._jacobian", "common_nn.NNTestCase._flatten_tensors"], "torch.autograd.gradcheck._iter_tensors": [], "common_nn.NNTestCase._numerical_jacobian": ["<builtin>.tuple", "torch.cat", "torch.autograd.gradcheck._get_numerical_jacobian", "common_nn.NNTestCase._get_parameters"], "common_nn.NNTestCase._numerical_jacobian.fw": ["common_nn.NNTestCase._forward"], "torch.autograd.gradcheck._get_numerical_jacobian": [], "common_nn.NNTestCase.check_jacobian": ["torch.testing._internal.common_utils.TestCase.assertLessEqual", "<builtin>.max", "common_nn.NNTestCase._get_parameters", "torch.autograd.gradcheck._iter_tensors", "<builtin>.list", "<builtin>.len", "<builtin>.zip", "common_nn.NNTestCase._analytical_jacobian", "common_nn.NNTestCase._numerical_jacobian", "<builtin>.bool"], "torch.testing._internal.common_utils.TestCase.assertLessEqual": [], "common_nn.TestBase.__init__": ["<builtin>.tuple", "common_nn.TestBase.get_name", "<builtin>.ValueError"], "common_nn.TestBase.get_name": [], "common_nn.TestBase._unpack": ["<builtin>.type", "common_nn.TestBase._unpack", "<builtin>.isinstance", "torch.testing._internal.common_utils.is_iterable"], "torch.testing._internal.common_utils.is_iterable": [], "common_nn.TestBase.constructor_args": ["common_nn.TestBase._get_arg"], "common_nn.TestBase._get_arg": ["common_nn.TestBase._get_arg.map_tensor_sizes", "common_nn.TestBase.get_name", "common_nn.TestBase._unpack"], "common_nn.TestBase.extra_args": ["common_nn.TestBase._get_arg"], "common_nn.TestBase._get_arg.map_tensor_sizes": ["torch.randn", "common_nn.TestBase._get_arg.map_tensor_sizes", "<builtin>.isinstance"], "common_nn.TestBase._get_input": ["common_nn.TestBase._get_arg"], "common_nn.TestBase.__call__": [], "common_nn.ModuleTest": ["abc.abstractmethod"], "common_nn.ModuleTest._do_test": [], "common_nn.ModuleTest.__init__": ["<builtin>.super"], "common_nn.ModuleTest.__call__": ["common_nn.ModuleTest._do_test", "common_nn.TestBase._get_input", "common_nn.ModuleTest.test_noncontig", "tempfile.TemporaryFile", "torch.load", "torch.save", "copy.deepcopy"], "common_nn.ModuleTest.test_noncontig": ["common_nn.ModuleTest.noncontiguize", "<builtin>.any", "itertools.product", "torch.testing._internal.common_utils.freeze_rng_state", "<builtin>.isinstance", "copy.deepcopy"], "tempfile.TemporaryFile": [], "common_nn.ModuleTest.noncontiguize": ["common_nn.ModuleTest.noncontiguize", "<builtin>.tuple", "torch.empty_like", "<builtin>.range", "<builtin>.isinstance", "torch.stack"], "common_nn.ModuleTest.test_cuda": ["<builtin>.tuple", "<builtin>.sum", "torch.autograd.grad", "common_nn.TestBase._get_input", "torch.testing._internal.common_utils.to_gpu", "torch.randn_like", "unittest.SkipTest", "common_nn.ModuleTest.test_noncontig", "<builtin>.zip", "<builtin>.range", "<builtin>.isinstance"], "torch.testing._internal.common_utils.to_gpu": [], "common_nn.InputVariableMixin._get_input": ["common_nn.TestBase._get_input", "common_nn.InputVariableMixin._get_input.map_variables"], "common_nn.InputVariableMixin._get_input.map_variables": ["<builtin>.type", "common_nn.InputVariableMixin._get_input.map_variables", "<builtin>.isinstance"], "common_nn.NewModuleTest.__init__": ["<builtin>.super"], "common_nn.NewModuleTest._check_gradients": ["<builtin>.tuple", "torch.is_floating_point", "torch.testing._internal.common_utils.gradgradcheck", "torch.testing._internal.common_utils.gradcheck", "<builtin>.len"], "common_nn.NewModuleTest._check_gradients.fn_to_gradcheck": [], "torch.is_floating_point": [], "torch.testing._internal.common_utils.gradcheck": [], "torch.testing._internal.common_utils.gradgradcheck": [], "common_nn.NewModuleTest._do_test": ["torch.get_num_threads", "<builtin>.tuple", "torch.backends.cudnn.flags", "torch.cuda.device_count", "common_nn.NewModuleTest._check_gradients", "common_nn.NewModuleTest._do_test.to_double", "torch.no_grad", "torch.testing._internal.common_utils.freeze_rng_state", "common_nn.NewModuleTest._do_test.to_single", "<builtin>.len", "<builtin>.all", "common_nn.NewModuleTest._do_test.assert_module_parameters_are", "torch.cuda.device", "common_nn.NewModuleTest._do_test.to_half", "<builtin>.isinstance", "torch.set_num_threads", "copy.deepcopy"], "common_nn.NewModuleTest._do_test.assert_module_parameters_are": [], "common_nn.NewModuleTest._do_test.to_type": [], "common_nn.NewModuleTest._do_test.to_half": ["common_nn.NewModuleTest._do_test.to_type"], "common_nn.NewModuleTest._do_test.to_single": ["common_nn.NewModuleTest._do_test.to_type"], "common_nn.NewModuleTest._do_test.to_double": ["common_nn.NewModuleTest._do_test.to_type"], "common_nn.NewModuleTest._get_target": ["common_nn.TestBase._get_arg"], "common_nn.NewModuleTest.constructor_args": ["common_nn.TestBase._get_arg"], "common_nn.CriterionTest.__init__": ["<builtin>.super"], "common_nn.CriterionTest.__call__": ["<builtin>.tuple", "torch.testing._internal.common_utils.gradgradcheck", "torch.testing._internal.common_utils.gradcheck", "<builtin>.str", "common_nn.InputVariableMixin._get_input", "common_nn.CriterionTest._get_target", "<builtin>.isinstance", "copy.deepcopy"], "common_nn.CriterionTest._get_target": ["common_nn.TestBase._get_arg"], "common_nn.CriterionTest.__call__.apply_fn": [], "common_nn.CriterionTest.test_cuda": ["torch.testing._internal.common_utils.to_gpu", "common_nn.CriterionTest.test_cuda.convert_dtype", "unittest.SkipTest", "common_nn.InputVariableMixin._get_input", "common_nn.CriterionTest._get_target"], "common_nn.CriterionTest.test_cuda.convert_dtype": ["<builtin>.tuple", "common_nn.CriterionTest.test_cuda.convert_dtype", "<builtin>.isinstance"], "common_nn.CriterionTest.constructor_args": ["common_nn.TestBase._get_arg"], "common_nn.CriterionTest.extra_args": ["common_nn.TestBase._get_arg"], "common_quantization": ["torch.nn.CrossEntropyLoss", "unittest.skipIf"], "common_quantization.NodeSpec.__init__": [], "common_quantization.NodeSpec.call_function": ["common_quantization.NodeSpec.__init__"], "common_quantization.NodeSpec.call_method": ["common_quantization.NodeSpec.__init__"], "common_quantization.NodeSpec.call_module": ["common_quantization.NodeSpec.__init__"], "common_quantization.NodeSpec.__hash__": ["<builtin>.hash"], "common_quantization.NodeSpec.__eq__": ["<builtin>.isinstance"], "common_quantization.NodeSpec.__repr__": ["<builtin>.repr"], "common_quantization.test_only_eval_fn": [], "common_quantization.test_only_train_fn": ["torch.max", "torch.optim.Adam", "<builtin>.range"], "common_quantization.AverageMeter.__init__": ["common_quantization.AverageMeter.reset"], "common_quantization.AverageMeter.reset": [], "common_quantization.AverageMeter.update": [], "common_quantization.AverageMeter.__str__": [], "common_quantization.accuracy": ["<builtin>.max", "torch.no_grad"], "common_quantization.train_one_epoch": ["time.time", "common_quantization.accuracy", "<builtin>.print"], "common_quantization.ddp_setup": ["torch.distributed.init_process_group"], "common_quantization.ddp_cleanup": ["torch.distributed.destroy_process_group"], "common_quantization.run_ddp": ["torch.optim.SGD", "common_quantization.train_one_epoch", "torch.nn.parallel.DistributedDataParallel", "common_quantization.ddp_setup", "common_quantization.ddp_cleanup"], "common_quantization.convert_dynamic": ["torch.quantization.quantization_mappings.get_default_dynamic_quant_module_mappings", "torch.quantization.convert"], "torch.quantization.quantization_mappings.get_default_dynamic_quant_module_mappings": [], "common_quantization.prepare_dynamic": ["torch.quantization.propagate_qconfig_"], "common_quantization._make_conv_test_input": ["<builtin>.len", "torch.randint", "torch.quantize_per_channel", "torch.tensor", "torch.quantize_per_tensor"], "common_quantization.skipIfNoFBGEMM": ["functools.wraps", "<builtin>.isinstance"], "common_quantization.skipIfNoFBGEMM.wrapper": ["unittest.SkipTest"], "common_quantization.skipIfNoQNNPACK": ["functools.wraps", "<builtin>.isinstance"], "common_quantization.skipIfNoQNNPACK.wrapper": ["unittest.SkipTest"], "common_quantization.get_script_module": ["torch.jit.trace", "torch.jit.script"], "common_quantization.lengths_to_offsets": ["numpy.zeros", "torch.from_numpy", "numpy.cumsum"], "common_quantization.QuantizationTestCase.setUp": ["torch.randint", "<builtin>.range", "torch.rand", "<builtin>.super"], "common_quantization.QuantizationTestCase.checkNoPrepModules": ["<builtin>.hasattr", "torch.testing._internal.common_utils.TestCase.assertFalse"], "torch.testing._internal.common_utils.TestCase.assertFalse": [], "common_quantization.QuantizationTestCase.checkNoQconfig": ["common_quantization.QuantizationTestCase.checkNoQconfig", "<builtin>.hasattr", "torch.testing._internal.common_utils.TestCase.assertFalse"], "common_quantization.QuantizationTestCase.checkHasPrepModules": ["<builtin>.hasattr", "torch.testing._internal.common_utils.TestCase.assertTrue"], "common_quantization.QuantizationTestCase.checkObservers": ["torch.testing._internal.common_utils.TestCase.assertTrue", "<builtin>.str", "torch.quantization.quantization_mappings.get_default_qat_module_mappings", "torch.quantization.quantization_mappings.get_default_qconfig_propagation_list", "<builtin>.type", "<builtin>.hasattr", "<builtin>.isinstance", "common_quantization.QuantizationTestCase.checkObservers.is_leaf_module", "common_quantization.QuantizationTestCase.checkObservers"], "torch.quantization.quantization_mappings.get_default_qconfig_propagation_list": [], "common_quantization.QuantizationTestCase.checkObservers.is_leaf_module": [], "torch.quantization.quantization_mappings.get_default_qat_module_mappings": [], "common_quantization.QuantizationTestCase.checkQuantDequant": ["torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.type"], "common_quantization.QuantizationTestCase.checkWrappedQuantizedLinear": ["common_quantization.QuantizationTestCase.checkQuantDequant", "torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.type"], "common_quantization.QuantizationTestCase.checkQuantizedLinear": ["torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.type"], "common_quantization.QuantizationTestCase.checkDynamicQuantizedLinear": ["torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.type"], "common_quantization.QuantizationTestCase.check_eager_serialization": ["io.BytesIO", "torch.save", "torch.load", "common_quantization.QuantizationTestCase.check_eager_serialization.check_outputs"], "common_quantization.QuantizationTestCase.check_eager_serialization.check_outputs": ["torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.isinstance"], "common_quantization.QuantizationTestCase.check_weight_bias_api": ["<builtin>.set", "torch.testing._internal.common_utils.TestCase.assertEqual"], "common_quantization.QuantizationTestCase.checkDynamicQuantizedLSTM": ["torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.type"], "common_quantization.QuantizationTestCase.checkLinear": ["torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.type"], "common_quantization.QuantizationTestCase.checkDynamicQuantizedModule": ["<builtin>.hasattr", "torch.testing._internal.common_utils.TestCase.assertEqual", "<builtin>.type"], "common_quantization.QuantizationTestCase.checkScriptable": ["torch.jit.script", "common_quantization.QuantizationTestCase._checkScriptable", "torch.jit.trace"], "common_quantization.QuantizationTestCase._checkScriptable": ["io.BytesIO", "common_quantization.QuantizationTestCase._checkModuleCorrectnessAgainstOrig", "torch.jit.load", "torch.jit.save"], "common_quantization.QuantizationTestCase._checkModuleCorrectnessAgainstOrig": ["torch.testing._internal.common_utils.TestCase.assertEqual"], "common_quantization.QuantizationTestCase.checkGraphModeOp": ["torch.quantization.get_default_qconfig", "<builtin>.str", "torch.quantization.quantize_jit", "common_quantization.get_script_module", "copy.deepcopy", "<builtin>.print", "torch.testing.FileCheck", "torch.testing._internal.common_utils.TestCase.assertEqual", "torch.quantization.quantize_dynamic_jit"], "torch.quantization.get_default_qconfig": [], "torch.quantization.quantize_dynamic_jit": [], "torch.quantization.quantize_jit": [], "common_quantization.QuantizationTestCase.checkGraphModuleNodes": ["common_quantization.NodeSpec.__init__", "<builtin>.dict", "<builtin>.len", "<builtin>.str", "common_quantization.QuantizationTestCase.printGraphModule", "<builtin>.type", "torch.testing._internal.common_utils.TestCase.assertTrue"], "common_quantization.QuantizationTestCase.printGraphModule": ["<builtin>.repr", "<builtin>.dict", "<builtin>.type", "<builtin>.print", "<builtin>.map"], "common_quantization.QuantizationTestCase.assert_types_for_matched_subgraph_pairs": ["common_quantization.QuantizationTestCase.assert_types_for_matched_subgraph_pairs._get_underlying_op_type", "torch.testing._internal.common_utils.TestCase.assertTrue", "<builtin>.len"], "common_quantization.QuantizationTestCase.assert_types_for_matched_subgraph_pairs._get_underlying_op_type": ["<builtin>.getattr", "<builtin>.type"], "common_quantization.QuantizationTestCase.assert_ns_compare_dict_valid": ["<builtin>.range", "<builtin>.len", "<builtin>.type", "<builtin>.isinstance", "torch.testing._internal.common_utils.TestCase.assertTrue"], "common_quantization.QuantizationTestCase.checkGraphModeFxOp": ["torch.quantization.get_default_qconfig", "torch.quantization.quantize_fx.convert_fx", "common_quantization.QuantizationTestCase.printGraphModule", "copy.deepcopy", "torch.quantization.quantize_fx.prepare_qat_fx", "<builtin>.type", "torch.quantization.quantize_fx.prepare_fx", "common_quantization.QuantizationTestCase.checkGraphModuleNodes", "<builtin>.print", "torch.quantization.get_default_qat_qconfig"], "torch.quantization.get_default_qat_qconfig": [], "torch.quantization.quantize_fx.prepare_fx": [], "torch.quantization.quantize_fx.prepare_qat_fx": [], "torch.quantization.quantize_fx.convert_fx": [], "common_quantization.QuantizationTestCase.checkEmbeddingSerialization": ["common_quantization.QuantizationTestCase.check_eager_serialization", "torch.nn.quantized.EmbeddingBag.from_float", "io.BytesIO", "torch.save", "torch.nn.EmbeddingBag", "torch.testing._internal.common_utils.TestCase.assertTrue", "common_quantization.QuantizationTestCase.checkScriptable", "common_quantization.prepare_dynamic", "torch.nn.quantized.Embedding", "torch.testing._internal.common_utils.TestCase.assertEqual", "torch.quantization.PerChannelMinMaxObserver.with_args", "torch.quantization.QConfigDynamic", "torch.ops.quantized.embedding_bag_unpack", "<builtin>.str", "torch.load", "torch.nn.quantized.EmbeddingBag", "torch.nn.quantized.Embedding.from_float", "<builtin>.isinstance", "torch.nn.Embedding"], "torch.nn.quantized.Embedding": [], "torch.quantization.PerChannelMinMaxObserver.with_args": [], "torch.quantization.QConfigDynamic": [], "torch.nn.quantized.EmbeddingBag.from_float": [], "torch.nn.quantized.Embedding.from_float": [], "common_quantization.QuantizationLiteTestCase.setUp": ["<builtin>.super"], "common_quantization.QuantizationLiteTestCase._create_quantized_model": ["torch.quantization.get_default_qconfig", "torch.testing._internal.common_quantized.override_quantized_engine", "torch.quantization.quantize"], "torch.testing._internal.common_quantized.override_quantized_engine": [], "torch.quantization.quantize": [], "common_quantization.QuantizationLiteTestCase._compare_script_and_mobile": ["<builtin>.range", "torch.testing._internal.common_quantized.override_quantized_engine", "io.BytesIO", "torch.jit.script", "torch.testing.assert_allclose", "torch.jit.mobile._load_for_lite_interpreter"], "torch.jit.mobile._load_for_lite_interpreter": [], "common_quantization.SingleLayerLinearModel.__init__": ["torch.nn.Linear", "<builtin>.super"], "common_quantization.SingleLayerLinearModel.forward": [], "common_quantization.AnnotatedSingleLayerLinearModel.__init__": ["torch.quantization.get_default_qconfig", "torch.quantization.QuantWrapper", "torch.nn.Linear", "<builtin>.super"], "torch.quantization.QuantWrapper": [], "common_quantization.AnnotatedSingleLayerLinearModel.forward": [], "common_quantization.SingleLayerLinearDynamicModel.__init__": ["torch.quantization.get_default_qconfig", "torch.nn.Linear", "<builtin>.super"], "common_quantization.SingleLayerLinearDynamicModel.forward": [], "common_quantization.LinearAddModel.__init__": ["torch.nn.Linear", "<builtin>.super"], "common_quantization.LinearAddModel.forward": ["torch.add"], "common_quantization.RNNDynamicModel.__init__": ["torch.nn.LSTM", "torch.nn.GRU", "<builtin>.super"], "torch.nn.GRU": [], "common_quantization.RNNDynamicModel.forward": [], "common_quantization.RNNCellDynamicModel.__init__": ["torch.nn.RNNCell", "torch.nn.LSTMCell", "torch.nn.GRUCell", "<builtin>.super"], "torch.nn.GRUCell": [], "torch.nn.LSTMCell": [], "torch.nn.RNNCell": [], "common_quantization.RNNCellDynamicModel.forward": [], "common_quantization.LSTMwithHiddenDynamicModel.__init__": ["torch.quantization.get_default_qconfig", "torch.nn.LSTM", "<builtin>.super"], "common_quantization.LSTMwithHiddenDynamicModel.forward": [], "common_quantization.ConvModel.__init__": ["torch.nn.Conv2d", "<builtin>.super"], "common_quantization.ConvModel.forward": [], "common_quantization.ConvTransposeModel.__init__": ["torch.nn.ConvTranspose2d", "<builtin>.super"], "common_quantization.ConvTransposeModel.forward": [], "common_quantization.AnnotatedConvModel.__init__": ["torch.quantization.get_default_qconfig", "torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "<builtin>.super", "torch.nn.Conv2d"], "common_quantization.AnnotatedConvModel.forward": [], "common_quantization.AnnotatedConvTransposeModel.__init__": ["torch.quantization.get_default_qconfig", "torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "<builtin>.super", "torch.nn.ConvTranspose2d"], "common_quantization.AnnotatedConvTransposeModel.forward": [], "common_quantization.ConvBnModel.__init__": ["torch.nn.Conv2d", "torch.nn.BatchNorm2d", "<builtin>.super"], "common_quantization.ConvBnModel.forward": [], "common_quantization.AnnotatedConvBnModel.__init__": ["torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "torch.nn.BatchNorm2d", "<builtin>.super", "torch.nn.Conv2d"], "common_quantization.AnnotatedConvBnModel.forward": [], "common_quantization.ConvBnReLUModel.__init__": ["torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "<builtin>.super"], "common_quantization.ConvBnReLUModel.forward": [], "common_quantization.AnnotatedConvBnReLUModel.__init__": ["torch.quantization.get_default_qconfig", "torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "torch.nn.BatchNorm2d", "<builtin>.super", "torch.nn.ReLU", "torch.nn.Conv2d"], "common_quantization.AnnotatedConvBnReLUModel.forward": [], "common_quantization.AnnotatedConvBnReLUModel.fuse_model": ["torch.quantization.fuse_modules"], "torch.quantization.fuse_modules": [], "common_quantization.TwoLayerConvModel.__init__": ["torch.nn.Conv2d", "<builtin>.super"], "common_quantization.TwoLayerConvModel.forward": [], "common_quantization.TwoLayerLinearModel.__init__": ["torch.nn.Linear", "<builtin>.super"], "common_quantization.TwoLayerLinearModel.forward": ["common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.LinearModelWithSubmodule.__init__": ["torch.nn.Linear", "common_quantization.TwoLayerLinearModel.__init__", "<builtin>.super"], "common_quantization.LinearModelWithSubmodule.forward": ["common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.AnnotatedTwoLayerLinearModel.__init__": ["torch.nn.Linear", "torch.quantization.QuantWrapper", "torch.quantization.get_default_qconfig", "<builtin>.super"], "common_quantization.AnnotatedTwoLayerLinearModel.forward": [], "common_quantization.ActivationsTestModel.__init__": ["torch.quantization.get_default_qconfig", "torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "<builtin>.super", "torch.nn.Hardswish", "torch.nn.ELU"], "torch.nn.Hardswish": [], "torch.nn.ELU": [], "common_quantization.ActivationsTestModel.forward": [], "common_quantization.LinearReluModel.__init__": ["torch.nn.Linear", "torch.nn.ReLU", "<builtin>.super"], "common_quantization.LinearReluModel.forward": [], "common_quantization.LinearReluLinearModel.__init__": ["torch.nn.Linear", "torch.nn.ReLU", "<builtin>.super"], "common_quantization.LinearReluLinearModel.forward": [], "common_quantization.LinearReluAddModel.__init__": ["torch.nn.Linear", "torch.nn.ReLU", "<builtin>.super"], "common_quantization.LinearReluAddModel.forward": ["torch.nn.ReLU", "torch.add"], "common_quantization.ConvReluModel.__init__": ["torch.nn.ReLU", "torch.nn.Conv2d", "<builtin>.super"], "common_quantization.ConvReluModel.forward": [], "common_quantization.ConvReluConvModel.__init__": ["torch.nn.ReLU", "torch.nn.Conv2d", "<builtin>.super"], "common_quantization.ConvReluConvModel.forward": [], "common_quantization.ConvReluAddModel.__init__": ["torch.nn.ReLU", "torch.nn.Conv2d", "<builtin>.super"], "common_quantization.ConvReluAddModel.forward": ["torch.nn.ReLU", "torch.add"], "common_quantization.NormalizationTestModel.__init__": ["torch.quantization.QuantStub", "<builtin>.super", "torch.nn.LayerNorm", "torch.nn.InstanceNorm3d", "torch.nn.GroupNorm", "torch.nn.Linear", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm2d"], "torch.nn.GroupNorm": [], "torch.nn.InstanceNorm1d": [], "torch.nn.InstanceNorm2d": [], "torch.nn.InstanceNorm3d": [], "common_quantization.NormalizationTestModel.forward": [], "common_quantization.NestedModel.__init__": ["common_quantization.LinearReluModel.__init__", "torch.nn.Linear", "common_quantization.TwoLayerLinearModel.__init__", "<builtin>.super"], "common_quantization.NestedModel.forward": ["common_quantization.LinearReluModel.__init__", "common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.AnnotatedNestedModel.__init__": ["<builtin>.super", "common_quantization.LinearReluModel.__init__", "torch.quantization.QuantWrapper", "torch.nn.Linear", "common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.AnnotatedNestedModel.forward": ["common_quantization.LinearReluModel.__init__", "common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.AnnotatedSubNestedModel.__init__": ["<builtin>.super", "common_quantization.LinearReluModel.__init__", "torch.nn.Linear", "torch.quantization.QuantWrapper", "common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.AnnotatedSubNestedModel.forward": ["common_quantization.LinearReluModel.__init__"], "common_quantization.AnnotatedCustomConfigNestedModel.__init__": ["<builtin>.super", "common_quantization.LinearReluModel.__init__", "torch.quantization.default_observer.with_args", "torch.quantization.QuantWrapper", "torch.nn.Linear", "common_quantization.TwoLayerLinearModel.__init__", "torch.quantization.QConfig"], "torch.quantization.default_observer.with_args": [], "torch.quantization.QConfig": [], "common_quantization.AnnotatedCustomConfigNestedModel.forward": ["common_quantization.LinearReluModel.__init__", "common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.QuantSubModel.__init__": ["<builtin>.super", "common_quantization.LinearReluModel.__init__", "torch.nn.Linear", "torch.quantization.QuantWrapper", "common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.QuantSubModel.forward": ["common_quantization.LinearReluModel.__init__"], "common_quantization.InnerModule.__init__": ["torch.nn.Linear", "torch.nn.ReLU", "<builtin>.super"], "common_quantization.InnerModule.forward": ["common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.InnerModule.fuse_modules": ["<builtin>.len", "torch.nn.Module.named_children", "<builtin>.list", "<builtin>.enumerate", "torch.quantization.fuse_modules", "<builtin>.isinstance"], "common_quantization.FunctionalLinear.__init__": ["torch.zeros", "torch.rand", "<builtin>.super"], "common_quantization.FunctionalLinear.forward": ["torch.nn.functional.linear"], "common_quantization.SingleLayerFunctionalLinearModel.__init__": ["common_quantization.FunctionalLinear.__init__", "<builtin>.super"], "common_quantization.SingleLayerFunctionalLinearModel.forward": ["common_quantization.FunctionalLinear.__init__"], "common_quantization.TwoLayerFunctionalLinearModel.__init__": ["common_quantization.FunctionalLinear.__init__", "<builtin>.super"], "common_quantization.TwoLayerFunctionalLinearModel.forward": ["common_quantization.FunctionalLinear.__init__"], "common_quantization.FunctionalLinearAddModel.__init__": ["common_quantization.FunctionalLinear.__init__", "<builtin>.super"], "common_quantization.FunctionalLinearAddModel.forward": ["torch.add", "common_quantization.FunctionalLinear.__init__"], "common_quantization.FunctionalLinearReluModel.__init__": ["common_quantization.FunctionalLinear.__init__", "<builtin>.super"], "common_quantization.FunctionalLinearReluModel.forward": ["torch.nn.functional.relu", "common_quantization.FunctionalLinear.__init__"], "common_quantization.FunctionalLinearReluLinearModel.__init__": ["torch.nn.ReLU", "common_quantization.FunctionalLinear.__init__", "<builtin>.super"], "common_quantization.FunctionalLinearReluLinearModel.forward": ["common_quantization.FunctionalLinear.__init__"], "common_quantization.FunctionalConv2d.__init__": ["torch.rand", "<builtin>.super"], "common_quantization.FunctionalConv2d.forward": ["torch.nn.functional.conv2d"], "common_quantization.SingleLayerFunctionalConvModel.__init__": ["common_quantization.FunctionalConv2d.__init__", "<builtin>.super"], "common_quantization.SingleLayerFunctionalConvModel.forward": ["common_quantization.FunctionalConv2d.__init__"], "common_quantization.TwoLayerFunctionalConvModel.__init__": ["common_quantization.FunctionalConv2d.__init__", "<builtin>.super"], "common_quantization.TwoLayerFunctionalConvModel.forward": ["common_quantization.FunctionalConv2d.__init__"], "common_quantization.FunctionalConvReluModel.__init__": ["common_quantization.FunctionalConv2d.__init__", "<builtin>.super"], "common_quantization.FunctionalConvReluModel.forward": ["torch.nn.functional.relu", "common_quantization.FunctionalConv2d.__init__"], "common_quantization.FunctionalConvReluConvModel.__init__": ["torch.nn.ReLU", "common_quantization.FunctionalConv2d.__init__", "<builtin>.super"], "common_quantization.FunctionalConvReluConvModel.forward": ["common_quantization.FunctionalConv2d.__init__"], "common_quantization.SkipQuantModel.__init__": ["torch.nn.Linear", "common_quantization.TwoLayerLinearModel.__init__", "<builtin>.super"], "common_quantization.SkipQuantModel.forward": ["common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.SkipQuantModel.fuse_modules": ["torch.nn.Module.fuse_modules"], "torch.nn.Module.fuse_modules": [], "common_quantization.AnnotatedSkipQuantModel.__init__": ["torch.quantization.get_default_qconfig", "<builtin>.super", "torch.nn.Linear", "torch.quantization.QuantWrapper", "common_quantization.TwoLayerLinearModel.__init__"], "common_quantization.AnnotatedSkipQuantModel.forward": [], "common_quantization.AnnotatedSkipQuantModel.fuse_modules": [], "common_quantization.QuantStubModel.__init__": ["torch.quantization.get_default_qconfig", "torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "<builtin>.super", "torch.nn.Linear"], "common_quantization.QuantStubModel.forward": [], "common_quantization.ManualLinearQATModel.__init__": ["torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "<builtin>.super", "torch.nn.Linear", "torch.quantization.get_default_qat_qconfig"], "common_quantization.ManualLinearQATModel.forward": [], "common_quantization.ManualConvLinearQATModel.__init__": ["torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "<builtin>.super", "torch.nn.Linear", "torch.nn.Conv2d", "torch.quantization.get_default_qat_qconfig"], "common_quantization.ManualConvLinearQATModel.forward": [], "common_quantization.SubModelForFusion.__init__": ["torch.nn.Conv2d", "torch.nn.BatchNorm2d", "<builtin>.super"], "common_quantization.SubModelForFusion.forward": [], "common_quantization.SubModelWithoutFusion.__init__": ["torch.nn.ReLU", "torch.nn.Conv2d", "<builtin>.super"], "common_quantization.SubModelWithoutFusion.forward": [], "common_quantization.ModelForFusion.__init__": ["torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "torch.nn.BatchNorm2d", "torch.nn.Conv1d", "common_quantization.SubModelForFusion.__init__", "<builtin>.super", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Conv2d", "common_quantization.SubModelWithoutFusion.__init__", "torch.nn.Conv3d"], "torch.nn.BatchNorm3d": [], "common_quantization.ModelForFusion.forward": ["common_quantization.SubModelForFusion.__init__", "torch.nn.Module.unsqueeze", "torch.nn.Module.squeeze", "common_quantization.SubModelWithoutFusion.__init__", "torch.nn.Module.view"], "torch.nn.Module.squeeze": [], "torch.nn.Module.unsqueeze": [], "common_quantization.ConvBNReLU.__init__": ["torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "<builtin>.super"], "common_quantization.ModelWithSequentialFusion.__init__": ["torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "<builtin>.range", "torch.nn.Sequential", "<builtin>.super", "common_quantization.ConvBNReLU.__init__", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Conv2d"], "common_quantization.ModelWithSequentialFusion.forward": ["torch.reshape"], "common_quantization.ModelForFusionWithBias.__init__": ["torch.quantization.DeQuantStub", "torch.quantization.QuantStub", "torch.nn.BatchNorm2d", "<builtin>.super", "torch.nn.ReLU", "torch.nn.Conv2d"], "common_quantization.ModelForFusionWithBias.forward": [], "common_quantization.ModelForLinearBNFusion.__init__": ["torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.uniform_", "<builtin>.super"], "common_quantization.ModelForLinearBNFusion.forward": [], "common_quantization.DummyObserver.calculate_qparams": [], "common_quantization.DummyObserver.forward": [], "common_quantization.ModelWithFunctionals.__init__": ["torch.nn.quantized.FloatFunctional", "<builtin>.super"], "common_quantization.ModelWithFunctionals.forward": [], "common_quantization.ResNetBase.__init__": ["torch.nn.BatchNorm2d", "<builtin>.super", "torch.nn.AdaptiveAvgPool2d", "torch.nn.quantized.FloatFunctional", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Identity"], "common_quantization.ResNetBase.forward": ["torch.flatten"], "common_quantization.ResNetBase.fuse_model": ["torch.quantization.fuse_modules"], "common_quantization.ModelMultipleOps.__init__": ["torch.nn.BatchNorm2d", "<builtin>.super", "torch.nn.AdaptiveAvgPool2d", "torch.nn.quantized.FloatFunctional", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Identity"], "common_quantization.ModelMultipleOps.forward": ["torch.nn.functional.max_pool2d"], "common_quantization.ModelMultipleOpsNoAvgPool.__init__": ["torch.nn.BatchNorm2d", "<builtin>.super", "torch.nn.quantized.FloatFunctional", "torch.nn.Linear", "torch.nn.MaxPool2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "common_quantization.ModelMultipleOpsNoAvgPool.forward": ["torch.nn.functional.max_pool2d"], "common_quantization.EmbeddingBagModule.__init__": ["torch.nn.EmbeddingBag", "<builtin>.super"], "common_quantization.EmbeddingBagModule.forward": [], "common_quantization.EmbeddingModule.__init__": ["torch.nn.Embedding", "<builtin>.super"], "common_quantization.EmbeddingModule.forward": [], "common_quantization.EmbeddingWithLinear.__init__": ["torch.nn.Linear", "torch.nn.Embedding", "<builtin>.super"], "common_quantization.EmbeddingWithLinear.forward": [], "common_quantization.DenseTopMLP.__init__": ["torch.nn.Linear", "torch.nn.Sequential", "<builtin>.super"], "common_quantization.DenseTopMLP.forward": ["torch.cat"], "common_quantization.EmbBagWrapper.__init__": ["torch.nn.EmbeddingBag", "<builtin>.super"], "common_quantization.EmbBagWrapper.forward": [], "common_quantization.SparseNNModel.__init__": ["common_quantization.DenseTopMLP.__init__", "common_quantization.EmbBagWrapper.__init__", "<builtin>.super"], "common_quantization.SparseNNModel.forward": ["common_quantization.DenseTopMLP.__init__", "common_quantization.EmbBagWrapper.__init__"], "common_quantized": ["contextlib.contextmanager", "<builtin>.any", "torch.backends.quantized.supported_engines.remove"], "torch.backends.quantized.supported_engines.remove": [], "common_quantized._conv_output_shape": ["numpy.floor"], "common_quantized._quantize": ["numpy.clip", "numpy.round", "numpy.iinfo"], "common_quantized._dequantize": [], "common_quantized._requantize": ["numpy.clip"], "common_quantized._calculate_dynamic_qparams": ["<builtin>.int", "<builtin>.min", "<builtin>.isinstance", "<builtin>.max", "numpy.finfo", "<builtin>.round", "<builtin>.float"], "common_quantized._calculate_dynamic_per_channel_qparams": ["<builtin>.min", "<builtin>.isinstance", "<builtin>.max", "numpy.finfo", "numpy.zeros", "<builtin>.round", "<builtin>.range", "torch.iinfo"], "common_quantized._snr": ["common_quantized._snr", "<builtin>.isinstance", "<builtin>.len", "<builtin>.range", "<builtin>.float"], "common_quantized.override_quantized_engine": [], "common_quantized.override_cpu_allocator_for_qnnpack": ["torch._C._set_default_mobile_cpu_allocator", "torch._C._unset_default_mobile_cpu_allocator"], "torch._C._set_default_mobile_cpu_allocator": [], "torch._C._unset_default_mobile_cpu_allocator": [], "common_quantized.override_qengines": [], "common_quantized.override_qengines.test_fn": ["common_quantized.override_quantized_engine"], "common_quantized.qengine_is_fbgemm": [], "common_quantized.qengine_is_qnnpack": [], "common_quantized._permute_to_axis_zero": ["<builtin>.range", "<builtin>.list", "<builtin>.tuple"], "common_quantized._fake_quantize_per_channel_affine_reference": ["torch.clamp", "<builtin>.tuple", "common_quantized._permute_to_axis_zero", "torch.zeros_like", "torch.round", "<builtin>.range"], "common_quantized._fake_quantize_per_channel_affine_grad_reference": ["<builtin>.tuple", "common_quantized._permute_to_axis_zero", "torch.zeros_like", "torch.round", "<builtin>.range"], "common_quantized.to_tensor": ["torch.tensor", "torch.device"], "common_utils": ["hypothesis.settings.register_profile", "sys.getfilesystemencoding", "os.environ.get", "os.getcwd", "<builtin>.print", "common_utils.is_avx512_vnni_supported", "common_utils._get_test_report_path", "torch.backends.mkl.is_available", "pathlib.Path", "common_utils._check_module_exists", "common_utils.settings", "<builtin>.str", "os.getenv", "torch.backends.disable_global_flags", "argparse.ArgumentParser", "torch.manual_seed", "hypothesis.settings.load_profile", "contextlib.contextmanager", "common_utils.cppProfilingFlagsToProfilingMode", "platform.machine"], "torch.backends.disable_global_flags": [], "common_utils.cppProfilingFlagsToProfilingMode": ["torch._C._jit_set_profiling_executor", "torch._C._jit_set_profiling_mode"], "common_utils.enable_profiling_mode_for_profiling_tests": ["torch._C._jit_set_profiling_executor", "torch._C._jit_set_profiling_mode"], "common_utils.enable_profiling_mode": ["torch._C._jit_set_profiling_executor", "torch._C._jit_set_profiling_mode"], "common_utils.num_profiled_runs": ["torch._C._jit_set_num_profiled_runs"], "torch._C._jit_set_num_profiled_runs": [], "common_utils.prof_callable": ["torch._C.ScriptMethod.__call__", "common_utils.enable_profiling_mode_for_profiling_tests", "torch._C.ScriptFunction.__call__"], "torch._C.ScriptMethod.__call__": [], "torch._C.ScriptFunction.__call__": [], "common_utils.prof_func_call": ["common_utils.prof_callable"], "common_utils.prof_meth_call": ["common_utils.prof_callable"], "common_utils._get_test_report_path": ["os.path.join", "os.environ.get"], "common_utils.wait_for_process": [], "common_utils.shell": ["sys.stdout.flush", "sys.stderr.flush", "common_utils.wait_for_process", "subprocess.Popen", "<builtin>.isinstance"], "common_utils.repeat_test_for_types": [], "common_utils.repeat_test_for_types.repeat_helper": ["functools.wraps"], "common_utils.repeat_test_for_types.repeat_helper.call_helper": ["expecttest.TestCase.subTest"], "expecttest.TestCase.subTest": [], "common_utils.discover_test_cases_recursively": ["common_utils.discover_test_cases_recursively", "<builtin>.isinstance"], "common_utils.get_test_names": [], "common_utils.chunk_list": ["<builtin>.range"], "common_utils.sanitize_test_filename": ["re.sub", "<builtin>.len"], "common_utils.run_tests": ["<builtin>.range", "common_utils.chunk_list", "subprocess.Popen", "os.path.join", "os.path.exists", "common_utils.shell", "common_utils.discover_test_cases_recursively", "<builtin>.print", "common_utils.get_test_names", "xmlrunner.XMLTestRunner", "inspect.getfile", "json.load", "sys.exit", "sys._getframe", "<builtin>.len", "unittest.TestLoader", "common_utils.sanitize_test_filename", "unittest.main", "<builtin>.open", "os.makedirs", "common_utils.wait_for_process"], "unittest.TestLoader": [], "xmlrunner.XMLTestRunner": [], "platform.machine": [], "common_utils.is_avx512_vnni_supported": ["<builtin>.open"], "common_utils.TemporaryFileName": ["<builtin>.UserWarning", "os.unlink", "tempfile.NamedTemporaryFile"], "<builtin>.UserWarning": [], "common_utils.TemporaryDirectoryName": ["shutil.rmtree", "tempfile.mkdtemp", "tempfile.TemporaryDirectory"], "sys.getfilesystemencoding": [], "common_utils._check_module_exists": [], "torch.backends.mkl.is_available": [], "common_utils.skipIfRocm": ["functools.wraps"], "common_utils.skipIfRocm.wrapper": ["unittest.SkipTest"], "common_utils.DeterministicGuard.__init__": [], "common_utils.DeterministicGuard.__enter__": ["torch.are_deterministic_algorithms_enabled", "torch.use_deterministic_algorithms"], "torch.are_deterministic_algorithms_enabled": [], "torch.use_deterministic_algorithms": [], "common_utils.DeterministicGuard.__exit__": ["torch.use_deterministic_algorithms"], "common_utils.CudaSyncGuard.__init__": [], "common_utils.CudaSyncGuard.__enter__": ["torch.cuda.get_sync_debug_mode", "torch.cuda.set_sync_debug_mode"], "torch.cuda.get_sync_debug_mode": [], "torch.cuda.set_sync_debug_mode": [], "common_utils.CudaSyncGuard.__exit__": ["torch.cuda.set_sync_debug_mode"], "common_utils.wrapDeterministicFlagAPITest": ["functools.wraps"], "common_utils.wrapDeterministicFlagAPITest.wrapper": ["torch.are_deterministic_algorithms_enabled", "common_utils.DeterministicGuard.__init__"], "common_utils.wrapDeterministicFlagAPITest.wrapper.CuBLASConfigGuard.__enter__": ["torch.version.cuda.split", "<builtin>.int", "os.environ.get"], "common_utils.wrapDeterministicFlagAPITest.wrapper.CuBLASConfigGuard.__exit__": ["os.environ.get"], "common_utils.skipIfCompiledWithoutNumpy": ["functools.wraps", "torch.from_numpy", "numpy.array"], "common_utils.skipIfCompiledWithoutNumpy.wrapper": ["unittest.SkipTest"], "common_utils._test_function": [], "common_utils._test_function.run_test_function": [], "common_utils.skipIfNoLapack": ["functools.wraps"], "common_utils.skipIfNoLapack.wrapper": ["unittest.SkipTest"], "common_utils.skipIfNotRegistered": ["unittest.skip", "unittest.skipIf"], "common_utils.skipIfNoSciPy": ["functools.wraps"], "common_utils.skipIfNoSciPy.wrapper": ["unittest.SkipTest"], "common_utils.skipIfOnGHA": ["functools.wraps"], "common_utils.skipIfOnGHA.wrapper": ["unittest.SkipTest"], "common_utils.slowTest": ["functools.wraps"], "common_utils.slowTest.wrapper": ["unittest.SkipTest"], "common_utils.noarchTest": ["functools.wraps"], "common_utils.noarchTest.wrapper": ["unittest.SkipTest"], "common_utils.slowAwareTest": [], "common_utils.skipCUDAMemoryLeakCheckIf": [], "common_utils.skipCUDAMemoryLeakCheckIf.dec": ["<builtin>.getattr"], "common_utils.skipCUDANonDefaultStreamIf": [], "common_utils.skipCUDANonDefaultStreamIf.dec": ["<builtin>.getattr"], "common_utils.suppress_warnings": ["functools.wraps"], "common_utils.suppress_warnings.wrapper": ["warnings.catch_warnings", "warnings.simplefilter"], "warnings.catch_warnings": [], "common_utils.to_gpu": ["torch.is_storage", "common_utils.to_gpu", "<builtin>.tuple", "copy.deepcopy", "torch.no_grad", "<builtin>.isinstance"], "common_utils.get_function_arglist": ["inspect.getfullargspec"], "inspect.getfullargspec": [], "common_utils.set_rng_seed": ["torch.manual_seed", "numpy.random.seed", "random.seed"], "common_utils.freeze_rng_state": ["torch.cuda.set_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.cuda.get_rng_state", "torch.cuda.is_available"], "common_utils.set_default_dtype": ["torch.set_default_dtype", "torch.get_default_dtype"], "torch.set_default_dtype": [], "common_utils.iter_indices": ["<builtin>.range", "itertools.product"], "common_utils.is_iterable": ["<builtin>.iter"], "common_utils.is_iterable_of_tensors": ["<builtin>.iter", "<builtin>.len", "<builtin>.isinstance"], "common_utils.CudaNonDefaultStream.__enter__": ["torch._C._cuda_setStream", "<builtin>.range", "torch.cuda.current_stream", "torch._C._cuda_setDevice", "torch.cuda.current_device", "torch.cuda.device_count", "torch.cuda.Stream"], "torch._C._cuda_setStream": [], "torch._C._cuda_setDevice": [], "common_utils.CudaNonDefaultStream.__exit__": ["torch._C._cuda_setStream", "<builtin>.range", "torch._C._cuda_setDevice", "torch.cuda.current_device", "torch.cuda.device_count"], "common_utils.CudaMemoryLeakCheck.__init__": ["torch.testing._internal.common_cuda.initialize_cuda_context_rng", "expecttest.TestCase.id"], "expecttest.TestCase.id": [], "torch.testing._internal.common_cuda.initialize_cuda_context_rng": [], "common_utils.CudaMemoryLeakCheck.get_cuda_memory_usage": ["<builtin>.range", "torch.cuda.memory_allocated", "torch.cuda.device_count", "<builtin>.tuple", "gc.collect"], "common_utils.CudaMemoryLeakCheck.__enter__": ["common_utils.CudaMemoryLeakCheck.get_cuda_memory_usage"], "common_utils.CudaMemoryLeakCheck.__exit__": ["common_utils.CudaMemoryLeakCheck.get_cuda_memory_usage", "<builtin>.enumerate", "common_utils.TestCase.assertEqual", "<builtin>.zip"], "common_utils.TestCase.assertEqual": ["<builtin>.repr", "common_utils.TestCase._is_dict", "<builtin>.super", "<builtin>.zip", "common_utils.TestCase._compareScalars", "common_utils.is_iterable", "<builtin>.list", "common_utils.TestCase.assertEqual", "common_utils.TestCase._get_assert_msg", "<builtin>.len", "common_utils.TestCase.assertEqual.maybe_to_list", "common_utils.TestCase.assertEqual.maybe_to_tensor", "<builtin>.set", "common_utils.TestCase._compareTensors", "<builtin>.type", "<builtin>.isinstance"], "common_utils.skip_exception_type": ["unittest.SkipTest"], "common_utils.settings": ["hypothesis.settings"], "common_utils.check_if_enable": ["<builtin>.getattr", "<builtin>.any", "<builtin>.str", "unittest.SkipTest"], "common_utils.get_comparison_dtype": ["torch.promote_types"], "torch.promote_types": [], "common_utils.AssertRaisesContextIgnoreNotImplementedError.__exit__": ["<builtin>.issubclass", "unittest.case._AssertRaisesContext.test_case.skipTest", "<builtin>.super"], "unittest.case._AssertRaisesContext.test_case.skipTest": [], "common_utils.set_warn_always_context": ["torch.is_warn_always_enabled", "torch.set_warn_always"], "torch.is_warn_always_enabled": [], "torch.set_warn_always": [], "common_utils.TestCase._should_stop_test_suite": ["torch.cuda.synchronize", "torch.cuda.is_initialized"], "torch.cuda.is_initialized": [], "common_utils.TestCase.precision": [], "common_utils.TestCase.rel_tol": [], "common_utils.TestCase.__init__": ["<builtin>.getattr", "common_utils.TestCase.wrap_with_policy", "common_utils.TestCase.wrap_with_cuda_policy", "<builtin>.super"], "common_utils.TestCase.wrap_with_cuda_policy": ["<builtin>.getattr", "expecttest.TestCase.id", "<builtin>.setattr", "common_utils.TestCase.wrap_method_with_policy"], "common_utils.TestCase.__init__.<lambda1>": ["common_utils.skip_exception_type"], "common_utils.TestCase.wrap_with_policy": ["<builtin>.getattr", "<builtin>.setattr", "common_utils.TestCase.wrap_method_with_policy"], "common_utils.TestCase.assertLeaksNoCudaTensors": ["expecttest.TestCase.id", "common_utils.CudaMemoryLeakCheck.__init__"], "common_utils.TestCase.enforceNonDefaultStream": [], "common_utils.TestCase.wrap_method_with_policy": ["functools.wraps", "types.MethodType"], "common_utils.TestCase.wrap_method_with_policy.wrapper": ["common_utils.TestCase.assertLeaksNoCudaTensors"], "common_utils.TestCase.wrap_with_cuda_memory_check": ["common_utils.TestCase.wrap_method_with_policy"], "common_utils.TestCase.run": ["<builtin>.super", "common_utils.TestCase._should_stop_test_suite"], "common_utils.TestCase.setUp": ["common_utils.set_rng_seed", "common_utils.check_if_enable"], "common_utils.TestCase._make_crow_indices": ["<builtin>.max", "torch.zeros", "math.sqrt", "<builtin>.int", "torch.arange", "common_utils.TestCase._make_crow_indices.sawteeth", "math.isqrt", "torch.randperm", "<builtin>.divmod", "torch.device"], "common_utils.TestCase._make_crow_indices.sawteeth": [], "<builtin>.divmod": [], "math.isqrt": [], "common_utils.TestCase.genSparseCSRTensor": ["<builtin>.range", "torch.sparse_csr_tensor", "<builtin>.len", "common_utils.TestCase.genSparseCSRTensor.random_sparse_csr", "<builtin>.all"], "common_utils.TestCase.genSparseCSRTensor.random_sparse_csr": ["torch.zeros", "common_utils.TestCase._make_crow_indices", "<builtin>.range", "torch.sort", "torch.randperm", "common_utils.make_tensor"], "common_utils.make_tensor": ["<builtin>.max", "torch.tensor", "torch.finfo", "torch.complex", "torch.randint", "math.ceil", "torch.testing.complex_types", "<builtin>.min", "torch.testing.integral_types", "torch.repeat_interleave", "torch.device", "torch.rand", "math.floor", "torch.testing.floating_types_and"], "common_utils.TestCase.genSparseTensor": ["torch.tensor", "torch.randn_like", "torch.sparse_coo_tensor", "<builtin>.range", "torch.cat", "torch.Size", "common_utils.make_tensor", "<builtin>.all", "torch.rand", "<builtin>.list"], "common_utils.TestCase.safeToDense": [], "common_utils.TestCase.compare_with_reference": ["common_utils.TestCase.assertEqual"], "common_utils.TestCase.compare_with_numpy": ["torch.tensor", "torch.from_numpy", "numpy.array", "copy.copy", "common_utils.TestCase.assertEqual", "<builtin>.isinstance"], "common_utils.TestCase._getDefaultRtolAndAtol": ["<builtin>.max"], "common_utils.TestCase._compareTensors": ["<builtin>.max", "_core._compare_tensors_internal", "common_utils.TestCase._getDefaultRtolAndAtol", "common_utils.get_comparison_dtype", "<builtin>.isinstance"], "_core._compare_tensors_internal": ["_core.is_quantized", "_core.is_integral", "torch.abs", "_core._compare_tensors_internal", "_core._unravel_index", "torch.allclose", "torch.isclose", "torch.sum", "typing.cast", "torch.isnan", "torch.argmax"], "common_utils.TestCase._compareScalars": ["<builtin>.max", "common_utils.TestCase._getDefaultRtolAndAtol", "typing.cast", "_core._compare_scalars_internal", "<builtin>.isinstance"], "_core._compare_scalars_internal": ["<builtin>.isinstance", "_core._compare_scalars_internal._helper", "cmath.isnan", "<builtin>.complex"], "common_utils.TestCase._get_assert_msg": [], "common_utils.TestCase.assertEqualIgnoreType": ["common_utils.TestCase.assertEqual"], "common_utils.TestCase._is_dict": ["<builtin>.isinstance"], "common_utils.TestCase.assertEqual.maybe_to_tensor": ["torch.from_numpy", "<builtin>.isinstance"], "common_utils.TestCase.assertEqual.maybe_to_list": ["<builtin>.isinstance"], "common_utils.TestCase.assertNotEqual": ["common_utils.TestCase.assertRaises", "common_utils.TestCase.assertEqual"], "common_utils.TestCase.assertRaises": ["<builtin>.super", "unittest.case._AssertRaisesContext.__init__"], "common_utils.TestCase.assertEqualTypeString": ["common_utils.TestCase.assertEqual"], "common_utils.TestCase.assertObjectIn": ["<builtin>.id", "<builtin>.AssertionError"], "unittest.case._AssertRaisesContext.__init__": [], "common_utils.TestCase.assertRaisesRegex": ["<builtin>.super", "unittest.case._AssertRaisesContext.__init__", "unittest.case._AssertRaisesContext.handle"], "unittest.case._AssertRaisesContext.handle": [], "common_utils.TestCase.assertExpectedRaises": ["common_utils.TestCase.assertExpected", "expecttest.TestCase.fail", "<builtin>.str"], "common_utils.TestCase.assertExpected": ["os.path.join", "<builtin>.TypeError", "os.path.realpath", "expecttest.TestCase.id", "common_utils.TestCase.assertExpected.remove_prefix", "<builtin>.open", "os.path.dirname", "common_utils.TestCase.assertExpected.accept_output", "<builtin>.RuntimeError", "expecttest.TestCase.assertMultiLineEqual", "common_utils.TestCase.assertEqual", "re.sub", "<builtin>.hasattr", "<builtin>.isinstance"], "expecttest.TestCase.fail": [], "common_utils.TestCase.assertNotWarn": ["expecttest.TestCase.assertTrue", "common_utils.set_warn_always_context", "<builtin>.len", "warnings.simplefilter", "warnings.catch_warnings"], "expecttest.TestCase.assertTrue": [], "common_utils.TestCase": ["contextlib.contextmanager"], "common_utils.TestCase.assertWarnsOnceRegex": ["expecttest.TestCase.assertTrue", "<builtin>.str", "common_utils.set_warn_always_context", "<builtin>.len", "warnings.simplefilter", "re.match", "warnings.catch_warnings", "expecttest.TestCase.fail", "re.compile", "<builtin>.type", "<builtin>.any"], "common_utils.TestCase.assertExpected.remove_prefix": ["<builtin>.len"], "common_utils.TestCase.assertExpected.accept_output": ["<builtin>.print", "<builtin>.open", "re.sub"], "expecttest.TestCase.assertMultiLineEqual": [], "common_utils.TestCase.assertExpectedStripMangled": ["common_utils.TestCase.assertExpected", "re.sub"], "common_utils.TestCase.assertGreaterAlmostEqual": ["<builtin>.TypeError", "<builtin>.round", "expecttest.TestCase.failureException", "expecttest.TestCase._formatMessage"], "expecttest.TestCase._formatMessage": [], "expecttest.TestCase.failureException": [], "common_utils.TestCase.run_process_no_exception": ["subprocess.Popen"], "common_utils.TestCase.runWithPytorchAPIUsageStderr": ["os.environ.copy", "common_utils.TestCase.run_process_no_exception"], "common_utils.download_file": ["warnings.warn", "os.path.join", "os.path.exists", "<builtin>.open", "os.path.dirname", "urllib.parse.urlsplit", "unittest.SkipTest", "os.path.basename", "urllib.request.urlopen", "torch._utils_internal.get_writable_path"], "urllib.parse.urlsplit": [], "torch._utils_internal.get_writable_path": [], "common_utils.find_free_port": ["socket.socket", "contextlib.closing"], "common_utils.retry_on_connect_failures": ["functools.wraps", "functools.partial"], "common_utils.retry_on_connect_failures.wrapper": ["random.random", "time.sleep", "<builtin>.str"], "common_utils.retry": [], "common_utils.retry.deco_retry": ["functools.wraps"], "common_utils.retry.deco_retry.f_retry": ["<builtin>.print", "time.sleep", "<builtin>.str", "unittest.SkipTest"], "torch.testing.integral_types": [], "torch.complex": [], "common_utils.random_square_matrix_of_rank": ["torch.randn", "<builtin>.range", "torch.linalg.svd"], "common_utils.random_well_conditioned_matrix": ["torch.rand", "<builtin>.min", "torch.randn", "torch.linalg.svd"], "common_utils.random_symmetric_matrix": ["torch.randn"], "common_utils.make_symmetric_matrices": ["common_utils.make_tensor"], "common_utils.random_hermitian_matrix": ["torch.randn"], "common_utils.random_symmetric_psd_matrix": ["torch.randn", "torch.matmul"], "common_utils.random_hermitian_psd_matrix": ["torch.randn", "torch.matmul"], "common_utils.random_symmetric_pd_matrix": ["torch.eye", "torch.randn", "torch.matmul"], "common_utils.make_symmetric_pd_matrices": ["torch.eye", "torch.matmul", "common_utils.make_tensor"], "common_utils.random_hermitian_pd_matrix": ["torch.eye", "torch.randn", "torch.matmul"], "common_utils.random_fullrank_matrix_distinct_singular_value": ["torch.arange", "torch.randn", "torch.ones", "torch.linalg.svd"], "common_utils.make_fullrank_matrices_with_distinct_singular_values": ["torch.arange", "common_utils.make_tensor", "torch.linalg.svd"], "common_utils.random_matrix": ["torch.ones", "torch.linalg.svd", "<builtin>.min", "torch.linspace", "torch.randn"], "torch.linspace": [], "common_utils.random_lowrank_matrix": ["common_utils.random_matrix"], "common_utils.random_sparse_matrix": ["<builtin>.max", "torch.tensor", "torch.sparse_coo_tensor", "<builtin>.int", "<builtin>.range", "<builtin>.zip", "<builtin>.min", "random.shuffle", "<builtin>.float", "torch.randn"], "common_utils.random_sparse_pd_matrix": ["<builtin>.range", "random.uniform", "<builtin>.len", "<builtin>.dict", "<builtin>.sorted", "math.cos", "math.sin", "<builtin>.float", "<builtin>.globals", "random.randint", "common_utils.random_sparse_pd_matrix.multiply"], "common_utils.random_sparse_pd_matrix.multiply": ["<builtin>.range"], "common_utils.do_test_dtypes": ["torch.zeros"], "common_utils.do_test_empty_full": ["torch.full", "common_utils.do_test_empty_full.check_value", "torch.Size", "torch.empty", "torch.empty_like", "torch.full_like", "common_utils.do_test_empty_full.get_int64_dtype", "torch.get_default_dtype"], "common_utils.do_test_empty_full.check_value": [], "common_utils.do_test_empty_full.get_int64_dtype": ["operator.attrgetter", "<builtin>.str"], "operator.attrgetter": [], "common_utils.clone_input_helper": ["<builtin>.map", "torch.clone", "<builtin>.tuple", "<builtin>.isinstance"], "common_utils.set_running_script_path": ["os.path.realpath", "os.path.abspath"], "common_utils.check_test_defined_in_running_script": ["os.path.realpath", "os.path.abspath", "inspect.getfile"], "common_utils.load_tests": ["unittest.TestSuite", "common_utils.set_running_script_path", "common_utils.check_test_defined_in_running_script"], "unittest.TestSuite": [], "common_utils.BytesIOContext.__enter__": [], "common_utils.BytesIOContext.__exit__": [], "common_utils.gradcheck": ["torch.autograd.gradcheck", "os.environ.get"], "torch.autograd.gradcheck": [], "common_utils.gradgradcheck": ["torch.autograd.gradgradcheck", "os.environ.get"], "torch.autograd.gradgradcheck": [], "common_utils._assertGradAndGradgradChecks": ["common_utils.gradcheck", "common_utils.gradgradcheck"], "common_utils.set_cwd": ["os.getcwd", "os.chdir"], "common_utils._wrap_warn_once": [], "common_utils._wrap_warn_once.decorator": [], "common_utils._wrap_warn_once.decorator.inner": [], "common_utils.coalescedonoff": ["functools.wraps"], "common_utils.coalescedonoff.wrapped": [], "common_utils.disable_gc": ["gc.isenabled", "gc.disable", "gc.enable"], "gc.isenabled": [], "gc.disable": [], "gc.enable": [], "common_utils.has_breakpad": ["torch._C._get_minidump_directory"], "torch._C._get_minidump_directory": [], "common_utils.find_library_location": ["pathlib.Path", "os.path.exists"], "common_utils.sandcastle_skip": [], "common_utils.sandcastle_skip.decorator": ["functools.wraps"], "common_utils.sandcastle_skip.decorator.wrapper": ["<builtin>.print"], "common_utils.mock_wrapper": ["unittest.mock.MagicMock", "functools.wraps"], "unittest.mock.MagicMock": [], "common_utils.mock_wrapper.wrapper": [], "common_utils.get_tensors_from": ["<builtin>.set", "<builtin>.isinstance"], "common_utils.sandcastle_skip_if": [], "common_utils.sandcastle_skip_if.decorator": ["functools.wraps"], "common_utils.sandcastle_skip_if.decorator.wrapper": ["<builtin>.print"], "dist_utils": ["torch.distributed.is_available", "<builtin>.print", "sys.exit"], "dist_utils.dist_init": ["functools.wraps", "functools.partial"], "dist_utils.dist_init.new_test_method": ["torch.distributed.rpc.init_rpc", "torch.distributed.rpc.shutdown"], "dist_utils.noop": [], "dist_utils.wait_until_node_failure": ["re.search", "torch.distributed.rpc.rpc_sync", "time.sleep", "<builtin>.str"], "dist_utils.wait_until_pending_futures_and_users_flushed": ["time.sleep", "time.time", "torch.distributed.rpc._rref_context_get_debug_info", "<builtin>.ValueError", "<builtin>.int"], "dist_utils.get_num_owners_and_forks": ["torch.distributed.rpc._rref_context_get_debug_info"], "dist_utils.wait_until_owners_and_forks_on_rank": ["torch.distributed.rpc.rpc_sync", "time.sleep", "time.time", "<builtin>.ValueError", "<builtin>.int", "dist_utils.worker_name"], "dist_utils.worker_name": [], "dist_utils.initialize_pg": ["torch.distributed.is_initialized", "torch.distributed.init_process_group"], "dist_utils.get_function_event": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest": ["os.getenv", "doctest.testmod", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.EditHistory.__init__", "re.compile"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.nth_line": ["<builtin>.range"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.nth_eol": ["<builtin>.len", "<builtin>.range"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.normalize_nl": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.escape_trailing_quote": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.EditHistory.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.EditHistory.adjust_lineno": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.EditHistory.seen_file": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.EditHistory.record_edit": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.ok_for_raw_triple_quoted_string": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.replace_string_literal": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.normalize_nl", "<builtin>.all", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.nth_eol"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.replace_string_literal.replace": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.ok_for_raw_triple_quoted_string", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.escape_trailing_quote"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.TestCase.assertExpectedInline": ["unittest.TestCase.id", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.TestCase.assertMultiLineEqualMaybeCppStack", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.EditHistory.adjust_lineno", "traceback.extract_stack", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.EditHistory.record_edit", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.replace_string_literal", "<builtin>.print", "<builtin>.open", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.EditHistory.seen_file"], "unittest.TestCase.id": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.TestCase.assertMultiLineEqualMaybeCppStack": ["unittest.TestCase.assertEqual", "<builtin>.len", "unittest.TestCase.assertGreaterEqual", "unittest.TestCase.assertMultiLineEqual", "<builtin>.hasattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.TestCase.assertExpectedRaisesInline": ["<builtin>.str", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\expecttest.TestCase.assertExpectedInline", "unittest.TestCase.fail"], "doctest.testmod": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\framework_utils": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\framework_utils.calculate_shards": ["<builtin>.sorted", "<builtin>.dict", "<builtin>.range"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\framework_utils.calculate_shards.<lambda1>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\framework_utils.calculate_shards.<lambda2>": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\framework_utils.calculate_shards.<lambda3>": [], "hypothesis_utils": ["hypothesis.strategies.composite", "collections.defaultdict"], "hypothesis_utils.<lambda1>": [], "hypothesis_utils._get_valid_min_max": ["<builtin>.min", "torch.finfo", "torch.iinfo", "numpy.float32", "<builtin>.max"], "hypothesis_utils._floats_wrapper": ["hypothesis.strategies.floats", "torch.finfo", "<builtin>.len"], "hypothesis_utils.floats": ["hypothesis_utils._floats_wrapper"], "hypothesis_utils.assume_not_overflowing": ["hypothesis.assume", "hypothesis_utils._get_valid_min_max"], "hypothesis_utils.qparams": ["torch.finfo", "hypothesis.strategies.integers", "<builtin>.isinstance", "hypothesis.strategies.sampled_from", "hypothesis_utils.floats", "torch.iinfo"], "hypothesis_utils.array_shapes": ["<builtin>.min", "hypothesis.strategies.lists", "hypothesis.strategies.integers"], "hypothesis_utils.array_shapes.<lambda1>": ["functools.reduce"], "hypothesis_utils.tensor": ["numpy.isinf", "<builtin>.isinstance", "hypothesis.strategies.sampled_from", "hypothesis.extra.numpy.arrays", "hypothesis_utils.floats", "hypothesis.assume", "hypothesis_utils._get_valid_min_max", "numpy.isnan", "torch.testing._internal.common_quantized._calculate_dynamic_qparams"], "numpy.isinf": [], "torch.testing._internal.common_quantized._calculate_dynamic_qparams": [], "hypothesis_utils.per_channel_tensor": ["numpy.isinf", "numpy.arange", "torch.testing._internal.common_quantized._calculate_dynamic_per_channel_qparams", "<builtin>.int", "<builtin>.isinstance", "hypothesis.strategies.sampled_from", "hypothesis.extra.numpy.arrays", "hypothesis_utils.floats", "hypothesis.assume", "hypothesis_utils._get_valid_min_max", "numpy.random.randint", "numpy.transpose", "numpy.isnan"], "torch.testing._internal.common_quantized._calculate_dynamic_per_channel_qparams": [], "hypothesis_utils.tensor_conv": ["hypothesis_utils.tensor", "hypothesis.strategies.booleans", "<builtin>.range", "<builtin>.tuple", "hypothesis.strategies.integers", "<builtin>.isinstance", "hypothesis.strategies.sampled_from", "<builtin>.len"], "hypothesis_utils.assert_deadline_disabled": ["hypothesis.settings", "warnings.warn"], "jit_metaprogramming_utils": ["torch.nn.functional.softmax", "torch.tensor", "torch.full", "torch.ones", "torch.rand", "torch.Size", "torch.nn.functional.log_softmax", "torch.empty", "torch.testing._internal.common_methods_invocations.non_differentiable", "torch.randint", "torch.randn", "torch.set_default_dtype", "torch.zeros"], "torch.testing._internal.common_methods_invocations.non_differentiable": [], "jit_metaprogramming_utils.value_to_literal": ["<builtin>.str", "<builtin>.isinstance", "<builtin>.ascii"], "<builtin>.ascii": [], "jit_metaprogramming_utils.get_call": ["jit_metaprogramming_utils.value_to_literal", "<builtin>.len", "<builtin>.TypeError"], "jit_metaprogramming_utils.get_constant": [], "jit_metaprogramming_utils.get_script_args": ["<builtin>.isinstance", "<builtin>.list", "torch.testing._internal.common_utils.is_iterable_of_tensors", "<builtin>.len", "<builtin>.str", "jit_metaprogramming_utils.get_constant"], "jit_metaprogramming_utils.gen_script_fn_and_args": ["torch.jit.CompilationUnit", "jit_metaprogramming_utils.get_call", "jit_metaprogramming_utils.get_script_args"], "torch.jit.CompilationUnit": [], "jit_metaprogramming_utils.create_script_fn": [], "jit_metaprogramming_utils.create_script_fn.script_fn": ["jit_metaprogramming_utils.gen_script_fn_and_args"], "jit_metaprogramming_utils.partial_apply_nontensors": ["torch.testing._internal.common_utils.is_iterable_of_tensors", "<builtin>.isinstance"], "jit_metaprogramming_utils.partial_apply_nontensors.new_fn": ["<builtin>.iter", "<builtin>.next", "<builtin>.enumerate"], "jit_metaprogramming_utils.create_traced_fn": [], "jit_metaprogramming_utils.create_traced_fn.traced_fn": ["torch.jit.trace", "jit_metaprogramming_utils.partial_apply_nontensors"], "jit_metaprogramming_utils.get_nn_functional_compiled_fn_and_inputs": ["torch.testing._internal.common_methods_invocations.create_input", "jit_metaprogramming_utils.gen_script_fn_and_args", "torch._jit_internal._disable_emit_hooks", "copy.deepcopy", "torch.testing._internal.common_methods_invocations.unpack_variables"], "torch.testing._internal.common_methods_invocations.create_input": [], "torch.testing._internal.common_methods_invocations.unpack_variables": [], "torch._jit_internal._disable_emit_hooks": [], "jit_metaprogramming_utils.create_script_module": [], "jit_metaprogramming_utils.create_script_module.script_module": ["jit_metaprogramming_utils.create_script_module.script_module.TheModule.__init__", "jit_metaprogramming_utils.create_script_module.script_module.make_module", "jit_metaprogramming_utils.get_script_args"], "jit_metaprogramming_utils.create_script_module.script_module.TheModule.__init__": ["<builtin>.super"], "jit_metaprogramming_utils.create_script_module.script_module.make_module": ["<builtin>.str", "torch.jit.ScriptModule.define", "jit_metaprogramming_utils.create_script_module.script_module.TheModule.__init__"], "torch.jit.ScriptModule.define": [], "jit_metaprogramming_utils.check_alias_annotation": ["<builtin>.tuple", "torch._C._jit_check_alias_annotation", "jit_metaprogramming_utils.get_script_args", "torch.jit.CompilationUnit", "jit_metaprogramming_utils.get_call", "torch._C._jit_pass_inline", "torch._C._jit_pass_constant_propagation"], "torch._C._jit_pass_inline": [], "torch._C._jit_check_alias_annotation": [], "jit_metaprogramming_utils.get_nn_module_name_from_kwargs": [], "jit_metaprogramming_utils.get_nn_mod_test_name": ["jit_metaprogramming_utils.get_nn_module_name_from_kwargs"], "jit_metaprogramming_utils.get_nn_module_class_from_kwargs": ["jit_metaprogramming_utils.get_nn_module_name_from_kwargs"], "jit_metaprogramming_utils.try_get_nn_module_compiled_mod_and_inputs": ["jit_metaprogramming_utils.create_script_module", "<builtin>.all", "jit_metaprogramming_utils.create_script_module.script_module", "<builtin>.isinstance", "torch.testing._internal.common_methods_invocations.create_input", "jit_metaprogramming_utils.get_nn_mod_test_name", "<builtin>.str", "<builtin>.getattr", "torch.testing._internal.common_methods_invocations.unpack_variables", "copy.deepcopy", "torch.is_tensor", "jit_metaprogramming_utils.get_nn_module_name_from_kwargs"], "jit_metaprogramming_utils.get_all_nn_module_tests": [], "jit_utils": ["contextlib.contextmanager", "<builtin>.range", "torch.cuda.is_available", "torch._C._cuda_getCompiledVersion", "torch.cuda.device_count", "torch.cuda.get_device_capability"], "torch._C._cuda_getCompiledVersion": [], "jit_utils.execWrapper": ["<builtin>.exec"], "jit_utils.do_input_map": ["torch.autograd.function._nested_map"], "jit_utils.do_input_map.<lambda1>": ["<builtin>.isinstance"], "torch.autograd.function._nested_map": [], "jit_utils.clear_class_registry": ["torch.jit._recursive.ConcreteTypeStore", "torch.jit._state._clear_class_state", "torch._C._jit_clear_class_registry"], "torch._C._jit_clear_class_registry": [], "torch.jit._recursive.ConcreteTypeStore": [], "torch.jit._state._clear_class_state": [], "jit_utils.get_execution_plan": ["<builtin>.list", "<builtin>.RuntimeError", "<builtin>.len"], "jit_utils._AssertRaisesRegexWithHighlightContext.__init__": [], "jit_utils._AssertRaisesRegexWithHighlightContext.__enter__": [], "jit_utils._AssertRaisesRegexWithHighlightContext.__exit__": ["torch.testing._internal.common_jit.JitCommonTestCase.assertRaisesRegex", "<builtin>.str", "torch.testing.FileCheck"], "torch.testing._internal.common_jit.JitCommonTestCase.assertRaisesRegex": [], "jit_utils.JitTestCase.capture_stdout.__enter__": ["io.StringIO"], "jit_utils.JitTestCase.capture_stdout.__exit__": ["<builtin>.str"], "jit_utils.JitTestCase.capture_stderr.__enter__": ["io.StringIO"], "jit_utils.JitTestCase.capture_stderr.__exit__": ["<builtin>.str"], "jit_utils.JitTestCase.setHooks": ["torch._C._jit_set_emit_hooks"], "jit_utils.JitTestCase.clearHooks": ["torch._C._jit_set_emit_hooks"], "jit_utils.JitTestCase.setUp": ["<builtin>.super", "torch.jit.TracerWarning.ignore_lib_warnings", "jit_utils.JitTestCase.setHooks"], "torch.jit.TracerWarning.ignore_lib_warnings": [], "jit_utils.JitTestCase.tearDown": ["<builtin>.super", "jit_utils.clear_class_registry", "jit_utils.JitTestCase.clearHooks"], "jit_utils.JitTestCase.assertAllFused": ["jit_utils.JitTestCase.assertAllFused.get_nodes_and_parents_recursively", "<builtin>.all", "<builtin>.set", "collections.defaultdict", "<builtin>.list", "torch.testing._internal.common_jit.JitCommonTestCase.assertTrue", "<builtin>.len"], "jit_utils.JitTestCase.assertAllFused.get_nodes_and_parents_recursively": ["jit_utils.JitTestCase.assertAllFused.get_nodes_and_parents_recursively"], "torch.testing._internal.common_jit.JitCommonTestCase.assertTrue": [], "jit_utils.JitTestCase._isHookExceptionOk": ["<builtin>.str"], "jit_utils.JitTestCase._compared_saved_loaded": ["torch.testing._internal.common_jit.JitCommonTestCase.assertMultiLineEqual", "torch.jit.load", "torch._C._ivalue_tags_match", "jit_utils.JitTestCase._compared_saved_loaded.extract_files", "torch.jit.save", "<builtin>.zip", "io.BytesIO", "<builtin>.isinstance", "torch._jit_internal._disable_emit_hooks", "jit_utils.JitTestCase._isHookExceptionOk", "torch.testing._internal.common_jit.JitCommonTestCase.assertTrue", "<builtin>.len"], "jit_utils.JitTestCase._compared_saved_loaded.extract_files": ["torch.testing._internal.common_jit.JitCommonTestCase.assertEqual", "pickle.load", "<builtin>.filter", "<builtin>.set", "<builtin>.list", "zipfile.ZipFile", "<builtin>.len"], "torch.testing._internal.common_jit.JitCommonTestCase.assertEqual": [], "jit_utils.JitTestCase._compared_saved_loaded.extract_files.<lambda1>": [], "jit_utils.JitTestCase._compared_saved_loaded.extract_files.<lambda2>": [], "jit_utils.JitTestCase._compared_saved_loaded.extract_files.<lambda3>": [], "torch.testing._internal.common_jit.JitCommonTestCase.assertMultiLineEqual": [], "torch._C._ivalue_tags_match": [], "jit_utils.JitTestCase.emitFunctionHook": ["jit_utils.JitTestCase._compared_saved_loaded"], "jit_utils.JitTestCase.emitModuleHook": ["jit_utils.JitTestCase._compared_saved_loaded"], "jit_utils.JitTestCase.getExportImportCopyWithPacking": ["torch.jit.load", "torch.jit.save", "io.BytesIO", "tempfile.NamedTemporaryFile", "os.unlink"], "jit_utils.JitTestCase.getExportImportCopyWithPacking.<lambda1>": [], "jit_utils.JitTestCase.getExportImportCopyWithPacking.<lambda2>": [], "jit_utils.JitTestCase.getExportImportCopyWithPacking.<lambda3>": [], "jit_utils.JitTestCase.getExportImportCopyWithPacking.<lambda4>": [], "jit_utils.JitTestCase.assertGraphContains": ["<builtin>.any", "torch.testing._internal.common_jit.JitCommonTestCase.assertTrue"], "jit_utils.JitTestCase.assertGraphContainsExactly": ["jit_utils.JitTestCase.assertGraphContainsExactly.nodes", "jit_utils.JitTestCase.assertGraphContainsExactly.perform_assert", "<builtin>.len", "<builtin>.str"], "jit_utils.JitTestCase.assertGraphContainsExactly.perform_assert": ["<builtin>.AssertionError"], "jit_utils.JitTestCase.assertGraphContainsExactly.nodes": ["jit_utils.JitTestCase.assertGraphContainsExactly.nodes"], "jit_utils.JitTestCase.assertExpectedONNXGraph": ["torch.onnx._optimize_trace", "jit_utils.JitTestCase.assertExpectedGraph"], "torch.onnx._optimize_trace": [], "jit_utils.JitTestCase.assertExpectedGraph": ["torch.testing._internal.common_jit.JitCommonTestCase.assertExpected", "<builtin>.str", "torch._C._jit_pass_canonicalize", "torch._C._jit_pass_lint", "<builtin>.isinstance", "torch._C._jit_pass_dce"], "torch._C._jit_pass_lint": [], "torch._C._jit_pass_dce": [], "torch._C._jit_pass_canonicalize": [], "torch.testing._internal.common_jit.JitCommonTestCase.assertExpected": [], "jit_utils.JitTestCase.run_pass": ["<builtin>.isinstance", "<builtin>.getattr", "torch._C._jit_pass_lint"], "jit_utils.JitTestCase.get_frame_vars": ["<builtin>.RuntimeError", "inspect.currentframe"], "jit_utils.JitTestCase.assertRaisesRegexWithHighlight": ["jit_utils._AssertRaisesRegexWithHighlightContext.__init__"], "jit_utils.JitTestCase.checkScriptRaisesRegex": ["textwrap.dedent", "torch.testing._internal.common_jit.JitCommonTestCase.assertRaisesRegex", "torch.jit.CompilationUnit", "torch.jit.script", "torch.testing._internal.common_utils.enable_profiling_mode_for_profiling_tests", "inspect.getsource", "<builtin>.getattr"], "jit_utils.JitTestCase.checkBailouts": ["torch.testing._internal.common_jit.JitCommonTestCase.assertEqual", "<builtin>.range", "jit_utils.get_execution_plan"], "jit_utils.JitTestCase.checkScript": ["torch.testing._internal.common_jit.JitCommonTestCase.assertExpected", "jit_utils.JitTestCase.checkScript", "torch.testing._internal.common_jit.JitCommonTestCase.assertEqual", "textwrap.dedent", "torch.jit.CompilationUnit", "jit_utils.do_input_map", "torch.jit.script", "jit_utils.JitTestCase.checkBailouts", "torch.testing._internal.common_utils.enable_profiling_mode_for_profiling_tests", "jit_utils.execWrapper", "<builtin>.isinstance", "inspect.getsource", "<builtin>.getattr", "<builtin>.any", "torch.jit.optimized_execution", "jit_utils.JitTestCase.get_frame_vars"], "torch.jit.optimized_execution": [], "jit_utils.JitTestCase.checkScript.<lambda1>": [], "jit_utils.JitTestCase.checkTrace": ["<builtin>.print", "torch.testing._internal.common_jit.JitCommonTestCase.assertEqual", "torch.jit.trace", "jit_utils.JitTestCase.checkTrace.allSum", "torch.autograd.grad", "jit_utils.do_input_map", "jit_utils.JitTestCase.checkTrace.flatten_inputs", "<builtin>.zip", "torch.allclose", "torch.testing._internal.common_jit.JitCommonTestCase.getExportImportCopy", "torch.testing._internal.common_jit.JitCommonTestCase.assertTrue"], "jit_utils.JitTestCase.checkTrace.allSum": ["<builtin>.sum", "<builtin>.enumerate", "math.log"], "jit_utils.JitTestCase.checkTrace.flatten_inputs": ["jit_utils.JitTestCase.checkTrace.flatten_inputs.input_reduce", "<builtin>.tuple"], "jit_utils.JitTestCase.checkTrace.flatten_inputs.input_reduce": ["<builtin>.isinstance", "functools.reduce"], "jit_utils.JitTestCase.checkTrace.flatten_inputs.input_reduce.<lambda1>": ["jit_utils.JitTestCase.checkTrace.flatten_inputs.input_reduce"], "jit_utils.JitTestCase.checkTrace.flatten_inputs.input_reduce.<lambda2>": ["jit_utils.JitTestCase.checkTrace.flatten_inputs.input_reduce"], "jit_utils.JitTestCase.checkTrace.flatten_inputs.<lambda1>": [], "jit_utils.JitTestCase.checkTrace.<lambda1>": [], "torch.testing._internal.common_jit.JitCommonTestCase.getExportImportCopy": [], "jit_utils.JitTestCase.checkTrace.<lambda2>": ["torch.autograd.Variable"], "jit_utils.JitTestCase.checkModule": ["torch.testing._internal.common_jit.JitCommonTestCase.assertExportImportModule", "torch.testing._internal.common_utils.freeze_rng_state", "torch.jit.script", "torch.testing._internal.common_jit.JitCommonTestCase.assertEqual"], "torch.testing._internal.common_jit.JitCommonTestCase.assertExportImportModule": [], "jit_utils.inline_everything_mode": ["torch._C._jit_set_inline_everything_mode", "torch._C._jit_get_inline_everything_mode"], "torch._C._jit_get_inline_everything_mode": [], "torch._C._jit_set_inline_everything_mode": [], "jit_utils.set_fusion_group_inlining": ["torch._C._debug_set_fusion_group_inlining", "torch._C._debug_get_fusion_group_inlining"], "torch._C._debug_get_fusion_group_inlining": [], "jit_utils.disable_autodiff_subgraph_inlining": ["torch._C._debug_set_autodiff_subgraph_inlining"], "torch._C._debug_set_autodiff_subgraph_inlining": [], "jit_utils._inline_everything": ["functools.wraps"], "jit_utils._inline_everything.wrapper": ["jit_utils.inline_everything_mode"], "jit_utils._tmp_donotuse_dont_inline_everything": ["functools.wraps"], "jit_utils._tmp_donotuse_dont_inline_everything.wrapper": ["jit_utils.inline_everything_mode"], "jit_utils._trace": [], "jit_utils._trace.wrapper": ["torch.jit.trace"], "jit_utils.enable_cpu_fuser": [], "jit_utils.enable_cpu_fuser.wrapper": ["torch._C._jit_override_can_fuse_on_cpu", "torch._C._jit_set_te_must_use_llvm_cpu"], "torch._C._jit_set_te_must_use_llvm_cpu": [], "jit_utils.enable_cpu_fuser_if": [], "jit_utils.enable_cpu_fuser_if.noop_fuser": [], "jit_utils.enable_cpu_fuser_if.noop_fuser.wrapper": [], "jit_utils.get_forward": [], "jit_utils.get_forward_graph": [], "jit_utils.get_module_method": [], "jit_utils.attrs_with_prefix": [], "jit_utils.warmup_backward": ["torch.autograd.grad", "<builtin>.len", "<builtin>.range"], "jit_utils.make_global": ["<builtin>.setattr"], "jit_utils._get_py3_code": ["tempfile.TemporaryDirectory", "<builtin>.isinstance", "<builtin>.getattr", "os.path.join", "<builtin>.open"], "opinfo_helper": [], "opinfo_helper.get_supported_dtypes": ["torch.testing._core._dispatch_dtypes.__init__", "torch.testing.all_types_and_complex_and", "warnings.warn", "<builtin>.set"], "torch.testing._core._dispatch_dtypes.__init__": [], "opinfo_helper.dtypes_dispatch_hint": ["collections.namedtuple", "<builtin>.len", "<builtin>.tuple", "<builtin>.set", "<builtin>.str", "functools.partial"], "opinfo_helper.is_dynamic_dtype_set": [], "opinfo_helper.str_format_dynamic_dtype": ["opinfo_helper.dtypes_dispatch_hint"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.ExecutionCounter.try_get_trigger_value": ["torch._C._jit_get_trigger_value"], "torch._C._jit_get_trigger_value": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.ExecutionCounter.__init__": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.ExecutionCounter.try_get_trigger_value"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.ExecutionCounter.elapsed_value": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.ExecutionCounter.try_get_trigger_value"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.CudaCodeGenCreated.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.CudaCodeGenExecuted.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.LLVMCodeGenCreated.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.LLVMCodeGenExecuted.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\te_utils.SimpleIREvalExecuted.__init__": ["<builtin>.super"], "build_amd": ["os.path.join", "argparse.ArgumentParser", "<builtin>.print", "sys.path.append", "<builtin>.open", "build_amd.is_hip_clang", "hipify.hipify_python.hipify", "os.path.realpath", "os.path.exists", "os.path.dirname"], "build_amd.is_hip_clang": ["os.getenv", "<builtin>.open"], "hipify.hipify_python.hipify": [], "context.with_native_function_with_differentiability_info": ["functools.wraps"], "context.with_native_function_with_differentiability_info.wrapper": ["tools.codegen.context.native_function_manager"], "gen_annotated_fn_args": ["gen_annotated_fn_args.main", "tools.codegen.context.with_native_function"], "gen_annotated_fn_args.gen_annotated": ["os.path.join", "tools.codegen.gen.FileManager", "gen_python_functions.should_generate_py_binding", "collections.defaultdict", "tools.codegen.gen.parse_native_yaml", "gen_annotated_fn_args.gen_annotated_args"], "gen_python_functions.should_generate_py_binding": ["<builtin>.str", "tools.codegen.api.cpp.name"], "gen_annotated_fn_args.gen_annotated_args": ["tools.codegen.api.python.argument_type_str", "tools.codegen.api.python.argument_type_size", "<builtin>.repr"], "gen_annotated_fn_args.gen_annotated.<lambda1>": [], "tools.codegen.context.with_native_function": [], "tools.codegen.api.python.argument_type_str": [], "tools.codegen.api.python.argument_type_size": [], "gen_annotated_fn_args.main": ["argparse.ArgumentParser", "gen_annotated_fn_args.gen_annotated"], "gen_autograd": ["gen_autograd.main"], "gen_autograd.gen_autograd": ["os.path.join", "gen_variable_factories.gen_variable_factories", "tools.codegen.gen.parse_native_yaml", "gen_trace_type.gen_trace_type", "<builtin>.filter", "gen_inplace_or_view_type.gen_inplace_or_view_type", "load_derivatives.load_derivatives", "tools.codegen.api.autograd.match_differentiability_info", "gen_autograd_functions.gen_autograd_functions_lib", "gen_variable_type.gen_variable_type", "<builtin>.list", "<builtin>.sorted"], "load_derivatives.load_derivatives": ["<builtin>.open", "<builtin>.zip", "load_derivatives.create_differentiability_info", "<builtin>.dict", "load_derivatives.create_op_names", "yaml.load", "tools.codegen.gen.parse_native_yaml", "<builtin>.str", "tools.codegen.api.autograd.DifferentiabilityInfo", "collections.defaultdict"], "gen_autograd.gen_autograd.<lambda1>": ["tools.codegen.api.cpp.name"], "tools.codegen.api.autograd.match_differentiability_info": [], "gen_variable_type.gen_variable_type": ["gen_inplace_or_view_type.use_derived", "tools.codegen.gen.FileManager"], "gen_inplace_or_view_type.gen_inplace_or_view_type": ["<builtin>.ord", "<builtin>.range", "gen_inplace_or_view_type.gen_inplace_or_view_type_shard", "tools.codegen.gen.FileManager", "<builtin>.enumerate", "tools.codegen.api.cpp.name", "<builtin>.sum"], "gen_trace_type.gen_trace_type": ["tools.codegen.gen.FileManager", "tools.codegen.gen.parse_native_yaml", "tools.codegen.api.cpp.name"], "gen_autograd_functions.gen_autograd_functions_lib": ["gen_autograd_functions.gen_autograd_functions"], "gen_variable_factories.gen_variable_factories": ["tools.codegen.gen.parse_native_yaml", "tools.codegen.gen.FileManager"], "gen_autograd.gen_autograd_python": ["gen_autograd_functions.gen_autograd_functions_python", "load_derivatives.load_derivatives", "gen_python_functions.gen", "os.path.join"], "gen_autograd_functions.gen_autograd_functions_python": ["gen_autograd_functions.gen_autograd_functions"], "gen_python_functions.gen": ["tools.codegen.gen.FileManager", "gen_python_functions.create_python_bindings", "<builtin>.filter", "gen_python_functions.load_signatures", "<builtin>.list", "tools.codegen.gen.parse_native_yaml"], "gen_autograd.main": ["tools.codegen.selective_build.selector.SelectiveBuilder.get_nop_selector", "argparse.ArgumentParser", "gen_autograd.gen_autograd"], "tools.codegen.selective_build.selector.SelectiveBuilder.get_nop_selector": [], "gen_autograd_functions": ["tools.codegen.api.types.OptionalCType", "tools.codegen.code_template.CodeTemplate", "tools.codegen.api.types.BaseCType"], "gen_autograd_functions.gen_autograd_functions": ["<builtin>.map", "tools.codegen.gen.FileManager", "<builtin>.filter", "<builtin>.list"], "gen_autograd_functions.gen_autograd_functions.<lambda1>": [], "gen_autograd_functions.gen_autograd_functions.<lambda2>": ["gen_autograd_functions.process_function"], "gen_autograd_functions.process_function": ["tools.codegen.api.autograd.uses_single_grad", "tools.codegen.api.autograd.uses_retain_variables", "<builtin>.len", "gen_autograd_functions.process_function.save_var", "gen_autograd_functions.process_function.emit_derivative"], "gen_autograd_functions.gen_autograd_functions.<lambda3>": ["gen_autograd_functions.process_function"], "gen_autograd_functions.gen_autograd_functions.<lambda4>": ["gen_autograd_functions.process_function"], "gen_autograd_functions.gen_autograd_functions.<lambda5>": ["gen_autograd_functions.process_function"], "gen_autograd_functions.gen_autograd_functions.<lambda6>": [], "gen_autograd_functions.process_function.save_var": ["tools.codegen.api.types.ListCType", "tools.codegen.api.types.MutRefCType", "tools.codegen.api.types.BaseCType", "tools.codegen.api.types.ArrayRefCType", "tools.codegen.api.types.OptionalCType"], "tools.codegen.api.autograd.uses_retain_variables": [], "tools.codegen.api.autograd.uses_single_grad": [], "gen_autograd_functions.process_function.emit_derivative": ["<builtin>.str", "<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance"], "gen_inplace_or_view_type": ["tools.codegen.code_template.CodeTemplate", "tools.codegen.context.with_native_function", "<builtin>.set", "context.with_native_function_with_differentiability_info"], "gen_inplace_or_view_type.is_tensor_type": [], "gen_inplace_or_view_type.is_tensor_list_type": [], "gen_inplace_or_view_type.unpacked_name": [], "gen_inplace_or_view_type.unpack_args": ["<builtin>.isinstance", "tools.codegen.api.cpp.argument", "gen_inplace_or_view_type.is_tensor_list_type", "gen_inplace_or_view_type.unpacked_name", "<builtin>.set", "tools.codegen.api.types.Binding", "<builtin>.enumerate", "<builtin>.RuntimeError"], "tools.codegen.api.cpp.argument": [], "gen_inplace_or_view_type.get_base_name": [], "gen_inplace_or_view_type.get_view_info": ["gen_inplace_or_view_type.get_base_name"], "gen_inplace_or_view_type.emit_view_call": ["tools.codegen.api.cpp.name"], "gen_inplace_or_view_type.emit_view_lambda": ["tools.codegen.api.types.OptionalCType", "tools.codegen.api.types.BaseCType", "gen_inplace_or_view_type.emit_view_call", "<builtin>.TypeError", "<builtin>.str", "tools.codegen.api.cpp.name"], "gen_inplace_or_view_type.emit_view_body": ["gen_inplace_or_view_type.emit_view_lambda", "gen_inplace_or_view_type.get_base_name", "<builtin>.isinstance", "gen_inplace_or_view_type.unpack_args", "gen_inplace_or_view_type.is_tensor_type", "gen_inplace_or_view_type.is_tensor_list_type", "<builtin>.RuntimeError", "<builtin>.TypeError", "gen_inplace_or_view_type.emit_view_body.get_creation_meta_in_mode", "<builtin>.len", "gen_inplace_or_view_type.get_view_info", "tools.codegen.api.autograd.gen_differentiable_outputs"], "tools.codegen.api.autograd.gen_differentiable_outputs": [], "gen_inplace_or_view_type.emit_view_body.get_creation_meta_in_mode": [], "gen_inplace_or_view_type.modifies_arguments": [], "gen_inplace_or_view_type.emit_inplace_or_view_body": ["tools.codegen.api.cpp.return_names", "gen_trace_type.get_return_value", "tools.codegen.api.types.CppSignatureGroup.from_native_function", "gen_inplace_or_view_type.emit_view_body", "tools.codegen.api.types.DispatcherSignature.from_schema", "gen_trace_type.tie_return_values", "gen_inplace_or_view_type.get_view_info", "gen_inplace_or_view_type.modifies_arguments"], "tools.codegen.api.types.DispatcherSignature.from_schema": [], "gen_trace_type.tie_return_values": ["<builtin>.len", "tools.codegen.api.cpp.return_names"], "gen_trace_type.get_return_value": ["tools.codegen.api.cpp.return_names", "<builtin>.len"], "gen_inplace_or_view_type.gen_formals": ["tools.codegen.api.cpp.argument_type"], "tools.codegen.api.cpp.argument_type": [], "gen_inplace_or_view_type.inplace_or_view_method_definition": ["gen_inplace_or_view_type.gen_formals", "gen_trace_type.type_wrapper_name", "gen_inplace_or_view_type.emit_inplace_or_view_body", "tools.codegen.model.is_foreach_op", "<builtin>.str", "tools.codegen.api.cpp.returns_type", "gen_inplace_or_view_type.get_view_info", "gen_inplace_or_view_type.modifies_arguments"], "tools.codegen.model.is_foreach_op": [], "gen_trace_type.type_wrapper_name": ["tools.codegen.api.cpp.name"], "gen_inplace_or_view_type.inplace_or_view_method_registration": ["gen_trace_type.type_wrapper_name", "tools.codegen.model.is_foreach_op", "<builtin>.str", "gen_inplace_or_view_type.get_view_info", "gen_inplace_or_view_type.modifies_arguments"], "gen_inplace_or_view_type.use_derived": ["tools.codegen.api.autograd.dispatch_strategy", "tools.codegen.api.cpp.name"], "tools.codegen.api.autograd.dispatch_strategy": [], "gen_inplace_or_view_type.gen_inplace_or_view_type_shard": ["<builtin>.list", "<builtin>.filter"], "gen_inplace_or_view_type.gen_inplace_or_view_type_shard.<lambda1>": [], "gen_python_functions": ["tools.codegen.context.with_native_function", "<builtin>.map", "<builtin>.list", "tools.codegen.code_template.CodeTemplate"], "gen_python_functions.<lambda1>": ["re.compile"], "gen_python_functions.get_pycname": [], "gen_python_functions.is_noarg": ["<builtin>.len"], "gen_python_functions.is_py_variable_method": [], "gen_python_functions.is_py_torch_function": [], "gen_python_functions.is_py_nn_function": [], "gen_python_functions.is_py_fft_function": [], "gen_python_functions.is_py_linalg_function": [], "gen_python_functions.is_py_special_function": [], "gen_python_functions.load_signatures": ["gen_python_functions.load_deprecated_signatures", "tools.codegen.context.with_native_function", "<builtin>.map", "<builtin>.list"], "gen_python_functions.create_python_bindings": ["gen_python_functions.is_py_nn_function", "collections.defaultdict", "gen_python_functions.is_py_linalg_function", "gen_python_functions.is_py_torch_function", "gen_python_functions.is_py_special_function", "gen_python_functions.method_impl", "gen_python_functions.method_def", "<builtin>.sorted", "gen_python_functions.is_py_variable_method", "gen_python_functions.forward_decls", "gen_python_functions.is_py_fft_function"], "gen_python_functions.create_python_bindings.<lambda1>": ["<builtin>.str"], "gen_python_functions.method_impl": ["<builtin>.len", "<builtin>.map", "<builtin>.max", "gen_trace_type.should_trace", "<builtin>.enumerate", "tools.codegen.gen.cpp_string", "gen_python_functions.emit_dispatch_case", "gen_python_functions.gen_has_torch_function_check", "gen_python_functions.emit_namedtuple_typedefs", "gen_python_functions.get_pycname", "gen_python_functions.is_noarg", "gen_python_functions.group_overloads", "<builtin>.all", "<builtin>.str"], "gen_python_functions.method_def": ["gen_python_functions.get_pycname", "gen_python_functions.is_noarg"], "gen_python_functions.forward_decls": ["gen_python_functions.get_pycname", "gen_python_functions.is_noarg"], "gen_python_functions.create_python_bindings.<lambda2>": [], "gen_python_functions.load_signatures.gen_signature_pairs": ["tools.codegen.api.python.PythonSignatureNativeFunctionPair", "tools.codegen.api.python.signature"], "tools.codegen.api.python.signature": [], "tools.codegen.api.python.PythonSignatureNativeFunctionPair": [], "gen_python_functions.load_deprecated_signatures": ["<builtin>.open", "tools.codegen.utils.split_name_params", "tools.codegen.api.python.PythonArgument", "tools.codegen.context.with_native_function", "collections.defaultdict", "<builtin>.tuple", "yaml.load", "tools.codegen.api.python.PythonSignatureDeprecated", "tools.codegen.api.python.PythonSignatureNativeFunctionPair", "gen_python_functions.load_deprecated_signatures.signature_original", "itertools.chain", "gen_python_functions.load_deprecated_signatures.signature_deprecated"], "gen_python_functions.load_deprecated_signatures.signature_original": ["tools.codegen.api.python.argument_type_str", "<builtin>.isinstance", "tools.codegen.api.types.CppSignatureGroup.from_native_function", "<builtin>.str"], "gen_python_functions.load_deprecated_signatures.signature_deprecated": [], "tools.codegen.utils.split_name_params": [], "tools.codegen.api.python.PythonArgument": [], "tools.codegen.api.python.PythonSignatureDeprecated": [], "gen_python_functions.gen_namedtuple_typename_key": ["tools.codegen.api.cpp.name", "tools.codegen.api.python.namedtuple_fieldnames"], "tools.codegen.api.python.namedtuple_fieldnames": [], "gen_python_functions.emit_namedtuple_typedefs": ["<builtin>.len", "gen_python_functions.gen_namedtuple_typename_key", "tools.codegen.api.cpp.name", "tools.codegen.api.python.namedtuple_fieldnames"], "gen_trace_type.should_trace": ["<builtin>.str", "<builtin>.any"], "gen_python_functions.group_overloads": ["gen_python_functions.sort_overloads", "<builtin>.RuntimeError", "tools.codegen.api.python.PythonSignatureGroup", "<builtin>.str"], "tools.codegen.gen.cpp_string": [], "gen_python_functions.emit_dispatch_case": ["gen_python_functions.emit_single_dispatch"], "gen_python_functions.method_impl.<lambda1>": [], "gen_python_functions.gen_has_torch_function_check": [], "gen_python_functions.emit_single_dispatch": ["tools.codegen.context.with_native_function", "gen_python_functions.emit_single_dispatch.go"], "tools.codegen.api.python.PythonSignatureGroup": [], "gen_python_functions.sort_overloads": ["<builtin>.map", "<builtin>.enumerate", "collections.defaultdict", "gen_python_functions.sort_overloads.is_smaller", "<builtin>.range", "<builtin>.filter", "<builtin>.len", "<builtin>.sorted", "<builtin>.list"], "gen_python_functions.sort_overloads.is_arg_smaller": ["<builtin>.str"], "gen_python_functions.sort_overloads.is_smaller": ["<builtin>.all", "<builtin>.zip", "gen_python_functions.sort_overloads.is_arg_smaller", "<builtin>.len", "<builtin>.str"], "gen_python_functions.sort_overloads.<lambda1>": [], "gen_python_functions.sort_overloads.<lambda2>": [], "gen_python_functions.sort_overloads.<lambda3>": [], "gen_python_functions.emit_single_dispatch.go": ["tools.codegen.api.python.dispatch_lambda_args", "<builtin>.map", "tools.codegen.api.python.dispatch_lambda_exprs", "tools.codegen.api.cpp.name", "tools.codegen.api.python.arg_parser_output_exprs", "tools.codegen.api.python.cpp_dispatch_target", "tools.codegen.api.python.cpp_dispatch_exprs", "gen_python_functions.gen_namedtuple_typename_key", "tools.codegen.api.python.has_tensor_options", "tools.codegen.api.python.dispatch_lambda_return_str"], "gen_python_functions.emit_single_dispatch.go.<lambda1>": [], "tools.codegen.api.python.dispatch_lambda_args": [], "tools.codegen.api.python.dispatch_lambda_return_str": [], "tools.codegen.api.python.cpp_dispatch_target": [], "tools.codegen.api.python.cpp_dispatch_exprs": [], "tools.codegen.api.python.arg_parser_output_exprs": [], "tools.codegen.api.python.dispatch_lambda_exprs": [], "tools.codegen.api.python.has_tensor_options": [], "gen_trace_type": ["tools.codegen.code_template.CodeTemplate", "tools.codegen.context.with_native_function", "<builtin>.set"], "gen_trace_type.format_trace_op_name": ["<builtin>.str", "tools.codegen.api.cpp.name"], "gen_trace_type.format_trace_inputs": ["itertools.chain", "gen_trace_type.format_trace_inputs.dispatch_trace_input", "itertools.chain.from_iterable", "<builtin>.list", "<builtin>.any"], "gen_trace_type.format_trace_inputs.dispatch_trace_input": ["<builtin>.isinstance", "<builtin>.str"], "gen_trace_type.format_prerecord_trace": ["gen_trace_type.should_trace", "gen_trace_type.format_trace_inputs", "gen_trace_type.format_trace_op_name", "tools.codegen.api.cpp.name"], "gen_trace_type.format_postrecord_trace": ["tools.codegen.api.cpp.return_names", "gen_trace_type.should_trace"], "gen_trace_type.declare_returned_variables": ["<builtin>.len", "<builtin>.zip", "<builtin>.map", "tools.codegen.api.cpp.return_names"], "gen_trace_type.emit_trace_body": ["gen_trace_type.tie_return_values", "gen_trace_type.declare_returned_variables", "gen_trace_type.format_prerecord_trace", "gen_trace_type.format_postrecord_trace", "tools.codegen.api.types.CppSignatureGroup.from_native_function", "gen_trace_type.get_return_value", "tools.codegen.api.types.DispatcherSignature.from_schema"], "gen_trace_type.method_definition": ["gen_trace_type.type_wrapper_name", "tools.codegen.api.cpp.returns_type", "gen_trace_type.emit_trace_body", "tools.codegen.api.cpp.argument_type", "tools.codegen.api.cpp.name"], "gen_trace_type.method_registration": ["gen_trace_type.type_wrapper_name", "tools.codegen.api.cpp.name"], "gen_trace_type.gen_trace_type_func": ["gen_trace_type.method_definition", "gen_trace_type.method_registration"], "gen_trace_type.gen_trace_type.<lambda1>": ["tools.codegen.api.cpp.name"], "gen_variable_factories": ["re.compile", "tools.codegen.context.with_native_function"], "gen_variable_factories.fully_qualified_type": ["gen_variable_factories.fully_qualified_type.maybe_optional_type"], "gen_variable_factories.fully_qualified_type.maybe_optional_type": [], "gen_variable_factories.gen_variable_factories.<lambda1>": [], "gen_variable_factories.process_function": ["tools.codegen.api.cpp.name", "gen_variable_factories.fully_qualified_type", "tools.codegen.api.python.has_tensor_options", "tools.codegen.api.types.CppSignatureGroup.from_native_function", "<builtin>.isinstance"], "gen_variable_type": ["context.with_native_function_with_differentiability_info", "tools.codegen.context.with_native_function", "tools.codegen.code_template.CodeTemplate"], "gen_variable_type.gen_variable_type.<lambda1>": [], "gen_variable_type.gen_variable_type.<lambda2>": ["tools.codegen.api.cpp.name"], "gen_variable_type.gen_wrapper_registration": ["gen_trace_type.type_wrapper_name", "gen_inplace_or_view_type.WRAPPER_REGISTRATION.substitute"], "gen_inplace_or_view_type.WRAPPER_REGISTRATION.substitute": [], "gen_variable_type.gen_variable_type_func": ["gen_variable_type.emit_body", "tools.codegen.context.native_function_manager", "tools.codegen.api.cpp.name", "gen_inplace_or_view_type.gen_formals", "tools.codegen.api.cpp.returns_type", "gen_trace_type.type_wrapper_name", "gen_inplace_or_view_type.METHOD_DEFINITION.substitute", "gen_variable_type.gen_wrapper_registration"], "gen_variable_type.emit_body": ["gen_variable_type.emit_body.emit_save_outputs", "<builtin>.RuntimeError", "tools.codegen.context.with_native_function", "gen_trace_type.declare_returned_variables", "tools.codegen.api.autograd.dispatch_strategy", "gen_variable_type.emit_body.emit_any_requires_grad", "gen_inplace_or_view_type.get_base_name", "gen_trace_type.get_return_value", "gen_inplace_or_view_type.get_view_info", "gen_variable_type.emit_body.emit_check_inplace", "gen_variable_type.emit_body.emit_any_has_forward_grad", "gen_variable_type.emit_body.emit_forbid_fw_derivatives", "gen_variable_type.emit_body.emit_original_self_definition", "gen_variable_type.emit_body.find_args_with_derivatives", "gen_variable_type.emit_body.emit_history", "tools.codegen.api.autograd.gen_differentiable_outputs", "gen_inplace_or_view_type.unpack_args", "gen_variable_type.emit_body.emit_fw_derivatives", "<builtin>.len", "tools.codegen.api.cpp.name", "gen_variable_type.emit_body.emit_call", "gen_variable_type.emit_body.emit_check_if_in_complex_autograd_allowlist", "gen_variable_type.emit_body.gen_differentiable_inputs", "gen_variable_type.emit_body.setup_derivative"], "gen_inplace_or_view_type.METHOD_DEFINITION.substitute": [], "gen_variable_type.emit_body.gen_differentiable_input": ["tools.codegen.api.autograd.DifferentiableInput", "tools.codegen.api.cpp.argument_type", "tools.codegen.api.autograd.is_differentiable", "<builtin>.isinstance"], "tools.codegen.api.autograd.is_differentiable": [], "tools.codegen.api.autograd.DifferentiableInput": [], "gen_variable_type.emit_body.gen_differentiable_inputs": ["<builtin>.list", "tools.codegen.utils.mapMaybe"], "gen_variable_type.emit_body.find_args_with_derivatives": ["<builtin>.set", "<builtin>.len", "<builtin>.RuntimeError"], "gen_variable_type.emit_body.emit_save_inputs": ["gen_inplace_or_view_type.is_tensor_list_type", "gen_variable_type.emit_body.save_variables", "<builtin>.any"], "gen_variable_type.emit_body.emit_save_inputs.guard_for": ["<builtin>.enumerate", "<builtin>.len", "tools.codegen.api.types.BaseCType"], "gen_variable_type.emit_body.save_variables": ["tools.codegen.api.types.OptionalCType", "tools.codegen.api.types.ListCType", "gen_variable_type.emit_body.<lambda1>", "<builtin>.isinstance", "<builtin>.str", "tools.codegen.api.types.MutRefCType", "tools.codegen.api.types.BaseCType"], "gen_variable_type.emit_body.setup_derivative": ["gen_variable_type.emit_body.emit_check_no_requires_grad", "tools.codegen.api.cpp.name", "gen_variable_type.emit_body.emit_save_inputs"], "gen_variable_type.emit_body.emit_check_no_requires_grad": [], "gen_variable_type.emit_body.emit_check_if_in_complex_autograd_allowlist": [], "gen_variable_type.emit_body.emit_original_self_definition": ["gen_variable_type.emit_body.get_any_has_forward_grad_name"], "gen_variable_type.emit_body.get_any_has_forward_grad_name": [], "gen_variable_type.emit_body.<lambda1>": [], "gen_variable_type.emit_body.emit_dispatch_call": ["tools.codegen.api.types.DispatcherSignature.from_schema", "tools.codegen.api.cpp.name", "<builtin>.list"], "gen_variable_type.emit_body.wrap_output": ["gen_inplace_or_view_type.ASSIGN_RETURN_VALUE.substitute", "gen_trace_type.tie_return_values", "<builtin>.any"], "gen_inplace_or_view_type.ASSIGN_RETURN_VALUE.substitute": [], "gen_variable_type.emit_body.check_tensorimpl_and_storage": ["gen_inplace_or_view_type.ALL_VIEW_FUNCTIONS.get", "tools.codegen.api.types.OptionalCType", "<builtin>.enumerate", "tools.codegen.api.cpp.name", "tools.codegen.api.types.ListCType", "tools.codegen.api.cpp.return_type", "gen_trace_type.type_wrapper_name", "gen_inplace_or_view_type.unpacked_name", "<builtin>.AssertionError", "tools.codegen.api.cpp.return_names", "<builtin>.zip", "tools.codegen.api.types.BaseCType"], "gen_inplace_or_view_type.ALL_VIEW_FUNCTIONS.get": [], "gen_variable_type.emit_body.emit_call": ["gen_variable_type.emit_body.check_tensorimpl_and_storage", "gen_inplace_or_view_type.get_view_info", "gen_variable_type.emit_body.wrap_output", "gen_inplace_or_view_type.modifies_arguments", "gen_variable_type.emit_body.emit_dispatch_call"], "gen_variable_type.emit_body.emit_history": ["gen_inplace_or_view_type.modifies_arguments", "tools.codegen.code_template.CodeTemplate"], "gen_variable_type.emit_body.emit_save_outputs": ["<builtin>.len", "gen_variable_type.emit_body.save_variables"], "gen_variable_type.emit_body.emit_any_requires_grad": ["<builtin>.len"], "gen_variable_type.emit_body.emit_any_has_forward_grad": ["<builtin>.RuntimeError", "gen_inplace_or_view_type.is_tensor_list_type", "<builtin>.len", "gen_variable_type.emit_body.get_any_has_forward_grad_name"], "gen_variable_type.emit_body.emit_check_inplace": [], "gen_variable_type.emit_body.emit_fw_derivatives": ["<builtin>.RuntimeError", "gen_variable_type.emit_body.get_any_has_forward_grad_name", "<builtin>.isinstance"], "gen_variable_type.emit_body.emit_forbid_fw_derivatives": ["gen_variable_type.emit_body.emit_forbid_fw_derivatives.get_msg", "<builtin>.len", "<builtin>.list", "tools.codegen.utils.mapMaybe", "<builtin>.RuntimeError", "gen_inplace_or_view_type.is_tensor_list_type", "gen_inplace_or_view_type.is_tensor_type"], "gen_variable_type.emit_body.emit_forbid_fw_derivatives.get_msg": [], "load_derivatives": ["tools.codegen.context.with_native_function"], "load_derivatives.create_differentiability_info": ["<builtin>.RuntimeError", "tools.codegen.context.with_native_function", "load_derivatives.create_differentiability_info.canonical_function", "load_derivatives.create_differentiability_info.set_up_derivatives", "<builtin>.len", "load_derivatives.dedup_vars", "<builtin>.str", "load_derivatives.cpp_arguments", "<builtin>.any", "tools.codegen.api.cpp.name", "tools.codegen.api.autograd.DifferentiabilityInfo", "tools.codegen.utils.split_name_params", "<builtin>.isinstance"], "load_derivatives.create_op_names": ["<builtin>.list", "<builtin>.set", "<builtin>.map", "collections.Counter"], "tools.codegen.api.autograd.DifferentiabilityInfo": [], "load_derivatives.cpp_arguments": ["tools.codegen.api.types.CppSignatureGroup.from_native_function"], "load_derivatives.create_derivative": ["<builtin>.zip", "load_derivatives.saved_variables", "<builtin>.RuntimeError", "load_derivatives.used_gradient_indices", "<builtin>.tuple", "tools.codegen.api.cpp.return_names", "<builtin>.len", "tools.codegen.api.types.NamedCType", "tools.codegen.api.cpp.return_type", "load_derivatives.cpp_arguments", "tools.codegen.api.cpp.name", "tools.codegen.api.autograd.Derivative"], "load_derivatives.saved_variables": ["tools.codegen.api.types.OptionalCType", "<builtin>.tuple", "re.search", "tools.codegen.api.types.BaseCType", "re.sub", "tools.codegen.api.autograd.SavedAttribute", "tools.codegen.utils.IDENT_REGEX.format", "<builtin>.isinstance"], "load_derivatives.used_gradient_indices": ["<builtin>.int", "re.findall"], "tools.codegen.api.autograd.Derivative": [], "load_derivatives.create_forward_derivative": ["<builtin>.len", "tools.codegen.api.autograd.ForwardDerivative", "re.findall", "<builtin>.int"], "tools.codegen.api.autograd.ForwardDerivative": [], "load_derivatives.postprocess_forward_derivatives": ["<builtin>.RuntimeError", "<builtin>.tuple", "<builtin>.len", "re.sub", "tools.codegen.utils.IDENT_REGEX.format", "tools.codegen.api.autograd.ForwardDerivative", "load_derivatives.postprocess_forward_derivatives.find_required_inputs"], "load_derivatives.postprocess_forward_derivatives.find_required_inputs": ["<builtin>.RuntimeError", "<builtin>.tuple", "re.search", "<builtin>.set", "tools.codegen.utils.IDENT_REGEX.format"], "load_derivatives.postprocess_forward_derivatives.repl": [], "load_derivatives.is_forward_derivative_definition": ["<builtin>.len"], "load_derivatives.create_differentiability_info.canonical_function": ["tools.codegen.api.cpp.name"], "load_derivatives.create_differentiability_info.split_names": ["<builtin>.tuple"], "load_derivatives.create_differentiability_info.check_grad_usage": ["<builtin>.RuntimeError", "load_derivatives.used_gradient_indices", "re.search", "<builtin>.len", "<builtin>.set", "re.findall", "tools.codegen.utils.IDENT_REGEX.format"], "load_derivatives.create_differentiability_info.set_up_derivatives": ["<builtin>.RuntimeError", "load_derivatives.create_differentiability_info.check_grad_usage", "load_derivatives.create_differentiability_info.split_names", "load_derivatives.is_forward_derivative_definition", "load_derivatives.create_forward_derivative", "<builtin>.sorted", "<builtin>.set", "load_derivatives.cpp_arguments", "load_derivatives.postprocess_forward_derivatives", "load_derivatives.create_derivative"], "load_derivatives.dedup_vars": ["<builtin>.set", "<builtin>.isinstance"], "load_derivatives.saved_variables.stride_expr": [], "load_derivatives.saved_variables.<list1>.<dict1>.<lambda1>": [], "load_derivatives.saved_variables.<lambda1>": ["tools.codegen.api.types.BaseCType", "tools.codegen.api.types.NamedCType", "tools.codegen.api.types.VectorCType"], "load_derivatives.saved_variables.<list1>.<dict2>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict3>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict3>.<lambda2>": [], "load_derivatives.saved_variables.<list1>.<dict3>.<lambda3>": [], "load_derivatives.saved_variables.<list1>.<dict4>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict4>.<lambda2>": [], "load_derivatives.saved_variables.<lambda2>": ["tools.codegen.api.types.BaseCType", "tools.codegen.api.types.NamedCType"], "load_derivatives.saved_variables.<list1>.<dict5>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict6>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict7>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict8>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict9>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict10>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict11>.<lambda1>": [], "load_derivatives.saved_variables.<list1>.<dict12>.<lambda1>": [], "load_derivatives.saved_variables.repl": ["<builtin>.callable", "tools.codegen.api.autograd.SavedAttribute"], "tools.codegen.api.autograd.SavedAttribute": [], "load_derivatives.create_op_name": [], "collections.Counter": [], "code_template": ["code_template.CodeTemplate.substitute", "code_template.CodeTemplate.__init__", "<builtin>.print"], "code_template.CodeTemplate": ["re.compile"], "code_template.CodeTemplate.from_file": ["<builtin>.open", "code_template.CodeTemplate.__init__"], "code_template.CodeTemplate.__init__": [], "code_template.CodeTemplate.substitute": [], "code_template.CodeTemplate.substitute.lookup": [], "code_template.CodeTemplate.substitute.indent_lines": ["<builtin>.str"], "code_template.CodeTemplate.substitute.replace": ["code_template.CodeTemplate.substitute.lookup", "<builtin>.isinstance", "<builtin>.len", "code_template.CodeTemplate.substitute.indent_lines", "<builtin>.str"], "context.native_function_manager": ["tools.codegen.local.parametrize", "tools.codegen.utils.context", "<builtin>.isinstance"], "context.native_function_manager.<lambda1>": [], "tools.codegen.utils.context": [], "tools.codegen.local.parametrize": [], "context.with_native_function": ["functools.wraps"], "context.with_native_function.wrapper": ["context.native_function_manager"], "context.method_with_native_function": ["functools.wraps"], "context.method_with_native_function.wrapper": ["context.native_function_manager"], "context.with_native_function_and_index": ["functools.wraps"], "context.with_native_function_and_index.wrapper": ["context.native_function_manager"], "context.with_native_function_and_indices": ["functools.wraps"], "context.with_native_function_and_indices.wrapper": ["context.native_function_manager"], "gen_backend_stubs": ["collections.namedtuple", "gen_backend_stubs.main"], "gen_backend_stubs.parse_backend_yaml": ["<builtin>.open", "gen_backend_stubs.parse_backend_yaml.create_backend_index", "tools.codegen.model.DispatchKey.parse", "<builtin>.len", "<builtin>.type", "tools.codegen.utils.concatMap", "<builtin>.isinstance", "yaml.load", "tools.codegen.utils.context"], "gen_backend_stubs.parse_backend_yaml.<lambda1>": ["<builtin>.list", "<builtin>.isinstance"], "gen_backend_stubs.parse_backend_yaml.create_backend_index": ["tools.codegen.api.dispatcher.name", "tools.codegen.model.BackendIndex", "tools.codegen.model.BackendMetadata", "tools.codegen.model.OperatorName.parse"], "tools.codegen.model.OperatorName.parse": [], "tools.codegen.model.BackendMetadata": [], "tools.codegen.model.BackendIndex": [], "gen_backend_stubs.parse_backend_yaml.<lambda2>": [], "tools.codegen.model.DispatchKey.parse": [], "gen_backend_stubs.parse_backend_yaml.<lambda3>": [], "gen_backend_stubs.error_on_missing_kernels": ["<builtin>.list", "<builtin>.open", "collections.defaultdict", "tools.codegen.api.dispatcher.name", "gen_backend_stubs.error_on_missing_kernels.create_decl", "<builtin>.len", "collections.Counter", "<builtin>.AssertionError", "re.findall"], "gen_backend_stubs.error_on_missing_kernels.create_decl": ["tools.codegen.api.types.DispatcherSignature.from_schema", "tools.codegen.context.native_function_manager"], "gen_backend_stubs.main": ["argparse.ArgumentParser", "gen_backend_stubs.run"], "gen_backend_stubs.run": ["tools.codegen.gen.parse_native_yaml", "gen_backend_stubs.parse_backend_yaml", "pathlib.Path", "tools.codegen.gen.get_grouped_native_functions", "tools.codegen.selective_build.selector.SelectiveBuilder.get_nop_selector", "gen_backend_stubs.error_on_missing_kernels", "gen_backend_stubs.run.make_file_manager", "os.path.join"], "gen_backend_stubs.run.make_file_manager": ["tools.codegen.gen.FileManager"], "tools.codegen.gen.get_grouped_native_functions": [], "gen_backend_stubs.run.<lambda1>": [], "gen_backend_stubs.run.<lambda2>": [], "gen": ["gen.main", "tools.codegen.context.with_native_function", "tools.codegen.context.with_native_function_and_indices", "typing.TypeVar", "collections.namedtuple", "functools.lru_cache", "sys.path.insert"], "gen.LineLoader.construct_mapping": ["<builtin>.super"], "gen.parse_native_yaml": ["<builtin>.open", "yaml.load", "tools.codegen.model.BackendIndex.grow_index", "tools.codegen.utils.context", "tools.codegen.model.NativeFunction.from_yaml", "tools.codegen.model.BackendIndex", "tools.codegen.model.Location", "collections.defaultdict", "<builtin>.isinstance", "gen.error_check_native_functions"], "tools.codegen.model.Location": [], "gen.parse_native_yaml.<lambda1>": [], "tools.codegen.model.NativeFunction.from_yaml": [], "tools.codegen.model.BackendIndex.grow_index": [], "gen.error_check_native_functions": [], "gen.parse_native_yaml.<lambda2>": ["tools.codegen.model.BackendIndex"], "gen.cpp_string": [], "gen.static_dispatch_keys": [], "gen.static_dispatch_extra_headers": ["gen.static_dispatch_keys"], "gen.static_dispatch": ["tools.codegen.api.types.CppSignatureGroup.from_native_function", "tools.codegen.model.DispatchKey.CompositeImplicitAutograd.lower", "tools.codegen.model.DispatchKey.CompositeExplicitAutograd.lower", "tools.codegen.api.translate.translate"], "tools.codegen.model.DispatchKey.CompositeExplicitAutograd.lower": [], "tools.codegen.model.DispatchKey.CompositeImplicitAutograd.lower": [], "gen.RegisterSchema": ["tools.codegen.context.method_with_native_function"], "gen.RegisterSchema.__call__": ["gen.cpp_string", "<builtin>.str"], "gen.ComputeOperators": ["tools.codegen.context.method_with_native_function"], "gen.ComputeOperators.__call__": ["tools.codegen.model.assert_never", "gen.cpp_string", "tools.codegen.api.types.DispatcherSignature.from_schema", "<builtin>.str"], "gen.ComputeFunction": ["tools.codegen.context.method_with_native_function"], "gen.ComputeFunction.__call__": ["tools.codegen.api.types.CppSignatureGroup.from_native_function", "gen.ComputeFunction.__call__.generate_defn"], "gen.ComputeFunction.__call__.generate_defn": ["tools.codegen.api.types.DispatcherSignature.from_schema", "gen.static_dispatch", "tools.codegen.api.translate.translate"], "gen.ComputeTensorMethod": ["tools.codegen.context.method_with_native_function"], "gen.ComputeTensorMethod.__call__": ["tools.codegen.api.types.CppSignatureGroup.from_native_function", "tools.codegen.model.assert_never", "gen.ComputeTensorMethod.__call__.generate_defn"], "gen.ComputeTensorMethod.__call__.generate_defn": ["tools.codegen.api.types.DispatcherSignature.from_schema", "gen.static_dispatch", "tools.codegen.api.translate.translate"], "gen.ComputeRedispatchFunction": ["tools.codegen.context.method_with_native_function"], "gen.ComputeRedispatchFunction.__call__": ["tools.codegen.api.types.CppSignatureGroup.from_native_function", "gen.ComputeRedispatchFunction.__call__.generate_defn"], "gen.ComputeRedispatchFunction.__call__.generate_defn": ["tools.codegen.api.types.DispatcherSignature.from_schema", "tools.codegen.api.translate.translate"], "gen.compute_aten_op": [], "gen.compute_meta_function_declaration": ["tools.codegen.api.meta.name", "tools.codegen.context.native_function_manager", "tools.codegen.api.structured.meta_arguments"], "gen.ComputeBackendSelect": ["tools.codegen.context.method_with_native_function"], "gen.ComputeBackendSelect.__call__": ["<builtin>.any", "tools.codegen.api.types.NativeSignature", "<builtin>.str", "<builtin>.isinstance", "tools.codegen.model.assert_never", "tools.codegen.api.types.DispatcherSignature.from_schema", "tools.codegen.api.native.name"], "gen.format_yaml": ["yaml.dump", "tools.codegen.utils.YamlDumper.add_representer"], "gen.format_yaml.<lambda1>": [], "gen.format_yaml.dict_representer": [], "tools.codegen.utils.YamlDumper.add_representer": [], "gen.pythonify_default": ["<builtin>.int", "<builtin>.float"], "gen.dynamic_type": ["<builtin>.isinstance", "gen.dynamic_type", "tools.codegen.api.cpp.argumenttype_type", "<builtin>.str"], "gen.compute_method_of_yaml": [], "gen.compute_returns_yaml": ["<builtin>.enumerate", "<builtin>.zip", "tools.codegen.api.cpp.return_names", "tools.codegen.api.cpp.return_type"], "gen.compute_cpp_argument_yaml": ["<builtin>.isinstance", "gen.compute_argument_yaml", "<builtin>.AssertionError"], "gen.compute_argument_yaml": ["tools.codegen.api.cpp.default_expr", "tools.codegen.api.cpp.argument_type", "gen.pythonify_default", "<builtin>.str"], "gen.compute_declaration_yaml": ["collections.OrderedDict", "tools.codegen.api.cpp.name", "<builtin>.list", "gen.compute_cpp_argument_yaml", "<builtin>.any", "gen.compute_method_of_yaml", "tools.codegen.api.types.CppSignatureGroup.from_native_function", "<builtin>.set", "gen.compute_returns_yaml", "tools.codegen.api.cpp.returns_type", "<builtin>.str", "<builtin>.isinstance", "tools.codegen.api.cpp.argument", "gen.compute_argument_yaml"], "gen.has_autogenerated_composite_kernel": [], "tools.codegen.context.with_native_function_and_indices": [], "gen.compute_registration_declarations": ["tools.codegen.api.dispatcher.returns_type", "tools.codegen.api.dispatcher.arguments", "json.dumps", "gen.has_autogenerated_composite_kernel", "tools.codegen.api.dispatcher.name", "<builtin>.str"], "gen._read_template": ["tools.codegen.code_template.CodeTemplate.from_file"], "gen.string_stable_hash": ["hashlib.sha1"], "hashlib.sha1": [], "gen.FileManager.__init__": ["<builtin>.set"], "gen.FileManager._write_if_changed": ["<builtin>.open"], "gen.FileManager.write_with_template": ["os.path.join", "gen.FileManager._write_if_changed", "gen._read_template", "<builtin>.isinstance", "os.path.basename", "tools.codegen.model.assert_never"], "gen.FileManager.write": ["gen.FileManager.write_with_template"], "gen.FileManager.write_sharded": ["gen.main.key_func", "gen.string_stable_hash", "<builtin>.len", "gen.FileManager.write_sharded.merge_env", "<builtin>.range", "<builtin>.isinstance", "gen.FileManager.write_with_template"], "gen.FileManager.write_sharded.merge_env": [], "gen.main.key_func": [], "gen.FileManager.write_sharded.<lambda1>": [], "gen.FileManager.write_outputs": ["gen.FileManager._write_if_changed", "<builtin>.sorted"], "gen.get_custom_build_selector": ["<builtin>.set", "tools.codegen.selective_build.selector.SelectiveBuilder.get_nop_selector", "tools.codegen.selective_build.selector.SelectiveBuilder.from_yaml_path", "tools.codegen.selective_build.selector.SelectiveBuilder.from_legacy_op_registration_allow_list"], "tools.codegen.selective_build.selector.SelectiveBuilder.from_legacy_op_registration_allow_list": [], "tools.codegen.selective_build.selector.SelectiveBuilder.from_yaml_path": [], "gen.get_grouped_native_functions": ["tools.codegen.utils.concatMap", "<builtin>.list", "collections.defaultdict"], "gen.get_grouped_native_functions.flatten_pre_group": ["tools.codegen.model.NativeFunctionsGroup.from_dict", "<builtin>.list"], "tools.codegen.model.NativeFunctionsGroup.from_dict": [], "gen.main": ["gen.FileManager.write", "os.path.join", "tools.codegen.model.is_cuda_dispatch_key", "gen.get_grouped_native_functions", "argparse.ArgumentParser", "gen.main.make_file_manager", "tools.codegen.selective_build.selector.SelectiveBuilder.get_nop_selector", "gen.static_dispatch_keys", "pathlib.Path", "gen.parse_native_yaml", "tools.codegen.model.DispatchKey.parse", "gen.FileManager.write_sharded", "gen.FileManager.write_outputs", "<builtin>.str", "<builtin>.isinstance", "gen.get_custom_build_selector", "tools.codegen.model.is_generic_dispatch_key"], "gen.main.make_file_manager": ["gen.FileManager.__init__"], "tools.codegen.model.is_generic_dispatch_key": [], "gen.main.<lambda1>": ["tools.codegen.dest.RegisterDispatchKey", "tools.codegen.utils.concatMap", "tools.codegen.model.is_cuda_dispatch_key", "<builtin>.list"], "tools.codegen.dest.RegisterDispatchKey": [], "gen.main.<lambda2>": ["<builtin>.str"], "gen.main.<lambda3>": ["tools.codegen.dest.RegisterDispatchKey", "tools.codegen.utils.concatMap", "<builtin>.list"], "gen.main.<lambda4>": ["tools.codegen.utils.mapMaybe", "<builtin>.list"], "gen.main.<lambda5>": ["tools.codegen.utils.mapMaybe", "<builtin>.list"], "gen.main.<lambda6>": ["tools.codegen.utils.mapMaybe", "<builtin>.list"], "gen.main.<lambda7>": [], "gen.main.<lambda8>": ["tools.codegen.utils.mapMaybe", "<builtin>.list"], "gen.main.<lambda9>": ["tools.codegen.utils.mapMaybe", "<builtin>.list", "gen.static_dispatch_extra_headers"], "gen.main.<lambda10>": [], "gen.main.<lambda11>": ["tools.codegen.utils.mapMaybe", "<builtin>.list", "gen.static_dispatch_extra_headers"], "gen.main.<lambda12>": [], "gen.main.<lambda13>": [], "gen.main.<lambda14>": ["tools.codegen.utils.mapMaybe", "<builtin>.list"], "gen.main.<lambda15>": [], "gen.main.<lambda16>": ["gen.format_yaml", "gen.compute_declaration_yaml"], "gen.main.<lambda17>": [], "local": ["threading.local.__init__", "contextlib.contextmanager"], "threading.local.__init__": [], "local.use_const_ref_for_mutable_tensors": [], "local.parametrize": [], "model": ["enum.Enum"], "model.assert_never": ["<builtin>.AssertionError", "<builtin>.type"], "model.Location.__str__": [], "model.DispatchKey": ["enum.auto"], "model.DispatchKey.__str__": [], "model.DispatchKey.lower": ["<builtin>.str"], "model.DispatchKey.parse": ["<builtin>.AssertionError"], "model.is_generic_dispatch_key": [], "model.is_cuda_dispatch_key": [], "model.is_structured_dispatch_key": [], "model.NativeFunction.from_yaml": ["model.OperatorName.parse", "model.FunctionSchema.parse", "model.DispatchKey.parse", "model.is_structured_dispatch_key", "<builtin>.isinstance", "tools.codegen.api.cpp.name", "<builtin>.set", "<builtin>.AssertionError"], "model.FunctionSchema.parse": ["model.parse_returns", "model.OperatorName.parse", "<builtin>.str", "model.Arguments.parse"], "model.OperatorName.parse": ["<builtin>.str", "model.BaseOperatorName.parse"], "model.NativeFunction.validate_unstructured": [], "model.NativeFunction.__post_init__": ["<builtin>.len", "<builtin>.str"], "model.NativeFunction.has_composite_kernel": [], "model.NativeFunctionsGroup.structured": [], "model.NativeFunctionsGroup.__post_init__": ["<builtin>.AssertionError", "model.NativeFunctionsGroup.functions"], "model.NativeFunctionsGroup.functions": [], "model.NativeFunctionsGroup.signature": [], "model.NativeFunctionsGroup.from_dict": ["<builtin>.len", "<builtin>.dict"], "model.is_foreach_op": ["<builtin>.set", "<builtin>.str"], "model.BackendIndex.grow_index": [], "model.BackendIndex.primary": [], "model.BackendIndex.has_kernel": ["model.BackendIndex.get_kernel"], "model.BackendIndex.get_kernel": ["model.BackendIndex.primary", "<builtin>.isinstance", "model.assert_never"], "model.BackendIndex.native_function_class_name": ["<builtin>.str"], "model.FunctionSchema.schema_order_arguments": ["itertools.chain"], "model.Arguments.parse": ["<builtin>.enumerate", "<builtin>.all", "model.Arguments._preparse", "<builtin>.len", "<builtin>.tuple", "model.Arguments.parse.pred", "<builtin>.zip", "model.Type.parse"], "model.parse_returns": ["model.Return.parse", "<builtin>.tuple"], "model.FunctionSchema.__post_init__": ["<builtin>.list", "<builtin>.str", "<builtin>.len", "model.is_foreach_op", "<builtin>.any", "<builtin>.zip"], "model.FunctionSchema.is_out_fn": ["<builtin>.bool"], "model.FunctionSchema.kind": ["<builtin>.bool"], "model.FunctionSchema.signature": ["<builtin>.tuple", "<builtin>.map"], "model.FunctionSchema.signature.strip_ret_annotation": [], "model.FunctionSchema.__str__": ["<builtin>.len", "<builtin>.str", "<builtin>.map"], "model.Annotation.parse": ["<builtin>.str", "re.match"], "model.Annotation.__str__": [], "model.Type.parse": ["model.Type._parse", "<builtin>.str"], "model.Type._parse": ["<builtin>.int", "model.Type.parse", "re.match", "<builtin>.RuntimeError"], "model.Type.__str__": [], "model.Type.is_tensor_like": [], "model.Type.is_nullable": [], "model.Type.is_list_like": [], "model.BaseType.__str__": [], "model.BaseType.is_tensor_like": [], "model.BaseType.is_nullable": [], "model.BaseType.is_list_like": [], "model.OptionalType.__str__": [], "model.OptionalType.is_tensor_like": [], "model.OptionalType.is_nullable": [], "model.OptionalType.is_list_like": [], "model.ListType.__str__": [], "model.ListType.is_tensor_like": [], "model.ListType.is_nullable": [], "model.ListType.is_list_like": [], "model.Argument.parse": ["<builtin>.str", "model.Type.parse", "re.match", "model.Annotation.parse"], "model.Argument.is_write": [], "model.Argument.__str__": [], "model.Return.parse": ["<builtin>.str", "model.Type.parse", "re.match", "model.Annotation.parse"], "model.Return.is_write": [], "model.Return.__str__": [], "model.TensorOptionsArguments.all": [], "model.Arguments.flat_non_out": [], "model.Arguments.flat_positional": [], "model.Arguments.flat_kwarg_only": [], "model.Arguments.non_out": [], "model.Arguments.positional": [], "model.Arguments.kwarg_only": [], "model.Arguments.signature": ["model.Arguments.signature.strip_arg_annotation", "<builtin>.tuple", "<builtin>.map"], "model.Arguments.signature.strip_arg_annotation": [], "model.Arguments._preparse": ["model.Argument.parse"], "model.Arguments.parse.pred": [], "model.Arguments.parse.pred.<lambda1>": [], "model.Arguments.__str__": ["<builtin>.map"], "model.Arguments.__post_init__": [], "model.BaseOperatorName.parse": ["<builtin>.str", "<builtin>.any", "re.match"], "model.BaseOperatorName.__str__": [], "model.OperatorName.__str__": [], "model.OperatorName.unambiguous_name": [], "model.gets_generated_out_inplace_wrapper": [], "utils.split_name_params": ["<builtin>.RuntimeError", "re.match"], "utils.mapMaybe": [], "utils.concatMap": [], "utils.context": ["textwrap.indent"], "gen_op_registration_allowlist": ["<builtin>.print", "argparse.ArgumentParser", "gen_op_registration_allowlist.load_op_dep_graph", "gen_op_registration_allowlist.load_root_ops", "gen_op_registration_allowlist.gen_transitive_closure_str"], "gen_op_registration_allowlist.canonical_name": [], "gen_op_registration_allowlist.load_op_dep_graph": ["yaml.safe_load", "collections.defaultdict", "gen_op_registration_allowlist.canonical_name", "<builtin>.dict", "<builtin>.open"], "gen_op_registration_allowlist.load_root_ops": ["gen_op_registration_allowlist.canonical_name", "yaml.safe_load", "<builtin>.open"], "gen_op_registration_allowlist.gen_transitive_closure": ["<builtin>.sorted", "<builtin>.set"], "gen_op_registration_allowlist.gen_transitive_closure_str": ["gen_op_registration_allowlist.gen_transitive_closure"], "op_deps_processor": ["op_deps_processor.load_op_deps", "tools.codegen.code_template.CodeTemplate", "<builtin>.Exception", "op_deps_processor.process_base_ops", "argparse.ArgumentParser", "op_deps_processor.convert"], "op_deps_processor.load_op_deps": ["yaml.safe_load", "<builtin>.open"], "op_deps_processor.process_base_ops": [], "op_deps_processor.convert": ["<builtin>.open"], "oss_coverage": ["oss_coverage.report_coverage"], "oss_coverage.report_coverage": ["package.oss.init.initialization", "time.time", "package.oss.cov_json.get_json_report", "package.util.utils.print_time", "package.tool.summarize_jsons.summarize_jsons"], "package.oss.init.initialization": ["package.oss.init.print_init_info", "utils.clean_up_gcda", "util.utils_init.create_folders", "argparse.ArgumentParser", "package.oss.init.add_arguments_oss", "util.utils.clean_up", "package.oss.init.empty_list_if_none", "os.path.join", "util.utils.remove_file", "util.utils_init.add_arguments_utils", "package.oss.init.parse_arguments", "package.oss.init.get_test_list"], "package.oss.cov_json.get_json_report": ["run.clang_run", "run.gcc_run", "util.utils.check_compiler_type", "tool.clang_coverage.export", "tool.clang_coverage.merge", "init.detect_compiler_type"], "package.tool.summarize_jsons.summarize_jsons": ["time.time", "util.utils.print_time", "util.utils.detect_compiler_type", "print_report.line_oriented_report", "package.tool.summarize_jsons.parse_jsons", "print_report.file_oriented_report", "package.tool.summarize_jsons.update_set", "print_report.html_oriented_report"], "package.util.utils.print_time": ["<builtin>.print", "package.util.utils.convert_time", "<builtin>.open", "time.time", "os.path.join"], "package.oss.cov_json": [], "package.util.setting": ["os.path.realpath", "os.path.join", "os.path.dirname"], "package.util.setting.Test.__init__": [], "package.oss.run": [], "package.oss.run.clang_run": ["time.time", "util.utils.print_time", "utils.get_oss_binary_file", "tool.clang_coverage.run_target", "os.path.join", "util.utils.get_raw_profiles_folder"], "package.oss.run.gcc_run": ["util.utils.print_time", "tool.gcc_coverage.run_target", "utils.get_oss_binary_file", "time.time"], "package.util.utils": [], "package.util.utils.convert_time": ["<builtin>.int", "<builtin>.round"], "package.util.utils.print_log": ["<builtin>.print", "os.path.join", "<builtin>.open"], "package.util.utils.print_error": ["<builtin>.print", "os.path.join", "<builtin>.open"], "package.util.utils.remove_file": ["os.path.exists", "os.remove"], "package.util.utils.remove_folder": ["shutil.rmtree"], "package.util.utils.create_folder": ["os.makedirs"], "package.util.utils.clean_up": ["package.util.utils.remove_folder", "sys.exit"], "package.util.utils.convert_to_relative_path": ["<builtin>.len", "<builtin>.RuntimeError"], "package.util.utils.replace_extension": [], "package.util.utils.related_to_test_list": [], "package.util.utils.get_raw_profiles_folder": ["os.environ.get", "os.path.join"], "package.util.utils.detect_compiler_type": ["package.oss.utils.detect_compiler_type", "package.util.utils.check_compiler_type", "caffe2.fb.code_coverage.tool.package.fbcode.utils.detect_compiler_type"], "package.util.utils.check_compiler_type": ["<builtin>.Exception"], "package.util.utils.get_test_name_from_whole_path": [], "package.util.utils.check_platform_type": ["<builtin>.Exception"], "package.util.utils.check_test_type": ["<builtin>.Exception"], "package.util.utils.raise_no_test_found_exception": ["<builtin>.RuntimeError"], "package.oss.utils": [], "package.oss.utils.get_oss_binary_folder": ["utils.get_pytorch_folder", "os.path.join"], "package.oss.utils.get_oss_shared_library": ["os.listdir", "utils.get_pytorch_folder", "os.path.join"], "package.oss.utils.get_oss_binary_file": ["package.oss.utils.get_oss_binary_folder", "os.path.join"], "package.oss.utils.get_llvm_tool_path": ["os.environ.get"], "package.oss.utils.clean_up_gcda": ["package.oss.utils.get_gcda_files", "util.utils.remove_file"], "package.oss.utils.get_gcda_files": ["os.path.isdir", "utils.get_pytorch_folder", "subprocess.check_output", "os.path.join"], "package.oss.utils.run_oss_python_test": ["util.utils.print_error", "package.oss.utils.get_oss_binary_folder", "subprocess.check_call"], "package.tool.clang_coverage": [], "package.tool.clang_coverage.create_corresponding_folder": ["util.utils.convert_to_relative_path", "util.utils.create_folder", "os.path.join"], "package.tool.clang_coverage.run_target": ["utils.run_cpp_test", "util.utils.print_log", "oss.utils.run_oss_python_test"], "package.tool.clang_coverage.merge_target": ["utils.get_tool_path_by_platform", "util.utils.print_log", "subprocess.check_call"], "package.tool.clang_coverage.export_target": ["os.system", "utils.get_tool_path_by_platform", "util.utils.print_log", "<builtin>.Exception"], "package.tool.clang_coverage.merge": ["<builtin>.print", "util.utils.convert_to_relative_path", "time.time", "util.utils.print_time", "util.utils.replace_extension", "package.tool.clang_coverage.create_corresponding_folder", "util.utils.get_raw_profiles_folder", "util.utils.related_to_test_list", "os.path.join", "package.tool.clang_coverage.merge_target", "os.walk"], "package.tool.clang_coverage.export": ["<builtin>.print", "util.utils.convert_to_relative_path", "oss.utils.get_oss_binary_file", "util.utils.check_platform_type", "package.tool.clang_coverage.export_target", "time.time", "util.utils.print_time", "util.utils.replace_extension", "package.tool.clang_coverage.create_corresponding_folder", "caffe2.fb.code_coverage.tool.package.fbcode.utils.get_fbcode_binary_folder", "util.utils.related_to_test_list", "os.path.join", "util.utils.get_test_name_from_whole_path", "oss.utils.get_oss_shared_library", "os.walk"], "package.util": [], "package.tool.utils": [], "package.tool.utils.run_cpp_test": ["util.utils.print_error", "subprocess.check_call"], "package.tool.utils.get_tool_path_by_platform": ["oss.utils.get_llvm_tool_path", "caffe2.fb.code_coverage.tool.package.fbcode.utils.get_llvm_tool_path"], "package.tool.gcc_coverage": [], "package.tool.gcc_coverage.update_gzip_dict": ["<builtin>.str"], "package.tool.gcc_coverage.run_target": ["oss.utils.run_oss_python_test", "util.utils.print_time", "utils.run_cpp_test", "time.time", "util.utils.print_log"], "package.tool.gcc_coverage.export": ["oss.utils.get_gcda_files", "time.time", "util.utils.print_time", "subprocess.check_output", "os.rename", "subprocess.check_call", "os.path.join", "package.tool.gcc_coverage.update_gzip_dict", "os.path.basename"], "package.oss.init": [], "package.oss.init.add_arguments_oss": [], "package.oss.init.parse_arguments": ["util.utils_init.get_options"], "package.oss.init.get_test_list": ["utils.get_oss_binary_folder", "util.utils.raise_no_test_found_exception", "package.oss.init.get_python_run_only", "package.oss.init.get_test_list_by_type"], "package.oss.init.empty_list_if_none": [], "package.oss.init.print_init_info": ["utils.detect_compiler_type", "utils.get_oss_binary_folder", "utils.get_pytorch_folder", "util.utils.print_log", "utils.get_llvm_tool_path", "typing.cast"], "package.oss.init.get_test_list_by_type": ["os.walk", "utils.get_oss_binary_folder", "util.setting.Test"], "package.oss.init.get_python_run_only": ["os.walk", "utils.detect_compiler_type", "utils.get_oss_binary_folder"], "package.oss.init.gcc_export_init": ["util.utils.remove_folder", "util.utils.create_folder"], "package.util.utils_init": [], "package.util.utils_init.remove_files": ["os.path.join", "utils.remove_file"], "package.util.utils_init.create_folders": ["utils.create_folder", "utils.get_raw_profiles_folder"], "package.util.utils_init.add_arguments_utils": [], "package.util.utils_init.have_option": [], "package.util.utils_init.get_options": ["setting.Option", "<builtin>.any", "<builtin>.vars"], "package.tool": [], "package.oss": [], "package.tool.summarize_jsons": ["<builtin>.set"], "package.tool.summarize_jsons.transform_file_name": ["utils.get_pytorch_folder", "<builtin>.len"], "package.tool.summarize_jsons.is_intrested_file": ["utils.get_pytorch_folder", "<builtin>.any"], "package.tool.summarize_jsons.get_json_obj": ["json.loads", "<builtin>.open"], "package.tool.summarize_jsons.parse_json": ["<builtin>.print", "package.tool.summarize_jsons.get_json_obj", "<builtin>.RuntimeError", "parser.gcov_coverage_parser.GcovCoverageParser", "util.utils.detect_compiler_type", "parser.llvm_coverage_parser.LlvmCoverageParser"], "package.tool.summarize_jsons.parse_jsons": ["util.utils.print_error", "util.utils.detect_compiler_type", "package.tool.summarize_jsons.update_coverage", "os.path.join", "util.utils.related_to_test_list", "package.tool.summarize_jsons.parse_json", "os.walk"], "package.tool.summarize_jsons.update_coverage": ["<builtin>.set", "package.tool.summarize_jsons.is_intrested_file", "package.tool.summarize_jsons.transform_file_name"], "package.tool.summarize_jsons.update_set": [], "package.tool.print_report": [], "package.tool.print_report.key_by_percentage": [], "package.tool.print_report.key_by_name": [], "package.tool.print_report.is_intrested_file": [], "package.tool.print_report.is_this_type_of_tests": [], "package.tool.print_report.print_test_by_type": ["<builtin>.print", "package.tool.print_report.is_this_type_of_tests"], "package.tool.print_report.print_test_condition": ["<builtin>.print", "package.tool.print_report.print_test_by_type"], "package.tool.print_report.line_oriented_report": ["package.tool.print_report.print_test_condition", "<builtin>.print", "<builtin>.open", "os.path.join", "<builtin>.sorted"], "package.tool.print_report.print_file_summary": ["<builtin>.print"], "package.tool.print_report.print_file_oriented_report": ["package.tool.print_report.print_test_condition", "<builtin>.print", "package.tool.print_report.print_file_summary", "<builtin>.str"], "package.tool.print_report.file_oriented_report": ["package.tool.print_report.print_file_oriented_report", "<builtin>.round", "<builtin>.open", "<builtin>.len", "os.path.join"], "package.tool.print_report.get_html_ignored_pattern": [], "package.tool.print_report.html_oriented_report": ["utils.get_pytorch_folder", "subprocess.check_call", "os.path.join", "package.tool.print_report.get_html_ignored_pattern"], "package": [], "setuptools.find_packages": [], "fast_nvcc": ["sys.exit", "itertools.takewhile", "fast_nvcc.fast_nvcc", "itertools.dropwhile", "argparse.ArgumentParser", "<builtin>.list"], "fast_nvcc.fast_nvcc_warn": ["<builtin>.print"], "fast_nvcc.warn_if_windows": ["fast_nvcc.fast_nvcc_warn"], "fast_nvcc.warn_if_tmpdir_flag": ["re.match", "fast_nvcc.fast_nvcc_warn", "re.escape"], "re.escape": [], "fast_nvcc.nvcc_dryrun_data": ["<builtin>.print", "re.match", "subprocess.run"], "fast_nvcc.warn_if_tmpdir_set": ["fast_nvcc.fast_nvcc_warn", "os.getenv"], "fast_nvcc.contains_non_executable": [], "fast_nvcc.module_id_contents": ["<builtin>.len", "hashlib.md5", "pathlib.PurePath"], "pathlib.PurePath": [], "fast_nvcc.unique_module_id_files": ["re.sub", "fast_nvcc.module_id_contents", "shlex.split", "<builtin>.enumerate"], "fast_nvcc.unique_module_id_files.uniqueify": ["re.sub", "<builtin>.str"], "fast_nvcc.make_rm_force": [], "fast_nvcc.print_verbose_output": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.open", "<builtin>.str", "<builtin>.print"], "fast_nvcc.straight_line_dependencies": ["<builtin>.len", "<builtin>.set", "<builtin>.range"], "fast_nvcc.files_mentioned": ["re.finditer"], "fast_nvcc.nvcc_data_dependencies": ["fast_nvcc.files_mentioned", "collections.defaultdict", "<builtin>.set", "<builtin>.enumerate"], "fast_nvcc.is_weakly_connected": ["<builtin>.len", "<builtin>.set", "<builtin>.enumerate"], "fast_nvcc.warn_if_not_weakly_connected": ["fast_nvcc.fast_nvcc_warn", "fast_nvcc.is_weakly_connected"], "fast_nvcc.print_dot_graph": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.open", "fast_nvcc.print_dot_graph.name", "<builtin>.print", "<builtin>.range"], "fast_nvcc.print_dot_graph.name": ["os.path.basename"], "fast_nvcc.run_command": ["pathlib.Path", "asyncio.create_subprocess_shell", "typing.cast", "shutil.copy2", "<builtin>.map", "os.path.exists", "fast_nvcc.files_mentioned", "time.monotonic", "<builtin>.str", "os.path.getsize"], "os.path.getsize": [], "fast_nvcc.run_graph": ["<builtin>.zip", "fast_nvcc.run_command", "asyncio.create_task", "<builtin>.enumerate"], "asyncio.create_task": [], "fast_nvcc.print_command_outputs": ["sys.stdout.write", "sys.stderr.write"], "fast_nvcc.write_log_csv": ["<builtin>.enumerate", "<builtin>.open", "csv.DictWriter", "os.path.basename", "<builtin>.list"], "csv.DictWriter": [], "fast_nvcc.exit_code": [], "fast_nvcc.wrap_nvcc": ["subprocess.call"], "fast_nvcc.fast_nvcc": ["asyncio.run", "fast_nvcc.warn_if_windows", "fast_nvcc.nvcc_data_dependencies", "fast_nvcc.warn_if_not_weakly_connected", "fast_nvcc.write_log_csv", "fast_nvcc.contains_non_executable", "<builtin>.map", "fast_nvcc.print_command_outputs", "fast_nvcc.straight_line_dependencies", "<builtin>.bool", "fast_nvcc.run_graph", "fast_nvcc.print_dot_graph", "fast_nvcc.warn_if_tmpdir_set", "fast_nvcc.warn_if_tmpdir_flag", "fast_nvcc.wrap_nvcc", "fast_nvcc.make_rm_force", "<builtin>.list", "fast_nvcc.unique_module_id_files", "fast_nvcc.print_verbose_output", "fast_nvcc.nvcc_dryrun_data", "fast_nvcc.exit_code"], "asyncio.run": [], "fast_nvcc.our_arg": [], "itertools.takewhile": [], "itertools.dropwhile": [], "pytorch-gdb": ["pytorch-gdb.TensorRepr.__init__"], "pytorch-gdb.DisableBreakpoints.__enter__": ["gdb.breakpoints"], "gdb.breakpoints": [], "pytorch-gdb.DisableBreakpoints.__exit__": [], "pytorch-gdb.TensorRepr": ["textwrap.dedent"], "pytorch-gdb.TensorRepr.__init__": ["gdb.Command.__init__"], "gdb.Command.__init__": [], "pytorch-gdb.TensorRepr.invoke": ["<builtin>.int", "gdb.string_to_argv", "gdb.parse_and_eval", "<builtin>.len", "<builtin>.print"], "gdb.string_to_argv": [], "gdb.parse_and_eval": [], "clang_format_all": ["re.compile", "sys.exit", "clang_format_all.main"], "clang_format_all.get_allowlisted_files": ["os.path.join", "<builtin>.set", "os.walk"], "clang_format_all.run_clang_format_on_file": ["asyncio.create_subprocess_shell", "<builtin>.print"], "clang_format_all.file_clang_formatted_correctly": ["asyncio.create_subprocess_shell", "<builtin>.open", "<builtin>.print"], "clang_format_all.run_clang_format": ["clang_format_all.file_clang_formatted_correctly", "asyncio.as_completed", "asyncio.gather", "<builtin>.print", "clang_format_all.get_allowlisted_files", "os.path.exists", "asyncio.Semaphore", "clang_format_all.run_clang_format_on_file"], "asyncio.as_completed": [], "clang_format_all.parse_args": ["argparse.ArgumentParser"], "clang_format_all.main": ["clang_format_all.run_clang_format", "clang_format_all.parse_args", "clang_format_utils.get_and_check_clang_format", "asyncio.get_event_loop"], "clang_format_utils.get_and_check_clang_format": ["install.download_bin.download", "<builtin>.bool"], "clang_format_utils": ["os.path.join"], "install.download_bin.download": ["install.download_bin.compute_file_sha256", "<builtin>.open", "os.path.exists", "os.unlink", "os.mkdir", "os.chmod", "os.path.join", "os.stat", "install.download_bin.download_bin", "<builtin>.print", "<builtin>.repr"], "install": [], "install.download_bin": ["platform.system", "os.path.realpath", "subprocess.run", "os.path.join", "os.path.dirname"], "install.download_bin.compute_file_sha256": ["<builtin>.open", "hashlib.sha256", "os.path.exists"], "install.download_bin.report_download_progress": ["<builtin>.min", "<builtin>.int", "sys.stdout.write"], "install.download_bin.download_bin": ["<builtin>.print", "sys.stdout.isatty", "os.path.join"], "flake8_hook": ["flake8.main.git.config_for", "sys.exit", "flake8.main.git.hook"], "flake8.main.git.config_for": [], "flake8.main.git.hook": [], "mypy_wrapper": ["mypy_wrapper.main"], "mypy_wrapper.read_config": ["<builtin>.set", "configparser.ConfigParser"], "configparser.ConfigParser": [], "mypy_wrapper.config_files": ["<builtin>.str", "pathlib.Path", "mypy_wrapper.read_config"], "mypy_wrapper.split_path": ["pathlib.PurePosixPath", "<builtin>.list", "<builtin>.str", "<builtin>.reversed"], "pathlib.PurePosixPath": [], "mypy_wrapper.make_trie": ["<builtin>.set", "mypy_wrapper.split_path"], "mypy_wrapper.lookup": ["<builtin>.set", "mypy_wrapper.split_path"], "mypy_wrapper.make_plan": ["collections.defaultdict", "mypy_wrapper.lookup", "mypy_wrapper.make_trie"], "mypy_wrapper.run": ["mypy_wrapper.config_files", "pathlib.PurePath", "mypy_wrapper.make_plan", "<builtin>.list", "<builtin>.max", "pathlib.Path.cwd"], "pathlib.Path.cwd": [], "mypy_wrapper.main": ["<builtin>.print", "mypy_wrapper.run", "<builtin>.str", "sys.exit", "pathlib.Path.cwd"], "trailing_newlines": ["sys.exit", "trailing_newlines.main"], "trailing_newlines.correct_trailing_newlines": ["<builtin>.open", "<builtin>.len"], "trailing_newlines.main": ["fileinput.input", "<builtin>.print", "trailing_newlines.correct_trailing_newlines"], "fileinput.input": [], "translate_annotations": ["typing.TypeVar", "translate_annotations.main"], "translate_annotations.parse_diff": ["<builtin>.int", "re.match"], "translate_annotations.KeyifyList.__init__": [], "translate_annotations.KeyifyList.__len__": ["<builtin>.len"], "translate_annotations.KeyifyList.__getitem__": ["translate_annotations.translate.<lambda1>"], "translate_annotations.translate.<lambda1>": [], "translate_annotations.translate": ["typing.cast", "bisect.bisect_right", "translate_annotations.KeyifyList.__init__"], "bisect.bisect_right": [], "translate_annotations.parse_annotation": ["<builtin>.int", "re.match"], "translate_annotations.translate_all": ["translate_annotations.parse_annotation", "collections.defaultdict", "translate_annotations.parse_diff", "translate_annotations.translate", "typing.cast", "subprocess.check_output"], "translate_annotations.main": ["json.dumps", "<builtin>.print", "translate_annotations.translate_all", "<builtin>.open", "argparse.ArgumentParser"], "gen_selected_mobile_ops_header": ["tools.codegen.code_template.CodeTemplate", "gen_selected_mobile_ops_header.main"], "gen_selected_mobile_ops_header.extract_root_operators": ["<builtin>.set"], "gen_selected_mobile_ops_header.get_selected_kernel_dtypes_code": ["<builtin>.map", "<builtin>.list"], "gen_selected_mobile_ops_header.get_selected_kernel_dtypes_code.<lambda1>": [], "gen_selected_mobile_ops_header.write_selected_mobile_ops": ["gen_selected_mobile_ops_header.get_selected_kernel_dtypes_code", "<builtin>.open", "gen_selected_mobile_ops_header.extract_root_operators", "<builtin>.sorted"], "gen_selected_mobile_ops_header.write_selected_mobile_ops_with_all_dtypes": ["tools.codegen.selective_build.selector.SelectiveBuilder.get_nop_selector", "<builtin>.open", "<builtin>.sorted", "gen_selected_mobile_ops_header.get_selected_kernel_dtypes_code"], "gen_selected_mobile_ops_header.main": ["<builtin>.open", "<builtin>.print", "argparse.ArgumentParser", "yaml.load", "os.path.join", "<builtin>.set", "gen_selected_mobile_ops_header.write_selected_mobile_ops_with_all_dtypes"], "deploy_debugger": ["lldb.debugger.GetSelectedTarget"], "lldb.debugger.GetSelectedTarget": [], "gen_pyi": ["gen_pyi.main"], "gen_pyi.get_py_torch_functions": ["autograd.gen_python_functions.group_overloads"], "gen_pyi.get_py_torch_functions.should_bind_function": ["autograd.gen_python_functions.should_generate_py_binding"], "autograd.gen_python_functions.should_generate_py_binding": [], "gen_pyi.get_py_torch_functions.should_bind_method": ["autograd.gen_python_functions.should_generate_py_binding"], "autograd.gen_python_functions.group_overloads": [], "gen_pyi.sig_for_ops": ["<builtin>.Exception"], "gen_pyi.generate_type_hints": [], "gen_pyi.gen_nn_functional": [], "gen_pyi.gen_nn_functional.<lambda1>": [], "gen_pyi.gen_nn_functional.<lambda2>": [], "gen_pyi.gen_pyi": ["<builtin>.list", "pprint.pformat", "gen_pyi.gen_nn_functional", "tools.codegen.gen.parse_native_yaml", "collections.defaultdict", "gen_pyi.get_py_torch_functions", "gen_pyi.sig_for_ops", "gen_pyi.generate_type_hints", "<builtin>.len", "autograd.gen_python_functions.load_signatures", "<builtin>.filter", "<builtin>.sorted"], "autograd.gen_python_functions.load_signatures": [], "gen_pyi.gen_pyi.<lambda1>": [], "gen_pyi.gen_pyi.<lambda2>": [], "pprint.pformat": [], "gen_pyi.gen_pyi.<lambda3>": [], "gen_pyi.gen_pyi.<lambda4>": [], "gen_pyi.gen_pyi.<lambda5>": [], "gen_pyi.main": ["tools.codegen.gen.FileManager", "argparse.ArgumentParser", "gen_pyi.gen_pyi"], "cmake": ["which", "env.check_negative_env_flag"], "cmake._mkdir_p": ["os.makedirs"], "env.check_negative_env_flag": ["os.getenv"], "which": [], "cmake.convert_cmake_value_to_python_value": [], "cmake.get_cmake_cache_variables_from_file": ["<builtin>.repr", "<builtin>.dict", "<builtin>.ValueError", "cmake.convert_cmake_value_to_python_value", "<builtin>.enumerate", "re.match"], "cmake.CMake.__init__": ["cmake.CMake._get_cmake_command"], "cmake.CMake._get_cmake_command": ["<builtin>.RuntimeError", "which", "setuptools.distutils.version.LooseVersion", "cmake.CMake._get_version"], "cmake.CMake._cmake_cache_file": ["os.path.join"], "cmake.CMake._get_version": ["<builtin>.RuntimeError", "subprocess.check_output", "setuptools.distutils.version.LooseVersion"], "cmake.CMake.run": ["sys.exit", "<builtin>.print", "subprocess.check_call"], "cmake.CMake.defines": ["<builtin>.sorted"], "cmake.CMake.get_cmake_cache_variables": ["<builtin>.open", "cmake.get_cmake_cache_variables_from_file"], "cmake.CMake.generate": ["os.path.isfile", "os.path.join", "os.getenv", "os.path.abspath", "<builtin>.set", "sys.exit", "<builtin>.print", "<builtin>.ord", "<builtin>.len", "<builtin>.str", "os.remove", "cmake._mkdir_p", "os.path.dirname", "cmake.CMake.defines", "sysconfig.get_path", "cmake.CMake.run", "os.path.exists"], "cmake.CMake.build": ["<builtin>.str", "os.getenv", "multiprocessing.cpu_count", "cmake.CMake.run"], "env": ["os.path.dirname", "platform.system", "os.path.join", "<builtin>.any", "env.check_env_flag", "env.BuildType.__init__", "struct.calcsize"], "struct.calcsize": [], "env.check_env_flag": ["os.getenv"], "env.gather_paths": ["<builtin>.list", "itertools.chain", "os.getenv"], "env.lib_paths_from_base": ["os.path.join"], "env.BuildType.__init__": ["cmake.get_cmake_cache_variables_from_file", "os.path.isfile", "os.environ.get", "os.path.join", "<builtin>.open", "typing.cast"], "env.BuildType.is_debug": [], "env.BuildType.is_rel_with_deb_info": [], "env.BuildType.is_release": [], "generate_code": ["generate_code.main"], "generate_code.all_generator_source": ["<builtin>.sorted", "os.path.splitext", "os.path.join", "os.walk"], "generate_code.generate_code": ["os.makedirs", "os.path.exists", "tools.autograd.gen_autograd.gen_autograd_python", "os.environ.get", "tools.codegen.selective_build.selector.SelectiveBuilder.get_nop_selector", "os.path.join", "tools.autograd.gen_autograd.gen_autograd", "tools.autograd.gen_annotated_fn_args.gen_annotated"], "tools.autograd.gen_autograd.gen_autograd_python": [], "tools.autograd.gen_autograd.gen_autograd": [], "tools.autograd.gen_annotated_fn_args.gen_annotated": [], "generate_code.get_selector_from_legacy_operator_selection_list": ["tools.codegen.selective_build.selector.SelectiveBuilder.from_legacy_op_registration_allow_list", "<builtin>.open", "yaml.load"], "generate_code.get_selector": ["tools.codegen.selective_build.selector.SelectiveBuilder.from_yaml_path", "typing.cast", "tools.codegen.selective_build.selector.SelectiveBuilder.get_nop_selector", "sys.path.insert", "os.path.abspath", "os.path.dirname", "generate_code.get_selector_from_legacy_operator_selection_list"], "generate_code.main": ["argparse.ArgumentParser", "generate_code.get_selector", "generate_code.generate_code"], "gen_version_header": ["gen_version_header.main", "argparse.ArgumentParser"], "gen_version_header.parse_version": ["<builtin>.len", "<builtin>.range", "typing.cast", "<builtin>.tuple", "<builtin>.int"], "gen_version_header.apply_replacements": [], "gen_version_header.main": ["gen_version_header.parse_version", "<builtin>.str", "os.makedirs", "<builtin>.open", "gen_version_header.apply_replacements", "os.path.dirname"], "numpy_": ["env.check_negative_env_flag", "numpy.get_include"], "numpy.get_include": [], "cwrap_common": [], "cwrap_common.parse_arguments": ["<builtin>.isinstance", "<builtin>.AssertionError"], "cwrap_common.set_declaration_defaults": ["cwrap_common.parse_arguments"], "cwrap_common.filter_unique_options": ["<builtin>.set", "<builtin>.len", "cwrap_common.filter_unique_options.signature", "<builtin>.range"], "cwrap_common.filter_unique_options.exclude_arg": [], "cwrap_common.filter_unique_options.exclude_arg_with_self_check": ["cwrap_common.filter_unique_options.exclude_arg"], "cwrap_common.filter_unique_options.signature": ["cwrap_common.filter_unique_options.exclude_arg_with_self_check", "cwrap_common.filter_unique_options.exclude_arg"], "cwrap_common.sort_by_number_of_args": [], "cwrap_common.sort_by_number_of_args.num_args": ["<builtin>.len"], "cwrap_common.Function.__init__": [], "cwrap_common.Function.add_argument": ["<builtin>.isinstance"], "cwrap_common.Function.__repr__": [], "cwrap_common.Argument.__init__": [], "cwrap_common.Argument.__repr__": [], "cwrap_common.parse_header": ["<builtin>.len", "<builtin>.filter", "cwrap_common.Argument.__init__", "<builtin>.open", "cwrap_common.Function.__init__"], "cwrap_common.parse_header.<lambda1>": [], "cwrap_common.parse_header.<lambda2>": [], "module_loader": [], "module_loader.import_module": ["typing.cast"], "export_slow_tests": ["export_slow_tests.main"], "export_slow_tests.get_test_case_times": ["collections.defaultdict", "<builtin>.RuntimeError", "tools.stats.s3_stat_parser.get_previous_reports_for_branch", "statistics.mean", "typing.cast"], "tools.stats.s3_stat_parser.get_previous_reports_for_branch": [], "export_slow_tests.filter_slow_tests": [], "export_slow_tests.get_test_infra_slow_tests": ["typing.cast", "urllib.request.urlopen", "json.loads"], "export_slow_tests.too_similar": ["<builtin>.abs", "<builtin>.max"], "export_slow_tests.export_slow_tests": ["export_slow_tests.too_similar", "<builtin>.open", "export_slow_tests.get_test_infra_slow_tests", "<builtin>.print", "export_slow_tests.filter_slow_tests", "export_slow_tests.get_test_case_times", "json.dump", "os.path.exists"], "export_slow_tests.parse_args": ["argparse.ArgumentParser"], "export_slow_tests.main": ["export_slow_tests.parse_args", "export_slow_tests.export_slow_tests"], "import_test_stats": ["os.getenv", "datetime.timedelta"], "import_test_stats.fetch_and_cache": ["<builtin>.open", "os.path.exists", "json.dumps", "import_test_stats.get_slow_tests.<lambda1>", "os.path.join", "import_test_stats.get_disabled_tests.process_disabled_test", "json.loads", "typing.cast", "<builtin>.print", "json.load", "import_test_stats.fetch_and_cache.is_cached_file_valid", "urllib.request.urlopen"], "import_test_stats.fetch_and_cache.is_cached_file_valid": ["pathlib.Path", "datetime.datetime.fromtimestamp", "datetime.datetime.now"], "import_test_stats.get_slow_tests.<lambda1>": [], "import_test_stats.get_disabled_tests.process_disabled_test": ["<builtin>.len", "<builtin>.dict", "re.compile"], "import_test_stats.get_slow_tests": ["<builtin>.print", "import_test_stats.fetch_and_cache"], "import_test_stats.get_disabled_tests": ["<builtin>.print", "import_test_stats.fetch_and_cache"], "print_test_stats": ["json.loads", "argparse.ArgumentParser", "pathlib.Path", "<builtin>.print", "print_test_stats.print_regressions", "print_test_stats.reports_has_no_tests", "sys.exit", "datetime.timedelta", "<builtin>.reversed", "<builtin>.len", "print_test_stats.assemble_s3_object", "print_test_stats.send_report_to_s3", "<builtin>.sorted", "print_test_stats.send_report_to_scribe", "print_test_stats.parse_reports"], "print_test_stats.simplify": ["tools.stats.s3_stat_parser.newify_case", "typing.cast", "<builtin>.RuntimeError"], "tools.stats.s3_stat_parser.newify_case": [], "print_test_stats.plural": [], "print_test_stats.get_base_commit": ["subprocess.check_output"], "print_test_stats.display_stat": [], "print_test_stats.list_stat": ["<builtin>.len", "statistics.mean", "statistics.stdev"], "print_test_stats.zero_stat": [], "print_test_stats.recenter": [], "print_test_stats.sum_normals": ["<builtin>.any", "math.sqrt", "<builtin>.list", "<builtin>.sum"], "print_test_stats.format_seconds": ["print_test_stats.display_stat", "<builtin>.len", "print_test_stats.list_stat"], "print_test_stats.show_ancestors": ["print_test_stats.plural"], "print_test_stats.unlines": [], "print_test_stats.matching_test_times": [], "print_test_stats.analyze": ["<builtin>.any", "<builtin>.set", "print_test_stats.matching_test_times", "<builtin>.dict", "print_test_stats.list_stat", "<builtin>.sum", "<builtin>.sorted", "print_test_stats.sum_normals"], "print_test_stats.case_diff_lines": ["print_test_stats.display_stat"], "print_test_stats.display_suite_diff": ["print_test_stats.display_stat", "print_test_stats.unlines", "print_test_stats.case_diff_lines"], "print_test_stats.anomalies": ["<builtin>.map"], "print_test_stats.graph": ["print_test_stats.plural", "<builtin>.str", "print_test_stats.format_seconds", "print_test_stats.unlines", "print_test_stats.show_ancestors", "<builtin>.len"], "print_test_stats.case_delta": ["print_test_stats.recenter", "print_test_stats.zero_stat"], "print_test_stats.display_final_stat": ["<builtin>.abs", "print_test_stats.display_stat"], "print_test_stats.summary_line": ["<builtin>.len", "print_test_stats.case_delta", "print_test_stats.plural", "print_test_stats.sum_normals"], "print_test_stats.summary": ["collections.defaultdict", "<builtin>.list", "print_test_stats.unlines", "<builtin>.filter", "print_test_stats.summary_line"], "print_test_stats.summary.<lambda1>": [], "print_test_stats.summary.<lambda2>": [], "print_test_stats.summary.<lambda3>": [], "print_test_stats.regression_info": ["print_test_stats.simplify", "print_test_stats.analyze"], "print_test_stats.TestCase.__init__": ["<builtin>.str", "<builtin>.len", "<builtin>.float"], "print_test_stats.TestSuite.__init__": ["<builtin>.dict"], "print_test_stats.TestSuite.__repr__": ["<builtin>.len"], "print_test_stats.TestSuite.append": [], "print_test_stats.TestSuite.update": [], "print_test_stats.TestSuite.print_report": ["<builtin>.print", "statistics.median", "<builtin>.reversed", "<builtin>.sorted", "<builtin>.len"], "print_test_stats.TestSuite.print_report.<lambda1>": [], "statistics.median": [], "print_test_stats.TestFile.__init__": ["<builtin>.dict"], "print_test_stats.TestFile.append": ["print_test_stats.TestSuite.__init__", "<builtin>.RuntimeWarning"], "<builtin>.RuntimeWarning": [], "print_test_stats.parse_report": ["<builtin>.print", "print_test_stats.TestCase.__init__", "xml.dom.minidom.parse"], "xml.dom.minidom.parse": [], "print_test_stats.get_recursive_files": ["os.walk", "os.path.splitext", "os.path.join"], "print_test_stats.parse_reports": ["print_test_stats.parse_report", "pathlib.Path", "print_test_stats.TestFile.__init__", "print_test_stats.get_recursive_files", "<builtin>.dict", "re.sub"], "print_test_stats.build_info": ["print_test_stats.get_base_commit", "os.environ.get", "<builtin>.str", "<builtin>.int", "os.path.realpath", "os.path.getmtime"], "os.path.getmtime": [], "print_test_stats.build_message": [], "print_test_stats.send_report_to_scribe": ["print_test_stats.build_info", "json.dumps", "tools.stats.scribe.send_to_scribe", "print_test_stats.build_message"], "tools.stats.scribe.send_to_scribe": [], "print_test_stats.assemble_s3_object": ["print_test_stats.build_info"], "print_test_stats.send_report_to_s3": ["bz2.compress", "os.environ.get", "json.dumps", "datetime.datetime.utcnow", "os.getenv", "tools.stats.s3_stat_parser.get_S3_object_from_bucket"], "tools.stats.s3_stat_parser.get_S3_object_from_bucket": [], "bz2.compress": [], "print_test_stats.print_regressions": ["print_test_stats.get_base_commit", "collections.defaultdict", "os.environ.get", "<builtin>.print", "<builtin>.int", "subprocess.check_output", "tools.stats.s3_stat_parser.get_test_stats_summaries_for_job", "print_test_stats.regression_info"], "tools.stats.s3_stat_parser.get_test_stats_summaries_for_job": [], "print_test_stats.positive_integer": ["argparse.ArgumentTypeError", "<builtin>.int"], "print_test_stats.positive_float": ["argparse.ArgumentTypeError", "<builtin>.float"], "print_test_stats.reports_has_no_tests": ["<builtin>.len"], "print_test_stats.<lambda1>": [], "s3_stat_parser": ["logging.getLogger", "boto3.resource", "botocore.config.Config"], "botocore.config.Config": [], "boto3.resource": [], "s3_stat_parser.get_S3_bucket_readonly": [], "s3_stat_parser.get_S3_object_from_bucket": [], "s3_stat_parser.case_status": ["typing.cast"], "s3_stat_parser.newify_case": ["s3_stat_parser.case_status"], "s3_stat_parser.get_cases": ["s3_stat_parser.newify_case", "<builtin>.RuntimeError", "typing.cast"], "s3_stat_parser._parse_master_summaries": ["json.loads", "bz2.decompress", "collections.defaultdict", "<builtin>.len"], "bz2.decompress": [], "s3_stat_parser._parse_pr_summaries": ["json.loads", "bz2.decompress", "collections.defaultdict", "<builtin>.len"], "s3_stat_parser.get_test_stats_summaries": ["s3_stat_parser._parse_master_summaries", "<builtin>.list", "s3_stat_parser.get_S3_bucket_readonly"], "s3_stat_parser.get_test_stats_summaries_for_job": ["s3_stat_parser._parse_master_summaries", "<builtin>.list", "s3_stat_parser.get_S3_bucket_readonly"], "s3_stat_parser.get_test_stats_summaries_for_pr": ["s3_stat_parser.get_S3_bucket_readonly", "s3_stat_parser._parse_pr_summaries"], "s3_stat_parser.get_previous_reports_for_branch": ["<builtin>.str", "s3_stat_parser.get_test_stats_summaries_for_job", "subprocess.check_output", "datetime.timedelta", "<builtin>.int", "<builtin>.len", "datetime.datetime.fromtimestamp"], "s3_stat_parser.get_previous_reports_for_pr": ["s3_stat_parser.get_test_stats_summaries_for_pr"], "s3_stat_parser.get_previous_reports_for_pr.<lambda1>": [], "scribe": [], "scribe.send_to_scribe": ["scribe._send_to_scribe_via_boto3", "os.environ.get", "scribe._send_to_scribe_via_http"], "scribe._send_to_scribe_via_boto3": ["base64.b64encode", "bz2.compress", "boto3.client", "<builtin>.Exception", "<builtin>.str", "json.dumps", "<builtin>.print"], "scribe._send_to_scribe_via_http": ["requests.post", "<builtin>.print", "<builtin>.str"], "test_history": ["signal.signal", "test_history.main"], "test_history.get_git_commit_history": ["subprocess.check_output", "datetime.datetime.fromtimestamp", "<builtin>.int"], "test_history.make_column": ["<builtin>.len", "tools.stats.s3_stat_parser.get_cases"], "tools.stats.s3_stat_parser.get_cases": [], "test_history.make_columns": ["test_history.make_column"], "test_history.make_lines": ["<builtin>.len", "tools.stats.s3_stat_parser.get_cases"], "test_history.history_lines": ["datetime.datetime.now", "test_history.make_columns", "<builtin>.set", "test_history.make_lines", "tools.stats.s3_stat_parser.get_test_stats_summaries", "<builtin>.len"], "tools.stats.s3_stat_parser.get_test_stats_summaries": [], "test_history.description": [], "test_history.parse_args": ["test_history.description", "argparse.ArgumentParser"], "test_history.run": ["test_history.parse_args", "test_history.get_git_commit_history", "test_history.history_lines"], "test_history.main": ["<builtin>.print", "test_history.run"], "upload_binary_size_to_scuba": ["<builtin>.print", "logging.exception", "upload_binary_size_to_scuba.send_message", "upload_binary_size_to_scuba.get_size", "os.environ.get", "upload_binary_size_to_scuba.report_android_sizes", "<builtin>.len", "upload_binary_size_to_scuba.build_message"], "upload_binary_size_to_scuba.get_size": ["logging.exception", "glob.glob", "os.path.join", "os.stat"], "upload_binary_size_to_scuba.build_message": ["os.path.getmtime", "os.path.realpath", "os.uname", "os.environ.get"], "os.uname": [], "upload_binary_size_to_scuba.send_message": ["<builtin>.print", "json.dumps", "tools.stats.scribe.send_to_scribe"], "upload_binary_size_to_scuba.report_android_sizes": ["upload_binary_size_to_scuba.report_android_sizes.gen_messages", "upload_binary_size_to_scuba.send_message", "<builtin>.list"], "upload_binary_size_to_scuba.report_android_sizes.gen_sizes": ["logging.exception", "zipfile.ZipFile", "pathlib.Path", "re.match", "os.stat", "<builtin>.len", "<builtin>.list"], "upload_binary_size_to_scuba.report_android_sizes.gen_messages": ["<builtin>.print", "os.path.realpath", "upload_binary_size_to_scuba.report_android_sizes.gen_sizes", "os.environ.get", "os.path.getmtime"], "explicit_ci_jobs": ["explicit_ci_jobs.get_filtered_circleci_config", "textwrap.dedent", "<builtin>.str", "pathlib.Path", "yaml.dump", "yaml.safe_load", "argparse.ArgumentParser", "explicit_ci_jobs.commit_ci", "<builtin>.open"], "explicit_ci_jobs.add_job": ["explicit_ci_jobs.add_job"], "explicit_ci_jobs.get_filtered_circleci_config": ["explicit_ci_jobs.add_job", "<builtin>.print"], "explicit_ci_jobs.commit_ci": ["<builtin>.RuntimeError", "subprocess.run"], "test_selections": [], "test_selections._get_stripped_CI_job": ["os.environ.get", "<builtin>.len"], "test_selections._get_job_times_json": ["subprocess.check_output", "test_selections._get_stripped_CI_job"], "test_selections._calculate_job_times": ["<builtin>.dict", "typing.cast"], "test_selections.calculate_shards": ["<builtin>.range", "<builtin>.dict", "<builtin>.sorted"], "test_selections.calculate_shards.<lambda1>": [], "test_selections.calculate_shards.<lambda2>": [], "test_selections.calculate_shards.<lambda3>": [], "test_selections._pull_job_times_from_S3": ["test_selections._get_stripped_CI_job", "<builtin>.print", "tools.stats.s3_stat_parser.get_previous_reports_for_branch", "<builtin>.len", "<builtin>.dict", "test_selections._calculate_job_times"], "test_selections._query_past_job_times": ["subprocess.check_output", "test_selections._get_stripped_CI_job", "<builtin>.print", "test_selections.export_S3_test_times", "os.path.exists", "json.load", "<builtin>.open"], "test_selections.export_S3_test_times": ["test_selections._pull_job_times_from_S3", "test_selections._get_job_times_json", "<builtin>.print", "json.dump", "os.path.exists", "<builtin>.open"], "test_selections._query_failure_test_module": ["typing.cast", "<builtin>.len", "<builtin>.any"], "test_selections._query_changed_test_files": ["<builtin>.RuntimeError", "subprocess.run"], "test_selections.get_shard_based_on_S3": ["test_selections._query_past_job_times", "<builtin>.print", "<builtin>.len", "test_selections.calculate_shards"], "test_selections.get_slow_tests_based_on_S3": ["test_selections._query_past_job_times", "<builtin>.print", "<builtin>.len"], "test_selections.get_specified_test_cases": ["<builtin>.dict", "csv.DictReader", "<builtin>.print", "os.path.exists", "<builtin>.open"], "csv.DictReader": [], "test_selections.get_reordered_tests": ["test_selections._get_stripped_CI_job", "test_selections._query_changed_test_files", "test_selections._query_failure_test_module", "<builtin>.print", "<builtin>.len", "tools.stats.s3_stat_parser.get_previous_reports_for_pr", "os.environ.get"], "tools.stats.s3_stat_parser.get_previous_reports_for_pr": [], "test_selections.get_test_case_configs": ["tools.stats.import_test_stats.get_slow_tests", "tools.stats.import_test_stats.get_disabled_tests"], "tools.stats.import_test_stats.get_slow_tests": [], "tools.stats.import_test_stats.get_disabled_tests": [], "test_actions_local_runner": ["unittest.main"], "test_actions_local_runner.TestRunner.run": ["<builtin>.super"], "test_actions_local_runner.TestRunner.test_step_extraction": ["tools.actions_local_runner.grab_specific_steps", "unittest.IsolatedAsyncioTestCase.assertEqual"], "tools.actions_local_runner.grab_specific_steps": [], "unittest.IsolatedAsyncioTestCase.assertEqual": [], "test_actions_local_runner.TestRunner.test_runner": ["tools.actions_local_runner.YamlStep", "contextlib.redirect_stdout", "unittest.IsolatedAsyncioTestCase.assertIn", "io.StringIO"], "contextlib.redirect_stdout": [], "tools.actions_local_runner.YamlStep": [], "unittest.IsolatedAsyncioTestCase.assertIn": [], "test_actions_local_runner.TestEndToEnd.test_lint": ["subprocess.run", "unittest.TestCase.assertIn", "<builtin>.str", "multiprocessing.cpu_count"], "test_actions_local_runner.TestEndToEnd.test_quicklint": ["subprocess.run", "unittest.TestCase.assertIn", "<builtin>.str", "multiprocessing.cpu_count"], "test_actions_local_runner.TestQuicklint": ["os.path.join"], "test_actions_local_runner.TestQuicklint.setUp": ["<builtin>.open", "textwrap.dedent"], "test_actions_local_runner.TestQuicklint.tearDown": ["os.remove"], "test_actions_local_runner.TestQuicklint.test_file_selection": ["unittest.IsolatedAsyncioTestCase.assertIn", "tools.actions_local_runner.find_changed_files"], "tools.actions_local_runner.find_changed_files": [], "test_actions_local_runner.TestQuicklint.test_flake8": ["textwrap.dedent", "tools.actions_local_runner.Flake8", "unittest.IsolatedAsyncioTestCase.assertEqual", "io.StringIO", "contextlib.redirect_stdout"], "tools.actions_local_runner.Flake8": [], "test_actions_local_runner.TestQuicklint.test_shellcheck": ["contextlib.redirect_stdout", "unittest.IsolatedAsyncioTestCase.assertIn", "tools.actions_local_runner.ShellCheck", "io.StringIO"], "tools.actions_local_runner.ShellCheck": [], "test_actions_local_runner.TestQuicklint.test_mypy": ["textwrap.dedent", "tools.actions_local_runner.Mypy", "unittest.IsolatedAsyncioTestCase.assertEqual", "io.StringIO", "tools.actions_local_runner.shell_cmd", "contextlib.redirect_stdout"], "tools.actions_local_runner.shell_cmd": [], "tools.actions_local_runner.Mypy": [], "test_extract_scripts": ["unittest.main"], "test_extract_scripts.TestExtractScripts.test_extract_none": ["unittest.TestCase.assertEqual", "tools.extract_scripts.extract"], "tools.extract_scripts.extract": [], "test_extract_scripts.TestExtractScripts.test_extract_run_default_bash": ["unittest.TestCase.assertEqual", "tools.extract_scripts.extract"], "test_extract_scripts.TestExtractScripts.test_extract_run_sh": ["unittest.TestCase.assertEqual", "tools.extract_scripts.extract"], "test_extract_scripts.TestExtractScripts.test_extract_run_py": ["unittest.TestCase.assertEqual", "tools.extract_scripts.extract"], "test_extract_scripts.TestExtractScripts.test_extract_github_script": ["unittest.TestCase.assertEqual", "tools.extract_scripts.extract"], "test_max_tokens_pragma": ["unittest.main"], "test_max_tokens_pragma.compare_code": [], "test_max_tokens_pragma.TestMaxTokensPragma.test_no_prior_pragmas": ["tools.linter.clang_tidy.max_tokens_pragma.strip_max_tokens_pragmas", "test_max_tokens_pragma.compare_code", "unittest.TestCase.assertTrue", "tools.linter.clang_tidy.max_tokens_pragma.add_max_tokens_pragma"], "tools.linter.clang_tidy.max_tokens_pragma.add_max_tokens_pragma": [], "tools.linter.clang_tidy.max_tokens_pragma.strip_max_tokens_pragmas": [], "test_max_tokens_pragma.TestMaxTokensPragma.test_single_prior_pragma": ["tools.linter.clang_tidy.max_tokens_pragma.strip_max_tokens_pragmas", "test_max_tokens_pragma.compare_code", "unittest.TestCase.assertTrue", "tools.linter.clang_tidy.max_tokens_pragma.add_max_tokens_pragma"], "test_max_tokens_pragma.TestMaxTokensPragma.test_multiple_prior_pragmas": ["tools.linter.clang_tidy.max_tokens_pragma.strip_max_tokens_pragmas", "test_max_tokens_pragma.compare_code", "unittest.TestCase.assertTrue", "tools.linter.clang_tidy.max_tokens_pragma.add_max_tokens_pragma"], "test_mypy_wrapper": ["unittest.main"], "test_mypy_wrapper.TestMypyWrapper.test_config_files": ["tools.linter.mypy_wrapper.config_files", "unittest.TestCase.assertEqual"], "tools.linter.mypy_wrapper.config_files": [], "test_mypy_wrapper.TestMypyWrapper.test_split_path": ["unittest.TestCase.assertEqual", "tools.linter.mypy_wrapper.split_path"], "tools.linter.mypy_wrapper.split_path": [], "test_mypy_wrapper.TestMypyWrapper.test_make_trie": ["unittest.TestCase.assertEqual", "tools.linter.mypy_wrapper.make_trie"], "tools.linter.mypy_wrapper.make_trie": [], "test_mypy_wrapper.TestMypyWrapper.test_lookup": ["unittest.TestCase.assertEqual", "<builtin>.set", "tools.linter.mypy_wrapper.lookup"], "tools.linter.mypy_wrapper.lookup": [], "test_mypy_wrapper.TestMypyWrapper.test_make_plan": ["tools.linter.mypy_wrapper.make_plan", "unittest.TestCase.assertEqual"], "tools.linter.mypy_wrapper.make_plan": [], "test_stats": ["unittest.main"], "test_stats.fakehash": [], "test_stats.dummy_meta_meta": [], "test_stats.makecase": [], "test_stats.make_report_v1": ["test_stats.dummy_meta_meta", "<builtin>.sum"], "test_stats.make_case_v2": [], "test_stats.make_report_v2": ["test_stats.dummy_meta_meta", "<builtin>.sum"], "test_stats.TestPrintTestStats": ["test_stats.make_report_v2", "test_stats.make_report_v1", "test_stats.makecase", "test_stats.make_case_v2"], "test_stats.TestPrintTestStats.test_simplify": ["tools.stats.print_test_stats.simplify", "unittest.TestCase.assertEqual"], "tools.stats.print_test_stats.simplify": [], "test_stats.TestPrintTestStats.test_analysis": ["tools.stats.print_test_stats.simplify", "unittest.TestCase.assertEqual", "test_stats.fakehash", "test_stats.make_report_v1", "tools.stats.print_test_stats.analyze", "test_stats.makecase", "tools.stats.print_test_stats.anomalies"], "tools.stats.print_test_stats.analyze": [], "tools.stats.print_test_stats.anomalies": [], "test_stats.TestPrintTestStats.test_graph": ["unittest.TestCase.assertEqual", "test_stats.fakehash", "tools.stats.print_test_stats.graph"], "tools.stats.print_test_stats.graph": [], "test_stats.TestPrintTestStats.test_regression_info": ["unittest.TestCase.assertEqual", "test_stats.fakehash", "test_stats.make_report_v1", "tools.stats.print_test_stats.regression_info", "test_stats.makecase"], "tools.stats.print_test_stats.regression_info": [], "test_stats.TestPrintTestStats.test_regression_info_new_job": ["unittest.TestCase.assertEqual", "test_stats.fakehash", "test_stats.make_report_v1", "tools.stats.print_test_stats.regression_info", "test_stats.makecase"], "test_test_history": ["unittest.main"], "test_test_history.parse_block": ["<builtin>.enumerate", "re.match", "shlex.split"], "test_test_history.parse_description": ["test_test_history.parse_block", "re.match", "<builtin>.all"], "test_test_history.TestTestHistory.test_help_examples": ["tools.stats.test_history.run", "unittest.TestCase.assertEqual", "test_test_history.parse_description", "<builtin>.enumerate", "itertools.islice", "unittest.TestCase.assertTrue", "unittest.TestCase.subTest", "tools.stats.test_history.description", "tools.stats.test_history.__file__.endswith", "<builtin>.list", "<builtin>.len"], "tools.stats.test_history.description": [], "unittest.TestCase.subTest": [], "tools.stats.test_history.__file__.endswith": [], "tools.stats.test_history.run": [], "test_test_selections": ["unittest.main"], "test_test_selections.TestCalculateShards.assert_shards_equal": ["<builtin>.zip", "unittest.TestCase.assertAlmostEqual", "unittest.TestCase.assertListEqual"], "test_test_selections.TestCalculateShards.test_calculate_2_shards_with_complete_test_times": ["test_test_selections.TestCalculateShards.assert_shards_equal", "tools.testing.test_selections.calculate_shards"], "tools.testing.test_selections.calculate_shards": [], "test_test_selections.TestCalculateShards.test_calculate_5_shards_with_complete_test_times": ["test_test_selections.TestCalculateShards.assert_shards_equal", "tools.testing.test_selections.calculate_shards"], "test_test_selections.TestCalculateShards.test_calculate_2_shards_with_incomplete_test_times": ["test_test_selections.TestCalculateShards.assert_shards_equal", "tools.testing.test_selections.calculate_shards"], "test_test_selections.TestCalculateShards.test_calculate_5_shards_with_incomplete_test_times": ["test_test_selections.TestCalculateShards.assert_shards_equal", "tools.testing.test_selections.calculate_shards"], "test_test_selections.TestCalculateShards.test_calculate_2_shards_against_optimal_shards": ["<builtin>.range", "random.seed", "<builtin>.max", "random.random", "<builtin>.sum", "tools.testing.test_selections.calculate_shards", "<builtin>.sorted", "unittest.TestCase.assertEqual", "unittest.TestCase.assertGreaterEqual"], "test_trailing_newlines": ["unittest.main"], "test_trailing_newlines.correct_trailing_newlines": ["tools.linter.trailing_newlines.correct_trailing_newlines", "tempfile.NamedTemporaryFile"], "tools.linter.trailing_newlines.correct_trailing_newlines": [], "test_trailing_newlines.TestTrailingNewlines.test_empty": ["unittest.TestCase.assertTrue", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_single_byte": ["unittest.TestCase.assertFalse", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_single_newline": ["unittest.TestCase.assertFalse", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_two_newlines": ["unittest.TestCase.assertFalse", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_three_newlines": ["unittest.TestCase.assertFalse", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_hello_world": ["unittest.TestCase.assertFalse", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_hello_world_newline": ["unittest.TestCase.assertTrue", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_hello_world_two_newlines": ["unittest.TestCase.assertFalse", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_hello_world_three_newlines": ["unittest.TestCase.assertFalse", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_hello_world_multiline": ["unittest.TestCase.assertFalse", "test_trailing_newlines.correct_trailing_newlines"], "test_trailing_newlines.TestTrailingNewlines.test_hello_world_multiline_gap": ["unittest.TestCase.assertTrue", "test_trailing_newlines.correct_trailing_newlines"], "test_translate_annotations": ["unittest.main"], "test_translate_annotations.TestTranslateAnnotations.test_parse_diff_lao_tzu": ["tools.linter.translate_annotations.parse_diff", "unittest.TestCase.assertEqual"], "tools.linter.translate_annotations.parse_diff": [], "test_translate_annotations.TestTranslateAnnotations.test_parse_diff_new_file": ["tools.linter.translate_annotations.parse_diff", "unittest.TestCase.assertEqual"], "test_translate_annotations.TestTranslateAnnotations.test_parse_diff_haskell": ["tools.linter.translate_annotations.parse_diff", "unittest.TestCase.assertEqual"], "test_translate_annotations.TestTranslateAnnotations.test_translate_lao_tzu": ["tools.linter.translate_annotations.translate", "tools.linter.translate_annotations.parse_diff", "unittest.TestCase.assertEqual"], "tools.linter.translate_annotations.translate": [], "test_translate_annotations.TestTranslateAnnotations.test_translate_empty": ["tools.linter.translate_annotations.translate", "tools.linter.translate_annotations.parse_diff", "unittest.TestCase.assertEqual"], "test_translate_annotations.TestTranslateAnnotations.test_translate_sparser": ["tools.linter.translate_annotations.translate", "tools.linter.translate_annotations.parse_diff", "unittest.TestCase.assertEqual"], "test_translate_annotations.TestTranslateAnnotations.test_parse_annotation_flake8": ["unittest.TestCase.assertEqual", "re.compile", "tools.linter.translate_annotations.parse_annotation"], "tools.linter.translate_annotations.parse_annotation": [], "test_translate_annotations.TestTranslateAnnotations.test_parse_annotation_clang_tidy": ["unittest.TestCase.assertEqual", "re.compile", "tools.linter.translate_annotations.parse_annotation"], "coverage_record": [], "coverage_record.CoverageRecord.to_dict": [], "gcov_coverage_parser": [], "gcov_coverage_parser.GcovCoverageParser.__init__": [], "gcov_coverage_parser.GcovCoverageParser._skip_coverage": [], "gcov_coverage_parser.GcovCoverageParser.parse": ["coverage_record.CoverageRecord", "gcov_coverage_parser.GcovCoverageParser._skip_coverage", "<builtin>.sorted", "<builtin>.set"], "coverage_record.CoverageRecord": [], "llvm_coverage_parser": [], "llvm_coverage_parser.LlvmCoverageParser.__init__": [], "llvm_coverage_parser.LlvmCoverageParser._skip_coverage": [], "llvm_coverage_parser.LlvmCoverageParser._collect_coverage": ["<builtin>.sorted", "<builtin>.set", "llvm_coverage_segment.LlvmCoverageSegment"], "llvm_coverage_segment.LlvmCoverageSegment": [], "llvm_coverage_parser.LlvmCoverageParser.parse": ["llvm_coverage_segment.parse_segments", "llvm_coverage_parser.LlvmCoverageParser._collect_coverage", "coverage_record.CoverageRecord", "llvm_coverage_parser.LlvmCoverageParser._skip_coverage"], "llvm_coverage_segment.parse_segments": ["<builtin>.len", "typing.NamedTuple.__init__"], "llvm_coverage_segment": [], "llvm_coverage_segment.LlvmCoverageSegment.has_coverage": [], "llvm_coverage_segment.LlvmCoverageSegment.is_executable": [], "llvm_coverage_segment.LlvmCoverageSegment.get_coverage": ["<builtin>.list", "<builtin>.range"], "anomaly_mode": [], "anomaly_mode.detect_anomaly.__init__": ["torch.is_anomaly_enabled", "warnings.warn"], "torch.is_anomaly_enabled": [], "anomaly_mode.detect_anomaly.__enter__": ["torch.set_anomaly_enabled"], "torch.set_anomaly_enabled": [], "anomaly_mode.detect_anomaly.__exit__": ["torch.set_anomaly_enabled"], "anomaly_mode.set_detect_anomaly.__init__": ["torch.set_anomaly_enabled", "torch.is_anomaly_enabled"], "anomaly_mode.set_detect_anomaly.__enter__": [], "anomaly_mode.set_detect_anomaly.__exit__": ["torch.set_anomaly_enabled"], "forward_ad": [], "forward_ad.enter_dual_level": ["<builtin>.RuntimeError", "torch._C._enter_dual_level"], "torch._C._enter_dual_level": [], "forward_ad.exit_dual_level": ["<builtin>.RuntimeError", "torch._C._exit_dual_level"], "torch._C._exit_dual_level": [], "forward_ad.make_dual": ["<builtin>.RuntimeError", "torch._VF._make_dual"], "torch._VF._make_dual": [], "forward_ad.unpack_dual": ["torch._VF._unpack_dual"], "torch._VF._unpack_dual": [], "forward_ad.dual_level.__init__": ["<builtin>.super"], "forward_ad.dual_level.__enter__": ["forward_ad.enter_dual_level"], "forward_ad.dual_level.__exit__": ["forward_ad.exit_dual_level"], "functional._as_tuple": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.enumerate", "<builtin>.type"], "functional._tuple_postprocess": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.len"], "functional._grad_preprocess": ["<builtin>.tuple"], "functional._grad_postprocess": ["<builtin>.isinstance", "<builtin>.tuple", "functional._grad_postprocess"], "functional._validate_v": ["<builtin>.zip", "<builtin>.enumerate", "<builtin>.len", "<builtin>.RuntimeError"], "functional._check_requires_grad": ["<builtin>.enumerate", "<builtin>.RuntimeError"], "functional._autograd_grad": ["<builtin>.isinstance", "torch.autograd.grad", "<builtin>.len", "<builtin>.tuple", "<builtin>.zip"], "functional._fill_in_zeros": ["<builtin>.tuple", "torch.zeros_like", "<builtin>.enumerate", "<builtin>.RuntimeError"], "functional.vjp": ["functional._as_tuple", "torch.is_grad_enabled", "torch.set_grad_enabled", "functional._check_requires_grad", "functional._grad_postprocess", "functional._validate_v", "torch.enable_grad", "<builtin>.len", "<builtin>.RuntimeError", "functional._tuple_postprocess", "functional._fill_in_zeros", "functional._autograd_grad", "functional._grad_preprocess"], "functional.jvp": ["functional._as_tuple", "functional._fill_in_zeros", "functional._check_requires_grad", "functional._grad_postprocess", "torch.zeros_like", "functional._validate_v", "torch.enable_grad", "<builtin>.len", "<builtin>.RuntimeError", "functional._tuple_postprocess", "<builtin>.tuple", "functional._autograd_grad", "functional._grad_preprocess"], "functional._construct_standard_basis_for": ["<builtin>.sum", "torch.tensor", "<builtin>.len", "<builtin>.tuple", "<builtin>.zip"], "functional.jacobian": ["functional._as_tuple", "torch.zeros_like", "torch.enable_grad", "<builtin>.RuntimeError", "functional._autograd_grad", "torch._vmap_internals._vmap", "<builtin>.enumerate", "<builtin>.len", "functional._grad_preprocess", "functional.hessian.jac_func", "functional._check_requires_grad", "functional._construct_standard_basis_for", "<builtin>.range", "functional._grad_postprocess", "<builtin>.tuple", "functional.hessian.ensure_single_output_function", "torch.stack", "functional._tuple_postprocess", "<builtin>.zip"], "functional.hessian.jac_func": ["functional.jacobian", "functional._check_requires_grad"], "functional.hessian.ensure_single_output_function": ["<builtin>.isinstance", "functional._as_tuple", "functional._check_requires_grad", "<builtin>.RuntimeError"], "functional.jacobian.vjp": ["<builtin>.enumerate", "torch.zeros_like", "<builtin>.list", "<builtin>.tuple", "functional._autograd_grad"], "torch._vmap_internals._vmap": [], "functional.hessian": ["functional._tuple_postprocess", "functional._as_tuple", "functional.jacobian"], "functional.vhp": ["<builtin>.isinstance", "functional._as_tuple", "torch.is_grad_enabled", "torch.set_grad_enabled", "functional._check_requires_grad", "functional._grad_postprocess", "functional._validate_v", "torch.enable_grad", "<builtin>.len", "<builtin>.RuntimeError", "functional._tuple_postprocess", "functional._fill_in_zeros", "functional._autograd_grad", "functional._grad_preprocess"], "functional.hvp": ["<builtin>.isinstance", "functional._as_tuple", "torch.is_grad_enabled", "torch.set_grad_enabled", "functional._fill_in_zeros", "functional._check_requires_grad", "functional._grad_postprocess", "torch.zeros_like", "functional._validate_v", "torch.enable_grad", "<builtin>.len", "<builtin>.RuntimeError", "functional._tuple_postprocess", "<builtin>.tuple", "functional._autograd_grad", "functional._grad_preprocess"], "function": ["function._iter_filter", "function._nested_map"], "function._ContextMethodMixin.save_for_backward": [], "function._ContextMethodMixin.mark_dirty": [], "function._ContextMethodMixin.mark_shared_storage": ["warnings.warn"], "function._ContextMethodMixin.mark_non_differentiable": [], "function._ContextMethodMixin.set_materialize_grads": [], "function._HookMixin._register_hook": ["collections.OrderedDict", "torch.utils.hooks.RemovableHandle"], "function.BackwardCFunction.apply": ["torch._C._FunctionBase._forward_cls.backward"], "torch._C._FunctionBase._forward_cls.backward": [], "function.FunctionMeta.__init__": ["<builtin>.super", "<builtin>.type"], "function.Function.__init__": ["warnings.warn"], "function.Function.__call__": ["<builtin>.RuntimeError"], "function.Function.forward": ["<builtin>.NotImplementedError"], "function.Function.backward": ["<builtin>.NotImplementedError"], "function.once_differentiable": ["functools.wraps"], "function.once_differentiable.wrapper": ["torch.no_grad", "function.once_differentiable.wrapper.fake_requires_grad", "torch.is_grad_enabled", "<builtin>.any", "<builtin>.isinstance", "torch._C._functions.DelayedError", "<builtin>.len"], "torch._C._functions.DelayedError": [], "function.once_differentiable.wrapper.fake_requires_grad": [], "function.traceable": [], "function.InplaceFunction.__init__": ["<builtin>.super"], "function._nested_map": [], "function._nested_map._map": ["torch.typename", "function._nested_map._map", "function.<lambda5>", "<builtin>.hasattr", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "function.<lambda6>"], "function.<lambda5>": ["<builtin>.isinstance"], "function.<lambda6>": [], "function._jit_unwrap_structured": ["<builtin>.hasattr"], "function._iter_filter": [], "function._iter_filter._iter": ["torch.typename", "function.<lambda1>", "function.<lambda2>", "function.<lambda4>", "function.<lambda3>", "<builtin>.ValueError", "<builtin>.isinstance", "function._iter_filter._iter", "function._jit_unwrap_structured"], "function.<lambda4>": ["<builtin>.isinstance"], "function.<lambda2>": ["<builtin>.isinstance"], "function.<lambda3>": ["<builtin>.isinstance"], "function.<lambda1>": ["<builtin>.isinstance"], "function._unflatten": ["function._unflatten.unflatten_helper"], "function._unflatten.unflatten_helper": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.hasattr", "function._unflatten.unflatten_helper"], "function.NestedIOFunction._do_forward": ["<builtin>.super", "function._iter_filter._iter", "<builtin>.tuple", "function._unflatten"], "function.NestedIOFunction._do_backward": ["<builtin>.super"], "function.NestedIOFunction.backward": ["function.NestedIOFunction.backward_extended", "function._iter_filter._iter", "<builtin>.tuple", "function._unflatten"], "function.NestedIOFunction.backward_extended": [], "function.NestedIOFunction.forward": ["function._iter_filter._iter", "function.NestedIOFunction.forward_extended", "function._nested_map._map", "<builtin>.tuple"], "function.NestedIOFunction.forward_extended": [], "function.NestedIOFunction.save_for_backward": ["function._iter_filter._iter", "<builtin>.tuple"], "function.NestedIOFunction.saved_tensors": ["<builtin>.super", "function._unflatten"], "function.NestedIOFunction.mark_dirty": ["function._iter_filter._iter", "<builtin>.tuple"], "function.NestedIOFunction.mark_non_differentiable": ["function._iter_filter._iter", "<builtin>.tuple"], "gradcheck": [], "gradcheck._is_float_or_complex_tensor": ["torch.overrides.is_tensor_like"], "torch.overrides.is_tensor_like": [], "gradcheck._allocate_jacobians_with_inputs": ["<builtin>.tuple", "gradcheck._is_float_or_complex_tensor"], "gradcheck._allocate_jacobians_with_outputs": ["<builtin>.tuple", "gradcheck._is_float_or_complex_tensor"], "gradcheck._iter_tensors": ["<builtin>.isinstance", "torch.overrides.is_tensor_like", "gradcheck._iter_tensors"], "gradcheck._iter_tensor": ["<builtin>.range", "<builtin>.list", "<builtin>.len", "itertools.product", "<builtin>.enumerate", "<builtin>.sum", "gradcheck._iter_tensor.get_stride"], "gradcheck._iter_tensor.get_stride": ["<builtin>.reversed", "<builtin>.len", "<builtin>.range"], "gradcheck._get_numerical_jacobian": ["gradcheck.get_numerical_jacobian_wrt_specific_input", "<builtin>.ValueError", "torch.overrides.is_tensor_like", "<builtin>.any", "<builtin>.zip", "gradcheck.get_numerical_jacobian.fn_pack_inps", "gradcheck._as_tuple", "<builtin>.enumerate", "gradcheck._iter_tensors"], "gradcheck._as_tuple": ["<builtin>.isinstance", "<builtin>.tuple"], "gradcheck.get_numerical_jacobian.fn_pack_inps": [], "gradcheck.get_numerical_jacobian_wrt_specific_input": ["gradcheck._combine_jacobian_cols", "gradcheck._get_numerical_jvp_fn", "functools.partial", "gradcheck._compute_numerical_jvps_wrt_specific_input", "gradcheck._with_prepare_inputs", "gradcheck._iter_tensor"], "gradcheck.get_numerical_jacobian": ["gradcheck._get_numerical_jacobian", "<builtin>.tuple", "<builtin>.ValueError", "warnings.warn"], "gradcheck._compute_numerical_gradient": ["<builtin>.tuple", "gradcheck._compute_numerical_gradient.compute", "gradcheck._with_prepare_inputs.wrapped_fn", "<builtin>.zip"], "gradcheck._with_prepare_inputs.wrapped_fn": ["<builtin>.tuple", "torch.overrides.is_tensor_like", "gradcheck._prepare_input", "gradcheck._as_tuple", "gradcheck.get_numerical_jacobian.fn_pack_inps", "<builtin>.enumerate"], "gradcheck._compute_numerical_gradient.compute": [], "gradcheck._compute_numerical_jvps_wrt_specific_input": ["<builtin>.isinstance", "gradcheck._get_numerical_jvp_fn.jvp_fn", "<builtin>.zip"], "gradcheck._get_numerical_jvp_fn.jvp_fn": ["gradcheck._compute_numerical_gradient"], "gradcheck._combine_jacobian_cols": ["gradcheck._allocate_jacobians_with_outputs", "<builtin>.enumerate"], "gradcheck._prepare_input": [], "gradcheck.check_outputs_same_dtype_and_shape": [], "gradcheck._with_prepare_inputs": [], "gradcheck._get_numerical_jvp_fn": [], "gradcheck._get_analytical_jacobian_forward_ad": ["torch.autograd.forward_ad.make_dual", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.range", "torch.autograd.forward_ad.dual_level", "gradcheck._allocate_jacobians_with_outputs", "<builtin>.filter", "torch.overrides.is_tensor_like", "<builtin>.any", "gradcheck._as_tuple", "<builtin>.zip", "torch.zeros_like", "itertools.product", "torch.autograd.forward_ad.unpack_dual", "<builtin>.enumerate", "gradcheck._run_slow_mode_and_get_error.new_fn"], "torch.autograd.forward_ad.dual_level": [], "torch.autograd.forward_ad.make_dual": [], "gradcheck._run_slow_mode_and_get_error.new_fn": ["<builtin>.list", "gradcheck._as_tuple"], "gradcheck._get_input_to_perturb": [], "gradcheck._reshape_tensor_or_tuple": ["<builtin>.isinstance"], "gradcheck._mul_tensor_or_tuple": ["<builtin>.isinstance"], "gradcheck._get_numerical_jvp_wrt_specific_input": ["gradcheck._get_numerical_jvp_fn", "functools.partial", "gradcheck._get_input_to_perturb", "gradcheck._reshape_tensor_or_tuple", "gradcheck._compute_numerical_jvps_wrt_specific_input", "gradcheck._mul_tensor_or_tuple", "gradcheck._with_prepare_inputs"], "gradcheck._get_numerical_vJu": ["gradcheck._dot_with_type_promotion", "gradcheck._get_numerical_jvp_wrt_specific_input", "gradcheck._is_float_or_complex_tensor", "<builtin>.len", "gradcheck._as_tuple", "<builtin>.zip", "<builtin>.enumerate"], "gradcheck._dot_with_type_promotion": [], "gradcheck._check_jacobians_equal": ["<builtin>.zip"], "gradcheck._stack_and_check_tensors": ["gradcheck._allocate_jacobians_with_inputs", "<builtin>.list", "<builtin>.enumerate", "gradcheck._iter_tensors"], "gradcheck._check_analytical_jacobian_attributes": ["gradcheck._stack_and_check_tensors", "<builtin>.list", "gradcheck._compute_analytical_jacobian_rows", "gradcheck._get_analytical_vjps_wrt_specific_output", "gradcheck._iter_tensors", "gradcheck._check_jacobians_equal"], "gradcheck._check_analytical_jacobian_attributes.vjp_fn": ["torch.autograd.grad"], "gradcheck._get_analytical_vjps_wrt_specific_output": ["gradcheck._check_analytical_jacobian_attributes.vjp_fn"], "gradcheck._compute_analytical_jacobian_rows": ["gradcheck._check_analytical_jacobian_attributes.vjp_fn", "<builtin>.range", "gradcheck.get_analytical_jacobian.vjp_fn", "torch.zeros_like", "<builtin>.enumerate"], "gradcheck._get_analytical_vJu_backward_mode": ["gradcheck._check_analytical_jacobian_attributes", "torch.view_as_real", "<builtin>.zip"], "gradcheck.get_analytical_jacobian": ["<builtin>.ValueError", "gradcheck._stack_and_check_tensors", "warnings.warn", "<builtin>.list", "gradcheck._compute_analytical_jacobian_rows", "gradcheck._iter_tensors", "gradcheck._check_jacobians_equal"], "gradcheck.get_analytical_jacobian.vjp_fn": ["torch.autograd.grad"], "gradcheck._get_analytical_jacobian": ["gradcheck._check_analytical_jacobian_attributes", "<builtin>.float"], "gradcheck._check_inputs": ["<builtin>.all", "<builtin>.ValueError", "<builtin>.RuntimeError", "<builtin>.isinstance", "torch.overrides.is_tensor_like", "warnings.warn", "<builtin>.any", "<builtin>.zip", "<builtin>.enumerate"], "gradcheck._check_outputs": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.any"], "gradcheck._check_no_differentiable_outputs": ["gradcheck._get_numerical_jacobian", "torch.ne"], "torch.ne": [], "gradcheck._check_no_differentiable_outputs_fast": ["torch.zeros_like", "gradcheck._get_numerical_jvp_wrt_specific_input", "<builtin>.zip"], "gradcheck._get_failed_batched_grad_test_msg": [], "gradcheck._test_batched_grad": ["torch.allclose", "functools.partial", "<builtin>.range", "torch.stack", "warnings.filterwarnings", "torch._vmap_internals.vmap", "<builtin>.list", "<builtin>.enumerate", "torch.randn_like", "gradcheck._test_batched_grad.vjp", "<builtin>.zip", "gradcheck._get_failed_batched_grad_test_msg", "warnings.catch_warnings", "gradcheck._iter_tensors"], "gradcheck._test_batched_grad.vjp": ["<builtin>.tuple", "torch.zeros", "<builtin>.zip"], "warnings.filterwarnings": [], "torch._vmap_internals.vmap": [], "gradcheck._test_backward_mul_by_grad_output": ["torch.allclose", "<builtin>.isinstance", "<builtin>.list", "<builtin>.str", "torch.autograd.grad", "<builtin>.zip", "torch.zeros_like", "gradcheck._iter_tensors"], "gradcheck._test_undefined_grad": ["gradcheck._test_undefined_grad.check_undefined_grad_support", "<builtin>.all", "<builtin>.range", "<builtin>.isinstance", "gradcheck._differentiable_outputs", "<builtin>.list", "<builtin>.len", "torch._C._functions.UndefinedGrad", "<builtin>.enumerate", "gradcheck._iter_tensors"], "gradcheck._test_undefined_grad.warn_bc_breaking": ["warnings.warn"], "gradcheck._test_undefined_grad.check_undefined_grad_support": ["torch.zeros_like", "<builtin>.zip", "gradcheck._test_undefined_grad.warn_bc_breaking", "torch.autograd.grad"], "torch._C._functions.UndefinedGrad": [], "gradcheck._differentiable_outputs": ["<builtin>.tuple", "gradcheck._as_tuple"], "gradcheck._get_notallclose_msg": [], "gradcheck._transpose": ["<builtin>.list", "<builtin>.zip"], "gradcheck._real_and_imag_output": ["gradcheck._real_and_imag_output.apply_to_c_outs"], "gradcheck._real_and_imag_output.apply_to_c_outs": [], "gradcheck._real_and_imag_output.apply_to_c_outs.wrapped_fn": ["<builtin>.tuple", "torch.real", "torch.imag", "gradcheck._as_tuple"], "torch.imag": [], "torch.real": [], "gradcheck._real_and_imag_input": ["gradcheck._real_and_imag_input.apply_to_c_inps"], "gradcheck._real_and_imag_input.apply_to_c_inps": [], "gradcheck._real_and_imag_input.apply_to_c_inps.wrapped_fn": ["gradcheck._as_tuple", "<builtin>.list", "gradcheck._real_and_imag_input.<lambda2>", "gradcheck._real_and_imag_input.<lambda1>"], "gradcheck._real_and_imag_input.<lambda1>": [], "gradcheck._real_and_imag_input.<lambda2>": [], "gradcheck._gradcheck_real_imag": ["gradcheck._real_and_imag_output", "torch.overrides.is_tensor_like", "<builtin>.any", "gradcheck._differentiable_outputs", "gradcheck._real_and_imag_input", "gradcheck._as_tuple", "<builtin>.enumerate"], "gradcheck._slow_gradcheck": ["gradcheck._get_numerical_jacobian", "gradcheck._get_notallclose_msg", "gradcheck._check_analytical_jacobian_attributes", "gradcheck._transpose", "<builtin>.zip", "gradcheck._get_analytical_jacobian_forward_ad", "gradcheck._allclose_with_type_promotion", "gradcheck._as_tuple", "gradcheck._check_no_differentiable_outputs", "<builtin>.enumerate"], "gradcheck._allclose_with_type_promotion": ["torch.promote_types", "torch.allclose"], "gradcheck._to_real_dtype": [], "gradcheck._vec_from_tensor": ["torch.rand", "gradcheck._to_real_dtype", "torch.sparse_coo_tensor"], "gradcheck._get_inp_tensors": ["<builtin>.enumerate", "torch.overrides.is_tensor_like"], "gradcheck._adjusted_atol": ["<builtin>.isinstance", "<builtin>.float", "torch.sparse.sum"], "gradcheck._run_slow_mode_and_get_error": ["gradcheck._get_analytical_jacobian", "gradcheck._get_numerical_jacobian", "torch.allclose", "gradcheck._get_analytical_jacobian_forward_ad"], "gradcheck._to_flat_dense_if_sparse": [], "gradcheck._make_vectors": ["gradcheck._to_flat_dense_if_sparse", "torch.Generator", "gradcheck._vec_from_tensor"], "gradcheck._check_analytical_numerical_equal": ["gradcheck._get_notallclose_msg", "gradcheck._adjusted_atol", "gradcheck._allclose_with_type_promotion", "<builtin>.enumerate", "gradcheck._run_slow_mode_and_get_error"], "gradcheck._fast_gradcheck": ["gradcheck._make_vectors", "gradcheck._check_analytical_numerical_equal", "gradcheck._get_numerical_vJu", "gradcheck._get_analytical_jacobian_forward_ad", "gradcheck._get_analytical_vJu_backward_mode", "gradcheck._as_tuple", "gradcheck._get_inp_tensors", "gradcheck._check_no_differentiable_outputs_fast"], "gradcheck.gradcheck": ["<builtin>.locals", "gradcheck._gradcheck_helper"], "gradcheck._gradcheck_helper": ["gradcheck._gradcheck_real_imag", "gradcheck._check_outputs", "gradcheck._test_batched_grad", "gradcheck._differentiable_outputs", "gradcheck._test_undefined_grad", "gradcheck._as_tuple", "gradcheck._check_inputs", "<builtin>.enumerate", "gradcheck._test_backward_mul_by_grad_output"], "gradcheck.gradgradcheck": ["<builtin>.tuple", "gradcheck.gradgradcheck.randn_like", "<builtin>.len", "gradcheck._as_tuple", "gradcheck.gradcheck"], "gradcheck.gradgradcheck.randn_like": ["torch.testing.make_non_contiguous", "torch.randn_like"], "gradcheck.gradgradcheck.new_func": ["gradcheck._differentiable_outputs", "<builtin>.tuple", "torch.overrides.is_tensor_like", "torch.autograd.grad"], "grad_mode": ["typing.TypeVar"], "grad_mode._DecoratorContextManager.__call__": ["functools.wraps", "grad_mode._DecoratorContextManager._wrap_generator", "inspect.isgeneratorfunction", "typing.cast"], "inspect.isgeneratorfunction": [], "grad_mode._DecoratorContextManager._wrap_generator": ["functools.wraps"], "grad_mode._DecoratorContextManager.__call__.decorate_context": [], "grad_mode._DecoratorContextManager._wrap_generator.generator_context": ["<builtin>.type", "sys.exc_info"], "grad_mode._DecoratorContextManager.__enter__": [], "grad_mode._DecoratorContextManager.__exit__": [], "grad_mode.no_grad.__init__": ["torch._jit_internal.is_scripting", "<builtin>.super"], "grad_mode.no_grad.__enter__": ["torch.set_grad_enabled", "torch.is_grad_enabled"], "grad_mode.no_grad.__exit__": ["torch.set_grad_enabled"], "grad_mode.enable_grad.__enter__": ["torch._C._set_grad_enabled", "torch.is_grad_enabled"], "torch._C._set_grad_enabled": [], "grad_mode.enable_grad.__exit__": ["torch._C._set_grad_enabled"], "grad_mode.set_grad_enabled.__init__": ["torch._C._set_grad_enabled", "torch.is_grad_enabled"], "grad_mode.set_grad_enabled.__enter__": [], "grad_mode.set_grad_enabled.__exit__": ["torch._C._set_grad_enabled"], "grad_mode.inference_mode.__init__": ["torch._jit_internal.is_scripting", "<builtin>.super"], "grad_mode.inference_mode.__enter__": ["torch._C._InferenceMode"], "torch._C._InferenceMode": [], "grad_mode.inference_mode.__exit__": [], "graph": ["<builtin>.type", "graph._register_custom_builtin", "<builtin>.dict"], "graph.saved_tensors_hooks.__init__": [], "graph.saved_tensors_hooks.__enter__": ["torch._C._autograd._register_default_hooks"], "torch._C._autograd._register_default_hooks": [], "graph.saved_tensors_hooks.__exit__": ["torch._C._autograd._reset_default_hooks"], "torch._C._autograd._reset_default_hooks": [], "graph.save_on_cpu.__init__": [], "graph.save_on_cpu.__init__.pack_to_cpu": ["torch.cuda.is_available", "torch.empty"], "graph.save_on_cpu.__init__.unpack_from_cpu": [], "graph.save_on_cpu.__enter__": ["torch._C._autograd._register_default_hooks"], "graph.save_on_cpu.__exit__": ["torch._C._autograd._reset_default_hooks"], "profiler": ["contextlib.contextmanager"], "profiler.ContextDecorator.__enter__": [], "profiler.ContextDecorator.__exit__": [], "profiler.ContextDecorator.__call__": ["functools.wraps"], "profiler.ContextDecorator.__call__.wrapped": [], "profiler.profile.__init__": ["<builtin>.set", "warnings.warn", "torch.cuda.is_available", "torch.autograd._supported_activities", "<builtin>.len", "profiler.supported_activities", "profiler._default_schedule_fn"], "torch.autograd._supported_activities": [], "profiler.profile.config": ["torch.autograd.ProfilerConfig"], "profiler.profile.__enter__": ["profiler.profile._start_trace", "profiler.profile._prepare_trace", "<builtin>.RuntimeError", "profiler.profile.start"], "profiler.profile._prepare_trace": ["profiler.profile.config", "torch.autograd._prepare_profiler"], "profiler.profile._start_trace": ["torch.autograd._enable_profiler", "profiler.profile.config", "profiler.profile.add_metadata_json", "json.dumps", "torch.autograd.kineto_available", "profiler.profile._get_distributed_info"], "torch.autograd._prepare_profiler": [], "torch.autograd._enable_profiler": [], "profiler.profile.__exit__": ["torch.autograd._disable_profiler", "torch.cuda.synchronize", "torch.autograd.profiler_util.EventList", "profiler.profile._parse_kineto_results", "profiler.profile.stop"], "torch.autograd._disable_profiler": [], "profiler.profile._parse_kineto_results": ["torch.autograd.profiler_util._rewrite_name", "profiler.profile._parse_kineto_results._cuda_memory_usage", "torch.autograd.profiler_util._filter_name", "torch.autograd.profiler_util.FunctionEvent", "torch.autograd.profiler_util.MemRecordsAcc", "torch.autograd.profiler_util._filter_stack_entry", "profiler.profile._parse_kineto_results._cpu_memory_usage"], "profiler.profile.__repr__": ["<builtin>.repr"], "profiler.profile.__str__": ["<builtin>.str"], "profiler.profile._check_finish": ["<builtin>.RuntimeError"], "profiler.profile.table": ["profiler.profile._check_finish"], "profiler.profile.export_chrome_trace": ["torch.autograd.kineto_available", "profiler.profile._check_finish", "os.remove", "<builtin>.open", "gzip.open", "tempfile.NamedTemporaryFile"], "torch.autograd.kineto_available": [], "profiler.profile.export_stacks": ["profiler.profile._check_finish"], "profiler.profile.key_averages": ["profiler.profile._check_finish"], "profiler.profile.total_average": ["profiler.profile._check_finish"], "profiler.profile.self_cpu_time_total": ["profiler.profile._check_finish"], "torch.autograd.profiler_util.MemRecordsAcc": [], "profiler.profile._parse_kineto_results._cpu_memory_usage": [], "profiler.profile._parse_kineto_results._cuda_memory_usage": [], "torch.autograd.profiler_util._filter_name": [], "torch.autograd.profiler_util._rewrite_name": [], "torch.autograd.profiler_util._filter_stack_entry": [], "torch.autograd.profiler_util.FunctionEvent": [], "profiler.profile._parse_kineto_results.<lambda1>": [], "profiler.record_function.__init__": ["torch.zeros"], "profiler.record_function.__enter__": ["torch.ops.profiler._record_function_enter"], "torch.ops.profiler._record_function_enter": [], "profiler.record_function.__exit__": ["torch.ops.profiler._record_function_exit"], "torch.ops.profiler._record_function_exit": [], "profiler.record_function._call_end_callbacks_on_future": ["torch.ops.profiler._call_end_callbacks_on_jit_fut", "<builtin>.RuntimeError"], "profiler.emit_nvtx.__init__": [], "profiler.emit_nvtx.__enter__": ["<builtin>.set", "torch.cuda.synchronize", "<builtin>.RuntimeError", "torch.autograd.ProfilerConfig", "torch.autograd._enable_profiler"], "profiler.emit_nvtx.__exit__": ["torch.autograd._disable_profiler", "torch.cuda.synchronize"], "profiler.load_nvprof": ["profiler.parse_nvprof_trace", "torch.autograd.profiler_util.EventList"], "profiler.parse_nvprof_trace": ["profiler.EnforceUnique.__init__", "torch._C._demangle", "sqlite3.connect", "torch.autograd.profiler_util.FunctionEvent", "profiler.EnforceUnique.see"], "profiler.EnforceUnique.__init__": ["<builtin>.set"], "profiler.EnforceUnique.see": ["<builtin>.str", "<builtin>.RuntimeError"], "sqlite3.connect": [], "torch._C._demangle": [], "profiler.parse_nvprof_trace.<lambda1>": [], "profiler_legacy": [], "profiler_legacy.profile.__init__": ["warnings.warn", "torch.cuda.is_available"], "profiler_legacy.profile.config": ["torch.autograd.ProfilerConfig"], "profiler_legacy.profile.__enter__": ["<builtin>.RuntimeError", "profiler_legacy.profile._start_trace"], "profiler_legacy.profile._start_trace": ["torch.autograd._enable_profiler_legacy", "profiler_legacy.profile.config"], "torch.autograd._enable_profiler_legacy": [], "profiler_legacy.profile.__exit__": ["torch.cuda.synchronize", "profiler_legacy._parse_legacy_records", "torch.autograd._disable_profiler_legacy", "torch.autograd.profiler_util.EventList"], "torch.autograd._disable_profiler_legacy": [], "profiler_legacy._parse_legacy_records": ["profiler_legacy._parse_legacy_records._get_record_key", "torch.autograd.profiler_util._filter_stack_entry", "itertools.chain", "torch.autograd.profiler_util._filter_name", "<builtin>.set", "<builtin>.len", "torch.autograd.profiler_util._rewrite_name", "torch.autograd.profiler_util.FunctionEvent"], "profiler_legacy.profile.__repr__": ["<builtin>.repr"], "profiler_legacy.profile.__str__": ["<builtin>.str"], "profiler_legacy.profile._check_finish": ["<builtin>.RuntimeError"], "profiler_legacy.profile.table": ["profiler_legacy.profile._check_finish"], "profiler_legacy.profile.export_chrome_trace": ["profiler_legacy.profile._check_finish"], "profiler_legacy.profile.export_stacks": ["profiler_legacy.profile._check_finish"], "profiler_legacy.profile.key_averages": ["profiler_legacy.profile._check_finish"], "profiler_legacy.profile.total_average": ["profiler_legacy.profile._check_finish"], "profiler_legacy.profile.self_cpu_time_total": ["profiler_legacy.profile._check_finish"], "profiler_legacy._parse_legacy_records._get_record_key": [], "profiler_legacy._parse_legacy_records.<lambda1>": [], "profiler_util": ["collections.namedtuple"], "profiler_util.EventList.__init__": ["<builtin>.super"], "profiler_util.EventList._build_tree": ["profiler_util.EventList._populate_cpu_children", "profiler_util.EventList._remove_dup_nodes", "profiler_util.EventList._set_backward_stacktraces"], "profiler_util.EventList._populate_cpu_children": ["<builtin>.len", "operator.attrgetter", "<builtin>.sorted", "itertools.groupby"], "profiler_util.EventList._remove_dup_nodes": ["<builtin>.len", "<builtin>.range", "<builtin>.enumerate", "<builtin>.set"], "profiler_util.EventList._set_backward_stacktraces": ["profiler_util.EventList._set_backward_stacktraces.bw_parent"], "profiler_util.EventList.__str__": ["profiler_util.EventList.table"], "profiler_util.EventList.table": ["profiler_util._build_table"], "profiler_util.EventList._populate_cpu_children.<lambda1>": [], "itertools.groupby": [], "profiler_util.EventList._populate_cpu_children.<lambda2>": [], "profiler_util.EventList._set_backward_stacktraces.bw_parent": ["profiler_util.EventList._set_backward_stacktraces.bw_parent"], "profiler_util.EventList.self_cpu_time_total": ["<builtin>.sum"], "profiler_util._build_table": ["profiler_util._format_time", "<builtin>.sum", "profiler_util._build_table.trim_path", "profiler_util._build_table.auto_scale_flops", "profiler_util._build_table.append", "<builtin>.str", "profiler_util.EventList.__init__", "<builtin>.sorted", "<builtin>.max", "<builtin>.min", "<builtin>.len", "<builtin>.any", "profiler_util._build_table.add_column", "profiler_util._build_table.flops_rate"], "profiler_util.EventList.export_chrome_trace": ["<builtin>.open", "<builtin>.len"], "profiler_util.EventList.supported_export_stacks_metrics": [], "profiler_util.EventList.export_stacks": ["<builtin>.str", "<builtin>.int", "<builtin>.ValueError", "<builtin>.open", "<builtin>.len", "<builtin>.getattr", "<builtin>.reversed", "profiler_util.EventList.supported_export_stacks_metrics"], "profiler_util.EventList.key_averages": ["collections.defaultdict", "profiler_util.EventList.key_averages.get_key", "profiler_util.EventList.__init__"], "profiler_util.EventList.key_averages.get_key": ["<builtin>.tuple", "<builtin>.str"], "profiler_util.EventList.total_average": ["profiler_util.FunctionEventAvg.__init__"], "profiler_util.FunctionEventAvg.__init__": [], "profiler_util._format_time": [], "profiler_util._format_time_share": [], "profiler_util._format_memory": ["<builtin>.abs", "<builtin>.str"], "profiler_util._attr_formatter": ["<builtin>.property"], "profiler_util._attr_formatter.<lambda1>": ["profiler_util._format_time", "<builtin>.getattr"], "profiler_util.FormattedTimesMixin": ["profiler_util._attr_formatter"], "profiler_util.FormattedTimesMixin.cpu_time": [], "profiler_util.FormattedTimesMixin.cuda_time": [], "profiler_util.Interval.__init__": [], "profiler_util.Interval.elapsed_us": [], "profiler_util.FunctionEvent.__init__": ["profiler_util.Interval.__init__"], "profiler_util.FunctionEvent.append_kernel": [], "profiler_util.FunctionEvent.append_cpu_child": ["<builtin>.isinstance"], "profiler_util.FunctionEvent.set_cpu_parent": ["<builtin>.isinstance"], "profiler_util.FunctionEvent.self_cpu_memory_usage": ["<builtin>.sum"], "profiler_util.FunctionEvent.self_cuda_memory_usage": ["<builtin>.sum"], "profiler_util.FunctionEvent.self_cpu_time_total": ["<builtin>.sum"], "profiler_util.FunctionEvent.cuda_time_total": ["<builtin>.sum"], "profiler_util.FunctionEvent.self_cuda_time_total": ["<builtin>.sum"], "profiler_util.FunctionEvent.cpu_time_total": [], "profiler_util.FunctionEvent.key": [], "profiler_util.FunctionEvent.__repr__": ["<builtin>.str"], "profiler_util.FunctionEventAvg.add": ["<builtin>.isinstance"], "profiler_util.FunctionEventAvg.__iadd__": ["profiler_util.FunctionEventAvg.add"], "profiler_util.FunctionEventAvg.__repr__": ["<builtin>.str"], "profiler_util.StringTable.__missing__": ["<builtin>.len", "torch._C._demangle"], "profiler_util.MemRecordsAcc.__init__": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.sorted", "<builtin>.zip"], "profiler_util.MemRecordsAcc.in_interval": ["bisect.bisect_right", "<builtin>.range", "bisect.bisect_left"], "profiler_util._filter_stack_entry": ["<builtin>.all"], "profiler_util._filter_name": [], "profiler_util._rewrite_name": ["collections.defaultdict.__init__"], "collections.defaultdict.__init__": [], "profiler_util._build_table.<lambda1>": ["<builtin>.getattr"], "profiler_util._build_table.add_column": ["<builtin>.str"], "profiler_util._build_table.auto_scale_flops": ["<builtin>.int", "math.log10", "<builtin>.max", "<builtin>.min", "<builtin>.len", "math.floor", "<builtin>.pow", "<builtin>.float"], "math.log10": [], "<builtin>.pow": [], "profiler_util._build_table.flops_rate": ["<builtin>.float"], "profiler_util._build_table.append": [], "profiler_util._build_table.trim_path": ["<builtin>.len"], "variable.VariableMeta.__instancecheck__": ["<builtin>.isinstance"], "torch._C._ImperativeEngine": [], "_tensorboard_vis": ["<builtin>.ImportError"], "_tensorboard_vis.dump_tensorboard_summary": ["_tensorboard_vis.visualize", "time.time", "tensorflow.python.summary.writer.writer.FileWriter", "tensorflow.core.util.event_pb2.Event"], "tensorflow.python.summary.writer.writer.FileWriter": [], "_tensorboard_vis.visualize": ["<builtin>.enumerate", "tensorflow.core.framework.graph_pb2.GraphDef", "<builtin>.str", "functools.partial", "_tensorboard_vis.visualize_rec", "<builtin>.isinstance", "_tensorboard_vis.visualize_graph_executor"], "_tensorboard_vis.visualize_graph_executor": ["<builtin>.iter", "<builtin>.enumerate", "<builtin>.repr", "_tensorboard_vis.visualize"], "_tensorboard_vis.visualize_rec": ["collections.defaultdict", "_tensorboard_vis.visualize_rec.add_node"], "_tensorboard_vis.visualize_rec.inline_graph": ["_tensorboard_vis.visualize_rec", "<builtin>.zip"], "_tensorboard_vis.visualize_rec.name_for": ["<builtin>.str"], "_tensorboard_vis.visualize_rec.add_fusion_group": ["_tensorboard_vis.visualize_rec.name_for", "_tensorboard_vis.visualize_rec.inline_graph"], "_tensorboard_vis.visualize_rec.add_graph_executor": ["_tensorboard_vis.visualize_rec.add_node", "functools.partial", "_tensorboard_vis.visualize_graph_executor", "_tensorboard_vis.visualize_rec.name_for", "<builtin>.next"], "_tensorboard_vis.visualize_rec.add_node": ["<builtin>.enumerate", "_tensorboard_vis.visualize_rec.add_graph_executor", "_tensorboard_vis.visualize_rec.add_fusion_group", "<builtin>.str", "_tensorboard_vis.visualize_rec.name_for"], "memory": ["contextlib.contextmanager"], "memory._host_allocator": ["_lazy_init", "torch._C._cuda_cudaHostAllocator"], "_lazy_init": [], "torch._C._cuda_cudaHostAllocator": [], "memory._free_mutex": ["torch._C._cuda_lock_mutex", "torch._C._cuda_unlock_mutex"], "torch._C._cuda_lock_mutex": [], "torch._C._cuda_unlock_mutex": [], "memory.caching_allocator_alloc": ["torch.cuda.current_device", "torch.cuda.device", "<builtin>.TypeError", "torch.cuda.current_stream", "_get_device_index", "torch._C._cuda_cudaCachingAllocator_raw_alloc", "<builtin>.isinstance"], "_get_device_index": [], "torch._C._cuda_cudaCachingAllocator_raw_alloc": [], "memory.caching_allocator_delete": ["torch._C._cuda_cudaCachingAllocator_raw_delete"], "torch._C._cuda_cudaCachingAllocator_raw_delete": [], "memory.set_per_process_memory_fraction": ["torch.cuda.current_device", "<builtin>.ValueError", "torch._C._cuda_setMemoryFraction", "<builtin>.TypeError", "_get_device_index", "<builtin>.isinstance", "_lazy_init"], "torch._C._cuda_setMemoryFraction": [], "memory.empty_cache": ["torch._C._cuda_emptyCache", "is_initialized"], "is_initialized": [], "torch._C._cuda_emptyCache": [], "memory.memory_stats": ["memory.memory_stats_as_nested_dict", "memory.memory_stats._recurse_add_to_result", "collections.OrderedDict"], "memory.memory_stats._recurse_add_to_result": ["memory.memory_stats._recurse_add_to_result", "<builtin>.isinstance", "<builtin>.len"], "memory.memory_stats_as_nested_dict": ["_get_device_index", "is_initialized", "torch._C._cuda_memoryStats"], "torch._C._cuda_memoryStats": [], "memory.reset_accumulated_memory_stats": ["_get_device_index", "torch._C._cuda_resetAccumulatedMemoryStats"], "torch._C._cuda_resetAccumulatedMemoryStats": [], "memory.reset_peak_memory_stats": ["_get_device_index", "torch._C._cuda_resetPeakMemoryStats"], "torch._C._cuda_resetPeakMemoryStats": [], "memory.reset_max_memory_allocated": ["warnings.warn", "memory.reset_peak_memory_stats"], "memory.reset_max_memory_cached": ["warnings.warn", "memory.reset_peak_memory_stats"], "memory.memory_allocated": ["memory.memory_stats"], "memory.max_memory_allocated": ["memory.memory_stats"], "memory.memory_reserved": ["memory.memory_stats"], "memory.max_memory_reserved": ["memory.memory_stats"], "memory.memory_cached": ["memory.memory_reserved", "warnings.warn"], "memory.max_memory_cached": ["memory.max_memory_reserved", "warnings.warn"], "memory.memory_snapshot": ["torch._C._cuda_memorySnapshot"], "torch._C._cuda_memorySnapshot": [], "memory.memory_summary": ["_get_device_index", "memory.memory_stats"], "memory.memory_summary._format_size": [], "memory.memory_summary._format_count": [], "memory.list_gpu_processes": ["pynvml.nvmlInit", "pynvml.nvmlDeviceGetHandleByIndex", "_get_device_index", "<builtin>.len", "pynvml.nvmlDeviceGetComputeRunningProcesses"], "pynvml.nvmlInit": [], "pynvml.nvmlDeviceGetHandleByIndex": [], "pynvml.nvmlDeviceGetComputeRunningProcesses": [], "memory.mem_get_info": ["torch.cuda.current_device", "torch.cuda.cudart", "_get_device_index"], "torch.cuda.cudart": [], "nccl": [], "nccl.is_available": ["warnings.warn", "<builtin>.hasattr", "<builtin>.set"], "nccl.version": [], "nccl.unique_id": [], "nccl.init_rank": [], "nccl._check_sequence_type": ["<builtin>.TypeError", "<builtin>.isinstance"], "nccl.all_reduce": ["nccl._check_sequence_type"], "nccl.reduce": ["warnings.warn", "<builtin>.ValueError", "<builtin>.isinstance", "nccl._check_sequence_type"], "nccl.broadcast": ["nccl._check_sequence_type"], "nccl.all_gather": ["nccl._check_sequence_type"], "nccl.reduce_scatter": ["nccl._check_sequence_type"], "nvtx": ["contextlib.contextmanager"], "nvtx._NVTXStub._fail": ["<builtin>.RuntimeError"], "nvtx.range_push": ["nvtx._NVTXStub._fail", "torch._C._nvtx.rangePushA"], "torch._C._nvtx.rangePushA": [], "nvtx.range_pop": ["torch._C._nvtx.rangePop", "nvtx._NVTXStub._fail"], "torch._C._nvtx.rangePop": [], "nvtx.mark": ["torch._C._nvtx.markA", "nvtx._NVTXStub._fail"], "torch._C._nvtx.markA": [], "nvtx.range": ["nvtx.range_push", "nvtx.range_pop"], "profiler.init": ["<builtin>.RuntimeError", "<builtin>.hasattr", "cudart", "<builtin>.AssertionError", "check_error", "tempfile.NamedTemporaryFile"], "cudart": [], "check_error": [], "profiler.start": ["check_error", "cudart"], "profiler.stop": ["check_error", "cudart"], "profiler.profile": ["profiler.start", "profiler.stop"], "current_device": [], "random.get_rng_state_all": ["<builtin>.range", "random.get_rng_state", "device_count"], "device_count": [], "random.set_rng_state.cb": ["current_device", "typing.cast"], "_lazy_call": [], "random.set_rng_state_all": ["random.set_rng_state", "<builtin>.enumerate"], "random.manual_seed.cb": ["current_device"], "random.manual_seed_all": ["<builtin>.int", "_lazy_call"], "random.manual_seed_all.cb": ["<builtin>.range", "device_count"], "random.seed.cb": ["current_device"], "random.seed_all": ["_lazy_call"], "random.seed_all.cb": ["<builtin>.range", "device_count"], "streams": ["_utils._dummy_type", "<builtin>.hasattr"], "_utils._dummy_type": ["<builtin>.type"], "streams.Stream.__new__": ["<builtin>.super", "torch.cuda.device"], "streams.Stream.wait_event": [], "streams.Stream.wait_stream": ["streams.Stream.wait_event"], "streams.Stream.record_event": ["streams.Event.record", "torch._C._CudaEventBase.__init__"], "torch._C._CudaEventBase.__init__": [], "streams.Event.record": ["torch.cuda.current_stream", "<builtin>.super"], "streams.Stream.query": ["<builtin>.super"], "streams.Stream.synchronize": ["<builtin>.super"], "streams.Stream._as_parameter_": ["ctypes.c_void_p"], "ctypes.c_void_p": [], "streams.Stream.__eq__": ["<builtin>.isinstance", "<builtin>.super"], "streams.Stream.__hash__": ["<builtin>.hash"], "streams.Stream.__repr__": [], "streams.ExternalStream.__new__": ["<builtin>.super", "torch.cuda.device"], "streams.Event.__new__": ["<builtin>.super"], "streams.Event.from_ipc_handle": ["<builtin>.super"], "streams.Event.wait": ["torch.cuda.current_stream", "<builtin>.super"], "streams.Event.query": ["<builtin>.super"], "streams.Event.elapsed_time": ["<builtin>.super"], "streams.Event.synchronize": ["<builtin>.super"], "streams.Event.ipc_handle": ["<builtin>.super"], "streams.Event._as_parameter_": ["ctypes.c_void_p"], "streams.Event.__repr__": [], "_utils._dummy_type.init_err": ["<builtin>.RuntimeError"], "argparse_util": [], "argparse_util.env.__init__": ["os.environ.get", "<builtin>.super"], "argparse_util.env.__call__": ["<builtin>.setattr"], "argparse_util.check_env.__init__": ["<builtin>.bool", "os.environ.get", "<builtin>.int", "<builtin>.super"], "argparse_util.check_env.__call__": ["<builtin>.setattr"], "distributed_c10d": ["contextlib.contextmanager", "logging.getLogger", "distributed_c10d._reduce_op.__init__"], "distributed_c10d.supports_complex": [], "distributed_c10d.Backend.__new__": ["<builtin>.getattr", "<builtin>.isinstance", "<builtin>.ValueError"], "distributed_c10d.Backend.register_backend": ["<builtin>.setattr"], "distributed_c10d._reduce_op.__init__": ["<builtin>.setattr", "torch._C._distributed_c10d.ReduceOp.__members__.items"], "torch._C._distributed_c10d.ReduceOp.__members__.items": [], "distributed_c10d._reduce_op.__getattribute__": ["warnings.warn"], "distributed_c10d.GroupMember": ["<builtin>.object"], "distributed_c10d._store_based_barrier": ["time.time", "datetime.timedelta", "time.sleep", "distributed_c10d.get_world_size", "<builtin>.RuntimeError"], "distributed_c10d.get_world_size": ["distributed_c10d._get_group_size", "distributed_c10d._rank_not_in_group"], "distributed_c10d._rank_not_in_group": [], "distributed_c10d._get_group_rank": ["<builtin>.RuntimeError"], "distributed_c10d._get_global_rank": ["<builtin>.RuntimeError"], "distributed_c10d._get_group_size": ["distributed_c10d._get_default_group"], "distributed_c10d._get_default_group": ["distributed_c10d.is_initialized", "<builtin>.RuntimeError"], "distributed_c10d._check_single_tensor": ["<builtin>.RuntimeError", "<builtin>.isinstance"], "distributed_c10d._check_tensor_list": ["<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.all"], "distributed_c10d._check_op": ["<builtin>.RuntimeError"], "distributed_c10d._check_p2p_op_list": ["distributed_c10d.get_backend", "<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.all"], "distributed_c10d.get_backend": ["distributed_c10d._get_default_group", "<builtin>.RuntimeError", "distributed_c10d._rank_not_in_group"], "distributed_c10d.is_mpi_available": [], "distributed_c10d.is_nccl_available": [], "distributed_c10d.is_gloo_available": [], "distributed_c10d.is_initialized": [], "distributed_c10d._get_default_store": ["distributed_c10d.is_initialized", "distributed_c10d._get_default_group", "<builtin>.RuntimeError"], "distributed_c10d._update_default_pg": [], "distributed_c10d.init_process_group": ["distributed_c10d.barrier", "warnings.warn", "<builtin>.next", "distributed_c10d._store_based_barrier", "<builtin>.range", "torch._C._distributed_c10d.PrefixStore", "rendezvous.rendezvous", "distributed_c10d.get_backend", "distributed_c10d._new_process_group_helper", "<builtin>.RuntimeError", "<builtin>.isinstance", "distributed_c10d._update_default_pg"], "distributed_c10d._new_process_group_helper": ["<builtin>.len", "<builtin>.str", "torch._C._distributed_c10d.ProcessGroupNCCL.Options", "distributed_c10d.is_nccl_available", "torch._C._distributed_c10d._get_debug_mode", "torch._C._distributed_c10d.ProcessGroupMPI.create", "torch._C._distributed_c10d.PrefixStore", "torch._C._distributed_c10d.ProcessGroupGloo", "torch._C._distributed_c10d.ProcessGroupNCCL", "distributed_c10d._get_default_group", "distributed_c10d._create_process_group_wrapper", "<builtin>.getattr", "distributed_c10d.is_mpi_available", "<builtin>.RuntimeError", "<builtin>.isinstance"], "rendezvous.rendezvous": ["<builtin>.RuntimeError", "<builtin>.filter", "urllib.parse.urlunparse", "<builtin>.dict", "<builtin>.type", "urllib.parse.urlparse", "<builtin>.isinstance"], "torch._C._distributed_c10d.PrefixStore": [], "distributed_c10d.barrier": ["distributed_c10d._rank_not_in_group", "torch._C._distributed_c10d.BarrierOptions", "distributed_c10d._get_default_group", "distributed_c10d.get_backend", "<builtin>.RuntimeError", "<builtin>.isinstance"], "torch._C._distributed_c10d.ProcessGroupMPI.create": [], "torch._C._distributed_c10d.ProcessGroupGloo": [], "torch._C._distributed_c10d._get_debug_mode": [], "distributed_c10d._create_process_group_wrapper": ["torch._C._distributed_c10d._ProcessGroupWrapper", "torch._C._distributed_c10d.PrefixStore", "torch._C._distributed_c10d.ProcessGroupGloo"], "torch._C._distributed_c10d.ProcessGroupNCCL.Options": [], "torch._C._distributed_c10d.ProcessGroupNCCL": [], "distributed_c10d.destroy_process_group": ["<builtin>.RuntimeError", "distributed_c10d._update_default_pg"], "distributed_c10d.get_rank": ["distributed_c10d._get_group_rank", "distributed_c10d._get_default_group", "distributed_c10d._rank_not_in_group"], "distributed_c10d.isend": ["distributed_c10d._get_group_rank", "distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "distributed_c10d._get_default_group"], "distributed_c10d.irecv": ["distributed_c10d._get_group_rank", "distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "distributed_c10d._get_default_group"], "distributed_c10d.send": ["distributed_c10d._get_group_rank", "distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "distributed_c10d._get_default_group"], "distributed_c10d.recv": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "distributed_c10d._get_group_rank", "distributed_c10d._get_default_group", "distributed_c10d._get_global_rank"], "distributed_c10d.P2POp.__init__": [], "distributed_c10d.P2POp.__new__": ["distributed_c10d._check_single_tensor", "distributed_c10d._check_op"], "distributed_c10d._batch_p2p_manager": ["torch._C._distributed_c10d.ProcessGroupNCCL._group_start", "torch._C._distributed_c10d.ProcessGroupNCCL._group_end"], "torch._C._distributed_c10d.ProcessGroupNCCL._group_start": [], "torch._C._distributed_c10d.ProcessGroupNCCL._group_end": [], "distributed_c10d.batch_isend_irecv": ["distributed_c10d._check_p2p_op_list", "distributed_c10d.get_backend", "distributed_c10d._batch_p2p_manager"], "distributed_c10d.broadcast_multigpu": ["distributed_c10d._get_group_rank", "distributed_c10d._get_default_group", "distributed_c10d._rank_not_in_group", "torch._C._distributed_c10d.BroadcastOptions"], "torch._C._distributed_c10d.BroadcastOptions": [], "distributed_c10d.broadcast": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "distributed_c10d._get_group_rank", "distributed_c10d._get_default_group", "torch._C._distributed_c10d.BroadcastOptions"], "distributed_c10d.all_reduce_multigpu": ["distributed_c10d._get_default_group", "torch.view_as_real", "distributed_c10d._rank_not_in_group", "torch._C._distributed_c10d.AllreduceOptions"], "torch._C._distributed_c10d.AllreduceOptions": [], "distributed_c10d.all_reduce": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "torch.view_as_real", "torch._C._distributed_c10d.AllreduceOptions", "distributed_c10d._get_default_group", "<builtin>.RuntimeError", "distributed_c10d.supports_complex"], "distributed_c10d.all_reduce_coalesced": ["distributed_c10d._rank_not_in_group", "distributed_c10d._check_tensor_list", "torch.view_as_real", "torch._C._distributed_c10d.AllreduceCoalescedOptions", "distributed_c10d._get_default_group", "<builtin>.any", "<builtin>.RuntimeError", "distributed_c10d.supports_complex"], "torch._C._distributed_c10d.AllreduceCoalescedOptions": [], "distributed_c10d.reduce_multigpu": ["distributed_c10d._get_group_rank", "distributed_c10d._get_default_group", "distributed_c10d._rank_not_in_group", "torch._C._distributed_c10d.ReduceOptions"], "torch._C._distributed_c10d.ReduceOptions": [], "distributed_c10d.reduce": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "distributed_c10d._get_group_rank", "distributed_c10d._get_default_group", "torch._C._distributed_c10d.ReduceOptions"], "distributed_c10d.all_gather_multigpu": ["distributed_c10d._get_default_group", "torch.view_as_real", "distributed_c10d._rank_not_in_group"], "distributed_c10d._object_to_tensor": ["io.BytesIO", "pickle.Pickler", "torch.tensor", "torch.ByteStorage.from_buffer"], "torch.ByteStorage.from_buffer": [], "distributed_c10d._tensor_to_object": ["io.BytesIO", "pickle.Unpickler"], "distributed_c10d.all_gather_object": ["torch.zeros", "distributed_c10d._rank_not_in_group", "<builtin>.enumerate", "<builtin>.max", "<builtin>.isinstance", "<builtin>.int", "distributed_c10d.all_gather", "<builtin>.range", "distributed_c10d._tensor_to_object", "distributed_c10d._get_default_group", "torch.cuda.current_device", "torch.device", "distributed_c10d.get_world_size", "torch.empty", "distributed_c10d._object_to_tensor", "distributed_c10d.is_nccl_available"], "distributed_c10d.all_gather": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "torch.view_as_real", "distributed_c10d._get_default_group", "distributed_c10d._check_tensor_list"], "distributed_c10d.gather_object": ["torch.zeros", "distributed_c10d._validate_output_list_for_rank", "distributed_c10d._rank_not_in_group", "<builtin>.enumerate", "<builtin>.max", "<builtin>.int", "distributed_c10d.all_gather", "<builtin>.range", "distributed_c10d._tensor_to_object", "distributed_c10d.get_rank", "torch.cuda.current_device", "torch.device", "distributed_c10d.get_backend", "distributed_c10d.gather", "distributed_c10d.get_world_size", "torch.empty", "distributed_c10d._object_to_tensor"], "distributed_c10d._validate_output_list_for_rank": ["<builtin>.ValueError"], "distributed_c10d.gather": ["distributed_c10d._check_single_tensor", "distributed_c10d._validate_output_list_for_rank", "distributed_c10d._rank_not_in_group", "torch._C._distributed_c10d.GatherOptions", "distributed_c10d.get_rank", "distributed_c10d._get_default_group", "distributed_c10d._get_group_rank", "distributed_c10d._check_tensor_list"], "distributed_c10d.broadcast_object_list": ["distributed_c10d.broadcast", "distributed_c10d._rank_not_in_group", "<builtin>.len", "<builtin>.enumerate", "torch.cat", "torch.sum", "distributed_c10d._tensor_to_object", "distributed_c10d.get_rank", "torch.cuda.current_device", "torch.device", "distributed_c10d.get_backend", "<builtin>.ValueError", "torch.empty", "distributed_c10d._object_to_tensor", "<builtin>.zip"], "distributed_c10d.scatter_object_list": ["distributed_c10d.broadcast", "distributed_c10d._rank_not_in_group", "<builtin>.len", "<builtin>.max", "<builtin>.list", "distributed_c10d.scatter", "torch.tensor", "distributed_c10d.get_rank", "distributed_c10d._tensor_to_object", "torch.empty", "distributed_c10d._object_to_tensor", "<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.zip"], "distributed_c10d.scatter": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "torch.view_as_real", "distributed_c10d.get_rank", "distributed_c10d._get_default_group", "distributed_c10d._get_group_rank", "<builtin>.ValueError", "torch._C._distributed_c10d.ScatterOptions", "distributed_c10d._check_tensor_list"], "distributed_c10d._all_gather_base": ["distributed_c10d._check_single_tensor", "torch.view_as_real", "distributed_c10d._rank_not_in_group", "distributed_c10d._get_default_group"], "distributed_c10d.all_gather_coalesced": ["distributed_c10d._rank_not_in_group", "torch.view_as_real", "distributed_c10d._get_default_group", "<builtin>.RuntimeError", "<builtin>.isinstance", "distributed_c10d._check_tensor_list"], "torch._C._distributed_c10d.GatherOptions": [], "torch._C._distributed_c10d.ScatterOptions": [], "distributed_c10d.reduce_scatter_multigpu": ["distributed_c10d._get_default_group", "distributed_c10d._rank_not_in_group", "torch._C._distributed_c10d.ReduceScatterOptions"], "torch._C._distributed_c10d.ReduceScatterOptions": [], "distributed_c10d.reduce_scatter": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "distributed_c10d._get_default_group", "torch._C._distributed_c10d.ReduceScatterOptions", "distributed_c10d._check_tensor_list"], "distributed_c10d._reduce_scatter_base": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "torch._C._distributed_c10d.ReduceScatterOptions", "distributed_c10d._get_default_group"], "distributed_c10d.all_to_all_single": ["distributed_c10d._check_single_tensor", "distributed_c10d._rank_not_in_group", "torch.view_as_real", "distributed_c10d._get_default_group", "torch._C._distributed_c10d.AllToAllOptions"], "torch._C._distributed_c10d.AllToAllOptions": [], "distributed_c10d.all_to_all": ["distributed_c10d._rank_not_in_group", "torch.view_as_real", "distributed_c10d._get_default_group", "torch._C._distributed_c10d.AllToAllOptions", "distributed_c10d._check_tensor_list"], "torch._C._distributed_c10d.BarrierOptions": [], "distributed_c10d.monitored_barrier": ["distributed_c10d._get_default_group", "<builtin>.RuntimeError", "distributed_c10d._rank_not_in_group", "distributed_c10d.get_backend"], "torch._C._distributed_c10d._ProcessGroupWrapper": [], "distributed_c10d.new_group": ["distributed_c10d.barrier", "<builtin>.len", "<builtin>.enumerate", "distributed_c10d._store_based_barrier", "<builtin>.range", "distributed_c10d._get_default_group", "<builtin>.sorted", "distributed_c10d.get_backend", "distributed_c10d._new_process_group_helper", "<builtin>.RuntimeError", "<builtin>.list"], "distributed_c10d.new_subgroups": ["<builtin>.range", "torch.cuda.device_count", "distributed_c10d.new_group", "distributed_c10d.get_rank", "distributed_c10d.get_world_size", "<builtin>.ValueError", "torch.cuda.is_available", "<builtin>.list"], "distributed_c10d.new_subgroups_by_enumeration": ["<builtin>.len", "distributed_c10d.new_group", "distributed_c10d.get_rank", "logging.info", "distributed_c10d.get_world_size", "<builtin>.ValueError", "torch.cuda.is_available"], "launch": ["logging.getLogger", "launch.main"], "launch.parse_args": ["torch.distributed.run.get_args_parser"], "torch.distributed.run.get_args_parser": [], "launch.launch": ["<builtin>.ValueError", "torch.distributed.run.run"], "torch.distributed.run.run": [], "launch.main": ["launch.launch", "launch.parse_args", "warnings.warn"], "rendezvous": ["<builtin>.ImportError", "rendezvous.register_rendezvous_handler"], "rendezvous.register_rendezvous_handler": ["<builtin>.RuntimeError"], "urllib.parse.urlunparse": [], "rendezvous._rendezvous_error": ["<builtin>.ValueError"], "rendezvous._file_rendezvous_handler": ["torch.distributed.FileStore", "<builtin>.RuntimeError", "<builtin>.filter", "<builtin>.dict", "rendezvous._file_rendezvous_handler._error", "<builtin>.int", "urllib.parse.urlparse", "os.path.normpath"], "rendezvous._file_rendezvous_handler._error": ["rendezvous._rendezvous_error"], "rendezvous._tcp_rendezvous_handler": ["<builtin>.RuntimeError", "<builtin>.filter", "<builtin>.dict", "<builtin>.int", "torch.distributed.TCPStore", "urllib.parse.urlparse", "rendezvous._tcp_rendezvous_handler._error"], "rendezvous._tcp_rendezvous_handler._error": ["rendezvous._rendezvous_error"], "rendezvous._env_rendezvous_handler": ["rendezvous._env_rendezvous_handler._get_env_or_raise", "<builtin>.str", "<builtin>.RuntimeError", "<builtin>.filter", "<builtin>.dict", "torch.distributed.PrefixStore", "<builtin>.int", "torch.distributed.TCPStore", "urllib.parse.urlparse", "os.environ.get"], "rendezvous._env_rendezvous_handler._error": ["rendezvous._rendezvous_error"], "rendezvous._env_rendezvous_handler._env_error": ["rendezvous._env_rendezvous_handler._error"], "rendezvous._env_rendezvous_handler._get_env_or_raise": ["os.environ.get", "rendezvous._env_rendezvous_handler._env_error"], "run.get_args_parser": ["argparse.ArgumentParser"], "run.parse_args": ["run.get_args_parser"], "run.parse_min_max_nnodes": ["<builtin>.int", "<builtin>.len", "<builtin>.RuntimeError"], "run.determine_local_world_size": ["torch.cuda.is_available", "<builtin>.ValueError", "<builtin>.int", "os.cpu_count", "logging.info", "torch.cuda.device_count"], "os.cpu_count": [], "run.get_rdzv_endpoint": [], "run.get_use_env": ["<builtin>.hasattr"], "run.config_from_args": ["<builtin>.ValueError", "torch.distributed.elastic.rendezvous.utils._parse_rendezvous_config", "run.get_use_env", "<builtin>.str", "run.determine_local_world_size", "torch.distributed.elastic.multiprocessing.Std.from_str", "torch.distributed.launcher.api.LaunchConfig", "run.parse_min_max_nnodes", "<builtin>.print", "run.get_rdzv_endpoint"], "torch.distributed.elastic.rendezvous.utils._parse_rendezvous_config": [], "torch.distributed.elastic.multiprocessing.Std.from_str": [], "torch.distributed.launcher.api.LaunchConfig": [], "run.run_script_path": ["runpy.run_path"], "torch.distributed.launcher.api.elastic_launch": [], "run.main": ["run.parse_args", "run.run"], "utils._parse_remote_device": ["<builtin>.int", "torch.device", "<builtin>.ValueError", "<builtin>.len"], "bernoulli": [], "bernoulli.Bernoulli.__init__": ["torch.Size", "<builtin>.super", "<builtin>.isinstance", "<builtin>.ValueError", "torch.distributions.utils.broadcast_all"], "torch.distributions.utils.broadcast_all": [], "bernoulli.Bernoulli.expand": ["<builtin>.super", "torch.Size", "torch.distributions.exp_family.ExponentialFamily._get_checked_instance"], "torch.distributions.exp_family.ExponentialFamily._get_checked_instance": [], "bernoulli.Bernoulli._new": [], "bernoulli.Bernoulli.mean": [], "bernoulli.Bernoulli.variance": [], "bernoulli.Bernoulli": ["torch.distributions.utils.lazy_property"], "torch.distributions.utils.lazy_property": [], "bernoulli.Bernoulli.logits": ["torch.distributions.utils.probs_to_logits"], "torch.distributions.utils.probs_to_logits": [], "bernoulli.Bernoulli.probs": ["torch.distributions.utils.logits_to_probs"], "torch.distributions.utils.logits_to_probs": [], "bernoulli.Bernoulli.param_shape": [], "bernoulli.Bernoulli.sample": ["torch.no_grad", "torch.bernoulli", "torch.distributions.exp_family.ExponentialFamily._extended_shape"], "torch.distributions.exp_family.ExponentialFamily._extended_shape": [], "torch.bernoulli": [], "bernoulli.Bernoulli.log_prob": ["torch.distributions.exp_family.ExponentialFamily._validate_sample", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.distributions.utils.broadcast_all"], "torch.distributions.exp_family.ExponentialFamily._validate_sample": [], "bernoulli.Bernoulli.entropy": ["torch.nn.functional.binary_cross_entropy_with_logits"], "bernoulli.Bernoulli.enumerate_support": ["torch.arange", "<builtin>.len"], "bernoulli.Bernoulli._natural_params": ["torch.log"], "bernoulli.Bernoulli._log_normalizer": ["torch.log", "torch.exp"], "beta": [], "beta.Beta.__init__": ["<builtin>.isinstance", "torch.stack", "torch.tensor", "<builtin>.super", "torch.distributions.utils.broadcast_all", "<builtin>.float", "torch.distributions.dirichlet.Dirichlet"], "torch.distributions.dirichlet.Dirichlet": [], "beta.Beta.expand": ["torch.distributions.exp_family.ExponentialFamily._get_checked_instance", "<builtin>.super", "torch.Size"], "beta.Beta.mean": [], "beta.Beta.variance": [], "beta.Beta.rsample": [], "beta.Beta.log_prob": ["torch.distributions.exp_family.ExponentialFamily._validate_sample", "torch.stack"], "beta.Beta.entropy": [], "beta.Beta.concentration1": ["<builtin>.isinstance", "torch.tensor"], "beta.Beta.concentration0": ["<builtin>.isinstance", "torch.tensor"], "beta.Beta._natural_params": [], "beta.Beta._log_normalizer": ["torch.lgamma"], "torch.lgamma": [], "binomial": [], "binomial._clamp_by_zero": [], "binomial.Binomial.__init__": ["<builtin>.super", "<builtin>.ValueError", "torch.distributions.utils.broadcast_all"], "binomial.Binomial.expand": ["<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance", "torch.Size"], "torch.distributions.distribution.Distribution._get_checked_instance": [], "binomial.Binomial._new": [], "torch.distributions.constraints.dependent_property": [], "binomial.Binomial": ["torch.distributions.utils.lazy_property", "torch.distributions.constraints.dependent_property"], "binomial.Binomial.support": ["torch.distributions.constraints.integer_interval"], "torch.distributions.constraints.integer_interval": [], "binomial.Binomial.mean": [], "binomial.Binomial.variance": [], "binomial.Binomial.logits": ["torch.distributions.utils.probs_to_logits"], "binomial.Binomial.probs": ["torch.distributions.utils.logits_to_probs"], "binomial.Binomial.param_shape": [], "binomial.Binomial.sample": ["torch.distributions.distribution.Distribution._extended_shape", "torch.binomial", "torch.no_grad"], "torch.distributions.distribution.Distribution._extended_shape": [], "torch.binomial": [], "binomial.Binomial.log_prob": ["torch.log1p", "binomial._clamp_by_zero", "torch.abs", "torch.lgamma", "torch.distributions.distribution.Distribution._validate_sample", "torch.exp"], "torch.distributions.distribution.Distribution._validate_sample": [], "torch.log1p": [], "binomial.Binomial.enumerate_support": ["<builtin>.NotImplementedError", "<builtin>.len", "<builtin>.int", "torch.arange"], "categorical": [], "categorical.Categorical.__init__": ["torch.Size", "<builtin>.ValueError", "<builtin>.super"], "categorical.Categorical.expand": ["torch.Size", "<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance"], "categorical.Categorical._new": [], "categorical.Categorical": ["torch.distributions.constraints.dependent_property", "torch.distributions.utils.lazy_property"], "categorical.Categorical.support": ["torch.distributions.constraints.integer_interval"], "categorical.Categorical.logits": ["torch.distributions.utils.probs_to_logits"], "categorical.Categorical.probs": ["torch.distributions.utils.logits_to_probs"], "categorical.Categorical.param_shape": [], "categorical.Categorical.mean": ["torch.distributions.distribution.Distribution._extended_shape", "torch.full"], "categorical.Categorical.variance": ["torch.distributions.distribution.Distribution._extended_shape", "torch.full"], "categorical.Categorical.sample": ["torch.Size", "torch.multinomial", "torch.distributions.distribution.Distribution._extended_shape", "<builtin>.isinstance"], "torch.multinomial": [], "categorical.Categorical.log_prob": ["torch.distributions.distribution.Distribution._validate_sample", "torch.broadcast_tensors"], "torch.broadcast_tensors": [], "categorical.Categorical.entropy": ["torch.finfo", "torch.clamp"], "categorical.Categorical.enumerate_support": ["torch.arange", "<builtin>.len"], "cauchy": [], "cauchy.Cauchy.__init__": ["<builtin>.isinstance", "torch.distributions.utils.broadcast_all", "<builtin>.super", "torch.Size", "torch.distributions.distribution.Distribution.loc.size"], "torch.distributions.distribution.Distribution.loc.size": [], "cauchy.Cauchy.expand": ["torch.distributions.distribution.Distribution.scale.expand", "<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance", "torch.distributions.distribution.Distribution.loc.expand", "torch.Size"], "torch.distributions.distribution.Distribution.loc.expand": [], "torch.distributions.distribution.Distribution.scale.expand": [], "cauchy.Cauchy.mean": ["torch.full", "torch.distributions.distribution.Distribution._extended_shape"], "cauchy.Cauchy.variance": ["torch.full", "torch.distributions.distribution.Distribution._extended_shape"], "cauchy.Cauchy.rsample": ["torch.distributions.distribution.Distribution._extended_shape", "torch.distributions.distribution.Distribution.loc.new"], "torch.distributions.distribution.Distribution.loc.new": [], "cauchy.Cauchy.log_prob": ["torch.distributions.distribution.Distribution._validate_sample", "math.log", "torch.distributions.distribution.Distribution.scale.log"], "torch.distributions.distribution.Distribution.scale.log": [], "cauchy.Cauchy.cdf": ["torch.distributions.distribution.Distribution._validate_sample", "torch.atan"], "torch.atan": [], "cauchy.Cauchy.icdf": ["torch.tan"], "torch.tan": [], "cauchy.Cauchy.entropy": ["torch.distributions.distribution.Distribution.scale.log", "math.log"], "chi2": [], "chi2.Chi2.__init__": ["<builtin>.super"], "chi2.Chi2.expand": ["<builtin>.super", "torch.distributions.gamma.Gamma._get_checked_instance"], "torch.distributions.gamma.Gamma._get_checked_instance": [], "chi2.Chi2.df": [], "constraints": ["constraints._GreaterThan.__init__", "constraints._IndependentConstraint.__init__", "constraints._IntegerGreaterThan.__init__", "constraints._Dependent.__init__", "constraints._Interval.__init__"], "constraints.Constraint.check": [], "constraints.Constraint.__repr__": [], "constraints._Dependent.__init__": ["<builtin>.super"], "constraints._Dependent.is_discrete": ["<builtin>.NotImplementedError"], "constraints._Dependent.event_dim": ["<builtin>.NotImplementedError"], "constraints._Dependent.__call__": ["constraints._Dependent.__init__"], "constraints._Dependent.check": ["<builtin>.ValueError"], "constraints.is_dependent": ["<builtin>.isinstance"], "constraints._DependentProperty.__init__": ["<builtin>.super"], "constraints._DependentProperty.__call__": ["constraints._DependentProperty.__init__"], "constraints._IndependentConstraint.__init__": ["<builtin>.isinstance", "<builtin>.super"], "constraints._IndependentConstraint.is_discrete": [], "constraints._IndependentConstraint.event_dim": [], "constraints._IndependentConstraint.check": ["<builtin>.ValueError", "constraints._Real.check"], "constraints._Real.check": [], "constraints._IndependentConstraint.__repr__": ["<builtin>.repr"], "constraints._Boolean.check": [], "constraints._OneHot.check": [], "constraints._IntegerInterval.__init__": ["<builtin>.super"], "constraints._IntegerInterval.check": [], "constraints._IntegerInterval.__repr__": [], "constraints._IntegerLessThan.__init__": ["<builtin>.super"], "constraints._IntegerLessThan.check": [], "constraints._IntegerLessThan.__repr__": [], "constraints._IntegerGreaterThan.__init__": ["<builtin>.super"], "constraints._IntegerGreaterThan.check": [], "constraints._IntegerGreaterThan.__repr__": [], "constraints._GreaterThan.__init__": ["<builtin>.super"], "constraints._GreaterThan.check": [], "constraints._GreaterThan.__repr__": [], "constraints._GreaterThanEq.__init__": ["<builtin>.super"], "constraints._GreaterThanEq.check": [], "constraints._GreaterThanEq.__repr__": [], "constraints._LessThan.__init__": ["<builtin>.super"], "constraints._LessThan.check": [], "constraints._LessThan.__repr__": [], "constraints._Interval.__init__": ["<builtin>.super"], "constraints._Interval.check": [], "constraints._Interval.__repr__": [], "constraints._HalfOpenInterval.__init__": ["<builtin>.super"], "constraints._HalfOpenInterval.check": [], "constraints._HalfOpenInterval.__repr__": [], "constraints._Simplex.check": ["torch.all"], "torch.all": [], "constraints._Multinomial.__init__": [], "constraints._Multinomial.check": [], "constraints._LowerTriangular.check": [], "constraints._LowerCholesky.check": [], "constraints._CorrCholesky.check": ["constraints._LowerCholesky.check", "torch.finfo", "torch.linalg.norm"], "torch.linalg.norm": [], "constraints._PositiveDefinite.check": ["torch.linalg.cholesky_ex"], "torch.linalg.cholesky_ex": [], "constraints._Cat.__init__": ["<builtin>.super", "<builtin>.len", "<builtin>.isinstance", "<builtin>.list", "<builtin>.all"], "constraints._Cat.is_discrete": ["<builtin>.any"], "constraints._Cat.event_dim": ["<builtin>.max"], "constraints._Cat.check": ["<builtin>.zip", "torch.cat"], "constraints._Stack.__init__": ["<builtin>.isinstance", "<builtin>.all", "<builtin>.super", "<builtin>.list"], "constraints._Stack.is_discrete": ["<builtin>.any"], "constraints._Stack.event_dim": ["<builtin>.max"], "constraints._Stack.check": ["<builtin>.range", "torch.stack", "<builtin>.zip"], "constraint_registry": ["constraint_registry.ConstraintRegistry.__init__", "constraint_registry.ConstraintRegistry.register", "constraint_registry.ConstraintRegistry.register.<lambda1>.factory", "constraint_registry.ConstraintRegistry.register.<lambda1>"], "constraint_registry.ConstraintRegistry.__init__": ["<builtin>.super"], "constraint_registry.ConstraintRegistry.register": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.issubclass", "<builtin>.TypeError"], "constraint_registry.ConstraintRegistry.register.<lambda1>": ["constraint_registry.ConstraintRegistry.register"], "constraint_registry.ConstraintRegistry.__call__": ["<builtin>.NotImplementedError", "<builtin>.type"], "constraint_registry.ConstraintRegistry.register.<lambda1>.factory": [], "constraint_registry._transform_to_real": [], "constraint_registry._biject_to_independent": ["torch.distributions.transforms.IndependentTransform", "constraint_registry.ConstraintRegistry.__init__"], "torch.distributions.transforms.IndependentTransform": [], "constraint_registry._transform_to_independent": ["torch.distributions.transforms.IndependentTransform", "constraint_registry.ConstraintRegistry.__init__"], "constraint_registry._transform_to_positive": ["torch.distributions.transforms.ExpTransform"], "torch.distributions.transforms.ExpTransform": [], "constraint_registry._transform_to_greater_than": ["torch.distributions.transforms.ExpTransform", "torch.distributions.transforms.ComposeTransform", "torch.distributions.transforms.AffineTransform"], "torch.distributions.transforms.AffineTransform": [], "torch.distributions.transforms.ComposeTransform": [], "constraint_registry._transform_to_less_than": ["torch.distributions.transforms.ExpTransform", "torch.distributions.transforms.ComposeTransform", "torch.distributions.transforms.AffineTransform"], "constraint_registry._transform_to_interval": ["torch.distributions.transforms.SigmoidTransform", "<builtin>.isinstance", "torch.distributions.transforms.ComposeTransform", "torch.distributions.transforms.AffineTransform"], "torch.distributions.transforms.SigmoidTransform": [], "constraint_registry._biject_to_simplex": ["torch.distributions.transforms.StickBreakingTransform"], "torch.distributions.transforms.StickBreakingTransform": [], "constraint_registry._transform_to_simplex": ["torch.distributions.transforms.SoftmaxTransform"], "torch.distributions.transforms.SoftmaxTransform": [], "constraint_registry._transform_to_lower_cholesky": ["torch.distributions.transforms.LowerCholeskyTransform"], "torch.distributions.transforms.LowerCholeskyTransform": [], "constraint_registry._transform_to_corr_cholesky": ["torch.distributions.transforms.CorrCholeskyTransform"], "torch.distributions.transforms.CorrCholeskyTransform": [], "constraint_registry._biject_to_cat": ["constraint_registry.ConstraintRegistry.__init__", "torch.distributions.transforms.CatTransform"], "torch.distributions.transforms.CatTransform": [], "constraint_registry._transform_to_cat": ["constraint_registry.ConstraintRegistry.__init__", "torch.distributions.transforms.CatTransform"], "constraint_registry._biject_to_stack": ["constraint_registry.ConstraintRegistry.__init__", "torch.distributions.transforms.StackTransform"], "torch.distributions.transforms.StackTransform": [], "constraint_registry._transform_to_stack": ["constraint_registry.ConstraintRegistry.__init__", "torch.distributions.transforms.StackTransform"], "continuous_bernoulli": [], "continuous_bernoulli.ContinuousBernoulli.__init__": ["<builtin>.ValueError", "torch.distributions.utils.clamp_probs", "torch.Size", "<builtin>.super", "torch.distributions.constraints.unit_interval.check", "<builtin>.isinstance", "torch.distributions.utils.broadcast_all", "<builtin>.getattr"], "torch.distributions.constraints.unit_interval.check": [], "torch.distributions.utils.clamp_probs": [], "continuous_bernoulli.ContinuousBernoulli.expand": ["torch.Size", "torch.distributions.exp_family.ExponentialFamily._get_checked_instance", "<builtin>.super"], "continuous_bernoulli.ContinuousBernoulli._new": [], "continuous_bernoulli.ContinuousBernoulli._outside_unstable_region": ["torch.le", "torch.max", "torch.gt"], "torch.le": [], "torch.gt": [], "continuous_bernoulli.ContinuousBernoulli._cut_probs": ["continuous_bernoulli.ContinuousBernoulli._outside_unstable_region", "torch.where", "torch.ones_like"], "continuous_bernoulli.ContinuousBernoulli._cont_bern_log_norm": ["torch.le", "torch.zeros_like", "continuous_bernoulli.ContinuousBernoulli._outside_unstable_region", "torch.log1p", "torch.abs", "math.log", "torch.ge", "torch.where", "torch.pow", "continuous_bernoulli.ContinuousBernoulli._cut_probs", "torch.log", "torch.ones_like"], "torch.ge": [], "continuous_bernoulli.ContinuousBernoulli.mean": ["continuous_bernoulli.ContinuousBernoulli._outside_unstable_region", "torch.log1p", "torch.where", "torch.pow", "continuous_bernoulli.ContinuousBernoulli._cut_probs", "torch.log"], "continuous_bernoulli.ContinuousBernoulli.stddev": ["torch.sqrt"], "continuous_bernoulli.ContinuousBernoulli.variance": ["continuous_bernoulli.ContinuousBernoulli._outside_unstable_region", "torch.log1p", "torch.where", "torch.pow", "continuous_bernoulli.ContinuousBernoulli._cut_probs", "torch.log"], "continuous_bernoulli.ContinuousBernoulli": ["torch.distributions.utils.lazy_property"], "continuous_bernoulli.ContinuousBernoulli.logits": ["torch.distributions.utils.probs_to_logits"], "continuous_bernoulli.ContinuousBernoulli.probs": ["torch.distributions.utils.clamp_probs", "torch.distributions.utils.logits_to_probs"], "continuous_bernoulli.ContinuousBernoulli.param_shape": [], "continuous_bernoulli.ContinuousBernoulli.sample": ["torch.no_grad", "torch.distributions.exp_family.ExponentialFamily._extended_shape", "torch.rand", "continuous_bernoulli.ContinuousBernoulli.icdf"], "continuous_bernoulli.ContinuousBernoulli.icdf": ["continuous_bernoulli.ContinuousBernoulli._outside_unstable_region", "torch.log1p", "torch.where", "continuous_bernoulli.ContinuousBernoulli._cut_probs", "torch.log"], "continuous_bernoulli.ContinuousBernoulli.rsample": ["torch.distributions.exp_family.ExponentialFamily._extended_shape", "torch.rand", "continuous_bernoulli.ContinuousBernoulli.icdf"], "continuous_bernoulli.ContinuousBernoulli.log_prob": ["continuous_bernoulli.ContinuousBernoulli._cont_bern_log_norm", "torch.distributions.exp_family.ExponentialFamily._validate_sample", "torch.distributions.utils.broadcast_all", "torch.nn.functional.binary_cross_entropy_with_logits"], "continuous_bernoulli.ContinuousBernoulli.cdf": ["torch.le", "torch.distributions.exp_family.ExponentialFamily._validate_sample", "continuous_bernoulli.ContinuousBernoulli._outside_unstable_region", "torch.zeros_like", "torch.ge", "torch.where", "torch.pow", "continuous_bernoulli.ContinuousBernoulli._cut_probs", "torch.ones_like"], "continuous_bernoulli.ContinuousBernoulli.entropy": ["torch.log", "torch.log1p", "continuous_bernoulli.ContinuousBernoulli._cont_bern_log_norm"], "continuous_bernoulli.ContinuousBernoulli._natural_params": [], "continuous_bernoulli.ContinuousBernoulli._log_normalizer": ["torch.le", "torch.abs", "torch.gt", "torch.exp", "torch.max", "torch.where", "torch.pow", "torch.log", "torch.ones_like"], "dirichlet": [], "dirichlet._Dirichlet_backward": ["torch._dirichlet_grad"], "torch._dirichlet_grad": [], "dirichlet._Dirichlet.forward": ["torch._sample_dirichlet"], "torch._sample_dirichlet": [], "dirichlet._Dirichlet": ["torch.autograd.function.once_differentiable"], "dirichlet._Dirichlet.backward": ["dirichlet._Dirichlet_backward"], "torch.distributions.constraints.independent": [], "dirichlet.Dirichlet": ["torch.distributions.constraints.independent"], "dirichlet.Dirichlet.__init__": ["<builtin>.ValueError", "<builtin>.super"], "dirichlet.Dirichlet.expand": ["torch.distributions.exp_family.ExponentialFamily._get_checked_instance", "<builtin>.super", "torch.Size"], "dirichlet.Dirichlet.rsample": ["torch.distributions.exp_family.ExponentialFamily._extended_shape", "torch.autograd.Function.apply"], "dirichlet.Dirichlet.log_prob": ["torch.distributions.exp_family.ExponentialFamily._validate_sample", "torch.log", "torch.lgamma"], "dirichlet.Dirichlet.mean": [], "dirichlet.Dirichlet.variance": [], "dirichlet.Dirichlet.entropy": ["torch.digamma", "torch.lgamma"], "torch.digamma": [], "dirichlet.Dirichlet._natural_params": [], "dirichlet.Dirichlet._log_normalizer": ["torch.lgamma"], "distribution": [], "distribution.Distribution.set_default_validate_args": [], "distribution.Distribution.__init__": ["<builtin>.repr", "<builtin>.super", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.getattr", "torch.distributions.constraints.is_dependent", "<builtin>.isinstance", "<builtin>.type", "warnings.warn"], "torch.distributions.constraints.is_dependent": [], "distribution.Distribution.expand": [], "distribution.Distribution.batch_shape": [], "distribution.Distribution.event_shape": [], "distribution.Distribution.arg_constraints": [], "distribution.Distribution.support": [], "distribution.Distribution.mean": [], "distribution.Distribution.variance": [], "distribution.Distribution.stddev": [], "distribution.Distribution.sample": ["torch.no_grad", "distribution.Distribution.rsample"], "distribution.Distribution.rsample": [], "distribution.Distribution.sample_n": ["torch.Size", "distribution.Distribution.sample", "warnings.warn"], "distribution.Distribution.log_prob": [], "distribution.Distribution.cdf": [], "distribution.Distribution.icdf": [], "distribution.Distribution.enumerate_support": [], "distribution.Distribution.entropy": [], "distribution.Distribution.perplexity": ["distribution.Distribution.entropy", "torch.exp"], "distribution.Distribution._extended_shape": ["<builtin>.isinstance", "torch.Size"], "distribution.Distribution._validate_sample": ["<builtin>.reversed", "<builtin>.repr", "<builtin>.len", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.zip", "<builtin>.isinstance", "<builtin>.type", "warnings.warn"], "distribution.Distribution._get_checked_instance": ["<builtin>.NotImplementedError", "<builtin>.type"], "distribution.Distribution.__repr__": [], "exponential": [], "exponential.Exponential.mean": ["torch.distributions.exp_family.ExponentialFamily.rate.reciprocal"], "torch.distributions.exp_family.ExponentialFamily.rate.reciprocal": [], "exponential.Exponential.stddev": ["torch.distributions.exp_family.ExponentialFamily.rate.reciprocal"], "exponential.Exponential.variance": ["torch.distributions.exp_family.ExponentialFamily.rate.pow"], "torch.distributions.exp_family.ExponentialFamily.rate.pow": [], "exponential.Exponential.__init__": ["torch.distributions.exp_family.ExponentialFamily.rate.size", "<builtin>.super", "<builtin>.isinstance", "torch.distributions.utils.broadcast_all", "torch.Size"], "torch.distributions.exp_family.ExponentialFamily.rate.size": [], "exponential.Exponential.expand": ["torch.Size", "torch.distributions.exp_family.ExponentialFamily._get_checked_instance", "torch.distributions.exp_family.ExponentialFamily.rate.expand", "<builtin>.super"], "torch.distributions.exp_family.ExponentialFamily.rate.expand": [], "exponential.Exponential.rsample": ["torch._C._get_tracing_state", "torch.rand", "torch.distributions.exp_family.ExponentialFamily.rate.new", "torch.distributions.exp_family.ExponentialFamily._extended_shape"], "torch.distributions.exp_family.ExponentialFamily.rate.new": [], "exponential.Exponential.log_prob": ["torch.distributions.exp_family.ExponentialFamily._validate_sample", "torch.distributions.exp_family.ExponentialFamily.rate.log"], "torch.distributions.exp_family.ExponentialFamily.rate.log": [], "exponential.Exponential.cdf": ["torch.distributions.exp_family.ExponentialFamily._validate_sample", "torch.exp"], "exponential.Exponential.icdf": ["torch.log"], "exponential.Exponential.entropy": ["torch.log"], "exponential.Exponential._natural_params": [], "exponential.Exponential._log_normalizer": ["torch.log"], "exp_family": [], "exp_family.ExponentialFamily._natural_params": [], "exp_family.ExponentialFamily._log_normalizer": [], "exp_family.ExponentialFamily._mean_carrier_measure": [], "exp_family.ExponentialFamily.entropy": ["<builtin>.zip", "exp_family.ExponentialFamily._log_normalizer", "torch.autograd.grad"], "fishersnedecor": [], "fishersnedecor.FisherSnedecor.__init__": ["torch.distributions.utils.broadcast_all", "<builtin>.super", "torch.distributions.gamma.Gamma", "torch.distributions.distribution.Distribution.df1.size", "<builtin>.isinstance", "torch.Size"], "torch.distributions.gamma.Gamma": [], "torch.distributions.distribution.Distribution.df1.size": [], "fishersnedecor.FisherSnedecor.expand": ["torch.distributions.distribution.Distribution.df2.expand", "<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance", "torch.distributions.distribution.Distribution.df1.expand", "torch.Size"], "torch.distributions.distribution.Distribution.df1.expand": [], "torch.distributions.distribution.Distribution.df2.expand": [], "fishersnedecor.FisherSnedecor.mean": ["torch.distributions.distribution.Distribution.df2.clone"], "torch.distributions.distribution.Distribution.df2.clone": [], "fishersnedecor.FisherSnedecor.variance": ["torch.distributions.distribution.Distribution.df2.clone"], "fishersnedecor.FisherSnedecor.rsample": ["torch.distributions.distribution.Distribution._extended_shape", "torch.finfo"], "fishersnedecor.FisherSnedecor.log_prob": ["torch.distributions.distribution.Distribution._validate_sample", "torch.log1p", "torch.distributions.distribution.Distribution.df1.lgamma", "torch.distributions.distribution.Distribution.df2.lgamma", "torch.distributions.distribution.Distribution.df1.log", "torch.log"], "torch.distributions.distribution.Distribution.df1.lgamma": [], "torch.distributions.distribution.Distribution.df2.lgamma": [], "torch.distributions.distribution.Distribution.df1.log": [], "gamma": [], "gamma._standard_gamma": ["torch._standard_gamma"], "torch._standard_gamma": [], "gamma.Gamma.mean": [], "gamma.Gamma.variance": ["torch.distributions.exp_family.ExponentialFamily.rate.pow"], "gamma.Gamma.__init__": ["torch.Size", "<builtin>.isinstance", "<builtin>.super", "torch.distributions.exp_family.ExponentialFamily.concentration.size", "torch.distributions.utils.broadcast_all"], "torch.distributions.exp_family.ExponentialFamily.concentration.size": [], "gamma.Gamma.expand": ["torch.distributions.exp_family.ExponentialFamily.rate.expand", "torch.Size", "torch.distributions.exp_family.ExponentialFamily._get_checked_instance", "<builtin>.super", "torch.distributions.exp_family.ExponentialFamily.concentration.expand"], "torch.distributions.exp_family.ExponentialFamily.concentration.expand": [], "gamma.Gamma.rsample": ["torch.finfo", "torch.distributions.exp_family.ExponentialFamily._extended_shape", "torch.distributions.exp_family.ExponentialFamily.rate.expand", "torch.distributions.exp_family.ExponentialFamily.concentration.expand", "gamma._standard_gamma"], "gamma.Gamma.log_prob": ["torch.distributions.exp_family.ExponentialFamily._validate_sample", "torch.as_tensor", "torch.lgamma", "torch.log"], "gamma.Gamma.entropy": ["torch.digamma", "torch.log", "torch.lgamma"], "gamma.Gamma._natural_params": [], "gamma.Gamma._log_normalizer": ["torch.log", "torch.lgamma"], "geometric": [], "geometric.Geometric.__init__": ["<builtin>.type", "<builtin>.repr", "<builtin>.isinstance", "<builtin>.super", "<builtin>.ValueError", "<builtin>.tuple", "torch.Size", "torch.distributions.utils.broadcast_all"], "geometric.Geometric.expand": ["torch.Size", "torch.distributions.distribution.Distribution._get_checked_instance", "<builtin>.super"], "geometric.Geometric.mean": [], "geometric.Geometric.variance": [], "geometric.Geometric": ["torch.distributions.utils.lazy_property"], "geometric.Geometric.logits": ["torch.distributions.utils.probs_to_logits"], "geometric.Geometric.probs": ["torch.distributions.utils.logits_to_probs"], "geometric.Geometric.sample": ["torch._C._get_tracing_state", "torch.no_grad", "torch.rand", "torch.finfo", "torch.distributions.distribution.Distribution._extended_shape"], "geometric.Geometric.log_prob": ["torch.distributions.utils.broadcast_all", "torch.distributions.distribution.Distribution._validate_sample"], "geometric.Geometric.entropy": ["torch.nn.functional.binary_cross_entropy_with_logits"], "gumbel": [], "gumbel.Gumbel.__init__": ["<builtin>.isinstance", "<builtin>.super", "torch.ones_like", "torch.full_like", "torch.distributions.utils.broadcast_all", "torch.distributions.transforms.AffineTransform", "torch.distributions.uniform.Uniform", "torch.finfo", "torch.distributions.transforms.ExpTransform"], "torch.distributions.uniform.Uniform": [], "gumbel.Gumbel.expand": ["torch.distributions.transformed_distribution.TransformedDistribution.scale.expand", "torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance", "torch.distributions.transformed_distribution.TransformedDistribution.loc.expand", "<builtin>.super"], "torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance": [], "torch.distributions.transformed_distribution.TransformedDistribution.loc.expand": [], "torch.distributions.transformed_distribution.TransformedDistribution.scale.expand": [], "gumbel.Gumbel.log_prob": ["torch.distributions.transformed_distribution.TransformedDistribution._validate_sample", "torch.distributions.transformed_distribution.TransformedDistribution.loc.exp", "torch.distributions.transformed_distribution.TransformedDistribution.scale.log"], "torch.distributions.transformed_distribution.TransformedDistribution._validate_sample": [], "torch.distributions.transformed_distribution.TransformedDistribution.loc.exp": [], "torch.distributions.transformed_distribution.TransformedDistribution.scale.log": [], "gumbel.Gumbel.mean": [], "gumbel.Gumbel.stddev": ["math.sqrt"], "gumbel.Gumbel.variance": [], "gumbel.Gumbel.entropy": ["torch.distributions.transformed_distribution.TransformedDistribution.scale.log"], "half_cauchy": [], "half_cauchy.HalfCauchy.__init__": ["<builtin>.super", "torch.distributions.transforms.AbsTransform", "torch.distributions.cauchy.Cauchy"], "torch.distributions.cauchy.Cauchy": [], "torch.distributions.transforms.AbsTransform": [], "half_cauchy.HalfCauchy.expand": ["<builtin>.super", "torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance"], "half_cauchy.HalfCauchy.scale": [], "half_cauchy.HalfCauchy.mean": ["torch.distributions.transformed_distribution.TransformedDistribution._extended_shape", "torch.full"], "torch.distributions.transformed_distribution.TransformedDistribution._extended_shape": [], "half_cauchy.HalfCauchy.variance": [], "half_cauchy.HalfCauchy.log_prob": ["torch.distributions.transformed_distribution.TransformedDistribution._validate_sample", "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.log_prob", "torch.as_tensor", "math.log"], "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.log_prob": [], "half_cauchy.HalfCauchy.cdf": ["torch.distributions.transformed_distribution.TransformedDistribution._validate_sample", "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.cdf"], "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.cdf": [], "half_cauchy.HalfCauchy.icdf": ["torch.distributions.transformed_distribution.TransformedDistribution.base_dist.icdf"], "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.icdf": [], "half_cauchy.HalfCauchy.entropy": ["math.log", "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.entropy"], "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.entropy": [], "half_normal": [], "half_normal.HalfNormal.__init__": ["torch.distributions.transforms.AbsTransform", "torch.distributions.normal.Normal", "<builtin>.super"], "torch.distributions.normal.Normal": [], "half_normal.HalfNormal.expand": ["torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance", "<builtin>.super"], "half_normal.HalfNormal.scale": [], "half_normal.HalfNormal.mean": ["math.sqrt"], "half_normal.HalfNormal.variance": [], "half_normal.HalfNormal.log_prob": ["torch.distributions.transformed_distribution.TransformedDistribution.base_dist.log_prob", "math.log", "torch.distributions.transformed_distribution.TransformedDistribution._validate_sample"], "half_normal.HalfNormal.cdf": ["torch.distributions.transformed_distribution.TransformedDistribution._validate_sample", "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.cdf"], "half_normal.HalfNormal.icdf": ["torch.distributions.transformed_distribution.TransformedDistribution.base_dist.icdf"], "half_normal.HalfNormal.entropy": ["math.log", "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.entropy"], "independent": [], "independent.Independent.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.len"], "independent.Independent.expand": ["torch.distributions.distribution.Distribution._get_checked_instance", "<builtin>.super", "torch.Size"], "independent.Independent.has_rsample": [], "independent.Independent.has_enumerate_support": [], "independent.Independent": ["torch.distributions.constraints.dependent_property"], "independent.Independent.support": ["torch.distributions.constraints.independent"], "independent.Independent.mean": [], "independent.Independent.variance": [], "independent.Independent.sample": [], "independent.Independent.rsample": [], "independent.Independent.log_prob": ["torch.distributions.utils._sum_rightmost"], "torch.distributions.utils._sum_rightmost": [], "independent.Independent.entropy": ["torch.distributions.utils._sum_rightmost"], "independent.Independent.enumerate_support": ["<builtin>.NotImplementedError"], "independent.Independent.__repr__": [], "kl": ["kl.register_kl.decorator", "kl.register_kl"], "kl.register_kl": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.issubclass"], "kl.register_kl.decorator": [], "kl._Match.__init__": [], "kl._Match.__eq__": [], "kl._Match.__le__": ["<builtin>.zip", "<builtin>.issubclass"], "kl._dispatch_kl": ["<builtin>.reversed", "<builtin>.min", "kl._Match.__init__", "<builtin>.issubclass", "warnings.warn"], "kl._infinite_like": ["torch.full_like"], "kl._x_log_x": [], "kl._batch_trace_XXT": [], "kl.kl_divergence": ["kl._dispatch_kl", "<builtin>.type"], "kl._kl_bernoulli_bernoulli": [], "kl._kl_beta_beta": ["torch.digamma"], "kl._kl_binomial_binomial": ["kl._infinite_like", "<builtin>.NotImplementedError"], "kl._kl_categorical_categorical": [], "kl._kl_continuous_bernoulli_continuous_bernoulli": ["torch.log1p"], "kl._kl_dirichlet_dirichlet": [], "kl._kl_exponential_exponential": [], "kl._kl_expfamily_expfamily": ["<builtin>.len", "<builtin>.NotImplementedError", "<builtin>.zip", "torch.autograd.grad", "utils._sum_rightmost", "<builtin>.type"], "utils._sum_rightmost": [], "kl._kl_gamma_gamma": ["torch.digamma", "torch.lgamma"], "kl._kl_gumbel_gumbel": ["torch.exp"], "kl._kl_geometric_geometric": ["torch.log1p"], "kl._kl_halfnormal_halfnormal": ["kl._kl_normal_normal"], "kl._kl_normal_normal": [], "kl._kl_laplace_laplace": ["torch.exp"], "kl._kl_lowrankmultivariatenormal_lowrankmultivariatenormal": ["kl._batch_trace_XXT", "torch.triangular_solve", "lowrank_multivariate_normal._batch_lowrank_mahalanobis", "<builtin>.ValueError", "lowrank_multivariate_normal._batch_lowrank_logdet"], "lowrank_multivariate_normal._batch_lowrank_logdet": [], "lowrank_multivariate_normal._batch_lowrank_mahalanobis": ["torch.distributions.multivariate_normal._batch_mahalanobis", "torch.distributions.multivariate_normal._batch_mv"], "kl._kl_multivariatenormal_lowrankmultivariatenormal": ["kl._batch_trace_XXT", "torch.triangular_solve", "lowrank_multivariate_normal._batch_lowrank_mahalanobis", "<builtin>.ValueError", "lowrank_multivariate_normal._batch_lowrank_logdet"], "kl._kl_lowrankmultivariatenormal_multivariatenormal": ["multivariate_normal._batch_mahalanobis", "torch._C._infer_size", "torch.triangular_solve", "kl._batch_trace_XXT", "<builtin>.ValueError", "lowrank_multivariate_normal._batch_lowrank_logdet", "torch.diag_embed"], "multivariate_normal._batch_mahalanobis": ["torch.triangular_solve", "<builtin>.zip", "<builtin>.range", "<builtin>.len", "<builtin>.list"], "torch._C._infer_size": [], "kl._kl_multivariatenormal_multivariatenormal": ["multivariate_normal._batch_mahalanobis", "torch._C._infer_size", "kl._batch_trace_XXT", "torch.triangular_solve", "<builtin>.ValueError"], "kl._kl_onehotcategorical_onehotcategorical": ["kl._kl_categorical_categorical"], "kl._kl_pareto_pareto": [], "kl._kl_poisson_poisson": [], "kl._kl_transformed_transformed": ["kl.kl_divergence"], "kl._kl_uniform_uniform": [], "kl._kl_bernoulli_poisson": [], "kl._kl_beta_continuous_bernoulli": ["torch.log1p"], "kl._kl_beta_infinity": ["kl._infinite_like"], "kl._kl_beta_exponential": [], "kl._kl_beta_gamma": [], "kl._kl_beta_normal": [], "kl._kl_beta_uniform": [], "kl._kl_continuous_bernoulli_infinity": ["kl._infinite_like"], "kl._kl_continuous_bernoulli_exponential": ["torch.log"], "kl._kl_continuous_bernoulli_normal": ["torch.log", "torch.square", "math.log"], "torch.square": [], "kl._kl_continuous_bernoulli_uniform": ["torch.le", "torch.ge", "torch.max", "torch.ones_like", "torch.where"], "kl._kl_exponential_infinity": ["kl._infinite_like"], "kl._kl_exponential_gamma": ["torch.log"], "kl._kl_exponential_gumbel": ["torch.exp"], "kl._kl_exponential_normal": ["torch.log"], "kl._kl_gamma_infinity": ["kl._infinite_like"], "kl._kl_gamma_exponential": [], "kl._kl_gamma_gumbel": ["torch.exp"], "kl._kl_gamma_normal": ["torch.log"], "kl._kl_gumbel_infinity": ["kl._infinite_like"], "kl._kl_gumbel_normal": ["math.sqrt", "math.pi.pow"], "math.pi.pow": [], "kl._kl_laplace_infinity": ["kl._infinite_like"], "kl._kl_laplace_normal": ["torch.log"], "kl._kl_normal_infinity": ["kl._infinite_like"], "kl._kl_normal_gumbel": ["torch.exp", "math.log"], "kl._kl_pareto_infinity": ["kl._infinite_like"], "kl._kl_pareto_exponential": [], "kl._kl_pareto_gamma": [], "kl._kl_pareto_normal": ["math.sqrt"], "kl._kl_poisson_infinity": ["kl._infinite_like"], "kl._kl_uniform_beta": ["torch.log", "kl._x_log_x"], "kl._kl_uniform_continuous_bernoulli": ["torch.le", "torch.log1p", "torch.ge", "torch.max", "torch.ones_like", "torch.where"], "kl._kl_uniform_exponetial": [], "kl._kl_uniform_gamma": ["kl._x_log_x"], "kl._kl_uniform_gumbel": ["torch.exp"], "kl._kl_uniform_normal": ["math.sqrt"], "kl._kl_uniform_pareto": ["kl._x_log_x"], "kl._kl_independent_independent": ["utils._sum_rightmost", "kl.kl_divergence"], "kl._kl_cauchy_cauchy": [], "kumaraswamy": [], "kumaraswamy._moments": ["torch.exp", "torch.lgamma"], "kumaraswamy.Kumaraswamy.__init__": ["torch.distributions.transformed_distribution.TransformedDistribution.concentration1.reciprocal", "torch.finfo", "<builtin>.super", "torch.distributions.transforms.PowerTransform", "torch.distributions.uniform.Uniform", "torch.distributions.transforms.AffineTransform", "torch.distributions.transformed_distribution.TransformedDistribution.concentration0.reciprocal", "torch.distributions.utils.broadcast_all", "torch.full_like"], "torch.distributions.transformed_distribution.TransformedDistribution.concentration0.reciprocal": [], "torch.distributions.transforms.PowerTransform": [], "torch.distributions.transformed_distribution.TransformedDistribution.concentration1.reciprocal": [], "kumaraswamy.Kumaraswamy.expand": ["torch.distributions.transformed_distribution.TransformedDistribution.concentration1.expand", "torch.distributions.transformed_distribution.TransformedDistribution.concentration0.expand", "torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance", "<builtin>.super"], "torch.distributions.transformed_distribution.TransformedDistribution.concentration1.expand": [], "torch.distributions.transformed_distribution.TransformedDistribution.concentration0.expand": [], "kumaraswamy.Kumaraswamy.mean": ["kumaraswamy._moments"], "kumaraswamy.Kumaraswamy.variance": ["torch.pow", "kumaraswamy._moments"], "kumaraswamy.Kumaraswamy.entropy": ["torch.distributions.transformed_distribution.TransformedDistribution.concentration0.reciprocal", "torch.digamma", "torch.distributions.transformed_distribution.TransformedDistribution.concentration1.reciprocal", "torch.log"], "laplace": [], "laplace.Laplace.mean": [], "laplace.Laplace.variance": ["torch.distributions.distribution.Distribution.scale.pow"], "torch.distributions.distribution.Distribution.scale.pow": [], "laplace.Laplace.stddev": [], "laplace.Laplace.__init__": ["<builtin>.isinstance", "torch.Size", "torch.distributions.distribution.Distribution.loc.size", "<builtin>.super", "torch.distributions.utils.broadcast_all"], "laplace.Laplace.expand": ["torch.distributions.distribution.Distribution.loc.expand", "torch.Size", "torch.distributions.distribution.Distribution.scale.expand", "<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance"], "laplace.Laplace.rsample": ["torch._C._get_tracing_state", "torch.rand", "torch.distributions.distribution.Distribution._extended_shape", "torch.distributions.distribution.Distribution.loc.new", "torch.log1p", "torch.finfo"], "laplace.Laplace.log_prob": ["torch.distributions.distribution.Distribution._validate_sample", "torch.abs", "torch.log"], "laplace.Laplace.cdf": ["torch.distributions.distribution.Distribution._validate_sample", "torch.expm1"], "torch.expm1": [], "laplace.Laplace.icdf": ["torch.log1p"], "laplace.Laplace.entropy": ["torch.log"], "lkj_cholesky": [], "lkj_cholesky.LKJCholesky.__init__": ["<builtin>.super", "torch.distributions.Beta", "torch.distributions.distribution.Distribution.concentration.size", "<builtin>.ValueError", "torch.Size", "torch.cat", "torch.distributions.distribution.Distribution.concentration.unsqueeze", "torch.arange", "torch.distributions.utils.broadcast_all"], "torch.distributions.distribution.Distribution.concentration.size": [], "torch.distributions.distribution.Distribution.concentration.unsqueeze": [], "torch.distributions.Beta": [], "lkj_cholesky.LKJCholesky.expand": ["<builtin>.super", "torch.Size", "torch.distributions.distribution.Distribution.concentration.expand", "torch.distributions.distribution.Distribution._get_checked_instance"], "torch.distributions.distribution.Distribution.concentration.expand": [], "lkj_cholesky.LKJCholesky.sample": ["torch.finfo", "torch.clamp", "torch.diag_embed", "torch.sum", "torch.distributions.distribution.Distribution._extended_shape", "torch.sqrt", "torch.randn"], "lkj_cholesky.LKJCholesky.log_prob": ["torch.mvlgamma", "torch.sum", "torch.lgamma", "math.log", "torch.distributions.distribution.Distribution.concentration.unsqueeze", "torch.distributions.distribution.Distribution._validate_sample", "torch.arange"], "torch.mvlgamma": [], "logistic_normal": [], "logistic_normal.LogisticNormal.__init__": ["torch.distributions.transforms.StickBreakingTransform", "torch.distributions.normal.Normal", "<builtin>.super"], "logistic_normal.LogisticNormal.expand": ["torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance", "<builtin>.super"], "logistic_normal.LogisticNormal.loc": [], "logistic_normal.LogisticNormal.scale": [], "log_normal": [], "log_normal.LogNormal.__init__": ["torch.distributions.transforms.ExpTransform", "torch.distributions.normal.Normal", "<builtin>.super"], "log_normal.LogNormal.expand": ["<builtin>.super", "torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance"], "log_normal.LogNormal.loc": [], "log_normal.LogNormal.scale": [], "log_normal.LogNormal.mean": [], "log_normal.LogNormal.variance": [], "log_normal.LogNormal.entropy": ["torch.distributions.transformed_distribution.TransformedDistribution.base_dist.entropy"], "lowrank_multivariate_normal": [], "lowrank_multivariate_normal._batch_capacitance_tril": ["torch.linalg.cholesky", "torch.matmul"], "torch.distributions.multivariate_normal._batch_mv": [], "torch.distributions.multivariate_normal._batch_mahalanobis": [], "lowrank_multivariate_normal.LowRankMultivariateNormal": ["torch.distributions.utils.lazy_property", "torch.distributions.constraints.independent"], "lowrank_multivariate_normal.LowRankMultivariateNormal.__init__": ["torch.broadcast_tensors", "<builtin>.super", "<builtin>.ValueError", "lowrank_multivariate_normal._batch_capacitance_tril"], "lowrank_multivariate_normal.LowRankMultivariateNormal.expand": ["torch.distributions.distribution.Distribution._get_checked_instance", "torch.Size", "torch.distributions.distribution.Distribution.cov_factor.expand", "<builtin>.super"], "torch.distributions.distribution.Distribution.cov_factor.expand": [], "lowrank_multivariate_normal.LowRankMultivariateNormal.mean": [], "lowrank_multivariate_normal.LowRankMultivariateNormal.variance": [], "lowrank_multivariate_normal.LowRankMultivariateNormal.scale_tril": ["torch.linalg.cholesky", "torch.matmul"], "lowrank_multivariate_normal.LowRankMultivariateNormal.covariance_matrix": ["torch.diag_embed", "torch.matmul"], "lowrank_multivariate_normal.LowRankMultivariateNormal.precision_matrix": ["torch.diag_embed", "torch.triangular_solve", "torch.matmul"], "lowrank_multivariate_normal.LowRankMultivariateNormal.rsample": ["torch.distributions.multivariate_normal._batch_mv", "torch.distributions.utils._standard_normal", "torch.distributions.distribution.Distribution._extended_shape"], "torch.distributions.utils._standard_normal": [], "lowrank_multivariate_normal.LowRankMultivariateNormal.log_prob": ["math.log", "torch.distributions.distribution.Distribution._validate_sample", "lowrank_multivariate_normal._batch_lowrank_mahalanobis", "lowrank_multivariate_normal._batch_lowrank_logdet"], "lowrank_multivariate_normal.LowRankMultivariateNormal.entropy": ["math.log", "<builtin>.len", "lowrank_multivariate_normal._batch_lowrank_logdet"], "mixture_same_family": [], "mixture_same_family.MixtureSameFamily.__init__": ["<builtin>.ValueError", "<builtin>.zip", "<builtin>.super", "<builtin>.len", "<builtin>.reversed", "<builtin>.isinstance"], "mixture_same_family.MixtureSameFamily.expand": ["<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance", "torch.Size"], "mixture_same_family.MixtureSameFamily": ["torch.distributions.constraints.dependent_property"], "mixture_same_family.MixtureSameFamily.support": [], "mixture_same_family.MixtureSameFamily.mixture_distribution": [], "mixture_same_family.MixtureSameFamily.component_distribution": [], "mixture_same_family.MixtureSameFamily.mean": ["mixture_same_family.MixtureSameFamily._pad_mixture_dimensions", "torch.sum"], "mixture_same_family.MixtureSameFamily._pad_mixture_dimensions": ["torch.Size", "torch.distributions.distribution.Distribution.batch_shape.numel"], "mixture_same_family.MixtureSameFamily.variance": ["mixture_same_family.MixtureSameFamily._pad_mixture_dimensions", "torch.sum", "mixture_same_family.MixtureSameFamily._pad"], "mixture_same_family.MixtureSameFamily._pad": [], "mixture_same_family.MixtureSameFamily.cdf": ["torch.sum", "mixture_same_family.MixtureSameFamily._pad"], "mixture_same_family.MixtureSameFamily.log_prob": ["torch.log_softmax", "torch.logsumexp", "torch.distributions.distribution.Distribution._validate_sample", "mixture_same_family.MixtureSameFamily._pad"], "torch.logsumexp": [], "mixture_same_family.MixtureSameFamily.sample": ["torch.gather", "torch.Size", "<builtin>.len", "torch.no_grad"], "torch.distributions.distribution.Distribution.batch_shape.numel": [], "mixture_same_family.MixtureSameFamily.__repr__": [], "multinomial": [], "multinomial.Multinomial.mean": [], "multinomial.Multinomial.variance": [], "multinomial.Multinomial.__init__": ["<builtin>.super", "<builtin>.isinstance", "torch.distributions.Categorical", "<builtin>.NotImplementedError"], "multinomial.Multinomial.expand": ["torch.Size", "<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance"], "multinomial.Multinomial._new": [], "multinomial.Multinomial": ["torch.distributions.constraints.dependent_property"], "multinomial.Multinomial.support": ["torch.distributions.constraints.multinomial"], "torch.distributions.constraints.multinomial": [], "multinomial.Multinomial.logits": [], "multinomial.Multinomial.probs": [], "multinomial.Multinomial.param_shape": [], "multinomial.Multinomial.sample": ["torch.distributions.distribution.Distribution._extended_shape", "torch.ones_like", "torch.Size", "<builtin>.range", "<builtin>.list"], "multinomial.Multinomial.log_prob": ["torch.lgamma", "torch.distributions.distribution.Distribution._validate_sample", "torch.distributions.utils.broadcast_all"], "multivariate_normal": [], "multivariate_normal._batch_mv": ["torch.matmul"], "multivariate_normal._precision_to_scale_tril": ["torch.triangular_solve", "torch.linalg.cholesky", "torch.transpose", "torch.flip", "torch.eye"], "torch.transpose": [], "multivariate_normal.MultivariateNormal.__init__": ["torch.linalg.cholesky", "<builtin>.ValueError", "torch.broadcast_shapes", "multivariate_normal._precision_to_scale_tril", "<builtin>.super"], "torch.broadcast_shapes": [], "multivariate_normal.MultivariateNormal.expand": ["torch.Size", "<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance"], "multivariate_normal.MultivariateNormal": ["torch.distributions.utils.lazy_property"], "multivariate_normal.MultivariateNormal.scale_tril": [], "multivariate_normal.MultivariateNormal.covariance_matrix": ["torch.matmul"], "multivariate_normal.MultivariateNormal.precision_matrix": ["torch.eye", "torch.cholesky_solve"], "multivariate_normal.MultivariateNormal.mean": [], "multivariate_normal.MultivariateNormal.variance": [], "multivariate_normal.MultivariateNormal.rsample": ["torch.distributions.distribution.Distribution._extended_shape", "torch.distributions.utils._standard_normal", "multivariate_normal._batch_mv"], "multivariate_normal.MultivariateNormal.log_prob": ["math.log", "torch.distributions.distribution.Distribution._validate_sample", "multivariate_normal._batch_mahalanobis"], "multivariate_normal.MultivariateNormal.entropy": ["math.log", "<builtin>.len"], "negative_binomial": [], "torch.distributions.constraints.greater_than_eq": [], "negative_binomial.NegativeBinomial": ["torch.distributions.utils.lazy_property", "torch.distributions.constraints.greater_than_eq", "torch.distributions.constraints.half_open_interval"], "torch.distributions.constraints.half_open_interval": [], "negative_binomial.NegativeBinomial.__init__": ["<builtin>.ValueError", "torch.distributions.utils.broadcast_all", "<builtin>.super"], "negative_binomial.NegativeBinomial.expand": ["torch.Size", "<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance"], "negative_binomial.NegativeBinomial._new": [], "negative_binomial.NegativeBinomial.mean": ["torch.exp"], "negative_binomial.NegativeBinomial.variance": ["torch.sigmoid"], "negative_binomial.NegativeBinomial.logits": ["torch.distributions.utils.probs_to_logits"], "negative_binomial.NegativeBinomial.probs": ["torch.distributions.utils.logits_to_probs"], "negative_binomial.NegativeBinomial.param_shape": [], "negative_binomial.NegativeBinomial._gamma": ["torch.exp", "torch.distributions.Gamma"], "negative_binomial.NegativeBinomial.sample": ["torch.poisson", "torch.no_grad"], "torch.poisson": [], "negative_binomial.NegativeBinomial.log_prob": ["torch.lgamma", "torch.distributions.distribution.Distribution._validate_sample", "torch.nn.functional.logsigmoid"], "torch.nn.functional.logsigmoid": [], "normal": [], "normal.Normal.mean": [], "normal.Normal.stddev": [], "normal.Normal.variance": [], "normal.Normal.__init__": ["torch.distributions.utils.broadcast_all", "<builtin>.isinstance", "<builtin>.super", "torch.Size", "torch.distributions.exp_family.ExponentialFamily.loc.size"], "torch.distributions.exp_family.ExponentialFamily.loc.size": [], "normal.Normal.expand": ["<builtin>.super", "torch.Size", "torch.distributions.exp_family.ExponentialFamily._get_checked_instance", "torch.distributions.exp_family.ExponentialFamily.scale.expand", "torch.distributions.exp_family.ExponentialFamily.loc.expand"], "torch.distributions.exp_family.ExponentialFamily.loc.expand": [], "torch.distributions.exp_family.ExponentialFamily.scale.expand": [], "normal.Normal.sample": ["torch.no_grad", "torch.distributions.exp_family.ExponentialFamily.scale.expand", "torch.normal", "torch.distributions.exp_family.ExponentialFamily._extended_shape", "torch.distributions.exp_family.ExponentialFamily.loc.expand"], "torch.normal": [], "normal.Normal.rsample": ["torch.distributions.exp_family.ExponentialFamily._extended_shape", "torch.distributions.utils._standard_normal"], "normal.Normal.log_prob": ["<builtin>.isinstance", "torch.distributions.exp_family.ExponentialFamily._validate_sample", "math.log", "math.sqrt", "torch.distributions.exp_family.ExponentialFamily.scale.log"], "torch.distributions.exp_family.ExponentialFamily.scale.log": [], "normal.Normal.cdf": ["math.sqrt", "torch.distributions.exp_family.ExponentialFamily.scale.reciprocal", "torch.distributions.exp_family.ExponentialFamily._validate_sample", "torch.erf"], "torch.distributions.exp_family.ExponentialFamily.scale.reciprocal": [], "normal.Normal.icdf": ["math.sqrt", "torch.erfinv"], "torch.erfinv": [], "normal.Normal.entropy": ["torch.log", "math.log"], "normal.Normal._natural_params": ["torch.distributions.exp_family.ExponentialFamily.scale.pow"], "torch.distributions.exp_family.ExponentialFamily.scale.pow": [], "normal.Normal._log_normalizer": ["torch.log"], "one_hot_categorical": [], "one_hot_categorical.OneHotCategorical.__init__": ["torch.distributions.categorical.Categorical", "<builtin>.super"], "torch.distributions.categorical.Categorical": [], "one_hot_categorical.OneHotCategorical.expand": ["torch.distributions.distribution.Distribution._get_checked_instance", "torch.Size", "<builtin>.super"], "one_hot_categorical.OneHotCategorical._new": [], "one_hot_categorical.OneHotCategorical._param": [], "one_hot_categorical.OneHotCategorical.probs": [], "one_hot_categorical.OneHotCategorical.logits": [], "one_hot_categorical.OneHotCategorical.mean": [], "one_hot_categorical.OneHotCategorical.variance": [], "one_hot_categorical.OneHotCategorical.param_shape": [], "one_hot_categorical.OneHotCategorical.sample": ["torch.nn.functional.one_hot", "torch.Size"], "torch.nn.functional.one_hot": [], "one_hot_categorical.OneHotCategorical.log_prob": ["torch.distributions.distribution.Distribution._validate_sample"], "one_hot_categorical.OneHotCategorical.entropy": [], "one_hot_categorical.OneHotCategorical.enumerate_support": ["torch.eye", "<builtin>.len"], "one_hot_categorical.OneHotCategoricalStraightThrough.rsample": ["one_hot_categorical.OneHotCategorical.sample"], "pareto": [], "pareto.Pareto.__init__": ["<builtin>.super", "torch.distributions.utils.broadcast_all", "torch.distributions.transforms.AffineTransform", "torch.distributions.exponential.Exponential", "torch.distributions.transforms.ExpTransform"], "torch.distributions.exponential.Exponential": [], "pareto.Pareto.expand": ["torch.distributions.transformed_distribution.TransformedDistribution.scale.expand", "<builtin>.super", "torch.distributions.transformed_distribution.TransformedDistribution.alpha.expand", "torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance"], "torch.distributions.transformed_distribution.TransformedDistribution.alpha.expand": [], "pareto.Pareto.mean": ["torch.distributions.transformed_distribution.TransformedDistribution.alpha.clamp"], "torch.distributions.transformed_distribution.TransformedDistribution.alpha.clamp": [], "pareto.Pareto.variance": ["torch.distributions.transformed_distribution.TransformedDistribution.alpha.clamp", "torch.distributions.transformed_distribution.TransformedDistribution.scale.pow"], "torch.distributions.transformed_distribution.TransformedDistribution.scale.pow": [], "pareto.Pareto": ["torch.distributions.constraints.dependent_property"], "pareto.Pareto.support": ["torch.distributions.constraints.greater_than"], "torch.distributions.constraints.greater_than": [], "pareto.Pareto.entropy": ["torch.distributions.transformed_distribution.TransformedDistribution.alpha.reciprocal", "torch.distributions.transformed_distribution.TransformedDistribution.scale.log"], "torch.distributions.transformed_distribution.TransformedDistribution.alpha.reciprocal": [], "poisson": [], "poisson.Poisson.mean": [], "poisson.Poisson.variance": [], "poisson.Poisson.__init__": ["<builtin>.isinstance", "torch.distributions.utils.broadcast_all", "torch.distributions.exp_family.ExponentialFamily.rate.size", "<builtin>.super", "torch.Size"], "poisson.Poisson.expand": ["<builtin>.super", "torch.distributions.exp_family.ExponentialFamily._get_checked_instance", "torch.Size", "torch.distributions.exp_family.ExponentialFamily.rate.expand"], "poisson.Poisson.sample": ["torch.poisson", "torch.no_grad", "torch.distributions.exp_family.ExponentialFamily._extended_shape", "torch.distributions.exp_family.ExponentialFamily.rate.expand"], "poisson.Poisson.log_prob": ["torch.distributions.utils.broadcast_all", "torch.distributions.exp_family.ExponentialFamily._validate_sample"], "poisson.Poisson._natural_params": ["torch.log"], "poisson.Poisson._log_normalizer": ["torch.exp"], "relaxed_bernoulli": [], "relaxed_bernoulli.LogitRelaxedBernoulli.__init__": ["torch.distributions.utils.broadcast_all", "torch.Size", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.super"], "relaxed_bernoulli.LogitRelaxedBernoulli.expand": ["torch.distributions.distribution.Distribution._get_checked_instance", "torch.Size", "<builtin>.super"], "relaxed_bernoulli.LogitRelaxedBernoulli._new": [], "relaxed_bernoulli.LogitRelaxedBernoulli": ["torch.distributions.utils.lazy_property"], "relaxed_bernoulli.LogitRelaxedBernoulli.logits": ["torch.distributions.utils.probs_to_logits"], "relaxed_bernoulli.LogitRelaxedBernoulli.probs": ["torch.distributions.utils.logits_to_probs"], "relaxed_bernoulli.LogitRelaxedBernoulli.param_shape": [], "relaxed_bernoulli.LogitRelaxedBernoulli.rsample": ["torch.rand", "torch.distributions.utils.clamp_probs", "torch.distributions.distribution.Distribution._extended_shape"], "relaxed_bernoulli.LogitRelaxedBernoulli.log_prob": ["torch.distributions.utils.broadcast_all", "torch.distributions.distribution.Distribution._validate_sample"], "relaxed_bernoulli.RelaxedBernoulli.__init__": ["relaxed_bernoulli.LogitRelaxedBernoulli.__init__", "<builtin>.super", "torch.distributions.transforms.SigmoidTransform"], "relaxed_bernoulli.RelaxedBernoulli.expand": ["<builtin>.super", "torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance"], "relaxed_bernoulli.RelaxedBernoulli.temperature": [], "relaxed_bernoulli.RelaxedBernoulli.logits": [], "relaxed_bernoulli.RelaxedBernoulli.probs": [], "relaxed_categorical": [], "relaxed_categorical.ExpRelaxedCategorical.__init__": ["<builtin>.super", "torch.distributions.categorical.Categorical"], "relaxed_categorical.ExpRelaxedCategorical.expand": ["torch.Size", "<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance"], "relaxed_categorical.ExpRelaxedCategorical._new": [], "relaxed_categorical.ExpRelaxedCategorical.param_shape": [], "relaxed_categorical.ExpRelaxedCategorical.logits": [], "relaxed_categorical.ExpRelaxedCategorical.probs": [], "relaxed_categorical.ExpRelaxedCategorical.rsample": ["torch.rand", "torch.distributions.distribution.Distribution._extended_shape", "torch.distributions.utils.clamp_probs"], "relaxed_categorical.ExpRelaxedCategorical.log_prob": ["torch.distributions.distribution.Distribution._validate_sample", "<builtin>.float", "torch.full_like", "torch.distributions.utils.broadcast_all"], "relaxed_categorical.RelaxedOneHotCategorical.__init__": ["<builtin>.super", "torch.distributions.transforms.ExpTransform", "relaxed_categorical.ExpRelaxedCategorical.__init__"], "relaxed_categorical.RelaxedOneHotCategorical.expand": ["torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance", "<builtin>.super"], "relaxed_categorical.RelaxedOneHotCategorical.temperature": [], "relaxed_categorical.RelaxedOneHotCategorical.logits": [], "relaxed_categorical.RelaxedOneHotCategorical.probs": [], "studentT": [], "studentT.StudentT.mean": ["torch.distributions.distribution.Distribution.loc.clone"], "torch.distributions.distribution.Distribution.loc.clone": [], "studentT.StudentT.variance": ["torch.distributions.distribution.Distribution.df.clone"], "torch.distributions.distribution.Distribution.df.clone": [], "studentT.StudentT.__init__": ["torch.distributions.Chi2", "torch.distributions.utils.broadcast_all", "torch.distributions.distribution.Distribution.df.size", "<builtin>.super"], "torch.distributions.Chi2": [], "torch.distributions.distribution.Distribution.df.size": [], "studentT.StudentT.expand": ["torch.distributions.distribution.Distribution._get_checked_instance", "torch.distributions.distribution.Distribution.scale.expand", "torch.Size", "torch.distributions.distribution.Distribution.loc.expand", "torch.distributions.distribution.Distribution.df.expand", "<builtin>.super"], "torch.distributions.distribution.Distribution.df.expand": [], "studentT.StudentT.rsample": ["torch.rsqrt", "torch.distributions.distribution.Distribution._extended_shape", "torch.distributions.utils._standard_normal"], "studentT.StudentT.log_prob": ["torch.distributions.distribution.Distribution.df.log", "torch.distributions.distribution.Distribution.scale.log", "math.log", "torch.distributions.distribution.Distribution._validate_sample", "torch.log1p", "torch.lgamma"], "torch.distributions.distribution.Distribution.df.log": [], "studentT.StudentT.entropy": ["math.lgamma", "torch.distributions.distribution.Distribution.df.log", "torch.digamma", "torch.distributions.distribution.Distribution.scale.log", "torch.lgamma"], "math.lgamma": [], "transformed_distribution": [], "transformed_distribution.TransformedDistribution.__init__": ["<builtin>.super", "<builtin>.all", "<builtin>.ValueError", "torch.distributions.independent.Independent", "<builtin>.max", "torch.distributions.transforms.ComposeTransform", "<builtin>.len", "<builtin>.isinstance"], "torch.distributions.independent.Independent": [], "transformed_distribution.TransformedDistribution.expand": ["<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance", "<builtin>.reversed", "torch.Size", "<builtin>.len"], "transformed_distribution.TransformedDistribution": ["torch.distributions.constraints.dependent_property"], "transformed_distribution.TransformedDistribution.support": ["<builtin>.len", "torch.distributions.constraints.independent"], "transformed_distribution.TransformedDistribution.has_rsample": [], "transformed_distribution.TransformedDistribution.sample": ["torch.no_grad"], "transformed_distribution.TransformedDistribution.rsample": [], "transformed_distribution.TransformedDistribution.log_prob": ["torch.distributions.utils._sum_rightmost", "<builtin>.reversed", "<builtin>.len", "torch.distributions.distribution.Distribution._validate_sample"], "transformed_distribution.TransformedDistribution._monotonize_cdf": ["<builtin>.isinstance"], "transformed_distribution.TransformedDistribution.cdf": ["transformed_distribution.TransformedDistribution._monotonize_cdf"], "transformed_distribution.TransformedDistribution.icdf": ["transformed_distribution.TransformedDistribution._monotonize_cdf"], "transforms": ["transforms.ComposeTransform.__init__"], "transforms.Transform.__init__": ["<builtin>.super", "<builtin>.ValueError"], "transforms.Transform.event_dim": ["<builtin>.ValueError"], "transforms.Transform.inv": ["weakref.ref", "transforms._InverseTransform.__init__"], "transforms._InverseTransform.__init__": ["<builtin>.super"], "transforms.Transform.sign": [], "transforms.Transform.with_cache": ["<builtin>.type", "<builtin>.NotImplementedError"], "transforms.Transform.__eq__": [], "transforms.Transform.__ne__": ["transforms.PowerTransform.__eq__", "transforms._InverseTransform.__eq__", "transforms.ComposeTransform.__eq__", "transforms.AffineTransform.__eq__", "transforms.Transform.__eq__"], "transforms._InverseTransform.__eq__": ["<builtin>.isinstance"], "transforms.ComposeTransform.__eq__": ["<builtin>.isinstance"], "transforms.PowerTransform.__eq__": ["<builtin>.isinstance"], "transforms.AffineTransform.__eq__": ["<builtin>.isinstance"], "transforms.Transform.__call__": ["transforms.IndependentTransform._call", "transforms.PowerTransform._call", "transforms.ReshapeTransform._call", "transforms.Transform._call", "transforms.CatTransform._call", "transforms.StackTransform._call", "transforms.AffineTransform._call"], "transforms.PowerTransform._call": [], "transforms.IndependentTransform._call": ["<builtin>.ValueError"], "transforms.StackTransform._call": ["torch.stack", "transforms.StackTransform._slice", "<builtin>.zip", "<builtin>.len"], "transforms.ReshapeTransform._call": ["<builtin>.len"], "transforms.CatTransform._call": ["<builtin>.zip", "torch.cat"], "transforms.AffineTransform._call": [], "transforms.Transform._call": [], "transforms.Transform._inv_call": ["transforms.AffineTransform._inverse", "transforms.PowerTransform._inverse", "transforms.ReshapeTransform._inverse", "transforms.Transform._inverse", "transforms.IndependentTransform._inverse", "transforms.StackTransform._inverse", "transforms.CatTransform._inverse"], "transforms.IndependentTransform._inverse": ["<builtin>.ValueError"], "transforms.AffineTransform._inverse": [], "transforms.StackTransform._inverse": ["torch.stack", "transforms.StackTransform._slice", "<builtin>.zip", "<builtin>.len"], "transforms.CatTransform._inverse": ["<builtin>.zip", "torch.cat"], "transforms.PowerTransform._inverse": [], "transforms.ReshapeTransform._inverse": ["<builtin>.len"], "transforms.Transform._inverse": [], "transforms.Transform.log_abs_det_jacobian": [], "transforms.Transform.__repr__": [], "transforms.Transform.forward_shape": [], "transforms.Transform.inverse_shape": [], "transforms._InverseTransform": ["torch.distributions.constraints.dependent_property"], "transforms._InverseTransform.domain": [], "transforms._InverseTransform.codomain": [], "transforms._InverseTransform.bijective": [], "transforms._InverseTransform.sign": [], "transforms._InverseTransform.inv": [], "transforms._InverseTransform.with_cache": [], "transforms._InverseTransform.__repr__": ["<builtin>.repr"], "transforms._InverseTransform.__call__": [], "transforms._InverseTransform.log_abs_det_jacobian": [], "transforms._InverseTransform.forward_shape": [], "transforms._InverseTransform.inverse_shape": [], "transforms.ComposeTransform.__init__": ["<builtin>.super"], "transforms.ComposeTransform": ["torch.distributions.constraints.dependent_property", "torch.distributions.utils.lazy_property"], "transforms.ComposeTransform.domain": ["torch.distributions.constraints.independent", "<builtin>.max", "<builtin>.reversed"], "transforms.ComposeTransform.codomain": ["torch.distributions.constraints.independent", "<builtin>.max"], "transforms.ComposeTransform.bijective": ["<builtin>.all"], "transforms.ComposeTransform.sign": [], "transforms.ComposeTransform.inv": ["transforms.ComposeTransform.__init__", "weakref.ref", "<builtin>.reversed"], "transforms.ComposeTransform.with_cache": ["transforms.ComposeTransform.__init__"], "transforms.ComposeTransform.__call__": [], "transforms.ComposeTransform.log_abs_det_jacobian": ["functools.reduce", "torch.zeros_like", "torch.distributions.utils._sum_rightmost", "<builtin>.zip"], "transforms.ComposeTransform.forward_shape": [], "transforms.ComposeTransform.inverse_shape": ["<builtin>.reversed"], "transforms.ComposeTransform.__repr__": [], "transforms.IndependentTransform.__init__": ["<builtin>.super"], "transforms.IndependentTransform.with_cache": ["transforms.IndependentTransform.__init__"], "transforms.IndependentTransform": ["torch.distributions.constraints.dependent_property"], "transforms.IndependentTransform.domain": ["torch.distributions.constraints.independent"], "transforms.IndependentTransform.codomain": ["torch.distributions.constraints.independent"], "transforms.IndependentTransform.bijective": [], "transforms.IndependentTransform.sign": [], "transforms.IndependentTransform.log_abs_det_jacobian": ["torch.distributions.utils._sum_rightmost"], "transforms.IndependentTransform.__repr__": ["<builtin>.repr"], "transforms.IndependentTransform.forward_shape": [], "transforms.IndependentTransform.inverse_shape": [], "transforms.ReshapeTransform.__init__": ["<builtin>.super", "<builtin>.ValueError", "torch.Size"], "transforms.ReshapeTransform": ["torch.distributions.constraints.dependent_property"], "transforms.ReshapeTransform.domain": ["torch.distributions.constraints.independent", "<builtin>.len"], "transforms.ReshapeTransform.codomain": ["torch.distributions.constraints.independent", "<builtin>.len"], "transforms.ReshapeTransform.with_cache": ["transforms.ReshapeTransform.__init__"], "transforms.ReshapeTransform.log_abs_det_jacobian": ["<builtin>.len"], "transforms.ReshapeTransform.forward_shape": ["<builtin>.ValueError", "<builtin>.len"], "transforms.ReshapeTransform.inverse_shape": ["<builtin>.ValueError", "<builtin>.len"], "transforms.ExpTransform.__eq__": ["<builtin>.isinstance"], "transforms.ExpTransform._call": [], "transforms.ExpTransform._inverse": [], "transforms.ExpTransform.log_abs_det_jacobian": [], "transforms.PowerTransform.__init__": ["<builtin>.super", "torch.distributions.utils.broadcast_all"], "transforms.PowerTransform.with_cache": ["transforms.PowerTransform.__init__"], "transforms.PowerTransform.log_abs_det_jacobian": [], "transforms.PowerTransform.forward_shape": ["<builtin>.getattr", "torch.broadcast_shapes"], "transforms.PowerTransform.inverse_shape": ["<builtin>.getattr", "torch.broadcast_shapes"], "transforms._clipped_sigmoid": ["torch.finfo", "torch.sigmoid", "torch.clamp"], "transforms.SigmoidTransform.__eq__": ["<builtin>.isinstance"], "transforms.SigmoidTransform._call": ["transforms._clipped_sigmoid"], "transforms.SigmoidTransform._inverse": ["torch.finfo"], "transforms.SigmoidTransform.log_abs_det_jacobian": ["torch.nn.functional.softplus"], "torch.distributions.constraints.interval": [], "transforms.TanhTransform": ["torch.distributions.constraints.interval"], "transforms.TanhTransform.__eq__": ["<builtin>.isinstance"], "transforms.TanhTransform._call": [], "transforms.TanhTransform._inverse": ["torch.atanh"], "torch.atanh": [], "transforms.TanhTransform.log_abs_det_jacobian": ["math.log", "torch.nn.functional.softplus"], "transforms.AbsTransform.__eq__": ["<builtin>.isinstance"], "transforms.AbsTransform._call": [], "transforms.AbsTransform._inverse": [], "transforms.AffineTransform.__init__": ["<builtin>.super"], "transforms.AffineTransform.event_dim": [], "transforms.AffineTransform": ["torch.distributions.constraints.dependent_property"], "transforms.AffineTransform.domain": ["torch.distributions.constraints.independent"], "transforms.AffineTransform.codomain": ["torch.distributions.constraints.independent"], "transforms.AffineTransform.with_cache": ["transforms.AffineTransform.__init__"], "transforms.AffineTransform.sign": ["<builtin>.float", "<builtin>.isinstance"], "transforms.AffineTransform.log_abs_det_jacobian": ["torch.full_like", "math.log", "torch.abs", "<builtin>.isinstance", "<builtin>.abs"], "transforms.AffineTransform.forward_shape": ["<builtin>.getattr", "torch.broadcast_shapes"], "transforms.AffineTransform.inverse_shape": ["<builtin>.getattr", "torch.broadcast_shapes"], "transforms.CorrCholeskyTransform._call": ["torch.finfo", "torch.distributions.utils.vec_to_tril_matrix", "torch.tanh", "torch.eye", "torch.nn.functional.pad"], "torch.distributions.utils.vec_to_tril_matrix": [], "transforms.CorrCholeskyTransform._inverse": ["torch.nn.functional.pad", "torch.cumsum", "torch.distributions.utils.tril_matrix_to_vec"], "torch.cumsum": [], "torch.distributions.utils.tril_matrix_to_vec": [], "transforms.CorrCholeskyTransform.log_abs_det_jacobian": ["math.log", "torch.nn.functional.softplus", "torch.distributions.utils.tril_matrix_to_vec"], "transforms.CorrCholeskyTransform.forward_shape": ["<builtin>.ValueError", "<builtin>.round", "<builtin>.len"], "transforms.CorrCholeskyTransform.inverse_shape": ["<builtin>.ValueError", "<builtin>.len"], "transforms.SoftmaxTransform.__eq__": ["<builtin>.isinstance"], "transforms.SoftmaxTransform._call": [], "transforms.SoftmaxTransform._inverse": [], "transforms.SoftmaxTransform.forward_shape": ["<builtin>.ValueError", "<builtin>.len"], "transforms.SoftmaxTransform.inverse_shape": ["<builtin>.ValueError", "<builtin>.len"], "transforms.StickBreakingTransform.__eq__": ["<builtin>.isinstance"], "transforms.StickBreakingTransform._call": ["transforms._clipped_sigmoid", "torch.nn.functional.pad"], "transforms.StickBreakingTransform._inverse": ["torch.finfo", "torch.clamp"], "transforms.StickBreakingTransform.log_abs_det_jacobian": ["torch.nn.functional.logsigmoid"], "transforms.StickBreakingTransform.forward_shape": ["<builtin>.ValueError", "<builtin>.len"], "transforms.StickBreakingTransform.inverse_shape": ["<builtin>.ValueError", "<builtin>.len"], "transforms.LowerCholeskyTransform": ["torch.distributions.constraints.independent"], "transforms.LowerCholeskyTransform.__eq__": ["<builtin>.isinstance"], "transforms.LowerCholeskyTransform._call": [], "transforms.LowerCholeskyTransform._inverse": [], "transforms.CatTransform.__init__": ["<builtin>.len", "<builtin>.list", "<builtin>.all", "<builtin>.isinstance", "<builtin>.super"], "transforms.CatTransform": ["torch.distributions.utils.lazy_property", "torch.distributions.constraints.dependent_property"], "transforms.CatTransform.event_dim": ["<builtin>.max"], "transforms.CatTransform.length": ["<builtin>.sum"], "transforms.CatTransform.with_cache": ["transforms.CatTransform.__init__"], "transforms.CatTransform.log_abs_det_jacobian": ["<builtin>.sum", "torch.distributions.utils._sum_rightmost", "<builtin>.zip", "torch.cat"], "transforms.CatTransform.bijective": ["<builtin>.all"], "transforms.CatTransform.domain": ["torch.distributions.constraints.cat"], "torch.distributions.constraints.cat": [], "transforms.CatTransform.codomain": ["torch.distributions.constraints.cat"], "transforms.StackTransform.__init__": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.super", "<builtin>.all"], "transforms.StackTransform.with_cache": ["transforms.StackTransform.__init__"], "transforms.StackTransform._slice": ["<builtin>.range"], "transforms.StackTransform.log_abs_det_jacobian": ["torch.stack", "transforms.StackTransform._slice", "<builtin>.zip", "<builtin>.len"], "transforms.StackTransform.bijective": ["<builtin>.all"], "transforms.StackTransform": ["torch.distributions.constraints.dependent_property"], "transforms.StackTransform.domain": ["torch.distributions.constraints.stack"], "torch.distributions.constraints.stack": [], "transforms.StackTransform.codomain": ["torch.distributions.constraints.stack"], "uniform": [], "torch.distributions.constraints.dependent": [], "uniform.Uniform": ["torch.distributions.constraints.dependent", "torch.distributions.constraints.dependent_property"], "uniform.Uniform.mean": [], "uniform.Uniform.stddev": [], "uniform.Uniform.variance": ["torch.distributions.distribution.Distribution.high.pow"], "torch.distributions.distribution.Distribution.high.pow": [], "uniform.Uniform.__init__": ["torch.distributions.distribution.Distribution.low.size", "torch.distributions.utils.broadcast_all", "<builtin>.super", "torch.lt", "<builtin>.ValueError", "<builtin>.isinstance", "torch.Size"], "torch.distributions.distribution.Distribution.low.size": [], "torch.lt": [], "uniform.Uniform.expand": ["<builtin>.super", "torch.distributions.distribution.Distribution._get_checked_instance", "torch.distributions.distribution.Distribution.low.expand", "torch.Size", "torch.distributions.distribution.Distribution.high.expand"], "torch.distributions.distribution.Distribution.low.expand": [], "torch.distributions.distribution.Distribution.high.expand": [], "uniform.Uniform.support": ["torch.distributions.constraints.interval"], "uniform.Uniform.rsample": ["torch.rand", "torch.distributions.distribution.Distribution._extended_shape"], "uniform.Uniform.log_prob": ["torch.distributions.distribution.Distribution.high.gt", "torch.distributions.distribution.Distribution._validate_sample", "torch.distributions.distribution.Distribution.low.le", "torch.log"], "torch.distributions.distribution.Distribution.low.le": [], "torch.distributions.distribution.Distribution.high.gt": [], "uniform.Uniform.cdf": ["torch.distributions.distribution.Distribution._validate_sample"], "uniform.Uniform.icdf": [], "uniform.Uniform.entropy": ["torch.log"], "utils.broadcast_all": ["<builtin>.dict", "torch.broadcast_tensors", "torch.tensor", "torch.overrides.has_torch_function", "<builtin>.isinstance", "<builtin>.all", "<builtin>.ValueError", "torch.get_default_dtype"], "utils._standard_normal": ["torch._C._get_tracing_state", "torch.normal", "torch.empty", "torch.zeros", "torch.ones"], "utils.logits_to_probs": ["torch.sigmoid", "torch.nn.functional.softmax"], "utils.clamp_probs": ["torch.finfo"], "utils.probs_to_logits": ["utils.clamp_probs", "torch.log1p", "torch.log"], "utils.lazy_property.__init__": ["functools.update_wrapper"], "utils.lazy_property.__get__": ["<builtin>.setattr", "utils._lazy_property_and_property.__init__", "torch.enable_grad"], "utils._lazy_property_and_property.__init__": [], "utils.tril_matrix_to_vec": ["torch._C._get_tracing_state", "torch.arange", "<builtin>.ValueError"], "utils.vec_to_tril_matrix": ["torch._C._get_tracing_state", "<builtin>.round", "torch.round", "torch.Size", "<builtin>.abs", "<builtin>.isinstance", "<builtin>.ValueError", "torch.finfo", "torch.arange"], "von_mises": ["torch.jit.script_if_tracing"], "von_mises._eval_poly": ["<builtin>.list"], "von_mises._log_modified_bessel_fn": ["von_mises._eval_poly", "torch.where", "torch.distributions.distribution.Distribution.concentration.log", "torch.distributions.distribution.Distribution.concentration.abs"], "torch.distributions.distribution.Distribution.concentration.abs": [], "torch.distributions.distribution.Distribution.concentration.log": [], "torch.jit.script_if_tracing": [], "von_mises._rejection_sample": ["torch.cos", "torch.zeros", "torch.distributions.distribution.Distribution.concentration.log", "torch.rand", "torch.where"], "von_mises.VonMises.__init__": ["<builtin>.super", "torch.Size", "torch.distributions.utils.broadcast_all"], "von_mises.VonMises.log_prob": ["torch.cos", "von_mises._log_modified_bessel_fn", "torch.distributions.distribution.Distribution._validate_sample", "math.log"], "von_mises.VonMises": ["torch.distributions.utils.lazy_property", "torch.no_grad"], "von_mises.VonMises.sample": ["torch.distributions.distribution.Distribution._extended_shape", "von_mises._rejection_sample", "torch.empty"], "von_mises.VonMises.expand": ["torch.distributions.distribution.Distribution.concentration.expand", "<builtin>.type", "torch.distributions.distribution.Distribution.loc.expand", "<builtin>.super", "torch.distributions.distribution.Distribution.__dict__.get"], "torch.distributions.distribution.Distribution.__dict__.get": [], "von_mises.VonMises.mean": [], "von_mises.VonMises.variance": ["von_mises._log_modified_bessel_fn"], "weibull": [], "weibull.Weibull.__init__": ["torch.distributions.transforms.PowerTransform", "<builtin>.super", "torch.distributions.exponential.Exponential", "torch.ones_like", "torch.distributions.utils.broadcast_all", "torch.distributions.transforms.AffineTransform", "torch.distributions.transformed_distribution.TransformedDistribution.concentration.reciprocal"], "torch.distributions.transformed_distribution.TransformedDistribution.concentration.reciprocal": [], "weibull.Weibull.expand": ["torch.distributions.transforms.PowerTransform", "torch.distributions.transformed_distribution.TransformedDistribution.scale.expand", "<builtin>.super", "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.expand", "torch.distributions.transformed_distribution.TransformedDistribution._get_checked_instance", "torch.distributions.transforms.AffineTransform", "torch.distributions.transformed_distribution.TransformedDistribution.concentration.expand"], "torch.distributions.transformed_distribution.TransformedDistribution.concentration.expand": [], "torch.distributions.transformed_distribution.TransformedDistribution.base_dist.expand": [], "weibull.Weibull.mean": ["torch.lgamma", "torch.exp"], "weibull.Weibull.variance": ["torch.distributions.transformed_distribution.TransformedDistribution.scale.pow", "torch.lgamma", "torch.exp"], "weibull.Weibull.entropy": ["torch.log"], "annotate": [], "annotate.annotate": ["<builtin>.RuntimeError", "<builtin>.isinstance"], "graph._register_custom_builtin": ["typing.NamedTuple.__init__"], "graph._is_magic": [], "graph._snake_case": [], "graph._is_from_torch": ["<builtin>.getattr"], "graph._Namespace.__init__": ["<builtin>.set", "re.compile"], "graph._Namespace.create_name": ["<builtin>.int", "graph._Namespace._is_illegal_name"], "graph._Namespace._is_illegal_name": [], "graph._Namespace.associate_name_with_obj": [], "graph._format_args": ["<builtin>.repr"], "graph._format_target": [], "graph._InsertPoint.__init__": [], "graph._InsertPoint.__enter__": [], "graph._InsertPoint.__exit__": [], "graph._node_list.__init__": [], "graph._node_list.__len__": [], "graph._node_list.__iter__": ["<builtin>.getattr"], "graph._node_list.__reversed__": ["graph._node_list.__init__"], "graph.Graph.__init__": ["node.Node", "graph._Namespace.__init__"], "node.Node": [], "graph.Graph.owning_module": [], "graph.Graph.nodes": ["graph._node_list.__init__"], "graph.Graph.graph_copy": ["node.map_arg", "graph.Graph.node_copy"], "graph.Graph.graph_copy.<lambda1>": [], "node.map_arg": ["node.map_aggregate", "<builtin>.callable"], "graph.Graph.graph_copy.<lambda2>": [], "graph.Graph.node_copy": ["node.map_arg", "<builtin>.isinstance", "copy.copy", "graph.Graph.create_node"], "graph.Graph.__deepcopy__": ["<builtin>.isinstance", "graph.Graph.output", "graph.Graph.__init__", "<builtin>.getattr", "graph.Graph.graph_copy"], "graph.Graph.output": ["graph.Graph.create_node"], "graph.Graph.create_node": ["<builtin>.isinstance", "graph._Namespace.create_name", "graph.Graph._target_to_str", "node.Node", "graph._Namespace.associate_name_with_obj"], "graph.Graph._target_to_str": ["graph._snake_case", "<builtin>.callable", "<builtin>.isinstance", "graph._is_magic"], "graph.Graph.flatten_inps": ["torch.utils._pytree.tree_flatten"], "graph.Graph.unflatten_outs": ["<builtin>.isinstance", "torch.utils._pytree.tree_unflatten"], "graph.Graph.erase_node": ["node.map_arg", "<builtin>.len", "<builtin>.isinstance", "<builtin>.RuntimeError"], "graph.Graph.erase_node.<lambda1>": [], "graph.Graph.erase_node.<lambda2>": [], "graph.Graph.inserting_before": ["graph._InsertPoint.__init__", "graph.Graph.inserting_after"], "graph.Graph.inserting_after": ["graph._InsertPoint.__init__", "graph.Graph.inserting_before"], "graph.Graph.placeholder": ["graph.Graph.create_node"], "graph.Graph.get_attr": ["warnings.warn", "graph.Graph.get_attr._get_attr_reference_exists", "graph.Graph.create_node"], "graph.Graph.get_attr._get_attr_reference_exists": ["<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.getattr"], "graph.Graph.call_module": ["warnings.warn", "graph.Graph.create_node"], "graph.Graph.call_method": ["graph.Graph.create_node"], "graph.Graph.call_function": ["graph.Graph.create_node"], "graph.Graph.python_code": ["contextlib.contextmanager", "graph.Graph.python_code.override_node_repr", "graph.Graph._python_code", "graph._Namespace.__init__"], "graph.Graph.python_code.node_repr": ["graph._Namespace.create_name"], "graph.Graph.python_code.override_node_repr": [], "graph.Graph._python_code": ["graph.Graph._python_code.delete_unused_values", "node.map_arg", "graph.Graph._python_code.emit_node", "<builtin>.len", "<builtin>.reversed", "graph.Graph._python_code.add_global"], "graph.Graph._python_code.add_global": ["node._get_qualified_name", "graph._Namespace.create_name", "graph._is_from_torch"], "node._get_qualified_name": ["node._find_module_of_method", "<builtin>.getattr"], "graph.Graph._python_code.type_repr": ["node._type_repr", "<builtin>.hasattr", "graph.Graph._python_code.add_global", "graph.Graph._python_code.type_repr"], "node._type_repr": ["<builtin>.isinstance", "<builtin>.repr"], "graph.Graph._python_code.register_last_uses": [], "graph.Graph._python_code.<lambda1>": ["graph.Graph._python_code.register_last_uses"], "graph.Graph._python_code.<lambda2>": ["graph.Graph._python_code.register_last_uses"], "graph.Graph._python_code.delete_unused_values": ["<builtin>.len", "<builtin>.repr"], "graph.Graph._python_code.emit_node": ["<builtin>.NotImplementedError", "<builtin>.isinstance", "graph.Graph._python_code.add_global", "graph._format_target", "node._get_qualified_name", "<builtin>.repr", "graph._format_args", "<builtin>.callable", "graph.Graph._python_code.type_repr"], "graph.Graph.__str__": [], "graph.Graph.print_tabular": ["<builtin>.print", "tabulate.tabulate"], "graph.Graph.lint": ["<builtin>.isinstance", "<builtin>.set", "node.map_arg", "<builtin>.enumerate", "<builtin>.RuntimeError", "<builtin>.getattr", "warnings.warn"], "graph.Graph.lint.check_arg": ["<builtin>.RuntimeError"], "graph.Graph.lint.<lambda1>": ["graph.Graph.lint.check_arg"], "graph.Graph.lint.<lambda2>": ["graph.Graph.lint.check_arg"], "graph.Graph.eliminate_dead_code": ["<builtin>.len", "graph.Graph.lint", "graph.Graph.erase_node", "<builtin>.reversed"], "graph_module.exec_with_source": ["<builtin>.compile", "<builtin>.exec"], "graph_module.patched_getline": ["linecache.getlines"], "linecache.getlines": [], "graph_module._forward_from_src": ["graph_module.exec_with_source"], "graph_module._format_import_statement": ["graph._is_from_torch"], "graph_module._format_import_block": ["graph_module._format_import_statement", "<builtin>.set"], "graph_module.reduce_graph_module": ["graph_module._forward_from_src", "graph_module._deserialize_graph_module"], "graph_module._deserialize_graph_module": ["graph_module.GraphModule.__init__", "<builtin>.setattr", "<builtin>.hasattr", "graph_module._deserialize_graph_module.CodeOnlyModule.__init__"], "graph_module.reduce_package_graph_module": ["graph_module._deserialize_graph_module"], "graph_module.reduce_deploy_graph_module": ["<builtin>.dict", "graph_module._forward_from_src", "graph_module._deserialize_graph_module"], "graph_module._deserialize_graph_module.CodeOnlyModule.__init__": ["<builtin>.super"], "graph_module._deserialize_graph_module.KeepModules.is_leaf_module": [], "graph_module.GraphModule.__init__": ["<builtin>.super", "graph_module._assign_attr", "<builtin>.hasattr", "<builtin>.str", "<builtin>.isinstance", "<builtin>.RuntimeError", "graph_module._copy_attr"], "graph_module._copy_attr": ["torch.nn.Module.register_buffer", "torch.nn.Module", "<builtin>.setattr", "<builtin>.isinstance", "<builtin>.getattr"], "graph_module._assign_attr": ["torch.nn.Module.register_buffer", "torch.nn.Module", "<builtin>.setattr", "<builtin>.isinstance", "<builtin>.getattr"], "graph_module.GraphModule.__new__": ["<builtin>.super"], "graph_module.GraphModule.__init__.<lambda1>": [], "graph_module.GraphModule.graph": ["graph_module.GraphModule.recompile", "<builtin>.isinstance", "<builtin>.type"], "graph_module.GraphModule.recompile": ["graph_module._forward_from_src", "<builtin>.vars", "<builtin>.type"], "graph_module.GraphModule.to_folder": ["torch.nn.Module.named_children", "pathlib.Path", "torch.save", "torch.nn.Module.state_dict", "torch.nn.modules.module._addindent", "<builtin>.len", "graph_module.GraphModule.to_folder._gen_model_repr", "warnings.warn", "<builtin>.list"], "torch.nn.Module.state_dict": [], "graph_module.GraphModule.to_folder._gen_model_repr": ["<builtin>.type"], "graph_module.GraphModule.add_submodule": ["<builtin>.getattr", "<builtin>.setattr", "<builtin>.isinstance", "torch.nn.Module"], "graph_module.GraphModule.delete_submodule": ["<builtin>.getattr", "<builtin>.delattr", "<builtin>.hasattr", "<builtin>.isinstance"], "graph_module.GraphModule.delete_all_unused_submodules": ["graph_module.GraphModule.delete_submodule", "torch.nn.Module.named_modules", "itertools.accumulate"], "graph_module.GraphModule.delete_all_unused_submodules.join_fn": [], "itertools.accumulate": [], "torch.nn.Module.named_modules": [], "graph_module.GraphModule.code": ["<builtin>.hasattr", "<builtin>.RuntimeError"], "graph_module.GraphModule.recompile.generate_error_message": ["traceback.format_exc", "<builtin>.len"], "graph_module.GraphModule.recompile.wrapped_call": ["<builtin>.super", "traceback.walk_tb", "<builtin>.type", "<builtin>.print", "graph_module.GraphModule.recompile.generate_error_message", "traceback.StackSummary.extract"], "traceback.walk_tb": [], "traceback.StackSummary.extract": [], "graph_module.GraphModule.__reduce_deploy__": ["graph_module._format_import_block", "graph_module.GraphModule.recompile"], "graph_module.GraphModule.__reduce_package__": ["graph_module._format_import_block", "graph_module.GraphModule.recompile"], "graph_module.GraphModule.__reduce__": ["graph_module._format_import_block", "graph_module.GraphModule.recompile"], "graph_module.GraphModule.__deepcopy__": ["graph_module.GraphModule.__init__", "copy.deepcopy", "torch.nn.Module"], "graph_module.GraphModule.__copy__": ["graph_module.GraphModule.__init__"], "graph_module.GraphModule.__str__": ["<builtin>.super"], "immutable_collections": ["immutable_collections._create_immutable_container"], "immutable_collections._no_mutation": ["<builtin>.NotImplementedError", "<builtin>.type"], "immutable_collections._create_immutable_container": ["<builtin>.type", "<builtin>.setattr"], "immutable_collections.<lambda1>": ["<builtin>.tuple", "<builtin>.iter"], "immutable_collections.<lambda2>": ["<builtin>.iter"], "interpreter": [], "interpreter.Interpreter.__init__": ["<builtin>.reversed", "node.map_arg", "<builtin>.dict", "<builtin>.isinstance"], "interpreter.Interpreter.__init__.register_last_uses": [], "interpreter.Interpreter.__init__.<lambda1>": ["interpreter.Interpreter.__init__.register_last_uses"], "interpreter.Interpreter.__init__.<lambda2>": ["interpreter.Interpreter.__init__.register_last_uses"], "interpreter.Interpreter.run": ["<builtin>.iter", "interpreter.Interpreter.run_node"], "interpreter.Interpreter.run_node": ["interpreter.Interpreter.fetch_args_kwargs_from_env", "<builtin>.isinstance", "<builtin>.getattr"], "interpreter.Interpreter.fetch_args_kwargs_from_env": ["interpreter.Interpreter.map_nodes_to_values", "<builtin>.isinstance"], "interpreter.Interpreter.placeholder": ["<builtin>.next", "<builtin>.isinstance", "<builtin>.list"], "interpreter.Interpreter.get_attr": ["interpreter.Interpreter.fetch_attr", "<builtin>.isinstance"], "interpreter.Interpreter.fetch_attr": ["<builtin>.RuntimeError", "<builtin>.enumerate", "<builtin>.hasattr", "<builtin>.getattr"], "interpreter.Interpreter.call_function": ["<builtin>.isinstance"], "interpreter.Interpreter.call_method": ["<builtin>.isinstance", "<builtin>.getattr"], "interpreter.Interpreter.call_module": ["interpreter.Interpreter.fetch_attr", "<builtin>.isinstance"], "interpreter.Interpreter.output": [], "interpreter.Interpreter.map_nodes_to_values": ["node.map_arg"], "interpreter.Interpreter.map_nodes_to_values.load_arg": ["<builtin>.RuntimeError"], "interpreter.Transformer.__init__": ["graph.Graph", "<builtin>.super", "interpreter.Transformer.__init__.TransformerTracer.__init__"], "graph.Graph": [], "interpreter.Transformer.__init__.TransformerTracer.__init__": ["<builtin>.super"], "interpreter.Transformer.__init__.TransformerTracer.is_leaf_module": [], "interpreter.Transformer.placeholder": ["proxy.Proxy", "<builtin>.isinstance"], "proxy.Proxy": [], "interpreter.Transformer.get_attr": ["proxy.Proxy", "<builtin>.isinstance"], "interpreter.Transformer.call_module": ["interpreter.Interpreter.fetch_attr", "<builtin>.isinstance", "_symbolic_trace.Tracer.call_module"], "_symbolic_trace.Tracer.call_module": ["_symbolic_trace.Tracer.is_leaf_module", "_symbolic_trace.Tracer.path_of_module", "_symbolic_trace.Tracer.trace.module_call_wrapper.forward", "proxy.TracerBase.create_proxy"], "interpreter.Transformer.call_function": ["_symbolic_trace.Tracer.create_proxy"], "_symbolic_trace.Tracer.create_proxy": [], "interpreter.Transformer.transform": ["<builtin>.super", "graph_module.GraphModule", "node.map_aggregate"], "interpreter.Transformer.transform.strip_proxy": ["<builtin>.isinstance"], "node.map_aggregate": ["immutable_collections.immutable_list", "<builtin>.slice", "node.map_aggregate", "node.map_arg.<lambda1>", "<builtin>.isinstance", "immutable_collections.immutable_dict", "<builtin>.tuple"], "graph_module.GraphModule": [], "node": [], "node._find_module_of_method": ["<builtin>.RuntimeError", "<builtin>.getattr"], "node._format_arg": ["<builtin>.isinstance", "node._format_arg", "<builtin>.len", "<builtin>.str"], "node.Node.__init__": ["<builtin>.isinstance", "node.map_arg", "node.Node.__update_args_kwargs"], "node.Node.__init__.<lambda1>": [], "node.Node.__init__.<lambda2>": [], "node.Node.__update_args_kwargs": ["node.map_arg"], "node.Node.next": [], "node.Node.prev": [], "node.Node.prepend": [], "node.Node.append": ["node.Node.prepend"], "node.Node._remove_from_list": [], "node.Node.args": ["node.map_arg", "node.Node.__update_args_kwargs"], "node.Node.args.<lambda1>": [], "node.Node.kwargs": ["node.map_arg", "node.Node.__update_args_kwargs"], "node.Node.kwargs.<lambda1>": [], "node.Node.all_input_nodes": ["<builtin>.list"], "node.Node.update_arg": ["<builtin>.tuple", "<builtin>.list"], "node.Node.update_kwarg": ["<builtin>.dict"], "node.Node.stack_trace": [], "node.Node.__update_args_kwargs.<lambda1>": [], "node.Node.__update_args_kwargs.<lambda2>": [], "node.Node.__repr__": [], "node.Node._pretty_print_target": ["<builtin>.isinstance", "node._get_qualified_name", "<builtin>.hasattr"], "node.Node.format_node": ["node._format_arg", "<builtin>.len", "node._type_repr", "<builtin>.isinstance", "node.Node._pretty_print_target", "<builtin>.str"], "node.Node.replace_all_uses_with": ["<builtin>.isinstance", "<builtin>.len", "node.map_arg", "<builtin>.list"], "node.Node.replace_all_uses_with.maybe_replace_node": [], "node.Node.is_impure": ["<builtin>.getattr"], "node.Node.normalized_arguments": ["<builtin>.isinstance", "torch.fx.operator_schemas.normalize_module", "torch.fx.operator_schemas.normalize_function", "<builtin>.callable"], "node.Node.replace_input_with": ["<builtin>.isinstance", "node.map_arg", "node.Node.__update_args_kwargs"], "node.Node.replace_input_with.maybe_replace_node": [], "node.map_arg.<lambda1>": ["node.Node.__update_args_kwargs.<lambda1>", "node.Node.replace_input_with.maybe_replace_node", "node.Node.replace_all_uses_with.maybe_replace_node", "node.Node.__update_args_kwargs.<lambda2>", "<builtin>.isinstance"], "immutable_collections.immutable_list": [], "immutable_collections.immutable_dict": [], "operator_schemas": ["<builtin>.type", "<builtin>.getattr", "typing.TypeVar", "<builtin>.dir", "operator_schemas._nonzero_schemas"], "operator_schemas._nonzero_schemas": ["inspect.signature"], "operator_schemas._nonzero_schemas.nonzero": [], "operator_schemas._FakeGlobalNamespace.__getattr__": ["<builtin>.RuntimeError"], "operator_schemas._torchscript_type_to_python_type": ["<builtin>.eval"], "<builtin>.eval": [], "operator_schemas._torchscript_schema_to_signature": ["inspect.Signature", "operator_schemas._torchscript_type_to_python_type", "<builtin>.tuple", "<builtin>.len", "inspect.Parameter"], "inspect.Parameter": [], "inspect.Signature": [], "operator_schemas.get_signature_for_torch_op": ["operator_schemas._torchscript_schema_to_signature", "torch.jit._builtins._find_builtin", "torch._C._jit_get_schemas_for_operator"], "torch._C._jit_get_schemas_for_operator": [], "operator_schemas.create_type_hint": ["torch.warnings.warn", "<builtin>.isinstance", "<builtin>.len", "operator_schemas.create_type_hint.ret_type", "<builtin>.issubclass"], "operator_schemas.create_type_hint.ret_type": [], "torch.warnings.warn": [], "operator_schemas.type_matches": ["<builtin>.getattr", "operator_schemas.type_matches", "<builtin>.any", "warnings.warn", "<builtin>.issubclass", "inspect.isclass", "operator_schemas.type_matches.is_homogeneous_tuple"], "operator_schemas.type_matches.is_homogeneous_tuple": ["<builtin>.all", "<builtin>.getattr", "<builtin>.issubclass"], "operator_schemas.normalize_function": ["operator_schemas.type_matches", "inspect.unwrap", "<builtin>.callable", "torch.typename", "<builtin>.isinstance", "typing.cast", "<builtin>.RuntimeError", "operator_schemas._args_kwargs_to_normalized_args_kwargs", "<builtin>.len", "inspect.signature", "operator_schemas.get_signature_for_torch_op", "<builtin>.str"], "inspect.unwrap": [], "operator_schemas._args_kwargs_to_normalized_args_kwargs": ["<builtin>.tuple", "<builtin>.enumerate", "<builtin>.any", "<builtin>.len", "typing.NamedTuple.__init__"], "operator_schemas.normalize_module": ["<builtin>.getattr", "<builtin>.hasattr", "inspect.unwrap", "operator_schemas._args_kwargs_to_normalized_args_kwargs", "inspect.signature", "<builtin>.RuntimeError"], "proxy": ["proxy.scope", "proxy._define_reflectable"], "proxy.TracerBase.create_node": [], "proxy.TracerBase.proxy": ["proxy.Proxy.__init__"], "proxy.Proxy.__init__": ["proxy.GraphAppendingTracer.__init__"], "proxy.TracerBase.create_proxy": ["proxy.TracerBase._find_user_frame", "traceback.walk_stack", "proxy.TracerBase.proxy", "proxy.TracerBase.create_node", "traceback.StackSummary.extract", "<builtin>.isinstance", "proxy.TracerBase.create_arg"], "proxy.TracerBase.create_arg": ["node.map_aggregate", "<builtin>.type", "<builtin>.slice", "<builtin>.NotImplementedError", "<builtin>.hasattr", "<builtin>.tuple", "<builtin>.isinstance", "proxy.TracerBase.create_arg"], "proxy.TracerBase._find_user_frame": ["inspect.currentframe", "<builtin>.all"], "traceback.walk_stack": [], "proxy.TracerBase.create_arg.no_node": ["<builtin>.RuntimeError", "<builtin>.isinstance"], "proxy.TracerBase.to_bool": [], "proxy.TracerBase.iter": [], "proxy.TracerBase.keys": ["proxy.Attribute.__init__"], "proxy.Attribute.__init__": [], "proxy.GraphAppendingTracer.__init__": ["<builtin>.super"], "proxy.Proxy.__repr__": [], "proxy.Proxy.__getattr__": ["proxy.Attribute.__init__"], "proxy.Proxy.__call__": ["proxy.TracerBase.create_proxy"], "proxy.Proxy.__iter__": ["dis.get_instructions", "<builtin>.list", "proxy.TracerBase.iter", "inspect.currentframe", "<builtin>.range"], "dis.get_instructions": [], "proxy.Proxy.__bool__": ["proxy.TracerBase.to_bool"], "proxy.Proxy.keys": ["proxy.TracerBase.keys"], "proxy.Proxy.__len__": ["<builtin>.RuntimeError"], "proxy.Proxy.__torch_function__": ["torch.overrides.is_tensor_method_or_property", "proxy.TracerBase.create_proxy", "<builtin>.isinstance"], "torch.overrides.is_tensor_method_or_property": [], "proxy.Attribute.node": ["proxy.TracerBase.create_proxy"], "proxy.Attribute.__call__": ["proxy.TracerBase.create_proxy"], "proxy.ParameterProxy.__init__": ["<builtin>.isinstance", "<builtin>.super"], "proxy.ParameterProxy.__repr__": [], "proxy.ParameterProxy.shape": [], "proxy.ParameterProxy.size": [], "proxy.ParameterProxy.dim": [], "proxy.ParameterProxy.ndim": [], "proxy.ParameterProxy.numel": [], "proxy.ParameterProxy.nelement": [], "proxy.scope": ["<builtin>.setattr"], "proxy.scope.impl": ["<builtin>.getattr"], "proxy._define_reflectable": ["<builtin>.setattr"], "proxy._define_reflectable.impl": ["<builtin>.getattr"], "subgraph_rewriter": [], "subgraph_rewriter.SubgraphMatcher.__init__": ["<builtin>.reversed", "<builtin>.ValueError", "<builtin>.len", "<builtin>.iter", "<builtin>.next"], "subgraph_rewriter.SubgraphMatcher.matches_subgraph_from_anchor": ["subgraph_rewriter.SubgraphMatcher._match_nodes"], "subgraph_rewriter.SubgraphMatcher._match_nodes": ["<builtin>.any", "<builtin>.all", "<builtin>.len", "subgraph_rewriter.SubgraphMatcher._match_nodes", "subgraph_rewriter.SubgraphMatcher._match_nodes.attributes_are_equal", "<builtin>.zip"], "subgraph_rewriter.SubgraphMatcher._match_nodes.attributes_are_equal": [], "subgraph_rewriter._replace_submodules": ["<builtin>.getattr", "<builtin>.RuntimeError", "subgraph_rewriter._replace_submodules.try_get_submodule", "<builtin>.isinstance", "copy.deepcopy"], "subgraph_rewriter._replace_submodules.try_get_submodule": [], "subgraph_rewriter.replace_pattern": ["subgraph_rewriter.replace_pattern.pattern_is_contained", "subgraph_rewriter.SubgraphMatcher.matches_subgraph_from_anchor", "_symbolic_trace.symbolic_trace", "<builtin>.isinstance", "<builtin>.set", "<builtin>.reversed", "subgraph_rewriter._replace_submodules", "<builtin>.len", "copy.copy", "subgraph_rewriter.replace_pattern.mark_node_as_replaced", "typing.NamedTuple.__init__", "subgraph_rewriter.SubgraphMatcher.__init__", "<builtin>.zip", "subgraph_rewriter.replace_pattern.overlaps_with_prev_match"], "_symbolic_trace.symbolic_trace": ["_symbolic_trace.Tracer.trace", "<builtin>.isinstance", "graph_module.GraphModule", "_symbolic_trace.Tracer.__init__"], "subgraph_rewriter.replace_pattern.pattern_is_contained": ["<builtin>.list", "<builtin>.len"], "subgraph_rewriter.replace_pattern.overlaps_with_prev_match": [], "subgraph_rewriter.replace_pattern.mark_node_as_replaced": ["subgraph_rewriter.replace_pattern.mark_node_as_replaced"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace": ["os.environ.get"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.ProxyableClassMeta.__init__": ["<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.ProxyableClassMeta.__call__": ["<builtin>.len", "node.map_aggregate", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.ProxyableClassMeta.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.ProxyableClassMeta.__call__.check_proxy": ["<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._patch_function": ["<builtin>.hasattr", "types.CodeType", "types.FunctionType"], "types.CodeType": [], "types.FunctionType": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._CPatchManager.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._CPatchManager.__init__.patched_impl": ["proxy.TracerBase.create_proxy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._CPatchManager.__init__.patched_in": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._CPatchManager.__init__.patched_impl"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._CPatchManager.__init__.trace_func": ["torch._C._fx.patch_function"], "torch._C._fx.patch_function": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._CPatchManager.__enter__": ["sys.setprofile"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._CPatchManager.__exit__": ["sys.setprofile"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.PHBase.__repr__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.__init__": ["<builtin>.id", "itertools.chain", "<builtin>.list", "<builtin>.callable", "<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_arg": ["<builtin>.isinstance", "<builtin>.NameError", "proxy.TracerBase.create_node", "proxy.TracerBase.tensor_attrs.get", "<builtin>.tuple", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_arg", "<builtin>.hasattr", "<builtin>.setattr", "<builtin>.type", "<builtin>.super"], "<builtin>.NameError": [], "proxy.TracerBase.tensor_attrs.get": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.is_leaf_module": ["<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.path_of_module": ["<builtin>.isinstance", "<builtin>.NameError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.call_module": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.path_of_module", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace.module_call_wrapper.forward", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.is_leaf_module", "proxy.TracerBase.create_proxy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace.module_call_wrapper.forward": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_args_for_root": ["<builtin>.any", "<builtin>.len", "torch.utils._pytree.tree_flatten", "<builtin>.isinstance", "<builtin>.range", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._patch_function", "<builtin>.zip", "<builtin>.tuple", "graph._PyTreeInfo", "<builtin>.list", "inspect.signature", "<builtin>.next", "<builtin>.iter", "<builtin>.RuntimeError", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_args_for_root.proxy_placeholder", "inspect.unwrap"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_args_for_root.proxy_placeholder": ["torch.utils._pytree.tree_map", "proxy.TracerBase.create_proxy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_args_for_root.proxy_placeholder.replace_ph": ["torch._assert", "torch.warnings.warn", "<builtin>.str", "<builtin>.type", "proxy.TracerBase.create_proxy"], "torch._assert": [], "torch.utils._pytree.tree_map": [], "graph._PyTreeInfo": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_args_for_root.flatten_fn": ["torch.utils._pytree.tree_flatten", "<builtin>.list", "torch.utils._pytree.tree_unflatten"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer._module_getattr": ["<builtin>.isinstance", "proxy.TracerBase.create_proxy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_args_for_root", "<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._autowrap_check", "torch.nn.Module", "proxy.TracerBase.create_node", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._CPatchManager.__init__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._Patcher.__init__", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._patch_wrapped_functions", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.create_arg", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace.collect_tensor_attrs", "<builtin>.type", "functools.wraps", "graph.Graph"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace.collect_tensor_attrs": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace.collect_tensor_attrs", "<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace.module_getattr_wrapper": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer._module_getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace.module_call_wrapper": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._autowrap_check", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.call_module", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._autowrap_check": ["<builtin>.callable", "<builtin>.id", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._create_wrapped_func", "proxy.TracerBase._autowrap_search.__dict__.items"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._Patcher.__init__": ["<builtin>.set", "<builtin>.super"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._patch_wrapped_functions": ["<builtin>.hasattr", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._create_wrapped_func", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._create_wrapped_method", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._find_proxy": ["node.map_aggregate"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._find_proxy.find_proxy": ["<builtin>.isinstance"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._create_wrapped_func": ["functools.wraps"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._create_wrapped_func.wrapped": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._find_proxy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._create_wrapped_method": ["functools.wraps", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._create_wrapped_method.wrapped": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._find_proxy"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._PatchedFn.revert": ["<builtin>.NotImplementedError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._PatchedFnSetItem.revert": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._PatchedFnDel.revert": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._PatchedFnSetAttr.revert": ["<builtin>.setattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._Patcher.patch": ["<builtin>.getattr", "<builtin>.hasattr", "typing.NamedTuple.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._Patcher.patch_method": ["<builtin>.setattr", "typing.NamedTuple.__init__", "<builtin>.getattr"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._Patcher.visit_once": ["<builtin>.id"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._Patcher.__enter__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace._Patcher.__exit__": [], "proxy.TracerBase._autowrap_search.__dict__.items": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.wrap": ["<builtin>.isinstance", "inspect.currentframe", "<builtin>.hasattr", "<builtin>.NotImplementedError", "<builtin>.callable", "<builtin>.RuntimeError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.symbolic_trace": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.trace", "graph_module.GraphModule", "<builtin>.isinstance", "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\fx\\symbolic_trace.Tracer.__init__"], "tensor_type": ["tensor_type._DynType.__init__"], "tensor_type.TensorType.__init__": [], "tensor_type.TensorType.__repr__": [], "tensor_type.TensorType.__eq__": ["<builtin>.isinstance", "<builtin>.list"], "tensor_type.TensorType.__class_getitem__": ["<builtin>.isinstance", "tensor_type.TensorType.__init__"], "tensor_type._DynType.__init__": [], "tensor_type._DynType.__eq__": ["<builtin>.isinstance"], "tensor_type._DynType.__str__": [], "tensor_type._DynType.__repr__": [], "tensor_type.is_consistent": ["<builtin>.len", "<builtin>.isinstance", "tensor_type.is_consistent", "<builtin>.zip", "<builtin>.all"], "tensor_type.is_more_precise": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.all", "tensor_type.is_more_precise"], "_pytree": ["_pytree.register_pytree_flatten_spec", "_pytree._register_pytree_node"], "_pytree.register_pytree_flatten_spec": [], "_pytree.tree_flatten_spec": ["<builtin>.type", "<builtin>.zip", "<builtin>.RuntimeError", "<builtin>.isinstance", "_pytree.tree_flatten_spec"], "_pytree._dict_flatten_spec": ["<builtin>.list"], "_pytree._list_flatten_spec": ["<builtin>.len", "<builtin>.range"], "_pytree._tuple_flatten_spec": ["<builtin>.len", "<builtin>.range"], "_pytree._namedtuple_flatten_spec": ["<builtin>.len", "<builtin>.range"], "_symbolic_trace": ["os.environ.get"], "_symbolic_trace.ProxyableClassMeta.__init__": ["<builtin>.super"], "_symbolic_trace.ProxyableClassMeta.__call__": ["node.map_aggregate", "<builtin>.len", "_symbolic_trace.ProxyableClassMeta.__init__"], "_symbolic_trace.ProxyableClassMeta.__call__.check_proxy": ["<builtin>.isinstance"], "_symbolic_trace._patch_function": ["<builtin>.hasattr", "types.CodeType", "types.FunctionType"], "_symbolic_trace._CPatchManager.__init__": [], "_symbolic_trace._CPatchManager.__init__.patched_impl": ["proxy.TracerBase.create_proxy"], "_symbolic_trace._CPatchManager.__init__.patched_in": ["_symbolic_trace._CPatchManager.__init__.patched_impl"], "_symbolic_trace._CPatchManager.__init__.trace_func": ["torch._C._fx.patch_function"], "_symbolic_trace._CPatchManager.__enter__": ["sys.setprofile"], "_symbolic_trace._CPatchManager.__exit__": ["sys.setprofile"], "_symbolic_trace.PHBase.__repr__": [], "_symbolic_trace.Tracer.__init__": ["itertools.chain", "<builtin>.super", "<builtin>.list", "<builtin>.callable", "<builtin>.id"], "_symbolic_trace.Tracer.create_arg": ["proxy.TracerBase.tensor_attrs.get", "proxy.TracerBase.create_node", "<builtin>.hasattr", "<builtin>.isinstance", "_symbolic_trace.Tracer.create_arg", "<builtin>.setattr", "<builtin>.super", "<builtin>.type", "<builtin>.NameError", "<builtin>.tuple"], "_symbolic_trace.Tracer.is_leaf_module": ["<builtin>.isinstance"], "_symbolic_trace.Tracer.path_of_module": ["<builtin>.isinstance", "<builtin>.NameError"], "_symbolic_trace.Tracer.trace.module_call_wrapper.forward": [], "_symbolic_trace.Tracer.create_args_for_root": ["<builtin>.next", "_symbolic_trace.Tracer.create_args_for_root.proxy_placeholder", "<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.zip", "_symbolic_trace._patch_function", "graph._PyTreeInfo", "inspect.signature", "<builtin>.iter", "torch.utils._pytree.tree_flatten", "<builtin>.range", "<builtin>.list", "inspect.unwrap", "<builtin>.any", "<builtin>.len", "<builtin>.tuple"], "_symbolic_trace.Tracer.create_args_for_root.proxy_placeholder": ["proxy.TracerBase.create_proxy", "torch.utils._pytree.tree_map"], "_symbolic_trace.Tracer.create_args_for_root.proxy_placeholder.replace_ph": ["<builtin>.str", "proxy.TracerBase.create_proxy", "torch._assert", "torch.warnings.warn", "<builtin>.type"], "_symbolic_trace.Tracer.create_args_for_root.flatten_fn": ["<builtin>.list", "torch.utils._pytree.tree_unflatten", "torch.utils._pytree.tree_flatten"], "_symbolic_trace.Tracer._module_getattr": ["inspect.signature", "proxy.TracerBase.create_proxy", "<builtin>.isinstance"], "_symbolic_trace.Tracer._module_getattr.<lambda1>": ["proxy.ParameterProxy"], "proxy.ParameterProxy": [], "_symbolic_trace.Tracer.trace": ["_symbolic_trace._autowrap_check", "proxy.TracerBase.create_node", "<builtin>.getattr", "<builtin>.isinstance", "_symbolic_trace.Tracer.trace.collect_tensor_attrs", "functools.wraps", "_symbolic_trace.Tracer.create_arg", "_symbolic_trace._patch_wrapped_functions", "_symbolic_trace._CPatchManager.__init__", "_symbolic_trace.Tracer.create_args_for_root", "_symbolic_trace._Patcher.__init__", "graph.Graph", "torch.nn.Module", "<builtin>.type"], "_symbolic_trace.Tracer.trace.collect_tensor_attrs": ["<builtin>.isinstance", "_symbolic_trace.Tracer.trace.collect_tensor_attrs"], "_symbolic_trace.Tracer.trace.module_getattr_wrapper": ["_symbolic_trace.Tracer._module_getattr"], "_symbolic_trace.Tracer.trace.module_call_wrapper": ["<builtin>.getattr", "_symbolic_trace.Tracer.call_module", "_symbolic_trace._autowrap_check"], "_symbolic_trace._autowrap_check": ["_symbolic_trace._create_wrapped_func", "proxy.TracerBase._autowrap_search.__dict__.items", "<builtin>.callable", "<builtin>.id"], "_symbolic_trace._Patcher.__init__": ["<builtin>.set", "<builtin>.super"], "_symbolic_trace._patch_wrapped_functions": ["<builtin>.getattr", "_symbolic_trace._create_wrapped_func", "<builtin>.hasattr", "_symbolic_trace._create_wrapped_method"], "_symbolic_trace._find_proxy": ["node.map_aggregate"], "_symbolic_trace._find_proxy.find_proxy": ["<builtin>.isinstance"], "_symbolic_trace._create_wrapped_func": ["functools.wraps"], "_symbolic_trace._create_wrapped_func.wrapped": ["_symbolic_trace._find_proxy"], "_symbolic_trace._create_wrapped_method": ["<builtin>.getattr", "functools.wraps"], "_symbolic_trace._create_wrapped_method.wrapped": ["_symbolic_trace._find_proxy"], "_symbolic_trace._PatchedFn.revert": ["<builtin>.NotImplementedError"], "_symbolic_trace._PatchedFnSetItem.revert": [], "_symbolic_trace._PatchedFnDel.revert": [], "_symbolic_trace._PatchedFnSetAttr.revert": ["<builtin>.setattr"], "_symbolic_trace._Patcher.patch": ["<builtin>.getattr", "<builtin>.hasattr", "typing.NamedTuple.__init__"], "_symbolic_trace._Patcher.patch_method": ["<builtin>.getattr", "typing.NamedTuple.__init__", "<builtin>.setattr"], "_symbolic_trace._Patcher.visit_once": ["<builtin>.id"], "_symbolic_trace._Patcher.__enter__": [], "_symbolic_trace._Patcher.__exit__": [], "_symbolic_trace.wrap": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.NotImplementedError", "<builtin>.callable", "inspect.currentframe"], "annotations": ["torch.distributed.rpc.is_available"], "annotations.Module.__init__": [], "annotations.Module.__getattr__": ["<builtin>.RuntimeError"], "annotations.EvalEnv": ["annotations.Module.__init__"], "annotations.EvalEnv.__init__": ["torch.distributed.rpc.is_available"], "annotations.EvalEnv.__getitem__": ["<builtin>.getattr"], "annotations.get_signature": ["annotations.get_type_line", "annotations.try_real_annotations", "torch._sources.get_source_lines_and_file", "annotations.parse_type_line", "textwrap.dedent"], "annotations.try_real_annotations": ["<builtin>.all", "annotations.ann_to_type", "inspect.signature"], "annotations.get_type_line": ["<builtin>.enumerate", "<builtin>.filter", "<builtin>.list", "<builtin>.map", "re.compile", "<builtin>.len", "<builtin>.RuntimeError", "<builtin>.str"], "annotations.parse_type_line": ["annotations.EvalEnv.__init__", "<builtin>.isinstance", "<builtin>.eval", "annotations.split_type_line", "annotations.ann_to_type", "<builtin>.RuntimeError"], "annotations.is_function_or_method": ["inspect.isfunction", "inspect.ismethod"], "annotations.is_vararg": ["<builtin>.hasattr", "inspect.getfullargspec", "annotations.is_function_or_method"], "annotations.get_param_names": ["<builtin>.range", "<builtin>.hasattr", "inspect.getfullargspec", "annotations.is_function_or_method", "inspect.unwrap", "_jit_internal.is_ignored_fn", "<builtin>.str"], "annotations.check_fn": ["<builtin>.isinstance", "torch._sources.get_source_lines_and_file", "torch.jit.frontend.FrontendError", "<builtin>.len", "textwrap.dedent", "ast.parse"], "torch.jit.frontend.FrontendError": [], "annotations.split_type_line": ["<builtin>.RuntimeError", "<builtin>.len"], "annotations.ann_to_type": ["annotations.try_ann_to_type", "<builtin>.ValueError"], "annotations.get_type_line.<lambda1>": [], "annotations.get_type_line.<lambda2>": [], "annotations.get_type_line.<lambda3>": [], "annotations.get_type_line.get_parameter_type": ["<builtin>.len"], "annotations.get_enum_value_type": ["torch._C.unify_type_list", "<builtin>.list", "annotations.try_ann_to_type", "<builtin>.ValueError", "<builtin>.type"], "annotations.try_ann_to_type": ["<builtin>.issubclass", "torch._C.EnumType", "torch._C.AnyType.get", "torch._C.OptionalType", "torch.distributed.rpc.is_available", "<builtin>.ValueError", "torch.jit._script._recursive_compile_class", "annotations.is_tensor", "torch._C.BoolType.get", "<builtin>.type", "torch._jit_internal.can_compile_class", "torch._C._resolve_type_from_object", "_jit_internal.is_dict", "torch._C.NoneType.get", "torch._C.RRefType", "<builtin>.hasattr", "<builtin>.repr", "torch._C.TupleType", "_jit_internal.is_future", "torch._C.TensorType.getInferred", "_jit_internal.is_list", "torch._C.IntType.get", "torch._C.ComplexType.get", "torch._C.ListType", "_jit_internal.is_optional", "_jit_internal.is_tuple", "annotations.try_ann_to_type", "<builtin>.len", "torch._C.DictType", "torch._C.DeviceObjType.get", "_jit_internal._qualified_name", "annotations.get_enum_value_type", "torch._C.StreamObjType.get", "<builtin>.list", "torch._C.FloatType.get", "_state._get_script_class", "torch._C.InterfaceType", "torch._C.StringType.get", "inspect.isclass", "_jit_internal.is_rref", "torch._C.FutureType", "torch._C.TensorType.get"], "torch._C.unify_type_list": [], "annotations.is_tensor": ["<builtin>.issubclass", "warnings.warn"], "torch._C.NoneType.get": [], "torch._C.TupleType": [], "torch._C.ListType": [], "torch._C.DictType": [], "torch._C.OptionalType": [], "torch._C.RRefType": [], "torch._C.FutureType": [], "torch._C.FloatType.get": [], "torch._C.ComplexType.get": [], "torch._C.IntType.get": [], "torch._C.StringType.get": [], "torch._C.BoolType.get": [], "torch._C.AnyType.get": [], "torch._C.InterfaceType": [], "torch._C.DeviceObjType.get": [], "torch._C.StreamObjType.get": [], "_state._get_script_class": ["<builtin>.getattr", "_state._get_python_class"], "torch.jit._script._recursive_compile_class": [], "torch._C.EnumType": [], "torch._jit_internal.can_compile_class": [], "annotations.try_ann_to_type.fake_rcb": [], "torch._C._resolve_type_from_object": [], "frontend.is_reserved_name": [], "frontend.FrontendError.__init__": ["torch._C.ErrorReport"], "torch._C.ErrorReport": [], "frontend.FrontendError.__str__": [], "frontend.UnsupportedNodeError.__init__": ["<builtin>.type", "<builtin>.super", "<builtin>.len"], "frontend.build_withitems": ["<builtin>.list"], "frontend.build_stmts": ["<builtin>.list", "<builtin>.filter"], "frontend.get_class_properties": ["torch._jit_internal.should_drop", "torch._C._jit_tree_views.Property", "<builtin>.getattr", "inspect.getmembers", "frontend.get_jit_def", "torch._C._jit_tree_views.Ident"], "frontend.get_class_properties.<lambda1>": ["<builtin>.isinstance"], "torch._jit_internal.should_drop": [], "frontend.get_jit_def": ["torch._jit_internal.should_drop", "frontend.build_def", "ast.parse", "torch._sources.parse_def", "torch.jit._script._get_type_trace_db", "<builtin>.len", "<builtin>.RuntimeError", "torch.jit._monkeytype_config.get_qualified_name", "<builtin>.isinstance", "torch.jit.annotations.get_type_line"], "torch._C._jit_tree_views.Ident": [], "torch._C._jit_tree_views.Property": [], "frontend.get_class_assigns": ["<builtin>.isinstance", "frontend.get_class_assigns.maybe_build_assign"], "frontend.get_class_assigns.maybe_build_assign": ["frontend.StmtBuilder.build_AnnAssign", "frontend.StmtBuilder.build_Assign"], "frontend.StmtBuilder.build_AnnAssign": ["torch._C._jit_tree_views.Assign", "frontend.UnsupportedNodeError.__init__"], "frontend.StmtBuilder.build_Assign": ["torch._C._jit_tree_views.Assign"], "frontend.get_jit_class_def": ["ast.parse", "textwrap.dedent", "torch._C.ErrorReport.call_stack", "inspect.getmembers", "frontend.build_class_def", "frontend.get_class_properties", "frontend.get_jit_class_def.is_classmethod", "<builtin>.len", "torch._sources.make_source_context", "<builtin>.isinstance", "frontend.get_jit_def", "frontend.get_class_assigns", "torch._sources.get_source_lines_and_file"], "frontend.get_jit_class_def.<lambda1>": ["inspect.ismethod", "inspect.isfunction", "torch._jit_internal.is_static_fn"], "torch._jit_internal.is_static_fn": [], "frontend.get_jit_class_def.is_classmethod": ["inspect.ismethod", "<builtin>.getattr"], "torch._sources.make_source_context": [], "frontend.build_class_def": ["torch._C._jit_tree_views.ClassDef", "torch._C._jit_tree_views.Stmt", "<builtin>.len", "torch._C._jit_tree_views.Ident"], "torch.jit.annotations.get_type_line": [], "torch.jit._script._get_type_trace_db": [], "torch.jit._monkeytype_config.get_qualified_name": [], "frontend.build_def": ["torch._C.merge_type_from_type_comment", "<builtin>.getattr", "torch._C._jit_tree_views.Decl", "torch._C.parse_type_comment", "frontend.build_stmts", "<builtin>.len", "torch._C._jit_tree_views.Def", "frontend.build_param_list", "torch._C._jit_tree_views.Ident"], "frontend.is_torch_jit_ignore_context_manager": ["<builtin>.isinstance"], "frontend.Builder.__call__": ["frontend.UnsupportedNodeError.__init__", "<builtin>.getattr"], "torch._C._jit_tree_views.Stmt": [], "torch._C._jit_tree_views.ClassDef": [], "frontend.build_param_list": ["<builtin>.iter", "frontend.build_param", "frontend.FrontendError.__init__", "<builtin>.next", "<builtin>.len", "<builtin>.bool"], "torch._C._jit_tree_views.Decl": [], "torch._C.parse_type_comment": [], "torch._C.merge_type_from_type_comment": [], "torch._C._jit_tree_views.Def": [], "frontend.build_param": ["torch._C._jit_tree_views.EmptyTypeAnnotation", "torch._C._jit_tree_views.Var", "<builtin>.getattr", "torch._C._jit_tree_views.Param", "<builtin>.len", "torch._C._jit_tree_views.Ident"], "torch._C._jit_tree_views.Var": [], "torch._C._jit_tree_views.EmptyTypeAnnotation": [], "torch._C._jit_tree_views.Param": [], "frontend.build_ignore_context_manager": ["frontend.build_ignore_context_manager.process_ins_outs", "frontend.build_ignore_context_manager.build_args", "frontend.build_ignore_context_manager.create_unique_name_ext", "ast.parse", "<builtin>.len", "<builtin>.exec", "astunparse.unparse", "frontend.build_ignore_context_manager.build_return_ann_stmt", "collections.namedtuple"], "frontend.build_ignore_context_manager.process_ins_outs": [], "frontend.build_ignore_context_manager.create_unique_name_ext": ["<builtin>.str"], "frontend.build_ignore_context_manager.build_return_ann_stmt": ["<builtin>.len"], "frontend.build_ignore_context_manager.build_args": [], "astunparse.unparse": [], "frontend.get_default_args": ["inspect.signature"], "frontend.get_default_args_for_class": ["inspect.getmembers", "frontend.get_default_args"], "frontend.get_default_args_for_class.<lambda1>": ["inspect.ismethod", "inspect.isfunction", "torch._jit_internal.is_static_fn"], "frontend.WithItemBuilder.build_withitem": ["<builtin>.len", "torch._C._jit_tree_views.WithItem"], "torch._C._jit_tree_views.WithItem": [], "frontend.StmtBuilder.build_Expr": ["torch._C._jit_tree_views.ExprStmt"], "torch._C._jit_tree_views.ExprStmt": [], "torch._C._jit_tree_views.Assign": [], "frontend.StmtBuilder.build_Delete": ["torch._C._jit_tree_views.Delete", "<builtin>.len"], "torch._C._jit_tree_views.Delete": [], "frontend.StmtBuilder.build_Return": ["torch._C._jit_tree_views.Return", "<builtin>.len"], "torch._C._jit_tree_views.Return": [], "frontend.StmtBuilder.build_Raise": ["torch._C._jit_tree_views.Raise", "<builtin>.len"], "torch._C._jit_tree_views.Raise": [], "frontend.StmtBuilder.build_Assert": ["torch._C._jit_tree_views.Assert", "<builtin>.len"], "torch._C._jit_tree_views.Assert": [], "frontend.StmtBuilder.build_AugAssign": ["frontend.FrontendError.__init__", "frontend.find_before", "<builtin>.type", "torch._C._jit_tree_views.AugAssign"], "frontend.find_before": ["<builtin>.len"], "torch._C._jit_tree_views.AugAssign": [], "frontend.StmtBuilder.build_While": ["frontend.FrontendError.__init__", "torch._C._jit_tree_views.While", "<builtin>.len", "frontend.build_stmts"], "torch._C._jit_tree_views.While": [], "frontend.StmtBuilder.build_For": ["frontend.FrontendError.__init__", "torch._C._jit_tree_views.For", "<builtin>.len", "frontend.build_stmts"], "torch._C._jit_tree_views.For": [], "frontend.StmtBuilder.build_If": ["torch._C._jit_tree_views.If", "<builtin>.len", "frontend.build_stmts"], "torch._C._jit_tree_views.If": [], "frontend.StmtBuilder.build_Print": ["frontend.FrontendError.__init__", "torch._C._jit_tree_views.Var", "<builtin>.len", "torch._C._jit_tree_views.ExprStmt", "torch._C._jit_tree_views.Apply", "torch._C._jit_tree_views.Ident"], "torch._C._jit_tree_views.Apply": [], "frontend.StmtBuilder.build_Pass": ["torch._C._jit_tree_views.Pass", "<builtin>.len"], "torch._C._jit_tree_views.Pass": [], "frontend.StmtBuilder.build_Break": ["torch._C._jit_tree_views.Break", "<builtin>.len"], "torch._C._jit_tree_views.Break": [], "frontend.StmtBuilder.build_Continue": ["torch._C._jit_tree_views.Continue", "<builtin>.len"], "torch._C._jit_tree_views.Continue": [], "frontend.StmtBuilder.build_With": ["frontend.build_withitems", "torch._C._jit_tree_views.With", "frontend.is_torch_jit_ignore_context_manager", "frontend.build_ignore_context_manager", "<builtin>.len", "<builtin>.RuntimeError", "frontend.build_stmts"], "torch._C._jit_tree_views.With": [], "frontend.ExprBuilder.build_Attribute": ["<builtin>.len", "torch._C._jit_tree_views.Select", "frontend.ExprBuilder.build_Attribute.get_char", "torch._C._jit_tree_views.Ident"], "frontend.ExprBuilder.build_Attribute.get_char": ["<builtin>.chr"], "torch._C._jit_tree_views.Select": [], "frontend.ExprBuilder.build_Call": ["frontend.FrontendError.__init__", "<builtin>.hasattr", "torch._C._jit_tree_views.Attribute", "torch._C._jit_tree_views.Starred", "torch._C._jit_tree_views.Apply", "torch._C._jit_tree_views.Ident"], "torch._C._jit_tree_views.Starred": [], "torch._C._jit_tree_views.Attribute": [], "frontend.ExprBuilder.build_Ellipsis": ["torch._C._jit_tree_views.Dots"], "torch._C._jit_tree_views.Dots": [], "frontend.ExprBuilder.build_Name": ["torch._C._jit_tree_views.Dots", "torch._C._jit_tree_views.Ident", "frontend.FrontendError.__init__", "torch._C._jit_tree_views.TrueLiteral", "torch._C._jit_tree_views.Var", "<builtin>.len", "torch._C._jit_tree_views.FalseLiteral", "torch._C._jit_tree_views.NoneLiteral"], "torch._C._jit_tree_views.TrueLiteral": [], "torch._C._jit_tree_views.FalseLiteral": [], "torch._C._jit_tree_views.NoneLiteral": [], "frontend.ExprBuilder.build_NameConstant": ["<builtin>.str", "torch._C._jit_tree_views.Dots", "torch._C._jit_tree_views.TrueLiteral", "<builtin>.ValueError", "<builtin>.len", "torch._C._jit_tree_views.FalseLiteral", "torch._C._jit_tree_views.NoneLiteral"], "frontend.ExprBuilder.build_BinOp": ["frontend.FrontendError.__init__", "<builtin>.type", "torch._C._jit_tree_views.BinOp"], "torch._C._jit_tree_views.BinOp": [], "frontend.ExprBuilder.build_UnaryOp": ["frontend.FrontendError.__init__", "torch._C._jit_tree_views.UnaryOp", "<builtin>.type", "<builtin>.len"], "torch._C._jit_tree_views.UnaryOp": [], "frontend.ExprBuilder.build_BoolOp": ["<builtin>.str", "frontend.FrontendError.__init__", "<builtin>.AssertionError", "<builtin>.type", "<builtin>.len", "torch._C._jit_tree_views.BinOp"], "frontend.ExprBuilder.build_IfExp": ["torch._C._jit_tree_views.TernaryIf"], "torch._C._jit_tree_views.TernaryIf": [], "frontend.ExprBuilder.build_Compare": ["frontend.FrontendError.__init__", "torch._C._jit_tree_views.UnaryOp", "<builtin>.zip", "<builtin>.list", "<builtin>.type", "torch._C._jit_tree_views.BinOp"], "frontend.ExprBuilder.build_Subscript": ["frontend.ExprBuilder.build_Subscript.build_ExtSlice", "frontend.FrontendError.__init__", "torch._C._jit_tree_views.TupleLiteral", "torch._C._jit_tree_views.Subscript", "<builtin>.type", "<builtin>.isinstance", "frontend.ExprBuilder.build_Subscript.build_SliceExpr"], "frontend.ExprBuilder.build_Subscript.build_SliceExpr": ["torch._C._jit_tree_views.SliceExpr"], "torch._C._jit_tree_views.SliceExpr": [], "frontend.ExprBuilder.build_Subscript.build_Index": ["frontend.FrontendError.__init__", "<builtin>.isinstance"], "frontend.ExprBuilder.build_Subscript.build_ExtSlice": ["torch._C._jit_tree_views.Dots", "frontend.ExprBuilder.build_Subscript.build_Index", "frontend.FrontendError.__init__", "<builtin>.type", "frontend.ExprBuilder.build_Subscript.build_SliceExpr"], "torch._C._jit_tree_views.TupleLiteral": [], "torch._C._jit_tree_views.Subscript": [], "frontend.ExprBuilder.build_List": ["torch._C._jit_tree_views.ListLiteral"], "torch._C._jit_tree_views.ListLiteral": [], "frontend.ExprBuilder.build_Tuple": ["torch._C._jit_tree_views.TupleLiteral"], "frontend.ExprBuilder.build_Dict": ["frontend.FrontendError.__init__", "torch._C._jit_tree_views.DictLiteral"], "torch._C._jit_tree_views.DictLiteral": [], "frontend.ExprBuilder.build_Num": ["<builtin>.str", "<builtin>.len", "torch._C._jit_tree_views.Const"], "torch._C._jit_tree_views.Const": [], "frontend.ExprBuilder.build_Constant": ["<builtin>.str", "frontend.ExprBuilder.build_Str", "frontend.ExprBuilder.build_NameConstant", "frontend.ExprBuilder.build_Num", "frontend.FrontendError.__init__", "<builtin>.type", "<builtin>.len", "frontend.ExprBuilder.build_Ellipsis", "<builtin>.isinstance"], "frontend.ExprBuilder.build_Str": ["<builtin>.str", "torch._C._jit_tree_views.StringLiteral"], "torch._C._jit_tree_views.StringLiteral": [], "frontend.ExprBuilder.build_JoinedStr": ["torch._C._jit_tree_views.StringLiteral", "frontend.FrontendError.__init__", "torch._C._jit_tree_views.Select", "<builtin>.isinstance", "torch._C._jit_tree_views.Apply", "torch._C._jit_tree_views.Ident"], "frontend.ExprBuilder.build_ListComp": ["frontend.FrontendError.__init__", "torch._C._jit_tree_views.ListComp", "<builtin>.len"], "torch._C._jit_tree_views.ListComp": [], "frontend.ExprBuilder.build_DictComp": ["frontend.FrontendError.__init__", "torch._C._jit_tree_views.DictComp", "<builtin>.len"], "torch._C._jit_tree_views.DictComp": [], "frontend.ExprBuilder.build_Starred": ["torch._C._jit_tree_views.Starred"], "quantized": [], "quantized.QuantizedLinear.__init__": ["torch.jit.ScriptModule.register_buffer", "torch.nn.Parameter", "torch.fbgemm_pack_quantized_matrix", "<builtin>.super", "torch.fbgemm_linear_quantize_weight"], "torch.fbgemm_linear_quantize_weight": [], "torch.fbgemm_pack_quantized_matrix": [], "torch.jit.ScriptModule.register_buffer": [], "quantized.QuantizedLinear": ["torch.jit.script_method"], "quantized.QuantizedLinear._unpack": ["torch.fbgemm_pack_quantized_matrix", "torch.jit.ScriptModule.packed_tensor_ptr.set_"], "torch.jit.ScriptModule.packed_tensor_ptr.set_": [], "quantized.QuantizedLinear._pack": ["torch.zeros", "torch.jit.annotate", "torch.jit.ScriptModule.packed_tensor_ptr.set_"], "quantized.QuantizedLinear.forward": ["torch.fbgemm_linear_int8_weight_fp32_activation"], "torch.fbgemm_linear_int8_weight_fp32_activation": [], "quantized.QuantizedLinear.extra_repr": [], "quantized.QuantizedLinearFP16.__init__": ["torch.fbgemm_pack_gemm_matrix_fp16", "<builtin>.super", "torch.jit.ScriptModule.register_buffer", "torch.nn.Parameter"], "torch.fbgemm_pack_gemm_matrix_fp16": [], "quantized.QuantizedLinearFP16": ["torch.jit.script_method"], "quantized.QuantizedLinearFP16._unpack": ["torch.jit.ScriptModule.packed_weight.set_", "torch.fbgemm_pack_gemm_matrix_fp16"], "torch.jit.ScriptModule.packed_weight.set_": [], "quantized.QuantizedLinearFP16._pack": ["torch.zeros", "torch.jit.annotate", "torch.jit.ScriptModule.packed_weight.set_"], "quantized.QuantizedLinearFP16.forward": ["torch.fbgemm_linear_fp16_weight_fp32_activation"], "torch.fbgemm_linear_fp16_weight_fp32_activation": [], "quantized.QuantizedLinearFP16.extra_repr": [], "quantized.QuantizedRNNCellBase.__init__": ["torch.jit.ScriptModule.register_buffer", "torch.nn.Parameter", "torch.fbgemm_pack_quantized_matrix", "<builtin>.ValueError", "<builtin>.super", "torch.fbgemm_linear_quantize_weight"], "quantized.QuantizedRNNCellBase.extra_repr": [], "quantized.QuantizedRNNCellBase": ["torch.jit.script_method"], "quantized.QuantizedRNNCellBase.check_forward_input": ["<builtin>.RuntimeError"], "quantized.QuantizedRNNCellBase.check_forward_hidden": ["<builtin>.RuntimeError"], "quantized.QuantizedRNNCellBase._unpack": ["torch.fbgemm_pack_quantized_matrix", "torch.jit.ScriptModule.packed_ih.set_", "torch.jit.ScriptModule.packed_hh.set_"], "torch.jit.ScriptModule.packed_ih.set_": [], "torch.jit.ScriptModule.packed_hh.set_": [], "quantized.QuantizedRNNCellBase._pack": ["torch.zeros", "torch.jit.annotate", "torch.jit.ScriptModule.packed_ih.set_", "torch.jit.ScriptModule.packed_hh.set_"], "quantized.QuantizedRNNCell.__init__": ["<builtin>.super"], "quantized.QuantizedRNNCell": ["torch.jit.script_method"], "quantized.QuantizedRNNCell.forward": ["torch.zeros", "<builtin>.RuntimeError", "torch._VF.quantized_rnn_tanh_cell", "torch._VF.quantized_rnn_relu_cell", "quantized.QuantizedRNNCellBase.check_forward_hidden", "quantized.QuantizedRNNCellBase.check_forward_input"], "torch._VF.quantized_rnn_tanh_cell": [], "torch._VF.quantized_rnn_relu_cell": [], "quantized.QuantizedLSTMCell.__init__": ["<builtin>.super"], "quantized.QuantizedLSTMCell": ["torch.jit.script_method"], "quantized.QuantizedLSTMCell.forward": ["torch.zeros", "quantized.QuantizedRNNCellBase.check_forward_hidden", "torch._VF.quantized_lstm_cell", "quantized.QuantizedRNNCellBase.check_forward_input"], "torch._VF.quantized_lstm_cell": [], "quantized.QuantizedGRUCell.__init__": ["<builtin>.super"], "quantized.QuantizedGRUCell": ["torch.jit.script_method"], "quantized.QuantizedGRUCell.forward": ["torch.zeros", "quantized.QuantizedRNNCellBase.check_forward_hidden", "torch._VF.quantized_gru_cell", "quantized.QuantizedRNNCellBase.check_forward_input"], "torch._VF.quantized_gru_cell": [], "quantized.apply_permutation": [], "quantized.QuantizedRNNBase.__init__": ["<builtin>.RuntimeError", "torch.ops.quantized.make_quantized_cell_params_fp16", "<builtin>.range", "torch.ops.quantized.linear_prepack_fp16", "torch.ops.quantized.make_quantized_cell_params", "<builtin>.setattr", "<builtin>.super", "quantized.QuantizedRNNBase.__init__.get_weight_bias"], "quantized.QuantizedRNNBase.__init__.get_weight_bias": ["<builtin>.getattr"], "torch.ops.quantized.make_quantized_cell_params": [], "quantized.QuantizedRNNBase": ["torch.jit.script_method"], "quantized.QuantizedRNNBase.check_input": ["<builtin>.RuntimeError"], "quantized.QuantizedRNNBase.get_expected_hidden_size": ["<builtin>.int"], "quantized.QuantizedRNNBase.check_hidden_size": ["<builtin>.RuntimeError", "<builtin>.list"], "quantized.QuantizedRNNBase.check_forward_args": ["quantized.QuantizedRNNBase.check_input", "quantized.QuantizedRNNBase.check_hidden_size", "quantized.QuantizedRNNBase.get_expected_hidden_size"], "quantized.QuantizedRNNBase.permute_hidden": ["quantized.apply_permutation"], "quantized.QuantizedLSTM.__init__": ["<builtin>.super"], "quantized.QuantizedLSTM": ["torch.jit.script_method"], "quantized.QuantizedLSTM.forward_impl": ["torch.zeros", "<builtin>.float", "quantized.QuantizedLSTM.check_forward_args", "torch.quantized_lstm", "quantized.QuantizedLSTM.permute_hidden"], "quantized.QuantizedLSTM.permute_hidden": ["quantized.apply_permutation"], "quantized.QuantizedLSTM.check_forward_args": ["quantized.QuantizedRNNBase.check_input", "quantized.QuantizedRNNBase.check_hidden_size", "quantized.QuantizedRNNBase.get_expected_hidden_size"], "quantized.QuantizedLSTM.forward_tensor": ["quantized.QuantizedLSTM.permute_hidden", "quantized.QuantizedLSTM.forward_impl"], "quantized.QuantizedLSTM.forward_packed": ["<builtin>.int", "quantized.QuantizedLSTM.permute_hidden", "torch.nn.utils.rnn.PackedSequence", "quantized.QuantizedLSTM.forward_impl"], "quantized.QuantizedLSTM.forward": ["quantized.QuantizedLSTM.forward_tensor", "quantized.QuantizedLSTM.forward_packed", "<builtin>.isinstance"], "quantized.QuantizedGRU": ["torch.jit.script_method"], "quantized.QuantizedGRU.forward_impl": ["torch.zeros", "torch.quantized_gru", "quantized.QuantizedRNNBase.permute_hidden", "quantized.QuantizedLSTM.check_forward_args", "<builtin>.float", "quantized.QuantizedRNNBase.check_forward_args", "quantized.QuantizedLSTM.permute_hidden"], "quantized.QuantizedGRU.forward_tensor": ["quantized.QuantizedRNNBase.permute_hidden", "quantized.QuantizedGRU.forward_impl", "quantized.QuantizedLSTM.permute_hidden"], "quantized.QuantizedGRU.forward_packed": ["quantized.QuantizedGRU.forward_impl", "torch.nn.utils.rnn.PackedSequence", "quantized.QuantizedRNNBase.permute_hidden", "<builtin>.int", "quantized.QuantizedLSTM.permute_hidden"], "quantized.QuantizedGRU.forward": ["quantized.QuantizedGRU.forward_tensor", "<builtin>.isinstance", "quantized.QuantizedGRU.forward_packed"], "quantized.quantize_rnn_cell_modules": ["warnings.warn", "quantized.QuantizedGRUCell.__init__", "quantized.QuantizedLSTMCell.__init__", "<builtin>.isinstance", "<builtin>.setattr", "quantized.quantize_rnn_cell_modules", "quantized.QuantizedRNNCell.__init__"], "quantized.quantize_linear_modules": ["<builtin>.RuntimeError", "warnings.warn", "quantized.QuantizedLinear.__init__", "quantized.QuantizedLinearFP16.__init__", "<builtin>.isinstance", "<builtin>.setattr", "quantized.quantize_linear_modules"], "quantized.quantize_rnn_modules": ["quantized.quantize_rnn_modules", "<builtin>.RuntimeError", "warnings.warn", "quantized.QuantizedLSTM.__init__", "<builtin>.isinstance", "quantized.QuantizedRNNBase.__init__", "<builtin>.setattr"], "supported_ops": ["supported_ops._list_supported_ops"], "supported_ops._hidden": [], "supported_ops._emit_type": ["<builtin>.str"], "supported_ops._emit_arg": ["<builtin>.str", "supported_ops._emit_type"], "supported_ops._emit_args": ["supported_ops._emit_arg", "<builtin>.enumerate"], "supported_ops._emit_ret": ["supported_ops._emit_type"], "supported_ops._emit_rets": ["<builtin>.len", "supported_ops._emit_ret"], "supported_ops._emit_schema": ["<builtin>.len", "supported_ops._emit_args", "supported_ops._emit_rets"], "supported_ops._get_tensor_ops": ["supported_ops._get_tensor_ops.is_tensor_method", "supported_ops._hidden", "supported_ops._emit_schema", "<builtin>.dir"], "supported_ops._get_tensor_ops.is_tensor_method": ["<builtin>.len"], "supported_ops._get_nn_functional_ops": ["inspect.getmodule", "<builtin>.getattr", "<builtin>.RuntimeError", "supported_ops._hidden", "supported_ops._emit_schema", "torch.jit._builtins._find_builtin", "inspect.isfunction", "<builtin>.dir"], "supported_ops._get_builtins_helper": ["inspect.getmodule", "supported_ops._hidden", "<builtin>.hasattr"], "supported_ops._is_math_fn": ["inspect.getmodule", "<builtin>.RuntimeError"], "supported_ops._get_torchscript_builtins": ["<builtin>.filter", "inspect.getmodule", "<builtin>.RuntimeError", "supported_ops._emit_schema", "<builtin>.list", "torch.jit._builtins._find_builtin", "supported_ops._get_builtins_helper"], "supported_ops._get_torchscript_builtins.<lambda1>": ["supported_ops._is_math_fn"], "supported_ops._get_math_builtins": ["<builtin>.filter", "inspect.getmodule", "<builtin>.RuntimeError", "supported_ops._emit_schema", "<builtin>.list", "torch.jit._builtins._find_builtin", "supported_ops._get_builtins_helper"], "supported_ops._get_math_builtins.<lambda1>": ["supported_ops._is_math_fn"], "supported_ops._get_global_builtins": ["<builtin>.len", "textwrap.indent", "supported_ops._emit_schema"], "supported_ops._list_supported_ops": ["<builtin>.len", "<builtin>.isinstance", "supported_ops._list_supported_ops.emit_block"], "supported_ops._list_supported_ops.emit_block": [], "unsupported_tensor_ops": ["unsupported_tensor_ops._list_unsupported_tensor_ops"], "unsupported_tensor_ops.execWrapper": ["<builtin>.exec"], "unsupported_tensor_ops._gen_unsupported_methods_properties": ["<builtin>.filter", "<builtin>.set", "<builtin>.getattr", "<builtin>.globals", "<builtin>.sorted", "<builtin>.repr", "<builtin>.list", "<builtin>.dir", "unsupported_tensor_ops.execWrapper", "textwrap.dedent"], "unsupported_tensor_ops._gen_unsupported_methods_properties.<lambda1>": [], "unsupported_tensor_ops._gen_unsupported_methods_properties.<lambda2>": [], "unsupported_tensor_ops._list_unsupported_tensor_ops": ["unsupported_tensor_ops._gen_unsupported_methods_properties"], "_async": ["torch.utils.set_module", "torch.jit._builtins._register_builtin"], "torch.utils.set_module": [], "_async.fork": ["torch._C.fork"], "torch._C.fork": [], "_async.wait": ["torch._C.wait"], "torch._C.wait": [], "torch.jit._builtins._register_builtin": [], "_builtins": ["_builtins._gen_torch_functional_registered_ops"], "_builtins._gen_torch_functional_registered_ops": ["<builtin>.getattr", "<builtin>.set"], "_builtins._is_special_functional_bound_op": [], "_builtins._get_builtin_table": ["_builtins._get_builtin_table.register_all", "torch.distributed.autograd.is_available", "<builtin>.id"], "_builtins._get_builtin_table.register_all": ["_builtins._is_special_functional_bound_op", "<builtin>.getattr", "<builtin>.callable", "<builtin>.dir"], "torch.distributed.autograd.is_available": [], "_builtins._register_builtin": ["<builtin>.id", "_builtins._get_builtin_table"], "_builtins._find_builtin": ["<builtin>.id", "_builtins._get_builtin_table"], "_check": [], "_check.AttributeTypeIsSupportedChecker.check": ["ast.parse", "inspect.getsource", "ast.NodeVisitor.visit", "<builtin>.list", "textwrap.dedent"], "ast.NodeVisitor.visit": [], "_check.AttributeTypeIsSupportedChecker._is_empty_container": ["<builtin>.isinstance"], "_check.AttributeTypeIsSupportedChecker.visit_Assign": ["<builtin>.isinstance", "ast.NodeVisitor.generic_visit"], "ast.NodeVisitor.generic_visit": [], "_check.AttributeTypeIsSupportedChecker.visit_AnnAssign": ["warnings.warn", "_check.AttributeTypeIsSupportedChecker._is_empty_container"], "_check.AttributeTypeIsSupportedChecker.visit_Call": ["<builtin>.isinstance", "warnings.warn", "_check.AttributeTypeIsSupportedChecker._is_empty_container", "ast.NodeVisitor.generic_visit", "<builtin>.len"], "_freeze": [], "_freeze.freeze": ["torch.jit._script.RecursiveScriptModule", "torch._C._freeze_module", "torch.jit._script.RecursiveScriptModule._finalize_scriptmodule", "<builtin>.RuntimeError", "_freeze.run_frozen_optimizations", "<builtin>.isinstance"], "torch._C._freeze_module": [], "torch.jit._script.RecursiveScriptModule": [], "torch.jit._script.RecursiveScriptModule._finalize_scriptmodule": [], "_freeze.run_frozen_optimizations": ["torch._C._jit_pass_fold_frozen_conv_add_or_sub", "torch._C._jit_pass_fold_frozen_conv_bn", "<builtin>.range", "torch._C._jit_pass_fold_frozen_conv_mul_or_div", "torch._C._jit_pass_remove_dropout"], "torch._C._jit_pass_remove_dropout": [], "torch._C._jit_pass_fold_frozen_conv_bn": [], "torch._C._jit_pass_fold_frozen_conv_add_or_sub": [], "torch._C._jit_pass_fold_frozen_conv_mul_or_div": [], "_freeze.optimize_for_inference": ["_freeze.freeze", "<builtin>.RuntimeError", "<builtin>.hasattr", "torch._C._jit_pass_fuse_frozen_conv_add_relu", "<builtin>.isinstance", "torch._C._jit_pass_convert_frozen_ops_to_mkldnn"], "torch._C._jit_pass_convert_frozen_ops_to_mkldnn": [], "torch._C._jit_pass_fuse_frozen_conv_add_relu": [], "_fuser": ["contextlib.contextmanager"], "_fuser.optimized_execution": ["torch._C._set_graph_executor_optimize", "torch._C._get_graph_executor_optimize"], "torch._C._get_graph_executor_optimize": [], "_fuser.fuser": ["torch._C._jit_nvfuser_enabled", "torch._C._jit_set_nvfuser_enabled", "torch._C._jit_set_profiling_mode", "torch._C._jit_set_profiling_executor", "torch._C._jit_override_can_fuse_on_cpu", "torch._C._jit_set_texpr_fuser_enabled", "<builtin>.Exception", "torch._C._jit_can_fuse_on_cpu", "torch._C._jit_texpr_fuser_enabled", "torch._C._jit_override_can_fuse_on_gpu", "torch._C._jit_can_fuse_on_gpu"], "torch._C._jit_can_fuse_on_cpu": [], "torch._C._jit_can_fuse_on_gpu": [], "torch._C._jit_texpr_fuser_enabled": [], "torch._C._jit_nvfuser_enabled": [], "_fuser._get_differentiable_graph_node": ["_fuser._get_differentiable_graph_node"], "_fuser._graph_for": ["<builtin>.list", "torch._C._last_executed_optimized_graph", "<builtin>.len", "<builtin>.zip", "_fuser._get_differentiable_graph_node"], "torch._C._last_executed_optimized_graph": [], "_logging": [], "_monkeytype_config": [], "_monkeytype_config.get_optional_of_element_type": [], "_monkeytype_config.get_qualified_name": [], "_monkeytype_config.JitTypeTraceStoreLogger.__init__": ["<builtin>.super"], "_monkeytype_config.JitTypeTraceStoreLogger.log": [], "_monkeytype_config.JitTypeTraceStore.__init__": ["<builtin>.super", "collections.defaultdict"], "_monkeytype_config.JitTypeTraceStore.add": ["_monkeytype_config.get_qualified_name"], "_monkeytype_config.JitTypeTraceStore.filter": [], "_monkeytype_config.JitTypeTraceStore.analyze": ["collections.defaultdict"], "_monkeytype_config.JitTypeTraceStore.consolidate_types": ["_monkeytype_config.get_optional_of_element_type", "<builtin>.len", "_monkeytype_config.JitTypeTraceStore.analyze", "<builtin>.str", "inspect.getmodule"], "_monkeytype_config.JitTypeTraceStore.get_args_types": ["_monkeytype_config.JitTypeTraceStore.consolidate_types"], "_monkeytype_config.JitTypeTraceConfig.__init__": ["<builtin>.super"], "_monkeytype_config.JitTypeTraceConfig.trace_logger": ["_monkeytype_config.JitTypeTraceConfig.trace_store", "_monkeytype_config.JitTypeTraceStoreLogger.__init__"], "_monkeytype_config.JitTypeTraceConfig.trace_store": [], "_monkeytype_config.JitTypeTraceConfig.code_filter": [], "_monkeytype_config.jit_code_filter": ["monkeytype.config._startswith", "pathlib.Path", "<builtin>.any"], "monkeytype.config._startswith": [], "_pickle": [], "_pickle.build_intlist": [], "_pickle.build_tensorlist": [], "_pickle.build_doublelist": [], "_pickle.build_boollist": [], "_pickle.build_tensor_from_id": ["<builtin>.isinstance"], "_pickle.restore_type_tag": [], "_recursive": ["<builtin>.type", "_recursive.ConcreteTypeStore.__init__", "collections.namedtuple"], "_recursive._compile_and_register_class": ["torch._C._jit_script_class_compile", "torch.jit._state._get_script_class", "torch.jit._state._add_script_class", "torch.jit.frontend.get_default_args_for_class", "torch.jit.frontend.get_jit_class_def"], "torch.jit._state._get_script_class": [], "torch.jit.frontend.get_jit_class_def": [], "torch.jit.frontend.get_default_args_for_class": [], "torch._C._jit_script_class_compile": [], "torch.jit._state._add_script_class": [], "_recursive.make_stub": ["torch._jit_internal.createResolutionCallbackFromClosure", "torch.jit.frontend.get_jit_def"], "torch._jit_internal.createResolutionCallbackFromClosure": [], "torch.jit.frontend.get_jit_def": [], "_recursive.make_stub_from_method": ["<builtin>.isinstance", "_recursive.make_stub", "<builtin>.getattr"], "_recursive.make_stubs_from_exported_methods": ["torch._jit_internal.get_torchscript_modifier", "<builtin>.dir", "<builtin>.getattr", "_recursive.make_stub_from_method"], "torch._jit_internal.get_torchscript_modifier": [], "_recursive.jit_ignored_properties": ["<builtin>.set", "<builtin>.type", "<builtin>.getattr", "_recursive.jit_ignored_properties.get_properties_names", "<builtin>.list"], "_recursive.jit_ignored_properties.get_properties_names": ["<builtin>.isinstance", "<builtin>.vars", "<builtin>.set"], "_recursive._get_valid_constant": ["_recursive._get_valid_constant", "<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError", "textwrap.dedent", "<builtin>.tuple", "torch.typename"], "_recursive.SourceContext.__init__": ["<builtin>.super"], "_recursive.infer_concrete_type_builder": ["<builtin>.type", "<builtin>.getattr", "<builtin>.list", "<builtin>.AssertionError", "_recursive.infer_concrete_type_builder.infer_type", "torch.jit._builtins._find_builtin", "_recursive.get_module_concrete_type", "<builtin>.set", "_recursive.get_overload_annotations", "torch._jit_internal.is_final", "torch._C.ConcreteModuleType.from_jit_type", "<builtin>.hasattr", "_recursive._get_valid_constant", "warnings.warn", "inspect.isfunction", "torch._C.ConcreteModuleTypeBuilder", "torch._C._jit_try_infer_type", "torch.typename", "torch.jit.script", "<builtin>.isinstance", "_recursive.jit_ignored_properties", "_recursive.get_overload_name_mapping"], "torch._C.ConcreteModuleTypeBuilder": [], "_recursive.infer_concrete_type_builder.infer_type": ["<builtin>.RuntimeError", "<builtin>.isinstance", "torch._C.InferredType", "torch.jit.annotations.ann_to_type", "torch._C._jit_try_infer_type", "torch._sources.fake_range"], "torch._C.InferredType": [], "torch._C.ConcreteModuleType.from_jit_type": [], "_recursive.get_module_concrete_type": ["<builtin>.isinstance", "_recursive.ConcreteTypeStore.get_or_create_concrete_type", "_recursive.infer_concrete_type_builder", "<builtin>.hasattr"], "torch._jit_internal.is_final": [], "_recursive.get_overload_annotations": ["<builtin>.hasattr", "<builtin>.len", "<builtin>.RuntimeError", "<builtin>.type", "<builtin>.getattr", "<builtin>.callable", "<builtin>.dir", "<builtin>.zip", "<builtin>.list", "<builtin>.str", "torch._jit_internal.get_overload_no_implementation_error_message", "torch._jit_internal._get_overloaded_methods", "<builtin>.range"], "_recursive.get_overload_name_mapping": [], "_recursive.ConcreteTypeStore.__init__": ["<builtin>.set"], "_recursive.ConcreteTypeStore.get_or_create_concrete_type": ["_recursive.infer_concrete_type_builder", "<builtin>.type"], "_recursive.create_methods_and_properties_from_stubs": ["torch.jit.frontend.get_default_args"], "torch.jit.frontend.get_default_args": [], "_recursive.create_hooks_from_stubs": [], "_recursive.create_script_class": ["_recursive._compile_and_register_class", "torch._jit_internal.createResolutionCallbackForClassMethods", "torch._C._create_object_with_type", "torch.jit._state._python_cu.get_class", "<builtin>.type", "_recursive.wrap_cpp_class", "torch._jit_internal._qualified_name"], "torch._jit_internal.createResolutionCallbackForClassMethods": [], "torch.jit._state._python_cu.get_class": [], "torch._C._create_object_with_type": [], "_recursive.wrap_cpp_class": ["torch.jit.RecursiveScriptClass"], "_recursive.create_script_module": ["_recursive.get_module_concrete_type", "<builtin>.isinstance", "torch.jit._check.AttributeTypeIsSupportedChecker", "_recursive.check_module_initialized", "_recursive.create_script_module_impl"], "_recursive.check_module_initialized": ["<builtin>.hasattr", "<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.type", "torch.nn.parameter.is_lazy", "torch.typename"], "torch.jit._check.AttributeTypeIsSupportedChecker": [], "_recursive.create_script_module_impl": ["_recursive.add_python_attr_to_scripted_model", "<builtin>.getattr", "<builtin>.list", "_recursive.get_hook_stubs", "<builtin>.property", "_recursive.get_property_stubs", "functools.wraps", "<builtin>.enumerate", "torch.jit.RecursiveScriptModule._construct", "_recursive.create_methods_and_properties_from_stubs", "<builtin>.repr", "torch._C._create_module_with_type", "<builtin>.len", "_recursive.interface_script.infer_interface_methods_to_compile", "<builtin>.isinstance", "_recursive.jit_ignored_properties", "<builtin>.dir", "_recursive.create_hooks_from_stubs", "torch._jit_internal.get_torchscript_modifier", "torch._C._run_emit_module_hook"], "torch._C._create_module_with_type": [], "_recursive.interface_script.infer_interface_methods_to_compile": ["_recursive.make_stub_from_method"], "_recursive.get_property_stubs": ["<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.type", "<builtin>.getattr", "<builtin>.dir", "torch._jit_internal.createResolutionCallbackFromClosure", "torch.jit.frontend.get_class_properties"], "_recursive.get_hook_stubs": ["<builtin>.id", "<builtin>.RuntimeError", "<builtin>.type", "_recursive.make_stub", "_recursive.check_module_initialized"], "_recursive.create_script_module_impl.init_fn": ["<builtin>.setattr", "<builtin>.isinstance", "inspect.ismethod", "<builtin>.type", "<builtin>.getattr", "<builtin>.dir", "_recursive.interface_script", "_recursive.create_script_module_impl", "torch._jit_internal.is_ignored_fn"], "_recursive.interface_script": ["<builtin>.isinstance", "_recursive.check_module_initialized", "_recursive.create_script_module"], "torch._jit_internal.is_ignored_fn": [], "torch.jit.RecursiveScriptModule._construct": [], "torch._C._run_emit_module_hook": [], "_recursive.add_python_attr_to_scripted_model": ["<builtin>.hasattr", "<builtin>.setattr", "<builtin>.getattr", "_recursive.script_model_defines_attr"], "_recursive.script_model_defines_attr": ["<builtin>.getattr"], "torch._jit_internal._get_overloaded_methods": [], "torch._jit_internal.get_overload_no_implementation_error_message": [], "_recursive._check_no_signature": ["<builtin>.RuntimeError", "inspect.ismethod", "torch._jit_internal._qualified_name", "torch.jit.annotations.get_signature", "torch._sources.fake_range"], "torch.jit.annotations.get_signature": [], "_recursive.make_stubs_for_overloads": ["torch._C._replace_overloaded_method_decl", "_recursive._check_no_signature", "torch._jit_internal.createResolutionCallbackFromClosure", "torch.jit.frontend.get_jit_def"], "torch._C._replace_overloaded_method_decl": [], "_recursive.infer_methods_to_compile": ["<builtin>.hasattr", "_recursive.make_stub_from_method", "<builtin>.filter", "<builtin>.dict", "_recursive.jit_ignored_properties", "<builtin>.dir", "<builtin>.getattr", "_recursive.get_overload_annotations", "_recursive.make_stubs_for_overloads", "<builtin>.set", "<builtin>.list", "_recursive.check_module_initialized", "torch._jit_internal.get_torchscript_modifier", "_recursive.get_overload_name_mapping", "torch._jit_internal.is_ignored_fn"], "_recursive.infer_methods_to_compile.ignore_overloaded": [], "torch.jit.frontend.get_class_properties": [], "_recursive.try_compile_fn": ["<builtin>.RuntimeError", "torch.jit.script", "<builtin>.isinstance", "inspect.ismethod", "torch._jit_internal.createResolutionCallbackFromClosure", "inspect.isfunction", "torch._jit_internal.is_ignored_fn"], "torch.jit.RecursiveScriptClass": [], "_recursive.wrap_cpp_module": ["torch.jit.RecursiveScriptModule._construct"], "_recursive.wrap_cpp_module.init_fn": ["<builtin>.setattr", "torch._C.ConcreteModuleType.from_jit_type", "torch._C.ModuleDict", "_recursive.wrap_cpp_module", "<builtin>.enumerate"], "torch._C.ModuleDict": [], "_recursive.compile_unbound_method": ["_recursive.create_methods_and_properties_from_stubs", "_recursive.make_stub", "torch._jit_internal._disable_emit_hooks", "torch._jit_internal.is_ignored_fn"], "_recursive.lazy_bind": ["torch._jit_internal.copy_torchscript_modifier"], "_recursive.lazy_bind.lazy_binding_method": ["torch.jit.RecursiveScriptModule._construct", "types.MethodType"], "_recursive.lazy_bind.lazy_binding_method.init_fn": ["<builtin>.dir", "<builtin>.getattr", "<builtin>.setattr", "torch._jit_internal.is_ignored_fn"], "torch._jit_internal.copy_torchscript_modifier": [], "_script": ["torch.utils.set_module", "<builtin>.isinstance", "torch.jit._builtins._register_builtin", "<builtin>.callable", "torch.jit._monkeytype_config.JitTypeTraceStore", "<builtin>.setattr", "<builtin>.hasattr", "_script._get_methods", "_script._make_fail", "collections.namedtuple"], "torch.jit._monkeytype_config.JitTypeTraceStore": [], "_script.Attribute": [], "_script._get_type_trace_db": [], "_script._get_function_from_type": ["<builtin>.getattr"], "_script._is_new_style_class": ["<builtin>.hasattr", "<builtin>.dir"], "_script.OrderedDictWrapper.__init__": [], "_script.OrderedDictWrapper.keys": ["_script.OrderedModuleDict.items", "_script.OrderedDictWrapper.items"], "_script.OrderedModuleDict.items": ["_script.OrderedModuleDict.items"], "_script.OrderedDictWrapper.items": [], "_script.OrderedDictWrapper.values": ["_script.OrderedModuleDict.items", "_script.OrderedDictWrapper.items"], "_script.OrderedDictWrapper.__len__": ["<builtin>.len", "_script.OrderedDictWrapper.values"], "_script.OrderedDictWrapper.__delitem__": ["<builtin>.RuntimeError"], "_script.OrderedDictWrapper.__setitem__": ["<builtin>.RuntimeError"], "_script.OrderedDictWrapper.__contains__": [], "_script.OrderedDictWrapper.__getitem__": ["<builtin>.KeyError"], "_script.OrderedModuleDict.__init__": ["torch._C.ModuleDict", "<builtin>.super"], "_script.OrderedModuleDict.__contains__": [], "_script.OrderedModuleDict.__setitem__": ["<builtin>.isinstance", "<builtin>.RuntimeError"], "_script.OrderedModuleDict.__getitem__": [], "_script.ScriptMeta.__init__": ["<builtin>.delattr", "<builtin>.set", "<builtin>.isinstance", "functools.wraps", "<builtin>.getattr", "<builtin>.super", "<builtin>.sorted", "<builtin>.reversed"], "_script.ScriptMeta.__init__.<lambda1>": [], "_script.ScriptMeta.__init__.init_then_script": ["<builtin>.len", "<builtin>.delattr", "torch.jit._recursive.create_script_module", "<builtin>.type"], "_script.ScriptMeta.__init__.init_then_script.make_stubs": ["<builtin>.hasattr", "<builtin>.type", "torch.jit._recursive.infer_methods_to_compile", "<builtin>.sorted"], "torch.jit._recursive.infer_methods_to_compile": [], "torch.jit._recursive.create_script_module": [], "_script._CachedForward.__get__": [], "_script.script_method": ["torch.jit._recursive.ScriptMethodStub", "torch._jit_internal.createResolutionCallbackFromFrame", "torch.jit.frontend.get_jit_def"], "torch._jit_internal.createResolutionCallbackFromFrame": [], "torch.jit._recursive.ScriptMethodStub": [], "_script.ConstMap.__init__": [], "_script.ConstMap.__getattr__": [], "_script.unpackage_script_module": ["<builtin>.isinstance", "torch.jit._recursive.wrap_cpp_module", "<builtin>.RuntimeError", "torch._C._import_ir_module_from_package", "_serialization.validate_map_location", "torch._C.CompilationUnit"], "torch._C.CompilationUnit": [], "_serialization.validate_map_location": ["torch.device", "torch.serialization.validate_cuda_device", "<builtin>.ValueError", "<builtin>.type", "<builtin>.str", "<builtin>.isinstance"], "torch._C._import_ir_module_from_package": [], "torch.jit._recursive.wrap_cpp_module": [], "_script.RecursiveScriptClass.__init__": ["<builtin>.property", "<builtin>.super"], "_script.RecursiveScriptClass.__getattr__": ["<builtin>.getattr", "<builtin>.super"], "_script.RecursiveScriptClass.__setattr__": ["<builtin>.setattr", "<builtin>.super"], "_script.RecursiveScriptClass.forward_magic_method": ["<builtin>.TypeError", "_script.RecursiveScriptClass.__getattr__"], "_script.RecursiveScriptClass.__getstate__": ["pickle.PickleError"], "pickle.PickleError": [], "_script.RecursiveScriptClass.__iadd__": ["_script.RecursiveScriptClass.forward_magic_method"], "_script.method_template": [], "_script.ScriptModule.__init__": ["<builtin>.super"], "_script.ScriptModule.__getattr__": ["<builtin>.getattr", "<builtin>.super"], "_script.ScriptModule.__setattr__": ["<builtin>.setattr", "<builtin>.isinstance", "<builtin>.super"], "_script.ScriptModule.define": ["torch._C._parse_source_def", "torch.jit._recursive.ScriptMethodStub", "torch._jit_internal.createResolutionCallbackFromFrame"], "torch._C._parse_source_def": [], "_script.ScriptModule._replicate_for_data_parallel": [], "_script.ScriptModule.__reduce_package__": ["<builtin>.int"], "_script.RecursiveScriptModule.__init__": ["<builtin>.delattr", "<builtin>.super"], "_script.RecursiveScriptModule._construct": ["_script.RecursiveScriptModule.__init__", "_script.RecursiveScriptModule._replicate_for_data_parallel.init_fn", "_script.RecursiveScriptModule._finalize_scriptmodule"], "_script.RecursiveScriptModule._replicate_for_data_parallel.init_fn": [], "_script.RecursiveScriptModule._finalize_scriptmodule": ["_script.OrderedModuleDict.__init__", "torch._C.BufferDict", "torch._C.ParameterDict", "_script.OrderedDictWrapper.__init__"], "torch._C.ParameterDict": [], "torch._C.BufferDict": [], "_script.RecursiveScriptModule._reconstruct": ["<builtin>.isinstance", "torch._C.ParameterDict", "_script.RecursiveScriptModule.__init__", "torch.jit._recursive.wrap_cpp_module", "torch._C.ConcreteModuleType.from_jit_type", "torch._C.BufferDict", "_script.OrderedDictWrapper.__init__", "torch._C.ModuleDict", "_script.OrderedModuleDict.__init__"], "_script.RecursiveScriptModule.graph": [], "_script.RecursiveScriptModule.inlined_graph": [], "_script.RecursiveScriptModule.code": [], "_script.RecursiveScriptModule.code_with_constants": ["_script.ConstMap.__init__"], "_script.RecursiveScriptModule.save": ["<builtin>.str"], "_script.RecursiveScriptModule._save_for_lite_interpreter": [], "_script.RecursiveScriptModule._save_to_buffer_for_lite_interpreter": [], "_script.RecursiveScriptModule.save_to_buffer": [], "_script.RecursiveScriptModule.get_debug_state": [], "_script.RecursiveScriptModule.extra_repr": [], "_script.RecursiveScriptModule.graph_for": [], "_script.RecursiveScriptModule.original_name": ["<builtin>.type", "<builtin>.str"], "_script.RecursiveScriptModule.define": ["torch._jit_internal.createResolutionCallbackFromFrame"], "_script.RecursiveScriptModule.__getattr__": ["<builtin>.RuntimeError", "<builtin>.super"], "_script.RecursiveScriptModule.__setattr__": ["<builtin>.hasattr", "<builtin>.AttributeError", "<builtin>.super"], "_script.RecursiveScriptModule.__getstate__": ["pickle.PickleError"], "_script.RecursiveScriptModule.__copy__": ["copy.copy", "torch.jit._recursive.wrap_cpp_module"], "_script.RecursiveScriptModule.__deepcopy__": ["torch.jit._recursive.wrap_cpp_module", "copy.deepcopy"], "_script.RecursiveScriptModule.forward_magic_method": ["<builtin>.getattr", "<builtin>.NotImplementedError"], "_script.RecursiveScriptModule.__iter__": ["_script.RecursiveScriptModule.forward_magic_method"], "_script.RecursiveScriptModule.__getitem__": ["_script.RecursiveScriptModule.forward_magic_method"], "_script.RecursiveScriptModule.__len__": ["_script.RecursiveScriptModule.forward_magic_method"], "_script.RecursiveScriptModule.__contains__": ["_script.RecursiveScriptModule.forward_magic_method"], "_script.RecursiveScriptModule.__dir__": ["_script.RecursiveScriptModule.__dir__", "_script._get_function_from_type", "<builtin>.super"], "_script.RecursiveScriptModule.__bool__": ["_script.RecursiveScriptModule.__bool__", "_script._get_function_from_type"], "_script.RecursiveScriptModule._replicate_for_data_parallel": ["_script.RecursiveScriptModule._construct"], "_script._get_methods": ["inspect.getmembers"], "_script._get_methods.<lambda1>": ["inspect.ismethod", "inspect.isfunction"], "_script._make_fail": [], "_script._make_fail.fail": ["<builtin>.RuntimeError"], "_script.call_prepare_scriptable_func_impl": ["<builtin>.hasattr", "<builtin>.isinstance", "_script.call_prepare_scriptable_func_impl", "<builtin>.id"], "_script.call_prepare_scriptable_func": ["_script.call_prepare_scriptable_func_impl"], "_script._script_pdt": ["_script.script", "<builtin>.isinstance", "warnings.warn", "torch.jit._monkeytype_config.JitTypeTraceConfig", "torch.jit._monkeytype_config.JitTypeTraceStore", "torch.jit._monkeytype_config.monkeytype_trace"], "torch.jit._monkeytype_config.JitTypeTraceConfig": [], "torch.jit._monkeytype_config.monkeytype_trace": [], "_script.script": ["<builtin>.len", "torch._jit_internal.createResolutionCallbackFromClosure", "<builtin>.isinstance", "warnings.warn", "_script._check_directly_compile_overloaded", "<builtin>.hasattr", "torch.jit._recursive.create_script_class", "_script.call_prepare_scriptable_func", "inspect.isclass", "torch.jit.frontend.get_jit_def", "torch.jit._recursive.create_script_module", "torch._jit_internal.createResolutionCallbackFromFrame", "<builtin>.issubclass", "torch.jit.frontend.get_default_args", "<builtin>.RuntimeError", "inspect.isfunction", "torch._jit_internal._qualified_name", "torch.jit._state._try_get_jit_cached_function", "_script._is_new_style_class", "_script.create_script_list", "_script.create_script_dict", "torch._C._jit_script_compile", "torch.jit._state._set_jit_function_cache", "inspect.ismethod", "torch.jit._recursive._compile_and_register_class"], "_script.create_script_dict": ["torch._C.ScriptDict"], "torch._C.ScriptDict": [], "_script.create_script_list": ["torch._C.ScriptList"], "torch._C.ScriptList": [], "torch.jit._recursive._compile_and_register_class": [], "_script._check_directly_compile_overloaded": ["torch._jit_internal._qualified_name", "torch._jit_internal._get_fn_overloads", "torch.jit._state._try_get_jit_cached_overloads", "<builtin>.RuntimeError"], "torch.jit._state._try_get_jit_cached_function": [], "torch._C._jit_script_compile": [], "torch.jit._state._set_jit_function_cache": [], "torch.jit._recursive.create_script_class": [], "_script._check_overload_defaults": ["torch.jit.frontend.FrontendError"], "_script._compile_function_with_overload": ["torch._jit_internal.createResolutionCallbackFromClosure", "torch.jit.frontend.get_default_args", "inspect.ismethod", "_script._check_overload_defaults", "torch.jit.frontend.get_jit_def", "torch.jit.annotations.get_signature", "torch._C._jit_script_compile_overload"], "torch._C._jit_script_compile_overload": [], "_script._get_overloads": ["torch._jit_internal._clear_fn_overloads", "<builtin>.RuntimeError", "torch.jit._state._try_get_jit_cached_overloads", "torch.jit._state._set_jit_overload_cache", "_script._compile_function_with_overload", "torch._jit_internal._qualified_name", "torch._jit_internal._get_fn_overloads", "torch._jit_internal.get_overload_no_implementation_error_message"], "torch.jit._state._try_get_jit_cached_overloads": [], "torch._jit_internal._get_fn_overloads": [], "torch.jit._state._set_jit_overload_cache": [], "torch._jit_internal._clear_fn_overloads": [], "_script.interface": ["<builtin>.len", "torch._C._jit_script_interface_compile", "<builtin>.RuntimeError", "torch._jit_internal._qualified_name", "inspect.isclass", "torch.jit.frontend.get_jit_class_def", "_script._is_new_style_class", "torch._jit_internal.createResolutionCallbackFromFrame", "<builtin>.issubclass"], "torch._C._jit_script_interface_compile": [], "_script._recursive_compile_class": ["torch._C.CallStack", "torch._jit_internal._qualified_name", "torch.jit._recursive._compile_and_register_class", "torch._jit_internal.createResolutionCallbackForClassMethods"], "torch._C.CallStack": [], "_script.pad": ["<builtin>.len", "<builtin>.range"], "_script._ScriptProfileColumn.__init__": [], "_script._ScriptProfileColumn.add_row": [], "_script._ScriptProfileColumn.materialize": ["<builtin>.len", "<builtin>.max", "_script.pad", "<builtin>.str"], "_script._ScriptProfileTable.__init__": [], "_script._ScriptProfileTable.dump_string": ["<builtin>.len", "_script.pad", "<builtin>.dict"], "_script._ScriptProfile.__init__": ["torch._classes.classes.profiling._ScriptProfile"], "torch._classes.classes.profiling._ScriptProfile": [], "_script._ScriptProfile.enable": [], "_script._ScriptProfile.disable": [], "_script._ScriptProfile.dump_string": ["<builtin>.len", "<builtin>.range", "_script._ScriptProfileColumn.add_row", "_script._ScriptProfileColumn.__init__", "_script._ScriptProfileTable.__init__", "_script._ScriptProfileTable.dump_string", "<builtin>.list", "<builtin>.min"], "_script._ScriptProfile.dump": ["<builtin>.print", "_script._ScriptProfile.dump_string"], "_script._unwrap_optional": [], "_serialization": [], "_serialization.save": ["<builtin>.isinstance"], "_serialization.load": ["torch.jit._recursive.wrap_cpp_module", "<builtin>.ValueError", "torch._C.CompilationUnit", "os.path.isdir", "os.path.exists", "<builtin>.str", "torch._C.import_ir_module_from_buffer", "_serialization.validate_map_location", "torch._C.import_ir_module", "<builtin>.isinstance"], "torch._C.import_ir_module": [], "torch._C.import_ir_module_from_buffer": [], "torch.serialization.validate_cuda_device": [], "_state": ["_state.EnabledProxy.__init__", "torch._C.CompilationUnit", "weakref.WeakKeyDictionary"], "_state.EnabledProxy.__init__": ["_state.EnabledProxy.parse_env"], "_state.EnabledProxy.parse_env": ["<builtin>.ValueError", "os.environ.get", "<builtin>.print"], "_state.EnabledProxy.__bool__": [], "_state.disable": [], "_state.enable": [], "_state._add_script_class": [], "_state._get_python_class": [], "_state._clear_class_state": [], "_state._try_get_jit_cached_overloads": [], "_state._set_jit_overload_cache": [], "_state._try_get_jit_cached_function": ["<builtin>.getattr"], "_state._set_jit_function_cache": ["<builtin>.isinstance"], "_trace": ["_trace.TracerWarning.ignore_lib_warnings", "torch._C._tracer_warn_use_python", "contextlib.contextmanager", "torch.no_grad", "os.environ.get"], "_trace._create_interpreter_name_lookup_fn": [], "_trace._create_interpreter_name_lookup_fn._get_interpreter_name_for_var": ["<builtin>.RuntimeError", "inspect.currentframe", "<builtin>.isinstance"], "_trace._unique_state_dict": ["<builtin>.type", "<builtin>.id", "<builtin>.set"], "_trace.ONNXTracedModule.__init__": ["<builtin>.super"], "_trace.ONNXTracedModule.forward": ["_trace._unique_state_dict", "torch._C._jit_flatten", "torch._C._create_graph_by_tracing", "_trace._create_interpreter_name_lookup_fn", "<builtin>.list"], "torch._C._jit_flatten": [], "_trace.ONNXTracedModule.forward.wrapper": ["<builtin>.RuntimeError", "<builtin>.range", "<builtin>.isinstance", "<builtin>.tuple", "torch._C._jit_flatten", "<builtin>.len", "torch._C._jit_unflatten"], "torch._C._jit_unflatten": [], "torch._C._create_graph_by_tracing": [], "_trace._clone_inputs": ["torch.autograd.function._nested_map"], "_trace._clone_inputs.clone_input": ["_trace._clone_inputs.clone_input", "<builtin>.isinstance"], "_trace._clone_inputs.<lambda1>": ["<builtin>.isinstance"], "_trace._time": ["torch.cuda.Event", "torch.cuda.current_stream", "<builtin>.print", "torch.cuda.is_available"], "_trace.verify": ["_trace._verify_equal", "<builtin>.isinstance", "<builtin>.TypeError", "_trace._clone_inputs", "_trace.verify.run_fwd_bwd", "copy.deepcopy", "torch.random.fork_rng"], "_trace.verify.run_fwd_bwd": ["<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.ValueError", "torch._C._jit_flatten", "<builtin>.len", "torch.autograd.grad", "<builtin>.list"], "_trace._verify_equal": ["<builtin>.RuntimeError", "<builtin>.zip"], "_trace.indent": [], "_trace.TracingCheckError.__init__": ["_trace.indent", "<builtin>.super"], "_trace._check_trace": ["<builtin>.isinstance", "_trace._check_trace.run_mod_and_filter_tensor_outputs", "_trace._check_trace.compare_outputs", "_trace._clone_inputs", "torch._C.CompilationUnit", "<builtin>.any", "torch.jit.trace", "_trace.TracingCheckError.__init__", "_trace._check_trace.graph_diagnostic_info", "<builtin>.hasattr", "torch.jit.trace_module"], "torch.jit.trace_module": [], "_trace._check_trace.graph_diagnostic_info": ["<builtin>.str", "re.sub", "torch._C._jit_pass_canonicalize", "torch._C._jit_pass_erase_shape_information", "_trace.indent", "difflib.ndiff", "torch._C._jit_pass_inline", "<builtin>.zip", "torch.testing.assert_allclose"], "torch._C._jit_pass_erase_shape_information": [], "difflib.ndiff": [], "_trace._check_trace.wrap_retval": ["<builtin>.isinstance"], "_trace._check_trace.run_mod_and_filter_tensor_outputs": ["_trace._check_trace.wrap_retval", "<builtin>.isinstance", "<builtin>.str", "_trace._clone_inputs", "_trace.TracingCheckError.__init__", "_trace.indent", "_trace._check_trace.graph_diagnostic_info"], "_trace._check_trace.maybe_warn_nondeterministic": ["<builtin>.str", "_trace.indent", "<builtin>.len", "warnings.warn"], "_trace._check_trace.compare_outputs": ["<builtin>.str", "torch.testing._core._get_default_tolerance", "<builtin>.enumerate", "<builtin>.zip", "torch.testing.assert_allclose", "warnings.warn", "_trace._check_trace.maybe_warn_nondeterministic"], "torch.testing._core._get_default_tolerance": [], "_trace.TracerWarning.ignore_lib_warnings": ["warnings.filterwarnings"], "torch._C._tracer_warn_use_python": [], "_trace.make_tuple": ["<builtin>.tuple", "<builtin>.isinstance"], "_trace.make_module": ["<builtin>.isinstance", "torch.jit._recursive.create_script_module", "torch._jit_internal.module_has_exports", "_trace.TracedModule.__init__"], "torch._jit_internal.module_has_exports": [], "_trace.TracedModule.__init__": ["torch._C._jit_is_script_object", "<builtin>.str", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "_trace.make_module", "<builtin>.delattr", "<builtin>.set", "torch.nn.Module.__init__", "<builtin>.setattr", "torch._jit_internal._qualified_name", "_trace.TracedModule.__init__.check_unique", "torch.jit._recursive.create_script_module", "<builtin>.super"], "_trace.wrap_check_inputs": [], "_trace.trace": ["_trace._check_trace", "_trace.wrap_check_inputs", "<builtin>.isinstance", "<builtin>.tuple", "_trace.trace_module", "torch._C._create_function_from_trace", "_trace._create_interpreter_name_lookup_fn", "torch._jit_internal._qualified_name", "<builtin>.AttributeError", "<builtin>.hasattr", "torch._jit_internal.get_callable_argument_names", "warnings.warn"], "_trace.trace_module": ["<builtin>.getattr", "_trace._check_trace", "<builtin>.isinstance", "_trace.make_module", "_trace.trace_module.register_submods", "_trace.make_tuple", "_trace._create_interpreter_name_lookup_fn", "<builtin>.AttributeError", "torch._jit_internal.get_callable_argument_names", "warnings.warn"], "torch._jit_internal.get_callable_argument_names": [], "torch._C._create_function_from_trace": [], "_trace.trace_module.register_submods": ["_trace.trace_module.register_submods"], "_trace.is_tracing": ["torch._jit_internal.is_scripting", "torch._C._is_tracing"], "torch._C._is_tracing": [], "_trace.TracedModule.__init__.check_unique": ["<builtin>.ValueError"], "torch._C._jit_is_script_object": [], "_trace.TracedModule.__init__.<lambda1>": [], "_trace.TracedModule.forward": ["<builtin>.RuntimeError"], "_trace.TracedModule.__getattr__": ["<builtin>.getattr", "<builtin>.super"], "_trace.TracedModule.__setattr__": ["<builtin>.setattr", "<builtin>.super"], "_trace.TracedModule._get_name": [], "_trace.TracedModule.extra_repr": [], "torch.jit._script._CachedForward": [], "_trace.TopLevelTracedModule": ["torch.jit._script._CachedForward"], "_trace.TopLevelTracedModule._reconstruct": [], "_trace._script_if_tracing": ["functools.wraps"], "_trace._script_if_tracing.wrapper": ["_trace.is_tracing", "torch.jit._script.script"], "torch.jit._script.script": [], "_trace._get_trace_graph": ["<builtin>.isinstance", "_trace.ONNXTracedModule.__init__"], "pool": [], "pool.clean_worker": ["gc.collect"], "pool.Pool._setup_queues": ["queue.SimpleQueue"], "queue.SimpleQueue": [], "pool.Pool._repopulate_pool": ["<builtin>.range", "<builtin>.len", "multiprocessing.util.debug", "<builtin>.hasattr"], "multiprocessing.util.debug": [], "queue": [], "queue.ConnectionWrapper.__init__": [], "queue.ConnectionWrapper.send": ["io.BytesIO", "multiprocessing.reduction.ForkingPickler"], "multiprocessing.reduction.ForkingPickler": [], "queue.ConnectionWrapper.recv": ["pickle.loads"], "queue.ConnectionWrapper.__getattr__": ["<builtin>.type", "<builtin>.getattr", "<builtin>.AttributeError"], "queue.Queue.__init__": ["<builtin>.super", "queue.ConnectionWrapper.__init__"], "queue.SimpleQueue._make_methods": ["<builtin>.super", "<builtin>.isinstance", "queue.ConnectionWrapper.__init__"], "reductions": ["reductions.SharedCache.__init__"], "reductions.StorageWeakRef.__init__": [], "reductions.StorageWeakRef.expired": ["torch.Storage._expired"], "torch.Storage._expired": [], "reductions.StorageWeakRef.__del__": ["torch.Storage._free_weak_ref"], "torch.Storage._free_weak_ref": [], "reductions.SharedCache.__init__": ["reductions.SharedCache._after_fork", "multiprocessing.util.register_after_fork"], "reductions.SharedCache._after_fork": ["threading.Lock"], "multiprocessing.util.register_after_fork": [], "reductions.SharedCache.get": [], "reductions.SharedCache.__setitem__": ["reductions.SharedCache.free_dead_references", "<builtin>.len"], "reductions.SharedCache.free_dead_references": ["<builtin>.list", "<builtin>.max"], "reductions.rebuild_event": ["torch.cuda.Event.from_ipc_handle"], "torch.cuda.Event.from_ipc_handle": [], "reductions.reduce_event": [], "reductions.rebuild_tensor": ["torch._utils._rebuild_tensor", "torch.nn.parameter.Parameter"], "torch._utils._rebuild_tensor": [], "reductions.rebuild_cuda_tensor": ["torch._utils._rebuild_tensor", "reductions.storage_from_cache", "torch.nn.parameter.Parameter", "torch.cuda._lazy_init", "reductions.StorageWeakRef.__init__"], "reductions.storage_from_cache": ["reductions.SharedCache.get"], "torch.cuda._lazy_init": [], "reductions.reduce_tensor": ["torch.utils.hooks.warn_if_has_hooks", "<builtin>.RuntimeError", "<builtin>.type", "torch._namedtensor_internals.check_serializing_named_tensor", "reductions.StorageWeakRef.__init__"], "reductions.fd_id": ["os.fstat"], "os.fstat": [], "reductions.rebuild_storage_fd": ["reductions.storage_from_cache", "reductions.fd_id", "os.close", "reductions.StorageWeakRef.__init__"], "reductions.rebuild_storage_filename": ["reductions.storage_from_cache", "reductions.StorageWeakRef.__init__"], "reductions.rebuild_storage_empty": [], "reductions.reduce_storage": ["<builtin>.RuntimeError", "<builtin>.type", "multiprocessing.reduction.DupFd", "reductions.fd_id", "get_sharing_strategy", "reductions.StorageWeakRef.__init__"], "get_sharing_strategy": [], "multiprocessing.reduction.DupFd": [], "reductions.init_reductions": ["multiprocessing.reduction.ForkingPickler.register"], "multiprocessing.reduction.ForkingPickler.register": [], "spawn": [], "spawn.ProcessException.__init__": ["<builtin>.super"], "spawn.ProcessRaisedException.__init__": ["<builtin>.super"], "spawn.ProcessExitedException.__init__": ["<builtin>.super"], "spawn._wrap": ["_prctl_pr_set_pdeathsig", "traceback.format_exc", "sys.exit"], "_prctl_pr_set_pdeathsig": [], "spawn.ProcessContext.__init__": ["<builtin>.enumerate"], "spawn.ProcessContext.pids": ["<builtin>.int"], "spawn.ProcessContext.join": ["spawn.ProcessRaisedException.__init__", "spawn.ProcessExitedException.__init__", "multiprocessing.connection.wait", "signal.Signals", "<builtin>.len"], "spawn.SpawnContext.__init__": ["warnings.warn", "<builtin>.super"], "spawn.start_processes": ["spawn.ProcessContext.__init__", "<builtin>.range", "spawn.ProcessContext.join", "multiprocessing.get_context"], "multiprocessing.get_context": [], "spawn.spawn": ["warnings.warn", "spawn.start_processes"], "_atfork": [], "_atfork._register": ["os.register_at_fork", "multiprocessing.util.register_after_fork"], "_atfork._register.wrapper": [], "os.register_at_fork": [], "_atfork.register_after_fork": ["_atfork._register"], "common_types": ["typing.TypeVar"], "cpp.OrderedDictWrapper.__init__": [], "cpp.OrderedDictWrapper.cpp_dict": ["<builtin>.getattr"], "cpp.OrderedDictWrapper.items": [], "cpp.OrderedDictWrapper.keys": [], "cpp.OrderedDictWrapper.values": [], "cpp.OrderedDictWrapper.__iter__": [], "cpp.OrderedDictWrapper.__len__": [], "cpp.OrderedDictWrapper.__contains__": [], "cpp.OrderedDictWrapper.__getitem__": [], "cpp.ModuleWrapper.__init__": ["<builtin>.dir", "<builtin>.setattr", "<builtin>.super", "cpp.OrderedDictWrapper.__init__", "<builtin>.getattr"], "cpp.ModuleWrapper._apply": ["torch.nn.Module.parameters", "torch.nn.Module.buffers"], "torch.nn.Module.buffers": [], "cpp.ModuleWrapper.training": [], "cpp.ModuleWrapper.__repr__": [], "functional.fractional_max_pool2d_with_indices": ["torch._C._nn.fractional_max_pool2d", "torch.rand", "modules.utils._pair", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "<builtin>.ValueError", "<builtin>.int"], "modules.utils._pair": [], "torch._C._nn.fractional_max_pool2d": [], "functional._fractional_max_pool2d": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional.hardsigmoid"], "functional.fractional_max_pool3d_with_indices": ["modules.utils._triple", "torch.rand", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "<builtin>.ValueError", "<builtin>.int", "torch._C._nn.fractional_max_pool3d"], "modules.utils._triple": [], "torch._C._nn.fractional_max_pool3d": [], "functional._fractional_max_pool3d": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional.hardsigmoid"], "functional.max_pool1d_with_indices": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.jit.annotate", "torch.max_pool1d_with_indices"], "torch.max_pool1d_with_indices": [], "functional._max_pool1d": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.jit.annotate", "torch.max_pool1d"], "torch.max_pool1d": [], "functional.max_pool2d_with_indices": ["torch._C._nn.max_pool2d_with_indices", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.jit.annotate"], "torch._C._nn.max_pool2d_with_indices": [], "functional._max_pool2d": ["torch.max_pool2d", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.jit.annotate"], "torch.max_pool2d": [], "functional.max_pool3d_with_indices": ["torch._C._nn.max_pool3d_with_indices", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.jit.annotate"], "torch._C._nn.max_pool3d_with_indices": [], "functional._max_pool3d": ["torch.max_pool3d", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch.jit.annotate"], "torch.max_pool3d": [], "functional._unpool_output_size": ["<builtin>.len", "torch.jit.annotate", "<builtin>.ValueError", "<builtin>.range"], "modules.utils._single": [], "torch._C._nn.max_unpool2d": [], "torch._C._nn.max_unpool3d": [], "torch.sign": [], "functional.adaptive_max_pool1d_with_indices": ["torch.adaptive_max_pool1d", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "torch.adaptive_max_pool1d": [], "functional._adaptive_max_pool1d": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional.hardsigmoid"], "functional.adaptive_max_pool2d_with_indices": ["torch._C._nn.adaptive_max_pool2d", "modules.utils._list_with_default", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "modules.utils._list_with_default": [], "torch._C._nn.adaptive_max_pool2d": [], "functional._adaptive_max_pool2d": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional.hardsigmoid"], "functional.adaptive_max_pool3d_with_indices": ["modules.utils._list_with_default", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._C._nn.adaptive_max_pool3d"], "torch._C._nn.adaptive_max_pool3d": [], "functional._adaptive_max_pool3d": ["overrides.has_torch_function_unary", "overrides.handle_torch_function", "functional.hardsigmoid"], "torch._C._nn.adaptive_avg_pool2d": [], "torch._C._nn.adaptive_avg_pool3d": [], "torch._VF.dropout_": [], "torch._VF.dropout": [], "torch._VF.alpha_dropout_": [], "torch._VF.alpha_dropout": [], "torch._VF.feature_dropout_": [], "torch._VF.feature_dropout": [], "torch._VF.feature_alpha_dropout_": [], "torch._VF.feature_alpha_dropout": [], "functional._threshold": ["torch._VF.threshold", "overrides.has_torch_function_unary", "overrides.handle_torch_function", "torch._VF.threshold_"], "torch._VF.threshold_": [], "torch._VF.threshold": [], "torch.relu_": [], "torch._C._nn.glu": [], "functional.relu6": ["torch._C._nn.relu6", "torch._C._nn.relu6_", "overrides.has_torch_function_unary", "overrides.handle_torch_function"], "torch._C._nn.relu6_": [], "torch._C._nn.relu6": [], "torch._C._nn.elu_": [], "torch._C._nn.elu": [], "torch.selu_": [], "torch.selu": [], "torch.celu_": [], "torch.celu": [], "torch.prelu": [], "torch.rrelu_": [], "torch.rrelu": [], "torch._C._nn.gelu": [], "torch.hardshrink": [], "functional._get_softmax_dim": ["warnings.warn"], "functional.gumbel_softmax": ["warnings.warn", "torch.empty_like", "overrides.handle_torch_function", "overrides.has_torch_function_unary", "torch.zeros_like"], "functional.tanh": ["warnings.warn"], "functional.sigmoid": ["warnings.warn"], "torch._C._nn.hardsigmoid_": [], "torch._C._nn.linear": [], "torch.bilinear": [], "torch._C._nn.silu_": [], "torch._C._nn.silu": [], "torch._C._nn.mish_": [], "torch._C._nn.mish": [], "torch._C._nn.hardswish_": [], "torch._C._nn.hardswish": [], "functional._no_grad_embedding_renorm_": ["torch.embedding_renorm_", "torch.no_grad"], "torch.embedding_renorm_": [], "torch.embedding": [], "torch.embedding_bag": [], "functional._verify_batch_size": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.range"], "torch.batch_norm": [], "functional._verify_spatial_size": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.range"], "torch.instance_norm": [], "torch.layer_norm": [], "torch.group_norm": [], "_reduction.get_enum": ["<builtin>.ValueError", "warnings.warn"], "torch.ctc_loss": [], "torch._C._nn.nll_loss_nd": [], "torch.poisson_nll_loss": [], "torch.unsqueeze": [], "_reduction.legacy_get_enum": ["_reduction.get_enum", "_reduction.legacy_get_string"], "torch.kl_div": [], "torch._C._nn.cross_entropy_loss": [], "torch._C._nn.binary_cross_entropy": [], "torch.binary_cross_entropy_with_logits": [], "torch._C._nn.smooth_l1_loss": [], "torch._C._nn.huber_loss": [], "torch._C._nn.l1_loss": [], "torch._C._nn.mse_loss": [], "torch.margin_ranking_loss": [], "torch.hinge_embedding_loss": [], "torch._C._nn.multilabel_margin_loss": [], "torch._C._nn.soft_margin_loss": [], "torch.cosine_embedding_loss": [], "torch._C._nn.multi_margin_loss": [], "torch.floor": [], "torch._C._nn.upsample_nearest1d": [], "torch._C._nn.upsample_nearest2d": [], "torch._C._nn.upsample_nearest3d": [], "torch._C._nn.upsample_linear1d": [], "torch._C._nn.upsample_bilinear2d": [], "torch._C._nn.upsample_trilinear3d": [], "torch._C._nn.upsample_bicubic2d": [], "functional.grid_sample": ["warnings.warn", "overrides.handle_torch_function", "overrides.has_torch_function_variadic", "<builtin>.ValueError", "torch.grid_sampler"], "torch.grid_sampler": [], "functional.affine_grid": ["<builtin>.min", "warnings.warn", "torch.affine_grid_generator", "<builtin>.NotImplementedError", "overrides.handle_torch_function", "<builtin>.len", "overrides.has_torch_function_unary", "<builtin>.ValueError"], "torch.affine_grid_generator": [], "functional._pad": ["torch._C._nn.reflection_pad1d", "torch._C._nn.reflection_pad2d", "functional._pad_circular", "torch._VF.constant_pad_nd", "<builtin>.NotImplementedError", "torch._C._nn.replication_pad2d", "overrides.handle_torch_function", "torch._C._nn.replication_pad1d", "torch._C._nn.reflection_pad3d", "torch._C._nn.replication_pad3d", "<builtin>.len", "overrides.has_torch_function_unary"], "torch._VF.constant_pad_nd": [], "torch._C._nn.reflection_pad1d": [], "torch._C._nn.replication_pad1d": [], "functional._pad_circular": ["<builtin>.len", "<builtin>.max", "torch.empty", "<builtin>.enumerate"], "torch._C._nn.reflection_pad2d": [], "torch._C._nn.replication_pad2d": [], "torch._C._nn.reflection_pad3d": [], "torch._C._nn.replication_pad3d": [], "torch.triplet_margin_loss": [], "functional.assert_int_or_pair": ["<builtin>.len", "<builtin>.isinstance"], "torch._C._nn.im2col": [], "torch._C._nn.col2im": [], "functional._in_projection_packed": ["functional.hardsigmoid"], "functional._in_projection": ["functional.hardsigmoid"], "functional._scaled_dot_product_attention": ["math.sqrt", "torch.bmm", "functional.hardsigmoid"], "grad": [], "grad._grad_input_padding": ["<builtin>.len", "<builtin>.zip", "grad._grad_input_padding.dim_size", "<builtin>.list", "warnings.warn", "<builtin>.range", "<builtin>.ValueError", "<builtin>.tuple"], "grad._grad_input_padding.dim_size": [], "grad.conv1d_input": ["<builtin>.ValueError", "torch.conv_transpose1d", "grad._grad_input_padding", "modules.utils._single"], "torch.conv_transpose1d": [], "grad.conv1d_weight": ["torch.conv1d", "modules.utils._single"], "torch.conv1d": [], "grad.conv2d_input": ["<builtin>.ValueError", "modules.utils._pair", "torch.conv_transpose2d", "grad._grad_input_padding"], "torch.conv_transpose2d": [], "grad.conv2d_weight": ["modules.utils._pair", "torch.conv2d"], "torch.conv2d": [], "grad.conv3d_input": ["torch.conv_transpose3d", "<builtin>.ValueError", "modules.utils._triple", "grad._grad_input_padding"], "torch.conv_transpose3d": [], "grad.conv3d_weight": ["torch.conv3d", "modules.utils._triple"], "torch.conv3d": [], "init._no_grad_uniform_": ["torch.no_grad"], "init._no_grad_normal_": ["torch.no_grad"], "init._no_grad_trunc_normal_": ["torch.no_grad", "warnings.warn", "math.sqrt", "init._no_grad_trunc_normal_.norm_cdf"], "init._no_grad_trunc_normal_.norm_cdf": ["math.erf", "math.sqrt"], "math.erf": [], "init._no_grad_fill_": ["torch.no_grad"], "init._no_grad_zero_": ["torch.no_grad"], "init.calculate_gain": ["math.sqrt", "<builtin>.ValueError", "<builtin>.isinstance"], "init.trunc_normal_": ["init._no_grad_trunc_normal_"], "init.constant_": ["init._no_grad_fill_"], "init.eye_": ["torch.no_grad", "torch.eye", "<builtin>.ValueError"], "init.dirac_": ["torch.no_grad", "<builtin>.range", "<builtin>.min", "<builtin>.ValueError"], "init.xavier_normal_": ["init._calculate_fan_in_and_fan_out", "math.sqrt", "init._no_grad_normal_", "<builtin>.float"], "init._calculate_correct_fan": ["init._calculate_fan_in_and_fan_out", "<builtin>.ValueError"], "init.kaiming_normal_": ["init._calculate_correct_fan", "torch.no_grad", "math.sqrt", "warnings.warn", "init.calculate_gain"], "init.orthogonal_": ["torch.linalg.qr", "torch.diag", "<builtin>.ValueError", "torch.no_grad"], "init.sparse_": ["torch.no_grad", "torch.randperm", "<builtin>.range", "<builtin>.ValueError", "math.ceil", "<builtin>.int"], "init._make_deprecate": [], "init._make_deprecate.deprecated_init": ["init.kaiming_normal_", "init.orthogonal_", "init.sparse_", "init.xavier_uniform_", "init.dirac_", "init.normal_", "warnings.warn", "init.uniform_", "init.kaiming_uniform_", "init.eye_", "init.constant_", "init.xavier_normal_"], "parameter": [], "parameter.Parameter.__new__": ["torch.Tensor._make_subclass", "torch.tensor"], "torch.Tensor._make_subclass": [], "parameter.Parameter.__deepcopy__": ["<builtin>.id", "torch.Tensor.data.clone", "<builtin>.type"], "torch.Tensor.data.clone": [], "parameter.Parameter.__repr__": ["<builtin>.super"], "parameter.Parameter.__reduce_ex__": ["collections.OrderedDict"], "parameter.UninitializedTensorMixin.materialize": ["torch.empty"], "parameter.UninitializedTensorMixin.shape": ["<builtin>.RuntimeError"], "parameter.UninitializedTensorMixin.share_memory_": ["<builtin>.RuntimeError"], "parameter.UninitializedTensorMixin.__repr__": [], "parameter.UninitializedTensorMixin.__reduce_ex__": [], "parameter.UninitializedTensorMixin.__torch_function__": ["<builtin>.ValueError", "<builtin>.super"], "parameter.UninitializedParameter.__new__": ["torch.Tensor._make_subclass", "torch.tensor"], "parameter.UninitializedBuffer.__new__": ["torch.Tensor._make_subclass", "torch.tensor"], "_reduction": [], "operators": [], "operators.shape_as_tensor": ["torch._shape_as_tensor"], "torch._shape_as_tensor": [], "operators.reshape_from_tensor_shape": ["torch._reshape_from_tensor"], "torch._reshape_from_tensor": [], "symbolic_caffe2": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_caffe2.register_quantized_ops": ["torch.onnx.symbolic_registry.register_op", "torch.onnx.symbolic_registry.register_version", "importlib.import_module", "inspect.getmembers", "torch.onnx.symbolic_registry.is_registered_op", "inspect.isfunction"], "torch.onnx.symbolic_registry.register_version": [], "torch.onnx.symbolic_registry.is_registered_op": [], "torch.onnx.symbolic_registry.register_op": [], "symbolic_caffe2._permute_helper": ["torch.onnx.symbolic_helper._quantized_ops.add"], "torch.onnx.symbolic_helper._quantized_ops.add": [], "symbolic_caffe2.nchw2nhwc": ["symbolic_caffe2._permute_helper"], "symbolic_caffe2.nhwc2nchw": ["symbolic_caffe2._permute_helper"], "symbolic_caffe2.linear_prepack": ["torch.onnx.symbolic_helper._quantized_ops.add"], "torch.onnx.symbolic_helper.parse_args": [], "symbolic_caffe2.linear": ["torch.onnx.symbolic_helper._quantized_ops.add"], "symbolic_caffe2.conv_prepack": ["torch.onnx.symbolic_helper._quantized_ops.add"], "symbolic_caffe2.conv2d": ["torch.onnx.symbolic_helper._quantized_ops.add"], "symbolic_caffe2.conv2d_relu": ["torch.onnx.symbolic_helper._quantized_ops.add"], "symbolic_caffe2.add": ["torch.onnx.symbolic_helper._quantized_ops.add"], "symbolic_caffe2.relu": ["torch.onnx.symbolic_opset9.relu", "torch.onnx.symbolic_helper._quantized_ops.add"], "torch.onnx.symbolic_opset9.relu": [], "symbolic_caffe2.quantize_per_tensor": ["torch.onnx.symbolic_helper._quantized_ops.add"], "symbolic_caffe2.dequantize": [], "symbolic_caffe2._empty_affine_quantized": [], "symbolic_caffe2.upsample_nearest2d": ["symbolic_caffe2.nhwc2nchw", "torch.onnx.symbolic_helper._quantized_ops.add", "torch.onnx.symbolic_helper._parse_arg", "symbolic_caffe2.nchw2nhwc", "torch.onnx.symbolic_opset9.upsample_nearest2d"], "torch.onnx.symbolic_opset9.upsample_nearest2d": [], "torch.onnx.symbolic_helper._parse_arg": [], "symbolic_caffe2.max_pool2d": ["symbolic_caffe2.nhwc2nchw", "torch.onnx.symbolic_opset9.max_pool2d", "symbolic_caffe2.nchw2nhwc", "torch.onnx.symbolic_helper._quantized_ops.add"], "torch.onnx.symbolic_opset9.max_pool2d": [], "symbolic_caffe2.avg_pool2d": ["symbolic_caffe2.nchw2nhwc", "symbolic_caffe2.nhwc2nchw", "torch.onnx.symbolic_helper._quantized_ops.add", "torch.onnx.symbolic_opset9.avg_pool2d"], "torch.onnx.symbolic_opset9.avg_pool2d": [], "symbolic_caffe2.reshape": ["torch.onnx.symbolic_opset9.reshape", "torch.onnx.symbolic_helper._quantized_ops.add"], "torch.onnx.symbolic_opset9.reshape": [], "symbolic_caffe2.slice": ["<builtin>.RuntimeError", "torch.onnx.symbolic_opset9.slice", "torch.onnx.symbolic_helper._quantized_ops.add", "torch.onnx.symbolic_helper._parse_arg"], "torch.onnx.symbolic_opset9.slice": [], "symbolic_caffe2.cat": ["torch.onnx.symbolic_helper._parse_arg", "torch.onnx.symbolic_helper._quantized_ops.add", "torch.onnx.symbolic_opset9.cat", "torch.onnx.symbolic_helper._unpack_list"], "torch.onnx.symbolic_helper._unpack_list": [], "torch.onnx.symbolic_opset9.cat": [], "symbolic_caffe2.sigmoid": ["torch.onnx.symbolic_opset9.sigmoid", "torch.onnx.symbolic_helper._quantized_ops.add"], "torch.onnx.symbolic_opset9.sigmoid": [], "symbolic_helper": ["<builtin>.set"], "symbolic_helper._parse_arg": ["<builtin>.str", "<builtin>.bool", "<builtin>.RuntimeError", "<builtin>.int", "<builtin>.float", "symbolic_helper._is_value"], "symbolic_helper._is_value": ["<builtin>.isinstance"], "symbolic_helper._maybe_get_const": ["symbolic_helper._parse_arg", "symbolic_helper._is_value"], "symbolic_helper._maybe_get_scalar": ["<builtin>.isinstance", "symbolic_helper._maybe_get_const"], "symbolic_helper._get_const": ["symbolic_helper._parse_arg", "<builtin>.RuntimeError", "symbolic_helper._is_constant"], "symbolic_helper._is_constant": ["symbolic_helper._is_value"], "symbolic_helper._unpack_list": ["<builtin>.list"], "symbolic_helper._is_packed_list": ["symbolic_helper._is_value"], "symbolic_helper.parse_args": [], "symbolic_helper.parse_args.decorator": ["functools.wraps"], "symbolic_helper.parse_args.decorator.wrapper": ["<builtin>.len", "symbolic_helper._parse_arg", "inspect.signature", "<builtin>.list", "<builtin>.zip"], "symbolic_helper._scalar": [], "symbolic_helper._if_scalar_type_as": ["<builtin>.isinstance", "<builtin>.getattr"], "symbolic_helper._is_none": [], "symbolic_helper._is_tensor": ["torch._C.TensorType.get"], "symbolic_helper._is_list": ["<builtin>.isinstance"], "symbolic_helper._is_tensor_list": ["<builtin>.isinstance", "symbolic_helper._is_list"], "symbolic_helper._is_scalar_list": ["<builtin>.str", "symbolic_helper._is_list"], "symbolic_helper._get_tensor_rank": ["symbolic_helper._is_tensor"], "symbolic_helper._get_tensor_sizes": ["symbolic_helper._is_tensor"], "symbolic_helper._get_tensor_dim_size": ["symbolic_helper._get_tensor_sizes"], "symbolic_helper._unimplemented": ["warnings.warn"], "symbolic_helper._onnx_unsupported": ["<builtin>.RuntimeError"], "symbolic_helper._onnx_opset_unsupported": ["<builtin>.RuntimeError"], "symbolic_helper._onnx_opset_unsupported_detailed": ["<builtin>.RuntimeError"], "symbolic_helper._block_list_in_opset": [], "symbolic_helper._block_list_in_opset.symbolic_fn": ["<builtin>.RuntimeError"], "symbolic_helper._try_get_scalar_type": [], "symbolic_helper._select_helper": ["symbolic_helper._get_tensor_rank", "torch.LongTensor", "symbolic_helper._maybe_get_scalar", "symbolic_helper._is_value"], "symbolic_helper._slice_helper": ["torch.onnx.symbolic_opset10._slice", "torch.onnx.symbolic_opset9._slice"], "torch.onnx.symbolic_opset9._slice": [], "torch.onnx.symbolic_opset10._slice": [], "symbolic_helper._is_fp": ["warnings.warn", "<builtin>.isinstance"], "symbolic_helper._dtype_is_fp": [], "symbolic_helper._generate_wrapped_number": ["torch.tensor", "<builtin>.isinstance"], "symbolic_helper._sort_helper": ["symbolic_helper._unimplemented", "torch.tensor"], "symbolic_helper._topk_helper": ["symbolic_helper._unimplemented", "torch.tensor", "symbolic_helper._is_value"], "symbolic_helper._interpolate_warning": ["warnings.warn", "<builtin>.str"], "symbolic_helper._unsqueeze_helper": ["torch.tensor"], "symbolic_helper._squeeze_helper": ["torch.tensor"], "symbolic_helper._reducesum_helper": ["torch.tensor", "symbolic_helper._is_value", "symbolic_helper._maybe_get_const"], "symbolic_helper._interpolate_size_to_scales": ["symbolic_helper._slice_helper", "torch.tensor", "symbolic_helper._maybe_get_const", "<builtin>.float", "<builtin>.range", "torch.ones", "symbolic_helper._is_value"], "symbolic_helper._interpolate_get_scales_if_available": ["torch.ones", "symbolic_helper._is_none", "torch.tensor", "symbolic_helper._maybe_get_const"], "symbolic_helper._get_interpolate_attributes": ["symbolic_helper._interpolate_get_scales_if_available"], "symbolic_helper._interpolate_get_scales": ["<builtin>.isinstance", "symbolic_helper._get_tensor_rank", "<builtin>.range", "symbolic_helper._unsqueeze_helper", "torch.ones"], "symbolic_helper._interpolate_get_scales_and_mode": ["symbolic_helper._unimplemented", "<builtin>.isinstance", "symbolic_helper._is_none", "symbolic_helper._interpolate_size_to_scales", "symbolic_helper._is_packed_list", "symbolic_helper._interpolate_warning", "symbolic_helper._interpolate_get_scales", "<builtin>.range", "symbolic_helper._unsqueeze_helper", "symbolic_helper._maybe_get_const"], "symbolic_helper._interpolate_helper": [], "symbolic_helper._interpolate_helper.symbolic_fn": ["symbolic_helper._slice_helper", "symbolic_helper._optional_input_placeholder_tensor", "torch.tensor", "symbolic_helper._get_interpolate_attributes", "symbolic_helper._maybe_get_scalar"], "symbolic_helper._optional_input_placeholder_tensor": ["torch._C.OptionalType.ofTensor"], "symbolic_helper.__interpolate_helper": ["symbolic_helper._unimplemented", "symbolic_helper._slice_helper", "<builtin>.isinstance", "symbolic_helper._optional_input_placeholder_tensor", "symbolic_helper._get_tensor_rank", "symbolic_helper._is_none", "torch.tensor", "symbolic_helper._is_packed_list", "symbolic_helper._interpolate_get_scales", "warnings.warn", "<builtin>.range", "symbolic_helper._unsqueeze_helper", "symbolic_helper._maybe_get_const"], "symbolic_helper._unbind_helper": ["torch.onnx.symbolic_opset13.unbind", "torch.onnx.symbolic_opset11.unbind", "torch.onnx.symbolic_opset9.unbind"], "torch.onnx.symbolic_opset13.unbind": [], "torch.onnx.symbolic_opset11.unbind": [], "torch.onnx.symbolic_opset9.unbind": [], "symbolic_helper._scatter_helper": ["torch.onnx.symbolic_opset9.scatter", "torch.onnx.symbolic_opset11.scatter"], "torch.onnx.symbolic_opset9.scatter": [], "torch.onnx.symbolic_opset11.scatter": [], "symbolic_helper._repeat_interleave_split_helper": ["torch.tensor", "torch.onnx.symbolic_opset13.split"], "torch.onnx.symbolic_opset13.split": [], "symbolic_helper._arange_cast_helper": ["symbolic_helper._is_none", "symbolic_helper._arange_cast_helper._is_all_integral", "torch.get_default_dtype", "symbolic_helper._is_value"], "symbolic_helper._arange_cast_helper._is_all_integral": [], "symbolic_helper._arange_helper": ["torch.onnx.symbolic_opset11.arange", "torch.onnx.symbolic_opset9.arange"], "torch.onnx.symbolic_opset11.arange": [], "torch.onnx.symbolic_opset9.arange": [], "symbolic_helper._size_helper": ["torch.tensor", "torch.onnx.symbolic_opset9.select"], "torch.onnx.symbolic_opset9.select": [], "symbolic_helper._index_fill_reshape_helper": ["symbolic_helper._unimplemented", "torch.onnx.symbolic_opset9.expand", "symbolic_helper._unsqueeze_helper", "symbolic_helper._parse_arg", "torch.onnx.symbolic_opset9.scatter", "<builtin>.range", "torch.onnx.symbolic_opset11.scatter"], "torch.onnx.symbolic_opset9.expand": [], "symbolic_helper._avgpool_helper": ["symbolic_helper._unimplemented", "<builtin>.tuple"], "symbolic_helper.assert_training_mode": ["warnings.warn"], "symbolic_helper._flatten_helper": ["torch.tensor", "torch.onnx.symbolic_opset9._reshape_from_tensor", "symbolic_helper._slice_helper"], "torch.onnx.symbolic_opset9._reshape_from_tensor": [], "symbolic_helper._is_split_static": ["symbolic_helper._is_value"], "torch._C.OptionalType.ofTensor": [], "symbolic_helper._handle_reduce_dim_none": ["symbolic_helper._get_tensor_rank", "symbolic_helper._get_tensor_dim_size", "<builtin>.any", "<builtin>.range"], "symbolic_helper._set_opset_version": ["<builtin>.str", "<builtin>.ValueError"], "symbolic_helper._set_operator_export_type": [], "symbolic_helper._set_training_mode": [], "symbolic_helper._set_onnx_shape_inference": [], "symbolic_helper._cast_func_template": [], "symbolic_opset10": ["torch.onnx.symbolic_helper.parse_args", "symbolic_opset10._interpolate", "symbolic_opset10._avg_pool", "symbolic_opset10._max_pool"], "symbolic_opset10.div": ["<builtin>.len", "symbolic_opset10._div_rounding_mode", "torch.onnx.symbolic_opset9.true_divide"], "torch.onnx.symbolic_opset9.true_divide": [], "symbolic_opset10._div_rounding_mode": ["torch.onnx.symbolic_opset9._div_rounding_mode", "symbolic_opset10._floor_divide"], "symbolic_opset10._floor_divide": ["torch.tensor", "torch.onnx.symbolic_opset9.true_divide", "torch.onnx.symbolic_helper._is_fp"], "torch.onnx.symbolic_opset9._div_rounding_mode": [], "torch.onnx.symbolic_helper._is_fp": [], "symbolic_opset10.sort": ["torch.onnx.symbolic_helper._sort_helper"], "torch.onnx.symbolic_helper._sort_helper": [], "symbolic_opset10.topk": ["torch.onnx.symbolic_helper._topk_helper"], "torch.onnx.symbolic_helper._topk_helper": [], "symbolic_opset10._max_pool": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset10._max_pool.symbolic_fn": ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "<builtin>.set", "torch.onnx.symbolic_helper._slice_helper", "torch.nn.modules.utils._triple", "torch.onnx.symbolic_opset9.sub", "<builtin>.range"], "torch.onnx.symbolic_helper._slice_helper": [], "torch.onnx.symbolic_opset9.sub": [], "symbolic_opset10._avg_pool": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset10._avg_pool.symbolic_fn": ["<builtin>.len", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "torch.nn.modules.utils._triple", "torch.onnx.symbolic_helper._avgpool_helper"], "torch.onnx.symbolic_helper._avgpool_helper": [], "symbolic_opset10._interpolate": [], "symbolic_opset10._interpolate.symbolic_fn": ["torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._get_interpolate_attributes", "torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._interpolate_warning", "torch.onnx.symbolic_helper._interpolate_size_to_scales"], "torch.onnx.symbolic_helper._get_interpolate_attributes": [], "torch.onnx.symbolic_helper._interpolate_warning": [], "torch.onnx.symbolic_helper._maybe_get_scalar": [], "torch.onnx.symbolic_helper._unimplemented": [], "torch.onnx.symbolic_helper._interpolate_size_to_scales": [], "symbolic_opset10.__interpolate": ["torch.onnx.symbolic_helper._interpolate_get_scales_and_mode"], "torch.onnx.symbolic_helper._interpolate_get_scales_and_mode": [], "symbolic_opset10._slice": ["torch.onnx.symbolic_helper._unsqueeze_helper", "<builtin>.len", "torch.tensor", "<builtin>.isinstance"], "torch.onnx.symbolic_helper._unsqueeze_helper": [], "symbolic_opset10.slice": ["<builtin>.isinstance", "<builtin>.len", "torch.onnx.symbolic_helper._parse_arg", "torch.tensor", "torch.onnx.symbolic_helper._slice_helper", "<builtin>.NotImplementedError"], "symbolic_opset10.flip": ["<builtin>.len", "torch.onnx.symbolic_helper._slice_helper"], "symbolic_opset10.fmod": [], "symbolic_opset10.embedding_bag": ["torch.onnx.symbolic_helper._onnx_unsupported", "torch.onnx.symbolic_opset9.select", "torch.onnx.symbolic_helper._unsqueeze_helper", "torch.onnx.symbolic_helper._is_none", "torch.tensor", "torch.onnx.symbolic_helper._reducesum_helper", "torch.onnx.symbolic_helper._get_tensor_dim_size", "<builtin>.RuntimeError", "warnings.warn", "<builtin>.range"], "torch.onnx.symbolic_helper._onnx_unsupported": [], "torch.onnx.symbolic_helper._get_tensor_dim_size": [], "torch.onnx.symbolic_helper._is_none": [], "torch.onnx.symbolic_helper._reducesum_helper": [], "symbolic_opset10.fake_quantize_per_tensor_affine": ["torch.tensor", "<builtin>.RuntimeError"], "symbolic_opset10.isinf": ["torch.onnx.symbolic_opset9._cast_Double"], "torch.onnx.symbolic_opset9._cast_Double": [], "symbolic_opset11": ["symbolic_opset11._avg_pool", "symbolic_opset11._interpolate", "torch.onnx.symbolic_helper.parse_args"], "symbolic_opset11.hardtanh": ["torch.onnx.symbolic_helper.scalar_type_to_onnx.index", "torch.tensor"], "torch.onnx.symbolic_helper.scalar_type_to_onnx.index": [], "symbolic_opset11.clamp": ["symbolic_opset11.clamp._cast_if_not_none", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_helper._is_none", "symbolic_opset11.clamp_min", "symbolic_opset11.clamp_max"], "symbolic_opset11.clamp._cast_if_not_none": ["torch.onnx.symbolic_helper._is_none"], "symbolic_opset11.clamp_max": ["torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_opset9.unused"], "symbolic_opset11.clamp_min": ["torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_opset9.unused"], "torch.onnx.symbolic_helper._get_tensor_rank": [], "torch.onnx.symbolic_opset9.unused": [], "symbolic_opset11.relu6": ["torch.onnx.symbolic_helper.scalar_type_to_onnx.index", "torch.tensor", "symbolic_opset11.clamp"], "symbolic_opset11.select": [], "symbolic_opset11.index_put": ["<builtin>.range", "torch.onnx.symbolic_helper.scalar_type_to_onnx.index", "torch.onnx.symbolic_helper._parse_arg", "symbolic_opset11.masked_scatter", "torch.onnx.symbolic_helper._is_packed_list", "torch.onnx.symbolic_opset9.add", "torch.onnx.symbolic_opset9.expand", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_opset9.masked_fill", "torch.onnx.symbolic_helper._unpack_list", "torch.tensor", "torch.onnx.symbolic_helper._unsqueeze_helper", "<builtin>.len", "torch.onnx.symbolic_helper._slice_helper"], "torch.onnx.symbolic_helper._is_packed_list": [], "torch.onnx.symbolic_opset9.add": [], "torch.onnx.symbolic_opset9.masked_fill": [], "symbolic_opset11.masked_scatter": ["torch.onnx.symbolic_opset9.view", "torch.LongTensor", "torch.onnx.symbolic_helper._slice_helper", "torch.onnx.symbolic_opset9.expand_as", "torch.onnx.symbolic_opset9.nonzero", "torch.onnx.symbolic_opset9.size"], "symbolic_opset11.pixel_shuffle": ["torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset11._interpolate": ["torch.onnx.symbolic_helper._interpolate_helper"], "torch.onnx.symbolic_helper._interpolate_helper": [], "symbolic_opset11.__interpolate": ["torch.onnx.symbolic_helper.__interpolate_helper"], "torch.onnx.symbolic_helper.__interpolate_helper": [], "symbolic_opset11.gather": ["torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._maybe_get_const"], "torch.onnx.symbolic_helper._maybe_get_const": [], "symbolic_opset11.scatter": ["torch.onnx.symbolic_opset9.expand_as", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._maybe_get_scalar"], "torch.onnx.symbolic_helper._is_value": [], "torch.onnx.symbolic_opset9.expand_as": [], "symbolic_opset11.cumsum": ["torch.tensor", "torch.onnx.symbolic_helper._get_const"], "torch.onnx.symbolic_helper._get_const": [], "symbolic_opset11.masked_select": ["torch.onnx.symbolic_opset9.expand_as", "torch.onnx.symbolic_opset9.nonzero"], "torch.onnx.symbolic_opset9.nonzero": [], "torch.onnx.symbolic_opset9.view": [], "torch.onnx.symbolic_opset9.size": [], "symbolic_opset11._len": ["symbolic_opset11.size", "torch.onnx.symbolic_helper._squeeze_helper", "torch.onnx.symbolic_helper._is_tensor_list", "torch.LongTensor"], "torch.onnx.symbolic_helper._is_tensor_list": [], "symbolic_opset11.size": ["torch.onnx.symbolic_helper._size_helper"], "torch.onnx.symbolic_helper._squeeze_helper": [], "symbolic_opset11.__getitem_": ["torch.onnx.symbolic_helper._is_tensor_list", "torch.onnx.symbolic_opset9.__getitem_"], "torch.onnx.symbolic_opset9.__getitem_": [], "symbolic_opset11._set_item": [], "symbolic_opset11.append": [], "symbolic_opset11.add": ["torch.onnx.symbolic_opset9.add", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._unpack_list", "torch.onnx.symbolic_helper._is_tensor_list", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset11.insert": [], "symbolic_opset11.pop": [], "symbolic_opset11.Delete": [], "symbolic_opset11.cat": ["torch.onnx.symbolic_helper._is_packed_list", "torch.onnx.symbolic_opset9.cat", "torch.onnx.symbolic_helper._get_const"], "symbolic_opset11.stack": ["torch.onnx.symbolic_helper._is_packed_list", "torch.onnx.symbolic_opset9.stack", "torch.onnx.symbolic_helper._get_const"], "torch.onnx.symbolic_opset9.stack": [], "symbolic_opset11._unique2": [], "symbolic_opset11._avg_pool": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset11._avg_pool.symbolic_fn": ["torch.onnx.symbolic_helper._avgpool_helper", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._single", "torch.tensor", "torch.nn.modules.utils._pair", "<builtin>.len"], "symbolic_opset11.unique_dim": [], "symbolic_opset11.topk": ["torch.onnx.symbolic_helper._topk_helper"], "symbolic_opset11.sort": ["torch.onnx.symbolic_helper._sort_helper"], "symbolic_opset11.round": [], "symbolic_opset11.split": ["<builtin>.range", "torch.onnx.symbolic_helper._is_packed_list", "torch.onnx.symbolic_helper._is_split_static", "torch.onnx.symbolic_opset9.split", "torch.onnx.symbolic_helper._unpack_list", "torch.tensor", "torch.onnx.symbolic_helper._unsqueeze_helper", "<builtin>.len"], "torch.onnx.symbolic_helper._is_split_static": [], "torch.onnx.symbolic_opset9.split": [], "symbolic_opset11.split_with_sizes": ["symbolic_opset11.split"], "symbolic_opset11.unbind": ["torch.onnx.symbolic_opset9.unbind", "torch.tensor"], "symbolic_opset11._prepare_onnx_paddings": ["torch.tensor", "torch.onnx.symbolic_opset9.size", "torch.onnx.symbolic_opset10.flip"], "torch.onnx.symbolic_opset10.flip": [], "symbolic_opset11.constant_pad_nd": ["torch.onnx.symbolic_helper._if_scalar_type_as", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_helper._maybe_get_scalar", "symbolic_opset11._prepare_onnx_paddings"], "torch.onnx.symbolic_helper._if_scalar_type_as": [], "symbolic_opset11.reflection_pad": ["torch.onnx.symbolic_helper._get_tensor_rank", "symbolic_opset11._prepare_onnx_paddings"], "symbolic_opset11.replication_pad": ["torch.onnx.symbolic_helper._get_tensor_rank", "symbolic_opset11._prepare_onnx_paddings"], "symbolic_opset11.linalg_det": [], "symbolic_opset11.logdet": ["symbolic_opset11.linalg_det", "torch.onnx.symbolic_opset9.log"], "torch.onnx.symbolic_opset9.log": [], "symbolic_opset11.arange": ["torch.onnx.symbolic_helper._arange_cast_helper", "<builtin>.NotImplementedError", "symbolic_opset11.arange._get_arange_dtype", "torch.tensor", "<builtin>.str", "<builtin>.len"], "symbolic_opset11.arange._get_arange_dtype": ["torch.onnx.symbolic_helper._maybe_get_const"], "torch.onnx.symbolic_helper._arange_cast_helper": [], "symbolic_opset11._dim_arange": ["symbolic_opset11.arange", "torch.tensor"], "torch.onnx.symbolic_helper._size_helper": [], "symbolic_opset11.squeeze": ["torch.onnx.symbolic_helper._get_tensor_dim_size", "warnings.warn", "torch.onnx.symbolic_helper._squeeze_helper", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.utils._add_block", "torch.onnx.utils._add_output_to_block", "torch.ones", "torch.tensor", "<builtin>.str", "torch.onnx.symbolic_helper._size_helper", "torch.onnx.symbolic_helper._get_const"], "torch.onnx.utils._add_block": [], "torch.onnx.utils._add_output_to_block": [], "symbolic_opset11.unsqueeze": ["torch.onnx.symbolic_helper._unsqueeze_helper"], "symbolic_opset11.mm": [], "symbolic_opset11.index": ["torch.onnx.symbolic_helper._is_packed_list", "torch.onnx.symbolic_opset9.nonzero", "torch.onnx.symbolic_helper._unpack_list", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_opset9.index", "<builtin>.len"], "torch.onnx.symbolic_opset9.index": [], "symbolic_opset11.index_fill": ["torch.onnx.symbolic_helper._parse_arg", "torch.onnx.symbolic_opset9.expand", "torch.onnx.symbolic_helper._if_scalar_type_as", "torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._index_fill_reshape_helper", "symbolic_opset11.scatter"], "torch.onnx.symbolic_helper._index_fill_reshape_helper": [], "symbolic_opset11.index_copy": ["torch.onnx.symbolic_helper._index_fill_reshape_helper", "torch.onnx.symbolic_helper._parse_arg", "symbolic_opset11.scatter"], "symbolic_opset11.__rshift_": ["torch.tensor", "torch.onnx.symbolic_helper._is_fp"], "symbolic_opset11.__lshift_": ["torch.tensor", "torch.onnx.symbolic_helper._is_fp"], "symbolic_opset11._get_im2col_indices_along_dim": ["numpy.arange", "torch.tensor", "torch.onnx.symbolic_helper._unsqueeze_helper"], "symbolic_opset11._get_im2col_padded_input": ["torch.LongTensor"], "symbolic_opset11._get_im2col_output_shape": ["symbolic_opset11.size", "torch.tensor", "torch.onnx.symbolic_helper._unsqueeze_helper"], "symbolic_opset11.im2col": ["symbolic_opset11._get_im2col_output_shape", "symbolic_opset11._get_im2col_indices_along_dim", "symbolic_opset11.size", "symbolic_opset11._get_im2col_padded_input", "torch.tensor"], "symbolic_opset11.narrow": ["torch.onnx.symbolic_helper._slice_helper"], "symbolic_opset11.flatten": ["torch.onnx.symbolic_helper._flatten_helper", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_helper._unimplemented"], "torch.onnx.symbolic_helper._flatten_helper": [], "symbolic_opset11.embedding_bag": ["<builtin>.RuntimeError", "torch.onnx.utils._add_block", "torch.onnx.utils._add_output_to_block", "torch.onnx.symbolic_helper._is_none", "torch.tensor", "torch.onnx.symbolic_helper._onnx_unsupported", "torch.onnx.symbolic_helper._unsqueeze_helper", "torch.onnx.symbolic_helper._size_helper", "torch.onnx.utils._add_input_to_block", "torch.onnx.symbolic_helper._reducesum_helper", "torch.onnx.symbolic_helper._slice_helper"], "torch.onnx.utils._add_input_to_block": [], "symbolic_opset11.prim_ConstantChunk": ["<builtin>.range", "torch.tensor"], "symbolic_opset11.chunk": ["symbolic_opset11.split", "torch.tensor"], "symbolic_opset11.repeat_interleave": ["<builtin>.RuntimeError", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.utils._add_output_to_block", "torch.tensor", "torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_opset9.reshape", "torch.LongTensor", "torch.onnx.symbolic_helper._is_tensor", "symbolic_opset11.split", "torch.onnx.symbolic_opset9.expand", "symbolic_opset11.unsqueeze", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_helper._size_helper", "torch.onnx.symbolic_opset9.repeat_interleave", "torch.onnx.utils._add_input_to_block", "<builtin>.len", "torch.onnx.symbolic_helper._get_tensor_sizes", "<builtin>.enumerate", "torch.onnx.utils._add_block"], "torch.onnx.symbolic_helper._get_tensor_sizes": [], "torch.onnx.symbolic_helper._is_tensor": [], "torch.onnx.symbolic_opset9.repeat_interleave": [], "symbolic_opset11.normal": ["symbolic_opset11.add", "torch.onnx.symbolic_opset9.mul"], "torch.onnx.symbolic_opset9.mul": [], "symbolic_opset12": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset12.einsum": ["torch.onnx.symbolic_helper._unpack_list"], "symbolic_opset12.outer": [], "symbolic_opset12.dropout": ["torch.onnx.symbolic_helper.assert_training_mode", "torch.tensor"], "torch.onnx.symbolic_helper.assert_training_mode": [], "symbolic_opset12.nll_loss": ["torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset12.nll_loss2d": ["symbolic_opset12.nll_loss"], "symbolic_opset12.nll_loss_nd": ["symbolic_opset12.nll_loss"], "symbolic_opset12.cross_entropy_loss": ["torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset12.binary_cross_entropy_with_logits": ["torch.onnx.symbolic_opset9.sigmoid", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_opset9.add", "torch.onnx.symbolic_helper._onnx_unsupported", "torch.onnx.symbolic_opset9.mul", "torch.onnx.symbolic_opset9.sub", "torch.tensor", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_opset9.log", "torch.onnx.symbolic_opset9.neg"], "torch.onnx.symbolic_opset9.neg": [], "symbolic_opset12.celu": ["torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset12.argmax": ["torch.onnx.symbolic_helper._parse_arg", "torch.tensor", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_opset9.reshape"], "symbolic_opset12.argmin": ["torch.onnx.symbolic_helper._parse_arg", "torch.tensor", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_opset9.reshape"], "symbolic_opset12.pow": [], "symbolic_opset12.ge": [], "symbolic_opset12.le": [], "symbolic_opset12.unfold": ["torch.onnx.symbolic_helper._size_helper", "<builtin>.list", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.utils._add_output_to_block", "torch.onnx.symbolic_helper._squeeze_helper", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._unsqueeze_helper", "torch.tensor", "torch.onnx.symbolic_opset9.unfold", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_helper._get_tensor_dim_size", "torch.onnx.utils._add_block", "torch.onnx.utils._add_input_to_block", "<builtin>.range"], "torch.onnx.symbolic_opset9.unfold": [], "symbolic_opset12.tensordot": ["torch.onnx.symbolic_helper._slice_helper", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_opset9._reshape_from_tensor", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_opset9.permute", "torch.tensor", "<builtin>.len", "<builtin>.RuntimeError", "symbolic_opset12.einsum", "<builtin>.range"], "torch.onnx.symbolic_opset9.permute": [], "symbolic_opset13": ["torch.onnx.symbolic_helper.parse_args", "symbolic_opset13._reduce_with_dtype"], "symbolic_opset13.softmax": ["torch.onnx.symbolic_helper._get_const"], "symbolic_opset13.log_softmax": ["torch.onnx.symbolic_helper._get_const"], "symbolic_opset13.frobenius_norm": ["torch.onnx.symbolic_helper._is_value", "<builtin>.len", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_helper._reducesum_helper"], "symbolic_opset13.split": ["torch.onnx.symbolic_helper._is_split_static", "torch.onnx.symbolic_helper._get_tensor_dim_size", "<builtin>.range", "torch.tensor", "<builtin>.len", "<builtin>.RuntimeError", "torch.onnx.symbolic_helper._unpack_list", "torch.onnx.symbolic_helper._unsqueeze_helper", "torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._is_packed_list"], "symbolic_opset13.split_with_sizes": ["symbolic_opset13.split"], "symbolic_opset13.unsafe_split": ["symbolic_opset13.split"], "symbolic_opset13.unsafe_split_with_sizes": ["symbolic_opset13.split_with_sizes"], "symbolic_opset13.unbind": ["torch.tensor"], "symbolic_opset13.nonzero_numpy": ["torch.onnx.symbolic_opset9.nonzero", "symbolic_opset13.unbind"], "symbolic_opset13.where": ["torch.onnx.symbolic_helper._unbind_helper", "torch.onnx.symbolic_opset9.nonzero", "torch.tensor"], "torch.onnx.symbolic_helper._unbind_helper": [], "symbolic_opset13.fake_quantize_per_channel_affine": ["<builtin>.RuntimeError"], "symbolic_opset13._reduce_op_symbolic": [], "symbolic_opset13._reduce_op_symbolic.symbolic": ["torch.onnx.symbolic_opset9._maybe_cast_reduce_op_input", "torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._handle_reduce_dim_none"], "torch.onnx.symbolic_opset9._maybe_cast_reduce_op_input": [], "torch.onnx.symbolic_helper._handle_reduce_dim_none": [], "symbolic_opset13._reduce_with_dtype": ["torch.onnx.symbolic_opset9.overload_by_arg_count", "symbolic_opset13._reduce_op_symbolic"], "torch.onnx.symbolic_opset9.overload_by_arg_count": [], "symbolic_opset13._reduce_with_dtype.reduce": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset13._reduce_with_dtype.reduce.reduce_nodim": ["symbolic_opset13._reduce_op_symbolic.symbolic", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset13._reduce_with_dtype.reduce.reduce_dim": ["symbolic_opset13._reduce_op_symbolic.symbolic", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset13.unsafe_chunk": ["torch.onnx.symbolic_helper._get_tensor_dim_size", "torch.onnx.symbolic_helper._unimplemented", "torch.tensor"], "symbolic_opset7": ["torch.onnx.symbolic_helper.parse_args", "<builtin>.vars", "torch.onnx.symbolic_helper._block_list_in_opset"], "symbolic_opset7.max": ["torch.onnx.symbolic_opset9.max", "warnings.warn"], "torch.onnx.symbolic_opset9.max": [], "symbolic_opset7.min": ["torch.onnx.symbolic_opset9.min", "warnings.warn"], "torch.onnx.symbolic_opset9.min": [], "symbolic_opset7.div": ["symbolic_opset7._div_rounding_mode", "<builtin>.len", "torch.onnx.symbolic_opset9.true_divide"], "symbolic_opset7._div_rounding_mode": ["symbolic_opset7._floor_divide", "torch.onnx.symbolic_opset9._div_rounding_mode"], "symbolic_opset7._floor_divide": ["<builtin>.RuntimeError", "torch.onnx.symbolic_helper._is_fp", "torch.onnx.symbolic_opset9.true_divide"], "torch.onnx.symbolic_helper._block_list_in_opset": [], "symbolic_opset8": ["torch.onnx.symbolic_helper.parse_args", "torch.onnx.symbolic_helper._block_list_in_opset", "<builtin>.vars", "symbolic_opset8._interpolate"], "symbolic_opset8._interpolate": [], "symbolic_opset8._interpolate.symbolic_fn": ["torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._get_interpolate_attributes", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_helper._interpolate_warning", "<builtin>.float", "<builtin>.range"], "symbolic_opset8.__interpolate": ["torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._interpolate_get_scales_and_mode", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset8._try_cast_integer_to_float": ["torch.onnx.symbolic_opset9._cast_Float", "<builtin>.tuple", "warnings.warn"], "torch.onnx.symbolic_opset9._cast_Float": [], "symbolic_opset8._cast_to_type": ["<builtin>.getattr"], "symbolic_opset8._comparison_operator": ["torch.onnx.symbolic_helper._if_scalar_type_as", "torch.onnx.symbolic_helper._maybe_get_scalar", "symbolic_opset8._try_cast_integer_to_float"], "symbolic_opset8.gt": ["symbolic_opset8._comparison_operator"], "symbolic_opset8.lt": ["symbolic_opset8._comparison_operator"], "symbolic_opset8.bmm": ["symbolic_opset8._cast_to_type", "symbolic_opset8._try_cast_integer_to_float", "torch.onnx.symbolic_helper._try_get_scalar_type"], "torch.onnx.symbolic_helper._try_get_scalar_type": [], "symbolic_opset8.matmul": ["symbolic_opset8.bmm"], "symbolic_opset8.prelu": ["<builtin>.list", "torch.onnx.symbolic_helper._try_get_scalar_type", "symbolic_opset8._cast_to_type", "<builtin>.range", "torch.onnx.symbolic_helper._get_tensor_rank", "symbolic_opset8._try_cast_integer_to_float"], "symbolic_opset8.mm": ["symbolic_opset8._cast_to_type", "symbolic_opset8._try_cast_integer_to_float", "torch.onnx.symbolic_helper._try_get_scalar_type"], "symbolic_opset8.addmm": ["symbolic_opset8._cast_to_type", "torch.onnx.symbolic_helper._scalar", "symbolic_opset8._try_cast_integer_to_float", "torch.onnx.symbolic_helper._try_get_scalar_type"], "torch.onnx.symbolic_helper._scalar": [], "symbolic_opset8.flatten": ["torch.onnx.symbolic_opset9.flatten", "torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._try_get_scalar_type", "symbolic_opset8._cast_to_type", "symbolic_opset8._try_cast_integer_to_float"], "torch.onnx.symbolic_opset9.flatten": [], "symbolic_opset8._constant_fill": ["torch.onnx.symbolic_helper._cast_func_template"], "torch.onnx.symbolic_helper._cast_func_template": [], "symbolic_opset8.empty": ["symbolic_opset8.zeros"], "symbolic_opset8.zeros": ["symbolic_opset8._constant_fill"], "symbolic_opset8.empty_like": ["symbolic_opset8.zeros_like"], "symbolic_opset8.zeros_like": ["symbolic_opset8._constant_fill"], "symbolic_opset8.ones": ["symbolic_opset8._constant_fill"], "symbolic_opset8.ones_like": ["symbolic_opset8._constant_fill"], "symbolic_opset8.full": ["torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._get_const", "symbolic_opset8.zeros", "torch.tensor", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_opset9.add", "symbolic_opset8._constant_fill"], "symbolic_opset8.full_like": ["symbolic_opset8._constant_fill"], "symbolic_opset8.repeat": ["torch.LongTensor", "torch.onnx.symbolic_helper._is_value", "<builtin>.len", "torch.onnx.symbolic_helper._is_packed_list", "torch.onnx.symbolic_opset9.view", "torch.tensor", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_helper._unpack_list"], "symbolic_opset9": ["symbolic_opset9._max_pool", "symbolic_opset9._adaptive_pool", "symbolic_opset9.wrap_logical_op_with_negation", "symbolic_opset9._reduce_with_dtype", "functools.partial", "<builtin>.globals", "symbolic_opset9._avg_pool", "torch.onnx.symbolic_helper.parse_args", "cast_pytorch_to_onnx.items", "symbolic_opset9.wrap_logical_op_with_cast_to_and_from", "symbolic_opset9._interpolate", "symbolic_opset9._one_hidden_rnn", "symbolic_opset9.wrap_logical_op_with_cast_to_and_from.decorator", "symbolic_opset9._unsupported_dropout"], "symbolic_opset9.unused": ["torch._C.OptionalType.ofTensor"], "symbolic_opset9._shape_as_tensor": [], "symbolic_opset9._reshape_from_tensor": ["<builtin>.isinstance"], "symbolic_opset9.reshape": ["symbolic_opset9.view"], "symbolic_opset9.view": ["torch.onnx.symbolic_helper._is_value", "torch.LongTensor", "torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset9.reshape_as": ["symbolic_opset9.reshape"], "symbolic_opset9.add": ["torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._scalar", "torch.onnx.symbolic_helper._is_tensor_list"], "torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed": [], "symbolic_opset9.sub": ["torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._scalar", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.rsub": ["symbolic_opset9.sub"], "symbolic_opset9.mul": [], "symbolic_opset9.div": ["symbolic_opset9._div_rounding_mode", "symbolic_opset9.true_divide", "<builtin>.len"], "symbolic_opset9.true_divide": ["torch.get_default_dtype", "torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9._div_rounding_mode": ["symbolic_opset9._trunc_divide", "symbolic_opset9.true_divide", "symbolic_opset9._floor_divide", "<builtin>.RuntimeError"], "symbolic_opset9._floor_divide": ["torch.tensor", "symbolic_opset9.true_divide", "torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9._trunc_divide": ["torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9.floor_divide": ["symbolic_opset9._trunc_divide"], "symbolic_opset9.floordiv": ["symbolic_opset9.floor_divide"], "symbolic_opset9.reciprocal": ["torch.ones"], "symbolic_opset9.cat": ["torch.onnx.symbolic_helper._unpack_list"], "symbolic_opset9.stack": ["torch.onnx.symbolic_helper._unpack_list", "torch.onnx.symbolic_helper._unsqueeze_helper"], "symbolic_opset9._list": [], "symbolic_opset9.mm": ["torch.tensor"], "symbolic_opset9.bmm": [], "symbolic_opset9.matmul": [], "symbolic_opset9.addmm": ["torch.onnx.symbolic_helper.scalar_type_to_onnx.index", "torch.tensor", "torch.onnx.symbolic_helper._try_get_scalar_type", "torch.onnx.symbolic_helper._scalar", "torch.onnx.symbolic_helper._get_tensor_rank", "symbolic_opset9.addmm.isNotNoneAnd"], "symbolic_opset9.addmm.isNotNoneAnd": [], "symbolic_opset9.neg": [], "symbolic_opset9.sqrt": [], "symbolic_opset9.rsqrt": ["torch.ones", "torch.onnx.symbolic_helper._if_scalar_type_as", "symbolic_opset9.sqrt"], "symbolic_opset9.tanh": [], "symbolic_opset9.sin": [], "symbolic_opset9.cos": [], "symbolic_opset9.tan": [], "symbolic_opset9.asin": [], "symbolic_opset9.acos": [], "symbolic_opset9.atan": [], "symbolic_opset9.sigmoid": [], "symbolic_opset9.sign": [], "symbolic_opset9._slice": ["<builtin>.len"], "symbolic_opset9._maybe_cast_reduce_op_input": ["torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9._reduce_op_symbolic": [], "symbolic_opset9._reduce_op_symbolic.symbolic": ["torch.onnx.symbolic_helper._handle_reduce_dim_none", "torch.onnx.symbolic_helper._get_const", "symbolic_opset9._maybe_cast_reduce_op_input"], "symbolic_opset9.overload_by_arg_count": ["functools.wraps"], "symbolic_opset9.overload_by_arg_count.wrapper": ["<builtin>.NotImplementedError", "<builtin>.len", "symbolic_opset9._reduce_with_dtype.reduce"], "symbolic_opset9._reduce_with_dtype.reduce": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset9._reduce_with_dtype": ["symbolic_opset9.overload_by_arg_count", "symbolic_opset9._reduce_op_symbolic"], "symbolic_opset9._reduce_with_dtype.reduce.reduce_nodim": ["symbolic_opset9._reduce_op_symbolic.symbolic", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9._reduce_with_dtype.reduce.reduce_dim": ["symbolic_opset9._reduce_op_symbolic.symbolic", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.cumsum": ["torch.onnx.symbolic_helper._onnx_opset_unsupported", "torch.onnx.symbolic_helper._unimplemented"], "torch.onnx.symbolic_helper._onnx_opset_unsupported": [], "symbolic_opset9._sample_dirichlet": ["torch.onnx.symbolic_helper._onnx_unsupported", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9._standard_gamma": ["torch.onnx.symbolic_helper._onnx_unsupported", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.t": [], "symbolic_opset9.expand": ["torch.LongTensor", "torch.onnx.symbolic_helper._maybe_get_const", "torch.tensor", "torch.onnx.symbolic_helper._is_value", "symbolic_opset9.stack", "symbolic_opset9.mul", "torch.onnx.symbolic_helper._is_packed_list", "symbolic_opset9.ones_like", "symbolic_opset9.where", "symbolic_opset9.view"], "symbolic_opset9.ones_like": ["torch.tensor"], "symbolic_opset9.where": ["torch.onnx.symbolic_helper._unbind_helper", "torch.tensor", "torch.onnx.symbolic_opset9.nonzero"], "symbolic_opset9.expand_as": ["<builtin>.isinstance", "torch.equal", "torch.onnx.symbolic_helper._maybe_get_const", "<builtin>.range"], "symbolic_opset9.embedding": ["warnings.warn", "<builtin>.RuntimeError"], "symbolic_opset9.embedding_bag": ["torch.onnx.symbolic_helper._onnx_unsupported", "torch.onnx.symbolic_helper._is_none"], "symbolic_opset9.size": ["torch.tensor", "torch.onnx.symbolic_helper._size_helper", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset9.transpose": ["<builtin>.RuntimeError", "torch.onnx.symbolic_helper._get_tensor_rank", "<builtin>.list", "<builtin>.range"], "symbolic_opset9.permute": ["<builtin>.list", "<builtin>.len", "<builtin>.range"], "symbolic_opset9.view_as": [], "symbolic_opset9.prim_ConstantSplit": ["torch.onnx.symbolic_helper._unimplemented", "<builtin>.len", "torch.onnx.symbolic_helper._get_tensor_dim_size"], "symbolic_opset9.prim_ConstantChunk": ["symbolic_opset9.prim_ConstantSplit", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._get_tensor_dim_size"], "symbolic_opset9.unsafe_chunk": ["torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed", "torch.onnx.symbolic_helper._get_tensor_dim_size"], "symbolic_opset9.split": ["torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._get_tensor_dim_size", "torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed", "torch.onnx.symbolic_helper._is_split_static", "symbolic_opset9.split_with_sizes"], "symbolic_opset9.split_with_sizes": ["torch.onnx.symbolic_helper._is_split_static", "torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed"], "symbolic_opset9.unsafe_split": ["symbolic_opset9.split"], "symbolic_opset9.unsafe_split_with_sizes": ["symbolic_opset9.split_with_sizes"], "symbolic_opset9.unbind": ["torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed", "torch.onnx.symbolic_helper._squeeze_helper"], "symbolic_opset9.select": ["torch.onnx.symbolic_helper._slice_helper", "torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._squeeze_helper"], "symbolic_opset9.square": [], "symbolic_opset9.squeeze": ["torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._get_tensor_dim_size", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._squeeze_helper", "<builtin>.str", "torch.onnx.symbolic_helper._get_tensor_rank", "warnings.warn"], "symbolic_opset9.prelu": ["torch.onnx.symbolic_helper._unsqueeze_helper", "torch.onnx.symbolic_helper._get_tensor_rank", "<builtin>.list", "<builtin>.range"], "symbolic_opset9.silu": [], "symbolic_opset9.mish": [], "symbolic_opset9.relu": [], "symbolic_opset9.relu6": ["symbolic_opset9.clamp_max"], "symbolic_opset9.clamp_max": ["torch.onnx.symbolic_helper._parse_arg", "torch.onnx.symbolic_helper._is_constant"], "symbolic_opset9.ceil": [], "symbolic_opset9.floor": [], "symbolic_opset9._len": ["torch.LongTensor", "symbolic_opset9.size", "torch.onnx.symbolic_helper._squeeze_helper"], "symbolic_opset9.threshold": ["torch.onnx.symbolic_helper._scalar", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.leaky_relu": ["torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._scalar"], "symbolic_opset9.glu": ["torch.onnx.symbolic_helper._get_tensor_dim_size"], "symbolic_opset9.softmax": ["torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._reducesum_helper", "<builtin>.list", "<builtin>.range", "torch.onnx.symbolic_helper._get_tensor_rank"], "symbolic_opset9.softplus": ["torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.get_pool_ceil_padding": ["math.ceil", "<builtin>.any", "torch.onnx.symbolic_helper._unimplemented", "<builtin>.int", "<builtin>.float", "torch.onnx.symbolic_helper._get_tensor_sizes", "<builtin>.range", "<builtin>.len"], "symbolic_opset9._max_pool": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset9._max_pool.symbolic_fn": ["torch.nn.modules.utils._triple", "<builtin>.set", "symbolic_opset9.get_pool_ceil_padding", "torch.onnx.symbolic_helper._slice_helper", "symbolic_opset9.sub", "<builtin>.tuple", "torch.onnx.symbolic_helper._unimplemented", "numpy.add", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "<builtin>.range"], "symbolic_opset9._avg_pool": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset9._avg_pool.symbolic_fn": ["torch.nn.modules.utils._triple", "symbolic_opset9.get_pool_ceil_padding", "<builtin>.tuple", "numpy.add", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "torch.onnx.symbolic_helper._avgpool_helper", "<builtin>.len"], "symbolic_opset9._adaptive_pool": [], "symbolic_opset9._adaptive_pool.symbolic_fn": ["torch.nn.modules.utils._triple", "torch.onnx.symbolic_helper._onnx_unsupported", "<builtin>.any", "torch.onnx.symbolic_helper._unimplemented", "symbolic_opset9._max_pool.symbolic_fn", "<builtin>.int", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "torch.onnx.symbolic_helper._get_tensor_sizes", "<builtin>.range", "torch.onnx.symbolic_helper._parse_arg", "<builtin>.len"], "symbolic_opset9._prepare_onnx_paddings": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.len"], "symbolic_opset9._convert_padding_node": ["torch.onnx.symbolic_helper._unpack_list", "torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed", "torch.onnx.symbolic_helper._is_packed_list"], "symbolic_opset9.constant_pad_nd": ["torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed", "symbolic_opset9._prepare_onnx_paddings", "symbolic_opset9._convert_padding_node", "torch.onnx.symbolic_helper._get_tensor_rank"], "symbolic_opset9.reflection_pad": ["symbolic_opset9._prepare_onnx_paddings", "torch.onnx.symbolic_helper._get_tensor_rank", "symbolic_opset9._convert_padding_node"], "symbolic_opset9.replication_pad": ["symbolic_opset9._prepare_onnx_paddings", "torch.onnx.symbolic_helper._get_tensor_rank", "symbolic_opset9._convert_padding_node"], "symbolic_opset9._interpolate": [], "symbolic_opset9._interpolate.symbolic_fn": ["torch.onnx.symbolic_helper._interpolate_size_to_scales", "torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._get_interpolate_attributes", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._interpolate_warning"], "symbolic_opset9.__interpolate": ["torch.onnx.symbolic_helper._interpolate_get_scales_and_mode"], "symbolic_opset9.bitwise_not": ["torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.wrap_logical_op_with_cast_to": [], "symbolic_opset9.wrap_logical_op_with_cast_to.decorator": [], "symbolic_opset9.wrap_logical_op_with_cast_to.decorator.wrap_with_cast": [], "symbolic_opset9.wrap_logical_op_with_cast_to_and_from": [], "symbolic_opset9.wrap_logical_op_with_cast_to_and_from.decorator": [], "symbolic_opset9.wrap_logical_op_with_cast_to_and_from.decorator.wrap_with_cast": ["<builtin>.globals", "symbolic_opset9.wrap_logical_op_with_cast_to.decorator", "symbolic_opset9.wrap_logical_op_with_cast_to"], "symbolic_opset9.wrap_logical_op_with_negation": [], "symbolic_opset9.wrap_logical_op_with_negation.wrap_with_not": ["symbolic_opset9.ne", "symbolic_opset9.le", "symbolic_opset9.ge"], "symbolic_opset9.ne": [], "symbolic_opset9.le": ["symbolic_opset9.gt_impl"], "symbolic_opset9.ge": ["symbolic_opset9.lt_impl"], "symbolic_opset9.__not_": [], "symbolic_opset9.eq": [], "symbolic_opset9.gt": ["symbolic_opset9.gt_impl"], "symbolic_opset9.gt_impl": [], "symbolic_opset9.lt": ["symbolic_opset9.lt_impl"], "symbolic_opset9.lt_impl": [], "symbolic_opset9.__and_": [], "symbolic_opset9.__or_": [], "symbolic_opset9.logical_and": [], "symbolic_opset9.logical_or": [], "symbolic_opset9.logical_xor": [], "symbolic_opset9.__rshift_": ["torch.tensor", "torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9.__lshift_": ["torch.tensor", "torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9.log_softmax": ["torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._unimplemented", "<builtin>.list", "<builtin>.range", "torch.onnx.symbolic_helper._get_tensor_rank"], "symbolic_opset9._convolution": ["<builtin>.any", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_helper._get_tensor_sizes", "torch.onnx.symbolic_helper._get_tensor_rank", "<builtin>.len", "<builtin>.RuntimeError"], "symbolic_opset9.conv1d": ["symbolic_opset9._convolution"], "symbolic_opset9.conv2d": ["symbolic_opset9._convolution"], "symbolic_opset9.conv3d": ["symbolic_opset9._convolution"], "symbolic_opset9.conv_transpose1d": ["symbolic_opset9._convolution"], "symbolic_opset9.conv_transpose2d": ["symbolic_opset9._convolution"], "symbolic_opset9.conv_transpose3d": ["symbolic_opset9._convolution"], "symbolic_opset9.batch_norm": ["torch.onnx.symbolic_helper._get_tensor_dim_size", "torch.tensor", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_helper.assert_training_mode", "symbolic_opset9._var_mean", "<builtin>.RuntimeError"], "symbolic_opset9._var_mean": ["torch.tensor", "symbolic_opset9.numel"], "symbolic_opset9.layer_norm": ["torch.onnx.symbolic_helper._generate_wrapped_number", "symbolic_opset9.sub", "symbolic_opset9.add", "symbolic_opset9.sqrt", "torch.onnx.symbolic_helper._is_none", "symbolic_opset9.mul", "symbolic_opset9.pow", "<builtin>.range", "<builtin>.len"], "torch.onnx.symbolic_helper._generate_wrapped_number": [], "symbolic_opset9.pow": ["torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9.instance_norm": ["torch.onnx.symbolic_helper._get_tensor_dim_size", "torch.tensor", "torch.onnx.symbolic_helper._is_none", "symbolic_opset9.batch_norm", "<builtin>.RuntimeError"], "symbolic_opset9.unfold": ["torch.onnx.symbolic_helper._slice_helper", "torch.onnx.symbolic_helper._unimplemented", "<builtin>.zip", "torch.onnx.symbolic_helper._get_tensor_sizes", "<builtin>.list", "<builtin>.range", "torch.onnx.symbolic_helper._unsqueeze_helper", "<builtin>.len"], "symbolic_opset9.elu": ["torch.onnx.symbolic_helper._scalar", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.selu": [], "symbolic_opset9.index_select": ["torch.onnx.symbolic_helper._select_helper"], "torch.onnx.symbolic_helper._select_helper": [], "symbolic_opset9.index_put": ["torch.onnx.symbolic_helper._unpack_list", "symbolic_opset9.add", "torch.onnx.symbolic_helper._onnx_opset_unsupported", "torch.onnx.symbolic_helper._is_packed_list", "torch.onnx.symbolic_helper._parse_arg", "<builtin>.len"], "symbolic_opset9.index_fill": ["torch.onnx.symbolic_helper._index_fill_reshape_helper", "torch.onnx.symbolic_helper._maybe_get_scalar", "symbolic_opset9.scatter", "symbolic_opset9.expand", "torch.onnx.symbolic_helper._parse_arg", "torch.onnx.symbolic_helper._if_scalar_type_as"], "symbolic_opset9.scatter": ["symbolic_opset9.expand_as", "torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._is_value"], "symbolic_opset9.index_copy": ["torch.onnx.symbolic_helper._index_fill_reshape_helper", "torch.onnx.symbolic_helper._parse_arg", "symbolic_opset9.scatter"], "symbolic_opset9.type_as": ["torch.onnx.symbolic_helper._try_get_scalar_type", "<builtin>.RuntimeError"], "symbolic_opset9.cosine_similarity": ["torch.onnx.symbolic_helper._onnx_unsupported"], "symbolic_opset9.clone": [], "symbolic_opset9.abs": [], "symbolic_opset9.log": [], "symbolic_opset9.log1p": ["torch.ones", "torch.onnx.symbolic_helper._if_scalar_type_as", "symbolic_opset9.log", "symbolic_opset9.add"], "symbolic_opset9.clamp": ["torch.onnx.symbolic_helper._is_constant", "torch.onnx.symbolic_helper._is_none", "symbolic_opset9.clamp_min", "symbolic_opset9.clamp_max", "torch.onnx.symbolic_helper._parse_arg"], "symbolic_opset9.clamp_min": ["torch.onnx.symbolic_helper._parse_arg", "torch.onnx.symbolic_helper._is_constant"], "torch.onnx.symbolic_helper._is_constant": [], "symbolic_opset9.max": ["torch.onnx.symbolic_helper._get_const"], "symbolic_opset9.min": ["torch.onnx.symbolic_helper._get_const"], "symbolic_opset9.exp": [], "symbolic_opset9.dropout": ["warnings.warn", "torch.onnx.symbolic_helper.assert_training_mode"], "symbolic_opset9._unsupported_dropout": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset9._unsupported_dropout.feature_dropout": ["torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.norm": ["symbolic_opset9._reduce_op_symbolic.symbolic", "symbolic_opset9._reduce_op_symbolic", "<builtin>.RuntimeError"], "symbolic_opset9.conv_tbc": ["symbolic_opset9.conv1d"], "symbolic_opset9._unique": ["torch.onnx.symbolic_helper._onnx_unsupported"], "symbolic_opset9._unique2": ["torch.onnx.symbolic_helper._onnx_opset_unsupported"], "cast_pytorch_to_onnx.items": [], "symbolic_opset9.empty": ["symbolic_opset9.zeros"], "symbolic_opset9.zeros": ["torch.tensor"], "symbolic_opset9.empty_like": ["symbolic_opset9.zeros_like"], "symbolic_opset9.zeros_like": ["torch.tensor"], "symbolic_opset9.new_empty": ["torch.onnx.symbolic_helper._try_get_scalar_type", "symbolic_opset9.empty", "torch.onnx.symbolic_helper.scalar_type_to_onnx.index"], "symbolic_opset9.scalar_tensor": ["torch.onnx.symbolic_helper._get_const"], "symbolic_opset9.tensor": ["torch.onnx.symbolic_helper._is_scalar_list", "torch.onnx.symbolic_helper._unpack_list", "torch.onnx.symbolic_helper._get_const", "torch.LongTensor", "torch.onnx.symbolic_helper.scalar_type_to_onnx.index", "torch.onnx.symbolic_helper._is_list", "torch.onnx.symbolic_helper._is_packed_list", "<builtin>.list", "torch.onnx.symbolic_helper._is_tensor_list"], "torch.onnx.symbolic_helper._is_list": [], "torch.onnx.symbolic_helper._is_scalar_list": [], "symbolic_opset9.as_tensor": ["symbolic_opset9.tensor"], "symbolic_opset9.new_zeros": ["torch.onnx.symbolic_helper._try_get_scalar_type", "symbolic_opset9.zeros", "torch.onnx.symbolic_helper.scalar_type_to_onnx.index"], "symbolic_opset9.ones": ["torch.tensor"], "symbolic_opset9.new_ones": ["torch.onnx.symbolic_helper._try_get_scalar_type", "symbolic_opset9.ones", "torch.onnx.symbolic_helper.scalar_type_to_onnx.index"], "symbolic_opset9.full": ["torch.onnx.symbolic_helper._get_const", "symbolic_opset9.add", "torch.onnx.symbolic_helper._maybe_get_const", "torch.tensor", "torch.onnx.symbolic_helper._is_value", "symbolic_opset9.zeros"], "symbolic_opset9.full_like": ["torch.onnx.symbolic_helper._get_const", "symbolic_opset9.zeros_like", "symbolic_opset9.add", "torch.onnx.symbolic_helper._maybe_get_const", "torch.tensor", "torch.onnx.symbolic_helper._is_value"], "symbolic_opset9.new_full": ["torch.onnx.symbolic_helper._try_get_scalar_type", "symbolic_opset9.full", "torch.onnx.symbolic_helper.scalar_type_to_onnx.index"], "symbolic_opset9.eye": ["<builtin>.NotImplementedError", "torch.onnx.symbolic_helper._unsqueeze_helper", "symbolic_opset9.zeros", "<builtin>.len"], "symbolic_opset9.slice": ["<builtin>.NotImplementedError", "torch.onnx.symbolic_helper._slice_helper", "torch.onnx.symbolic_helper._unsqueeze_helper", "torch.onnx.symbolic_helper._parse_arg", "<builtin>.len", "<builtin>.RuntimeError"], "symbolic_opset9.hardtanh": [], "symbolic_opset9.hardswish": ["symbolic_opset9.hardsigmoid"], "symbolic_opset9.hardsigmoid": [], "symbolic_opset9.alias": [], "symbolic_opset9.unsqueeze": ["torch.onnx.symbolic_helper._unimplemented", "<builtin>.str", "torch.onnx.symbolic_helper._unsqueeze_helper", "torch.onnx.symbolic_helper._get_tensor_rank", "warnings.warn"], "symbolic_opset9.sort": ["torch.onnx.symbolic_helper._get_tensor_sizes", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.numel": [], "symbolic_opset9.topk": ["torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.to": ["<builtin>.NotImplementedError", "torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._is_value", "<builtin>.int", "torch._C.ListType.ofInts", "<builtin>.isinstance", "<builtin>.len"], "torch._C.ListType.ofInts": [], "symbolic_opset9.repeat": ["symbolic_opset9.ones_like"], "symbolic_opset9.repeat_interleave": ["symbolic_opset9.reshape", "symbolic_opset9.unsqueeze", "torch.LongTensor", "torch.tensor", "torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._is_none", "<builtin>.enumerate", "torch.onnx.symbolic_helper._onnx_opset_unsupported_detailed", "symbolic_opset9.expand", "torch.onnx.symbolic_helper._get_tensor_sizes", "<builtin>.list", "torch.onnx.symbolic_helper._is_tensor", "torch.onnx.symbolic_helper._repeat_interleave_split_helper", "torch.onnx.symbolic_helper._get_tensor_rank", "<builtin>.RuntimeError"], "torch.onnx.symbolic_helper._repeat_interleave_split_helper": [], "symbolic_opset9.pixel_shuffle": ["<builtin>.any", "torch.tensor", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._get_tensor_sizes", "symbolic_opset9.view", "<builtin>.len"], "symbolic_opset9._generic_rnn": ["torch.LongTensor", "symbolic_opset9._generic_rnn.retrieve_state", "torch.onnx.symbolic_helper._get_tensor_dim_size", "symbolic_opset9.unused", "<builtin>.len", "torch.onnx.symbolic_helper._unimplemented", "<builtin>.zip", "symbolic_opset9._generic_rnn.transform_weights_no_bias", "torch.onnx.symbolic_helper._squeeze_helper", "<builtin>.range", "<builtin>.dict", "symbolic_opset9._generic_rnn.transform_weights", "warnings.warn"], "symbolic_opset9._generic_rnn.reform_weights": ["torch.onnx.symbolic_helper._slice_helper"], "symbolic_opset9._generic_rnn.transform_weights_no_bias": ["<builtin>.tuple", "symbolic_opset9._generic_rnn.reform_weights", "torch.onnx.symbolic_helper._unsqueeze_helper"], "symbolic_opset9._generic_rnn.transform_weights": ["<builtin>.tuple", "symbolic_opset9._generic_rnn.reform_weights", "torch.onnx.symbolic_helper._unsqueeze_helper"], "symbolic_opset9._generic_rnn.retrieve_state": ["torch.onnx.symbolic_helper._slice_helper"], "symbolic_opset9._lstm_full": ["torch.onnx.symbolic_helper._unpack_list", "symbolic_opset9._generic_rnn"], "symbolic_opset9._lstm_packed": ["torch.onnx.symbolic_helper._unpack_list", "symbolic_opset9._generic_rnn"], "symbolic_opset9.lstm": ["symbolic_opset9._lstm_full", "torch.onnx.symbolic_helper._is_tensor_list", "symbolic_opset9._lstm_packed"], "symbolic_opset9._one_hidden_rnn": ["torch.onnx.symbolic_helper.parse_args"], "symbolic_opset9._one_hidden_rnn._rnn_full": ["torch.onnx.symbolic_helper._unpack_list", "symbolic_opset9._generic_rnn"], "symbolic_opset9._one_hidden_rnn._rnn_packed": ["torch.onnx.symbolic_helper._unpack_list", "symbolic_opset9._generic_rnn"], "symbolic_opset9._one_hidden_rnn.symbolic": ["symbolic_opset9._one_hidden_rnn._rnn_packed", "symbolic_opset9._one_hidden_rnn._rnn_full", "torch.onnx.symbolic_helper._is_tensor_list"], "symbolic_opset9._dim_arange": ["torch.tensor", "symbolic_opset9.arange"], "symbolic_opset9.arange": ["<builtin>.NotImplementedError", "torch.onnx.symbolic_helper._arange_cast_helper", "torch.onnx.symbolic_helper._squeeze_helper", "symbolic_opset9.arange._float_step_convert", "<builtin>.str", "torch.onnx.symbolic_helper._unsqueeze_helper", "symbolic_opset9.ones", "symbolic_opset9.nonzero", "symbolic_opset9.arange._get_arange_dtype", "<builtin>.len"], "symbolic_opset9.detach": [], "symbolic_opset9.contiguous": ["<builtin>.RuntimeError"], "symbolic_opset9._pack_padded_sequence": ["torch._C.TensorType.get", "<builtin>.RuntimeError"], "symbolic_opset9._pad_packed_sequence": [], "symbolic_opset9.randn": ["torch.tensor", "torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset9.rand": ["torch.tensor", "torch.onnx.symbolic_helper._get_const", "torch.onnx.symbolic_helper._is_value", "torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset9.randn_like": ["torch.onnx.symbolic_helper._get_const"], "symbolic_opset9.rand_like": ["torch.onnx.symbolic_helper._get_const"], "symbolic_opset9.rrelu": [], "symbolic_opset9.bernoulli": ["torch.onnx.symbolic_helper._try_get_scalar_type", "torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.log_sigmoid": [], "symbolic_opset9.erf": [], "symbolic_opset9.flatten": ["torch.onnx.symbolic_helper._flatten_helper", "torch.onnx.symbolic_helper._get_tensor_rank", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.nonzero": ["symbolic_opset9.t"], "symbolic_opset9.nonzero_numpy": ["symbolic_opset9.nonzero", "symbolic_opset9.unbind"], "symbolic_opset9.isnan": [], "symbolic_opset9._any": ["torch.onnx.symbolic_helper._reducesum_helper", "torch.LongTensor", "symbolic_opset9.gt"], "symbolic_opset9._all": ["symbolic_opset9._any"], "symbolic_opset9.narrow": ["torch.onnx.symbolic_helper._slice_helper"], "symbolic_opset9.argmax": ["symbolic_opset9.reshape", "torch.tensor", "torch.onnx.symbolic_helper._parse_arg", "torch.onnx.symbolic_helper._is_none"], "symbolic_opset9.argmin": ["symbolic_opset9.reshape", "torch.tensor", "torch.onnx.symbolic_helper._parse_arg", "torch.onnx.symbolic_helper._is_none"], "symbolic_opset9.scatter_add": ["symbolic_opset9.zeros_like", "torch.onnx.symbolic_helper._scatter_helper", "torch.onnx.symbolic_helper.scalar_type_to_onnx.index", "scalar_type_to_pytorch_type.index", "symbolic_opset9.add", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._try_get_scalar_type", "torch.onnx.symbolic_helper._get_tensor_sizes", "torch.zeros"], "scalar_type_to_pytorch_type.index": [], "torch.onnx.symbolic_helper._scatter_helper": [], "symbolic_opset9.log2": ["torch.tensor", "symbolic_opset9.log"], "symbolic_opset9.prim_shape": [], "symbolic_opset9.prim_max": [], "symbolic_opset9.prim_min": ["torch.tensor", "torch.onnx.symbolic_helper._is_packed_list", "symbolic_opset9.stack", "symbolic_opset9.min"], "symbolic_opset9.prim_data": [], "symbolic_opset9.is_floating_point": ["torch.onnx.symbolic_helper._is_fp", "torch.BoolTensor"], "symbolic_opset9.__isnot_": ["symbolic_opset9.ne", "torch.onnx.symbolic_helper._is_none", "torch.BoolTensor"], "symbolic_opset9.prim_unchecked_cast": [], "symbolic_opset9.prim_dtype": ["torch.onnx.symbolic_helper._try_get_scalar_type", "torch.tensor", "torch.onnx.symbolic_helper.scalar_type_to_onnx.index"], "symbolic_opset9.prim_tolist": ["torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.one_hot": ["torch.LongTensor"], "symbolic_opset9.gather": ["torch.onnx.symbolic_helper._reducesum_helper", "torch.LongTensor", "symbolic_opset9.size", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_helper._unimplemented", "torch.onnx.symbolic_helper._unsqueeze_helper"], "symbolic_opset9.std": ["symbolic_opset9.var_mean"], "symbolic_opset9.var_mean": ["symbolic_opset9._var_mean", "<builtin>.len"], "symbolic_opset9.var": ["symbolic_opset9.var_mean"], "symbolic_opset9.std_mean": ["symbolic_opset9.var_mean"], "symbolic_opset9.logsumexp": [], "symbolic_opset9.arange._get_arange_dtype": ["torch.onnx.symbolic_helper._maybe_get_const"], "symbolic_opset9.arange._float_step_convert": ["torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9.linspace": ["torch.onnx.symbolic_helper._arange_helper", "torch.tensor", "symbolic_opset9.sub", "symbolic_opset9.div"], "torch.onnx.symbolic_helper._arange_helper": [], "symbolic_opset9.masked_fill": ["torch.onnx.symbolic_helper._maybe_get_scalar", "torch.onnx.symbolic_helper._if_scalar_type_as"], "symbolic_opset9.index": ["torch.onnx.symbolic_helper._select_helper", "torch.onnx.symbolic_helper._unpack_list", "<builtin>.NotImplementedError", "symbolic_opset9._shape_as_tensor", "torch.LongTensor", "torch.onnx.symbolic_helper._is_none", "symbolic_opset9.index_select", "<builtin>.enumerate", "torch.onnx.symbolic_helper._is_packed_list", "<builtin>.str", "symbolic_opset9.index.try_mask_to_index", "<builtin>.list", "<builtin>.range", "torch.onnx.symbolic_helper._get_tensor_rank", "warnings.warn", "<builtin>.len"], "symbolic_opset9.index.try_mask_to_index": ["torch.onnx.symbolic_helper._is_none", "torch.onnx.symbolic_helper._squeeze_helper", "symbolic_opset9.nonzero", "warnings.warn", "<builtin>.RuntimeError"], "symbolic_opset9.frobenius_norm": ["torch.onnx.symbolic_helper._reducesum_helper"], "symbolic_opset9.multinomial": ["torch.onnx.symbolic_helper._is_none", "symbolic_opset9.log", "torch.onnx.symbolic_helper._unimplemented"], "symbolic_opset9.baddbmm": ["symbolic_opset9.matmul", "symbolic_opset9.mul", "symbolic_opset9.add"], "symbolic_opset9.meshgrid": ["torch.onnx.symbolic_helper._unpack_list", "torch.LongTensor", "<builtin>.enumerate", "symbolic_opset9.view", "<builtin>.len", "symbolic_opset9._reshape_from_tensor"], "symbolic_opset9.remainder": ["torch.onnx.symbolic_helper._is_fp"], "symbolic_opset9.gelu": ["symbolic_opset9.mul", "torch.tensor", "symbolic_opset9.add"], "symbolic_opset9.group_norm": ["torch.LongTensor", "symbolic_opset9.add", "torch.onnx.symbolic_helper._get_tensor_dim_size", "torch.tensor", "torch.onnx.symbolic_helper._unimplemented", "symbolic_opset9.mul", "<builtin>.list", "torch.onnx.symbolic_helper._unsqueeze_helper", "<builtin>.range", "torch.onnx.symbolic_helper._get_tensor_rank"], "symbolic_opset9._weight_norm": ["symbolic_opset9.norm", "<builtin>.list", "<builtin>.range", "torch.onnx.symbolic_helper._get_tensor_rank", "<builtin>.RuntimeError"], "symbolic_opset9.dim": [], "symbolic_opset9.__getitem_": ["symbolic_opset9.select", "torch.tensor"], "symbolic_opset9.item": [], "symbolic_opset9.take": ["torch.tensor", "symbolic_opset9.reshape_as", "symbolic_opset9.index_select"], "symbolic_opset9._kl_div_log_target_impl": ["symbolic_opset9.exp", "symbolic_opset9.mul", "symbolic_opset9.sub"], "symbolic_opset9._kl_div_non_log_target_impl": ["symbolic_opset9.gt", "symbolic_opset9.zeros_like", "symbolic_opset9.sub", "torch.tensor", "symbolic_opset9.mul", "symbolic_opset9.log", "symbolic_opset9.where"], "symbolic_opset9.kl_div": ["torch.onnx.symbolic_helper._onnx_unsupported", "torch.onnx.symbolic_helper._reducesum_helper", "symbolic_opset9._kl_div_log_target_impl", "symbolic_opset9._kl_div_non_log_target_impl"], "symbolic_opset9.as_strided": ["symbolic_opset9.select", "torch.onnx.symbolic_helper._maybe_get_const", "torch.tensor", "torch.onnx.symbolic_helper._is_value", "<builtin>.enumerate", "symbolic_opset9.arange", "<builtin>.zip", "torch.arange", "<builtin>.len"], "symbolic_opset9.__derive_index": [], "symbolic_opset9.__range_length": ["symbolic_opset9.true_divide"], "symbolic_opset9.linear": ["symbolic_opset9.add", "symbolic_opset9.matmul", "symbolic_opset9.addmm", "torch.tensor", "symbolic_opset9.t", "torch.onnx.symbolic_helper._get_tensor_rank"], "symbolic_opset9.hann_window": ["symbolic_opset9.sub", "torch.onnx.symbolic_helper._dtype_is_fp", "scalar_type_to_pytorch_type.index", "torch.tensor", "torch.get_default_dtype", "symbolic_opset9.arange", "symbolic_opset9.mul", "symbolic_opset9.square", "symbolic_opset9.div", "symbolic_opset9.sin"], "torch.onnx.symbolic_helper._dtype_is_fp": [], "symbolic_opset9.mv": ["symbolic_opset9.matmul"], "symbolic_opset9.fill": ["torch.onnx.symbolic_helper.scalar_type_to_onnx.index", "symbolic_opset9.full_like"], "symbolic_opset9.index_add": ["<builtin>.NotImplementedError", "torch.onnx.symbolic_helper._slice_helper", "torch.onnx.symbolic_helper._maybe_get_const", "torch.onnx.symbolic_helper._get_tensor_dim_size", "torch.onnx.symbolic_opset9.scatter_add", "torch.onnx.symbolic_helper._unsqueeze_helper", "<builtin>.list", "<builtin>.range", "torch.onnx.symbolic_helper._get_tensor_rank", "symbolic_opset9.expand_as", "warnings.warn"], "torch.onnx.symbolic_opset9.scatter_add": [], "symbolic_opset9.roll": ["torch.onnx.symbolic_helper._slice_helper", "<builtin>.len", "<builtin>.range"], "symbolic_opset9.broadcast_tensors": ["torch.onnx.symbolic_helper._unpack_list", "symbolic_opset9.zeros_like", "symbolic_opset9.expand_as", "symbolic_opset9.add"], "symbolic_registry": ["importlib.import_module"], "symbolic_registry.register_version": ["symbolic_registry.register_ops_in_version", "symbolic_registry.is_registered_version"], "symbolic_registry.is_registered_version": [], "symbolic_registry.register_ops_in_version": ["symbolic_registry.register_ops_helper"], "symbolic_registry.register_ops_helper": ["symbolic_registry.register_op", "symbolic_registry.get_ops_in_version", "inspect.isfunction", "symbolic_registry.is_registered_op"], "symbolic_registry.get_ops_in_version": ["inspect.getmembers"], "symbolic_registry.is_registered_op": ["warnings.warn"], "symbolic_registry.register_op": ["warnings.warn", "symbolic_registry.is_registered_version"], "symbolic_registry.get_op_supported_version": ["symbolic_registry.get_ops_in_version"], "symbolic_registry.get_registered_op": ["warnings.warn", "symbolic_registry.get_op_supported_version", "<builtin>.RuntimeError", "<builtin>.str", "symbolic_registry.is_registered_op"], "utils.is_in_onnx_export": [], "utils.select_model_mode_for_export": ["warnings.warn", "torch.onnx.symbolic_helper._set_training_mode", "<builtin>.isinstance"], "torch.onnx.symbolic_helper._set_training_mode": [], "utils.export": ["utils._export"], "utils._export": ["utils._decide_input_format", "utils._model_to_graph", "<builtin>.len", "utils.select_model_mode_for_export", "<builtin>.RuntimeError", "zipfile.ZipFile", "utils._decide_constant_folding", "torch.serialization._open_file_like", "<builtin>.isinstance", "utils._decide_keep_init_as_input", "utils._decide_external_data_format", "os.path.exists", "os.path.isdir", "os.makedirs", "torch.onnx.symbolic_helper._set_operator_export_type", "utils._decide_add_node_names", "<builtin>.ValueError", "torch._C._check_onnx_proto", "os.path.join", "utils._validate_dynamic_axes", "torch.onnx.symbolic_helper._set_onnx_shape_inference", "torch.onnx.symbolic_helper._set_opset_version"], "utils._is_constant_tensor_list": ["torch._C.ListType", "torch._C.OptionalType.ofTensor", "torch._C.ListType.ofTensors"], "torch._C.ListType.ofTensors": [], "utils._split_tensor_list_constants": ["utils._is_constant_tensor_list", "utils._split_tensor_list_constants", "torch._C.ListType.ofTensors"], "utils._optimize_graph": ["torch._C._jit_pass_inline_fork_wait", "torch._C._jit_pass_onnx_set_dynamic_input_shape", "torch._C._jit_pass_constant_propagation", "torch._C._jit_pass_inline", "torch._C._jit_pass_peephole", "torch._C._jit_pass_onnx", "torch._C._jit_pass_onnx_fold_if", "utils._split_tensor_list_constants", "torch._C._jit_pass_onnx_scalar_type_analysis", "torch._C._jit_pass_onnx_preprocess", "torch._C._jit_pass_dce_allow_deleting_nodes_with_side_effects", "torch._C._jit_pass_onnx_peephole", "torch._C._jit_pass_onnx_preprocess_caffe2", "torch._C._jit_pass_onnx_remove_inplace_ops_for_onnx", "torch._C._jit_pass_lower_all_tuples", "torch._C._jit_pass_canonicalize_graph_fuser_ops", "torch._C._jit_pass_onnx_unpack_quantized_weights", "torch.onnx.symbolic_helper._quantized_ops.clear", "torch._C._jit_pass_onnx_graph_shape_type_inference", "torch._C._jit_pass_custom_pattern_based_rewrite_graph", "torch._C._jit_pass_lint", "torch._C._jit_pass_dce", "torch._C._jit_pass_onnx_remove_print", "torch._C._jit_pass_fuse_addmm", "torch._C._jit_pass_prepare_division_for_onnx", "torch._C._jit_pass_canonicalize", "torch._C._jit_pass_onnx_quantization_insert_permutes", "torch._C._jit_pass_erase_number_types"], "torch._C._jit_pass_inline_fork_wait": [], "torch._C._jit_pass_lower_all_tuples": [], "torch._C._jit_pass_canonicalize_graph_fuser_ops": [], "torch._C._jit_pass_peephole": [], "torch._C._jit_pass_fuse_addmm": [], "torch._C._jit_pass_onnx_remove_inplace_ops_for_onnx": [], "torch._C._jit_pass_onnx_preprocess": [], "torch._C._jit_pass_prepare_division_for_onnx": [], "torch._C._jit_pass_onnx_remove_print": [], "torch._C._jit_pass_onnx_preprocess_caffe2": [], "torch.onnx.symbolic_helper._quantized_ops.clear": [], "torch._C._jit_pass_onnx_unpack_quantized_weights": [], "torch._C._jit_pass_onnx_quantization_insert_permutes": [], "torch._C._jit_pass_custom_pattern_based_rewrite_graph": [], "torch._C._jit_pass_erase_number_types": [], "torch._C._jit_pass_onnx_set_dynamic_input_shape": [], "torch._C._jit_pass_onnx": [], "torch._C._jit_pass_onnx_scalar_type_analysis": [], "torch._C._jit_pass_onnx_fold_if": [], "torch._C._jit_pass_onnx_peephole": [], "torch._C._jit_pass_dce_allow_deleting_nodes_with_side_effects": [], "torch._C._jit_pass_onnx_graph_shape_type_inference": [], "utils.warn_on_static_input_change": ["<builtin>.list", "warnings.warn", "<builtin>.isinstance", "<builtin>.zip"], "utils._resolve_args_by_export_type": ["warnings.warn"], "utils._decide_keep_init_as_input": ["warnings.warn"], "utils._decide_add_node_names": ["utils._resolve_args_by_export_type"], "utils._decide_constant_folding": ["warnings.warn", "utils._resolve_args_by_export_type"], "utils._decide_external_data_format": ["<builtin>.str", "utils._resolve_args_by_export_type", "<builtin>.isinstance"], "utils._decide_input_format": ["<builtin>.tuple", "warnings.warn", "<builtin>.len", "<builtin>.isinstance", "<builtin>.list", "inspect.signature"], "utils._trace": ["utils.warn_on_static_input_change", "<builtin>.isinstance", "utils._optimize_graph", "torch.jit._get_trace_graph"], "torch.jit._get_trace_graph": [], "utils._trace_and_get_graph_from_model": ["utils.warn_on_static_input_change", "torch.jit._unique_state_dict", "<builtin>.RuntimeError", "torch.jit._get_trace_graph"], "torch.jit._unique_state_dict": [], "utils._get_param_count_list": ["<builtin>.len", "<builtin>.str", "<builtin>.zip", "torch.jit._flatten"], "torch.jit._flatten": [], "utils._create_jit_graph": ["<builtin>.tuple", "utils._get_param_count_list", "torch.jit._unique_state_dict", "torch._C._freeze_module", "torch._C._jit_pass_onnx_function_substitution", "<builtin>.isinstance", "utils._trace_and_get_graph_from_model", "<builtin>.len", "torch._C._propagate_and_assign_input_shapes", "<builtin>.RuntimeError", "<builtin>.list", "torch._C._jit_onnx_list_model_parameters", "<builtin>.enumerate", "torch.jit._flatten"], "torch._C._jit_pass_onnx_function_substitution": [], "torch._C._jit_onnx_list_model_parameters": [], "torch._C._propagate_and_assign_input_shapes": [], "utils._get_named_param_dict": ["<builtin>.dict", "<builtin>.zip", "<builtin>.len"], "utils._model_to_graph": ["<builtin>.len", "<builtin>.sum", "torch._C._jit_pass_onnx_eval_peephole", "<builtin>.tuple", "torch._C._jit_pass_filter_non_tensor_arguments", "<builtin>.isinstance", "torch._C._jit_pass_onnx_constant_fold", "torch._C._jit_pass_dce_allow_deleting_nodes_with_side_effects", "torch._C._jit_pass_onnx_eliminate_unused_items", "torch.jit._flatten", "utils._optimize_graph", "<builtin>.print", "utils._get_named_param_dict", "torch._C._jit_pass_onnx_cast_all_constant_to_floating", "utils._set_input_and_output_names", "torch._C._jit_pass_onnx_graph_shape_type_inference", "utils._create_jit_graph", "torch._C._jit_decay_packed_param_input_types", "torch._C._jit_flatten", "torch._C._jit_pass_onnx_assign_output_shape"], "torch._C._jit_pass_onnx_assign_output_shape": [], "utils._set_input_and_output_names": ["<builtin>.list", "utils._set_input_and_output_names.set_names"], "torch._C._jit_pass_onnx_eval_peephole": [], "torch._C._jit_pass_onnx_constant_fold": [], "torch._C._jit_pass_onnx_eliminate_unused_items": [], "torch._C._jit_pass_onnx_cast_all_constant_to_floating": [], "torch._C._jit_pass_filter_non_tensor_arguments": [], "torch._C._jit_decay_packed_param_input_types": [], "utils.export_to_pretty_string": ["utils._export_to_pretty_string"], "utils._export_to_pretty_string": ["utils._decide_input_format", "utils._model_to_graph", "utils._decide_add_node_names", "utils._decide_keep_init_as_input", "utils.select_model_mode_for_export", "torch.onnx.symbolic_helper._set_opset_version", "utils._decide_constant_folding", "torch.onnx.symbolic_helper._set_onnx_shape_inference", "torch.onnx.symbolic_helper._set_operator_export_type"], "torch.onnx.symbolic_helper._set_opset_version": [], "torch.onnx.symbolic_helper._set_operator_export_type": [], "torch.onnx.symbolic_helper._set_onnx_shape_inference": [], "utils._find_missing_ops_onnx_export": ["utils._decide_input_format", "utils._model_to_graph", "utils.select_model_mode_for_export", "<builtin>.list", "torch.onnx.symbolic_helper._set_opset_version"], "utils._validate_dynamic_axes": ["warnings.warn", "<builtin>.ValueError", "<builtin>.set", "<builtin>.isinstance", "<builtin>.len", "<builtin>.hasattr", "<builtin>.str", "<builtin>.enumerate"], "torch._C._check_onnx_proto": [], "torch.serialization._open_file_like": [], "utils._set_input_and_output_names.set_names": ["<builtin>.RuntimeError", "<builtin>.zip", "<builtin>.len"], "utils._run_symbolic_method": [], "utils._is_onnx_list": ["<builtin>.isinstance"], "utils._add_attribute": ["<builtin>.IndexError", "utils._is_onnx_list", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.getattr", "utils._scalar"], "utils._scalar": [], "utils._newNode": ["<builtin>.sorted", "utils._add_attribute"], "utils._graph_op": ["torch._C._jit_pass_onnx_node_shape_type_inference", "<builtin>.tuple", "<builtin>.dict", "<builtin>.list", "utils._graph_op.const_if_tensor", "utils._newNode"], "utils._graph_op.const_if_tensor": ["<builtin>.isinstance"], "torch._C._jit_pass_onnx_node_shape_type_inference": [], "utils._block_op": ["<builtin>.tuple", "utils._add_attribute", "<builtin>.len", "<builtin>.sorted", "<builtin>.list"], "utils._add_block": [], "utils._add_input_to_block": [], "utils._add_output_to_block": [], "utils._find_symbolic_in_registry": ["torch.onnx.symbolic_registry.get_registered_op", "torch.onnx.symbolic_registry.is_registered_op"], "torch.onnx.symbolic_registry.get_registered_op": [], "utils._run_symbolic_function": ["torch.tensor", "<builtin>.len", "torch._C.ListType.ofInts", "<builtin>.RuntimeError", "torch.onnx.symbolic_registry.is_registered_op", "torch.onnx.symbolic_caffe2.register_quantized_ops", "<builtin>.range", "torch.stack", "<builtin>.all", "<builtin>.isinstance", "torch._C.ListType.ofFloats", "<builtin>.list", "torch._C._jit_pass_fixup_onnx_controlflow_node", "<builtin>.bool", "torch.onnx.symbolic_registry.register_version", "torch._C._jit_pass_onnx_block", "torch._C._jit_pass_onnx_node_shape_type_inference", "utils._find_symbolic_in_registry", "torch.onnx.symbolic_registry.is_registered_version", "utils._graph_at", "<builtin>.enumerate", "torch._C._jit_onnx_convert_pattern_from_subblock"], "torch.onnx.symbolic_caffe2.register_quantized_ops": [], "torch._C._jit_onnx_convert_pattern_from_subblock": [], "utils._graph_at": [], "torch._C.ListType.ofFloats": [], "torch._C._jit_pass_onnx_block": [], "torch._C._jit_pass_fixup_onnx_controlflow_node": [], "torch.onnx.symbolic_registry.is_registered_version": [], "utils._graph_constant": ["torch.CharTensor", "torch.IntTensor", "torch.DoubleTensor", "torch.HalfTensor", "torch.ShortTensor", "torch.FloatTensor", "<builtin>.ValueError", "<builtin>.set", "<builtin>.isinstance", "torch.LongTensor"], "torch.CharTensor": [], "torch.ShortTensor": [], "torch.HalfTensor": [], "utils._node_getitem": ["<builtin>.getattr"], "utils.register_custom_op_symbolic": ["<builtin>.bool", "<builtin>.RuntimeError", "torch.onnx.symbolic_registry.register_op", "re.match"], "_functional.adamw": ["torch.maximum", "math.sqrt", "<builtin>.enumerate"], "_functional.adam": ["torch.maximum", "math.sqrt", "<builtin>.enumerate"], "lbfgs": [], "lbfgs._cubic_interpolate": ["<builtin>.min", "<builtin>.max"], "lbfgs._strong_wolfe": ["<builtin>.max", "lbfgs.LBFGS.step.obj_func", "<builtin>.min", "lbfgs._cubic_interpolate", "<builtin>.abs"], "lbfgs.LBFGS.step.obj_func": ["lbfgs.LBFGS._directional_evaluate"], "lbfgs.LBFGS.__init__": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.dict", "<builtin>.super"], "lbfgs.LBFGS._numel": ["functools.reduce"], "lbfgs.LBFGS._numel.<lambda1>": [], "lbfgs.LBFGS._gather_flat_grad": ["torch.cat"], "lbfgs.LBFGS._add_grad": ["lbfgs.LBFGS._numel"], "lbfgs.LBFGS._clone_param": [], "lbfgs.LBFGS._set_param": ["<builtin>.zip"], "lbfgs.LBFGS._directional_evaluate": ["lbfgs.LBFGS._set_param", "<builtin>.float", "lbfgs.LBFGS._gather_flat_grad", "lbfgs.LBFGS._add_grad"], "lbfgs.LBFGS": ["torch.no_grad"], "lbfgs.LBFGS.step": ["<builtin>.len", "torch.enable_grad", "<builtin>.RuntimeError", "<builtin>.range", "lbfgs.LBFGS._clone_param", "lbfgs._strong_wolfe", "lbfgs.LBFGS._gather_flat_grad", "<builtin>.min", "torch.mul", "lbfgs.LBFGS._add_grad", "<builtin>.float", "<builtin>.abs"], "lr_scheduler": [], "lr_scheduler._LRScheduler.__init__": ["<builtin>.type", "lr_scheduler._LRScheduler.__init__.with_counter", "<builtin>.enumerate", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.KeyError", "lr_scheduler._LRScheduler.step"], "lr_scheduler._LRScheduler.__init__.with_counter": ["<builtin>.getattr", "functools.wraps", "weakref.ref"], "lr_scheduler._LRScheduler.__init__.with_counter.wrapper": [], "lr_scheduler._LRScheduler.step": ["warnings.warn", "<builtin>.hasattr", "<builtin>.enumerate", "lr_scheduler._LRScheduler.get_lr", "<builtin>.zip", "lr_scheduler._LRScheduler.print_lr", "lr_scheduler._LRScheduler.step._enable_get_lr_call.__init__"], "lr_scheduler._LRScheduler.state_dict": [], "lr_scheduler._LRScheduler.load_state_dict": [], "lr_scheduler._LRScheduler.get_last_lr": [], "lr_scheduler._LRScheduler.get_lr": [], "lr_scheduler._LRScheduler.print_lr": ["<builtin>.print"], "lr_scheduler._LRScheduler.step._enable_get_lr_call.__init__": [], "lr_scheduler._LRScheduler.step._enable_get_lr_call.__enter__": [], "lr_scheduler._LRScheduler.step._enable_get_lr_call.__exit__": [], "lr_scheduler.LambdaLR.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.len", "<builtin>.list", "<builtin>.isinstance"], "lr_scheduler.LambdaLR.state_dict": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance"], "lr_scheduler.LambdaLR.load_state_dict": ["<builtin>.enumerate"], "lr_scheduler.LambdaLR.get_lr": ["warnings.warn", "<builtin>.zip"], "lr_scheduler.MultiplicativeLR.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.len", "<builtin>.list", "<builtin>.isinstance"], "lr_scheduler.MultiplicativeLR.state_dict": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance"], "lr_scheduler.MultiplicativeLR.load_state_dict": ["<builtin>.enumerate"], "lr_scheduler.MultiplicativeLR.get_lr": ["warnings.warn", "<builtin>.list", "<builtin>.zip"], "lr_scheduler.StepLR.__init__": ["<builtin>.super"], "lr_scheduler.StepLR.get_lr": ["warnings.warn"], "lr_scheduler.StepLR._get_closed_form_lr": [], "lr_scheduler.MultiStepLR.__init__": ["collections.Counter", "<builtin>.super"], "lr_scheduler.MultiStepLR.get_lr": ["warnings.warn"], "lr_scheduler.MultiStepLR._get_closed_form_lr": ["bisect.bisect_right", "<builtin>.list", "<builtin>.sorted"], "lr_scheduler.ExponentialLR.__init__": ["<builtin>.super"], "lr_scheduler.ExponentialLR.get_lr": ["warnings.warn"], "lr_scheduler.ExponentialLR._get_closed_form_lr": [], "lr_scheduler.CosineAnnealingLR.__init__": ["<builtin>.super"], "lr_scheduler.CosineAnnealingLR.get_lr": ["warnings.warn", "math.cos", "<builtin>.zip"], "lr_scheduler.CosineAnnealingLR._get_closed_form_lr": ["math.cos"], "lr_scheduler.ReduceLROnPlateau.__init__": ["<builtin>.type", "<builtin>.ValueError", "lr_scheduler.ReduceLROnPlateau._reset", "<builtin>.TypeError", "<builtin>.len", "<builtin>.list", "<builtin>.isinstance", "lr_scheduler.ReduceLROnPlateau._init_is_better"], "lr_scheduler.ReduceLROnPlateau._init_is_better": ["<builtin>.ValueError"], "lr_scheduler.ReduceLROnPlateau._reset": [], "lr_scheduler.ReduceLROnPlateau.step": ["warnings.warn", "lr_scheduler.ReduceLROnPlateau.is_better", "lr_scheduler.ReduceLROnPlateau._reduce_lr", "<builtin>.float"], "lr_scheduler.ReduceLROnPlateau.is_better": [], "lr_scheduler.ReduceLROnPlateau._reduce_lr": ["<builtin>.enumerate", "<builtin>.max", "<builtin>.print", "<builtin>.float"], "lr_scheduler.ReduceLROnPlateau.in_cooldown": [], "lr_scheduler.ReduceLROnPlateau.state_dict": [], "lr_scheduler.ReduceLROnPlateau.load_state_dict": ["lr_scheduler.ReduceLROnPlateau._init_is_better"], "lr_scheduler.CyclicLR.__init__": ["<builtin>.type", "<builtin>.float", "<builtin>.ValueError", "<builtin>.super", "<builtin>.TypeError", "<builtin>.zip", "lr_scheduler.CyclicLR._format_param", "<builtin>.isinstance"], "lr_scheduler.CyclicLR._format_param": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.ValueError"], "lr_scheduler.CyclicLR._triangular_scale_fn": [], "lr_scheduler.CyclicLR._triangular2_scale_fn": [], "lr_scheduler.CyclicLR._exp_range_scale_fn": [], "lr_scheduler.CyclicLR.get_lr": ["warnings.warn", "lr_scheduler.CyclicLR._triangular_scale_fn", "math.floor", "<builtin>.zip", "lr_scheduler.CyclicLR._triangular2_scale_fn", "lr_scheduler.CyclicLR._exp_range_scale_fn"], "lr_scheduler.CosineAnnealingWarmRestarts.__init__": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.ValueError"], "lr_scheduler.CosineAnnealingWarmRestarts.get_lr": ["warnings.warn", "math.cos"], "lr_scheduler.CosineAnnealingWarmRestarts.step": ["lr_scheduler.CosineAnnealingWarmRestarts.get_lr", "<builtin>.int", "lr_scheduler.CosineAnnealingWarmRestarts.step._enable_get_lr_call.__init__", "math.floor", "<builtin>.ValueError", "<builtin>.enumerate", "math.log", "<builtin>.zip", "lr_scheduler._LRScheduler.print_lr"], "lr_scheduler.CosineAnnealingWarmRestarts.step._enable_get_lr_call.__init__": [], "lr_scheduler.CosineAnnealingWarmRestarts.step._enable_get_lr_call.__enter__": [], "lr_scheduler.CosineAnnealingWarmRestarts.step._enable_get_lr_call.__exit__": [], "lr_scheduler.OneCycleLR.__init__": ["<builtin>.type", "<builtin>.float", "lr_scheduler.OneCycleLR._format_param", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.super", "<builtin>.TypeError", "<builtin>.zip", "<builtin>.isinstance"], "lr_scheduler.OneCycleLR._format_param": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.ValueError"], "lr_scheduler.OneCycleLR._annealing_cos": ["math.cos"], "lr_scheduler.OneCycleLR._annealing_linear": [], "lr_scheduler.OneCycleLR.get_lr": ["warnings.warn", "<builtin>.ValueError", "<builtin>.enumerate", "lr_scheduler.OneCycleLR._annealing_cos", "lr_scheduler.OneCycleLR._annealing_linear", "<builtin>.len"], "optimizer._RequiredParameter.__repr__": [], "optimizer.Optimizer._hook_for_profile": ["<builtin>.getattr", "optimizer.Optimizer._hook_for_profile.profile_hook_step"], "optimizer.Optimizer.add_param_group": ["<builtin>.set", "<builtin>.TypeError", "torch.typename", "warnings.warn", "<builtin>.ValueError", "<builtin>.len", "<builtin>.list", "<builtin>.isinstance"], "optimizer.Optimizer.__getstate__": [], "optimizer.Optimizer.__setstate__": ["optimizer.Optimizer._hook_for_profile"], "optimizer.Optimizer.__repr__": ["<builtin>.enumerate", "<builtin>.sorted"], "optimizer.Optimizer._hook_for_profile.profile_hook_step": ["functools.wraps"], "optimizer.Optimizer._hook_for_profile.profile_hook_step.wrapper": ["torch.autograd.profiler.record_function"], "optimizer.Optimizer.state_dict": ["<builtin>.id", "optimizer.Optimizer.state_dict.pack_group", "<builtin>.isinstance"], "optimizer.Optimizer.state_dict.pack_group": ["<builtin>.enumerate", "<builtin>.id", "<builtin>.len"], "optimizer.Optimizer.load_state_dict": ["optimizer.Optimizer.load_state_dict.cast", "collections.defaultdict", "optimizer.Optimizer.__setstate__", "itertools.chain.from_iterable", "<builtin>.ValueError", "optimizer.Optimizer.load_state_dict.update_group", "copy.deepcopy", "<builtin>.zip", "<builtin>.len", "<builtin>.any"], "optimizer.Optimizer.load_state_dict.cast": ["<builtin>.type", "optimizer.Optimizer.load_state_dict.cast", "<builtin>.isinstance"], "optimizer.Optimizer.load_state_dict.update_group": [], "optimizer.Optimizer.zero_grad": ["optimizer.Optimizer._hook_for_profile", "<builtin>.hasattr", "torch.autograd.profiler.record_function"], "optimizer.Optimizer.step": [], "_functional.rmsprop": ["<builtin>.enumerate"], "_functional.rprop": ["<builtin>.enumerate"], "_functional.sgd": ["<builtin>.enumerate", "torch.clone"], "sparse_adam": [], "sparse_adam.SparseAdam.__init__": ["<builtin>.super", "<builtin>.list", "<builtin>.dict", "<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.isinstance"], "sparse_adam.SparseAdam": ["torch.no_grad"], "sparse_adam.SparseAdam.step": ["torch.zeros_like", "<builtin>.RuntimeError", "<builtin>.len", "torch.enable_grad", "_functional.sparse_adam"], "_functional.sparse_adam": ["_functional.sparse_adam.make_sparse", "math.sqrt", "<builtin>.enumerate"], "swa_utils": ["torch.no_grad"], "swa_utils.AveragedModel.__init__": ["torch.tensor", "copy.deepcopy", "torch.nn.Module.register_buffer", "<builtin>.super"], "swa_utils.AveragedModel.__init__.avg_fn": [], "swa_utils.AveragedModel.forward": [], "swa_utils.AveragedModel.update_parameters": ["swa_utils.AveragedModel.__init__.avg_fn", "torch.nn.Module.parameters", "<builtin>.zip"], "swa_utils.update_bn": ["<builtin>.isinstance", "torch.ones_like", "torch.zeros_like"], "swa_utils.SWALR.__init__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.zip", "swa_utils.SWALR._format_param", "<builtin>.super"], "swa_utils.SWALR._format_param": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.ValueError"], "swa_utils.SWALR._linear_anneal": [], "swa_utils.SWALR._cosine_anneal": ["math.cos"], "swa_utils.SWALR._get_initial_lr": [], "swa_utils.SWALR.get_lr": ["swa_utils.SWALR._cosine_anneal", "<builtin>.min", "swa_utils.SWALR._linear_anneal", "<builtin>.zip", "<builtin>.max", "swa_utils.SWALR._get_initial_lr"], "torch.maximum": [], "torch.amax": [], "_functional.sparse_adam.make_sparse": [], "find_file_dependencies": [], "find_file_dependencies._ExtractModuleReferences.run": ["ast.parse", "<builtin>.list", "find_file_dependencies._ExtractModuleReferences.__init__"], "find_file_dependencies._ExtractModuleReferences.__init__": ["<builtin>.super"], "find_file_dependencies._ExtractModuleReferences._absmodule": ["_importlib._resolve_name"], "_importlib._resolve_name": ["<builtin>.len", "<builtin>.ValueError"], "find_file_dependencies._ExtractModuleReferences.visit_Import": [], "find_file_dependencies._ExtractModuleReferences.visit_ImportFrom": ["find_file_dependencies._ExtractModuleReferences._absmodule"], "find_file_dependencies._ExtractModuleReferences._grab_node_int": [], "find_file_dependencies._ExtractModuleReferences._grab_node_str": [], "find_file_dependencies._ExtractModuleReferences.visit_Call": ["<builtin>.hasattr", "<builtin>.len", "find_file_dependencies._ExtractModuleReferences._grab_node_int", "find_file_dependencies._ExtractModuleReferences._absmodule", "find_file_dependencies._ExtractModuleReferences._grab_node_str"], "glob_group": [], "glob_group.GlobGroup.__init__": ["glob_group.GlobGroup._glob_list"], "glob_group.GlobGroup._glob_list": ["glob_group.GlobGroup._glob_to_re", "<builtin>.isinstance"], "glob_group.GlobGroup.__str__": [], "glob_group.GlobGroup.__repr__": [], "glob_group.GlobGroup.matches": ["<builtin>.any", "<builtin>.all"], "glob_group.GlobGroup._glob_to_re": ["glob_group.GlobGroup._glob_to_re.component_to_re", "re.compile"], "glob_group.GlobGroup._glob_to_re.component_to_re": ["re.escape", "<builtin>.ValueError"], "importer": ["abc.ABC.__init__"], "importer.Importer": ["abc.abstractmethod"], "importer.Importer.import_module": [], "importer.Importer.get_name": ["<builtin>.isinstance", "<builtin>.getattr", "_mangling.demangle", "pickle._getattribute", "importer._SysImporter.import_module", "importer.Importer.get_name.get_obj_info", "importer.Importer.whichmodule", "<builtin>.type", "importer._SysImporter.whichmodule", "importer.Importer.import_module", "pickle._Pickler.dispatch.get"], "pickle._Pickler.dispatch.get": [], "importer._SysImporter.whichmodule": ["pickle.whichmodule"], "importer.Importer.whichmodule": ["<builtin>.getattr", "pickle._getattribute"], "_mangling.demangle": ["_mangling.is_mangled", "<builtin>.len"], "importer._SysImporter.import_module": ["importlib.import_module"], "pickle._getattribute": [], "importer.Importer.get_name.get_obj_info": ["importer._SysImporter.whichmodule", "importer.Importer.whichmodule", "_mangling.is_mangled", "_mangling.get_mangle_prefix"], "_mangling.get_mangle_prefix": ["_mangling.is_mangled"], "pickle.whichmodule": [], "importer.OrderedImporter.__init__": ["<builtin>.list"], "importer.OrderedImporter.import_module": ["abc.ABC._importers.import_module", "<builtin>.isinstance", "<builtin>.ModuleNotFoundError", "<builtin>.TypeError"], "abc.ABC._importers.import_module": [], "importer.OrderedImporter.whichmodule": ["abc.ABC._importers.whichmodule"], "abc.ABC._importers.whichmodule": [], "package_exporter": [], "package_exporter.PackagingErrorReason.__repr__": [], "package_exporter._PatternInfo.__init__": [], "package_exporter.PackagingError.__init__": ["io.StringIO", "collections.defaultdict", "<builtin>.super"], "package_exporter.PackageExporter.__init__": ["_digraph.DiGraph", "<builtin>.type", "<builtin>.isinstance", "torch._C.PyTorchFileWriter", "torch._C.ScriptModuleSerializer", "<builtin>.set", "<builtin>.str", "<builtin>.TypeError", "collections.OrderedDict", "importer.OrderedImporter"], "_digraph.DiGraph": [], "torch._C.ScriptModuleSerializer": [], "importer.OrderedImporter": [], "package_exporter.PackageExporter.save_source_file": ["<builtin>.str", "package_exporter._read_file", "pathlib.Path", "package_exporter.PackageExporter.save_source_string", "<builtin>.len"], "package_exporter._read_file": ["<builtin>.open"], "package_exporter.PackageExporter.save_source_string": ["package_exporter.PackageExporter.add_dependency", "package_exporter.PackageExporter._get_dependencies"], "package_exporter.PackageExporter.get_unique_id": ["<builtin>.str"], "package_exporter.PackageExporter._get_dependencies": ["package_exporter.PackageExporter._module_exists", "find_file_dependencies.find_files_source_depends_on", "<builtin>.str", "<builtin>.list"], "find_file_dependencies.find_files_source_depends_on": [], "package_exporter.PackageExporter._module_exists": ["package_exporter.PackageExporter._import_module"], "package_exporter.PackageExporter.add_dependency": ["package_exporter.PackageExporter._intern_module", "package_exporter.PackageExporter._can_implicitly_extern"], "package_exporter.PackageExporter._write_source_string": ["package_exporter.PackageExporter._write"], "package_exporter.PackageExporter._write": ["<builtin>.AssertionError", "<builtin>.isinstance", "<builtin>.len", "_mangling.is_mangled"], "package_exporter.PackageExporter._import_module": ["<builtin>.ModuleNotFoundError", "_mangling.is_mangled", "importer.sys_importer.import_module"], "importer.sys_importer.import_module": [], "package_exporter.PackageExporter._get_source_of_module": ["linecache.getlines", "<builtin>.getattr"], "package_exporter.PackageExporter._can_implicitly_extern": ["_stdlib.is_stdlib_module"], "package_exporter.PackageExporter._intern_module": ["<builtin>.tuple", "package_exporter.PackageExporter._get_source_of_module", "<builtin>.getattr", "<builtin>.hasattr", "package_exporter.PackageExporter.add_dependency", "package_exporter.PackageExporter._get_dependencies", "package_exporter.PackageExporter._import_module"], "package_exporter.PackageExporter.save_module": ["package_exporter.PackageExporter._intern_module", "<builtin>.TypeError", "<builtin>.isinstance"], "package_exporter.PackageExporter.save_pickle": ["<builtin>.isinstance", "package_exporter.PackageExporter._filename", "_package_pickler.create_pickler", "package_exporter.PackageExporter._write", "package_exporter.PackageExporter.add_dependency", "pickletools.genops", "io.BytesIO"], "package_exporter.PackageExporter._filename": ["_importlib._normalize_path"], "_package_pickler.create_pickler": ["pickle.Pickler", "_package_pickler.PackagePickler.__init__"], "pickletools.genops": [], "package_exporter.PackageExporter.save_text": ["package_exporter.PackageExporter.save_binary"], "package_exporter.PackageExporter.save_binary": ["package_exporter.PackageExporter._write", "package_exporter.PackageExporter._filename"], "package_exporter.PackageExporter.register_extern_hook": ["torch.utils.hooks.RemovableHandle"], "package_exporter.PackageExporter.register_mock_hook": ["torch.utils.hooks.RemovableHandle"], "package_exporter.PackageExporter.register_intern_hook": ["torch.utils.hooks.RemovableHandle"], "package_exporter.PackageExporter.intern": ["glob_group.GlobGroup", "package_exporter._PatternInfo.__init__"], "glob_group.GlobGroup": [], "package_exporter.PackageExporter.mock": ["glob_group.GlobGroup", "package_exporter._PatternInfo.__init__"], "package_exporter.PackageExporter.extern": ["glob_group.GlobGroup", "package_exporter._PatternInfo.__init__"], "package_exporter.PackageExporter.deny": ["glob_group.GlobGroup", "package_exporter._PatternInfo.__init__"], "package_exporter.PackageExporter._persistent_id": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.Exception", "<builtin>.id", "<builtin>.hasattr", "torch.serialization.location_tag", "torch.is_storage", "torch.serialization.normalize_storage_type"], "torch.serialization.normalize_storage_type": [], "torch.serialization.location_tag": [], "package_exporter.PackageExporter.__enter__": [], "package_exporter.PackageExporter.__exit__": ["package_exporter.PackageExporter._finalize_zip", "package_exporter.PackageExporter.close"], "package_exporter.PackageExporter._finalize_zip": [], "package_exporter.PackageExporter.close": ["package_exporter.PackageExporter._finalize_zip", "package_exporter.PackageExporter._execute_dependency_graph"], "package_exporter.PackageExporter._validate_dependency_graph": ["package_exporter.PackagingError.__init__"], "package_exporter.PackageExporter._write_mock_file": ["pathlib.Path", "package_exporter.PackageExporter._write_source_string", "<builtin>.str", "package_exporter._read_file"], "package_exporter.PackageExporter._execute_dependency_graph": ["<builtin>.AssertionError", "package_exporter.PackageExporter._write", "package_exporter.PackageExporter._write_source_string", "<builtin>.hasattr", "package_exporter.PackageExporter._write_mock_file", "package_exporter.PackageExporter._import_module", "package_exporter.PackageExporter._validate_dependency_graph"], "_importlib._normalize_path": ["<builtin>.ValueError"], "_stdlib.is_stdlib_module": ["_stdlib._get_stdlib_modules"], "package_exporter.PackageExporter.dependency_graph_string": [], "package_exporter.PackageExporter._nodes_with_action_type": [], "package_exporter.PackageExporter.externed_modules": ["package_exporter.PackageExporter._nodes_with_action_type"], "package_exporter.PackageExporter.interned_modules": ["package_exporter.PackageExporter._nodes_with_action_type"], "package_exporter.PackageExporter.mocked_modules": ["package_exporter.PackageExporter._nodes_with_action_type"], "package_exporter.PackageExporter.denied_modules": ["package_exporter.PackageExporter._nodes_with_action_type"], "package_exporter.PackageExporter.get_rdeps": ["<builtin>.list"], "package_importer": ["weakref.WeakValueDictionary", "<builtin>.object"], "package_importer.PackageImporter.__init__": ["_mangling.PackageMangler", "torch._C.PyTorchFileReader", "package_importer._PackageNode.__init__", "_directory_reader.DirectoryReader", "builtins.__dict__.copy", "<builtin>.str", "<builtin>.isinstance", "package_importer.PackageImporter._read_extern", "package_importer.PackageImporter.<lambda1>", "<builtin>.ImportError", "package_importer.PackageImporter._add_file", "package_importer.PackageImporter._add_extern"], "_directory_reader.DirectoryReader": [], "package_importer._PackageNode.__init__": [], "package_importer.PackageImporter._read_extern": [], "package_importer.PackageImporter.<lambda1>": [], "package_importer.PackageImporter._add_extern": ["package_importer.PackageImporter._get_or_create_package", "<builtin>.isinstance"], "package_importer.PackageImporter._add_file": ["package_importer.PackageImporter._get_or_create_package", "package_importer._ModuleNode.__init__", "<builtin>.isinstance", "<builtin>.ImportError", "<builtin>.len"], "builtins.__dict__.copy": [], "_mangling.PackageMangler": [], "package_importer.PackageImporter.__init__.<lambda1>": ["_package_unpickler.PackageUnpickler"], "_package_unpickler.PackageUnpickler": [], "package_importer.PackageImporter.import_module": ["package_importer.PackageImporter._gcd_import"], "package_importer.PackageImporter._gcd_import": ["package_importer.PackageImporter._find_and_load", "_importlib._resolve_name", "_importlib._sanity_check"], "package_importer.PackageImporter.load_binary": ["package_importer.PackageImporter._zipfile_path"], "package_importer.PackageImporter._zipfile_path": ["package_importer.PackageImporter._get_package", "_importlib._normalize_path", "_mangling.demangle"], "package_importer.PackageImporter.load_text": ["package_importer.PackageImporter.load_binary"], "package_importer.PackageImporter.load_pickle": ["torch._C.DeserializationStorageContext", "package_importer.PackageImporter.__init__.<lambda1>", "torch.serialization._get_restore_location", "package_importer.PackageImporter.load_pickle.set_deserialization_context", "io.BytesIO", "contextlib.contextmanager", "package_importer.PackageImporter._zipfile_path", "torch._utils._validate_loaded_sparse_tensors"], "torch.serialization._get_restore_location": [], "torch._C.DeserializationStorageContext": [], "package_importer.PackageImporter.load_pickle.load_tensor": ["<builtin>.int", "<builtin>.isinstance"], "package_importer.PackageImporter.load_pickle.persistent_load": ["package_importer.PackageImporter.load_pickle.load_tensor", "torch.serialization._maybe_decode_ascii", "<builtin>.len", "<builtin>.isinstance"], "package_importer.PackageImporter.load_pickle.set_deserialization_context": [], "package_importer.PackageImporter.id": [], "package_importer.PackageImporter.file_structure": ["file_structure_representation._create_directory_from_file_list"], "file_structure_representation._create_directory_from_file_list": [], "package_importer.PackageImporter._make_module": ["<builtin>.exec", "package_importer.PackageImporter._compile_source", "importlib.machinery.ModuleSpec", "package_importer.PackageImporter._install_on_parent", "importlib.util.module_from_spec", "linecache.lazycache"], "importlib.machinery.ModuleSpec": [], "importlib.util.module_from_spec": [], "package_importer.PackageImporter._install_on_parent": ["<builtin>.setattr"], "linecache.lazycache": [], "package_importer.PackageImporter._compile_source": ["_importlib._normalize_line_endings", "<builtin>.compile"], "package_importer.PackageImporter._load_module": ["<builtin>.ModuleNotFoundError", "package_importer.PackageImporter._make_module", "importlib.import_module", "<builtin>.isinstance"], "_importlib._normalize_line_endings": [], "package_importer.PackageImporter.get_source": ["package_importer.PackageImporter.import_module", "_mangling.demangle"], "package_importer.PackageImporter.get_resource_reader": ["package_importer._PackageResourceReader.__init__", "package_importer.PackageImporter._get_package"], "package_importer.PackageImporter._get_package": ["package_importer.PackageImporter.import_module", "<builtin>.hasattr", "<builtin>.TypeError"], "package_importer._PackageResourceReader.__init__": [], "package_importer.PackageImporter._do_find_and_load": ["<builtin>.ModuleNotFoundError", "package_importer.PackageImporter._install_on_parent", "package_importer.PackageImporter._load_module", "package_importer.PackageImporter._gcd_import"], "package_importer.PackageImporter._find_and_load": ["<builtin>.ModuleNotFoundError", "package_importer.PackageImporter._do_find_and_load", "typing.cast"], "_importlib._sanity_check": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ImportError"], "package_importer.PackageImporter._handle_fromlist": ["package_importer.PackageImporter._gcd_import", "_mangling.demangle", "<builtin>.isinstance", "<builtin>.type", "package_importer.PackageImporter._handle_fromlist", "<builtin>.hasattr", "<builtin>.TypeError"], "package_importer.PackageImporter.__import__": ["_mangling.demangle", "_importlib._calc___package__", "package_importer.PackageImporter._handle_fromlist", "<builtin>.len", "package_importer.PackageImporter._gcd_import"], "_importlib._calc___package__": ["_warnings.warn"], "package_importer.PackageImporter._get_or_create_package": ["<builtin>.ImportError", "<builtin>.isinstance", "<builtin>.enumerate", "package_importer._PackageNode.__init__"], "package_importer._ModuleNode.__init__": [], "weakref.WeakValueDictionary": [], "package_importer.patched_getfile": ["inspect.getfile", "inspect.isclass"], "package_importer._PackageResourceReader.open_resource": ["io.BytesIO", "package_importer.PackageImporter.load_binary"], "package_importer._PackageResourceReader.resource_path": ["<builtin>.isinstance"], "package_importer._PackageResourceReader.is_resource": ["package_importer.PackageImporter._zipfile_path"], "package_importer._PackageResourceReader.contents": ["<builtin>.len", "pathlib.Path", "<builtin>.set", "package_importer.PackageImporter._zipfile_path"], "_digraph": [], "_digraph.DiGraph.__init__": [], "_digraph.DiGraph.add_node": [], "_digraph.DiGraph.add_edge": [], "_digraph.DiGraph.successors": ["<builtin>.ValueError", "<builtin>.iter"], "_digraph.DiGraph.predecessors": ["<builtin>.ValueError", "<builtin>.iter"], "_digraph.DiGraph.edges": [], "_digraph.DiGraph.nodes": [], "_digraph.DiGraph.__iter__": ["<builtin>.iter"], "_digraph.DiGraph.__contains__": [], "_directory_reader": [], "_directory_reader._HasStorage.__init__": [], "_directory_reader._HasStorage.storage": [], "_directory_reader.DirectoryReader.__init__": [], "_directory_reader.DirectoryReader.get_record": ["<builtin>.open"], "_directory_reader.DirectoryReader.get_storage_from_record": ["_directory_reader._HasStorage.__init__"], "_directory_reader.DirectoryReader.has_record": [], "_directory_reader.DirectoryReader.get_all_records": ["glob.glob", "<builtin>.len"], "_importlib": [], "_warnings.warn": [], "_mangling": [], "_mangling.PackageMangler.__init__": [], "_mangling.PackageMangler.mangle": ["<builtin>.len"], "_mangling.PackageMangler.parent_name": [], "_mock": ["_mock.install_method"], "_mock.MockedObject.__new__": ["<builtin>.super", "<builtin>.NotImplementedError"], "_mock.MockedObject.__init__": [], "_mock.MockedObject.__repr__": [], "_mock.install_method": ["<builtin>.setattr"], "_mock.install_method._not_implemented": ["<builtin>.NotImplementedError"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\package\\_mock_zipreader": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\package\\_mock_zipreader._HasStorage.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\package\\_mock_zipreader._HasStorage.storage": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\package\\_mock_zipreader.MockZipReader.__init__": [], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\package\\_mock_zipreader.MockZipReader.get_record": ["<builtin>.open"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\package\\_mock_zipreader.MockZipReader.get_storage_from_record": ["AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\package\\_mock_zipreader._HasStorage.__init__"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\package\\_mock_zipreader.MockZipReader.get_all_records": ["glob.glob", "<builtin>.len"], "_package_pickler": [], "pickle._Pickler.dispatch.copy": [], "_package_pickler.PackagePickler": ["pickle._Pickler.dispatch.copy"], "_package_pickler.PackagePickler.__init__": ["<builtin>.super"], "_package_pickler.PackagePickler.save_global": ["pickle._getattribute", "pickle._Pickler.memoize", "pickle._Pickler.write", "pickle._Pickler.save", "<builtin>.str", "pickle._Pickler.save_reduce", "<builtin>.bytes", "struct.pack", "pickle.PicklingError", "pickle._extension_registry.get"], "pickle.PicklingError": [], "pickle._extension_registry.get": [], "pickle._Pickler.write": [], "pickle._Pickler.save": [], "pickle._Pickler.save_reduce": [], "pickle._Pickler.memoize": [], "_package_unpickler": [], "_package_unpickler.PackageUnpickler.__init__": ["<builtin>.super"], "_package_unpickler.PackageUnpickler.find_class": ["<builtin>.getattr"], "_stdlib": [], "_stdlib._get_stdlib_modules": ["<builtin>.RuntimeError"], "profiler.schedule": ["warnings.warn"], "profiler.schedule.schedule_fn": [], "profiler._default_schedule_fn": [], "profiler.tensorboard_trace_handler": [], "profiler.tensorboard_trace_handler.handler_fn": ["<builtin>.RuntimeError", "os.path.isdir", "socket.gethostname", "os.getpid", "os.makedirs", "os.path.join", "<builtin>.str", "time.time", "<builtin>.int"], "profiler.supported_activities": ["torch.autograd._supported_activities"], "profiler.profile.start": ["<builtin>.str", "torch.autograd.profiler.record_function", "profiler.profile._enter_actions"], "profiler.profile.stop": ["profiler.profile._exit_actions"], "profiler.profile._enter_actions": ["profiler.profile._start_trace", "profiler.profile._start_warmup"], "profiler.profile._exit_actions": ["profiler.profile._stop_trace", "profiler.profile._start_trace"], "profiler.profile.step": ["torch.autograd.profiler.record_function", "profiler.profile._start_warmup", "profiler.profile._start_trace", "profiler.profile._stop_trace", "<builtin>.str", "profiler._default_schedule_fn", "warnings.warn"], "profiler.profile._stop_trace": [], "profiler.profile._start_warmup": ["torch.autograd.profiler.profile"], "profiler.profile.events": [], "profiler.profile.add_metadata": ["torch.autograd._add_metadata_json"], "torch.autograd._add_metadata_json": [], "profiler.profile.add_metadata_json": ["torch.autograd._add_metadata_json"], "profiler.profile._get_distributed_info": ["torch.distributed.is_available", "torch.distributed.get_rank", "torch.distributed.get_world_size", "torch.distributed.get_backend", "torch.distributed.is_initialized"], "fake_quantize": [], "fake_quantize._is_per_channel": [], "fake_quantize._is_per_tensor": [], "fake_quantize._is_symmetric_quant": [], "fake_quantize.FakeQuantizeBase.__init__": ["<builtin>.super", "torch.tensor", "abc.ABC.register_buffer"], "abc.ABC.register_buffer": [], "fake_quantize.FakeQuantizeBase": ["abc.abstractmethod", "<builtin>.classmethod", "torch.jit.export"], "fake_quantize.FakeQuantizeBase.forward": [], "fake_quantize.FakeQuantizeBase.calculate_qparams": [], "fake_quantize.FakeQuantizeBase.enable_fake_quant": [], "fake_quantize.FakeQuantizeBase.disable_fake_quant": ["fake_quantize.FakeQuantizeBase.enable_fake_quant"], "fake_quantize.FakeQuantizeBase.enable_observer": [], "fake_quantize.FakeQuantizeBase.disable_observer": ["fake_quantize.FakeQuantizeBase.enable_observer"], "fake_quantize.FakeQuantize.__init__": ["<builtin>.super", "observer.MovingAverageMinMaxObserver", "<builtin>.hasattr", "fake_quantize._is_per_tensor", "torch.iinfo", "<builtin>.str", "fake_quantize._is_per_channel", "torch.tensor", "abc.ABC.register_buffer"], "observer.MovingAverageMinMaxObserver": [], "fake_quantize.FakeQuantize": ["torch.jit.export"], "fake_quantize.FakeQuantize.calculate_qparams": [], "fake_quantize.FakeQuantize.forward": ["torch.fake_quantize_per_tensor_affine", "abc.ABC.zero_point.copy_", "fake_quantize.FakeQuantize.calculate_qparams", "abc.ABC.scale.copy_", "abc.ABC.scale.resize_", "abc.ABC.zero_point.resize_", "torch.fake_quantize_per_channel_affine"], "abc.ABC.scale.resize_": [], "abc.ABC.zero_point.resize_": [], "abc.ABC.scale.copy_": [], "abc.ABC.zero_point.copy_": [], "fake_quantize.FakeQuantize.extra_repr": [], "fake_quantize.FakeQuantize._save_to_state_dict": ["<builtin>.super"], "fake_quantize.FakeQuantize._load_from_state_dict": ["<builtin>.super", "abc.ABC.zero_point.copy_", "abc.ABC.scale.copy_", "abc.ABC.scale.resize_", "abc.ABC.zero_point.resize_", "torch.jit.is_scripting"], "fake_quantize.FixedQParamsFakeQuantize.__init__": ["<builtin>.super", "fake_quantize._is_per_tensor", "<builtin>.str", "torch.tensor", "abc.ABC.register_buffer"], "fake_quantize.FixedQParamsFakeQuantize.forward": ["torch.fake_quantize_per_tensor_affine"], "fake_quantize.FixedQParamsFakeQuantize": ["torch.jit.export"], "fake_quantize.FixedQParamsFakeQuantize.calculate_qparams": [], "fake_quantize.FixedQParamsFakeQuantize.extra_repr": [], "fake_quantize.FusedMovingAvgObsFakeQuantize.__init__": ["<builtin>.super", "fake_quantize._is_symmetric_quant", "<builtin>.isinstance", "torch.tensor", "abc.ABC.register_buffer"], "fake_quantize.FusedMovingAvgObsFakeQuantize": ["torch.jit.export"], "fake_quantize.FusedMovingAvgObsFakeQuantize.calculate_qparams": [], "fake_quantize.FusedMovingAvgObsFakeQuantize.extra_repr": [], "fake_quantize.FusedMovingAvgObsFakeQuantize.forward": ["torch.fused_moving_avg_obs_fake_quant"], "torch.fused_moving_avg_obs_fake_quant": [], "fake_quantize._is_fake_quant_script_module": ["<builtin>.isinstance", "re.sub"], "fake_quantize.disable_fake_quant": ["<builtin>.isinstance", "fake_quantize._is_fake_quant_script_module"], "fake_quantize.enable_fake_quant": ["<builtin>.isinstance", "fake_quantize._is_fake_quant_script_module"], "fake_quantize.disable_observer": ["<builtin>.isinstance", "fake_quantize._is_fake_quant_script_module"], "fake_quantize.enable_observer": ["<builtin>.isinstance", "fake_quantize._is_fake_quant_script_module"], "fuser_method_mappings": [], "fuser_method_mappings.fuse_conv_bn": ["<builtin>.NotImplementedError", "torch.nn.utils.fuse_conv_bn_eval", "<builtin>.type"], "torch.nn.utils.fuse_conv_bn_eval": [], "fuser_method_mappings.fuse_conv_bn_relu": ["<builtin>.NotImplementedError", "<builtin>.type", "torch.nn.utils.fusion.fuse_conv_bn_eval"], "fuser_method_mappings.fuse_linear_bn": ["<builtin>.Exception", "torch.nn.utils.fusion.fuse_linear_bn_eval"], "torch.nn.utils.fusion.fuse_linear_bn_eval": [], "fuse_modules": [], "fuse_modules._get_module": ["<builtin>.getattr"], "fuse_modules._set_module": ["<builtin>.getattr", "<builtin>.setattr"], "fuse_modules.fuse_known_modules": ["<builtin>.range", "<builtin>.NotImplementedError", "<builtin>.type", "<builtin>.tuple", "torch.nn.Identity", "<builtin>.len", "fuser_method_mappings.get_fuser_method"], "fuse_modules._fuse_modules": ["fuse_modules._set_module", "fuse_modules.fuse_known_modules", "fuse_modules._get_module", "<builtin>.enumerate"], "fuse_modules.fuse_modules": ["<builtin>.isinstance", "<builtin>.all", "copy.deepcopy", "fuse_modules._fuse_modules"], "observer._PartialWrapper.__init__": [], "observer._PartialWrapper.__call__": [], "observer._PartialWrapper.__repr__": [], "observer._PartialWrapper.with_args": ["observer._with_args"], "observer._with_args": ["observer._PartialWrapper.__init__", "functools.partial"], "observer._PartialWrapper.with_callable_args": [], "observer._with_callable_args": ["observer._PartialWrapper.with_callable_args", "observer._PartialWrapper.__init__", "functools.partial"], "abc.ABCMeta": [], "observer.ObserverBase": ["abc.abstractmethod", "<builtin>.classmethod"], "observer.ObserverBase.forward": [], "observer.ObserverBase.calculate_qparams": [], "observer._ObserverBase.__init__": ["torch.nn.factory_kwargs", "warnings.warn", "utils.calculate_qmin_qmax", "<builtin>.super", "observer._ObserverBase._validate_qmin_qmax", "torch.finfo", "torch.tensor", "torch.nn.Module.register_buffer"], "torch.nn.factory_kwargs": [], "observer._ObserverBase._validate_qmin_qmax": [], "utils.calculate_qmin_qmax": [], "observer._ObserverBase._load_from_state_dict": ["torch.tensor", "<builtin>.super", "torch.finfo"], "observer._ObserverBase": ["torch.jit.export"], "observer._ObserverBase._calculate_qparams": ["utils.check_min_max_valid", "torch.zeros", "<builtin>.float", "torch.round", "torch.ones", "<builtin>.len", "torch.clamp", "torch.tensor", "torch.where", "torch.min", "torch.nn.Module.quant_min.size", "torch.nn.Module.quant_min.new_full", "<builtin>.int", "torch.max", "torch.ones_like", "torch.zeros_like"], "torch.nn.Module.quant_min.size": [], "torch.nn.Module.quant_min.new_full": [], "observer._ObserverBase.reset_min_max_vals": ["<builtin>.NotImplementedError"], "observer.MinMaxObserver.__init__": ["torch.nn.factory_kwargs", "<builtin>.float", "<builtin>.super", "<builtin>.NotImplementedError", "torch.tensor", "torch.nn.Module.register_buffer"], "observer.MinMaxObserver.forward": ["torch.max", "torch.min", "torch._aminmax"], "torch._aminmax": [], "observer.MinMaxObserver": ["torch.jit.export"], "observer.MinMaxObserver.calculate_qparams": ["observer._ObserverBase._calculate_qparams"], "observer.MinMaxObserver.extra_repr": [], "observer.MinMaxObserver.reset_min_max_vals": ["torch.tensor", "<builtin>.float"], "observer.MovingAverageMinMaxObserver.__init__": ["<builtin>.super"], "observer.MovingAverageMinMaxObserver.forward": ["<builtin>.float", "torch._aminmax"], "observer.PerChannelMinMaxObserver.__init__": ["torch.nn.factory_kwargs", "<builtin>.super", "<builtin>.NotImplementedError", "torch.tensor", "torch.nn.Module.register_buffer"], "observer.PerChannelMinMaxObserver.forward": ["observer.PerChannelMinMaxObserver._forward"], "observer.PerChannelMinMaxObserver._forward": ["<builtin>.range", "<builtin>.len", "torch._aminmax", "torch.min", "torch.max", "torch.flatten"], "observer.PerChannelMinMaxObserver.calculate_qparams": ["observer._ObserverBase._calculate_qparams"], "observer.PerChannelMinMaxObserver.extra_repr": [], "observer.PerChannelMinMaxObserver._load_from_state_dict": ["<builtin>.super", "warnings.warn", "torch.jit.is_scripting"], "observer.PerChannelMinMaxObserver._load_from_state_dict_script": ["observer.PerChannelMinMaxObserver._load_from_state_dict"], "observer.PerChannelMinMaxObserver.reset_min_max_vals": ["torch.tensor"], "observer.MovingAveragePerChannelMinMaxObserver.__init__": ["<builtin>.super"], "observer.MovingAveragePerChannelMinMaxObserver.forward": ["<builtin>.len", "<builtin>.range", "torch.flatten", "torch._aminmax"], "observer.HistogramObserver.__init__": ["torch.nn.factory_kwargs", "torch.iinfo", "torch.zeros", "<builtin>.float", "<builtin>.super", "torch.tensor", "torch.nn.Module.register_buffer"], "observer.HistogramObserver._get_norm": [], "observer.HistogramObserver._compute_quantization_error": ["torch.zeros", "torch.arange", "torch.ones", "torch.clamp", "torch.tensor", "observer.HistogramObserver._get_norm"], "observer.HistogramObserver._non_linear_param_search": ["<builtin>.float", "torch.sum", "torch.nn.Module.histogram.size", "observer.HistogramObserver._compute_quantization_error", "torch.cumsum"], "torch.nn.Module.histogram.size": [], "observer.HistogramObserver._adjust_min_max": ["torch.ceil", "torch.round", "<builtin>.int"], "observer.HistogramObserver._combine_histograms": ["torch.zeros", "torch.cumsum", "torch.nn.Module.histogram.repeat_interleave"], "torch.nn.Module.histogram.repeat_interleave": [], "observer.HistogramObserver.forward": ["observer.HistogramObserver._combine_histograms", "<builtin>.float", "observer.HistogramObserver._adjust_min_max", "torch.nn.Module.histogram.copy_", "torch._aminmax", "torch.nn.Module.histogram.detach_", "torch.min", "<builtin>.int", "torch.max", "torch.histc"], "torch.histc": [], "torch.nn.Module.histogram.detach_": [], "torch.nn.Module.histogram.copy_": [], "observer.HistogramObserver": ["torch.jit.export"], "observer.HistogramObserver.calculate_qparams": ["<builtin>.float", "warnings.warn", "<builtin>.len", "observer._ObserverBase._calculate_qparams", "torch.tensor", "observer.HistogramObserver._non_linear_param_search"], "observer.HistogramObserver._save_to_state_dict": ["<builtin>.super"], "observer.HistogramObserver._load_from_state_dict": ["<builtin>.float", "<builtin>.setattr", "torch.Size", "<builtin>.super", "torch.tensor"], "observer.PlaceholderObserver.__init__": ["<builtin>.super"], "observer.PlaceholderObserver.forward": [], "observer.PlaceholderObserver": ["torch.jit.export"], "observer.PlaceholderObserver.calculate_qparams": ["<builtin>.Exception"], "observer.RecordingObserver.__init__": ["<builtin>.super"], "observer.RecordingObserver.forward": [], "observer.RecordingObserver": ["torch.jit.export"], "observer.RecordingObserver.calculate_qparams": ["<builtin>.Exception"], "observer.RecordingObserver.get_tensor_value": [], "observer.NoopObserver.__init__": ["<builtin>.super"], "observer.NoopObserver.forward": [], "observer.NoopObserver": ["torch.jit.export"], "observer.NoopObserver.calculate_qparams": ["<builtin>.Exception"], "observer._is_observer_script_module": ["re.sub", "<builtin>.isinstance"], "observer._is_activation_post_process": ["observer._is_observer_script_module", "<builtin>.isinstance"], "observer._is_per_channel_script_obs_instance": ["observer._is_observer_script_module", "<builtin>.isinstance"], "observer.get_observer_state_dict": ["<builtin>.isinstance", "collections.OrderedDict"], "observer.load_observer_state_dict": ["observer._is_activation_post_process", "observer._is_per_channel_script_obs_instance", "<builtin>.Exception"], "qconfig": ["observer.PlaceholderObserver.with_args"], "qconfig.QConfig.__new__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.super"], "qconfig.QConfigDynamic.__new__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.super"], "observer.PlaceholderObserver.with_args": [], "qconfig.get_default_qconfig": ["observer.HistogramObserver.with_args"], "observer.HistogramObserver.with_args": [], "qconfig.get_default_qat_qconfig": ["fake_quantize.FusedMovingAvgObsFakeQuantize.with_args", "fake_quantize.FakeQuantize.with_args"], "fake_quantize.FakeQuantize.with_args": [], "fake_quantize.FusedMovingAvgObsFakeQuantize.with_args": [], "qconfig.assert_valid_qconfig": ["<builtin>.isinstance"], "qconfig.add_module_to_qconfig_obs_ctr": ["qconfig.add_module_to_qconfig_obs_ctr.configure_constructor_to_put_obs_on_module_device", "<builtin>.isinstance"], "qconfig.add_module_to_qconfig_obs_ctr.get_factory_kwargs_based_on_module_device": ["<builtin>.iter", "<builtin>.next", "<builtin>.isinstance", "<builtin>.len"], "qconfig.add_module_to_qconfig_obs_ctr.configure_constructor_to_put_obs_on_module_device": [], "quantization_mappings": [], "quantization_mappings.no_observer_set": ["<builtin>.set"], "quantization_mappings.get_default_static_quant_module_mappings": ["copy.deepcopy"], "quantization_mappings.get_default_dynamic_quant_module_mappings": [], "quantization_mappings.get_default_qconfig_propagation_list": ["<builtin>.set", "copy.deepcopy"], "quantization_mappings.get_default_compare_output_module_list": ["<builtin>.set", "copy.deepcopy"], "quantization_mappings.get_default_float_to_quantized_operator_mappings": ["copy.deepcopy"], "quantization_mappings._get_special_act_post_process": ["<builtin>.type"], "quantization_mappings._has_special_act_post_process": ["<builtin>.type"], "quantize": [], "quantize._propagate_qconfig_helper": ["torch.quantization.qconfig.assert_valid_qconfig", "quantize._propagate_qconfig_helper", "<builtin>.getattr", "quantization_mappings.get_default_qconfig_propagation_list", "<builtin>.type", "qconfig.add_module_to_qconfig_obs_ctr"], "torch.quantization.qconfig.assert_valid_qconfig": [], "quantize.propagate_qconfig_": ["quantize._propagate_qconfig_helper"], "quantize._observer_forward_hook": [], "quantize.register_activation_post_process_hook": ["<builtin>.hasattr"], "quantize.add_observer_": ["quantization_mappings._get_special_act_post_process", "<builtin>.next", "quantize.add_observer_", "quantization_mappings.no_observer_set", "quantize.add_observer_.get_activation_post_process", "<builtin>.isinstance", "quantization_mappings._has_special_act_post_process", "<builtin>.len", "quantize.get_unique_devices_", "quantization_mappings.get_default_qconfig_propagation_list", "quantize.add_observer_.insert_activation_post_process", "<builtin>.setattr", "<builtin>.type", "quantize.add_observer_.needs_observation", "<builtin>.iter"], "quantize.get_unique_devices_": [], "quantize.add_observer_.get_activation_post_process": [], "quantize.add_observer_.needs_observation": ["<builtin>.hasattr"], "quantize.add_observer_.insert_activation_post_process": ["quantize.add_observer_.needs_observation", "quantize.add_observer_.get_activation_post_process", "quantize.register_activation_post_process_hook", "<builtin>.isinstance"], "quantize.add_quant_dequant": ["quantize.add_quant_dequant", "<builtin>.len", "stubs.QuantWrapper", "<builtin>.hasattr"], "stubs.QuantWrapper": [], "quantize.prepare": ["quantize.propagate_qconfig_", "<builtin>.any", "quantize.add_observer_", "torch._C._log_api_usage_once", "copy.deepcopy", "quantization_mappings.get_default_qconfig_propagation_list", "warnings.warn", "<builtin>.hasattr"], "quantize._remove_activation_post_process": ["<builtin>.set", "quantize.is_activation_post_process", "<builtin>.hasattr", "<builtin>.delattr"], "quantize.quantize": ["quantize.prepare", "copy.deepcopy", "torch._C._log_api_usage_once", "quantize.convert", "quantization_mappings.get_default_static_quant_module_mappings"], "quantize.quantize_dynamic": ["<builtin>.ValueError", "quantize.propagate_qconfig_", "<builtin>.str", "<builtin>.dict", "<builtin>.zip", "torch._C._log_api_usage_once", "copy.deepcopy", "quantize.convert", "<builtin>.isinstance", "itertools.repeat", "<builtin>.RuntimeError", "quantization_mappings.get_default_dynamic_quant_module_mappings"], "quantize.prepare_qat": ["quantize.prepare", "quantize.propagate_qconfig_", "torch._C._log_api_usage_once", "copy.deepcopy", "quantize.convert", "<builtin>.set", "quantization_mappings.get_default_qat_module_mappings"], "quantize.quantize_qat": ["quantize.prepare_qat", "torch._C._log_api_usage_once", "copy.deepcopy", "quantize.convert"], "quantize._convert": ["copy.deepcopy", "<builtin>.isinstance", "quantize._convert", "quantize.swap_module", "<builtin>.type", "quantization_mappings.get_default_static_quant_module_mappings"], "quantize.swap_module": ["<builtin>.next", "<builtin>.len", "quantize.get_unique_devices_", "<builtin>.hasattr", "<builtin>.type", "<builtin>.iter"], "quantize.get_observer_dict": ["quantize.get_observer_dict.get_prefix", "<builtin>.hasattr", "quantize.get_observer_dict"], "quantize.get_observer_dict.get_prefix": [], "quantize_fx": [], "quantize_fx._check_is_graph_module": ["<builtin>.str", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "quantize_fx._swap_ff_with_fxff": ["<builtin>.isinstance", "torch.nn.quantized.FXFloatFunctional", "quantize_fx._swap_ff_with_fxff"], "torch.nn.quantized.FXFloatFunctional": [], "quantize_fx._fuse_fx": ["quantize_fx._check_is_graph_module", "fx.Fuser"], "fx.Fuser": [], "quantize_fx.Scope.__init__": ["<builtin>.super"], "quantize_fx.ScopeContextManager.__init__": ["<builtin>.type", "<builtin>.super"], "quantize_fx.ScopeContextManager.__enter__": [], "quantize_fx.ScopeContextManager.__exit__": [], "quantize_fx.QuantizationTracer.__init__": ["quantize_fx.Scope.__init__", "<builtin>.super"], "quantize_fx.QuantizationTracer.is_leaf_module": ["<builtin>.type", "<builtin>.isinstance"], "quantize_fx.QuantizationTracer.call_module": ["<builtin>.super", "quantize_fx.ScopeContextManager.__init__", "torch.fx._symbolic_trace.Tracer.path_of_module"], "torch.fx._symbolic_trace.Tracer.path_of_module": [], "quantize_fx.QuantizationTracer.create_node": ["<builtin>.super"], "quantize_fx._prepare_fx": ["torch.fx._symbolic_trace.Tracer.trace", "quantize_fx._swap_ff_with_fxff", "torch.fx.GraphModule", "fx.prepare", "fx.qconfig_utils.check_is_valid_qconfig_dict", "quantize_fx.QuantizationTracer.__init__", "quantize_fx._fuse_fx", "<builtin>.setattr", "<builtin>.getattr", "fx.utils.get_custom_module_class_keys", "fx.qconfig_utils.check_is_valid_prepare_custom_config_dict"], "fx.qconfig_utils.check_is_valid_qconfig_dict": [], "fx.qconfig_utils.check_is_valid_prepare_custom_config_dict": [], "fx.utils.get_custom_module_class_keys": [], "torch.fx._symbolic_trace.Tracer.trace": [], "fx.prepare": [], "quantize_fx._prepare_standalone_module_fx": ["quantize_fx._prepare_fx"], "quantize_fx.fuse_fx": ["<builtin>.set", "fx.qconfig_utils.check_is_valid_fuse_custom_config_dict", "torch._C._log_api_usage_once", "quantize_fx._fuse_fx", "<builtin>.setattr", "<builtin>.getattr", "torch.fx.symbolic_trace"], "fx.qconfig_utils.check_is_valid_fuse_custom_config_dict": [], "quantize_fx.prepare_fx": ["torch._C._log_api_usage_once", "quantize_fx._prepare_fx"], "quantize_fx.prepare_qat_fx": ["torch._C._log_api_usage_once", "quantize_fx._prepare_fx"], "quantize_fx._convert_fx": ["fx.qconfig_utils.check_is_valid_convert_custom_config_dict", "quantize_fx._check_is_graph_module", "<builtin>.setattr", "<builtin>.getattr", "fx.convert"], "fx.qconfig_utils.check_is_valid_convert_custom_config_dict": [], "fx.convert": [], "quantize_fx.convert_fx": ["torch._C._log_api_usage_once", "quantize_fx._convert_fx"], "quantize_fx._convert_standalone_module_fx": ["quantize_fx._convert_fx"], "quantize_jit": [], "quantize_jit._check_is_script_module": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.str", "<builtin>.ValueError"], "quantize_jit._check_forward_method": ["<builtin>.ValueError"], "quantize_jit.script_qconfig": ["qconfig.QConfig", "torch.jit.script"], "qconfig.QConfig": [], "quantize_jit.script_qconfig_dict": ["quantize_jit.script_qconfig"], "quantize_jit.fuse_conv_bn_jit": ["torch._C._log_api_usage_once", "torch.jit._recursive.wrap_cpp_module", "torch._C._jit_pass_fold_convbn"], "torch._C._jit_pass_fold_convbn": [], "quantize_jit._prepare_jit": ["quantize_jit.fuse_conv_bn_jit", "<builtin>.ValueError", "<builtin>.all", "torch._C._jit_pass_insert_observers", "torch.jit._recursive.wrap_cpp_module", "<builtin>.isinstance", "quantize_jit._check_is_script_module", "quantize_jit._check_forward_method", "quantize_jit.script_qconfig_dict"], "torch._C._jit_pass_insert_observers": [], "quantize_jit.prepare_jit": ["torch._C._log_api_usage_once", "quantize_jit._prepare_jit"], "quantize_jit.prepare_dynamic_jit": ["torch._C._log_api_usage_once", "quantize_jit._prepare_jit"], "quantize_jit._convert_jit": ["<builtin>.all", "torch.jit._recursive.wrap_cpp_module", "torch._C._jit_pass_quant_finalize", "torch._C._jit_pass_dce", "torch._C._jit_pass_constant_propagation", "quantize_jit._check_is_script_module", "torch._C._jit_pass_insert_quant_dequant"], "torch._C._jit_pass_insert_quant_dequant": [], "torch._C._jit_pass_quant_finalize": [], "quantize_jit.convert_jit": ["torch._C._log_api_usage_once", "quantize_jit._convert_jit"], "quantize_jit.convert_dynamic_jit": ["torch._C._log_api_usage_once", "quantize_jit._convert_jit"], "quantize_jit._quantize_jit": ["quantize_jit.convert_dynamic_jit", "quantize_jit.convert_jit", "torch._C._jit_pass_dce", "quantize_jit.prepare_jit", "torch._C._jit_pass_constant_propagation", "quantize_jit.prepare_dynamic_jit"], "quantize_jit.quantize_jit": ["torch._C._log_api_usage_once", "quantize_jit._quantize_jit"], "quantize_jit.quantize_dynamic_jit": ["torch._C._log_api_usage_once", "quantize_jit._quantize_jit"], "quant_type": [], "quant_type.quant_type_to_str": [], "stubs": [], "stubs.QuantStub.__init__": ["<builtin>.super"], "stubs.QuantStub.forward": [], "stubs.DeQuantStub.__init__": ["<builtin>.super"], "stubs.DeQuantStub.forward": [], "stubs.QuantWrapper.__init__": ["stubs.QuantStub.__init__", "torch.nn.Module.add_module", "<builtin>.hasattr", "torch.nn.Module.train", "stubs.DeQuantStub.__init__", "<builtin>.super"], "torch.nn.Module.train": [], "stubs.QuantWrapper.forward": ["torch.nn.Module.quant", "torch.nn.Module.module", "torch.nn.Module.dequant"], "torch.nn.Module.quant": [], "torch.nn.Module.module": [], "torch.nn.Module.dequant": [], "utils.get_quant_type": ["<builtin>.hasattr", "<builtin>.Exception"], "_correct_bias": [], "_correct_bias.get_module": ["<builtin>.dict"], "_correct_bias.parent_child_names": ["<builtin>.len"], "_correct_bias.get_param": ["<builtin>.callable", "<builtin>.getattr"], "_correct_bias.MeanShadowLogger.__init__": ["<builtin>.super"], "_correct_bias.MeanShadowLogger.forward": [], "_correct_bias.MeanShadowLogger.clear": [], "_correct_bias.bias_correction": ["torch.quantization._numeric_suite.get_logger_dict", "torch.mean", "<builtin>.list", "torch.quantization._numeric_suite.prepare_model_with_stubs", "<builtin>.range", "_correct_bias.get_param", "<builtin>.type", "_correct_bias.parent_child_names", "_correct_bias.get_module", "<builtin>.isinstance"], "torch.quantization._numeric_suite.prepare_model_with_stubs": [], "torch.quantization._numeric_suite.get_logger_dict": [], "torch.mean": [], "_equalize.set_module_weight": ["torch.nn.Parameter", "<builtin>.type"], "_equalize.set_module_bias": ["torch.nn.Parameter", "<builtin>.type"], "_equalize.get_module_weight": ["<builtin>.type"], "_equalize.get_module_bias": ["<builtin>.type"], "_equalize.max_over_ndim": [], "_equalize.min_over_ndim": [], "_equalize.channel_range": ["_equalize.max_over_ndim", "_equalize.min_over_ndim", "<builtin>.list", "<builtin>.range"], "_equalize.cross_layer_equalization": ["_equalize.get_module_bias", "<builtin>.TypeError", "torch.reciprocal", "_equalize.set_module_weight", "torch.sqrt", "_equalize.channel_range", "torch.reshape", "<builtin>.type", "_equalize.get_module_weight", "<builtin>.ValueError", "_equalize.set_module_bias"], "_equalize.equalize": ["copy.deepcopy", "_equalize.converged", "_equalize.cross_layer_equalization"], "_equalize.converged": ["torch.tensor", "torch.norm", "<builtin>.bool", "_equalize.get_module_weight", "<builtin>.ValueError"], "_learnable_fake_quantize": [], "_learnable_fake_quantize._LearnableFakeQuantize.__init__": ["torch.iinfo", "torch.nn.parameter.Parameter", "<builtin>.hasattr", "torch.finfo", "torch.quantization.FakeQuantizeBase.register_buffer", "torch.log2", "<builtin>.isinstance", "torch.tensor", "<builtin>.int", "<builtin>.super"], "torch.quantization.FakeQuantizeBase.register_buffer": [], "torch.log2": [], "_learnable_fake_quantize._LearnableFakeQuantize": ["torch.jit.export"], "_learnable_fake_quantize._LearnableFakeQuantize.enable_param_learning": ["_learnable_fake_quantize._LearnableFakeQuantize.toggle_fake_quant", "_learnable_fake_quantize._LearnableFakeQuantize.toggle_observer_update", "_learnable_fake_quantize._LearnableFakeQuantize.toggle_qparam_learning"], "_learnable_fake_quantize._LearnableFakeQuantize.toggle_qparam_learning": ["<builtin>.int"], "_learnable_fake_quantize._LearnableFakeQuantize.toggle_fake_quant": ["<builtin>.int"], "_learnable_fake_quantize._LearnableFakeQuantize.toggle_observer_update": ["<builtin>.int"], "_learnable_fake_quantize._LearnableFakeQuantize.enable_static_estimate": ["_learnable_fake_quantize._LearnableFakeQuantize.toggle_fake_quant", "_learnable_fake_quantize._LearnableFakeQuantize.toggle_observer_update", "_learnable_fake_quantize._LearnableFakeQuantize.toggle_qparam_learning"], "_learnable_fake_quantize._LearnableFakeQuantize.enable_static_observation": ["_learnable_fake_quantize._LearnableFakeQuantize.toggle_fake_quant", "_learnable_fake_quantize._LearnableFakeQuantize.toggle_observer_update", "_learnable_fake_quantize._LearnableFakeQuantize.toggle_qparam_learning"], "_learnable_fake_quantize._LearnableFakeQuantize.enable_observer": ["_learnable_fake_quantize._LearnableFakeQuantize.toggle_observer_update"], "_learnable_fake_quantize._LearnableFakeQuantize.observe_quant_params": ["<builtin>.print"], "_learnable_fake_quantize._LearnableFakeQuantize.calculate_qparams": [], "_learnable_fake_quantize._LearnableFakeQuantize.forward": ["torch._fake_quantize_learnable_per_channel_affine", "torch._fake_quantize_learnable_per_tensor_affine"], "_numeric_suite": [], "_numeric_suite._find_match": ["<builtin>.len"], "_numeric_suite.compare_weights": ["_numeric_suite._find_match", "torch._C._log_api_usage_once"], "_numeric_suite._get_logger_dict_helper": ["<builtin>.isinstance", "_numeric_suite._get_logger_dict_helper.get_prefix", "_numeric_suite._get_logger_dict_helper"], "_numeric_suite._get_logger_dict_helper.get_prefix": [], "_numeric_suite.get_logger_dict": ["torch._C._log_api_usage_once", "_numeric_suite._get_logger_dict_helper"], "_numeric_suite.Logger.__init__": ["<builtin>.super"], "_numeric_suite.Logger.forward": [], "_numeric_suite.ShadowLogger.__init__": ["<builtin>.super"], "_numeric_suite.ShadowLogger.forward": ["<builtin>.len"], "_numeric_suite.OutputLogger.__init__": ["<builtin>.super"], "_numeric_suite.OutputLogger.forward": [], "_numeric_suite._convert_tuple_to_list": ["<builtin>.type", "<builtin>.list", "_numeric_suite._convert_tuple_to_list"], "_numeric_suite._dequantize_tensor_list": ["<builtin>.type", "<builtin>.list", "_numeric_suite._dequantize_tensor_list"], "_numeric_suite.Shadow.__init__": ["_numeric_suite.ShadowLogger.__init__", "torch.nn.quantized.DeQuantize", "<builtin>.super"], "_numeric_suite.Shadow.forward": ["_numeric_suite._convert_tuple_to_list", "_numeric_suite._dequantize_tensor_list"], "_numeric_suite.Shadow.add": [], "_numeric_suite.Shadow.add_scalar": [], "_numeric_suite.Shadow.mul": [], "_numeric_suite.Shadow.mul_scalar": [], "_numeric_suite.Shadow.cat": [], "_numeric_suite.Shadow.add_relu": [], "_numeric_suite.prepare_model_with_stubs": ["_numeric_suite.Shadow.__init__", "_numeric_suite.prepare_model_with_stubs", "torch._C._log_api_usage_once", "_numeric_suite._is_identical_module_type", "<builtin>.type"], "_numeric_suite._is_identical_module_type": ["<builtin>.type"], "_numeric_suite.compare_model_stub": ["_numeric_suite.get_logger_dict", "torch._C._log_api_usage_once", "_numeric_suite.prepare_model_with_stubs"], "_numeric_suite.get_matching_activations": ["<builtin>.sorted", "_numeric_suite._find_match", "_numeric_suite.get_logger_dict", "torch._C._log_api_usage_once"], "_numeric_suite.prepare_model_outputs": ["torch.quantization.prepare", "torch.quantization.QConfig", "torch._C._log_api_usage_once", "quantization_mappings.get_default_compare_output_module_list"], "_numeric_suite.compare_model_outputs": ["_numeric_suite.prepare_model_outputs", "torch._C._log_api_usage_once", "_numeric_suite.get_matching_activations", "quantization_mappings.get_default_compare_output_module_list"], "_numeric_suite_fx": [], "_numeric_suite_fx.OutputLogger.__init__": ["<builtin>.super"], "_numeric_suite_fx.OutputLogger.forward": ["<builtin>.isinstance", "<builtin>.len", "torch.nn.Module.stats.append", "torch.nn.Module.stats_rnn.append"], "torch.nn.Module.stats.append": [], "torch.nn.Module.stats_rnn.append": [], "_numeric_suite_fx.OutputLogger.__repr__": [], "_numeric_suite_fx.NSTracer.is_leaf_module": ["<builtin>.isinstance", "<builtin>.super"], "_numeric_suite_fx._extract_weights_one_model": ["torch._C._log_api_usage_once", "ns.weight_utils.extract_weight_from_node"], "ns.weight_utils.extract_weight_from_node": [], "_numeric_suite_fx._extract_weights_impl": ["torch.quantization.ns.graph_matcher.get_matching_subgraph_pairs", "torch._C._log_api_usage_once", "_numeric_suite_fx._extract_weights_one_model", "ns.utils.rekey_logger_info_on_node_name_of_model", "ns.utils.maybe_add_missing_fqns"], "torch.quantization.ns.graph_matcher.get_matching_subgraph_pairs": [], "ns.utils.maybe_add_missing_fqns": [], "ns.utils.rekey_logger_info_on_node_name_of_model": [], "_numeric_suite_fx.extract_weights": ["torch.quantization.quantize_fx.QuantizationTracer.__init__", "torch.quantization.ns.graph_matcher.get_type_a_related_to_b", "torch.fx.GraphModule", "torch.quantization.ns.mappings.get_base_name_to_sets_of_related_ops", "torch._C._log_api_usage_once", "_numeric_suite_fx._extract_weights_impl", "torch.quantization.quantize_fx.QuantizationTracer.trace", "<builtin>.hasattr"], "torch.quantization.ns.mappings.get_base_name_to_sets_of_related_ops": [], "torch.quantization.ns.graph_matcher.get_type_a_related_to_b": [], "torch.quantization.quantize_fx.QuantizationTracer.__init__": [], "torch.quantization.quantize_fx.QuantizationTracer.trace": [], "_numeric_suite_fx._add_loggers_one_model": ["torch._C._log_api_usage_once", "ns.graph_passes.add_loggers_to_model"], "ns.graph_passes.add_loggers_to_model": [], "_numeric_suite_fx._add_loggers_impl": ["_numeric_suite_fx._add_loggers_one_model", "torch.quantization.ns.graph_matcher.get_matching_subgraph_pairs", "torch._C._log_api_usage_once", "ns.utils.get_target_type_str"], "ns.utils.get_target_type_str": [], "_numeric_suite_fx.add_loggers": ["torch.quantization.quantize_fx.QuantizationTracer.__init__", "_numeric_suite_fx._add_loggers_impl", "torch.fx.GraphModule", "torch._C._log_api_usage_once", "torch.quantization.quantize_fx.QuantizationTracer.trace", "<builtin>.hasattr"], "_numeric_suite_fx._extract_logger_info_one_model": ["<builtin>.isinstance", "<builtin>.len", "torch._C._log_api_usage_once"], "_numeric_suite_fx._extract_logger_info_one_model.<lambda1>": [], "_numeric_suite_fx.extract_logger_info": ["ns.utils.rekey_logger_info_on_node_name_of_model", "ns.utils.maybe_add_missing_fqns", "torch._C._log_api_usage_once", "_numeric_suite_fx._extract_logger_info_one_model"], "_numeric_suite_fx._add_shadow_loggers_impl": ["ns.graph_passes.create_a_shadows_b", "torch.quantization.ns.graph_matcher.get_matching_subgraph_pairs", "torch._C._log_api_usage_once"], "ns.graph_passes.create_a_shadows_b": [], "_numeric_suite_fx.add_shadow_loggers": ["torch.quantization.quantize_fx.QuantizationTracer.__init__", "torch.fx.GraphModule", "torch._C._log_api_usage_once", "_numeric_suite_fx._add_shadow_loggers_impl", "torch.quantization.quantize_fx.QuantizationTracer.trace", "<builtin>.hasattr"], "_numeric_suite_fx.extract_shadow_logger_info": ["torch._C._log_api_usage_once", "ns.utils.rekey_logger_info_on_node_name_of_model", "ns.utils.maybe_add_missing_fqns", "_numeric_suite_fx._extract_logger_info_one_model", "<builtin>.dict", "collections.defaultdict"], "_numeric_suite_fx.extend_logger_results_with_comparison": ["<builtin>.zip"], "_asserts": ["_asserts._check_quantized", "_asserts._check_complex_components_individually", "_asserts._check_sparse_coo_members_individually", "_asserts._check_sparse_csr_members_individually"], "_asserts._TestingErrorMeta.amend_msg": ["typing.NamedTuple._replace"], "typing.NamedTuple._replace": [], "_asserts._TestingErrorMeta.to_error": ["typing.NamedTuple.type"], "typing.NamedTuple.type": [], "_asserts._get_default_rtol_and_atol": ["<builtin>.max"], "_asserts._check_complex_components_individually": ["functools.wraps"], "_asserts._check_complex_components_individually.wrapper": ["<builtin>.float", "_asserts._check_values_close", "<builtin>.complex"], "_asserts._check_values_close": ["torch.any", "torch.isclose", "typing.NamedTuple.__init__", "<builtin>.callable", "_asserts._trace_mismatches", "_asserts._make_mismatch_msg"], "_asserts._check_sparse_coo_members_individually": ["functools.wraps"], "_asserts._check_sparse_coo_members_individually.wrapper": ["<builtin>.dict", "functools.partial", "_asserts._check_sparse_csr_members_individually.wrapper", "typing.NamedTuple.__init__"], "_asserts._check_sparse_csr_members_individually.wrapper": ["<builtin>.dict", "functools.partial", "_asserts._check_complex_components_individually.wrapper"], "_asserts._check_sparse_csr_members_individually": ["functools.wraps"], "_asserts._check_quantized": ["functools.wraps"], "_asserts._check_quantized.wrapper": ["_asserts._check_sparse_coo_members_individually.wrapper"], "_asserts._check_supported_tensor": ["typing.NamedTuple.__init__"], "_asserts._check_attributes_equal": ["typing.NamedTuple.__init__"], "_asserts._equalize_attributes": ["torch.promote_types"], "_asserts._trace_mismatches": ["torch.sum", "torch.max", "types.SimpleNamespace", "torch.abs", "_core._unravel_index", "typing.cast"], "_core._unravel_index": ["<builtin>.tuple", "torch.Size", "operator.index", "<builtin>.len"], "types.SimpleNamespace": [], "_asserts._make_mismatch_msg": ["torch.Size", "_asserts._make_mismatch_msg.append_difference", "<builtin>.callable"], "_asserts._make_mismatch_msg.append_difference": [], "torch.isclose": [], "_asserts._check_tensors_close": ["_asserts._check_values_close", "_asserts._check_attributes_equal", "_asserts._equalize_attributes", "_asserts._get_default_rtol_and_atol"], "_asserts._check_pair_close": ["<builtin>.enumerate", "<builtin>.isinstance", "_asserts._TestingErrorMeta.amend_msg", "_asserts._check_pair_close", "_asserts._check_tensors_close"], "_asserts._to_tensor": ["torch.as_tensor", "typing.NamedTuple.__init__", "<builtin>.isinstance", "<builtin>.type", "_asserts._check_supported_tensor"], "_asserts._check_types": ["<builtin>.type", "typing.NamedTuple.__init__", "<builtin>.isinstance"], "_asserts._to_tensor_pair": ["_asserts._check_types", "_asserts._to_tensor", "typing.NamedTuple.__init__"], "_asserts._parse_inputs": ["<builtin>.range", "_asserts._parse_inputs", "<builtin>.set", "typing.NamedTuple.__init__", "<builtin>.isinstance", "_asserts._TestingErrorMeta.amend_msg", "<builtin>.len", "<builtin>.sorted", "_asserts._to_tensor_pair"], "_asserts.assert_close": ["<builtin>.ValueError", "_asserts._parse_inputs", "_asserts._TestingErrorMeta.to_error", "_asserts._check_pair_close", "typing.cast"], "_check_kernel_launches": ["sys.exit", "_check_kernel_launches.check_cuda_kernel_launches", "re.compile"], "_check_kernel_launches.find_matching_paren": ["<builtin>.IndexError", "<builtin>.enumerate"], "_check_kernel_launches.should_exclude_file": [], "_check_kernel_launches.check_code_for_cuda_kernel_launches": ["<builtin>.print", "_check_kernel_launches.find_matching_paren", "<builtin>.enumerate"], "_check_kernel_launches.check_file": ["_check_kernel_launches.check_code_for_cuda_kernel_launches", "_check_kernel_launches.should_exclude_file", "<builtin>.open"], "_check_kernel_launches.check_cuda_kernel_launches": ["<builtin>.print", "os.path.realpath", "os.path.join", "os.walk", "_check_kernel_launches.check_file", "os.path.dirname", "<builtin>.len"], "_core": [], "_core.is_integral": ["_core.get_all_complex_dtypes", "_core.get_all_dtypes"], "_core.get_all_dtypes": ["_core.get_all_int_dtypes", "_core.get_all_fp_dtypes", "_core.get_all_complex_dtypes"], "_core.get_all_complex_dtypes": [], "_core.is_quantized": [], "torch.isnan": [], "_core._compare_scalars_internal._helper": ["<builtin>.abs", "math.isinf"], "cmath.isnan": [], "_core.assert_allclose": ["<builtin>.ValueError", "_core._get_default_tolerance", "torch.tensor", "_core._compare_tensors_internal", "<builtin>.isinstance", "<builtin>.AssertionError"], "_core._get_default_tolerance": ["_core._get_default_tolerance", "<builtin>.str", "<builtin>.max"], "_core.make_non_contiguous": ["<builtin>.len", "<builtin>.list", "torch.Size", "<builtin>.range", "random.randint"], "_core._validate_dtypes": ["<builtin>.isinstance"], "_core._dispatch_dtypes.__add__": ["<builtin>.isinstance"], "_core.empty_types": [], "_core.floating_types": [], "_core.floating_types_and_half": [], "_core.floating_types_and": ["_core._validate_dtypes"], "_core.floating_and_complex_types": [], "_core.floating_and_complex_types_and": ["_core._validate_dtypes"], "_core.double_types": [], "_core.integral_types": [], "_core.integral_types_and": ["_core._validate_dtypes"], "_core.all_types": [], "_core.all_types_and": ["_core._validate_dtypes"], "_core.complex_types": [], "_core.all_types_and_complex": [], "_core.all_types_and_complex_and": ["_core._validate_dtypes"], "_core.all_types_and_half": [], "_core.get_all_int_dtypes": [], "_core.get_all_fp_dtypes": [], "_core.get_all_math_dtypes": ["_core.get_all_int_dtypes", "_core.get_all_fp_dtypes", "_core.get_all_complex_dtypes"], "_core.get_all_device_types": ["torch.cuda.is_available"], "_deprecated": ["_deprecated.warn_deprecated.outer_wrapper", "_deprecated.warn_deprecated"], "_deprecated.warn_deprecated": [], "_deprecated.warn_deprecated.outer_wrapper": ["functools.wraps"], "_deprecated.warn_deprecated.outer_wrapper.inner_wrapper": ["torch.randn", "torch.rand", "warnings.warn"], "bundled_inputs": ["typing.TypeVar"], "bundled_inputs.bundle_inputs": ["torch._C._hack_do_not_use_clone_module_with_class", "bundled_inputs.augment_many_model_functions_with_bundled_inputs", "<builtin>.isinstance", "bundled_inputs.augment_model_with_bundled_inputs", "<builtin>.Exception", "torch.jit._recursive.wrap_cpp_module", "bundled_inputs._get_bundled_inputs_attributes_and_methods"], "bundled_inputs._get_bundled_inputs_attributes_and_methods": ["<builtin>.hasattr"], "torch._C._hack_do_not_use_clone_module_with_class": [], "bundled_inputs.augment_many_model_functions_with_bundled_inputs": ["torch._C.TupleType", "bundled_inputs._inflate_expr", "<builtin>.tuple", "<builtin>.enumerate", "<builtin>.len", "<builtin>.setattr", "<builtin>.Exception", "textwrap.dedent", "<builtin>.repr", "<builtin>.hasattr", "<builtin>.TypeError", "<builtin>.isinstance", "torch._C.ListType"], "bundled_inputs.augment_model_with_bundled_inputs": ["<builtin>.hasattr", "bundled_inputs.augment_many_model_functions_with_bundled_inputs", "<builtin>.isinstance", "<builtin>.Exception"], "bundled_inputs._inflate_expr": ["<builtin>.isinstance", "<builtin>.Exception"], "bundled_inputs.bundle_randn": ["typing.NamedTuple.__init__", "torch.zeros"], "bundled_inputs.bundle_large_tensor": ["typing.NamedTuple.__init__"], "checkpoint.detach_variable": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.RuntimeError", "<builtin>.tuple"], "checkpoint.check_backward_validity": ["<builtin>.any", "<builtin>.isinstance", "warnings.warn"], "checkpoint.get_device_states": ["<builtin>.isinstance", "<builtin>.list", "torch.cuda.device", "torch.cuda.get_rng_state", "<builtin>.set"], "checkpoint.set_device_states": ["torch.cuda.set_rng_state", "torch.cuda.device", "<builtin>.zip"], "checkpoint.CheckpointFunction.forward": ["torch.no_grad", "checkpoint.check_backward_validity", "checkpoint.get_device_states", "<builtin>.enumerate", "torch.get_rng_state", "torch.is_autocast_enabled", "torch.is_tensor"], "checkpoint.CheckpointFunction.backward": ["torch.set_rng_state", "torch.is_tensor", "checkpoint.detach_variable", "torch.random.fork_rng", "<builtin>.isinstance", "torch.enable_grad", "torch.cuda.amp.autocast", "checkpoint.set_device_states", "torch.autograd.backward", "<builtin>.len", "<builtin>.list", "<builtin>.enumerate", "<builtin>.range", "torch.autograd._is_checkpoint_valid", "<builtin>.RuntimeError", "<builtin>.tuple"], "torch.autograd._is_checkpoint_valid": [], "checkpoint.checkpoint_sequential": ["checkpoint.checkpoint", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.len", "<builtin>.list", "checkpoint.checkpoint_sequential.run_function.forward", "checkpoint.checkpoint_sequential.run_function", "<builtin>.range"], "checkpoint.checkpoint_sequential.run_function": [], "checkpoint.checkpoint_sequential.run_function.forward": ["<builtin>.range"], "collect_env": ["collections.namedtuple", "collect_env.main"], "collect_env.run": ["subprocess.Popen", "collect_env.get_platform", "locale.getpreferredencoding"], "collect_env.get_platform": ["sys.platform.startswith"], "collect_env.run_and_read_all": ["collect_env.run"], "collect_env.run_and_parse_first_match": ["re.search", "collect_env.run"], "collect_env.run_and_return_first_line": [], "collect_env.get_conda_packages": ["os.path.join", "re.sub", "collect_env.run_and_read_all", "re.compile", "os.environ.get", "collect_env.get_platform"], "collect_env.get_gcc_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_clang_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_cmake_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_nvidia_driver_version": ["collect_env.get_platform", "collect_env.run_and_parse_first_match", "collect_env.get_nvidia_smi"], "collect_env.get_nvidia_smi": ["os.environ.get", "collect_env.get_platform", "os.path.join", "os.path.exists"], "collect_env.get_gpu_info": ["torch.cuda.is_available", "<builtin>.hasattr", "torch.cuda.get_device_name", "re.sub", "re.compile", "collect_env.run", "collect_env.get_nvidia_smi", "collect_env.get_platform"], "torch.cuda.get_device_name": [], "collect_env.get_running_cuda_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_cudnn_version": ["os.path.join", "<builtin>.len", "<builtin>.list", "collect_env.run", "os.path.realpath", "<builtin>.sorted", "os.environ.get", "collect_env.get_platform", "<builtin>.set", "os.path.isfile"], "collect_env.get_mac_version": ["collect_env.run_and_parse_first_match"], "collect_env.get_windows_version": ["collect_env.run_and_read_all", "os.environ.get", "os.path.join"], "collect_env.get_lsb_version": ["collect_env.run_and_parse_first_match"], "collect_env.check_release_file": ["collect_env.run_and_parse_first_match"], "collect_env.get_os": ["collect_env.get_mac_version", "collect_env.check_release_file", "collect_env.get_windows_version", "platform.machine", "collect_env.get_platform", "collect_env.get_lsb_version"], "collect_env.get_python_platform": ["platform.platform"], "platform.platform": [], "collect_env.get_libc_version": ["collect_env.get_platform", "platform.libc_ver"], "platform.libc_ver": [], "collect_env.get_pip_packages": ["<builtin>.len", "collect_env.get_pip_packages.run_with_pip"], "collect_env.get_pip_packages.run_with_pip": ["collect_env.run_and_read_all", "os.environ.get", "collect_env.get_platform", "os.path.join"], "collect_env.get_cachingallocator_config": ["os.environ.get"], "collect_env.get_env_info": ["<builtin>.hasattr", "sys.version.replace", "torch._C._show_config", "collect_env.get_pip_packages", "collect_env.get_cmake_version", "collect_env.get_os", "collect_env.get_python_platform", "collect_env.get_cudnn_version", "sys.maxsize.bit_length", "collect_env.get_running_cuda_version", "torch.cuda.is_available", "collect_env.get_libc_version", "collect_env.get_clang_version", "collect_env.get_nvidia_driver_version", "<builtin>.str", "collect_env.get_conda_packages", "collect_env.get_gcc_version", "collect_env.get_gpu_info", "collect_env.get_cachingallocator_config"], "sys.version.replace": [], "sys.maxsize.bit_length": [], "collect_env.pretty_str": ["torch.cuda.is_available", "collect_env.pretty_str.replace_bools", "collect_env.pretty_str.prepend", "collect_env.pretty_str.replace_if_empty", "collect_env.pretty_str.replace_nones", "collect_env.pretty_str.maybe_start_on_next_line", "<builtin>.all"], "collect_env.pretty_str.replace_nones": [], "collect_env.pretty_str.replace_bools": [], "collect_env.pretty_str.prepend": [], "collect_env.pretty_str.replace_if_empty": ["<builtin>.len"], "collect_env.pretty_str.maybe_start_on_next_line": ["<builtin>.len"], "collect_env.get_pretty_env_info": ["collect_env.pretty_str", "collect_env.get_env_info"], "collect_env.main": ["datetime.datetime.fromtimestamp", "<builtin>.hasattr", "<builtin>.print", "os.path.join", "os.path.exists", "collect_env.get_pretty_env_info", "os.listdir", "<builtin>.max", "os.path.getctime"], "os.path.getctime": [], "cpp_extension": ["<builtin>.tuple", "_cpp_extension_versioner.ExtensionVersioner", "cpp_extension._find_rocm_home", "torch.version.hip.split", "os.path.dirname", "os.path.join", "os.getenv", "<builtin>.int", "cpp_extension._find_cuda_home", "re.compile", "os.environ.get", "os.path.abspath", "os.path.exists", "cpp_extension._join_rocm_home"], "cpp_extension._nt_quote_args": [], "cpp_extension._find_cuda_home": ["glob.glob", "torch.cuda.is_available", "os.path.dirname", "os.path.exists", "os.environ.get", "subprocess.check_output", "<builtin>.print", "<builtin>.open", "<builtin>.len"], "cpp_extension._find_rocm_home": ["os.path.dirname", "subprocess.Popen", "os.environ.get", "<builtin>.print", "os.path.basename", "os.path.exists"], "cpp_extension._join_rocm_home": ["<builtin>.EnvironmentError", "os.path.join"], "<builtin>.EnvironmentError": [], "torch.version.hip.split": [], "_cpp_extension_versioner.ExtensionVersioner": [], "cpp_extension._is_binary_build": [], "cpp_extension._accepted_compilers_for_platform": ["sys.platform.startswith"], "cpp_extension.get_default_build_root": ["os.path.realpath", "torch._appdirs.user_cache_dir"], "torch._appdirs.user_cache_dir": [], "cpp_extension.check_compiler_ok_for_platform": ["cpp_extension._accepted_compilers_for_platform", "sys.platform.startswith", "re.compile", "os.path.realpath", "<builtin>.any", "subprocess.check_output", "re.findall", "<builtin>.len"], "cpp_extension.check_compiler_abi_compatibility": ["cpp_extension._accepted_compilers_for_platform", "sys.platform.startswith", "<builtin>.tuple", "cpp_extension._is_binary_build", "sys.exc_info", "cpp_extension.check_compiler_ok_for_platform", "re.search", "os.environ.get", "<builtin>.map", "subprocess.check_output", "warnings.warn"], "cpp_extension.BuildExtension.with_options": [], "cpp_extension.BuildExtension.with_options.cls_with_options.__init__": ["<builtin>.super"], "cpp_extension.BuildExtension.__init__": ["cpp_extension.is_ninja_available", "<builtin>.super", "warnings.warn"], "cpp_extension.is_ninja_available": ["subprocess.check_output"], "cpp_extension.BuildExtension.finalize_options": ["<builtin>.super"], "cpp_extension.BuildExtension.build_extensions": ["cpp_extension.BuildExtension._define_torch_extension_name", "cpp_extension.BuildExtension._add_compile_flag", "cpp_extension.BuildExtension._add_gnu_cpp_abi_flag", "cpp_extension.BuildExtension._check_abi", "<builtin>.iter", "<builtin>.getattr", "setuptools.command.build_ext.build_ext.build_extensions", "os.path.splitext", "cpp_extension.BuildExtension._check_cuda_version", "<builtin>.isinstance", "<builtin>.next"], "cpp_extension.BuildExtension._check_abi": ["cpp_extension.check_compiler_abi_compatibility", "os.environ.get", "<builtin>.hasattr", "<builtin>.UserWarning"], "cpp_extension.BuildExtension._check_cuda_version": ["pkg_resources.packaging.version.parse", "os.path.join", "<builtin>.float", "re.search", "subprocess.check_output", "<builtin>.RuntimeError", "<builtin>.getattr", "warnings.warn"], "cpp_extension.BuildExtension._add_compile_flag": ["copy.deepcopy", "<builtin>.isinstance", "setuptools.command.build_ext.build_ext.extensions.extra_compile_args.append", "setuptools.command.build_ext.build_ext.extensions.extra_compile_args.values"], "cpp_extension.BuildExtension._define_torch_extension_name": ["cpp_extension.BuildExtension._add_compile_flag", "setuptools.command.build_ext.build_ext.extensions.name.split"], "cpp_extension.BuildExtension._add_gnu_cpp_abi_flag": ["cpp_extension.BuildExtension._add_compile_flag", "<builtin>.int", "<builtin>.str"], "cpp_extension.BuildExtension.build_extensions.append_std14_if_no_std_present": ["<builtin>.any"], "cpp_extension.BuildExtension.build_extensions.unix_cuda_flags": ["cpp_extension._get_cuda_arch_flags", "<builtin>.any", "os.getenv"], "cpp_extension._get_cuda_arch_flags": ["torch.cuda.get_device_capability", "torch.cuda.get_arch_list", "<builtin>.range", "<builtin>.min", "<builtin>.max", "<builtin>.int", "os.environ.get", "torch.cuda.device_count", "<builtin>.list", "<builtin>.set", "<builtin>.sorted", "<builtin>.ValueError", "collections.OrderedDict"], "cpp_extension.BuildExtension.build_extensions.convert_to_absolute_paths_inplace": ["os.path.abspath", "os.path.isabs", "<builtin>.len", "<builtin>.range"], "cpp_extension.BuildExtension.build_extensions.unix_wrap_single_compile": ["cpp_extension.BuildExtension.build_extensions.append_std14_if_no_std_present", "setuptools.command.build_ext.build_ext.compiler.set_executable", "cpp_extension._is_cuda_file", "setuptools.command.build_ext.build_ext.compiler._compile", "cpp_extension._join_cuda_home", "copy.deepcopy", "<builtin>.isinstance", "cpp_extension._get_rocm_arch_flags", "cpp_extension.BuildExtension.build_extensions.unix_cuda_flags", "cpp_extension._join_rocm_home"], "cpp_extension._is_cuda_file": ["os.path.splitext"], "cpp_extension._join_cuda_home": ["<builtin>.EnvironmentError", "os.path.join"], "setuptools.command.build_ext.build_ext.compiler.set_executable": [], "cpp_extension._get_rocm_arch_flags": ["os.environ.get"], "setuptools.command.build_ext.build_ext.compiler._compile": [], "cpp_extension.BuildExtension.build_extensions.unix_wrap_ninja_compile": ["shlex.quote", "cpp_extension._write_ninja_file_and_compile_objects", "cpp_extension.BuildExtension.build_extensions.append_std14_if_no_std_present", "setuptools.command.build_ext.build_ext.compiler._setup_compile", "<builtin>.map", "<builtin>.any", "os.path.abspath", "<builtin>.list", "cpp_extension.BuildExtension.build_extensions.convert_to_absolute_paths_inplace", "<builtin>.isinstance", "cpp_extension._get_rocm_arch_flags", "setuptools.command.build_ext.build_ext.compiler._get_cc_args", "cpp_extension.BuildExtension.build_extensions.unix_cuda_flags"], "setuptools.command.build_ext.build_ext.compiler._setup_compile": [], "setuptools.command.build_ext.build_ext.compiler._get_cc_args": [], "cpp_extension._write_ninja_file_and_compile_objects": ["cpp_extension.check_compiler_abi_compatibility", "cpp_extension._run_ninja_build", "cpp_extension.verify_ninja_availability", "os.path.join", "os.environ.get", "<builtin>.any", "<builtin>.map", "cpp_extension._write_ninja_file", "<builtin>.print"], "cpp_extension.BuildExtension.build_extensions.win_cuda_flags": ["cpp_extension._get_cuda_arch_flags"], "cpp_extension.BuildExtension.build_extensions.win_wrap_single_compile": ["copy.deepcopy", "setuptools.command.build_ext.build_ext.compiler._compile"], "cpp_extension.BuildExtension.build_extensions.win_wrap_single_compile.spawn": ["cpp_extension.BuildExtension.build_extensions.win_cuda_flags", "re.compile", "setuptools.command.build_ext.build_ext.compiler.spawn", "cpp_extension._join_cuda_home", "cpp_extension._is_cuda_file", "<builtin>.isinstance", "<builtin>.len"], "setuptools.command.build_ext.build_ext.compiler.spawn": [], "cpp_extension.BuildExtension.build_extensions.win_wrap_ninja_compile": ["cpp_extension._write_ninja_file_and_compile_objects", "cpp_extension.BuildExtension.build_extensions.append_std14_if_no_std_present", "cpp_extension.BuildExtension.build_extensions.win_cuda_flags", "setuptools.command.build_ext.build_ext.compiler._setup_compile", "setuptools.command.build_ext.build_ext.compiler.initialize", "<builtin>.map", "<builtin>.any", "os.path.abspath", "<builtin>.list", "cpp_extension.BuildExtension.build_extensions.convert_to_absolute_paths_inplace", "<builtin>.isinstance", "cpp_extension._nt_quote_args"], "setuptools.command.build_ext.build_ext.compiler.initialize": [], "setuptools.command.build_ext.build_ext.build_extensions": [], "cpp_extension.BuildExtension.get_ext_filename": ["<builtin>.super"], "pkg_resources.packaging.version.parse": [], "setuptools.command.build_ext.build_ext.extensions.extra_compile_args.values": [], "setuptools.command.build_ext.build_ext.extensions.extra_compile_args.append": [], "setuptools.command.build_ext.build_ext.extensions.name.split": [], "cpp_extension.CppExtension": ["cpp_extension.include_paths", "setuptools.Extension", "cpp_extension.library_paths"], "cpp_extension.include_paths": ["cpp_extension._join_cuda_home", "os.path.join", "cpp_extension._join_rocm_home"], "cpp_extension.library_paths": ["os.path.join", "cpp_extension._join_cuda_home", "os.path.exists", "cpp_extension._join_rocm_home"], "setuptools.Extension": [], "cpp_extension.CUDAExtension": ["setuptools.Extension", "os.getcwd", "os.path.join", "cpp_extension.include_paths", "cpp_extension.library_paths", "<builtin>.list", "os.path.abspath", "hipify.hipify_python.hipify", "os.path.relpath", "<builtin>.set"], "cpp_extension.load": ["cpp_extension._jit_compile", "<builtin>.isinstance", "cpp_extension._get_build_directory"], "cpp_extension._get_build_directory": ["torch.version.cuda.replace", "os.path.join", "os.environ.get", "cpp_extension.get_default_build_root", "<builtin>.print", "os.makedirs", "os.path.exists"], "cpp_extension._jit_compile": ["cpp_extension._import_module_from_library", "cpp_extension._get_exec_path", "hipify.hipify_python.GeneratedFileCleaner", "file_baton.FileBaton", "os.path.join", "cpp_extension._write_ninja_file_and_build_library", "<builtin>.map", "<builtin>.any", "os.path.abspath", "hipify.hipify_python.hipify", "<builtin>.print", "<builtin>.ValueError"], "cpp_extension.load_inline": ["<builtin>.type", "<builtin>.dict", "cpp_extension._jit_compile", "os.path.join", "cpp_extension._get_build_directory", "<builtin>.isinstance", "<builtin>.open", "<builtin>.ValueError"], "file_baton.FileBaton": [], "hipify.hipify_python.GeneratedFileCleaner": [], "cpp_extension._write_ninja_file_and_build_library": ["cpp_extension.check_compiler_abi_compatibility", "cpp_extension._run_ninja_build", "cpp_extension.verify_ninja_availability", "cpp_extension._prepare_ldflags", "os.path.join", "os.environ.get", "<builtin>.any", "<builtin>.map", "<builtin>.print", "cpp_extension._write_ninja_file_to_build_library"], "cpp_extension._get_exec_path": ["os.path.join", "os.getenv", "<builtin>.any", "os.path.samefile", "os.path.exists"], "cpp_extension._import_module_from_library": ["torch.ops.load_library", "importlib.util.module_from_spec", "os.path.join", "importlib.util.spec_from_file_location", "<builtin>.isinstance"], "cpp_extension.verify_ninja_availability": ["cpp_extension.is_ninja_available", "<builtin>.RuntimeError"], "cpp_extension._write_ninja_file": ["pkg_resources.packaging.version.parse", "<builtin>.zip", "os.path.dirname", "cpp_extension._write_ninja_file.sanitize_flags", "os.environ.get", "os.path.abspath", "subprocess.check_output", "cpp_extension._join_cuda_home", "<builtin>.RuntimeError", "cpp_extension._is_cuda_file", "<builtin>.open", "<builtin>.len", "cpp_extension._join_rocm_home"], "cpp_extension._run_ninja_build": ["sys.exc_info", "os.environ.copy", "setuptools.distutils.util.get_platform", "cpp_extension._get_num_workers", "subprocess.run", "<builtin>.RuntimeError", "setuptools.distutils._msvccompiler._get_vc_env", "sys.stderr.flush", "<builtin>.hasattr", "sys.stdout.flush"], "cpp_extension._prepare_ldflags": ["torch.__config__.parallel_info", "os.path.join", "os.path.dirname", "cpp_extension._join_cuda_home", "<builtin>.print", "cpp_extension._join_rocm_home"], "cpp_extension._write_ninja_file_to_build_library": ["sys.platform.startswith", "cpp_extension._get_cuda_arch_flags", "cpp_extension._write_ninja_file_to_build_library.object_file_path", "os.path.join", "<builtin>.int", "hipify.hipify_python.get_hip_file_path", "cpp_extension.include_paths", "os.getenv", "cpp_extension._write_ninja_file", "<builtin>.any", "os.path.abspath", "<builtin>.str", "os.path.relpath", "cpp_extension._is_cuda_file", "<builtin>.getattr", "cpp_extension._get_rocm_arch_flags", "sysconfig.get_path", "cpp_extension._nt_quote_args"], "torch.__config__.parallel_info": [], "torch.cuda.get_arch_list": [], "torch.version.cuda.replace": [], "cpp_extension._get_num_workers": ["<builtin>.print", "os.environ.get", "<builtin>.int"], "setuptools.distutils.util.get_platform": [], "os.path.samefile": [], "importlib.util.spec_from_file_location": [], "hipify.hipify_python.get_hip_file_path": [], "cpp_extension._write_ninja_file_to_build_library.object_file_path": ["os.path.splitext", "cpp_extension._is_cuda_file", "os.path.basename"], "cpp_extension._write_ninja_file.sanitize_flags": [], "dlpack": ["torch._C._add_docstr"], "file_baton": [], "file_baton.FileBaton.__init__": [], "file_baton.FileBaton.try_acquire": ["os.open"], "os.open": [], "file_baton.FileBaton.wait": ["time.sleep", "os.path.exists"], "file_baton.FileBaton.release": ["os.close", "os.remove"], "hooks.RemovableHandle.__init__": ["weakref.ref"], "hooks.RemovableHandle.remove": [], "hooks.RemovableHandle.__getstate__": [], "hooks.RemovableHandle.__setstate__": ["<builtin>.max", "collections.OrderedDict", "weakref.ref"], "hooks.RemovableHandle.__enter__": [], "hooks.RemovableHandle.__exit__": ["hooks.RemovableHandle.remove"], "hooks.unserializable_hook": [], "hooks.warn_if_has_hooks": ["<builtin>.hasattr", "<builtin>.repr", "warnings.warn"], "hooks.BackwardHook.__init__": [], "hooks.BackwardHook._pack_with_none": ["<builtin>.tuple", "<builtin>.zip"], "hooks.BackwardHook._unpack_none": ["<builtin>.tuple"], "hooks.BackwardHook._set_user_hook": ["functools.wraps"], "hooks.BackwardHook._set_user_hook.hook": ["<builtin>.len", "hooks.BackwardHook._unpack_none", "<builtin>.RuntimeError", "hooks.BackwardHook._pack_with_none"], "hooks.BackwardHook._apply_on_tensors": ["hooks.BackwardHook.setup_input_hook.fn", "<builtin>.zip", "<builtin>.tuple", "<builtin>.len", "<builtin>.isinstance", "<builtin>.list", "torch.nn.modules._functions.BackwardHookFunction.apply", "<builtin>.enumerate", "<builtin>.RuntimeError", "hooks.BackwardHook.setup_output_hook.fn"], "torch.nn.modules._functions.BackwardHookFunction.apply": [], "hooks.BackwardHook.setup_input_hook.fn": ["hooks.BackwardHook._set_user_hook"], "hooks.BackwardHook.setup_output_hook.fn": [], "hooks.BackwardHook.setup_input_hook": ["<builtin>.len", "hooks.BackwardHook._apply_on_tensors"], "hooks.BackwardHook.setup_output_hook": ["<builtin>.len", "<builtin>.isinstance", "hooks.BackwardHook._apply_on_tensors"], "hooks.BackwardHook.setup_output_hook.fn.hook": ["<builtin>.all", "<builtin>.isinstance", "<builtin>.RuntimeError", "hooks.BackwardHook._pack_with_none"], "mkldnn": [], "mkldnn.MkldnnLinear.__init__": ["torch.zeros", "<builtin>.super", "torch.jit.ScriptModule.register_buffer"], "mkldnn.MkldnnLinear": ["torch.jit.script_method"], "mkldnn.MkldnnLinear.__getstate__": [], "mkldnn.MkldnnLinear.__setstate__": [], "mkldnn.MkldnnLinear.forward": ["torch._C._nn.mkldnn_linear"], "torch._C._nn.mkldnn_linear": [], "mkldnn._MkldnnConvNd.__init__": ["torch.zeros", "<builtin>.super", "torch.jit.ScriptModule.register_buffer"], "mkldnn._MkldnnConvNd": ["torch.jit.script_method"], "mkldnn._MkldnnConvNd.__getstate__": [], "mkldnn._MkldnnConvNd.forward": ["torch.mkldnn_convolution"], "torch.mkldnn_convolution": [], "mkldnn.MkldnnConv1d.__init__": ["<builtin>.super", "torch.jit.ScriptModule.register_buffer"], "mkldnn.MkldnnConv1d": ["torch.jit.script_method"], "mkldnn.MkldnnConv1d.__setstate__": [], "mkldnn.MkldnnConv2d.__init__": ["torch._C._nn.mkldnn_reorder_conv2d_weight", "<builtin>.super", "torch.jit.ScriptModule.register_buffer"], "torch._C._nn.mkldnn_reorder_conv2d_weight": [], "mkldnn.MkldnnConv2d": ["torch.jit.script_method"], "mkldnn.MkldnnConv2d.__setstate__": ["torch._C._nn.mkldnn_reorder_conv2d_weight"], "mkldnn.MkldnnConv3d.__init__": ["torch._C._nn.mkldnn_reorder_conv3d_weight", "<builtin>.super", "torch.jit.ScriptModule.register_buffer"], "torch._C._nn.mkldnn_reorder_conv3d_weight": [], "mkldnn.MkldnnConv3d": ["torch.jit.script_method"], "mkldnn.MkldnnConv3d.__setstate__": ["torch._C._nn.mkldnn_reorder_conv3d_weight"], "mkldnn.MkldnnBatchNorm.__init__": ["<builtin>.super", "torch.jit.ScriptModule.register_buffer"], "mkldnn.MkldnnBatchNorm": ["torch.jit.script_method"], "mkldnn.MkldnnBatchNorm.__getstate__": [], "mkldnn.MkldnnBatchNorm.__setstate__": [], "mkldnn.MkldnnBatchNorm.forward": ["torch.batch_norm"], "mkldnn.to_mkldnn": ["mkldnn.to_mkldnn.m_fn_rec"], "mkldnn.to_mkldnn.m_fn": ["mkldnn.MkldnnBatchNorm.__init__", "<builtin>.isinstance", "mkldnn.MkldnnConv3d.__init__", "mkldnn.MkldnnLinear.__init__", "mkldnn.MkldnnConv2d.__init__", "mkldnn.MkldnnConv1d.__init__"], "mkldnn.to_mkldnn.m_fn_rec": ["<builtin>.setattr", "mkldnn.to_mkldnn.m_fn_rec", "mkldnn.to_mkldnn.m_fn"], "mobile_optimizer": [], "mobile_optimizer.optimize_for_mobile": ["<builtin>.hasattr", "<builtin>.isinstance", "torch._C._jit_pass_metal_optimize_for_mobile", "<builtin>.set", "<builtin>.type", "<builtin>.AttributeError", "torch._C._jit_pass_vulkan_optimize_for_mobile", "torch.jit._recursive.wrap_cpp_module", "<builtin>.all", "<builtin>.TypeError", "torch._C._jit_pass_optimize_for_mobile", "mobile_optimizer._get_bundled_inputs_preserved_attributes", "<builtin>.str", "<builtin>.list"], "mobile_optimizer._get_bundled_inputs_preserved_attributes": ["<builtin>.hasattr"], "torch._C._jit_pass_optimize_for_mobile": [], "torch._C._jit_pass_vulkan_optimize_for_mobile": [], "torch._C._jit_pass_metal_optimize_for_mobile": [], "mobile_optimizer.generate_mobile_module_lints": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError", "torch.jit.export_opnames"], "model_zoo": [], "show_pickle": ["sys.exit", "show_pickle.main"], "show_pickle.FakeObject.__init__": [], "show_pickle.FakeObject.__repr__": [], "show_pickle.FakeObject.__setstate__": [], "show_pickle.FakeObject.pp_format": ["<builtin>.repr", "<builtin>.Exception"], "show_pickle.FakeClass.__init__": [], "show_pickle.FakeClass.__repr__": [], "show_pickle.FakeClass.__call__": ["show_pickle.FakeObject.__init__"], "show_pickle.FakeClass.fake_new": ["show_pickle.FakeObject.__init__"], "show_pickle.DumpUnpickler.__init__": ["<builtin>.super"], "show_pickle.DumpUnpickler.find_class": ["show_pickle.FakeClass.__init__"], "show_pickle.DumpUnpickler.persistent_load": ["show_pickle.FakeObject.__init__"], "show_pickle.DumpUnpickler": ["<builtin>.dict"], "show_pickle.DumpUnpickler.load_binunicode": ["pickle._Unpickler.read", "<builtin>.Exception", "show_pickle.FakeObject.__init__", "struct.unpack", "pickle._Unpickler.append", "<builtin>.str"], "pickle._Unpickler.read": [], "pickle._Unpickler.append": [], "show_pickle.DumpUnpickler.dump": ["pprint.pprint", "show_pickle.DumpUnpickler.__init__"], "show_pickle.main": ["zipfile.ZipFile", "fnmatch.fnmatch", "show_pickle.DumpUnpickler.dump", "<builtin>.len", "<builtin>.Exception", "<builtin>.open", "sys.stderr.write"], "throughput_benchmark": [], "throughput_benchmark.format_time": ["<builtin>.AssertionError", "<builtin>.sum"], "throughput_benchmark.ExecutionStats.__init__": [], "throughput_benchmark.ExecutionStats.latency_avg_ms": [], "throughput_benchmark.ExecutionStats.num_iters": [], "throughput_benchmark.ExecutionStats.iters_per_second": [], "throughput_benchmark.ExecutionStats.total_time_seconds": [], "throughput_benchmark.ExecutionStats.__str__": [], "throughput_benchmark.ThroughputBenchmark.__init__": ["<builtin>.isinstance"], "throughput_benchmark.ThroughputBenchmark.run_once": [], "throughput_benchmark.ThroughputBenchmark.add_input": [], "throughput_benchmark.ThroughputBenchmark.benchmark": ["throughput_benchmark.ExecutionStats.__init__"], "_cpp_extension_versioner": ["collections.namedtuple"], "_cpp_extension_versioner.update_hash": ["<builtin>.hash"], "_cpp_extension_versioner.hash_source_files": ["_cpp_extension_versioner.update_hash", "<builtin>.open"], "_cpp_extension_versioner.hash_build_arguments": ["_cpp_extension_versioner.update_hash"], "_cpp_extension_versioner.ExtensionVersioner.__init__": [], "_cpp_extension_versioner.ExtensionVersioner.get_version": [], "_cpp_extension_versioner.ExtensionVersioner.bump_version_if_changed": ["_cpp_extension_versioner.update_hash", "_cpp_extension_versioner.hash_source_files", "_cpp_extension_versioner.hash_build_arguments"], "_crash_handler": [], "_crash_handler.enable_minidumps": ["pathlib.Path", "<builtin>.RuntimeError", "torch._C._enable_minidumps", "os.path.exists"], "torch._C._enable_minidumps": [], "_crash_handler.enable_minidumps_on_exceptions": ["torch._C._enable_minidumps_on_exceptions"], "torch._C._enable_minidumps_on_exceptions": [], "_crash_handler.disable_minidumps": ["torch._C._disable_minidumps"], "torch._C._disable_minidumps": [], "_pytree._register_pytree_node": ["typing.NamedTuple.__init__"], "_pytree._dict_flatten": ["<builtin>.list"], "_pytree._dict_unflatten": ["<builtin>.zip"], "_pytree._list_flatten": [], "_pytree._list_unflatten": ["<builtin>.list"], "_pytree._tuple_flatten": ["<builtin>.list"], "_pytree._tuple_unflatten": ["<builtin>.tuple"], "_pytree._namedtuple_flatten": ["<builtin>.list", "<builtin>.type"], "_pytree._namedtuple_unflatten": ["typing.cast"], "_pytree._is_namedtuple_instance": ["<builtin>.getattr", "<builtin>.len", "<builtin>.all", "<builtin>.isinstance", "<builtin>.type"], "_pytree._get_node_type": ["_pytree._is_namedtuple_instance", "<builtin>.type"], "_pytree._is_leaf": ["_pytree._get_node_type"], "_pytree.TreeSpec.__init__": ["<builtin>.sum"], "_pytree.TreeSpec.__repr__": [], "_pytree.TreeSpec.__eq__": ["typing.cast"], "_pytree.TreeSpec.__ne__": ["_pytree.TreeSpec.__eq__"], "_pytree.LeafSpec.__init__": ["<builtin>.super"], "_pytree.LeafSpec.__repr__": [], "_pytree.tree_flatten": ["_pytree.TreeSpec.__init__", "_pytree.tree_flatten", "_pytree._get_node_type", "_pytree.LeafSpec.__init__", "_pytree._is_leaf"], "_pytree.tree_unflatten": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.ValueError", "_pytree.tree_unflatten", "<builtin>.type"], "_pytree.tree_map": ["_pytree.tree_unflatten", "_pytree.tree_flatten"], "_pytree._broadcast_to_and_flatten": ["<builtin>.zip", "_pytree._get_node_type", "<builtin>.len", "<builtin>.isinstance", "_pytree._broadcast_to_and_flatten", "_pytree._is_leaf"], "conflict": [], "conflict.supercedes": ["<builtin>.issubclass", "<builtin>.map", "<builtin>.all", "<builtin>.len", "variadic.isvariadic"], "variadic.isvariadic": ["<builtin>.isinstance"], "conflict.consistent": ["<builtin>.issubclass", "<builtin>.zip", "<builtin>.all", "<builtin>.len", "variadic.isvariadic"], "conflict.ambiguous": ["conflict.consistent", "conflict.supercedes"], "conflict.ambiguities": ["<builtin>.set", "conflict.supercedes", "<builtin>.list", "<builtin>.any", "<builtin>.map", "<builtin>.hash", "conflict.ambiguous"], "conflict.super_signature": ["<builtin>.all", "<builtin>.range", "<builtin>.len", "<builtin>.max"], "conflict.edge": ["conflict.supercedes"], "conflict.ordering": ["<builtin>.dict", "utils._toposort", "<builtin>.list", "<builtin>.map", "utils.groupby", "conflict.edge"], "conflict.ordering.<lambda1>": [], "utils.groupby": ["collections.OrderedDict", "<builtin>.list"], "core.dispatch": ["<builtin>.tuple"], "core.dispatch._df": ["inspect.currentframe", "dispatcher.MethodDispatcher", "core.ismethod", "dispatcher.Dispatcher"], "core.ismethod": ["inspect.getfullargspec", "inspect.signature", "<builtin>.hasattr", "inspect.getargspec"], "dispatcher.MethodDispatcher": [], "dispatcher.Dispatcher": [], "dispatcher.ambiguity_warn": ["dispatcher.warning_text", "warnings.warn"], "dispatcher.warning_text": ["conflict.super_signature", "dispatcher.str_signature"], "dispatcher.halt_ordering": ["warnings.warn"], "dispatcher.restart_ordering": ["warnings.warn"], "dispatcher.variadic_signature_matches_iter": ["variadic.isvariadic", "<builtin>.next", "<builtin>.iter", "<builtin>.issubclass"], "dispatcher.variadic_signature_matches": ["dispatcher.variadic_signature_matches_iter", "<builtin>.all"], "dispatcher.Dispatcher.__init__": [], "dispatcher.Dispatcher.register": [], "dispatcher.Dispatcher.register._df": ["dispatcher.Dispatcher.add"], "dispatcher.Dispatcher.add": ["<builtin>.str", "utils.expand_tuples", "<builtin>.any", "<builtin>.tuple", "<builtin>.len", "dispatcher.Dispatcher.get_func_annotations", "<builtin>.isinstance", "dispatcher.Dispatcher.add", "<builtin>.TypeError", "<builtin>.enumerate"], "dispatcher.Dispatcher.get_func_params": ["<builtin>.hasattr", "inspect.signature"], "dispatcher.Dispatcher.get_func_annotations": ["<builtin>.all", "<builtin>.tuple", "dispatcher.Dispatcher.get_func_params"], "utils.expand_tuples": ["<builtin>.isinstance", "utils.expand_tuples"], "dispatcher.Dispatcher.ordering": ["dispatcher.Dispatcher.reorder"], "dispatcher.Dispatcher.reorder": ["conflict.ambiguities", "dispatcher.ambiguity_warn", "dispatcher.Dispatcher.ordering"], "dispatcher.Dispatcher.__call__": ["dispatcher.Dispatcher.dispatch", "dispatcher.str_signature", "<builtin>.NotImplementedError", "<builtin>.tuple", "<builtin>.next", "dispatcher.Dispatcher.dispatch_iter", "<builtin>.type"], "dispatcher.Dispatcher.dispatch": ["<builtin>.next", "dispatcher.Dispatcher.dispatch_iter"], "dispatcher.str_signature": [], "dispatcher.Dispatcher.dispatch_iter": ["<builtin>.map", "<builtin>.all", "dispatcher.variadic_signature_matches", "<builtin>.len", "variadic.isvariadic"], "dispatcher.Dispatcher.__str__": [], "dispatcher.Dispatcher.resolve": ["warnings.warn", "dispatcher.Dispatcher.dispatch"], "dispatcher.Dispatcher.__getstate__": [], "dispatcher.Dispatcher.__setstate__": ["<builtin>.dict", "dispatcher.Dispatcher.ordering"], "dispatcher.Dispatcher.__doc__": ["dispatcher.str_signature", "<builtin>.len"], "dispatcher.Dispatcher._help": ["dispatcher.Dispatcher.dispatch", "<builtin>.map"], "dispatcher.Dispatcher.help": ["dispatcher.Dispatcher._help", "<builtin>.print"], "dispatcher.Dispatcher._source": ["<builtin>.TypeError", "dispatcher.Dispatcher.dispatch", "dispatcher.Dispatcher.source", "<builtin>.map"], "dispatcher.Dispatcher.source": ["dispatcher.Dispatcher._source", "<builtin>.print"], "dispatcher.source": ["inspect.getsource", "inspect.getsourcefile"], "dispatcher.MethodDispatcher.get_func_params": ["<builtin>.hasattr", "inspect.signature", "itertools.islice"], "dispatcher.MethodDispatcher.__get__": [], "dispatcher.MethodDispatcher.__call__": ["dispatcher.Dispatcher.dispatch", "dispatcher.str_signature", "<builtin>.NotImplementedError", "<builtin>.tuple", "<builtin>.type"], "collections.OrderedDict.fromkeys": [], "utils.typename": ["<builtin>.map", "<builtin>.len", "utils.typename"], "variadic": [], "variadic.VariadicSignatureType.__subclasscheck__": ["variadic.isvariadic", "<builtin>.all", "<builtin>.issubclass"], "variadic.VariadicSignatureType.__eq__": ["variadic.isvariadic", "<builtin>.set"], "variadic.VariadicSignatureType.__hash__": ["<builtin>.type", "<builtin>.frozenset", "<builtin>.hash"], "variadic.VariadicSignatureMeta.__getitem__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.dict", "utils.typename", "<builtin>.ValueError"], "__main__.redirect_argv": [], "__main__.compiled_with_cuda": [], "__main__.run_env_analysis": ["<builtin>.dict", "<builtin>.print", "__main__.compiled_with_cuda", "torch.utils.collect_env.get_env_info"], "torch.utils.collect_env.get_env_info": [], "__main__.run_cprofile": ["<builtin>.print", "<builtin>.exec", "cProfile.Profile"], "cProfile.Profile": [], "__main__.print_cprofile_summary": ["<builtin>.print", "pstats.Stats"], "pstats.Stats": [], "__main__.run_autograd_prof": ["__main__.run_autograd_prof.run_prof", "<builtin>.print", "torch.cuda.is_available"], "__main__.run_autograd_prof.run_prof": ["torch.autograd.profiler.profile", "<builtin>.exec"], "__main__.print_autograd_prof_summary": ["<builtin>.print", "torch.autograd.profiler_util._build_table", "<builtin>.sorted"], "__main__.print_autograd_prof_summary.<lambda1>": ["<builtin>.getattr"], "torch.autograd.profiler_util._build_table": [], "__main__.cpu_time_total": ["<builtin>.sum"], "backward_compatibility": [], "backward_compatibility.worker_init_fn": [], "cycling_iterator": [], "cycling_iterator.CyclingIterator.__init__": [], "cycling_iterator.CyclingIterator.__iter__": [], "cycling_iterator.CyclingIterator.__next__": ["cycling_iterator.CyclingIterator.__next__", "<builtin>.next"], "dataloader": ["typing.TypeVar"], "dataloader._DatasetKind.create_fetcher": ["_utils.fetch._IterableDatasetFetcher", "_utils.fetch._MapDatasetFetcher"], "_utils.fetch._MapDatasetFetcher": [], "_utils.fetch._IterableDatasetFetcher": [], "dataloader._InfiniteConstantSampler.__init__": ["<builtin>.super"], "dataloader._InfiniteConstantSampler.__iter__": [], "dataloader.DataLoader.__init__": ["BatchSampler", "torch.set_vital", "dataloader._InfiniteConstantSampler.__init__", "torch._C._log_api_usage_once", "dataloader.DataLoader.check_worker_number_rationality", "<builtin>.isinstance", "RandomSampler", "<builtin>.ValueError", "SequentialSampler"], "RandomSampler": [], "SequentialSampler": [], "BatchSampler": [], "dataloader.DataLoader.check_worker_number_rationality": ["os.cpu_count", "dataloader.DataLoader.check_worker_number_rationality._create_warning_msg", "<builtin>.len", "<builtin>.hasattr", "warnings.warn", "os.sched_getaffinity"], "torch.set_vital": [], "dataloader.DataLoader._get_iterator": ["dataloader.DataLoader.check_worker_number_rationality", "dataloader._SingleProcessDataLoaderIter.__init__", "dataloader._MultiProcessingDataLoaderIter.__init__"], "dataloader._SingleProcessDataLoaderIter.__init__": ["<builtin>.super", "dataloader._DatasetKind.create_fetcher"], "dataloader._MultiProcessingDataLoaderIter.__init__": ["torch.multiprocessing.Queue", "<builtin>.super", "<builtin>.range", "torch.multiprocessing.Process", "threading.Event", "<builtin>.tuple", "_utils.signal_handling._set_worker_pids", "dataloader._MultiProcessingDataLoaderIter._reset", "torch.cuda.current_device", "threading.Thread", "<builtin>.id", "torch.multiprocessing.Event", "queue.Queue", "itertools.cycle", "_utils.signal_handling._set_SIGCHLD_handler"], "dataloader.DataLoader.multiprocessing_context": ["<builtin>.TypeError", "<builtin>.isinstance", "torch.multiprocessing.get_context", "torch.multiprocessing.get_all_start_methods", "<builtin>.ValueError"], "torch.multiprocessing.get_all_start_methods": [], "dataloader.DataLoader.__setattr__": ["<builtin>.super", "<builtin>.ValueError"], "dataloader.DataLoader.__iter__": ["dataloader._MultiProcessingDataLoaderIter._reset", "dataloader.DataLoader._get_iterator", "dataloader._BaseDataLoaderIter._reset"], "dataloader._MultiProcessingDataLoaderIter._reset": ["<builtin>.super", "<builtin>.range", "_utils.worker._ResumeIteration", "dataloader._MultiProcessingDataLoaderIter._try_put_index", "dataloader._MultiProcessingDataLoaderIter._get_data", "<builtin>.isinstance"], "dataloader._BaseDataLoaderIter._reset": ["<builtin>.iter"], "dataloader.DataLoader._auto_collation": [], "dataloader.DataLoader._index_sampler": [], "dataloader.DataLoader.__len__": ["math.ceil", "<builtin>.len"], "dataloader.DataLoader.check_worker_number_rationality._create_warning_msg": [], "os.sched_getaffinity": [], "dataloader._BaseDataLoaderIter.__init__": ["torch.cuda.is_available", "<builtin>.iter", "torch.empty"], "dataloader._BaseDataLoaderIter.__iter__": [], "dataloader._BaseDataLoaderIter._next_index": ["dataloader._BaseDataLoaderIter.__next__"], "dataloader._BaseDataLoaderIter.__next__": ["dataloader._MultiProcessingDataLoaderIter._next_data", "dataloader._MultiProcessingDataLoaderIter._reset", "dataloader._BaseDataLoaderIter._reset", "dataloader._BaseDataLoaderIter._next_data", "warnings.warn", "dataloader._SingleProcessDataLoaderIter._next_data", "torch.autograd.profiler.record_function"], "dataloader._BaseDataLoaderIter._next_data": [], "dataloader._MultiProcessingDataLoaderIter._next_data": ["dataloader._MultiProcessingDataLoaderIter._process_data", "dataloader._MultiProcessingDataLoaderIter._try_put_index", "<builtin>.len", "dataloader._MultiProcessingDataLoaderIter._get_data", "<builtin>.isinstance", "dataloader._MultiProcessingDataLoaderIter._shutdown_workers", "dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable"], "dataloader._SingleProcessDataLoaderIter._next_data": ["dataloader._BaseDataLoaderIter._next_index", "_utils.pin_memory.pin_memory"], "dataloader._BaseDataLoaderIter.__len__": ["<builtin>.len"], "dataloader._BaseDataLoaderIter.__getstate__": ["<builtin>.NotImplementedError"], "_utils.pin_memory.pin_memory": [], "torch.multiprocessing.Queue": [], "torch.multiprocessing.Event": [], "torch.multiprocessing.Process": [], "_utils.signal_handling._set_worker_pids": [], "_utils.signal_handling._set_SIGCHLD_handler": [], "_utils.worker._ResumeIteration": [], "dataloader._MultiProcessingDataLoaderIter._get_data": ["dataloader._MultiProcessingDataLoaderIter._try_get_data", "<builtin>.RuntimeError"], "dataloader._MultiProcessingDataLoaderIter._try_put_index": ["<builtin>.next", "dataloader._BaseDataLoaderIter._next_index", "<builtin>.range"], "dataloader._MultiProcessingDataLoaderIter._try_get_data": ["<builtin>.RuntimeError", "<builtin>.range", "<builtin>.enumerate", "<builtin>.len", "tempfile.NamedTemporaryFile", "<builtin>.isinstance", "<builtin>.str", "dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable"], "dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable": [], "dataloader._MultiProcessingDataLoaderIter._shutdown_workers": ["<builtin>.range", "<builtin>.len", "<builtin>.hasattr", "<builtin>.id", "_utils.signal_handling._remove_worker_pids", "dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable"], "dataloader._MultiProcessingDataLoaderIter._process_data": ["<builtin>.isinstance", "dataloader._MultiProcessingDataLoaderIter._try_put_index"], "_utils.signal_handling._remove_worker_pids": [], "dataloader._MultiProcessingDataLoaderIter.__del__": ["dataloader._MultiProcessingDataLoaderIter._shutdown_workers"], "dataset.DataChunk.__init__": [], "dataset.DataChunk.__getitem__": [], "dataset.DataChunk.__len__": ["<builtin>.len"], "dataset.DataChunk.as_str": ["<builtin>.iter", "<builtin>.str"], "dataset.DataChunk.__str__": ["dataset.DataChunk.as_str"], "dataset.DataChunk.__iter__": [], "dataset.DataChunk.raw_iterator": [], "dataset.Dataset.__getitem__": [], "dataset.Dataset.__add__": ["dataset.ConcatDataset.__init__"], "dataset.ConcatDataset.__init__": ["dataset.ConcatDataset.cumsum", "<builtin>.len", "<builtin>.list", "<builtin>.super", "<builtin>.isinstance"], "dataset.Dataset.__getattr__": ["functools.partial"], "dataset.Dataset.register_function": [], "dataset.Dataset.register_datapipe_as_function": ["<builtin>.Exception", "functools.partial"], "dataset.Dataset.register_datapipe_as_function.class_function": [], "dataset.IterableDataset.__iter__": [], "dataset.IterableDataset.__add__": ["dataset.ChainDataset.__init__"], "dataset.ChainDataset.__init__": ["<builtin>.super"], "dataset.IterableDataset.__getattr__": ["functools.partial"], "dataset.IterableDataset.__reduce_ex__": ["<builtin>.super"], "dataset.IterableDataset.set_reduce_ex_hook": ["<builtin>.Exception"], "dataset.TensorDataset.__init__": ["<builtin>.all"], "dataset.TensorDataset.__getitem__": ["<builtin>.tuple"], "dataset.TensorDataset.__len__": [], "dataset.ConcatDataset.cumsum": ["<builtin>.len"], "dataset.ConcatDataset.__len__": [], "dataset.ConcatDataset.__getitem__": ["<builtin>.ValueError", "bisect.bisect_right", "<builtin>.len"], "dataset.ConcatDataset.cummulative_sizes": ["warnings.warn"], "dataset.ChainDataset.__iter__": ["<builtin>.isinstance"], "dataset.ChainDataset.__len__": ["<builtin>.len", "<builtin>.isinstance"], "dataset.Subset.__init__": [], "dataset.Subset.__getitem__": ["<builtin>.isinstance"], "dataset.Subset.__len__": ["<builtin>.len"], "dataset.random_split": ["<builtin>.sum", "<builtin>.len", "torch._utils._accumulate", "<builtin>.ValueError", "<builtin>.zip", "dataset.Subset.__init__", "torch.randperm"], "torch._utils._accumulate": [], "distributed.DistributedSampler.__init__": ["<builtin>.ValueError", "<builtin>.RuntimeError", "<builtin>.len", "torch.distributed.is_available", "torch.distributed.get_world_size", "math.ceil", "torch.distributed.get_rank"], "distributed.DistributedSampler.__iter__": ["<builtin>.range", "torch.Generator", "<builtin>.len", "<builtin>.list", "math.ceil", "torch.randperm", "<builtin>.iter"], "distributed.DistributedSampler.__len__": [], "distributed.DistributedSampler.set_epoch": [], "elastic_distributed_sampler": [], "elastic_distributed_sampler.ElasticDistributedSampler.__init__": ["<builtin>.float", "<builtin>.ValueError", "math.ceil", "<builtin>.int", "<builtin>.super", "<builtin>.len"], "elastic_distributed_sampler.ElasticDistributedSampler.__iter__": ["<builtin>.iter", "torch.Generator", "torch.randperm", "<builtin>.len"], "elastic_distributed_sampler.ElasticDistributedSampler.__len__": [], "graph.stub_unpickler": [], "graph.list_connected_datapipes": ["torch.utils.data.IterableDataset.set_reduce_ex_hook", "pickle.Pickler", "io.BytesIO"], "graph.list_connected_datapipes.stub_pickler": [], "graph.list_connected_datapipes.reduce_hook": [], "torch.utils.data.IterableDataset.set_reduce_ex_hook": [], "graph.traverse": ["graph.traverse", "graph.list_connected_datapipes"], "sampler": ["typing.TypeVar"], "sampler.Sampler.__init__": [], "sampler.Sampler.__iter__": [], "sampler.SequentialSampler.__init__": [], "sampler.SequentialSampler.__iter__": ["<builtin>.len", "<builtin>.range", "<builtin>.iter"], "sampler.SequentialSampler.__len__": ["<builtin>.len"], "sampler.RandomSampler.__init__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError"], "sampler.RandomSampler.num_samples": ["<builtin>.len"], "sampler.RandomSampler.__iter__": ["torch.randint", "<builtin>.len", "torch.Generator", "<builtin>.int", "torch.randperm", "<builtin>.range", "torch.empty"], "sampler.RandomSampler.__len__": [], "sampler.SubsetRandomSampler.__init__": [], "sampler.SubsetRandomSampler.__iter__": ["<builtin>.len", "torch.randperm"], "sampler.SubsetRandomSampler.__len__": ["<builtin>.len"], "sampler.WeightedRandomSampler.__init__": ["<builtin>.isinstance", "<builtin>.ValueError", "torch.as_tensor"], "sampler.WeightedRandomSampler.__iter__": ["<builtin>.iter", "torch.multinomial"], "sampler.WeightedRandomSampler.__len__": [], "sampler.BatchSampler.__init__": ["<builtin>.isinstance", "<builtin>.ValueError"], "sampler.BatchSampler.__iter__": ["<builtin>.len"], "sampler.BatchSampler.__len__": ["<builtin>.len"], "sharding": [], "sharding.apply_sharding": ["<builtin>.hasattr", "sharding.apply_sharding.traverse_graph", "<builtin>.RuntimeError"], "sharding.apply_sharding.traverse_graph": ["sharding.apply_sharding.traverse_graph", "<builtin>.set"], "_decorator": [], "_decorator.functional_datapipe.__init__": [], "_decorator.functional_datapipe.__call__": ["<builtin>.TypeError", "<builtin>.hasattr", "<builtin>.issubclass", "torch.utils.data.IterDataPipe.register_datapipe_as_function", "<builtin>.isinstance", "torch.utils.data.MapDataPipe.register_datapipe_as_function"], "torch.utils.data.IterDataPipe.register_datapipe_as_function": [], "torch.utils.data.MapDataPipe.register_datapipe_as_function": [], "_decorator.guaranteed_datapipes_determinism.__init__": [], "_decorator.guaranteed_datapipes_determinism.__enter__": [], "_decorator.guaranteed_datapipes_determinism.__exit__": [], "_decorator.non_deterministic.__init__": ["<builtin>.isinstance", "<builtin>.issubclass", "<builtin>.TypeError"], "_decorator.non_deterministic.__call__": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.issubclass"], "_decorator.non_deterministic.deterministic_wrapper_fn": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "_decorator.argument_validation": ["functools.wraps", "typing.get_type_hints", "inspect.signature"], "typing.get_type_hints": [], "_decorator.argument_validation.wrapper": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "_decorator.runtime_validation_disabled.__init__": [], "_decorator.runtime_validation_disabled.__enter__": [], "_decorator.runtime_validation_disabled.__exit__": [], "_decorator.runtime_validation": ["<builtin>.TypeError", "functools.wraps"], "_decorator.runtime_validation.wrapper": ["<builtin>.RuntimeError", "<builtin>.type"], "_typing": ["_typing._DataPipeType.__init__", "<builtin>.type", "typing.TypeVar"], "_typing.issubtype": ["<builtin>.len", "<builtin>.getattr", "<builtin>.isinstance", "<builtin>.type", "_typing._decompose_type", "<builtin>.all", "_typing._issubtype_with_constraints"], "_typing._decompose_type": ["<builtin>.list", "<builtin>.hasattr", "<builtin>.isinstance"], "_typing._issubtype_with_constraints": ["<builtin>.len", "<builtin>.zip", "<builtin>.hasattr", "<builtin>.getattr", "_typing.issubtype", "_typing._decompose_type", "<builtin>.all", "_typing._issubtype_with_constraints"], "_typing.issubinstance": ["<builtin>.len", "<builtin>.zip", "<builtin>.getattr", "_typing.issubtype", "<builtin>.isinstance", "_typing.issubinstance", "<builtin>.type", "<builtin>.all"], "_typing._DataPipeType.__init__": [], "_typing._DataPipeType.__repr__": ["typing._type_repr"], "typing._type_repr": [], "_typing._DataPipeType.__eq__": ["<builtin>.isinstance"], "_typing._DataPipeType.__hash__": ["<builtin>.hash"], "_typing._DataPipeType.issubtype": ["_typing._DataPipeType.issubtype", "<builtin>.getattr", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "_typing._DataPipeType.issubtype_of_instance": ["_typing.issubinstance"], "_typing._DataPipeMeta.__new__": ["<builtin>.super", "<builtin>.isinstance"], "_typing._DataPipeMeta.__init__": ["<builtin>.super"], "_typing._DataPipeMeta": ["typing._tp_cache"], "typing._tp_cache": [], "_typing._DataPipeMeta.__getitem__": ["typing._type_check", "typing.ForwardRef", "<builtin>.len", "typing._ForwardRef", "_typing._DataPipeType.issubtype", "<builtin>.getattr", "typing.GenericMeta.__class__", "<builtin>.str", "<builtin>.isinstance", "<builtin>.TypeError", "_typing._DataPipeType.__init__", "<builtin>.tuple"], "typing.ForwardRef": [], "typing._ForwardRef": [], "typing._type_check": [], "typing.GenericMeta.__class__": [], "_typing._DataPipeMeta.__eq__": ["<builtin>.isinstance"], "_typing._DataPipeMeta.__hash__": ["<builtin>.hash"], "_typing._dp_init_subclass": ["typing.get_type_hints", "<builtin>.hasattr", "typing._type_repr", "typing._eval_type", "<builtin>.getattr", "_typing.issubtype", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.locals"], "typing._eval_type": [], "_typing.reinforce_type": ["typing._type_check", "typing._type_repr", "_typing.issubtype", "<builtin>.isinstance", "<builtin>.TypeError", "_typing._DataPipeType.__init__"], "cuda_to_hip_mappings": ["collections.OrderedDict"], "hipify_python": ["hipify_python.Trie.__init__", "hipify_python.Trie.pattern", "cuda_to_hip_mappings.CUDA_TO_HIP_MAPPINGS.items", "hipify_python.Trie.add", "re.compile", "<builtin>.isinstance"], "hipify_python.InputError.__init__": ["<builtin>.super"], "hipify_python.InputError.__str__": [], "hipify_python.openf": ["<builtin>.open"], "hipify_python.GeneratedFileCleaner.__init__": ["<builtin>.set"], "hipify_python.GeneratedFileCleaner.__enter__": [], "hipify_python.GeneratedFileCleaner.open": ["os.path.exists", "os.path.abspath", "hipify_python.GeneratedFileCleaner.open"], "hipify_python.GeneratedFileCleaner.makedirs": ["os.path.abspath", "hipify_python.GeneratedFileCleaner.makedirs", "os.path.split", "os.path.isdir", "os.path.exists", "os.mkdir"], "hipify_python.GeneratedFileCleaner.__exit__": ["os.unlink", "os.rmdir"], "hipify_python.match_extensions": ["<builtin>.any"], "hipify_python.matched_files_iter": ["os.path.join", "os.walk", "hipify_python.match_extensions", "hipify_python.matched_files_iter._fnmatch", "hipify_python.is_pytorch_file", "<builtin>.set", "hipify_python.is_caffe2_gpu_file", "hipify_python.is_out_of_place", "os.path.relpath"], "hipify_python.matched_files_iter._fnmatch": ["fnmatch.fnmatch", "<builtin>.any"], "hipify_python.is_pytorch_file": [], "hipify_python.is_caffe2_gpu_file": ["os.path.splitext", "os.path.basename"], "hipify_python.is_out_of_place": [], "hipify_python.preprocess_file_and_save_result": ["os.path.join", "os.path.abspath", "<builtin>.print", "hipify_python.preprocessor"], "hipify_python.preprocessor": ["hipify_python.get_hip_file_path", "os.path.join", "os.path.abspath", "hipify_python.preprocessor.mk_repl", "hipify_python.replace_math_functions", "hipify_python.replace_extern_shared", "os.path.dirname", "hipify_python.GeneratedFileCleaner.makedirs", "hipify_python.hip_header_magic", "hipify_python.is_pytorch_file", "hipify_python.match_extensions", "hipify_python.GeneratedFileCleaner.open", "<builtin>.print", "hipify_python.processKernelLaunches", "<builtin>.open", "os.path.exists"], "hipify_python.preprocess": ["hipify_python.compute_stats", "hipify_python.preprocess_file_and_save_result", "hipify_python.GeneratedFileCleaner.__init__", "<builtin>.print"], "hipify_python.compute_stats": ["<builtin>.len", "<builtin>.print"], "hipify_python.add_dim3": ["<builtin>.len", "<builtin>.range", "<builtin>.enumerate"], "hipify_python.processKernelLaunches": ["hipify_python.extract_arguments", "hipify_python.processKernelLaunches.grab_method_and_template", "<builtin>.len", "hipify_python.add_dim3", "hipify_python.processKernelLaunches.find_kernel_bounds", "<builtin>.list"], "hipify_python.processKernelLaunches.<lambda1>": [], "hipify_python.processKernelLaunches.grab_method_and_template": ["<builtin>.range"], "hipify_python.processKernelLaunches.find_kernel_bounds": ["hipify_python.InputError.__init__"], "hipify_python.extract_arguments": ["<builtin>.len"], "hipify_python.find_closure_group": ["<builtin>.len"], "hipify_python.find_bracket_group": ["hipify_python.find_closure_group"], "hipify_python.find_parentheses_group": ["hipify_python.find_closure_group"], "hipify_python.replace_math_functions": [], "hipify_python.hip_header_magic": ["<builtin>.any", "re.search"], "hipify_python.replace_extern_shared": [], "hipify_python.replace_extern_shared.<lambda1>": [], "hipify_python.get_hip_file_path": ["os.path.join", "hipify_python.is_out_of_place", "os.path.splitext", "os.path.split"], "hipify_python.Trie.__init__": [], "hipify_python.Trie.add": [], "hipify_python.Trie.dump": [], "hipify_python.Trie.quote": ["re.escape"], "hipify_python.Trie._pattern": ["<builtin>.len", "hipify_python.Trie._pattern", "<builtin>.sorted", "hipify_python.Trie.quote", "<builtin>.isinstance"], "hipify_python.Trie.pattern": ["hipify_python.Trie.dump", "hipify_python.Trie._pattern"], "cuda_to_hip_mappings.CUDA_TO_HIP_MAPPINGS.items": [], "hipify_python.preprocessor.pt_repl": [], "hipify_python.preprocessor.c2_repl": [], "hipify_python.preprocessor.mk_repl": [], "hipify_python.preprocessor.mk_repl.repl": ["hipify_python.get_hip_file_path", "os.path.join", "os.path.abspath", "os.path.dirname", "os.path.split", "<builtin>.any", "os.path.relpath", "hipify_python.preprocess_file_and_save_result", "os.path.exists"], "hipify_python.file_specific_replacement": ["hipify_python.openf", "re.escape", "re.sub"], "hipify_python.file_specific_replacement.<lambda1>": [], "hipify_python.file_add_header": ["hipify_python.openf"], "hipify_python.fix_static_global_kernels": [], "hipify_python.str2bool": ["argparse.ArgumentTypeError"], "hipify_python.hipify": ["sys.exit", "<builtin>.print", "<builtin>.set", "hipify_python.matched_files_iter", "<builtin>.list", "shutil.copytree", "os.path.relpath", "os.path.exists", "hipify_python.preprocess", "os.getcwd"], "shutil.copytree": [], "version": [], "summary": [], "summary._calc_scale_factor": ["<builtin>.isinstance"], "summary._draw_single_box": ["numpy.ceil", "PIL.ImageDraw.Draw", "PIL.ImageFont.load_default"], "PIL.ImageFont.load_default": [], "PIL.ImageDraw.Draw": [], "summary.hparams": ["<builtin>.all", "google.protobuf.struct_pb2.ListValue", "tensorboard.plugins.hparams.api_pb2.Status.Value", "tensorboard.compat.proto.summary_pb2.Summary", "tensorboard.compat.proto.summary_pb2.SummaryMetadata", "tensorboard.plugins.hparams.api_pb2.MetricName", "_convert_np.make_np", "tensorboard.plugins.hparams.plugin_data_pb2.HParamsPluginData", "tensorboard.plugins.hparams.plugin_data_pb2.SessionEndInfo", "google.protobuf.struct_pb2.Value", "<builtin>.isinstance", "tensorboard.plugins.hparams.api_pb2.Experiment", "tensorboard.plugins.hparams.api_pb2.HParamInfo", "tensorboard.compat.proto.summary_pb2.SummaryMetadata.PluginData", "tensorboard.plugins.hparams.api_pb2.DataType.Value", "<builtin>.TypeError", "tensorboard.plugins.hparams.plugin_data_pb2.SessionStartInfo", "<builtin>.ValueError", "logging.warning", "<builtin>.type", "tensorboard.plugins.hparams.api_pb2.MetricInfo", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "tensorboard.plugins.hparams.plugin_data_pb2.SessionStartInfo": [], "google.protobuf.struct_pb2.Value": [], "google.protobuf.struct_pb2.ListValue": [], "tensorboard.plugins.hparams.api_pb2.DataType.Value": [], "tensorboard.plugins.hparams.api_pb2.HParamInfo": [], "_convert_np.make_np": ["<builtin>.NotImplementedError", "<builtin>.type", "numpy.array", "numpy.isscalar", "_convert_np._prepare_pytorch", "<builtin>.isinstance", "_convert_np._prepare_caffe2"], "tensorboard.plugins.hparams.plugin_data_pb2.HParamsPluginData": [], "tensorboard.compat.proto.summary_pb2.SummaryMetadata.PluginData": [], "tensorboard.compat.proto.summary_pb2.SummaryMetadata": [], "tensorboard.plugins.hparams.api_pb2.MetricName": [], "tensorboard.plugins.hparams.api_pb2.MetricInfo": [], "tensorboard.plugins.hparams.api_pb2.Experiment": [], "tensorboard.plugins.hparams.api_pb2.Status.Value": [], "tensorboard.plugins.hparams.plugin_data_pb2.SessionEndInfo": [], "summary.scalar": ["tensorboard.compat.proto.summary_pb2.Summary", "tensorboard.compat.proto.summary_pb2.SummaryMetadata", "tensorboard.compat.proto.summary_pb2.Summary.Value", "_convert_np.make_np", "tensorboard.compat.proto.summary_pb2.SummaryMetadata.PluginData", "tensorboard.compat.proto.tensor_pb2.TensorProto", "<builtin>.float"], "tensorboard.compat.proto.tensor_pb2.TensorProto": [], "summary.histogram_raw": ["tensorboard.compat.proto.summary_pb2.Summary.Value", "tensorboard.compat.proto.summary_pb2.Summary", "tensorboard.compat.proto.summary_pb2.HistogramProto"], "summary.histogram": ["tensorboard.compat.proto.summary_pb2.Summary", "summary.make_histogram", "_convert_np.make_np", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "summary.make_histogram": ["numpy.empty", "tensorboard.compat.proto.summary_pb2.HistogramProto", "<builtin>.ValueError", "numpy.pad", "<builtin>.int", "numpy.histogram", "<builtin>.len", "numpy.cumsum", "numpy.searchsorted", "numpy.greater", "numpy.concatenate"], "numpy.greater": [], "summary.image": ["_utils.convert_to_HWC", "summary._calc_scale_factor", "tensorboard.compat.proto.summary_pb2.Summary", "summary.make_image", "_convert_np.make_np", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "_utils.convert_to_HWC": ["numpy.stack", "_utils.make_grid", "numpy.concatenate", "<builtin>.len", "<builtin>.set"], "summary.make_image": ["io.BytesIO", "tensorboard.compat.proto.summary_pb2.Summary.Image", "summary.draw_boxes", "PIL.Image.fromarray", "<builtin>.int"], "summary.image_boxes": ["_utils.convert_to_HWC", "summary._calc_scale_factor", "tensorboard.compat.proto.summary_pb2.Summary", "summary.make_image", "_convert_np.make_np", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "summary.draw_boxes": ["summary._draw_single_box", "six.moves.range"], "six.moves.range": [], "tensorboard.compat.proto.summary_pb2.Summary.Image": [], "summary.video": ["summary._calc_scale_factor", "tensorboard.compat.proto.summary_pb2.Summary", "_utils._prepare_video", "_convert_np.make_np", "summary.make_video", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "_utils._prepare_video": ["numpy.zeros", "numpy.float32", "numpy.transpose", "_utils._prepare_video.is_power2", "numpy.reshape", "numpy.concatenate", "<builtin>.int"], "summary.make_video": ["tensorboard.compat.proto.summary_pb2.Summary.Image", "<builtin>.open", "<builtin>.print", "os.remove", "tempfile.NamedTemporaryFile", "moviepy.editor.ImageSequenceClip", "logging.warning", "<builtin>.list"], "moviepy.editor.ImageSequenceClip": [], "summary.audio": ["io.BytesIO", "tensorboard.compat.proto.summary_pb2.Summary", "<builtin>.print", "wave.open", "_convert_np.make_np", "numpy.iinfo", "<builtin>.abs", "tensorboard.compat.proto.summary_pb2.Summary.Audio", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "wave.open": [], "tensorboard.compat.proto.summary_pb2.Summary.Audio": [], "summary.custom_scalars": ["tensorboard.plugins.custom_scalar.layout_pb2.MultilineChartContent", "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent", "tensorboard.compat.proto.summary_pb2.Summary", "tensorboard.compat.proto.summary_pb2.SummaryMetadata", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto", "<builtin>.len", "tensorboard.plugins.custom_scalar.layout_pb2.Category", "tensorboard.compat.proto.summary_pb2.SummaryMetadata.PluginData", "tensorboard.plugins.custom_scalar.layout_pb2.Layout", "tensorboard.plugins.custom_scalar.layout_pb2.Chart", "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent.Series", "tensorboard.compat.proto.tensor_pb2.TensorProto", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent.Series": [], "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent": [], "tensorboard.plugins.custom_scalar.layout_pb2.Chart": [], "tensorboard.plugins.custom_scalar.layout_pb2.MultilineChartContent": [], "tensorboard.plugins.custom_scalar.layout_pb2.Category": [], "tensorboard.plugins.custom_scalar.layout_pb2.Layout": [], "summary.text": ["tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim", "tensorboard.compat.proto.summary_pb2.Summary", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto", "tensorboard.compat.proto.summary_pb2.SummaryMetadata", "tensorboard.plugins.text.plugin_data_pb2.TextPluginData", "tensorboard.compat.proto.summary_pb2.SummaryMetadata.PluginData", "tensorboard.compat.proto.tensor_pb2.TensorProto", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "tensorboard.plugins.text.plugin_data_pb2.TextPluginData": [], "summary.pr_curve_raw": ["tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim", "numpy.stack", "tensorboard.compat.proto.summary_pb2.Summary", "tensorboard.compat.proto.summary_pb2.SummaryMetadata", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto", "tensorboard.compat.proto.summary_pb2.SummaryMetadata.PluginData", "tensorboard.plugins.pr_curve.plugin_data_pb2.PrCurvePluginData", "tensorboard.compat.proto.tensor_pb2.TensorProto", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "tensorboard.plugins.pr_curve.plugin_data_pb2.PrCurvePluginData": [], "summary.pr_curve": ["tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim", "tensorboard.compat.proto.summary_pb2.Summary", "<builtin>.min", "summary.compute_curve", "tensorboard.compat.proto.summary_pb2.SummaryMetadata", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto", "tensorboard.compat.proto.summary_pb2.SummaryMetadata.PluginData", "tensorboard.plugins.pr_curve.plugin_data_pb2.PrCurvePluginData", "tensorboard.compat.proto.tensor_pb2.TensorProto", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "summary.compute_curve": ["numpy.stack", "numpy.int32", "numpy.maximum", "numpy.floor", "numpy.cumsum", "numpy.histogram"], "summary._get_tensor_summary": ["tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim", "tensorboard.plugins.mesh.metadata.create_summary_metadata", "tensorboard.plugins.mesh.metadata.get_instance_name", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto", "torch.as_tensor", "tensorboard.compat.proto.tensor_pb2.TensorProto", "tensorboard.compat.proto.summary_pb2.Summary.Value"], "tensorboard.plugins.mesh.metadata.create_summary_metadata": [], "tensorboard.plugins.mesh.metadata.get_instance_name": [], "summary._get_json_config": ["json.dumps"], "summary.mesh": ["summary._get_json_config", "tensorboard.compat.proto.summary_pb2.Summary", "tensorboard.plugins.mesh.metadata.get_components_bitmask", "summary._get_tensor_summary"], "tensorboard.plugins.mesh.metadata.get_components_bitmask": [], "writer": [], "writer.FileWriter.__init__": ["tensorboard.summary.writer.event_file_writer.EventFileWriter", "<builtin>.str"], "writer.FileWriter.get_logdir": [], "writer.FileWriter.add_event": ["<builtin>.int", "time.time"], "writer.FileWriter.add_summary": ["writer.FileWriter.add_event", "tensorboard.compat.proto.event_pb2.Event"], "writer.FileWriter.add_graph": ["tensorboard.compat.proto.event_pb2.TaggedRunMetadata", "writer.FileWriter.add_event", "tensorboard.compat.proto.event_pb2.Event"], "tensorboard.compat.proto.event_pb2.TaggedRunMetadata": [], "writer.FileWriter.add_onnx_graph": ["writer.FileWriter.add_event", "tensorboard.compat.proto.event_pb2.Event"], "writer.FileWriter.flush": [], "writer.FileWriter.close": [], "writer.FileWriter.reopen": [], "writer.SummaryWriter.__init__": ["torch._C._log_api_usage_once", "datetime.datetime.now", "socket.gethostname", "os.path.join", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter._get_file_writer": ["tensorboard.compat.proto.event_pb2.SessionLog", "tensorboard.compat.proto.event_pb2.Event", "writer.FileWriter.__init__", "writer.FileWriter.add_event", "writer.FileWriter.get_logdir"], "writer.SummaryWriter._check_caffe2_blob": ["<builtin>.isinstance"], "tensorboard.compat.proto.event_pb2.SessionLog": [], "writer.SummaryWriter.get_logdir": [], "writer.SummaryWriter.add_hparams": ["writer.SummaryWriter.__init__", "summary.hparams", "time.time", "<builtin>.str", "torch._C._log_api_usage_once", "<builtin>.type", "os.path.join", "writer.FileWriter.get_logdir", "<builtin>.TypeError", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_scalar": ["writer.FileWriter.add_summary", "writer.SummaryWriter._check_caffe2_blob", "caffe2.python.workspace.FetchBlob", "summary.scalar", "torch._C._log_api_usage_once", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_scalars": ["writer.FileWriter.add_summary", "writer.SummaryWriter._check_caffe2_blob", "caffe2.python.workspace.FetchBlob", "writer.FileWriter.__init__", "summary.scalar", "time.time", "torch._C._log_api_usage_once", "writer.FileWriter.get_logdir", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_histogram": ["writer.FileWriter.add_summary", "writer.SummaryWriter._check_caffe2_blob", "caffe2.python.workspace.FetchBlob", "torch._C._log_api_usage_once", "summary.histogram", "<builtin>.isinstance", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_histogram_raw": ["writer.FileWriter.add_summary", "<builtin>.ValueError", "<builtin>.len", "torch._C._log_api_usage_once", "summary.histogram_raw", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_image": ["writer.FileWriter.add_summary", "writer.SummaryWriter._check_caffe2_blob", "caffe2.python.workspace.FetchBlob", "torch._C._log_api_usage_once", "summary.image", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_images": ["writer.FileWriter.add_summary", "writer.SummaryWriter._check_caffe2_blob", "caffe2.python.workspace.FetchBlob", "torch._C._log_api_usage_once", "summary.image", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_image_with_boxes": ["writer.FileWriter.add_summary", "writer.SummaryWriter._check_caffe2_blob", "caffe2.python.workspace.FetchBlob", "summary.image_boxes", "<builtin>.len", "torch._C._log_api_usage_once", "<builtin>.isinstance", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_figure": ["<builtin>.isinstance", "_utils.figure_to_image", "torch._C._log_api_usage_once", "writer.SummaryWriter.add_image"], "_utils.figure_to_image": ["numpy.stack", "<builtin>.isinstance", "_utils.figure_to_image.render_to_rgb"], "writer.SummaryWriter.add_video": ["writer.FileWriter.add_summary", "summary.video", "writer.SummaryWriter._get_file_writer", "torch._C._log_api_usage_once"], "writer.SummaryWriter.add_audio": ["writer.FileWriter.add_summary", "writer.SummaryWriter._check_caffe2_blob", "caffe2.python.workspace.FetchBlob", "summary.audio", "torch._C._log_api_usage_once", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_text": ["writer.FileWriter.add_summary", "summary.text", "writer.SummaryWriter._get_file_writer", "torch._C._log_api_usage_once"], "writer.SummaryWriter.add_onnx_graph": ["writer.FileWriter.add_onnx_graph", "_onnx_graph.load_onnx_graph", "writer.SummaryWriter._get_file_writer", "torch._C._log_api_usage_once"], "_onnx_graph.load_onnx_graph": ["onnx.load", "_onnx_graph.parse"], "writer.SummaryWriter.add_graph": ["_pytorch_graph.graph", "<builtin>.hasattr", "tensorboard.compat.proto.event_pb2.Event", "_caffe2_graph.nets_to_graph_def", "_caffe2_graph.protos_to_graph_def", "writer.FileWriter.add_graph", "torch._C._log_api_usage_once", "_caffe2_graph.model_to_graph_def", "writer.FileWriter.add_event", "<builtin>.isinstance", "writer.SummaryWriter._get_file_writer"], "_pytorch_graph.graph": ["<builtin>.print", "torch.onnx.select_model_mode_for_export", "tensorboard.compat.proto.config_pb2.RunMetadata", "torch._C._jit_pass_inline", "tensorboard.compat.proto.versions_pb2.VersionDef", "torch.jit.trace", "tensorboard.compat.proto.graph_pb2.GraphDef", "tensorboard.compat.proto.step_stats_pb2.StepStats", "tensorboard.compat.proto.step_stats_pb2.DeviceStepStats", "_pytorch_graph.parse"], "_caffe2_graph.nets_to_graph_def": ["copy.deepcopy", "_caffe2_graph.protos_to_graph_def"], "_caffe2_graph.protos_to_graph_def": ["_caffe2_graph._operators_to_graph_def", "copy.deepcopy", "_caffe2_graph._propagate_device_option"], "_caffe2_graph.model_to_graph_def": ["_caffe2_graph.nets_to_graph_def"], "writer.SummaryWriter._encode": ["<builtin>.ord"], "writer.SummaryWriter.add_embedding": ["<builtin>.hasattr", "_embedding.write_pbtxt", "<builtin>.len", "os.path.join", "tensorboard.plugins.projector.projector_config_pb2.ProjectorConfig", "torch._C._log_api_usage_once", "writer.FileWriter.get_logdir", "_embedding.make_tsv", "writer.SummaryWriter._get_file_writer", "_convert_np.make_np", "<builtin>.str", "google.protobuf.text_format.MessageToString", "<builtin>.Exception", "_embedding.get_embedding_info", "_embedding.make_sprite", "writer.SummaryWriter._encode", "<builtin>.print", "tensorboard.compat.tf.io.gfile.get_filesystem", "_embedding.make_mat"], "tensorboard.compat.tf.io.gfile.get_filesystem": [], "_embedding.make_tsv": ["tensorboard.compat.tf.compat.as_bytes", "<builtin>.len", "<builtin>.str", "tensorboard.compat.tf.io.gfile.get_filesystem"], "_embedding.make_sprite": ["_convert_np.make_np", "numpy.zeros", "_utils.make_grid", "tensorboard.compat.tf.io.gfile.get_filesystem", "io.BytesIO", "PIL.Image.fromarray", "<builtin>.int", "numpy.uint8", "math.ceil"], "_embedding.make_mat": ["<builtin>.str", "tensorboard.compat.tf.compat.as_bytes", "tensorboard.compat.tf.io.gfile.get_filesystem", "tensorboard.compat.tf.io.gfile.GFile"], "tensorboard.plugins.projector.projector_config_pb2.ProjectorConfig": [], "_embedding.get_embedding_info": ["tensorboard.plugins.projector.projector_config_pb2.EmbeddingInfo", "<builtin>.str"], "google.protobuf.text_format.MessageToString": [], "_embedding.write_pbtxt": ["tensorboard.compat.tf.compat.as_bytes", "tensorboard.compat.tf.io.gfile.get_filesystem"], "writer.SummaryWriter.add_pr_curve": ["writer.FileWriter.add_summary", "_convert_np.make_np", "summary.pr_curve", "torch._C._log_api_usage_once", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_pr_curve_raw": ["writer.FileWriter.add_summary", "summary.pr_curve_raw", "writer.SummaryWriter._get_file_writer", "torch._C._log_api_usage_once"], "writer.SummaryWriter.add_custom_scalars_multilinechart": ["writer.FileWriter.add_summary", "writer.SummaryWriter._get_file_writer", "torch._C._log_api_usage_once", "summary.custom_scalars"], "writer.SummaryWriter.add_custom_scalars_marginchart": ["writer.FileWriter.add_summary", "summary.custom_scalars", "<builtin>.len", "torch._C._log_api_usage_once", "writer.SummaryWriter._get_file_writer"], "writer.SummaryWriter.add_custom_scalars": ["writer.FileWriter.add_summary", "writer.SummaryWriter._get_file_writer", "torch._C._log_api_usage_once", "summary.custom_scalars"], "writer.SummaryWriter.add_mesh": ["writer.FileWriter.add_summary", "summary.mesh", "writer.SummaryWriter._get_file_writer", "torch._C._log_api_usage_once"], "writer.SummaryWriter.flush": [], "writer.SummaryWriter.close": [], "writer.SummaryWriter.__enter__": [], "writer.SummaryWriter.__exit__": ["writer.SummaryWriter.close"], "_caffe2_graph": [], "_caffe2_graph._make_unique_name": [], "_caffe2_graph._rename_tensorflow_style": ["_caffe2_graph._rename_all", "re.compile"], "_caffe2_graph._rename_tensorflow_style.f": [], "_caffe2_graph._rename_all": ["_caffe2_graph._rename_all.g", "_caffe2_graph._remap_keys", "<builtin>.set", "<builtin>.list"], "_caffe2_graph._convert_to_ssa": ["caffe2.python.core.IR", "<builtin>.set", "<builtin>.list", "_caffe2_graph._convert_to_ssa.ssa_name", "<builtin>.zip"], "_caffe2_graph._convert_to_ssa.ssa_name": ["_caffe2_graph._make_unique_name"], "_caffe2_graph._get_blob_names": ["<builtin>.set"], "_caffe2_graph._remap_keys": ["_caffe2_graph._rename_all.g"], "_caffe2_graph._rename_all.g": ["_caffe2_graph._replace_colons.f", "_caffe2_graph._add_gradient_scope.f", "_caffe2_graph._rename_tensorflow_style.f", "_caffe2_graph._make_unique_name"], "_caffe2_graph._replace_colons.f": [], "_caffe2_graph._add_gradient_scope.f": [], "_caffe2_graph._add_gradient_scope": ["_caffe2_graph._rename_all"], "_caffe2_graph._replace_colons": ["_caffe2_graph._rename_all"], "_caffe2_graph._fill_missing_operator_names": ["os.path.join", "<builtin>.set", "_caffe2_graph._make_unique_name", "os.path.dirname", "os.path.commonprefix"], "_caffe2_graph._tf_device": ["<builtin>.Exception"], "_caffe2_graph._add_tf_shape": ["tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto"], "_caffe2_graph._set_tf_attr": ["_caffe2_graph._add_tf_shape", "<builtin>.str", "<builtin>.isinstance"], "_caffe2_graph._operator_to_node": ["_caffe2_graph._add_tf_shape", "_caffe2_graph._set_tf_attr", "_caffe2_graph._tf_device", "tensorboard.compat.proto.node_def_pb2.NodeDef"], "_caffe2_graph._operator_to_node_simp": ["os.path.join", "_caffe2_graph._tf_device", "tensorboard.compat.proto.node_def_pb2.NodeDef", "_caffe2_graph._set_tf_attr", "<builtin>.list", "_caffe2_graph._make_unique_name", "os.path.commonprefix", "<builtin>.len"], "_caffe2_graph._blob_to_node": ["<builtin>.all", "_caffe2_graph._tf_device", "tensorboard.compat.proto.node_def_pb2.NodeDef", "_caffe2_graph._add_tf_shape", "<builtin>.len"], "_caffe2_graph._clear_debug_info": [], "_caffe2_graph._check_if_forward": [], "_caffe2_graph._check_if_cpu": [], "_caffe2_graph._compute_in_out": ["<builtin>.set", "<builtin>.list"], "_caffe2_graph._filter_ops": ["_caffe2_graph._check_if_forward", "_caffe2_graph._check_if_cpu", "<builtin>.list"], "_caffe2_graph._operators_to_graph_def": ["tensorboard.compat.proto.graph_pb2.GraphDef", "_caffe2_graph._convert_to_ssa", "_caffe2_graph._compute_in_out", "_caffe2_graph._add_gradient_scope", "_caffe2_graph._rename_all", "_caffe2_graph._fill_missing_operator_names", "_caffe2_graph._rename_tensorflow_style", "_caffe2_graph._operator_to_node_simp", "<builtin>.sorted", "<builtin>.set", "_caffe2_graph._replace_colons", "_caffe2_graph._get_blob_names", "<builtin>.enumerate", "_caffe2_graph._clear_debug_info", "_caffe2_graph._operator_to_node", "_caffe2_graph._filter_ops"], "_caffe2_graph._propagate_device_option": [], "_caffe2_graph._try_get_shapes": ["logging.warning", "caffe2.python.workspace.InferShapesAndTypes"], "_convert_np": [], "_convert_np._prepare_caffe2": ["caffe2.python.workspace.FetchBlob"], "_convert_np._prepare_pytorch": ["<builtin>.isinstance"], "_embedding": [], "tensorboard.compat.tf.compat.as_bytes": [], "_utils.make_grid": ["numpy.zeros", "<builtin>.float", "<builtin>.min", "<builtin>.range", "numpy.concatenate", "<builtin>.int", "<builtin>.isinstance", "numpy.ceil"], "numpy.uint8": [], "tensorboard.plugins.projector.projector_config_pb2.EmbeddingInfo": [], "tensorboard.compat.tf.io.gfile.GFile": [], "_onnx_graph": [], "_onnx_graph.parse": ["tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto", "<builtin>.str", "itertools.chain", "tensorboard.compat.proto.versions_pb2.VersionDef", "tensorboard.compat.proto.attr_value_pb2.AttrValue", "tensorboard.compat.proto.graph_pb2.GraphDef", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim", "<builtin>.print", "tensorboard.compat.proto.node_def_pb2.NodeDef"], "tensorboard.compat.proto.attr_value_pb2.AttrValue": [], "tensorboard.compat.proto.versions_pb2.VersionDef": [], "_proto_graph": [], "_proto_graph.attr_value_proto": ["tensorboard.compat.proto.attr_value_pb2.AttrValue", "_proto_graph.tensor_shape_proto", "tensorboard.compat.proto.attr_value_pb2.AttrValue.ListValue"], "_proto_graph.tensor_shape_proto": ["tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto.Dim", "tensorboard.compat.proto.tensor_shape_pb2.TensorShapeProto"], "tensorboard.compat.proto.attr_value_pb2.AttrValue.ListValue": [], "_proto_graph.node_proto": ["_proto_graph.attr_value_proto", "<builtin>.isinstance", "tensorboard.compat.proto.node_def_pb2.NodeDef"], "_pytorch_graph": [], "_pytorch_graph.NodeBase.__init__": [], "_pytorch_graph.NodeBase.__repr__": ["<builtin>.type", "<builtin>.dir", "<builtin>.getattr", "<builtin>.str"], "_pytorch_graph.NodePy.__init__": ["<builtin>.super", "<builtin>.setattr", "<builtin>.list", "<builtin>.getattr"], "_pytorch_graph.NodePyIO.__init__": ["<builtin>.super"], "_pytorch_graph.NodePyOP.__init__": ["<builtin>.super", "<builtin>.str"], "_pytorch_graph.GraphPy.__init__": ["collections.OrderedDict"], "_pytorch_graph.GraphPy.append": ["<builtin>.isinstance"], "_pytorch_graph.GraphPy.printall": ["<builtin>.print"], "_pytorch_graph.GraphPy.find_common_root": [], "_pytorch_graph.GraphPy.populate_namespace_from_OP_to_IO": ["<builtin>.type", "_pytorch_graph.GraphPy.find_common_root", "<builtin>.hasattr", "<builtin>.zip", "_pytorch_graph.NodeBase.__init__"], "_pytorch_graph.GraphPy.to_proto": ["_proto_graph.node_proto"], "_pytorch_graph.parse": ["<builtin>.enumerate", "_pytorch_graph.GraphPy.to_proto", "_pytorch_graph.GraphPy.populate_namespace_from_OP_to_IO", "_pytorch_graph.GraphPy.__init__", "<builtin>.dict", "<builtin>.len", "_pytorch_graph.NodePyOP.__init__", "<builtin>.any", "_pytorch_graph.parse.parse_traced_name", "_pytorch_graph.GraphPy.append", "_pytorch_graph.NodePyIO.__init__"], "_pytorch_graph.parse.parse_traced_name": ["<builtin>.isinstance", "<builtin>.getattr"], "torch.onnx.select_model_mode_for_export": [], "tensorboard.compat.proto.step_stats_pb2.DeviceStepStats": [], "tensorboard.compat.proto.step_stats_pb2.StepStats": [], "tensorboard.compat.proto.config_pb2.RunMetadata": [], "_utils.figure_to_image.render_to_rgb": ["numpy.moveaxis", "numpy.frombuffer", "matplotlib.pyplot.close", "matplotlib.backends.backend_agg.FigureCanvasAgg"], "matplotlib.backends.backend_agg.FigureCanvasAgg": [], "numpy.moveaxis": [], "matplotlib.pyplot.close": [], "_utils._prepare_video.is_power2": [], "timer_interface": ["typing.NamedTuple"], "timer_interface.FunctionCounts.__iter__": [], "timer_interface.FunctionCounts.__len__": ["<builtin>.len"], "timer_interface.FunctionCounts.__getitem__": ["typing.cast", "<builtin>.isinstance"], "timer_interface.FunctionCounts.__repr__": ["<builtin>.max", "<builtin>.int", "timer_interface.FunctionCounts.__iter__", "<builtin>.str", "<builtin>.len"], "timer_interface.FunctionCounts.__add__": ["timer_interface.FunctionCounts._merge"], "timer_interface.FunctionCounts.__add__.<lambda1>": [], "timer_interface.FunctionCounts._merge": ["timer_interface.FunctionCounts._from_dict", "collections.defaultdict", "timer_interface.FunctionCounts.__iter__"], "timer_interface.FunctionCounts.__sub__": ["timer_interface.FunctionCounts._merge"], "timer_interface.FunctionCounts.__sub__.<lambda1>": [], "timer_interface.FunctionCounts.__mul__": ["<builtin>.int", "timer_interface.FunctionCounts._from_dict"], "timer_interface.FunctionCounts._from_dict": ["<builtin>.tuple", "<builtin>.sorted"], "timer_interface.FunctionCounts.transform": ["collections.defaultdict", "timer_interface.FunctionCounts._from_dict"], "timer_interface.FunctionCounts.filter": ["<builtin>.tuple"], "timer_interface.FunctionCounts.sum": ["timer_interface.FunctionCounts.sum"], "timer_interface.FunctionCounts.denoise": ["timer_interface.FunctionCounts.filter"], "timer_interface.FunctionCounts.denoise.<lambda1>": [], "timer_interface.CallgrindStats.__repr__": ["textwrap.dedent", "<builtin>.super", "timer_interface.CallgrindStats.counts"], "timer_interface.CallgrindStats.counts": [], "timer_interface.CallgrindStats.stats": [], "timer_interface.CallgrindStats.delta": ["timer_interface.CallgrindStats.stats"], "timer_interface.CallgrindStats.as_standardized": ["timer_interface.CallgrindStats.as_standardized.strip"], "timer_interface.CallgrindStats.as_standardized.strip": ["re.escape"], "timer_interface.CallgrindStats.as_standardized.strip.<lambda1>": ["re.sub"], "timer_interface.CopyIfCallgrind.__init__": ["<builtin>.isinstance", "<builtin>.any"], "timer_interface.CopyIfCallgrind.value": [], "timer_interface.CopyIfCallgrind.setup": [], "timer_interface.CopyIfCallgrind.serialization": [], "timer_interface.CopyIfCallgrind.unwrap_all": ["<builtin>.isinstance"], "timer_interface.GlobalsBridge.__init__": ["os.path.exists", "os.mkdir", "<builtin>.isinstance", "<builtin>.ValueError"], "timer_interface.GlobalsBridge.construct": ["<builtin>.NotImplementedError", "torch.jit.save", "os.path.join", "pickle.dump", "torch.save", "<builtin>.repr", "textwrap.dedent", "<builtin>.open"], "timer_interface._ValgrindWrapper.__init__": ["re.search", "torch.__config__.show", "<builtin>.hasattr", "<builtin>.all", "<builtin>.print", "subprocess.run", "torch.utils.benchmark.utils.cpp_jit.get_compat_bindings", "torch._C._valgrind_supported_platform"], "torch._C._valgrind_supported_platform": [], "torch.utils.benchmark.utils.cpp_jit.get_compat_bindings": [], "torch.__config__.show": [], "timer_interface._ValgrindWrapper._validate": ["<builtin>.OSError"], "timer_interface._ValgrindWrapper.collect_callgrind": ["<builtin>.tuple", "<builtin>.len", "timer_interface._ValgrindWrapper._validate", "timer_interface._ValgrindWrapper._invoke"], "timer_interface._ValgrindWrapper._invoke": ["torch.utils.benchmark.utils.common._make_temp_dir", "os.path.join", "timer_interface._ValgrindWrapper._invoke.read_results", "<builtin>.tuple", "timer_interface._ValgrindWrapper._construct_script", "<builtin>.str", "<builtin>.min", "torch.utils.benchmark.utils.cpp_jit.compile_callgrind_template", "<builtin>.range", "os.path.exists", "shutil.rmtree", "os.path.split", "<builtin>.OSError", "shutil.copy", "timer_interface.GlobalsBridge.__init__", "<builtin>.open", "timer_interface._ValgrindWrapper._invoke.run"], "timer_interface._ValgrindWrapper._invoke.run": ["subprocess.run", "<builtin>.open"], "timer_interface._ValgrindWrapper._construct_script": ["timer_interface._ValgrindWrapper._construct_script.block_stmt", "textwrap.indent", "<builtin>.min", "<builtin>.repr", "textwrap.dedent"], "torch.utils.benchmark.utils.cpp_jit.compile_callgrind_template": [], "timer_interface._ValgrindWrapper._invoke.parse_output": ["<builtin>.int", "re.compile", "<builtin>.tuple", "re.match", "<builtin>.sorted", "timer_interface._ValgrindWrapper._invoke.run"], "timer_interface._ValgrindWrapper._invoke.read_results": ["timer_interface._ValgrindWrapper._invoke.parse_output", "<builtin>.open"], "timer_interface._ValgrindWrapper._construct_script.block_stmt": ["textwrap.indent"], "timer_interface.wrapper_singleton": ["timer_interface._ValgrindWrapper.__init__"], "platform.python_version": [], "setup.report": ["<builtin>.print"], "sysconfig.get_config_var": [], "tools.generate_torch_version.get_torch_version": ["os.getenv", "pathlib.Path", "tools.generate_torch_version.get_sha", "<builtin>.open", "<builtin>.int", "<builtin>.str"], "tools.setup_helpers.cmake.CMake.__init__": ["tools.setup_helpers.cmake.CMake._get_cmake_command"], "setup.get_submodule_folders": ["<builtin>.open", "os.path.join", "os.path.exists"], "setup.check_submodules": ["<builtin>.all", "os.getenv", "setup.check_submodules.check_for_files", "sys.exit", "<builtin>.bool", "setup.get_submodule_folders", "time.time", "<builtin>.print", "os.path.join", "subprocess.check_call", "setup.check_submodules.not_exists_or_empty"], "setup.check_submodules.check_for_files": ["setup.report", "sys.exit", "os.path.exists", "os.path.join", "<builtin>.any"], "setup.check_submodules.not_exists_or_empty": ["<builtin>.len", "os.listdir", "os.path.exists", "os.path.isdir"], "setup.build_deps": ["build_pytorch_libs.build_caffe2", "setup.report", "filecmp.cmp", "os.remove", "sys.exit", "os.path.exists", "<builtin>.zip", "setup.check_pydep", "setup.check_submodules", "shutil.copyfile"], "setup.check_pydep": ["<builtin>.RuntimeError", "importlib.import_module"], "filecmp.cmp": [], "setup.build_ext._embed_libiomp": ["subprocess.check_output", "os.path.join", "<builtin>.enumerate", "os.path.exists"], "setup.build_ext.run": ["os.getenv", "setup.report", "setup.build_ext._embed_libiomp", "os.path.dirname", "os.path.exists", "os.environ.get", "os.makedirs", "os.path.join", "collections.defaultdict", "<builtin>.str"], "setup.build_ext.run.<lambda1>": [], "setup.build_ext.build_extensions": ["sysconfig.get_path", "<builtin>.len", "setup.build_ext.create_compile_commands", "setup.report", "os.path.dirname", "os.path.exists", "os.path.realpath", "os.path.join", "os.makedirs"], "setup.build_ext.create_compile_commands": ["json.dumps", "os.path.exists", "setup.build_ext.create_compile_commands.load", "<builtin>.open", "glob.glob"], "setup.build_ext.get_outputs": ["os.path.join", "setup.report"], "setup.build_ext.create_compile_commands.load": ["<builtin>.open", "json.load"], "setup.concat_license_files.__init__": [], "setup.concat_license_files.__enter__": ["<builtin>.open"], "setup.concat_license_files.__exit__": ["<builtin>.open"], "setup.wheel_concatenate.run": ["<builtin>.super", "setup.concat_license_files.__init__"], "setup.install.run": ["<builtin>.super"], "setup.clean.initialize_options": [], "setup.clean.finalize_options": [], "setup.clean.run": ["re.compile", "os.remove", "<builtin>.filter", "shutil.rmtree", "<builtin>.open", "glob.glob"], "setup.sdist.run": ["<builtin>.super", "setup.concat_license_files.__init__"], "setup.configure_extension_build": ["subprocess.check_output", "os.getenv", "tools.setup_helpers.env.BuildType.is_rel_with_deb_info", "os.path.dirname", "setuptools.Extension", "tools.setup_helpers.env.BuildType.is_debug", "setup.configure_extension_build.make_relative_rpath_args", "collections.defaultdict", "setuptools.find_packages", "<builtin>.str"], "setup.configure_extension_build.<lambda1>": [], "setup.configure_extension_build.<lambda2>": [], "tools.setup_helpers.env.BuildType.is_debug": [], "tools.setup_helpers.env.BuildType.is_rel_with_deb_info": [], "setup.configure_extension_build.make_relative_rpath_args": [], "setup.print_box": ["<builtin>.print", "<builtin>.len", "<builtin>.max"], "setuptools.dist.Distribution": [], "tools.setup_helpers.cmake": ["which", "env.check_negative_env_flag"], "tools.setup_helpers.cmake._mkdir_p": ["os.makedirs"], "tools.setup_helpers.cmake.convert_cmake_value_to_python_value": [], "tools.setup_helpers.cmake.get_cmake_cache_variables_from_file": ["<builtin>.dict", "<builtin>.repr", "<builtin>.ValueError", "tools.setup_helpers.cmake.convert_cmake_value_to_python_value", "<builtin>.enumerate", "re.match"], "tools.setup_helpers.cmake.CMake._get_cmake_command": ["which", "tools.setup_helpers.cmake.CMake._get_version", "setuptools.distutils.version.LooseVersion", "<builtin>.RuntimeError"], "tools.setup_helpers.cmake.CMake._cmake_cache_file": ["os.path.join"], "tools.setup_helpers.cmake.CMake._get_version": ["subprocess.check_output", "<builtin>.RuntimeError", "setuptools.distutils.version.LooseVersion"], "tools.setup_helpers.cmake.CMake.run": ["<builtin>.print", "sys.exit", "subprocess.check_call"], "tools.setup_helpers.cmake.CMake.defines": ["<builtin>.sorted"], "tools.setup_helpers.cmake.CMake.get_cmake_cache_variables": ["<builtin>.open", "tools.setup_helpers.cmake.get_cmake_cache_variables_from_file"], "tools.setup_helpers.cmake.CMake.generate": ["sysconfig.get_path", "os.getenv", "<builtin>.len", "<builtin>.set", "os.path.dirname", "os.remove", "sys.exit", "os.path.exists", "tools.setup_helpers.cmake._mkdir_p", "tools.setup_helpers.cmake.CMake.defines", "tools.setup_helpers.cmake.CMake.run", "os.path.join", "os.path.abspath", "<builtin>.print", "os.path.isfile", "<builtin>.ord", "<builtin>.str"], "tools.setup_helpers.cmake.CMake.build": ["tools.setup_helpers.cmake.CMake.run", "multiprocessing.cpu_count", "os.getenv", "<builtin>.str"], "tools.setup_helpers.numpy_": ["numpy.get_include", "env.check_negative_env_flag"], "tools.setup_helpers.env": ["tools.setup_helpers.env.check_env_flag", "tools.setup_helpers.env.BuildType.__init__", "os.path.dirname", "struct.calcsize", "os.path.join", "platform.system", "<builtin>.any"], "tools.setup_helpers.env.check_env_flag": ["os.getenv"], "tools.setup_helpers.env.check_negative_env_flag": ["os.getenv"], "tools.setup_helpers.env.gather_paths": ["itertools.chain", "os.getenv", "<builtin>.list"], "tools.setup_helpers.env.lib_paths_from_base": ["os.path.join"], "tools.setup_helpers.env.BuildType.__init__": ["cmake.get_cmake_cache_variables_from_file", "typing.cast", "os.path.isfile", "os.environ.get", "<builtin>.open", "os.path.join"], "tools.setup_helpers.env.BuildType.is_release": [], "tools.generate_torch_version": ["pathlib.Path", "tools.generate_torch_version.get_torch_version", "argparse.ArgumentParser", "<builtin>.bool", "<builtin>.repr", "tools.generate_torch_version.get_sha", "<builtin>.open"], "tools.generate_torch_version.get_sha": ["subprocess.check_output"], "tools.build_pytorch_libs": [], "tools.setup_helpers": [], "tools.setup_helpers.which": ["os.access", "os.path.join", "os.environ.get", "os.path.isdir"], "random_topo_test": ["random_topo_test.parse_args", "torch._C._jit_set_nvfuser_enabled", "<builtin>.len", "torch._C._jit_set_profiling_mode", "<builtin>.str", "numpy.random.seed", "random_topo_test.runTest", "torch._C._jit_override_can_fuse_on_gpu", "torch._C._jit_set_profiling_executor", "numpy.random.randint", "<builtin>.print", "torch._C._jit_override_can_fuse_on_cpu"], "random_topo_test.get_broadcast_compatible_shape": ["<builtin>.len", "numpy.random.choice", "<builtin>.range", "<builtin>.min", "numpy.random.randint"], "random_topo_test.random_topology_test": ["<builtin>.tuple", "numpy.random.random", "<builtin>.len", "numpy.random.choice", "numpy.random.seed", "<builtin>.int", "<builtin>.range", "numpy.random.randint", "<builtin>.print", "<builtin>.list", "random_topo_test.random_topology_test.get_root"], "random_topo_test.random_topology_test.get_root": ["random_topo_test.random_topology_test.get_root"], "random_topo_test.prepareInputTensorsToRandomTopoTest": ["random_topo_test.get_broadcast_compatible_shape", "torch.randn", "torch.manual_seed", "numpy.random.choice", "torch.tensor", "numpy.random.seed", "<builtin>.int", "<builtin>.range", "numpy.random.randint", "<builtin>.print", "<builtin>.min", "torch.arange"], "random_topo_test.reproString": [], "random_topo_test.runDefaultTestWithSeed": ["<builtin>.zip", "torch.jit.trace", "random_topo_test.random_topology_test", "random_topo_test.prepareInputTensorsToRandomTopoTest"], "random_topo_test.runTest": ["<builtin>.Exception", "random_topo_test.reproString", "random_topo_test.prepareInputTensorsToRandomTopoTest", "torch.jit.trace", "<builtin>.zip", "<builtin>.print", "random_topo_test.random_topology_test"], "random_topo_test.parse_args": ["argparse.ArgumentParser"], "network1": [], "network1.Net.__init__": ["<builtin>.super", "torch.nn.Linear"], "network2": [], "network2.Net.__init__": ["torch.nn.ReLU", "<builtin>.super", "torch.nn.Linear"], "ddp_under_dist_autograd_test": ["<builtin>.range", "threading.Condition", "<builtin>.list", "ddp_under_dist_autograd_test.init_logger"], "ddp_under_dist_autograd_test.DdpMode": ["enum.auto"], "ddp_under_dist_autograd_test.init_logger": ["logging.StreamHandler", "logging.Formatter", "logging.getLogger"], "logging.Formatter": [], "ddp_under_dist_autograd_test._call_method": [], "ddp_under_dist_autograd_test._remote_method": ["torch.distributed.rpc.rpc_sync", "<builtin>.list", "<builtin>.tuple"], "ddp_under_dist_autograd_test._remote_method_async": ["torch.distributed.rpc.rpc_async", "<builtin>.list", "<builtin>.tuple"], "ddp_under_dist_autograd_test.RemoteEM.__init__": ["torch.tensor", "torch.nn.EmbeddingBag", "<builtin>.super"], "ddp_under_dist_autograd_test.RemoteEM.forward": ["<builtin>.range", "torch.LongTensor"], "ddp_under_dist_autograd_test.getLinear": ["torch.ones", "torch.nn.Linear"], "ddp_under_dist_autograd_test.RemoteNet.__init__": ["ddp_under_dist_autograd_test.getLinear", "torch.nn.ReLU", "<builtin>.super"], "ddp_under_dist_autograd_test.RemoteNet.forward": [], "ddp_under_dist_autograd_test.HybridModel.__init__": ["torch.nn.parallel.DistributedDataParallel", "<builtin>.list", "torch.nn.Module.parameters", "<builtin>.super", "<builtin>.len", "<builtin>.tuple", "ddp_under_dist_autograd_test.getLinear"], "ddp_under_dist_autograd_test.HybridModel.forward": ["torch.cat", "ddp_under_dist_autograd_test._remote_method"], "ddp_under_dist_autograd_test.Trainer.__init__": ["torch.distributed.new_group", "<builtin>.len", "ddp_under_dist_autograd_test.HybridModel.__init__", "torch.nn.parallel.DistributedDataParallel"], "ddp_under_dist_autograd_test.Trainer.destroy_pg": ["torch.distributed.destroy_process_group"], "ddp_under_dist_autograd_test.Trainer.train_batch": ["contextlib.suppress", "typing.NamedTuple.__init__", "torch.distributed.autograd.context", "torch.distributed.autograd.get_gradients", "ddp_under_dist_autograd_test.HybridModel.forward", "<builtin>.zip", "torch.nn.Module.join", "torch.distributed.autograd.backward", "<builtin>.tuple", "torch.split", "<builtin>.len"], "torch.nn.Module.join": [], "ddp_under_dist_autograd_test.get_training_examples": ["torch.tensor", "<builtin>.int", "torch.zeros", "<builtin>.range", "typing.NamedTuple.__init__"], "ddp_under_dist_autograd_test.set_shutdown_signal": [], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.world_size": [], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.remote_worker_name": [], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.trainer_name": [], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._remote_worker_process": ["torch.distributed.new_group", "torch.distributed.destroy_process_group", "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format", "torch.distributed.init_process_group"], "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format": [], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._trainer_process": ["torch.distributed.destroy_process_group", "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format", "torch.distributed.init_process_group"], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._master_process": ["ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.do_test_on_master", "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.remote_worker_name", "torch.distributed.rpc.remote", "torch.distributed.init_process_group", "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format"], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.do_test_on_master": ["torch.distributed.new_group", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertNotEqual", "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.trainer_name", "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.remote_worker_name", "torch.distributed.rpc.remote", "ddp_under_dist_autograd_test.get_training_examples", "torch.zeros_like", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.rpc_sync", "<builtin>.range", "ddp_under_dist_autograd_test._remote_method_async", "<builtin>.enumerate", "<builtin>.len"], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._do_test": ["ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._master_process", "<builtin>.RuntimeError", "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._remote_worker_process", "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._trainer_process"], "torch.testing._internal.common_distributed.requires_gloo": [], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest": ["torch.testing._internal.dist_utils.dist_init", "torch.testing._internal.common_distributed.requires_gloo"], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.test_backward_no_ddp": ["ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._do_test"], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.test_backward_ddp_outside": ["ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._do_test"], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.test_backward_ddp_outside_uneven_inputs": ["ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._do_test"], "ddp_under_dist_autograd_test.DdpUnderDistAutogradTest.test_backward_ddp_inside": ["ddp_under_dist_autograd_test.DdpUnderDistAutogradTest._do_test"], "ddp_under_dist_autograd_test.CommonDdpComparisonTest.world_size": [], "ddp_under_dist_autograd_test.CommonDdpComparisonTest.trainer_name": [], "ddp_under_dist_autograd_test.CommonDdpComparisonTest.get_remote_grads": ["torch.distributed.autograd.get_gradients"], "ddp_under_dist_autograd_test.DdpComparisonTest._run_test_ddp_comparision": ["torch.nn.parallel.DistributedDataParallel", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertTrue", "torch.distributed.autograd.get_gradients", "torch.distributed.autograd.context", "torch.distributed.init_process_group", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.destroy_process_group", "<builtin>.range", "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format", "torch.distributed.autograd.backward", "torch.rand", "<builtin>.enumerate", "torch.nn.Linear", "torch.manual_seed", "<builtin>.len"], "ddp_under_dist_autograd_test.DdpComparisonTest": ["torch.testing._internal.dist_utils.dist_init", "torch.testing._internal.common_distributed.requires_gloo"], "ddp_under_dist_autograd_test.DdpComparisonTest.test_ddp_comparison": ["ddp_under_dist_autograd_test.DdpComparisonTest._run_test_ddp_comparision"], "ddp_under_dist_autograd_test.DdpComparisonTest.test_ddp_comparison_uneven_inputs": ["ddp_under_dist_autograd_test.DdpComparisonTest._run_test_ddp_comparision"], "ddp_under_dist_autograd_test.DdpComparisonTest.test_ddp_dist_autograd_sparse_grads": ["torch.nn.parallel.DistributedDataParallel", "torch.distributed.autograd.get_gradients", "torch.distributed.autograd.context", "torch.distributed.init_process_group", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.autograd.backward", "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format", "torch.LongTensor", "torch.nn.EmbeddingBag", "torch.manual_seed", "<builtin>.len"], "ddp_under_dist_autograd_test.DdpComparisonTest.test_ddp_dist_autograd_local_vs_remote": ["torch.nn.parallel.DistributedDataParallel", "torch.distributed.autograd.get_gradients", "torch.distributed.autograd.context", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.backward", "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format", "torch.rand", "torch.distributed.nn.RemoteModule", "torch.nn.Linear", "torch.manual_seed"], "ddp_under_dist_autograd_test.CudaDdpComparisonTest": ["torch.testing._internal.dist_utils.dist_init", "torch.testing._internal.common_distributed.skip_if_rocm", "torch.testing._internal.common_distributed.requires_nccl", "torch.testing._internal.common_distributed.skip_if_lt_x_gpu"], "torch.testing._internal.common_distributed.requires_nccl": [], "torch.testing._internal.common_distributed.skip_if_rocm": [], "ddp_under_dist_autograd_test.CudaDdpComparisonTest.test_ddp_dist_autograd_local_vs_remote_gpu": ["torch.nn.parallel.DistributedDataParallel", "torch.distributed.autograd.get_gradients", "torch.distributed.autograd.context", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.distributed.rpc.rpc_sync", "torch.distributed.autograd.backward", "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format", "torch.rand", "torch.distributed.nn.RemoteModule", "torch.nn.Linear", "torch.manual_seed"], "distributed_test": ["distributed_test.Net.__init__", "contextlib.contextmanager", "torch.randn", "os.getenv", "torch.nn.SyncBatchNorm", "distributed_test.Foo.__init__", "collections.namedtuple", "distributed_test.BatchNormNet.__init__", "torch.testing._internal.common_utils.sandcastle_skip_if"], "distributed_test.Foo.__init__": [], "distributed_test.Foo.__eq__": ["distributed_test.Foo.__eq__.eq"], "distributed_test.Foo.__eq__.eq": ["<builtin>.isinstance", "torch.equal"], "distributed_test.get_profiling_event": ["<builtin>.isinstance"], "distributed_test._FC2.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test._FC2.forward": [], "distributed_test.Net.__init__": ["<builtin>.super", "torch.tensor", "torch.nn.Linear", "distributed_test._FC2.__init__", "torch.nn.ReLU", "torch.nn.Parameter"], "distributed_test.Net.forward": ["torch.nn.functional.softmax", "distributed_test._FC2.__init__"], "distributed_test.LargeNet.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.LargeNet.forward": [], "distributed_test.Task.__init__": ["<builtin>.super", "torch.nn.Parameter", "torch.ones"], "distributed_test.Task.forward": [], "distributed_test.BatchNormNet.__init__": ["<builtin>.super", "torch.nn.BatchNorm1d", "torch.nn.Linear"], "distributed_test.BatchNormNet.forward": ["torch.nn.functional.softmax", "torch.reshape"], "distributed_test.UnusedParamTwoLinLayerNet.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.UnusedParamTwoLinLayerNet.forward": [], "distributed_test.DictOutputModule.__init__": ["<builtin>.super", "distributed_test.UnusedParamTwoLinLayerNet.__init__"], "distributed_test.DictOutputModule.forward": ["distributed_test.UnusedParamTwoLinLayerNet.__init__"], "distributed_test.TwoLinLayerNet.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.TwoLinLayerNet.forward": [], "distributed_test.EmbeddingNet.__init__": ["<builtin>.super", "torch.nn.Embedding", "torch.nn.Linear"], "distributed_test.EmbeddingNet.forward": [], "distributed_test.ControlFlowToyModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.ControlFlowToyModel.forward": ["torch.ones", "torch.equal", "torch.nn.functional.relu"], "distributed_test.get_timeout": [], "distributed_test.require_backend": ["torch.testing._internal.common_utils.sandcastle_skip"], "distributed_test.require_backend.<lambda1>": [], "distributed_test.require_backends_available": ["distributed_test.require_backends_available.check", "torch.distributed.Backend", "<builtin>.all", "torch.testing._internal.common_utils.sandcastle_skip"], "distributed_test.require_backends_available.check": ["torch.distributed.is_mpi_available", "torch.distributed.is_gloo_available", "torch.distributed.is_nccl_available"], "torch.distributed.Backend": [], "distributed_test.require_backends_available.<lambda1>": [], "distributed_test.require_world_size": ["torch.testing._internal.common_utils.sandcastle_skip", "<builtin>.int"], "distributed_test.require_world_size.<lambda1>": [], "distributed_test.apply_hack_for_nccl": [], "distributed_test._lock": ["msvcrt.locking", "<builtin>.open", "fcntl.flock", "os.path.join"], "msvcrt.locking": [], "fcntl.flock": [], "distributed_test._build_tensor": ["torch.empty"], "distributed_test._build_multidim_tensor": ["torch.empty", "<builtin>.range"], "distributed_test._create_autograd_profiler": ["torch.autograd.profiler.profile"], "distributed_test._create_torch_profiler": ["torch.profiler.profile"], "torch.profiler.profile": [], "distributed_test.Barrier.init": ["os.listdir", "os.unlink", "os.path.join"], "distributed_test.Barrier.sync": ["os.getpid", "distributed_test._lock", "<builtin>.str", "os.path.join", "<builtin>.int", "<builtin>.RuntimeError", "time.time", "time.sleep", "<builtin>.open", "os.listdir", "torch.distributed.get_world_size"], "distributed_test.TestDistBackend.setUpClass": ["<builtin>.super", "<builtin>.str"], "distributed_test.TestDistBackend.setUp": ["<builtin>.super", "torch.testing._internal.common_distributed.initialize_temp_directories", "distributed_test.Barrier.init"], "torch.testing._internal.common_distributed.initialize_temp_directories": [], "distributed_test.TestDistBackend.tearDown": ["torch.testing._internal.common_distributed.cleanup_temp_dir", "<builtin>.super"], "torch.testing._internal.common_distributed.cleanup_temp_dir": [], "distributed_test.TestDistBackend.init_method": [], "distributed_test.TestDistBackend._run": ["<builtin>.int", "torch.testing._internal.common_distributed.MultiProcessTestCase.__init__", "datetime.timedelta", "torch.distributed.init_process_group", "torch.distributed.destroy_process_group", "sys.exit", "torch.cuda.is_available", "torch.cuda.device_count"], "torch.testing._internal.common_distributed.MultiProcessTestCase.__init__": [], "distributed_test.TestDistBackend.world_size": [], "distributed_test.DistributedTest._DistTestBase._barrier": ["distributed_test.Barrier.sync"], "distributed_test.DistributedTest._DistTestBase._init_group_test": ["torch.distributed.get_rank", "torch.distributed.new_group"], "distributed_test.DistributedTest._DistTestBase._init_full_group_test": ["<builtin>.range", "torch.distributed.get_rank", "torch.distributed.new_group", "<builtin>.list", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase._init_global_test": ["torch.distributed.get_rank", "<builtin>.list", "<builtin>.range", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper": ["torch.cuda.device_count", "distributed_test.apply_hack_for_nccl", "<builtin>.range", "<builtin>.list", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_dump_DDP_relevant_env_vars": ["distributed_test.DistributedTest._DistTestBase.test_dump_DDP_relevant_env_vars.format_line", "torch.nn.parallel.distributed._dump_DDP_relevant_env_vars", "torch.testing._internal.common_distributed.captured_output"], "torch.nn.parallel.distributed._dump_DDP_relevant_env_vars": [], "distributed_test.DistributedTest._DistTestBase.test_dump_DDP_relevant_env_vars.format_line": [], "distributed_test.DistributedTest._DistTestBase.test_get_rank": ["os.getpid", "<builtin>.len", "<builtin>.set", "<builtin>.str", "os.path.join", "<builtin>.int", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_rank", "os.unlink", "<builtin>.open", "os.listdir", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_get_backend": ["torch.distributed.get_rank", "torch.distributed.new_group", "torch.distributed.get_backend", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_Backend_enum_class": ["torch.distributed.Backend"], "distributed_test.DistributedTest._DistTestBase.test_destroy_group": ["torch.distributed.destroy_process_group", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.new_group", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_get_rank_size_group": ["<builtin>.range", "torch.distributed.get_rank", "torch.distributed.new_group", "<builtin>.list", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_destroy_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "torch.distributed.destroy_process_group", "distributed_test.DistributedTest._DistTestBase._barrier"], "distributed_test.DistributedTest._DistTestBase.test_get_rank_size_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "torch.distributed.get_rank", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase._test_barrier_timeout": ["torch.distributed.get_rank", "torch.distributed._get_debug_mode", "time.time", "torch.distributed.barrier"], "distributed_test.DistributedTest._DistTestBase": ["torch.testing._internal.common_utils.sandcastle_skip_if", "distributed_test.require_world_size", "<builtin>.int", "distributed_test.skipIfNoTorchVision", "torch.testing._internal.common_distributed.with_dist_debug_levels", "torch.testing._internal.common_distributed.require_n_gpus_for_nccl_backend", "torch.testing._internal.common_distributed.with_nccl_blocking_wait", "distributed_test.require_world_size.<lambda1>", "torch.testing._internal.common_distributed.skip_if_no_gpu", "torch.testing._internal.common_distributed.requires_nccl_version", "distributed_test.require_backends_available.<lambda1>", "distributed_test.require_backend.<lambda1>", "torch.testing._internal.common_distributed.skip_if_lt_x_gpu", "torch.testing._internal.common_distributed.skip_if_rocm", "distributed_test.require_backends_available", "distributed_test.require_backend", "torch.testing._internal.common_distributed.skip_if_small_worldsize", "torch.testing._internal.common_distributed.nccl_skip_if_lt_x_gpu"], "distributed_test.DistributedTest._DistTestBase.test_barrier_timeout_global": ["distributed_test.DistributedTest._DistTestBase._test_barrier_timeout", "<builtin>.int", "distributed_test.DistributedTest._DistTestBase._barrier", "datetime.timedelta", "torch.distributed.init_process_group", "torch.distributed.destroy_process_group"], "torch.testing._internal.common_distributed.skip_if_small_worldsize": [], "distributed_test.DistributedTest._DistTestBase.test_barrier_timeout_group": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "datetime.timedelta", "distributed_test.DistributedTest._DistTestBase._test_barrier_timeout"], "distributed_test.DistributedTest._DistTestBase.test_barrier_timeout_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "datetime.timedelta", "distributed_test.DistributedTest._DistTestBase._test_barrier_timeout"], "distributed_test.DistributedTest._DistTestBase._test_group_override_backend": ["<builtin>.len", "<builtin>.isinstance", "distributed_test.DistributedTest._DistTestBase._init_group_test", "torch.distributed.broadcast", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_full_group_test", "torch.distributed.get_rank", "torch.cuda.set_device", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_backend_group": ["distributed_test.DistributedTest._DistTestBase._test_group_override_backend"], "distributed_test.DistributedTest._DistTestBase.test_backend_full_group": ["distributed_test.DistributedTest._DistTestBase._test_group_override_backend"], "distributed_test.DistributedTest._DistTestBase.test_new_subgroups": ["<builtin>.len", "torch.distributed.new_subgroups", "torch.distributed.destroy_process_group", "torch.distributed._rank_not_in_group", "torch.distributed.get_world_size"], "torch.distributed.new_subgroups": [], "torch.testing._internal.common_distributed.skip_if_no_gpu": [], "distributed_test.DistributedTest._DistTestBase.test_new_subgroups_group_size_exceeds_world_size": ["torch.distributed.new_subgroups"], "distributed_test.DistributedTest._DistTestBase.test_new_subgroups_world_size_not_divisible_by_group_size": ["torch.distributed.new_subgroups"], "distributed_test.DistributedTest._DistTestBase.test_new_subgroups_by_enumeration": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.distributed.new_subgroups_by_enumeration", "torch.distributed.destroy_process_group"], "torch.distributed.new_subgroups_by_enumeration": [], "distributed_test.DistributedTest._DistTestBase.test_new_subgroups_by_enumeration_input_rank_exceeds_world_size": ["torch.distributed.distributed_c10d.get_world_size", "torch.distributed.new_subgroups_by_enumeration", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_new_subgroups_by_enumeration_negative_input_rank": ["torch.distributed.new_subgroups_by_enumeration", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_new_subgroups_overlap_not_allowed": ["torch.distributed.new_subgroups_by_enumeration"], "distributed_test.DistributedTest._DistTestBase.test_average_parameters": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.ones_like", "torch.nn.Linear", "torch.nn.Conv2d", "torch.distributed.algorithms.model_averaging.utils.average_parameters", "torch.distributed.get_rank", "torch.nn.ReLU", "torch.distributed._rank_not_in_group", "torch.nn.Sequential", "torch.distributed.new_group"], "distributed_test.DistributedTest._DistTestBase.test_periodic_model_averager": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.ones_like", "torch.nn.Linear", "<builtin>.range", "<builtin>.sum", "copy.deepcopy", "torch.distributed.get_rank", "torch.distributed.algorithms.model_averaging.averagers.PeriodicModelAverager", "<builtin>.next", "torch.distributed.get_world_size"], "torch.distributed.algorithms.model_averaging.averagers.PeriodicModelAverager": [], "torch.testing._internal.common_distributed.requires_nccl_version": [], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_nccl": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.distributed.P2POp", "distributed_test.DistributedTest._DistTestBase._barrier", "<builtin>.range", "torch.distributed.get_rank", "torch.cuda.set_device", "torch.distributed.get_world_size"], "torch.distributed.P2POp": [], "torch.distributed.batch_isend_irecv": [], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_self_nccl": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.distributed.P2POp", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_rank"], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_no_rank_zero_nccl": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.distributed.P2POp", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_rank", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_gloo": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "torch.distributed.P2POp", "distributed_test.DistributedTest._DistTestBase._barrier", "<builtin>.range", "torch.distributed.get_rank", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_gloo_tags": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "torch.distributed.P2POp", "distributed_test.DistributedTest._DistTestBase._barrier", "<builtin>.range", "torch.distributed.get_rank", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_tensor_err": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.distributed.P2POp", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_rank"], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_op_err": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.distributed.P2POp", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_rank"], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_op_list_err": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_rank"], "distributed_test.DistributedTest._DistTestBase.test_batch_isend_irecv_mixed_backend_err": ["torch.distributed.batch_isend_irecv", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.distributed.P2POp", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_rank", "torch.distributed.new_group"], "distributed_test.DistributedTest._DistTestBase._test_send_recv_nccl": ["torch.distributed.recv", "contextlib.suppress", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.distributed.send", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_backend", "<builtin>.range", "torch.distributed.get_rank", "torch.cuda.set_device", "distributed_test.get_profiling_event", "torch.distributed.get_world_size"], "torch.distributed.send": [], "torch.distributed.recv": [], "distributed_test.DistributedTest._DistTestBase.test_send_recv_nccl": ["distributed_test.DistributedTest._DistTestBase._test_send_recv_nccl"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_nccl_autograd_profiler": ["distributed_test.DistributedTest._DistTestBase._test_send_recv_nccl", "torch.autograd.profiler.profile"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_nccl_torch_profiler": ["torch.profiler.profile", "distributed_test.DistributedTest._DistTestBase._test_send_recv_nccl"], "distributed_test.DistributedTest._DistTestBase._test_send_recv": ["torch.distributed.recv", "contextlib.suppress", "distributed_test._build_tensor", "torch.distributed.send", "torch.distributed.get_backend", "<builtin>.sum", "<builtin>.range", "torch.distributed.get_rank", "distributed_test.get_profiling_event", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_send_recv": ["distributed_test.DistributedTest._DistTestBase._test_send_recv"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_autograd_profiler": ["distributed_test._create_autograd_profiler", "distributed_test.DistributedTest._DistTestBase._test_send_recv"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_torch_profiler": ["distributed_test._create_torch_profiler", "distributed_test.DistributedTest._DistTestBase._test_send_recv"], "distributed_test.DistributedTest._DistTestBase._test_send_recv_any_source": ["<builtin>.len", "torch.distributed.recv", "contextlib.suppress", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_rank", "torch.distributed.irecv", "torch.distributed.all_gather", "torch.distributed.get_world_size", "torch.empty_like", "torch.distributed.send", "torch.distributed.get_backend", "<builtin>.sum", "<builtin>.range", "torch.tensor", "torch.cat", "distributed_test.get_profiling_event", "itertools.groupby", "distributed_test._build_tensor", "<builtin>.list"], "torch.distributed.irecv": [], "distributed_test.DistributedTest._DistTestBase.test_send_recv_any_source": ["distributed_test.DistributedTest._DistTestBase._test_send_recv_any_source"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_any_source_autograd_profiler": ["distributed_test.DistributedTest._DistTestBase._test_send_recv_any_source", "distributed_test._create_autograd_profiler"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_any_source_torch_profiler": ["distributed_test._create_torch_profiler", "distributed_test.DistributedTest._DistTestBase._test_send_recv_any_source"], "distributed_test.DistributedTest._DistTestBase._test_send_recv_with_tag": ["torch.distributed.recv", "contextlib.suppress", "distributed_test._build_tensor", "torch.distributed.send", "torch.distributed.get_backend", "<builtin>.sum", "<builtin>.range", "torch.distributed.get_rank", "distributed_test.get_profiling_event", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_with_tag": ["distributed_test.DistributedTest._DistTestBase._test_send_recv_with_tag"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_with_tag_autograd_profiler": ["distributed_test.DistributedTest._DistTestBase._test_send_recv_with_tag", "distributed_test._create_autograd_profiler"], "distributed_test.DistributedTest._DistTestBase.test_send_recv_with_tag_torch_profiler": ["distributed_test._create_torch_profiler", "distributed_test.DistributedTest._DistTestBase._test_send_recv_with_tag"], "distributed_test.DistributedTest._DistTestBase._test_isend": ["torch.distributed.recv", "torch.distributed.isend", "contextlib.suppress", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_backend", "<builtin>.sum", "<builtin>.range", "torch.distributed.get_rank", "distributed_test.get_profiling_event", "torch.distributed.get_world_size"], "torch.distributed.isend": [], "distributed_test.DistributedTest._DistTestBase.test_isend": ["distributed_test.DistributedTest._DistTestBase._test_isend"], "distributed_test.DistributedTest._DistTestBase.test_isend_autograd_profiler": ["distributed_test.DistributedTest._DistTestBase._test_isend", "distributed_test._create_autograd_profiler"], "distributed_test.DistributedTest._DistTestBase.test_isend_torch_profiler": ["distributed_test._create_torch_profiler", "distributed_test.DistributedTest._DistTestBase._test_isend"], "distributed_test.DistributedTest._DistTestBase.test_irecv": ["distributed_test._build_tensor", "torch.distributed.send", "distributed_test.DistributedTest._DistTestBase._barrier", "<builtin>.range", "torch.distributed.get_rank", "torch.distributed.irecv", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase._test_broadcast_helper": ["distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.tensor", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "torch.distributed.BroadcastOptions"], "torch.distributed.BroadcastOptions": [], "distributed_test.DistributedTest._DistTestBase.call_dist_op": ["<builtin>.len", "torch.distributed.get_backend", "torch.distributed._get_debug_mode", "torch.autograd.profiler.profile", "distributed_test.get_profiling_event"], "distributed_test.DistributedTest._DistTestBase.test_broadcast": ["distributed_test.DistributedTest._DistTestBase._test_broadcast_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_broadcast_cuda": ["torch.cuda.set_device", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_broadcast_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_broadcast_group": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_broadcast_helper"], "distributed_test.DistributedTest._DistTestBase.test_broadcast_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_broadcast_helper"], "distributed_test.DistributedTest._DistTestBase.test_nccl_high_priority_stream": ["<builtin>.next", "torch.distributed.rendezvous", "torch.distributed.PrefixStore", "torch.distributed.ProcessGroupNCCL", "torch.distributed.ProcessGroupNCCL.Options", "<builtin>.str", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_broadcast_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.cuda.set_device", "torch.distributed.get_world_size"], "torch.distributed.ProcessGroupNCCL.Options": [], "distributed_test.DistributedTest._DistTestBase._test_reduce_helper": ["distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "distributed_test._build_tensor"], "distributed_test.DistributedTest._DistTestBase.test_reduce_sum": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_reduce_sum_cuda": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.cuda.set_device", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_reduce_product": ["<builtin>.len", "functools.reduce", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_reduce_product.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.test_reduce_min": ["distributed_test.DistributedTest._DistTestBase._test_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_reduce_max": ["distributed_test.DistributedTest._DistTestBase._test_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_reduce_group_sum": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_reduce_group_product": ["<builtin>.len", "functools.reduce", "distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_reduce_group_product.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.test_reduce_group_min": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_reduce_group_max": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_reduce_full_group_sum": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_reduce_full_group_product": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "<builtin>.len", "functools.reduce", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_reduce_full_group_product.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.test_reduce_full_group_min": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_reduce_full_group_max": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_reduce_helper"], "distributed_test.DistributedTest._DistTestBase._test_reduce_twice_helper": ["distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "<builtin>.range", "distributed_test._build_tensor"], "distributed_test.DistributedTest._DistTestBase._test_reduce_twice_helper.<lambda1>": ["torch.distributed.reduce"], "distributed_test.DistributedTest._DistTestBase.test_reduce_sum_twice": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_reduce_twice_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_reduce_sum_cuda_twice": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_reduce_twice_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_result_cuda": ["<builtin>.len", "torch.distributed.distributed_c10d.AllreduceOptions", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.distributed_c10d._get_default_group", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "torch.distributed.distributed_c10d.AllreduceOptions": [], "distributed_test.DistributedTest._DistTestBase.call_dist_op.<list1>.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.call_dist_op.<lambda1>": ["torch.distributed.reduce", "torch.distributed.scatter", "torch.distributed.broadcast", "torch.distributed.reduce_multigpu", "torch.distributed.all_gather_coalesced", "torch.distributed.all_reduce_coalesced", "torch.distributed.all_reduce_multigpu", "torch.distributed.all_gather_multigpu", "torch.distributed.all_gather", "torch.distributed.all_reduce", "torch.distributed.gather", "torch.distributed.all_to_all_single"], "torch.distributed.reduce_multigpu": [], "torch.distributed.all_gather_coalesced": [], "torch.distributed.all_reduce_coalesced": [], "torch.distributed.all_reduce_multigpu": [], "torch.distributed.all_gather_multigpu": [], "torch.distributed.all_to_all_single": [], "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper": ["torch.view_as_real", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.get_backend", "distributed_test.DistributedTest._DistTestBase.call_dist_op"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_sum": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_sum_async": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_sum_cuda": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_sum_cuda_async": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_sum_complex": ["<builtin>.len", "<builtin>.complex", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_complex_unsupported_ops": ["torch.distributed.all_reduce", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_sum_cuda_complex": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.cuda.set_device", "<builtin>.complex"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_product": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "functools.reduce", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_product.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_min": ["distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_max": ["distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_group_sum": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_group_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_group_product": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "functools.reduce", "distributed_test.DistributedTest._DistTestBase._init_group_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_group_product.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_group_min": ["distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_group_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_group_max": ["distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper", "distributed_test.DistributedTest._DistTestBase._init_group_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_full_group_sum": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_full_group_product": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "<builtin>.len", "functools.reduce", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_full_group_product.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_full_group_min": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_full_group_max": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_helper"], "distributed_test.DistributedTest._DistTestBase._test_sparse_all_reduce_sum": ["torch.distributed.all_reduce", "torch.distributed.get_world_size", "torch.testing._internal.common_distributed.simple_sparse_reduce_tests", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "torch.testing._internal.common_distributed.simple_sparse_reduce_tests": [], "distributed_test.DistributedTest._DistTestBase.test_sparse_all_reduce_sum": ["distributed_test.DistributedTest._DistTestBase._test_sparse_all_reduce_sum"], "distributed_test.DistributedTest._DistTestBase.test_sparse_all_reduce_sum.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.test_sparse_all_reduce_sum_cuda": ["distributed_test.DistributedTest._DistTestBase._test_sparse_all_reduce_sum"], "distributed_test.DistributedTest._DistTestBase.test_sparse_all_reduce_sum_cuda.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase._all_reduce_coalesced_sum_test_cases": ["<builtin>.complex"], "distributed_test.DistributedTest._DistTestBase._all_reduce_coalesced_product_test_cases": [], "distributed_test.DistributedTest._DistTestBase._all_reduce_coalesced_min_test_cases": [], "distributed_test.DistributedTest._DistTestBase._all_reduce_coalesced_max_test_cases": [], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_max_complex_unsupported": ["torch.distributed.all_reduce_coalesced", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper": ["<builtin>.len", "torch.view_as_real", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_sum": ["distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_product": ["distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_min": ["distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_max": ["distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_group_sum": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_group_product": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_group_min": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_group_max": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_full_group_sum": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_full_group_product": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_full_group_min": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_coalesced_full_group_max": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase._test_scatter_helper": ["distributed_test.DistributedTest._DistTestBase._barrier", "torch.view_as_real", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "distributed_test._build_tensor"], "distributed_test.DistributedTest._DistTestBase.test_scatter_checks": ["torch.ones", "torch.distributed.scatter", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_scatter": ["distributed_test.DistributedTest._DistTestBase._test_scatter_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_scatter_complex": ["distributed_test.DistributedTest._DistTestBase._test_scatter_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_scatter_group": ["distributed_test.DistributedTest._DistTestBase._test_scatter_helper", "distributed_test.DistributedTest._DistTestBase._init_group_test"], "distributed_test.DistributedTest._DistTestBase.test_scatter_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_scatter_helper"], "distributed_test.DistributedTest._DistTestBase._test_gather_helper": ["<builtin>.len", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase.test_gather_checks": ["torch.ones", "torch.distributed.gather", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_gather": ["distributed_test.DistributedTest._DistTestBase._test_gather_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_gather_group": ["distributed_test.DistributedTest._DistTestBase._test_gather_helper", "distributed_test.DistributedTest._DistTestBase._init_group_test"], "distributed_test.DistributedTest._DistTestBase.test_gather_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_gather_helper"], "distributed_test.DistributedTest._DistTestBase._test_all_gather_helper": ["torch.distributed.algorithms.quantization.auto_quantize", "torch.view_as_real", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "<builtin>.zip"], "torch.distributed.algorithms.quantization.auto_quantize": [], "distributed_test.DistributedTest._DistTestBase.test_all_gather": ["distributed_test.DistributedTest._DistTestBase._test_all_gather_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_cuda": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_gather_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_complex": ["distributed_test.DistributedTest._DistTestBase._test_all_gather_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_cuda_complex": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_gather_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_group": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_gather_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_gather_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_quantized": ["distributed_test.DistributedTest._DistTestBase._test_all_gather_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase._run_all_gather_coalesced_and_verify": ["torch.equal", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "torch.view_as_real", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase._test_all_gather_coalesced_helper": ["distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase._run_all_gather_coalesced_and_verify", "distributed_test._build_multidim_tensor", "<builtin>.range"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_coalesced_simple": ["distributed_test.DistributedTest._DistTestBase._test_all_gather_coalesced_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_coalesced_complex": ["distributed_test.DistributedTest._DistTestBase._test_all_gather_coalesced_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_coalesced_group": ["distributed_test.DistributedTest._DistTestBase._test_all_gather_coalesced_helper", "distributed_test.DistributedTest._DistTestBase._init_group_test"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_coalesced_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_gather_coalesced_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_coalesced_with_empty": ["torch.ones", "distributed_test.DistributedTest._DistTestBase._run_all_gather_coalesced_and_verify", "distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper": ["<builtin>.len", "torch.view_as_real", "torch.ones", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.cat", "distributed_test.DistributedTest._DistTestBase.call_dist_op"], "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper": ["<builtin>.len", "torch.ones", "distributed_test.DistributedTest._DistTestBase._barrier", "<builtin>.sum", "torch.cat", "torch.distributed.all_to_all_single"], "distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper": ["<builtin>.len", "torch.distributed.algorithms.quantization.auto_quantize", "torch.ones", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.distributed.all_to_all", "<builtin>.enumerate", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_equal_split": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_equal_split_cuda": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_equal_split_complex": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_equal_split_cuda_complex": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_unequal_split": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_unequal_split_cuda": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_unequal_split_complex": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_unequal_split_cuda_complex": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_quantized": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_cuda": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_complex": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_cuda_complex": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_equal_split_group": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_equal_split_group_cuda": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_unequal_split_group": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_unequal_split_group_cuda": ["distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_group": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_group_cuda": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_equal_split_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_equal_split_full_group_cuda": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_equal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_unequal_split_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_single_unequal_split_full_group_cuda": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_single_unequal_split_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper"], "distributed_test.DistributedTest._DistTestBase.test_all_to_all_full_group_cuda": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_all_to_all_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper"], "distributed_test.DistributedTest._DistTestBase._test_barrier_helper": ["torch.distributed.broadcast", "torch.DoubleTensor", "<builtin>.float", "distributed_test.DistributedTest._DistTestBase._barrier", "time.time", "time.sleep", "torch.distributed.barrier"], "distributed_test.DistributedTest._DistTestBase.test_barrier_cuda": ["distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_barrier_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_barrier_group_cuda": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_barrier_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper"], "distributed_test.DistributedTest._DistTestBase.test_barrier_full_group_cuda": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_barrier_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper"], "distributed_test.DistributedTest._DistTestBase.test_barrier": ["distributed_test.DistributedTest._DistTestBase._test_barrier_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_barrier_group": ["distributed_test.DistributedTest._DistTestBase._init_group_test", "distributed_test.DistributedTest._DistTestBase._test_barrier_helper"], "distributed_test.DistributedTest._DistTestBase.test_barrier_full_group": ["distributed_test.DistributedTest._DistTestBase._init_full_group_test", "distributed_test.DistributedTest._DistTestBase._test_barrier_helper"], "distributed_test.DistributedTest._DistTestBase._test_broadcast_multigpu_helper": ["distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test._build_tensor", "torch.distributed.broadcast_multigpu"], "torch.distributed.broadcast_multigpu": [], "distributed_test.DistributedTest._DistTestBase.test_broadcast_multigpu": ["distributed_test.DistributedTest._DistTestBase._test_broadcast_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase._test_all_reduce_multigpu_helper": ["distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "distributed_test._build_tensor"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_multigpu": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_reduce_multigpu_complex": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "distributed_test.DistributedTest._DistTestBase._test_all_reduce_multigpu_helper", "<builtin>.complex"], "distributed_test.DistributedTest._DistTestBase._test_reduce_multigpu_helper": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "distributed_test._build_tensor"], "distributed_test.DistributedTest._DistTestBase.test_reduce_multigpu": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_reduce_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase._test_all_gather_multigpu_helper": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._barrier", "distributed_test.DistributedTest._DistTestBase.call_dist_op", "distributed_test._build_tensor"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_multigpu": ["torch.cuda.set_device", "distributed_test.DistributedTest._DistTestBase._test_all_gather_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_all_gather_multigpu_complex": ["torch.cuda.set_device", "distributed_test.DistributedTest._DistTestBase._test_all_gather_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase._model_step": ["torch.nn.Module.parameters", "torch.no_grad"], "distributed_test.DistributedTest._DistTestBase._model_step_with_zero_grad": ["torch.nn.Module.parameters", "torch.no_grad"], "distributed_test.DistributedTest._DistTestBase._prepare_dummy_data": ["torch.randn", "torch.nn.MSELoss", "<builtin>.int"], "distributed_test.DistributedTest._DistTestBase._test_DDP_helper": ["distributed_test.Net.__init__", "torch.nn.Module.train"], "distributed_test.DistributedTest._DistTestBase._assert_equal_param": ["<builtin>.len", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase._test_DDP_niter": ["distributed_test.DistributedTest._DistTestBase._assert_equal_param", "tempfile.NamedTemporaryFile", "tempfile.TemporaryFile", "distributed_test.DistributedTest._DistTestBase._model_step", "<builtin>.range", "torch.randperm", "distributed_test.DistributedTest._DistTestBase._test_DDP_helper", "torch.nn.Module.parameters", "distributed_test.DistributedTest._DistTestBase._model_step_with_zero_grad", "torch.load", "<builtin>.list", "torch.save"], "distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallel": ["<builtin>.len", "tempfile.NamedTemporaryFile", "distributed_test.DistributedTest._DistTestBase._prepare_dummy_data", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.load", "distributed_test.DistributedTest._DistTestBase._test_DDP_niter", "torch.save"], "distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallelCPU": ["distributed_test.DistributedTest._DistTestBase._prepare_dummy_data", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "distributed_test.DistributedTest._DistTestBase._init_global_test", "distributed_test.DistributedTest._DistTestBase._test_DDP_niter"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallelCPU": ["distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallelCPU"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallelCPU_grad_is_view": ["distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallelCPU"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_requires_grad": ["distributed_test.DistributedTest._DistTestBase._barrier"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_requires_grad.<lambda1>": ["torch.nn.Module", "torch.nn.parallel.DistributedDataParallel"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_non_default_stream": ["torch.cuda.stream", "torch.cuda.Stream", "<builtin>.int", "torch.nn.Linear", "<builtin>.range", "torch.nn.parallel.DistributedDataParallel", "torch.tensor", "<builtin>.sum", "torch.distributed.all_reduce"], "distributed_test.DistributedTest._DistTestBase.test_ddp_comm_hook_logging": ["<builtin>.str", "torch.ones", "torch.nn.Linear", "<builtin>.range", "torch.nn.parallel.DistributedDataParallel"], "distributed_test.DistributedTest._DistTestBase._test_ddp_hook_with_optimizer_parity": ["<builtin>.zip", "<builtin>.list", "torch.cuda.manual_seed", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn", "<builtin>.range", "torch.manual_seed", "torch.distributed.barrier", "torch.backends.cudnn.flags", "torch.distributed.algorithms.ddp_comm_hooks.default_hooks._hook_then_optimizer", "torch.cuda.set_device", "torch.distributed.algorithms.ddp_comm_hooks.default_hooks._OptimizerHookState", "torchvision.models.resnet50", "distributed_test.LargeNet.__init__"], "torch.distributed.algorithms.ddp_comm_hooks.default_hooks._OptimizerHookState": [], "torch.distributed.algorithms.ddp_comm_hooks.default_hooks._hook_then_optimizer": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_hook_with_optimizer_parity_adam": ["itertools.product", "distributed_test.DistributedTest._DistTestBase._test_ddp_hook_with_optimizer_parity"], "distributed_test.DistributedTest._DistTestBase.test_ddp_hook_with_optimizer_parity_sgd": ["itertools.product", "distributed_test.DistributedTest._DistTestBase._test_ddp_hook_with_optimizer_parity"], "distributed_test.DistributedTest._DistTestBase._test_ddp_hook_parity": ["torch.tensor", "<builtin>.range", "torch.nn.Linear", "copy.deepcopy", "torch.nn.parallel.DistributedDataParallel", "<builtin>.sum", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_hook_parity_allreduce": ["distributed_test.DistributedTest._DistTestBase._test_ddp_hook_parity"], "distributed_test.DistributedTest._DistTestBase.test_ddp_hook_parity_allreduce_process_group": ["<builtin>.int", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "<builtin>.range", "distributed_test.DistributedTest._DistTestBase._test_ddp_hook_parity", "torch.distributed.new_group", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_hook_parity_powerSGD": ["torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook.PowerSGDState", "distributed_test.DistributedTest._DistTestBase._test_ddp_hook_parity"], "torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook.PowerSGDState": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_hook_parity_post_localSGD": ["torch.distributed.algorithms.ddp_comm_hooks.post_localSGD_hook.PostLocalSGDState", "distributed_test.DistributedTest._DistTestBase._test_ddp_hook_parity"], "torch.distributed.algorithms.ddp_comm_hooks.post_localSGD_hook.PostLocalSGDState": [], "distributed_test.DistributedTest._DistTestBase._prepare_single_device_module": ["distributed_test.Net.__init__", "torch.device", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn", "torch.nn.Module.to"], "distributed_test.DistributedTest._DistTestBase._prepare_cpu_module": ["distributed_test.Net.__init__", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn"], "distributed_test.DistributedTest._DistTestBase._test_accumulate_gradients_no_sync": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._test_accumulate_gradients_no_sync.step_model", "<builtin>.str", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._prepare_single_device_module", "distributed_test.DistributedTest._DistTestBase._prepare_cpu_module", "torch.device", "torch.no_grad", "<builtin>.range", "torch.randperm", "torch.manual_seed", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.distributed.distributed_c10d.get_world_size", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase._test_accumulate_gradients_no_sync.step_model": ["torch.nn.functional.mse_loss"], "torch.testing._internal.common_distributed.nccl_skip_if_lt_x_gpu": [], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync": ["distributed_test.DistributedTest._DistTestBase._test_accumulate_gradients_no_sync"], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync_grad_is_view": ["distributed_test.DistributedTest._DistTestBase._test_accumulate_gradients_no_sync"], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync_allreduce_hook": ["torch.distributed.distributed_c10d.get_world_size", "distributed_test.DistributedTest._DistTestBase._test_accumulate_gradients_no_sync"], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync_allreduce_hook.allreduce_hook": [], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync_allreduce_hook.allreduce_hook.<lambda1>": [], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync_allreduce_with_then_hook": ["torch.distributed.distributed_c10d.get_world_size", "distributed_test.DistributedTest._DistTestBase._test_accumulate_gradients_no_sync"], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync_allreduce_with_then_hook.allreduce_with_then_hook": [], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync_allreduce_with_then_hook.allreduce_with_then_hook.mult": [], "distributed_test.DistributedTest._DistTestBase.test_accumulate_gradients_no_sync_allreduce_with_then_hook.allreduce_with_then_hook.div": [], "distributed_test.DistributedTest._DistTestBase.test_get_future": ["<builtin>.len", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test._build_tensor", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase.test_get_future.mult": [], "distributed_test.DistributedTest._DistTestBase.test_get_future.add": [], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel": ["<builtin>.str", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallel", "torch.device", "distributed_test.DistributedTest._DistTestBase._init_global_test", "itertools.product", "<builtin>.list"], "distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallel_with_amp": ["torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn", "<builtin>.range", "torch.cuda.amp.GradScaler", "torch.randperm", "torch.cuda.amp.autocast", "torch.manual_seed", "torch.optim.SGD", "torch.nn.MSELoss", "torch.distributed.get_world_size"], "torch.cuda.amp.GradScaler": [], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_with_amp_and_grad_is_view": ["torch.cuda.set_device", "distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallel_with_amp", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallel_SyncBatchNorm": ["tempfile.NamedTemporaryFile", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn", "torch.load", "distributed_test.DistributedTest._DistTestBase._test_DDP_niter", "torch.nn.MSELoss", "torch.save", "torch.distributed.get_world_size"], "torch.nn.SyncBatchNorm.convert_sync_batchnorm": [], "distributed_test.DistributedTest._DistTestBase.test_post_localSGD_optimizer_parity": ["<builtin>.zip", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.distributed.optim.post_localSGD_optimizer.PostLocalSGDOptimizer", "torch.randn", "<builtin>.range", "torch.distributed.algorithms.model_averaging.averagers.PeriodicModelAverager", "torch.cuda.set_device", "torch.optim.SGD", "torch.nn.MSELoss", "torch.distributed.get_world_size"], "torch.distributed.optim.post_localSGD_optimizer.PostLocalSGDOptimizer": [], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_SyncBatchNorm_Channels_Last": ["<builtin>.int", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn", "distributed_test.DistributedTest._DistTestBase._init_global_test", "distributed_test.DistributedTest._DistTestBase._test_DDP_niter", "torch.nn.MSELoss", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_SyncBatchNorm": ["distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallel_SyncBatchNorm", "<builtin>.str", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "<builtin>.int", "torch.device", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_SyncBatchNorm_No_Affine": ["distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallel_SyncBatchNorm", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "<builtin>.int", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_SyncBatchNorm_2D_Input": ["<builtin>.len", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.MSELoss", "torch.backends.cudnn.flags", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn", "distributed_test.DistributedTest._DistTestBase._init_global_test", "distributed_test.DistributedTest._DistTestBase._test_DDP_niter", "torch.nn.BatchNorm1d", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_SyncBatchNorm_Single_Input_Per_Process": ["torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.MSELoss", "torch.backends.cudnn.flags", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn", "distributed_test.DistributedTest._DistTestBase._init_global_test", "distributed_test.DistributedTest._DistTestBase._test_DDP_niter", "torch.nn.BatchNorm1d", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_SyncBatchNorm_Diff_Input_Sizes_Running_Value": ["torch.testing.assert_allclose", "distributed_test.DistributedTest._DistTestBase._init_multigpu_helper", "torch.ones", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.cat", "distributed_test.DistributedTest._DistTestBase._init_global_test", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_DistributedDataParallel_SyncBatchNorm_Diff_Input_Sizes_gradient": ["distributed_test.DistributedTest._DistTestBase._test_DistributedDataParallel_SyncBatchNorm", "torch.distributed.get_world_size", "<builtin>.int", "distributed_test.DistributedTest._DistTestBase._init_global_test"], "distributed_test.DistributedTest._DistTestBase._test_ddp_logging_data": ["distributed_test.DistributedTest._DistTestBase._prepare_dummy_data", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "copy.deepcopy", "torch.randperm", "torch.distributed.get_rank", "distributed_test.DistributedTest._DistTestBase._test_DDP_helper", "distributed_test.DistributedTest._DistTestBase._model_step_with_zero_grad"], "distributed_test.DistributedTest._DistTestBase.test_ddp_logging_data_cpu": ["torch.nn.Module.float", "distributed_test.DistributedTest._DistTestBase._test_ddp_logging_data", "<builtin>.str", "<builtin>.filter", "<builtin>.int", "distributed_test.LargeNet.__init__", "torch.distributed.get_backend", "<builtin>.reversed", "<builtin>.range", "distributed_test.DistributedTest._DistTestBase.test_ddp_logging_data_cpu.parse_env", "torch.nn.parallel.DistributedDataParallel", "torch.distributed.get_rank", "distributed_test.DistributedTest._DistTestBase._init_global_test", "<builtin>.list", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_logging_data_cpu.parse_env": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_logging_data_cpu.<lambda1>": [], "torch.nn.Module.float": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_logging_data_gpu": ["distributed_test.DistributedTest._DistTestBase._test_ddp_logging_data", "<builtin>.str", "<builtin>.reversed", "<builtin>.range", "distributed_test.DistributedTest._DistTestBase._init_global_test", "<builtin>.list"], "distributed_test.DistributedTest._DistTestBase.test_static_graph_api_cpu": ["distributed_test.DistributedTest._DistTestBase._prepare_dummy_data", "torch.nn.parallel.DistributedDataParallel", "distributed_test.DistributedTest._DistTestBase._test_DDP_helper", "torch.distributed.get_rank", "torch.testing._internal.common_distributed.verify_ddp_error_logged"], "torch.testing._internal.common_distributed.verify_ddp_error_logged": [], "distributed_test.skipIfNoTorchVision": [], "distributed_test.DistributedTest._DistTestBase.test_SyncBatchNorm_process_group": ["torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.distributed.new_group", "torchvision.models.resnet50", "copy.deepcopy"], "distributed_test.DistributedTest._DistTestBase._run_reduction_test": ["torch.distributed.reduce", "torch.distributed.get_rank", "<builtin>.ValueError"], "distributed_test.DistributedTest._DistTestBase.test_nccl_backend_bool_allreduce": ["torch.cuda.set_device", "distributed_test.DistributedTest._DistTestBase._run_reduction_test", "torch.tensor"], "distributed_test.DistributedTest._DistTestBase.test_nccl_backend_bool_allgather": ["<builtin>.len", "torch.tensor", "<builtin>.range", "<builtin>.enumerate", "torch.cuda.set_device", "torch.distributed.all_gather", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_nccl_backend_bool_reduce": ["torch.cuda.set_device", "distributed_test.DistributedTest._DistTestBase._run_reduction_test", "torch.tensor"], "distributed_test.DistributedTest._DistTestBase.test_nccl_backend_bool_broadcast": ["torch.distributed.broadcast", "random.random", "torch.tensor", "<builtin>.range", "torch.distributed.all_gather", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_DistributedSampler_padding": ["<builtin>.len", "<builtin>.max", "distributed_test.DistributedTest._DistTestBase.test_DistributedSampler_padding.validate_global_samples", "torch.ones", "math.ceil", "<builtin>.iter", "<builtin>.range", "torch.utils.data.distributed.DistributedSampler", "<builtin>.list", "torch.distributed.get_world_size"], "torch.utils.data.distributed.DistributedSampler": [], "distributed_test.DistributedTest._DistTestBase.test_DistributedSampler_padding.validate_global_samples": ["<builtin>.len", "torch.LongTensor", "<builtin>.set", "torch.tensor", "<builtin>.range", "torch.distributed.all_gather"], "torch.testing._internal.common_distributed.require_n_gpus_for_nccl_backend": [], "distributed_test.DistributedTest._DistTestBase.test_allgather_object": ["<builtin>.len", "<builtin>.int", "<builtin>.range", "torch.randn", "distributed_test.Foo.__init__", "torch.distributed.all_gather_object", "<builtin>.enumerate", "torch.cuda.set_device", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_gather_object": ["<builtin>.len", "torch.distributed.gather_object", "<builtin>.range", "torch.distributed.get_rank", "torch.distributed.all_gather_object", "<builtin>.enumerate", "torch.distributed.get_world_size"], "torch.distributed.gather_object": [], "distributed_test.DistributedTest._DistTestBase.test_nccl_gather_object_err": ["torch.distributed.gather_object", "<builtin>.range", "torch.distributed.get_rank", "torch.cuda.set_device", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.validate_net_equivalence": ["<builtin>.range", "torch.zeros_like", "torch.distributed.all_gather", "<builtin>.list", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_sync_params_and_buffers": ["distributed_test.DistributedTest._DistTestBase.validate_net_equivalence", "<builtin>.zip", "torch.nn.Linear", "copy.deepcopy", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.manual_seed", "torch.zeros_like", "<builtin>.enumerate", "torch.distributed.all_gather", "<builtin>.list", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_grad_div_uneven_inputs": ["torch.cuda.synchronize", "torch.ones", "torch.nn.Linear", "<builtin>.range", "torch.nn.parallel.DistributedDataParallel", "<builtin>.list", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase._test_ddp_profiling": ["<builtin>.len", "torch.rand", "torch.distributed.get_backend", "torch.nn.Linear", "copy.deepcopy", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "<builtin>.sum", "torch.cuda.set_device", "distributed_test.get_profiling_event"], "distributed_test.DistributedTest._DistTestBase.test_ddp_profiling_autograd_profiler": ["distributed_test.DistributedTest._DistTestBase._test_ddp_profiling", "torch.autograd.profiler.profile"], "distributed_test.DistributedTest._DistTestBase.test_ddp_profiling_torch_profiler": ["torch.profiler.profile", "distributed_test.DistributedTest._DistTestBase._test_ddp_profiling"], "distributed_test.DistributedTest._DistTestBase.test_ddp_join_model_equivalence": ["<builtin>.zip", "torch.cuda.synchronize", "torch.rand", "torch.nn.Linear", "<builtin>.range", "copy.deepcopy", "<builtin>.sum", "torch.nn.parallel.DistributedDataParallel", "torch.optim.SGD", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase._run_uneven_inputs_test": ["<builtin>.print", "<builtin>.isinstance", "torch.cuda.synchronize", "<builtin>.set", "distributed_test.DistributedTest._DistTestBase.validate_net_equivalence", "contextlib.suppress", "torch.nn.parallel.DistributedDataParallel", "torch.tensor", "<builtin>.range", "distributed_test.DistributedTest._DistTestBase._model_step", "torch.distributed.barrier", "torch.cuda.current_device", "torch.zeros_like", "torch.cuda.set_device", "torch.distributed.all_reduce", "torch.distributed.all_gather", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs_stop_iteration_sync_bn": ["distributed_test.DistributedTest._DistTestBase.validate_net_equivalence", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.nn.Module.cuda", "torch.randn", "<builtin>.range", "distributed_test.DistributedTest._DistTestBase._model_step", "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs_stop_iteration_sync_bn.ModelWithComm.__init__", "torch.cuda.current_device", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs_stop_iteration_sync_bn.ModelWithComm.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs_stop_iteration_sync_bn.ModelWithComm.forward": ["torch.distributed.all_reduce"], "torch.nn.Module.cuda": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs": ["torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook.PowerSGDState", "<builtin>.print", "typing.NamedTuple.__init__", "torch.ones", "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs.UnusedParamModule.__init__", "torch.nn.Linear", "torch.nn.Conv2d", "<builtin>.range", "torch.nn.ReLU", "distributed_test.BatchNormNet.__init__", "<builtin>.enumerate", "torch.nn.Sequential", "itertools.product", "distributed_test.DistributedTest._DistTestBase._run_uneven_inputs_test", "torchvision.models.resnet50", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs.UnusedParamModule.__init__": ["<builtin>.super", "distributed_test.Task.__init__"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs.UnusedParamModule.task_parameters": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_inputs.UnusedParamModule.forward": ["distributed_test.Task.__init__"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_input_join_disable": ["distributed_test.DistributedTest._DistTestBase.validate_net_equivalence", "torch.ones", "torch.nn.Linear", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "<builtin>.sum", "torch.manual_seed", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_input_exception": ["distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_input_exception.ExceptionModule.__init__", "torch.nn.parallel.DistributedDataParallel", "torch.ones", "torch.nn.Module.cuda"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_input_exception.ExceptionModule.__init__": ["<builtin>.super", "torch.nn.Parameter", "torch.ones"], "distributed_test.DistributedTest._DistTestBase.test_ddp_uneven_input_exception.ExceptionModule.forward": ["<builtin>.ValueError"], "distributed_test.DistributedTest._DistTestBase.test_broadcast_object_list": ["<builtin>.int", "torch.device", "torch.randn", "distributed_test.Foo.__init__", "torch.cuda.set_device", "torch.distributed.broadcast_object_list", "torch.cuda.device_count"], "torch.distributed.broadcast_object_list": [], "distributed_test.DistributedTest._DistTestBase._test_ddp_ignore_params_arg": ["torch.nn.Module.float", "torch.cuda.synchronize", "torch.nn.parallel.DistributedDataParallel._set_params_and_buffers_to_ignore_for_model", "torch.zeros", "torch.ones", "torch.nn.parallel.DistributedDataParallel", "torch.nn.Linear", "copy.deepcopy", "<builtin>.range", "distributed_test.DistributedTest._DistTestBase._test_ddp_ignore_params_arg.TestModel.__init__", "itertools.product", "<builtin>.list", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase._test_ddp_ignore_params_arg.TestModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase._test_ddp_ignore_params_arg.TestModel.forward": [], "torch.nn.parallel.DistributedDataParallel._set_params_and_buffers_to_ignore_for_model": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_ignore_params_arg": ["distributed_test.DistributedTest._DistTestBase._test_ddp_ignore_params_arg"], "torch.testing._internal.common_distributed.with_dist_debug_levels": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_unused_params_rebuild_buckets_exception": ["distributed_test.DistributedTest._DistTestBase.test_ddp_unused_params_rebuild_buckets_exception.ToyModel.__init__", "<builtin>.str", "torch.rand", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.nn.Module.cuda", "torch.distributed._get_debug_mode", "torch.testing._internal.common_distributed.verify_ddp_error_logged", "torch.distributed.barrier"], "distributed_test.DistributedTest._DistTestBase.test_ddp_unused_params_rebuild_buckets_exception.ToyModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_ddp_unused_params_rebuild_buckets_exception.ToyModel.forward": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_shared_grad_acc_unused_params": ["distributed_test.DistributedTest._DistTestBase.test_ddp_shared_grad_acc_unused_params.ToyModel.__init__", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.randn", "torch.nn.Module.to", "torch.cuda.current_device", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_ddp_shared_grad_acc_unused_params.ToyModel.__init__": ["<builtin>.super", "torch.nn.Linear", "torch.nn.Parameter", "torch.zeros"], "distributed_test.DistributedTest._DistTestBase.test_ddp_shared_grad_acc_unused_params.ToyModel.forward": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_device": ["typing.NamedTuple.__init__", "<builtin>.tuple", "distributed_test.DistributedTest._DistTestBase.test_ddp_device.ToyModel.__init__", "torch.rand", "torch.nn.Linear", "torch.nn.parallel.DistributedDataParallel", "torch.randn", "<builtin>.range", "distributed_test.DistributedTest._DistTestBase.test_ddp_device.train_iter", "torch.nn.Module.to", "distributed_test.DistributedTest._DistTestBase.test_ddp_device.TensorWrapper.__init__", "<builtin>.type"], "distributed_test.DistributedTest._DistTestBase.test_ddp_device.TensorWrapper.__init__": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_device.tuple_and_list_validator": ["<builtin>.len", "<builtin>.set"], "distributed_test.DistributedTest._DistTestBase.test_ddp_device.namedtuple_validator": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_device.custom_type_validator": ["<builtin>.str"], "distributed_test.DistributedTest._DistTestBase.test_ddp_device.dict_validator": ["<builtin>.len", "<builtin>.set"], "distributed_test.DistributedTest._DistTestBase.test_ddp_device.ToyModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_ddp_device.ToyModel.forward": ["<builtin>.isinstance"], "distributed_test.DistributedTest._DistTestBase.test_ddp_device.train_iter": ["<builtin>.range"], "distributed_test.DistributedTest._DistTestBase.test_ddp_namedtuple": ["typing.NamedTuple.__init__", "distributed_test.DistributedTest._DistTestBase.test_ddp_namedtuple.NamedTupleModule.__init__", "<builtin>.type", "torch.rand", "torch.nn.parallel.DistributedDataParallel", "torch.nn.Module.cuda"], "distributed_test.DistributedTest._DistTestBase.test_ddp_namedtuple.NamedTupleModule.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_ddp_namedtuple.NamedTupleModule.forward": ["<builtin>.isinstance", "<builtin>.type", "torch.mul"], "distributed_test.DistributedTest._DistTestBase.test_ddp_control_flow_same_across_ranks": ["distributed_test.ControlFlowToyModel.__init__", "<builtin>.str", "torch.ones", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.nn.Module.cuda", "torch.randn", "torch.tensor", "torch.distributed._get_debug_mode", "torch.testing._internal.common_distributed.verify_ddp_error_logged", "torch.distributed.barrier", "torch.cuda.set_device", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_invalid_static_graph": ["distributed_test.ControlFlowToyModel.__init__", "torch.ones", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.nn.Module.cuda", "torch.randn", "torch.testing._internal.common_distributed.verify_ddp_error_logged", "torch.cuda.set_device", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_control_flow_different_across_ranks": ["<builtin>.str", "torch.ones", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.nn.Module.cuda", "torch.randn", "torch.tensor", "torch.distributed._get_debug_mode", "torch.testing._internal.common_distributed.verify_ddp_error_logged", "torch.distributed.barrier", "torch.cuda.set_device", "distributed_test.DistributedTest._DistTestBase.test_ddp_control_flow_different_across_ranks.ToyModel.__init__", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase.test_ddp_control_flow_different_across_ranks.ToyModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_ddp_control_flow_different_across_ranks.ToyModel.forward": ["torch.ones", "torch.equal", "torch.nn.functional.relu"], "distributed_test.DistributedTest._DistTestBase.test_scatter_object_list": ["<builtin>.len", "torch.distributed.scatter_object_list", "torch.distributed.get_world_size"], "torch.distributed.scatter_object_list": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_model_diff_across_ranks": ["distributed_test.EmbeddingNet.__init__", "torch.distributed.get_backend", "torch.nn.parallel.DistributedDataParallel", "torch.distributed._get_debug_mode", "datetime.timedelta", "torch.nn.Module.to", "torch.distributed.barrier", "torch.cuda.set_device", "torch.distributed.new_group"], "distributed_test.DistributedTest._DistTestBase._test_output_unused_in_loss": ["distributed_test.DictOutputModule.__init__", "distributed_test.UnusedParamTwoLinLayerNet.__init__", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.randn", "<builtin>.range", "torch.distributed.barrier", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase.test_output_unused_in_loss_tuple_module": ["distributed_test.DistributedTest._DistTestBase._test_output_unused_in_loss"], "distributed_test.DistributedTest._DistTestBase.test_output_unused_in_loss_dict_module": ["distributed_test.DistributedTest._DistTestBase._test_output_unused_in_loss"], "distributed_test.DistributedTest._DistTestBase.test_undefined_grad_parity_unused_parameters": ["distributed_test.Net.__init__", "torch.ones", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.nn.Module.to", "torch._C._functions.UndefinedGrad", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase._test_different_graph_across_ranks": ["distributed_test.DistributedTest._DistTestBase._test_different_graph_across_ranks.ToyModel.__init__", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.nn.Module.cuda", "torch.randn", "torch.manual_seed", "torch.cuda.set_device", "torch.distributed.get_world_size"], "distributed_test.DistributedTest._DistTestBase._test_different_graph_across_ranks.ToyModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase._test_different_graph_across_ranks.ToyModel.forward": ["torch.nn.functional.relu"], "distributed_test.DistributedTest._DistTestBase.test_different_graph_across_ranks": ["distributed_test.DistributedTest._DistTestBase._test_different_graph_across_ranks", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase.test_monitored_barrier_gloo": ["torch.distributed.monitored_barrier", "torch.ones", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.cat", "<builtin>.range", "datetime.timedelta", "torch.distributed.all_reduce"], "torch.distributed.monitored_barrier": [], "distributed_test.DistributedTest._DistTestBase.test_monitored_barrier_gloo_subgroup": ["torch.distributed.monitored_barrier", "torch.distributed.new_group"], "distributed_test.DistributedTest._DistTestBase._test_monitored_barrier_allreduce_hang": ["<builtin>.str", "<builtin>.int", "torch.ones", "<builtin>.range", "torch.distributed._get_debug_mode", "datetime.timedelta", "torch.distributed.new_group", "<builtin>.list"], "torch.testing._internal.common_distributed.with_nccl_blocking_wait": [], "distributed_test.DistributedTest._DistTestBase.test_monitored_barrier_allreduce_hang": ["distributed_test.DistributedTest._DistTestBase._test_monitored_barrier_allreduce_hang"], "distributed_test.DistributedTest._DistTestBase.test_monitored_barrier_allreduce_hang_wait_all_ranks": ["distributed_test.DistributedTest._DistTestBase._test_monitored_barrier_allreduce_hang"], "distributed_test.DistributedTest._DistTestBase.test_monitored_barrier_gloo_rank_0_timeout": ["<builtin>.int", "<builtin>.range", "datetime.timedelta", "torch.distributed.new_group", "<builtin>.list"], "distributed_test.DistributedTest._DistTestBase.test_monitored_barrier_failure_order": ["torch.distributed.monitored_barrier", "datetime.timedelta"], "distributed_test.DistributedTest._DistTestBase.test_monitored_barrier_wait_all_ranks": ["torch.distributed.monitored_barrier", "<builtin>.str", "<builtin>.int", "<builtin>.range", "datetime.timedelta"], "distributed_test.DistributedTest._DistTestBase.test_ddp_build_param_to_name_mapping": ["<builtin>.print", "torch.nn.parallel.DistributedDataParallel._set_params_and_buffers_to_ignore_for_model", "<builtin>.type", "torch.nn.parallel.DistributedDataParallel", "torch.nn.Module.cuda", "distributed_test.TwoLinLayerNet.__init__"], "distributed_test.DistributedTest._DistTestBase.test_ddp_build_param_to_name_mapping_requires_grad": ["distributed_test.DistributedTest._DistTestBase.test_ddp_build_param_to_name_mapping_requires_grad.Net.__init__", "torch.nn.parallel.DistributedDataParallel", "torch.nn.Module.cuda"], "distributed_test.DistributedTest._DistTestBase.test_ddp_build_param_to_name_mapping_requires_grad.Net.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_ddp_build_param_to_name_mapping_requires_grad.Net.forward": [], "distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error": ["torch.nn.parallel.DistributedDataParallel._set_params_and_buffers_to_ignore_for_model", "<builtin>.str", "torch.ones", "torch.nn.Module.named_modules", "torch.nn.Module.modules", "torch.nn.parallel.DistributedDataParallel", "torch.nn.Module.cuda", "<builtin>.range", "torch.distributed._get_debug_mode", "<builtin>.list", "distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error.MyModel.__init__"], "distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error.SubModule.__init__": ["<builtin>.super", "distributed_test.EmbeddingNet.__init__", "torch.nn.Linear", "distributed_test.TwoLinLayerNet.__init__", "distributed_test.BatchNormNet.__init__"], "distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error.SubModule.forward": ["distributed_test.BatchNormNet.__init__"], "distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error.MyModel.__init__": ["<builtin>.super", "distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error.SubModule.__init__"], "distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error.MyModel.forward": ["distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error.SubModule.__init__"], "distributed_test.DistributedTest._DistTestBase.test_ddp_multiple_nested_unused_params_error": ["distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error"], "distributed_test.DistributedTest._DistTestBase.test_ddp_multiple_nested_unused_params_err_ignore_params": ["distributed_test.DistributedTest._DistTestBase._test_ddp_multiple_nested_unused_params_error"], "distributed_test.DistributedTest._DistTestBase.test_ddp_inference": ["distributed_test.Net.__init__", "distributed_test.DistributedTest._DistTestBase._barrier", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.nn.Module.cuda", "torch.nn.SyncBatchNorm", "torch.randn", "<builtin>.range", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_ddp_sync_bn_training_vs_eval": ["torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.randn", "torch.nn.SyncBatchNorm", "torch.autograd.profiler.profile", "torch.cuda.set_device", "distributed_test.get_profiling_event"], "distributed_test.DistributedTest._DistTestBase.test_ddp_python_error_logged": ["torch.nn.Module.cuda", "torch.testing._internal.common_distributed.verify_ddp_error_logged", "torch.nn.parallel.DistributedDataParallel", "distributed_test.TwoLinLayerNet.__init__"], "distributed_test.DistributedTest._DistTestBase.test_ddp_static_graph_nested_types": ["<builtin>.isinstance", "distributed_test.DistributedTest._DistTestBase.test_ddp_static_graph_nested_types.get_loss", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "torch.nn.Module.cuda", "torch.randn", "<builtin>.range", "distributed_test.DistributedTest._DistTestBase.test_ddp_static_graph_nested_types.NestedOutputModule.__init__", "distributed_test.DistributedTest._DistTestBase._model_step", "torch.cuda.set_device", "<builtin>.zip"], "distributed_test.DistributedTest._DistTestBase.test_ddp_static_graph_nested_types.NestedOutputModule.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_ddp_static_graph_nested_types.NestedOutputModule.forward": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_static_graph_nested_types.get_loss": ["<builtin>.isinstance", "distributed_test.DistributedTest._DistTestBase.test_ddp_static_graph_nested_types.get_loss", "<builtin>.type", "<builtin>.ValueError"], "distributed_test.DistributedTest._DistTestBase.test_ddp_returns_tensor_with_no_grad": ["torch.nn.parallel.DistributedDataParallel", "distributed_test.DistributedTest._DistTestBase.test_ddp_returns_tensor_with_no_grad.MyModel.__init__", "torch.randn", "<builtin>.range", "torch.nn.Module.to", "torch.cuda.set_device", "itertools.product"], "distributed_test.DistributedTest._DistTestBase.test_ddp_returns_tensor_with_no_grad.MyModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_ddp_returns_tensor_with_no_grad.MyModel.forward": ["torch.nn.functional.relu"], "distributed_test.DistributedTest._DistTestBase.test_detect_ddp_is_actually_static": ["torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.randn", "torch.nn.Module.cuda", "distributed_test.DistributedTest._DistTestBase.test_detect_ddp_is_actually_static.ToyModel.__init__", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_detect_ddp_is_actually_static.ToyModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase.test_detect_ddp_is_actually_static.ToyModel.forward": [], "distributed_test.DistributedTest._DistTestBase._test_ddp_new_tensor_in_fwd": ["<builtin>.len", "torch.is_tensor", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.randn", "distributed_test.DistributedTest._DistTestBase._test_ddp_new_tensor_in_fwd.MyModel.__init__", "torch.nn.Module.to"], "distributed_test.DistributedTest._DistTestBase._test_ddp_new_tensor_in_fwd.MyModel.__init__": ["<builtin>.super", "torch.nn.Linear"], "distributed_test.DistributedTest._DistTestBase._test_ddp_new_tensor_in_fwd.MyModel.__init_opt": ["<builtin>.next", "torch.nn.Module.parameters", "torch.randn"], "distributed_test.DistributedTest._DistTestBase._test_ddp_new_tensor_in_fwd.MyModel.forward": ["torch.is_tensor", "distributed_test.DistributedTest._DistTestBase._test_ddp_new_tensor_in_fwd.MyModel.__init_opt", "torch.nn.functional.relu"], "distributed_test.DistributedTest._DistTestBase.test_ddp_get_bucket_sizes": ["<builtin>.len", "<builtin>.int", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.nn.Module.cuda", "torch.randn", "distributed_test.DistributedTest._DistTestBase.test_ddp_get_bucket_sizes.MyModel.__init__", "<builtin>.enumerate", "torch.cuda.set_device"], "distributed_test.DistributedTest._DistTestBase.test_ddp_get_bucket_sizes.MyModel.__init__": ["<builtin>.super", "torch.nn.Sequential", "torch.nn.Linear", "<builtin>.range"], "distributed_test.DistributedTest._DistTestBase.test_ddp_get_bucket_sizes.MyModel.forward": [], "distributed_test.DistributedTest._DistTestBase.test_ddp_new_tensor_in_fwd": ["distributed_test.DistributedTest._DistTestBase._test_ddp_new_tensor_in_fwd"], "distributed_test.DistributedTest._DistTestBase.test_ddp_new_tensor_in_fwd_static_graph": ["distributed_test.DistributedTest._DistTestBase._test_ddp_new_tensor_in_fwd"], "pipe_with_ddp_test": [], "pipe_with_ddp_test.PipeWithDDPTest.world_size": [], "pipe_with_ddp_test.PipeWithDDPTest": ["torch.testing._internal.common_distributed.skip_if_rocm", "torch.testing._internal.common_distributed.skip_if_lt_x_gpu", "torch.testing._internal.common_distributed.requires_gloo", "torch.testing._internal.common_distributed.requires_nccl", "torch.testing._internal.dist_utils.dist_init"], "pipe_with_ddp_test.PipeWithDDPTest.test_basic_nccl_ckpt_never": ["pipe_with_ddp_test.PipeWithDDPTest._run_basic_test"], "pipe_with_ddp_test.PipeWithDDPTest._run_basic_test": ["torch.empty_like", "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture.RpcAgentTestFixture.assertEqual", "torch.nn.Sequential", "torch.nn.parallel.DistributedDataParallel", "<builtin>.range", "torch.rand", "torch.distributed.init_process_group", "torch.testing._internal.dist_utils.INIT_METHOD_TEMPLATE.format", "torch.distributed.pipeline.sync.Pipe", "torch.distributed.all_gather", "pipe_with_ddp_test.PipeWithDDPTest._run_basic_test.MyModule.__init__", "torch.nn.Linear"], "pipe_with_ddp_test.PipeWithDDPTest.test_basic_nccl_ckpt_never_find_unused": ["pipe_with_ddp_test.PipeWithDDPTest._run_basic_test"], "pipe_with_ddp_test.PipeWithDDPTest.test_basic_nccl_ckpt_always": ["pipe_with_ddp_test.PipeWithDDPTest._run_basic_test"], "pipe_with_ddp_test.PipeWithDDPTest.test_basic_nccl_ckpt_except_last": ["pipe_with_ddp_test.PipeWithDDPTest._run_basic_test"], "pipe_with_ddp_test.PipeWithDDPTest.test_basic_gloo_ckpt_never": ["pipe_with_ddp_test.PipeWithDDPTest._run_basic_test"], "pipe_with_ddp_test.PipeWithDDPTest.test_basic_gloo_ckpt_never_find_unused": ["pipe_with_ddp_test.PipeWithDDPTest._run_basic_test"], "pipe_with_ddp_test.PipeWithDDPTest.test_basic_gloo_ckpt_always": ["pipe_with_ddp_test.PipeWithDDPTest._run_basic_test"], "pipe_with_ddp_test.PipeWithDDPTest.test_basic_gloo_ckpt_except_last": ["pipe_with_ddp_test.PipeWithDDPTest._run_basic_test"], "pipe_with_ddp_test.PipeWithDDPTest._run_basic_test.MyModule.__init__": ["torch.nn.Linear", "<builtin>.super"], "pipe_with_ddp_test.PipeWithDDPTest._run_basic_test.MyModule.forward": [], "rpc_utils": [], "rpc_utils._check_and_set_tcp_init": ["torch.testing._internal.common_utils.find_free_port", "<builtin>.str", "os.environ.get"], "rpc_utils._check_and_unset_tcp_init": ["os.environ.get"], "rpc_utils.ForkHelper.setUp": ["rpc_utils._check_and_set_tcp_init", "torch.testing._internal.common_distributed.MultiProcessTestCase._fork_processes", "<builtin>.super"], "torch.testing._internal.common_distributed.MultiProcessTestCase._fork_processes": [], "rpc_utils.ForkHelper.tearDown": ["rpc_utils._check_and_unset_tcp_init", "<builtin>.super"], "rpc_utils.SpawnHelper.setUp": ["torch.testing._internal.common_distributed.MultiProcessTestCase._spawn_processes", "rpc_utils._check_and_set_tcp_init", "<builtin>.super"], "torch.testing._internal.common_distributed.MultiProcessTestCase._spawn_processes": [], "rpc_utils.SpawnHelper.tearDown": ["rpc_utils._check_and_unset_tcp_init", "<builtin>.super"], "rpc_utils.MultiProcess": ["enum.auto"], "rpc_utils.generate_tests": ["<builtin>.dict", "<builtin>.type", "<builtin>.print"], "AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\torch\\testing\\_internal\\generated\\annotated_fn_args": [], "future_div": [], "future_div.div_int_future": [], "future_div.div_float_future": [], "no_future_div": [], "no_future_div.div_int_nofuture": [], "no_future_div.div_float_nofuture": [], "torch.nn.quantized.Conv1d.__init__": [], "torch.nn.functional.conv1d": [], "conv.Conv1d": ["torch.jit.export"], "conv.Conv1d.__setstate__": ["conv._ConvNd.set_weight_bias"], "torch.nn.quantized.Conv2d.__init__": [], "torch.nn.quantized.Conv3d.__init__": [], "torch.nn.functional.conv3d": [], "torch.nn.quantized._reference.Conv1d._qweight.dequantize": [], "torch.nn.quantized._reference.Conv2d._qweight.dequantize": [], "torch.nn.quantized._reference.Conv3d._qweight.dequantize": [], "torch.nn.quantized.Linear._packed_params._weight_bias": [], "torch.nn.quantized._reference.Linear._qweight.dequantize": []}