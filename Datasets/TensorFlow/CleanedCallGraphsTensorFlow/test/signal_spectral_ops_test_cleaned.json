{"signal.spectral_ops_test": ["platform.test.main"], "signal.spectral_ops_test.SpectralOpsTest._np_hann_periodic_window": ["numpy.cos", "numpy.ones", "numpy.arange"], "numpy.ones": [], "numpy.arange": [], "numpy.cos": [], "signal.spectral_ops_test.SpectralOpsTest._np_frame": ["<builtin>.int", "numpy.lib.stride_tricks.as_strided", "numpy.floor", "<builtin>.len"], "<builtin>.len": [], "numpy.floor": [], "<builtin>.int": [], "numpy.lib.stride_tricks.as_strided": [], "signal.spectral_ops_test.SpectralOpsTest._np_stft": ["signal.spectral_ops_test.SpectralOpsTest._np_frame", "numpy.fft.rfft", "signal.spectral_ops_test.SpectralOpsTest._np_hann_periodic_window"], "numpy.fft.rfft": [], "signal.spectral_ops_test.SpectralOpsTest._np_inverse_stft": ["<builtin>.max", "numpy.pad", "signal.spectral_ops_test.SpectralOpsTest._np_overlap_add", "signal.spectral_ops_test.SpectralOpsTest._np_hann_periodic_window", "numpy.fft.irfft"], "numpy.fft.irfft": [], "<builtin>.max": [], "numpy.pad": [], "signal.spectral_ops_test.SpectralOpsTest._np_overlap_add": ["<builtin>.range", "numpy.zeros", "numpy.shape"], "numpy.shape": [], "numpy.zeros": [], "<builtin>.range": [], "signal.spectral_ops_test.SpectralOpsTest._compare": ["test.TestCase.assertAllClose", "signal.spectral_ops_test.SpectralOpsTest._np_inverse_stft", "signal.spectral_ops.stft", "signal.spectral_ops.inverse_stft", "ops.array_ops.placeholder_with_default", "test.TestCase.evaluate", "signal.spectral_ops_test.SpectralOpsTest._np_stft"], "signal.spectral_ops.stft": [], "ops.array_ops.placeholder_with_default": [], "signal.spectral_ops.inverse_stft": [], "test.TestCase.evaluate": [], "test.TestCase.assertAllClose": [], "signal.spectral_ops_test.SpectralOpsTest.test_shapes": ["test.TestCase.assertAllEqual", "signal.spectral_ops.stft", "numpy.zeros", "signal.spectral_ops.inverse_stft", "test.TestCase.evaluate"], "test.TestCase.assertAllEqual": [], "absl.testing.parameterized.parameters": [], "signal.spectral_ops_test.SpectralOpsTest": ["platform.test.disable_with_predicate", "absl.testing.parameterized.parameters", "itertools.product"], "signal.spectral_ops_test.SpectralOpsTest.test_stft_and_inverse_stft": ["numpy.random.random", "signal.spectral_ops_test.SpectralOpsTest._compare"], "numpy.random.random": [], "signal.spectral_ops_test.SpectralOpsTest.test_stft_round_trip": ["numpy.abs", "signal.spectral_ops.inverse_stft_window_fn", "numpy.random.normal", "signal.spectral_ops.stft", "signal.spectral_ops.inverse_stft", "numpy.mean", "test.TestCase.assertLess", "test.TestCase.evaluate", "numpy.std"], "numpy.random.normal": [], "signal.spectral_ops.inverse_stft_window_fn": [], "numpy.abs": [], "numpy.mean": [], "numpy.std": [], "test.TestCase.assertLess": [], "signal.spectral_ops_test.SpectralOpsTest.test_inverse_stft_window_fn": ["signal.spectral_ops.inverse_stft_window_fn", "test.TestCase.assertAllClose", "<builtin>.range", "numpy.sum", "test.TestCase.evaluate", "signal.window_ops.hann_window"], "signal.window_ops.hann_window": [], "numpy.sum": [], "signal.spectral_ops_test.SpectralOpsTest.test_inverse_stft_window_fn_special_case": ["signal.spectral_ops.inverse_stft_window_fn", "test.TestCase.assertAllClose", "signal.window_ops.hann_window"], "signal.spectral_ops_test.SpectralOpsTest._compute_stft_gradient": ["ops.math_ops.reduce_sum", "ops.gradients_impl.gradients", "signal.spectral_ops.stft", "ops.math_ops.abs"], "ops.math_ops.abs": [], "ops.math_ops.reduce_sum": [], "ops.gradients_impl.gradients": [], "signal.spectral_ops_test.SpectralOpsTest.test_gradients": ["ops.math_ops.sin", "test.TestCase.assertFalse", "ops.array_ops.zeros", "signal.spectral_ops_test.SpectralOpsTest._compute_stft_gradient", "test.TestCase.session", "ops.math_ops.linspace", "test.TestCase.assertTrue", "test.TestCase.evaluate", "eager.context.executing_eagerly"], "eager.context.executing_eagerly": [], "test.TestCase.session": [], "ops.array_ops.zeros": [], "test.TestCase.assertTrue": [], "ops.math_ops.linspace": [], "ops.math_ops.sin": [], "test.TestCase.assertFalse": [], "platform.test.disable_with_predicate": [], "signal.spectral_ops_test.SpectralOpsTest.test_gradients_numerical": ["test.TestCase.assertAllClose", "signal.spectral_ops_test.SpectralOpsTest.test_gradients_numerical.forward", "numpy.random.rand", "ops.gradient_checker_v2.compute_gradient"], "numpy.random.rand": [], "signal.spectral_ops_test.SpectralOpsTest.test_gradients_numerical.forward": ["signal.spectral_ops.stft"], "ops.gradient_checker_v2.compute_gradient": [], "signal.spectral_ops_test.SpectralOpsTest.test_gradients_numerical.backward": ["signal.spectral_ops.inverse_stft"], "itertools.product": [], "signal.spectral_ops_test.SpectralOpsTest.test_mdct_round_trip": ["signal.spectral_ops.mdct", "numpy.random.normal", "signal.spectral_ops.inverse_mdct", "test.TestCase.assertAllClose", "numpy.minimum", "test.TestCase.evaluate"], "signal.spectral_ops.mdct": [], "signal.spectral_ops.inverse_mdct": [], "numpy.minimum": [], "platform.test.main": []}