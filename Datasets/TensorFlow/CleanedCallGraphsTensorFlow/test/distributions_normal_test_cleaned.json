{"distributions.normal_test": ["ops.math_ops.square", "platform.test.main"], "distributions.normal_test.try_import": ["importlib.import_module", "<builtin>.str", "platform.tf_logging.warning"], "importlib.import_module": [], "<builtin>.str": [], "platform.tf_logging.warning": [], "distributions.normal_test.NormalTest.setUp": ["numpy.random.RandomState"], "numpy.random.RandomState": [], "distributions.normal_test.NormalTest.assertAllFinite": ["numpy.isfinite", "test.TestCase.evaluate", "numpy.ones_like", "test.TestCase.assertAllEqual"], "test.TestCase.evaluate": [], "numpy.isfinite": [], "numpy.ones_like": [], "test.TestCase.assertAllEqual": [], "distributions.normal_test.NormalTest._testParamShapes": ["ops.array_ops.shape", "ops.array_ops.zeros", "normal.Normal.param_shapes", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "ops.array_ops.ones"], "normal.Normal.param_shapes": [], "ops.array_ops.zeros": [], "ops.array_ops.ones": [], "distributions.normal.Normal": [], "ops.array_ops.shape": [], "distributions.normal_test.NormalTest._testParamStaticShapes": ["test.TestCase.assertEqual", "normal.Normal.param_static_shapes"], "normal.Normal.param_static_shapes": [], "test.TestCase.assertEqual": [], "distributions.normal_test.NormalTest": ["framework.test_util.run_in_graph_and_eager_modes", "framework.test_util.run_deprecated_v1"], "framework.test_util.run_in_graph_and_eager_modes": [], "distributions.normal_test.NormalTest.testSampleLikeArgsGetDistDType": ["distributions.normal.Normal", "<builtin>.getattr", "test.TestCase.assertEqual"], "<builtin>.getattr": [], "distributions.normal_test.NormalTest.testParamShapes": ["framework.constant_op.constant", "framework.constant_op.constant"], "framework.constant_op.constant": [], "distributions.normal_test.NormalTest.testParamStaticShapes": ["framework.constant_op.constant", "framework.tensor_shape.TensorShape"], "framework.tensor_shape.TensorShape": [], "distributions.normal_test.NormalTest.testNormalWithSoftplusScale": ["ops.nn_ops.softplus", "ops.array_ops.zeros", "distributions.normal.NormalWithSoftplusScale", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "ops.array_ops.ones"], "distributions.normal.NormalWithSoftplusScale": [], "ops.nn_ops.softplus": [], "distributions.normal_test.NormalTest.testNormalLogPDF": ["framework.constant_op.constant", "test.TestCase.assertAllClose", "numpy.array", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.exp"], "numpy.array": [], "test.TestCase.assertAllClose": [], "numpy.exp": [], "distributions.normal_test.NormalTest.testNormalLogPDFMultidimensional": ["framework.constant_op.constant", "test.TestCase.assertAllClose", "numpy.array", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.exp", "test.TestCase.assertEqual"], "distributions.normal_test.NormalTest.testNormalCDF": ["test.TestCase.assertAllClose", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.linspace"], "numpy.linspace": [], "distributions.normal_test.NormalTest.testNormalSurvivalFunction": ["test.TestCase.assertAllClose", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.linspace"], "distributions.normal_test.NormalTest.testNormalLogCDF": ["test.TestCase.assertAllClose", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.linspace"], "distributions.normal_test.NormalTest.testFiniteGradientAtDifficultPoints": ["framework.ops.Graph", "ops.variables.Variable", "ops.variables.Variable", "numpy.array", "distributions.normal.Normal", "test.TestCase.evaluate", "ops.variables.global_variables_initializer", "ops.gradients_impl.gradients", "test.TestCase.session"], "framework.ops.Graph": [], "ops.variables.Variable": [], "ops.gradients_impl.gradients": [], "test.TestCase.session": [], "ops.variables.global_variables_initializer": [], "distributions.normal_test.NormalTest.testNormalLogSurvivalFunction": ["test.TestCase.assertAllClose", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.linspace"], "distributions.normal_test.NormalTest.testNormalEntropyWithScalarInputs": ["distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "test.TestCase.assertAllEqual"], "distributions.normal_test.NormalTest.testNormalEntropy": ["numpy.log", "numpy.array", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.exp", "numpy.testing.assert_allclose"], "numpy.log": [], "numpy.testing.assert_allclose": [], "distributions.normal_test.NormalTest.testNormalMeanAndMode": ["distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual"], "distributions.normal_test.NormalTest.testNormalQuantile": ["test.TestCase.assertAllClose", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.exp", "numpy.hstack", "numpy.linspace"], "numpy.hstack": [], "distributions.normal_test.NormalTest._baseQuantileFiniteGradientAtDifficultPoints": ["framework.ops.Graph", "test.TestCase.cached_session", "numpy.float64", "numpy.float32", "ops.variables.Variable", "ops.variables.Variable", "numpy.array", "distributions.normal.Normal", "test.TestCase.evaluate", "ops.variables.global_variables_initializer", "numpy.exp", "ops.gradients_impl.gradients"], "numpy.float32": [], "numpy.float64": [], "test.TestCase.cached_session": [], "distributions.normal_test.NormalTest.testQuantileFiniteGradientAtDifficultPointsFloat32": ["ops.gradients_impl.gradients"], "distributions.normal_test.NormalTest.testQuantileFiniteGradientAtDifficultPointsFloat64": ["ops.gradients_impl.gradients"], "distributions.normal_test.NormalTest.testNormalVariance": ["distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual"], "distributions.normal_test.NormalTest.testNormalStandardDeviation": ["distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual"], "distributions.normal_test.NormalTest.testNormalSample": ["framework.constant_op.constant", "framework.tensor_shape.TensorShape", "test.TestCase.assertAllClose", "numpy.sqrt", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "math.sqrt", "test.TestCase.assertEqual"], "math.sqrt": [], "numpy.sqrt": [], "distributions.normal_test.NormalTest.testNormalFullyReparameterized": ["distributions.normal.Normal", "framework.constant_op.constant", "eager.backprop.GradientTape", "test.TestCase.assertIsNotNone"], "eager.backprop.GradientTape": [], "test.TestCase.assertIsNotNone": [], "distributions.normal_test.NormalTest.testNormalSampleMultiDimensional": ["framework.constant_op.constant", "framework.tensor_shape.TensorShape", "test.TestCase.assertAllClose", "numpy.sqrt", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual"], "distributions.normal_test.NormalTest.testNegativeSigmaFails": ["distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertRaisesOpError"], "test.TestCase.assertRaisesOpError": [], "distributions.normal_test.NormalTest.testNormalShape": ["framework.constant_op.constant", "framework.tensor_shape.TensorShape", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual"], "framework.test_util.run_deprecated_v1": [], "distributions.normal_test.NormalTest.testNormalShapeWithPlaceholders": ["framework.tensor_shape.TensorShape", "test.TestCase.cached_session", "distributions.normal.Normal", "test.TestCase.evaluate", "ops.array_ops.placeholder", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual"], "ops.array_ops.placeholder": [], "distributions.normal_test.NormalTest.testNormalNormalKL": ["distributions.kullback_leibler.kl_divergence", "numpy.log", "test.TestCase.assertAllClose", "numpy.array", "distributions.normal.Normal", "test.TestCase.evaluate", "test.TestCase.assertEqual"], "distributions.kullback_leibler.kl_divergence": [], "platform.test.main": []}