{"testing.codegen": [], "testing.codegen.NodeSampler.sample": ["numpy.array", "numpy.sum", "<builtin>.zip", "numpy.random.choice"], "<builtin>.zip": [], "numpy.array": [], "numpy.sum": [], "numpy.random.choice": [], "<builtin>.dict": [], "testing.codegen.StatementSampler": ["<builtin>.dict"], "testing.codegen.ExpressionSampler": ["<builtin>.dict"], "testing.codegen.CompareSampler": ["<builtin>.dict"], "testing.codegen.BinaryOpSampler": ["<builtin>.dict"], "testing.codegen.UnaryOpSampler": ["<builtin>.dict"], "testing.codegen.NameSampler": ["<builtin>.dict"], "testing.codegen.CodeGenerator.__init__": [], "testing.codegen.CodeGenerator.generate_statement": ["<builtin>.getattr", "testing.codegen.CodeGenerator.generate_statement", "testing.codegen.NodeSampler.sample"], "<builtin>.getattr": [], "testing.codegen.CodeGenerator.sample_node_list": ["numpy.random.randint", "testing.codegen.CodeGenerator.generate_statement", "<builtin>.range"], "numpy.random.randint": [], "<builtin>.range": [], "testing.codegen.CodeGenerator.generate_Name": ["gast.Name", "random.choice", "<builtin>.range"], "random.choice": [], "gast.Name": [], "testing.codegen.CodeGenerator.generate_BinOp": ["gast.BinOp", "testing.codegen.NodeSampler.sample", "testing.codegen.CodeGenerator.generate_Name"], "gast.BinOp": [], "testing.codegen.CodeGenerator.generate_Compare": ["gast.Compare", "testing.codegen.NodeSampler.sample", "testing.codegen.CodeGenerator.generate_Name"], "gast.Compare": [], "testing.codegen.CodeGenerator.generate_UnaryOp": ["testing.codegen.NodeSampler.sample", "testing.codegen.CodeGenerator.generate_Name", "gast.UnaryOp"], "gast.UnaryOp": [], "testing.codegen.CodeGenerator.generate_expression": ["<builtin>.getattr", "testing.codegen.NodeSampler.sample"], "testing.codegen.CodeGenerator.generate_Assign": ["gast.Store", "gast.Assign", "testing.codegen.CodeGenerator.generate_expression", "testing.codegen.CodeGenerator.generate_Name"], "gast.Store": [], "gast.Assign": [], "testing.codegen.CodeGenerator.generate_If": ["gast.If", "testing.codegen.CodeGenerator.sample_node_list", "testing.codegen.CodeGenerator.generate_Compare"], "gast.If": [], "testing.codegen.CodeGenerator.generate_While": ["gast.While", "testing.codegen.CodeGenerator.sample_node_list", "testing.codegen.CodeGenerator.generate_Compare"], "gast.While": [], "testing.codegen.CodeGenerator.generate_Call": [], "testing.codegen.CodeGenerator.generate_Return": ["gast.Return", "testing.codegen.CodeGenerator.generate_expression"], "gast.Return": [], "testing.codegen.CodeGenerator.generate_Print": ["pyct.templates.replace", "testing.codegen.CodeGenerator.generate_expression"], "pyct.templates.replace": [], "testing.codegen.CodeGenerator.generate_FunctionDef": ["gast.arguments", "testing.codegen.CodeGenerator.sample_node_list", "testing.codegen.CodeGenerator.generate_Return", "testing.codegen.CodeGenerator.generate_Name", "gast.FunctionDef"], "testing.codegen.CodeGenerator.generate_FunctionDef.<lambda1>": ["gast.Param", "testing.codegen.CodeGenerator.generate_Name"], "gast.Param": [], "gast.arguments": [], "gast.FunctionDef": [], "testing.codegen.generate_random_functiondef": ["testing.codegen.CodeGenerator.__init__", "testing.codegen.CodeGenerator.generate_FunctionDef"]}