{"utils.conv_utils_test": ["platform.test.main"], "utils.conv_utils_test._get_const_output_shape": ["<builtin>.tuple", "<builtin>.min"], "<builtin>.min": [], "<builtin>.tuple": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_convert_data_format": ["test.TestCase.assertRaises", "utils.conv_utils.convert_data_format", "test.TestCase.assertEqual"], "utils.conv_utils.convert_data_format": [], "test.TestCase.assertEqual": [], "test.TestCase.assertRaises": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_normalize_tuple": ["utils.conv_utils.normalize_tuple", "test.TestCase.assertEqual", "test.TestCase.assertRaises"], "utils.conv_utils.normalize_tuple": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_normalize_data_format": ["test.TestCase.assertRaises", "test.TestCase.assertEqual", "utils.conv_utils.normalize_data_format"], "utils.conv_utils.normalize_data_format": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_normalize_padding": ["test.TestCase.assertRaises", "test.TestCase.assertEqual", "utils.conv_utils.normalize_padding"], "utils.conv_utils.normalize_padding": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_conv_output_length": ["test.TestCase.assertEqual", "utils.conv_utils.conv_output_length"], "utils.conv_utils.conv_output_length": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_conv_input_length": ["test.TestCase.assertEqual", "utils.conv_utils.conv_input_length"], "utils.conv_utils.conv_input_length": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_deconv_output_length": ["utils.conv_utils.deconv_output_length", "test.TestCase.assertEqual"], "utils.conv_utils.deconv_output_length": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_fc": ["utils.conv_utils_test._get_const_output_shape", "test.TestCase.assertAllEqual", "utils.conv_utils.conv_kernel_mask", "<builtin>.len", "numpy.ones"], "<builtin>.len": [], "numpy.ones": [], "utils.conv_utils.conv_kernel_mask": [], "test.TestCase.assertAllEqual": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_diag": ["numpy.reshape", "test.TestCase.assertAllEqual", "<builtin>.int", "utils.conv_utils.conv_kernel_mask", "<builtin>.len", "numpy.prod", "numpy.identity"], "numpy.prod": [], "<builtin>.int": [], "numpy.identity": [], "numpy.reshape": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_full_stride": ["<builtin>.tuple", "utils.conv_utils_test._get_const_output_shape", "test.TestCase.assertAllEqual", "utils.conv_utils.conv_kernel_mask", "<builtin>.len", "<builtin>.all", "numpy.zeros", "<builtin>.max"], "<builtin>.max": [], "numpy.zeros": [], "<builtin>.all": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_almost_full_stride": ["<builtin>.tuple", "utils.conv_utils_test._get_const_output_shape", "test.TestCase.assertAllEqual", "utils.conv_utils.conv_kernel_mask", "<builtin>.len", "<builtin>.all", "itertools.product", "numpy.zeros", "<builtin>.max", "<builtin>.min"], "itertools.product": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_rect_kernel": ["numpy.reshape", "numpy.take", "test.TestCase.assertAllEqual", "<builtin>.int", "<builtin>.range", "utils.conv_utils.conv_kernel_mask", "<builtin>.len", "<builtin>.slice", "itertools.product", "numpy.prod", "numpy.identity", "<builtin>.list", "<builtin>.min"], "<builtin>.range": [], "<builtin>.list": [], "<builtin>.slice": [], "numpy.take": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_wrong_padding": ["test.TestCase.assertRaises", "utils.conv_utils.conv_kernel_mask", "<builtin>.len"], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_wrong_dims": ["test.TestCase.assertRaises", "utils.conv_utils.conv_kernel_mask", "<builtin>.len"], "platform.test.main": []}