{"distributions.student_t_test": ["platform.test.main", "platform.test.main"], "distributions.student_t_test.try_import": ["platform.tf_logging.warning", "<builtin>.str", "importlib.import_module"], "importlib.import_module": [], "<builtin>.str": [], "platform.tf_logging.warning": [], "distributions.student_t_test.StudentTTest.testStudentPDFAndLogPDF": ["numpy.array", "distributions.student_t.StudentT", "numpy.log", "numpy.exp", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant", "test.TestCase.assertEqual"], "framework.constant_op.constant": [], "numpy.array": [], "distributions.student_t.StudentT": [], "test.TestCase.assertEqual": [], "test.TestCase.evaluate": [], "test.TestCase.assertAllClose": [], "numpy.log": [], "numpy.exp": [], "distributions.student_t_test.StudentTTest.testStudentLogPDFMultidimensional": ["numpy.array", "distributions.student_t.StudentT", "numpy.log", "numpy.exp", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant", "test.TestCase.assertEqual"], "distributions.student_t_test.StudentTTest.testStudentCDFAndLogCDF": ["numpy.array", "distributions.student_t.StudentT", "numpy.log", "numpy.exp", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant", "test.TestCase.assertEqual"], "distributions.student_t_test.StudentTTest.testStudentEntropy": ["numpy.array", "distributions.student_t.StudentT", "test.TestCase.evaluate", "numpy.reshape", "test.TestCase.assertAllClose", "numpy.abs"], "numpy.abs": [], "numpy.reshape": [], "distributions.student_t_test.StudentTTest.testStudentSample": ["math.sqrt", "distributions.student_t.StudentT", "distributions.student_t.StudentT", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant", "test.TestCase.assertEqual", "numpy.sqrt"], "math.sqrt": [], "numpy.sqrt": [], "distributions.student_t_test.StudentTTest._checkKLApprox": ["numpy.log", "test.TestCase.assertLess", "test.TestCase.assertGreater", "numpy.histogram", "numpy.random.seed", "numpy.sum"], "distributions.student_t_test.StudentTTest.testStudentSampleMultipleTimes": ["math.sqrt", "distributions.student_t.StudentT", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant", "framework.random_seed.set_random_seed"], "framework.random_seed.set_random_seed": [], "distributions.student_t_test.StudentTTest.testStudentSampleSmallDfNoNan": ["distributions.student_t.StudentT", "numpy.logical_not", "test.TestCase.assertTrue", "test.TestCase.evaluate", "numpy.all", "numpy.isnan", "framework.constant_op.constant", "test.TestCase.assertEqual"], "numpy.isnan": [], "numpy.logical_not": [], "numpy.all": [], "test.TestCase.assertTrue": [], "distributions.student_t_test.StudentTTest.testStudentSampleMultiDimensional": ["distributions.student_t.StudentT", "distributions.student_t.StudentT", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant", "test.TestCase.assertEqual"], "numpy.random.seed": [], "numpy.histogram": [], "test.TestCase.assertGreater": [], "numpy.sum": [], "test.TestCase.assertLess": [], "distributions.student_t_test.StudentTTest.testBroadcastingParams": ["test.TestCase.assertEqual", "distributions.student_t.StudentT"], "distributions.student_t_test.StudentTTest.testBroadcastingParams._check": ["test.TestCase.assertEqual"], "distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs": ["test.TestCase.assertEqual", "test.TestCase.assertEqual", "test.TestCase.assertEqual", "distributions.student_t.StudentT"], "distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._assert_shape": ["test.TestCase.assertEqual"], "distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check": ["numpy.array", "test.TestCase.assertEqual"], "distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check2d": ["numpy.array", "test.TestCase.assertEqual"], "distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check2d_rows": ["numpy.array", "test.TestCase.assertEqual"], "distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsFalseWorksWhenAllBatchMembersAreDefined": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "distributions.student_t.StudentT"], "distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsFalseRaisesWhenBatchMemberIsUndefined": ["test.TestCase.assertRaisesOpError", "test.TestCase.evaluate", "distributions.student_t.StudentT"], "test.TestCase.assertRaisesOpError": [], "distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsTrueReturnsNaNForUndefinedBatchMembers": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "distributions.student_t.StudentT"], "distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsTrueReturnsNaNforUndefinedBatchMembers": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "distributions.student_t.StudentT", "<builtin>.zip"], "<builtin>.zip": [], "distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsFalseGivesCorrectValueForDefinedBatchMembers": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "distributions.student_t.StudentT", "<builtin>.zip"], "distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsFalseRaisesForUndefinedBatchMembers": ["test.TestCase.assertRaisesOpError", "test.TestCase.evaluate", "distributions.student_t.StudentT"], "distributions.student_t_test.StudentTTest.testStd": ["distributions.student_t.StudentT", "test.TestCase.evaluate", "<builtin>.zip", "test.TestCase.assertAllClose", "<builtin>.len"], "<builtin>.len": [], "distributions.student_t_test.StudentTTest.testMode": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "distributions.student_t.StudentT"], "distributions.student_t_test.StudentTTest.testPdfOfSample": ["test.TestCase.assertNear", "distributions.student_t.StudentT", "distributions.student_t.StudentT", "test.TestCase.evaluate", "numpy.mean", "test.TestCase.assertEqual"], "numpy.mean": [], "test.TestCase.assertNear": [], "distributions.student_t_test.StudentTTest._assertIntegral": ["<builtin>.zip", "<builtin>.sorted", "test.TestCase.assertNear"], "distributions.student_t_test.StudentTTest.testFullyReparameterized": ["test.TestCase.assertIsNotNone", "framework.constant_op.constant", "distributions.student_t.StudentT", "eager.backprop.GradientTape"], "eager.backprop.GradientTape": [], "test.TestCase.assertIsNotNone": [], "distributions.student_t_test.StudentTTest.testPdfOfSampleMultiDims": ["distributions.student_t.StudentT", "test.TestCase.assertNear", "test.TestCase.assertNear", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "numpy.mean", "test.TestCase.assertEqual", "numpy.var"], "test.TestCase.assertAllEqual": [], "numpy.var": [], "distributions.student_t_test.StudentTTest._assertIntegral.<lambda1>": [], "<builtin>.sorted": [], "distributions.student_t_test.StudentTTest.testNegativeDofFails": ["test.TestCase.assertRaisesOpError", "test.TestCase.evaluate", "distributions.student_t.StudentT"], "distributions.student_t_test.StudentTTest.testStudentTWithAbsDfSoftplusScale": ["test.TestCase.evaluate", "ops.math_ops.abs", "ops.math_ops.floor", "test.TestCase.assertAllClose", "ops.nn_ops.softplus", "framework.constant_op.constant", "distributions.student_t.StudentTWithAbsDfSoftplusScale"], "distributions.student_t.StudentTWithAbsDfSoftplusScale": [], "ops.math_ops.abs": [], "ops.math_ops.floor": [], "ops.nn_ops.softplus": [], "platform.test.main": []}