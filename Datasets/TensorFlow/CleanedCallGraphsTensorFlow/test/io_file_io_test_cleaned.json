{"io.file_io_test": ["platform.test.main", "absl.testing.parameterized.named_parameters"], "io.file_io_test.PathLike.__init__": [], "io.file_io_test.PathLike.__fspath__": [], "io.file_io_test.PathLike.__str__": [], "io.file_io_test.<lambda1>": ["io.file_io.join", "io.file_io.join"], "io.file_io.join": [], "absl.testing.parameterized.named_parameters": [], "io.file_io_test.FileIoTest.setUp": ["io.file_io.create_dir", "io.file_io.join", "test.TestCase.get_temp_dir"], "test.TestCase.get_temp_dir": [], "io.file_io.create_dir": [], "io.file_io_test.FileIoTest.tearDown": ["io.file_io.delete_recursively"], "io.file_io.delete_recursively": [], "io.file_io_test.FileIoTest.testEmptyFilename": ["test.TestCase.assertRaises", "io.file_io.FileIO"], "io.file_io.FileIO": [], "test.TestCase.assertRaises": [], "io.file_io_test.FileIoTest.testJoinUrlLike": ["io.file_io.join", "test.TestCase.assertEqual"], "test.TestCase.assertEqual": [], "io.file_io_test.FileIoTest.testJoinFilesystem": ["io.file_io.join", "test.TestCase.assertEqual"], "io.file_io_test.FileIoTest": ["test.TestCase.assertEqual"], "io.file_io_test.run_all_path_types": [], "io.file_io_test.FileIoTest.testFileDoesntExist": ["io.file_io.file_exists", "test.TestCase.assertRaises", "test.TestCase.assertFalse", "io.file_io.read_file_to_string"], "io.file_io.file_exists": [], "test.TestCase.assertFalse": [], "io.file_io.read_file_to_string": [], "io.file_io_test.FileIoTest.testWriteToString": ["test.TestCase.assertTrue", "test.TestCase.assertEqual", "io.file_io.read_file_to_string", "io.file_io.write_string_to_file", "io.file_io.file_exists"], "io.file_io.write_string_to_file": [], "test.TestCase.assertTrue": [], "io.file_io_test.FileIoTest.testAtomicWriteStringToFile": ["io.file_io.file_exists", "test.TestCase.assertEqual", "io.file_io.read_file_to_string", "io.file_io.atomic_write_string_to_file", "test.TestCase.assertTrue", "io.file_io.join"], "io.file_io.atomic_write_string_to_file": [], "io.file_io_test.FileIoTest.testAtomicWriteStringToFileOverwriteFalse": ["test.TestCase.assertEqual", "io.file_io.read_file_to_string", "io.file_io.join", "io.file_io.atomic_write_string_to_file", "io.file_io.delete_file", "test.TestCase.assertRaises"], "io.file_io.delete_file": [], "io.file_io_test.FileIoTest.testReadBinaryMode": ["io.file_io.write_string_to_file", "io.file_io.FileIO", "test.TestCase.assertEqual"], "io.file_io_test.FileIoTest.testWriteBinaryMode": ["io.file_io.FileIO", "test.TestCase.assertEqual"], "io.file_io_test.FileIoTest.testAppend": ["io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testMultipleFiles": ["<builtin>.range", "<builtin>.str", "test.TestCase.assertEqual", "io.file_io.FileIO", "io.file_io.join"], "<builtin>.range": [], "<builtin>.str": [], "io.file_io_test.FileIoTest.testMultipleWrites": ["io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO", "io.file_io.read_file_to_string"], "io.file_io_test.FileIoTest.testFileWriteBadMode": ["test.TestCase.assertRaises", "io.file_io.join", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testFileReadBadMode": ["test.TestCase.assertRaises", "io.file_io.file_exists", "io.file_io.FileIO", "test.TestCase.assertTrue", "io.file_io.join"], "io.file_io_test.FileIoTest.testFileDelete": ["io.file_io.delete_file", "io.file_io.FileIO", "io.file_io.file_exists", "test.TestCase.assertFalse"], "io.file_io_test.FileIoTest.testFileDeleteFail": ["test.TestCase.assertRaises", "io.file_io.join", "io.file_io.delete_file"], "io.file_io_test.FileIoTest.testGetMatchingFiles": ["test.TestCase.assertFalse", "<builtin>.tuple", "io.file_io.create_dir", "io.file_io.FileIO", "io.file_io.file_exists", "test.TestCase.assertItemsEqual", "io.file_io.join", "io.file_io.get_matching_files", "io.file_io.delete_recursively"], "io.file_io.get_matching_files": [], "test.TestCase.assertItemsEqual": [], "<builtin>.tuple": [], "io.file_io_test.FileIoTest.testGetMatchingFilesWhenParentDirContainsParantheses": ["io.file_io.create_dir", "io.file_io.FileIO", "test.TestCase.assertItemsEqual", "io.file_io.join", "io.file_io.get_matching_files"], "io.file_io_test.FileIoTest.testCreateRecursiveDir": ["<builtin>.str", "test.TestCase.assertTrue", "io.file_io.recursive_create_dir", "test.TestCase.assertFalse", "io.file_io.FileIO", "io.file_io.file_exists", "io.file_io.join", "io.file_io.delete_recursively"], "io.file_io.recursive_create_dir": [], "io.file_io_test.FileIoTest.testCopy": ["test.TestCase.assertTrue", "io.file_io.copy", "test.TestCase.assertEqual", "io.file_io.file_exists", "io.file_io.FileIO"], "io.file_io.copy": [], "io.file_io_test.FileIoTest.testCopyOverwrite": ["test.TestCase.assertTrue", "io.file_io.copy", "test.TestCase.assertEqual", "io.file_io.FileIO", "io.file_io.file_exists", "io.file_io.join"], "io.file_io_test.FileIoTest.testCopyOverwriteFalse": ["io.file_io.copy", "test.TestCase.assertRaises", "io.file_io.join", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testRename": ["io.file_io.rename", "io.file_io.file_exists", "test.TestCase.assertFalse", "test.TestCase.assertTrue", "io.file_io.FileIO"], "io.file_io.rename": [], "io.file_io_test.FileIoTest.testRenameOverwrite": ["io.file_io.rename", "io.file_io.file_exists", "test.TestCase.assertFalse", "io.file_io.FileIO", "test.TestCase.assertTrue", "io.file_io.join"], "io.file_io_test.FileIoTest.testRenameOverwriteFalse": ["io.file_io.rename", "test.TestCase.assertTrue", "io.file_io.join", "io.file_io.FileIO", "io.file_io.file_exists", "test.TestCase.assertRaises"], "io.file_io_test.FileIoTest.testDeleteRecursivelyFail": ["test.TestCase.assertRaises", "io.file_io.join", "io.file_io.delete_recursively"], "io.file_io_test.FileIoTest.testIsDirectory": ["<builtin>.str", "test.TestCase.assertFalse", "io.file_io.is_directory", "io.file_io.stat", "io.file_io.create_dir", "test.TestCase.assertTrue", "io.file_io.FileIO"], "io.file_io.is_directory": [], "io.file_io.stat": [], "io.file_io_test.FileIoTest.testListDirectory": ["io.file_io.list_directory", "<builtin>.str", "io.file_io.create_dir", "test.TestCase.assertItemsEqual", "io.file_io.FileIO"], "io.file_io.list_directory": [], "io.file_io_test.FileIoTest.testListDirectoryFailure": ["test.TestCase.assertRaises", "io.file_io.join", "io.file_io.list_directory"], "io.file_io_test.FileIoTest._setupWalkDirectories": ["io.file_io.create_dir", "io.file_io.join", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testWalkInOrder": ["test.TestCase.assertEqual", "test.TestCase.assertEqual", "io.file_io.walk", "test.TestCase.assertLess", "test.TestCase.assertItemsEqual", "io.file_io.join"], "io.file_io.walk": [], "test.TestCase.assertLess": [], "io.file_io_test.FileIoTest.testWalkPostOrder": ["test.TestCase.assertEqual", "test.TestCase.assertEqual", "io.file_io.walk", "test.TestCase.assertLess", "test.TestCase.assertItemsEqual", "io.file_io.join"], "io.file_io_test.FileIoTest.testWalkFailure": ["test.TestCase.assertItemsEqual", "io.file_io.join", "io.file_io.walk"], "io.file_io_test.FileIoTest.testStat": ["<builtin>.str", "test.TestCase.assertFalse", "test.TestCase.assertEqual", "io.file_io.stat", "io.file_io.FileIO", "<builtin>.int"], "<builtin>.int": [], "io.file_io_test.FileIoTest.testReadLine": ["io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testRead": ["io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testReadErrorReacquiresGil": ["test.TestCase.assertRaises", "io.file_io.join", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testTell": ["io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testSeek": ["test.TestCase.assertRaises", "io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testSeekFromWhat": ["test.TestCase.assertRaises", "io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testReadingIterator": ["io.file_io.join", "io.file_io.FileIO", "test.TestCase.assertSequenceEqual"], "test.TestCase.assertSequenceEqual": [], "io.file_io_test.FileIoTest.testReadlines": ["io.file_io.join", "io.file_io.FileIO", "test.TestCase.assertSequenceEqual"], "io.file_io_test.FileIoTest.testUTF8StringPath": ["io.file_io.write_string_to_file", "io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO"], "io.file_io_test.FileIoTest.testEof": ["<builtin>.len", "io.file_io.join", "test.TestCase.assertEqual", "io.file_io.FileIO"], "<builtin>.len": [], "io.file_io_test.FileIoTest.testUTF8StringPathExists": ["io.file_io.write_string_to_file", "io.file_io.file_exists", "test.TestCase.assertEqual"], "io.file_io_test.FileIoTest.testFilecmp": ["test.TestCase.assertFalse", "io.file_io.filecmp", "io.file_io.write_string_to_file", "test.TestCase.assertTrue", "io.file_io.join"], "io.file_io.filecmp": [], "io.file_io_test.FileIoTest.testFilecmpSameSize": ["test.TestCase.assertFalse", "io.file_io.filecmp", "io.file_io.write_string_to_file", "test.TestCase.assertTrue", "io.file_io.join"], "io.file_io_test.FileIoTest.testFilecmpBinary": ["test.TestCase.assertFalse", "io.file_io.filecmp", "io.file_io.FileIO", "test.TestCase.assertTrue", "io.file_io.join"], "io.file_io_test.FileIoTest.testFileCrc32": ["test.TestCase.assertEqual", "io.file_io.write_string_to_file", "test.TestCase.assertTrue", "io.file_io.join", "io.file_io.file_crc32"], "io.file_io.file_crc32": [], "io.file_io_test.FileIoTest.testFileCrc32WithBytes": ["test.TestCase.assertEqual", "io.file_io.write_string_to_file", "test.TestCase.assertTrue", "io.file_io.join", "io.file_io.file_crc32"], "io.file_io_test.FileIoTest.testFileCrc32Binary": ["test.TestCase.assertEqual", "io.file_io.FileIO", "test.TestCase.assertTrue", "io.file_io.join", "io.file_io.file_crc32"], "io.file_io_test.FileIoTest.testMatchingFilesPermission": ["io.file_io.create_dir", "io.file_io.FileIO", "test.TestCase.assertItemsEqual", "io.file_io.join", "io.file_io.get_matching_files"], "io.file_io_test.FileIoTest.testFileSeekableWithZip": ["numpy.savez_compressed", "io.file_io.join", "numpy.load", "platform.gfile.GFile"], "numpy.savez_compressed": [], "platform.gfile.GFile": [], "numpy.load": [], "io.file_io_test.FileIoTest.testHasAtomicMove": ["test.TestCase.assertTrue", "io.file_io.has_atomic_move"], "io.file_io.has_atomic_move": [], "platform.test.main": []}