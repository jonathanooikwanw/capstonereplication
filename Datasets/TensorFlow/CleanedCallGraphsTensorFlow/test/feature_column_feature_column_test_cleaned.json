{"feature_column.feature_column_test": ["platform.test.main"], "feature_column.feature_column_test._initialized_session": ["ops.lookup_ops.tables_initializer", "ops.variables.global_variables_initializer", "client.session.Session"], "client.session.Session": [], "ops.variables.global_variables_initializer": [], "ops.lookup_ops.tables_initializer": [], "feature_column.feature_column_test.LazyColumnTest.test_transformations_called_once": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertEqual", "test.TestCase.assertEqual"], "feature_column.feature_column_test.LazyColumnTest.test_transformations_called_once.TransformCounter.__init__": [], "feature_column.feature_column_test.LazyColumnTest.test_transformations_called_once.TransformCounter.name": [], "feature_column.feature_column_test.LazyColumnTest.test_transformations_called_once.TransformCounter._transform_feature": [], "feature_column.feature_column_test.LazyColumnTest.test_transformations_called_once.TransformCounter._parse_example_spec": [], "feature_column.feature_column._LazyBuilder": [], "test.TestCase.assertEqual": [], "feature_column.feature_column_test.LazyColumnTest.test_returns_transform_output": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertEqual", "feature_column._FeatureColumn.__init__"], "feature_column.feature_column_test.LazyColumnTest.test_returns_transform_output.Transformer.name": [], "feature_column.feature_column_test.LazyColumnTest.test_returns_transform_output.Transformer._transform_feature": [], "feature_column.feature_column_test.LazyColumnTest.test_returns_transform_output.Transformer._parse_example_spec": [], "feature_column._FeatureColumn.__init__": [], "feature_column.feature_column_test.LazyColumnTest.test_does_not_pollute_given_features_dict": ["feature_column.feature_column._LazyBuilder", "<builtin>.list", "feature_column._FeatureColumn.__init__", "test.TestCase.assertEqual"], "feature_column.feature_column_test.LazyColumnTest.test_does_not_pollute_given_features_dict.Transformer.name": [], "feature_column.feature_column_test.LazyColumnTest.test_does_not_pollute_given_features_dict.Transformer._transform_feature": [], "feature_column.feature_column_test.LazyColumnTest.test_does_not_pollute_given_features_dict.Transformer._parse_example_spec": [], "<builtin>.list": [], "feature_column.feature_column_test.LazyColumnTest.test_error_if_feature_is_not_found": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex"], "test.TestCase.assertRaisesRegex": [], "feature_column.feature_column_test.LazyColumnTest.test_not_supported_feature_column": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex", "feature_column._FeatureColumn.__init__"], "feature_column.feature_column_test.LazyColumnTest.test_not_supported_feature_column.NotAProperColumn.name": [], "feature_column.feature_column_test.LazyColumnTest.test_not_supported_feature_column.NotAProperColumn._transform_feature": [], "feature_column.feature_column_test.LazyColumnTest.test_not_supported_feature_column.NotAProperColumn._parse_example_spec": [], "feature_column.feature_column_test.LazyColumnTest.test_key_should_be_string_or_feature_colum": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.LazyColumnTest.test_expand_dim_rank_1_sparse_tensor_empty_batch": ["numpy.reshape", "test.TestCase.cached_session", "test.TestCase.assertAllEqual", "numpy.array", "feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensor"], "numpy.array": [], "numpy.reshape": [], "framework.sparse_tensor.SparseTensor": [], "test.TestCase.cached_session": [], "test.TestCase.assertAllEqual": [], "feature_column.feature_column_test.NumericColumnTest.test_defaults": ["feature_column.feature_column._numeric_column", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column._numeric_column": [], "test.TestCase.assertIsNone": [], "feature_column.feature_column_test.NumericColumnTest.test_key_should_be_string": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.NumericColumnTest.test_shape_saved_as_tuple": ["feature_column.feature_column._numeric_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.NumericColumnTest.test_default_value_saved_as_tuple": ["feature_column.feature_column._numeric_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.NumericColumnTest.test_shape_and_default_value_compatibility": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.NumericColumnTest.test_default_value_type_check": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.NumericColumnTest.test_shape_must_be_positive_integer": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.NumericColumnTest.test_dtype_is_convertible_to_float": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.NumericColumnTest.test_scalar_default_value_fills_the_shape": ["feature_column.feature_column._numeric_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.NumericColumnTest.test_parse_spec": ["ops.parsing_ops.FixedLenFeature", "feature_column.feature_column._numeric_column", "test.TestCase.assertEqual"], "ops.parsing_ops.FixedLenFeature": [], "feature_column.feature_column_test.NumericColumnTest.test_parse_example_no_default_value": ["ops.parsing_ops.parse_example", "example.feature_pb2.Features", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "test.TestCase.assertIn", "test.TestCase.cached_session", "test.TestCase.assertAllEqual", "example.example_pb2.Example", "feature_column.feature_column._numeric_column", "example.feature_pb2.FloatList"], "example.feature_pb2.FloatList": [], "example.feature_pb2.Feature": [], "example.feature_pb2.Features": [], "example.example_pb2.Example": [], "feature_column.feature_column.make_parse_example_spec": [], "ops.parsing_ops.parse_example": [], "test.TestCase.assertIn": [], "feature_column.feature_column_test.NumericColumnTest.test_parse_example_with_default_value": ["ops.parsing_ops.parse_example", "example.feature_pb2.Features", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "test.TestCase.assertIn", "test.TestCase.assertAllEqual", "example.example_pb2.Example", "feature_column.feature_column._numeric_column", "example.feature_pb2.FloatList"], "feature_column.feature_column_test.NumericColumnTest.test_normalizer_fn_must_be_callable": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.NumericColumnTest.test_normalizer_fn_transform_feature": ["test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._transform_features", "test.TestCase.cached_session"], "feature_column.feature_column_test.NumericColumnTest.test_normalizer_fn_transform_feature._increment_two": [], "feature_column.feature_column._transform_features": [], "feature_column.feature_column_test.NumericColumnTest.test_get_dense_tensor": ["feature_column.feature_column._LazyBuilder", "feature_column.feature_column._numeric_column", "test.TestCase.assertAllClose"], "feature_column.feature_column_test.NumericColumnTest.test_get_dense_tensor._increment_two": [], "test.TestCase.assertAllClose": [], "feature_column.feature_column_test.NumericColumnTest.test_sparse_tensor_not_supported": ["feature_column.feature_column._LazyBuilder", "feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.NumericColumnTest.test_deep_copy": ["feature_column.feature_column._numeric_column", "copy.deepcopy", "test.TestCase.assertEqual"], "copy.deepcopy": [], "feature_column.feature_column_test.NumericColumnTest.test_numpy_default_value": ["numpy.array", "feature_column.feature_column._numeric_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.NumericColumnTest.test_linear_model": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "framework.ops.Graph": [], "feature_column.feature_column.linear_model": [], "feature_column.feature_column_test.get_linear_model_bias": ["ops.variable_scope.variable_scope", "ops.variable_scope.get_variable"], "feature_column.feature_column_test.get_linear_model_column_var": ["framework.ops.get_collection"], "test.TestCase.evaluate": [], "feature_column.feature_column_test.NumericColumnTest.test_keras_linear_model": ["framework.ops.get_collection", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.get_keras_linear_model_predictions": ["feature_column.feature_column._LinearModel"], "feature_column.feature_column_test.BucketizedColumnTest.test_invalid_source_column_type": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column._categorical_column_with_hash_bucket": [], "feature_column.feature_column._bucketized_column": [], "feature_column.feature_column_test.BucketizedColumnTest.test_invalid_source_column_shape": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.BucketizedColumnTest.test_invalid_boundaries": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.BucketizedColumnTest.test_name": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.BucketizedColumnTest.test_var_scope_name": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.BucketizedColumnTest.test_parse_spec": ["ops.parsing_ops.FixedLenFeature", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.BucketizedColumnTest.test_variable_shape": ["test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_num_buckets": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.BucketizedColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "example.feature_pb2.Features", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "test.TestCase.assertIn", "test.TestCase.assertAllEqual", "example.example_pb2.Example", "feature_column.feature_column._numeric_column", "example.feature_pb2.FloatList", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_transform_feature": ["feature_column.feature_column._transform_features", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "test.TestCase.assertAllClose"], "feature_column.feature_column_test.BucketizedColumnTest.test_get_dense_tensor_one_input_value": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_get_dense_tensor_two_input_values": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_get_sparse_tensors_one_input_value": ["test.TestCase.assertIsNone", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_get_sparse_tensors_two_input_values": ["test.TestCase.assertIsNone", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_sparse_tensor_input_not_supported": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._bucketized_column", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.BucketizedColumnTest.test_deep_copy": ["copy.deepcopy", "test.TestCase.assertEqual", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_linear_model_one_input_value": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_linear_model_two_input_values": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_keras_linear_model_one_input_value": ["feature_column.feature_column._bucketized_column", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.BucketizedColumnTest.test_keras_linear_model_two_input_values": ["feature_column.feature_column._bucketized_column", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_defaults": ["test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_key_should_be_string": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_bucket_size_should_be_given": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_bucket_size_should_be_positive": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_dtype_should_be_string_or_integer": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_deep_copy": ["copy.deepcopy", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_parse_spec_string": ["test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "ops.parsing_ops.VarLenFeature"], "ops.parsing_ops.VarLenFeature": [], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_parse_spec_int": ["test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "test.TestCase.evaluate", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertIn", "example.feature_pb2.BytesList", "example.example_pb2.Example", "numpy.array"], "example.feature_pb2.BytesList": [], "framework.sparse_tensor.SparseTensorValue": [], "feature_column.feature_column_test._assert_sparse_tensor_value": ["numpy.array", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_strings_should_be_hashed": ["test.TestCase.assertEqual", "test.TestCase.cached_session", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllEqual", "feature_column.feature_column._transform_features", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_tensor_dtype_should_be_string_or_integer": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_hash_bucket", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_dtype_should_match_with_tensor": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_hash_bucket", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_ints_should_be_hashed": ["test.TestCase.cached_session", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllEqual", "feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_int32_64_is_compatible": ["feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllEqual", "feature_column.feature_column._LazyBuilder", "framework.constant_op.constant", "framework.sparse_tensor.SparseTensor"], "framework.constant_op.constant": [], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_get_sparse_tensors": ["test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertIsNone", "feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_get_sparse_tensors_weight_collections": ["feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection", "framework.sparse_tensor.SparseTensor"], "framework.ops.get_collection": [], "test.TestCase.assertCountEqual": [], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_get_sparse_tensors_dense_input": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_linear_model": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "test.TestCase.assertAllClose", "test.TestCase.assertAllClose", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.HashedCategoricalColumnTest.test_keras_linear_model": ["framework.ops.Graph", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllClose", "test.TestCase.assertAllClose", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.CrossedColumnTest.test_keys_empty": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._crossed_column"], "feature_column.feature_column._crossed_column": [], "feature_column.feature_column_test.CrossedColumnTest.test_keys_length_one": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._crossed_column"], "feature_column.feature_column_test.CrossedColumnTest.test_key_type_unsupported": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._crossed_column", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.CrossedColumnTest.test_hash_bucket_size_negative": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._crossed_column"], "feature_column.feature_column_test.CrossedColumnTest.test_hash_bucket_size_zero": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._crossed_column"], "feature_column.feature_column_test.CrossedColumnTest.test_hash_bucket_size_none": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._crossed_column"], "feature_column.feature_column_test.CrossedColumnTest.test_name": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._crossed_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.CrossedColumnTest.test_name_ordered_alphabetically": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._crossed_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.CrossedColumnTest.test_name_leaf_keys_ordered_alphabetically": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._crossed_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.CrossedColumnTest.test_var_scope_name": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._crossed_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.CrossedColumnTest.test_parse_spec": ["ops.parsing_ops.FixedLenFeature", "feature_column.feature_column._crossed_column", "test.TestCase.assertEqual", "feature_column.feature_column._numeric_column", "ops.parsing_ops.VarLenFeature", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.CrossedColumnTest.test_num_buckets": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._crossed_column", "test.TestCase.assertEqual"], "feature_column.feature_column_test.CrossedColumnTest.test_deep_copy": ["copy.deepcopy", "feature_column.feature_column._crossed_column", "test.TestCase.assertEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.CrossedColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "example.feature_pb2.Features", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "feature_column.feature_column._crossed_column", "test.TestCase.assertIn", "test.TestCase.cached_session", "test.TestCase.assertAllEqual", "example.feature_pb2.BytesList", "example.feature_pb2.FloatList", "feature_column.feature_column._numeric_column", "example.example_pb2.Example", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.CrossedColumnTest.test_transform_feature": ["test.TestCase.evaluate", "framework.constant_op.constant", "feature_column.feature_column._crossed_column", "test.TestCase.assertIn", "test.TestCase.assertAllEqual", "<builtin>.range", "feature_column.feature_column._numeric_column", "feature_column.feature_column._transform_features", "<builtin>.list", "feature_column.feature_column._bucketized_column", "framework.sparse_tensor.SparseTensor"], "<builtin>.range": [], "feature_column.feature_column_test.CrossedColumnTest.test_get_sparse_tensors": ["framework.sparse_tensor.SparseTensor", "feature_column.feature_column._crossed_column", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._bucketized_column", "framework.constant_op.constant"], "feature_column.feature_column_test.CrossedColumnTest.test_get_sparse_tensors_simple": ["framework.sparse_tensor.SparseTensor", "feature_column.feature_column._crossed_column", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._bucketized_column", "framework.constant_op.constant"], "feature_column.feature_column_test.CrossedColumnTest.test_linear_model": ["framework.constant_op.constant", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensor", "test.TestCase.assertAllClose", "feature_column.feature_column._crossed_column", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._bucketized_column", "framework.constant_op.constant"], "feature_column.feature_column_test.CrossedColumnTest.test_linear_model_with_weights": ["feature_column._CategoricalColumn.__init__", "feature_column.feature_column._crossed_column", "feature_column.feature_column.linear_model", "framework.ops.Graph", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.CrossedColumnTest.test_linear_model_with_weights._TestColumnWithWeights.name": [], "feature_column.feature_column_test.CrossedColumnTest.test_linear_model_with_weights._TestColumnWithWeights._parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.CrossedColumnTest.test_linear_model_with_weights._TestColumnWithWeights._num_buckets": [], "feature_column.feature_column_test.CrossedColumnTest.test_linear_model_with_weights._TestColumnWithWeights._transform_feature": [], "feature_column.feature_column_test.CrossedColumnTest.test_linear_model_with_weights._TestColumnWithWeights._get_sparse_tensors": ["feature_column._CategoricalColumn.IdWeightPair"], "feature_column._CategoricalColumn.IdWeightPair": [], "feature_column._CategoricalColumn.__init__": [], "feature_column.feature_column_test.CrossedColumnTest.test_keras_linear_model": ["feature_column._CategoricalColumn.IdWeightPair", "feature_column._CategoricalColumn.IdWeightPair", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensor", "test.TestCase.assertAllClose", "feature_column.feature_column._crossed_column", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._bucketized_column", "framework.constant_op.constant"], "feature_column.feature_column_test.CrossedColumnTest.test_keras_linear_model_with_weights": ["framework.constant_op.constant", "feature_column._CategoricalColumn.__init__", "feature_column.feature_column._crossed_column", "framework.ops.Graph", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.CrossedColumnTest.test_keras_linear_model_with_weights._TestColumnWithWeights.name": [], "feature_column.feature_column_test.CrossedColumnTest.test_keras_linear_model_with_weights._TestColumnWithWeights._parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.CrossedColumnTest.test_keras_linear_model_with_weights._TestColumnWithWeights._num_buckets": [], "feature_column.feature_column_test.CrossedColumnTest.test_keras_linear_model_with_weights._TestColumnWithWeights._transform_feature": [], "feature_column.feature_column_test.CrossedColumnTest.test_keras_linear_model_with_weights._TestColumnWithWeights._get_sparse_tensors": ["feature_column._CategoricalColumn.IdWeightPair"], "ops.variable_scope.variable_scope": [], "ops.variable_scope.get_variable": [], "feature_column.feature_column._LinearModel": [], "feature_column.feature_column_test.LinearModelTest.test_raises_if_empty_feature_columns": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test.LinearModelTest.test_should_be_feature_column": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test.LinearModelTest.test_should_be_dense_or_categorical_column": ["test.TestCase.assertRaisesRegex", "feature_column._FeatureColumn.__init__", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test.LinearModelTest.test_should_be_dense_or_categorical_column.NotSupportedColumn.name": [], "feature_column.feature_column_test.LinearModelTest.test_should_be_dense_or_categorical_column.NotSupportedColumn._transform_feature": [], "feature_column.feature_column_test.LinearModelTest.test_should_be_dense_or_categorical_column.NotSupportedColumn._parse_example_spec": [], "feature_column.feature_column_test.LinearModelTest.test_does_not_support_dict_columns": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test.LinearModelTest.test_raises_if_duplicate_name": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test.LinearModelTest.test_dense_bias": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest.test_sparse_bias": ["framework.ops.Graph", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "feature_column.feature_column.linear_model", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_bias": ["framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_column": ["framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "feature_column._CategoricalColumn.__init__", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column.linear_model", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn.name": [], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._transform_feature": [], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._variable_shape": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._get_dense_tensor": ["<builtin>.ValueError"], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._num_buckets": [], "feature_column.feature_column_test.LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._get_sparse_tensors": ["feature_column._CategoricalColumn.IdWeightPair", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_dense_multi_output": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "numpy.zeros", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "numpy.zeros": [], "feature_column.feature_column_test.LinearModelTest.test_sparse_multi_output": ["framework.ops.Graph", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "numpy.zeros", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "feature_column.feature_column.linear_model", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_dense_multi_dimension": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest.test_sparse_multi_rank": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "ops.array_ops.sparse_placeholder", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "numpy.zeros", "test.TestCase.assertAllClose", "test.TestCase.assertAllClose", "framework.ops.Graph", "framework.ops.Graph"], "ops.array_ops.sparse_placeholder": [], "feature_column.feature_column_test.LinearModelTest.test_sparse_combiner": ["framework.ops.Graph", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "feature_column.feature_column.linear_model", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_sparse_combiner_with_negative_weights": ["framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "feature_column.feature_column.linear_model", "framework.ops.Graph", "framework.ops.Graph", "framework.constant_op.constant", "feature_column.feature_column._weighted_categorical_column", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column._weighted_categorical_column": [], "feature_column.feature_column_test.LinearModelTest.test_dense_multi_dimension_multi_output": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "numpy.zeros", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest.test_raises_if_shape_mismatch": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.ops.Graph", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test.LinearModelTest.test_dense_reshaping": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest.test_dense_multi_column": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest.test_fills_cols_to_vars": ["feature_column.feature_column.linear_model", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest.test_fills_cols_to_vars_partitioned_variables": ["test.TestCase.assertEqual", "feature_column.feature_column.linear_model", "test.TestCase.assertAllEqual", "ops.variable_scope.variable_scope", "feature_column.feature_column._numeric_column", "ops.partitioned_variables.fixed_size_partitioner", "framework.ops.Graph", "framework.ops.Graph"], "ops.partitioned_variables.fixed_size_partitioner": [], "feature_column.feature_column_test.LinearModelTest.test_fills_cols_to_output_tensors": ["feature_column.feature_column.input_layer", "feature_column.feature_column._embedding_column", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column._numeric_column", "test.TestCase.assertCountEqual", "framework.ops.Graph", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column._embedding_column": [], "feature_column.feature_column.input_layer": [], "feature_column.feature_column_test.LinearModelTest.test_dense_collection": ["feature_column.feature_column.linear_model", "test.TestCase.assertIn", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest.test_sparse_collection": ["framework.ops.Graph", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "test.TestCase.assertIn", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_dense_trainable_default": ["feature_column.feature_column.linear_model", "test.TestCase.assertIn", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest.test_sparse_trainable_default": ["framework.ops.Graph", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "test.TestCase.assertIn", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_dense_trainable_false": ["feature_column.feature_column._numeric_column", "test.TestCase.assertEqual", "framework.ops.Graph", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test.LinearModelTest.test_sparse_trainable_false": ["test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_column_order": ["feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column.linear_model", "test.TestCase.assertIn", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.LinearModelTest.test_static_batch_size_mismatch": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.ops.Graph", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test.LinearModelTest.test_subset_of_static_batch_size_mismatch": ["feature_column.feature_column.linear_model", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "test.TestCase.assertRaisesRegex"], "ops.array_ops.placeholder": [], "feature_column.feature_column_test.LinearModelTest.test_runtime_batch_size_mismatch": ["feature_column.feature_column.linear_model", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.LinearModelTest.test_runtime_batch_size_matches": ["feature_column.feature_column.linear_model", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.LinearModelTest": ["framework.test_util.run_deprecated_v1"], "framework.test_util.run_deprecated_v1": [], "feature_column.feature_column_test.LinearModelTest.test_with_1d_sparse_tensor": ["framework.test_util.run_deprecated_v1", "framework.constant_op.constant", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column._categorical_column_with_vocabulary_list": [], "feature_column.feature_column_test.LinearModelTest.test_with_1d_unknown_shape_sparse_tensor": ["framework.sparse_tensor.SparseTensorValue", "ops.array_ops.sparse_placeholder", "test.TestCase.assertIsNone", "feature_column.feature_column.linear_model", "test.TestCase.assertAllClose", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "numpy.array", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._categorical_column_with_vocabulary_list", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.LinearModelTest.test_with_rank_0_feature": ["test.TestCase.assertRaisesOpError", "test.TestCase.assertEqual", "feature_column.feature_column.linear_model", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.constant_op.constant"], "test.TestCase.assertRaisesOpError": [], "feature_column.feature_column_test.LinearModelTest.test_multiple_linear_models": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_raises_if_empty_feature_columns": ["test.TestCase.assertRaisesRegex", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test._LinearModelTest.test_should_be_feature_column": ["test.TestCase.assertRaisesRegex", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test._LinearModelTest.test_should_be_dense_or_categorical_column": ["test.TestCase.assertRaisesRegex", "feature_column._FeatureColumn.__init__", "feature_column._FeatureColumn.__init__"], "feature_column.feature_column_test._LinearModelTest.test_should_be_dense_or_categorical_column.NotSupportedColumn.name": [], "feature_column.feature_column_test._LinearModelTest.test_should_be_dense_or_categorical_column.NotSupportedColumn._transform_feature": [], "feature_column.feature_column_test._LinearModelTest.test_should_be_dense_or_categorical_column.NotSupportedColumn._parse_example_spec": [], "feature_column.feature_column_test._LinearModelTest.test_does_not_support_dict_columns": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "feature_column.feature_column.linear_model"], "feature_column.feature_column_test._LinearModelTest.test_raises_if_duplicate_name": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test._LinearModelTest.test_dense_bias": ["test.TestCase.assertRaisesRegex", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_sparse_bias": ["framework.ops.Graph", "framework.ops.Graph", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column._categorical_column_with_hash_bucket", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_bias": ["framework.sparse_tensor.SparseTensor", "framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_column": ["framework.sparse_tensor.SparseTensor", "framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "feature_column._CategoricalColumn.__init__", "test.TestCase.assertAllClose", "test.TestCase.assertAllClose", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn.name": [], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._transform_feature": [], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._variable_shape": ["<builtin>.ValueError"], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._get_dense_tensor": ["<builtin>.ValueError"], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._num_buckets": [], "feature_column.feature_column_test._LinearModelTest.test_dense_and_sparse_column._DenseAndSparseColumn._get_sparse_tensors": ["feature_column._CategoricalColumn.IdWeightPair", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_dense_multi_output": ["framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "numpy.zeros", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_sparse_multi_output": ["framework.ops.Graph", "framework.ops.Graph", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "numpy.zeros", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column._categorical_column_with_hash_bucket", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_dense_multi_dimension": ["framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_sparse_multi_rank": ["framework.ops.Graph", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "ops.array_ops.sparse_placeholder", "feature_column.feature_column._categorical_column_with_hash_bucket", "numpy.zeros", "test.TestCase.assertAllClose", "test.TestCase.assertAllClose", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_sparse_combiner": ["framework.ops.Graph", "framework.ops.Graph", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column._categorical_column_with_hash_bucket", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_dense_multi_dimension_multi_output": ["framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "numpy.zeros", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_raises_if_shape_mismatch": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_dense_reshaping": ["framework.ops.Graph", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_dense_multi_column": ["framework.ops.Graph", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_fills_cols_to_vars": ["framework.ops.Graph", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_fills_cols_to_vars_partitioned_variables": ["framework.ops.Graph", "test.TestCase.assertEqual", "test.TestCase.assertAllEqual", "ops.variable_scope.variable_scope", "feature_column.feature_column._numeric_column", "ops.partitioned_variables.fixed_size_partitioner", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_dense_collection": ["framework.ops.Graph", "test.TestCase.assertIn", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_sparse_collection": ["framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertIn", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_dense_trainable_default": ["framework.sparse_tensor.SparseTensor", "test.TestCase.assertIn", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_sparse_trainable_default": ["framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertIn", "framework.ops.Graph", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_dense_trainable_false": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "test.TestCase.assertEqual", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_sparse_trainable_false": ["framework.ops.Graph", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_column_order": ["framework.sparse_tensor.SparseTensor", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertIn", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_static_batch_size_mismatch": ["feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest.test_subset_of_static_batch_size_mismatch": ["framework.ops.Graph", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test._LinearModelTest.test_runtime_batch_size_mismatch": ["test.TestCase.assertRaisesRegex", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test._LinearModelTest.test_runtime_batch_size_matches": ["test.TestCase.assertRaisesRegex", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test._LinearModelTest": ["framework.test_util.run_deprecated_v1"], "feature_column.feature_column_test._LinearModelTest.test_with_1d_sparse_tensor": ["framework.test_util.run_deprecated_v1", "framework.test_util.run_deprecated_v1", "framework.constant_op.constant", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test._LinearModelTest.test_with_1d_unknown_shape_sparse_tensor": ["framework.sparse_tensor.SparseTensor", "framework.sparse_tensor.SparseTensorValue", "ops.array_ops.sparse_placeholder", "test.TestCase.assertIsNone", "test.TestCase.assertAllClose", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "numpy.array", "feature_column.feature_column._numeric_column", "feature_column.feature_column._bucketized_column", "feature_column.feature_column._categorical_column_with_vocabulary_list", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test._LinearModelTest.test_with_rank_0_feature": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "test.TestCase.assertRaisesOpError", "test.TestCase.assertEqual", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.constant_op.constant"], "feature_column.feature_column_test.InputLayerTest": ["framework.test_util.run_in_graph_and_eager_modes"], "framework.test_util.run_in_graph_and_eager_modes": [], "feature_column.feature_column_test.InputLayerTest.test_retrieving_input": ["feature_column.feature_column._numeric_column", "test.TestCase.assertAllClose", "feature_column.feature_column.InputLayer", "test.TestCase.evaluate"], "feature_column.feature_column.InputLayer": [], "feature_column.feature_column_test.InputLayerTest.test_reuses_variables": ["feature_column.feature_column._embedding_column", "test.TestCase.assertEqual", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "eager.context.eager_mode", "test.TestCase.assertIs", "<builtin>.len", "feature_column.feature_column.InputLayer", "framework.sparse_tensor.SparseTensor"], "eager.context.eager_mode": [], "feature_column.feature_column._categorical_column_with_identity": [], "feature_column.feature_column_test.InputLayerTest.test_reuses_variables._embedding_column_initializer": [], "<builtin>.len": [], "test.TestCase.assertIs": [], "feature_column.feature_column_test.InputLayerTest.test_feature_column_input_layer_gradient": ["feature_column.feature_column._embedding_column", "feature_column.feature_column._embedding_column", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "eager.backprop.implicit_grad", "eager.context.eager_mode", "feature_column.feature_column.InputLayer", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.InputLayerTest.test_feature_column_input_layer_gradient._embedding_column_initializer": [], "feature_column.feature_column_test.InputLayerTest.test_feature_column_input_layer_gradient.scale_matrix": [], "eager.backprop.implicit_grad": [], "feature_column.feature_column_test.FunctionalInputLayerTest.test_raises_if_empty_feature_columns": ["feature_column.feature_column.input_layer", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_should_be_dense_column": ["feature_column.feature_column.input_layer", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_does_not_support_dict_columns": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "feature_column.feature_column.input_layer"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_bare_column": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_column_generator": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_raises_if_duplicate_name": ["feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "feature_column.feature_column.input_layer"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_one_column": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_multi_dimension": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_raises_if_shape_mismatch": ["feature_column.feature_column.input_layer", "feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_reshaping": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_multi_column": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_fills_cols_to_vars": ["feature_column.feature_column.input_layer", "feature_column.feature_column._embedding_column", "test.TestCase.assertIsInstance", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "<builtin>.list", "framework.ops.Graph", "test.TestCase.assertCountEqual", "<builtin>.len", "feature_column.feature_column._bucketized_column"], "test.TestCase.assertIsInstance": [], "feature_column.feature_column_test.FunctionalInputLayerTest.test_fills_cols_to_vars_shared_embedding": ["feature_column.feature_column.input_layer", "feature_column.feature_column._embedding_column", "test.TestCase.assertIsInstance", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._numeric_column", "<builtin>.list", "framework.ops.Graph", "feature_column.feature_column_v2.shared_embedding_columns", "test.TestCase.assertCountEqual", "<builtin>.len", "feature_column.feature_column._bucketized_column", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_v2.shared_embedding_columns": [], "feature_column.feature_column_test.FunctionalInputLayerTest.test_fills_cols_to_vars_partitioned_variables": ["feature_column.feature_column.input_layer", "feature_column.feature_column._embedding_column", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "ops.variable_scope.variable_scope", "ops.partitioned_variables.fixed_size_partitioner", "framework.ops.Graph", "<builtin>.list", "test.TestCase.assertCountEqual", "<builtin>.len", "feature_column.feature_column._bucketized_column"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_column_order": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_fails_for_categorical_column": ["feature_column.feature_column.input_layer", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_static_batch_size_mismatch": ["feature_column.feature_column.input_layer", "feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_subset_of_static_batch_size_mismatch": ["feature_column.feature_column.input_layer", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_runtime_batch_size_mismatch": ["feature_column.feature_column.input_layer", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_runtime_batch_size_matches": ["feature_column.feature_column.input_layer", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "framework.ops.Graph"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_multiple_layers_with_same_embedding_column": ["feature_column.feature_column.input_layer", "feature_column.feature_column._embedding_column", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertCountEqual", "framework.ops.Graph", "<builtin>.len", "framework.ops.get_collection"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_multiple_layers_with_same_shared_embedding_column": ["feature_column.feature_column.input_layer", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertCountEqual", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "<builtin>.len", "framework.ops.get_collection", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_multiple_layers_with_same_shared_embedding_column_diff_graphs": ["feature_column.feature_column.input_layer", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertCountEqual", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "<builtin>.len", "framework.ops.get_collection", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_with_1d_sparse_tensor": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "test.TestCase.assertEqual", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._indicator_column", "feature_column.feature_column._indicator_column", "framework.ops.Graph", "framework.constant_op.constant", "feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_with_1d_sparse_tensor._initializer": [], "feature_column.feature_column._indicator_column": [], "feature_column.feature_column_test.FunctionalInputLayerTest": ["framework.test_util.run_deprecated_v1"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_with_1d_unknown_shape_sparse_tensor": ["feature_column.feature_column.input_layer", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "ops.array_ops.sparse_placeholder", "test.TestCase.assertIsNone", "test.TestCase.assertEqual", "test.TestCase.assertAllEqual", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._indicator_column", "feature_column.feature_column._indicator_column", "numpy.array", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.FunctionalInputLayerTest.test_with_1d_unknown_shape_sparse_tensor._initializer": [], "feature_column.feature_column_test.FunctionalInputLayerTest.test_with_rank_0_feature": ["feature_column.feature_column.input_layer", "test.TestCase.assertRaisesOpError", "test.TestCase.assertEqual", "ops.array_ops.placeholder", "feature_column.feature_column._numeric_column", "feature_column.feature_column._numeric_column", "test.TestCase.assertRaisesRegex", "framework.constant_op.constant"], "feature_column.feature_column_test.MakeParseExampleSpecTest._TestFeatureColumn._parse_example_spec": [], "feature_column.feature_column_test.MakeParseExampleSpecTest.test_no_feature_columns": ["test.TestCase.assertDictEqual", "feature_column.feature_column.make_parse_example_spec"], "test.TestCase.assertDictEqual": [], "feature_column.feature_column_test.MakeParseExampleSpecTest.test_invalid_type": ["ops.parsing_ops.FixedLenFeature", "test.TestCase.assertRaisesRegex", "feature_column._FeatureColumn.__init__", "feature_column.feature_column.make_parse_example_spec"], "feature_column.feature_column_test.MakeParseExampleSpecTest.test_one_feature_column": ["ops.parsing_ops.FixedLenFeature", "test.TestCase.assertDictEqual", "feature_column._FeatureColumn.__init__", "feature_column.feature_column.make_parse_example_spec"], "feature_column.feature_column_test.MakeParseExampleSpecTest.test_two_feature_columns": ["test.TestCase.assertDictEqual", "feature_column.feature_column.make_parse_example_spec", "ops.parsing_ops.FixedLenFeature", "feature_column._FeatureColumn.__init__", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.MakeParseExampleSpecTest.test_equal_keys_different_parse_spec": ["feature_column.feature_column.make_parse_example_spec", "ops.parsing_ops.FixedLenFeature", "feature_column._FeatureColumn.__init__", "ops.parsing_ops.VarLenFeature", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.MakeParseExampleSpecTest.test_equal_keys_equal_parse_spec": ["ops.parsing_ops.FixedLenFeature", "test.TestCase.assertDictEqual", "feature_column._FeatureColumn.__init__", "feature_column.feature_column.make_parse_example_spec"], "feature_column.feature_column_test.MakeParseExampleSpecTest.test_multiple_features_dict": ["test.TestCase.assertDictEqual", "feature_column.feature_column.make_parse_example_spec", "ops.parsing_ops.FixedLenFeature", "feature_column._FeatureColumn.__init__", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.setUp": ["platform.test.test_src_dir_path", "<builtin>.super"], "<builtin>.super": [], "platform.test.test_src_dir_path": [], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_defaults": ["test.TestCase.assertEqual", "ops.parsing_ops.VarLenFeature", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column._categorical_column_with_vocabulary_file": [], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_key_should_be_string": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_all_constructor_args": ["test.TestCase.assertEqual", "ops.parsing_ops.VarLenFeature", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_deep_copy": ["copy.deepcopy", "test.TestCase.assertEqual", "ops.parsing_ops.VarLenFeature", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_vocabulary_file_none": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_vocabulary_file_empty_string": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_invalid_vocabulary_file": ["framework.sparse_tensor.SparseTensorValue", "test.TestCase.cached_session", "feature_column.feature_column._categorical_column_with_vocabulary_file", "ops.lookup_ops.tables_initializer", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_invalid_vocabulary_size": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_too_large_vocabulary_size": ["framework.sparse_tensor.SparseTensorValue", "test.TestCase.cached_session", "feature_column.feature_column._categorical_column_with_vocabulary_file", "ops.lookup_ops.tables_initializer", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_invalid_num_oov_buckets": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_invalid_dtype": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_invalid_buckets_and_default_value": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_invalid_input_dtype_int32": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_invalid_input_dtype_string": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_vocabulary_file"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "test.TestCase.evaluate", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIn", "feature_column.feature_column._categorical_column_with_vocabulary_file", "example.feature_pb2.BytesList", "example.example_pb2.Example", "numpy.array"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors": ["example.example_pb2.Example", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_none_vocabulary_size": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_transform_feature": ["feature_column.feature_column._LazyBuilder", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._transform_features"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_weight_collections": ["feature_column.feature_column._categorical_column_with_vocabulary_file", "test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_dense_input": ["framework.sparse_tensor.SparseTensor", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_default_value_in_vocabulary": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_with_oov_buckets": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_small_vocabulary_size": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_int32": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_int32_dense_input": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_get_sparse_tensors_int32_with_oov_buckets": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_linear_model": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertEqual", "feature_column.feature_column.linear_model", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.VocabularyFileCategoricalColumnTest.test_keras_linear_model": ["framework.ops.Graph", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertEqual", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_vocabulary_file", "feature_column.feature_column._categorical_column_with_vocabulary_file", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_defaults_string": ["ops.parsing_ops.VarLenFeature", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_key_should_be_string": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_defaults_int": ["ops.parsing_ops.VarLenFeature", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_all_constructor_args": ["ops.parsing_ops.VarLenFeature", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_deep_copy": ["ops.parsing_ops.VarLenFeature", "copy.deepcopy", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_invalid_dtype": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_invalid_mapping_dtype": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_mismatched_int_dtype": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_mismatched_string_dtype": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_none_mapping": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_empty_mapping": ["test.TestCase.assertRaisesRegex", "<builtin>.tuple", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "<builtin>.tuple": [], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_duplicate_mapping": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_invalid_num_oov_buckets": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_invalid_buckets_and_default_value": ["test.TestCase.assertRaisesRegex", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_invalid_input_dtype_int32": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_invalid_input_dtype_string": ["feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_parse_example_string": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "test.TestCase.evaluate", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIn", "example.feature_pb2.BytesList", "example.example_pb2.Example", "numpy.array", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_parse_example_int": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "test.TestCase.evaluate", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIn", "example.example_pb2.Example", "example.feature_pb2.Int64List", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "example.feature_pb2.Int64List": [], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_get_sparse_tensors": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "test.TestCase.assertIsNone", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_transform_feature": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "framework.sparse_tensor.SparseTensorValue", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._transform_features", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_get_sparse_tensors_weight_collections": ["test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection", "feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_get_sparse_tensors_dense_input": ["framework.sparse_tensor.SparseTensor", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "test.TestCase.assertIsNone", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_get_sparse_tensors_default_value_in_vocabulary": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "test.TestCase.assertIsNone", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_get_sparse_tensors_with_oov_buckets": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "test.TestCase.assertIsNone", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_get_sparse_tensors_int32": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "test.TestCase.assertIsNone", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_get_sparse_tensors_int32_dense_input": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "test.TestCase.assertIsNone", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_get_sparse_tensors_int32_with_oov_buckets": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "test.TestCase.assertIsNone", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_linear_model": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertEqual", "feature_column.feature_column.linear_model", "test.TestCase.assertAllClose", "test.TestCase.assertAllClose", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._categorical_column_with_vocabulary_list", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.VocabularyListCategoricalColumnTest.test_keras_linear_model": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertEqual", "test.TestCase.assertAllClose", "test.TestCase.assertAllClose", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._categorical_column_with_vocabulary_list", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_constructor": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertEqual", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_key_should_be_string": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_deep_copy": ["feature_column.feature_column._categorical_column_with_identity", "copy.deepcopy", "test.TestCase.assertEqual", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_invalid_num_buckets_zero": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_invalid_num_buckets_negative": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_invalid_default_value_too_small": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_invalid_default_value_too_big": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_invalid_input_dtype": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "test.TestCase.evaluate", "feature_column.feature_column.make_parse_example_spec", "numpy.array", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIn", "feature_column.feature_column._categorical_column_with_identity", "example.example_pb2.Example", "example.feature_pb2.Int64List"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors": ["example.feature_pb2.Int64List", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_transform_feature": ["feature_column.feature_column._LazyBuilder", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._transform_features"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors_weight_collections": ["framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors_dense_input": ["framework.ops.get_collection", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors_with_inputs_too_big": ["test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors_with_inputs_too_big._initializer": [], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors_with_inputs_too_small": ["test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors_with_inputs_too_small._initializer": [], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors_with_default_value": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_get_sparse_tensors_with_default_value_and_placeholder_inputs": ["feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_identity", "ops.array_ops.placeholder", "ops.array_ops.placeholder", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_linear_model": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertEqual", "feature_column.feature_column.linear_model", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.IdentityCategoricalColumnTest.test_keras_linear_model": ["framework.ops.Graph", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertEqual", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.TransformFeaturesTest.transform_multi_column": ["feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertIn", "test.TestCase.assertAllEqual", "feature_column.feature_column._numeric_column", "feature_column.feature_column._transform_features", "feature_column.feature_column._transform_features", "framework.ops.Graph", "feature_column.feature_column._bucketized_column", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.TransformFeaturesTest.test_column_order": ["feature_column.feature_column._transform_features", "test.TestCase.assertEqual", "framework.ops.Graph", "framework.ops.Graph"], "feature_column.feature_column_test.TransformFeaturesTest.test_column_order._LoggerColumn.__init__": [], "feature_column.feature_column_test.TransformFeaturesTest.test_column_order._LoggerColumn.name": [], "feature_column.feature_column_test.TransformFeaturesTest.test_column_order._LoggerColumn._transform_feature": [], "feature_column.feature_column_test.TransformFeaturesTest.test_column_order._LoggerColumn._parse_example_spec": [], "feature_column.feature_column_test.IndicatorColumnTest.test_indicator_column": ["feature_column.feature_column._indicator_column", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.IndicatorColumnTest.test_1D_shape_succeeds": ["test.TestCase.evaluate", "test.TestCase.cached_session", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllEqual", "feature_column.feature_column._indicator_column", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.IndicatorColumnTest.test_2D_shape_succeeds": ["test.TestCase.evaluate", "test.TestCase.cached_session", "feature_column.feature_column._categorical_column_with_hash_bucket", "test.TestCase.assertAllEqual", "feature_column.feature_column._indicator_column", "feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.IndicatorColumnTest.test_multi_hot": ["test.TestCase.evaluate", "test.TestCase.cached_session", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._indicator_column", "feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.IndicatorColumnTest.test_multi_hot2": ["test.TestCase.evaluate", "test.TestCase.cached_session", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._indicator_column", "feature_column.feature_column._LazyBuilder", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.IndicatorColumnTest.test_deep_copy": ["feature_column.feature_column._indicator_column", "copy.deepcopy", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_hash_bucket"], "feature_column.feature_column_test.IndicatorColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "test.TestCase.evaluate", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIn", "example.feature_pb2.BytesList", "feature_column.feature_column._indicator_column", "example.example_pb2.Example", "numpy.array", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.IndicatorColumnTest.test_transform": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllEqual", "feature_column.feature_column._indicator_column", "feature_column.feature_column._indicator_column", "framework.ops.Graph", "feature_column.feature_column._transform_features", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.IndicatorColumnTest.test_transform_with_weighted_column": ["test.TestCase.evaluate", "test.TestCase.assertAllEqual", "feature_column.feature_column._indicator_column", "feature_column.feature_column._transform_features", "feature_column.feature_column._transform_features", "framework.ops.Graph", "framework.constant_op.constant", "feature_column.feature_column._weighted_categorical_column", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.IndicatorColumnTest.test_transform_with_missing_value_in_weighted_column": ["test.TestCase.evaluate", "test.TestCase.assertAllEqual", "feature_column.feature_column._indicator_column", "feature_column.feature_column._transform_features", "feature_column.feature_column._transform_features", "framework.ops.Graph", "framework.constant_op.constant", "feature_column.feature_column._weighted_categorical_column", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.IndicatorColumnTest.test_transform_with_missing_value_in_categorical_column": ["test.TestCase.evaluate", "test.TestCase.assertAllEqual", "feature_column.feature_column._indicator_column", "feature_column.feature_column._indicator_column", "framework.ops.Graph", "feature_column.feature_column._transform_features", "feature_column.feature_column._categorical_column_with_vocabulary_list", "framework.constant_op.constant"], "feature_column.feature_column_test.IndicatorColumnTest.test_linear_model": ["framework.constant_op.constant", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._indicator_column", "feature_column.feature_column._indicator_column", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.IndicatorColumnTest.test_keras_linear_model": ["framework.sparse_tensor.SparseTensor", "framework.sparse_tensor.SparseTensor", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._indicator_column", "feature_column.feature_column._indicator_column", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.IndicatorColumnTest.test_input_layer": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._indicator_column", "feature_column.feature_column._indicator_column", "framework.ops.Graph", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.EmbeddingColumnTest.test_defaults": ["feature_column.feature_column._embedding_column", "test.TestCase.assertTrue", "test.TestCase.assertEqual", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertIs", "ops.parsing_ops.VarLenFeature"], "test.TestCase.assertTrue": [], "feature_column.feature_column_test.EmbeddingColumnTest.test_all_constructor_args": ["test.TestCase.assertFalse", "feature_column.feature_column._embedding_column", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertIs", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.EmbeddingColumnTest.test_all_constructor_args.<lambda1>": [], "test.TestCase.assertFalse": [], "feature_column.feature_column_test.EmbeddingColumnTest.test_deep_copy": ["test.TestCase.assertFalse", "feature_column.feature_column._embedding_column", "copy.deepcopy", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_identity", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.EmbeddingColumnTest.test_deep_copy.<lambda1>": [], "feature_column.feature_column_test.EmbeddingColumnTest.test_invalid_initializer": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._embedding_column"], "feature_column.feature_column_test.EmbeddingColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIn", "example.feature_pb2.BytesList", "example.example_pb2.Example", "numpy.array", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.EmbeddingColumnTest.test_transform_feature": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "feature_column.feature_column._transform_features", "framework.sparse_tensor.SparseTensor"], "absl.testing.parameterized.named_parameters": [], "feature_column.feature_column_test.EmbeddingColumnTest": ["framework.test_util.run_deprecated_v1", "absl.testing.parameterized.named_parameters"], "feature_column.feature_column_test.EmbeddingColumnTest.test_get_dense_tensor": ["test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "test.TestCase.assertNotIn", "test.TestCase.assertIsInstance", "framework.sparse_tensor.SparseTensorValue", "framework.ops.get_default_graph", "test.TestCase.assertIn", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "ops.variable_scope.variable_scope", "ops.partitioned_variables.fixed_size_partitioner", "framework.ops.Graph", "<builtin>.tuple", "test.TestCase.assertCountEqual", "test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_get_dense_tensor._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "framework.ops.get_default_graph": [], "test.TestCase.assertNotIn": [], "feature_column.feature_column_test.EmbeddingColumnTest.test_get_dense_tensor_3d": ["test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "<builtin>.tuple", "framework.ops.Graph", "test.TestCase.assertCountEqual", "test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_get_dense_tensor_3d._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.EmbeddingColumnTest.test_get_dense_tensor_weight_collections": ["feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "<builtin>.tuple", "framework.ops.Graph", "test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_get_dense_tensor_placeholder_inputs": ["feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "ops.array_ops.placeholder", "<builtin>.tuple", "test.TestCase.assertCountEqual", "test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_get_dense_tensor_placeholder_inputs._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.EmbeddingColumnTest.test_get_dense_tensor_restore_from_ckpt": ["test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllEqual", "platform.test.test_src_dir_path", "feature_column.feature_column._categorical_column_with_identity", "<builtin>.tuple", "framework.ops.Graph", "test.TestCase.assertCountEqual", "test.TestCase.assertCountEqual", "feature_column.feature_column._LazyBuilder", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_linear_model": ["test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "numpy.zeros", "feature_column.feature_column.linear_model", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertCountEqual", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_linear_model._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.EmbeddingColumnTest.test_keras_linear_model": ["test.TestCase.assertIsNone", "test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "numpy.zeros", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertCountEqual", "framework.ops.Graph", "framework.ops.Graph", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_keras_linear_model._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.EmbeddingColumnTest.test_input_layer": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "<builtin>.tuple", "framework.ops.Graph", "test.TestCase.assertCountEqual", "test.TestCase.assertCountEqual", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_input_layer._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.EmbeddingColumnTest.test_input_layer_not_trainable": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "feature_column.feature_column._embedding_column", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "<builtin>.tuple", "framework.ops.Graph", "test.TestCase.assertCountEqual", "test.TestCase.assertCountEqual", "framework.ops.get_collection"], "feature_column.feature_column_test.EmbeddingColumnTest.test_input_layer_not_trainable._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_defaults": ["test.TestCase.assertTrue", "test.TestCase.assertEqual", "test.TestCase.assertIsNone", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertIs", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_all_constructor_args": ["test.TestCase.assertFalse", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertIs", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_all_constructor_args.<lambda1>": [], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_deep_copy": ["test.TestCase.assertFalse", "copy.deepcopy", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_deep_copy.<lambda1>": [], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_invalid_initializer": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_incompatible_column_type": ["feature_column.feature_column._categorical_column_with_hash_bucket", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "test.TestCase.assertRaisesRegex"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_weighted_categorical_column_ok": ["feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIn", "test.TestCase.cached_session", "example.feature_pb2.BytesList", "example.example_pb2.Example", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_transform_feature": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "test.TestCase.evaluate", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "feature_column.feature_column._transform_features", "framework.sparse_tensor.SparseTensor"], "feature_column.feature_column_test.SharedEmbeddingColumnTest": ["framework.test_util.run_deprecated_v1", "absl.testing.parameterized.named_parameters"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_get_dense_tensor": ["test.TestCase.evaluate", "test.TestCase.assertNotIn", "framework.ops.get_default_graph", "ops.variables.global_variables_initializer", "test.TestCase.assertIn", "ops.lookup_ops.tables_initializer", "feature_column.feature_column._categorical_column_with_identity", "ops.variable_scope.variable_scope", "test.TestCase.assertAllEqual", "ops.partitioned_variables.fixed_size_partitioner", "framework.ops.Graph", "feature_column.feature_column_v2.shared_embedding_columns", "<builtin>.tuple", "numpy.array", "feature_column.feature_column._LazyBuilder", "test.TestCase.assertCountEqual", "framework.ops.get_collection"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_get_dense_tensor._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_get_dense_tensor_weight_collections": ["feature_column.feature_column.input_layer", "feature_column.feature_column._categorical_column_with_identity", "<builtin>.tuple", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "test.TestCase.assertCountEqual", "numpy.array", "framework.ops.get_collection"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_get_dense_tensor_weight_collections._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_get_dense_tensor_placeholder_inputs": ["ops.array_ops.placeholder", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column_v2.shared_embedding_columns", "numpy.array", "feature_column.feature_column._LazyBuilder"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_get_dense_tensor_placeholder_inputs._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_linear_model": ["test.TestCase.evaluate", "test.TestCase.assertAllClose", "numpy.zeros", "feature_column.feature_column.linear_model", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertCountEqual", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "framework.ops.Graph", "numpy.array", "framework.ops.get_collection"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_linear_model._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_keras_linear_model": ["test.TestCase.assertIsNone", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "numpy.zeros", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertCountEqual", "feature_column.feature_column_v2.shared_embedding_columns", "framework.ops.Graph", "framework.ops.Graph", "numpy.array", "framework.ops.get_collection"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_keras_linear_model._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.SharedEmbeddingColumnTest._test_input_layer": ["feature_column.feature_column.input_layer", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllEqual", "feature_column.feature_column._categorical_column_with_identity", "<builtin>.tuple", "framework.ops.Graph", "feature_column.feature_column_v2.shared_embedding_columns", "test.TestCase.assertCountEqual", "test.TestCase.assertCountEqual", "framework.ops.get_collection"], "feature_column.feature_column_test.SharedEmbeddingColumnTest._test_input_layer._initializer": ["test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsNone"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_input_layer": ["test.TestCase.assertIsNone"], "feature_column.feature_column_test.SharedEmbeddingColumnTest.test_input_layer_no_trainable": ["test.TestCase.assertIsNone"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_defaults": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertEqual", "feature_column.feature_column._weighted_categorical_column", "ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_deep_copy": ["copy.deepcopy", "test.TestCase.assertEqual", "feature_column.feature_column._categorical_column_with_identity", "ops.parsing_ops.VarLenFeature", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_invalid_dtype_none": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_invalid_dtype_string": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_invalid_input_dtype": ["framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._transform_features", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_column_name_collision": ["feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_missing_weights": ["framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._transform_features", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_parse_example": ["ops.parsing_ops.parse_example", "ops.parsing_ops.parse_example", "example.feature_pb2.Features", "test.TestCase.evaluate", "feature_column.feature_column.make_parse_example_spec", "example.feature_pb2.Feature", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertIn", "example.feature_pb2.BytesList", "example.feature_pb2.FloatList", "example.example_pb2.Example", "numpy.array", "feature_column.feature_column._weighted_categorical_column", "feature_column.feature_column._categorical_column_with_vocabulary_list"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_transform_features": ["feature_column.feature_column._categorical_column_with_vocabulary_list", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._transform_features", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_transform_features_dense_input": ["feature_column.feature_column._weighted_categorical_column", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._transform_features", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_transform_features_dense_weights": ["feature_column.feature_column._weighted_categorical_column", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "numpy.array", "feature_column.feature_column._transform_features", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_keras_linear_model": ["feature_column.feature_column._weighted_categorical_column", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._weighted_categorical_column", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_keras_linear_model_mismatched_shape": ["feature_column.feature_column._weighted_categorical_column", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_keras_linear_model_mismatched_dense_values": ["feature_column.feature_column._weighted_categorical_column", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._weighted_categorical_column", "protobuf.config_pb2.ConfigProto"], "protobuf.config_pb2.ConfigProto": [], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_keras_linear_model_mismatched_dense_shape": ["protobuf.config_pb2.ConfigProto", "test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllClose", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._weighted_categorical_column", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_linear_model": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._weighted_categorical_column", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_linear_model_mismatched_shape": ["framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column.linear_model", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._weighted_categorical_column"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_linear_model_mismatched_dense_values": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "feature_column.feature_column.linear_model", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "test.TestCase.assertRaisesRegex", "feature_column.feature_column._weighted_categorical_column", "protobuf.config_pb2.ConfigProto"], "feature_column.feature_column_test.WeightedCategoricalColumnTest.test_linear_model_mismatched_dense_shape": ["test.TestCase.evaluate", "framework.sparse_tensor.SparseTensorValue", "test.TestCase.assertAllClose", "feature_column.feature_column.linear_model", "feature_column.feature_column._categorical_column_with_identity", "feature_column.feature_column._categorical_column_with_identity", "framework.ops.Graph", "framework.ops.Graph", "feature_column.feature_column._weighted_categorical_column", "feature_column.feature_column._weighted_categorical_column"], "platform.test.main": []}