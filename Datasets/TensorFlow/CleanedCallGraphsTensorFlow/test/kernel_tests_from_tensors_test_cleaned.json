{"kernel_tests.from_tensors_test": ["platform.test.main"], "kernel_tests.test_base.default_test_combinations": [], "kernel_tests.from_tensors_test.FromTensorsTest": ["framework.combinations.generate", "numpy.array", "framework.combinations.combine", "kernel_tests.test_base.graph_only_combinations", "kernel_tests.test_base.default_test_combinations"], "framework.combinations.generate": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensors": ["dataset_ops.Dataset.from_tensors", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.array", "util.nest.flatten", "test_base.DatasetTestBase.assertEqual", "ops.dataset_ops.get_legacy_output_shapes"], "numpy.array": [], "dataset_ops.Dataset.from_tensors": [], "ops.dataset_ops.get_legacy_output_shapes": [], "util.nest.flatten": [], "test_base.DatasetTestBase.assertEqual": [], "test_base.DatasetTestBase.assertDatasetProduces": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsDataset": ["dataset_ops.Dataset.from_tensors", "<builtin>.range", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertDatasetProduces"], "dataset_ops.Dataset.range": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsDataset.<lambda1>": [], "<builtin>.range": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsTensorArray": ["dataset_ops.Dataset.from_tensors", "test_base.DatasetTestBase.assertDatasetProduces", "ops.tensor_array_ops.TensorArray"], "ops.tensor_array_ops.TensorArray": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsSparse": ["dataset_ops.Dataset.from_tensors", "framework.tensor_shape.TensorShape", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.array", "test_base.DatasetTestBase.assertEqual", "framework.sparse_tensor.SparseTensorValue", "ops.dataset_ops.get_legacy_output_shapes"], "framework.sparse_tensor.SparseTensorValue": [], "framework.tensor_shape.TensorShape": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsMixed": ["dataset_ops.Dataset.from_tensors", "ops.dataset_ops.get_legacy_output_shapes", "framework.tensor_shape.TensorShape", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.array", "test_base.DatasetTestBase.assertEqual", "framework.sparse_tensor.is_sparse", "framework.sparse_tensor.SparseTensorValue"], "framework.sparse_tensor.is_sparse": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsRagged": ["dataset_ops.Dataset.from_tensors", "test_base.DatasetTestBase.assertDatasetProduces", "ragged.ragged_factory_ops.constant_value"], "ragged.ragged_factory_ops.constant_value": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsNamedTuple": ["dataset_ops.Dataset.from_tensors", "collections.namedtuple", "test_base.DatasetTestBase.assertDatasetProduces"], "collections.namedtuple": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsAttrs": ["dataset_ops.Dataset.from_tensors", "test_base.DatasetTestBase.assertDatasetProduces", "test_base.DatasetTestBase.skipTest"], "test_base.DatasetTestBase.skipTest": [], "attr.ib": [], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsAttrs.Foo": ["attr.ib"], "kernel_tests.from_tensors_test.FromTensorsTest.testFromTensorsMixedRagged": ["dataset_ops.Dataset.from_tensors", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.array", "ragged.ragged_factory_ops.constant_value", "framework.sparse_tensor.SparseTensorValue"], "framework.combinations.combine": [], "kernel_tests.from_tensors_test.FromTensorsTest.testNestedStructure": ["dataset_ops.Dataset.from_tensors", "test_base.DatasetTestBase.assertEqual", "test_base.DatasetTestBase.getNext"], "kernel_tests.from_tensors_test.FromTensorsTest.testNestedStructure.<lambda1>": [], "kernel_tests.from_tensors_test.FromTensorsTest.testNestedStructure.<lambda2>": ["dataset_ops.Dataset.from_tensors"], "test_base.DatasetTestBase.getNext": [], "kernel_tests.from_tensors_test.FromTensorsTest.testNestedDict": ["dataset_ops.Dataset.from_tensors", "ops.dataset_ops.get_legacy_output_types", "test_base.DatasetTestBase.assertEqual", "ops.dataset_ops.get_legacy_output_shapes"], "ops.dataset_ops.get_legacy_output_types": [], "kernel_tests.from_tensors_test.FromTensorsTest.testNonSequenceNestedStructure": ["dataset_ops.Dataset.from_tensors", "ops.dataset_ops.get_legacy_output_shapes", "test_base.DatasetTestBase.getNext", "numpy.array", "test_base.DatasetTestBase.assertEqual", "ops.dataset_ops.get_legacy_output_types"], "kernel_tests.from_tensors_test.FromTensorsTest.testNonSequenceNestedStructure.<lambda1>": ["ops.math_ops.equal", "ops.math_ops.reduce_all"], "ops.math_ops.equal": [], "ops.math_ops.reduce_all": [], "kernel_tests.from_tensors_test.FromTensorsTest.testNonSequenceNestedStructure.<lambda2>": ["ops.array_ops.stack"], "ops.array_ops.stack": [], "kernel_tests.from_tensors_test.FromTensorsTest.testNonSequenceNestedStructure.<lambda3>": ["dataset_ops.Dataset.from_tensor_slices"], "dataset_ops.Dataset.from_tensor_slices": [], "kernel_tests.test_base.graph_only_combinations": [], "kernel_tests.from_tensors_test.FromTensorsTest.testSplitPipeline": ["dataset_ops.Dataset.from_tensors", "ops.resource_variable_ops.ResourceVariable", "framework.ops.device", "ops.dataset_ops.make_initializable_iterator", "test_base.DatasetTestBase.assertEqual", "client.session.Session", "protobuf.config_pb2.ConfigProto"], "protobuf.config_pb2.ConfigProto": [], "client.session.Session": [], "framework.ops.device": [], "ops.resource_variable_ops.ResourceVariable": [], "kernel_tests.from_tensors_test.FromTensorsTest.testSplitPipeline.<lambda1>": [], "kernel_tests.from_tensors_test.FromTensorsTest.testSplitPipeline.<lambda2>": [], "ops.dataset_ops.make_initializable_iterator": [], "kernel_tests.from_tensors_test.FromTensorsTest.testName": ["dataset_ops.Dataset.from_tensors", "test_base.DatasetTestBase.assertDatasetProduces"], "kernel_tests.from_tensors_test.FromTensorsCheckpointTest._build_tensor_dataset": ["dataset_ops.Dataset.from_tensors", "numpy.array"], "kernel_tests.from_tensors_test.FromTensorsCheckpointTest": ["kernel_tests.test_base.default_test_combinations", "framework.combinations.times", "framework.combinations.generate", "kernel_tests.checkpoint_test_base.default_test_combinations"], "kernel_tests.checkpoint_test_base.default_test_combinations": [], "framework.combinations.times": [], "kernel_tests.from_tensors_test.FromTensorsCheckpointTest.test": ["numpy.array"], "kernel_tests.from_tensors_test.FromTensorsCheckpointTest.test.<lambda1>": ["kernel_tests.checkpoint_test_base.default_test_combinations"], "kernel_tests.from_tensors_test.FromTensorsRandomAccessTest": ["kernel_tests.test_base.default_test_combinations", "framework.combinations.generate", "framework.combinations.times"], "kernel_tests.from_tensors_test.FromTensorsRandomAccessTest.testInvalidIndex": ["dataset_ops.Dataset.from_tensors", "ops.random_access.at", "test_base.DatasetTestBase.assertRaises", "test_base.DatasetTestBase.evaluate"], "test_base.DatasetTestBase.assertRaises": [], "ops.random_access.at": [], "test_base.DatasetTestBase.evaluate": [], "kernel_tests.from_tensors_test.FromTensorsRandomAccessTest.testBasic": ["dataset_ops.Dataset.from_tensors", "<builtin>.range", "ops.random_access.at", "test_base.DatasetTestBase.evaluate", "test_base.DatasetTestBase.assertRaises", "test_base.DatasetTestBase.assertAllEqual"], "test_base.DatasetTestBase.assertAllEqual": [], "kernel_tests.from_tensors_test.FromTensorsRandomAccessTest.testEmptyDataset": ["dataset_ops.Dataset.from_tensors", "ops.random_access.at", "test_base.DatasetTestBase.evaluate", "test_base.DatasetTestBase.assertRaises", "test_base.DatasetTestBase.assertAllEqual"], "kernel_tests.from_tensors_test.FromTensorsRandomAccessTest.testNumpyArray": ["dataset_ops.Dataset.from_tensors", "<builtin>.range", "numpy.array", "ops.random_access.at", "test_base.DatasetTestBase.evaluate", "test_base.DatasetTestBase.assertRaises", "test_base.DatasetTestBase.assertAllEqual"], "kernel_tests.from_tensors_test.FromTensorsRandomAccessTest.testFromTensorsNestedDataset": ["dataset_ops.Dataset.from_tensors", "<builtin>.range", "ops.random_access.at", "test_base.DatasetTestBase.evaluate", "test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range"], "platform.test.main": []}