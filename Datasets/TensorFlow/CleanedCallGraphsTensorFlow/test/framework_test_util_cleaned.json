{"framework.test_util": ["contextlib.contextmanager", "util.deprecation.deprecated", "util.tf_export.tf_export"], "framework.test_util.is_xla_enabled": [], "framework.test_util.is_mlir_bridge_enabled": [], "framework.test_util.is_asan_enabled": ["python.pywrap_sanitizers.is_asan_enabled"], "python.pywrap_sanitizers.is_asan_enabled": [], "framework.test_util.is_msan_enabled": ["python.pywrap_sanitizers.is_msan_enabled"], "python.pywrap_sanitizers.is_msan_enabled": [], "framework.test_util.is_tsan_enabled": ["python.pywrap_sanitizers.is_tsan_enabled"], "python.pywrap_sanitizers.is_tsan_enabled": [], "framework.test_util.is_ubsan_enabled": ["python.pywrap_sanitizers.is_ubsan_enabled"], "python.pywrap_sanitizers.is_ubsan_enabled": [], "framework.test_util._get_object_count_by_type": ["<builtin>.type", "gc.get_objects", "collections.Counter"], "<builtin>.type": [], "gc.get_objects": [], "collections.Counter": [], "util.tf_export.tf_export": [], "framework.test_util.gpu_device_name": ["client.device_lib.list_local_devices", "util.compat.as_str"], "client.device_lib.list_local_devices": [], "util.compat.as_str": [], "framework.test_util.assert_ops_in_graph": ["<builtin>.set", "<builtin>.ValueError"], "<builtin>.ValueError": [], "<builtin>.set": [], "framework.test_util.assert_equal_graph_def_v2": ["util.compat.as_str"], "framework.test_util.assert_equal_graph_def": ["<builtin>.type", "<builtin>.TypeError", "util.compat.as_str", "util.compat.as_str", "client.pywrap_tf_session.EqualGraphDefWrapper", "<builtin>.AssertionError", "<builtin>.isinstance", "client.pywrap_tf_session.EqualGraphDefWrapper"], "framework.test_util.assert_equal_graph_def_v1": ["client.pywrap_tf_session.EqualGraphDefWrapper"], "<builtin>.isinstance": [], "<builtin>.TypeError": [], "framework.test_util._strip_checkpoint_v2_randomized": ["<builtin>.len", "util.compat.as_bytes", "re.match"], "framework.test_util._strip_hash_table_shared_name": ["util.compat.as_bytes", "re.match"], "client.pywrap_tf_session.EqualGraphDefWrapper": [], "<builtin>.AssertionError": [], "framework.test_util.assert_meta_graph_protos_equal": ["<builtin>.set", "<builtin>.zip", "framework.ops.get_collection_proto_type", "<builtin>.len", "framework.ops.get_collection_proto_type"], "framework.ops.get_collection_proto_type": [], "<builtin>.len": [], "<builtin>.zip": [], "util.compat.as_bytes": [], "re.match": [], "framework.test_util.IsGoogleCudaEnabled": ["util._pywrap_util_port.IsGoogleCudaEnabled"], "util._pywrap_util_port.IsGoogleCudaEnabled": [], "framework.test_util.IsBuiltWithROCm": ["util._pywrap_util_port.IsBuiltWithROCm"], "util._pywrap_util_port.IsBuiltWithROCm": [], "framework.test_util.IsBuiltWithXLA": ["util._pywrap_util_port.IsBuiltWithXLA"], "util._pywrap_util_port.IsBuiltWithXLA": [], "framework.test_util.IsBuiltWithNvcc": ["util._pywrap_util_port.IsBuiltWithNvcc"], "util._pywrap_util_port.IsBuiltWithNvcc": [], "framework.test_util.GpuSupportsHalfMatMulAndConv": ["util._pywrap_util_port.GpuSupportsHalfMatMulAndConv"], "util._pywrap_util_port.GpuSupportsHalfMatMulAndConv": [], "framework.test_util.IsMklEnabled": ["util._pywrap_util_port.IsMklEnabled", "os.getenv"], "util._pywrap_util_port.IsMklEnabled": [], "os.getenv": [], "framework.test_util.InstallStackTraceHandler": ["platform._pywrap_stacktrace_handler.InstallStacktraceHandler"], "platform._pywrap_stacktrace_handler.InstallStacktraceHandler": [], "framework.test_util.NHWCToNCHW": ["<builtin>.len", "ops.array_ops.transpose", "<builtin>.isinstance"], "ops.array_ops.transpose": [], "framework.test_util.NHWCToNCHW_VECT_C": ["ops.array_ops.transpose", "<builtin>.len", "<builtin>.ValueError", "ops.array_ops.reshape", "<builtin>.isinstance"], "ops.array_ops.reshape": [], "framework.test_util.NCHW_VECT_CToNHWC": ["ops.array_ops.transpose", "<builtin>.len", "<builtin>.ValueError", "ops.array_ops.reshape", "<builtin>.isinstance"], "framework.test_util.NCHWToNHWC": ["<builtin>.len", "ops.array_ops.transpose", "<builtin>.isinstance"], "framework.test_util.skip_if": [], "framework.test_util.skip_if.real_skip_if": [], "framework.test_util.skip_if.real_skip_if.wrapper": ["<builtin>.callable"], "<builtin>.callable": [], "contextlib.contextmanager": [], "framework.test_util.skip_if_error": ["<builtin>.type", "<builtin>.str", "<builtin>.any", "util.nest.flatten"], "util.nest.flatten": [], "<builtin>.str": [], "<builtin>.any": [], "framework.test_util.enable_c_shapes": [], "framework.test_util.with_c_shapes": [], "framework.test_util.enable_control_flow_v2": [], "framework.test_util.enable_control_flow_v2.wrapper": [], "framework.test_util.with_control_flow_v2": ["<builtin>.getattr", "util.nest.flatten", "<builtin>.setattr", "<builtin>.callable"], "<builtin>.getattr": [], "<builtin>.setattr": [], "framework.test_util.disable_control_flow_v2": [], "framework.test_util.disable_control_flow_v2.wrapper": [], "framework.test_util.enable_output_all_intermediates": [], "framework.test_util.enable_output_all_intermediates.wrapper": [], "framework.test_util.assert_no_new_pyobjects_executing_eagerly": ["util.nest.flatten"], "framework.test_util.assert_no_new_pyobjects_executing_eagerly.wrap_f": [], "framework.test_util.assert_no_new_pyobjects_executing_eagerly.wrap_f.decorator": ["gc.get_referents", "framework.ops.get_default_graph", "framework.ops.has_default_graph", "framework.ops.get_collection", "eager.context.context", "<builtin>.str", "gc.collect", "eager.context.eager_mode", "<builtin>.len", "gc.enable", "eager.context.eager_mode", "<builtin>.AssertionError", "<builtin>.range", "gc.disable"], "eager.context.eager_mode": [], "gc.disable": [], "<builtin>.range": [], "gc.collect": [], "eager.context.context": [], "gc.get_referents": [], "framework.ops.has_default_graph": [], "framework.ops.get_collection": [], "framework.ops.get_default_graph": [], "gc.enable": [], "framework.test_util.assert_no_new_tensors": [], "framework.test_util.assert_no_new_tensors.decorator": ["eager.context.executing_eagerly", "<builtin>.id", "<builtin>.set", "framework.ops.get_default_graph", "framework.ops.Graph", "framework.ops.Graph", "gc.get_objects", "gc.collect", "eager.context.eager_mode", "<builtin>.len", "<builtin>.AssertionError", "eager.context.context", "<builtin>.str", "eager.context.context"], "framework.test_util.assert_no_new_tensors.decorator._is_tensorflow_object": ["<builtin>.isinstance"], "<builtin>.id": [], "eager.context.executing_eagerly": [], "framework.ops.Graph": [], "framework.test_util.assert_no_garbage_created.decorator": ["tape.distribution_strategy_context.get_strategy", "gc.get_referents", "<builtin>.range", "tape.distribution_strategy_context.get_strategy", "gc.get_referrers", "<builtin>.dir", "<builtin>.enumerate", "gc.collect", "tape.distribution_strategy_context.get_strategy", "tape.distribution_strategy_context.get_strategy", "gc.enable", "<builtin>.len", "gc.get_debug", "gc.set_debug", "<builtin>.getattr", "gc.disable", "<builtin>.repr", "platform.tf_logging.error"], "framework.test_util._find_reference_cycle": ["platform.tf_logging.error", "platform.tf_logging.error"], "framework.test_util._find_reference_cycle.get_ignore_reason": ["util.tf_inspect.getframeinfo", "<builtin>.len", "util.tf_inspect.isframe"], "util.tf_inspect.isframe": [], "util.tf_inspect.getframeinfo": [], "framework.test_util._find_reference_cycle.describe": ["<builtin>.id", "util.tf_inspect.getframeinfo", "<builtin>.type", "util.tf_inspect.getframeinfo", "<builtin>.isinstance", "util.tf_inspect.isfunction", "<builtin>.len", "util.tf_inspect.ismodule", "util.tf_inspect.ismodule", "util.tf_inspect.isframe"], "util.tf_inspect.ismodule": [], "util.tf_inspect.isfunction": [], "framework.test_util._find_reference_cycle.build_ref_graph": ["<builtin>.id", "util.tf_inspect.isframe", "util.tf_inspect.isframe", "gc.get_referrers", "util.tf_inspect.isframe"], "gc.get_referrers": [], "framework.test_util._find_reference_cycle.find_cycle": ["util.tf_inspect.isframe", "<builtin>.str", "platform.tf_logging.error"], "platform.tf_logging.error": [], "framework.test_util.assert_no_garbage_created": [], "tape.distribution_strategy_context.get_strategy": [], "gc.get_debug": [], "gc.set_debug": [], "<builtin>.enumerate": [], "framework.test_util.assert_no_garbage_created.decorator._safe_object_str": ["<builtin>.id"], "<builtin>.dir": [], "<builtin>.repr": [], "framework.test_util._combine_named_parameters": ["itertools.product", "<builtin>.isinstance", "<builtin>.sorted", "collections.OrderedDict"], "framework.test_util._combine_named_parameters.<lambda1>": [], "<builtin>.sorted": [], "collections.OrderedDict": [], "itertools.product": [], "framework.test_util.generate_combinations_with_testcase_name": ["<builtin>.filter", "platform.tf_logging.error", "<builtin>.list", "<builtin>.str", "<builtin>.isinstance", "collections.OrderedDict"], "<builtin>.filter": [], "<builtin>.list": [], "framework.test_util.run_all_in_graph_and_eager_modes": ["platform.tf_logging.error", "<builtin>.dir", "<builtin>.callable", "<builtin>.getattr", "<builtin>.setattr"], "framework.test_util.run_in_graph_and_eager_modes": ["platform.tf_logging.error"], "framework.test_util.build_as_function_and_v1_graph": ["platform.tf_logging.error"], "framework.test_util.build_as_function_and_v1_graph.decorator": ["functools.wraps", "util.tf_inspect.isclass", "<builtin>.ValueError", "absl.testing.parameterized.named_parameters"], "util.tf_inspect.isclass": [], "absl.testing.parameterized.named_parameters": [], "functools.wraps": [], "framework.test_util.build_as_function_and_v1_graph.decorator.decorated": ["framework.ops.dismantle_graph", "framework.ops.Graph", "framework.ops.Graph", "eager.context.eager_mode", "<builtin>.ValueError"], "framework.test_util.build_as_function_and_v1_graph.decorator.decorated.function_in_eager": [], "framework.ops.dismantle_graph": [], "framework.test_util.run_in_async_and_sync_mode": ["functools.wraps", "absl.testing.parameterized.named_parameters"], "framework.test_util.run_in_async_and_sync_mode.decorator": ["eager.context.execution_mode"], "eager.context.execution_mode": [], "framework.test_util.run_in_graph_and_eager_modes.decorator": ["util.tf_inspect.isclass", "<builtin>.ValueError", "util.tf_decorator.make_decorator"], "framework.test_util.run_in_graph_and_eager_modes.decorator.decorated": ["framework.ops.dismantle_graph", "framework.ops.Graph", "framework.ops.Graph", "eager.context.graph_mode", "eager.context.graph_mode", "eager.context.eager_mode", "eager.context.eager_mode", "framework.ops.reset_default_graph"], "eager.context.graph_mode": [], "framework.test_util.run_in_graph_and_eager_modes.decorator.decorated.run_eagerly": ["framework.ops.device"], "framework.ops.device": [], "framework.ops.reset_default_graph": [], "util.tf_decorator.make_decorator": [], "framework.test_util.py_func_if_in_function": ["util.tf_decorator.make_decorator"], "framework.test_util.py_func_if_in_function.decorated": ["util.tf_decorator.make_decorator", "util.tf_decorator.make_decorator", "util.tf_decorator.make_decorator", "util.tf_decorator.make_decorator", "util.tf_decorator.make_decorator", "<builtin>.enumerate", "util.tf_decorator.make_decorator", "<builtin>.isinstance", "util.tf_decorator.make_decorator", "ops.script_ops.py_func", "ops.script_ops.py_func", "framework.ops.inside_function", "framework.ops.inside_function", "framework.ops.inside_function", "framework.ops.inside_function", "framework.ops.inside_function", "framework.ops.inside_function", "framework.ops.inside_function", "framework.ops.inside_function"], "framework.ops.inside_function": [], "framework.test_util.TensorFlowTestCase.assertAllCloseAccordingToType": ["framework.ops.inside_function", "<builtin>.max", "framework.ops.inside_function", "framework.ops.inside_function"], "framework.test_util.TensorFlowTestCase.assertAllLess": ["framework.ops.inside_function", "numpy.max", "googletest.TestCase.assertLess", "googletest.TestCase.assertLess"], "framework.test_util.TensorFlowTestCase.assertAllGreaterEqual": ["googletest.TestCase.assertLess", "googletest.TestCase.assertGreaterEqual", "numpy.min", "googletest.TestCase.assertGreaterEqual"], "framework.test_util.TensorFlowTestCase.assertDTypeEqual": ["googletest.TestCase.assertGreaterEqual", "googletest.TestCase.assertEqual", "<builtin>.isinstance"], "framework.test_util.TensorFlowTestCase.assertNDArrayNear": ["googletest.TestCase.assertTrue", "googletest.TestCase.assertTrue"], "framework.test_util.TensorFlowTestCase.assertAllLessEqual": ["googletest.TestCase.assertTrue", "numpy.max", "googletest.TestCase.assertLessEqual", "googletest.TestCase.assertLessEqual"], "framework.test_util.TensorFlowTestCase.assertAllInRange": ["numpy.isnan", "numpy.greater_equal", "numpy.issubdtype", "<builtin>.str", "numpy.logical_or", "googletest.TestCase.assertLessEqual", "numpy.where", "numpy.size", "<builtin>.len", "numpy.less_equal", "<builtin>.AssertionError", "googletest.TestCase.assertLessEqual", "numpy.greater", "numpy.less"], "framework.test_util.TensorFlowTestCase.assertAllInSet": ["googletest.TestCase.assertLessEqual", "<builtin>.list", "numpy.size", "numpy.setdiff1d", "<builtin>.AssertionError"], "framework.test_util.TensorFlowTestCase.assertNear": ["googletest.TestCase.assertTrue", "math.fabs"], "framework.test_util.TensorFlowTestCase.assertNotAllClose": ["googletest.TestCase.assertTrue", "<builtin>.AssertionError"], "framework.test_util.TensorFlowTestCase.assertAllGreater": ["googletest.TestCase.assertTrue", "googletest.TestCase.assertGreater", "numpy.min", "googletest.TestCase.assertGreater"], "framework.test_util.TensorFlowTestCase.assertAllClose": ["ragged.ragged_tensor.is_ragged", "ragged.ragged_tensor.is_ragged", "ragged.ragged_tensor.is_ragged"], "framework.test_util.TensorFlowTestCase.assertAllEqual": ["ragged.ragged_tensor.is_ragged", "googletest.TestCase.assertEqual", "numpy.isnan", "numpy.logical_and", "numpy.logical_or", "numpy.all", "ragged.ragged_tensor.is_ragged", "ragged.ragged_tensor.is_ragged", "numpy.where", "numpy.testing.assert_array_equal", "ragged.ragged_tensor.is_ragged", "numpy.array", "numpy.logical_not", "<builtin>.isinstance"], "framework.test_util.TensorFlowTestCase.assertNotAllEqual": ["<builtin>.AssertionError", "ragged.ragged_tensor.is_ragged"], "framework.test_util.TensorFlowTestCase.assertArrayNear": ["googletest.TestCase.assertEqual", "<builtin>.zip", "<builtin>.float", "<builtin>.len", "googletest.TestCase.assertEqual"], "framework.test_util.py_func_if_in_function.decorated.inner_f": ["googletest.TestCase.assertEqual", "<builtin>.zip", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "<builtin>.list", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual"], "ops.script_ops.py_func": [], "framework.test_util.also_run_as_tf_function": [], "framework.test_util.also_run_as_tf_function.decorated": ["eager.context.eager_mode", "eager.def_function.function", "eager.def_function.function"], "framework.test_util.also_run_as_tf_function.decorated.bound_f": [], "eager.def_function.function": [], "framework.test_util.deprecated_graph_mode_only": ["eager.def_function.function"], "framework.test_util.deprecated_graph_mode_only.decorator": ["<builtin>.setattr", "util.tf_inspect.isclass", "util.tf_inspect.isclass", "<builtin>.callable"], "framework.test_util.deprecated_graph_mode_only.decorator.decorated": ["eager.context.executing_eagerly", "eager.context.graph_mode"], "framework.test_util.run_all_in_deprecated_graph_mode_only": ["<builtin>.dir", "<builtin>.callable", "<builtin>.getattr", "eager.context.graph_mode", "<builtin>.setattr"], "framework.test_util.run_v1_only": ["eager.context.graph_mode", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "framework.test_util.run_v1_only.decorator": ["eager.context.graph_mode", "util.tf_inspect.isclass", "<builtin>.setattr"], "framework.test_util.run_v1_only.decorator.decorated": ["python.tf2.enabled"], "python.tf2.enabled": [], "framework.test_util.run_v2_only": ["python.tf2.enabled"], "framework.test_util.run_v2_only.decorator": ["util.tf_inspect.isclass", "<builtin>.ValueError"], "framework.test_util.run_v2_only.decorator.decorated": ["python.tf2.enabled"], "framework.test_util.run_gpu_only": ["python.tf2.enabled"], "framework.test_util.run_gpu_only.decorator": ["util.tf_inspect.isclass", "<builtin>.ValueError"], "framework.test_util.run_gpu_only.decorator.decorated": ["util.tf_inspect.isclass"], "framework.test_util.is_gpu_available": ["client.device_lib.list_local_devices", "framework.gpu_util.compute_capability_from_device_desc", "<builtin>.all", "<builtin>.str", "platform.tf_logging.error"], "framework.test_util.run_cuda_only": ["platform.tf_logging.error"], "framework.test_util.run_cuda_only.decorator": ["util.tf_inspect.isclass", "<builtin>.ValueError"], "framework.test_util.run_cuda_only.decorator.decorated": ["util.tf_inspect.isclass"], "framework.test_util.run_gpu_or_tpu": ["util.tf_inspect.isclass"], "framework.test_util.run_gpu_or_tpu.decorator": ["util.tf_inspect.isclass", "<builtin>.ValueError"], "framework.test_util.run_gpu_or_tpu.decorator.decorated": ["framework.config.list_physical_devices"], "framework.config.list_physical_devices": [], "framework.test_util.with_forward_compatibility_horizons": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.all", "<builtin>.isinstance"], "<builtin>.all": [], "framework.test_util.with_forward_compatibility_horizons.decorator": ["util.tf_inspect.isclass", "<builtin>.ValueError"], "framework.test_util.with_forward_compatibility_horizons.decorator.decorated": ["compat.compat.forward_compatibility_horizon"], "compat.compat.forward_compatibility_horizon": [], "util.deprecation.deprecated": [], "framework.gpu_util.compute_capability_from_device_desc": [], "framework.test_util.device": ["framework.ops.device", "framework.ops.device"], "framework.test_util.use_gpu": ["framework.ops.device"], "framework.test_util.force_gpu": ["framework.ops.device"], "framework.test_util.force_cpu": ["framework.ops.device"], "framework.test_util.CapturedWrites.__init__": [], "framework.test_util.CapturedWrites.contents": ["<builtin>.open"], "<builtin>.open": [], "framework.test_util.FakeEagerSession.__init__": [], "framework.test_util.FakeEagerSession.run": ["<builtin>.RuntimeError", "framework.ops.device"], "<builtin>.RuntimeError": [], "framework.test_util.TensorFlowTestCase.evaluate": ["eager.context.executing_eagerly", "framework.ops.get_default_session", "framework.ops.get_default_session", "framework.ops.get_default_session"], "framework.test_util.ErrorLoggingSession.run": ["<builtin>.str", "platform.tf_logging.error", "<builtin>.isinstance", "<builtin>.super"], "<builtin>.super": [], "framework.test_util.disable_cudnn_autotune": ["platform.tf_logging.error"], "framework.test_util.disable_cudnn_autotune.decorator": [], "framework.test_util.disable_cudnn_autotune.decorator.decorated": ["os.environ.get"], "os.environ.get": [], "framework.test_util.enable_tf_xla_constant_folding": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "framework.test_util.enable_tf_xla_constant_folding.enable_tf_xla_constant_folding_impl": ["platform.tf_logging.error"], "framework.test_util.enable_tf_xla_constant_folding.enable_tf_xla_constant_folding_impl.decorator": [], "framework.test_util.enable_tf_xla_constant_folding.enable_tf_xla_constant_folding_impl.decorator.decorated": ["client.pywrap_tf_session.TF_SetXlaConstantFoldingDisabled", "client.pywrap_tf_session.TF_GetXlaConstantFoldingDisabled"], "client.pywrap_tf_session.TF_GetXlaConstantFoldingDisabled": [], "client.pywrap_tf_session.TF_SetXlaConstantFoldingDisabled": [], "framework.test_util._disable_test": [], "framework.test_util._disable_test.disable_test_impl": ["client.pywrap_tf_session.TF_GetXlaConstantFoldingDisabled"], "framework.test_util._disable_test.disable_test_impl.decorator": ["util.tf_decorator.make_decorator"], "framework.test_util._disable_test.disable_test_impl.decorator.decorated": [], "framework.test_util.disable_xla": ["util.tf_decorator.make_decorator", "framework.is_xla_test_true.is_xla_enabled"], "framework.is_xla_test_true.is_xla_enabled": [], "framework.test_util.disable_mlir_bridge": ["framework.is_xla_test_true.is_xla_enabled", "framework.is_mlir_bridge_test_true.is_mlir_bridge_enabled", "framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled"], "framework.is_mlir_bridge_test_true.is_mlir_bridge_enabled": [], "framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled": [], "framework.test_util.disable_asan": ["framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled", "framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled"], "framework.test_util.disable_msan": ["framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled", "framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled"], "framework.test_util.disable_tsan": ["framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled", "framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled"], "framework.test_util.disable_ubsan": ["framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled", "framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled"], "framework.test_util.disable_tfrt": [], "framework.test_util.disable_tfrt.disable_tfrt_impl": ["framework.tfrt_utils.enabled", "framework.tfrt_utils.enabled", "util.tf_inspect.isclass"], "framework.tfrt_utils.enabled": [], "framework.test_util.disable_tfrt.disable_tfrt_impl.decorator": [], "framework.test_util.disable_tfrt.disable_tfrt_impl.decorator.decorated": ["framework.tfrt_utils.enabled"], "framework.test_util.for_all_test_methods": [], "framework.test_util.for_all_test_methods.all_test_methods_impl": ["<builtin>.dir", "framework.tfrt_utils.enabled", "framework.tfrt_utils.enabled", "<builtin>.callable", "<builtin>.getattr", "<builtin>.setattr"], "framework.test_util.run_without_tensor_float_32": [], "framework.test_util.run_without_tensor_float_32.decorator": ["functools.wraps"], "framework.test_util.no_xla_auto_jit": ["framework.tfrt_utils.enabled", "framework.is_xla_test_true.is_xla_enabled"], "framework.test_util.xla_allow_fallback": [], "framework.test_util.xla_allow_fallback.xla_allow_fallback_impl": ["framework.is_xla_test_true.is_xla_enabled"], "framework.test_util.xla_allow_fallback.xla_allow_fallback_impl.decorator": [], "framework.test_util.xla_allow_fallback.xla_allow_fallback_impl.decorator.decorated": ["framework.is_xla_test_true.is_xla_enabled", "client.pywrap_tf_session.TF_SetXlaEnableLazyCompilation"], "client.pywrap_tf_session.TF_SetXlaEnableLazyCompilation": [], "framework.test_util.run_without_tensor_float_32.decorator.decorated": ["framework.config.tensor_float_32_execution_enabled", "framework.config.enable_tensor_float_32_execution"], "framework.config.tensor_float_32_execution_enabled": [], "framework.config.enable_tensor_float_32_execution": [], "framework.test_util.run_all_without_tensor_float_32": ["framework.config.enable_tensor_float_32_execution"], "framework.test_util.matmul_without_tf32": ["framework.config.tensor_float_32_execution_enabled", "ops.math_ops.cast", "ops.math_ops.matmul"], "ops.math_ops.cast": [], "ops.math_ops.matmul": [], "framework.test_util.EagerSessionWarner.__getattr__": ["<builtin>.AttributeError"], "<builtin>.AttributeError": [], "framework.test_util.TensorFlowTestCase.__init__": ["framework.is_xla_test_true.is_xla_enabled", "client.pywrap_tf_session.TF_SetXlaConstantFoldingDisabled", "client.pywrap_tf_session.TF_SetXlaAutoJitMode", "framework.is_mlir_bridge_test_false.is_mlir_bridge_enabled", "client.pywrap_tf_session.TF_SetXlaEnableLazyCompilation", "framework.is_mlir_bridge_test_true.is_mlir_bridge_enabled", "client.pywrap_tf_session.TF_SetTfXlaCpuGlobalJit", "<builtin>.super", "eager.context.context", "client.pywrap_tf_session.TF_SetXlaMinClusterSize"], "client.pywrap_tf_session.TF_SetXlaAutoJitMode": [], "client.pywrap_tf_session.TF_SetXlaMinClusterSize": [], "client.pywrap_tf_session.TF_SetTfXlaCpuGlobalJit": [], "framework.test_util.TensorFlowTestCase.setUp": ["googletest.TestCase.skipTest", "numpy.random.seed", "framework.random_seed.set_random_seed", "framework.ops.reset_default_graph", "time.time", "googletest.TestCase.id", "<builtin>.super", "googletest.TestCase.id", "random.seed", "ops._default_graph_stack.reset"], "framework.test_util.TensorFlowTestCase._ClearCachedSession": ["session.Session.close"], "random.seed": [], "numpy.random.seed": [], "ops._default_graph_stack.reset": [], "framework.random_seed.set_random_seed": [], "googletest.TestCase.id": [], "googletest.TestCase.skipTest": [], "time.time": [], "framework.test_util.TensorFlowTestCase.tearDown": ["<builtin>.round", "time.time", "<builtin>.super", "session.Session.close", "platform.tf_logging.info", "googletest.TestCase.id"], "<builtin>.round": [], "platform.tf_logging.info": [], "session.Session.close": [], "framework.test_util.TensorFlowTestCase.get_temp_dir": ["platform.googletest.GetTempDir", "tempfile.mkdtemp"], "platform.googletest.GetTempDir": [], "tempfile.mkdtemp": [], "framework.test_util.TensorFlowTestCase": ["contextlib.contextmanager", "util.deprecation.deprecated", "util.deprecation.deprecated"], "framework.test_util.TensorFlowTestCase.captureWritesToStream": ["<builtin>.open", "tempfile.mktemp", "os.dup2", "os.dup", "util.deprecation.deprecated", "util.deprecation.deprecated"], "tempfile.mktemp": [], "os.dup": [], "os.dup2": [], "framework.test_util.TensorFlowTestCase._AssertProtoEquals": ["protobuf.compare.assertProtoEqual", "protobuf.compare.ProtoEq"], "protobuf.compare.ProtoEq": [], "protobuf.compare.assertProtoEqual": [], "framework.test_util.TensorFlowTestCase.assertProtoEquals": ["<builtin>.type", "protobuf.compare.ProtoEq", "google.protobuf.text_format.Merge", "google.protobuf.descriptor_pool.Default", "<builtin>.isinstance"], "google.protobuf.descriptor_pool.Default": [], "google.protobuf.text_format.Merge": [], "framework.test_util.TensorFlowTestCase.assertProtoEqualsVersion": ["protobuf.compare.ProtoEq"], "framework.test_util.TensorFlowTestCase.assertStartsWith": ["googletest.TestCase.fail"], "googletest.TestCase.fail": [], "framework.test_util.TensorFlowTestCase._eval_tensor": ["googletest.TestCase.fail", "framework.ops.IndexedSlicesValue", "framework.sparse_tensor.is_sparse", "framework.sparse_tensor.SparseTensorValue", "ragged.ragged_tensor_value.RaggedTensorValue", "util.nest.map_structure", "util.nest.map_structure", "<builtin>.type", "six.raise_from", "<builtin>.callable", "ragged.ragged_tensor.is_ragged", "<builtin>.ValueError", "<builtin>.isinstance"], "framework.test_util.TensorFlowTestCase._eval_helper": ["util.nest.map_structure"], "framework.sparse_tensor.is_sparse": [], "framework.sparse_tensor.SparseTensorValue": [], "ragged.ragged_tensor.is_ragged": [], "ragged.ragged_tensor_value.RaggedTensorValue": [], "framework.ops.IndexedSlicesValue": [], "framework.test_util.TensorFlowTestCase._eval_tensor.<lambda1>": [], "util.nest.map_structure": [], "six.raise_from": [], "framework.ops.get_default_session": [], "framework.test_util.TensorFlowTestCase.test_session": ["eager.context.executing_eagerly", "googletest.TestCase.skipTest", "googletest.TestCase.skipTest", "googletest.TestCase.skipTest", "googletest.TestCase.skipTest", "googletest.TestCase.id"], "framework.test_util.TensorFlowTestCase.session": ["eager.context.executing_eagerly", "eager.context.executing_eagerly", "eager.context.executing_eagerly"], "framework.test_util.TensorFlowTestCase._create_session": ["session.Session.__init__", "session.Session.__init__"], "framework.test_util.TensorFlowTestCase._constrain_devices_and_set_default": ["eager.context.executing_eagerly", "eager.context.executing_eagerly", "session.Session.as_default", "Session.graph.as_default", "Session.graph.device"], "framework.test_util.TensorFlowTestCase.cached_session": ["eager.context.executing_eagerly", "eager.context.executing_eagerly", "eager.context.executing_eagerly", "eager.context.executing_eagerly"], "framework.test_util.TensorFlowTestCase._get_cached_session": ["<builtin>.ValueError", "eager.context.executing_eagerly"], "framework.test_util.TensorFlowTestCase._CheckedThread.__init__": ["threading.Thread"], "threading.Thread": [], "framework.test_util.TensorFlowTestCase._CheckedThread._protected_run": [], "framework.test_util.TensorFlowTestCase._CheckedThread.start": [], "framework.test_util.TensorFlowTestCase._CheckedThread.join": ["<builtin>.str", "googletest.TestCase.fail"], "framework.test_util.TensorFlowTestCase._CheckedThread.is_alive": [], "framework.test_util.TensorFlowTestCase._CheckedThread.check_termination": ["<builtin>.RuntimeError", "googletest.TestCase.fail", "googletest.TestCase.fail"], "framework.test_util.TensorFlowTestCase.checkedThread": ["googletest.TestCase.fail"], "math.fabs": [], "googletest.TestCase.assertTrue": [], "googletest.TestCase.assertEqual": [], "<builtin>.float": [], "framework.test_util.TensorFlowTestCase._NDArrayNear": ["numpy.linalg.norm"], "numpy.linalg.norm": [], "framework.test_util.TensorFlowTestCase._GetNdArray": ["framework.tensor_util.is_tf_type", "numpy.array", "<builtin>.isinstance", "framework.tensor_util.is_tf_type"], "framework.tensor_util.is_tf_type": [], "numpy.array": [], "framework.test_util.TensorFlowTestCase.evaluate_if_both_tensors": ["framework.tensor_util.is_tf_type", "<builtin>.isinstance", "framework.tensor_util.is_tf_type"], "framework.test_util.TensorFlowTestCase._assertArrayLikeAllClose": ["framework.tensor_util.is_tf_type", "googletest.TestCase.assertEqual", "numpy.isnan", "numpy.logical_or", "googletest.TestCase.assertEqual", "numpy.where", "numpy.allclose", "numpy.abs", "numpy.testing.assert_allclose"], "numpy.allclose": [], "numpy.abs": [], "numpy.isnan": [], "numpy.logical_or": [], "numpy.where": [], "numpy.testing.assert_allclose": [], "framework.test_util.TensorFlowTestCase._assertAllCloseRecursive": ["googletest.TestCase.assertEqual", "<builtin>.type", "<builtin>.zip", "googletest.TestCase.assertEqual", "<builtin>.enumerate", "googletest.TestCase.assertEqual", "googletest.TestCase.assertCountEqual", "googletest.TestCase.assertCountEqual", "<builtin>.len", "<builtin>.ValueError", "<builtin>.hasattr", "<builtin>.str", "<builtin>.isinstance"], "<builtin>.hasattr": [], "googletest.TestCase.assertCountEqual": [], "framework.test_util.TensorFlowTestCase._assertRaggedClose": ["googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "ragged.ragged_tensor.is_ragged", "<builtin>.isinstance"], "<builtin>.max": [], "framework.test_util.TensorFlowTestCase._assertRaggedEqual": ["googletest.TestCase.assertEqual", "ragged.ragged_tensor.is_ragged", "ragged.ragged_tensor.is_ragged", "<builtin>.isinstance"], "numpy.logical_and": [], "numpy.all": [], "numpy.logical_not": [], "numpy.testing.assert_array_equal": [], "numpy.min": [], "googletest.TestCase.assertGreater": [], "numpy.max": [], "googletest.TestCase.assertLess": [], "googletest.TestCase.assertGreaterEqual": [], "googletest.TestCase.assertLessEqual": [], "framework.test_util.TensorFlowTestCase._format_subscripts": ["<builtin>.tuple", "numpy.transpose", "numpy.ndim", "itertools.islice", "<builtin>.len", "<builtin>.str"], "numpy.transpose": [], "numpy.ndim": [], "itertools.islice": [], "<builtin>.tuple": [], "numpy.issubdtype": [], "numpy.size": [], "numpy.less_equal": [], "numpy.less": [], "numpy.greater_equal": [], "numpy.greater": [], "numpy.setdiff1d": [], "framework.test_util.TensorFlowTestCase.assertRaisesWithPredicateMatch": ["<builtin>.type", "<builtin>.callable", "googletest.TestCase.fail", "<builtin>.AssertionError", "<builtin>.str", "<builtin>.isinstance"], "framework.test_util.TensorFlowTestCase.assertRaisesWithPredicateMatch.predicate": ["<builtin>.str", "platform.tf_logging.info", "<builtin>.isinstance", "re.search"], "re.search": [], "framework.test_util.TensorFlowTestCase.assertRaisesOpError": ["platform.tf_logging.info"], "framework.test_util.TensorFlowTestCase.assertRaisesIncompatibleShapesError": ["platform.tf_logging.info"], "framework.test_util.TensorFlowTestCase.assertShapeEqual": ["platform.tf_logging.info", "<builtin>.TypeError", "<builtin>.isinstance"], "framework.test_util.TensorFlowTestCase.assertDeviceEqual": ["googletest.TestCase.assertEqual", "framework.device.canonical_name"], "framework.device.canonical_name": [], "framework.test_util.TensorFlowTestCase._GetPyList": ["numpy.array", "<builtin>.isinstance", "framework.device.canonical_name"], "framework.test_util.TensorFlowTestCase._assertListCloseRecursive": ["googletest.TestCase.assertEqual", "<builtin>.type", "googletest.TestCase.assertEqual", "googletest.TestCase.assertEqual", "<builtin>.len", "<builtin>.range", "googletest.TestCase.assertLen", "<builtin>.isinstance"], "googletest.TestCase.assertLen": [], "Session.graph.as_default": [], "session.Session.as_default": [], "Session.graph.device": [], "framework.test_util.TensorFlowTestCase._create_session.prepare_config": ["eager.context.context"], "session.Session.__init__": [], "framework.test_util.create_local_cluster": ["<builtin>.range", "training.server_lib.ClusterSpec", "portpicker.pick_unused_port", "training.server_lib.Server"], "portpicker.pick_unused_port": [], "training.server_lib.ClusterSpec": [], "training.server_lib.Server": [], "framework.test_util.get_node_def_from_graph": [], "framework.test_util.set_producer_version": ["framework.graph_pb2.GraphDef", "framework.importer.import_graph_def"], "framework.graph_pb2.GraphDef": [], "framework.importer.import_graph_def": [], "framework.test_util._fake_gradient_tape_context_manager": [], "framework.test_util._fake_gradient_tape_context_manager.FakeGradientTape.watch": [], "framework.test_util._fake_gradient_tape_context_manager.FakeGradientTape.gradient": ["<builtin>.len", "ops.gradients_impl.gradients", "<builtin>.isinstance"], "ops.gradients_impl.gradients": [], "framework.test_util.AbstractGradientTape.__init__": [], "framework.test_util.AbstractGradientTape.__enter__": ["eager.backprop.GradientTape", "eager.backprop.GradientTape"], "eager.backprop.GradientTape": [], "framework.test_util.AbstractGradientTape.__exit__": [], "framework.test_util.run_functions_eagerly": ["eager.context.executing_eagerly", "eager.def_function.run_functions_eagerly", "eager.def_function.functions_run_eagerly", "<builtin>.ValueError", "platform.tf_logging.warning", "<builtin>.isinstance"], "platform.tf_logging.warning": [], "eager.def_function.functions_run_eagerly": [], "eager.def_function.run_functions_eagerly": []}