{"operators.control_flow_test": ["platform.test.main"], "operators.control_flow_test._unranked_item": ["ops.random_ops.random_uniform", "ops.array_ops.fill", "ops.array_ops.ones"], "ops.random_ops.random_uniform": [], "ops.array_ops.ones": [], "ops.array_ops.fill": [], "operators.control_flow_test._partial_shaped_bools": ["ops.random_ops.random_uniform", "ops.math_ops.range", "ops.array_ops.expand_dims_v2"], "ops.math_ops.range": [], "ops.array_ops.expand_dims_v2": [], "operators.control_flow_test.ForLoopTest.test_tensor": ["framework.constant_op.constant", "testing.AutoGraphTestCase.assertEqual", "operators.control_flow.for_stmt"], "operators.control_flow_test.ForLoopTest.test_tensor.body": [], "operators.control_flow_test.ForLoopTest.test_tensor.set_state": [], "framework.constant_op.constant": [], "operators.control_flow_test.ForLoopTest.test_tensor.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tensor.<lambda2>": [], "operators.control_flow.for_stmt": [], "testing.AutoGraphTestCase.assertEqual": [], "operators.control_flow_test.ForLoopTest.test_range_tensor": ["testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "operators.control_flow.for_stmt", "ops.math_ops.range"], "operators.control_flow_test.ForLoopTest.test_range_tensor.body": [], "operators.control_flow_test.ForLoopTest.test_range_tensor.set_state": [], "operators.control_flow_test.ForLoopTest.test_range_tensor.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_range_tensor.<lambda2>": [], "testing.AutoGraphTestCase.assertOpCreated": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_delta": ["testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "operators.control_flow.for_stmt", "ops.math_ops.range"], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_delta.body": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_delta.set_state": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_delta.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_delta.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_negative_delta": ["testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "operators.control_flow.for_stmt", "ops.math_ops.range"], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_negative_delta.body": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_negative_delta.set_state": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_negative_delta.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_explicit_limit_negative_delta.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_delta": ["ops.random_ops.random_uniform", "operators.control_flow.for_stmt", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "ops.math_ops.range"], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_delta.body": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_delta.set_state": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_delta.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_delta.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_negative_delta": ["ops.random_ops.random_uniform", "operators.control_flow.for_stmt", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "ops.math_ops.range"], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_negative_delta.body": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_negative_delta.set_state": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_negative_delta.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_range_tensor_random_negative_delta.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_tensor_with_extra_test_object_vars": ["framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "operators.control_flow.for_stmt"], "operators.control_flow_test.ForLoopTest.test_tensor_with_extra_test_object_vars.MutableObject": ["framework.constant_op.constant"], "operators.control_flow_test.ForLoopTest.test_tensor_with_extra_test_object_vars.body": [], "operators.control_flow_test.ForLoopTest.test_tensor_with_extra_test_object_vars.get_state": [], "operators.control_flow_test.ForLoopTest.test_tensor_with_extra_test_object_vars.set_state": [], "operators.control_flow_test.ForLoopTest.test_tensor_with_extra_test_object_vars.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_python": ["<builtin>.range", "testing.AutoGraphTestCase.assertNoOpsCreated", "testing.AutoGraphTestCase.assertEqual", "operators.control_flow.for_stmt"], "operators.control_flow_test.ForLoopTest.test_python.body": [], "operators.control_flow_test.ForLoopTest.test_python.set_state": [], "<builtin>.range": [], "operators.control_flow_test.ForLoopTest.test_python.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_python.<lambda2>": [], "testing.AutoGraphTestCase.assertNoOpsCreated": [], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test": ["testing.AutoGraphTestCase.assertNoOpsCreated", "<builtin>.next", "testing.AutoGraphTestCase.assertNoOpsCreated", "testing.AutoGraphTestCase.assertEqual", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test.new_generator": ["<builtin>.range"], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test.run_loop": ["operators.control_flow.for_stmt"], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test.run_loop.body": [], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test.run_loop.<lambda1>": [], "<builtin>.next": [], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test_no_iterations": ["operators.control_flow.for_stmt", "testing.AutoGraphTestCase.assertNoOpsCreated", "testing.AutoGraphTestCase.assertNoOpsCreated", "<builtin>.next", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test_no_iterations.new_generator": ["<builtin>.range"], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test_no_iterations.run_loop": ["operators.control_flow.for_stmt"], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test_no_iterations.run_loop.body": [], "operators.control_flow_test.ForLoopTest.test_python_generator_with_extra_test_no_iterations.run_loop.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tf_dataset": ["dataset_ops.Dataset.range", "operators.control_flow.for_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_tf_dataset.body": [], "operators.control_flow_test.ForLoopTest.test_tf_dataset.set_state": [], "dataset_ops.Dataset.range": [], "operators.control_flow_test.ForLoopTest.test_tf_dataset.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test": ["dataset_ops.Dataset.range", "operators.control_flow.for_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test.body": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test.set_state": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_collection_vars": ["dataset_ops.Dataset.range", "operators.control_flow.for_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_collection_vars.body": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_collection_vars.set_state": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_collection_vars.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_collection_vars.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_iteration_limiting": ["dataset_ops.Dataset.range", "operators.control_flow.for_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_iteration_limiting.body": ["ops.control_flow_ops.Assert", "framework.ops.control_dependencies"], "ops.control_flow_ops.Assert": [], "framework.ops.control_dependencies": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_iteration_limiting.set_state": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_iteration_limiting.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_dataset_with_extra_test_iteration_limiting.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_tf_dataset_no_loop_vars": ["dataset_ops.Dataset.range", "operators.control_flow.for_stmt", "testing.AutoGraphTestCase.variable", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_tf_dataset_no_loop_vars.body": [], "testing.AutoGraphTestCase.variable": [], "operators.control_flow_test.ForLoopTest.test_tf_dataset_no_loop_vars.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tf_dataset_no_loop_vars.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator": ["dataset_ops.Dataset.range", "<builtin>.iter", "operators.control_flow.for_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_tf_iterator.body": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator.set_state": [], "<builtin>.iter": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator_shape_invariants": ["dataset_ops.Dataset.range", "testing.AutoGraphTestCase.assertAllEqual", "<builtin>.iter", "operators.control_flow.for_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "framework.tensor_shape.TensorShape"], "operators.control_flow_test.ForLoopTest.test_tf_iterator_shape_invariants.body": ["ops.array_ops.concat"], "ops.array_ops.concat": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator_shape_invariants.set_state": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator_shape_invariants.<lambda1>": [], "framework.tensor_shape.TensorShape": [], "testing.AutoGraphTestCase.assertAllEqual": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator_shape_invariants_with_nested_structures": ["dataset_ops.Dataset.range", "testing.AutoGraphTestCase.assertAllEqual", "<builtin>.iter", "operators.control_flow.for_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "collections.namedtuple", "framework.tensor_shape.TensorShape"], "operators.control_flow_test.ForLoopTest.test_tf_iterator_shape_invariants_with_nested_structures.body": ["ops.array_ops.concat"], "operators.control_flow_test.ForLoopTest.test_tf_iterator_shape_invariants_with_nested_structures.set_state": [], "collections.namedtuple": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator_shape_invariants_with_nested_structures.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator_no_loop_vars": ["dataset_ops.Dataset.range", "<builtin>.iter", "operators.control_flow.for_stmt", "testing.AutoGraphTestCase.variable", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_tf_iterator_no_loop_vars.body": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator_no_loop_vars.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tf_iterator_no_loop_vars.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor": ["testing.AutoGraphTestCase.assertOpCreated", "ragged.ragged_factory_ops.constant", "operators.control_flow.for_stmt", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor.body": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor.set_state": [], "ragged.ragged_factory_ops.constant": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor_higher_dimensional": ["testing.AutoGraphTestCase.assertOpCreated", "ragged.ragged_factory_ops.constant", "operators.control_flow.for_stmt", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor_higher_dimensional.body": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor_higher_dimensional.set_state": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor_higher_dimensional.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor_no_loop_vars": ["ragged.ragged_factory_ops.constant", "operators.control_flow.for_stmt", "testing.AutoGraphTestCase.variable", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor_no_loop_vars.body": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor_no_loop_vars.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tf_ragged_tensor_no_loop_vars.<lambda2>": [], "operators.control_flow_test.ForLoopTest._basic_loop": ["framework.constant_op.constant", "operators.control_flow.for_stmt"], "operators.control_flow_test.ForLoopTest._basic_loop.body": [], "operators.control_flow_test.ForLoopTest._basic_loop.set_state": [], "operators.control_flow_test.ForLoopTest._basic_loop.<lambda1>": [], "operators.control_flow_test.ForLoopTest._basic_loop.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_tensor_illegal_input": ["operators.variables.Undefined", "operators.variables.Undefined", "testing.AutoGraphTestCase.assertRaisesRegex"], "testing.AutoGraphTestCase.assertRaisesRegex": [], "operators.control_flow_test.ForLoopTest.test_tensor_illegal_input.<lambda1>": [], "operators.variables.Undefined": [], "operators.control_flow_test.ForLoopTest.test_tensor_illegal_input.<lambda2>": [], "operators.control_flow_test.ForLoopTest.test_tensor_none_output": ["testing.AutoGraphTestCase.assertRaisesRegex", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.ForLoopTest.test_tensor_none_output.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tensor_dtype_change": ["testing.AutoGraphTestCase.assertRaisesRegex", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.ForLoopTest.test_tensor_dtype_change.<lambda1>": [], "operators.control_flow_test.ForLoopTest.test_tensor_shape_change": ["testing.AutoGraphTestCase.assertRaisesRegex", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.ForLoopTest.test_tensor_shape_change.<lambda1>": ["numpy.array"], "numpy.array": [], "operators.control_flow_test.WhileLoopTest.test_tensor": ["framework.constant_op.constant", "operators.control_flow.while_stmt", "testing.AutoGraphTestCase.assertEqual", "testing.AutoGraphTestCase.assertOpCreated"], "operators.control_flow_test.WhileLoopTest.test_tensor.body": [], "operators.control_flow_test.WhileLoopTest.test_tensor.set_state": [], "operators.control_flow_test.WhileLoopTest.test_tensor.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_tensor.<lambda2>": [], "operators.control_flow.while_stmt": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable": ["testing.AutoGraphTestCase.assertGraphContains", "operators.variables.Undefined", "operators.control_flow.while_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable.body": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable.set_state": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable.<lambda1>": ["ops.math_ops.equal"], "ops.math_ops.equal": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable.<lambda2>": [], "testing.AutoGraphTestCase.assertGraphContains": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable": ["testing.AutoGraphTestCase.assertLess", "operators.variables.Undefined", "operators.control_flow.while_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable.body": ["ops.random_ops.random_uniform"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable.set_state": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable.<lambda1>": ["ops.math_ops.less"], "ops.math_ops.less": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable.<lambda2>": [], "testing.AutoGraphTestCase.assertLess": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable_preserves_shape_invar": ["testing.AutoGraphTestCase.evaluate", "operators.variables.Undefined", "operators.control_flow.while_stmt", "framework.constant_op.constant", "framework.tensor_shape.TensorShape"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable_preserves_shape_invar.body": ["ops.array_ops.zeros"], "ops.array_ops.zeros": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable_preserves_shape_invar.set_state": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable_preserves_shape_invar.<lambda1>": ["ops.math_ops.less"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_dynamic_shape_variable_preserves_shape_invar.<lambda2>": [], "testing.AutoGraphTestCase.evaluate": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_complex_variable": ["testing.AutoGraphTestCase.assertDictEqual", "testing.AutoGraphTestCase.assertGraphContains", "operators.variables.Undefined", "operators.control_flow.while_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_complex_variable.body": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_complex_variable.set_state": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_complex_variable.<lambda1>": ["ops.math_ops.equal"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_complex_variable.<lambda2>": [], "testing.AutoGraphTestCase.assertDictEqual": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable_of_dynamic_shape": ["testing.AutoGraphTestCase.assertGreaterEqual", "operators.variables.Undefined", "operators.control_flow.while_stmt", "framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable_of_dynamic_shape.body": ["ops.random_ops.random_uniform", "ops.math_ops.reduce_sum", "ops.array_ops.ones"], "ops.math_ops.reduce_sum": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable_of_dynamic_shape.set_state": [], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable_of_dynamic_shape.<lambda1>": ["ops.math_ops.equal"], "operators.control_flow_test.WhileLoopTest.test_tensor_creating_variable_of_dynamic_shape.<lambda2>": [], "testing.AutoGraphTestCase.assertGreaterEqual": [], "operators.control_flow_test.WhileLoopTest.test_tensor_with_side_effecting_condition": ["framework.constant_op.constant", "operators.control_flow.while_stmt", "testing.AutoGraphTestCase.variable", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_tensor_with_side_effecting_condition.cond": [], "operators.control_flow_test.WhileLoopTest.test_tensor_with_side_effecting_condition.body": [], "operators.control_flow_test.WhileLoopTest.test_tensor_with_side_effecting_condition.set_state": [], "operators.control_flow_test.WhileLoopTest.test_tensor_with_side_effecting_condition.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_with_python_state": ["framework.constant_op.constant", "operators.control_flow.while_stmt", "testing.AutoGraphTestCase.assertEqual", "testing.AutoGraphTestCase.assertOpCreated"], "operators.control_flow_test.WhileLoopTest.test_tensor_with_python_state.MutableObject": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_with_python_state.body": [], "operators.control_flow_test.WhileLoopTest.test_tensor_with_python_state.set_state": [], "operators.control_flow_test.WhileLoopTest.test_tensor_with_python_state.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_with_python_state.<lambda2>": [], "operators.control_flow_test.WhileLoopTest.test_python": ["operators.control_flow.while_stmt", "testing.AutoGraphTestCase.assertNoOpsCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_python.body": [], "operators.control_flow_test.WhileLoopTest.test_python.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_python_with_tensor_state": ["testing.AutoGraphTestCase.assertOpsNotCreated", "framework.constant_op.constant", "operators.control_flow.while_stmt", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_python_with_tensor_state.body": [], "operators.control_flow_test.WhileLoopTest.test_python_with_tensor_state.<lambda1>": [], "testing.AutoGraphTestCase.assertOpsNotCreated": [], "operators.control_flow_test.WhileLoopTest.test_python_while_infinite": ["operators.control_flow.while_stmt", "testing.AutoGraphTestCase.skipTest", "mock.patch.object", "testing.AutoGraphTestCase.assertRaisesRegex"], "testing.AutoGraphTestCase.skipTest": [], "mock.patch.object": [], "operators.control_flow_test.WhileLoopTest.test_python_while_infinite.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_python_while_infinite.<lambda2>": [], "operators.control_flow_test.WhileLoopTest.test_python_for_infinite": ["testing.AutoGraphTestCase.assertRaisesRegex", "<builtin>.range", "testing.AutoGraphTestCase.skipTest", "mock.patch.object", "operators.control_flow.for_stmt"], "operators.control_flow_test.WhileLoopTest.test_python_for_infinite.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_python_while_large_unroll_warning": ["framework.ops.Graph", "testing.AutoGraphTestCase.skipTest", "mock.patch.object", "re.match", "operators.control_flow.for_stmt", "operators.control_flow.for_stmt", "testing.AutoGraphTestCase.assertTrue", "six.StringIO"], "framework.ops.Graph": [], "six.StringIO": [], "operators.control_flow_test.WhileLoopTest.test_python_while_large_unroll_warning.custom_iterator": ["<builtin>.range", "framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_python_while_large_unroll_warning.<lambda1>": [], "re.match": [], "testing.AutoGraphTestCase.assertTrue": [], "operators.control_flow_test.WhileLoopTest.test_python_for_large_unroll_warning": ["framework.ops.Graph", "testing.AutoGraphTestCase.skipTest", "mock.patch.object", "re.match", "operators.control_flow.while_stmt", "testing.AutoGraphTestCase.assertTrue", "six.StringIO"], "operators.control_flow_test.WhileLoopTest.test_python_for_large_unroll_warning.body": ["ops.gen_math_ops.add"], "ops.gen_math_ops.add": [], "operators.control_flow_test.WhileLoopTest.test_python_for_large_unroll_warning.<lambda1>": [], "operators.control_flow_test.WhileLoopTest._basic_loop": ["framework.constant_op.constant", "operators.control_flow.while_stmt"], "operators.control_flow_test.WhileLoopTest._basic_loop.body": [], "operators.control_flow_test.WhileLoopTest._basic_loop.set_state": [], "operators.control_flow_test.WhileLoopTest._basic_loop.<lambda1>": [], "operators.control_flow_test.WhileLoopTest._basic_loop.<lambda2>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_input": ["operators.variables.Undefined", "operators.variables.Undefined", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_input.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_input.<lambda2>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_none_output": ["testing.AutoGraphTestCase.assertRaisesRegex", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.WhileLoopTest.test_tensor_none_output.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_dtype_change": ["testing.AutoGraphTestCase.assertRaisesRegex", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.WhileLoopTest.test_tensor_dtype_change.<lambda1>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_shape_change": ["testing.AutoGraphTestCase.assertRaisesRegex", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.WhileLoopTest.test_tensor_shape_change.<lambda1>": ["numpy.array"], "operators.control_flow_test.WhileLoopTest._fixed_while_loop": ["framework.constant_op.constant", "operators.control_flow.while_stmt"], "operators.control_flow_test.WhileLoopTest._fixed_while_loop.test_": [], "operators.control_flow_test.WhileLoopTest._fixed_while_loop.body": [], "operators.control_flow_test.WhileLoopTest._fixed_while_loop.set_state": [], "operators.control_flow_test.WhileLoopTest._fixed_while_loop.<lambda1>": [], "operators.control_flow_test.WhileLoopTest._assertFixedLoopResult": ["operators.control_flow.while_stmt", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest._assertFixedLoopResult.test_fn": ["testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_tensor_legal_cond_scalar": ["testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.WhileLoopTest.test_tensor_legal_cond_scalar.<lambda1>": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_legal_cond_scalar.<lambda2>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_legal_cond_single_element_nd": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_legal_cond_single_element_nd.<lambda1>": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_legal_cond_single_element_nd.<lambda2>": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest._assertCondCheckFails": ["framework.constant_op.constant", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_cond_not_bool": ["testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_cond_not_bool.<lambda1>": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_cond_not_bool.<lambda2>": [], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_cond_not_single_element": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_cond_not_single_element.<lambda1>": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_cond_not_single_element.<lambda2>": ["framework.constant_op.constant"], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_cond_not_single_element_dynamic_shape": ["testing.AutoGraphTestCase.assertRaisesRuntime", "testing.AutoGraphTestCase.assertRaisesRuntime"], "operators.control_flow_test.WhileLoopTest.test_tensor_illegal_cond_not_single_element_dynamic_shape.<lambda1>": ["testing.AutoGraphTestCase.assertRaisesRuntime"], "testing.AutoGraphTestCase.assertRaisesRuntime": [], "operators.control_flow_test.IfStmtTest.test_tensor": ["framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.IfStmtTest.test_tensor.test_fn": ["operators.control_flow.if_stmt"], "operators.control_flow_test.IfStmtTest.test_tensor.test_fn.body": ["framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor.test_fn.orelse": ["framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor.test_fn.set_state": [], "operators.control_flow_test.IfStmtTest.test_tensor.test_fn.<lambda1>": [], "operators.control_flow.if_stmt": [], "operators.control_flow_test.IfStmtTest.test_tensor_no_outputs": ["framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertIsNone", "testing.AutoGraphTestCase.assertIsNone"], "operators.control_flow_test.IfStmtTest.test_tensor_no_outputs.test_fn": ["operators.control_flow.if_stmt"], "operators.control_flow_test.IfStmtTest.test_tensor_no_outputs.test_fn.body": ["framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor_no_outputs.test_fn.orelse": ["framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor_no_outputs.test_fn.set_state": [], "operators.control_flow_test.IfStmtTest.test_tensor_no_outputs.test_fn.<lambda1>": [], "testing.AutoGraphTestCase.assertIsNone": [], "operators.control_flow_test.IfStmtTest.test_tensor_multiple_returns": ["framework.constant_op.constant", "testing.AutoGraphTestCase.assertOpCreated", "testing.AutoGraphTestCase.assertEqual", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.IfStmtTest.test_tensor_multiple_returns.test_fn": ["operators.control_flow.if_stmt"], "operators.control_flow_test.IfStmtTest.test_tensor_multiple_returns.test_fn.body": ["framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor_multiple_returns.test_fn.orelse": ["framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor_multiple_returns.test_fn.set_state": [], "operators.control_flow_test.IfStmtTest.test_tensor_multiple_returns.test_fn.<lambda1>": [], "operators.control_flow_test.IfStmtTest.test_python": ["testing.AutoGraphTestCase.assertNoOpsCreated", "testing.AutoGraphTestCase.assertEqual", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.IfStmtTest.test_python.test_fn": ["operators.control_flow.if_stmt"], "operators.control_flow_test.IfStmtTest.test_python.test_fn.body": [], "operators.control_flow_test.IfStmtTest.test_python.test_fn.orelse": [], "operators.control_flow_test.IfStmtTest.test_python_multiple_returns": ["operators.control_flow.if_stmt", "testing.AutoGraphTestCase.assertNoOpsCreated", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.IfStmtTest.test_python_multiple_returns.test_fn": ["operators.control_flow.if_stmt"], "operators.control_flow_test.IfStmtTest.test_python_multiple_returns.test_fn.body": [], "operators.control_flow_test.IfStmtTest.test_python_multiple_returns.test_fn.orelse": [], "operators.control_flow_test.IfStmtTest._basic_cond": ["framework.constant_op.constant", "operators.control_flow.if_stmt"], "operators.control_flow_test.IfStmtTest._basic_cond.body": [], "operators.control_flow_test.IfStmtTest._basic_cond.orelse": [], "operators.control_flow_test.IfStmtTest._basic_cond.set_state": [], "operators.control_flow_test.IfStmtTest._basic_cond.<lambda1>": [], "operators.control_flow_test.IfStmtTest.test_tensor_none_output": ["operators.control_flow.if_stmt", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.IfStmtTest.test_tensor_none_output.<lambda1>": [], "operators.control_flow_test.IfStmtTest.test_tensor_none_output.<lambda2>": [], "operators.control_flow_test.IfStmtTest.test_tensor_none_output.<lambda3>": [], "operators.control_flow_test.IfStmtTest.test_tensor_none_output.<lambda4>": [], "operators.control_flow_test.IfStmtTest.test_tensor_undefined_output": ["testing.AutoGraphTestCase.assertRaisesRegex", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.IfStmtTest.test_tensor_undefined_output.<lambda1>": ["operators.variables.Undefined"], "operators.control_flow_test.IfStmtTest.test_tensor_undefined_output.<lambda2>": [], "operators.control_flow_test.IfStmtTest.test_tensor_undefined_output.<lambda3>": [], "operators.control_flow_test.IfStmtTest.test_tensor_undefined_output.<lambda4>": ["operators.variables.Undefined"], "operators.control_flow_test.IfStmtTest.test_tensor_dtype_change": ["operators.variables.Undefined", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.IfStmtTest.test_tensor_dtype_change.<lambda1>": [], "operators.control_flow_test.IfStmtTest.test_tensor_dtype_change.<lambda2>": [], "operators.control_flow_test.IfStmtTest._fixed_cond": ["operators.control_flow.if_stmt"], "operators.control_flow_test.IfStmtTest._fixed_cond.body": [], "operators.control_flow_test.IfStmtTest._fixed_cond.orelse": [], "operators.control_flow_test.IfStmtTest._fixed_cond.set_state": [], "operators.control_flow_test.IfStmtTest._fixed_cond.<lambda1>": [], "operators.control_flow_test.IfStmtTest._assertFixedCondResult": ["operators.control_flow.if_stmt", "testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.IfStmtTest._assertFixedCondResult.test_fn": ["testing.AutoGraphTestCase.assertEqual"], "operators.control_flow_test.IfStmtTest.test_tensor_legal_cond_scalar": ["framework.constant_op.constant", "framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor_legal_cond_single_element_nd": ["framework.constant_op.constant", "framework.constant_op.constant", "framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest._assertCondCheckFails": ["testing.AutoGraphTestCase.assertRaisesRegex", "testing.AutoGraphTestCase.assertRaisesRegex"], "operators.control_flow_test.IfStmtTest.test_tensor_illegal_cond_not_bool": ["framework.constant_op.constant", "framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor_illegal_cond_not_single_element": ["framework.constant_op.constant", "framework.constant_op.constant"], "operators.control_flow_test.IfStmtTest.test_tensor_illegal_cond_not_single_element_dynamic_shape": ["testing.AutoGraphTestCase.assertRaisesRuntime", "testing.AutoGraphTestCase.assertRaisesRuntime", "testing.AutoGraphTestCase.assertRaisesRuntime"], "platform.test.main": []}