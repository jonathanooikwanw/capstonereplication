{"integration_test.saved_model_test": ["distribute.strategy_combinations._get_multi_worker_mirrored_creator", "distribute.strategy_combinations._deferred_pool_runner", "distribute.test_util.main"], "distribute.strategy_combinations._get_multi_worker_mirrored_creator": [], "distribute.strategy_combinations._deferred_pool_runner": [], "integration_test.saved_model_test.SaveModelForMultipleWorkers.test_read_sync_on_read_variable": ["os.path.join", "distribute.test_util.main", "test.TestCase._get_tempdir_path_test", "test.TestCase.skipTest", "tensorflow.saved_model.save"], "test.TestCase.skipTest": [], "integration_test.saved_model_test.SaveModelForMultipleWorkers.test_read_sync_on_read_variable.Model.__init__": ["tensorflow.Variable"], "tensorflow.Variable": [], "tensorflow.function": [], "integration_test.saved_model_test.SaveModelForMultipleWorkers.test_read_sync_on_read_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveModelForMultipleWorkers.test_read_sync_on_read_variable.Model.__call__": [], "test.TestCase._get_tempdir_path_test": [], "os.path.join": [], "tensorflow.saved_model.save": [], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_read_sync_on_read_variable": ["test.TestCase.assertEqual", "test.TestCase.assertAllEqual", "test.TestCase.assertAllEqual", "tensorflow.saved_model.save", "test.TestCase.get_temp_dir", "test.TestCase.evaluate", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_read_sync_on_read_variable.Model.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_read_sync_on_read_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_read_sync_on_read_variable.Model.__call__": [], "test.TestCase.get_temp_dir": [], "test.TestCase.evaluate": [], "test.TestCase.assertAllEqual": [], "tensorflow.saved_model.load": [], "test.TestCase.assertEqual": [], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_read_mirrored_variable": ["test.TestCase.assertEqual", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.get_temp_dir", "tensorflow.saved_model.save", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_read_mirrored_variable.Model.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_read_mirrored_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_read_mirrored_variable.Model.__call__": [], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_update_sync_on_read_variable": ["test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.get_temp_dir", "tensorflow.saved_model.save", "tensorflow.saved_model.load", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_update_sync_on_read_variable.Model.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_update_sync_on_read_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_update_sync_on_read_variable.Model.update": [], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_update_mirrored_variable": ["test.TestCase.assertEqual", "test.TestCase.evaluate", "tensorflow.saved_model.save", "test.TestCase.get_temp_dir", "test.TestCase.get_temp_dir", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_update_mirrored_variable.Model.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_update_mirrored_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_update_mirrored_variable.Model.update": [], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_training_only_device": ["test.TestCase.assertEqual", "tensorflow.device", "tensorflow.Module.__init__", "test.TestCase.get_temp_dir", "tensorflow.saved_model.save", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_training_only_device.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_training_only_device.Model.__call__": ["tensorflow.identity"], "tensorflow.identity": [], "tensorflow.device": [], "tensorflow.Module.__init__": [], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_model_with_loaded_layer": ["tensorflow.identity", "test.TestCase.assertAllEqual", "test.TestCase.evaluate", "test.TestCase.get_temp_dir", "test.TestCase.assertRaisesRegex", "tensorflow.saved_model.save", "tensorflow.saved_model.load", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_model_with_loaded_layer.Layer.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_model_with_loaded_layer.Layer": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_model_with_loaded_layer.Layer.__call__": [], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_model_with_loaded_layer.Model.__init__": [], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_model_with_loaded_layer.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForServingTest.test_model_with_loaded_layer.Model.__call__": [], "test.TestCase.assertRaisesRegex": [], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_sync_on_read_variable": ["test.TestCase.assertEqual", "test.TestCase.assertAllEqual", "test.TestCase.assertAllEqual", "tensorflow.saved_model.save", "test.TestCase.get_temp_dir", "test.TestCase.evaluate", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_sync_on_read_variable.Model.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_sync_on_read_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_sync_on_read_variable.Model.__call__": [], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_sync_on_read_variable.<lambda1>": ["tensorflow.identity"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_sync_on_read_variable": ["test.TestCase.assertAllEqual", "test.TestCase.evaluate", "test.TestCase.get_temp_dir", "tensorflow.saved_model.save", "tensorflow.saved_model.save", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_sync_on_read_variable.Model.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_sync_on_read_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_sync_on_read_variable.Model.update": [], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_sync_on_read_variable.<lambda1>": ["tensorflow.identity"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_mirrored_variable": ["tensorflow.identity", "test.TestCase.assertAllEqual", "test.TestCase.evaluate", "test.TestCase.get_temp_dir", "tensorflow.saved_model.save", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_mirrored_variable.Model.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_mirrored_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_read_mirrored_variable.Model.__call__": [], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_mirrored_variable": ["test.TestCase.assertAllEqual", "test.TestCase.evaluate", "test.TestCase.evaluate", "test.TestCase.get_temp_dir", "tensorflow.saved_model.save", "tensorflow.saved_model.load"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_mirrored_variable.Model.__init__": ["tensorflow.Variable"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_mirrored_variable.Model": ["tensorflow.function"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_mirrored_variable.Model.update": [], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_update_mirrored_variable.<lambda1>": ["tensorflow.identity"], "integration_test.saved_model_test.SaveAndLoadForTrainingTest.test_model_with_loaded_v1_layer_broken": ["compat.v1.Session", "compat.v1.Graph", "test.TestCase.get_temp_dir", "v1.saved_model.Builder", "compat.v1.Variable", "compat.v1.tables_initializer", "test.TestCase.assertRaisesRegex", "tensorflow.saved_model.save", "tensorflow.saved_model.load"], "compat.v1.Graph": [], "compat.v1.Session": [], "compat.v1.Variable": [], "v1.saved_model.Builder": [], "compat.v1.tables_initializer": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.setUpClass": ["<builtin>.super", "tensorflow.train.ClusterSpec", "distribute.multi_worker_test_base.create_in_process_cluster", "distribute.cluster_resolver.SimpleClusterResolver"], "<builtin>.super": [], "distribute.multi_worker_test_base.create_in_process_cluster": [], "tensorflow.train.ClusterSpec": [], "distribute.cluster_resolver.SimpleClusterResolver": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.tearDown": ["<builtin>.super", "eager.context._reset_context"], "eager.context._reset_context": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.load_and_run_v1": ["compat.v1.Session", "v1.saved_model.load", "tensorflow.Graph"], "tensorflow.Graph": [], "v1.saved_model.load": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.Model.__init__": ["tensorflow.Variable", "ops.lookup_ops.MutableHashTable"], "ops.lookup_ops.MutableHashTable": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.Model.train": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.Model": ["tensorflow.function"], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.Model.__call__": ["tensorflow.math.add"], "tensorflow.math.add": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.test_basic": ["distribute.parameter_server_strategy_v2.ParameterServerStrategyV2", "tensorflow.identity", "test.TestCase.assertAllEqual", "test.TestCase.assertRegex", "test.TestCase.get_temp_dir", "test.TestCase.get_temp_dir", "test.TestCase.get_temp_dir", "tensorflow.saved_model.save", "tensorflow.saved_model.load", "tensorflow.saved_model.load"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2": [], "test.TestCase.assertRegex": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.test_load_to_same_strategy": ["distribute.parameter_server_strategy_v2.ParameterServerStrategyV2", "tensorflow.identity", "test.TestCase.assertAllEqual", "test.TestCase.assertTrue", "test.TestCase.get_temp_dir", "test.TestCase.get_temp_dir", "tensorflow.saved_model.save", "tensorflow.saved_model.load", "tensorflow.saved_model.load"], "test.TestCase.assertTrue": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.test_load_to_different_strategy": ["test.TestCase.assertIsInstance", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2", "eager.context._reset_context", "tensorflow.identity", "test.TestCase.assertAllEqual", "test.TestCase.get_temp_dir", "tensorflow.distribute.MirroredStrategy", "tensorflow.distribute.MirroredStrategy", "tensorflow.saved_model.save", "tensorflow.saved_model.load", "tensorflow.saved_model.load"], "tensorflow.distribute.MirroredStrategy": [], "test.TestCase.assertIsInstance": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.test_sharded_variable": ["test.TestCase.assertIsInstance", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2", "test.TestCase.assertAllEqual", "compat.v1.fixed_size_partitioner", "test.TestCase.get_temp_dir", "test.TestCase.get_temp_dir", "test.TestCase.get_temp_dir", "test.TestCase.assertRaisesRegex", "tensorflow.saved_model.save", "tensorflow.saved_model.load", "tensorflow.saved_model.load"], "compat.v1.fixed_size_partitioner": [], "integration_test.saved_model_test.PSStrategySaveAndLoadTest.test_load_with_partitioner_raises_error": ["distribute.parameter_server_strategy_v2.ParameterServerStrategyV2", "compat.v1.fixed_size_partitioner", "test.TestCase.get_temp_dir", "test.TestCase.assertRaisesRegex", "tensorflow.saved_model.save", "tensorflow.saved_model.load", "tensorflow.saved_model.load"], "distribute.test_util.main": []}