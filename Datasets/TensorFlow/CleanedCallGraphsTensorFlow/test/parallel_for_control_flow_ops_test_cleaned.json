{"parallel_for.control_flow_ops_test": ["platform.test.main"], "parallel_for.control_flow_ops_test.PForTest.test_op_conversion_fallback_to_while_loop": ["test_util.PForTestCase._test_loop_fn", "test_util.PForTestCase.assertRaisesRegex", "ops.random_ops.random_uniform"], "ops.random_ops.random_uniform": [], "parallel_for.control_flow_ops_test.PForTest.test_op_conversion_fallback_to_while_loop.loop_fn": ["ops.nn.top_k", "ops.array_ops.gather"], "ops.array_ops.gather": [], "ops.nn.top_k": [], "test_util.PForTestCase.assertRaisesRegex": [], "test_util.PForTestCase._test_loop_fn": [], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations": ["test_util.PForTestCase._test_loop_fn", "framework.constant_op.constant", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations.loop_fn": ["ops.array_ops.gather"], "framework.constant_op.constant": [], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations_preserves_static_shape": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.assertAllEqual"], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations_preserves_static_shape.<lambda1>": ["ops.random_ops.random_uniform"], "parallel_for.control_flow_ops.pfor": [], "test_util.PForTestCase.assertAllEqual": [], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations_zero": ["test_util.PForTestCase.assertRaisesRegex", "parallel_for.control_flow_ops.pfor", "parallel_for.control_flow_ops.for_loop"], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations_zero.<lambda1>": [], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations_zero.<lambda2>": [], "parallel_for.control_flow_ops.for_loop": [], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations_one": ["test_util.PForTestCase.assertRaisesRegex", "parallel_for.control_flow_ops.pfor"], "parallel_for.control_flow_ops_test.PForTest.test_parallel_iterations_one.<lambda1>": [], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map": ["ops.array_ops.ones", "parallel_for.control_flow_ops.vectorized_map", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map.compute": ["ops.math_ops.reduce_mean"], "ops.math_ops.reduce_mean": [], "ops.array_ops.ones": [], "parallel_for.control_flow_ops.vectorized_map": [], "test_util.PForTestCase.run_and_assert_equal": [], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map_with_dynamic_shape": ["ops.array_ops.ones", "ops.array_ops.placeholder_with_default", "test_util.PForTestCase.run_and_assert_equal", "parallel_for.control_flow_ops.vectorized_map"], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map_with_dynamic_shape.compute": ["ops.math_ops.reduce_mean"], "ops.array_ops.placeholder_with_default": [], "parallel_for.control_flow_ops_test.PForTest.test_where_shape": ["ops.math_ops.reduce_mean", "test_util.PForTestCase.assertAllEqual"], "parallel_for.control_flow_ops_test.PForTest.test_where_shape.f": ["parallel_for.control_flow_ops.vectorized_map", "framework.constant_op.constant"], "parallel_for.control_flow_ops_test.PForTest.test_where_shape.f.<lambda1>": ["ops.array_ops.where"], "ops.array_ops.where": [], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map_broadcasts_unit_dimensions": ["parallel_for.control_flow_ops.vectorized_map", "test_util.PForTestCase.assertAllEqual", "test_util.PForTestCase.evaluate"], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map_broadcasts_unit_dimensions.<lambda1>": ["ops.array_ops.placeholder_with_default"], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map_broadcasts_unit_dimensions.<lambda2>": [], "test_util.PForTestCase.evaluate": [], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map_example_1": ["ops.array_ops.ones", "parallel_for.control_flow_ops.vectorized_map", "test_util.PForTestCase.assertAllEqual"], "parallel_for.control_flow_ops_test.PForTest.test_vectorized_map_example_1.outer_product": ["ops.math_ops.tensordot"], "ops.math_ops.tensordot": [], "parallel_for.control_flow_ops_test.PForTest.test_disable_tf_function": ["parallel_for.control_flow_ops.vectorized_map", "eager.def_function.run_functions_eagerly", "ops.math_ops.range", "test_util.PForTestCase.assertAllEqual", "eager.def_function.functions_run_eagerly", "test_util.PForTestCase.assertTrue"], "eager.def_function.run_functions_eagerly": [], "eager.def_function.functions_run_eagerly": [], "test_util.PForTestCase.assertTrue": [], "parallel_for.control_flow_ops_test.PForTest.test_disable_tf_function.<lambda1>": [], "ops.math_ops.range": [], "parallel_for.control_flow_ops_test.IndexedSlicesTest.test_indexed_slices": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.IndexedSlicesTest.test_indexed_slices.loop_fn": ["framework.indexed_slices.IndexedSlices", "ops.array_ops.reshape"], "ops.array_ops.reshape": [], "framework.indexed_slices.IndexedSlices": [], "parallel_for.control_flow_ops_test.IndexedSlicesTest.test_indexed_slices_components": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.IndexedSlicesTest.test_indexed_slices_components.loop_fn": ["framework.indexed_slices.IndexedSlices", "ops.array_ops.reshape"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.evaluate", "ops.random_ops.random_uniform", "ops.random_ops.random_uniform", "test_util.PForTestCase.assertAllClose"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce.reduce_fn": ["ops.math_ops.reduce_mean"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce.loop_fn": ["ops.array_ops.gather"], "test_util.PForTestCase.assertAllClose": [], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_concat": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.evaluate", "ops.random_ops.random_uniform", "test_util.PForTestCase.assertAllClose", "ops.math_ops.reduce_mean"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_concat.loop_fn": ["ops.array_ops.gather", "ops.math_ops.reduce_mean"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_mean": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.evaluate", "ops.random_ops.random_uniform", "test_util.PForTestCase.assertAllClose", "ops.math_ops.reduce_mean"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_mean.loop_fn": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_sum": ["ops.math_ops.reduce_sum", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.evaluate", "ops.random_ops.random_uniform", "test_util.PForTestCase.assertAllClose"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_sum.loop_fn": ["ops.array_ops.gather"], "ops.math_ops.reduce_sum": [], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_class": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.assertAllClose", "test_util.PForTestCase.evaluate", "ops.random_ops.random_uniform", "ops.random_ops.random_uniform", "ops.math_ops.reduce_mean"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_class.LoopFn.__init__": [], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_class.LoopFn.__call__": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_functools_partial": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.evaluate", "functools.partial", "ops.random_ops.random_uniform", "test_util.PForTestCase.assertAllClose", "ops.math_ops.reduce_mean"], "parallel_for.control_flow_ops_test.ReductionTest.test_reduce_functools_partial.fn": ["ops.array_ops.gather"], "functools.partial": [], "parallel_for.control_flow_ops_test.ReductionTest.test_parallel_iterations": ["test_util.PForTestCase.assertRaisesRegex", "parallel_for.control_flow_ops.pfor", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.ReductionTest.test_parallel_iterations.loop_fn": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.ReductionTest.test_var_loop_len": ["eager.context.executing_eagerly", "test_util.PForTestCase.cached_session", "test_util.PForTestCase.skipTest", "parallel_for.control_flow_ops.pfor", "ops.array_ops.placeholder", "ops.random_ops.random_uniform"], "eager.context.executing_eagerly": [], "test_util.PForTestCase.skipTest": [], "parallel_for.control_flow_ops_test.ReductionTest.test_var_loop_len.loop_fn": ["ops.array_ops.gather"], "ops.array_ops.placeholder": [], "test_util.PForTestCase.cached_session": [], "parallel_for.control_flow_ops_test.BitwiseTest.test_unary_cwise": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.BitwiseTest.test_unary_cwise.loop_fn": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.BitwiseTest.test_binary_cwise": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.BitwiseTest.test_binary_cwise.loop_fn": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.ImageTest.test_adjust_contrast": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.ImageTest.test_adjust_contrast.loop_fn": ["ops.image_ops.adjust_contrast", "ops.array_ops.gather"], "ops.image_ops.adjust_contrast": [], "parallel_for.control_flow_ops_test.ImageTest.test_adjust_hue": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.ImageTest.test_adjust_hue.loop_fn": ["ops.image_ops.adjust_hue", "ops.array_ops.gather"], "ops.image_ops.adjust_hue": [], "parallel_for.control_flow_ops_test.ImageTest.test_adjust_saturation": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.ImageTest.test_adjust_saturation.loop_fn": ["ops.image_ops.adjust_saturation", "ops.array_ops.gather"], "ops.image_ops.adjust_saturation": [], "parallel_for.control_flow_ops_test.NNTest.test_conv2d": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_conv2d.loop_fn": ["ops.nn.conv2d", "ops.array_ops.gather"], "ops.nn.conv2d": [], "parallel_for.control_flow_ops_test.NNTest.test_conv2d_backprop_input": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_conv2d_backprop_input.loop_fn": ["ops.nn.conv2d_backprop_input", "ops.array_ops.gather"], "ops.nn.conv2d_backprop_input": [], "parallel_for.control_flow_ops_test.NNTest.test_conv2d_backprop_filter": ["test_util.PForTestCase._test_loop_fn", "ops.array_ops.gather", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_conv2d_backprop_filter.loop_fn": ["ops.nn.conv2d_backprop_filter", "ops.array_ops.gather"], "ops.nn.conv2d_backprop_filter": [], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native.loop_fn": ["ops.nn.depthwise_conv2d_native", "ops.array_ops.gather"], "ops.nn.depthwise_conv2d_native": [], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_backprop_input": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_backprop_input.loop_fn": ["ops.nn.depthwise_conv2d_native_backprop_input", "ops.array_ops.gather"], "ops.nn.depthwise_conv2d_native_backprop_input": [], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_backprop_filter": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_backprop_filter.loop_fn": ["ops.array_ops.gather", "ops.nn.depthwise_conv2d_native_backprop_filter"], "ops.nn.depthwise_conv2d_native_backprop_filter": [], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_nchw": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "framework.test_util.is_gpu_available": [], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_nchw.loop_fn": ["ops.nn.depthwise_conv2d_native", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_backprop_input_nchw": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_backprop_input_nchw.loop_fn": ["ops.nn.depthwise_conv2d_native_backprop_input", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_backprop_filter_nchw": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_depthwise_conv2d_native_backprop_filter_nchw.loop_fn": ["ops.array_ops.gather", "ops.nn.depthwise_conv2d_native_backprop_filter"], "parallel_for.control_flow_ops_test.NNTest.test_roll": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_roll.loop_fn": ["ops.array_ops.gather", "ops.manip_ops.roll"], "ops.manip_ops.roll": [], "parallel_for.control_flow_ops_test.NNTest.test_ensure_shape": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_ensure_shape.loop_fn": ["ops.array_ops.ensure_shape", "ops.array_ops.gather"], "ops.array_ops.ensure_shape": [], "parallel_for.control_flow_ops_test.NNTest.test_loop_variant_roll_shift": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_loop_variant_roll_shift.loop_fn": ["ops.array_ops.gather", "ops.manip_ops.roll"], "parallel_for.control_flow_ops_test.NNTest.test_loop_variant_roll_scalar_shift": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_loop_variant_roll_scalar_shift.loop_fn": ["ops.array_ops.gather", "ops.manip_ops.roll"], "parallel_for.control_flow_ops_test.NNTest.test_avg_pool": ["test_util.PForTestCase._test_loop_fn", "eager.backprop.GradientTape", "ops.random_ops.random_uniform"], "eager.backprop.GradientTape": [], "parallel_for.control_flow_ops_test.NNTest.test_avg_pool.loop_fn": ["ops.nn.avg_pool", "ops.nn.l2_loss", "ops.array_ops.gather"], "ops.nn.avg_pool": [], "ops.nn.l2_loss": [], "parallel_for.control_flow_ops_test.NNTest.test_avg_pool3d": ["test_util.PForTestCase._test_loop_fn", "eager.backprop.GradientTape", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_avg_pool3d.loop_fn": ["ops.nn.l2_loss", "ops.nn.avg_pool3d", "ops.array_ops.gather"], "ops.nn.avg_pool3d": [], "parallel_for.control_flow_ops_test.NNTest.test_max_pool": ["test_util.PForTestCase._test_loop_fn", "eager.backprop.GradientTape", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_max_pool.loop_fn": ["ops.nn.l2_loss", "ops.array_ops.ones_like", "ops.array_ops.gather", "ops.nn.max_pool"], "ops.nn.max_pool": [], "ops.array_ops.ones_like": [], "parallel_for.control_flow_ops_test.NNTest.test_max_pool_v2": ["test_util.PForTestCase._test_loop_fn", "eager.backprop.GradientTape", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_max_pool_v2.loop_fn": ["ops.gen_nn_ops.max_pool_v2", "ops.nn.l2_loss", "ops.array_ops.gather", "ops.array_ops.ones_like"], "ops.gen_nn_ops.max_pool_v2": [], "parallel_for.control_flow_ops_test.NNTest.test_max_pool3d": ["test_util.PForTestCase._test_loop_fn", "eager.backprop.GradientTape", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_max_pool3d.loop_fn": ["ops.nn.l2_loss", "ops.array_ops.gather", "ops.nn.max_pool3d", "ops.array_ops.ones_like"], "ops.nn.max_pool3d": [], "parallel_for.control_flow_ops_test.NNTest.test_fused_batch_norm": ["test_util.PForTestCase._test_loop_fn", "platform.test.is_gpu_available", "eager.backprop.GradientTape", "ops.random_ops.random_uniform"], "platform.test.is_gpu_available": [], "parallel_for.control_flow_ops_test.NNTest.test_fused_batch_norm.loop_fn": ["<builtin>.list", "ops.nn.fused_batch_norm", "ops.array_ops.gather", "ops.nn.l2_loss", "framework.constant_op.constant"], "ops.nn.fused_batch_norm": [], "<builtin>.list": [], "parallel_for.control_flow_ops_test.NNTest.test_log_softmax": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_log_softmax.loop_fn": ["ops.nn.log_softmax", "ops.array_ops.gather"], "ops.nn.log_softmax": [], "parallel_for.control_flow_ops_test.NNTest.test_softmax": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_softmax.loop_fn": ["ops.array_ops.gather", "ops.nn.softmax"], "ops.nn.softmax": [], "parallel_for.control_flow_ops_test.NNTest.test_softmax_cross_entropy_with_logits": ["ops.math_ops.reduce_sum", "test_util.PForTestCase._test_loop_fn", "eager.backprop.GradientTape", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_softmax_cross_entropy_with_logits.loop_fn": ["ops.math_ops.reduce_sum", "ops.array_ops.gather", "ops.nn.softmax_cross_entropy_with_logits"], "ops.nn.softmax_cross_entropy_with_logits": [], "parallel_for.control_flow_ops_test.NNTest.test_sparse_softmax_cross_entropy_with_logits": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NNTest.test_sparse_softmax_cross_entropy_with_logits.loop_fn": ["ops.nn.sparse_softmax_cross_entropy_with_logits", "ops.array_ops.gather"], "ops.nn.sparse_softmax_cross_entropy_with_logits": [], "parallel_for.control_flow_ops_test.RandomTest.run_and_assert_equal": ["<builtin>.range", "<builtin>.len", "test_util.PForTestCase._run_targets", "test_util.PForTestCase.assertAllEqual"], "test_util.PForTestCase._run_targets": [], "<builtin>.len": [], "<builtin>.range": [], "parallel_for.control_flow_ops_test.RandomTest.test_random_uniform": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.RandomTest.test_random_uniform.loop_fn": ["ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.RandomTest.test_random_uniform_int": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.RandomTest.test_random_uniform_int.loop_fn": ["ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.RandomTest.test_random_standard_normal": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.RandomTest.test_random_standard_normal.loop_fn": ["ops.random_ops.random_normal"], "ops.random_ops.random_normal": [], "parallel_for.control_flow_ops_test.RandomTest.test_truncated_normal": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.RandomTest.test_truncated_normal.loop_fn": ["ops.random_ops.truncated_normal"], "ops.random_ops.truncated_normal": [], "parallel_for.control_flow_ops_test.RandomTest.test_random_gamma_invariant_alpha": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.RandomTest.test_random_gamma_invariant_alpha.loop_fn": ["ops.random_ops.random_gamma"], "ops.random_ops.random_gamma": [], "parallel_for.control_flow_ops_test.RandomTest.test_random_gamma_varying_alpha": ["ops.math_ops.exp", "test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_normal"], "ops.math_ops.exp": [], "parallel_for.control_flow_ops_test.RandomTest.test_random_gamma_varying_alpha.loop_fn": ["ops.array_ops.gather", "ops.random_ops.random_gamma"], "parallel_for.control_flow_ops_test.RandomTest.test_random_poisson_v2_invariant_rate": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.RandomTest.test_random_poisson_v2_invariant_rate.loop_fn": ["ops.random_ops.random_poisson"], "ops.random_ops.random_poisson": [], "parallel_for.control_flow_ops_test.RandomTest.test_random_poisson_v2_varying_rate": ["ops.math_ops.exp", "test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_normal"], "parallel_for.control_flow_ops_test.RandomTest.test_random_poisson_v2_varying_rate.loop_fn": ["ops.array_ops.gather", "ops.random_ops.random_poisson"], "parallel_for.control_flow_ops_test.RandomTest.test_random_multinomial_invariant_logits": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.RandomTest.test_random_multinomial_invariant_logits.loop_fn": ["ops.random_ops.categorical"], "ops.random_ops.categorical": [], "parallel_for.control_flow_ops_test.RandomTest.test_random_multinomial_varying_logits": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_normal"], "parallel_for.control_flow_ops_test.RandomTest.test_random_multinomial_varying_logits.loop_fn": ["ops.array_ops.gather", "ops.random_ops.categorical"], "parallel_for.control_flow_ops_test.StatelessRandomTest.run_and_assert_equal": ["<builtin>.range", "<builtin>.len", "test_util.PForTestCase._run_targets", "test_util.PForTestCase.assertAllEqual"], "parallel_for.control_flow_ops_test.StatelessRandomTest.test_multinomial": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.StatelessRandomTest.test_multinomial.loop_fn": ["ops.array_ops.gather", "ops.stateless_random_ops.stateless_categorical"], "ops.stateless_random_ops.stateless_categorical": [], "parallel_for.control_flow_ops_test.LoggingTest.test_print": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.LoggingTest.test_print.loop_fn": ["ops.logging_ops.Print", "ops.array_ops.gather", "ops.array_ops.shape"], "ops.array_ops.shape": [], "ops.logging_ops.Print": [], "parallel_for.control_flow_ops_test.LoggingTest.test_print_v2": ["test_util.PForTestCase._test_loop_fn", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.captureWritesToStream", "test_util.PForTestCase.evaluate", "framework.constant_op.constant", "test_util.PForTestCase.assertIn"], "parallel_for.control_flow_ops_test.LoggingTest.test_print_v2.loop_fn": ["framework.ops.control_dependencies", "ops.array_ops.identity", "ops.logging_ops.print_v2", "ops.array_ops.gather", "ops.array_ops.shape"], "ops.logging_ops.print_v2": [], "framework.ops.control_dependencies": [], "ops.array_ops.identity": [], "test_util.PForTestCase.captureWritesToStream": [], "test_util.PForTestCase.assertIn": [], "parallel_for.control_flow_ops_test.LoggingTest.test_assert": ["parallel_for.control_flow_ops.pfor", "client.session.Session"], "parallel_for.control_flow_ops_test.LoggingTest.test_assert.loop_fn": ["ops.control_flow_ops.Assert"], "ops.control_flow_ops.Assert": [], "client.session.Session": [], "parallel_for.control_flow_ops_test.LoggingTest.test_assert.<lambda1>": ["ops.control_flow_ops.Assert"], "parallel_for.control_flow_ops_test.TensorArrayTest.setUp": ["<builtin>.super", "ops.control_flow_v2_toggles.disable_control_flow_v2", "ops.control_flow_v2_toggles.control_flow_v2_enabled"], "ops.control_flow_v2_toggles.control_flow_v2_enabled": [], "ops.control_flow_v2_toggles.disable_control_flow_v2": [], "<builtin>.super": [], "parallel_for.control_flow_ops_test.TensorArrayTest.tearDown": ["<builtin>.super", "ops.control_flow_v2_toggles.enable_control_flow_v2"], "ops.control_flow_v2_toggles.enable_control_flow_v2": [], "framework.test_util.run_v1_only": [], "parallel_for.control_flow_ops_test.TensorArrayTest": ["framework.test_util.run_v1_only"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_outside_and_read": ["test_util.PForTestCase._test_loop_fn", "ops.tensor_array_ops.TensorArray"], "ops.tensor_array_ops.TensorArray": [], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_outside_and_read.loop_fn": [], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_outside_and_gather": ["test_util.PForTestCase._test_loop_fn", "ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_outside_and_gather.loop_fn": [], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_outside_and_write_and_scatter": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase._run_targets", "parallel_for.control_flow_ops.for_loop", "ops.tensor_array_ops.TensorArray", "test_util.PForTestCase.assertAllClose"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_outside_and_write_and_scatter.loop_fn": [], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_inside_and_write": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_inside_and_write.loop_fn": ["ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_inside_and_scatter": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_inside_and_scatter.loop_fn": ["ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_inside_and_read": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_inside_and_read.loop_fn": ["ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_inside_and_gather": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_create_inside_and_gather.loop_fn": ["ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.TensorArrayTest.test_grad": ["ops.math_ops.square", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.assertAllClose", "ops.random_ops.random_uniform", "client.session.Session", "ops.tensor_array_ops.TensorArray"], "ops.math_ops.square": [], "parallel_for.control_flow_ops_test.TensorArrayTest.test_grad.loop_fn": ["ops.gradients.gradients", "ops.array_ops.gather"], "ops.gradients.gradients": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_write": ["test_util.PForTestCase._test_loop_fn", "ops.list_ops.tensor_list_reserve"], "ops.list_ops.tensor_list_reserve": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_write.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_set_item"], "ops.list_ops.tensor_list_set_item": [], "ops.list_ops.tensor_list_stack": [], "parallel_for.control_flow_ops_test.TensorListTest._make_graph_def": ["google.protobuf.text_format.Parse", "framework.graph_pb2.GraphDef"], "framework.graph_pb2.GraphDef": [], "google.protobuf.text_format.Parse": [], "parallel_for.control_flow_ops_test.TensorListTest.test_no_fallback_with_internal_stacking": ["test_util.PForTestCase._test_loop_fn", "ops.list_ops.tensor_list_reserve", "test_util.PForTestCase.assertRaisesRegex"], "parallel_for.control_flow_ops_test.TensorListTest.test_no_fallback_with_internal_stacking.opaque_list_fetch": ["ops.array_ops.identity", "ops.list_ops.tensor_list_get_item"], "ops.list_ops.tensor_list_get_item": [], "parallel_for.control_flow_ops_test.TensorListTest.test_no_fallback_with_internal_stacking.loop_fn": ["ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_set_item", "framework.importer.import_graph_def", "framework.importer.import_graph_def"], "framework.importer.import_graph_def": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_write": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_write.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_set_item"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_read": ["test_util.PForTestCase._test_loop_fn", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_set_item"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_read.loop_fn": ["ops.list_ops.tensor_list_length", "ops.list_ops.tensor_list_get_item", "ops.list_ops.tensor_list_element_shape"], "ops.list_ops.tensor_list_length": [], "ops.list_ops.tensor_list_element_shape": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_read": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_read.loop_fn": ["ops.list_ops.tensor_list_element_shape", "ops.list_ops.tensor_list_set_item", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_get_item", "ops.list_ops.tensor_list_length"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_push_back": ["test_util.PForTestCase._test_loop_fn", "ops.list_ops.tensor_list_reserve"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_push_back.loop_fn": ["ops.list_ops.tensor_list_push_back", "ops.list_ops.tensor_list_stack"], "ops.list_ops.tensor_list_push_back": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_push_back": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_push_back.loop_fn": ["ops.list_ops.tensor_list_push_back", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_stack"], "parallel_for.control_flow_ops_test.TensorListTest.test_pop_back_no_shape": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_pop_back_no_shape.loop_fn": ["ops.list_ops.tensor_list_push_back", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_pop_back"], "ops.list_ops.tensor_list_pop_back": [], "parallel_for.control_flow_ops_test.TensorListTest.test_pop_back_no_shape_capture": ["ops.list_ops.tensor_list_push_back", "test_util.PForTestCase._test_loop_fn", "ops.list_ops.tensor_list_reserve"], "parallel_for.control_flow_ops_test.TensorListTest.test_pop_back_no_shape_capture.loop_fn": ["ops.list_ops.tensor_list_push_back", "ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_pop_back"], "parallel_for.control_flow_ops_test.TensorListTest.test_pop_back_with_shape": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_pop_back_with_shape.loop_fn": ["ops.list_ops.tensor_list_stack", "test_util.PForTestCase.assertEqual", "ops.list_ops.tensor_list_reserve", "eager.backprop.GradientTape", "ops.list_ops.tensor_list_push_back", "ops.math_ops.cast"], "ops.math_ops.cast": [], "test_util.PForTestCase.assertEqual": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_scatter": ["test_util.PForTestCase._test_loop_fn", "ops.list_ops.tensor_list_reserve"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_scatter.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_scatter"], "ops.list_ops.tensor_list_scatter": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_scatter": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_scatter.loop_fn": ["ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_scatter"], "parallel_for.control_flow_ops_test.TensorListTest.test_loop_variant_scatter_indices": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_loop_variant_scatter_indices.loop_fn": ["ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_scatter"], "parallel_for.control_flow_ops_test.TensorListTest.test_loop_variant_scatter_duplicate_indices": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_loop_variant_scatter_duplicate_indices.loop_fn": ["ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_scatter"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_gather": ["test_util.PForTestCase._test_loop_fn", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_scatter"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_gather.loop_fn": ["ops.list_ops.tensor_list_gather"], "ops.list_ops.tensor_list_gather": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_gather": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_gather.loop_fn": ["ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_gather", "ops.list_ops.tensor_list_scatter"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_concat": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.assertAllClose"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_inside_and_concat.loop_fn": ["ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_scatter", "ops.gen_list_ops.tensor_list_concat_v2"], "ops.gen_list_ops.tensor_list_concat_v2": [], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_concat": ["ops.list_ops.tensor_list_reserve", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.assertAllClose"], "parallel_for.control_flow_ops_test.TensorListTest.test_create_outside_and_concat.loop_fn": ["ops.list_ops.tensor_list_scatter", "ops.gen_list_ops.tensor_list_concat_v2"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_from_tensor": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_from_tensor.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.array_ops.gather", "ops.list_ops.tensor_list_from_tensor"], "ops.list_ops.tensor_list_from_tensor": [], "parallel_for.control_flow_ops_test.TensorListTest": ["framework.test_util.enable_control_flow_v2"], "framework.test_util.enable_control_flow_v2": [], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_reserve_while_loop": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_reserve_while_loop.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_reserve", "ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_reserve_while_loop.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_reserve_while_loop.loop_fn.<lambda2>": ["ops.list_ops.tensor_list_set_item"], "ops.control_flow_ops.while_loop": [], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.control_flow_ops.while_loop", "ops.list_ops.tensor_list_from_tensor"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list.loop_fn.<lambda2>": ["ops.list_ops.tensor_list_set_item"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list_unknown_shape": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list_unknown_shape.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_reserve", "ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list_unknown_shape.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list_unknown_shape.loop_fn.<lambda2>": ["ops.list_ops.tensor_list_set_item"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list_unknown_shape.loop_fn.<lambda3>": [], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_stacked_list_unknown_shape.loop_fn.<lambda4>": ["ops.list_ops.tensor_list_set_item"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_unstacked_list": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_unstacked_list.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.control_flow_ops.while_loop", "ops.list_ops.tensor_list_from_tensor"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_unstacked_list.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_while_loop_stacked_cond_unstacked_list.loop_fn.<lambda2>": ["ops.list_ops.tensor_list_set_item"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_addn_already_stacked": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_addn_already_stacked.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_set_item", "ops.math_ops.add_n"], "ops.math_ops.add_n": [], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_addn_stacking_required": ["test_util.PForTestCase._test_loop_fn", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_set_item"], "parallel_for.control_flow_ops_test.TensorListTest.test_tensor_list_addn_stacking_required.loop_fn": ["ops.list_ops.tensor_list_stack", "ops.list_ops.tensor_list_reserve", "ops.list_ops.tensor_list_set_item", "ops.math_ops.add_n"], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_no_shape": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "eager.def_function.function", "test_util.PForTestCase._test_loop_fn"], "eager.def_function.function": [], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_no_shape.shapeless_func": ["ops.array_ops.tensor_scatter_nd_update"], "ops.array_ops.tensor_scatter_nd_update": [], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_no_shape.loop_fn": ["ops.array_ops.tensor_scatter_nd_update"], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_singles": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_singles.loop_fn": ["ops.array_ops.tensor_scatter_nd_update"], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_slices": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_slices.loop_fn": ["ops.array_ops.tensor_scatter_nd_update", "ops.array_ops.zeros"], "ops.array_ops.zeros": [], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_multi_dim_index": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_multi_dim_index.loop_fn": ["ops.array_ops.tensor_scatter_nd_update", "ops.array_ops.zeros"], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_folded_indices": ["test_util.PForTestCase.skipTest", "framework.test_util.is_gpu_available", "test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.TensorTest.test_loop_variant_scatter_update_folded_indices.loop_fn": ["ops.array_ops.tensor_scatter_nd_update", "ops.array_ops.zeros"], "parallel_for.control_flow_ops_test.OptionalTest.test_optional_from_value": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.OptionalTest.test_optional_from_value.loop_fn": ["ops.gen_dataset_ops.optional_from_value", "ops.gen_dataset_ops.optional_none", "ops.gen_dataset_ops.optional_get_value", "framework.constant_op.constant"], "ops.gen_dataset_ops.optional_from_value": [], "ops.gen_dataset_ops.optional_none": [], "ops.gen_dataset_ops.optional_get_value": [], "parallel_for.control_flow_ops_test.StackTest": ["framework.test_util.run_v1_only"], "parallel_for.control_flow_ops_test.StackTest.test_stack_inside_loop_invariant": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.StackTest.test_stack_inside_loop_invariant.loop_fn": ["framework.ops.control_dependencies", "ops.data_flow_ops.stack_pop_v2", "ops.data_flow_ops.stack_v2", "ops.data_flow_ops.stack_push_v2"], "ops.data_flow_ops.stack_v2": [], "ops.data_flow_ops.stack_push_v2": [], "ops.data_flow_ops.stack_pop_v2": [], "parallel_for.control_flow_ops_test.StackTest.test_stack_inside_push_loop_dependent": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.StackTest.test_stack_inside_push_loop_dependent.loop_fn": ["framework.ops.control_dependencies", "ops.data_flow_ops.stack_pop_v2", "ops.data_flow_ops.stack_v2", "ops.data_flow_ops.stack_push_v2"], "parallel_for.control_flow_ops_test.StackTest.test_stack_outside_pop": ["framework.ops.control_dependencies", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase._run_targets", "test_util.PForTestCase.assertAllEqual", "ops.data_flow_ops.stack_v2", "ops.data_flow_ops.stack_pop_v2", "ops.data_flow_ops.stack_push_v2"], "parallel_for.control_flow_ops_test.StackTest.test_stack_outside_pop.loop_fn": ["framework.ops.control_dependencies", "ops.data_flow_ops.stack_pop_v2"], "parallel_for.control_flow_ops_test.StackTest.test_stack_outside_push": ["test_util.PForTestCase.assertRaisesRegex", "parallel_for.control_flow_ops.pfor", "ops.data_flow_ops.stack_v2"], "parallel_for.control_flow_ops_test.StackTest.test_stack_outside_push.loop_fn": ["ops.data_flow_ops.stack_push_v2"], "parallel_for.control_flow_ops_test.WhileV1Test.setUp": ["<builtin>.super", "ops.control_flow_v2_toggles.disable_control_flow_v2", "ops.control_flow_v2_toggles.control_flow_v2_enabled"], "parallel_for.control_flow_ops_test.WhileV1Test.tearDown": ["<builtin>.super", "ops.control_flow_v2_toggles.enable_control_flow_v2"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_outside_loop": ["test_util.PForTestCase._test_loop_fn", "ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_outside_loop.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_outside_loop.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_outside_loop.loop_fn": [], "parallel_for.control_flow_ops_test.WhileV1Test": ["framework.test_util.run_v1_only"], "parallel_for.control_flow_ops_test.WhileV1Test.test_invariant_while": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV1Test.test_invariant_while.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV1Test.test_invariant_while.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_invariant_while.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_invariant_while_with_control_dependency": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV1Test.test_invariant_while_with_control_dependency.loop_fn": ["framework.ops.control_dependencies", "ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV1Test.test_invariant_while_with_control_dependency.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_invariant_while_with_control_dependency.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_with_stateful_ops": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_with_stateful_ops.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_with_stateful_ops.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_with_stateful_ops.loop_fn.<lambda2>": ["ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_unstacked_condition": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_unstacked_condition.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_unstacked_condition.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_unstacked_condition.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while": ["test_util.PForTestCase._test_loop_fn", "framework.constant_op.constant", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while.loop_fn": ["ops.control_flow_ops.while_loop", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while.loop_fn.<lambda2>": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_jacobian": ["parallel_for.control_flow_ops.pfor", "ops.control_flow_ops.while_loop", "ops.math_ops.matmul", "ops.random_ops.random_uniform", "<builtin>.range", "ops.array_ops.transpose", "client.session.Session", "test_util.PForTestCase.assertAllClose"], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_jacobian.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_jacobian.<lambda2>": ["ops.math_ops.matmul"], "ops.math_ops.matmul": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_while_jacobian.loop_fn": ["ops.gradients.gradients", "ops.array_ops.gather", "ops.array_ops.reshape"], "ops.array_ops.transpose": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_tensor_array_as_loop_variable": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV1Test.test_tensor_array_as_loop_variable.loop_fn": ["ops.control_flow_ops.while_loop", "ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.WhileV1Test.test_tensor_array_as_loop_variable.loop_fn.body": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_tensor_array_as_loop_variable.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_read_tensor_array_partitioned_indices": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV1Test.test_read_tensor_array_partitioned_indices.loop_fn": ["<builtin>.range", "<builtin>.list", "ops.control_flow_ops.while_loop", "ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.WhileV1Test.test_read_tensor_array_partitioned_indices.loop_fn.body": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_read_tensor_array_partitioned_indices.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_external_while_loop_grad": ["ops.control_flow_ops.while_loop", "framework.constant_op.constant", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.assertAllEqual", "client.session.Session", "ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.WhileV1Test.test_external_while_loop_grad.body": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_external_while_loop_grad.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_external_while_loop_grad.loop_fn": ["ops.gradients.gradients", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.WhileV1Test.test_tensor_array_grad": ["ops.math_ops.reduce_sum", "ops.gradients.gradients", "parallel_for.control_flow_ops.pfor", "numpy.random.rand", "test_util.PForTestCase.assertAllClose", "client.session.Session", "ops.math_ops.reduce_prod", "framework.constant_op.constant", "ops.tensor_array_ops.TensorArray"], "numpy.random.rand": [], "parallel_for.control_flow_ops_test.WhileV1Test.test_tensor_array_grad.loop_fn": ["ops.gradients.gradients", "ops.control_flow_ops.while_loop", "ops.math_ops.reduce_prod", "ops.array_ops.zeros"], "parallel_for.control_flow_ops_test.WhileV1Test.test_tensor_array_grad.loop_fn.body": ["ops.array_ops.gather", "ops.array_ops.reshape"], "parallel_for.control_flow_ops_test.WhileV1Test.test_tensor_array_grad.loop_fn.<lambda1>": [], "ops.math_ops.reduce_prod": [], "parallel_for.control_flow_ops_test.dynamic_lstm_input_fn": ["framework.constant_op.constant", "numpy.random.rand", "numpy.random.randint"], "numpy.random.randint": [], "parallel_for.control_flow_ops_test.create_dynamic_lstm": ["framework.constant_op.constant", "parallel_for.control_flow_ops.pfor", "ops.rnn_cell.BasicLSTMCell", "ops.rnn_cell.BasicRNNCell", "ops.array_ops.transpose", "ops.rnn.dynamic_rnn", "ops.tensor_array_ops.TensorArray", "ops.array_ops.zeros"], "ops.rnn_cell.BasicLSTMCell": [], "ops.rnn_cell.BasicRNNCell": [], "parallel_for.control_flow_ops_test.create_dynamic_lstm.loop_fn": ["util.nest.pack_sequence_as", "util.nest.flatten", "ops.control_flow_ops.while_loop", "ops.array_ops.reshape", "ops.array_ops.gather", "ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops_test.create_dynamic_lstm.loop_fn.body_fn": ["util.nest.pack_sequence_as", "ops.array_ops.expand_dims", "util.nest.flatten", "ops.array_ops.reshape", "<builtin>.zip", "ops.array_ops.gather", "ops.array_ops.where"], "ops.array_ops.expand_dims": [], "util.nest.flatten": [], "<builtin>.zip": [], "util.nest.pack_sequence_as": [], "parallel_for.control_flow_ops_test.create_dynamic_lstm.loop_fn.condition_fn": [], "ops.rnn.dynamic_rnn": [], "parallel_for.control_flow_ops_test.WhileV2Test.setUp": ["<builtin>.super", "ops.control_flow_v2_toggles.control_flow_v2_enabled", "ops.control_flow_v2_toggles.enable_control_flow_v2"], "parallel_for.control_flow_ops_test.WhileV2Test.tearDown": ["ops.control_flow_v2_toggles.disable_control_flow_v2", "<builtin>.super"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_outside_loop": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_outside_loop._f": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_outside_loop._f.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_outside_loop._f.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_outside_loop.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV2Test.test_invariant_while": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV2Test.test_invariant_while.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV2Test.test_invariant_while.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_invariant_while.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_invariant_while_with_control_dependency": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV2Test.test_invariant_while_with_control_dependency.loop_fn": ["framework.ops.control_dependencies", "ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV2Test.test_invariant_while_with_control_dependency.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_invariant_while_with_control_dependency.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_with_stateful_ops": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_with_stateful_ops.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_with_stateful_ops.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_with_stateful_ops.loop_fn.<lambda2>": ["ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_with_variable": ["test_util.PForTestCase._test_loop_fn", "ops.resource_variable_ops.ResourceVariable"], "ops.resource_variable_ops.ResourceVariable": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_with_variable.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_with_variable.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_with_variable.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_unstacked_condition": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_unstacked_condition.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_unstacked_condition.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_unstacked_condition.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while": ["test_util.PForTestCase._test_loop_fn", "framework.constant_op.constant", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while.loop_fn": ["ops.control_flow_ops.while_loop", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while.loop_fn.<lambda2>": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_change_input_invariance": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_change_input_invariance.loop_fn": ["ops.control_flow_ops.while_loop", "framework.constant_op.constant"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_change_input_invariance.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_change_input_invariance.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_shape_invariants": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_shape_invariants.loop_fn": ["framework.tensor_shape.TensorShape", "ops.control_flow_ops.while_loop", "framework.constant_op.constant"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_shape_invariants.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_shape_invariants.loop_fn.<lambda2>": [], "framework.tensor_shape.TensorShape": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_jacobian": ["framework.constant_op.constant", "framework.constant_op.constant", "test_util.PForTestCase.assertAllClose", "numpy.random.uniform"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_jacobian._f": ["parallel_for.control_flow_ops.pfor", "ops.control_flow_ops.while_loop", "parallel_for.control_flow_ops.for_loop"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_jacobian._f.<lambda1>": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_jacobian._f.<lambda2>": ["ops.math_ops.matmul"], "parallel_for.control_flow_ops_test.WhileV2Test.test_while_jacobian._f.loop_fn": ["ops.gradients.gradients", "ops.array_ops.gather", "ops.array_ops.reshape"], "numpy.random.uniform": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_scan": ["numpy.random.randn", "ops.array_ops.ones", "numpy.random.seed", "test_util.PForTestCase.evaluate", "ops.gradient_checker_v2.compute_gradient", "ops.variables.Variable", "test_util.PForTestCase.assertAllClose"], "numpy.random.seed": [], "numpy.random.randn": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_scan.log_prob": ["ops.math_ops.reduce_sum", "ops.functional_ops.scan_v2", "framework.constant_op.constant"], "parallel_for.control_flow_ops_test.WhileV2Test.test_scan.log_prob.<lambda1>": [], "ops.functional_ops.scan_v2": [], "ops.variables.Variable": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_scan.<lambda1>": ["parallel_for.control_flow_ops.vectorized_map"], "ops.gradient_checker_v2.compute_gradient": [], "parallel_for.control_flow_ops_test.WhileV2Test.test_scan_captured_variable": ["eager.context.executing_eagerly", "ops.math_ops.range", "test_util.PForTestCase.skipTest", "parallel_for.control_flow_ops.pfor", "eager.backprop.GradientTape", "ops.variables.Variable", "test_util.PForTestCase.assertAllClose"], "parallel_for.control_flow_ops_test.WhileV2Test.test_scan_captured_variable.loop_fn": ["ops.functional_ops.scan_v2", "ops.math_ops.range"], "parallel_for.control_flow_ops_test.WhileV2Test.test_scan_captured_variable.loop_fn.<lambda1>": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.NestedControlFlowTest.setUp": ["<builtin>.super", "ops.control_flow_v2_toggles.control_flow_v2_enabled", "ops.control_flow_v2_toggles.enable_control_flow_v2"], "parallel_for.control_flow_ops_test.NestedControlFlowTest.tearDown": ["ops.control_flow_v2_toggles.disable_control_flow_v2", "<builtin>.super"], "parallel_for.control_flow_ops_test.NestedControlFlowTest._cond": [], "parallel_for.control_flow_ops_test.NestedControlFlowTest._cond.<lambda1>": [], "parallel_for.control_flow_ops_test.NestedControlFlowTest._cond._f": ["ops.control_flow_ops.cond"], "parallel_for.control_flow_ops_test.NestedControlFlowTest._cond._f.<lambda1>": ["ops.control_flow_ops.cond", "ops.control_flow_ops.cond", "ops.control_flow_ops.cond"], "parallel_for.control_flow_ops_test.NestedControlFlowTest._while._f": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.NestedControlFlowTest._cond._f.<lambda2>": [], "ops.control_flow_ops.cond": [], "parallel_for.control_flow_ops_test.NestedControlFlowTest._while": [], "parallel_for.control_flow_ops_test.NestedControlFlowTest._while.<lambda1>": [], "parallel_for.control_flow_ops_test.NestedControlFlowTest._while._f.<lambda1>": [], "parallel_for.control_flow_ops_test.NestedControlFlowTest._while._f.<lambda2>": ["ops.array_ops.gather", "ops.array_ops.gather", "ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.NestedControlFlowTest._test_helper": ["test_util.PForTestCase._test_loop_fn", "framework.constant_op.constant", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.NestedControlFlowTest._test_helper.loop_fn": ["ops.array_ops.gather", "ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.NestedControlFlowTest.test_cond_while": ["ops.array_ops.gather", "ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.NestedControlFlowTest.test_while_cond": ["ops.array_ops.gather", "ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.NestedControlFlowTest.test_while_while": ["ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.NestedControlFlowTest.test_cond_cond": ["ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.StatelessIfTest.test_loop_variant_cond": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.StatelessIfTest.test_loop_variant_cond.loop_fn": ["ops.cond_v2.cond_v2", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.StatelessIfTest.test_loop_variant_cond.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.StatelessIfTest.test_loop_variant_cond.loop_fn.<lambda2>": [], "ops.cond_v2.cond_v2": [], "parallel_for.control_flow_ops_test.StatelessIfTest.test_loop_invariant_cond": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.StatelessIfTest.test_loop_invariant_cond.loop_fn": ["ops.cond_v2.cond_v2", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.StatelessIfTest.test_loop_invariant_cond.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.StatelessIfTest.test_loop_invariant_cond.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.StatelessIfTest.test_empty_branch": ["test_util.PForTestCase._test_loop_fn"], "parallel_for.control_flow_ops_test.StatelessIfTest.test_empty_branch.loop_fn": ["ops.cond_v2.cond_v2", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.StatelessIfTest.test_empty_branch.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.StatelessIfTest.test_empty_branch.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.IfTest.test_read_var": ["test_util.PForTestCase.skipTest", "test_util.PForTestCase._test_loop_fn", "ops.resource_variable_ops.ResourceVariable"], "parallel_for.control_flow_ops_test.IfTest.test_read_var.loop_fn": ["ops.cond_v2.cond_v2", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.IfTest.test_read_var.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.IfTest.test_read_var.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.RNNTest": ["framework.test_util.run_v1_only"], "parallel_for.control_flow_ops_test.RNNTest.test_dynamic_rnn": ["framework.test_util.run_v1_only", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.RNNTest.test_dynamic_lstm": ["test_util.PForTestCase.run_and_assert_equal", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.Benchmarks._run": ["time.time", "util.nest.flatten", "util.nest.flatten", "ops.variables.global_variables_initializer", "test.Benchmark.report_benchmark", "<builtin>.range", "client.session.Session"], "parallel_for.control_flow_ops_test.Benchmarks._run._done": ["ops.array_ops.gather", "ops.array_ops.reshape"], "ops.variables.global_variables_initializer": [], "time.time": [], "test.Benchmark.report_benchmark": [], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_sess_run_overhead": ["ops.array_ops.reshape", "framework.constant_op.constant", "framework.ops.Graph"], "framework.ops.Graph": [], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_add": ["ops.random_ops.random_normal", "parallel_for.control_flow_ops.pfor", "framework.ops.Graph", "parallel_for.control_flow_ops.for_loop", "parallel_for.control_flow_ops.for_loop"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_add.loop_fn": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_matmul": ["ops.random_ops.random_normal", "parallel_for.control_flow_ops.pfor", "framework.ops.Graph", "ops.math_ops.matmul", "parallel_for.control_flow_ops.for_loop", "parallel_for.control_flow_ops.for_loop"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_matmul.loop_fn": ["ops.array_ops.gather", "ops.math_ops.matmul", "ops.array_ops.expand_dims"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_map_fn": ["ops.map_fn.map_fn", "ops.random_ops.random_normal", "ops.random_ops.random_normal", "framework.ops.Graph", "framework.ops.Graph"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_map_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_map_fn.pfor_map_fn": ["parallel_for.control_flow_ops.pfor", "ops.array_ops.shape"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_map_fn.pfor_map_fn.<lambda1>": ["ops.array_ops.shape", "ops.array_ops.gather"], "ops.map_fn.map_fn": [], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_basic_while": ["ops.array_ops.gather", "parallel_for.control_flow_ops.pfor", "framework.ops.Graph", "parallel_for.control_flow_ops.for_loop"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_basic_while.loop_fn": ["ops.control_flow_ops.while_loop"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_basic_while.loop_fn.<lambda1>": [], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_basic_while.loop_fn.<lambda2>": [], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_dynamic_rnn": ["ops.control_flow_ops.while_loop", "ops.control_flow_ops.while_loop", "framework.ops.Graph"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_reduction": ["ops.math_ops.reduce_sum", "parallel_for.control_flow_ops.pfor", "framework.ops.Graph", "ops.math_ops.matmul", "ops.random_ops.random_uniform", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.Benchmarks.benchmark_reduction.loop_fn": ["ops.math_ops.reduce_sum", "ops.array_ops.gather", "ops.math_ops.matmul"], "parallel_for.control_flow_ops_test.SparseTest": ["framework.test_util.run_v1_only"], "parallel_for.control_flow_ops_test.SparseTest.test_var_loop_len": ["parallel_for.control_flow_ops.pfor", "ops.array_ops.placeholder", "test_util.PForTestCase.cached_session"], "parallel_for.control_flow_ops_test.SparseTest.test_var_loop_len.loop_fn": ["framework.sparse_tensor.SparseTensor"], "framework.sparse_tensor.SparseTensor": [], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_none_stacked": ["<builtin>.range", "framework.sparse_tensor.SparseTensor", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_none_stacked.loop_fn": ["framework.sparse_tensor.SparseTensor"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_all_stacked": ["<builtin>.list", "parallel_for.control_flow_ops.pfor", "<builtin>.range", "framework.sparse_tensor.SparseTensor", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_all_stacked.loop_fn": ["framework.sparse_tensor.SparseTensor", "ops.array_ops.expand_dims", "ops.math_ops.cast"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_indices_stacked": ["<builtin>.range", "framework.sparse_tensor.SparseTensor", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_indices_stacked.loop_fn": ["framework.sparse_tensor.SparseTensor", "ops.array_ops.expand_dims", "ops.math_ops.cast"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_values_stacked": ["<builtin>.list", "parallel_for.control_flow_ops.pfor", "<builtin>.range", "framework.sparse_tensor.SparseTensor", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_values_stacked.loop_fn": ["framework.sparse_tensor.SparseTensor", "ops.array_ops.expand_dims", "ops.math_ops.cast"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_shapes_stacked": ["<builtin>.range", "framework.sparse_tensor.SparseTensor", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_shapes_stacked.loop_fn": ["framework.sparse_tensor.SparseTensor", "ops.array_ops.expand_dims", "ops.math_ops.cast"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_shapes_stacked_2D": ["<builtin>.range", "framework.sparse_tensor.SparseTensor", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.run_and_assert_equal"], "parallel_for.control_flow_ops_test.SparseTest.test_sparse_result_shapes_stacked_2D.loop_fn": ["framework.sparse_tensor.SparseTensor", "ops.array_ops.concat", "ops.array_ops.expand_dims", "ops.math_ops.cast"], "ops.array_ops.concat": [], "parallel_for.control_flow_ops_test.Particle.__init__": ["framework.ops.convert_to_tensor", "ops.array_ops.broadcast_static_shape"], "framework.ops.convert_to_tensor": [], "ops.array_ops.broadcast_static_shape": [], "parallel_for.control_flow_ops_test.Particle._type_spec": ["ops.array_ops.broadcast_static_shape", "framework.type_spec.type_spec_from_value"], "framework.type_spec.type_spec_from_value": [], "parallel_for.control_flow_ops_test.ParticleSpec.__init__": ["ops.array_ops.broadcast_static_shape"], "parallel_for.control_flow_ops_test.ParticleSpec._serialize": [], "parallel_for.control_flow_ops_test.ParticleSpec.value_type": [], "parallel_for.control_flow_ops_test.ParticleSpec._component_specs": [], "parallel_for.control_flow_ops_test.ParticleSpec._to_components": [], "parallel_for.control_flow_ops_test.ParticleSpec._from_components": ["ops.array_ops.broadcast_static_shape"], "parallel_for.control_flow_ops_test.ParticleSpec._pad_shape_to_full_rank": ["framework.tensor_shape.TensorShape"], "parallel_for.control_flow_ops_test.ParticleSpec._batch": ["framework.tensor_shape.TensorShape", "framework.tensor_shape.TensorShape", "framework.tensor_spec.TensorSpec", "framework.tensor_spec.TensorSpec"], "framework.tensor_spec.TensorSpec": [], "parallel_for.control_flow_ops_test.ParticleSpec._unbatch": ["framework.tensor_spec.TensorSpec", "framework.tensor_spec.TensorSpec"], "parallel_for.control_flow_ops_test.ParticleSpec._to_tensor_list": ["framework.tensor_spec.TensorSpec", "ops.array_ops.reshape"], "absl.testing.parameterized.parameters": [], "parallel_for.control_flow_ops_test.CompositeTensorTest": ["absl.testing.parameterized.parameters"], "parallel_for.control_flow_ops_test.CompositeTensorTest.test_create_composite_inside_loop": ["numpy.ones", "parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.assertAllEqual", "test_util.PForTestCase.evaluate", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.CompositeTensorTest.test_create_composite_inside_loop.<lambda1>": ["ops.random_ops.random_uniform", "ops.array_ops.gather"], "numpy.ones": [], "parallel_for.control_flow_ops_test.CompositeTensorTest.test_composite_is_converted_to_batched_tensor": ["parallel_for.control_flow_ops.pfor", "test_util.PForTestCase.assertTrue", "test_util.PForTestCase.assertAllEqual"], "parallel_for.control_flow_ops_test.CompositeTensorTest.test_composite_is_converted_to_batched_tensor.<lambda1>": ["test_util.PForTestCase.assertAllEqual", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.CompositeTensorTest.test_vectorized_map_gathers_composite_tensors": ["parallel_for.control_flow_ops.vectorized_map", "parallel_for.control_flow_ops.vectorized_map", "test_util.PForTestCase.assertAllEqual"], "parallel_for.control_flow_ops_test.CompositeTensorTest.test_vectorized_map_gathers_composite_tensors.<lambda1>": [], "parallel_for.control_flow_ops_test.CompositeTensorTest.test_vectorized_map_of_ragged_tensors": ["ragged_tensor.RaggedTensor.from_row_lengths", "ragged_tensor.RaggedTensor.from_uniform_row_length", "parallel_for.control_flow_ops.vectorized_map", "test_util.PForTestCase.assertAllEqual"], "ragged_tensor.RaggedTensor.from_row_lengths": [], "ragged_tensor.RaggedTensor.from_uniform_row_length": [], "parallel_for.control_flow_ops_test.CompositeTensorTest.test_vectorized_map_of_ragged_tensors.<lambda1>": [], "parallel_for.control_flow_ops_test.ParsingTest.test_decode_csv": ["test_util.PForTestCase._test_loop_fn", "framework.constant_op.constant"], "parallel_for.control_flow_ops_test.ParsingTest.test_decode_csv.loop_fn": ["ops.array_ops.gather", "ops.parsing_ops.decode_csv"], "ops.parsing_ops.decode_csv": [], "parallel_for.control_flow_ops_test.ParsingTest": ["framework.test_util.run_v1_only"], "parallel_for.control_flow_ops_test.ParsingTest.test_parse_single_example": ["framework.constant_op.constant", "parallel_for.control_flow_ops.pfor", "parallel_for.control_flow_ops.pfor", "ops.parsing_ops.parse_example", "example.example_pb2.Example", "example.example_pb2.Example", "<builtin>.range", "test_util.PForTestCase.run_and_assert_equal", "example.feature_pb2.Features", "<builtin>.str"], "parallel_for.control_flow_ops_test.ParsingTest.test_parse_single_example._int64_feature": ["example.feature_pb2.Feature", "example.feature_pb2.Int64List"], "example.feature_pb2.Int64List": [], "example.feature_pb2.Feature": [], "parallel_for.control_flow_ops_test.ParsingTest.test_parse_single_example._bytes_feature": ["example.feature_pb2.BytesList", "example.feature_pb2.Feature"], "example.feature_pb2.BytesList": [], "<builtin>.str": [], "example.feature_pb2.Features": [], "example.example_pb2.Example": [], "parallel_for.control_flow_ops_test.ParsingTest.test_parse_single_example.loop_fn": ["ops.array_ops.gather", "ops.parsing_ops.parse_single_example"], "ops.parsing_ops.parse_single_example": [], "ops.parsing_ops.parse_example": [], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_simple": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_simple.f": ["ops.math_ops.square"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_simple.loop_fn": ["ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_nested_calls": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_nested_calls.inner": ["ops.math_ops.square"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_nested_calls.outer": ["ops.math_ops.reduce_sum", "ops.math_ops.reduce_sum"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_nested_calls.loop_fn": ["ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_nested_definition": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_nested_definition.outer": ["ops.math_ops.reduce_sum", "ops.math_ops.reduce_sum"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_nested_definition.outer.inner": ["ops.math_ops.square"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_nested_definition.loop_fn": ["ops.array_ops.gather", "ops.array_ops.gather"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_gradients": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_gradients.f": ["ops.math_ops.square"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_gradients.loop_fn": ["ops.math_ops.square", "ops.array_ops.gather", "eager.backprop.GradientTape"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_stateful_with_gradients": ["ops.variables.Variable", "test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_stateful_with_gradients.f": ["ops.math_ops.square"], "parallel_for.control_flow_ops_test.PartitionedCallTest.test_stateful_with_gradients.loop_fn": ["ops.math_ops.square", "ops.array_ops.gather", "eager.backprop.GradientTape"], "parallel_for.control_flow_ops_test.SpectralTest": ["absl.testing.parameterized.parameters", "platform.test.disable_with_predicate"], "parallel_for.control_flow_ops_test.SpectralTest.test_fft": ["test_util.PForTestCase._test_loop_fn", "numpy.random.uniform"], "parallel_for.control_flow_ops_test.SpectralTest.test_fft.loop_fn": ["ops.array_ops.gather"], "platform.test.disable_with_predicate": [], "parallel_for.control_flow_ops_test.SpectralTest.test_rfft": ["test_util.PForTestCase._test_loop_fn", "ops.random_ops.random_uniform"], "parallel_for.control_flow_ops_test.SpectralTest.test_rfft.loop_fn": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.SpectralTest.test_irfft": ["test_util.PForTestCase._test_loop_fn", "test_util.PForTestCase.skipTest", "ops.math_ops.cast", "numpy.random.uniform", "framework.config.list_physical_devices"], "framework.config.list_physical_devices": [], "parallel_for.control_flow_ops_test.SpectralTest.test_irfft.loop_fn": ["ops.array_ops.gather"], "parallel_for.control_flow_ops_test.VariableTest.test_create_variable_once": ["ops.array_ops.ones", "parallel_for.control_flow_ops.vectorized_map"], "parallel_for.control_flow_ops_test.VariableTest.test_create_variable_once.f": ["ops.variables.Variable", "ops.math_ops.matmul"], "parallel_for.control_flow_ops_test.VariableTest.test_create_variable_once.f.<lambda1>": [], "parallel_for.control_flow_ops_test.VariableTest": ["framework.test_util.run_v2_only", "framework.test_util.run_all_in_graph_and_eager_modes"], "framework.test_util.run_v2_only": [], "parallel_for.control_flow_ops_test.VariableTest.test_create_variable_repeated": ["ops.array_ops.ones", "test_util.PForTestCase.assertRaisesRegex", "parallel_for.control_flow_ops.vectorized_map"], "parallel_for.control_flow_ops_test.VariableTest.test_create_variable_repeated.f": ["ops.variables.Variable", "ops.math_ops.matmul"], "parallel_for.control_flow_ops_test.VariableTest.test_create_variable_repeated.f.<lambda1>": [], "framework.test_util.run_all_in_graph_and_eager_modes": [], "parallel_for.control_flow_ops_test.VariableTest.test_variable_shape": ["test_util.PForTestCase._test_loop_fn", "ops.resource_variable_ops.ResourceVariable"], "parallel_for.control_flow_ops_test.VariableTest.test_variable_shape.loop_fn": ["ops.resource_variable_ops.variable_shape"], "ops.resource_variable_ops.variable_shape": [], "platform.test.main": []}