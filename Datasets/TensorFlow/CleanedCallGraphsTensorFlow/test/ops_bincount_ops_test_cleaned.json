{"ops.bincount_ops_test": ["platform.test.main"], "absl.testing.parameterized.named_parameters": [], "ops.bincount_ops_test.TestSparseCount": ["absl.testing.parameterized.named_parameters"], "ops.bincount_ops_test.TestSparseCount.test_dense_input": ["ops.bincount_ops.sparse_bincount", "test.TestCase.assertAllEqual"], "ops.bincount_ops.sparse_bincount": [], "test.TestCase.assertAllEqual": [], "ops.bincount_ops_test.TestSparseCount.test_sparse_input": ["ops.bincount_ops.sparse_bincount", "test.TestCase.assertAllEqual", "ops.sparse_ops.from_dense"], "ops.sparse_ops.from_dense": [], "ops.bincount_ops_test.TestSparseCount.test_ragged_input": ["ragged.ragged_factory_ops.constant", "test.TestCase.assertAllEqual", "ops.bincount_ops.sparse_bincount"], "ragged.ragged_factory_ops.constant": [], "absl.testing.parameterized.parameters": [], "ops.bincount_ops_test.TestDenseBincount": ["absl.testing.parameterized.parameters"], "ops.bincount_ops_test.TestDenseBincount.test_sparse_input_all_count": ["test.TestCase.evaluate", "numpy.random.seed", "numpy.concatenate", "framework.sparse_tensor.SparseTensor", "numpy.bincount", "test.TestCase.assertAllEqual", "numpy.zeros", "numpy.random.randint", "ops.bincount_ops.bincount"], "numpy.random.seed": [], "numpy.random.randint": [], "numpy.zeros": [], "numpy.concatenate": [], "framework.sparse_tensor.SparseTensor": [], "numpy.bincount": [], "ops.bincount_ops.bincount": [], "test.TestCase.evaluate": [], "ops.bincount_ops_test.TestDenseBincount.test_sparse_input_all_count_with_weights": ["test.TestCase.evaluate", "numpy.random.seed", "numpy.concatenate", "framework.sparse_tensor.SparseTensor", "numpy.bincount", "test.TestCase.assertAllEqual", "numpy.zeros", "numpy.random.randint", "numpy.random.random", "ops.bincount_ops.bincount"], "numpy.random.random": [], "ops.bincount_ops_test.TestDenseBincount.test_sparse_input_all_binary": ["test.TestCase.evaluate", "numpy.random.seed", "numpy.concatenate", "framework.sparse_tensor.SparseTensor", "test.TestCase.assertAllEqual", "numpy.zeros", "numpy.ones", "numpy.random.randint", "ops.bincount_ops.bincount"], "numpy.ones": [], "ops.bincount_ops_test.TestDenseBincount.test_sparse_input_col_reduce_count": ["<builtin>.range", "test.TestCase.evaluate", "numpy.random.seed", "framework.ops.device", "numpy.concatenate", "framework.sparse_tensor.SparseTensor", "numpy.reshape", "numpy.bincount", "test.TestCase.assertAllEqual", "numpy.random.randint", "ops.sparse_ops.from_dense", "ops.bincount_ops.bincount"], "<builtin>.range": [], "numpy.reshape": [], "framework.ops.device": [], "ops.bincount_ops_test.TestDenseBincount.test_sparse_input_col_reduce_binary": ["<builtin>.range", "test.TestCase.evaluate", "numpy.random.seed", "numpy.where", "framework.ops.device", "numpy.concatenate", "framework.sparse_tensor.SparseTensor", "numpy.reshape", "numpy.bincount", "test.TestCase.assertAllEqual", "numpy.random.randint", "ops.sparse_ops.from_dense", "ops.bincount_ops.bincount"], "numpy.where": [], "ops.bincount_ops_test.TestDenseBincount.test_ragged_input_count": ["ragged.ragged_factory_ops.constant", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "ops.bincount_ops.bincount"], "ops.bincount_ops_test.TestDenseBincount.test_ragged_input_binary": ["ragged.ragged_factory_ops.constant", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "ops.bincount_ops.bincount"], "ops.bincount_ops_test.TestDenseBincount.test_ragged_input_count_with_weights": ["ragged.ragged_factory_ops.constant", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "ops.bincount_ops.bincount"], "test.TestCase.assertAllClose": [], "ops.bincount_ops_test.TestDenseBincount.test_ragged_input_count_np": ["<builtin>.range", "test.TestCase.evaluate", "numpy.random.seed", "numpy.concatenate", "numpy.reshape", "numpy.bincount", "test.TestCase.assertAllEqual", "numpy.random.randint", "ragged_tensor.RaggedTensor.from_tensor", "ops.bincount_ops.bincount"], "ragged_tensor.RaggedTensor.from_tensor": [], "ops.bincount_ops_test.TestDenseBincount.test_ragged_input_count_np_with_weights": ["<builtin>.range", "test.TestCase.evaluate", "numpy.random.seed", "numpy.concatenate", "numpy.reshape", "numpy.bincount", "test.TestCase.assertAllEqual", "numpy.random.randint", "ragged_tensor.RaggedTensor.from_tensor", "numpy.random.random", "ops.bincount_ops.bincount"], "ops.bincount_ops_test.TestSparseCountFailureModes.test_dense_input_sparse_weights_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "ops.sparse_ops.from_dense"], "numpy.array": [], "test.TestCase.assertRaisesRegex": [], "ops.bincount_ops_test.TestSparseCountFailureModes.test_dense_input_ragged_weights_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "ragged.ragged_factory_ops.constant"], "ops.bincount_ops_test.TestSparseCountFailureModes.test_dense_input_wrong_shape_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "eager.context.executing_eagerly"], "eager.context.executing_eagerly": [], "ops.bincount_ops_test.TestSparseCountFailureModes.test_sparse_input_dense_weights_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "ops.sparse_ops.from_dense"], "ops.bincount_ops_test.TestSparseCountFailureModes.test_sparse_input_ragged_weights_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "ragged.ragged_factory_ops.constant", "ops.sparse_ops.from_dense"], "ops.bincount_ops_test.TestSparseCountFailureModes.test_sparse_input_wrong_indices_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "ops.sparse_ops.from_dense"], "ops.bincount_ops_test.TestSparseCountFailureModes.test_sparse_input_too_many_indices_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesIncompatibleShapesError", "ops.sparse_ops.from_dense"], "test.TestCase.assertRaisesIncompatibleShapesError": [], "ops.bincount_ops_test.TestSparseCountFailureModes.test_sparse_input_wrong_shape_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "ops.sparse_ops.from_dense"], "ops.bincount_ops_test.TestSparseCountFailureModes.test_ragged_input_dense_weights_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "ragged.ragged_factory_ops.constant"], "ops.bincount_ops_test.TestSparseCountFailureModes.test_ragged_input_sparse_weights_fails": ["numpy.array", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount", "test.TestCase.assertRaisesRegex", "ragged.ragged_factory_ops.constant", "ops.sparse_ops.from_dense"], "ops.bincount_ops_test.TestSparseCountFailureModes.test_ragged_input_different_shape_fails": ["ragged.ragged_factory_ops.constant", "test.TestCase.assertRaisesRegex", "test.TestCase.evaluate", "ops.bincount_ops.sparse_bincount"], "ops.bincount_ops_test.RawOpsTest.testSparseCountSparseOutputBadIndicesShape": ["ops.gen_count_ops.SparseCountSparseOutput", "test.TestCase.assertRaisesRegex", "test.TestCase.evaluate"], "ops.gen_count_ops.SparseCountSparseOutput": [], "ops.bincount_ops_test.RawOpsTest.testSparseCountSparseOutputBadWeightsShape": ["ops.gen_count_ops.SparseCountSparseOutput", "test.TestCase.assertRaisesRegex", "test.TestCase.evaluate"], "ops.bincount_ops_test.RawOpsTest.testSparseCountSparseOutputBadNumberOfValues": ["ops.gen_count_ops.SparseCountSparseOutput", "test.TestCase.assertRaisesRegex", "test.TestCase.evaluate"], "ops.bincount_ops_test.RawOpsTest.testRaggedCountSparseOutput": ["test.TestCase.evaluate", "test.TestCase.assertAllEqual", "ops.gen_count_ops.RaggedCountSparseOutput"], "ops.gen_count_ops.RaggedCountSparseOutput": [], "ops.bincount_ops_test.RawOpsTest.testRaggedCountSparseOutputBadWeightsShape": ["test.TestCase.assertRaisesRegex", "test.TestCase.evaluate", "ops.gen_count_ops.RaggedCountSparseOutput"], "ops.bincount_ops_test.RawOpsTest.testRaggedCountSparseOutputEmptySplits": ["test.TestCase.assertRaisesRegex", "test.TestCase.evaluate", "ops.gen_count_ops.RaggedCountSparseOutput"], "ops.bincount_ops_test.RawOpsTest.testRaggedCountSparseOutputBadSplitsStart": ["test.TestCase.assertRaisesRegex", "test.TestCase.evaluate", "ops.gen_count_ops.RaggedCountSparseOutput"], "ops.bincount_ops_test.RawOpsTest.testRaggedCountSparseOutputBadSplitsEnd": ["test.TestCase.assertRaisesRegex", "test.TestCase.evaluate", "ops.gen_count_ops.RaggedCountSparseOutput"], "platform.test.main": []}