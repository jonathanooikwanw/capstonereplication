{"io.tf_record_test": ["platform.test.main"], "io.tf_record_test.TFCompressionTestCase.setUp": ["<builtin>.super"], "<builtin>.super": [], "io.tf_record_test.TFCompressionTestCase._Record": ["util.compat.as_bytes"], "util.compat.as_bytes": [], "io.tf_record_test.TFCompressionTestCase._CreateFiles": ["util.compat.as_bytes", "util.compat.as_bytes", "<builtin>.range"], "<builtin>.range": [], "io.tf_record_test.TFCompressionTestCase._WriteRecordsToFile": ["io.tf_record.TFRecordWriter", "os.path.join", "test.TestCase.get_temp_dir"], "test.TestCase.get_temp_dir": [], "os.path.join": [], "io.tf_record.TFRecordWriter": [], "io.tf_record_test.TFCompressionTestCase._ZlibCompressFile": ["zlib.compress", "<builtin>.open", "os.path.join", "test.TestCase.get_temp_dir"], "<builtin>.open": [], "zlib.compress": [], "io.tf_record_test.TFCompressionTestCase._GzipCompressFile": ["gzip.GzipFile", "<builtin>.open", "os.path.join", "test.TestCase.get_temp_dir"], "gzip.GzipFile": [], "io.tf_record_test.TFCompressionTestCase._ZlibDecompressFile": ["zlib.decompress", "<builtin>.open", "os.path.join", "test.TestCase.get_temp_dir"], "zlib.decompress": [], "io.tf_record_test.TFCompressionTestCase._GzipDecompressFile": ["<builtin>.open", "gzip.GzipFile", "os.path.join", "test.TestCase.get_temp_dir"], "io.tf_record_test.TFRecordWriterTest._AssertFilesEqual": ["<builtin>.open", "<builtin>.zip", "test.TestCase.assertEqual", "test.TestCase.assertNotEqual"], "<builtin>.zip": [], "test.TestCase.assertEqual": [], "test.TestCase.assertNotEqual": [], "io.tf_record_test.TFRecordWriterTest._CompressionSizeDelta": ["test.TestCase.assertNotEqual", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "<builtin>.list", "os.path.getsize"], "io.tf_record.tf_record_iterator": [], "<builtin>.list": [], "os.path.getsize": [], "io.tf_record_test.TFRecordWriterTest.testWriteReadZLibFiles": ["io.tf_record.TFRecordOptions", "<builtin>.enumerate", "io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions"], "io.tf_record.TFRecordOptions": [], "<builtin>.enumerate": [], "io.tf_record_test.TFRecordWriterTest.testWriteReadGzipFiles": ["io.tf_record.TFRecordOptions", "<builtin>.enumerate", "io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions"], "io.tf_record_test.TFRecordWriterTest.testNoCompressionType": ["io.tf_record.TFRecordOptions", "test.TestCase.assertRaises", "test.TestCase.assertEqual", "tf_record.TFRecordOptions.get_compression_type_string"], "tf_record.TFRecordOptions.get_compression_type_string": [], "test.TestCase.assertRaises": [], "io.tf_record_test.TFRecordWriterTest.testZlibCompressionType": ["io.tf_record.TFRecordOptions", "test.TestCase.assertEqual", "tf_record.TFRecordOptions.get_compression_type_string"], "io.tf_record_test.TFRecordWriterTest.testCompressionOptions": ["io.tf_record.TFRecordOptions", "random.Random", "io.tf_record.TFRecordOptions", "<builtin>.len", "test.TestCase.assertTrue", "<builtin>.range", "util.compat.as_bytes"], "random.Random": [], "<builtin>.len": [], "test.TestCase.assertTrue": [], "io.tf_record_test.TFRecordWriterZlibTest.testZLibFlushRecord": ["io.tf_record.TFRecordOptions", "<builtin>.open", "io.tf_record.TFRecordOptions", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "zlib.compressobj", "<builtin>.isinstance", "<builtin>.list", "six.int2byte"], "zlib.compressobj": [], "<builtin>.isinstance": [], "six.int2byte": [], "io.tf_record_test.TFRecordWriterZlibTest.testZlibReadWrite": ["io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "<builtin>.list", "test.TestCase.assertEqual"], "io.tf_record_test.TFRecordWriterZlibTest.testZlibReadWriteLarge": ["io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "<builtin>.list", "test.TestCase.assertEqual"], "io.tf_record_test.TFRecordWriterZlibTest.testGzipReadWrite": ["io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "<builtin>.list", "test.TestCase.assertEqual"], "io.tf_record_test.TFRecordIteratorTest.setUp": ["<builtin>.super"], "io.tf_record_test.TFRecordIteratorTest.testIterator": ["io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "<builtin>.next", "test.TestCase.assertRaises", "<builtin>.range", "test.TestCase.assertRaises"], "<builtin>.next": [], "io.tf_record_test.TFRecordIteratorTest.testWriteZlibRead": ["io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "<builtin>.list"], "io.tf_record_test.TFRecordIteratorTest.testWriteZlibReadLarge": ["io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "<builtin>.list"], "io.tf_record_test.TFRecordIteratorTest.testWriteGzipRead": ["io.tf_record.TFRecordOptions", "io.tf_record.TFRecordOptions", "io.tf_record.tf_record_iterator", "test.TestCase.assertEqual", "<builtin>.list", "test.TestCase.assertEqual"], "io.tf_record_test.TFRecordIteratorTest.testReadGrowingFile_preservesReadOffset": ["test.TestCase.assertEqual", "io.tf_record.tf_record_iterator", "<builtin>.next", "test.TestCase.get_temp_dir", "test.TestCase.assertRaises", "os.path.join", "io.tf_record.TFRecordWriter"], "io.tf_record_test.TFRecordIteratorTest.testReadTruncatedFile_preservesReadOffset": ["<builtin>.open", "test.TestCase.assertEqual", "io.tf_record.tf_record_iterator", "<builtin>.next", "test.TestCase.get_temp_dir", "test.TestCase.assertRaises", "os.path.join", "io.tf_record.TFRecordWriter"], "io.tf_record_test.TFRecordRandomReaderTest.testRandomReaderReadingWorks": ["io.tf_record.TFRecordWriter", "test.TestCase.assertEqual", "test.TestCase.assertRaisesRegex", "io.tf_record.tf_record_random_reader", "<builtin>.range", "io.tf_record.tf_record_random_reader"], "io.tf_record.tf_record_random_reader": [], "test.TestCase.assertRaisesRegex": [], "io.tf_record_test.TFRecordRandomReaderTest.testRandomReaderThrowsErrorForInvalidOffset": ["io.tf_record.tf_record_random_reader", "test.TestCase.assertRaisesRegex", "io.tf_record.tf_record_random_reader", "<builtin>.range", "io.tf_record.tf_record_random_reader"], "io.tf_record_test.TFRecordRandomReaderTest.testClosingRandomReaderCausesErrorsForFurtherReading": ["io.tf_record.tf_record_random_reader", "test.TestCase.assertRaisesRegex", "io.tf_record.tf_record_random_reader", "<builtin>.range", "io.tf_record.tf_record_random_reader"], "io.tf_record_test.TFRecordWriterCloseAndFlushTests.setUp": ["io.tf_record.TFRecordOptions", "test.TestCase.get_temp_dir", "os.path.join", "<builtin>.super", "io.tf_record.TFRecordWriter"], "io.tf_record_test.TFRecordWriterCloseAndFlushTests._Record": ["util.compat.as_bytes"], "io.tf_record_test.TFRecordWriterCloseAndFlushTests.testWriteAndLeaveOpen": ["<builtin>.list", "<builtin>.map", "<builtin>.range"], "<builtin>.map": [], "io.tf_record_test.TFRecordWriterCloseAndFlushTests.testWriteAndRead": ["io.tf_record.tf_record_iterator", "<builtin>.map", "<builtin>.list", "<builtin>.range", "test.TestCase.assertListEqual"], "test.TestCase.assertListEqual": [], "io.tf_record_test.TFRecordWriterCloseAndFlushTests.testFlushAndRead": ["io.tf_record.tf_record_iterator", "<builtin>.map", "<builtin>.list", "<builtin>.range", "test.TestCase.assertListEqual"], "io.tf_record_test.TFRecordWriterCloseAndFlushTests.testDoubleClose": ["test.TestCase.assertListEqual"], "io.tf_record_test.TFRecordWriterCloseAndFlushTests.testFlushAfterCloseIsError": ["test.TestCase.assertRaises", "test.TestCase.assertRaises"], "io.tf_record_test.TFRecordWriterCloseAndFlushTests.testWriteAfterCloseIsError": ["test.TestCase.assertRaises", "test.TestCase.assertRaises"], "io.tf_record_test.TFRecordWriterCloseAndFlushGzipTests.setUp": ["<builtin>.super"], "io.tf_record_test.TFRecordWriterCloseAndFlushZlibTests.setUp": ["<builtin>.super"], "platform.test.main": []}