{"kernel_tests.range_test": ["platform.test.main"], "kernel_tests.test_base.default_test_combinations": [], "kernel_tests.range_test.RangeTest": ["kernel_tests.test_base.default_test_combinations", "framework.combinations.combine", "framework.combinations.times", "framework.combinations.generate"], "framework.combinations.combine": [], "framework.combinations.times": [], "framework.combinations.generate": [], "kernel_tests.range_test.RangeTest.testStop": ["ops.dataset_ops.get_legacy_output_types", "test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.arange"], "dataset_ops.Dataset.range": [], "numpy.arange": [], "test_base.DatasetTestBase.assertDatasetProduces": [], "ops.dataset_ops.get_legacy_output_types": [], "test_base.DatasetTestBase.assertEqual": [], "kernel_tests.range_test.RangeTest.testStartStop": ["ops.dataset_ops.get_legacy_output_types", "test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.arange"], "kernel_tests.range_test.RangeTest.testStartStopStep": ["ops.dataset_ops.get_legacy_output_types", "test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.arange"], "kernel_tests.range_test.RangeTest.testZeroStep": ["test_base.DatasetTestBase.evaluate", "test_base.DatasetTestBase.assertRaises", "dataset_ops.Dataset.range"], "test_base.DatasetTestBase.assertRaises": [], "test_base.DatasetTestBase.evaluate": [], "kernel_tests.range_test.RangeTest.testNegativeStep": ["ops.dataset_ops.get_legacy_output_types", "test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.arange"], "kernel_tests.range_test.RangeTest.testStopLessThanStart": ["ops.dataset_ops.get_legacy_output_types", "test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.arange"], "kernel_tests.range_test.RangeTest.testStopLessThanStartWithPositiveStep": ["ops.dataset_ops.get_legacy_output_types", "test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.arange"], "kernel_tests.range_test.RangeTest.testStopLessThanStartWithNegativeStep": ["ops.dataset_ops.get_legacy_output_types", "test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertDatasetProduces", "numpy.arange"], "kernel_tests.range_test.RangeTest.testName": ["test_base.DatasetTestBase.assertDatasetProduces", "<builtin>.range", "<builtin>.list", "dataset_ops.Dataset.range"], "<builtin>.range": [], "<builtin>.list": [], "kernel_tests.range_test.RangeCheckpointTest._build_range_dataset": ["dataset_ops.Dataset.range"], "kernel_tests.range_test.RangeCheckpointTest": ["kernel_tests.test_base.default_test_combinations", "framework.combinations.times", "kernel_tests.checkpoint_test_base.default_test_combinations", "framework.combinations.generate"], "kernel_tests.checkpoint_test_base.default_test_combinations": [], "kernel_tests.range_test.RangeCheckpointTest.test": [], "kernel_tests.range_test.RangeCheckpointTest.test.<lambda1>": ["framework.combinations.generate"], "kernel_tests.range_test.RangeRandomAccessTest": ["kernel_tests.test_base.default_test_combinations", "framework.combinations.combine", "framework.combinations.times", "framework.combinations.generate"], "kernel_tests.range_test.RangeRandomAccessTest.testInvalidIndex": ["test_base.DatasetTestBase.evaluate", "test_base.DatasetTestBase.assertRaises", "dataset_ops.Dataset.range", "ops.random_access.at"], "ops.random_access.at": [], "kernel_tests.range_test.RangeRandomAccessTest.testEmptyDataset": ["test_base.DatasetTestBase.evaluate", "test_base.DatasetTestBase.assertRaises", "dataset_ops.Dataset.range", "ops.random_access.at"], "kernel_tests.range_test.RangeRandomAccessTest.testBasic": ["test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.evaluate", "<builtin>.range", "ops.random_access.at"], "kernel_tests.range_test.RangeRandomAccessTest.testMultipleCombinations": ["test_base.DatasetTestBase.assertEqual", "dataset_ops.Dataset.range", "test_base.DatasetTestBase.assertRaises", "test_base.DatasetTestBase.evaluate", "numpy.arange", "<builtin>.range", "ops.random_access.at"], "platform.test.main": []}