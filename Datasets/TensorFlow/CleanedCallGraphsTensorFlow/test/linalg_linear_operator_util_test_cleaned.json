{"linalg.linear_operator_util_test": ["numpy.random.RandomState", "platform.test.main"], "numpy.random.RandomState": [], "linalg.linear_operator_util_test.AssertZeroImagPartTest.test_real_tensor_doesnt_raise": ["linalg.linear_operator_util.assert_zero_imag_part", "test.TestCase.evaluate", "framework.ops.convert_to_tensor"], "framework.ops.convert_to_tensor": [], "linalg.linear_operator_util.assert_zero_imag_part": [], "test.TestCase.evaluate": [], "linalg.linear_operator_util_test.AssertZeroImagPartTest.test_complex_tensor_with_imag_zero_doesnt_raise": ["linalg.linear_operator_util.assert_zero_imag_part", "test.TestCase.evaluate", "ops.math_ops.complex", "framework.ops.convert_to_tensor"], "ops.math_ops.complex": [], "linalg.linear_operator_util_test.AssertZeroImagPartTest.test_complex_tensor_with_nonzero_imag_raises": ["linalg.linear_operator_util.assert_zero_imag_part", "ops.math_ops.complex", "test.TestCase.assertRaisesOpError", "framework.ops.convert_to_tensor", "test.TestCase.evaluate"], "test.TestCase.assertRaisesOpError": [], "linalg.linear_operator_util_test.AssertNoEntriesWithModulusZeroTest.test_nonzero_real_tensor_doesnt_raise": ["test.TestCase.evaluate", "linalg.linear_operator_util.assert_no_entries_with_modulus_zero", "framework.ops.convert_to_tensor"], "linalg.linear_operator_util.assert_no_entries_with_modulus_zero": [], "linalg.linear_operator_util_test.AssertNoEntriesWithModulusZeroTest.test_nonzero_complex_tensor_doesnt_raise": ["test.TestCase.evaluate", "ops.math_ops.complex", "linalg.linear_operator_util.assert_no_entries_with_modulus_zero", "framework.ops.convert_to_tensor"], "linalg.linear_operator_util_test.AssertNoEntriesWithModulusZeroTest.test_zero_real_tensor_raises": ["test.TestCase.evaluate", "test.TestCase.assertRaisesOpError", "linalg.linear_operator_util.assert_no_entries_with_modulus_zero", "framework.ops.convert_to_tensor"], "linalg.linear_operator_util_test.AssertNoEntriesWithModulusZeroTest.test_zero_complex_tensor_raises": ["ops.math_ops.complex", "linalg.linear_operator_util.assert_no_entries_with_modulus_zero", "test.TestCase.assertRaisesOpError", "framework.ops.convert_to_tensor", "test.TestCase.evaluate"], "linalg.linear_operator_util_test.BroadcastMatrixBatchDimsTest.test_zero_batch_matrices_returned_as_empty_list": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "test.TestCase.assertAllEqual"], "linalg.linear_operator_util.broadcast_matrix_batch_dims": [], "test.TestCase.assertAllEqual": [], "linalg.linear_operator_util_test.BroadcastMatrixBatchDimsTest.test_one_batch_matrix_returned_after_tensor_conversion": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "<builtin>.isinstance", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertTrue"], "<builtin>.isinstance": [], "test.TestCase.assertTrue": [], "test.TestCase.assertAllClose": [], "linalg.linear_operator_util_test.BroadcastMatrixBatchDimsTest.test_static_dims_broadcast": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "test.TestCase.assertAllEqual", "test.TestCase.assertAllClose", "numpy.zeros", "test.TestCase.evaluate"], "numpy.zeros": [], "linalg.linear_operator_util_test.BroadcastMatrixBatchDimsTest.test_static_dims_broadcast_second_arg_higher_rank": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "test.TestCase.assertAllEqual", "test.TestCase.assertAllClose", "numpy.zeros", "test.TestCase.evaluate"], "linalg.linear_operator_util_test.BroadcastMatrixBatchDimsTest.test_dynamic_dims_broadcast_32bit": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "test.TestCase.assertAllClose", "numpy.zeros", "ops.array_ops.placeholder_with_default", "test.TestCase.evaluate"], "ops.array_ops.placeholder_with_default": [], "linalg.linear_operator_util_test.BroadcastMatrixBatchDimsTest.test_dynamic_dims_broadcast_32bit_second_arg_higher_rank": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "test.TestCase.assertAllClose", "numpy.zeros", "ops.array_ops.placeholder_with_default", "test.TestCase.evaluate"], "linalg.linear_operator_util_test.BroadcastMatrixBatchDimsTest.test_less_than_two_dims_raises_static": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "test.TestCase.assertRaisesRegex"], "test.TestCase.assertRaisesRegex": [], "linalg.linear_operator_util_test.MatrixSolveWithBroadcastTest.test_static_dims_broadcast_matrix_has_extra_dims": ["ops.linalg_ops.matrix_solve", "test.TestCase.assertAllEqual", "linalg.linear_operator_util.matrix_solve_with_broadcast", "numpy.zeros", "test.TestCase.assertAllClose", "test.TestCase.evaluate"], "linalg.linear_operator_util.matrix_solve_with_broadcast": [], "ops.linalg_ops.matrix_solve": [], "linalg.linear_operator_util_test.MatrixSolveWithBroadcastTest.test_static_dims_broadcast_rhs_has_extra_dims": ["ops.linalg_ops.matrix_solve", "test.TestCase.assertAllEqual", "linalg.linear_operator_util.matrix_solve_with_broadcast", "numpy.zeros", "test.TestCase.assertAllClose", "test.TestCase.evaluate"], "linalg.linear_operator_util_test.MatrixSolveWithBroadcastTest.test_static_dims_broadcast_rhs_has_extra_dims_dynamic": ["ops.linalg_ops.matrix_solve", "test.TestCase.assertAllEqual", "linalg.linear_operator_util.matrix_solve_with_broadcast", "numpy.zeros", "test.TestCase.assertAllClose", "ops.array_ops.placeholder_with_default", "test.TestCase.evaluate"], "linalg.linear_operator_util_test.MatrixSolveWithBroadcastTest.test_static_dims_broadcast_rhs_has_extra_dims_and_adjoint": ["ops.linalg_ops.matrix_solve", "test.TestCase.assertAllEqual", "linalg.linear_operator_util.matrix_solve_with_broadcast", "numpy.zeros", "test.TestCase.assertAllClose", "test.TestCase.evaluate"], "linalg.linear_operator_util_test.MatrixSolveWithBroadcastTest.test_dynamic_dims_broadcast_64bit": ["ops.linalg_ops.matrix_solve", "linalg.linear_operator_util.matrix_solve_with_broadcast", "numpy.zeros", "test.TestCase.assertAllClose", "ops.array_ops.placeholder_with_default", "test.TestCase.evaluate"], "linalg.linear_operator_util_test.DomainDimensionStubOperator.__init__": ["framework.ops.convert_to_tensor"], "linalg.linear_operator_util_test.DomainDimensionStubOperator.domain_dimension_tensor": [], "linalg.linear_operator_util_test.AssertCompatibleMatrixDimensionsTest.test_compatible_dimensions_do_not_raise": ["test.TestCase.evaluate", "test.TestCase.evaluate", "linalg.linear_operator_util.assert_compatible_matrix_dimensions", "framework.ops.convert_to_tensor"], "linalg.linear_operator_util.assert_compatible_matrix_dimensions": [], "linalg.linear_operator_util_test.AssertCompatibleMatrixDimensionsTest.test_incompatible_dimensions_raise": ["framework.ops.convert_to_tensor", "test.TestCase.assertRaisesOpError", "linalg.linear_operator_util.assert_compatible_matrix_dimensions", "framework.ops.convert_to_tensor", "test.TestCase.evaluate"], "linalg.linear_operator_util_test.DummyOperatorWithHint.__init__": [], "absl.testing.parameterized.named_parameters": [], "linalg.linear_operator_util_test.UseOperatorOrProvidedHintUnlessContradictingTest": ["absl.testing.parameterized.named_parameters"], "linalg.linear_operator_util_test.UseOperatorOrProvidedHintUnlessContradictingTest.test_computes_an_or_if_non_contradicting": ["test.TestCase.evaluate", "linalg.linear_operator_util.use_operator_or_provided_hint_unless_contradicting", "test.TestCase.assertEqual"], "linalg.linear_operator_util.use_operator_or_provided_hint_unless_contradicting": [], "test.TestCase.assertEqual": [], "linalg.linear_operator_util_test.UseOperatorOrProvidedHintUnlessContradictingTest.test_raises_if_contradicting": ["test.TestCase.assertEqual", "linalg.linear_operator_util.use_operator_or_provided_hint_unless_contradicting", "test.TestCase.assertRaisesRegex"], "linalg.linear_operator_util_test.BlockwiseTest": ["absl.testing.parameterized.named_parameters"], "linalg.linear_operator_util_test.BlockwiseTest.test_blockwise_input": ["numpy.zeros", "linalg.linear_operator_util.arg_is_blockwise", "ops.array_ops.placeholder_with_default", "framework.ops.convert_to_tensor", "framework.tensor_shape.Dimension", "test.TestCase.assertTrue"], "framework.tensor_shape.Dimension": [], "linalg.linear_operator_util.arg_is_blockwise": [], "linalg.linear_operator_util_test.BlockwiseTest.test_non_blockwise_input": ["numpy.zeros", "linalg.linear_operator_util.arg_is_blockwise", "ops.array_ops.placeholder_with_default", "framework.ops.convert_to_tensor", "framework.tensor_shape.Dimension", "test.TestCase.assertFalse"], "test.TestCase.assertFalse": [], "linalg.linear_operator_util_test.BlockwiseTest.test_ambiguous_input_raises": ["<builtin>.range", "numpy.zeros", "linalg.linear_operator_util.arg_is_blockwise", "framework.tensor_shape.Dimension", "test.TestCase.assertRaisesRegex"], "<builtin>.range": [], "linalg.linear_operator_util_test.BlockwiseTest.test_mismatched_input_raises": ["linalg.linear_operator_util.arg_is_blockwise", "framework.tensor_shape.Dimension", "test.TestCase.assertRaisesRegex", "numpy.zeros"], "platform.test.main": []}