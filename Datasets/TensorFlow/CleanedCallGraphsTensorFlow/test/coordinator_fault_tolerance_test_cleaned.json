{"coordinator.fault_tolerance_test": ["distribute.multi_process_runner.test_main", "compat.v2_compat.enable_v2_behavior"], "coordinator.fault_tolerance_test.Model.__init__": ["compat.v2_compat.enable_v2_behavior"], "coordinator.fault_tolerance_test.Model.build": ["ops.random_ops.random_uniform", "ops.random_ops.random_uniform", "ops.variables.Variable"], "ops.random_ops.random_uniform": [], "ops.variables.Variable": [], "coordinator.fault_tolerance_test.Model.rebuild_iterators": ["<builtin>.iter", "dataset_ops.DatasetV2.from_tensors", "ops.random_ops.random_uniform"], "coordinator.fault_tolerance_test.Model.rebuild_iterators.dataset_fn": ["ops.random_ops.random_uniform", "dataset_ops.DatasetV2.from_tensors"], "dataset_ops.DatasetV2.from_tensors": [], "<builtin>.iter": [], "coordinator.fault_tolerance_test.Model._train_fn_internal": ["ops.random_ops.random_uniform", "ops.math_ops.matmul", "<builtin>.next", "ops.array_ops.squeeze"], "<builtin>.next": [], "ops.array_ops.squeeze": [], "ops.math_ops.matmul": [], "coordinator.fault_tolerance_test.Model.train_fn": ["ops.array_ops.squeeze"], "coordinator.fault_tolerance_test.Model.schedule_training_functions": ["<builtin>.range"], "<builtin>.range": [], "coordinator.fault_tolerance_test.Model.join_training_functions": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.setUp": ["coordinator.cluster_coordinator.ClusterCoordinator", "<builtin>.super", "distribute.multi_worker_test_base.pick_unused_port", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2", "distribute.multi_worker_test_base.create_multi_process_cluster", "distribute.cluster_resolver.SimpleClusterResolver", "training.server_lib.ClusterSpec", "training.coordinator.Coordinator"], "<builtin>.super": [], "distribute.multi_worker_test_base.create_multi_process_cluster": [], "distribute.multi_worker_test_base.pick_unused_port": [], "training.server_lib.ClusterSpec": [], "distribute.cluster_resolver.SimpleClusterResolver": [], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2": [], "coordinator.cluster_coordinator.ClusterCoordinator": [], "training.coordinator.Coordinator": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.tearDown": ["<builtin>.super"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest._restart": ["eager.context.check_alive", "time.sleep"], "time.sleep": [], "eager.context.check_alive": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest._restart_in_thread": ["threading.Thread"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest._restart_in_thread._restart_fn": ["eager.context.check_alive"], "threading.Thread": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest._ensure_threads_closed": ["distribute.test_util.show_backref", "gc.collect", "distribute.test_util.get_running_threads", "sys.getrefcount", "time.sleep", "distribute.test_util.has_thread"], "distribute.test_util.get_running_threads": [], "distribute.test_util.has_thread": [], "sys.getrefcount": [], "distribute.test_util.show_backref": [], "gc.collect": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest._create_model_and_run_indefinitely": ["time.sleep", "distribute.test_util.has_thread", "distribute.test_util.has_thread"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testClusterCoordinatorDestroyed": ["distribute.test_util.has_thread"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerPreemptionBetweenFunctions": ["distribute.test_util.has_thread", "distribute.test_util.has_thread", "distribute.test_util.has_thread", "distribute.test_util.has_thread"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerPreemptionMidstFunction": ["distribute.test_util.has_thread", "distribute.test_util.has_thread", "distribute.test_util.has_thread", "time.sleep", "distribute.test_util.has_thread"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testOneWorkerPreemptionWithCancellation": ["<builtin>.range", "time.sleep", "distribute.test_util.has_thread"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testOneWorkerPreemptionWithCancellation.normal_function": ["ops.random_ops.random_uniform", "ops.math_ops.reduce_mean", "ops.math_ops.matmul"], "ops.math_ops.reduce_mean": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testOneWorkerPreemptionWithCancellation.error_function": ["ops.random_ops.random_uniform", "ops.check_ops.assert_non_positive_v2", "ops.math_ops.matmul", "ops.math_ops.reduce_sum"], "ops.math_ops.reduce_sum": [], "ops.check_ops.assert_non_positive_v2": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testOneWorkerPreemptionWithCancellation.long_function": ["ops.random_ops.random_uniform", "ops.math_ops.matmul", "ops.math_ops.range"], "ops.math_ops.range": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testHandleDatasetCreationFailureWithDatasetFn": ["ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testHandleDatasetCreationFailureWithDataset": ["ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerPreemptionErrorType": ["<builtin>.str", "ops.math_ops.range", "time.sleep", "platform.tf_logging.info", "threading.Thread"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerPreemptionErrorType.worker_train_fn": ["ops.random_ops.random_uniform", "ops.math_ops.reduce_mean", "ops.math_ops.matmul"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerPreemptionErrorType.run_fn": ["<builtin>.range", "time.sleep", "ops.math_ops.matmul", "framework.ops.device"], "framework.ops.device": [], "platform.tf_logging.info": [], "<builtin>.str": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerPreemptionErrorTypeWithPythonFunction": ["<builtin>.str", "framework.ops.device", "time.sleep", "platform.tf_logging.info", "threading.Thread"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerPreemptionErrorTypeWithPythonFunction.worker_train_fn": ["ops.random_ops.random_uniform", "ops.math_ops.reduce_mean", "ops.math_ops.matmul"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerPreemptionErrorTypeWithPythonFunction.run_fn": ["<builtin>.range", "ops.math_ops.matmul", "time.sleep", "framework.ops.device"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testPSPreemptionErrorType": ["ops.random_ops.random_uniform", "<builtin>.str", "ops.random_ops.random_uniform", "<builtin>.isinstance", "ops.random_ops.random_uniform", "time.sleep", "framework.ops.device", "platform.tf_logging.info", "threading.Thread", "ops.variables.Variable"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testPSPreemptionErrorType.worker_train_fn": ["ops.random_ops.random_uniform", "ops.math_ops.reduce_mean", "ops.math_ops.matmul"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testPSPreemptionErrorType.run_fn": ["ops.math_ops.matmul", "<builtin>.range", "time.sleep", "framework.ops.device"], "<builtin>.isinstance": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testTwoWorkersPreempted": ["eager.context.check_alive", "eager.context.check_alive", "time.sleep", "eager.context.check_alive"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerContinuousFailure": ["eager.context.check_alive", "eager.context.check_alive", "time.sleep", "eager.context.check_alive"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testPSFailureWhileRecoveryFromWokerFailure": ["threading.Thread", "eager.context.check_alive", "time.sleep", "eager.context.check_alive"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testPSFailureWhileRecoveryFromWokerFailure.kill": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testNumpyFetchedAfterWorkerFailure": ["ops.variables.Variable"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testNumpyFetchedAfterWorkerFailure.worker_fn": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testTensorGotAfterWorkerFailure": ["<builtin>.range", "ops.variables.Variable", "time.sleep"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testTensorGotAfterWorkerFailure.worker_fn": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testClusterStateNotDisrupted": ["ops.variables.Variable", "ops.variables.Variable", "training.coordinator.Coordinator"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testJoinRaisesUnavailableErrorAtPsFailure": ["training.coordinator.Coordinator", "time.sleep"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testScheduleRaisesUnavailableErrorAtPsFailure": ["eager.def_function.function", "eager.def_function.function", "time.sleep"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testScheduleRaisesUnavailableErrorAtPsFailure.<lambda1>": [], "eager.def_function.function": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerExecutionAfterPsFailureRaisesExpectedError": ["eager.def_function.function", "<builtin>.AssertionError", "eager.def_function.function", "time.sleep", "framework.ops.device", "coordinator.cluster_coordinator._is_ps_failure", "<builtin>.range"], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testWorkerExecutionAfterPsFailureRaisesExpectedError.trivial_function": [], "coordinator.cluster_coordinator._is_ps_failure": [], "<builtin>.AssertionError": [], "coordinator.fault_tolerance_test.BaseFaultToleranceTest.testAsyncWaitIsNoOp": ["eager.context.check_alive", "eager.context.async_wait", "eager.context.async_wait", "time.sleep", "eager.context.async_wait"], "eager.context.async_wait": [], "coordinator.fault_tolerance_test.MultiWorkerFaultToleranceTest.setUp": ["<builtin>.super"], "coordinator.fault_tolerance_test.SingleWorkerFaultToleranceTest.setUp": ["<builtin>.super"], "compat.v2_compat.enable_v2_behavior": [], "distribute.multi_process_runner.test_main": []}