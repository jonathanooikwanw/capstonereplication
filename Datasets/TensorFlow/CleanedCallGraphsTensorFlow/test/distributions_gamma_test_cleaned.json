{"distributions.gamma_test": ["platform.test.main", "platform.test.main"], "distributions.gamma_test.try_import": ["importlib.import_module", "platform.tf_logging.warning", "<builtin>.str"], "importlib.import_module": [], "<builtin>.str": [], "platform.tf_logging.warning": [], "distributions.gamma_test.GammaTest.testGammaShape": ["framework.tensor_shape.TensorShape", "distributions.gamma.Gamma", "test.TestCase.evaluate", "test.TestCase.assertEqual", "test.TestCase.assertAllEqual", "framework.constant_op.constant"], "framework.constant_op.constant": [], "distributions.gamma.Gamma": [], "test.TestCase.evaluate": [], "test.TestCase.assertEqual": [], "framework.tensor_shape.TensorShape": [], "test.TestCase.assertAllEqual": [], "distributions.gamma_test.GammaTest.testGammaLogPDF": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "numpy.exp", "test.TestCase.assertEqual", "numpy.array", "framework.constant_op.constant"], "numpy.array": [], "test.TestCase.assertAllClose": [], "numpy.exp": [], "distributions.gamma_test.GammaTest.testGammaLogPDFBoundary": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "numpy.array", "numpy.log"], "numpy.log": [], "distributions.gamma_test.GammaTest.testGammaLogPDFMultidimensional": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "numpy.exp", "test.TestCase.assertEqual", "numpy.array", "framework.constant_op.constant"], "distributions.gamma_test.GammaTest.testGammaLogPDFMultidimensionalBroadcasting": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "numpy.exp", "test.TestCase.assertEqual", "numpy.array", "framework.constant_op.constant"], "distributions.gamma_test.GammaTest.testGammaCDF": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "numpy.array", "framework.constant_op.constant"], "distributions.gamma_test.GammaTest.testGammaMean": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "numpy.array"], "distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsIsFalseWorksWhenAllBatchMembersAreDefined": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "numpy.array"], "distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsFalseRaisesForUndefinedBatchMembers": ["test.TestCase.evaluate", "test.TestCase.assertRaisesOpError", "distributions.gamma.Gamma", "numpy.array"], "test.TestCase.assertRaisesOpError": [], "distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsIsTrueReturnsNaNforUndefinedBatchMembers": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "numpy.array"], "distributions.gamma_test.GammaTest.testGammaVariance": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "numpy.array"], "distributions.gamma_test.GammaTest.testGammaStd": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "numpy.array"], "distributions.gamma_test.GammaTest.testGammaEntropy": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "numpy.array"], "distributions.gamma_test.GammaTest.testGammaSampleSmallAlpha": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "test.TestCase.assertTrue", "framework.constant_op.constant", "framework.constant_op.constant"], "distributions.gamma_test.GammaTest._kstest": [], "test.TestCase.assertTrue": [], "distributions.gamma_test.GammaTest.testGammaSample": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "test.TestCase.assertTrue", "framework.constant_op.constant", "framework.constant_op.constant"], "distributions.gamma_test.GammaTest.testGammaFullyReparameterized": ["test.TestCase.assertIsNotNone", "distributions.gamma.Gamma", "eager.backprop.GradientTape", "framework.constant_op.constant"], "eager.backprop.GradientTape": [], "test.TestCase.assertIsNotNone": [], "distributions.gamma_test.GammaTest.testGammaSampleMultiDimensional": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "numpy.reshape", "numpy.zeros_like", "test.TestCase.assertEqual", "numpy.array", "test.TestCase.assertLess", "<builtin>.enumerate", "test.TestCase.assertLess", "numpy.arange"], "numpy.arange": [], "numpy.zeros_like": [], "numpy.reshape": [], "<builtin>.enumerate": [], "test.TestCase.assertLess": [], "distributions.gamma_test.GammaTest.testGammaPdfOfSampleMultiDims": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.evaluate", "test.TestCase.assertEqual", "numpy.array"], "distributions.gamma_test.GammaTest._assertIntegral": ["<builtin>.zip", "<builtin>.sorted", "test.TestCase.assertNear"], "<builtin>.zip": [], "distributions.gamma_test.GammaTest._assertIntegral.<lambda1>": [], "<builtin>.sorted": [], "test.TestCase.assertNear": [], "distributions.gamma_test.GammaTest.testGammaNonPositiveInitializationParamsRaises": ["test.TestCase.assertRaisesOpError", "distributions.gamma.Gamma", "test.TestCase.evaluate", "framework.constant_op.constant"], "distributions.gamma_test.GammaTest.testGammaWithSoftplusConcentrationRate": ["distributions.gamma.GammaWithSoftplusConcentrationRate", "test.TestCase.evaluate", "ops.nn_ops.softplus", "test.TestCase.assertAllEqual", "framework.constant_op.constant"], "distributions.gamma.GammaWithSoftplusConcentrationRate": [], "ops.nn_ops.softplus": [], "distributions.gamma_test.GammaTest.testGammaGammaKL": ["distributions.gamma.Gamma", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "test.TestCase.assertEqual", "ops.math_ops.reduce_mean", "numpy.array", "<builtin>.int", "distributions.kullback_leibler.kl_divergence", "numpy.log"], "<builtin>.int": [], "ops.math_ops.reduce_mean": [], "distributions.kullback_leibler.kl_divergence": [], "platform.test.main": []}