{"optimization.map_and_filter_fusion_test": ["platform.test.main"], "optimization.map_and_filter_fusion_test._test_combinations": ["<builtin>.enumerate", "functools.reduce"], "optimization.map_and_filter_fusion_test._test_combinations.<lambda1>": [], "optimization.map_and_filter_fusion_test._test_combinations.<lambda2>": [], "optimization.map_and_filter_fusion_test._test_combinations.<lambda3>": [], "optimization.map_and_filter_fusion_test._test_combinations.increment_and_square": [], "optimization.map_and_filter_fusion_test._test_combinations.<lambda4>": ["framework.constant_op.constant"], "framework.constant_op.constant": [], "optimization.map_and_filter_fusion_test._test_combinations.<lambda5>": ["ops.math_ops.equal"], "ops.math_ops.equal": [], "optimization.map_and_filter_fusion_test._test_combinations.<lambda6>": ["ops.math_ops.equal"], "optimization.map_and_filter_fusion_test._test_combinations.<lambda7>": ["ops.math_ops.greater"], "ops.math_ops.greater": [], "<builtin>.enumerate": [], "optimization.map_and_filter_fusion_test._test_combinations.<lambda8>": [], "optimization.map_and_filter_fusion_test._test_combinations.<lambda9>": [], "optimization.map_and_filter_fusion_test._test_combinations.<lambda10>": ["framework.constant_op.constant"], "optimization.map_and_filter_fusion_test._test_combinations.<lambda11>": ["ops.math_ops.equal", "ops.math_ops.cast"], "ops.math_ops.cast": [], "optimization.map_and_filter_fusion_test._test_combinations.reduce_fn": ["framework.combinations.NamedObject", "framework.combinations.combine"], "framework.combinations.NamedObject": [], "framework.combinations.combine": [], "functools.reduce": [], "optimization.map_and_filter_fusion_test.MapAndFilterFusionTest._testDataset": ["<builtin>.isinstance", "test_base.DatasetTestBase.assertDatasetProduces", "test_base.DatasetTestBase.assertDatasetProduces", "<builtin>.range", "test_base.DatasetTestBase.assertDatasetProduces", "test_base.DatasetTestBase.evaluate"], "<builtin>.range": [], "optimization.map_and_filter_fusion_test.MapAndFilterFusionTest.testCapturedInputs.<lambda1>": [], "<builtin>.isinstance": [], "optimization.map_and_filter_fusion_test.MapAndFilterFusionTest.testCapturedInputs.predicate": ["ops.math_ops.less", "ops.math_ops.cast"], "test_base.DatasetTestBase.evaluate": [], "test_base.DatasetTestBase.assertDatasetProduces": [], "kernel_tests.test_base.default_test_combinations": [], "optimization.map_and_filter_fusion_test.MapAndFilterFusionTest": ["framework.combinations.generate", "kernel_tests.test_base.default_test_combinations", "framework.combinations.times", "framework.combinations.times"], "framework.combinations.times": [], "framework.combinations.generate": [], "optimization.map_and_filter_fusion_test.MapAndFilterFusionTest.testMapAndFilterFusion": ["ops.testing.assert_next", "ops.options.Options", "ops.options.Options", "dataset_ops.Dataset.range"], "ops.testing.assert_next": [], "dataset_ops.Dataset.range": [], "ops.options.Options": [], "optimization.map_and_filter_fusion_test.MapAndFilterFusionTest.testCapturedInputs": ["ops.math_ops.mul", "ops.testing.assert_next", "ops.testing.assert_next", "dataset_ops.Dataset.range", "framework.constant_op.constant", "ops.options.Options"], "ops.math_ops.mul": [], "ops.math_ops.less": [], "platform.test.main": []}