{"framework.test_util_test": ["platform.googletest.main"], "framework.test_util_test.TestUtilTest.test_assert_ops_in_graph": ["test_util.TensorFlowTestCase.assertRaises", "framework.test_util.assert_ops_in_graph", "framework.ops.get_default_graph", "framework.ops.Graph", "framework.constant_op.constant"], "framework.ops.Graph": [], "framework.constant_op.constant": [], "framework.ops.get_default_graph": [], "framework.test_util.assert_ops_in_graph": [], "test_util.TensorFlowTestCase.assertRaises": [], "framework.test_util_test.TestUtilTest": ["framework.test_util.disable_ubsan", "framework.test_util.disable_msan", "framework.test_util.run_in_graph_and_eager_modes", "<builtin>.dict", "framework.test_util.disable_asan", "framework.combinations.generate", "framework.test_util.skip_if", "framework.test_util.disable_tsan", "framework.test_util.run_deprecated_v1", "absl.testing.parameterized.named_parameters", "framework.combinations.combine"], "framework.test_util.run_deprecated_v1": [], "framework.test_util_test.TestUtilTest.test_session_functions": ["test_util.TensorFlowTestCase.assertRaises", "framework.ops.Graph", "test_util.TensorFlowTestCase.test_session", "test_util.TensorFlowTestCase.cached_session", "weakref.ref", "test_util.TensorFlowTestCase.session"], "test_util.TensorFlowTestCase.test_session": [], "weakref.ref": [], "test_util.TensorFlowTestCase.cached_session": [], "test_util.TensorFlowTestCase.session": [], "framework.test_util_test.TestUtilTest.test_assert_equal_graph_def": ["test_util.TensorFlowTestCase.assertRaisesRegex", "framework.test_util.assert_equal_graph_def", "<builtin>.str", "framework.ops.Graph", "test_util.TensorFlowTestCase.assertNotEqual", "framework.constant_op.constant"], "<builtin>.str": [], "test_util.TensorFlowTestCase.assertNotEqual": [], "framework.test_util.assert_equal_graph_def": [], "test_util.TensorFlowTestCase.assertRaisesRegex": [], "framework.test_util_test.TestUtilTest.test_assert_equal_graph_def_hash_table": ["test_util.TensorFlowTestCase.assertRaisesRegex", "framework.test_util.assert_equal_graph_def", "framework.test_util.assert_equal_graph_def"], "framework.test_util_test.TestUtilTest.test_assert_equal_graph_def_hash_table.get_graph_def": ["framework.ops.Graph", "framework.constant_op.constant", "ops.lookup_ops.StaticHashTable", "ops.lookup_ops.KeyValueTensorInitializer"], "ops.lookup_ops.KeyValueTensorInitializer": [], "ops.lookup_ops.StaticHashTable": [], "framework.test_util_test.TestUtilTest.testIsGoogleCudaEnabled": ["<builtin>.print", "framework.test_util.IsGoogleCudaEnabled"], "framework.test_util.IsGoogleCudaEnabled": [], "<builtin>.print": [], "framework.test_util_test.TestUtilTest.testIsMklEnabled": ["framework.test_util.IsMklEnabled", "<builtin>.print"], "framework.test_util.IsMklEnabled": [], "framework.test_util.disable_asan": [], "framework.test_util_test.TestUtilTest.testDisableAsan": ["test_util.TensorFlowTestCase.assertFalse", "python.pywrap_sanitizers.is_asan_enabled"], "python.pywrap_sanitizers.is_asan_enabled": [], "test_util.TensorFlowTestCase.assertFalse": [], "framework.test_util.disable_msan": [], "framework.test_util_test.TestUtilTest.testDisableMsan": ["python.pywrap_sanitizers.is_msan_enabled", "test_util.TensorFlowTestCase.assertFalse"], "python.pywrap_sanitizers.is_msan_enabled": [], "framework.test_util.disable_tsan": [], "framework.test_util_test.TestUtilTest.testDisableTsan": ["python.pywrap_sanitizers.is_tsan_enabled", "test_util.TensorFlowTestCase.assertFalse"], "python.pywrap_sanitizers.is_tsan_enabled": [], "framework.test_util.disable_ubsan": [], "framework.test_util_test.TestUtilTest.testDisableUbsan": ["test_util.TensorFlowTestCase.assertFalse", "python.pywrap_sanitizers.is_ubsan_enabled"], "python.pywrap_sanitizers.is_ubsan_enabled": [], "framework.test_util.run_in_graph_and_eager_modes": [], "framework.test_util_test.TestUtilTest.testAssertProtoEqualsStr": ["framework.graph_pb2.GraphDef", "test_util.TensorFlowTestCase.assertProtoEquals", "google.protobuf.text_format.Merge"], "framework.graph_pb2.GraphDef": [], "google.protobuf.text_format.Merge": [], "test_util.TensorFlowTestCase.assertProtoEquals": [], "framework.test_util_test.TestUtilTest.testAssertProtoEqualsAny": ["test_util.TensorFlowTestCase.assertProtoEquals", "test_util.TensorFlowTestCase.assertRaisesRegex", "protobuf.meta_graph_pb2.MetaGraphDef"], "protobuf.meta_graph_pb2.MetaGraphDef": [], "framework.test_util_test.TestUtilTest.testNDArrayNear": ["test_util.TensorFlowTestCase.assertTrue", "numpy.array", "test_util.TensorFlowTestCase.assertFalse", "test_util.TensorFlowTestCase._NDArrayNear"], "numpy.array": [], "test_util.TensorFlowTestCase._NDArrayNear": [], "test_util.TensorFlowTestCase.assertTrue": [], "framework.test_util_test.TestUtilTest.testCheckedThreadSucceeds": ["threading.Event", "test_util.TensorFlowTestCase.checkedThread", "test_util.TensorFlowTestCase.assertTrue", "test_util.TensorFlowTestCase.assertFalse"], "framework.test_util_test.TestUtilTest.testCheckedThreadSucceeds.noop": [], "threading.Event": [], "test_util.TensorFlowTestCase.checkedThread": [], "framework.test_util_test.TestUtilTest.testCheckedThreadFails": ["test_util.TensorFlowTestCase.assertRaises", "<builtin>.str", "test_util.TensorFlowTestCase.checkedThread", "test_util.TensorFlowTestCase.assertTrue"], "framework.test_util_test.TestUtilTest.testCheckedThreadFails.err_func": [], "framework.test_util_test.TestUtilTest.testCheckedThreadWithWrongAssertionFails": ["test_util.TensorFlowTestCase.assertRaises", "<builtin>.str", "test_util.TensorFlowTestCase.checkedThread", "test_util.TensorFlowTestCase.assertTrue"], "framework.test_util_test.TestUtilTest.testCheckedThreadWithWrongAssertionFails.err_func": ["test_util.TensorFlowTestCase.assertTrue"], "framework.test_util_test.TestUtilTest.testMultipleThreadsWithOneFailure": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.checkedThread", "<builtin>.range", "<builtin>.enumerate"], "framework.test_util_test.TestUtilTest.testMultipleThreadsWithOneFailure.err_func": ["test_util.TensorFlowTestCase.assertTrue"], "<builtin>.range": [], "<builtin>.enumerate": [], "framework.test_util_test.TestUtilTest._WeMustGoDeeper": ["framework.ops.Operation", "test_util.TensorFlowTestCase.assertRaisesOpError", "framework.errors.UnauthenticatedError", "framework.ops.get_default_graph", "framework.ops.Graph", "framework.ops._NodeDef"], "test_util.TensorFlowTestCase.assertRaisesOpError": [], "framework.ops._NodeDef": [], "framework.ops.Operation": [], "framework.errors.UnauthenticatedError": [], "framework.test_util_test.TestUtilTest.testAssertRaisesOpErrorDoesNotPassMessageDueToLeakedStack": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertRaises"], "framework.test_util_test.TestUtilTest.testAllCloseTensors": ["ops.math_ops.add", "framework.constant_op.constant", "test_util.TensorFlowTestCase.assertAllClose"], "ops.math_ops.add": [], "test_util.TensorFlowTestCase.assertAllClose": [], "framework.test_util_test.TestUtilTest.testAllCloseScalars": ["test_util.TensorFlowTestCase.assertRaisesRegex", "test_util.TensorFlowTestCase.assertAllClose"], "framework.test_util_test.TestUtilTest.testAllCloseList": ["test_util.TensorFlowTestCase.assertRaisesRegex", "test_util.TensorFlowTestCase.assertAllClose"], "framework.test_util_test.TestUtilTest.testAllCloseDictToNonDict": ["test_util.TensorFlowTestCase.assertRaisesRegex", "test_util.TensorFlowTestCase.assertAllClose"], "framework.test_util_test.TestUtilTest.testAllCloseNamedtuples": ["numpy.ones", "test_util.TensorFlowTestCase.assertAllClose", "collections.namedtuple"], "numpy.ones": [], "collections.namedtuple": [], "framework.test_util_test.TestUtilTest.testAllCloseDicts": ["<builtin>.dict", "test_util.TensorFlowTestCase.assertRaisesRegex", "test_util.TensorFlowTestCase.assertAllClose", "numpy.array", "numpy.ones"], "<builtin>.dict": [], "framework.test_util_test.TestUtilTest.testAllCloseListOfNamedtuples": ["numpy.array", "test_util.TensorFlowTestCase.assertAllClose", "collections.namedtuple"], "framework.test_util_test.TestUtilTest.testAllCloseNestedStructure": ["test_util.TensorFlowTestCase.assertRaisesRegex", "numpy.ones", "test_util.TensorFlowTestCase.assertAllClose", "copy.deepcopy"], "copy.deepcopy": [], "framework.test_util_test.TestUtilTest.testArrayNear": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertArrayNear"], "test_util.TensorFlowTestCase.assertArrayNear": [], "framework.test_util.skip_if": [], "framework.test_util_test.TestUtilTest.testForceGPU": ["test_util.TensorFlowTestCase.assertRaises", "framework.constant_op.constant", "test_util.TensorFlowTestCase.test_session", "ops.control_flow_ops.Assert"], "ops.control_flow_ops.Assert": [], "framework.test_util_test.TestUtilTest.testAssertAllCloseAccordingToType": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllCloseAccordingToType", "framework.constant_op.constant", "numpy.asarray"], "test_util.TensorFlowTestCase.assertAllCloseAccordingToType": [], "numpy.asarray": [], "framework.test_util_test.TestUtilTest.testAssertAllEqual": ["ops.variables.Variable", "test_util.TensorFlowTestCase.assertRaisesRegex", "ops.math_ops.add", "test_util.TensorFlowTestCase.assertAllEqual", "ops.variables.global_variables_initializer", "test_util.TensorFlowTestCase.evaluate", "framework.constant_op.constant"], "ops.variables.Variable": [], "ops.variables.global_variables_initializer": [], "test_util.TensorFlowTestCase.evaluate": [], "test_util.TensorFlowTestCase.assertAllEqual": [], "framework.test_util_test.TestUtilTest.testAssertNotAllEqual": ["ops.variables.Variable", "test_util.TensorFlowTestCase.assertRaisesRegex", "ops.math_ops.add", "test_util.TensorFlowTestCase.assertNotAllEqual", "ops.variables.global_variables_initializer", "test_util.TensorFlowTestCase.evaluate", "framework.constant_op.constant"], "test_util.TensorFlowTestCase.assertNotAllEqual": [], "framework.test_util_test.TestUtilTest.testAssertNotAllClose": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllClose", "ops.math_ops.add", "test_util.TensorFlowTestCase.assertNotAllClose", "framework.constant_op.constant"], "test_util.TensorFlowTestCase.assertNotAllClose": [], "framework.test_util_test.TestUtilTest.testAssertNotAllCloseRTol": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllClose", "ops.math_ops.add", "test_util.TensorFlowTestCase.assertNotAllClose", "framework.constant_op.constant"], "framework.test_util_test.TestUtilTest.testAssertNotAllCloseATol": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllClose", "ops.math_ops.add", "test_util.TensorFlowTestCase.assertNotAllClose", "framework.constant_op.constant"], "framework.test_util_test.TestUtilTest.testAssertAllGreaterLess": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllClose", "test_util.TensorFlowTestCase.assertAllGreater", "ops.math_ops.add", "test_util.TensorFlowTestCase.assertAllLess", "framework.constant_op.constant"], "test_util.TensorFlowTestCase.assertAllGreater": [], "test_util.TensorFlowTestCase.assertAllLess": [], "framework.test_util_test.TestUtilTest.testAssertAllGreaterLessEqual": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllLessEqual", "ops.math_ops.add", "test_util.TensorFlowTestCase.assertAllGreaterEqual", "test_util.TensorFlowTestCase.assertAllEqual", "framework.constant_op.constant"], "test_util.TensorFlowTestCase.assertAllGreaterEqual": [], "test_util.TensorFlowTestCase.assertAllLessEqual": [], "framework.test_util_test.TestUtilTest.testAssertAllInRangeWithNonNumericValuesFails": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllInRange", "framework.constant_op.constant"], "test_util.TensorFlowTestCase.assertAllInRange": [], "framework.test_util_test.TestUtilTest.testAssertAllInRange": ["test_util.TensorFlowTestCase.assertAllInRange", "framework.constant_op.constant", "test_util.TensorFlowTestCase.assertRaises"], "framework.test_util_test.TestUtilTest.testAssertAllInRangeScalar": ["test_util.TensorFlowTestCase.assertAllInRange", "framework.constant_op.constant", "test_util.TensorFlowTestCase.assertRaises"], "framework.test_util_test.TestUtilTest.testAssertAllInRangeErrorMessageEllipses": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllInRange", "numpy.array", "framework.constant_op.constant"], "framework.test_util_test.TestUtilTest.testAssertAllInRangeDetectsNaNs": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertAllInRange", "framework.constant_op.constant"], "framework.test_util_test.TestUtilTest.testAssertAllInRangeWithInfinities": ["test_util.TensorFlowTestCase.assertAllInRange", "framework.constant_op.constant", "test_util.TensorFlowTestCase.assertRaises"], "framework.test_util_test.TestUtilTest.testAssertAllInSet": ["test_util.TensorFlowTestCase.assertRaises", "framework.constant_op.constant", "test_util.TensorFlowTestCase.assertAllInSet"], "test_util.TensorFlowTestCase.assertAllInSet": [], "framework.test_util_test.TestUtilTest.testRandomSeed": ["test_util.TensorFlowTestCase.assertEqual", "test_util.TensorFlowTestCase.setUp", "random.randint", "eager.context.eager_mode", "test_util.TensorFlowTestCase.assertAllEqual", "ops.random_ops.random_normal", "numpy.random.rand"], "eager.context.eager_mode": [], "test_util.TensorFlowTestCase.setUp": [], "random.randint": [], "numpy.random.rand": [], "ops.random_ops.random_normal": [], "test_util.TensorFlowTestCase.assertEqual": [], "framework.test_util_test.TestUtilTest.test_callable_evaluate": ["eager.context.eager_mode", "test_util.TensorFlowTestCase.assertEqual", "test_util.TensorFlowTestCase.evaluate"], "framework.test_util_test.TestUtilTest.test_callable_evaluate.model": ["ops.resource_variable_ops.ResourceVariable"], "ops.resource_variable_ops.ResourceVariable": [], "framework.test_util_test.TestUtilTest.test_nested_tensors_evaluate": ["test_util.TensorFlowTestCase.evaluate", "test_util.TensorFlowTestCase.assertEqual", "framework.constant_op.constant"], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_modes": ["<builtin>.len", "test_util.TensorFlowTestCase.assertEqual", "<builtin>.set", "framework.test_util.run_in_graph_and_eager_modes"], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_modes.inc": ["eager.context.executing_eagerly"], "eager.context.executing_eagerly": [], "<builtin>.len": [], "<builtin>.set": [], "framework.test_util_test.TestUtilTest.test_get_node_def_from_graph": ["framework.graph_pb2.GraphDef", "framework.test_util.get_node_def_from_graph", "test_util.TensorFlowTestCase.assertIs", "test_util.TensorFlowTestCase.assertIsNone"], "framework.test_util.get_node_def_from_graph": [], "test_util.TensorFlowTestCase.assertIs": [], "test_util.TensorFlowTestCase.assertIsNone": [], "framework.test_util_test.TestUtilTest.test_run_in_eager_and_graph_modes_test_class": ["test_util.TensorFlowTestCase.assertRaisesRegex"], "framework.test_util_test.TestUtilTest.test_run_in_eager_and_graph_modes_skip_graph_runs_eager": ["test_util.TensorFlowTestCase.assertEqual", "framework.test_util.run_in_graph_and_eager_modes"], "framework.test_util_test.TestUtilTest.test_run_in_eager_and_graph_modes_skip_graph_runs_eager._test": ["eager.context.executing_eagerly"], "framework.test_util_test.TestUtilTest.test_run_in_eager_and_graph_modes_skip_eager_runs_graph": ["test_util.TensorFlowTestCase.assertEqual", "framework.test_util.run_in_graph_and_eager_modes"], "framework.test_util_test.TestUtilTest.test_run_in_eager_and_graph_modes_skip_eager_runs_graph._test": ["eager.context.executing_eagerly"], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_modes_setup_in_same_mode": ["test_util.TensorFlowTestCase.__init__", "test_util.TensorFlowTestCase.__init__", "test_util.TensorFlowTestCase.assertEqual", "test_util.TensorFlowTestCase.assertEqual"], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_modes_setup_in_same_mode.<lambda1>": ["eager.context.executing_eagerly"], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_modes_setup_in_same_mode.ExampleTest.runTest": [], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_modes_setup_in_same_mode.ExampleTest.setUp": ["eager.context.executing_eagerly"], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_modes_setup_in_same_mode.ExampleTest": ["framework.test_util.run_in_graph_and_eager_modes"], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_modes_setup_in_same_mode.ExampleTest.testBody": ["framework.test_util.run_in_graph_and_eager_modes"], "test_util.TensorFlowTestCase.__init__": [], "absl.testing.parameterized.named_parameters": [], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_works_with_parameterized_keyword": ["test_util.TensorFlowTestCase.assertEqual"], "framework.combinations.combine": [], "framework.combinations.generate": [], "framework.test_util_test.TestUtilTest.test_run_in_graph_and_eager_works_with_combinations": ["test_util.TensorFlowTestCase.assertEqual"], "framework.test_util_test.TestUtilTest.test_build_as_function_and_v1_graph": ["absl.testing.parameterized.TestCase.test_modes_v1_graph", "test_util.TensorFlowTestCase.assertTrue", "absl.testing.parameterized.TestCase.test_modes_function", "test_util.TensorFlowTestCase.assertTrue"], "framework.test_util_test.TestUtilTest.test_build_as_function_and_v1_graph.GraphModeAndFunctionTest.__init__": ["<builtin>.super"], "<builtin>.super": [], "framework.test_util_test.TestUtilTest.test_build_as_function_and_v1_graph.GraphModeAndFunctionTest.runTest": [], "framework.test_util_test.TestUtilTest.test_build_as_function_and_v1_graph.GraphModeAndFunctionTest": ["framework.test_util.build_as_function_and_v1_graph"], "framework.test_util.build_as_function_and_v1_graph": [], "framework.test_util_test.TestUtilTest.test_build_as_function_and_v1_graph.GraphModeAndFunctionTest.test_modes": ["test_util.TensorFlowTestCase.assertFalse", "framework.ops.inside_function"], "framework.ops.inside_function": [], "absl.testing.parameterized.TestCase.test_modes_v1_graph": [], "absl.testing.parameterized.TestCase.test_modes_function": [], "framework.test_util_test.TestUtilTest.test_consistent_random_seed_in_assert_all_equal": ["framework.random_seed.set_seed", "test_util.TensorFlowTestCase.assertAllEqual", "ops.random_ops.random_shuffle"], "framework.random_seed.set_seed": [], "ops.random_ops.random_shuffle": [], "framework.test_util_test.TestUtilTest.test_with_forward_compatibility_horizons": ["test_util.TensorFlowTestCase.assertEqual", "test_util.TensorFlowTestCase.assertEqual", "<builtin>.set", "framework.test_util.with_forward_compatibility_horizons"], "framework.test_util_test.TestUtilTest.test_with_forward_compatibility_horizons.some_function_with_forward_compat_behavior": ["compat.compat.forward_compatible"], "compat.compat.forward_compatible": [], "framework.test_util.with_forward_compatibility_horizons": [], "framework.test_util_test.TestUtilTest.test_with_forward_compatibility_horizons.some_test": ["compat.compat.forward_compatible"], "framework.test_util_test.SkipTestTest._verify_test_in_set_up_or_tear_down": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertRaisesRegex", "<builtin>.RuntimeError", "framework.test_util.skip_if_error", "<builtin>.ValueError"], "framework.test_util.skip_if_error": [], "<builtin>.ValueError": [], "<builtin>.RuntimeError": [], "framework.test_util_test.SkipTestTest.setUp": ["framework.test_util.skip_if_error", "<builtin>.super"], "framework.test_util_test.SkipTestTest.tearDown": ["framework.test_util.skip_if_error", "<builtin>.super"], "framework.test_util_test.SkipTestTest.test_skip_if_error_should_skip": ["test_util.TensorFlowTestCase.assertRaises", "<builtin>.ValueError", "framework.test_util.skip_if_error"], "framework.test_util_test.SkipTestTest.test_skip_if_error_should_skip_with_list": ["test_util.TensorFlowTestCase.assertRaises", "<builtin>.ValueError", "framework.test_util.skip_if_error"], "framework.test_util_test.SkipTestTest.test_skip_if_error_should_skip_without_expected_message": ["test_util.TensorFlowTestCase.assertRaises", "<builtin>.ValueError", "framework.test_util.skip_if_error"], "framework.test_util_test.SkipTestTest.test_skip_if_error_should_skip_without_error_message": ["test_util.TensorFlowTestCase.assertRaises", "<builtin>.ValueError", "framework.test_util.skip_if_error"], "framework.test_util_test.SkipTestTest.test_skip_if_error_should_raise_message_mismatch": ["test_util.TensorFlowTestCase.assertRaisesRegex", "<builtin>.ValueError", "framework.test_util.skip_if_error", "<builtin>.RuntimeError"], "framework.test_util_test.SkipTestTest.test_skip_if_error_should_raise_no_message": ["test_util.TensorFlowTestCase.assertRaisesRegex", "<builtin>.ValueError", "framework.test_util.skip_if_error", "<builtin>.RuntimeError"], "framework.test_util_test.GraphAndEagerNoVariableSharing.setUp": [], "framework.test_util_test.GraphAndEagerNoVariableSharing": ["framework.test_util.run_in_graph_and_eager_modes"], "framework.test_util_test.GraphAndEagerNoVariableSharing.test_no_variable_sharing": ["ops.variable_scope.get_variable", "numpy.array"], "ops.variable_scope.get_variable": [], "framework.test_util_test.GarbageCollectionTest.test_no_reference_cycle_decorator": ["test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertRaises", "test_util.TensorFlowTestCase.assertRaises"], "framework.test_util_test.GarbageCollectionTest.test_no_reference_cycle_decorator.ReferenceCycleTest.__init__": [], "framework.test_util_test.GarbageCollectionTest.test_no_reference_cycle_decorator.ReferenceCycleTest": ["framework.test_util.assert_no_garbage_created"], "framework.test_util.assert_no_garbage_created": [], "framework.test_util_test.GarbageCollectionTest.test_no_reference_cycle_decorator.ReferenceCycleTest.test_has_cycle": [], "framework.test_util_test.GarbageCollectionTest.test_no_reference_cycle_decorator.ReferenceCycleTest.test_has_no_cycle": [], "framework.test_util_test.GarbageCollectionTest": ["framework.test_util.run_in_graph_and_eager_modes"], "framework.test_util_test.GarbageCollectionTest.test_no_leaked_tensor_decorator": ["framework.test_util.run_in_graph_and_eager_modes", "test_util.TensorFlowTestCase.assertRaisesRegex", "test_util.TensorFlowTestCase.assertRaisesRegex", "test_util.TensorFlowTestCase.assertRaisesRegex"], "framework.test_util_test.GarbageCollectionTest.test_no_leaked_tensor_decorator.LeakedTensorTest.__init__": [], "framework.test_util_test.GarbageCollectionTest.test_no_leaked_tensor_decorator.LeakedTensorTest": ["framework.test_util.assert_no_new_tensors"], "framework.test_util.assert_no_new_tensors": [], "framework.test_util_test.GarbageCollectionTest.test_no_leaked_tensor_decorator.LeakedTensorTest.test_has_leak": ["framework.constant_op.constant"], "framework.test_util_test.GarbageCollectionTest.test_no_leaked_tensor_decorator.LeakedTensorTest.test_has_no_leak": ["framework.constant_op.constant"], "framework.test_util_test.GarbageCollectionTest.test_no_new_objects_decorator": ["unittest.TestCase.run", "framework.constant_op.constant", "test_util.TensorFlowTestCase.assertTrue"], "framework.test_util_test.GarbageCollectionTest.test_no_new_objects_decorator.LeakedObjectTest.__init__": ["<builtin>.super"], "framework.test_util_test.GarbageCollectionTest.test_no_new_objects_decorator.LeakedObjectTest": ["framework.test_util.assert_no_new_pyobjects_executing_eagerly", "unittest.expectedFailure"], "unittest.expectedFailure": [], "framework.test_util.assert_no_new_pyobjects_executing_eagerly": [], "framework.test_util_test.GarbageCollectionTest.test_no_new_objects_decorator.LeakedObjectTest.test_has_leak": [], "framework.test_util_test.GarbageCollectionTest.test_no_new_objects_decorator.LeakedObjectTest.test_has_no_leak": [], "unittest.TestCase.run": [], "framework.test_util_test.RunFunctionsEagerlyInV2Test": ["absl.testing.parameterized.named_parameters"], "framework.test_util_test.RunFunctionsEagerlyInV2Test.test_run_functions_eagerly": ["framework.test_util.run_functions_eagerly", "<builtin>.isinstance", "eager.context.executing_eagerly", "eager.context.executing_eagerly", "test_util.TensorFlowTestCase.assertTrue", "framework.constant_op.constant"], "framework.test_util_test.RunFunctionsEagerlyInV2Test.test_run_functions_eagerly.add_two": ["<builtin>.range"], "framework.test_util.run_functions_eagerly": [], "<builtin>.isinstance": [], "platform.googletest.main": []}