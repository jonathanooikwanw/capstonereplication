{"pyct.transformer_test": ["platform.test.main"], "pyct.transformer_test.TransformerTest._simple_context": ["pyct.transformer.EntityInfo", "pyct.transformer.Context"], "pyct.transformer.EntityInfo": [], "pyct.transformer.Context": [], "pyct.transformer_test.TransformerTest.assertSameAnno": ["pyct.anno.getanno", "test.TestCase.assertIs"], "pyct.anno.getanno": [], "test.TestCase.assertIs": [], "pyct.transformer_test.TransformerTest.assertDifferentAnno": ["pyct.anno.getanno", "test.TestCase.assertIsNot"], "test.TestCase.assertIsNot": [], "pyct.transformer_test.TransformerTest.test_state_tracking": ["test.TestCase.assertIsNot", "test.TestCase.assertIsNot", "transformer.Base.__init__", "pyct.parser.parse_entity", "pyct.parser.parse_entity", "pyct.parser.parse_entity"], "pyct.transformer_test.TransformerTest.test_state_tracking.TestTransformer.visit": ["pyct.anno.setanno", "<builtin>.super"], "pyct.anno.setanno": [], "<builtin>.super": [], "pyct.transformer_test.TransformerTest.test_state_tracking.TestTransformer.visit_While": ["transformer.Base.generic_visit"], "transformer.Base.generic_visit": [], "pyct.transformer_test.TransformerTest.test_state_tracking.TestTransformer.visit_If": ["transformer.Base.generic_visit"], "transformer.Base.__init__": [], "pyct.transformer_test.TransformerTest.test_state_tracking.test_function": [], "pyct.parser.parse_entity": [], "pyct.transformer_test.TransformerTest.test_state_tracking_context_manager": ["transformer.Base.generic_visit", "transformer.Base.generic_visit", "transformer.Base.__init__", "pyct.parser.parse_entity", "pyct.parser.parse_entity", "pyct.parser.parse_entity"], "pyct.transformer_test.TransformerTest.test_state_tracking_context_manager.TestTransformer.visit": ["pyct.anno.setanno", "<builtin>.super"], "pyct.transformer_test.TransformerTest.test_state_tracking_context_manager.TestTransformer.visit_If": ["transformer.Base.generic_visit"], "pyct.transformer_test.TransformerTest.test_state_tracking_context_manager.test_function": [], "pyct.transformer_test.TransformerTest.test_visit_block_postprocessing": ["transformer.Base.visit", "test.TestCase.assertEqual", "test.TestCase.assertEqual", "test.TestCase.assertIsInstance", "transformer.Base.__init__", "pyct.parser.parse_entity", "<builtin>.len"], "pyct.transformer_test.TransformerTest.test_visit_block_postprocessing.TestTransformer._process_body_item": ["gast.Name", "<builtin>.isinstance", "gast.Load", "gast.If"], "<builtin>.isinstance": [], "gast.Load": [], "gast.Name": [], "gast.If": [], "pyct.transformer_test.TransformerTest.test_visit_block_postprocessing.TestTransformer.visit_FunctionDef": ["transformer.Base.visit_block"], "transformer.Base.visit_block": [], "pyct.transformer_test.TransformerTest.test_visit_block_postprocessing.test_function": [], "transformer.Base.visit": [], "<builtin>.len": [], "test.TestCase.assertEqual": [], "test.TestCase.assertIsInstance": [], "pyct.transformer_test.TransformerTest.test_robust_error_on_list_visit": ["<builtin>.str", "test.TestCase.assertRaises", "transformer.Base.visit", "test.TestCase.assertRegex", "transformer.Base.__init__", "pyct.parser.parse_entity", "pyct.parser.parse_entity"], "pyct.transformer_test.TransformerTest.test_robust_error_on_list_visit.BrokenTransformer.visit_If": ["transformer.Base.visit"], "pyct.transformer_test.TransformerTest.test_robust_error_on_list_visit.test_function": [], "test.TestCase.assertRaises": [], "<builtin>.str": [], "test.TestCase.assertRegex": [], "pyct.transformer_test.TransformerTest.test_robust_error_on_ast_corruption": ["<builtin>.str", "test.TestCase.assertRaises", "transformer.Base.visit", "transformer.Base.__init__", "pyct.parser.parse_entity", "pyct.parser.parse_entity", "test.TestCase.assertIn"], "pyct.transformer_test.TransformerTest.test_robust_error_on_ast_corruption.BrokenTransformer.visit_If": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "pyct.transformer_test.TransformerTest.test_robust_error_on_ast_corruption.test_function": [], "test.TestCase.assertIn": [], "pyct.transformer_test.TransformerTest.test_origin_info_propagated_to_new_nodes": ["pyct.anno.getanno", "transformer.Base.visit", "test.TestCase.assertEqual", "test.TestCase.assertEqual", "transformer.Base.__init__", "pyct.parser.parse_entity", "pyct.origin_info.resolve"], "pyct.transformer_test.TransformerTest.test_origin_info_propagated_to_new_nodes.TestTransformer.visit_If": ["gast.Pass"], "gast.Pass": [], "pyct.transformer_test.TransformerTest.test_origin_info_propagated_to_new_nodes.test_fn": [], "pyct.origin_info.resolve": [], "pyct.transformer_test.TransformerTest.test_origin_info_preserved_in_moved_nodes": ["pyct.anno.getanno", "transformer.Base.visit", "test.TestCase.assertEqual", "test.TestCase.assertEqual", "transformer.Base.__init__", "pyct.parser.parse_entity", "pyct.origin_info.resolve"], "pyct.transformer_test.TransformerTest.test_origin_info_preserved_in_moved_nodes.TestTransformer.visit_If": [], "pyct.transformer_test.TransformerTest.test_origin_info_preserved_in_moved_nodes.test_fn": [], "pyct.transformer_test.CodeGeneratorTest._simple_context": ["pyct.transformer.EntityInfo", "pyct.transformer.Context"], "pyct.transformer_test.CodeGeneratorTest.test_basic_codegen": ["transformer.CodeGenerator.__init__", "transformer.CodeGenerator.visit", "re.compile", "transformer.CodeGenerator.visit", "test.TestCase.assertRegex", "pyct.parser.parse_entity", "pyct.origin_info.resolve"], "pyct.transformer_test.CodeGeneratorTest.test_basic_codegen.TestCodegen.visit_Assign": ["pyct.parser.unparse", "transformer.CodeGenerator.emit"], "pyct.parser.unparse": [], "transformer.CodeGenerator.emit": [], "pyct.transformer_test.CodeGeneratorTest.test_basic_codegen.TestCodegen.visit_Return": ["pyct.parser.unparse", "transformer.CodeGenerator.emit"], "pyct.transformer_test.CodeGeneratorTest.test_basic_codegen.TestCodegen.visit_If": ["pyct.parser.unparse", "transformer.CodeGenerator.visit_block", "transformer.CodeGenerator.emit"], "transformer.CodeGenerator.visit_block": [], "transformer.CodeGenerator.__init__": [], "pyct.transformer_test.CodeGeneratorTest.test_basic_codegen.test_fn": [], "transformer.CodeGenerator.visit": [], "re.compile": [], "platform.test.main": []}