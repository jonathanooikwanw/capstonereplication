{"optimizer_v2.adadelta_test": ["platform.test.main"], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.doTestBasic": ["numpy.array", "eager.context.executing_eagerly", "<builtin>.range", "<builtin>.zip", "optimizer_v2.adadelta.Adadelta", "numpy.sqrt", "test.TestCase.assertEqual", "framework.constant_op.constant", "test.TestCase.assertAllCloseAccordingToType", "ops.variables.global_variables_initializer", "ops.variables.Variable", "test.TestCase.evaluate", "test.TestCase.assertAllClose"], "ops.variables.Variable": [], "framework.constant_op.constant": [], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.doTestBasic.<lambda1>": [], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.doTestBasic.<lambda2>": [], "optimizer_v2.adadelta.Adadelta": [], "eager.context.executing_eagerly": [], "<builtin>.zip": [], "ops.variables.global_variables_initializer": [], "test.TestCase.evaluate": [], "test.TestCase.assertEqual": [], "test.TestCase.assertAllClose": [], "<builtin>.range": [], "numpy.sqrt": [], "numpy.array": [], "test.TestCase.assertAllCloseAccordingToType": [], "keras.combinations.combine": [], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest": ["keras.combinations.combine", "keras.combinations.generate"], "keras.combinations.generate": [], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.testResourceBasic": ["keras.combinations.generate"], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.testBasicCallableParams": ["keras.combinations.generate"], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.testMinimizeSparseResourceVariable": ["optimizer_v2.adadelta.Adadelta", "ops.variables.global_variables_initializer", "framework.constant_op.constant", "test.TestCase.assertAllCloseAccordingToType", "framework.ops.Graph", "ops.variables.Variable", "test.TestCase.evaluate"], "framework.ops.Graph": [], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.testMinimizeSparseResourceVariable.loss": ["ops.embedding_ops.embedding_lookup", "ops.math_ops.matmul"], "ops.embedding_ops.embedding_lookup": [], "ops.math_ops.matmul": [], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.testConstructAdadeltaWithLR": ["optimizer_v2.adadelta.Adadelta", "test.TestCase.assertIsInstance", "ops.variables.global_variables_initializer", "test.TestCase.evaluate", "test.TestCase.assertAllClose"], "test.TestCase.assertIsInstance": [], "optimizer_v2.adadelta_test.AdadeltaOptimizerTest.testConstructAdadeltaWithEpsilonValues": ["optimizer_v2.adadelta.Adadelta", "test.TestCase.assertEqual"], "platform.test.main": []}