{"kernel_tests.tridiagonal_matmul_op_test": ["platform.test.main"], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest._testAllFormats": ["numpy.diag", "linalg.linalg_impl.tridiagonal_matmul", "test.TestCase.evaluate", "ops.array_ops.stack", "numpy.pad", "test.TestCase.assertAllClose", "test.TestCase.cached_session", "numpy.stack", "numpy.array", "framework.constant_op.constant"], "numpy.pad": [], "numpy.stack": [], "numpy.diag": [], "framework.constant_op.constant": [], "ops.array_ops.stack": [], "linalg.linalg_impl.tridiagonal_matmul": [], "test.TestCase.cached_session": [], "test.TestCase.evaluate": [], "numpy.array": [], "test.TestCase.assertAllClose": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest._makeTridiagonalMatrix": ["ops.array_ops.matrix_diag", "ops.array_ops.pad"], "ops.array_ops.matrix_diag": [], "ops.array_ops.pad": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest._randomComplexArray": ["numpy.random.seed", "numpy.random.uniform"], "numpy.random.seed": [], "numpy.random.uniform": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest._gradientTest": ["ops.gradient_checker_v2.compute_gradient", "test.TestCase.cached_session", "framework.constant_op.constant", "test.TestCase.assertAllClose"], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest._gradientTest.reference_matmul": ["test.TestCase.assertAllClose", "ops.math_ops.matmul"], "ops.math_ops.matmul": [], "ops.gradient_checker_v2.compute_gradient": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.test2x2": ["ops.math_ops.matmul"], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.test3x3": ["ops.math_ops.matmul"], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.testComplex": ["ops.math_ops.matmul", "numpy.array"], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.testBatch": ["numpy.diag", "linalg.linalg_impl.tridiagonal_matmul", "<builtin>.range", "test.TestCase.evaluate", "numpy.matmul", "test.TestCase.assertAllClose", "test.TestCase.cached_session", "test.TestCase.cached_session", "numpy.stack", "framework.constant_op.constant"], "<builtin>.range": [], "numpy.matmul": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.testGradientSmall": ["framework.constant_op.constant"], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.testGradientComplexSmall": ["framework.constant_op.constant", "numpy.array"], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.testGradientComplexWithBatches": ["framework.constant_op.constant", "framework.constant_op.constant"], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest._testErrorWithShapesEager": ["ops.linalg_ops.tridiagonal_mat_mul", "ops.array_ops.ones", "eager.context.eager_mode", "test.TestCase.assertRaisesRegex"], "eager.context.eager_mode": [], "ops.array_ops.ones": [], "test.TestCase.assertRaisesRegex": [], "ops.linalg_ops.tridiagonal_mat_mul": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.testInvalidShapesEagerGpu": ["test.TestCase.assertRaisesRegex", "platform.test.is_gpu_available", "test.TestCase.skipTest"], "platform.test.is_gpu_available": [], "test.TestCase.skipTest": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.TridiagonalMatMulBenchmark.baseline": ["ops.array_ops.expand_dims", "ops.array_ops.pad"], "ops.array_ops.expand_dims": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.TridiagonalMatMulBenchmark._generateData": ["numpy.random.seed", "numpy.random.normal", "ops.variables.Variable"], "numpy.random.normal": [], "ops.variables.Variable": [], "kernel_tests.tridiagonal_matmul_op_test.TridiagonalMulOpTest.TridiagonalMatMulBenchmark.benchmarkTridiagonalMulOp": ["test.Benchmark.evaluate", "test.Benchmark.run_op_benchmark", "client.session.Session", "linalg.linalg_impl.tridiagonal_matmul", "linalg.linalg_impl.tridiagonal_matmul", "itertools.product", "platform.benchmark.benchmark_config", "ops.variables.global_variables_initializer", "platform.test.is_gpu_available", "framework.ops.Graph", "framework.ops.Graph", "ops.control_flow_ops.group", "framework.ops.device"], "itertools.product": [], "framework.ops.Graph": [], "platform.benchmark.benchmark_config": [], "client.session.Session": [], "framework.ops.device": [], "ops.variables.global_variables_initializer": [], "test.Benchmark.evaluate": [], "ops.control_flow_ops.group": [], "test.Benchmark.run_op_benchmark": [], "platform.test.main": []}