{"distributions.laplace_test": ["framework.ops.name_scope", "platform.test.main"], "distributions.laplace_test.try_import": ["platform.tf_logging.warning", "<builtin>.str", "importlib.import_module"], "importlib.import_module": [], "<builtin>.str": [], "platform.tf_logging.warning": [], "distributions.laplace_test.LaplaceTest.testLaplaceShape": ["distributions.laplace.Laplace", "framework.tensor_shape.TensorShape", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "test.TestCase.evaluate", "framework.constant_op.constant"], "framework.constant_op.constant": [], "distributions.laplace.Laplace": [], "test.TestCase.evaluate": [], "test.TestCase.assertEqual": [], "framework.tensor_shape.TensorShape": [], "test.TestCase.assertAllEqual": [], "distributions.laplace_test.LaplaceTest.testLaplaceLogPDF": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "numpy.exp", "test.TestCase.assertAllClose", "framework.constant_op.constant"], "numpy.array": [], "test.TestCase.assertAllClose": [], "numpy.exp": [], "distributions.laplace_test.LaplaceTest.testLaplaceLogPDFMultidimensional": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "numpy.exp", "test.TestCase.assertAllClose", "framework.constant_op.constant"], "distributions.laplace_test.LaplaceTest.testLaplaceLogPDFMultidimensionalBroadcasting": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "numpy.exp", "test.TestCase.assertAllClose", "framework.constant_op.constant"], "distributions.laplace_test.LaplaceTest.testLaplaceCDF": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant"], "distributions.laplace_test.LaplaceTest.testLaplaceLogCDF": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant"], "distributions.laplace_test.LaplaceTest.testLaplaceLogSurvivalFunction": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertAllClose", "framework.constant_op.constant"], "distributions.laplace_test.LaplaceTest.testLaplaceMean": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertAllClose"], "distributions.laplace_test.LaplaceTest.testLaplaceMode": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertAllClose"], "distributions.laplace_test.LaplaceTest.testLaplaceVariance": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertAllClose"], "distributions.laplace_test.LaplaceTest.testLaplaceStd": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertAllClose"], "distributions.laplace_test.LaplaceTest.testLaplaceEntropy": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertAllClose"], "distributions.laplace_test.LaplaceTest.testLaplaceSample": ["distributions.laplace.Laplace", "test.TestCase.assertTrue", "test.TestCase.assertEqual", "test.TestCase.evaluate", "framework.constant_op.constant", "framework.constant_op.constant", "test.TestCase.assertAllClose"], "distributions.laplace_test.LaplaceTest._kstest": [], "test.TestCase.assertTrue": [], "distributions.laplace_test.LaplaceTest.testLaplaceFullyReparameterized": ["distributions.laplace.Laplace", "test.TestCase.assertIsNotNone", "eager.backprop.GradientTape", "framework.constant_op.constant"], "eager.backprop.GradientTape": [], "test.TestCase.assertIsNotNone": [], "distributions.laplace_test.LaplaceTest.testLaplaceSampleMultiDimensional": ["distributions.laplace.Laplace", "numpy.array", "<builtin>.enumerate", "test.TestCase.assertEqual", "numpy.arange", "test.TestCase.evaluate", "test.TestCase.assertLess", "test.TestCase.assertLess", "numpy.reshape", "numpy.zeros_like", "test.TestCase.assertAllClose"], "numpy.arange": [], "numpy.zeros_like": [], "numpy.reshape": [], "<builtin>.enumerate": [], "test.TestCase.assertLess": [], "distributions.laplace_test.LaplaceTest.testLaplacePdfOfSampleMultiDims": ["distributions.laplace.Laplace", "numpy.array", "test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.evaluate", "test.TestCase.assertAllClose"], "distributions.laplace_test.LaplaceTest._assertIntegral": ["<builtin>.sorted", "test.TestCase.assertNear", "<builtin>.zip"], "<builtin>.zip": [], "distributions.laplace_test.LaplaceTest._assertIntegral.<lambda1>": [], "<builtin>.sorted": [], "test.TestCase.assertNear": [], "distributions.laplace_test.LaplaceTest.testLaplaceNonPositiveInitializationParamsRaises": ["test.TestCase.evaluate", "distributions.laplace.Laplace", "test.TestCase.assertRaisesOpError", "framework.constant_op.constant"], "test.TestCase.assertRaisesOpError": [], "distributions.laplace_test.LaplaceTest.testLaplaceWithSoftplusScale": ["ops.nn_ops.softplus", "test.TestCase.evaluate", "framework.constant_op.constant", "distributions.laplace.LaplaceWithSoftplusScale", "test.TestCase.assertAllClose"], "distributions.laplace.LaplaceWithSoftplusScale": [], "ops.nn_ops.softplus": [], "platform.test.main": []}