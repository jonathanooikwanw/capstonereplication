{"operators.py_builtins": ["<builtin>.object", "util.lazy_loader.LazyLoader", "<builtin>.globals"], "<builtin>.globals": [], "util.lazy_loader.LazyLoader": [], "<builtin>.object": [], "operators.py_builtins.overload_of": [], "operators.py_builtins._find_originating_frame": ["inspect.currentframe"], "inspect.currentframe": [], "operators.py_builtins.locals_in_original_context": ["util.lazy_loader.LazyLoader"], "operators.py_builtins.globals_in_original_context": ["util.lazy_loader.LazyLoader"], "operators.py_builtins.eval_in_original_context": ["util.lazy_loader.LazyLoader", "<builtin>.len"], "<builtin>.len": [], "operators.py_builtins.super_in_original_context": ["util.lazy_loader.LazyLoader"], "operators.py_builtins.abs_": ["util.lazy_loader.LazyLoader", "util.lazy_loader.LazyLoader", "<builtin>.isinstance", "framework.tensor_util.is_tf_type", "framework.tensor_util.is_tf_type"], "framework.tensor_util.is_tf_type": [], "operators.py_builtins._tf_abs": ["ops.math_ops.abs"], "<builtin>.isinstance": [], "operators.py_builtins._tf_dataset_abs": ["<builtin>.len", "util.nest.flatten"], "operators.py_builtins._py_abs": ["<builtin>.abs"], "ops.math_ops.abs": [], "util.nest.flatten": [], "operators.py_builtins._tf_dataset_abs.<lambda1>": ["util.nest.map_structure"], "util.nest.map_structure": [], "<builtin>.abs": [], "operators.py_builtins.float_": ["util.nest.map_structure", "framework.tensor_util.is_tf_type", "framework.tensor_util.is_tf_type"], "operators.py_builtins._tf_float": ["ops.gen_parsing_ops.string_to_number", "ops.math_ops.cast"], "operators.py_builtins._py_float": ["<builtin>.float"], "ops.gen_parsing_ops.string_to_number": [], "ops.math_ops.cast": [], "<builtin>.float": [], "operators.py_builtins.int_": ["ops.math_ops.cast", "framework.tensor_util.is_tf_type", "framework.tensor_util.is_tf_type"], "operators.py_builtins._tf_int": ["<builtin>.NotImplementedError", "ops.gen_parsing_ops.string_to_number", "ops.math_ops.cast"], "operators.py_builtins._py_int": ["<builtin>.int"], "<builtin>.NotImplementedError": [], "<builtin>.int": [], "operators.py_builtins.len_": ["utils.tensors.is_tensor_list", "utils.tensors.is_tensor_array", "utils.tensors.is_tensor_array", "utils.tensors.is_tensor_array", "utils.tensors.is_tensor_array", "<builtin>.isinstance", "utils.tensors.is_tensor_array", "framework.tensor_util.is_tf_type", "framework.tensor_util.is_tf_type"], "utils.tensors.is_tensor_array": [], "operators.py_builtins._tf_tensor_array_len": [], "utils.tensors.is_tensor_list": [], "operators.py_builtins._tf_tensor_list_len": ["ops.list_ops.tensor_list_length"], "operators.py_builtins._tf_tensor_len": ["ops.array_ops.shape", "ops.array_ops.rank", "ops.control_flow_ops.cond", "<builtin>.ValueError"], "operators.py_builtins._tf_dataset_len": ["ops.gen_string_ops.string_join", "ops.array_ops.identity", "ops.math_ops.logical_and", "ops.cardinality.cardinality", "ops.math_ops.not_equal", "ops.control_flow_ops.Assert", "framework.ops.control_dependencies", "ops.gen_string_ops.as_string"], "operators.py_builtins._py_len": ["<builtin>.len"], "ops.list_ops.tensor_list_length": [], "ops.array_ops.shape": [], "<builtin>.ValueError": [], "ops.array_ops.rank": [], "operators.py_builtins._tf_tensor_len.raise_zero_rank_error": ["ops.gen_string_ops.string_join", "framework.constant_op.constant", "ops.control_flow_ops.Assert", "framework.ops.control_dependencies", "ops.gen_string_ops.as_string"], "ops.gen_string_ops.as_string": [], "ops.gen_string_ops.string_join": [], "ops.control_flow_ops.Assert": [], "framework.ops.control_dependencies": [], "framework.constant_op.constant": [], "operators.py_builtins._tf_tensor_len.<lambda1>": ["ops.array_ops.shape"], "ops.control_flow_ops.cond": [], "ops.cardinality.cardinality": [], "ops.math_ops.not_equal": [], "ops.math_ops.logical_and": [], "ops.array_ops.identity": [], "operators.py_builtins.print_": ["ops.array_ops.shape", "ops.array_ops.shape", "<builtin>.tuple", "<builtin>.set", "framework.tensor_util.is_tf_type", "<builtin>.ValueError", "<builtin>.any"], "<builtin>.set": [], "<builtin>.tuple": [], "<builtin>.any": [], "operators.py_builtins._tf_py_func_print": ["utils.py_func.wrap_py_func"], "operators.py_builtins._py_print": ["<builtin>.print"], "<builtin>.print": [], "operators.py_builtins._tf_py_func_print.print_wrapper": ["<builtin>.isinstance", "framework.tensor_util.is_tf_type", "six.print_", "<builtin>.tuple"], "six.print_": [], "utils.py_func.wrap_py_func": [], "operators.py_builtins.range_": ["framework.tensor_util.is_tf_type", "framework.tensor_util.is_tf_type", "<builtin>.any", "framework.tensor_util.is_tf_type"], "operators.py_builtins._tf_range": ["ops.math_ops.maximum", "ops.math_ops.range"], "operators.py_builtins._py_range": ["<builtin>.range"], "ops.math_ops.range": [], "ops.math_ops.maximum": [], "<builtin>.range": [], "operators.py_builtins.enumerate_": ["<builtin>.NotImplementedError", "<builtin>.isinstance", "ops.math_ops.range", "ops.math_ops.range"], "operators.py_builtins._tf_dataset_enumerate": [], "operators.py_builtins._py_enumerate": ["<builtin>.enumerate"], "<builtin>.enumerate": [], "operators.py_builtins.zip_": ["<builtin>.all", "<builtin>.isinstance", "ops.math_ops.range", "ops.math_ops.range"], "<builtin>.all": [], "operators.py_builtins._tf_dataset_zip": ["dataset_ops.DatasetV2.zip"], "operators.py_builtins._py_zip": ["<builtin>.zip"], "dataset_ops.DatasetV2.zip": [], "<builtin>.zip": [], "operators.py_builtins.map_": ["<builtin>.all", "<builtin>.isinstance", "dataset_ops.DatasetV2.zip", "dataset_ops.DatasetV2.zip"], "operators.py_builtins._tf_dataset_map": ["dataset_ops.DatasetV2.zip"], "operators.py_builtins._py_map": ["<builtin>.map"], "<builtin>.map": [], "operators.py_builtins.next_": ["<builtin>.isinstance", "dataset_ops.DatasetV2.zip", "dataset_ops.DatasetV2.zip"], "operators.py_builtins.next_tf_iterator": ["<builtin>.next", "ops.control_flow_ops.cond", "ops.control_flow_ops.cond"], "operators.py_builtins.next_py": ["<builtin>.next"], "operators.py_builtins._verify_spec_compatible": ["<builtin>.str", "<builtin>.TypeError", "<builtin>.getattr", "<builtin>.isinstance", "framework.ops.convert_to_tensor_v2", "<builtin>.ValueError"], "framework.ops.convert_to_tensor_v2": [], "<builtin>.getattr": [], "<builtin>.str": [], "<builtin>.TypeError": [], "operators.py_builtins._verify_structure_compatible": ["util.nest.assert_same_structure", "<builtin>.str", "functools.partial", "<builtin>.TypeError", "util.nest.map_structure"], "util.nest.assert_same_structure": [], "functools.partial": [], "<builtin>.next": [], "operators.py_builtins.next_tf_iterator.<lambda1>": [], "operators.py_builtins.filter_": ["util.nest.map_structure", "<builtin>.isinstance", "util.nest.map_structure"], "operators.py_builtins._tf_dataset_filter": [], "operators.py_builtins._py_filter": ["<builtin>.filter"], "<builtin>.filter": [], "operators.py_builtins.any_": ["util.nest.map_structure", "<builtin>.isinstance", "util.nest.map_structure"], "operators.py_builtins._tf_dataset_any": ["framework.constant_op.constant", "<builtin>.ValueError", "<builtin>.len", "util.nest.flatten"], "operators.py_builtins._py_any": ["<builtin>.any"], "operators.py_builtins._tf_dataset_any.<lambda1>": [], "operators.py_builtins._tf_dataset_any.<lambda2>": [], "operators.py_builtins.all_": ["<builtin>.isinstance", "util.nest.flatten", "util.nest.flatten"], "operators.py_builtins._tf_dataset_all": ["framework.constant_op.constant", "<builtin>.ValueError", "<builtin>.len", "util.nest.flatten"], "operators.py_builtins._py_all": ["<builtin>.all"], "operators.py_builtins._tf_dataset_all.<lambda1>": ["ops.math_ops.logical_not"], "ops.math_ops.logical_not": [], "operators.py_builtins._tf_dataset_all.<lambda2>": [], "operators.py_builtins.sorted_": ["ops.math_ops.logical_not", "framework.tensor_util.is_tf_type", "framework.tensor_util.is_tf_type"], "operators.py_builtins._tf_sorted": ["ops.array_ops.gather_v2", "ops.sort_ops.sort", "ops.check_ops.assert_rank_v2", "ops.sort_ops.argsort", "framework.ops.control_dependencies", "<builtin>.ValueError"], "operators.py_builtins._py_sorted": ["<builtin>.sorted"], "ops.check_ops.assert_rank_v2": [], "ops.sort_ops.argsort": [], "ops.array_ops.gather_v2": [], "ops.sort_ops.sort": [], "<builtin>.sorted": []}