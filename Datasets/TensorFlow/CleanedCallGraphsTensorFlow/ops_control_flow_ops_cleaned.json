{"ops.control_flow_ops": ["util.deprecation.deprecated_args", "util.tf_should_use.should_use_result", "framework.ops.register_proto_function", "util.lazy_loader.LazyLoader", "util.tf_export.tf_export", "util.deprecation.deprecated_arg_values", "util.dispatch.add_dispatch_support", "<builtin>.globals"], "<builtin>.globals": [], "util.lazy_loader.LazyLoader": [], "ops.control_flow_ops._summarize_eager": ["<builtin>.len", "ops.gen_math_ops.not_equal", "<builtin>.str", "ops.array_ops.size"], "ops.array_ops.size": [], "<builtin>.str": [], "<builtin>.len": [], "ops.gen_math_ops.not_equal": [], "util.tf_export.tf_export": [], "util.dispatch.add_dispatch_support": [], "util.tf_should_use.should_use_result": [], "ops.control_flow_ops.Assert": ["<builtin>.all", "framework.ops.convert_n_to_tensor", "framework.ops.convert_n_to_tensor", "framework.errors.InvalidArgumentError", "framework.ops.convert_to_tensor", "eager.context.executing_eagerly", "framework.ops.name_scope", "framework.ops.name_scope", "ops.gen_logging_ops._assert"], "eager.context.executing_eagerly": [], "framework.ops.convert_n_to_tensor": [], "framework.errors.InvalidArgumentError": [], "framework.ops.name_scope": [], "<builtin>.all": [], "ops.gen_logging_ops._assert": [], "framework.ops.convert_to_tensor": [], "ops.control_flow_ops.Assert.true_assert": ["ops.gen_logging_ops._assert"], "ops.control_flow_ops.cond": ["ops.gen_logging_ops._assert", "ops.gen_logging_ops._assert", "util.nest.assert_same_structure", "eager.context.executing_eagerly", "eager.context.executing_eagerly", "<builtin>.callable", "eager.context.executing_eagerly", "<builtin>.ValueError", "<builtin>.TypeError", "ops.array_ops.identity", "ops.array_ops.identity", "ops.array_ops.identity", "ops.control_flow_util.EnableControlFlowV2", "framework.ops.get_default_graph", "framework.ops.get_default_graph", "<builtin>.isinstance", "framework.ops.get_default_graph", "util.nest.flatten", "<builtin>.zip", "util.nest.flatten", "util.nest.map_structure", "framework.ops.add_to_collection", "framework.ops.name_scope", "framework.ops.name_scope", "util.nest.pack_sequence_as"], "ops.control_flow_ops._Identity": ["ops.array_ops.identity", "framework.ops.internal_convert_to_tensor_or_composite", "util.nest.map_structure", "<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError", "ops.gen_array_ops.ref_identity"], "framework.ops.internal_convert_to_tensor_or_composite": [], "<builtin>.isinstance": [], "ops.gen_array_ops.ref_identity": [], "ops.array_ops.identity": [], "util.nest.map_structure": [], "<builtin>.type": [], "<builtin>.TypeError": [], "ops.control_flow_ops._NextIteration": ["framework.ops.internal_convert_to_tensor_or_composite", "util.nest.map_structure", "<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "ops.control_flow_ops._Enter": ["framework.ops.internal_convert_to_tensor_or_composite", "util.nest.map_structure", "ops.gen_control_flow_ops.ref_enter", "ops.gen_control_flow_ops.enter", "<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "ops.gen_control_flow_ops.ref_enter": [], "ops.gen_control_flow_ops.enter": [], "ops.control_flow_ops._Enter.enter_component": ["ops.gen_control_flow_ops.enter"], "ops.control_flow_ops.exit": ["framework.ops.internal_convert_to_tensor_or_composite", "ops.gen_control_flow_ops.ref_exit", "util.nest.map_structure", "ops.gen_control_flow_ops._exit", "<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "ops.gen_control_flow_ops.ref_exit": [], "ops.gen_control_flow_ops._exit": [], "ops.control_flow_ops.switch": ["framework.ops.internal_convert_to_tensor_or_composite", "<builtin>.zip", "framework.ops.convert_to_tensor", "<builtin>.type", "ops.gen_control_flow_ops.switch", "<builtin>.isinstance", "framework.ops.name_scope", "util.nest.pack_sequence_as", "util.nest.flatten", "<builtin>.TypeError"], "ops.gen_control_flow_ops.switch": [], "util.nest.flatten": [], "<builtin>.zip": [], "util.nest.pack_sequence_as": [], "ops.control_flow_ops._SwitchRefOrTensor": ["util.nest.flatten", "<builtin>.isinstance", "framework.ops.convert_to_tensor_or_composite", "framework.ops.colocate_with"], "framework.ops.convert_to_tensor_or_composite": [], "framework.ops.colocate_with": [], "ops.control_flow_ops.merge": ["framework.ops.internal_convert_to_tensor_or_composite", "<builtin>.zip", "<builtin>.all", "util.nest.flatten", "ops.math_ops._as_indexed_slices_list", "ops.gen_control_flow_ops.ref_merge", "ops.gen_control_flow_ops.merge", "util.nest.assert_same_structure", "<builtin>.type", "<builtin>.isinstance", "framework.ops.name_scope", "<builtin>.ValueError", "util.nest.pack_sequence_as", "<builtin>.any", "<builtin>.TypeError"], "<builtin>.any": [], "<builtin>.ValueError": [], "ops.gen_control_flow_ops.ref_merge": [], "ops.gen_control_flow_ops.merge": [], "ops.math_ops._as_indexed_slices_list": [], "util.nest.assert_same_structure": [], "ops.control_flow_ops._convert_tensorarray_to_flow": ["<builtin>.isinstance"], "ops.control_flow_ops._convert_flows_to_tensorarrays": ["<builtin>.zip", "ops.tensor_array_ops.build_ta_with_new_flow", "<builtin>.len", "<builtin>.isinstance", "<builtin>.ValueError"], "ops.tensor_array_ops.build_ta_with_new_flow": [], "ops.control_flow_ops._ShapeLessThanOrEqual": ["<builtin>.zip"], "ops.control_flow_ops._get_shape_invariant": ["ops.tensor_array_ops.build_ta_with_new_flow", "util.nest.flatten", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.control_flow_ops._shape_invariant_to_type_spec": ["framework.tensor_spec.TensorSpec", "<builtin>.type", "framework.type_spec.type_spec_from_value", "<builtin>.isinstance", "<builtin>.TypeError"], "framework.type_spec.type_spec_from_value": [], "framework.tensor_spec.TensorSpec": [], "ops.control_flow_ops._SetShapeInvariants": ["<builtin>.zip", "<builtin>.all", "framework.type_spec.type_spec_from_value", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "util.nest.flatten", "<builtin>.TypeError"], "ops.control_flow_ops._EnforceShapeInvariant": ["ops.control_flow_util.IsLoopEnter", "ops.control_flow_util.IsLoopEnter", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError"], "ops.control_flow_util.IsLoopEnter": [], "ops.control_flow_ops._AddNextAndBackEdge": ["ops.math_ops._as_indexed_slices", "util.nest.map_structure", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "framework.ops.convert_to_tensor", "<builtin>.type", "<builtin>.isinstance", "framework.ops.convert_to_tensor"], "ops.control_flow_ops._AddNextAndBackEdge.update_component": [], "ops.math_ops._as_indexed_slices": [], "ops.control_flow_ops.ControlFlowContext.__init__": ["framework.ops.convert_to_tensor", "framework.ops.get_default_graph", "<builtin>.set"], "framework.ops.get_default_graph": [], "ops.control_flow_ops.ControlFlowContext._init_values_from_proto": ["<builtin>.set", "framework.ops.prepend_name_scope", "framework.ops.get_default_graph", "<builtin>.isinstance"], "<builtin>.set": [], "framework.ops.prepend_name_scope": [], "ops.control_flow_ops.ControlFlowContext.name": [], "ops.control_flow_ops.ControlFlowContext.outer_context": [], "ops.control_flow_ops.ControlFlowContext.grad_state": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "ops.control_flow_ops.ControlFlowContext.back_prop": ["<builtin>.NotImplementedError"], "ops.control_flow_ops.ControlFlowContext": ["abc.abstractmethod"], "abc.abstractmethod": [], "ops.control_flow_ops.ControlFlowContext.to_control_flow_context_def": ["<builtin>.NotImplementedError"], "ops.control_flow_ops.ControlFlowContext._to_values_def": ["protobuf.control_flow_pb2.ValuesDef", "framework.ops.strip_name_scope", "<builtin>.sorted"], "protobuf.control_flow_pb2.ValuesDef": [], "framework.ops.strip_name_scope": [], "<builtin>.sorted": [], "ops.control_flow_ops.ControlFlowContext.AddName": [], "ops.control_flow_ops.ControlFlowContext.Enter": ["framework.ops.get_default_graph"], "ops.control_flow_ops.ControlFlowContext.Exit": ["framework.ops.get_default_graph"], "ops.control_flow_ops.ControlFlowContext.EnterGradientColocation": [], "ops.control_flow_ops.ControlFlowContext.ExitGradientColocation": [], "ops.control_flow_ops.ControlFlowContext.ExitResult": ["util.nest.map_structure"], "ops.control_flow_ops.ControlFlowContext.ExitResult.fn": [], "ops.control_flow_ops.ControlFlowContext.GetWhileContext": [], "ops.control_flow_ops.ControlFlowContext._RemoveExternalControlEdges": ["<builtin>.set", "util.nest.map_structure", "<builtin>.len", "ops.control_flow_util.GetOutputContext", "ops.control_flow_util.GetOutputContext", "<builtin>.list"], "ops.control_flow_ops.WhileContext.GetWhileContext": [], "ops.control_flow_util.GetOutputContext": [], "<builtin>.list": [], "ops.control_flow_ops.ControlFlowContext.AddInnerOp": [], "ops.control_flow_ops.ControlFlowContext.GetControlPivot": [], "ops.control_flow_ops.ControlFlowContext.IsWhileContext": [], "ops.control_flow_ops.ControlFlowContext.IsCondContext": [], "ops.control_flow_ops.ControlFlowContext.IsXLAContext": [], "ops.control_flow_ops.ControlFlowContext.__str__": [], "ops.control_flow_ops.CondContext.__init__": ["ops.control_flow_util.GetOutputContext", "framework.ops.get_default_graph", "framework.ops.get_default_graph"], "ops.control_flow_ops.CondContext._init_from_proto": ["framework.ops.prepend_name_scope", "<builtin>.super", "framework.ops.get_default_graph", "<builtin>.isinstance"], "<builtin>.super": [], "ops.control_flow_ops.CondContext.pred": [], "ops.control_flow_ops.CondContext.pivot": [], "ops.control_flow_ops.CondContext.branch": [], "ops.control_flow_ops.CondContext.grad_state": ["framework.ops.get_default_graph", "framework.ops.get_default_graph"], "ops.control_flow_ops.CondContext.back_prop": ["framework.ops.get_default_graph", "framework.ops.get_default_graph"], "ops.control_flow_ops.CondContext.GetControlPivot": [], "ops.control_flow_ops.CondContext.to_proto": ["<builtin>.super", "framework.ops.strip_name_scope", "protobuf.control_flow_pb2.CondContextDef"], "protobuf.control_flow_pb2.CondContextDef": [], "ops.control_flow_ops.CondContext.from_proto": ["protobuf.control_flow_pb2.CondContextDef", "protobuf.control_flow_pb2.CondContextDef", "protobuf.control_flow_pb2.CondContextDef", "protobuf.control_flow_pb2.CondContextDef"], "ops.control_flow_ops.from_control_flow_context_def": ["protobuf.control_flow_pb2.CondContextDef", "protobuf.control_flow_pb2.CondContextDef", "<builtin>.NotImplementedError"], "ops.control_flow_ops.CondContext.to_control_flow_context_def": ["protobuf.control_flow_pb2.CondContextDef"], "ops.control_flow_ops.CondContext.AddValue": ["framework.ops.control_dependencies", "framework.ops.control_dependencies"], "framework.ops.control_dependencies": [], "ops.control_flow_ops.CondContext.AddOp": ["framework.ops.control_dependencies"], "ops.control_flow_ops.CondContext._AddOpInternal": ["ops.control_flow_util.OpInContext", "ops.control_flow_util.IsLoopExit", "ops.control_flow_util.IsLoopExit", "<builtin>.len", "ops.control_flow_util.IsLoopExit", "<builtin>.range", "<builtin>.any"], "ops.control_flow_util.OpInContext": [], "<builtin>.range": [], "ops.control_flow_util.IsLoopExit": [], "ops.control_flow_ops.CondContext._ProcessOutputTensor": ["ops.control_flow_util.IsLoopExit"], "ops.control_flow_ops.CondContext._BuildCondTensor": ["ops.control_flow_util.IsLoopExit", "ops.control_flow_util.IsLoopExit", "util.nest.map_structure", "framework.ops.convert_to_tensor", "<builtin>.isinstance"], "ops.control_flow_ops.with_dependencies": ["framework.ops.convert_to_tensor", "framework.ops.convert_to_tensor_or_composite", "framework.ops.colocate_with", "framework.ops.control_dependencies", "framework.ops.IndexedSlices", "<builtin>.list", "eager.context.executing_eagerly", "framework.ops.name_scope", "<builtin>.isinstance"], "ops.control_flow_ops.CondContext.BuildCondBranch": ["framework.ops.control_dependencies", "<builtin>.len", "util.nest.map_structure", "framework.ops.get_collection", "framework.ops.get_collection_ref", "<builtin>.isinstance", "framework.ops.get_collection_ref"], "framework.ops.get_collection": [], "framework.ops.get_collection_ref": [], "ops.control_flow_ops.CondContext.IsCondContext": [], "ops.control_flow_ops._UnpackIfSingleton": ["<builtin>.len", "<builtin>.isinstance"], "ops.control_flow_ops._eager_cond_implementation": ["framework.tensor_util.constant_value", "platform.tf_logging.warning", "platform.tf_logging.warning", "framework.ops.convert_to_tensor", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "framework.ops.name_scope", "framework.ops.name_scope", "<builtin>.TypeError"], "framework.tensor_util.constant_value": [], "ops.control_flow_ops._eager_cond_implementation._parallel_device_cond_wrapper": [], "platform.tf_logging.warning": [], "util.deprecation.deprecated_args": [], "<builtin>.callable": [], "ops.control_flow_util.EnableControlFlowV2": [], "framework.ops.add_to_collection": [], "ops.control_flow_ops._cast_indexed_slice_indices": ["ops.math_ops.cast", "<builtin>.isinstance"], "ops.math_ops.cast": [], "ops.control_flow_ops.cond_for_tf_v2": ["ops.math_ops.cast"], "ops.control_flow_ops._resource_safe_shape": ["ops.array_ops.shape_internal", "framework.tensor_shape.TensorShape"], "framework.tensor_shape.TensorShape": [], "ops.array_ops.shape_internal": [], "ops.control_flow_ops.WhileContext.__init__": ["framework.tensor_shape.TensorShape", "framework.tensor_shape.TensorShape", "framework.tensor_shape.TensorShape"], "ops.control_flow_ops.WhileContext._init_from_proto": ["framework.ops.prepend_name_scope", "ops.control_flow_util.IsLoopEnter", "<builtin>.super", "framework.ops.get_default_graph", "util.compat.as_bytes", "<builtin>.isinstance", "framework.attr_value_pb2.AttrValue"], "ops.control_flow_ops.WhileContext._init_from_args": ["<builtin>.ValueError", "framework.ops.get_default_graph", "<builtin>.isinstance"], "util.compat.as_bytes": [], "framework.attr_value_pb2.AttrValue": [], "ops.control_flow_ops.WhileContext.maximum_iterations": [], "ops.control_flow_ops.WhileContext.parallel_iterations": [], "ops.control_flow_ops.WhileContext.back_prop": [], "ops.control_flow_ops.WhileContext.swap_memory": [], "ops.control_flow_ops.WhileContext.pivot": [], "ops.control_flow_ops.WhileContext.loop_enters": [], "ops.control_flow_ops.WhileContext.loop_exits": [], "ops.control_flow_ops.WhileContext.grad_state": [], "ops.control_flow_ops.WhileContext.to_proto": ["<builtin>.super", "framework.ops.strip_name_scope", "protobuf.control_flow_pb2.WhileContextDef"], "protobuf.control_flow_pb2.WhileContextDef": [], "ops.control_flow_ops.WhileContext.to_control_flow_context_def": ["protobuf.control_flow_pb2.WhileContextDef"], "ops.control_flow_ops.WhileContext.from_proto": ["protobuf.control_flow_pb2.WhileContextDef", "protobuf.control_flow_pb2.WhileContextDef", "protobuf.control_flow_pb2.WhileContextDef", "protobuf.control_flow_pb2.WhileContextDef"], "ops.control_flow_ops.WhileContext.GetControlPivot": [], "ops.control_flow_ops.WhileContext.AddValue": ["ops.control_flow_util.IsLoopExit", "ops.control_flow_util.IsLoopExit", "framework.ops.control_dependencies", "framework.ops.get_default_graph", "framework.ops.get_default_graph", "ops.control_flow_util.GetWhileContext"], "ops.control_flow_util.GetWhileContext": [], "ops.control_flow_ops.WhileContext._FixControlInputsAndContext": ["framework.ops.get_default_graph", "ops.control_flow_util.GetOutputContext", "<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "ops.control_flow_ops.WhileContext.AddOp": ["ops.control_flow_util.GetOutputContext", "ops.control_flow_util.GetWhileContext", "framework.ops.get_default_graph", "ops.control_flow_util.IsInXLAContext"], "ops.control_flow_util.IsInXLAContext": [], "ops.control_flow_ops.WhileContext._AddOpInternal": ["ops.array_ops.identity", "ops.control_flow_util.IsLoopExit", "ops.control_flow_util.IsLoopExit", "framework.ops.control_dependencies", "<builtin>.len", "framework.ops.control_dependencies", "framework.ops.control_dependencies", "<builtin>.range", "framework.ops.control_dependencies", "framework.ops.control_dependencies", "framework.ops.control_dependencies"], "ops.control_flow_ops.WhileContext._MaybeAddControlDependency": ["framework.ops.control_dependencies", "framework.ops.control_dependencies"], "ops.control_flow_ops.WhileContext._MaybeAddControlDependency._IsOpFree": ["ops.control_flow_util.IsLoopConstantEnter"], "ops.control_flow_util.IsLoopConstantEnter": [], "ops.control_flow_ops.WhileContext.AddForwardLoopCounter": ["framework.constant_op.constant", "framework.constant_op.constant", "framework.constant_op.constant", "ops.math_ops.add", "ops.math_ops.add", "ops.math_ops.add", "ops.math_ops.add", "ops.math_ops.add", "ops.math_ops.add", "ops.math_ops.add", "ops.math_ops.add"], "framework.constant_op.constant": [], "ops.math_ops.add": [], "ops.control_flow_ops.WhileContext.AddBackpropLoopCounter": ["ops.array_ops.identity", "framework.constant_op.constant", "framework.constant_op.constant", "framework.constant_op.constant", "framework.constant_op.constant", "framework.constant_op.constant", "framework.constant_op.constant", "framework.ops.get_default_graph", "framework.ops.get_default_graph", "ops.math_ops.greater_equal", "ops.math_ops.greater_equal", "ops.math_ops.greater_equal", "ops.math_ops.subtract", "ops.math_ops.subtract"], "ops.math_ops.greater_equal": [], "ops.math_ops.subtract": [], "ops.control_flow_ops.WhileContext.AddBackpropAccumulator": ["framework.constant_op.constant", "framework.constant_op.constant", "framework.constant_op.constant", "ops.math_ops.add", "ops.math_ops.add", "ops.math_ops.add", "ops.array_ops.zeros", "ops.array_ops.shape_internal", "ops.array_ops.shape_internal", "ops.array_ops.shape_internal", "ops.array_ops.shape_internal", "<builtin>.isinstance", "ops.array_ops.shape_internal", "ops.array_ops.shape_internal"], "ops.array_ops.zeros": [], "ops.control_flow_ops.WhileContext.AddBackpropIndexedSlicesAccumulator": ["ops.array_ops.shape_internal", "ops.array_ops.shape_internal", "ops.array_ops.shape_internal", "ops.array_ops.shape_internal", "ops.array_ops.shape_internal", "framework.ops.IndexedSlices", "ops.array_ops.zeros", "ops.array_ops.zeros", "ops.array_ops.zeros", "ops.array_ops.zeros", "ops.array_ops.shape_internal", "ops.math_ops.maximum", "ops.math_ops.maximum", "framework.constant_op.constant", "framework.constant_op.constant", "<builtin>.zip", "ops.array_ops.concat", "framework.tensor_shape.TensorShape", "ops.array_ops.zeros_like", "framework.tensor_shape.Dimension"], "framework.tensor_shape.Dimension": [], "ops.array_ops.concat": [], "ops.array_ops.zeros_like": [], "ops.math_ops.maximum": [], "framework.ops.IndexedSlices": [], "ops.control_flow_ops.WhileContext._InitializeValues": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError", "<builtin>.set"], "ops.control_flow_ops.WhileContext._BuildLoop": ["framework.tensor_shape.Dimension", "framework.tensor_shape.Dimension", "framework.tensor_shape.Dimension", "framework.tensor_shape.Dimension", "ops.control_flow_util.IsLoopConstantEnter", "framework.ops.control_dependencies", "<builtin>.len", "framework.ops.control_dependencies", "util.nest.assert_same_structure", "util.nest.assert_same_structure", "framework.ops.get_collection", "framework.ops.get_collection", "util.nest.is_sequence_or_composite", "framework.ops.get_collection_ref", "framework.ops.get_collection_ref", "<builtin>.ValueError", "framework.ops.get_collection_ref", "framework.ops.get_collection_ref", "framework.ops.convert_to_tensor", "framework.ops.convert_to_tensor", "util.nest.flatten", "framework.ops.convert_n_to_tensor_or_composite", "framework.ops.convert_n_to_tensor_or_composite", "<builtin>.zip", "framework.ops.convert_n_to_tensor_or_composite", "framework.ops.convert_n_to_tensor_or_composite", "framework.ops.convert_n_to_tensor_or_composite", "util.nest.map_structure", "<builtin>.list", "util.nest.pack_sequence_as"], "ops.control_flow_ops.while_loop.<lambda3>": ["ops.math_ops.logical_and", "ops.math_ops.logical_and", "ops.math_ops.logical_and"], "ops.control_flow_ops.while_loop.<lambda1>": ["ops.math_ops.logical_and", "ops.math_ops.logical_and", "ops.math_ops.logical_and"], "ops.control_flow_ops.while_loop.<lambda4>": ["ops.math_ops.logical_and", "ops.math_ops.logical_and"], "ops.control_flow_ops.while_loop.<lambda2>": ["ops.math_ops.logical_and", "ops.math_ops.logical_and"], "util.nest.is_sequence_or_composite": [], "ops.control_flow_ops.WhileContext._BuildLoop.map_fn": ["ops.array_ops.identity", "<builtin>.isinstance"], "framework.ops.convert_n_to_tensor_or_composite": [], "ops.control_flow_ops.WhileContext.BuildLoop": ["ops.array_ops.identity", "ops.array_ops.identity", "<builtin>.len", "framework.ops.get_default_graph", "util.nest.map_structure", "util.nest.map_structure", "util.nest.map_structure", "util.nest.pack_sequence_as", "util.nest.flatten", "framework.ops.convert_n_to_tensor_or_composite"], "ops.control_flow_ops.WhileContext.IsWhileContext": [], "util.deprecation.deprecated_arg_values": [], "ops.control_flow_ops.while_loop_v2": ["framework.ops.convert_n_to_tensor_or_composite"], "ops.control_flow_ops.while_loop": ["framework.ops.convert_n_to_tensor_or_composite", "framework.ops.convert_n_to_tensor_or_composite", "<builtin>.len", "framework.ops.convert_n_to_tensor_or_composite", "util.nest.assert_same_structure", "eager.context.executing_eagerly", "<builtin>.callable", "<builtin>.int", "<builtin>.ValueError", "<builtin>.TypeError", "ops.control_flow_util.EnableControlFlowV2", "framework.ops.get_default_graph", "framework.ops.get_default_graph", "framework.ops.convert_to_tensor", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "framework.constant_op.constant", "framework.constant_op.constant", "framework.tensor_shape.TensorShape", "util.nest.map_structure", "framework.ops.add_to_collection", "<builtin>.list", "framework.ops.name_scope"], "<builtin>.int": [], "ops.math_ops.logical_and": [], "ops.control_flow_ops.while_loop.convert": ["framework.ops.convert_to_tensor", "<builtin>.isinstance"], "ops.control_flow_ops._AsTensorList": ["ops.array_ops.identity", "framework.ops.convert_to_tensor_or_composite", "framework.ops.IndexedSlices", "framework.ops.IndexedSlices", "<builtin>.isinstance"], "ops.control_flow_ops._CheckResults": ["<builtin>.len", "<builtin>.zip"], "ops.control_flow_ops._GroupControlDeps": ["framework.ops.control_dependencies", "framework.ops.device"], "framework.ops.device": [], "ops.control_flow_ops.group": ["<builtin>.hasattr", "framework.ops.control_dependencies", "<builtin>.len", "<builtin>.type", "eager.context.executing_eagerly", "framework.ops.name_scope", "framework.ops.name_scope", "<builtin>.ValueError", "util.nest.flatten", "<builtin>.TypeError", "<builtin>.sorted"], "<builtin>.hasattr": [], "ops.control_flow_ops.group.device_key": [], "ops.control_flow_ops.tuple_v2": ["util.nest.flatten"], "ops.control_flow_ops.tuple": ["util.nest.flatten", "framework.tensor_util.is_tf_type", "<builtin>.set", "framework.ops.control_dependencies", "framework.ops.control_dependencies", "framework.ops.convert_to_tensor", "<builtin>.type", "eager.context.executing_eagerly", "<builtin>.isinstance", "framework.ops.name_scope", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.sorted"], "framework.tensor_util.is_tf_type": [], "ops.control_flow_ops.tuple.<lambda1>": [], "ops.control_flow_ops._assert_at_most_n_true": ["ops.array_ops.stack", "framework.constant_op.constant", "ops.math_ops.reduce_sum", "ops.math_ops.less_equal", "<builtin>.len", "ops.math_ops.less_equal", "ops.math_ops.cast", "<builtin>.getattr"], "ops.array_ops.stack": [], "ops.math_ops.reduce_sum": [], "ops.math_ops.less_equal": [], "<builtin>.getattr": [], "ops.control_flow_ops._case_create_default_action": ["<builtin>.len"], "ops.control_flow_ops._case_create_default_action.default_action": ["ops.math_ops.cast", "ops.array_ops.stack", "framework.ops.control_dependencies", "framework.ops.control_dependencies"], "ops.control_flow_ops._case_verify_and_canonicalize_args": ["platform.tf_logging.warn", "<builtin>.zip", "<builtin>.callable", "<builtin>.len", "<builtin>.type", "eager.context.executing_eagerly", "<builtin>.list", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.sorted"], "ops.control_flow_ops._case_verify_and_canonicalize_args.<lambda1>": [], "platform.tf_logging.warn": [], "ops.control_flow_ops._case_helper": ["<builtin>.zip", "framework.ops.control_dependencies", "<builtin>.reversed", "functools.partial", "<builtin>.list", "framework.ops.control_dependencies", "framework.ops.control_dependencies", "framework.ops.name_scope", "framework.ops.name_scope"], "<builtin>.reversed": [], "functools.partial": [], "ops.control_flow_ops._indexed_case_verify_and_canonicalize_args": ["<builtin>.all", "<builtin>.set", "<builtin>.map", "<builtin>.callable", "<builtin>.len", "<builtin>.max", "<builtin>.type", "<builtin>.list", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.min", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.sorted"], "<builtin>.enumerate": [], "<builtin>.min": [], "<builtin>.max": [], "<builtin>.map": [], "ops.control_flow_ops._indexed_case_helper": ["<builtin>.hasattr", "ops.array_ops.where", "<builtin>.len", "ops.math_ops.less", "ops.math_ops.greater_equal", "ops.math_ops.greater_equal", "eager.context.executing_eagerly", "framework.ops.name_scope", "<builtin>.int"], "ops.math_ops.less": [], "ops.array_ops.where": [], "ops.control_flow_ops.case_v2": ["framework.ops.name_scope"], "ops.control_flow_ops.case": ["framework.ops.name_scope"], "ops.control_flow_ops.switch_case": ["framework.ops.name_scope"], "ops.control_flow_ops.execute_fn_for_device": ["framework.ops.get_default_graph", "framework.ops.get_default_graph", "ops.gen_functional_ops.device_index", "<builtin>.list", "ops.control_flow_util.GraphOrParentsInXlaContext"], "ops.control_flow_util.GraphOrParentsInXlaContext": [], "ops.gen_functional_ops.device_index": [], "ops.control_flow_ops.XLAControlFlowContext.__init__": ["<builtin>.super"], "ops.control_flow_ops.XLAControlFlowContext.to_control_flow_context_def": ["<builtin>.super"], "ops.control_flow_ops.XLAControlFlowContext.IsXLAContext": [], "ops.control_flow_ops.XLAControlFlowContext.AddOp": [], "ops.control_flow_ops.XLAControlFlowContext.AddValue": [], "ops.control_flow_ops.XLAControlFlowContext.RequiresUniqueFunctionRetracing": [], "ops.control_flow_ops.get_enclosing_xla_context": ["framework.ops.get_default_graph", "<builtin>.isinstance", "<builtin>.getattr"], "framework.ops.register_proto_function": []}