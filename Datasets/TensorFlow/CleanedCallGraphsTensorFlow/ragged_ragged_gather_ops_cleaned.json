{"ragged.ragged_gather_ops": ["framework.ops.RegisterGradient", "util.dispatch.dispatch_for_api"], "util.dispatch.dispatch_for_api": [], "ragged.ragged_gather_ops.gather": ["util.dispatch.dispatch_for_api", "ragged.ragged_tensor.match_row_splits_dtypes", "framework.ops.name_scope", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ops.array_ops.get_positive_axis", "<builtin>.ValueError"], "framework.ops.name_scope": [], "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor": [], "ragged.ragged_tensor.match_row_splits_dtypes": [], "ops.array_ops.get_positive_axis": [], "<builtin>.ValueError": [], "ragged.ragged_gather_ops._gather": ["ops.array_ops.gather", "ragged.ragged_tensor.is_ragged", "<builtin>.len", "ragged.ragged_tensor.is_ragged", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ops.array_ops.shape", "<builtin>.range", "<builtin>.ValueError", "ops.math_ops.cumprod", "ops.gen_ragged_array_ops.ragged_gather", "ops.gen_ragged_array_ops.ragged_gather"], "ragged.ragged_tensor.is_ragged": [], "ops.array_ops.gather": [], "ragged.ragged_gather_ops._batch_gather": ["ops.gen_ragged_array_ops.ragged_gather", "ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range", "ops.math_ops.range", "ops.array_ops.repeat", "<builtin>.ValueError", "<builtin>.isinstance", "ragged_tensor.RaggedTensor.from_tensor"], "ragged.ragged_gather_ops._axis_gather": ["ragged_tensor.RaggedTensor.from_tensor", "ragged_tensor.RaggedTensor.from_tensor", "ragged_tensor.RaggedTensor.from_tensor", "ragged_tensor.RaggedTensor.from_tensor", "<builtin>.ValueError", "<builtin>.isinstance", "ragged_tensor.RaggedTensor.from_tensor"], "<builtin>.len": [], "ops.gen_ragged_array_ops.ragged_gather": [], "ragged_tensor.RaggedTensor.from_nested_row_splits": [], "ops.array_ops.shape": [], "ops.math_ops.cumprod": [], "<builtin>.range": [], "<builtin>.isinstance": [], "ragged_tensor.RaggedTensor.from_tensor": [], "ops.array_ops.repeat": [], "ops.math_ops.range": [], "ragged.ragged_gather_ops._flatten_dims_0_and_1": ["ops.array_ops.concat", "ops.array_ops.reshape", "ops.array_ops.shape", "<builtin>.isinstance"], "ragged.ragged_gather_ops._row_starts": ["ops.math_ops.range", "ops.array_ops.shape", "ops.math_ops.cast", "<builtin>.isinstance"], "ragged.ragged_gather_ops._increase_rank_to": ["ops.array_ops.ones", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.shape", "ops.array_ops.rank", "<builtin>.isinstance"], "ops.array_ops.concat": [], "ops.array_ops.reshape": [], "ops.math_ops.cast": [], "ops.array_ops.rank": [], "ops.array_ops.ones": [], "ragged.ragged_gather_ops._ragged_gather_v1": ["ops.array_ops.rank"], "ragged.ragged_gather_ops.gather_nd": ["framework.tensor_shape.dimension_value", "ragged.ragged_tensor.match_row_splits_dtypes", "ops.array_ops.expand_dims", "ops.math_ops.cast", "ops.array_ops.concat", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.ValueError", "ragged.ragged_array_ops.tile", "<builtin>.isinstance", "ragged_tensor.RaggedTensor.from_tensor", "ops.array_ops.gather_nd", "ops.array_ops.gather_nd", "ragged.ragged_array_ops.expand_dims", "ops.array_ops.reshape", "ops.array_ops.gather", "ragged.ragged_tensor.is_ragged", "ops.array_ops.ones", "ragged_tensor.RaggedTensor.to_tensor", "framework.ops.name_scope", "ops.array_ops.shape", "<builtin>.range", "ops.array_ops.rank", "ops.array_ops.rank"], "ops.array_ops.gather_nd": [], "framework.tensor_shape.dimension_value": [], "ragged_tensor.RaggedTensor.to_tensor": [], "ragged.ragged_array_ops.expand_dims": [], "ragged.ragged_array_ops.tile": [], "ops.array_ops.expand_dims": [], "ragged.ragged_gather_ops._ragged_gather_nd_v1": ["ops.array_ops.rank"], "framework.ops.RegisterGradient": [], "ragged.ragged_gather_ops._ragged_gather_grad": ["ops.array_ops.gather", "ragged.ragged_math_ops.range", "ops.array_ops.shape", "framework.indexed_slices.IndexedSlices", "ops.array_ops.reshape"], "ragged.ragged_math_ops.range": [], "framework.indexed_slices.IndexedSlices": []}