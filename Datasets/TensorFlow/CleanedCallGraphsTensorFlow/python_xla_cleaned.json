{"python.xla": ["python._pywrap_toco_api.FlatBufferToMlir", "framework.ops.no_gradient", "framework.ops.no_gradient", "framework.ops.no_gradient", "framework.ops.RegisterGradient"], "python.xla._unary_op": [], "python.xla._unary_op.unary_op_wrapper": ["ops.math_ops.sin", "ops.math_ops.cos", "ops.special_math_ops.bessel_i0e", "ops.math_ops.real", "ops.math_ops.round", "ops.math_ops.erfc", "ops.math_ops.neg", "ops.math_ops.conj", "ops.math_ops.is_finite", "ops.math_ops.sign", "ops.math_ops.exp", "ops.math_ops.lgamma", "ops.special_math_ops.bessel_i1e", "ops.math_ops.log1p", "ops.math_ops.floor", "ops.math_ops.ceil", "ops.math_ops.erf", "ops.math_ops.abs", "ops.math_ops.erfinv", "ops.math_ops.log", "ops.math_ops.expm1", "ops.math_ops.digamma", "ops.math_ops.imag", "ops.math_ops.tanh", "ops.math_ops.ndtri", "ops.math_ops.logical_not"], "ops.math_ops.log1p": [], "ops.math_ops.floor": [], "ops.math_ops.ceil": [], "ops.math_ops.sin": [], "ops.math_ops.cos": [], "ops.special_math_ops.bessel_i0e": [], "ops.math_ops.real": [], "ops.math_ops.round": [], "ops.math_ops.erf": [], "ops.math_ops.erfc": [], "ops.math_ops.neg": [], "ops.math_ops.abs": [], "ops.math_ops.conj": [], "ops.math_ops.erfinv": [], "ops.math_ops.is_finite": [], "ops.math_ops.log": [], "ops.math_ops.expm1": [], "ops.math_ops.digamma": [], "ops.math_ops.sign": [], "ops.math_ops.exp": [], "ops.math_ops.lgamma": [], "ops.math_ops.imag": [], "ops.math_ops.tanh": [], "ops.special_math_ops.bessel_i1e": [], "ops.math_ops.ndtri": [], "ops.math_ops.logical_not": [], "python.xla._broadcasting_binary_op": [], "python.xla._broadcasting_binary_op.broadcasting_binary_op_wrapper": ["ops.math_ops.sub", "ops.math_ops.sub", "ops.math_ops.complex", "ops.math_ops.minimum", "ops.math_ops.pow", "ops.math_ops.polygamma", "ops.math_ops.logical_and", "ops.gen_math_ops.mod", "ops.bitwise_ops.left_shift", "ops.gen_math_ops.igamma_grad_a", "framework.ops.convert_to_tensor", "ops.math_ops.atan2", "ops.gen_random_ops.random_gamma_grad", "ops.math_ops.div", "ops.math_ops.not_equal", "ops.math_ops.logical_or", "ops.math_ops.greater_equal", "ops.math_ops.igammac", "ops.math_ops.igamma", "ops.math_ops.add", "ops.math_ops.add", "ops.math_ops.less_equal", "ops.math_ops.equal", "ops.gen_xla_ops.xla_broadcast_helper", "ops.math_ops.mul", "ops.math_ops.zeta", "ops.math_ops.greater", "ops.math_ops.logical_xor", "ops.math_ops.maximum", "ops.math_ops.less"], "framework.ops.convert_to_tensor": [], "ops.gen_xla_ops.xla_broadcast_helper": [], "ops.math_ops.atan2": [], "ops.math_ops.div": [], "ops.gen_random_ops.random_gamma_grad": [], "ops.math_ops.sub": [], "python.xla._shift_right_logical_helper": ["ops.math_ops.cast", "ops.bitwise_ops.right_shift"], "ops.math_ops.not_equal": [], "ops.math_ops.complex": [], "ops.math_ops.minimum": [], "ops.math_ops.logical_or": [], "ops.math_ops.pow": [], "ops.math_ops.greater_equal": [], "ops.math_ops.igammac": [], "ops.math_ops.igamma": [], "ops.math_ops.add": [], "python.xla._shift_right_arithmetic_helper": ["ops.math_ops.cast", "ops.bitwise_ops.right_shift"], "ops.math_ops.less_equal": [], "ops.math_ops.polygamma": [], "ops.math_ops.logical_and": [], "ops.math_ops.equal": [], "ops.gen_math_ops.mod": [], "ops.bitwise_ops.left_shift": [], "ops.math_ops.maximum": [], "ops.math_ops.mul": [], "ops.gen_math_ops.igamma_grad_a": [], "ops.math_ops.zeta": [], "ops.math_ops.greater": [], "ops.math_ops.logical_xor": [], "ops.math_ops.less": [], "ops.math_ops.cast": [], "ops.bitwise_ops.right_shift": [], "python.xla._binary_op": [], "python.xla._binary_op.binary_op_wrapper": ["ops.array_ops.transpose", "ops.array_ops.reverse"], "ops.array_ops.transpose": [], "ops.array_ops.reverse": [], "python.xla.broadcast": ["ops.array_ops.broadcast_to", "ops.array_ops.concat", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "framework.constant_op.constant"], "framework.constant_op.constant": [], "ops.array_ops.shape": [], "ops.array_ops.concat": [], "ops.array_ops.broadcast_to": [], "python.xla.clamp": ["framework.constant_op.constant"], "python.xla.conv": ["numpy_ops.np_utils.result_type", "ops.gen_xla_ops.xla_conv_v2", "ops.gen_xla_ops.xla_conv"], "numpy_ops.np_utils.result_type": [], "ops.gen_xla_ops.xla_conv_v2": [], "ops.gen_xla_ops.xla_conv": [], "python.xla.dot": ["ops.math_ops.tensordot"], "ops.math_ops.tensordot": [], "python.xla.dot_general": ["numpy_ops.np_utils.result_type", "ops.gen_xla_ops.xla_dot_v2", "ops.gen_xla_ops.xla_dot"], "ops.gen_xla_ops.xla_dot_v2": [], "ops.gen_xla_ops.xla_dot": [], "python.xla.self_adjoint_eig": ["ops.gen_xla_ops.xla_self_adjoint_eig"], "ops.gen_xla_ops.xla_self_adjoint_eig": [], "python.xla.svd": ["ops.gen_xla_ops.xla_svd"], "ops.gen_xla_ops.xla_svd": [], "python.xla.random_normal": ["framework.ops.convert_to_tensor", "ops.random_ops.random_normal"], "ops.random_ops.random_normal": [], "python.xla.random_uniform": ["framework.ops.convert_to_tensor", "ops.random_ops.random_uniform"], "ops.random_ops.random_uniform": [], "python.xla.rng_bit_generator": ["ops.stateless_random_ops.convert_alg_to_int", "ops.gen_xla_ops.xla_rng_bit_generator"], "ops.stateless_random_ops.convert_alg_to_int": [], "ops.gen_xla_ops.xla_rng_bit_generator": [], "framework.ops.no_gradient": [], "python.xla.reduce_window": ["<builtin>.len", "ops.gen_xla_ops.xla_reduce_window"], "<builtin>.len": [], "ops.gen_xla_ops.xla_reduce_window": [], "python.xla.reshape": ["ops.array_ops.transpose", "ops.array_ops.reshape"], "ops.array_ops.reshape": [], "python.xla.select": ["ops.array_ops.where"], "ops.array_ops.where": [], "python.xla.slice": ["<builtin>.zip", "<builtin>.tuple", "ops.array_ops.where"], "<builtin>.zip": [], "<builtin>.tuple": [], "framework.ops.RegisterGradient": [], "python.xla._sharding_grad": ["ops.gen_xla_ops.xla_sharding", "framework.attr_value_pb2.AttrValue"], "ops.gen_xla_ops.xla_sharding": [], "framework.attr_value_pb2.AttrValue": [], "python.xla._spmd_full_to_shard_shape_grad": ["ops.gen_xla_ops.xla_spmd_shard_to_full_shape"], "ops.gen_xla_ops.xla_spmd_shard_to_full_shape": [], "python.xla._spmd_shard_to_full_shape_grad": ["ops.gen_xla_ops.xla_spmd_full_to_shard_shape"], "ops.gen_xla_ops.xla_spmd_full_to_shard_shape": [], "python.xla.gather": ["ops.gen_xla_ops.xla_gather"], "ops.gen_xla_ops.xla_gather": [], "python.xla.scatter": ["ops.gen_xla_ops.xla_scatter"], "ops.gen_xla_ops.xla_scatter": []}