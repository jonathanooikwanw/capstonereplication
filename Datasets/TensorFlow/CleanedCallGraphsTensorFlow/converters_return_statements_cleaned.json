{"converters.return_statements": [], "converters.return_statements._RewriteBlock.__init__": [], "converters.return_statements.ConditionalReturnRewriter.visit_Return": [], "converters.return_statements.ConditionalReturnRewriter._postprocess_statement": ["<builtin>.isinstance", "pyct.anno.getanno"], "pyct.anno.getanno": [], "<builtin>.isinstance": [], "converters.return_statements.ConditionalReturnRewriter._visit_statement_block": ["converter.Base.visit_block"], "converter.Base.visit_block": [], "converters.return_statements.ConditionalReturnRewriter.visit_While": ["converter.Base.visit", "converter.Base.visit"], "converter.Base.visit": [], "converters.return_statements.ConditionalReturnRewriter.visit_For": ["converter.Base.visit", "converter.Base.visit"], "converters.return_statements.ConditionalReturnRewriter.visit_With": ["pyct.anno.setanno", "converter.Base.visit_block", "converter.Base.visit_block"], "pyct.anno.setanno": [], "converters.return_statements.ConditionalReturnRewriter.visit_Try": ["converter.Base.visit_block", "converter.Base.visit_block"], "converters.return_statements.ConditionalReturnRewriter.visit_ExceptHandler": ["converter.Base.visit_block"], "converters.return_statements.ConditionalReturnRewriter.visit_If": ["converter.Base.visit", "pyct.anno.setanno", "pyct.anno.setanno"], "converters.return_statements.ConditionalReturnRewriter.visit_FunctionDef": ["converter.Base.visit", "converter.Base.visit"], "converters.return_statements._Block.__init__": [], "converters.return_statements._Block.__repr__": [], "converters.return_statements._Function.__init__": [], "converters.return_statements._Function.__repr__": [], "converters.return_statements.ReturnStatementsTransformer.__init__": ["<builtin>.super"], "<builtin>.super": [], "converters.return_statements.ReturnStatementsTransformer.visit_Return": ["pyct.templates.replace", "<builtin>.reversed", "pyct.parser.parse_expression"], "<builtin>.reversed": [], "pyct.parser.parse_expression": [], "pyct.templates.replace": [], "converters.return_statements.ReturnStatementsTransformer._postprocess_statement": ["pyct.templates.replace"], "converters.return_statements.ReturnStatementsTransformer._visit_statement_block": ["converter.Base.visit_block"], "converters.return_statements.ReturnStatementsTransformer.visit_While": ["pyct.templates.replace_as_expression", "converter.Base.visit", "converter.Base.visit"], "pyct.templates.replace_as_expression": [], "converters.return_statements.ReturnStatementsTransformer.visit_For": ["pyct.anno.setanno", "pyct.anno.getanno", "pyct.anno.getanno", "pyct.templates.replace_as_expression", "converter.Base.visit"], "converters.return_statements.ReturnStatementsTransformer.visit_With": ["converter.Base.visit", "converter.Base.visit_block"], "converters.return_statements.ReturnStatementsTransformer.visit_Try": ["converter.Base.visit_block", "converter.Base.visit_block"], "converters.return_statements.ReturnStatementsTransformer.visit_ExceptHandler": ["converter.Base.visit_block"], "converters.return_statements.ReturnStatementsTransformer.visit_If": ["converter.Base.visit", "converter.Base.visit"], "converters.return_statements.ReturnStatementsTransformer.visit_FunctionDef": ["pyct.templates.replace", "pyct.anno.getanno", "pyct.anno.getanno", "ctx.namer.new_symbol", "<builtin>.isinstance"], "ctx.namer.new_symbol": [], "converters.return_statements.transform": ["converter.Base.__init__", "static_analysis.activity.resolve", "pyct.qual_names.resolve", "pyct.qual_names.resolve", "converter.Base.visit"], "pyct.qual_names.resolve": [], "static_analysis.activity.resolve": [], "converter.Base.__init__": []}