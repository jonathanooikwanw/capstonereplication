{"static_analysis.type_inference": ["<builtin>.object"], "static_analysis.type_inference.Resolver.res_name": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "static_analysis.type_inference.Resolver.res_value": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_arg": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_call": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_slice": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_compare": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_unop": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_binop": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_list_literal": ["<builtin>.NotImplementedError"], "static_analysis.type_inference._TypeMap.__init__": ["<builtin>.set", "<builtin>.isinstance"], "<builtin>.isinstance": [], "<builtin>.set": [], "static_analysis.type_inference._TypeMap.__eq__": ["<builtin>.all", "<builtin>.frozenset"], "<builtin>.frozenset": [], "<builtin>.all": [], "static_analysis.type_inference._TypeMap.__ne__": ["pyct.anno.getanno"], "static_analysis.type_inference._TypeMap.__or__": ["<builtin>.set", "pyct.anno.getanno", "<builtin>.isinstance"], "static_analysis.type_inference._TypeMap.__repr__": [], "<builtin>.object": [], "static_analysis.type_inference.StmtInferrer.__init__": [], "static_analysis.type_inference.StmtInferrer.visit": ["pyct.anno.getanno", "pyct.anno.setanno", "<builtin>.super", "<builtin>.tuple"], "<builtin>.super": [], "static_analysis.type_inference.StmtInferrer._check_set": ["<builtin>.ValueError", "<builtin>.isinstance"], "<builtin>.tuple": [], "pyct.anno.setanno": [], "<builtin>.ValueError": [], "static_analysis.type_inference.StmtInferrer.visit_Constant": ["pyct.anno.setanno"], "static_analysis.type_inference.StmtInferrer._apply_unpacking": ["pyct.anno.setanno", "<builtin>.isinstance", "<builtin>.enumerate"], "<builtin>.enumerate": [], "static_analysis.type_inference.StmtInferrer.visit_Tuple": ["<builtin>.set", "pyct.anno.setanno", "<builtin>.isinstance", "itertools.product", "pyct.anno.setanno"], "itertools.product": [], "static_analysis.type_inference.StmtInferrer.visit_List": ["pyct.anno.setanno", "pyct.anno.setanno", "<builtin>.tuple", "<builtin>.isinstance"], "static_analysis.type_inference.StmtInferrer.visit_Set": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.StmtInferrer.visit_Name": ["pyct.anno.setanno", "pyct.anno.setanno", "pyct.anno.getanno", "<builtin>.isinstance"], "pyct.anno.getanno": [], "static_analysis.type_inference.StmtInferrer.visit_Attribute": ["pyct.anno.getanno", "Basic.QN.of", "<builtin>.getattr", "pyct.anno.setanno", "pyct.anno.setanno", "Static.VALUE.of", "<builtin>.any"], "Static.VALUE.of": [], "<builtin>.getattr": [], "Basic.QN.of": [], "<builtin>.any": [], "static_analysis.type_inference.StmtInferrer.visit_FunctionDef": ["Static.VALUE.of", "<builtin>.set", "pyct.qual_names.QN", "Basic.QN.of", "<builtin>.NotImplementedError"], "pyct.qual_names.QN": [], "static_analysis.type_inference.StmtInferrer._resolve_typed_callable": ["<builtin>.type", "<builtin>.set", "<builtin>.NotImplementedError", "<builtin>.isinstance"], "<builtin>.type": [], "static_analysis.type_inference.StmtInferrer.visit_Call": ["Basic.QN.of", "Basic.QN.of", "<builtin>.isinstance", "Static.TYPES.of", "Static.TYPES.of", "<builtin>.ValueError", "Static.TYPES.of"], "Static.TYPES.of": [], "static_analysis.type_inference.StmtInferrer.visit_Expr": ["Static.TYPES.of"], "static_analysis.type_inference.StmtInferrer.visit_Assign": ["Static.TYPES.of"], "static_analysis.type_inference.StmtInferrer.visit_Subscript": ["Static.TYPES.of", "Static.TYPES.of"], "static_analysis.type_inference.StmtInferrer.visit_Compare": ["Static.TYPES.of", "Static.TYPES.of", "<builtin>.any"], "static_analysis.type_inference.StmtInferrer.visit_BinOp": ["Static.TYPES.of", "Static.TYPES.of"], "static_analysis.type_inference.StmtInferrer.visit_UnaryOp": ["Static.TYPES.of", "Static.TYPES.of"], "static_analysis.type_inference.Analyzer.__init__": ["<builtin>.super", "Static.TYPES.of"], "static_analysis.type_inference.Analyzer.init_state": ["Static.TYPES.of"], "static_analysis.type_inference.Analyzer._update_closure_types": ["Static.CLOSURE_TYPES.add_to", "Static.CLOSURE_TYPES.of", "<builtin>.set"], "Static.CLOSURE_TYPES.of": [], "Static.CLOSURE_TYPES.add_to": [], "static_analysis.type_inference.Analyzer.visit_node": ["Static.SCOPE.of", "Static.DEFINED_FNS_IN.of", "<builtin>.str", "Static.DEFINED_FNS_IN.of", "Static.DEFINED_FNS_IN.of", "Static.DEFINED_FNS_IN.of", "Static.DEFINED_FNS_IN.of"], "Static.DEFINED_FNS_IN.of": [], "Static.SCOPE.of": [], "<builtin>.str": [], "static_analysis.type_inference.FunctionVisitor.__init__": ["<builtin>.super"], "static_analysis.type_inference.FunctionVisitor.visit_FunctionDef": ["Static.DEFINED_FNS_IN.of", "transformer.Base.visit_block", "cfg.GraphVisitor.visit_forward", "pyct.anno.getanno"], "cfg.GraphVisitor.visit_forward": [], "transformer.Base.visit_block": [], "static_analysis.type_inference.resolve": ["pyct.anno.getanno", "transformer.Base.visit"], "transformer.Base.visit": []}