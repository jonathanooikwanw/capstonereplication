{"converters.control_flow_deprecated_py2": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_cond_branch": ["gast.Constant", "<builtin>.str", "<builtin>.len", "pyct.templates.replace", "<builtin>.zip"], "<builtin>.len": [], "pyct.templates.replace": [], "<builtin>.zip": [], "<builtin>.str": [], "gast.Constant": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_cond_expr": ["pyct.templates.replace"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._fmt_symbols": ["<builtin>.map"], "<builtin>.map": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._determine_aliased_symbols": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_state_functions": ["pyct.templates.replace", "<builtin>.tuple"], "<builtin>.tuple": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_loop_options": ["gast.Constant", "pyct.anno.getanno", "<builtin>.list", "pyct.anno.hasanno", "<builtin>.zip", "gast.Dict"], "pyct.anno.hasanno": [], "gast.Dict": [], "pyct.anno.getanno": [], "<builtin>.list": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_undefined_assigns": ["gast.Constant", "pyct.templates.replace"], "converters.control_flow_deprecated_py2.ControlFlowTransformer.visit_If": ["<builtin>.len", "pyct.ast_util.rename_symbols", "<builtin>.zip", "<builtin>.dict", "<builtin>.tuple", "gast.Tuple", "<builtin>.str", "pyct.anno.getanno", "gast.Constant", "pyct.anno.getanno", "<builtin>.set", "pyct.anno.getanno", "pyct.templates.replace_as_expression", "ctx.namer.new_symbol", "ctx.namer.new_symbol", "ctx.namer.new_symbol", "converter.Base.create_assignment", "converter.Base.generic_visit", "converter.Base.generic_visit"], "converter.Base.generic_visit": [], "<builtin>.set": [], "ctx.namer.new_symbol": [], "<builtin>.dict": [], "pyct.ast_util.rename_symbols": [], "gast.Tuple": [], "pyct.templates.replace_as_expression": [], "converter.Base.create_assignment": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_basic_loop_vars": ["<builtin>.frozenset"], "<builtin>.frozenset": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_composite_loop_vars": ["<builtin>.all", "<builtin>.frozenset", "<builtin>.tuple"], "<builtin>.all": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_loop_vars": ["pyct.anno.getanno", "pyct.anno.getanno", "pyct.anno.getanno"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._loop_var_constructs": ["gast.Tuple", "<builtin>.len", "<builtin>.tuple"], "converters.control_flow_deprecated_py2.ControlFlowTransformer.visit_While": ["ctx.namer.new_symbol", "ctx.namer.new_symbol", "pyct.anno.getanno", "gast.Constant", "pyct.anno.getanno", "<builtin>.str", "pyct.anno.getanno", "pyct.templates.replace", "pyct.templates.replace", "converter.Base.generic_visit", "converter.Base.generic_visit", "<builtin>.tuple"], "converters.control_flow_deprecated_py2.ControlFlowTransformer.visit_For": ["ctx.namer.new_symbol", "pyct.parser.parse_expression", "pyct.parser.parse_expression", "pyct.anno.getanno", "gast.Constant", "pyct.anno.getanno", "<builtin>.str", "pyct.anno.hasanno", "pyct.anno.hasanno", "pyct.templates.replace", "pyct.templates.replace", "converter.Base.generic_visit", "converter.Base.generic_visit", "<builtin>.tuple"], "pyct.parser.parse_expression": [], "converters.control_flow_deprecated_py2.AnnotatedDef.__init__": ["<builtin>.super"], "<builtin>.super": [], "converters.control_flow_deprecated_py2.transform": ["pyct.cfg.build", "static_analysis.reaching_definitions.resolve", "static_analysis.liveness.resolve", "pyct.qual_names.resolve", "converter.Base.__init__", "static_analysis.reaching_fndefs.resolve", "converter.Base.visit", "static_analysis.activity.resolve"], "pyct.cfg.build": [], "pyct.qual_names.resolve": [], "static_analysis.activity.resolve": [], "static_analysis.reaching_definitions.resolve": [], "static_analysis.reaching_fndefs.resolve": [], "static_analysis.liveness.resolve": [], "converter.Base.__init__": [], "converter.Base.visit": []}