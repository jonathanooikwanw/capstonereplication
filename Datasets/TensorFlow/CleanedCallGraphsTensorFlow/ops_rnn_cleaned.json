{"ops.rnn": ["util.tf_export.tf_export", "util.deprecation.deprecated", "util.dispatch.add_dispatch_support"], "ops.rnn._transpose_batch_time": ["ops.array_ops.transpose", "ops.array_ops.rank", "framework.tensor_shape.TensorShape", "ops.array_ops.concat", "ops.math_ops.range"], "ops.array_ops.rank": [], "ops.math_ops.range": [], "ops.array_ops.concat": [], "ops.array_ops.transpose": [], "framework.tensor_shape.TensorShape": [], "ops.rnn._best_effort_input_batch_size": ["ops.array_ops.shape", "<builtin>.ValueError"], "<builtin>.ValueError": [], "ops.array_ops.shape": [], "ops.rnn._infer_state_dtype": ["util.nest.is_sequence", "<builtin>.ValueError", "<builtin>.all", "util.nest.flatten"], "util.nest.is_sequence": [], "util.nest.flatten": [], "<builtin>.all": [], "ops.rnn._maybe_tensor_shape_from_tensor": ["<builtin>.isinstance", "framework.tensor_shape.as_shape", "framework.tensor_util.constant_value"], "<builtin>.isinstance": [], "framework.tensor_util.constant_value": [], "framework.tensor_shape.as_shape": [], "ops.rnn._should_cache": ["ops.control_flow_util_v2.in_while_loop_defun", "ops.control_flow_util.GetContainingWhileContext", "eager.context.executing_eagerly", "framework.ops.get_default_graph"], "eager.context.executing_eagerly": [], "framework.ops.get_default_graph": [], "ops.control_flow_util.GetContainingWhileContext": [], "ops.control_flow_util_v2.in_while_loop_defun": [], "ops.rnn._rnn_step": ["framework.ops.get_default_graph", "framework.ops.get_default_graph", "ops.control_flow_ops.cond", "<builtin>.len", "util.nest.pack_sequence_as", "util.nest.pack_sequence_as", "<builtin>.zip", "<builtin>.isinstance", "util.nest.flatten", "<builtin>.ValueError", "util.nest.assert_same_structure"], "ops.rnn._rnn_step._copy_one_through": ["ops.array_ops.where", "<builtin>.isinstance", "framework.ops.colocate_with"], "framework.ops.colocate_with": [], "ops.array_ops.where": [], "ops.rnn._rnn_step._copy_some_through": ["<builtin>.zip", "framework.ops.colocate_with"], "<builtin>.zip": [], "ops.rnn._rnn_step._maybe_copy_some_through": ["ops.control_flow_ops.cond", "ops.control_flow_ops.cond", "ops.control_flow_ops.cond", "util.nest.flatten", "util.nest.assert_same_structure"], "ops.rnn.static_rnn.<lambda1>": [], "ops.rnn._dynamic_rnn_loop._time_step.<lambda1>": [], "util.nest.assert_same_structure": [], "ops.rnn._rnn_step._maybe_copy_some_through.<lambda1>": [], "ops.rnn._rnn_step._maybe_copy_some_through.<lambda2>": ["util.nest.assert_same_structure"], "ops.control_flow_ops.cond": [], "ops.rnn._rnn_step.<lambda1>": [], "<builtin>.len": [], "util.nest.pack_sequence_as": [], "ops.rnn._reverse_seq": ["<builtin>.reversed", "<builtin>.list", "ops.array_ops.reverse_sequence", "<builtin>.range", "<builtin>.zip", "<builtin>.tuple", "util.nest.pack_sequence_as", "util.nest.flatten", "ops.array_ops.unstack", "framework.tensor_shape.unknown_shape", "ops.array_ops.stack", "<builtin>.len"], "<builtin>.reversed": [], "<builtin>.list": [], "<builtin>.tuple": [], "<builtin>.range": [], "framework.tensor_shape.unknown_shape": [], "ops.array_ops.stack": [], "ops.array_ops.reverse_sequence": [], "ops.array_ops.unstack": [], "util.deprecation.deprecated": [], "util.tf_export.tf_export": [], "util.dispatch.add_dispatch_support": [], "ops.rnn.bidirectional_dynamic_rnn": ["ops.rnn_cell_impl.assert_like_rnncell", "ops.variable_scope.variable_scope", "ops.variable_scope.variable_scope", "ops.variable_scope.variable_scope", "util.nest.map_structure"], "ops.rnn_cell_impl.assert_like_rnncell": [], "ops.variable_scope.variable_scope": [], "ops.rnn.dynamic_rnn": ["ops.array_ops.identity", "ops.array_ops.identity", "ops.rnn_cell_impl.assert_like_rnncell", "ops.rnn_cell_impl.assert_like_rnncell", "<builtin>.getattr", "ops.variable_scope.variable_scope", "eager.context.executing_eagerly", "eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "util.nest.pack_sequence_as", "util.nest.pack_sequence_as", "<builtin>.tuple", "framework.ops.control_dependencies", "util.nest.flatten", "<builtin>.ValueError", "util.nest.flatten", "util.nest.map_structure", "ops.math_ops.cast"], "ops.rnn.bidirectional_dynamic_rnn._reverse": ["ops.array_ops.reverse_sequence", "ops.array_ops.reverse"], "ops.array_ops.reverse": [], "ops.rnn.bidirectional_dynamic_rnn._map_reverse": ["ops.array_ops.reverse"], "util.nest.map_structure": [], "ops.rnn.dynamic_rnn.<lambda1>": [], "framework.ops.convert_to_tensor": [], "ops.math_ops.cast": [], "ops.array_ops.identity": [], "<builtin>.getattr": [], "ops.rnn.dynamic_rnn._assert_has_shape": ["ops.control_flow_ops.Assert", "ops.math_ops.equal", "ops.math_ops.reduce_all", "ops.array_ops.shape", "ops.array_ops.stack"], "ops.math_ops.equal": [], "ops.math_ops.reduce_all": [], "ops.control_flow_ops.Assert": [], "framework.ops.control_dependencies": [], "ops.rnn._dynamic_rnn_loop": ["framework.ops.name_scope", "util.nest.pack_sequence_as", "<builtin>.range", "<builtin>.isinstance", "<builtin>.tuple", "util.nest.pack_sequence_as", "ops.math_ops.reduce_min", "ops.math_ops.reduce_min", "util.nest.map_structure_up_to", "ops.array_ops.constant", "ops.rnn_cell_impl._concat", "eager.context.executing_eagerly", "util.nest.flatten", "<builtin>.ValueError", "util.nest.flatten", "ops.control_flow_ops.while_loop", "ops.math_ops.minimum", "framework.tensor_shape.TensorShape", "framework.tensor_shape.TensorShape", "<builtin>.zip", "ops.math_ops.maximum", "ops.array_ops.shape", "ops.math_ops.reduce_max", "<builtin>.len", "ops.math_ops.reduce_max", "<builtin>.enumerate"], "<builtin>.enumerate": [], "ops.rnn._dynamic_rnn_loop._create_zero_arrays": ["ops.math_ops.reduce_max", "ops.array_ops.stack", "ops.rnn_cell_impl._concat", "ops.array_ops.zeros"], "ops.rnn_cell_impl._concat": [], "ops.array_ops.zeros": [], "ops.math_ops.reduce_min": [], "ops.math_ops.reduce_max": [], "ops.array_ops.constant": [], "framework.ops.name_scope": [], "ops.rnn._dynamic_rnn_loop._create_ta": ["ops.tensor_array_ops.TensorArray"], "ops.tensor_array_ops.TensorArray": [], "ops.rnn._dynamic_rnn_loop._time_step": ["ops.tensor_array_ops.TensorArray", "ops.tensor_array_ops.TensorArray", "util.nest.pack_sequence_as", "<builtin>.zip", "<builtin>.tuple", "util.nest.flatten"], "ops.math_ops.maximum": [], "ops.math_ops.minimum": [], "ops.rnn._dynamic_rnn_loop.<lambda1>": [], "ops.control_flow_ops.while_loop": [], "ops.rnn._dynamic_rnn_loop.<lambda2>": ["ops.array_ops.stack"], "util.nest.map_structure_up_to": [], "ops.rnn.raw_rnn": ["framework.tensor_shape.dimension_at_index", "ops.rnn_cell_impl.assert_like_rnncell", "util.nest.pack_sequence_as", "framework.tensor_shape.dimension_value", "ops.tensor_array_ops.TensorArray", "ops.tensor_array_ops.TensorArray", "ops.tensor_array_ops.TensorArray", "ops.rnn_cell_impl._concat", "ops.variable_scope.variable_scope", "ops.array_ops.zeros", "util.nest.flatten", "framework.constant_op.constant", "ops.control_flow_ops.while_loop", "<builtin>.callable", "framework.tensor_shape.TensorShape", "<builtin>.zip", "ops.array_ops.shape", "<builtin>.len", "<builtin>.enumerate", "framework.ops.convert_to_tensor", "<builtin>.TypeError", "util.nest.assert_same_structure"], "<builtin>.callable": [], "<builtin>.TypeError": [], "ops.rnn.raw_rnn.<lambda1>": [], "framework.constant_op.constant": [], "framework.tensor_shape.dimension_at_index": [], "framework.tensor_shape.dimension_value": [], "ops.rnn.raw_rnn.condition": ["ops.math_ops.logical_not", "ops.math_ops.reduce_all"], "ops.math_ops.logical_not": [], "ops.rnn.raw_rnn.body": ["util.nest.map_structure", "util.nest.map_structure", "ops.math_ops.logical_or", "util.nest.assert_same_structure"], "ops.rnn.raw_rnn.body._copy_some_through": ["util.nest.map_structure"], "ops.rnn.raw_rnn.body._copy_some_through.copy_fn": ["ops.array_ops.where", "<builtin>.isinstance", "framework.ops.colocate_with"], "ops.rnn.raw_rnn.body.<lambda1>": [], "ops.math_ops.logical_or": [], "ops.rnn.static_rnn": ["framework.tensor_shape.dimension_at_index", "ops.rnn_cell_impl.assert_like_rnncell", "util.nest.is_sequence", "util.nest.pack_sequence_as", "<builtin>.tuple", "framework.tensor_shape.dimension_value", "ops.math_ops.reduce_min", "ops.math_ops.reduce_min", "ops.variable_scope.variable_scope", "util.nest.flatten", "<builtin>.ValueError", "util.nest.flatten", "ops.array_ops.shape", "ops.math_ops.reduce_max", "<builtin>.enumerate", "<builtin>.getattr", "ops.math_ops.reduce_max", "ops.math_ops.reduce_max", "framework.ops.convert_to_tensor", "<builtin>.TypeError", "ops.math_ops.cast"], "ops.rnn.static_rnn._create_zero_output": ["ops.math_ops.cast", "ops.rnn_cell_impl._concat", "framework.tensor_shape.TensorShape", "framework.tensor_shape.dimension_value", "ops.array_ops.zeros", "ops.array_ops.stack"], "ops.rnn.static_rnn.<lambda2>": [], "ops.rnn.static_state_saving_rnn": ["ops.array_ops.identity", "util.nest.is_sequence", "util.nest.pack_sequence_as", "<builtin>.zip", "framework.ops.control_dependencies", "util.nest.flatten", "<builtin>.ValueError", "util.nest.flatten", "<builtin>.len"], "ops.rnn.static_bidirectional_rnn": ["ops.rnn_cell_impl.assert_like_rnncell", "ops.variable_scope.variable_scope", "util.nest.is_sequence", "<builtin>.TypeError", "util.nest.is_sequence", "ops.array_ops.concat", "<builtin>.zip", "<builtin>.tuple", "util.nest.pack_sequence_as", "util.nest.flatten", "<builtin>.ValueError", "util.nest.flatten"]}