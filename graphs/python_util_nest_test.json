{"Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test": ["tensorflow.python.platform.test.main"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomMapping.__init__": ["<builtin>.dict"], "<builtin>.dict": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomMapping.__getitem__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomMapping.__iter__": ["<builtin>.iter"], "<builtin>.iter": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomMapping.__len__": ["<builtin>.len"], "<builtin>.len": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomSequenceThatRaisesException.__len__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomSequenceThatRaisesException.__getitem__": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "collections.namedtuple": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest": ["absl.testing.parameterized.named_parameters", "absl.testing.parameterized.parameters", "tensorflow.python.framework.test_util.assert_no_new_pyobjects_executing_eagerly", "collections.namedtuple"], "attr.ib": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.SampleAttr": ["attr.ib"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.UnsortedSampleAttr": ["attr.ib"], "tensorflow.python.framework.test_util.assert_no_new_pyobjects_executing_eagerly": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testAttrsFlattenAndPack": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.pack_sequence_as", "absl.testing.parameterized.TestCase.assertFalse", "tensorflow.python.util.nest.flatten", "absl.testing.parameterized.TestCase.assertTrue", "absl.testing.parameterized.TestCase.skipTest", "absl.testing.parameterized.TestCase.assertRaisesRegex", "tensorflow.python.util.nest._is_attrs", "absl.testing.parameterized.TestCase.assertIsInstance"], "absl.testing.parameterized.TestCase.skipTest": [], "tensorflow.python.util.nest._is_attrs": [], "absl.testing.parameterized.TestCase.assertFalse": [], "absl.testing.parameterized.TestCase.assertTrue": [], "tensorflow.python.util.nest.flatten": [], "absl.testing.parameterized.TestCase.assertEqual": [], "tensorflow.python.util.nest.pack_sequence_as": [], "absl.testing.parameterized.TestCase.assertIsInstance": [], "absl.testing.parameterized.TestCase.assertRaisesRegex": [], "absl.testing.parameterized.parameters": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testAttrsMapStructure": ["absl.testing.parameterized.TestCase.assertEqual", "absl.testing.parameterized.TestCase.skipTest", "tensorflow.python.util.nest.map_structure"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testAttrsMapStructure.<lambda1>": [], "tensorflow.python.util.nest.map_structure": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenAndPack": ["absl.testing.parameterized.TestCase.assertEqual", "absl.testing.parameterized.TestCase.assertRaises", "tensorflow.python.util.nest.pack_sequence_as", "tensorflow.python.util.nest.flatten", "absl.testing.parameterized.TestCase.assertRaisesRegex", "numpy.array"], "numpy.array": [], "absl.testing.parameterized.TestCase.assertRaises": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenDictOrder": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.flatten"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testPackDictOrder": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.pack_sequence_as", "absl.testing.parameterized.TestCase.assertIsInstance"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenAndPackMappingViews": ["tensorflow.python.util.nest.pack_sequence_as", "absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.flatten", "collections.OrderedDict"], "collections.OrderedDict": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenAndPack_withDicts": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.pack_sequence_as", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomMapping.__init__", "tensorflow.python.util.nest.flatten", "<builtin>.list", "absl.testing.parameterized.TestCase.assertIsInstance", "collections.OrderedDict"], "<builtin>.list": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlatten_numpyIsNotFlattened": ["tensorflow.python.util.nest.flatten", "absl.testing.parameterized.TestCase.assertLen", "numpy.array"], "absl.testing.parameterized.TestCase.assertLen": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlatten_stringIsNotFlattened": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.flatten", "absl.testing.parameterized.TestCase.assertLen", "tensorflow.python.util.nest.pack_sequence_as"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testPackSequenceAs_notIterableError": ["absl.testing.parameterized.TestCase.assertRaisesRegex", "tensorflow.python.util.nest.pack_sequence_as"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testPackSequenceAs_wrongLengthsError": ["absl.testing.parameterized.TestCase.assertRaisesRegex", "tensorflow.python.util.nest.pack_sequence_as"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testPackSequenceAs_CompositeTensor": ["tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor.from_row_splits", "absl.testing.parameterized.TestCase.assertRaisesRegex", "tensorflow.python.util.nest.pack_sequence_as"], "tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor.from_row_splits": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testIsNested": ["tensorflow.python.ops.math_ops.tanh", "<builtin>.set", "absl.testing.parameterized.TestCase.assertFalse", "tensorflow.python.ops.array_ops.ones", "tensorflow.python.util.nest.is_nested", "absl.testing.parameterized.TestCase.assertTrue", "numpy.ones"], "tensorflow.python.util.nest.is_nested": [], "<builtin>.set": [], "tensorflow.python.ops.array_ops.ones": [], "tensorflow.python.ops.math_ops.tanh": [], "numpy.ones": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenDictItems": ["absl.testing.parameterized.TestCase.assertEqual", "absl.testing.parameterized.TestCase.assertRaises", "absl.testing.parameterized.TestCase.assertRaisesRegex", "tensorflow.python.util.nest.flatten_dict_items"], "tensorflow.python.util.nest.flatten_dict_items": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testAssertSameStructure": ["absl.testing.parameterized.TestCase.assertRaises", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.util.nest.assert_same_structure", "absl.testing.parameterized.TestCase.assertRaisesRegex", "numpy.array"], "tensorflow.python.util.nest.assert_same_structure": [], "tensorflow.python.framework.constant_op.constant": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testHeterogeneousComparison": ["tensorflow.python.util.nest.assert_same_structure", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomMapping.__init__"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.map_structure", "absl.testing.parameterized.TestCase.assertAllEqual", "tensorflow.python.util.nest.flatten", "collections.defaultdict", "tensorflow.python.util.nest.assert_same_structure", "absl.testing.parameterized.TestCase.assertRaisesRegex", "absl.testing.parameterized.TestCase.assertNotEqual"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda1>": [], "absl.testing.parameterized.TestCase.assertAllEqual": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda2>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda3>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda4>": [], "collections.defaultdict": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda5>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda6>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda7>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda8>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda9>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda10>": [], "absl.testing.parameterized.TestCase.assertNotEqual": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda11>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda12>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda13>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda14>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda15>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda16>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda17>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda18>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda19>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructure.<lambda20>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureWithStrings": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.util.nest.map_structure"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureWithStrings.<lambda1>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureWithStrings.<lambda2>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureOverPlaceholders": ["tensorflow.python.framework.ops.Graph", "absl.testing.parameterized.TestCase.assertShapeEqual", "tensorflow.python.util.nest.map_structure", "absl.testing.parameterized.TestCase.cached_session", "tensorflow.python.util.nest.assert_same_structure", "numpy.zeros", "absl.testing.parameterized.TestCase.assertAllClose", "numpy.random.randn", "tensorflow.python.ops.array_ops.placeholder"], "tensorflow.python.framework.ops.Graph": [], "tensorflow.python.ops.array_ops.placeholder": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureOverPlaceholders.<lambda1>": [], "numpy.zeros": [], "absl.testing.parameterized.TestCase.assertShapeEqual": [], "numpy.random.randn": [], "absl.testing.parameterized.TestCase.cached_session": [], "absl.testing.parameterized.TestCase.assertAllClose": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testAssertShallowStructure": ["tensorflow.python.util.nest._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format", "tensorflow.python.util.nest.assert_shallow_structure", "absl.testing.parameterized.TestCase.assertRaisesWithLiteralMatch", "collections.OrderedDict", "tensorflow.python.util.nest._SHALLOW_TREE_HAS_INVALID_KEYS.format", "<builtin>.len", "<builtin>.type", "tensorflow.python.util.nest._STRUCTURES_HAVE_MISMATCHING_TYPES.format"], "tensorflow.python.util.nest._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format": [], "absl.testing.parameterized.TestCase.assertRaisesWithLiteralMatch": [], "tensorflow.python.util.nest.assert_shallow_structure": [], "<builtin>.type": [], "tensorflow.python.util.nest._STRUCTURES_HAVE_MISMATCHING_TYPES.format": [], "tensorflow.python.util.nest._SHALLOW_TREE_HAS_INVALID_KEYS.format": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenUpTo": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format", "tensorflow.python.util.nest.assert_shallow_structure", "tensorflow.python.util.nest.flatten", "tensorflow.python.util.nest.flatten_up_to", "absl.testing.parameterized.TestCase.assertRaisesRegex", "<builtin>.len", "collections.OrderedDict"], "tensorflow.python.util.nest.flatten_up_to": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenWithTuplePathsUpTo": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format", "absl.testing.parameterized.TestCase.assertRaisesWithLiteralMatch", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenWithTuplePathsUpTo.get_paths_and_values", "tensorflow.python.util.nest.flatten", "tensorflow.python.util.nest.flatten_with_tuple_paths", "collections.namedtuple", "<builtin>.len", "tensorflow.python.util.nest._IF_SHALLOW_IS_SEQ_INPUT_MUST_BE_SEQ.format", "<builtin>.type", "collections.OrderedDict"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenWithTuplePathsUpTo.get_paths_and_values": ["tensorflow.python.util.nest.flatten_with_tuple_paths_up_to"], "tensorflow.python.util.nest.flatten_with_tuple_paths_up_to": [], "tensorflow.python.util.nest.flatten_with_tuple_paths": [], "tensorflow.python.util.nest._IF_SHALLOW_IS_SEQ_INPUT_MUST_BE_SEQ.format": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureUpTo": ["absl.testing.parameterized.TestCase.assertEqual", "<builtin>.dict", "absl.testing.parameterized.TestCase.assertRaisesWithLiteralMatch", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test._CustomMapping.__init__", "tensorflow.python.util.nest.map_structure_up_to", "tensorflow.python.util.nest._SHALLOW_TREE_HAS_INVALID_KEYS.format", "collections.namedtuple"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureUpTo.<lambda1>": [], "tensorflow.python.util.nest.map_structure_up_to": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureUpTo.<lambda2>": ["<builtin>.len"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureUpTo.<lambda3>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureUpTo.<lambda4>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureUpTo.<lambda5>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapStructureUpTo.<lambda6>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testGetTraverseShallowStructure": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.get_traverse_shallow_structure", "absl.testing.parameterized.TestCase.assertRaisesRegex", "tensorflow.python.util.nest.assert_shallow_structure"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testGetTraverseShallowStructure.<lambda1>": ["<builtin>.isinstance"], "<builtin>.isinstance": [], "tensorflow.python.util.nest.get_traverse_shallow_structure": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testGetTraverseShallowStructure.<lambda2>": ["<builtin>.isinstance"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testGetTraverseShallowStructure.<lambda3>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testGetTraverseShallowStructure.<lambda4>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testGetTraverseShallowStructure.<lambda5>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testYieldFlatStringPaths": ["absl.testing.parameterized.TestCase.assertEqual", "<builtin>.list", "tensorflow.python.util.nest.yield_flat_paths"], "tensorflow.python.util.nest.yield_flat_paths": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenWithStringPaths": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.flatten_with_joined_string_paths"], "tensorflow.python.util.nest.flatten_with_joined_string_paths": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenWithTuplePaths": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.flatten_with_tuple_paths"], "absl.testing.parameterized.named_parameters": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapWithPathsCompatibleStructures": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.map_structure_with_paths"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapWithPathsCompatibleStructures.format_sum": ["<builtin>.sum"], "<builtin>.sum": [], "tensorflow.python.util.nest.map_structure_with_paths": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapWithPathsIncompatibleStructures": ["absl.testing.parameterized.TestCase.assertRaises", "tensorflow.python.util.nest.map_structure_with_paths"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapWithPathsIncompatibleStructures.<lambda1>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapWithTuplePathsCompatibleStructures": ["absl.testing.parameterized.TestCase.assertEqual", "tensorflow.python.util.nest.map_structure_with_tuple_paths"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapWithTuplePathsCompatibleStructures.path_and_sum": ["<builtin>.sum"], "tensorflow.python.util.nest.map_structure_with_tuple_paths": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapWithTuplePathsIncompatibleStructures": ["absl.testing.parameterized.TestCase.assertRaises", "tensorflow.python.util.nest.map_structure_with_tuple_paths"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testMapWithTuplePathsIncompatibleStructures.<lambda1>": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testFlattenCustomSequenceThatRaisesException": ["collections.Sequence.__init__", "absl.testing.parameterized.TestCase.assertRaisesRegex", "tensorflow.python.util.nest.flatten"], "collections.Sequence.__init__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testListToTuple": ["tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.util.nest.list_to_tuple"], "tensorflow.python.util.nest.list_to_tuple": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testInvalidCheckTypes": ["tensorflow.python.ops.array_ops.ones", "absl.testing.parameterized.TestCase.assertRaises", "tensorflow.python.ops.array_ops.zeros", "tensorflow.python.util.nest.assert_same_structure"], "tensorflow.python.ops.array_ops.zeros": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testIsNamedtuple": ["absl.testing.parameterized.TestCase.assertFalse", "absl.testing.parameterized.TestCase.assertTrue", "collections.namedtuple", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testIsNamedtuple.SomethingElseWithFields.__init__", "tensorflow.python.util.nest.is_namedtuple", "typing.NamedTuple.__init__"], "tensorflow.python.util.nest.is_namedtuple": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testIsNamedtuple.SubFoo.extra_method": [], "typing.NamedTuple.__init__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testIsNamedtuple.SomethingElseWithFields.__init__": ["<builtin>.super"], "<builtin>.super": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestTest.testSameNamedtuples": ["tensorflow.python.util.nest.same_namedtuples", "absl.testing.parameterized.TestCase.assertFalse", "absl.testing.parameterized.TestCase.assertTrue", "collections.namedtuple", "typing.NamedTuple.__init__"], "tensorflow.python.util.nest.same_namedtuples": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestBenchmark.run_and_report": ["tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.platform.test.Benchmark.report_benchmark", "time.time", "six.moves.xrange"], "six.moves.xrange": [], "time.time": [], "tensorflow.python.platform.test.Benchmark.report_benchmark": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestBenchmark.benchmark_assert_structure": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\util\\nest_test.NestBenchmark.run_and_report"], "tensorflow.python.platform.test.main": []}
