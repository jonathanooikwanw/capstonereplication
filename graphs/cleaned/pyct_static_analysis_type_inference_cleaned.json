{"static_analysis.type_inference": ["<builtin>.object"], "static_analysis.type_inference.Resolver.res_name": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "static_analysis.type_inference.Resolver.res_value": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_arg": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_call": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_slice": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_compare": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_unop": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_binop": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_list_literal": ["<builtin>.NotImplementedError"], "static_analysis.type_inference._TypeMap.__init__": ["<builtin>.set", "<builtin>.isinstance"], "<builtin>.isinstance": [], "<builtin>.set": [], "static_analysis.type_inference._TypeMap.__eq__": ["<builtin>.frozenset", "<builtin>.all"], "<builtin>.frozenset": [], "<builtin>.all": [], "static_analysis.type_inference._TypeMap.__ne__": ["static_analysis.type_inference._TypeMap.__eq__"], "static_analysis.type_inference._TypeMap.__or__": ["static_analysis.type_inference._TypeMap.__init__", "<builtin>.set", "<builtin>.isinstance"], "static_analysis.type_inference._TypeMap.__repr__": [], "<builtin>.object": [], "static_analysis.type_inference.StmtInferrer.__init__": [], "static_analysis.type_inference.StmtInferrer.visit": ["pyct.anno.setanno", "static_analysis.type_inference.StmtInferrer._check_set", "<builtin>.tuple", "<builtin>.super"], "<builtin>.super": [], "static_analysis.type_inference.StmtInferrer._check_set": ["<builtin>.ValueError", "<builtin>.isinstance"], "<builtin>.tuple": [], "pyct.anno.setanno": [], "<builtin>.ValueError": [], "static_analysis.type_inference.StmtInferrer.visit_Constant": ["static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.StmtInferrer._apply_unpacking": ["static_analysis.type_inference.StmtInferrer.visit", "<builtin>.enumerate", "<builtin>.isinstance"], "<builtin>.enumerate": [], "static_analysis.type_inference.StmtInferrer.visit_Tuple": ["<builtin>.isinstance", "static_analysis.type_inference.StmtInferrer._apply_unpacking", "itertools.product", "<builtin>.set", "static_analysis.type_inference.StmtInferrer.visit"], "itertools.product": [], "static_analysis.type_inference.StmtInferrer.visit_List": ["static_analysis.type_inference.StmtInferrer.visit", "static_analysis.type_inference.StmtInferrer._apply_unpacking", "<builtin>.tuple", "<builtin>.isinstance"], "static_analysis.type_inference.StmtInferrer.visit_Set": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.StmtInferrer.visit_Name": ["pyct.anno.setanno", "static_analysis.type_inference.StmtInferrer._check_set", "pyct.anno.getanno", "<builtin>.isinstance"], "pyct.anno.getanno": [], "static_analysis.type_inference.StmtInferrer.visit_Attribute": ["static_analysis.type_inference.StmtInferrer._check_set", "Static.VALUE.of", "Basic.QN.of", "<builtin>.getattr", "pyct.anno.setanno", "<builtin>.any", "static_analysis.type_inference.StmtInferrer.visit"], "Static.VALUE.of": [], "<builtin>.getattr": [], "Basic.QN.of": [], "<builtin>.any": [], "static_analysis.type_inference.StmtInferrer.visit_FunctionDef": ["static_analysis.type_inference.StmtInferrer._check_set", "Basic.QN.of", "pyct.qual_names.QN", "<builtin>.set", "<builtin>.NotImplementedError"], "pyct.qual_names.QN": [], "static_analysis.type_inference.StmtInferrer._resolve_typed_callable": ["<builtin>.type", "<builtin>.set", "<builtin>.NotImplementedError", "<builtin>.isinstance"], "<builtin>.type": [], "static_analysis.type_inference.StmtInferrer.visit_Call": ["static_analysis.type_inference.StmtInferrer._check_set", "<builtin>.ValueError", "<builtin>.isinstance", "Basic.QN.of", "static_analysis.type_inference.StmtInferrer._resolve_typed_callable", "static_analysis.type_inference.StmtInferrer.visit", "Static.TYPES.of"], "Static.TYPES.of": [], "static_analysis.type_inference.StmtInferrer.visit_Expr": ["static_analysis.type_inference.StmtInferrer.visit"], "static_analysis.type_inference.StmtInferrer.visit_Assign": ["static_analysis.type_inference.StmtInferrer.visit"], "static_analysis.type_inference.StmtInferrer.visit_Subscript": ["static_analysis.type_inference.StmtInferrer.visit", "static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.StmtInferrer.visit_Compare": ["static_analysis.type_inference.StmtInferrer.visit", "<builtin>.any", "static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.StmtInferrer.visit_BinOp": ["static_analysis.type_inference.StmtInferrer.visit", "static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.StmtInferrer.visit_UnaryOp": ["static_analysis.type_inference.StmtInferrer.visit", "static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.Analyzer.__init__": ["static_analysis.type_inference._TypeMap.__init__", "<builtin>.super"], "static_analysis.type_inference.Analyzer.init_state": ["static_analysis.type_inference._TypeMap.__init__"], "static_analysis.type_inference.Analyzer._update_closure_types": ["Static.CLOSURE_TYPES.add_to", "<builtin>.set", "Static.CLOSURE_TYPES.of"], "Static.CLOSURE_TYPES.of": [], "Static.CLOSURE_TYPES.add_to": [], "static_analysis.type_inference.Analyzer.visit_node": ["<builtin>.str", "static_analysis.type_inference._TypeMap.__init__", "static_analysis.type_inference.StmtInferrer.__init__", "static_analysis.type_inference.Analyzer._update_closure_types", "Static.DEFINED_FNS_IN.of", "Static.SCOPE.of", "static_analysis.type_inference.StmtInferrer.visit"], "Static.DEFINED_FNS_IN.of": [], "Static.SCOPE.of": [], "<builtin>.str": [], "static_analysis.type_inference.FunctionVisitor.__init__": ["<builtin>.super"], "static_analysis.type_inference.FunctionVisitor.visit_FunctionDef": ["transformer.Base.visit_block", "pyct.anno.getanno", "cfg.GraphVisitor.visit_forward", "static_analysis.type_inference.Analyzer.__init__"], "cfg.GraphVisitor.visit_forward": [], "transformer.Base.visit_block": [], "static_analysis.type_inference.resolve": ["transformer.Base.visit", "static_analysis.type_inference.FunctionVisitor.__init__"], "transformer.Base.visit": []}