{"tensorflow-master.configure": ["tensorflow-master.configure.main"], "tensorflow-master.configure.is_windows": ["platform.system"], "platform.system": [], "tensorflow-master.configure.is_linux": ["platform.system"], "tensorflow-master.configure.is_macos": ["platform.system"], "tensorflow-master.configure.is_ppc64le": ["platform.machine"], "platform.machine": [], "tensorflow-master.configure.is_cygwin": ["platform.system"], "tensorflow-master.configure.get_input": ["<builtin>.input"], "<builtin>.input": [], "tensorflow-master.configure.symlink_force": ["os.remove", "os.symlink"], "os.symlink": [], "os.remove": [], "tensorflow-master.configure.sed_in_place": ["<builtin>.open"], "<builtin>.open": [], "tensorflow-master.configure.write_to_bazelrc": ["<builtin>.open"], "tensorflow-master.configure.write_action_env_to_bazelrc": ["tensorflow-master.configure.write_to_bazelrc", "<builtin>.str"], "<builtin>.str": [], "tensorflow-master.configure.run_shell": ["subprocess.check_output"], "subprocess.check_output": [], "tensorflow-master.configure.cygpath": ["os.path.abspath"], "os.path.abspath": [], "tensorflow-master.configure.get_python_path": ["os.path.isdir", "<builtin>.sorted", "<builtin>.open", "<builtin>.set", "tensorflow-master.configure.run_shell"], "<builtin>.set": [], "<builtin>.sorted": [], "os.path.isdir": [], "tensorflow-master.configure.get_python_major_version": ["tensorflow-master.configure.run_shell"], "tensorflow-master.configure.setup_python": ["tensorflow-master.configure.is_windows", "<builtin>.print", "os.access", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.get_from_env_or_user_or_default", "tensorflow-master.configure.is_cygwin", "tensorflow-master.configure.cygpath", "tensorflow-master.configure.get_input", "tensorflow-master.configure.get_python_path", "tensorflow-master.configure.write_to_bazelrc", "<builtin>.open", "tensorflow-master.configure.get_python_major_version", "os.path.isfile", "os.path.join", "os.path.exists"], "tensorflow-master.configure.get_from_env_or_user_or_default": ["<builtin>.print", "tensorflow-master.configure.get_input"], "os.path.isfile": [], "os.access": [], "os.path.exists": [], "<builtin>.print": [], "os.path.join": [], "tensorflow-master.configure.reset_tf_configure_bazelrc": ["<builtin>.open"], "tensorflow-master.configure.cleanup_makefile": ["os.path.isdir", "os.remove", "os.path.join", "os.walk"], "os.walk": [], "tensorflow-master.configure.get_var": ["<builtin>.print", "tensorflow-master.configure.get_input"], "tensorflow-master.configure.set_build_var": ["tensorflow-master.configure.get_var", "<builtin>.int", "tensorflow-master.configure.write_to_bazelrc", "<builtin>.str"], "<builtin>.int": [], "tensorflow-master.configure.set_action_env_var": ["<builtin>.int", "<builtin>.str", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.get_var", "tensorflow-master.configure.write_to_bazelrc"], "tensorflow-master.configure.convert_version_to_int": ["<builtin>.len", "<builtin>.int"], "<builtin>.len": [], "tensorflow-master.configure.check_bazel_version": ["tensorflow-master.configure.convert_version_to_int", "shutil.which", "<builtin>.print", "sys.exit", "tensorflow-master.configure.run_shell", "<builtin>.open", "distutils.spawn.find_executable"], "shutil.which": [], "distutils.spawn.find_executable": [], "sys.exit": [], "tensorflow-master.configure.set_cc_opt_flags": ["tensorflow-master.configure.is_windows", "tensorflow-master.configure.is_ppc64le", "tensorflow-master.configure.get_from_env_or_user_or_default", "tensorflow-master.configure.write_to_bazelrc", "sys.executable.split"], "sys.executable.split": [], "tensorflow-master.configure.set_tf_cuda_clang": ["tensorflow-master.configure.set_action_env_var"], "tensorflow-master.configure.set_tf_download_clang": ["tensorflow-master.configure.set_action_env_var"], "tensorflow-master.configure.set_clang_cuda_compiler_path": ["distutils.spawn.find_executable", "shutil.which", "<builtin>.print", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.get_from_env_or_user_or_default", "os.path.exists"], "tensorflow-master.configure.prompt_loop_or_load_from_env": ["tensorflow-master.configure.create_android_sdk_rule.valid_api_level", "tensorflow-master.configure.create_android_sdk_rule.valid_build_tools", "<builtin>.print", "tensorflow-master.configure.get_from_env_or_user_or_default", "os.path.islink", "os.path.exists", "os.path.realpath", "tensorflow-master.configure.create_android_ndk_rule.valid_ndk_path", "tensorflow-master.configure.get_ndk_api_level.valid_api_level", "tensorflow-master.configure.create_android_sdk_rule.valid_sdk_path", "<builtin>.range"], "<builtin>.range": [], "tensorflow-master.configure.create_android_ndk_rule.valid_ndk_path": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.create_android_sdk_rule.valid_api_level": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.create_android_sdk_rule.valid_build_tools": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.create_android_sdk_rule.valid_sdk_path": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.get_ndk_api_level.valid_api_level": ["os.path.join", "os.path.exists"], "os.path.islink": [], "os.path.realpath": [], "tensorflow-master.configure.create_android_ndk_rule": ["tensorflow-master.configure.is_windows", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.is_cygwin", "tensorflow-master.configure.cygpath", "tensorflow-master.configure.get_ndk_api_level", "tensorflow-master.configure.prompt_loop_or_load_from_env", "tensorflow-master.configure.is_macos"], "tensorflow-master.configure.get_ndk_api_level": ["<builtin>.int", "os.listdir", "tensorflow-master.configure.is_windows", "<builtin>.Exception", "<builtin>.sorted", "<builtin>.print", "tensorflow-master.configure.is_cygwin", "tensorflow-master.configure.cygpath", "<builtin>.open", "tensorflow-master.configure.prompt_loop_or_load_from_env", "os.path.join", "re.search"], "tensorflow-master.configure.create_android_sdk_rule": ["os.listdir", "tensorflow-master.configure.is_windows", "<builtin>.sorted", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.is_cygwin", "tensorflow-master.configure.cygpath", "tensorflow-master.configure.prompt_loop_or_load_from_env", "tensorflow-master.configure.is_macos", "os.path.join"], "os.listdir": [], "re.search": [], "<builtin>.Exception": [], "tensorflow-master.configure.set_gcc_host_compiler_path": ["distutils.spawn.find_executable", "shutil.which", "tensorflow-master.configure.write_action_env_to_bazelrc", "os.path.islink", "tensorflow-master.configure.prompt_loop_or_load_from_env", "os.path.realpath"], "tensorflow-master.configure.reformat_version_sequence": ["<builtin>.len"], "tensorflow-master.configure.set_tf_cuda_paths": ["tensorflow-master.configure.get_from_env_or_user_or_default"], "tensorflow-master.configure.set_tf_cuda_version": ["tensorflow-master.configure.get_from_env_or_user_or_default"], "tensorflow-master.configure.set_tf_cudnn_version": ["tensorflow-master.configure.get_from_env_or_user_or_default"], "tensorflow-master.configure.is_cuda_compatible": ["<builtin>.len", "tensorflow-master.configure.convert_version_to_int", "shutil.which", "re.compile", "tensorflow-master.configure.run_shell", "distutils.spawn.find_executable"], "re.compile": [], "tensorflow-master.configure.set_tf_tensorrt_version": ["<builtin>.int", "tensorflow-master.configure.is_linux", "tensorflow-master.configure.get_from_env_or_user_or_default", "<builtin>.ValueError"], "<builtin>.ValueError": [], "tensorflow-master.configure.set_tf_nccl_version": ["tensorflow-master.configure.is_linux", "tensorflow-master.configure.get_from_env_or_user_or_default", "<builtin>.ValueError"], "tensorflow-master.configure.get_native_cuda_compute_capabilities": ["os.access", "re.compile", "os.path.isfile", "os.path.join", "tensorflow-master.configure.run_shell"], "tensorflow-master.configure.set_tf_cuda_compute_capabilities": ["<builtin>.int", "<builtin>.print", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.get_from_env_or_user_or_default", "tensorflow-master.configure.get_native_cuda_compute_capabilities", "<builtin>.float", "re.match", "sys.executable.split"], "re.match": [], "<builtin>.float": [], "tensorflow-master.configure.set_other_cuda_vars": ["tensorflow-master.configure.write_to_bazelrc"], "tensorflow-master.configure.set_host_cxx_compiler": ["tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.prompt_loop_or_load_from_env", "distutils.spawn.find_executable", "shutil.which"], "tensorflow-master.configure.set_host_c_compiler": ["tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.prompt_loop_or_load_from_env", "distutils.spawn.find_executable", "shutil.which"], "tensorflow-master.configure.system_specific_test_config": ["tensorflow-master.configure.write_to_bazelrc", "tensorflow-master.configure.is_macos", "tensorflow-master.configure.is_linux", "tensorflow-master.configure.is_windows"], "tensorflow-master.configure.set_system_libs_flag": ["tensorflow-master.configure.write_to_bazelrc", "tensorflow-master.configure.write_action_env_to_bazelrc", "<builtin>.sorted"], "tensorflow-master.configure.set_windows_build_flags": ["tensorflow-master.configure.write_to_bazelrc", "tensorflow-master.configure.get_var"], "tensorflow-master.configure.config_info_line": ["<builtin>.print"], "tensorflow-master.configure.configure_ios": ["tensorflow-master.configure.symlink_force", "tensorflow-master.configure.get_var", "os.path.basename", "tensorflow-master.configure.is_macos", "os.path.join"], "os.path.basename": [], "tensorflow-master.configure.validate_cuda_config": ["subprocess.Popen", "<builtin>.int", "<builtin>.dict", "<builtin>.print", "<builtin>.FileNotFoundError", "glob.glob", "tensorflow-master.configure.validate_cuda_config.maybe_encode_env", "<builtin>.tuple", "tensorflow-master.configure.is_linux"], "tensorflow-master.configure.validate_cuda_config.maybe_encode_env": ["<builtin>.isinstance", "tensorflow-master.configure.is_windows"], "<builtin>.isinstance": [], "glob.glob": [], "<builtin>.FileNotFoundError": [], "subprocess.Popen": [], "<builtin>.tuple": [], "<builtin>.dict": [], "tensorflow-master.configure.main": ["tensorflow-master.configure.set_other_cuda_vars", "tensorflow-master.configure.is_windows", "<builtin>.str", "tensorflow-master.configure.setup_python", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.write_to_bazelrc", "os.path.dirname", "tensorflow-master.configure.get_var", "tensorflow-master.configure.validate_cuda_config", "tensorflow-master.configure.set_tf_tensorrt_version", "tensorflow-master.configure.create_android_sdk_rule", "tensorflow-master.configure.is_linux", "tensorflow-master.configure.config_info_line", "<builtin>.int", "tensorflow-master.configure.check_bazel_version", "<builtin>.print", "tensorflow-master.configure.set_clang_cuda_compiler_path", "tensorflow-master.configure.set_tf_cuda_clang", "tensorflow-master.configure.set_tf_download_clang", "tensorflow-master.configure.set_gcc_host_compiler_path", "os.path.join", "argparse.ArgumentParser", "tensorflow-master.configure.set_cc_opt_flags", "tensorflow-master.configure.create_android_ndk_rule", "tensorflow-master.configure.set_tf_cuda_version", "os.path.abspath", "tensorflow-master.configure.set_tf_cudnn_version", "tensorflow-master.configure.set_system_libs_flag", "tensorflow-master.configure.set_windows_build_flags", "tensorflow-master.configure.is_macos", "tensorflow-master.configure.set_action_env_var", "tensorflow-master.configure.reset_tf_configure_bazelrc", "tensorflow-master.configure.set_tf_nccl_version", "tensorflow-master.configure.system_specific_test_config", "<builtin>.dict", "tensorflow-master.configure.convert_version_to_int", "tensorflow-master.configure.set_tf_cuda_paths", "tensorflow-master.configure.set_tf_cuda_compute_capabilities", "tensorflow-master.configure.configure_ios", "tensorflow-master.configure.cleanup_makefile", "<builtin>.range"], "argparse.ArgumentParser": [], "os.path.dirname": []}