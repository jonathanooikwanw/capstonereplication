{"distribute.multi_worker_test": ["mock.patch.object", "distribute.multi_process_runner.test_main", "keras.backend.manual_variable_initialization"], "distribute.multi_worker_test._clone_and_build_model": ["<builtin>.type", "keras.models.clone_model", "<builtin>.isinstance", "keras.metrics.clone_metrics", "copy.deepcopy"], "keras.models.clone_model": [], "<builtin>.isinstance": [], "copy.deepcopy": [], "<builtin>.type": [], "keras.metrics.clone_metrics": [], "distribute.multi_worker_test.MultiWorkerVerificationCallback.__init__": ["<builtin>.super", "threading.Lock", "distribute.multi_worker_test.MultiWorkerVerificationCallback.wrap_methods", "collections.defaultdict"], "<builtin>.super": [], "distribute.multi_worker_test.MultiWorkerVerificationCallback.__init__.<lambda1>": ["collections.defaultdict"], "collections.defaultdict": [], "threading.Lock": [], "distribute.multi_worker_test.MultiWorkerVerificationCallback.wrap_methods": ["<builtin>.getattr", "<builtin>.setattr", "functools.partial"], "distribute.multi_worker_test.MultiWorkerVerificationCallback.is_between_graph": [], "<builtin>.getattr": [], "distribute.multi_worker_test.MultiWorkerVerificationCallback.wrap_methods.wrapped_method": ["json.loads"], "json.loads": [], "functools.partial": [], "<builtin>.setattr": [], "distribute.multi_worker_test.MultiWorkerVerificationCallback.verify": ["<builtin>.range", "json.loads", "test.TestCase.assertDictEqual"], "<builtin>.range": [], "test.TestCase.assertDictEqual": [], "framework.test_combinations.combine": [], "distribute.multi_worker_test.KerasMultiWorkerTestIndependentWorker": ["framework.test_combinations.combine", "distribute.combinations.generate"], "distribute.combinations.generate": [], "distribute.multi_worker_test.KerasMultiWorkerTestIndependentWorker.testSimpleModelIndependentWorkerSync": ["distribute.multi_worker_testing_utils.get_mnist_model", "test.TestCase.assertLess", "<builtin>.len", "json.loads", "distribute.multi_worker_test.MultiWorkerVerificationCallback.__init__", "test.TestCase.assertIsInstance", "distribute.multi_worker_test.MultiWorkerVerificationCallback.verify", "distribute.multi_worker_testing_utils.mnist_synthetic_dataset"], "<builtin>.len": [], "distribute.multi_worker_testing_utils.mnist_synthetic_dataset": [], "distribute.multi_worker_testing_utils.get_mnist_model": [], "test.TestCase.assertIsInstance": [], "test.TestCase.assertLess": [], "distribute.multi_worker_test.KPLMultiWorkerTest": ["framework.test_combinations.combine", "distribute.combinations.generate"], "distribute.multi_worker_test.KPLMultiWorkerTest.testTrainAndServeWithKPL": ["keras.metrics.Accuracy", "test.TestCase.assertGreater", "optimizer_v2.rmsprop.RMSprop", "<builtin>.iter", "utils.kpl_test_utils.DistributeKplTestUtils", "distribute.multi_worker_test.KPLMultiWorkerTest.testTrainAndServeWithKPL.train_step", "<builtin>.range", "test.TestCase.assertEqual"], "utils.kpl_test_utils.DistributeKplTestUtils": [], "optimizer_v2.rmsprop.RMSprop": [], "keras.metrics.Accuracy": [], "distribute.multi_worker_test.KPLMultiWorkerTest.testTrainAndServeWithKPL.dataset_fn": [], "distribute.multi_worker_test.KPLMultiWorkerTest.testTrainAndServeWithKPL.train_step": ["<builtin>.next"], "distribute.multi_worker_test.KPLMultiWorkerTest.testTrainAndServeWithKPL.train_step.step_fn": ["ops.nn.compute_average_loss", "keras.losses.binary_crossentropy", "ops.math_ops.greater", "ops.math_ops.cast", "eager.backprop.GradientTape", "<builtin>.zip", "<builtin>.list"], "eager.backprop.GradientTape": [], "keras.losses.binary_crossentropy": [], "ops.nn.compute_average_loss": [], "<builtin>.zip": [], "<builtin>.list": [], "ops.math_ops.greater": [], "ops.math_ops.cast": [], "<builtin>.next": [], "<builtin>.iter": [], "test.TestCase.assertGreater": [], "test.TestCase.assertEqual": [], "keras.backend.manual_variable_initialization": [], "mock.patch.object": [], "distribute.multi_process_runner.test_main": []}