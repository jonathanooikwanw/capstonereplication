{"proto.decode_proto_op_test_base": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase.__init__": ["<builtin>.super"], "<builtin>.super": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase._compareValues": ["<builtin>.len", "<builtin>.enumerate", "proto_op_test_base.ProtoOpTestBase.assertEqual", "numpy.isclose", "proto_op_test_base.ProtoOpTestBase.assertTrue", "proto_op_test_base.ProtoOpTestBase.fail"], "<builtin>.len": [], "proto_op_test_base.ProtoOpTestBase.fail": [], "<builtin>.enumerate": [], "numpy.isclose": [], "proto_op_test_base.ProtoOpTestBase.assertTrue": [], "proto_op_test_base.ProtoOpTestBase.assertEqual": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase._compareProtos": ["<builtin>.zip", "<builtin>.getattr", "<builtin>.len", "proto_op_test_base.ProtoOpTestBase.assertEqual", "<builtin>.list", "proto.decode_proto_op_test_base.DecodeProtoOpTestBase._compareValues", "framework.dtypes.as_dtype", "proto_op_test_base.ProtoOpTestBase.fail", "proto.test_example_pb2.PrimitiveValue"], "framework.dtypes.as_dtype": [], "proto.test_example_pb2.PrimitiveValue": [], "<builtin>.list": [], "<builtin>.getattr": [], "<builtin>.zip": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase._runDecodeProtoTests": ["<builtin>.zip", "<builtin>.len", "numpy.reshape", "proto_op_test_base.ProtoOpTestBase.assertEqual", "numpy.all", "proto_op_test_base.ProtoOpTestBase.cached_session", "<builtin>.dict", "numpy.array", "proto.decode_proto_op_test_base.DecodeProtoOpTestBase._compareProtos", "proto_op_test_base.ProtoOpTestBase.assertTrue", "proto.test_example_pb2.ExtraFields"], "proto.test_example_pb2.ExtraFields": [], "numpy.array": [], "numpy.reshape": [], "proto_op_test_base.ProtoOpTestBase.cached_session": [], "numpy.all": [], "<builtin>.dict": [], "proto_op_test_base.ProtoOpTestBase.named_parameters": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase": ["testing.parameterized.parameters", "proto_op_test_base.ProtoOpTestBase.named_parameters", "testing.parameterized.named_parameters"], "testing.parameterized.named_parameters": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase.testBinary": ["proto.decode_proto_op_test_base.DecodeProtoOpTestBase._runDecodeProtoTests", "<builtin>.list"], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase.testBinaryDisordered": ["proto.decode_proto_op_test_base.DecodeProtoOpTestBase._runDecodeProtoTests", "<builtin>.list"], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase.testPacked": ["proto.test_example_pb2.PackedTestValue", "proto.decode_proto_op_test_base.DecodeProtoOpTestBase._runDecodeProtoTests", "<builtin>.list", "protobuf.text_format.MessageToString", "protobuf.text_format.Parse"], "protobuf.text_format.MessageToString": [], "proto.test_example_pb2.PackedTestValue": [], "protobuf.text_format.Parse": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase.testText": ["proto.decode_proto_op_test_base.DecodeProtoOpTestBase._runDecodeProtoTests", "<builtin>.list", "protobuf.text_format.MessageToString"], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase.testSanitizerGood": ["proto.decode_proto_op_test_base.DecodeProtoOpTestBase._runDecodeProtoTests", "<builtin>.list"], "testing.parameterized.parameters": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase.testCorruptProtobuf": ["proto_op_test_base.ProtoOpTestBase.evaluate", "proto_op_test_base.ProtoOpTestBase.assertRaisesRegexp", "numpy.array"], "proto_op_test_base.ProtoOpTestBase.assertRaisesRegexp": [], "proto_op_test_base.ProtoOpTestBase.evaluate": [], "proto.decode_proto_op_test_base.DecodeProtoOpTestBase.testOutOfOrderRepeated": ["<builtin>.zip", "<builtin>.len", "proto_op_test_base.ProtoOpTestBase.assertLen", "<builtin>.range", "proto_op_test_base.ProtoOpTestBase.evaluate", "proto.test_example_pb2.TestValue", "itertools.permutations", "itertools.combinations", "proto_op_test_base.ProtoOpTestBase.assertAllEqual", "proto.test_example_pb2.PrimitiveValue"], "proto.test_example_pb2.TestValue": [], "<builtin>.range": [], "itertools.permutations": [], "itertools.combinations": [], "proto_op_test_base.ProtoOpTestBase.assertLen": [], "proto_op_test_base.ProtoOpTestBase.assertAllEqual": []}