{"kernel_tests.linalg_ops_test": ["platform.test.main"], "kernel_tests.linalg_ops_test._RandomPDMatrix": ["numpy.conj"], "numpy.conj": [], "kernel_tests.linalg_ops_test.CholeskySolveTest.setUp": ["numpy.random.RandomState"], "numpy.random.RandomState": [], "kernel_tests.linalg_ops_test.CholeskySolveTest": ["framework.test_util.run_deprecated_v1"], "framework.test_util.run_deprecated_v1": [], "kernel_tests.linalg_ops_test.CholeskySolveTest.test_works_with_five_different_random_pos_def_matrices": ["test.TestCase.subTest", "ops.linalg_ops.cholesky", "ops.linalg_ops.cholesky_solve", "numpy.array", "<builtin>.range", "test.TestCase.session", "ops.math_ops.matmul", "test.TestCase.assertAllClose"], "<builtin>.range": [], "test.TestCase.session": [], "numpy.array": [], "ops.linalg_ops.cholesky": [], "test.TestCase.subTest": [], "ops.linalg_ops.cholesky_solve": [], "ops.math_ops.matmul": [], "test.TestCase.assertAllClose": [], "kernel_tests.linalg_ops_test.LogdetTest.setUp": ["numpy.random.RandomState"], "kernel_tests.linalg_ops_test.LogdetTest": ["framework.test_util.run_deprecated_v1"], "kernel_tests.linalg_ops_test.LogdetTest.test_works_with_five_different_random_pos_def_matrices": ["test.TestCase.subTest", "linalg.linalg.logdet", "test.TestCase.evaluate", "<builtin>.range", "test.TestCase.session", "kernel_tests.linalg_ops_test._RandomPDMatrix", "test.TestCase.assertAllClose", "numpy.linalg.slogdet"], "numpy.linalg.slogdet": [], "linalg.linalg.logdet": [], "test.TestCase.evaluate": [], "kernel_tests.linalg_ops_test.LogdetTest.test_works_with_underflow_case": ["test.TestCase.subTest", "linalg.linalg.logdet", "test.TestCase.evaluate", "test.TestCase.session", "test.TestCase.assertAllClose", "numpy.eye", "numpy.linalg.slogdet"], "numpy.eye": [], "kernel_tests.linalg_ops_test.SlogdetTest.setUp": ["numpy.random.RandomState"], "kernel_tests.linalg_ops_test.SlogdetTest": ["framework.test_util.run_deprecated_v1"], "kernel_tests.linalg_ops_test.SlogdetTest.test_works_with_five_different_random_pos_def_matrices": ["test.TestCase.subTest", "test.TestCase.evaluate", "<builtin>.range", "test.TestCase.session", "kernel_tests.linalg_ops_test._RandomPDMatrix", "linalg.linalg.slogdet", "test.TestCase.assertAllClose", "numpy.linalg.slogdet"], "linalg.linalg.slogdet": [], "kernel_tests.linalg_ops_test.SlogdetTest.test_works_with_underflow_case": ["test.TestCase.subTest", "test.TestCase.evaluate", "test.TestCase.session", "linalg.linalg.slogdet", "test.TestCase.assertAllClose", "numpy.eye", "numpy.linalg.slogdet"], "kernel_tests.linalg_ops_test.AdjointTest.test_compare_to_numpy": ["test.TestCase.subTest", "numpy.array", "test.TestCase.evaluate", "test.TestCase.assertEqual", "test.TestCase.session", "framework.ops.convert_to_tensor", "test.TestCase.assertAllEqual", "linalg.linalg.adjoint", "numpy.conj"], "framework.ops.convert_to_tensor": [], "linalg.linalg.adjoint": [], "test.TestCase.assertEqual": [], "test.TestCase.assertAllEqual": [], "kernel_tests.linalg_ops_test.EyeTest.testShapeInferenceNoBatch": ["ops.linalg_ops.eye", "test.TestCase.assertEqual"], "ops.linalg_ops.eye": [], "kernel_tests.linalg_ops_test.EyeTest.testShapeInferenceStaticBatch": ["ops.linalg_ops.eye", "test.TestCase.assertEqual"], "kernel_tests.linalg_ops_test.EyeTest.<lambda1>": ["ops.array_ops.placeholder_with_default"], "ops.array_ops.placeholder_with_default": [], "kernel_tests.linalg_ops_test.EyeTest.<lambda2>": [], "kernel_tests.linalg_ops_test.EyeTest.<lambda3>": ["ops.array_ops.placeholder_with_default"], "kernel_tests.linalg_ops_test.EyeTest.<lambda4>": [], "kernel_tests.linalg_ops_test.EyeTest.<lambda5>": [], "kernel_tests.linalg_ops_test.EyeTest.<lambda6>": ["ops.array_ops.placeholder_with_default"], "kernel_tests.linalg_ops_test.EyeTest.<lambda7>": ["ops.array_ops.placeholder_with_default"], "kernel_tests.linalg_ops_test.EyeTest.<lambda8>": ["ops.array_ops.placeholder_with_default"], "testing.parameterized.named_parameters": [], "kernel_tests.linalg_ops_test.EyeTest": ["framework.test_util.run_deprecated_v1", "testing.parameterized.named_parameters", "testing.parameterized.parameters", "itertools.product"], "kernel_tests.linalg_ops_test.EyeTest.testShapeInferenceStaticBatchWith": ["ops.linalg_ops.eye", "<builtin>.isinstance", "test.TestCase.assertEqual"], "<builtin>.isinstance": [], "itertools.product": [], "testing.parameterized.parameters": [], "kernel_tests.linalg_ops_test.EyeTest.test_eye_no_placeholder": ["ops.linalg_ops.eye", "test.TestCase.evaluate", "numpy.tile", "test.TestCase.assertAllEqual", "numpy.eye"], "numpy.tile": [], "kernel_tests.linalg_ops_test.EyeTest.test_eye_with_placeholder": ["ops.linalg_ops.eye", "numpy.tile", "ops.array_ops.placeholder", "test.TestCase.session", "test.TestCase.assertAllEqual", "numpy.eye"], "ops.array_ops.placeholder": [], "kernel_tests.linalg_ops_test._MatrixRankTest.test_batch_default_tolerance": ["numpy.array", "ops.array_ops.placeholder_with_default", "linalg.linalg.matrix_rank"], "linalg.linalg.matrix_rank": [], "kernel_tests.linalg_ops_test._MatrixRankTest.test_custom_tolerance_broadcasts": ["ops.random_ops.random_uniform", "linalg.linalg.solve", "linalg.linalg.matrix_rank", "framework.constant_op.constant", "linalg.linalg.transpose", "linalg.linalg.qr"], "ops.random_ops.random_uniform": [], "linalg.linalg.qr": [], "framework.constant_op.constant": [], "linalg.linalg.transpose": [], "linalg.linalg.solve": [], "kernel_tests.linalg_ops_test._MatrixRankTest.test_nonsquare": ["numpy.array", "ops.array_ops.placeholder_with_default", "linalg.linalg.matrix_rank"], "kernel_tests.linalg_ops_test._PinvTest.expected_pinv": ["numpy.finfo", "numpy.zeros", "<builtin>.max", "numpy.ndindex", "<builtin>.isinstance", "numpy.linalg.pinv", "numpy.concatenate"], "numpy.linalg.pinv": [], "<builtin>.max": [], "numpy.finfo": [], "numpy.concatenate": [], "numpy.zeros": [], "numpy.ndindex": [], "kernel_tests.linalg_ops_test._PinvTest.test_symmetric": ["linalg.linalg.pinv", "ops.array_ops.placeholder_with_default", "kernel_tests.linalg_ops_test._PinvTest.expected_pinv", "numpy.stack"], "numpy.stack": [], "linalg.linalg.pinv": [], "kernel_tests.linalg_ops_test._PinvTest.test_nonsquare": ["linalg.linalg.pinv", "ops.array_ops.placeholder_with_default", "kernel_tests.linalg_ops_test._PinvTest.expected_pinv", "numpy.stack"], "kernel_tests.linalg_ops_test.make_tensor_hiding_attributes": ["<builtin>.getattr", "framework.ops.convert_to_tensor", "ops.array_ops.placeholder_with_default"], "<builtin>.getattr": [], "kernel_tests.linalg_ops_test._LUReconstruct.test_non_batch": ["linalg.linalg.lu_reconstruct", "linalg.linalg.lu", "numpy.array", "ops.array_ops.placeholder_with_default"], "linalg.linalg.lu": [], "linalg.linalg.lu_reconstruct": [], "kernel_tests.linalg_ops_test._LUReconstruct.test_batch": ["linalg.linalg.lu_reconstruct", "linalg.linalg.lu", "numpy.array", "ops.array_ops.placeholder_with_default"], "kernel_tests.linalg_ops_test._LUMatrixInverse.test_non_batch": ["numpy.array", "linalg.linalg.lu_matrix_inverse", "ops.array_ops.placeholder_with_default", "numpy.linalg.inv", "linalg.linalg.lu"], "linalg.linalg.lu_matrix_inverse": [], "numpy.linalg.inv": [], "kernel_tests.linalg_ops_test._LUMatrixInverse.test_batch": ["numpy.array", "linalg.linalg.lu_matrix_inverse", "ops.array_ops.placeholder_with_default", "numpy.linalg.inv", "linalg.linalg.lu"], "kernel_tests.linalg_ops_test._LUSolve.test_non_batch": ["numpy.array", "linalg.linalg.lu_solve", "numpy.linalg.solve", "ops.array_ops.placeholder_with_default", "linalg.linalg.lu"], "linalg.linalg.lu_solve": [], "numpy.linalg.solve": [], "kernel_tests.linalg_ops_test._LUSolve.test_batch_broadcast": ["numpy.array", "linalg.linalg.lu_solve", "numpy.linalg.solve", "ops.array_ops.placeholder_with_default", "linalg.linalg.lu"], "kernel_tests.linalg_ops_test.EighTridiagonalTest.check_residual": ["test.TestCase.assertAllClose", "ops.math_ops.matmul", "ops.math_ops.cast", "linalg.linalg.diag"], "linalg.linalg.diag": [], "ops.math_ops.cast": [], "kernel_tests.linalg_ops_test.EighTridiagonalTest.check_orthogonality": ["test.TestCase.assertAllLess", "ops.math_ops.abs", "linalg.linalg.eye", "ops.array_ops.shape", "ops.math_ops.matmul"], "ops.array_ops.shape": [], "linalg.linalg.eye": [], "ops.math_ops.abs": [], "test.TestCase.assertAllLess": [], "kernel_tests.linalg_ops_test.EighTridiagonalTest.run_test": ["numpy.diag", "numpy.sqrt", "numpy.finfo", "numpy.amax", "numpy.linalg.eigh", "linalg.linalg.eigh_tridiagonal", "kernel_tests.linalg_ops_test.EighTridiagonalTest.check_orthogonality", "numpy.issubdtype", "kernel_tests.linalg_ops_test.EighTridiagonalTest.check_residual", "test.TestCase.assertAllClose", "numpy.abs", "numpy.conj"], "numpy.diag": [], "numpy.issubdtype": [], "numpy.linalg.eigh": [], "linalg.linalg.eigh_tridiagonal": [], "numpy.abs": [], "numpy.amax": [], "numpy.sqrt": [], "kernel_tests.linalg_ops_test.EighTridiagonalTest": ["testing.parameterized.parameters"], "kernel_tests.linalg_ops_test.EighTridiagonalTest.test_small": ["kernel_tests.linalg_ops_test.EighTridiagonalTest.run_test", "numpy.issubdtype", "numpy.ones"], "numpy.ones": [], "kernel_tests.linalg_ops_test.EighTridiagonalTest.test_toeplitz": ["kernel_tests.linalg_ops_test.EighTridiagonalTest.run_test", "numpy.issubdtype", "numpy.ones"], "kernel_tests.linalg_ops_test.EighTridiagonalTest.test_random_uniform": ["kernel_tests.linalg_ops_test.EighTridiagonalTest.run_test", "numpy.issubdtype", "numpy.random.uniform"], "numpy.random.uniform": [], "kernel_tests.linalg_ops_test.EighTridiagonalTest.test_select": ["numpy.finfo", "linalg.linalg.eigh_tridiagonal", "<builtin>.range", "numpy.random.uniform", "test.TestCase.assertAllClose"], "kernel_tests.linalg_ops_test.EighTridiagonalTest.test_extreme_eigenvalues_test": ["numpy.sqrt", "numpy.array", "numpy.finfo", "numpy.ones", "numpy.issubdtype"], "kernel_tests.linalg_ops_test.EighTridiagonalTest.test_eigenvectors": ["numpy.sqrt", "numpy.finfo", "numpy.ones", "numpy.issubdtype", "numpy.random.uniform", "platform.test.is_gpu_available", "kernel_tests.linalg_ops_test.EighTridiagonalTest.run_test", "framework.test_util.is_xla_enabled"], "platform.test.is_gpu_available": [], "framework.test_util.is_xla_enabled": [], "platform.test.main": []}