{"utils.tf_utils_test": ["platform.test.main"], "utils.tf_utils_test.TestIsSymbolicTensor.test_default_behavior": ["ops.variables.Variable", "eager.context.executing_eagerly", "utils.tf_utils.is_symbolic_tensor", "framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor_v2_with_dispatch", "test.TestCase.assertTrue", "test.TestCase.assertFalse"], "eager.context.executing_eagerly": [], "ops.variables.Variable": [], "utils.tf_utils.is_symbolic_tensor": [], "test.TestCase.assertFalse": [], "framework.ops.convert_to_tensor_v2_with_dispatch": [], "framework.sparse_tensor.SparseTensor": [], "test.TestCase.assertTrue": [], "utils.tf_utils_test.TestIsSymbolicTensor.test_works_with_registered": ["ops.variables.Variable", "eager.context.executing_eagerly", "framework.ops.register_tensor_conversion_function", "utils.tf_utils.is_symbolic_tensor", "framework.sparse_tensor.SparseTensor", "utils.tf_utils.register_symbolic_tensor_type", "framework.ops.convert_to_tensor_v2_with_dispatch", "test.TestCase.assertTrue", "test.TestCase.assertFalse"], "utils.tf_utils_test.TestIsSymbolicTensor.test_works_with_registered.CustomClass.value": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "utils.tf_utils_test.TestIsSymbolicTensor.test_works_with_registered.<lambda1>": [], "framework.ops.register_tensor_conversion_function": [], "utils.tf_utils.register_symbolic_tensor_type": [], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing": ["utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.PlumbingLayer.__init__", "test.TestCase.skipTest", "eager.context.executing_eagerly", "framework.ops.register_tensor_conversion_function", "keras.layers.InputLayer", "python.keras.Sequential", "utils.tf_utils.register_symbolic_tensor_type", "test.TestCase.assertIsInstance", "framework.ops.convert_to_tensor_v2_with_dispatch", "python.keras.Model"], "test.TestCase.skipTest": [], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.Foo.__init__": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.Foo.dtype": [], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.<lambda1>": [], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.PlumbingLayer.__init__": ["<builtin>.super"], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.PlumbingLayer.__init__._fn": ["framework.ops.convert_to_tensor_v2_with_dispatch", "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.Foo.__init__"], "<builtin>.super": [], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.PlumbingLayer.__call__": ["<builtin>.super"], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.PlumbingLayer.call": ["<builtin>.super"], "keras.layers.InputLayer": [], "python.keras.Sequential": [], "python.keras.Model": [], "test.TestCase.assertIsInstance": [], "utils.tf_utils_test.TestIsSymbolicTensor.test_enables_nontensor_plumbing.custom_loss": [], "utils.tf_utils_test.ConvertInnerNodeDataTest.test_convert_inner_node_data": ["<builtin>.isinstance", "test.TestCase.assertEqual", "test.TestCase.assertTrue", "<builtin>.all", "utils.tf_utils.ListWrapper", "utils.tf_utils.convert_inner_node_data"], "utils.tf_utils.ListWrapper": [], "utils.tf_utils.convert_inner_node_data": [], "test.TestCase.assertEqual": [], "<builtin>.isinstance": [], "<builtin>.all": [], "utils.tf_utils_test.AttrsTest.test_map_structure_with_atomic_accept_attr": ["utils.tf_utils.map_structure_with_atomic", "test.TestCase.skipTest", "test.TestCase.assertEqual"], "attr.ib": [], "utils.tf_utils_test.AttrsTest.test_map_structure_with_atomic_accept_attr.Foo": ["attr.ib"], "utils.tf_utils_test.AttrsTest.test_map_structure_with_atomic_accept_attr.<lambda1>": ["<builtin>.isinstance"], "utils.tf_utils_test.AttrsTest.test_map_structure_with_atomic_accept_attr.<lambda2>": [], "utils.tf_utils.map_structure_with_atomic": [], "utils.tf_utils_test.TestIsRagged.test_is_ragged_return_true_for_ragged_tensor": ["utils.tf_utils.is_ragged", "test.TestCase.assertTrue", "ragged_tensor.RaggedTensor.from_row_splits"], "ragged_tensor.RaggedTensor.from_row_splits": [], "utils.tf_utils.is_ragged": [], "utils.tf_utils_test.TestIsRagged.test_is_ragged_return_false_for_list": ["utils.tf_utils.is_ragged", "test.TestCase.assertFalse"], "utils.tf_utils_test.TestIsSparse.test_is_sparse_return_true_for_sparse_tensor": ["test.TestCase.assertTrue", "framework.sparse_tensor.SparseTensor", "utils.tf_utils.is_sparse"], "utils.tf_utils.is_sparse": [], "utils.tf_utils_test.TestIsSparse.test_is_sparse_return_true_for_sparse_tensor_value": ["test.TestCase.assertTrue", "utils.tf_utils.is_sparse", "framework.sparse_tensor.SparseTensorValue"], "framework.sparse_tensor.SparseTensorValue": [], "utils.tf_utils_test.TestIsSparse.test_is_sparse_return_false_for_list": ["test.TestCase.assertFalse", "utils.tf_utils.is_sparse"], "utils.tf_utils_test.TestIsExtensionType.test_is_extension_type_return_true_for_ragged_tensor": ["ragged.ragged_factory_ops.constant", "test.TestCase.assertTrue", "utils.tf_utils.is_extension_type"], "ragged.ragged_factory_ops.constant": [], "utils.tf_utils.is_extension_type": [], "utils.tf_utils_test.TestIsExtensionType.test_is_extension_type_return_true_for_sparse_tensor": ["ops.sparse_ops.from_dense", "test.TestCase.assertTrue", "utils.tf_utils.is_extension_type"], "ops.sparse_ops.from_dense": [], "utils.tf_utils_test.TestIsExtensionType.test_is_extension_type_return_false_for_dense_tensor": ["test.TestCase.assertFalse", "framework.constant_op.constant", "utils.tf_utils.is_extension_type"], "framework.constant_op.constant": [], "utils.tf_utils_test.TestIsExtensionType.test_is_extension_type_return_false_for_list": ["test.TestCase.assertFalse", "utils.tf_utils.is_extension_type"], "platform.test.main": []}