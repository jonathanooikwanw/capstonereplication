{"linalg.linear_operator_test": ["numpy.random.RandomState", "platform.test.main"], "numpy.random.RandomState": [], "linalg.linear_operator_test.LinearOperatorShape.__init__": ["<builtin>.super", "<builtin>.dict"], "<builtin>.dict": [], "<builtin>.super": [], "linalg.linear_operator_test.LinearOperatorShape._shape": ["framework.tensor_shape.TensorShape"], "framework.tensor_shape.TensorShape": [], "linalg.linear_operator_test.LinearOperatorShape._shape_tensor": ["framework.constant_op.constant"], "framework.constant_op.constant": [], "linalg.linear_operator_test.LinearOperatorShape._matmul": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__": ["<builtin>.super", "framework.ops.convert_to_tensor", "<builtin>.dict"], "framework.ops.convert_to_tensor": [], "linalg.linear_operator_test.LinearOperatorMatmulSolve._shape": [], "linalg.linear_operator_test.LinearOperatorMatmulSolve._shape_tensor": ["ops.array_ops.shape"], "ops.array_ops.shape": [], "linalg.linear_operator_test.LinearOperatorMatmulSolve._matmul": ["framework.ops.convert_to_tensor", "ops.math_ops.matmul"], "ops.math_ops.matmul": [], "linalg.linear_operator_test.LinearOperatorMatmulSolve._solve": ["ops.linalg_ops.matrix_solve", "framework.ops.convert_to_tensor"], "ops.linalg_ops.matrix_solve": [], "linalg.linear_operator_test.LinearOperatorTest.test_all_shape_properties_defined_by_the_one_property_shape": ["linalg.linear_operator_test.LinearOperatorShape.__init__", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual"], "test.TestCase.assertAllEqual": [], "test.TestCase.assertEqual": [], "linalg.linear_operator_test.LinearOperatorTest.test_all_shape_methods_defined_by_the_one_method_shape": ["linalg.linear_operator_test.LinearOperatorShape.__init__", "test.TestCase.cached_session", "test.TestCase.assertAllEqual", "linalg.LinearOperator.range_dimension_tensor", "linalg.LinearOperator.shape_tensor", "linalg.LinearOperator.domain_dimension_tensor", "test.TestCase.evaluate", "linalg.LinearOperator.batch_shape_tensor", "linalg.LinearOperator.tensor_rank_tensor"], "test.TestCase.cached_session": [], "linalg.LinearOperator.shape_tensor": [], "test.TestCase.evaluate": [], "linalg.LinearOperator.tensor_rank_tensor": [], "linalg.LinearOperator.batch_shape_tensor": [], "linalg.LinearOperator.domain_dimension_tensor": [], "linalg.LinearOperator.range_dimension_tensor": [], "linalg.linear_operator_test.LinearOperatorTest.test_is_x_properties": ["linalg.linear_operator_test.LinearOperatorShape.__init__", "test.TestCase.assertTrue", "test.TestCase.assertFalse"], "test.TestCase.assertFalse": [], "test.TestCase.assertTrue": [], "linalg.linear_operator_test.LinearOperatorTest.test_nontrivial_parameters": ["linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "test.TestCase.assertEqual", "ops.array_ops.placeholder_with_default"], "ops.array_ops.placeholder_with_default": [], "linalg.linear_operator_test.LinearOperatorTest.test_generic_to_dense_method_non_square_matrix_static": ["test.TestCase.cached_session", "test.TestCase.assertAllEqual", "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "linalg.LinearOperator.to_dense"], "linalg.LinearOperator.to_dense": [], "test.TestCase.assertAllClose": [], "linalg.linear_operator_test.LinearOperatorTest.test_generic_to_dense_method_non_square_matrix_tensor": ["linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "linalg.LinearOperator.to_dense", "ops.array_ops.placeholder_with_default"], "linalg.linear_operator_test.LinearOperatorTest.test_matvec": ["linalg.LinearOperator.matvec", "test.TestCase.cached_session", "test.TestCase.assertAllEqual", "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "test.TestCase.assertAllClose", "test.TestCase.evaluate"], "linalg.LinearOperator.matvec": [], "linalg.linear_operator_test.LinearOperatorTest.test_solvevec": ["linalg.LinearOperator.solvevec", "test.TestCase.cached_session", "test.TestCase.assertAllEqual", "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "test.TestCase.assertAllClose", "test.TestCase.evaluate"], "linalg.LinearOperator.solvevec": [], "linalg.linear_operator_test.LinearOperatorTest.test_is_square_set_to_true_for_square_static_shapes": ["linalg.linear_operator_test.LinearOperatorShape.__init__", "test.TestCase.assertTrue"], "linalg.linear_operator_test.LinearOperatorTest.test_is_square_set_to_false_for_square_static_shapes": ["linalg.linear_operator_test.LinearOperatorShape.__init__", "test.TestCase.assertFalse"], "linalg.linear_operator_test.LinearOperatorTest.test_is_square_set_incorrectly_to_false_raises": ["linalg.linear_operator_test.LinearOperatorShape.__init__", "test.TestCase.assertRaisesRegex"], "test.TestCase.assertRaisesRegex": [], "linalg.linear_operator_test.LinearOperatorTest.test_is_square_set_inconsistent_with_other_hints_raises": ["linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "test.TestCase.assertRaisesRegex", "ops.array_ops.placeholder_with_default"], "linalg.linear_operator_test.LinearOperatorTest.test_non_square_operators_raise_on_determinant_and_solve": ["linalg.linear_operator_test.LinearOperatorShape.__init__", "linalg.LinearOperator.log_abs_determinant", "linalg.LinearOperator.determinant", "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "linalg.LinearOperator.solve", "test.TestCase.assertRaisesRegex", "ops.array_ops.placeholder_with_default"], "linalg.LinearOperator.determinant": [], "linalg.LinearOperator.log_abs_determinant": [], "linalg.LinearOperator.solve": [], "linalg.linear_operator_test.LinearOperatorTest.test_is_square_manual_set_works": ["test.TestCase.assertEqual", "test.TestCase.assertTrue", "numpy.ones", "eager.context.executing_eagerly", "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "ops.array_ops.placeholder_with_default"], "numpy.ones": [], "eager.context.executing_eagerly": [], "linalg.linear_operator_test.LinearOperatorTest.test_linear_operator_matmul_hints_closed": ["test.TestCase.assertEqual", "test.TestCase.assertTrue", "numpy.ones", "eager.context.executing_eagerly", "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "linalg.LinearOperator.matmul", "ops.array_ops.placeholder_with_default"], "linalg.LinearOperator.matmul": [], "linalg.linear_operator_test.LinearOperatorTest.test_linear_operator_matmul_hints_false": ["test.TestCase.assertEqual", "test.TestCase.assertTrue", "test.TestCase.assertIsNone", "eager.context.executing_eagerly", "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "linalg.LinearOperator.matmul", "ops.array_ops.placeholder_with_default", "test.TestCase.assertFalse"], "test.TestCase.assertIsNone": [], "linalg.linear_operator_test.LinearOperatorTest.test_linear_operator_matmul_hint_infer_square": ["test.TestCase.assertTrue", "linalg.linear_operator_test.LinearOperatorMatmulSolve.__init__", "linalg.LinearOperator.matmul", "ops.array_ops.placeholder_with_default", "test.TestCase.assertFalse"], "linalg.linear_operator_test.LinearOperatorTest.testDispatchedMethods": ["test.TestCase.assertAllClose", "linalg.linalg.inv", "test.TestCase.evaluate", "linalg.linalg.cholesky", "linalg.linalg.adjoint", "test.TestCase.assertIsInstance", "<builtin>.getattr", "linalg.linalg.LinearOperatorFullMatrix"], "linalg.linalg.LinearOperatorFullMatrix": [], "<builtin>.getattr": [], "linalg.linalg.adjoint": [], "test.TestCase.assertIsInstance": [], "linalg.linalg.cholesky": [], "linalg.linalg.inv": [], "linalg.linear_operator_test.LinearOperatorTest.testDispatchMatmulSolve": ["ops.math_ops.matmul", "numpy.random.uniform", "linalg.linalg.solve", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "numpy.float64", "linalg.linalg.LinearOperatorFullMatrix"], "numpy.float64": [], "numpy.random.uniform": [], "linalg.linalg.solve": [], "linalg.linear_operator_test.LinearOperatorTest.testDispatchMatmulLeftOperatorIsTensor": ["ops.math_ops.matmul", "numpy.random.uniform", "test.TestCase.assertAllClose", "test.TestCase.evaluate", "numpy.float64", "linalg.linalg.LinearOperatorFullMatrix"], "platform.test.main": []}