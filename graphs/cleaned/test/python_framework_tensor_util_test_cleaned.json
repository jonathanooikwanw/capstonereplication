{"framework.tensor_util_test": ["platform.test.main"], "framework.tensor_util_test.TensorUtilTest.testFloat": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util.make_tensor_proto": [], "test.TestCase.assertProtoEquals": [], "framework.tensor_util.MakeNdarray": [], "test.TestCase.assertEqual": [], "numpy.array": [], "test.TestCase.assertAllClose": [], "framework.tensor_util_test.TensorUtilTest.testFloatN": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testFloatTyped": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testFloatTypeCoerce": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testFloatTypeCoerceNdarray": ["test.TestCase.assertProtoEquals", "numpy.asarray", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "numpy.asarray": [], "framework.tensor_util_test.TensorUtilTest.testFloatSizes": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testFloatSizes2": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testFloatSizesLessValues": ["framework.tensor_util.make_tensor_proto", "test.TestCase.assertProtoEquals"], "framework.tensor_util_test.TensorUtilTest.testFloatNpArrayFloat64": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testFloatTypesWithImplicitRepeat": ["test.TestCase.assertAllClose", "framework.tensor_util.make_tensor_proto", "framework.tensor_util.MakeNdarray", "numpy.array"], "framework.tensor_util_test.TensorUtilTest.testFloatMutateArray": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testHalf": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testBfloat16": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testInt": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testLargeInt": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto", "numpy.iinfo"], "numpy.iinfo": [], "framework.tensor_util_test.TensorUtilTest.testLargeNegativeInt": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto", "numpy.iinfo"], "framework.tensor_util_test.TensorUtilTest.testIntNDefaultType": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "testing.parameterized.named_parameters": [], "framework.tensor_util_test.TensorUtilTest": ["testing.parameterized.named_parameters"], "framework.tensor_util_test.TensorUtilTest.testIntTypes": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testIntTypesWithImplicitRepeat": ["framework.tensor_util.make_tensor_proto", "test.TestCase.assertAllEqual", "framework.tensor_util.MakeNdarray", "numpy.array"], "test.TestCase.assertAllEqual": [], "framework.tensor_util_test.TensorUtilTest.testIntMixedWithDimension": ["test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto", "framework.tensor_shape.Dimension"], "framework.tensor_shape.Dimension": [], "framework.tensor_util_test.TensorUtilTest.testLong": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testLongN": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testLongNpArray": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testQuantizedTypes": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testString": ["framework.tensor_util.make_tensor_proto", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "test.TestCase.assertProtoEquals"], "framework.tensor_util_test.TensorUtilTest.testStringWithImplicitRepeat": ["framework.tensor_util.make_tensor_proto", "test.TestCase.assertAllEqual", "framework.tensor_util.MakeNdarray", "numpy.array"], "framework.tensor_util_test.TensorUtilTest.testStringN": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testStringNpArray": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testArrayMethod": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testArrayMethod.Wrapper.__array__": ["numpy.array"], "framework.tensor_util_test.TensorUtilTest.testArrayInterface": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testArrayInterface.Wrapper.__array_interface__": ["numpy.array"], "framework.tensor_util_test.TensorUtilTest.testStringTuple": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testStringNestedTuple": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testComplex64": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testComplex128": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testComplexWithImplicitRepeat": ["test.TestCase.assertAllClose", "framework.tensor_util.make_tensor_proto", "framework.tensor_util.MakeNdarray", "numpy.array"], "framework.tensor_util_test.TensorUtilTest.testComplex64N": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testComplex128N": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testComplex64NpArray": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testComplex128NpArray": ["test.TestCase.assertProtoEquals", "test.TestCase.assertAllEqual", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testNestedNumpyArrayWithoutDType": ["test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testNestedNumpyArrayWithDType": ["test.TestCase.assertAllClose", "test.TestCase.assertEqual", "framework.tensor_util.MakeNdarray", "numpy.array", "framework.tensor_util.make_tensor_proto"], "framework.tensor_util_test.TensorUtilTest.testUnsupportedDTypes": ["test.TestCase.assertRaises", "numpy.array", "framework.tensor_util.make_tensor_proto", "test.TestCase.assertRaisesRegex", "framework.tensor_shape.Dimension"], "test.TestCase.assertRaises": [], "test.TestCase.assertRaisesRegex": [], "framework.tensor_util_test.TensorUtilTest.testTensorShapeVerification": ["test.TestCase.assertRaises", "framework.tensor_util.make_tensor_proto", "numpy.array"], "framework.tensor_util_test.TensorUtilTest.testShapeTooLarge": ["test.TestCase.assertRaises", "framework.tensor_util.make_tensor_proto", "numpy.array"], "framework.tensor_util_test.TensorUtilTest.testLowRankSupported": ["framework.tensor_util.make_tensor_proto", "test.TestCase.assertProtoEquals", "numpy.array"], "framework.tensor_util_test.TensorUtilTest.testShapeEquals": ["test.TestCase.assertTrue", "framework.tensor_shape.as_shape", "framework.tensor_util.make_tensor_proto", "test.TestCase.assertFalse", "framework.tensor_util.ShapeEquals"], "framework.tensor_util.ShapeEquals": [], "test.TestCase.assertTrue": [], "framework.tensor_shape.as_shape": [], "test.TestCase.assertFalse": [], "framework.tensor_util_test.IsTensorTest.testConstantTensor": ["test.TestCase.assertTrue", "framework.tensor_util.is_tf_type", "framework.constant_op.constant", "test.TestCase.assertFalse", "numpy.random.rand"], "numpy.random.rand": [], "framework.constant_op.constant": [], "framework.tensor_util.is_tf_type": [], "framework.tensor_util_test.IsTensorTest.testRaggedTensor": ["test.TestCase.evaluate", "test.TestCase.assertTrue", "framework.tensor_util.is_tf_type", "ragged.ragged_factory_ops.constant", "test.TestCase.assertFalse"], "ragged.ragged_factory_ops.constant": [], "test.TestCase.evaluate": [], "framework.tensor_util_test.IsTensorTest.testSparseTensor": ["test.TestCase.evaluate", "test.TestCase.assertTrue", "framework.tensor_util.is_tf_type", "framework.sparse_tensor.SparseTensor", "test.TestCase.assertFalse"], "framework.sparse_tensor.SparseTensor": [], "framework.tensor_util_test.IsTensorTest.testIndexedSlices": ["framework.indexed_slices.IndexedSlicesValue", "test.TestCase.assertTrue", "framework.indexed_slices.IndexedSlices", "framework.tensor_util.is_tf_type", "numpy.array", "framework.constant_op.constant", "test.TestCase.assertFalse"], "framework.indexed_slices.IndexedSlices": [], "framework.indexed_slices.IndexedSlicesValue": [], "framework.tensor_util_test.IsTensorTest.testVariable": ["ops.variables.Variable", "framework.tensor_util.is_tf_type", "test.TestCase.assertTrue"], "ops.variables.Variable": [], "framework.tensor_util_test.ConstantValueTest.testConstant": ["test.TestCase.assertAllClose", "framework.tensor_util.constant_value", "numpy.random.rand", "framework.constant_op.constant"], "framework.tensor_util.constant_value": [], "framework.tensor_util_test.ConstantValueTest.testUnknown": ["test.TestCase.assertIs", "framework.tensor_util.constant_value", "ops.gen_state_ops.variable", "framework.ops.Graph"], "framework.ops.Graph": [], "ops.gen_state_ops.variable": [], "test.TestCase.assertIs": [], "framework.tensor_util_test.ConstantValueTest.testShape": ["ops.array_ops.shape", "test.TestCase.assertAllEqual", "framework.tensor_util.constant_value", "test.TestCase.assertEqual", "framework.constant_op.constant", "numpy.array"], "ops.array_ops.shape": [], "framework.tensor_util_test.ConstantValueTest.testFill": ["ops.array_ops.fill", "test.TestCase.assertAllEqual", "framework.tensor_util.constant_value", "test.TestCase.assertEqual", "framework.constant_op.constant", "numpy.array"], "ops.array_ops.fill": [], "framework.tensor_util_test.ConstantValueTest.testSize": ["framework.tensor_util.constant_value", "test.TestCase.assertEqual", "ops.array_ops.size", "framework.constant_op.constant"], "ops.array_ops.size": [], "framework.tensor_util_test.ConstantValueTest.testSizeOfScalar": ["test.TestCase.assertIn", "ops.array_ops.size", "<builtin>.type", "framework.tensor_util.constant_value", "test.TestCase.assertEqual", "framework.constant_op.constant"], "<builtin>.type": [], "test.TestCase.assertIn": [], "framework.tensor_util_test.ConstantValueTest.testRank": ["test.TestCase.assertIn", "ops.array_ops.rank_internal", "<builtin>.type", "framework.tensor_util.constant_value", "test.TestCase.assertEqual", "framework.constant_op.constant", "ops.array_ops.rank"], "ops.array_ops.rank": [], "ops.array_ops.rank_internal": [], "framework.tensor_util_test.ConstantValueTest.testCast": ["test.TestCase.assertAllClose", "framework.tensor_util.constant_value", "framework.constant_op.constant", "ops.math_ops.cast", "numpy.random.rand"], "ops.math_ops.cast": [], "framework.tensor_util_test.ConstantValueTest.testConcat": ["ops.array_ops.concat", "framework.ops.Graph", "test.TestCase.assertAllClose", "framework.tensor_util.constant_value", "test.TestCase.assertIs", "ops.array_ops.placeholder", "numpy.random.rand"], "ops.array_ops.concat": [], "ops.array_ops.placeholder": [], "framework.tensor_util_test.ConstantValueTest.testPack_Axis0": ["<builtin>.range", "framework.ops.Graph", "test.TestCase.assertAllClose", "ops.array_ops.stack", "framework.tensor_util.constant_value", "test.TestCase.assertIs", "numpy.array", "ops.array_ops.placeholder", "numpy.random.rand"], "<builtin>.range": [], "ops.array_ops.stack": [], "framework.tensor_util_test.ConstantValueTest.testPack_Axis1": ["<builtin>.range", "framework.ops.Graph", "ops.array_ops.stack", "framework.tensor_util.constant_value", "test.TestCase.assertIs", "ops.array_ops.placeholder", "numpy.random.rand", "test.TestCase.assertIsNone"], "test.TestCase.assertIsNone": [], "framework.tensor_util_test.ConstantValueTest.testPack_Partial_Axis0": ["framework.ops.Graph", "test.TestCase.assertAllClose", "ops.array_ops.stack", "framework.tensor_util.constant_value", "ops.array_ops.placeholder", "numpy.random.rand", "test.TestCase.assertIsNone"], "framework.tensor_util_test.ConstantValueTest.testPack_Partial_Axis1": ["framework.ops.Graph", "ops.array_ops.stack", "framework.tensor_util.constant_value", "ops.array_ops.placeholder", "numpy.random.rand", "test.TestCase.assertIsNone"], "framework.tensor_util_test.ConstantValueTest.testUnpack_Axis0": ["framework.tensor_util.constant_value", "test.TestCase.assertAllClose", "ops.array_ops.unstack", "numpy.random.rand"], "ops.array_ops.unstack": [], "framework.tensor_util_test.ConstantValueTest.testUnpack_Partial_Axis0": ["framework.ops.Graph", "test.TestCase.assertAllClose", "ops.array_ops.stack", "ops.array_ops.unstack", "framework.tensor_util.constant_value", "ops.array_ops.placeholder", "numpy.random.rand", "test.TestCase.assertIsNone"], "framework.tensor_util_test.ConstantValueTest.testSplit_Axis0": ["numpy.split", "test.TestCase.assertAllClose", "framework.tensor_util.constant_value", "ops.array_ops.split", "numpy.random.rand"], "ops.array_ops.split": [], "numpy.split": [], "framework.tensor_util_test.ConstantValueTest.testSplit_Partial_Axis0": ["framework.ops.Graph", "test.TestCase.assertAllClose", "ops.array_ops.stack", "framework.tensor_util.constant_value", "ops.array_ops.placeholder", "numpy.random.rand", "test.TestCase.assertIsNone", "ops.array_ops.split"], "framework.tensor_util_test.ConstantValueTest.testEqual": ["test.TestCase.assertAllEqual", "framework.tensor_util.constant_value", "test.TestCase.assertEqual", "framework.constant_op.constant", "ops.math_ops.equal"], "ops.math_ops.equal": [], "framework.tensor_util_test.ConstantValueTest.testNotEqual": ["test.TestCase.assertAllEqual", "framework.tensor_util.constant_value", "test.TestCase.assertEqual", "ops.math_ops.not_equal", "framework.constant_op.constant"], "ops.math_ops.not_equal": [], "framework.tensor_util_test.ConstantValueTest.testStopGradient": ["test.TestCase.assertAllEqual", "framework.tensor_util.constant_value", "numpy.random.rand", "ops.array_ops.stop_gradient"], "ops.array_ops.stop_gradient": [], "framework.tensor_util_test.ConstantValueTest.testIdentity": ["ops.array_ops.identity", "framework.tensor_util.constant_value", "numpy.random.rand", "test.TestCase.assertAllEqual"], "ops.array_ops.identity": [], "framework.tensor_util_test.ConstantValueTest.testLiteral": ["test.TestCase.assertIs", "framework.tensor_util.constant_value"], "framework.tensor_util_test.ConstantValueTest.testNumpyNdarray": ["test.TestCase.assertIs", "framework.tensor_util.constant_value", "numpy.random.rand"], "framework.tensor_util_test.ConstantValueTest.testVariable": ["ops.variables.Variable", "framework.tensor_util.constant_value", "test.TestCase.assertIsNone"], "framework.tensor_util_test.ConstantValueTest.testVariableV1": ["framework.tensor_util.constant_value", "test.TestCase.assertIsNone", "ops.variables.VariableV1"], "ops.variables.VariableV1": [], "framework.tensor_util_test.ConstantValueAsShapeTest": ["framework.test_util.run_in_graph_and_eager_modes"], "framework.test_util.run_in_graph_and_eager_modes": [], "framework.tensor_util_test.ConstantValueAsShapeTest.testConstant": ["framework.tensor_util.constant_value_as_shape", "framework.tensor_shape.TensorShape", "test.TestCase.assertEqual", "framework.constant_op.constant", "numpy.random.rand"], "framework.tensor_shape.TensorShape": [], "framework.tensor_util.constant_value_as_shape": [], "framework.tensor_util_test.ConstantValueAsShapeTest.testCast": ["ops.array_ops.shape", "framework.tensor_util.constant_value_as_shape", "framework.tensor_shape.TensorShape", "test.TestCase.assertEqual", "framework.constant_op.constant", "ops.math_ops.cast"], "framework.tensor_util_test.ConstantValueAsShapeTest.testCastWithUnknown": ["framework.tensor_util.constant_value_as_shape", "test.TestCase.assertEqual", "framework.constant_op.constant", "ops.math_ops.cast"], "framework.tensor_util_test.ConstantValueAsShapeTest.testShape": ["ops.array_ops.shape", "framework.tensor_util.constant_value_as_shape", "framework.tensor_shape.TensorShape", "test.TestCase.assertEqual", "framework.constant_op.constant"], "framework.tensor_util_test.ConstantValueAsShapeTest.testMinusOneBecomesNone": ["framework.tensor_util.constant_value_as_shape", "test.TestCase.assertEqual", "framework.constant_op.constant"], "framework.tensor_util_test.ConstantValueAsShapeTest.testPack": ["framework.ops.Graph", "framework.tensor_util.constant_value_as_shape", "ops.array_ops.stack", "test.TestCase.assertEqual", "framework.constant_op.constant", "ops.array_ops.placeholder"], "framework.tensor_util_test.ConstantValueAsShapeTest.testConcat": ["ops.array_ops.concat", "framework.ops.Graph", "framework.tensor_util.constant_value_as_shape", "test.TestCase.assertEqual", "ops.array_ops.placeholder"], "framework.tensor_util_test.ConstantValueAsShapeTest.testSlice": ["test.TestCase.assertRaises", "ops.array_ops.concat", "framework.ops.Graph", "framework.tensor_util.constant_value_as_shape", "test.TestCase.assertEqual", "framework.constant_op.constant", "ops.array_ops.strided_slice", "ops.array_ops.placeholder", "framework.tensor_shape.unknown_shape"], "ops.array_ops.strided_slice": [], "framework.tensor_shape.unknown_shape": [], "framework.tensor_util_test.MaybeSetStaticShapeTest": ["contextlib.contextmanager"], "contextlib.contextmanager": [], "framework.tensor_util_test.MaybeSetStaticShapeTest.disableSetStaticShape": [], "framework.tensor_util_test.MaybeSetStaticShapeTest.testMaybeSetStaticShape": ["framework.tensor_util_test.MaybeSetStaticShapeTest.disableSetStaticShape", "framework.ops.Graph", "test.TestCase.assertCountEqual", "framework.func_graph.func_graph_from_py_func", "framework.constant_op.constant"], "framework.tensor_util_test.MaybeSetStaticShapeTest.testMaybeSetStaticShape.reshape": ["ops.array_ops.zeros", "ops.array_ops.reshape"], "ops.array_ops.zeros": [], "ops.array_ops.reshape": [], "framework.func_graph.func_graph_from_py_func": [], "test.TestCase.assertCountEqual": [], "framework.tensor_util_test.MaybeSetStaticShapeTest.testMaybeSetStaticShapeScalarShape": ["framework.tensor_util_test.MaybeSetStaticShapeTest.disableSetStaticShape", "framework.func_graph.func_graph_from_py_func", "test.TestCase.assertCountEqual"], "framework.tensor_util_test.MaybeSetStaticShapeTest.testMaybeSetStaticShapeScalarShape.reshape": ["ops.array_ops.placeholder", "ops.array_ops.reshape"], "framework.tensor_util_test.ShapeTensorTest": ["framework.test_util.run_in_graph_and_eager_modes"], "framework.tensor_util_test.ShapeTensorTest.testConversion": ["framework.tensor_util.shape_tensor", "test_util.TensorFlowTestCase.assertAllEqual", "framework.tensor_shape.TensorShape", "framework.tensor_shape.Dimension"], "framework.tensor_util.shape_tensor": [], "test_util.TensorFlowTestCase.assertAllEqual": [], "platform.test.main": []}