{"cluster_resolver.kubernetes_cluster_resolver_test": ["platform.test.main"], "cluster_resolver.kubernetes_cluster_resolver_test._mock_kubernetes_client": ["test.mock.MagicMock"], "test.mock.MagicMock": [], "cluster_resolver.kubernetes_cluster_resolver_test._mock_kubernetes_client.<lambda1>": [], "cluster_resolver.kubernetes_cluster_resolver_test._get_mock_pod_item": ["test.mock.Mock"], "test.mock.Mock": [], "cluster_resolver.kubernetes_cluster_resolver_test._create_pod_list": ["test.mock.MagicMock", "cluster_resolver.kubernetes_cluster_resolver_test._get_mock_pod_item"], "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest._verifyClusterSpecEquality": ["test.TestCase.assertProtoEquals", "training.server_lib.ClusterSpec"], "test.TestCase.assertProtoEquals": [], "training.server_lib.ClusterSpec": [], "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest.testSingleItemSuccessfulRetrieval": ["cluster_resolver.kubernetes_cluster_resolver_test._create_pod_list", "cluster_resolver.kubernetes_cluster_resolver_test._mock_kubernetes_client", "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest._verifyClusterSpecEquality", "<builtin>.str", "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver"], "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver": [], "<builtin>.str": [], "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest.testSuccessfulRetrievalWithSort": ["cluster_resolver.kubernetes_cluster_resolver_test._create_pod_list", "cluster_resolver.kubernetes_cluster_resolver_test._mock_kubernetes_client", "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest._verifyClusterSpecEquality", "<builtin>.str", "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver"], "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest.testGetMasterWithOverrideParameters": ["cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver", "cluster_resolver.kubernetes_cluster_resolver_test._create_pod_list", "test.TestCase.assertEqual", "cluster_resolver.kubernetes_cluster_resolver_test._mock_kubernetes_client"], "test.TestCase.assertEqual": [], "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest.testNonRunningPod": ["cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver", "cluster_resolver.kubernetes_cluster_resolver_test._create_pod_list", "test.TestCase.assertRaisesRegex", "cluster_resolver.kubernetes_cluster_resolver_test._mock_kubernetes_client"], "test.TestCase.assertRaisesRegex": [], "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest.testMultiplePodSelectorsAndWorkers": ["cluster_resolver.kubernetes_cluster_resolver_test._create_pod_list", "cluster_resolver.kubernetes_cluster_resolver_test._mock_kubernetes_client", "cluster_resolver.kubernetes_cluster_resolver_test.KubernetesClusterResolverTest._verifyClusterSpecEquality", "<builtin>.str", "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver"], "platform.test.main": []}