{"framework.meta_graph_test": ["platform.test.main"], "framework.meta_graph_test._TestDir": ["shutil.rmtree", "platform.test.get_temp_dir", "platform.gfile.MakeDirs"], "platform.test.get_temp_dir": [], "shutil.rmtree": [], "platform.gfile.MakeDirs": [], "framework.meta_graph_test.SimpleMetaGraphTest": ["framework.test_util.run_deprecated_v1"], "framework.test_util.run_deprecated_v1": [], "framework.meta_graph_test.SimpleMetaGraphTest.testNoVariables": ["framework.ops.add_to_collection", "test.TestCase.assertNotEqual", "framework.ops.get_collection", "framework.ops.get_default_graph", "framework.constant_op.constant", "ops.math_ops.add", "framework.meta_graph_test._TestDir", "framework.meta_graph.import_scoped_meta_graph", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.session", "test.TestCase.assertEqual", "test.TestCase.assertTrue", "framework.test_util.assert_meta_graph_protos_equal", "ops.array_ops.placeholder", "framework.ops.Graph"], "framework.ops.Graph": [], "test.TestCase.session": [], "ops.array_ops.placeholder": [], "framework.constant_op.constant": [], "ops.math_ops.add": [], "framework.ops.add_to_collection": [], "test.TestCase.assertEqual": [], "framework.ops.get_default_graph": [], "framework.meta_graph.export_scoped_meta_graph": [], "test.TestCase.assertTrue": [], "test.TestCase.assertNotEqual": [], "framework.meta_graph.import_scoped_meta_graph": [], "framework.test_util.assert_meta_graph_protos_equal": [], "framework.ops.get_collection": [], "framework.meta_graph_test.SimpleMetaGraphTest.testStrippedOpListNestedFunctions": ["test.TestCase.cached_session", "framework.meta_graph_test.SimpleMetaGraphTest.testStrippedOpListNestedFunctions.f1", "framework.meta_graph.stripped_op_list_for_graph", "framework.constant_op.constant", "framework.function.Defun", "framework.ops.get_default_graph", "test.TestCase.assertEqual", "<builtin>.len"], "test.TestCase.cached_session": [], "framework.function.Defun": [], "framework.meta_graph_test.SimpleMetaGraphTest.testStrippedOpListNestedFunctions.f0": ["ops.math_ops.square"], "ops.math_ops.square": [], "framework.meta_graph_test.SimpleMetaGraphTest.testStrippedOpListNestedFunctions.f1": ["framework.meta_graph_test.SimpleMetaGraphTest.testStrippedOpListNestedFunctions.f0"], "framework.meta_graph.stripped_op_list_for_graph": [], "<builtin>.len": [], "framework.meta_graph_test.SimpleMetaGraphTest.testStrippedOpListRecursiveFunctions": ["framework.meta_graph.stripped_op_list_for_graph", "test.TestCase.assertEqual", "framework.graph_pb2.GraphDef"], "framework.graph_pb2.GraphDef": [], "framework.meta_graph_test.SimpleMetaGraphTest.testStrippedOpListPartitionedCalls": ["framework.meta_graph.stripped_op_list_for_graph", "test.TestCase.assertSameElements", "framework.graph_pb2.GraphDef"], "test.TestCase.assertSameElements": [], "framework.meta_graph_test.SimpleMetaGraphTest.testDefaultAttrStripping": ["test.TestCase.cached_session", "test.TestCase.session", "ops.math_ops.complex", "test.TestCase.assertNotIn", "framework.test_util.get_node_def_from_graph", "test.TestCase.assertIn", "framework.constant_op.constant", "framework.meta_graph.export_scoped_meta_graph", "framework.ops.get_default_graph", "test.TestCase.assertEqual", "test.TestCase.assertTrue", "test.TestCase.assertFalse", "framework.ops.Graph"], "ops.math_ops.complex": [], "framework.test_util.get_node_def_from_graph": [], "test.TestCase.assertNotIn": [], "test.TestCase.assertIn": [], "test.TestCase.assertFalse": [], "framework.meta_graph_test.SimpleMetaGraphTest.testDefaultAttrStrippingNestedFunctions": ["test.TestCase.cached_session", "test.TestCase.assertIsNotNone", "test.TestCase.assertNotIn", "framework.meta_graph_test.SimpleMetaGraphTest.testDefaultAttrStrippingNestedFunctions.f1", "framework.constant_op.constant", "framework.function.Defun", "framework.meta_graph.export_scoped_meta_graph", "framework.ops.get_default_graph", "test.TestCase.assertTrue"], "framework.meta_graph_test.SimpleMetaGraphTest.testDefaultAttrStrippingNestedFunctions.f0": ["ops.math_ops.complex"], "framework.meta_graph_test.SimpleMetaGraphTest.testDefaultAttrStrippingNestedFunctions.f1": ["framework.meta_graph_test.SimpleMetaGraphTest.testDefaultAttrStrippingNestedFunctions.f0"], "test.TestCase.assertIsNotNone": [], "framework.meta_graph_test.SimpleMetaGraphTest.testDefaultAttrStrippingUnregisteredOps": ["test.TestCase.cached_session", "meta_graph_pb2.MetaGraphDef.MetaInfoDef", "framework.meta_graph.create_meta_graph_def", "framework.test_util.get_node_def_from_graph", "framework.graph_pb2.GraphDef", "test.TestCase.assertEqual", "test.TestCase.assertTrue"], "meta_graph_pb2.MetaGraphDef.MetaInfoDef": [], "framework.meta_graph.create_meta_graph_def": [], "framework.meta_graph_test.SimpleMetaGraphTest.testVariableObjectsAreSharedAmongCollections": ["ops.variables.Variable", "test.TestCase.assertIs", "framework.meta_graph.import_scoped_meta_graph", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.assertEqual", "<builtin>.len", "framework.ops.Graph"], "ops.variables.Variable": [], "test.TestCase.assertIs": [], "framework.meta_graph_test.SimpleMetaGraphTest.testMetricVariablesCollectionLoadsBytesList": ["ops.variables.Variable", "<builtin>.len", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.assertEqual", "framework.meta_graph.import_scoped_meta_graph", "framework.ops.Graph", "test.TestCase.assertIsInstance"], "test.TestCase.assertIsInstance": [], "framework.meta_graph_test.ScopedMetaGraphTest._testScopedExport": ["math.sqrt", "ops.control_flow_ops.cond", "framework.ops.get_default_graph", "ops.control_flow_ops.while_loop", "ops.array_ops.zeros", "random.random", "test.TestCase.assertEqual", "ops.math_ops.matmul", "framework.ops.Graph", "framework.meta_graph.export_scoped_meta_graph", "<builtin>.sorted", "ops.random_ops.truncated_normal", "ops.variables.Variable", "framework.constant_op.constant", "framework.ops.name_scope", "<builtin>.float", "ops.math_ops.less", "ops.nn_ops.relu", "framework.ops.add_to_collection"], "framework.ops.name_scope": [], "<builtin>.float": [], "math.sqrt": [], "ops.random_ops.truncated_normal": [], "random.random": [], "ops.math_ops.less": [], "framework.meta_graph_test.ScopedMetaGraphTest._testScopedExport.<lambda1>": ["ops.array_ops.ones"], "ops.array_ops.ones": [], "framework.meta_graph_test.ScopedMetaGraphTest._testScopedExport.<lambda2>": ["ops.array_ops.zeros"], "ops.array_ops.zeros": [], "ops.control_flow_ops.cond": [], "ops.math_ops.matmul": [], "ops.nn_ops.relu": [], "framework.meta_graph_test.ScopedMetaGraphTest._testScopedExport.loop_cond": [], "framework.meta_graph_test.ScopedMetaGraphTest._testScopedExport.loop_body": ["framework.constant_op.constant"], "ops.control_flow_ops.while_loop": [], "<builtin>.sorted": [], "framework.meta_graph_test.ScopedMetaGraphTest._testScopedImport": ["framework.constant_op.constant", "ops.array_ops.identity", "test.TestCase.assertRaisesRegex", "framework.meta_graph.export_scoped_meta_graph", "<builtin>.sorted", "test.TestCase.assertEqual", "framework.meta_graph.import_scoped_meta_graph", "framework.ops.Graph"], "test.TestCase.assertRaisesRegex": [], "ops.array_ops.identity": [], "framework.meta_graph_test.ScopedMetaGraphTest": ["framework.test_util.run_deprecated_v1", "framework.test_util.run_v1_only"], "framework.meta_graph_test.ScopedMetaGraphTest.testScopedExportAndImport": ["framework.meta_graph_test.ScopedMetaGraphTest._testScopedExport", "<builtin>.zip", "framework.meta_graph_test.ScopedMetaGraphTest._testScopedImport", "framework.meta_graph_test._TestDir", "framework.test_util.assert_meta_graph_protos_equal"], "<builtin>.zip": [], "framework.meta_graph_test.ScopedMetaGraphTest.testWhileLoopGradients": ["ops.variables.Variable", "ops.gradients_impl.gradients", "test.TestCase.assertEqual", "test.TestCase.evaluate", "framework.ops.name_scope", "client.session.Session", "framework.meta_graph_test.ScopedMetaGraphTest.testWhileLoopGradients.new_name", "framework.meta_graph.export_scoped_meta_graph", "ops.variables.global_variables_initializer", "framework.ops.get_default_graph", "ops.control_flow_ops.while_loop", "framework.meta_graph.import_scoped_meta_graph", "framework.test_util.assert_meta_graph_protos_equal", "framework.ops.Graph"], "framework.meta_graph_test.ScopedMetaGraphTest.testWhileLoopGradients.<lambda1>": [], "framework.meta_graph_test.ScopedMetaGraphTest.testWhileLoopGradients.<lambda2>": ["ops.math_ops.cast"], "ops.math_ops.cast": [], "ops.variables.global_variables_initializer": [], "ops.gradients_impl.gradients": [], "client.session.Session": [], "test.TestCase.evaluate": [], "framework.meta_graph_test.ScopedMetaGraphTest.testWhileLoopGradients.new_name": [], "framework.test_util.run_v1_only": [], "framework.meta_graph_test.ScopedMetaGraphTest.testImportWhileLoopInWhileLoop": ["ops.variables.Variable", "test.TestCase.evaluate", "client.session.Session", "framework.meta_graph.export_scoped_meta_graph", "ops.variables.global_variables_initializer", "ops.control_flow_ops.while_loop", "framework.ops.Graph"], "framework.meta_graph_test.ScopedMetaGraphTest.testImportWhileLoopInWhileLoop.<lambda1>": [], "framework.meta_graph_test.ScopedMetaGraphTest.testImportWhileLoopInWhileLoop.<lambda2>": [], "framework.meta_graph_test.ScopedMetaGraphTest.testImportWhileLoopInWhileLoop.body": ["framework.ops.get_default_graph", "framework.meta_graph.import_scoped_meta_graph"], "framework.meta_graph_test.ScopedMetaGraphTest.testImportWhileLoopInWhileLoop.<lambda3>": [], "framework.meta_graph_test.ScopedMetaGraphTest.testScopedImportUnderNameScope": ["ops.variables.Variable", "<builtin>.len", "<builtin>.list", "framework.ops.name_scope", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.assertEqual", "framework.meta_graph.import_scoped_meta_graph", "framework.ops.Graph"], "<builtin>.list": [], "framework.meta_graph_test.ScopedMetaGraphTest.testScopedImportUnderNameScopeNoVarScope": ["ops.variables.Variable", "<builtin>.len", "<builtin>.list", "framework.ops.name_scope", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.assertEqual", "framework.meta_graph.import_scoped_meta_graph", "framework.ops.Graph"], "framework.meta_graph_test.ScopedMetaGraphTest.testImportsUsingSameScopeName": ["ops.variables.Variable", "<builtin>.len", "<builtin>.list", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.assertEqual", "framework.meta_graph.import_scoped_meta_graph", "framework.ops.Graph"], "framework.meta_graph_test.ScopedMetaGraphTest.testScopedImportWithSelectedCollections": ["ops.variables.Variable", "framework.meta_graph_test.ScopedMetaGraphTest.testScopedImportWithSelectedCollections._test_import", "framework.meta_graph_test._TestDir", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.assertTrue", "framework.ops.Graph", "<builtin>.all"], "<builtin>.all": [], "framework.meta_graph_test.ScopedMetaGraphTest.testScopedImportWithSelectedCollections._test_import": ["<builtin>.set", "<builtin>.any", "framework.meta_graph.import_scoped_meta_graph", "test.TestCase.assertTrue", "test.TestCase.assertFalse", "framework.ops.Graph", "<builtin>.all"], "<builtin>.set": [], "framework.meta_graph_test.ScopedMetaGraphTest.testScopedImportWithSelectedCollections._test_import._restore_collections_predicate": [], "<builtin>.any": [], "framework.meta_graph_test.ScopedMetaGraphTest._testScopedExportWithQueue": ["training.queue_runner_impl.add_queue_runner", "training.queue_runner_impl.QueueRunner", "ops.data_flow_ops.FIFOQueue", "framework.ops.name_scope", "framework.meta_graph.export_scoped_meta_graph", "framework.ops.get_default_graph", "framework.ops.Graph"], "ops.data_flow_ops.FIFOQueue": [], "training.queue_runner_impl.QueueRunner": [], "training.queue_runner_impl.add_queue_runner": [], "framework.meta_graph_test.ScopedMetaGraphTest._testScopedImportWithQueue": ["framework.meta_graph.export_scoped_meta_graph", "framework.meta_graph.import_scoped_meta_graph", "framework.ops.Graph"], "framework.meta_graph_test.ScopedMetaGraphTest.testScopedWithQueue": ["framework.meta_graph_test._TestDir", "framework.meta_graph_test.ScopedMetaGraphTest._testScopedImportWithQueue", "framework.test_util.assert_meta_graph_protos_equal", "framework.meta_graph_test.ScopedMetaGraphTest._testScopedExportWithQueue"], "framework.meta_graph_test.ScopedMetaGraphTest.testExportDebugInfo": ["ops.variables.Variable", "framework.error_interpolation.create_graph_debug_info_def", "test.TestCase.assertEqual", "framework.constant_op.constant", "framework.ops.name_scope", "ops.resource_variable_ops.ResourceVariable", "ops.nn_ops.relu", "test.TestCase.assertTrue", "<builtin>.len", "ops.math_ops.matmul", "framework.ops.Graph"], "ops.resource_variable_ops.ResourceVariable": [], "framework.error_interpolation.create_graph_debug_info_def": [], "framework.meta_graph_test.ScopedMetaGraphTest.doTestExportNestedNames": ["ops.variables.Variable", "framework.constant_op.constant", "framework.ops.name_scope", "ops.resource_variable_ops.ResourceVariable", "framework.meta_graph.import_scoped_meta_graph", "ops.nn_ops.relu", "framework.meta_graph.export_scoped_meta_graph", "<builtin>.sorted", "test.TestCase.assertEqual", "test.TestCase.assertTrue", "ops.math_ops.matmul", "framework.ops.Graph"], "framework.meta_graph_test.ScopedMetaGraphTest.testExportNestedNames": ["framework.meta_graph_test.ScopedMetaGraphTest.doTestExportNestedNames"], "framework.meta_graph_test.ScopedMetaGraphTest.testExportNestedNamesResource": ["framework.meta_graph_test.ScopedMetaGraphTest.doTestExportNestedNames"], "framework.meta_graph_test.ScopedMetaGraphTest.testPotentialCycle": ["framework.constant_op.constant", "test.TestCase.assertRaisesRegex", "framework.ops.name_scope", "ops.nn_ops.relu", "framework.meta_graph.export_scoped_meta_graph", "framework.meta_graph.import_scoped_meta_graph", "ops.math_ops.matmul", "framework.ops.Graph"], "framework.meta_graph_test.ScopedMetaGraphTest.testClearDevices": ["ops.variables.Variable", "<builtin>.str", "framework.constant_op.constant", "framework.ops.device", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.assertEqual", "framework.meta_graph.import_scoped_meta_graph", "ops.math_ops.matmul", "framework.ops.Graph"], "framework.ops.device": [], "<builtin>.str": [], "framework.meta_graph_test.MetaGraphWithVariableScopeTest": ["framework.test_util.run_deprecated_v1"], "framework.meta_graph_test.MetaGraphWithVariableScopeTest.testMetricsCollection": ["ops.metrics.mean", "framework.ops.get_collection", "<builtin>.len", "framework.meta_graph_test.MetaGraphWithVariableScopeTest.testMetricsCollection._enqueue_vector", "ops.variables.local_variables_initializer", "test.TestCase.evaluate", "ops.data_flow_ops.FIFOQueue", "framework.meta_graph_test._TestDir", "test.TestCase.assertRaisesRegex", "platform.test.test_src_dir_path", "framework.meta_graph.export_scoped_meta_graph", "test.TestCase.session", "test.TestCase.assertEqual", "framework.meta_graph.import_scoped_meta_graph", "framework.ops.Graph"], "framework.meta_graph_test.MetaGraphWithVariableScopeTest.testMetricsCollection._enqueue_vector": ["framework.constant_op.constant", "<builtin>.len"], "ops.metrics.mean": [], "ops.variables.local_variables_initializer": [], "platform.test.test_src_dir_path": [], "framework.meta_graph_test.ExportImportAcrossScopesTest": ["framework.test_util.run_deprecated_v1"], "framework.meta_graph_test.ExportImportAcrossScopesTest.testPartitionedVariables": ["framework.meta_graph_test.ExportImportAcrossScopesTest._testExportImportAcrossScopes"], "framework.meta_graph_test.ExportImportAcrossScopesTest.testPartitionedVariables.make_graph_with_partitioned_variables": ["ops.variable_scope.get_variable", "ops.partitioned_variables.fixed_size_partitioner", "ops.random_ops.truncated_normal"], "ops.partitioned_variables.fixed_size_partitioner": [], "ops.variable_scope.get_variable": [], "framework.meta_graph_test.ExportImportAcrossScopesTest._testExportImportAcrossScopes": ["ops.variable_scope.variable_scope", "framework.meta_graph.export_scoped_meta_graph", "framework.meta_graph_test.ExportImportAcrossScopesTest.testPartitionedVariables.make_graph_with_partitioned_variables", "framework.meta_graph.import_scoped_meta_graph", "framework.test_util.assert_meta_graph_protos_equal", "framework.ops.Graph"], "ops.variable_scope.variable_scope": [], "platform.test.main": []}