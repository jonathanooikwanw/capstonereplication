{"preprocessing.text_test": ["platform.test.main"], "preprocessing.text_test.TestText.test_one_hot": ["test.TestCase.assertEqual", "<builtin>.len", "numpy.min", "preprocessing.text.one_hot", "test.TestCase.assertGreaterEqual", "numpy.max", "test.TestCase.assertLessEqual"], "preprocessing.text.one_hot": [], "<builtin>.len": [], "test.TestCase.assertEqual": [], "numpy.max": [], "test.TestCase.assertLessEqual": [], "numpy.min": [], "test.TestCase.assertGreaterEqual": [], "preprocessing.text_test.TestText.test_tokenizer": ["test.TestCase.assertEqual", "test.TestCase.assertLess", "numpy.min", "preprocessing.text.Tokenizer", "numpy.max"], "preprocessing.text.Tokenizer": [], "test.TestCase.assertLess": [], "preprocessing.text_test.TestText.test_hashing_trick_hash": ["preprocessing.text.hashing_trick", "test.TestCase.assertEqual", "<builtin>.len", "numpy.min", "test.TestCase.assertGreaterEqual", "numpy.max", "test.TestCase.assertLessEqual"], "preprocessing.text.hashing_trick": [], "preprocessing.text_test.TestText.test_hashing_trick_md5": ["preprocessing.text.hashing_trick", "test.TestCase.assertEqual", "<builtin>.len", "numpy.min", "test.TestCase.assertGreaterEqual", "numpy.max", "test.TestCase.assertLessEqual"], "preprocessing.text_test.TestText.test_tokenizer_oov_flag": ["test.TestCase.assertEqual", "preprocessing.text.Tokenizer", "<builtin>.len"], "preprocessing.text_test.TestText.test_sequential_fit": ["test.TestCase.assertEqual", "preprocessing.text.Tokenizer"], "preprocessing.text_test.TestText.test_text_to_word_sequence": ["preprocessing.text.text_to_word_sequence", "test.TestCase.assertEqual"], "preprocessing.text.text_to_word_sequence": [], "preprocessing.text_test.TestText.test_text_to_word_sequence_multichar_split": ["preprocessing.text.text_to_word_sequence", "test.TestCase.assertEqual"], "preprocessing.text_test.TestText.test_text_to_word_sequence_unicode": ["preprocessing.text.text_to_word_sequence", "test.TestCase.assertEqual"], "preprocessing.text_test.TestText.test_text_to_word_sequence_unicode_multichar_split": ["preprocessing.text.text_to_word_sequence", "test.TestCase.assertEqual"], "preprocessing.text_test.TestText.test_tokenizer_unicode": ["test.TestCase.assertEqual", "preprocessing.text.Tokenizer", "<builtin>.len"], "platform.test.main": []}