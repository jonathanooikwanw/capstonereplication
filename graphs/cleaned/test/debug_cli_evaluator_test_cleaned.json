{"cli.evaluator_test": ["platform.test.main"], "cli.evaluator_test.ParseDebugTensorNameTest.testParseNamesWithoutPrefixOrSuffix": ["test_util.TensorFlowTestCase.assertEqual", "cli.evaluator._parse_debug_tensor_name", "test_util.TensorFlowTestCase.assertIsNone"], "cli.evaluator._parse_debug_tensor_name": [], "test_util.TensorFlowTestCase.assertIsNone": [], "test_util.TensorFlowTestCase.assertEqual": [], "cli.evaluator_test.ParseDebugTensorNameTest.testParseNamesWithoutPrefixWithDebugOpSuffix": ["test_util.TensorFlowTestCase.assertEqual", "cli.evaluator._parse_debug_tensor_name", "test_util.TensorFlowTestCase.assertIsNone"], "cli.evaluator_test.ParseDebugTensorNameTest.testParseNamesWithDeviceNamePrefixWithoutDebugOpSuffix": ["test_util.TensorFlowTestCase.assertEqual", "cli.evaluator._parse_debug_tensor_name"], "cli.evaluator_test.ParseDebugTensorNameTest.testParseNamesWithDeviceNamePrefixWithDebugOpSuffix": ["test_util.TensorFlowTestCase.assertEqual", "cli.evaluator._parse_debug_tensor_name"], "cli.evaluator_test.ParseDebugTensorNameTest.testParseMalformedDebugTensorName": ["cli.evaluator._parse_debug_tensor_name", "test_util.TensorFlowTestCase.assertRaisesRegex", "test_util.TensorFlowTestCase.assertRaises"], "test_util.TensorFlowTestCase.assertRaisesRegex": [], "test_util.TensorFlowTestCase.assertRaises": [], "cli.evaluator_test.ParseDebugTensorNameTest.testParseNamesWithExecIndex": ["test_util.TensorFlowTestCase.assertEqual", "cli.evaluator._parse_debug_tensor_name", "test_util.TensorFlowTestCase.assertIsNone"], "cli.evaluator_test.EvaluatorTest.testEvaluateSingleTensor": ["test.mock.MagicMock", "test_util.TensorFlowTestCase.assertEqual", "mock.patch.object", "cli.evaluator.ExpressionEvaluator"], "test.mock.MagicMock": [], "cli.evaluator_test.EvaluatorTest.testEvaluateSingleTensor.fake_get_tensors": ["numpy.array"], "numpy.array": [], "mock.patch.object": [], "cli.evaluator.ExpressionEvaluator": [], "cli.evaluator_test.EvaluatorTest.testEvaluateTwoTensors": ["test.mock.MagicMock", "mock.patch.object", "test_util.TensorFlowTestCase.assertAllClose", "cli.evaluator.ExpressionEvaluator"], "cli.evaluator_test.EvaluatorTest.testEvaluateTwoTensors.fake_get_tensors": ["numpy.array"], "test_util.TensorFlowTestCase.assertAllClose": [], "cli.evaluator_test.EvaluatorTest.testEvaluateNoneExistentTensorGeneratesError": ["test.mock.MagicMock", "mock.patch.object", "test_util.TensorFlowTestCase.assertRaisesRegex", "cli.evaluator.ExpressionEvaluator"], "cli.evaluator_test.EvaluatorTest.testEvaluateNoneExistentTensorGeneratesError.fake_get_tensors": ["lib.debug_data.WatchKeyDoesNotExistInDebugDumpDirError"], "lib.debug_data.WatchKeyDoesNotExistInDebugDumpDirError": [], "cli.evaluator_test.EvaluatorTest.testEvaluateWithMultipleDevicesContainingTheSameTensorName": ["test.mock.MagicMock", "test_util.TensorFlowTestCase.assertRaisesRegex", "cli.evaluator.ExpressionEvaluator", "mock.patch.object", "test_util.TensorFlowTestCase.assertAllClose"], "cli.evaluator_test.EvaluatorTest.testEvaluateWithMultipleDevicesContainingTheSameTensorName.fake_get_tensors": ["numpy.array", "<builtin>.ValueError"], "<builtin>.ValueError": [], "cli.evaluator_test.EvaluatorTest.testEvaluateWithNonDefaultDebugOp": ["test.mock.MagicMock", "mock.patch.object", "test_util.TensorFlowTestCase.assertAllClose", "cli.evaluator.ExpressionEvaluator"], "cli.evaluator_test.EvaluatorTest.testEvaluateWithNonDefaultDebugOp.fake_get_tensors": ["numpy.array"], "cli.evaluator_test.EvaluatorTest.testEvaluateWithMultipleExecIndexes": ["test.mock.MagicMock", "mock.patch.object", "test_util.TensorFlowTestCase.assertAllClose", "cli.evaluator.ExpressionEvaluator"], "cli.evaluator_test.EvaluatorTest.testEvaluateWithMultipleExecIndexes.fake_get_tensors": ["numpy.array"], "cli.evaluator_test.EvaluatorTest.testEvaluateExpressionWithUnmatchedBacktick": ["test.mock.MagicMock", "cli.evaluator.ExpressionEvaluator", "test_util.TensorFlowTestCase.assertRaises"], "cli.evaluator_test.EvaluatorTest.testEvaluateExpressionWithInvalidDebugTensorName": ["test.mock.MagicMock", "cli.evaluator.ExpressionEvaluator", "test_util.TensorFlowTestCase.assertRaisesRegex", "test_util.TensorFlowTestCase.assertRaises"], "platform.test.main": []}