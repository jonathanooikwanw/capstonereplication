{"converters.control_flow_test": ["platform.test.main"], "converters.control_flow_test.ControlFlowTestBase.assertValuesEqual": ["util.nest.map_structure", "converter_testing.TestCase.assertAllEqual"], "converters.control_flow_test.ControlFlowTestBase.assertValuesEqual.<lambda1>": ["converter_testing.TestCase.evaluate", "framework.tensor_util.is_tf_type"], "framework.tensor_util.is_tf_type": [], "converter_testing.TestCase.evaluate": [], "util.nest.map_structure": [], "converter_testing.TestCase.assertAllEqual": [], "converters.control_flow_test.ControlFlowTestBase.assertTransformedResult": ["<builtin>.isinstance", "converter_testing.TestCase.transform", "converters.control_flow_test.ControlFlowTestBase.assertValuesEqual"], "<builtin>.isinstance": [], "converter_testing.TestCase.transform": [], "converters.control_flow_test.NestedControlFlowTest.test_basic": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.NestedControlFlowTest.test_basic.f": [], "framework.constant_op.constant": [], "converters.control_flow_test.NestedControlFlowTest.test_mixed_globals_nonglobals": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.NestedControlFlowTest.test_mixed_globals_nonglobals.f": [], "converters.control_flow_test.NestedControlFlowTest.test_composite_state_complex": ["converter_testing.TestCase.transform", "framework.constant_op.constant", "converters.control_flow_test.ControlFlowTestBase.assertValuesEqual"], "converters.control_flow_test.NestedControlFlowTest.test_composite_state_complex.TestClassX.__init__": [], "converters.control_flow_test.NestedControlFlowTest.test_composite_state_complex.TestClassY.__init__": [], "converters.control_flow_test.NestedControlFlowTest.test_composite_state_complex.f": ["converters.control_flow_test.NestedControlFlowTest.test_composite_state_complex.TestClassX.__init__", "converters.control_flow_test.NestedControlFlowTest.test_composite_state_complex.TestClassY.__init__"], "converters.control_flow_test.WhileStatementTest.test_basic": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_basic.f": [], "converters.control_flow_test.WhileStatementTest.test_single_output": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_single_output.f": [], "converters.control_flow_test.WhileStatementTest.test_composite_state_attr": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_composite_state_attr.TestClass.__init__": ["framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_composite_state_attr.f": ["converters.control_flow_test.WhileStatementTest.test_composite_state_attr.TestClass.__init__"], "converters.control_flow_test.WhileStatementTest.test_composite_state_slice": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_composite_state_slice.f": [], "converters.control_flow_test.WhileStatementTest.test_composite_state_literal_slice": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_composite_state_literal_slice.f": [], "converters.control_flow_test.WhileStatementTest.test_composite_state_attr_initialized_in_loop": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converter_testing.TestCase.transform", "framework.constant_op.constant", "converter_testing.TestCase.assertRaisesRegex"], "converters.control_flow_test.WhileStatementTest.test_composite_state_attr_initialized_in_loop.f": [], "converter_testing.TestCase.assertRaisesRegex": [], "converters.control_flow_test.WhileStatementTest.test_composite_state_slice_initialized_in_loop": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converter_testing.TestCase.transform", "framework.constant_op.constant", "converter_testing.TestCase.assertRaisesRegex"], "converters.control_flow_test.WhileStatementTest.test_composite_state_slice_initialized_in_loop.f": [], "converters.control_flow_test.WhileStatementTest.test_composite_state_literal_slice_initialized_in_loop": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converter_testing.TestCase.transform", "framework.constant_op.constant", "converter_testing.TestCase.assertRaisesRegex"], "converters.control_flow_test.WhileStatementTest.test_composite_state_literal_slice_initialized_in_loop.f": [], "converters.control_flow_test.WhileStatementTest.test_composite_state_slice_aliased_to_local": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converter_testing.TestCase.evaluate", "converter_testing.TestCase.transform", "eager.def_function.function", "converter_testing.TestCase.assertRaises", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_composite_state_slice_aliased_to_local.f": [], "converter_testing.TestCase.assertRaises": [], "eager.def_function.function": [], "converters.control_flow_test.WhileStatementTest.test_local_composite_attr": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_local_composite_attr.TestClass.__init__": ["framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_local_composite_attr.f": ["converters.control_flow_test.WhileStatementTest.test_local_composite_attr.TestClass.__init__"], "converters.control_flow_test.WhileStatementTest.test_local_composite_slice": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_local_composite_slice.f": [], "converters.control_flow_test.WhileStatementTest.test_local_composite_literal_slice": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_local_composite_literal_slice.f": [], "converters.control_flow_test.WhileStatementTest.test_non_tensor_state": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_non_tensor_state.f": [], "converters.control_flow_test.WhileStatementTest.test_non_tensor_state_illegal_type": ["converter_testing.TestCase.transform", "converter_testing.TestCase.assertRaisesRegex", "framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_non_tensor_state_illegal_type.TestClass.__init__": ["framework.constant_op.constant"], "converters.control_flow_test.WhileStatementTest.test_non_tensor_state_illegal_type.f": ["converters.control_flow_test.WhileStatementTest.test_non_tensor_state_illegal_type.TestClass.__init__"], "converters.control_flow_test.WhileStatementTest.test_dispatches_by_cond_only": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converter_testing.TestCase.transform", "converter_testing.TestCase.assertRaises", "framework.constant_op.constant", "converter_testing.TestCase.assertEqual", "converters.control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.TensorIncompatibleNumeric.__init__"], "converters.control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.TensorIncompatibleNumeric.__init__": [], "converters.control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.TensorIncompatibleNumeric.__add__": ["converters.control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.TensorIncompatibleNumeric.__init__"], "converters.control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.f": [], "converter_testing.TestCase.assertEqual": [], "converters.control_flow_test.IfStatementTest.test_basic": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.IfStatementTest.test_basic.f": [], "converters.control_flow_test.IfStatementTest.test_sparse_tensor": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant", "framework.sparse_tensor.SparseTensor"], "converters.control_flow_test.IfStatementTest.test_sparse_tensor.f": [], "framework.sparse_tensor.SparseTensor": [], "converters.control_flow_test.IfStatementTest.test_complex_outputs": ["converter_testing.TestCase.transform", "framework.constant_op.constant", "converters.control_flow_test.IfStatementTest.test_complex_outputs.TestClass.__init__", "converters.control_flow_test.ControlFlowTestBase.assertValuesEqual"], "converters.control_flow_test.IfStatementTest.test_complex_outputs.TestClass.__init__": [], "converters.control_flow_test.IfStatementTest.test_complex_outputs.f": [], "converters.control_flow_test.IfStatementTest.test_single_output": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.IfStatementTest.test_single_output.f": [], "converters.control_flow_test.IfStatementTest.test_unbalanced": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.IfStatementTest.test_unbalanced.f": [], "converters.control_flow_test.IfStatementTest.test_unbalanced_raising": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converter_testing.TestCase.transform", "converter_testing.TestCase.assertRaises"], "converters.control_flow_test.IfStatementTest.test_unbalanced_raising.f": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "converters.control_flow_test.IfStatementTest.test_local_var": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.IfStatementTest.test_local_var.f": [], "converters.control_flow_test.IfStatementTest.test_local_remains_local": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.IfStatementTest.test_local_remains_local.f": [], "converters.control_flow_test.IfStatementTest.test_global_local": ["converter_testing.TestCase.assertEqual", "converter_testing.TestCase.transform"], "converters.control_flow_test.IfStatementTest.test_global_local.f": [], "converters.control_flow_test.IfStatementTest.test_no_outputs": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.IfStatementTest.test_no_outputs.f": [], "converters.control_flow_test.IfStatementTest.test_created_outputs": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult"], "converters.control_flow_test.IfStatementTest.test_created_outputs.f": [], "converters.control_flow_test.IfStatementTest.test_created_loop_local_outputs": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "<builtin>.range"], "converters.control_flow_test.IfStatementTest.test_created_loop_local_outputs.f": [], "<builtin>.range": [], "converters.control_flow_test.IfStatementTest.test_created_loop_variable": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "<builtin>.range"], "converters.control_flow_test.IfStatementTest.test_created_loop_variable.f": [], "converters.control_flow_test.IfStatementTest.test_unaffected_global": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converter_testing.TestCase.assertEqual"], "converters.control_flow_test.IfStatementTest.test_unaffected_global.f": [], "converters.control_flow_test.IfStatementTest.test_unaffected_nonlocal": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult"], "converters.control_flow_test.IfStatementTest.test_unaffected_nonlocal.f": ["converters.control_flow_test.IfStatementTest.test_unaffected_nonlocal.f.inner_fn"], "converters.control_flow_test.IfStatementTest.test_unaffected_nonlocal.f.inner_fn": [], "converters.control_flow_test.IfStatementTest.test_output_defined_in_prior_except": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult"], "converters.control_flow_test.IfStatementTest.test_output_defined_in_prior_except.f": ["<builtin>.ValueError"], "converters.control_flow_test.IfStatementTest.test_unbalanced_multiple_composites": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converters.control_flow_test.IfStatementTest.test_unbalanced_multiple_composites.Foo.__init__", "framework.constant_op.constant"], "converters.control_flow_test.IfStatementTest.test_unbalanced_multiple_composites.Foo.__init__": [], "converters.control_flow_test.IfStatementTest.test_unbalanced_multiple_composites.f": [], "converters.control_flow_test.IfStatementTest.test_unbalanced_composite": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant", "converters.control_flow_test.IfStatementTest.test_unbalanced_composite.Foo.__init__"], "converters.control_flow_test.IfStatementTest.test_unbalanced_composite.Foo.__init__": [], "converters.control_flow_test.IfStatementTest.test_unbalanced_composite.f": [], "converters.control_flow_test.ForStatementTest.test_basic": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.ForStatementTest.test_basic.f": [], "converters.control_flow_test.ForStatementTest.test_single_output": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "framework.constant_op.constant"], "converters.control_flow_test.ForStatementTest.test_single_output.f": [], "converters.control_flow_test.ForStatementTest.test_iterated_expression": ["converter_testing.TestCase.assertEqual", "converter_testing.TestCase.transform"], "converters.control_flow_test.ForStatementTest.test_iterated_expression.count_evals": [], "converters.control_flow_test.ForStatementTest.test_iterated_expression.f": ["<builtin>.range", "converters.control_flow_test.ForStatementTest.test_iterated_expression.count_evals"], "converters.control_flow_test.ForStatementTest.test_composite_state_initialized_in_loop": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "converter_testing.TestCase.assertRaisesRegex", "converter_testing.TestCase.transform", "<builtin>.range", "framework.constant_op.constant", "<builtin>.list"], "converters.control_flow_test.ForStatementTest.test_composite_state_initialized_in_loop.f": [], "<builtin>.list": [], "converters.control_flow_test.ForStatementTest.test_tuple_unpacking": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult"], "converters.control_flow_test.ForStatementTest.test_tuple_unpacking.f": ["framework.constant_op.constant", "<builtin>.enumerate"], "<builtin>.enumerate": [], "converters.control_flow_test.ForStatementTest.test_with_comprehension_in_body": ["converters.control_flow_test.ControlFlowTestBase.assertTransformedResult", "<builtin>.range", "framework.constant_op.constant", "numpy.array"], "converters.control_flow_test.ForStatementTest.test_with_comprehension_in_body.f": ["<builtin>.range", "<builtin>.list", "framework.constant_op.constant"], "numpy.array": [], "converters.control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent": ["converters.control_flow_test.AdvancedControlFlowTest.test_for_with_else.f", "converters.control_flow_test.AdvancedControlFlowTest.test_while_with_else.f", "converter_testing.TestCase.transform", "converters.control_flow_test.AdvancedControlFlowTest.test_while_with_else_and_break.f", "converter_testing.TestCase.assertEqual", "converters.control_flow_test.AdvancedControlFlowTest.test_for_with_else_and_break.f"], "converters.control_flow_test.AdvancedControlFlowTest.test_for_with_else.f": [], "converters.control_flow_test.AdvancedControlFlowTest.test_for_with_else_and_break.f": [], "converters.control_flow_test.AdvancedControlFlowTest.test_while_with_else.f": [], "converters.control_flow_test.AdvancedControlFlowTest.test_while_with_else_and_break.f": [], "converters.control_flow_test.AdvancedControlFlowTest.test_while_with_else": ["converters.control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent"], "converters.control_flow_test.AdvancedControlFlowTest.test_while_with_else_and_break": ["converters.control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent"], "converters.control_flow_test.AdvancedControlFlowTest.test_for_with_else": ["converters.control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent"], "converters.control_flow_test.AdvancedControlFlowTest.test_for_with_else_and_break": ["converters.control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent"], "platform.test.main": []}