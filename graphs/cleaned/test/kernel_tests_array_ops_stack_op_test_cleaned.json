{"array_ops.stack_op_test": ["platform.test.main"], "array_ops.stack_op_test.np_split_squeeze": ["numpy.squeeze", "numpy.split"], "numpy.squeeze": [], "numpy.split": [], "array_ops.stack_op_test.StackOpTest.randn": ["numpy.random.randn"], "numpy.random.randn": [], "array_ops.stack_op_test.StackOpTest.testSimple": ["test.TestCase.assertAllEqual", "test.TestCase.subTest", "<builtin>.len", "<builtin>.range", "numpy.random.seed", "ops.array_ops.stack", "array_ops.stack_op_test.np_split_squeeze", "array_ops.stack_op_test.StackOpTest.randn"], "numpy.random.seed": [], "<builtin>.len": [], "<builtin>.range": [], "test.TestCase.subTest": [], "ops.array_ops.stack": [], "test.TestCase.assertAllEqual": [], "array_ops.stack_op_test.StackOpTest.testSimpleParallelCPU": ["framework.test_util.device", "ops.array_ops.parallel_stack", "test.TestCase.assertAllEqual", "<builtin>.map", "test.TestCase.subTest", "numpy.random.seed", "<builtin>.list", "framework.ops.Graph", "array_ops.stack_op_test.StackOpTest.randn"], "framework.ops.Graph": [], "framework.test_util.device": [], "<builtin>.map": [], "<builtin>.list": [], "ops.array_ops.parallel_stack": [], "array_ops.stack_op_test.StackOpTest.testSimpleParallelGPU": ["framework.test_util.device", "ops.array_ops.parallel_stack", "test.TestCase.assertAllEqual", "<builtin>.map", "test.TestCase.subTest", "<builtin>.list", "framework.ops.Graph", "array_ops.stack_op_test.StackOpTest.randn"], "array_ops.stack_op_test.StackOpTest.testConst": ["test.TestCase.assertAllEqual", "test.TestCase.subTest", "<builtin>.len", "numpy.random.seed", "framework.test_util.use_gpu", "framework.constant_op.constant", "ops.array_ops.stack", "<builtin>.list", "test.TestCase.assertEqual", "array_ops.stack_op_test.StackOpTest.randn", "eager.context.executing_eagerly", "ops.array_ops.reshape"], "framework.test_util.use_gpu": [], "framework.constant_op.constant": [], "ops.array_ops.reshape": [], "eager.context.executing_eagerly": [], "test.TestCase.assertEqual": [], "array_ops.stack_op_test.StackOpTest.testConstParallelCPU": ["framework.test_util.device", "ops.array_ops.parallel_stack", "test.TestCase.assertAllEqual", "test.TestCase.subTest", "<builtin>.len", "numpy.random.seed", "<builtin>.list", "framework.ops.Graph", "array_ops.stack_op_test.StackOpTest.randn"], "array_ops.stack_op_test.StackOpTest.testConstParallelGPU": ["framework.test_util.device", "ops.array_ops.parallel_stack", "test.TestCase.assertAllEqual", "test.TestCase.subTest", "<builtin>.len", "numpy.random.seed", "<builtin>.list", "framework.ops.Graph", "array_ops.stack_op_test.StackOpTest.randn"], "array_ops.stack_op_test.StackOpTest.testGradientsAxis0": ["<builtin>.map", "test.TestCase.subTest", "test.TestCase.cached_session", "numpy.random.seed", "<builtin>.list", "test.TestCase.assertAllClose", "ops.gradient_checker_v2.compute_gradient", "numpy.random.randn"], "test.TestCase.cached_session": [], "array_ops.stack_op_test.StackOpTest.testGradientsAxis0.func": ["ops.array_ops.stack"], "ops.gradient_checker_v2.compute_gradient": [], "test.TestCase.assertAllClose": [], "array_ops.stack_op_test.StackOpTest.testGradientsAxis1": ["<builtin>.map", "test.TestCase.subTest", "test.TestCase.cached_session", "numpy.random.seed", "<builtin>.list", "test.TestCase.assertAllClose", "ops.gradient_checker_v2.compute_gradient", "numpy.random.randn"], "array_ops.stack_op_test.StackOpTest.testGradientsAxis1.func": ["ops.array_ops.stack"], "array_ops.stack_op_test.StackOpTest.testZeroSizeCPU": ["framework.test_util.device", "numpy.zeros", "test.TestCase.assertAllEqual", "ops.array_ops.parallel_stack", "test.TestCase.subTest", "ops.array_ops.stack", "<builtin>.list", "framework.ops.Graph", "test.TestCase.evaluate"], "numpy.zeros": [], "test.TestCase.evaluate": [], "array_ops.stack_op_test.StackOpTest.testZeroSizeGPU": ["framework.test_util.device", "numpy.zeros", "test.TestCase.assertAllEqual", "ops.array_ops.parallel_stack", "test.TestCase.subTest", "ops.array_ops.stack", "<builtin>.list", "framework.ops.Graph", "test.TestCase.evaluate"], "array_ops.stack_op_test.StackOpTest.testAxis0DefaultCPU": ["framework.test_util.device", "ops.array_ops.parallel_stack", "test.TestCase.assertAllEqual", "numpy.array", "framework.constant_op.constant", "ops.array_ops.stack", "framework.ops.Graph", "test.TestCase.evaluate"], "numpy.array": [], "array_ops.stack_op_test.StackOpTest.testAxis0DefaultGPU": ["framework.test_util.device", "ops.array_ops.parallel_stack", "test.TestCase.assertAllEqual", "numpy.array", "framework.constant_op.constant", "ops.array_ops.stack", "framework.ops.Graph", "test.TestCase.evaluate"], "array_ops.stack_op_test.StackOpTest.testAgainstNumpy": ["test.TestCase.subTest", "test.TestCase.cached_session", "<builtin>.len", "<builtin>.range", "test.TestCase.assertNDArrayNear", "ops.array_ops.stack", "test.TestCase.assertEqual", "array_ops.stack_op_test.np_split_squeeze", "array_ops.stack_op_test.StackOpTest.randn", "test.TestCase.evaluate"], "test.TestCase.assertNDArrayNear": [], "array_ops.stack_op_test.StackOpTest.testDimOutOfRange": ["framework.constant_op.constant", "test.TestCase.assertRaisesRegex", "ops.array_ops.stack"], "test.TestCase.assertRaisesRegex": [], "array_ops.stack_op_test.StackOpTest.testDimOutOfNegativeRange": ["framework.constant_op.constant", "test.TestCase.assertRaisesRegex", "ops.array_ops.stack"], "array_ops.stack_op_test.StackOpTest.testComplex": ["test.TestCase.assertAllEqual", "<builtin>.map", "test.TestCase.subTest", "numpy.random.seed", "ops.array_ops.stack", "<builtin>.list", "test.TestCase.session", "array_ops.stack_op_test.StackOpTest.randn", "test.TestCase.evaluate"], "test.TestCase.session": [], "array_ops.stack_op_test.AutomaticStackingTest.testSimple": ["test.TestCase.assertAllEqual", "framework.constant_op.constant", "framework.ops.convert_to_tensor"], "framework.ops.convert_to_tensor": [], "array_ops.stack_op_test.AutomaticStackingTest.testWithNDArray": ["test.TestCase.assertAllEqual", "numpy.array", "framework.constant_op.constant", "test.TestCase.session", "framework.ops.convert_to_tensor", "test.TestCase.evaluate"], "array_ops.stack_op_test.AutomaticStackingTest.testDtype": ["test.TestCase.assertRaises", "framework.constant_op.constant", "test.TestCase.assertEqual", "framework.ops.convert_to_tensor"], "test.TestCase.assertRaises": [], "array_ops.stack_op_test.AutomaticStackingTest.testDtypeConversionWhenTensorDtypeMismatch": ["test.TestCase.assertEqual", "framework.ops.convert_to_tensor"], "platform.test.main": []}