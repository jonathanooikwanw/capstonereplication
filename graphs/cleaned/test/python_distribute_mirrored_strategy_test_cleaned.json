{"distribute.mirrored_strategy_test": ["distribute.test_util.main"], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testMinimizeLoss": ["eager.context.executing_eagerly", "strategy_test_lib.DistributionTestBase._test_minimize_loss_eager", "strategy_test_lib.DistributionTestBase._test_minimize_loss_graph"], "eager.context.executing_eagerly": [], "strategy_test_lib.DistributionTestBase._test_minimize_loss_eager": [], "strategy_test_lib.DistributionTestBase._test_minimize_loss_graph": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReplicaId": ["strategy_test_lib.DistributionTestBase._test_replica_id"], "strategy_test_lib.DistributionTestBase._test_replica_id": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testNumReplicasInSync": ["strategy_test_lib.DistributionTestBase.assertEqual"], "strategy_test_lib.DistributionTestBase.assertEqual": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testCallAndMergeExceptions": ["strategy_test_lib.DistributionTestBase._test_call_and_merge_exceptions"], "strategy_test_lib.DistributionTestBase._test_call_and_merge_exceptions": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testRunRegroupError": ["strategy_test_lib.DistributionTestBase.skipTest", "strategy_test_lib.DistributionTestBase.assertRaises"], "strategy_test_lib.DistributionTestBase.skipTest": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testRunRegroupError.run_fn": ["strategy_test_lib.DistributionTestBase.evaluate", "<builtin>.range", "distribute.mirrored_strategy_test._replica_id", "<builtin>.int", "<builtin>.list"], "distribute.mirrored_strategy_test._replica_id": ["<builtin>.isinstance", "framework.constant_op.constant", "ops.array_ops.identity", "distribute.distribution_strategy_context.get_replica_context"], "strategy_test_lib.DistributionTestBase.evaluate": [], "<builtin>.int": [], "<builtin>.range": [], "<builtin>.list": [], "strategy_test_lib.DistributionTestBase.assertRaises": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReduceToCpu": ["strategy_test_lib.DistributionTestBase.evaluate", "<builtin>.sum", "strategy_test_lib.DistributionTestBase.assertEqual", "<builtin>.range", "strategy_test_lib.DistributionTestBase.skipTest"], "<builtin>.sum": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReduceToCpuNested": ["strategy_test_lib.DistributionTestBase.skipTest", "strategy_test_lib.DistributionTestBase.evaluate", "strategy_test_lib.DistributionTestBase.assertEqual", "framework.constant_op.constant"], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReduceToCpuNested.replica_fn": ["framework.constant_op.constant"], "framework.constant_op.constant": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.reduce_axis_helper": ["strategy_test_lib.DistributionTestBase.assertNear", "strategy_test_lib.DistributionTestBase.evaluate", "<builtin>.range", "<builtin>.sum"], "strategy_test_lib.DistributionTestBase.assertNear": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReduceAxisToCpu": ["strategy_test_lib.DistributionTestBase.skipTest", "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.reduce_axis_helper"], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReduceAxisToCpu.replica_squared_fn": ["ops.math_ops.cast", "distribute.mirrored_strategy_test._replica_id_as_int", "ops.array_ops.identity"], "distribute.mirrored_strategy_test._replica_id_as_int": ["<builtin>.isinstance", "framework.tensor_util.constant_value", "distribute.distribution_strategy_context.get_replica_context"], "ops.math_ops.cast": [], "ops.array_ops.identity": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.set_v2_tensorshape": ["framework.tensor_shape.enable_v2_tensorshape", "framework.tensor_shape.disable_v2_tensorshape"], "framework.tensor_shape.enable_v2_tensorshape": [], "framework.tensor_shape.disable_v2_tensorshape": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReduceAxisToCpuUnknownShape": ["distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.set_v2_tensorshape", "strategy_test_lib.DistributionTestBase.skipTest", "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.reduce_axis_helper"], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReduceAxisToCpuUnknownShape.replica_squared_fn": ["ops.array_ops.placeholder_with_default", "ops.math_ops.cast", "distribute.mirrored_strategy_test._replica_id_as_int"], "ops.array_ops.placeholder_with_default": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReplicateDataset": ["<builtin>.range", "eager.context.executing_eagerly", "strategy_test_lib.DistributionTestBase._input_fn_to_test_input_context", "strategy_test_lib.DistributionTestBase._test_input_fn_iterable", "python.tf2.enabled", "strategy_test_lib.DistributionTestBase.skipTest"], "python.tf2.enabled": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testReplicateDataset.<lambda1>": ["dataset_ops.Dataset.range"], "dataset_ops.Dataset.range": [], "strategy_test_lib.DistributionTestBase._input_fn_to_test_input_context": [], "strategy_test_lib.DistributionTestBase._test_input_fn_iterable": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testMakeInputFnIteratorWithDataset": ["strategy_test_lib.DistributionTestBase._test_input_fn_iterator", "strategy_test_lib.DistributionTestBase._input_fn_to_test_input_context", "<builtin>.range"], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testMakeInputFnIteratorWithDataset.<lambda1>": ["dataset_ops.Dataset.range"], "strategy_test_lib.DistributionTestBase._test_input_fn_iterator": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testMakeInputFnIteratorWithCallable": ["strategy_test_lib.DistributionTestBase._test_input_fn_iterator", "strategy_test_lib.DistributionTestBase._input_fn_to_test_input_context", "<builtin>.range"], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testMakeInputFnIteratorWithCallable.fn": ["ops.dataset_ops.make_one_shot_iterator", "dataset_ops.Dataset.range"], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testMakeInputFnIteratorWithCallable.fn.<lambda1>": ["dataset_ops.Dataset.range"], "ops.dataset_ops.make_one_shot_iterator": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testNumpyDataset": ["strategy_test_lib.DistributionTestBase._test_numpy_dataset"], "strategy_test_lib.DistributionTestBase._test_numpy_dataset": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testGlobalStepUpdate": ["strategy_test_lib.DistributionTestBase._test_global_step_update"], "strategy_test_lib.DistributionTestBase._test_global_step_update": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testRun": ["strategy_test_lib.DistributionTestBase._test_run"], "strategy_test_lib.DistributionTestBase._test_run": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testAllReduceSum": ["strategy_test_lib.DistributionTestBase._test_all_reduce_sum"], "strategy_test_lib.DistributionTestBase._test_all_reduce_sum": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testAllReduceSumGradients": ["strategy_test_lib.DistributionTestBase._test_all_reduce_sum_gradients"], "strategy_test_lib.DistributionTestBase._test_all_reduce_sum_gradients": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testAllReduceSumGradientTape": ["strategy_test_lib.DistributionTestBase._test_all_reduce_sum_gradient_tape"], "strategy_test_lib.DistributionTestBase._test_all_reduce_sum_gradient_tape": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testAllReduceMean": ["strategy_test_lib.DistributionTestBase._test_all_reduce_mean"], "strategy_test_lib.DistributionTestBase._test_all_reduce_mean": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testAllReduceMeanGradients": ["strategy_test_lib.DistributionTestBase._test_all_reduce_mean_gradients"], "strategy_test_lib.DistributionTestBase._test_all_reduce_mean_gradients": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testAllReduceMeanGradientTape": ["strategy_test_lib.DistributionTestBase._test_all_reduce_mean_gradient_tape"], "strategy_test_lib.DistributionTestBase._test_all_reduce_mean_gradient_tape": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testSummaryForReplicaZeroOnly": ["strategy_test_lib.DistributionTestBase._test_summary_for_replica_zero_only"], "strategy_test_lib.DistributionTestBase._test_summary_for_replica_zero_only": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.testTrainableVariables": ["strategy_test_lib.DistributionTestBase._test_trainable_variable"], "strategy_test_lib.DistributionTestBase._test_trainable_variable": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.test_prefetch_to_device_dataset": ["<builtin>.iter", "strategy_test_lib.DistributionTestBase.assertAllEqual", "dataset_ops.Dataset.range", "eager.context.executing_eagerly", "<builtin>.isinstance", "<builtin>.next", "distribute.distribute_lib.InputOptions", "device.DeviceSpec.from_string", "strategy_test_lib.DistributionTestBase.skipTest"], "distribute.distribute_lib.InputOptions": [], "<builtin>.iter": [], "<builtin>.next": [], "<builtin>.isinstance": [], "device.DeviceSpec.from_string": [], "strategy_test_lib.DistributionTestBase.assertAllEqual": [], "distribute.mirrored_strategy_test.MirroredTwoDeviceDistributionTest.test_prefetch_to_host_dataset": ["<builtin>.iter", "strategy_test_lib.DistributionTestBase.assertAllEqual", "dataset_ops.Dataset.range", "eager.context.executing_eagerly", "<builtin>.isinstance", "<builtin>.next", "distribute.distribute_lib.InputOptions", "device.DeviceSpec.from_string", "strategy_test_lib.DistributionTestBase.skipTest", "<builtin>.list"], "distribute.mirrored_strategy_test.one_device_combinations": ["distribute.combinations.combine"], "distribute.combinations.combine": [], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testMinimizeLoss": ["eager.context.executing_eagerly", "strategy_test_lib.DistributionTestBase._test_minimize_loss_eager", "strategy_test_lib.DistributionTestBase._test_minimize_loss_graph"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testReplicaId": ["strategy_test_lib.DistributionTestBase._test_replica_id"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testCallAndMergeExceptions": ["strategy_test_lib.DistributionTestBase._test_call_and_merge_exceptions"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testRun": ["strategy_test_lib.DistributionTestBase._test_run"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testAllReduceSum": ["strategy_test_lib.DistributionTestBase._test_all_reduce_sum"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testAllReduceSumGradients": ["strategy_test_lib.DistributionTestBase._test_all_reduce_sum_gradients"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testAllReduceSumGradientTape": ["strategy_test_lib.DistributionTestBase._test_all_reduce_sum_gradient_tape"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testAllReduceMean": ["strategy_test_lib.DistributionTestBase._test_all_reduce_mean"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testAllReduceMeanGradients": ["strategy_test_lib.DistributionTestBase._test_all_reduce_mean_gradients"], "distribute.mirrored_strategy_test.MirroredOneDeviceDistributionTest.testAllReduceMeanGradientTape": ["strategy_test_lib.DistributionTestBase._test_all_reduce_mean_gradient_tape"], "distribute.mirrored_strategy_test.MirroredStrategyVariableCreatorStackTest": ["distribute.combinations.generate", "distribute.combinations.combine"], "distribute.combinations.generate": [], "distribute.mirrored_strategy_test.MirroredStrategyVariableCreatorStackTest.testCreatorStacksAreThreadLocal": ["eager.context.graph_mode", "test.TestCase.assertEqual", "ops.variable_scope.variable_creator_scope"], "distribute.mirrored_strategy_test.MirroredStrategyVariableCreatorStackTest.testCreatorStacksAreThreadLocal.model_fn": ["ops.variable_scope.variable", "<builtin>.str", "ops.variable_scope.variable_creator_scope", "test.TestCase.evaluate", "distribute.mirrored_strategy_test._replica_id", "distribute.distribution_strategy_context.get_replica_context"], "test.TestCase.evaluate": [], "<builtin>.str": [], "distribute.mirrored_strategy_test.MirroredStrategyVariableCreatorStackTest.testCreatorStacksAreThreadLocal.model_fn.thread_creator_fn": [], "ops.variable_scope.variable_creator_scope": [], "ops.variable_scope.variable": [], "distribute.mirrored_strategy_test.MirroredStrategyVariableCreatorStackTest.testCreatorStacksAreThreadLocal.model_fn.<lambda1>": [], "distribute.distribution_strategy_context.get_replica_context": [], "distribute.mirrored_strategy_test.MirroredStrategyVariableCreatorStackTest.testCreatorStacksAreThreadLocal.main_thread_creator": [], "eager.context.graph_mode": [], "test.TestCase.assertEqual": [], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testExecutingEagerlyOutsideFunction": ["framework.func_graph.FuncGraph", "test.TestCase.assertEqual", "framework.ops.executing_eagerly_outside_functions"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testExecutingEagerlyOutsideFunction.model_fn": ["framework.ops.executing_eagerly_outside_functions"], "framework.ops.executing_eagerly_outside_functions": [], "framework.func_graph.FuncGraph": [], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplica": ["test.TestCase.assertEqual", "test.TestCase.evaluate", "test.TestCase.assertLen"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplica.model_fn": ["distribute.distribution_strategy_context.get_replica_context"], "test.TestCase.assertLen": [], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaInsideAnotherFunction": ["test.TestCase.assertEqual", "test.TestCase.evaluate", "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaInsideAnotherFunction.step", "test.TestCase.assertLen"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaInsideAnotherFunction.model_fn": ["distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaInsideAnotherFunction.step": [], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testControlFlowFunctionInCallForEachReplicaWithMergeCall": ["test.TestCase.assertRaisesRegex"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testControlFlowFunctionInCallForEachReplicaWithMergeCall.merge_fn": [], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testControlFlowFunctionInCallForEachReplicaWithMergeCall.model_fn": ["ops.control_flow_ops.while_loop_v2"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testControlFlowFunctionInCallForEachReplicaWithMergeCall.model_fn.body_fn": ["distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testControlFlowFunctionInCallForEachReplicaWithMergeCall.model_fn.<lambda1>": [], "ops.control_flow_ops.while_loop_v2": [], "test.TestCase.assertRaisesRegex": [], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testNestedFunctionInCallForEachReplicaWithMergeCall": ["test.TestCase.assertRaisesRegex"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testNestedFunctionInCallForEachReplicaWithMergeCall.merge_fn": [], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testNestedFunctionInCallForEachReplicaWithMergeCall.model_fn": ["distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testNestedFunctionInCallForEachReplicaWithMergeCall.model_fn.model_fn_nested"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testNestedFunctionInCallForEachReplicaWithMergeCall.model_fn.model_fn_nested": ["distribute.distribution_strategy_context.get_replica_context", "framework.constant_op.constant"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaWithMergeCall": ["test.TestCase.assertEqual", "test.TestCase.evaluate"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaWithMergeCall.merge_fn": [], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaWithMergeCall.model_fn": ["distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaCached": ["test.TestCase.assertEmpty", "test.TestCase.assertLen", "<builtin>.range", "test.TestCase.assertGreater", "<builtin>.len"], "distribute.mirrored_strategy_test.MirroredStrategyCallForEachReplicaTest.testFunctionInCallForEachReplicaCached.model_fn": [], "test.TestCase.assertEmpty": [], "<builtin>.len": [], "test.TestCase.assertGreater": [], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScope": ["<builtin>.zip", "test.TestCase.assertIsInstance", "eager.context.graph_mode", "test.TestCase.assertEqual", "framework.ops.name_scope", "<builtin>.len"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScope.model_fn": ["distribute.distribution_strategy_context.get_replica_context", "framework.ops.name_scope", "framework.constant_op.constant"], "framework.ops.name_scope": [], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScope.model_fn.<lambda1>": [], "<builtin>.zip": [], "test.TestCase.assertIsInstance": [], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testWithDefaultName": ["<builtin>.zip", "test.TestCase.assertIsInstance", "eager.context.graph_mode", "test.TestCase.assertEqual", "<builtin>.len"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testWithDefaultName.model_fn": ["distribute.distribution_strategy_context.get_replica_context", "framework.ops.name_scope", "framework.constant_op.constant"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testWithDefaultName.model_fn.<lambda1>": [], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScopeWithVariable": ["ops.variable_scope.variable", "test.TestCase.assertIsInstance", "eager.context.graph_mode", "test.TestCase.assertEqual", "framework.ops.name_scope"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScopeWithVariable.in_cross_replica": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScopeWithVariable.model_fn": ["framework.ops.name_scope", "ops.variable_scope.variable", "distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScopeWithGetVariable": ["test.TestCase.assertIsInstance", "ops.variable_scope.get_variable", "eager.context.graph_mode", "test.TestCase.assertEqual", "framework.ops.name_scope"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScopeWithGetVariable.in_cross_replica": ["ops.variable_scope.get_variable"], "ops.variable_scope.get_variable": [], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testNameScopeWithGetVariable.model_fn": ["ops.variable_scope.get_variable", "framework.ops.name_scope", "distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testVariableScopeWithGetVariable": ["test.TestCase.assertEqual", "test.TestCase.assertIsInstance", "ops.variable_scope.get_variable", "eager.context.graph_mode", "ops.variable_scope.variable_scope"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testVariableScopeWithGetVariable.in_cross_replica": ["ops.variable_scope.get_variable"], "distribute.mirrored_strategy_test.MirroredStrategyNameScopeTest.testVariableScopeWithGetVariable.model_fn": ["ops.variable_scope.variable_scope", "ops.variable_scope.get_variable", "distribute.distribution_strategy_context.get_replica_context"], "ops.variable_scope.variable_scope": [], "distribute.mirrored_strategy_test.MirroredThreeDeviceDistributionTest.testThreeDevices": ["strategy_test_lib.DistributionTestBase.assertTrue", "distribute.distribute_utils.is_mirrored", "strategy_test_lib.DistributionTestBase.assertEqual"], "distribute.mirrored_strategy_test.MirroredThreeDeviceDistributionTest.testThreeDevices.model_fn": ["ops.variable_scope.variable", "distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredThreeDeviceDistributionTest.testThreeDevices.model_fn.<lambda1>": [], "distribute.distribute_utils.is_mirrored": [], "strategy_test_lib.DistributionTestBase.assertTrue": [], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithoutAggregationType": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithoutAggregationType.var_fn": ["ops.variable_scope.variable"], "test.TestCase.assertTrue": [], "ops.variables.global_variables_initializer": [], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithoutAggregationType.model_fn": [], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithSum": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "test.TestCase.assertAllEqual", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertRaisesRegex"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithSum.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithSum.model_fn": [], "test.TestCase.assertAllEqual": [], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarCrossDeviceContext": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarCrossDeviceContext.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContext": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContext.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContext.model_fn": ["ops.math_ops.cast", "distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithSingleValue": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithSingleValue.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignMirroredVarReplicaContextWithSingleValue.model_fn": [], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignAddMirroredVarCrossDeviceContext": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignAddMirroredVarCrossDeviceContext.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignAddMirroredVarReplicaContext": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignAddMirroredVarReplicaContext.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignAddMirroredVarReplicaContext.model_fn": ["ops.math_ops.cast", "distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignAddMirroredVarReplicaContextWithSingleValue": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignAddMirroredVarReplicaContextWithSingleValue.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignAddMirroredVarReplicaContextWithSingleValue.model_fn": [], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignSubMirroredVarCrossDeviceContext": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignSubMirroredVarCrossDeviceContext.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignSubMirroredVarReplicaContext": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignSubMirroredVarReplicaContext.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignSubMirroredVarReplicaContext.model_fn": ["ops.math_ops.cast", "distribute.distribution_strategy_context.get_replica_context"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignSubMirroredVarReplicaContextWithSingleValue": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignSubMirroredVarReplicaContextWithSingleValue.var_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MirroredVariableUpdateTest.testAssignSubMirroredVarReplicaContextWithSingleValue.model_fn": [], "distribute.mirrored_strategy_test.MirroredAndSyncOnReadVariableInitializerTest.testAssignMirroredVarInitializer": ["test.TestCase.evaluate", "test.TestCase.assertFalse", "distribute.distribute_utils.is_mirrored", "test.TestCase.assertTrue", "eager.context.graph_mode"], "distribute.mirrored_strategy_test.MirroredAndSyncOnReadVariableInitializerTest.testAssignMirroredVarInitializer.var_fn": ["ops.variable_scope.variable"], "test.TestCase.assertFalse": [], "distribute.mirrored_strategy_test.MirroredAndSyncOnReadVariableInitializerTest.testAssignReplicaLocalVarInitializer": ["test.TestCase.evaluate", "test.TestCase.assertFalse", "distribute.distribute_utils.is_sync_on_read", "test.TestCase.assertTrue", "eager.context.graph_mode"], "distribute.mirrored_strategy_test.MirroredAndSyncOnReadVariableInitializerTest.testAssignReplicaLocalVarInitializer.model_fn": ["ops.variable_scope.variable", "distribute.distribute_utils.is_sync_on_read", "test.TestCase.assertTrue"], "distribute.distribute_utils.is_sync_on_read": [], "distribute.mirrored_strategy_test.SyncOnReadVariableAssignTest.testAssignReplicaLocalVarSumAggregation": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_sync_on_read", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.SyncOnReadVariableAssignTest.testAssignReplicaLocalVarSumAggregation.model_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.SyncOnReadVariableAssignTest.testAssignReplicaLocalVarMeanAggregation": ["ops.variables.global_variables_initializer", "test.TestCase.evaluate", "distribute.distribute_utils.is_sync_on_read", "test.TestCase.assertTrue", "test.TestCase.assertEqual"], "distribute.mirrored_strategy_test.SyncOnReadVariableAssignTest.testAssignReplicaLocalVarMeanAggregation.model_fn": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MockModel.__init__": ["ops.variable_scope.variable"], "distribute.mirrored_strategy_test.MockModel.__call__": ["<builtin>.len"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest._call_and_check": ["ops.variables.global_variables_initializer", "test.TestCase.assertAllClose", "distribute.device_util.canonicalize", "test.TestCase.evaluate", "<builtin>.range", "distribute.distribute_utils.select_replica", "distribute.mirrored_strategy_test.MockModel.__init__", "<builtin>.len"], "distribute.device_util.canonicalize": [], "distribute.distribute_utils.select_replica": [], "test.TestCase.assertAllClose": [], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInDefun": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest._call_and_check", "eager.function.defun"], "eager.function.defun": [], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInDefun.times_two": [], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInDefun.model_fn": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInDefun.times_two"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInNestedDefun": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest._call_and_check", "eager.function.defun"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInNestedDefun.times_two": [], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInNestedDefun.two_x_plus_one": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInNestedDefun.times_two"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInNestedDefun.model_fn": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testVariableInNestedDefun.two_x_plus_one"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testTwoVariablesInNestedDefun": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest._call_and_check", "eager.function.defun"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testTwoVariablesInNestedDefun.fn1": [], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testTwoVariablesInNestedDefun.fn2": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testTwoVariablesInNestedDefun.fn1"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testTwoVariablesInNestedDefun.model_fn": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testTwoVariablesInNestedDefun.fn2"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testGradientTapeOverNestedDefuns": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest._call_and_check", "eager.function.defun"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testGradientTapeOverNestedDefuns.fn1": [], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testGradientTapeOverNestedDefuns.fn2": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testGradientTapeOverNestedDefuns.fn1"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testGradientTapeOverNestedDefuns.model_fn": ["distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testGradientTapeOverNestedDefuns.fn2", "eager.backprop.GradientTape"], "eager.backprop.GradientTape": [], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testPassPerReplica": ["distribute.values.PerReplica", "distribute.mirrored_strategy_test.MirroredStrategyDefunTest._call_and_check", "eager.function.defun"], "distribute.mirrored_strategy_test.MirroredStrategyDefunTest.testPassPerReplica.fn1": [], "distribute.values.PerReplica": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest._configure_distribution_strategy": ["training.server_lib.ClusterSpec"], "training.server_lib.ClusterSpec": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest.test_num_replicas_in_sync": ["distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest._configure_distribution_strategy", "eager.context.num_gpus", "strategy_test_lib.DistributionTestBase.assertEqual"], "eager.context.num_gpus": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest.testMinimizeLossGraph": ["distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest._configure_distribution_strategy", "strategy_test_lib.DistributionTestBase._test_minimize_loss_graph"], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest.testDeviceScope": ["framework.ops.device", "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest._configure_distribution_strategy", "strategy_test_lib.DistributionTestBase.assertEqual", "framework.constant_op.constant"], "framework.ops.device": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest.testMakeInputFnIteratorWithDataset": ["distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest._configure_distribution_strategy", "<builtin>.range", "eager.context.num_gpus", "strategy_test_lib.DistributionTestBase._test_input_fn_iterator", "strategy_test_lib.DistributionTestBase._input_fn_to_test_input_context", "eager.context.graph_mode", "multi_worker_test_base.MultiWorkerTestBase.cached_session"], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest.testMakeInputFnIteratorWithDataset.<lambda1>": ["dataset_ops.Dataset.range"], "multi_worker_test_base.MultiWorkerTestBase.cached_session": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest.testMakeInputFnIteratorWithCallable": ["distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest._configure_distribution_strategy", "<builtin>.range", "eager.context.num_gpus", "strategy_test_lib.DistributionTestBase._test_input_fn_iterator", "strategy_test_lib.DistributionTestBase._input_fn_to_test_input_context", "eager.context.graph_mode", "multi_worker_test_base.MultiWorkerTestBase.cached_session"], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest.testMakeInputFnIteratorWithCallable.fn": ["ops.dataset_ops.make_one_shot_iterator", "dataset_ops.Dataset.range"], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTest.testUpdateConfigProto": ["strategy_test_lib.DistributionTestBase.assertTrue", "protobuf.config_pb2.ConfigProto"], "protobuf.config_pb2.ConfigProto": [], "distribute.mirrored_strategy_test.RemoteSingleWorkerMirroredStrategyGraph._get_num_gpus": ["eager.context.num_gpus"], "distribute.mirrored_strategy_test.RemoteSingleWorkerMirroredStrategyGraph.testNumReplicasInSync": ["multi_worker_test_base.SingleWorkerTestBaseGraph._testNumReplicasInSync"], "multi_worker_test_base.SingleWorkerTestBaseGraph._testNumReplicasInSync": [], "distribute.mirrored_strategy_test.RemoteSingleWorkerMirroredStrategyGraph.testMinimizeLoss": ["multi_worker_test_base.SingleWorkerTestBaseGraph._testMinimizeLoss"], "multi_worker_test_base.SingleWorkerTestBaseGraph._testMinimizeLoss": [], "distribute.mirrored_strategy_test.RemoteSingleWorkerMirroredStrategyGraph.testDeviceScope": ["multi_worker_test_base.SingleWorkerTestBaseGraph._testDeviceScope"], "multi_worker_test_base.SingleWorkerTestBaseGraph._testDeviceScope": [], "distribute.mirrored_strategy_test.RemoteSingleWorkerMirroredStrategyGraph.testMakeInputFnIteratorWithDataset": ["multi_worker_test_base.SingleWorkerTestBaseGraph._testMakeInputFnIteratorWithDataset"], "multi_worker_test_base.SingleWorkerTestBaseGraph._testMakeInputFnIteratorWithDataset": [], "distribute.mirrored_strategy_test.RemoteSingleWorkerMirroredStrategyGraph.testMakeInputFnIteratorWithCallable": ["multi_worker_test_base.SingleWorkerTestBaseGraph._testMakeInputFnIteratorWithCallable"], "multi_worker_test_base.SingleWorkerTestBaseGraph._testMakeInputFnIteratorWithCallable": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief.setUpClass": ["distribute.multi_worker_test_base.create_in_process_cluster"], "distribute.multi_worker_test_base.create_in_process_cluster": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief._make_cross_device_ops": ["distribute.cross_device_ops.ReductionToOneDevice"], "distribute.cross_device_ops.ReductionToOneDevice": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief.testMinimizeLossGraph": ["eager.context.graph_mode", "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief._make_cross_device_ops", "strategy_test_lib.DistributionTestBase._test_minimize_loss_graph", "distribute.mirrored_strategy.MirroredStrategy"], "distribute.mirrored_strategy.MirroredStrategy": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief.testMinimizeLossGraphMirroredStrategy": ["distribute.mirrored_strategy.all_local_devices", "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief._make_cross_device_ops", "distribute.mirrored_strategy.MirroredStrategy", "eager.context.graph_mode", "strategy_test_lib.DistributionTestBase._test_minimize_loss_graph"], "distribute.mirrored_strategy.all_local_devices": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief.testMinimizeLossGraphMirroredStrategyWithOneNode": ["json.dumps", "eager.context.num_gpus", "multi_worker_test_base.MultiWorkerTestBase.assertIsInstance", "mock.patch.dict", "distribute.mirrored_strategy.MirroredStrategy", "eager.context.graph_mode", "strategy_test_lib.DistributionTestBase.skipTest", "strategy_test_lib.DistributionTestBase._test_minimize_loss_graph"], "json.dumps": [], "mock.patch.dict": [], "multi_worker_test_base.MultiWorkerTestBase.assertIsInstance": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief.testInitializeFromTFConfig": ["json.dumps", "strategy_test_lib.DistributionTestBase.assertEqual", "eager.context.num_gpus", "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief._make_cross_device_ops", "mock.patch.dict", "distribute.mirrored_strategy.MirroredStrategy", "eager.context.graph_mode", "<builtin>.max"], "<builtin>.max": [], "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief.testSummaryForReplicaZeroOnly": ["distribute.mirrored_strategy.all_local_devices", "strategy_test_lib.DistributionTestBase._test_summary_for_replica_zero_only", "distribute.mirrored_strategy_test.MultiWorkerMirroredStrategyTestWithChief._make_cross_device_ops", "distribute.mirrored_strategy.MirroredStrategy", "eager.context.graph_mode"], "distribute.mirrored_strategy_test.MirroredVariableStopGradientTest": ["distribute.combinations.generate", "distribute.combinations.combine"], "distribute.mirrored_strategy_test.MirroredVariableStopGradientTest.testMirroredVariableAsStopGradient": ["ops.gradients.gradients", "test.TestCase.assertIsNone", "ops.variables.Variable", "framework.constant_op.constant"], "ops.variables.Variable": [], "ops.gradients.gradients": [], "test.TestCase.assertIsNone": [], "distribute.mirrored_strategy_test.FunctionTest.testBackwardFunctionDevicePlacement": ["eager.context.enable_run_metadata", "distribute.mirrored_strategy_test.FunctionTest.testBackwardFunctionDevicePlacement.step_fn", "ops.variable_scope.variable", "ops.array_ops.identity", "test.TestCase.evaluate", "test.TestCase.assertSetEqual", "eager.context.export_run_metadata", "<builtin>.set", "test.TestCase.assertEqual", "eager.context.disable_run_metadata"], "distribute.mirrored_strategy_test.FunctionTest.testBackwardFunctionDevicePlacement.forward": [], "distribute.mirrored_strategy_test.FunctionTest.testBackwardFunctionDevicePlacement.replica_fn": ["ops.array_ops.identity", "eager.backprop.GradientTape"], "distribute.mirrored_strategy_test.FunctionTest.testBackwardFunctionDevicePlacement.step_fn": [], "eager.context.enable_run_metadata": [], "eager.context.export_run_metadata": [], "eager.context.disable_run_metadata": [], "<builtin>.set": [], "test.TestCase.assertSetEqual": [], "distribute.mirrored_strategy_test.FunctionTest.testFuctionPreservesAutoGraph": [], "distribute.mirrored_strategy_test.FunctionTest.testFuctionPreservesAutoGraph.f": ["core.converter_testing.is_inside_generated_code", "test.TestCase.assertTrue"], "core.converter_testing.is_inside_generated_code": [], "distribute.mirrored_strategy_test.FunctionTest.testFuctionPreservesAutoGraph.replica_fn": ["distribute.mirrored_strategy_test.FunctionTest.testFuctionPreservesAutoGraph.f"], "framework.tensor_util.constant_value": [], "distribute.test_util.main": []}