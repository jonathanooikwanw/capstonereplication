{"utils.conv_utils_test": ["platform.test.main"], "utils.conv_utils_test._get_const_output_shape": ["<builtin>.min", "<builtin>.tuple"], "<builtin>.min": [], "<builtin>.tuple": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_convert_data_format": ["utils.conv_utils.convert_data_format", "test.TestCase.assertEqual", "test.TestCase.assertRaises"], "utils.conv_utils.convert_data_format": [], "test.TestCase.assertEqual": [], "test.TestCase.assertRaises": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_normalize_tuple": ["test.TestCase.assertEqual", "test.TestCase.assertRaises", "utils.conv_utils.normalize_tuple"], "utils.conv_utils.normalize_tuple": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_normalize_data_format": ["utils.conv_utils.normalize_data_format", "test.TestCase.assertEqual", "test.TestCase.assertRaises"], "utils.conv_utils.normalize_data_format": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_normalize_padding": ["utils.conv_utils.normalize_padding", "test.TestCase.assertEqual", "test.TestCase.assertRaises"], "utils.conv_utils.normalize_padding": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_conv_output_length": ["utils.conv_utils.conv_output_length", "test.TestCase.assertEqual"], "utils.conv_utils.conv_output_length": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_conv_input_length": ["utils.conv_utils.conv_input_length", "test.TestCase.assertEqual"], "utils.conv_utils.conv_input_length": [], "utils.conv_utils_test.TestBasicConvUtilsTest.test_deconv_output_length": ["utils.conv_utils.deconv_output_length", "test.TestCase.assertEqual"], "utils.conv_utils.deconv_output_length": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_fc": ["utils.conv_utils_test._get_const_output_shape", "test.TestCase.assertAllEqual", "utils.conv_utils.conv_kernel_mask", "numpy.ones", "<builtin>.len"], "<builtin>.len": [], "numpy.ones": [], "utils.conv_utils.conv_kernel_mask": [], "test.TestCase.assertAllEqual": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_diag": ["test.TestCase.assertAllEqual", "utils.conv_utils.conv_kernel_mask", "numpy.identity", "numpy.prod", "<builtin>.int", "<builtin>.len", "numpy.reshape"], "numpy.prod": [], "<builtin>.int": [], "numpy.identity": [], "numpy.reshape": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_full_stride": ["utils.conv_utils_test._get_const_output_shape", "test.TestCase.assertAllEqual", "<builtin>.tuple", "utils.conv_utils.conv_kernel_mask", "<builtin>.max", "numpy.zeros", "<builtin>.len", "<builtin>.all"], "<builtin>.max": [], "numpy.zeros": [], "<builtin>.all": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_almost_full_stride": ["utils.conv_utils_test._get_const_output_shape", "test.TestCase.assertAllEqual", "<builtin>.tuple", "utils.conv_utils.conv_kernel_mask", "itertools.product", "<builtin>.max", "<builtin>.min", "numpy.zeros", "<builtin>.len", "<builtin>.all"], "itertools.product": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_rect_kernel": ["test.TestCase.assertAllEqual", "utils.conv_utils.conv_kernel_mask", "itertools.product", "numpy.identity", "numpy.prod", "<builtin>.min", "<builtin>.int", "numpy.take", "<builtin>.list", "<builtin>.range", "<builtin>.slice", "<builtin>.len", "numpy.reshape"], "<builtin>.range": [], "<builtin>.list": [], "<builtin>.slice": [], "numpy.take": [], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_wrong_padding": ["<builtin>.len", "utils.conv_utils.conv_kernel_mask", "test.TestCase.assertRaises"], "utils.conv_utils_test.TestConvUtils.test_conv_kernel_mask_wrong_dims": ["<builtin>.len", "utils.conv_utils.conv_kernel_mask", "test.TestCase.assertRaises"], "platform.test.main": []}