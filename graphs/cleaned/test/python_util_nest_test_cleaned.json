{"util.nest_test": ["platform.test.main"], "util.nest_test._CustomMapping.__init__": ["<builtin>.dict"], "<builtin>.dict": [], "util.nest_test._CustomMapping.__getitem__": [], "util.nest_test._CustomMapping.__iter__": ["<builtin>.iter"], "<builtin>.iter": [], "util.nest_test._CustomMapping.__len__": ["<builtin>.len"], "<builtin>.len": [], "util.nest_test._CustomSequenceThatRaisesException.__len__": [], "util.nest_test._CustomSequenceThatRaisesException.__getitem__": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "collections.namedtuple": [], "util.nest_test.NestTest": ["testing.parameterized.named_parameters", "testing.parameterized.parameters", "framework.test_util.assert_no_new_pyobjects_executing_eagerly", "collections.namedtuple"], "attr.ib": [], "util.nest_test.NestTest.SampleAttr": ["attr.ib"], "util.nest_test.NestTest.UnsortedSampleAttr": ["attr.ib"], "framework.test_util.assert_no_new_pyobjects_executing_eagerly": [], "util.nest_test.NestTest.testAttrsFlattenAndPack": ["parameterized.TestCase.assertEqual", "util.nest.pack_sequence_as", "parameterized.TestCase.assertFalse", "util.nest.flatten", "parameterized.TestCase.assertTrue", "parameterized.TestCase.skipTest", "parameterized.TestCase.assertRaisesRegex", "util.nest._is_attrs", "parameterized.TestCase.assertIsInstance"], "parameterized.TestCase.skipTest": [], "util.nest._is_attrs": [], "parameterized.TestCase.assertFalse": [], "parameterized.TestCase.assertTrue": [], "util.nest.flatten": [], "parameterized.TestCase.assertEqual": [], "util.nest.pack_sequence_as": [], "parameterized.TestCase.assertIsInstance": [], "parameterized.TestCase.assertRaisesRegex": [], "testing.parameterized.parameters": [], "util.nest_test.NestTest.testAttrsMapStructure": ["parameterized.TestCase.assertEqual", "parameterized.TestCase.skipTest", "util.nest.map_structure"], "util.nest_test.NestTest.testAttrsMapStructure.<lambda1>": [], "util.nest.map_structure": [], "util.nest_test.NestTest.testFlattenAndPack": ["parameterized.TestCase.assertEqual", "parameterized.TestCase.assertRaises", "util.nest.pack_sequence_as", "util.nest.flatten", "parameterized.TestCase.assertRaisesRegex", "numpy.array"], "numpy.array": [], "parameterized.TestCase.assertRaises": [], "util.nest_test.NestTest.testFlattenDictOrder": ["parameterized.TestCase.assertEqual", "util.nest.flatten"], "util.nest_test.NestTest.testPackDictOrder": ["parameterized.TestCase.assertEqual", "util.nest.pack_sequence_as", "parameterized.TestCase.assertIsInstance"], "util.nest_test.NestTest.testFlattenAndPackMappingViews": ["util.nest.pack_sequence_as", "parameterized.TestCase.assertEqual", "util.nest.flatten", "collections.OrderedDict"], "collections.OrderedDict": [], "util.nest_test.NestTest.testFlattenAndPack_withDicts": ["parameterized.TestCase.assertEqual", "util.nest.pack_sequence_as", "util.nest_test._CustomMapping.__init__", "util.nest.flatten", "<builtin>.list", "parameterized.TestCase.assertIsInstance", "collections.OrderedDict"], "<builtin>.list": [], "util.nest_test.NestTest.testFlatten_numpyIsNotFlattened": ["util.nest.flatten", "parameterized.TestCase.assertLen", "numpy.array"], "parameterized.TestCase.assertLen": [], "util.nest_test.NestTest.testFlatten_stringIsNotFlattened": ["parameterized.TestCase.assertEqual", "util.nest.flatten", "parameterized.TestCase.assertLen", "util.nest.pack_sequence_as"], "util.nest_test.NestTest.testPackSequenceAs_notIterableError": ["parameterized.TestCase.assertRaisesRegex", "util.nest.pack_sequence_as"], "util.nest_test.NestTest.testPackSequenceAs_wrongLengthsError": ["parameterized.TestCase.assertRaisesRegex", "util.nest.pack_sequence_as"], "util.nest_test.NestTest.testPackSequenceAs_CompositeTensor": ["ragged_tensor.RaggedTensor.from_row_splits", "parameterized.TestCase.assertRaisesRegex", "util.nest.pack_sequence_as"], "ragged_tensor.RaggedTensor.from_row_splits": [], "util.nest_test.NestTest.testIsNested": ["ops.math_ops.tanh", "<builtin>.set", "parameterized.TestCase.assertFalse", "ops.array_ops.ones", "util.nest.is_nested", "parameterized.TestCase.assertTrue", "numpy.ones"], "util.nest.is_nested": [], "<builtin>.set": [], "ops.array_ops.ones": [], "ops.math_ops.tanh": [], "numpy.ones": [], "util.nest_test.NestTest.testFlattenDictItems": ["parameterized.TestCase.assertEqual", "parameterized.TestCase.assertRaises", "parameterized.TestCase.assertRaisesRegex", "util.nest.flatten_dict_items"], "util.nest.flatten_dict_items": [], "util.nest_test.NestTest.testAssertSameStructure": ["parameterized.TestCase.assertRaises", "framework.constant_op.constant", "util.nest.assert_same_structure", "parameterized.TestCase.assertRaisesRegex", "numpy.array"], "util.nest.assert_same_structure": [], "framework.constant_op.constant": [], "util.nest_test.NestTest.testHeterogeneousComparison": ["util.nest.assert_same_structure", "util.nest_test._CustomMapping.__init__"], "util.nest_test.NestTest.testMapStructure": ["parameterized.TestCase.assertEqual", "util.nest.map_structure", "parameterized.TestCase.assertAllEqual", "util.nest.flatten", "collections.defaultdict", "util.nest.assert_same_structure", "parameterized.TestCase.assertRaisesRegex", "parameterized.TestCase.assertNotEqual"], "util.nest_test.NestTest.testMapStructure.<lambda1>": [], "parameterized.TestCase.assertAllEqual": [], "util.nest_test.NestTest.testMapStructure.<lambda2>": [], "util.nest_test.NestTest.testMapStructure.<lambda3>": [], "util.nest_test.NestTest.testMapStructure.<lambda4>": [], "collections.defaultdict": [], "util.nest_test.NestTest.testMapStructure.<lambda5>": [], "util.nest_test.NestTest.testMapStructure.<lambda6>": [], "util.nest_test.NestTest.testMapStructure.<lambda7>": [], "util.nest_test.NestTest.testMapStructure.<lambda8>": [], "util.nest_test.NestTest.testMapStructure.<lambda9>": [], "util.nest_test.NestTest.testMapStructure.<lambda10>": [], "parameterized.TestCase.assertNotEqual": [], "util.nest_test.NestTest.testMapStructure.<lambda11>": [], "util.nest_test.NestTest.testMapStructure.<lambda12>": [], "util.nest_test.NestTest.testMapStructure.<lambda13>": [], "util.nest_test.NestTest.testMapStructure.<lambda14>": [], "util.nest_test.NestTest.testMapStructure.<lambda15>": [], "util.nest_test.NestTest.testMapStructure.<lambda16>": [], "util.nest_test.NestTest.testMapStructure.<lambda17>": [], "util.nest_test.NestTest.testMapStructure.<lambda18>": [], "util.nest_test.NestTest.testMapStructure.<lambda19>": [], "util.nest_test.NestTest.testMapStructure.<lambda20>": [], "util.nest_test.NestTest.testMapStructureWithStrings": ["parameterized.TestCase.assertEqual", "util.nest.assert_same_structure", "util.nest.map_structure"], "util.nest_test.NestTest.testMapStructureWithStrings.<lambda1>": [], "util.nest_test.NestTest.testMapStructureWithStrings.<lambda2>": [], "util.nest_test.NestTest.testMapStructureOverPlaceholders": ["framework.ops.Graph", "parameterized.TestCase.assertShapeEqual", "util.nest.map_structure", "parameterized.TestCase.cached_session", "util.nest.assert_same_structure", "numpy.zeros", "parameterized.TestCase.assertAllClose", "numpy.random.randn", "ops.array_ops.placeholder"], "framework.ops.Graph": [], "ops.array_ops.placeholder": [], "util.nest_test.NestTest.testMapStructureOverPlaceholders.<lambda1>": [], "numpy.zeros": [], "parameterized.TestCase.assertShapeEqual": [], "numpy.random.randn": [], "parameterized.TestCase.cached_session": [], "parameterized.TestCase.assertAllClose": [], "util.nest_test.NestTest.testAssertShallowStructure": ["nest._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format", "util.nest.assert_shallow_structure", "parameterized.TestCase.assertRaisesWithLiteralMatch", "collections.OrderedDict", "nest._SHALLOW_TREE_HAS_INVALID_KEYS.format", "<builtin>.len", "<builtin>.type", "nest._STRUCTURES_HAVE_MISMATCHING_TYPES.format"], "nest._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format": [], "parameterized.TestCase.assertRaisesWithLiteralMatch": [], "util.nest.assert_shallow_structure": [], "<builtin>.type": [], "nest._STRUCTURES_HAVE_MISMATCHING_TYPES.format": [], "nest._SHALLOW_TREE_HAS_INVALID_KEYS.format": [], "util.nest_test.NestTest.testFlattenUpTo": ["parameterized.TestCase.assertEqual", "nest._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format", "util.nest.assert_shallow_structure", "util.nest.flatten", "util.nest.flatten_up_to", "parameterized.TestCase.assertRaisesRegex", "<builtin>.len", "collections.OrderedDict"], "util.nest.flatten_up_to": [], "util.nest_test.NestTest.testFlattenWithTuplePathsUpTo": ["parameterized.TestCase.assertEqual", "nest._STRUCTURES_HAVE_MISMATCHING_LENGTHS.format", "parameterized.TestCase.assertRaisesWithLiteralMatch", "util.nest_test.NestTest.testFlattenWithTuplePathsUpTo.get_paths_and_values", "util.nest.flatten", "util.nest.flatten_with_tuple_paths", "collections.namedtuple", "<builtin>.len", "nest._IF_SHALLOW_IS_SEQ_INPUT_MUST_BE_SEQ.format", "<builtin>.type", "collections.OrderedDict"], "util.nest_test.NestTest.testFlattenWithTuplePathsUpTo.get_paths_and_values": ["util.nest.flatten_with_tuple_paths_up_to"], "util.nest.flatten_with_tuple_paths_up_to": [], "util.nest.flatten_with_tuple_paths": [], "nest._IF_SHALLOW_IS_SEQ_INPUT_MUST_BE_SEQ.format": [], "util.nest_test.NestTest.testMapStructureUpTo": ["parameterized.TestCase.assertEqual", "<builtin>.dict", "parameterized.TestCase.assertRaisesWithLiteralMatch", "util.nest_test._CustomMapping.__init__", "util.nest.map_structure_up_to", "nest._SHALLOW_TREE_HAS_INVALID_KEYS.format", "collections.namedtuple"], "util.nest_test.NestTest.testMapStructureUpTo.<lambda1>": [], "util.nest.map_structure_up_to": [], "util.nest_test.NestTest.testMapStructureUpTo.<lambda2>": ["<builtin>.len"], "util.nest_test.NestTest.testMapStructureUpTo.<lambda3>": [], "util.nest_test.NestTest.testMapStructureUpTo.<lambda4>": [], "util.nest_test.NestTest.testMapStructureUpTo.<lambda5>": [], "util.nest_test.NestTest.testMapStructureUpTo.<lambda6>": [], "util.nest_test.NestTest.testGetTraverseShallowStructure": ["parameterized.TestCase.assertEqual", "util.nest.get_traverse_shallow_structure", "parameterized.TestCase.assertRaisesRegex", "util.nest.assert_shallow_structure"], "util.nest_test.NestTest.testGetTraverseShallowStructure.<lambda1>": ["<builtin>.isinstance"], "<builtin>.isinstance": [], "util.nest.get_traverse_shallow_structure": [], "util.nest_test.NestTest.testGetTraverseShallowStructure.<lambda2>": ["<builtin>.isinstance"], "util.nest_test.NestTest.testGetTraverseShallowStructure.<lambda3>": [], "util.nest_test.NestTest.testGetTraverseShallowStructure.<lambda4>": [], "util.nest_test.NestTest.testGetTraverseShallowStructure.<lambda5>": [], "util.nest_test.NestTest.testYieldFlatStringPaths": ["parameterized.TestCase.assertEqual", "<builtin>.list", "util.nest.yield_flat_paths"], "util.nest.yield_flat_paths": [], "util.nest_test.NestTest.testFlattenWithStringPaths": ["parameterized.TestCase.assertEqual", "util.nest.flatten_with_joined_string_paths"], "util.nest.flatten_with_joined_string_paths": [], "util.nest_test.NestTest.testFlattenWithTuplePaths": ["parameterized.TestCase.assertEqual", "util.nest.flatten_with_tuple_paths"], "testing.parameterized.named_parameters": [], "util.nest_test.NestTest.testMapWithPathsCompatibleStructures": ["parameterized.TestCase.assertEqual", "util.nest.map_structure_with_paths"], "util.nest_test.NestTest.testMapWithPathsCompatibleStructures.format_sum": ["<builtin>.sum"], "<builtin>.sum": [], "util.nest.map_structure_with_paths": [], "util.nest_test.NestTest.testMapWithPathsIncompatibleStructures": ["parameterized.TestCase.assertRaises", "util.nest.map_structure_with_paths"], "util.nest_test.NestTest.testMapWithPathsIncompatibleStructures.<lambda1>": [], "util.nest_test.NestTest.testMapWithTuplePathsCompatibleStructures": ["parameterized.TestCase.assertEqual", "util.nest.map_structure_with_tuple_paths"], "util.nest_test.NestTest.testMapWithTuplePathsCompatibleStructures.path_and_sum": ["<builtin>.sum"], "util.nest.map_structure_with_tuple_paths": [], "util.nest_test.NestTest.testMapWithTuplePathsIncompatibleStructures": ["parameterized.TestCase.assertRaises", "util.nest.map_structure_with_tuple_paths"], "util.nest_test.NestTest.testMapWithTuplePathsIncompatibleStructures.<lambda1>": [], "util.nest_test.NestTest.testFlattenCustomSequenceThatRaisesException": ["collections.Sequence.__init__", "parameterized.TestCase.assertRaisesRegex", "util.nest.flatten"], "collections.Sequence.__init__": [], "util.nest_test.NestTest.testListToTuple": ["util.nest.assert_same_structure", "util.nest.list_to_tuple"], "util.nest.list_to_tuple": [], "util.nest_test.NestTest.testInvalidCheckTypes": ["ops.array_ops.ones", "parameterized.TestCase.assertRaises", "ops.array_ops.zeros", "util.nest.assert_same_structure"], "ops.array_ops.zeros": [], "util.nest_test.NestTest.testIsNamedtuple": ["parameterized.TestCase.assertFalse", "parameterized.TestCase.assertTrue", "collections.namedtuple", "util.nest_test.NestTest.testIsNamedtuple.SomethingElseWithFields.__init__", "util.nest.is_namedtuple", "typing.NamedTuple.__init__"], "util.nest.is_namedtuple": [], "util.nest_test.NestTest.testIsNamedtuple.SubFoo.extra_method": [], "typing.NamedTuple.__init__": [], "util.nest_test.NestTest.testIsNamedtuple.SomethingElseWithFields.__init__": ["<builtin>.super"], "<builtin>.super": [], "util.nest_test.NestTest.testSameNamedtuples": ["util.nest.same_namedtuples", "parameterized.TestCase.assertFalse", "parameterized.TestCase.assertTrue", "collections.namedtuple", "typing.NamedTuple.__init__"], "util.nest.same_namedtuples": [], "util.nest_test.NestBenchmark.run_and_report": ["util.nest.assert_same_structure", "test.Benchmark.report_benchmark", "time.time", "six.moves.xrange"], "six.moves.xrange": [], "time.time": [], "test.Benchmark.report_benchmark": [], "util.nest_test.NestBenchmark.benchmark_assert_structure": ["util.nest_test.NestBenchmark.run_and_report"], "platform.test.main": []}