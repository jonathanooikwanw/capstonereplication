{"kernel_tests.sparse_conditional_accumulator_test": ["platform.test.main"], "kernel_tests.sparse_conditional_accumulator_test._indexedslice": ["numpy.sum", "numpy.where", "<builtin>.range", "<builtin>.tuple", "numpy.array", "framework.ops.IndexedSlices", "<builtin>.len"], "numpy.array": [], "<builtin>.len": [], "<builtin>.range": [], "<builtin>.tuple": [], "numpy.sum": [], "numpy.where": [], "framework.ops.IndexedSlices": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_indexedslices": ["test.TestCase.assertAllEqual"], "test.TestCase.assertAllEqual": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_nparray": ["kernel_tests.sparse_conditional_accumulator_test._indexedslice", "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_indexedslices"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testConstructor": ["test.TestCase.assertTrue", "framework.ops.Graph", "<builtin>.isinstance", "test.TestCase.assertProtoEquals", "ops.data_flow_ops.SparseConditionalAccumulator"], "framework.ops.Graph": [], "ops.data_flow_ops.SparseConditionalAccumulator": [], "<builtin>.isinstance": [], "test.TestCase.assertTrue": [], "test.TestCase.assertProtoEquals": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testConstructorWithInvalidArg": ["test.TestCase.assertRaises", "ops.data_flow_ops.SparseConditionalAccumulator", "framework.ops.Graph"], "test.TestCase.assertRaises": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testConstructorWithShape": ["test.TestCase.assertTrue", "framework.ops.Graph", "<builtin>.isinstance", "framework.tensor_shape.TensorShape", "test.TestCase.assertProtoEquals", "ops.data_flow_ops.SparseConditionalAccumulator"], "framework.tensor_shape.TensorShape": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest": ["framework.test_util.run_v1_only", "framework.test_util.run_deprecated_v1"], "framework.test_util.run_deprecated_v1": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorSizeEmpty": ["test.TestCase.cached_session", "ops.data_flow_ops.SparseConditionalAccumulator", "test.TestCase.assertEqual"], "test.TestCase.cached_session": [], "test.TestCase.assertEqual": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorSetGlobalStep": ["test.TestCase.cached_session", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorApplyGradFloat32": ["test.TestCase.cached_session", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "test.TestCase.assertEqual", "framework.ops.IndexedSlices"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testDtypes": ["test.TestCase.cached_session", "numpy.zeros", "numpy.arange", "<builtin>.range", "framework.tensor_shape.TensorShape", "kernel_tests.sparse_conditional_accumulator_test._indexedslice", "ops.data_flow_ops.SparseConditionalAccumulator", "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_nparray", "test.TestCase.evaluate", "<builtin>.len"], "numpy.arange": [], "numpy.zeros": [], "test.TestCase.evaluate": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorMultipleAccumulators": ["test.TestCase.cached_session", "kernel_tests.sparse_conditional_accumulator_test._indexedslice", "<builtin>.range", "framework.tensor_shape.TensorShape", "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_indexedslices", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "<builtin>.len"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorTakeGradMean": ["test.TestCase.cached_session", "test.TestCase.assertAllEqual", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "framework.ops.IndexedSlices", "test.TestCase.evaluate"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorTakeGradSum": ["test.TestCase.cached_session", "test.TestCase.assertAllEqual", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "framework.ops.IndexedSlices", "test.TestCase.evaluate"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorTakeGradInvalidReductionType": ["test.TestCase.assertRaises", "ops.data_flow_ops.SparseConditionalAccumulator"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorRepeatedTakeGrad": ["test.TestCase.cached_session", "test.TestCase.assertAllEqual", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "framework.ops.IndexedSlices", "test.TestCase.evaluate"], "framework.test_util.run_v1_only": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testParallelApplyGradMean": ["test.TestCase.cached_session", "framework.ops.get_default_graph", "test.TestCase.checkedThread", "kernel_tests.sparse_conditional_accumulator_test._indexedslice", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "<builtin>.sum", "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_nparray", "test.TestCase.evaluate", "<builtin>.len"], "framework.ops.get_default_graph": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testParallelApplyGradMean.apply_indexed_slices_grad": ["test.TestCase.evaluate"], "test.TestCase.checkedThread": [], "<builtin>.sum": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testParallelApplyGradSum": ["test.TestCase.cached_session", "framework.ops.get_default_graph", "test.TestCase.checkedThread", "kernel_tests.sparse_conditional_accumulator_test._indexedslice", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_nparray", "test.TestCase.evaluate"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testParallelApplyGradSum.apply_indexed_slices_grad": ["test.TestCase.evaluate"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testParallelTakeGrad": ["test.TestCase.cached_session", "framework.ops.get_default_graph", "test.TestCase.checkedThread", "kernel_tests.sparse_conditional_accumulator_test._indexedslice", "<builtin>.range", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_nparray", "<builtin>.len"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testParallelTakeGrad.apply_indexed_slices_grad": ["time.sleep", "test.TestCase.evaluate"], "time.sleep": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testParallelTakeGrad.take_grad": ["test.TestCase.evaluate"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorApplyAndBlockingTake": ["test.TestCase.cached_session", "framework.ops.get_default_graph", "test.TestCase.checkedThread", "kernel_tests.sparse_conditional_accumulator_test._indexedslice", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "<builtin>.sum", "numpy.array", "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._assertEqual_nparray", "<builtin>.len"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorApplyAndBlockingTake.apply_indexed_slices_grad": ["test.TestCase.evaluate"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorApplyAndBlockingTake.take_grad": ["test.TestCase.evaluate"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest._blocking_takeg": ["test.TestCase.evaluate", "test.TestCase.assertRaisesOpError"], "test.TestCase.assertRaisesOpError": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testAccumulatorCancel": ["test.TestCase.cached_session", "framework.ops.get_default_graph", "test.TestCase.checkedThread", "time.sleep", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testNonVectorIndices": ["test.TestCase.cached_session", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "test.TestCase.assertRaisesRegex"], "test.TestCase.assertRaisesRegex": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testZeroDimensionValues": ["test.TestCase.cached_session", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "test.TestCase.assertRaisesRegex"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testWrongNonEmptyInputValues": ["test.TestCase.cached_session", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "test.TestCase.assertRaisesRegex"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testDynamicNonVectorIndices": ["test.TestCase.cached_session", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "ops.array_ops.placeholder", "test.TestCase.assertRaisesRegex"], "ops.array_ops.placeholder": [], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testDynamicWrongNonEmptyInputValues": ["test.TestCase.cached_session", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "ops.array_ops.placeholder", "test.TestCase.assertRaisesRegex"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testEmptyShapeApply": ["test.TestCase.cached_session", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "test.TestCase.assertRaisesRegex"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testValidateShape": ["test.TestCase.cached_session", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "test.TestCase.evaluate", "test.TestCase.assertRaisesRegex"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testReturnShape": ["test.TestCase.cached_session", "test.TestCase.assertAllEqual", "ops.data_flow_ops.SparseConditionalAccumulator", "numpy.array", "test.TestCase.evaluate"], "kernel_tests.sparse_conditional_accumulator_test.IndexedSlicesConditionalAccumulatorTest.testApplyGradtInt32IndicesAndShape": ["test.TestCase.cached_session", "framework.constant_op.constant", "test.TestCase.assertAllEqual", "framework.tensor_shape.TensorShape", "ops.data_flow_ops.SparseConditionalAccumulator", "test.TestCase.assertEqual", "framework.ops.IndexedSlices", "test.TestCase.evaluate"], "framework.constant_op.constant": [], "platform.test.main": []}