{"tests.matrix_triangular_solve_op_test": ["platform.test.main"], "tests.matrix_triangular_solve_op_test.MakePlaceholder": ["ops.array_ops.placeholder", "framework.dtypes.as_dtype"], "framework.dtypes.as_dtype": [], "ops.array_ops.placeholder": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.float_types": ["<builtin>.super", "<builtin>.set"], "<builtin>.super": [], "<builtin>.set": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveBase": ["numpy.zeros", "xla_test.XLATestCase.assertAllClose"], "numpy.zeros": [], "xla_test.XLATestCase.assertAllClose": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolve": ["framework.test_util.matmul_without_tf32", "xla_test.XLATestCase.test_scope", "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveBase", "ops.linalg_ops.matrix_triangular_solve", "xla_test.XLATestCase.session", "numpy.tril", "tests.matrix_triangular_solve_op_test.MakePlaceholder", "numpy.triu"], "numpy.tril": [], "numpy.triu": [], "xla_test.XLATestCase.session": [], "xla_test.XLATestCase.test_scope": [], "ops.linalg_ops.matrix_triangular_solve": [], "framework.test_util.matmul_without_tf32": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveCombo": ["tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolve", "itertools.product", "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveCombo.<lambda1>"], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveCombo.<lambda1>": ["numpy.swapaxes"], "numpy.swapaxes": [], "itertools.product": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testBasic": ["numpy.random.RandomState", "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveCombo", "numpy.tril"], "numpy.random.RandomState": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testBasicNotActuallyTriangular": ["numpy.random.RandomState", "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveCombo"], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testBasicComplexDtypes": ["tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveCombo", "xla_test.XLATestCase.skipTest", "numpy.random.RandomState", "numpy.tril", "xla_test.test.is_built_with_rocm"], "xla_test.test.is_built_with_rocm": [], "xla_test.XLATestCase.skipTest": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testBatch": ["tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveCombo", "itertools.product", "numpy.eye", "numpy.random.RandomState", "numpy.tril"], "numpy.eye": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testBatchBroadcast": ["tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolveCombo", "itertools.product", "numpy.eye", "numpy.random.RandomState", "numpy.tril"], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testLarge": ["numpy.random.RandomState", "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest._VerifyTriangularSolve", "numpy.eye", "numpy.tril"], "framework.test_util.disable_mlir_bridge": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest": ["framework.test_util.run_v1_only", "framework.test_util.disable_mlir_bridge", "framework.test_util.run_v2_only"], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testNonSquareCoefficientMatrix": ["ops.linalg_ops.matrix_triangular_solve", "numpy.random.RandomState", "xla_test.XLATestCase.test_scope", "xla_test.XLATestCase.assertRaises"], "xla_test.XLATestCase.assertRaises": [], "framework.test_util.run_v2_only": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testWrongDimensionsV2": ["ops.linalg_ops.matrix_triangular_solve", "numpy.random.RandomState", "framework.constant_op.constant", "xla_test.XLATestCase.assertRaises"], "framework.constant_op.constant": [], "framework.test_util.run_v1_only": [], "tests.matrix_triangular_solve_op_test.MatrixTriangularSolveOpTest.testWrongDimensionsV1": ["ops.linalg_ops.matrix_triangular_solve", "numpy.random.RandomState", "framework.constant_op.constant", "xla_test.XLATestCase.assertRaises"], "platform.test.main": []}