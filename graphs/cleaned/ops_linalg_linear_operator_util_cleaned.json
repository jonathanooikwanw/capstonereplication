{"linalg.linear_operator_util": [], "linalg.linear_operator_util.convert_nonref_to_tensor": ["linalg.linear_operator_util.base_dtype", "<builtin>.TypeError", "linalg.linear_operator_util.dtype_name", "linalg.linear_operator_util.is_ref", "framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator_util.is_ref": ["<builtin>.hasattr", "<builtin>.isinstance"], "linalg.linear_operator_util.base_dtype": ["<builtin>.hasattr", "framework.dtypes.as_dtype"], "linalg.linear_operator_util.dtype_name": ["<builtin>.hasattr", "<builtin>.str", "framework.dtypes.as_dtype"], "<builtin>.TypeError": [], "framework.ops.convert_to_tensor_v2_with_dispatch": [], "framework.dtypes.as_dtype": [], "<builtin>.hasattr": [], "<builtin>.str": [], "linalg.linear_operator_util.check_dtype": ["<builtin>.TypeError"], "<builtin>.isinstance": [], "linalg.linear_operator_util.assert_not_ref_type": ["<builtin>.TypeError", "<builtin>.type", "linalg.linear_operator_util.is_ref"], "<builtin>.type": [], "linalg.linear_operator_util.assert_no_entries_with_modulus_zero": ["ops.math_ops.abs", "ops.check_ops.assert_less", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.ops.name_scope"], "framework.ops.name_scope": [], "ops.math_ops.abs": [], "ops.check_ops.assert_less": [], "linalg.linear_operator_util.assert_zero_imag_part": ["ops.math_ops.imag", "ops.control_flow_ops.no_op", "ops.check_ops.assert_equal", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.ops.name_scope"], "ops.control_flow_ops.no_op": [], "ops.math_ops.imag": [], "ops.check_ops.assert_equal": [], "linalg.linear_operator_util.assert_compatible_matrix_dimensions": ["ops.check_ops.assert_equal", "ops.array_ops.shape"], "ops.array_ops.shape": [], "linalg.linear_operator_util.assert_is_batch_matrix": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "linalg.linear_operator_util.shape_tensor": ["framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance"], "linalg.linear_operator_util.broadcast_matrix_batch_dims": ["<builtin>.len", "ops.array_ops.broadcast_dynamic_shape", "linalg.linear_operator_util.assert_is_batch_matrix", "ops.array_ops.shape", "<builtin>.list", "ops.check_ops.assert_proper_iterable", "ops.array_ops.broadcast_to", "<builtin>.enumerate", "ops.array_ops.concat", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.broadcast_static_shape", "framework.ops.name_scope"], "ops.check_ops.assert_proper_iterable": [], "<builtin>.list": [], "<builtin>.enumerate": [], "<builtin>.len": [], "ops.array_ops.broadcast_static_shape": [], "ops.array_ops.concat": [], "ops.array_ops.broadcast_to": [], "ops.array_ops.broadcast_dynamic_shape": [], "linalg.linear_operator_util.matrix_solve_with_broadcast": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "ops.linalg_ops.matrix_solve", "linalg.linear_operator_util._reshape_for_efficiency", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.ops.name_scope"], "linalg.linear_operator_util._reshape_for_efficiency": ["numpy.concatenate", "ops.array_ops.concat", "numpy.arange", "ops.array_ops.shape", "numpy.prod", "ops.array_ops.transpose", "ops.array_ops.matrix_transpose", "ops.array_ops.reshape"], "ops.linalg_ops.matrix_solve": [], "linalg.linear_operator_util._reshape_for_efficiency.identity": [], "numpy.prod": [], "ops.array_ops.matrix_transpose": [], "numpy.arange": [], "numpy.concatenate": [], "ops.array_ops.transpose": [], "ops.array_ops.reshape": [], "linalg.linear_operator_util._reshape_for_efficiency.reshape_inv": ["numpy.argsort", "ops.array_ops.shape", "ops.array_ops.transpose", "ops.array_ops.concat", "ops.array_ops.reshape"], "numpy.argsort": [], "linalg.linear_operator_util.use_operator_or_provided_hint_unless_contradicting": ["<builtin>.getattr", "<builtin>.ValueError"], "<builtin>.getattr": [], "linalg.linear_operator_util.arg_is_blockwise": ["<builtin>.len", "<builtin>.any", "util.nest.is_nested", "<builtin>.ValueError", "<builtin>.all", "<builtin>.sum", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance", "<builtin>.zip"], "util.nest.is_nested": [], "<builtin>.any": [], "<builtin>.all": [], "<builtin>.zip": [], "<builtin>.sum": [], "linalg.linear_operator_util.split_arg_into_blocks": ["<builtin>.any", "ops.array_ops.split"], "ops.array_ops.split": []}