{"util.tf_stack": ["<builtin>.frozenset", "collections.defaultdict"], "util.tf_stack.<lambda1>": ["util.tf_stack.StackTraceMapper.__init__"], "util.tf_stack.StackTraceMapper.__init__": ["util._tf_stack.PyBindSourceMap"], "collections.defaultdict": [], "util.tf_stack.<lambda2>": ["util.tf_stack.StackTraceFilter.__init__"], "util.tf_stack.StackTraceFilter.__init__": ["util._tf_stack.PyBindFileSet"], "util.tf_stack.StackTraceTransform.__enter__": ["threading.get_ident", "thread.get_ident", "util.tf_stack.StackTraceTransform.update"], "threading.get_ident": [], "thread.get_ident": [], "util.tf_stack.StackTraceTransform.update": ["<builtin>.NotImplementedError"], "util.tf_stack.StackTraceTransform.__exit__": [], "<builtin>.NotImplementedError": [], "util._tf_stack.PyBindSourceMap": [], "util.tf_stack.StackTraceMapper.update": ["util.tf_stack.SentinelMapper.get_effective_source_map", "util.tf_stack.StackTraceMapper.get_effective_source_map", "<builtin>.tuple"], "util.tf_stack.SentinelMapper.get_effective_source_map": [], "util.tf_stack.StackTraceMapper.get_effective_source_map": ["<builtin>.NotImplementedError"], "<builtin>.tuple": [], "util._tf_stack.PyBindFileSet": [], "util.tf_stack.StackTraceFilter.update": ["<builtin>.set", "util.tf_stack.StackTraceFilter.get_filtered_filenames", "util.tf_stack.SentinelFilter.get_filtered_filenames"], "util.tf_stack.StackTraceFilter.get_filtered_filenames": ["<builtin>.NotImplementedError"], "util.tf_stack.SentinelFilter.get_filtered_filenames": [], "<builtin>.set": [], "<builtin>.frozenset": [], "util.tf_stack.CurrentModuleFilter.__init__": ["inspect.currentframe", "<builtin>.super", "inspect.getsourcefile"], "<builtin>.super": [], "inspect.currentframe": [], "inspect.getsourcefile": [], "util.tf_stack.CurrentModuleFilter.get_filtered_filenames": ["<builtin>.frozenset"], "util.tf_stack.extract_stack": ["threading.get_ident", "thread.get_ident", "util._tf_stack.extract_stack"], "util._tf_stack.extract_stack": [], "util.tf_stack.extract_stack_for_node": ["util._tf_stack.extract_stack_for_node", "threading.get_ident", "thread.get_ident"], "util._tf_stack.extract_stack_for_node": []}