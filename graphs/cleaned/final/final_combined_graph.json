{"compatibility.convert_binary_to_cc_source": ["compatibility.convert_binary_to_cc_source.main"], "compatibility.convert_binary_to_cc_source._convert_bytes_to_cc_source": ["<builtin>.bytearray", "<builtin>.len", "datetime.date.today"], "<builtin>.bytearray": [], "<builtin>.len": [], "datetime.date.today": [], "compatibility.convert_binary_to_cc_source.main": ["<builtin>.open", "compatibility.convert_binary_to_cc_source._convert_bytes_to_cc_source", "argparse.ArgumentParser"], "argparse.ArgumentParser": [], "<builtin>.open": [], "mini_benchmark.copy_associated_files": ["mini_benchmark.copy_associated_files.main", "<builtin>.exit", "sys.stderr.write", "argparse.ArgumentParser"], "mini_benchmark.copy_associated_files.main": ["zipfile.is_zipfile", "<builtin>.open", "zipfile.ZipFile"], "zipfile.is_zipfile": [], "zipfile.ZipFile": [], "sys.stderr.write": [], "<builtin>.exit": [], "generator.create_python_api": ["generator.create_python_api.main"], "generator.create_python_api.get_canonical_import": ["<builtin>.sorted"], "generator.create_python_api.get_canonical_import.<lambda1>": [], "<builtin>.sorted": [], "generator.create_python_api._ModuleInitCodeBuilder.__init__": ["collections.defaultdict", "<builtin>.set"], "generator.create_python_api._ModuleInitCodeBuilder.__init__.<lambda1>": ["collections.defaultdict"], "collections.defaultdict": [], "<builtin>.set": [], "generator.create_python_api._ModuleInitCodeBuilder._check_already_imported": [], "generator.create_python_api._ModuleInitCodeBuilder.add_import": ["<builtin>.id", "<builtin>.hasattr", "generator.create_python_api._ModuleInitCodeBuilder._check_already_imported", "<builtin>.int", "generator.create_python_api._ModuleInitCodeBuilder.format_import"], "generator.create_python_api._ModuleInitCodeBuilder.format_import": [], "<builtin>.id": [], "<builtin>.hasattr": [], "<builtin>.int": [], "generator.create_python_api._ModuleInitCodeBuilder._import_submodules": ["generator.create_python_api._ModuleInitCodeBuilder.add_import", "<builtin>.set", "<builtin>.range", "<builtin>.len"], "<builtin>.range": [], "generator.create_python_api._ModuleInitCodeBuilder.build": ["generator.create_python_api._ModuleInitCodeBuilder._import_submodules", "generator.create_python_api.get_canonical_import", "<builtin>.sorted"], "generator.create_python_api._ModuleInitCodeBuilder.get_destination_modules": ["<builtin>.set"], "generator.create_python_api._ModuleInitCodeBuilder.copy_imports": [], "generator.create_python_api.add_nested_compat_imports": ["generator.create_python_api._ModuleInitCodeBuilder.copy_imports", "generator.create_python_api._ModuleInitCodeBuilder.add_import", "<builtin>.tuple", "generator.create_python_api._ModuleInitCodeBuilder.get_destination_modules", "<builtin>.len"], "<builtin>.tuple": [], "generator.create_python_api._get_name_and_module": [], "generator.create_python_api._join_modules": [], "generator.create_python_api.add_imports_for_symbol": ["generator.create_python_api._ModuleInitCodeBuilder.add_import", "<builtin>.getattr", "<builtin>.hasattr", "generator.create_python_api._get_name_and_module", "generator.create_python_api._join_modules"], "<builtin>.getattr": [], "generator.create_python_api.get_api_init_text": ["generator.create_python_api._ModuleInitCodeBuilder.__init__", "generator.create_python_api.add_imports_for_symbol", "<builtin>.any", "generator.create_python_api.add_nested_compat_imports", "<builtin>.getattr", "generator.create_python_api._ModuleInitCodeBuilder.build", "<builtin>.hasattr", "<builtin>.dir", "util.tf_decorator.unwrap", "generator.create_python_api.get_api_init_text.in_packages", "sys.modules.values", "<builtin>.list"], "generator.create_python_api.get_api_init_text.in_packages": ["<builtin>.any"], "<builtin>.any": [], "sys.modules.values": [], "<builtin>.list": [], "<builtin>.dir": [], "util.tf_decorator.unwrap": ["<builtin>.getattr", "util.tf_decorator._has_tf_decorator_attr", "<builtin>.isinstance", "<builtin>.hasattr"], "generator.create_python_api.get_module": ["<builtin>.len"], "generator.create_python_api.get_module_docstring": ["generator.doc_srcs.get_doc_sources", "<builtin>.len"], "generator.doc_srcs.get_doc_sources": [], "generator.create_python_api.create_api_files": ["generator.create_python_api.get_module_docstring", "<builtin>.ValueError", "<builtin>.zip", "<builtin>.sorted", "os.path.dirname", "os.makedirs", "generator.create_python_api.get_module", "<builtin>.open", "os.path.isdir", "os.path.normpath", "generator.create_python_api.get_api_init_text"], "os.path.dirname": [], "os.path.normpath": [], "os.path.isdir": [], "os.makedirs": [], "<builtin>.zip": [], "<builtin>.ValueError": [], "generator.create_python_api.main": ["<builtin>.ValueError", "generator.create_python_api.create_api_files", "<builtin>.open", "argparse.ArgumentParser", "importlib.import_module", "<builtin>.len", "tf_export.API_ATTRS.keys"], "tf_export.API_ATTRS.keys": [], "importlib.import_module": [], "generator.doc_srcs": ["generator.doc_srcs.DocSource.__init__"], "generator.doc_srcs.DocSource.__init__": ["<builtin>.ValueError"], "lib.python_object_to_proto_visitor": [], "lib.python_object_to_proto_visitor._SkipMember": ["<builtin>.issubclass", "<builtin>.isinstance"], "<builtin>.isinstance": [], "<builtin>.issubclass": [], "lib.python_object_to_proto_visitor._NormalizeType": [], "lib.python_object_to_proto_visitor._NormalizeIsInstance": [], "lib.python_object_to_proto_visitor._SanitizedArgSpec": ["<builtin>.str", "<builtin>.getattr", "util.tf_inspect.getargspec"], "util.tf_inspect.getargspec": ["inspect.getargspec", "<builtin>.next", "util.tf_inspect._get_argspec_for_partial", "<builtin>.type", "util.tf_decorator.unwrap", "<builtin>.isinstance"], "<builtin>.str": [], "lib.python_object_to_proto_visitor._SanitizedMRO": ["util.tf_inspect.getmro", "<builtin>.str", "lib.python_object_to_proto_visitor._NormalizeType"], "util.tf_inspect.getmro": ["inspect.getmro"], "lib.python_object_to_proto_visitor._IsProtoClass": ["<builtin>.issubclass", "<builtin>.isinstance"], "lib.python_object_to_proto_visitor.PythonObjectToProtoVisitor.__init__": [], "lib.python_object_to_proto_visitor.PythonObjectToProtoVisitor.GetProtos": [], "lib.python_object_to_proto_visitor.PythonObjectToProtoVisitor.__call__": ["lib.python_object_to_proto_visitor._SanitizedMRO", "platform.tf_logging.error", "lib.api_objects_pb2.TFAPIClass", "util.tf_inspect.ismodule", "lib.api_objects_pb2.TFAPIObject", "lib.api_objects_pb2.TFAPIModule", "util.tf_inspect.isclass", "lib.python_object_to_proto_visitor.PythonObjectToProtoVisitor.__call__._AddMember", "lib.python_object_to_proto_visitor._IsProtoClass", "lib.api_objects_pb2.TFAPIProto", "util.tf_decorator.unwrap", "lib.python_object_to_proto_visitor._NormalizeIsInstance"], "lib.python_object_to_proto_visitor.PythonObjectToProtoVisitor.__call__._AddMember": ["util.tf_inspect.isroutine", "<builtin>.hasattr", "<builtin>.type", "<builtin>.str", "lib.python_object_to_proto_visitor._SkipMember", "six.ensure_str", "<builtin>.isinstance", "util.tf_inspect.ismodule", "lib.python_object_to_proto_visitor._NormalizeType", "util.tf_decorator.unwrap", "lib.python_object_to_proto_visitor._SanitizedArgSpec"], "six.ensure_str": [], "util.tf_inspect.isroutine": ["inspect.isroutine", "util.tf_decorator.unwrap"], "util.tf_inspect.ismodule": ["util.tf_decorator.unwrap", "inspect.ismodule"], "<builtin>.type": [], "lib.api_objects_pb2.TFAPIModule": [], "lib.api_objects_pb2.TFAPIObject": [], "lib.api_objects_pb2.TFAPIProto": [], "util.tf_inspect.isclass": ["inspect.isclass", "util.tf_decorator.unwrap"], "lib.api_objects_pb2.TFAPIClass": [], "platform.tf_logging.error": ["platform.tf_logging.get_logger"], "converters.asserts": [], "converters.asserts.AssertTransformer.visit_Assert": ["<builtin>.NotImplementedError", "gast.Constant", "<builtin>.isinstance", "converter.Base.generic_visit", "pyct.templates.replace"], "converter.Base.generic_visit": [], "gast.Constant": [], "pyct.templates.replace": ["<builtin>.type", "pyct.templates.ReplaceTransformer.__init__", "pyct.parser.parse", "pyct.templates._convert_to_ast", "textwrap.dedent", "pyct.qual_names.resolve", "<builtin>.ValueError", "gast.NodeTransformer.visit", "<builtin>.isinstance"], "<builtin>.NotImplementedError": [], "converters.asserts.transform": ["converter.Base.visit", "converter.Base.__init__"], "converter.Base.__init__": [], "converter.Base.visit": [], "converters.break_statements": [], "converters.break_statements._Break.__init__": [], "converters.break_statements._Break.__repr__": [], "converters.break_statements.BreakTransformer.visit_Break": ["pyct.templates.replace"], "converters.break_statements.BreakTransformer._guard_if_present": ["pyct.templates.replace"], "converters.break_statements.BreakTransformer._process_body": ["converter.Base.visit_block"], "converter.Base.visit_block": [], "converters.break_statements.BreakTransformer.visit_While": ["pyct.anno.getanno", "converter.Base.visit_block", "pyct.anno.copyanno", "ctx.namer.new_symbol", "converters.break_statements.BreakTransformer._guard_if_present", "converters.break_statements.BreakTransformer._process_body", "converter.Base.visit", "pyct.templates.replace"], "pyct.anno.getanno": ["<builtin>.getattr", "<builtin>.hasattr"], "ctx.namer.new_symbol": [], "pyct.anno.copyanno": ["pyct.anno.setanno", "pyct.anno.hasanno", "pyct.anno.getanno"], "converters.break_statements.BreakTransformer.visit_For": ["pyct.anno.getanno", "converter.Base.visit_block", "pyct.anno.copyanno", "pyct.anno.setanno", "pyct.templates.replace_as_expression", "ctx.namer.new_symbol", "converters.break_statements.BreakTransformer._guard_if_present", "converters.break_statements.BreakTransformer._process_body", "converter.Base.visit", "pyct.templates.replace"], "pyct.templates.replace_as_expression": ["<builtin>.ValueError", "<builtin>.isinstance", "pyct.templates.replace", "<builtin>.len"], "pyct.anno.setanno": ["<builtin>.getattr", "<builtin>.setattr"], "converters.break_statements.transform": ["converter.Base.__init__", "static_analysis.activity.resolve", "converter.Base.visit", "pyct.qual_names.resolve"], "pyct.qual_names.resolve": ["gast.NodeTransformer.__init__", "gast.NodeTransformer.visit"], "static_analysis.activity.resolve": ["static_analysis.activity.ActivityAnalyzer.__init__", "transformer.Base.visit"], "converters.call_trees": [], "converters.call_trees._Function.__init__": [], "converters.call_trees._ArgTemplateBuilder.__init__": [], "converters.call_trees._ArgTemplateBuilder._consume_args": ["gast.Load", "gast.Tuple"], "gast.Load": [], "gast.Tuple": [], "converters.call_trees._ArgTemplateBuilder.add_arg": [], "converters.call_trees._ArgTemplateBuilder.add_stararg": ["gast.Call", "converters.call_trees._ArgTemplateBuilder._consume_args", "gast.Load", "gast.Name"], "gast.Name": [], "gast.Call": [], "converters.call_trees._ArgTemplateBuilder.finalize": ["converters.call_trees._ArgTemplateBuilder._consume_args"], "converters.call_trees._ArgTemplateBuilder.to_ast": ["gast.Load", "gast.Tuple", "<builtin>.range", "gast.BinOp", "<builtin>.len", "gast.Add"], "gast.Add": [], "gast.BinOp": [], "converters.call_trees.CallTreeTransformer.visit_Lambda": ["pyct.anno.hasanno", "converter.Base.generic_visit", "pyct.anno.getanno"], "pyct.anno.hasanno": ["<builtin>.getattr", "<builtin>.hasattr"], "converters.call_trees.CallTreeTransformer.visit_FunctionDef": ["pyct.anno.getanno", "pyct.anno.hasanno", "converter.Base.visit_block", "<builtin>.enumerate", "converter.Base.visit"], "<builtin>.enumerate": [], "converters.call_trees.CallTreeTransformer.visit_With": ["converter.Base.visit_block"], "converters.call_trees.CallTreeTransformer._args_to_tuple": ["<builtin>.isinstance", "converters.call_trees._ArgTemplateBuilder.to_ast", "converters.call_trees._ArgTemplateBuilder.add_arg", "converters.call_trees._ArgTemplateBuilder.__init__", "converters.call_trees._ArgTemplateBuilder.finalize", "converters.call_trees._ArgTemplateBuilder.add_stararg"], "converters.call_trees.CallTreeTransformer._kwargs_to_dict": ["gast.Call", "gast.Load", "pyct.parser.parse_expression", "gast.Name"], "pyct.parser.parse_expression": ["<builtin>.isinstance", "pyct.parser.parse", "<builtin>.ValueError"], "converters.call_trees.CallTreeTransformer.visit_Call": ["pyct.templates.replace_as_expression", "converter.Base.generic_visit", "pyct.anno.getanno", "converters.call_trees.CallTreeTransformer._kwargs_to_dict", "converters.call_trees.CallTreeTransformer._args_to_tuple", "utils.ag_logging.warn", "<builtin>.str", "user.options.uses"], "utils.ag_logging.warn": ["sys.stdout.flush", "utils.ag_logging._output_to_stdout", "platform.tf_logging.warning"], "user.options.uses": [], "converters.call_trees.transform": ["converter.Base.visit", "pyct.qual_names.resolve", "converter.Base.__init__"], "converters.conditional_expressions": [], "converters.conditional_expressions.ConditionalExpressionTransformer.visit_IfExp": ["gast.Constant", "pyct.templates.replace_as_expression", "pyct.parser.unparse"], "pyct.parser.unparse": ["<builtin>.isinstance", "ast.unparse", "gast.gast_to_ast", "ast.fix_missing_locations"], "converters.conditional_expressions.transform": ["converter.Base.__init__", "converter.Base.visit"], "converters.continue_statements": [], "converters.continue_statements._Continue.__init__": [], "converters.continue_statements._Continue.__repr__": [], "converters.continue_statements._Block.__init__": [], "converters.continue_statements.ContinueCanonicalizationTransformer.visit_Continue": ["pyct.templates.replace", "<builtin>.reversed"], "<builtin>.reversed": [], "converters.continue_statements.ContinueCanonicalizationTransformer._postprocess_statement": ["pyct.templates.replace"], "converters.continue_statements.ContinueCanonicalizationTransformer._visit_loop_body": ["converter.Base.visit_block", "ctx.namer.new_symbol", "pyct.anno.getanno", "pyct.templates.replace"], "converters.continue_statements.ContinueCanonicalizationTransformer._visit_non_loop_body": ["converter.Base.visit_block"], "converters.continue_statements.ContinueCanonicalizationTransformer.visit_While": ["converter.Base.visit", "converters.continue_statements.ContinueCanonicalizationTransformer._visit_non_loop_body", "converters.continue_statements.ContinueCanonicalizationTransformer._visit_loop_body"], "converters.continue_statements.ContinueCanonicalizationTransformer.visit_For": ["converter.Base.generic_visit", "converters.continue_statements.ContinueCanonicalizationTransformer._visit_non_loop_body", "converters.continue_statements.ContinueCanonicalizationTransformer._visit_loop_body"], "converters.continue_statements.ContinueCanonicalizationTransformer.visit_If": ["converters.continue_statements.ContinueCanonicalizationTransformer._visit_non_loop_body"], "converters.continue_statements.ContinueCanonicalizationTransformer.visit_With": ["converter.Base.visit_block", "converters.continue_statements.ContinueCanonicalizationTransformer._visit_non_loop_body"], "converters.continue_statements.ContinueCanonicalizationTransformer.visit_Try": ["converter.Base.visit_block", "converters.continue_statements.ContinueCanonicalizationTransformer._visit_non_loop_body"], "converters.continue_statements.ContinueCanonicalizationTransformer.visit_ExceptHandler": ["converters.continue_statements.ContinueCanonicalizationTransformer._visit_non_loop_body"], "converters.continue_statements.transform": ["converter.Base.visit", "static_analysis.activity.resolve", "converter.Base.__init__", "pyct.qual_names.resolve"], "converters.control_flow": [], "converters.control_flow.ControlFlowTransformer.visit_Lambda": ["pyct.anno.getanno", "converter.Base.generic_visit"], "converters.control_flow.ControlFlowTransformer.visit_FunctionDef": ["pyct.anno.getanno", "converter.Base.generic_visit"], "converters.control_flow.ControlFlowTransformer._create_nonlocal_declarations": ["<builtin>.set", "<builtin>.str", "gast.Nonlocal", "gast.Global"], "gast.Global": [], "gast.Nonlocal": [], "converters.control_flow.ControlFlowTransformer._create_state_functions": ["<builtin>.str", "pyct.templates.replace_as_expression", "pyct.templates.replace", "<builtin>.tuple", "gast.Constant"], "converters.control_flow.ControlFlowTransformer._create_loop_options": ["pyct.anno.hasanno", "gast.Dict", "<builtin>.list", "pyct.anno.getanno", "<builtin>.zip", "gast.Constant"], "gast.Dict": [], "converters.control_flow.ControlFlowTransformer._create_undefined_assigns": ["gast.Constant", "pyct.templates.replace"], "converters.control_flow.ControlFlowTransformer._get_block_basic_vars": ["<builtin>.frozenset"], "<builtin>.frozenset": [], "converters.control_flow.ControlFlowTransformer._get_block_composite_vars": ["<builtin>.all", "<builtin>.frozenset", "<builtin>.tuple"], "<builtin>.all": [], "converters.control_flow.ControlFlowTransformer._get_block_vars": ["<builtin>.len", "converters.control_flow.ControlFlowTransformer._get_block_composite_vars", "pyct.anno.getanno", "<builtin>.sorted", "<builtin>.tuple", "converters.control_flow.ControlFlowTransformer._get_block_basic_vars"], "converters.control_flow.ControlFlowTransformer._get_block_vars.<lambda1>": [], "converters.control_flow.ControlFlowTransformer.visit_If": ["ctx.namer.new_symbol", "<builtin>.str", "gast.Pass", "converter.Base.generic_visit", "converters.control_flow.ControlFlowTransformer._create_undefined_assigns", "pyct.templates.replace", "pyct.anno.getanno", "pyct.origin_info.copy_origin", "<builtin>.tuple", "converters.control_flow.ControlFlowTransformer._get_block_vars", "converters.control_flow.ControlFlowTransformer._create_state_functions", "gast.Constant", "converters.control_flow.ControlFlowTransformer._create_nonlocal_declarations"], "gast.Pass": [], "pyct.origin_info.copy_origin": ["gast.walk", "Basic.ORIGIN.of", "pyct.anno.setanno", "<builtin>.isinstance"], "converters.control_flow.ControlFlowTransformer.visit_While": ["ctx.namer.new_symbol", "<builtin>.str", "converter.Base.generic_visit", "converters.control_flow.ControlFlowTransformer._create_undefined_assigns", "pyct.templates.replace", "pyct.anno.getanno", "pyct.origin_info.copy_origin", "converters.control_flow.ControlFlowTransformer._create_loop_options", "<builtin>.tuple", "converters.control_flow.ControlFlowTransformer._get_block_vars", "converters.control_flow.ControlFlowTransformer._create_state_functions", "gast.Constant", "converters.control_flow.ControlFlowTransformer._create_nonlocal_declarations"], "converters.control_flow.ControlFlowTransformer.visit_For": ["ctx.namer.new_symbol", "<builtin>.str", "pyct.anno.hasanno", "pyct.parser.parse_expression", "converter.Base.generic_visit", "converters.control_flow.ControlFlowTransformer._create_undefined_assigns", "pyct.templates.replace", "pyct.anno.getanno", "pyct.parser.unparse", "pyct.origin_info.copy_origin", "converters.control_flow.ControlFlowTransformer._create_loop_options", "<builtin>.tuple", "converters.control_flow.ControlFlowTransformer._get_block_vars", "converters.control_flow.ControlFlowTransformer._create_state_functions", "gast.Constant", "converters.control_flow.ControlFlowTransformer._create_nonlocal_declarations"], "converters.control_flow.AnnotatedDef.__init__": ["<builtin>.super"], "<builtin>.super": [], "converters.control_flow.transform": ["pyct.cfg.build", "static_analysis.activity.resolve", "pyct.qual_names.resolve", "converter.Base.__init__", "static_analysis.liveness.resolve", "static_analysis.reaching_definitions.resolve", "converter.Base.visit", "static_analysis.reaching_fndefs.resolve"], "pyct.cfg.build": ["gast.NodeVisitor.visit", "pyct.cfg.AstToCfg.__init__"], "static_analysis.reaching_definitions.resolve": ["static_analysis.reaching_definitions.TreeAnnotator.__init__", "static_analysis.reaching_definitions.TreeAnnotator.visit"], "static_analysis.reaching_fndefs.resolve": ["static_analysis.reaching_fndefs.TreeAnnotator.visit", "static_analysis.reaching_fndefs.TreeAnnotator.__init__"], "static_analysis.liveness.resolve": ["static_analysis.liveness.TreeAnnotator.__init__", "static_analysis.liveness.TreeAnnotator.visit"], "converters.control_flow_deprecated_py2": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_cond_branch": ["<builtin>.len", "gast.Constant", "<builtin>.str", "<builtin>.zip", "pyct.templates.replace"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_cond_expr": ["pyct.templates.replace"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._fmt_symbols": ["<builtin>.map"], "<builtin>.map": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._determine_aliased_symbols": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_state_functions": ["<builtin>.tuple", "pyct.templates.replace"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_loop_options": ["pyct.anno.getanno", "gast.Constant", "pyct.anno.hasanno", "gast.Dict", "<builtin>.zip", "<builtin>.list"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_undefined_assigns": ["gast.Constant", "pyct.templates.replace"], "converters.control_flow_deprecated_py2.ControlFlowTransformer.visit_If": ["<builtin>.len", "pyct.anno.getanno", "<builtin>.set", "converter.Base.generic_visit", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_cond_expr", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_cond_branch", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_undefined_assigns", "gast.Tuple", "ctx.namer.new_symbol", "<builtin>.str", "pyct.templates.replace_as_expression", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_state_functions", "gast.Constant", "<builtin>.zip", "<builtin>.dict", "<builtin>.tuple", "pyct.ast_util.rename_symbols", "converter.Base.create_assignment", "converters.control_flow_deprecated_py2.ControlFlowTransformer._determine_aliased_symbols"], "<builtin>.dict": [], "pyct.ast_util.rename_symbols": ["<builtin>.isinstance", "gast.NodeTransformer.visit", "<builtin>.tuple", "pyct.ast_util.SymbolRenamer.__init__"], "converter.Base.create_assignment": [], "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_basic_loop_vars": ["<builtin>.frozenset"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_composite_loop_vars": ["<builtin>.tuple", "<builtin>.all", "<builtin>.frozenset"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_loop_vars": ["converters.control_flow_deprecated_py2.ControlFlowTransformer._get_composite_loop_vars", "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_basic_loop_vars", "pyct.anno.getanno"], "converters.control_flow_deprecated_py2.ControlFlowTransformer._loop_var_constructs": ["gast.Tuple", "<builtin>.tuple", "<builtin>.len"], "converters.control_flow_deprecated_py2.ControlFlowTransformer.visit_While": ["converters.control_flow_deprecated_py2.ControlFlowTransformer._loop_var_constructs", "<builtin>.tuple", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_undefined_assigns", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_state_functions", "pyct.anno.getanno", "gast.Constant", "converter.Base.generic_visit", "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_loop_vars", "ctx.namer.new_symbol", "<builtin>.str", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_loop_options", "pyct.templates.replace"], "converters.control_flow_deprecated_py2.ControlFlowTransformer.visit_For": ["converters.control_flow_deprecated_py2.ControlFlowTransformer._loop_var_constructs", "<builtin>.tuple", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_undefined_assigns", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_state_functions", "pyct.anno.getanno", "gast.Constant", "pyct.anno.hasanno", "converter.Base.generic_visit", "converters.control_flow_deprecated_py2.ControlFlowTransformer._get_loop_vars", "ctx.namer.new_symbol", "<builtin>.str", "pyct.templates.replace", "converters.control_flow_deprecated_py2.ControlFlowTransformer._create_loop_options", "pyct.parser.parse_expression"], "converters.control_flow_deprecated_py2.AnnotatedDef.__init__": ["<builtin>.super"], "converters.control_flow_deprecated_py2.transform": ["converter.Base.visit", "static_analysis.reaching_definitions.resolve", "static_analysis.liveness.resolve", "pyct.qual_names.resolve", "converter.Base.__init__", "pyct.cfg.build", "static_analysis.reaching_fndefs.resolve", "static_analysis.activity.resolve"], "converters.directives": [], "converters.directives._LoopScope.__init__": [], "converters.directives._map_args": ["<builtin>.zip", "<builtin>.ValueError", "util.tf_inspect.getcallargs"], "util.tf_inspect.getcallargs": ["<builtin>.zip", "util.tf_inspect.getfullargspec", "<builtin>.dict", "<builtin>.getattr", "util.tf_inspect.ismethod", "<builtin>.len"], "converters.directives.DirectivesTransformer._process_symbol_directive": ["pyct.anno.getanno", "<builtin>.len", "converters.directives._map_args", "<builtin>.ValueError"], "converters.directives.DirectivesTransformer._process_statement_directive": ["pyct.anno.getanno", "pyct.anno.setanno", "converters.directives._map_args", "<builtin>.ValueError"], "converters.directives.DirectivesTransformer.visit_Name": ["pyct.anno.setanno", "<builtin>.isinstance", "<builtin>.bool", "pyct.anno.getanno", "converter.Base.generic_visit"], "<builtin>.bool": [], "converters.directives.DirectivesTransformer.visit_Attribute": ["pyct.anno.setanno", "pyct.anno.getanno", "converter.Base.generic_visit", "<builtin>.hasattr", "inspect.ismodule", "<builtin>.getattr"], "inspect.ismodule": [], "converters.directives.DirectivesTransformer.visit_Assign": ["converter.Base.generic_visit"], "converters.directives.DirectivesTransformer.visit_AugAssign": ["converter.Base.generic_visit"], "converters.directives.DirectivesTransformer.visit_Expr": ["<builtin>.isinstance", "pyct.anno.getanno", "converter.Base.generic_visit", "converters.directives.DirectivesTransformer._process_symbol_directive", "converters.directives.DirectivesTransformer._process_statement_directive"], "converters.directives.DirectivesTransformer._track_and_visit_loop": ["converter.Base.generic_visit", "gast.Pass"], "converters.directives.DirectivesTransformer.visit_While": ["converters.directives.DirectivesTransformer._track_and_visit_loop"], "converters.directives.DirectivesTransformer.visit_For": ["converters.directives.DirectivesTransformer._track_and_visit_loop"], "converters.directives.transform": ["converter.Base.__init__", "converter.Base.visit"], "converters.functions": [], "converters.functions._Function.__init__": [], "converters.functions.FunctionTransformer._function_scope_options": ["user.options.call_options"], "user.options.call_options": [], "converters.functions.FunctionTransformer.visit_Lambda": ["pyct.anno.setanno", "gast.Constant", "ctx.namer.new_symbol", "converter.Base.generic_visit", "converters.functions.FunctionTransformer._function_scope_options", "pyct.templates.replace_as_expression", "user.options.to_ast", "pyct.anno.getanno"], "user.options.to_ast": [], "converters.functions.FunctionTransformer.visit_FunctionDef": ["pyct.anno.setanno", "gast.Constant", "ctx.namer.new_symbol", "pyct.parser.parse_expression", "converter.Base.generic_visit", "converters.functions.FunctionTransformer._function_scope_options", "<builtin>.isinstance", "pyct.templates.replace", "user.options.to_ast", "pyct.anno.getanno"], "converters.functions.transform": ["converter.Base.visit", "converter.Base.__init__", "pyct.qual_names.resolve", "static_analysis.activity.resolve"], "converters.lists": [], "converters.lists._Statement.__init__": [], "converters.lists.ListTransformer.visit_List": ["converter.Base.generic_visit", "pyct.templates.replace_as_expression"], "converters.lists.ListTransformer._replace_append_call": ["<builtin>.len", "<builtin>.isinstance", "pyct.templates.replace"], "converters.lists.ListTransformer._replace_pop_call": ["ctx.namer.new_symbol", "pyct.anno.getanno", "pyct.templates.replace_as_expression", "<builtin>.isinstance", "pyct.anno.hasanno"], "converters.lists.ListTransformer._replace_stack_call": ["<builtin>.len", "converter.Base.get_definition_directive", "pyct.templates.replace_as_expression"], "converter.Base.get_definition_directive": [], "converters.lists.ListTransformer.visit_Call": ["<builtin>.len", "converters.lists.ListTransformer._replace_stack_call", "converter.Base.generic_visit", "converters.lists.ListTransformer._replace_append_call", "converters.lists.ListTransformer._replace_pop_call", "<builtin>.isinstance"], "converters.lists.ListTransformer._generate_pop_operation": ["pyct.parser.parse_expression", "converter.Base.get_definition_directive", "pyct.templates.replace_as_expression", "<builtin>.isinstance", "pyct.templates.replace"], "converters.lists.ListTransformer._postprocess_statement": ["converters.lists.ListTransformer._generate_pop_operation"], "converters.lists.ListTransformer._visit_and_process_block": ["converter.Base.visit_block"], "converters.lists.ListTransformer.visit_FunctionDef": ["converter.Base.generic_visit", "converter.Base.visit_block", "converters.lists.ListTransformer._visit_and_process_block"], "converters.lists.ListTransformer.visit_For": ["converter.Base.visit", "converters.lists.ListTransformer._visit_and_process_block"], "converters.lists.ListTransformer.visit_While": ["converter.Base.visit", "converters.lists.ListTransformer._visit_and_process_block"], "converters.lists.ListTransformer.visit_If": ["converter.Base.visit", "converters.lists.ListTransformer._visit_and_process_block"], "converters.lists.ListTransformer.visit_With": ["converter.Base.visit_block", "converters.lists.ListTransformer._visit_and_process_block"], "converters.lists.transform": ["converter.Base.visit", "pyct.qual_names.resolve", "static_analysis.activity.resolve", "converter.Base.__init__"], "converters.list_comprehensions": [], "converters.list_comprehensions.ListCompTransformer.visit_Assign": ["<builtin>.isinstance", "<builtin>.len", "pyct.templates.replace", "converter.Base.generic_visit", "<builtin>.NotImplementedError", "<builtin>.reversed"], "converters.list_comprehensions.transform": ["converter.Base.visit", "converter.Base.__init__"], "converters.logical_expressions": [], "converters.logical_expressions.LogicalExpressionTransformer._overload_of": ["<builtin>.type", "user.options.uses"], "converters.logical_expressions.LogicalExpressionTransformer._as_lambda": ["pyct.templates.replace_as_expression"], "converters.logical_expressions.LogicalExpressionTransformer._as_binary_function": ["pyct.templates.replace_as_expression", "pyct.parser.parse_expression"], "converters.logical_expressions.LogicalExpressionTransformer._as_binary_operation": ["pyct.templates.replace_as_expression"], "converters.logical_expressions.LogicalExpressionTransformer._as_unary_function": ["pyct.templates.replace_as_expression", "pyct.parser.parse_expression"], "converters.logical_expressions.LogicalExpressionTransformer.visit_Compare": ["user.options.uses", "converter.Base.generic_visit", "converters.logical_expressions.LogicalExpressionTransformer._as_lambda", "converters.logical_expressions.LogicalExpressionTransformer._as_binary_function", "<builtin>.list", "converters.logical_expressions.LogicalExpressionTransformer._as_binary_operation", "<builtin>.zip", "converters.logical_expressions.LogicalExpressionTransformer._overload_of"], "converters.logical_expressions.LogicalExpressionTransformer.visit_UnaryOp": ["converters.logical_expressions.LogicalExpressionTransformer._as_unary_function", "converters.logical_expressions.LogicalExpressionTransformer._overload_of", "converter.Base.generic_visit"], "converters.logical_expressions.LogicalExpressionTransformer.visit_BoolOp": ["converters.logical_expressions.LogicalExpressionTransformer._as_binary_function", "converters.logical_expressions.LogicalExpressionTransformer._overload_of", "converter.Base.generic_visit", "converters.logical_expressions.LogicalExpressionTransformer._as_lambda"], "converters.logical_expressions.transform": ["converter.Base.__init__", "converter.Base.visit"], "converters.return_statements": [], "converters.return_statements._RewriteBlock.__init__": [], "converters.return_statements.ConditionalReturnRewriter.visit_Return": [], "converters.return_statements.ConditionalReturnRewriter._postprocess_statement": ["<builtin>.isinstance", "pyct.anno.getanno"], "converters.return_statements.ConditionalReturnRewriter._visit_statement_block": ["converter.Base.visit_block"], "converters.return_statements.ConditionalReturnRewriter.visit_While": ["converters.return_statements.ConditionalReturnRewriter._visit_statement_block", "converter.Base.visit"], "converters.return_statements.ConditionalReturnRewriter.visit_For": ["converters.return_statements.ConditionalReturnRewriter._visit_statement_block", "converter.Base.visit"], "converters.return_statements.ConditionalReturnRewriter.visit_With": ["converters.return_statements.ConditionalReturnRewriter._visit_statement_block", "pyct.anno.setanno", "converter.Base.visit_block"], "converters.return_statements.ConditionalReturnRewriter.visit_Try": ["converters.return_statements.ConditionalReturnRewriter._visit_statement_block", "converter.Base.visit_block"], "converters.return_statements.ConditionalReturnRewriter.visit_ExceptHandler": ["converters.return_statements.ConditionalReturnRewriter._visit_statement_block"], "converters.return_statements.ConditionalReturnRewriter.visit_If": ["converters.return_statements.ConditionalReturnRewriter._visit_statement_block", "pyct.anno.setanno", "converter.Base.visit"], "converters.return_statements.ConditionalReturnRewriter.visit_FunctionDef": ["converters.return_statements.ConditionalReturnRewriter._visit_statement_block", "converter.Base.visit"], "converters.return_statements._Block.__init__": [], "converters.return_statements._Block.__repr__": [], "converters.return_statements._Function.__init__": [], "converters.return_statements._Function.__repr__": [], "converters.return_statements.ReturnStatementsTransformer.__init__": ["<builtin>.super"], "converters.return_statements.ReturnStatementsTransformer.visit_Return": ["pyct.parser.parse_expression", "<builtin>.reversed", "pyct.templates.replace"], "converters.return_statements.ReturnStatementsTransformer._postprocess_statement": ["pyct.templates.replace"], "converters.return_statements.ReturnStatementsTransformer._visit_statement_block": ["converter.Base.visit_block"], "converters.return_statements.ReturnStatementsTransformer.visit_While": ["converters.return_statements.ReturnStatementsTransformer._visit_statement_block", "pyct.templates.replace_as_expression", "converter.Base.visit"], "converters.return_statements.ReturnStatementsTransformer.visit_For": ["converters.return_statements.ReturnStatementsTransformer._visit_statement_block", "pyct.templates.replace_as_expression", "converter.Base.visit", "pyct.anno.setanno", "pyct.anno.getanno"], "converters.return_statements.ReturnStatementsTransformer.visit_With": ["converters.return_statements.ReturnStatementsTransformer._visit_statement_block", "converter.Base.visit_block"], "converters.return_statements.ReturnStatementsTransformer.visit_Try": ["converters.return_statements.ReturnStatementsTransformer._visit_statement_block", "converter.Base.visit_block"], "converters.return_statements.ReturnStatementsTransformer.visit_ExceptHandler": ["converters.return_statements.ReturnStatementsTransformer._visit_statement_block"], "converters.return_statements.ReturnStatementsTransformer.visit_If": ["converters.return_statements.ReturnStatementsTransformer._visit_statement_block", "converter.Base.visit"], "converters.return_statements.ReturnStatementsTransformer.visit_FunctionDef": ["converters.return_statements.ReturnStatementsTransformer._visit_statement_block", "<builtin>.isinstance", "pyct.templates.replace", "pyct.anno.getanno", "ctx.namer.new_symbol"], "converters.return_statements.transform": ["pyct.qual_names.resolve", "converter.Base.__init__", "converter.Base.visit", "converters.return_statements.ReturnStatementsTransformer.__init__", "static_analysis.activity.resolve"], "converters.slices": [], "converters.slices.SliceTransformer._process_single_assignment": ["<builtin>.isinstance", "pyct.templates.replace"], "converters.slices.SliceTransformer.visit_Assign": ["converters.slices.SliceTransformer._process_single_assignment", "<builtin>.len", "<builtin>.NotImplementedError", "converter.Base.generic_visit"], "converters.slices.SliceTransformer.visit_Subscript": ["<builtin>.isinstance", "converter.Base.get_definition_directive", "converter.Base.generic_visit", "pyct.templates.replace_as_expression"], "converters.slices.transform": ["converter.Base.visit", "converter.Base.__init__"], "converters.variables": [], "converters.variables.VariableAccessTransformer.visit_Name": ["pyct.templates.replace_as_expression", "pyct.anno.hasanno", "<builtin>.isinstance"], "converters.variables.VariableAccessTransformer.visit_Delete": ["gast.Delete", "pyct.templates.replace", "converter.Base.generic_visit", "<builtin>.isinstance", "gast.Constant"], "gast.Delete": [], "converters.variables.VariableAccessTransformer.visit_AugAssign": ["converter.Base.generic_visit", "pyct.templates.replace", "<builtin>.isinstance"], "converters.variables.transform": ["converter.Base.__init__", "converter.Base.visit"], "core.ag_ctx": ["util.tf_export.tf_export", "threading.local"], "threading.local": [], "core.ag_ctx._control_ctx": ["<builtin>.hasattr", "core.ag_ctx._default_control_status_ctx"], "core.ag_ctx._default_control_status_ctx": ["core.ag_ctx.ControlStatusCtx.__init__"], "util.tf_export.tf_export": [], "core.ag_ctx.control_status_ctx": ["core.ag_ctx._control_ctx"], "core.ag_ctx.ControlStatusCtx.__init__": [], "core.ag_ctx.ControlStatusCtx.__enter__": ["core.ag_ctx._control_ctx"], "core.ag_ctx.ControlStatusCtx.__repr__": [], "core.ag_ctx.ControlStatusCtx.__exit__": ["core.ag_ctx._control_ctx"], "core.ag_ctx.NullCtx.__enter__": [], "core.ag_ctx.NullCtx.__exit__": [], "core.config": ["core.config_lib.DoNotConvert", "core.config_lib.Convert"], "core.config_lib.Convert": [], "core.config_lib.DoNotConvert": [], "core.config_lib": [], "core.config_lib.Rule.__init__": [], "core.config_lib.Rule.matches": [], "core.config_lib.DoNotConvert.__str__": [], "core.config_lib.DoNotConvert.get_action": ["core.config_lib.Rule.matches"], "core.config_lib.Convert.__str__": [], "core.config_lib.Convert.get_action": ["core.config_lib.Rule.matches"], "core.converter": ["core.converter.ConversionOptions.__init__"], "core.converter.Feature.all": ["<builtin>.tuple"], "core.converter.Feature.all_but": ["<builtin>.tuple", "core.converter.Feature.all", "<builtin>.isinstance", "<builtin>.set"], "core.converter.ConversionOptions.__init__": ["<builtin>.frozenset", "<builtin>.isinstance"], "core.converter.ConversionOptions.as_tuple": [], "core.converter.ConversionOptions.__hash__": ["core.converter.ConversionOptions.as_tuple", "<builtin>.hash"], "<builtin>.hash": [], "core.converter.ConversionOptions.__eq__": ["<builtin>.isinstance", "core.converter.ConversionOptions.as_tuple"], "core.converter.ConversionOptions.__str__": [], "core.converter.ConversionOptions.uses": [], "core.converter.ConversionOptions.call_options": ["core.converter.ConversionOptions.__init__"], "core.converter.ConversionOptions.to_ast": ["pyct.templates.replace", "<builtin>.str", "core.converter.ConversionOptions.to_ast.list_of_features", "pyct.parser.parse_expression"], "core.converter.ConversionOptions.to_ast.list_of_features": ["<builtin>.str", "pyct.parser.parse_expression"], "core.converter.ProgramContext.__init__": [], "core.converter.Base.__init__": ["<builtin>.super"], "core.converter.Base.get_definition_directive": ["pyct.anno.getanno", "<builtin>.ValueError", "pyct.ast_util.matches", "pyct.parser.unparse", "<builtin>.len"], "pyct.ast_util.matches": ["pyct.ast_util.PatternMatcher.__init__", "<builtin>.isinstance", "pyct.parser.parse_str", "gast.NodeVisitor.visit"], "core.converter.Base.visit": ["<builtin>.ValueError", "<builtin>.super"], "core.function_wrappers": [], "core.function_wrappers.FunctionScope.__init__": ["framework.auto_control_deps.AutomaticControlDependencies", "framework.ops.name_scope", "core.function_wrappers.FunctionScope._sanitize", "core.ag_ctx.ControlStatusCtx"], "core.ag_ctx.ControlStatusCtx": [], "core.function_wrappers.FunctionScope._sanitize": [], "framework.ops.name_scope": ["eager.context.executing_eagerly", "<builtin>.type", "framework.ops.NullContextmanager.__init__", "framework.ops.internal_name_scope_v1.__init__", "framework.ops.name_scope_v2.__init__", "<builtin>.next"], "framework.auto_control_deps.AutomaticControlDependencies": [], "core.function_wrappers.FunctionScope.__enter__": [], "core.function_wrappers.FunctionScope.__exit__": [], "core.function_wrappers.FunctionScope.ret": ["util.nest.map_structure", "<builtin>.isinstance"], "core.function_wrappers.FunctionScope.ret._mark_return_if_tensor": ["framework.tensor_util.is_tf_type"], "framework.tensor_util.is_tf_type": ["<builtin>.getattr", "<builtin>.isinstance"], "util.nest.map_structure": ["util.nest.assert_same_structure", "util.nest.pack_sequence_as", "util._pywrap_utils.FlattenForData", "<builtin>.callable", "<builtin>.ValueError", "<builtin>.zip", "<builtin>.len", "<builtin>.TypeError", "util.nest.flatten"], "core.function_wrappers.with_function_scope": ["core.function_wrappers.FunctionScope.__init__"], "core.unsupported_features_checker": [], "core.unsupported_features_checker.UnsupportedFeaturesChecker.visit_Attribute": ["pyct.errors.UnsupportedLanguageElementError", "gast.NodeVisitor.generic_visit"], "pyct.errors.UnsupportedLanguageElementError": [], "gast.NodeVisitor.generic_visit": [], "core.unsupported_features_checker.UnsupportedFeaturesChecker.visit_For": ["pyct.errors.UnsupportedLanguageElementError", "gast.NodeVisitor.generic_visit"], "core.unsupported_features_checker.UnsupportedFeaturesChecker.visit_While": ["pyct.errors.UnsupportedLanguageElementError", "gast.NodeVisitor.generic_visit"], "core.unsupported_features_checker.UnsupportedFeaturesChecker.visit_Yield": ["pyct.errors.UnsupportedLanguageElementError"], "core.unsupported_features_checker.UnsupportedFeaturesChecker.visit_YieldFrom": ["pyct.errors.UnsupportedLanguageElementError"], "core.unsupported_features_checker.verify": ["gast.NodeVisitor.__init__", "gast.NodeVisitor.visit"], "gast.NodeVisitor.__init__": [], "gast.NodeVisitor.visit": [], "impl.api": ["impl.api.PyToTF.__init__", "util.tf_export.tf_export"], "impl.api.is_autograph_strict_conversion_mode": ["os.environ.get", "<builtin>.int"], "os.environ.get": [], "impl.api._ErrorMetadata.create_exception": ["<builtin>.issubclass", "<builtin>.super", "<builtin>.tuple", "util.tf_inspect.getfullargspec", "<builtin>.type", "errors.PyCTError.__init__", "error_utils.ErrorMetadataBase.get_message"], "util.tf_inspect.getfullargspec": ["inspect.getfullargspec", "util.tf_decorator.unwrap", "util.tf_inspect._convert_maybe_argspec_to_fullargspec"], "error_utils.ErrorMetadataBase.get_message": [], "errors.PyCTError.__init__": [], "impl.api._attach_error_metadata": ["traceback.extract_tb", "utils.ag_logging.log", "<builtin>.hasattr", "sys.exc_info", "error_utils.ErrorMetadataBase.__init__", "<builtin>.getattr"], "utils.ag_logging.log": ["platform.tf_logging.info", "utils.ag_logging.has_verbosity", "utils.ag_logging._output_to_stdout"], "sys.exc_info": [], "traceback.extract_tb": [], "error_utils.ErrorMetadataBase.__init__": [], "impl.api.StackTraceMapper.__init__": ["<builtin>.super"], "impl.api.StackTraceMapper.get_effective_source_map": ["StackTraceMapper.parent.get_effective_source_map", "pyct.origin_info.LineLocation"], "StackTraceMapper.parent.get_effective_source_map": [], "pyct.origin_info.LineLocation": [], "impl.api.PyToTF.__init__": ["<builtin>.super"], "impl.api.PyToTF.get_transformed_name": ["<builtin>.super"], "impl.api.PyToTF.get_extra_locals": ["imp.new_module", "inspect.getmodule"], "imp.new_module": [], "inspect.getmodule": [], "impl.api.PyToTF.get_caching_key": [], "impl.api.PyToTF.initial_analysis": ["static_analysis.reaching_definitions.resolve", "pyct.anno.dup", "pyct.qual_names.resolve", "static_analysis.activity.resolve", "pyct.cfg.build"], "pyct.anno.dup": ["pyct.anno.getanno", "pyct.anno.setanno", "pyct.anno.hasanno", "gast.walk"], "impl.api.PyToTF.transform_ast": ["converters.break_statements.transform", "converters.conditional_expressions.transform", "converters.logical_expressions.transform", "converters.slices.transform", "converters.call_trees.transform", "converters.lists.transform", "converters.control_flow.transform", "converters.return_statements.transform", "core.unsupported_features_checker.verify", "converters.directives.transform", "converters.variables.transform", "converters.asserts.transform", "converters.functions.transform", "impl.api.PyToTF.initial_analysis", "converters.continue_statements.transform"], "impl.api._convert_actual": ["<builtin>.ValueError", "<builtin>.hasattr", "transpiler.PyToPy.transform"], "transpiler.PyToPy.transform": [], "impl.api.autograph_artifact": ["inspect.ismethod", "<builtin>.setattr"], "inspect.ismethod": [], "<builtin>.setattr": [], "impl.api.is_autograph_artifact": ["<builtin>.hasattr"], "impl.api.converted_call": ["pyct.inspect_utils.isbuiltin", "core.converter.ProgramContext", "operators.py_builtins.eval_in_original_context", "<builtin>.ValueError", "impl.conversion.is_allowlisted", "util.tf_stack.CurrentModuleFilter", "impl.conversion.is_unsupported", "impl.api.is_autograph_artifact", "impl.api._convert_actual", "impl.api.is_autograph_strict_conversion_mode", "core.ag_ctx.control_status_ctx", "impl.api._attach_error_metadata", "operators.py_builtins.globals_in_original_context", "impl.api._call_unconverted", "impl.api._fall_back_unconverted", "utils.ag_logging.log", "impl.api._log_callargs", "inspect.isfunction", "operators.py_builtins.super_in_original_context", "utils.ag_logging.has_verbosity", "<builtin>.NotImplementedError", "impl.conversion.is_in_allowlist_cache", "operators.py_builtins.overload_of", "impl.api.StackTraceMapper.__init__", "<builtin>.type", "operators.py_builtins.locals_in_original_context", "<builtin>.getattr", "inspect.ismethod", "<builtin>.hasattr", "<builtin>.isinstance", "impl.api.converted_call"], "impl.conversion.is_in_allowlist_cache": [], "impl.api._call_unconverted": ["impl.conversion.cache_allowlisted", "<builtin>.isinstance", "inspect.ismethod"], "pyct.inspect_utils.isbuiltin": ["<builtin>.any", "<builtin>.isinstance", "inspect.isbuiltin", "builtins.__dict__.values"], "operators.py_builtins.eval_in_original_context": ["operators.py_builtins._find_originating_frame", "<builtin>.len"], "operators.py_builtins.super_in_original_context": ["operators.py_builtins._find_originating_frame"], "operators.py_builtins.globals_in_original_context": ["operators.py_builtins._find_originating_frame"], "operators.py_builtins.locals_in_original_context": ["operators.py_builtins._find_originating_frame"], "operators.py_builtins.overload_of": [], "impl.conversion.is_unsupported": ["utils.ag_logging.log", "pyct.inspect_utils.isconstructor", "impl.conversion._is_of_known_loaded_module", "utils.ag_logging.warn", "<builtin>.any", "<builtin>.hasattr", "impl.conversion._is_known_loaded_type"], "impl.conversion.is_allowlisted": ["util.tf_inspect.isclass", "<builtin>.type", "pyct.inspect_utils.getmethodclass", "pyct.inspect_utils.isnamedtuple", "utils.ag_logging.log", "util.tf_inspect.getmodule", "util.tf_inspect.isgeneratorfunction", "config.CONVERSION_RULES.get_action", "impl.conversion.is_allowlisted", "<builtin>.any", "<builtin>.issubclass", "pyct.inspect_utils.getdefiningclass", "<builtin>.isinstance", "<builtin>.hasattr", "util.tf_inspect.ismethod"], "inspect.isfunction": [], "impl.api._fall_back_unconverted": ["impl.api._call_unconverted", "<builtin>.isinstance", "utils.ag_logging.warn", "impl.conversion.is_in_allowlist_cache"], "core.converter.ProgramContext": [], "utils.ag_logging.has_verbosity": ["utils.ag_logging.get_verbosity"], "impl.api._log_callargs": ["util.tf_inspect.getcallargs", "utils.ag_logging.log"], "util.tf_stack.CurrentModuleFilter": [], "impl.conversion.cache_allowlisted": [], "impl.api.tf_convert": ["impl.api.do_not_convert", "util.tf_decorator.unwrap", "impl.api.is_autograph_artifact", "impl.api.convert.decorator", "impl.api.autograph_artifact", "impl.api.call_with_unspecified_conversion_status", "impl.api.convert", "util.tf_decorator.rewrap"], "impl.api.convert": [], "impl.api.do_not_convert": ["functools.update_wrapper", "inspect.ismethod", "impl.api.autograph_artifact", "inspect.isfunction"], "impl.api.convert.decorator": ["inspect.ismethod", "impl.api.autograph_artifact", "inspect.isfunction", "functools.update_wrapper", "util.tf_decorator.make_decorator"], "impl.api.call_with_unspecified_conversion_status": ["functools.update_wrapper", "inspect.ismethod", "impl.api.autograph_artifact", "inspect.isfunction"], "util.tf_decorator.rewrap": ["<builtin>.getattr", "util.tf_decorator._has_tf_decorator_attr", "inspect.ismethod", "<builtin>.hasattr"], "impl.api.call_with_unspecified_conversion_status.wrapper": ["core.ag_ctx.ControlStatusCtx"], "functools.update_wrapper": [], "impl.api.do_not_convert.wrapper": ["core.ag_ctx.ControlStatusCtx"], "impl.api.convert.decorator.wrapper": ["impl.api.converted_call", "<builtin>.hasattr", "core.converter.ConversionOptions"], "core.converter.ConversionOptions": [], "util.tf_decorator.make_decorator": ["inspect.currentframe", "util.tf_decorator.TFDecorator.__init__", "<builtin>.setattr", "<builtin>.hasattr"], "impl.api.to_graph": ["utils.ag_logging.error", "core.converter.ProgramContext", "<builtin>.str", "core.converter.ConversionOptions", "impl.api.autograph_artifact", "impl.api._convert_actual", "errors.PyCTError.__init__"], "utils.ag_logging.error": ["utils.ag_logging.has_verbosity", "utils.ag_logging._output_to_stdout", "platform.tf_logging.error"], "impl.api.to_graph_v1": ["impl.api.to_graph"], "impl.api.to_code_v1": ["impl.api.to_code"], "impl.api.to_code": ["textwrap.dedent", "util.tf_inspect.getsource", "impl.api.to_graph"], "util.tf_inspect.getsource": ["util.tf_decorator.unwrap", "inspect.getsource"], "textwrap.dedent": [], "impl.conversion": ["pyct.cache.UnboundInstanceCache"], "pyct.cache.UnboundInstanceCache": [], "impl.conversion._is_of_known_loaded_module": ["sys.modules.get", "<builtin>.any"], "sys.modules.get": [], "impl.conversion._is_known_loaded_type": ["<builtin>.getattr", "<builtin>.isinstance", "inspect.ismethod", "<builtin>.hasattr"], "pyct.inspect_utils.isconstructor": ["<builtin>.hasattr", "inspect.isclass", "<builtin>.issubclass"], "util.tf_inspect.getmodule": ["inspect.getmodule"], "config.CONVERSION_RULES.get_action": [], "util.tf_inspect.isgeneratorfunction": ["inspect.isgeneratorfunction", "util.tf_decorator.unwrap"], "util.tf_inspect.ismethod": ["util.tf_decorator.unwrap", "inspect.ismethod"], "pyct.inspect_utils.getmethodclass": ["<builtin>.ValueError", "<builtin>.getattr", "<builtin>.type", "<builtin>.tuple", "<builtin>.hasattr", "inspect.isclass", "<builtin>.len", "util.tf_inspect.currentframe", "itertools.chain", "<builtin>.isinstance", "util.tf_inspect.isclass", "<builtin>.issubclass"], "pyct.inspect_utils.getdefiningclass": ["<builtin>.getattr", "inspect.getmro", "<builtin>.hasattr", "pyct.inspect_utils._get_unbound_function", "<builtin>.reversed"], "pyct.inspect_utils.isnamedtuple": ["<builtin>.all", "<builtin>.getattr", "<builtin>.hasattr", "<builtin>.isinstance", "util.tf_inspect.isclass", "<builtin>.issubclass"], "lang.directives": ["<builtin>.object", "util.tf_export.tf_export"], "<builtin>.object": [], "lang.directives.set_element_type": [], "lang.directives.set_loop_options": [], "lang.special_functions": [], "lang.special_functions._validate_list_constructor": ["framework.tensor_util.is_tf_type", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance"], "lang.special_functions.match_staging_level": ["framework.tensor_util.is_tf_type", "framework.constant_op.constant"], "framework.constant_op.constant": ["framework.constant_op._constant_impl"], "lang.special_functions.tensor_list": ["lang.special_functions._validate_list_constructor", "operators.data_structures.tf_tensor_list_new", "operators.data_structures.tf_tensor_array_new"], "operators.data_structures.tf_tensor_array_new": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.ValueError", "framework.ops.convert_to_tensor", "<builtin>.set", "ops.tensor_array_ops.TensorArray", "<builtin>.tuple"], "operators.data_structures.tf_tensor_list_new": ["<builtin>.len", "ops.list_ops.empty_tensor_list", "ops.list_ops.tensor_list_push_back", "ops.list_ops.tensor_list_from_tensor", "<builtin>.ValueError", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "framework.tensor_util.is_tf_type", "<builtin>.set", "framework.constant_op.constant", "<builtin>.tuple"], "lang.special_functions.stack": ["operators.data_structures.ListStackOpts", "operators.data_structures.list_stack"], "lang.special_functions.stack.raise_error": ["<builtin>.ValueError"], "lang.special_functions.stack.<lambda1>": [], "operators.data_structures.ListStackOpts": [], "operators.data_structures.list_stack": ["operators.data_structures._tf_tensorarray_stack", "operators.data_structures._py_list_stack", "<builtin>.isinstance", "framework.tensor_util.is_tf_type", "operators.data_structures._tf_tensor_list_stack"], "operators.conditional_expressions": [], "operators.conditional_expressions.if_exp": ["operators.conditional_expressions._tf_if_exp", "utils.tensors.is_dense_tensor", "operators.conditional_expressions._py_if_exp"], "utils.tensors.is_dense_tensor": ["<builtin>.isinstance", "framework.tensor_util.is_tf_type"], "operators.conditional_expressions._tf_if_exp": ["ops.control_flow_ops.cond"], "operators.conditional_expressions._py_if_exp": [], "operators.conditional_expressions._tf_if_exp.true_fn": ["operators.control_flow.verify_single_cond_var"], "operators.control_flow.verify_single_cond_var": ["<builtin>.hasattr", "framework.tensor_util.is_tf_type", "<builtin>.TypeError", "<builtin>.isinstance", "framework.ops.convert_to_tensor_v2", "<builtin>.ValueError"], "operators.conditional_expressions._tf_if_exp.false_fn": ["operators.control_flow.verify_single_cond_var"], "ops.control_flow_ops.cond": ["ops.control_flow_ops.ControlFlowContext.Exit", "ops.array_ops.identity", "<builtin>.ValueError", "util.nest.pack_sequence_as", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.control_flow_ops._convert_flows_to_tensorarrays", "<builtin>.TypeError", "<builtin>.callable", "ops.control_flow_ops._UnpackIfSingleton", "ops.control_flow_ops._eager_cond_implementation", "framework.ops.add_to_collection", "util.nest.assert_same_structure", "framework.ops.name_scope", "ops.control_flow_ops.CondContext.__init__", "util.nest.flatten", "eager.context.executing_eagerly", "ops.control_flow_ops.merge", "ops.control_flow_ops.switch", "ops.control_flow_ops.CondContext.BuildCondBranch", "<builtin>.zip", "<builtin>.isinstance", "ops.control_flow_ops.ControlFlowContext.ExitResult", "ops.control_flow_util.EnableControlFlowV2", "framework.ops.get_default_graph", "util.nest.map_structure"], "operators.control_flow": [], "operators.control_flow._is_none_or_undef": ["<builtin>.isinstance"], "operators.control_flow._verify_tf_condition": ["ops.array_ops.reshape", "framework.ops.convert_to_tensor_v2", "<builtin>.ValueError", "numpy.prod"], "framework.ops.convert_to_tensor_v2": ["framework.ops.convert_to_tensor"], "ops.array_ops.reshape": ["framework.tensor_util.maybe_set_static_shape", "ops.gen_array_ops.reshape"], "numpy.prod": [], "operators.control_flow._verify_loop_init_vars": ["<builtin>.NotImplementedError", "<builtin>.len", "<builtin>.zip", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "operators.control_flow._is_subshape": ["<builtin>.zip"], "operators.control_flow._verify_single_loop_var": ["operators.control_flow._is_subshape", "<builtin>.hasattr", "framework.tensor_util.is_tf_type", "<builtin>.TypeError", "<builtin>.isinstance", "framework.ops.convert_to_tensor_v2", "<builtin>.ValueError"], "<builtin>.TypeError": [], "operators.control_flow._verify_tf_loop_vars": ["<builtin>.len", "util.nest.assert_same_structure", "functools.partial", "<builtin>.TypeError", "util.nest.map_structure", "<builtin>.range"], "operators.control_flow._verify_tf_loop_vars.<lambda1>": [], "util.nest.assert_same_structure": ["util._pywrap_utils.AssertSameStructureForData", "util.nest.map_structure", "<builtin>.type", "util._pywrap_utils.AssertSameStructure", "<builtin>.str", "<builtin>.bool"], "functools.partial": [], "operators.control_flow._verify_tf_cond_branch_vars": ["<builtin>.zip", "<builtin>.isinstance", "<builtin>.ValueError"], "operators.control_flow._verify_tf_cond_vars": ["<builtin>.str", "<builtin>.zip", "util.nest.assert_same_structure", "functools.partial", "<builtin>.TypeError", "util.nest.map_structure"], "operators.control_flow.for_stmt": ["operators.control_flow._tf_distributed_iterable_for_stmt", "operators.control_flow._tf_iterator_for_stmt", "operators.control_flow._tf_dataset_for_stmt", "utils.tensors.is_range_tensor", "operators.control_flow._py_for_stmt", "framework.tensor_util.is_tf_type", "operators.control_flow._known_len_tf_for_stmt", "operators.control_flow._tf_range_for_stmt", "operators.control_flow._tf_ragged_for_stmt", "<builtin>.isinstance"], "utils.tensors.is_range_tensor": ["framework.tensor_util.is_tf_type", "<builtin>.hasattr"], "operators.control_flow._tf_range_for_stmt": ["operators.control_flow._add_max_iterations_hint", "operators.control_flow._tf_while_stmt", "ops.math_ops.cast", "utils.misc.get_range_len"], "operators.control_flow._tf_ragged_for_stmt": ["operators.control_flow._add_max_iterations_hint", "operators.control_flow._tf_while_stmt", "operators.control_flow._verify_loop_init_vars"], "operators.control_flow._known_len_tf_for_stmt": ["operators.control_flow._add_max_iterations_hint", "operators.py_builtins.len_", "operators.control_flow._tf_while_stmt", "ops.tensor_array_ops.TensorArray"], "operators.control_flow._tf_dataset_for_stmt": ["operators.control_flow._tf_dataset_for_stmt.dummy_get_state", "operators.control_flow._tf_dataset_for_stmt.dummy_set_state", "operators.control_flow._general_purpose_scan", "framework.constant_op.constant", "ops.take_while_ops.take_while", "operators.control_flow._verify_loop_init_vars"], "operators.control_flow._tf_iterator_for_stmt": ["operators.control_flow._tf_while_stmt", "operators.control_flow._tf_iterator_for_stmt.aug_get_state", "operators.control_flow._verify_loop_init_vars"], "operators.control_flow._tf_distributed_iterable_for_stmt": ["<builtin>.NotImplementedError", "operators.control_flow._shape_invariants_mapping_to_positional_list", "operators.control_flow._verify_loop_init_vars"], "operators.control_flow._py_for_stmt": ["operators.control_flow._PythonLoopChecker.before_iteration", "operators.control_flow._py_for_stmt.protected_body", "operators.control_flow._PythonLoopChecker.__init__"], "operators.control_flow._PythonLoopChecker.__init__": [], "operators.control_flow._PythonLoopChecker.before_iteration": ["operators.control_flow._PythonLoopChecker._get_ops"], "operators.control_flow._py_for_stmt.protected_body": ["operators.control_flow._PythonLoopChecker.before_iteration", "operators.control_flow._py_for_stmt.protected_body", "operators.control_flow._PythonLoopChecker.after_iteration"], "operators.control_flow._PythonLoopChecker.after_iteration": ["operators.control_flow._PythonLoopChecker._verify_inefficient_unroll", "operators.control_flow._PythonLoopChecker._check_unroll_limits", "operators.control_flow._PythonLoopChecker._stop_checking_inefficient_unroll"], "operators.control_flow._add_max_iterations_hint": ["framework.ops.get_default_graph", "ops.control_flow_util.GraphOrParentsInXlaContext"], "framework.ops.get_default_graph": ["framework.ops._DefaultGraphStack.get_default"], "ops.control_flow_util.GraphOrParentsInXlaContext": ["ops.control_flow_util.InXlaContext"], "operators.py_builtins.len_": ["framework.tensor_util.is_tf_type", "utils.tensors.is_tensor_list", "operators.py_builtins._tf_tensor_len", "operators.py_builtins._tf_tensor_list_len", "<builtin>.isinstance", "operators.py_builtins._tf_tensor_array_len", "operators.py_builtins._py_len", "utils.tensors.is_tensor_array", "operators.py_builtins._tf_dataset_len"], "ops.tensor_array_ops.TensorArray": ["util.tf_should_use.should_use_result"], "operators.control_flow._known_len_tf_for_stmt.aug_get_state": [], "operators.control_flow._known_len_tf_for_stmt.aug_set_state": [], "operators.control_flow._known_len_tf_for_stmt.aug_body": [], "operators.control_flow._known_len_tf_for_stmt.aug_test": ["ops.control_flow_ops.cond"], "operators.control_flow._known_len_tf_for_stmt.aug_test.<lambda1>": [], "operators.control_flow._tf_while_stmt": ["ops.control_flow_ops.Assert", "operators.control_flow._tf_ragged_for_stmt.aug_set_state", "operators.control_flow._runtime_zero_iterations_errmsg", "operators.control_flow._tf_iterator_for_stmt.aug_set_state", "operators.control_flow._tf_iterator_for_stmt.aug_get_state", "<builtin>.tuple", "<builtin>.any", "operators.control_flow._shape_invariants_mapping_to_positional_list", "ops.control_flow_ops.while_loop", "operators.control_flow._known_len_tf_for_stmt.aug_set_state", "<builtin>.dict", "operators.control_flow._try_handling_undefineds", "operators.control_flow._tf_range_for_stmt.aug_set_state", "operators.control_flow._is_none_or_undef", "operators.control_flow._tf_range_for_stmt.aug_get_state", "framework.ops.control_dependencies", "operators.control_flow._tf_ragged_for_stmt.aug_get_state", "util.nest.map_structure", "operators.control_flow._known_len_tf_for_stmt.aug_get_state"], "operators.control_flow._tf_ragged_for_stmt.aug_get_state": [], "operators.control_flow._tf_ragged_for_stmt.aug_set_state": [], "operators.control_flow._tf_ragged_for_stmt.aug_body": [], "operators.control_flow._tf_ragged_for_stmt.aug_test": ["ops.control_flow_ops.cond"], "operators.control_flow._tf_ragged_for_stmt.aug_test.<lambda1>": [], "operators.control_flow._tf_range_for_stmt._value_or": ["<builtin>.isinstance"], "operators.control_flow._tf_range_for_stmt.aug_get_state": ["<builtin>.tuple", "<builtin>.zip", "operators.control_flow._tf_range_for_stmt._value_or"], "operators.control_flow._tf_range_for_stmt.aug_set_state": [], "operators.control_flow._tf_range_for_stmt.aug_body": [], "operators.control_flow._tf_range_for_stmt.aug_test": ["framework.tensor_util.constant_value", "ops.control_flow_ops.cond", "ops.math_ops.logical_and", "ops.math_ops.logical_or"], "framework.tensor_util.constant_value": ["framework.tensor_util._ConstantValue", "<builtin>.isinstance", "framework.tensor_util.is_tf_type"], "ops.math_ops.logical_and": [], "ops.math_ops.logical_or": [], "operators.control_flow._tf_range_for_stmt.aug_test.<lambda1>": [], "utils.misc.get_range_len": ["framework.ops.convert_to_tensor", "ops.array_ops.zeros_like", "ops.gen_math_ops.maximum", "ops.math_ops.cast", "ops.gen_math_ops.not_equal"], "ops.math_ops.cast": ["ops.math_ops.cast", "ops.gen_math_ops.cast", "framework.sparse_tensor.SparseTensor", "framework.ops.IndexedSlices", "<builtin>.isinstance", "framework.ops.name_scope", "platform.tf_logging.warn", "framework.dtypes.as_dtype", "framework.ops.convert_to_tensor"], "operators.control_flow._tf_iterator_for_stmt.aug_get_state": [], "operators.control_flow._tf_iterator_for_stmt.aug_set_state": [], "operators.control_flow._tf_iterator_for_stmt.aug_body": ["operators.control_flow._tf_iterator_for_stmt.aug_set_state", "operators.control_flow._tf_iterator_for_stmt.aug_get_state", "ops.control_flow_ops.cond"], "operators.control_flow._tf_iterator_for_stmt.aug_body.main_path": ["operators.control_flow._verify_tf_loop_vars", "operators.control_flow._tf_iterator_for_stmt.aug_get_state"], "operators.control_flow._tf_iterator_for_stmt.aug_body.noop_path": [], "operators.control_flow._tf_iterator_for_stmt.aug_test": ["ops.control_flow_ops.cond"], "operators.control_flow._tf_iterator_for_stmt.aug_test.<lambda1>": [], "operators.control_flow._general_purpose_scan": ["ops.dataset_ops._ScanDataset"], "ops.dataset_ops._ScanDataset": [], "operators.control_flow._tf_dataset_for_stmt.dummy_get_state": ["framework.constant_op.constant"], "operators.control_flow._tf_dataset_for_stmt.dummy_set_state": [], "operators.control_flow._tf_dataset_for_stmt.scan_body": ["framework.constant_op.constant", "operators.control_flow._tf_dataset_for_stmt.dummy_set_state", "operators.control_flow._tf_dataset_for_stmt.scan_body.main_path", "ops.control_flow_ops.cond"], "operators.control_flow._tf_dataset_for_stmt.scan_body.main_path": ["operators.control_flow._verify_tf_loop_vars", "operators.control_flow._tf_dataset_for_stmt.dummy_get_state"], "operators.control_flow._tf_dataset_for_stmt.scan_body.<lambda1>": [], "operators.control_flow._tf_dataset_for_stmt.take_while_predicate": [], "operators.control_flow._tf_dataset_for_stmt.reduce_body": [], "ops.take_while_ops.take_while": [], "operators.control_flow._shape_invariants_mapping_to_positional_list": ["<builtin>.tuple", "<builtin>.id"], "operators.control_flow._tf_distributed_iterable_for_stmt.reduce_body": ["operators.control_flow._verify_tf_loop_vars"], "operators.control_flow.while_stmt": ["framework.func_graph.FuncGraph", "operators.control_flow._py_while_stmt", "operators.control_flow._tf_while_stmt", "utils.tensors.is_dense_tensor"], "framework.func_graph.FuncGraph": [], "operators.control_flow._py_while_stmt": ["operators.control_flow._PythonLoopChecker.before_iteration", "operators.control_flow._py_while_stmt.protected_body", "operators.control_flow._PythonLoopChecker.__init__"], "operators.control_flow._PythonLoopChecker._get_ops": ["framework.ops.get_default_graph"], "operators.control_flow._PythonLoopChecker._check_unroll_limits": ["<builtin>.ValueError"], "operators.control_flow._PythonLoopChecker._stop_checking_inefficient_unroll": [], "operators.control_flow._PythonLoopChecker._verify_inefficient_unroll": ["utils.ag_logging.warn", "traceback.format_stack", "<builtin>.len", "<builtin>.tuple", "operators.control_flow._PythonLoopChecker._get_ops"], "traceback.format_stack": [], "operators.control_flow._py_while_stmt.protected_body": ["operators.control_flow._PythonLoopChecker.before_iteration", "operators.control_flow._py_while_stmt.protected_body", "operators.control_flow._PythonLoopChecker.after_iteration"], "operators.control_flow._placeholder_value": ["framework.tensor_util.is_tf_type", "<builtin>.type", "ops.array_ops.zeros", "util.nest.map_structure", "<builtin>.isinstance"], "ops.array_ops.zeros": ["eager.context.executing_eagerly", "framework.dtypes.as_dtype", "ops.array_ops._constant_if_small", "framework.ops.convert_to_tensor", "framework.constant_op.constant", "ops.array_ops.fill", "ops.array_ops.reshape", "numpy.zeros", "<builtin>.isinstance", "framework.constant_op._tensor_shape_tensor_conversion_function", "framework.tensor_shape.TensorShape", "framework.ops.name_scope"], "operators.control_flow._try_handling_undefineds": ["operators.control_flow._tf_iterator_for_stmt.aug_set_state", "operators.control_flow._tf_iterator_for_stmt.aug_get_state", "operators.control_flow._placeholder_value", "framework.func_graph.FuncGraph", "operators.control_flow._tf_range_for_stmt.aug_set_state", "operators.control_flow._tf_ragged_for_stmt.aug_body", "operators.control_flow._known_len_tf_for_stmt.aug_body", "operators.control_flow._tf_ragged_for_stmt.aug_get_state", "utils.ag_logging.log", "operators.control_flow._tf_ragged_for_stmt.aug_set_state", "<builtin>.zip", "<builtin>.tuple", "operators.control_flow._tf_iterator_for_stmt.aug_body", "operators.control_flow._tf_range_for_stmt.aug_get_state", "operators.control_flow._tf_range_for_stmt.aug_body", "operators.control_flow._known_len_tf_for_stmt.aug_get_state", "operators.control_flow._verify_loop_init_vars", "operators.control_flow._known_len_tf_for_stmt.aug_set_state"], "operators.control_flow._runtime_zero_iterations_errmsg": ["<builtin>.zip", "<builtin>.isinstance"], "operators.control_flow._tf_while_stmt.aug_test": ["operators.control_flow._tf_iterator_for_stmt.aug_set_state", "operators.control_flow._verify_tf_condition", "operators.control_flow._tf_range_for_stmt.aug_set_state", "operators.control_flow._tf_ragged_for_stmt.aug_set_state", "operators.control_flow._tf_iterator_for_stmt.aug_test", "operators.control_flow._tf_ragged_for_stmt.aug_test", "operators.control_flow._known_len_tf_for_stmt.aug_test", "operators.control_flow._known_len_tf_for_stmt.aug_set_state", "operators.control_flow._tf_range_for_stmt.aug_test"], "operators.control_flow._tf_while_stmt.aug_body": ["operators.control_flow._tf_iterator_for_stmt.aug_set_state", "operators.control_flow._tf_iterator_for_stmt.aug_get_state", "operators.control_flow._tf_range_for_stmt.aug_set_state", "operators.control_flow._tf_ragged_for_stmt.aug_body", "operators.control_flow._tf_ragged_for_stmt.aug_get_state", "operators.control_flow._known_len_tf_for_stmt.aug_body", "operators.control_flow._tf_ragged_for_stmt.aug_set_state", "operators.control_flow._verify_tf_loop_vars", "operators.control_flow._tf_iterator_for_stmt.aug_body", "operators.control_flow._tf_range_for_stmt.aug_get_state", "operators.control_flow._tf_range_for_stmt.aug_body", "operators.control_flow._known_len_tf_for_stmt.aug_get_state", "operators.control_flow._known_len_tf_for_stmt.aug_set_state"], "ops.control_flow_ops.while_loop": ["framework.constant_op.constant", "framework.tensor_shape.TensorShape", "<builtin>.ValueError", "<builtin>.len", "ops.control_flow_ops.WhileContext.__init__", "<builtin>.TypeError", "ops.control_flow_ops.WhileContext.BuildLoop", "<builtin>.callable", "<builtin>.list", "ops.control_flow_ops.while_loop.<lambda3>", "<builtin>.int", "ops.control_flow_ops.while_loop.<lambda2>", "framework.ops.convert_to_tensor", "framework.ops.add_to_collection", "util.nest.assert_same_structure", "framework.ops.name_scope", "eager.context.executing_eagerly", "ops.control_flow_ops.while_loop.<lambda1>", "<builtin>.isinstance", "ops.control_flow_util.EnableControlFlowV2", "framework.ops.get_default_graph", "util.nest.map_structure", "ops.control_flow_ops.while_loop.<lambda4>"], "ops.control_flow_ops.Assert": ["framework.ops.name_scope", "ops.control_flow_ops._summarize_eager", "ops.gen_logging_ops._assert", "framework.ops.convert_n_to_tensor", "<builtin>.all", "ops.control_flow_ops.cond", "eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "framework.errors.InvalidArgumentError"], "framework.ops.control_dependencies": ["eager.context.executing_eagerly", "framework.ops.Graph.control_dependencies", "framework.ops.NullContextmanager.__init__", "<builtin>.callable", "framework.ops.get_default_graph"], "operators.control_flow._tf_while_stmt.<lambda1>": ["framework.tensor_util.is_tf_type", "ops.array_ops.identity"], "ops.array_ops.identity": ["eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "ops.gen_array_ops.identity", "util.nest.map_structure", "<builtin>.hasattr"], "operators.control_flow.if_stmt": ["operators.control_flow._py_if_stmt", "utils.tensors.is_dense_tensor", "operators.control_flow._tf_if_stmt"], "operators.control_flow._tf_if_stmt": ["operators.control_flow._tf_if_stmt.<lambda1>", "ops.control_flow_ops.cond", "operators.control_flow._tf_if_stmt.<lambda2>", "operators.control_flow._verify_tf_condition"], "operators.control_flow._py_if_stmt": [], "operators.control_flow._tf_if_stmt.<lambda1>": ["operators.control_flow._tf_if_stmt.<lambda1>"], "operators.control_flow._tf_if_stmt.<lambda2>": ["operators.control_flow._tf_if_stmt.<lambda2>"], "operators.control_flow._tf_if_stmt.aug_body": ["operators.control_flow._tf_if_stmt.<lambda1>", "operators.control_flow._tf_if_stmt.<lambda2>", "operators.control_flow._verify_tf_cond_vars", "operators.control_flow._verify_tf_cond_branch_vars"], "operators.control_flow._tf_if_stmt.aug_orelse": ["operators.control_flow._tf_if_stmt.<lambda1>", "operators.control_flow._tf_if_stmt.<lambda2>", "operators.control_flow._verify_tf_cond_vars", "operators.control_flow._verify_tf_cond_branch_vars"], "operators.control_flow_deprecated_py2": ["util.lazy_loader.LazyLoader", "<builtin>.globals"], "<builtin>.globals": [], "util.lazy_loader.LazyLoader": [], "operators.control_flow_deprecated_py2._disallow_undefs_into_loop": ["<builtin>.isinstance", "<builtin>.ValueError"], "operators.control_flow_deprecated_py2._is_subshape": ["<builtin>.zip"], "operators.control_flow_deprecated_py2._verify_single_loop_var": ["<builtin>.TypeError", "framework.ops.convert_to_tensor_v2", "operators.control_flow_deprecated_py2._is_subshape", "<builtin>.isinstance", "<builtin>.ValueError", "framework.tensor_util.is_tf_type", "<builtin>.hasattr"], "operators.control_flow_deprecated_py2._verify_tf_loop_vars": ["<builtin>.TypeError", "util.nest.assert_same_structure", "functools.partial", "util.nest.map_structure", "<builtin>.zip"], "operators.control_flow_deprecated_py2._verify_tf_loop_vars.<lambda1>": [], "operators.control_flow_deprecated_py2._verify_single_cond_var": ["<builtin>.TypeError", "framework.ops.convert_to_tensor_v2", "<builtin>.isinstance", "framework.tensor_util.is_tf_type", "<builtin>.hasattr"], "operators.control_flow_deprecated_py2._verify_tf_cond_vars": ["<builtin>.TypeError", "<builtin>.str", "util.nest.assert_same_structure", "functools.partial", "<builtin>.isinstance", "util.nest.map_structure", "<builtin>.zip"], "operators.control_flow_deprecated_py2.for_stmt": ["<builtin>.NotImplementedError", "operators.control_flow_deprecated_py2._tf_distributed_dataset_for_stmt", "operators.control_flow_deprecated_py2._tf_ragged_for_stmt", "operators.control_flow_deprecated_py2._tf_dataset_for_stmt", "operators.control_flow_deprecated_py2._known_len_tf_for_stmt", "utils.tensors.is_range_tensor", "<builtin>.isinstance", "operators.control_flow_deprecated_py2._tf_iterator_for_stmt", "operators.control_flow_deprecated_py2._py_for_stmt", "framework.tensor_util.is_tf_type", "operators.control_flow_deprecated_py2._tf_range_for_stmt"], "operators.control_flow_deprecated_py2._tf_range_for_stmt": ["operators.control_flow_deprecated_py2._tf_while_stmt", "ops.math_ops.cast", "<builtin>.len", "<builtin>.isinstance", "operators.control_flow_deprecated_py2._disallow_undefs_into_loop", "utils.misc.get_range_len"], "operators.control_flow_deprecated_py2._known_len_tf_for_stmt": ["ops.array_ops.zeros_like", "operators.control_flow_deprecated_py2._tf_while_stmt", "operators.py_builtins.len_", "<builtin>.len", "<builtin>.isinstance", "operators.control_flow_deprecated_py2._disallow_undefs_into_loop", "ops.tensor_array_ops.TensorArray"], "operators.control_flow_deprecated_py2._tf_dataset_for_stmt": ["operators.control_flow_deprecated_py2._dataset_for_stmt_with_extra_test", "operators.control_flow_deprecated_py2._disallow_undefs_into_loop", "operators.control_flow_deprecated_py2._dataset_for_stmt_no_extra_test"], "operators.control_flow_deprecated_py2._tf_iterator_for_stmt": ["operators.control_flow_deprecated_py2._disallow_undefs_into_loop", "operators.control_flow_deprecated_py2._tf_while_stmt"], "operators.control_flow_deprecated_py2._tf_ragged_for_stmt": ["ops.array_ops.zeros_like", "operators.control_flow_deprecated_py2._tf_while_stmt", "<builtin>.len", "<builtin>.isinstance", "operators.control_flow_deprecated_py2._disallow_undefs_into_loop"], "operators.control_flow_deprecated_py2._tf_distributed_dataset_for_stmt": ["<builtin>.NotImplementedError", "operators.control_flow_deprecated_py2._disallow_undefs_into_loop", "framework.constant_op.constant"], "operators.control_flow_deprecated_py2._py_for_stmt": [], "operators.control_flow_deprecated_py2._known_len_tf_for_stmt.while_body": [], "operators.control_flow_deprecated_py2._known_len_tf_for_stmt.while_cond": ["ops.control_flow_ops.cond"], "operators.control_flow_deprecated_py2._known_len_tf_for_stmt.while_cond.<lambda1>": [], "operators.control_flow_deprecated_py2._known_len_tf_for_stmt.while_cond.<lambda2>": [], "ops.array_ops.zeros_like": ["ops.array_ops.zeros_like_impl"], "operators.control_flow_deprecated_py2._tf_while_stmt": ["<builtin>.slice", "<builtin>.len", "operators.control_flow_deprecated_py2._disallow_undefs_into_loop", "ops.control_flow_ops.while_loop", "operators.control_flow_deprecated_py2._shape_invariants_mapping_to_positional_list"], "operators.control_flow_deprecated_py2._tf_ragged_for_stmt.while_body": [], "operators.control_flow_deprecated_py2._tf_ragged_for_stmt.while_cond": ["ops.control_flow_ops.cond"], "operators.control_flow_deprecated_py2._tf_ragged_for_stmt.while_cond.<lambda1>": [], "operators.control_flow_deprecated_py2._tf_ragged_for_stmt.while_cond.<lambda2>": [], "operators.control_flow_deprecated_py2._tf_range_for_stmt.while_body": [], "operators.control_flow_deprecated_py2._tf_range_for_stmt.while_cond": ["ops.math_ops.logical_and", "ops.control_flow_ops.cond", "ops.math_ops.logical_or"], "operators.control_flow_deprecated_py2._tf_range_for_stmt.while_cond.<lambda1>": [], "operators.control_flow_deprecated_py2._tf_range_for_stmt.while_cond.<lambda2>": [], "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_body_actual": ["operators.control_flow_deprecated_py2._verify_tf_loop_vars"], "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_body": ["ops.control_flow_ops.cond", "framework.constant_op.constant"], "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_body.<lambda1>": ["operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_body_actual"], "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_body.<lambda2>": [], "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_cond": ["ops.control_flow_ops.cond"], "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_cond.<lambda1>": [], "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_cond.<lambda2>": [], "operators.control_flow_deprecated_py2._dataset_for_stmt_with_extra_test": ["operators.control_flow_deprecated_py2._general_purpose_scan", "ops.take_while_ops.take_while"], "operators.control_flow_deprecated_py2._dataset_for_stmt_no_extra_test": ["<builtin>.isinstance", "operators.control_flow_deprecated_py2._general_purpose_scan", "framework.constant_op.constant"], "operators.control_flow_deprecated_py2._general_purpose_scan": ["ops.dataset_ops._ScanDataset"], "operators.control_flow_deprecated_py2._dataset_for_stmt_with_extra_test.scan_body": ["ops.control_flow_ops.cond"], "operators.control_flow_deprecated_py2._dataset_for_stmt_with_extra_test.scan_body.true_fn": ["operators.control_flow_deprecated_py2._verify_tf_loop_vars"], "operators.control_flow_deprecated_py2._dataset_for_stmt_with_extra_test.scan_body.<lambda1>": [], "operators.control_flow_deprecated_py2._dataset_for_stmt_with_extra_test.take_while_predicate": [], "operators.control_flow_deprecated_py2._dataset_for_stmt_with_extra_test.reduce_body": [], "operators.control_flow_deprecated_py2._dataset_for_stmt_no_extra_test.scan_body": ["operators.control_flow_deprecated_py2._verify_tf_loop_vars"], "operators.control_flow_deprecated_py2._dataset_for_stmt_no_extra_test.reduce_body": [], "operators.control_flow_deprecated_py2._tf_distributed_dataset_for_stmt.reduce_body": [], "operators.control_flow_deprecated_py2._tf_distributed_dataset_for_stmt.reduce_body_with_dummy_state": ["operators.control_flow_deprecated_py2._tf_distributed_dataset_for_stmt.reduce_body"], "operators.control_flow_deprecated_py2.while_stmt": ["operators.control_flow_deprecated_py2._py_while_stmt", "framework.func_graph.FuncGraph", "utils.tensors.is_dense_tensor", "operators.control_flow_deprecated_py2._tf_while_stmt"], "operators.control_flow_deprecated_py2._py_while_stmt": ["operators.control_flow_deprecated_py2._PythonLoopChecker.after_iteration", "operators.control_flow_deprecated_py2._PythonLoopChecker.before_iteration", "operators.control_flow_deprecated_py2._PythonLoopChecker.__init__"], "operators.control_flow_deprecated_py2._shape_invariants_mapping_to_positional_list": ["<builtin>.tuple", "<builtin>.id"], "<builtin>.slice": [], "operators.control_flow_deprecated_py2._tf_while_stmt.aug_test": ["operators.control_flow_deprecated_py2._known_len_tf_for_stmt.while_cond", "operators.control_flow_deprecated_py2._tf_range_for_stmt.while_cond", "operators.control_flow_deprecated_py2._tf_ragged_for_stmt.while_cond", "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_cond"], "operators.control_flow_deprecated_py2._tf_while_stmt.aug_body": ["operators.control_flow_deprecated_py2._verify_tf_loop_vars", "operators.control_flow_deprecated_py2._known_len_tf_for_stmt.while_body", "operators.control_flow_deprecated_py2._tf_ragged_for_stmt.while_body", "operators.control_flow_deprecated_py2._tf_range_for_stmt.while_body", "operators.control_flow_deprecated_py2._tf_iterator_for_stmt.while_body"], "operators.control_flow_deprecated_py2._PythonLoopChecker.__init__": [], "operators.control_flow_deprecated_py2._PythonLoopChecker._get_ops": ["framework.ops.get_default_graph"], "operators.control_flow_deprecated_py2._PythonLoopChecker._check_unroll_limits": ["<builtin>.ValueError"], "operators.control_flow_deprecated_py2._PythonLoopChecker._stop_checking_inefficient_unroll": [], "operators.control_flow_deprecated_py2._PythonLoopChecker._verify_ineffcient_unroll": ["operators.control_flow_deprecated_py2._PythonLoopChecker._get_ops", "<builtin>.tuple", "utils.ag_logging.warn", "<builtin>.len"], "operators.control_flow_deprecated_py2._PythonLoopChecker.before_iteration": ["operators.control_flow_deprecated_py2._PythonLoopChecker._get_ops"], "operators.control_flow_deprecated_py2._PythonLoopChecker.after_iteration": ["operators.control_flow_deprecated_py2._PythonLoopChecker._check_unroll_limits", "operators.control_flow_deprecated_py2._PythonLoopChecker._verify_ineffcient_unroll", "operators.control_flow_deprecated_py2._PythonLoopChecker._stop_checking_inefficient_unroll"], "operators.control_flow_deprecated_py2.if_stmt": ["operators.control_flow_deprecated_py2.tf_if_stmt", "operators.control_flow_deprecated_py2._py_if_stmt", "utils.tensors.is_dense_tensor"], "operators.control_flow_deprecated_py2.tf_if_stmt": ["ops.control_flow_ops.cond", "operators.control_flow_deprecated_py2._isolate_state", "operators.control_flow_deprecated_py2._wrap_disallow_undefs_from_cond"], "operators.control_flow_deprecated_py2._py_if_stmt": [], "operators.control_flow_deprecated_py2._wrap_disallow_undefs_from_cond": [], "operators.control_flow_deprecated_py2._isolate_state": [], "operators.control_flow_deprecated_py2.tf_if_stmt.error_checking_body": ["operators.control_flow_deprecated_py2._verify_tf_cond_vars", "operators.control_flow_deprecated_py2._isolate_state.wrapper", "operators.control_flow_deprecated_py2._wrap_disallow_undefs_from_cond.wrapper"], "operators.control_flow_deprecated_py2._isolate_state.wrapper": ["operators.control_flow_deprecated_py2._isolate_state.wrapper", "operators.control_flow_deprecated_py2._wrap_disallow_undefs_from_cond.wrapper"], "operators.control_flow_deprecated_py2._wrap_disallow_undefs_from_cond.wrapper": ["operators.control_flow_deprecated_py2._isolate_state.wrapper", "<builtin>.isinstance", "<builtin>.tuple", "operators.control_flow_deprecated_py2._wrap_disallow_undefs_from_cond.wrapper", "<builtin>.ValueError"], "operators.control_flow_deprecated_py2.tf_if_stmt.error_checking_orelse": ["operators.control_flow_deprecated_py2._verify_tf_cond_vars", "operators.control_flow_deprecated_py2._isolate_state.wrapper", "operators.control_flow_deprecated_py2._wrap_disallow_undefs_from_cond.wrapper"], "operators.data_structures": [], "operators.data_structures.new_list": ["<builtin>.tuple", "operators.data_structures.tf_tensor_list_new", "operators.data_structures._py_list_new"], "operators.data_structures._py_list_new": ["<builtin>.list"], "framework.ops.convert_to_tensor": ["<builtin>.getattr", "framework.dtypes.as_dtype", "framework.ops._error_prefix", "eager.context.context", "<builtin>.TypeError", "<builtin>.type", "framework.ops.get_default_graph", "framework.tensor_conversion_registry.get", "<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.ValueError"], "ops.array_ops.shape": ["ops.array_ops.shape_internal"], "ops.list_ops.tensor_list_from_tensor": ["ops.gen_list_ops.tensor_list_from_tensor", "framework.ops.convert_to_tensor", "ops.list_ops._build_element_shape", "ops.list_ops._set_handle_data"], "ops.list_ops.empty_tensor_list": ["ops.list_ops._build_element_shape", "ops.gen_list_ops.empty_tensor_list"], "ops.list_ops.tensor_list_push_back": [], "operators.data_structures.list_append": ["operators.data_structures._tf_tensor_list_append", "<builtin>.isinstance", "<builtin>.ValueError", "framework.tensor_util.is_tf_type", "operators.data_structures._py_list_append", "operators.data_structures._tf_tensorarray_append"], "operators.data_structures._tf_tensorarray_append": [], "operators.data_structures._tf_tensor_list_append": ["ops.list_ops.tensor_list_push_back", "ops.control_flow_ops.cond", "ops.list_ops.tensor_list_length"], "operators.data_structures._py_list_append": [], "operators.data_structures._tf_tensor_list_append.empty_list_of_elements_like_x": ["ops.list_ops.empty_tensor_list", "ops.array_ops.shape", "framework.ops.convert_to_tensor"], "ops.list_ops.tensor_list_length": [], "operators.data_structures._tf_tensor_list_append.<lambda1>": [], "operators.data_structures.list_pop": ["<builtin>.isinstance", "operators.data_structures._tf_tensor_list_pop", "<builtin>.ValueError", "framework.tensor_util.is_tf_type", "operators.data_structures._py_list_pop"], "operators.data_structures._tf_tensor_list_pop": ["ops.list_ops.tensor_list_pop_back", "<builtin>.NotImplementedError", "<builtin>.ValueError"], "operators.data_structures._py_list_pop": [], "ops.list_ops.tensor_list_pop_back": ["ops.gen_list_ops.tensor_list_pop_back"], "operators.data_structures._tf_tensorarray_stack": [], "operators.data_structures._tf_tensor_list_stack": ["<builtin>.ValueError", "ops.list_ops.tensor_list_stack"], "operators.data_structures._py_list_stack": [], "ops.list_ops.tensor_list_stack": ["ops.gen_list_ops.tensor_list_stack", "ops.list_ops._build_element_shape"], "operators.dispatch_context": [], "operators.dispatch_context.DispatchContext.option": [], "operators.exceptions": [], "operators.exceptions.assert_stmt": ["operators.exceptions._tf_assert_stmt", "framework.tensor_util.is_tf_type", "<builtin>.callable", "util.tf_inspect.getargspec", "operators.exceptions._py_assert_stmt", "<builtin>.ValueError"], "<builtin>.callable": [], "operators.exceptions._tf_assert_stmt": ["<builtin>.isinstance", "ops.control_flow_ops.Assert"], "operators.exceptions._py_assert_stmt": [], "operators.logical": [], "operators.logical.not_": ["framework.tensor_util.is_tf_type", "operators.logical._py_not", "operators.logical._tf_not"], "operators.logical._tf_not": ["ops.gen_math_ops.logical_not"], "operators.logical._py_not": [], "ops.gen_math_ops.logical_not": [], "operators.logical.and_": ["operators.logical._py_lazy_and", "framework.tensor_util.is_tf_type", "operators.logical._tf_lazy_and"], "operators.logical._tf_lazy_and": ["ops.control_flow_ops.cond"], "operators.logical._py_lazy_and": [], "operators.logical._tf_lazy_and.<lambda1>": [], "operators.logical.or_": ["framework.tensor_util.is_tf_type", "operators.logical._tf_lazy_or", "operators.logical._py_lazy_or"], "operators.logical._tf_lazy_or": ["ops.control_flow_ops.cond"], "operators.logical._py_lazy_or": [], "operators.logical._tf_lazy_or.<lambda1>": [], "operators.logical.eq": ["framework.tensor_util.is_tf_type", "operators.logical._tf_equal", "operators.logical._py_equal"], "operators.logical._tf_equal": ["ops.gen_math_ops.equal"], "operators.logical._py_equal": [], "ops.gen_math_ops.equal": [], "operators.logical.not_eq": ["operators.logical.not_", "operators.logical.eq"], "operators.py_builtins": ["<builtin>.globals", "<builtin>.object", "util.lazy_loader.LazyLoader"], "operators.py_builtins._find_originating_frame": ["inspect.currentframe"], "inspect.currentframe": [], "operators.py_builtins.abs_": ["framework.tensor_util.is_tf_type", "operators.py_builtins._tf_dataset_abs", "<builtin>.isinstance", "operators.py_builtins._py_abs", "operators.py_builtins._tf_abs"], "operators.py_builtins._tf_abs": ["ops.math_ops.abs"], "operators.py_builtins._tf_dataset_abs": ["util.nest.flatten", "<builtin>.len"], "operators.py_builtins._py_abs": ["<builtin>.abs"], "ops.math_ops.abs": ["ops.gen_math_ops._abs", "framework.ops.name_scope", "ops.gen_math_ops.complex_abs", "framework.ops.convert_to_tensor"], "util.nest.flatten": ["<builtin>.bool", "util._pywrap_utils.Flatten"], "operators.py_builtins._tf_dataset_abs.<lambda1>": ["util.nest.map_structure"], "<builtin>.abs": [], "operators.py_builtins.float_": ["framework.tensor_util.is_tf_type", "operators.py_builtins._tf_float", "operators.py_builtins._py_float"], "operators.py_builtins._tf_float": ["ops.math_ops.cast", "ops.gen_parsing_ops.string_to_number"], "operators.py_builtins._py_float": ["<builtin>.float"], "ops.gen_parsing_ops.string_to_number": [], "<builtin>.float": [], "operators.py_builtins.int_": ["framework.tensor_util.is_tf_type", "operators.py_builtins._tf_int", "operators.py_builtins._py_int"], "operators.py_builtins._tf_int": ["ops.math_ops.cast", "<builtin>.NotImplementedError", "ops.gen_parsing_ops.string_to_number"], "operators.py_builtins._py_int": ["<builtin>.int"], "utils.tensors.is_tensor_array": ["<builtin>.isinstance"], "operators.py_builtins._tf_tensor_array_len": [], "utils.tensors.is_tensor_list": ["framework.tensor_util.is_tf_type"], "operators.py_builtins._tf_tensor_list_len": ["ops.list_ops.tensor_list_length"], "operators.py_builtins._tf_tensor_len": ["ops.array_ops.rank", "ops.array_ops.shape", "<builtin>.ValueError", "ops.control_flow_ops.cond"], "operators.py_builtins._tf_dataset_len": ["ops.control_flow_ops.Assert", "ops.array_ops.identity", "ops.math_ops.not_equal", "ops.gen_string_ops.string_join", "ops.cardinality.cardinality", "framework.ops.control_dependencies", "ops.gen_string_ops.as_string", "ops.math_ops.logical_and"], "operators.py_builtins._py_len": ["<builtin>.len"], "ops.array_ops.rank": ["ops.array_ops.rank_internal"], "operators.py_builtins._tf_tensor_len.raise_zero_rank_error": ["ops.control_flow_ops.Assert", "ops.gen_string_ops.string_join", "framework.ops.control_dependencies", "ops.gen_string_ops.as_string", "framework.constant_op.constant"], "ops.gen_string_ops.as_string": [], "ops.gen_string_ops.string_join": [], "operators.py_builtins._tf_tensor_len.<lambda1>": ["ops.array_ops.shape"], "ops.cardinality.cardinality": ["ops.gen_dataset_ops.dataset_cardinality"], "ops.math_ops.not_equal": ["ops.gen_math_ops.not_equal"], "operators.py_builtins.print_": ["framework.tensor_util.is_tf_type", "<builtin>.ValueError", "operators.py_builtins._py_print", "operators.py_builtins._tf_py_func_print", "<builtin>.tuple", "<builtin>.any", "<builtin>.set"], "operators.py_builtins._tf_py_func_print": ["utils.py_func.wrap_py_func"], "operators.py_builtins._py_print": ["<builtin>.print"], "<builtin>.print": [], "operators.py_builtins._tf_py_func_print.print_wrapper": ["framework.tensor_util.is_tf_type", "<builtin>.tuple", "<builtin>.isinstance", "six.print_"], "six.print_": [], "utils.py_func.wrap_py_func": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.len", "framework.tensor_util.is_tf_type", "utils.py_func.wrap_py_func.match_arg_dtype", "<builtin>.map", "ops.script_ops.eager_py_func", "<builtin>.range"], "operators.py_builtins.range_": ["framework.tensor_util.is_tf_type", "operators.py_builtins._tf_range", "operators.py_builtins._py_range", "<builtin>.any"], "operators.py_builtins._tf_range": ["ops.math_ops.range", "ops.math_ops.maximum"], "operators.py_builtins._py_range": ["<builtin>.range"], "ops.math_ops.range": ["ops.math_ops.cast", "<builtin>.all", "<builtin>.isinstance", "framework.ops.name_scope", "ops.gen_math_ops._range", "framework.ops.convert_to_tensor", "<builtin>.max"], "ops.math_ops.maximum": [], "operators.py_builtins.enumerate_": ["<builtin>.isinstance", "operators.py_builtins._py_enumerate", "<builtin>.NotImplementedError", "operators.py_builtins._tf_dataset_enumerate"], "operators.py_builtins._tf_dataset_enumerate": [], "operators.py_builtins._py_enumerate": ["<builtin>.enumerate"], "operators.py_builtins.zip_": ["<builtin>.isinstance", "operators.py_builtins._tf_dataset_zip", "<builtin>.all", "operators.py_builtins._py_zip"], "operators.py_builtins._tf_dataset_zip": ["dataset_ops.DatasetV2.zip"], "operators.py_builtins._py_zip": ["<builtin>.zip"], "dataset_ops.DatasetV2.zip": [], "operators.py_builtins.map_": ["<builtin>.isinstance", "operators.py_builtins._tf_dataset_map", "operators.py_builtins._py_map", "<builtin>.all"], "operators.py_builtins._tf_dataset_map": ["dataset_ops.DatasetV2.zip"], "operators.py_builtins._py_map": ["<builtin>.map"], "operators.py_builtins.next_": ["<builtin>.isinstance", "operators.py_builtins.next_py", "operators.py_builtins.next_tf_iterator"], "operators.py_builtins.next_tf_iterator": ["operators.py_builtins._verify_structure_compatible", "<builtin>.next", "ops.control_flow_ops.cond"], "operators.py_builtins.next_py": ["<builtin>.next"], "operators.py_builtins._verify_spec_compatible": ["framework.ops.convert_to_tensor_v2", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.getattr", "<builtin>.TypeError", "<builtin>.str"], "operators.py_builtins._verify_structure_compatible": ["util.nest.map_structure", "functools.partial", "util.nest.assert_same_structure", "<builtin>.TypeError", "<builtin>.str"], "<builtin>.next": [], "operators.py_builtins.next_tf_iterator.<lambda1>": [], "operators.py_builtins.filter_": ["<builtin>.isinstance", "operators.py_builtins._tf_dataset_filter", "operators.py_builtins._py_filter"], "operators.py_builtins._tf_dataset_filter": [], "operators.py_builtins._py_filter": ["<builtin>.filter"], "<builtin>.filter": [], "operators.py_builtins.any_": ["<builtin>.isinstance", "operators.py_builtins._tf_dataset_any", "operators.py_builtins._py_any"], "operators.py_builtins._tf_dataset_any": ["framework.constant_op.constant", "util.nest.flatten", "<builtin>.ValueError", "<builtin>.len"], "operators.py_builtins._py_any": ["<builtin>.any"], "operators.py_builtins._tf_dataset_any.<lambda1>": [], "operators.py_builtins._tf_dataset_any.<lambda2>": [], "operators.py_builtins.all_": ["<builtin>.isinstance", "operators.py_builtins._tf_dataset_all", "operators.py_builtins._py_all"], "operators.py_builtins._tf_dataset_all": ["framework.constant_op.constant", "util.nest.flatten", "<builtin>.ValueError", "<builtin>.len"], "operators.py_builtins._py_all": ["<builtin>.all"], "operators.py_builtins._tf_dataset_all.<lambda1>": ["ops.math_ops.logical_not"], "ops.math_ops.logical_not": [], "operators.py_builtins._tf_dataset_all.<lambda2>": [], "operators.py_builtins.sorted_": ["framework.tensor_util.is_tf_type", "operators.py_builtins._tf_sorted", "operators.py_builtins._py_sorted"], "operators.py_builtins._tf_sorted": ["<builtin>.ValueError", "ops.array_ops.gather_v2", "ops.sort_ops.sort", "framework.ops.control_dependencies", "ops.sort_ops.argsort", "ops.check_ops.assert_rank_v2"], "operators.py_builtins._py_sorted": ["<builtin>.sorted"], "ops.check_ops.assert_rank_v2": ["ops.check_ops.assert_rank"], "ops.sort_ops.argsort": ["ops.sort_ops._sort_or_argsort", "framework.ops.name_scope"], "ops.array_ops.gather_v2": ["ops.array_ops.gather"], "ops.sort_ops.sort": ["ops.sort_ops._sort_or_argsort", "framework.ops.name_scope"], "operators.slices": [], "operators.slices.get_item": ["framework.tensor_util.is_tf_type", "operators.slices._tf_tensor_string_get_item", "operators.slices._tf_tensor_get_item", "<builtin>.isinstance", "operators.slices._py_get_item", "operators.slices._tf_tensorarray_get_item", "operators.slices._tf_tensor_list_get_item"], "operators.slices._tf_tensorarray_get_item": [], "operators.slices._tf_tensor_list_get_item": ["ops.list_ops.tensor_list_get_item", "<builtin>.ValueError"], "operators.slices._tf_tensor_string_get_item": ["ops.gen_string_ops.substr"], "operators.slices._tf_tensor_get_item": [], "operators.slices._py_get_item": [], "ops.list_ops.tensor_list_get_item": ["ops.gen_list_ops.tensor_list_get_item", "ops.list_ops._build_element_shape"], "ops.gen_string_ops.substr": [], "operators.slices.set_item": ["framework.tensor_util.is_tf_type", "operators.slices._py_set_item", "operators.slices._tf_tensorarray_set_item", "<builtin>.isinstance", "operators.slices._tf_tensor_list_set_item", "operators.slices._tf_tensor_set_item"], "operators.slices._tf_tensorarray_set_item": [], "operators.slices._tf_tensor_list_set_item": ["ops.list_ops.tensor_list_set_item"], "operators.slices._tf_tensor_set_item": ["ops.gen_array_ops.tensor_scatter_update"], "operators.slices._py_set_item": [], "ops.list_ops.tensor_list_set_item": ["ops.gen_list_ops.tensor_list_length", "ops.handle_data_util.copy_handle_data", "ops.gen_list_ops.tensor_list_set_item"], "ops.gen_array_ops.tensor_scatter_update": [], "operators.variables": [], "operators.variables.ld": ["<builtin>.isinstance"], "operators.variables.ldu": ["operators.variables.Undefined.__init__"], "operators.variables.Undefined.__init__": [], "operators.variables.Undefined.read": ["<builtin>.UnboundLocalError"], "<builtin>.UnboundLocalError": [], "operators.variables.Undefined.__repr__": [], "operators.variables.Undefined.__getattribute__": [], "operators.variables.Undefined.__getitem__": [], "pyct.anno": ["<builtin>.object"], "pyct.anno.NoValue.of": ["pyct.anno.getanno"], "pyct.anno.NoValue.add_to": ["pyct.anno.setanno"], "pyct.anno.NoValue.exists": ["pyct.anno.hasanno"], "pyct.anno.NoValue.__repr__": ["<builtin>.str"], "pyct.anno.keys": ["<builtin>.getattr", "<builtin>.frozenset", "<builtin>.hasattr"], "pyct.anno.delanno": ["<builtin>.getattr", "<builtin>.delattr", "<builtin>.tuple"], "<builtin>.delattr": [], "gast.walk": [], "pyct.ast_util": [], "pyct.ast_util.CleanCopier.__init__": ["<builtin>.super"], "pyct.ast_util.CleanCopier.copy": ["<builtin>.hasattr", "pyct.anno.copyanno", "<builtin>.getattr", "<builtin>.type", "<builtin>.isinstance", "pyct.ast_util.CleanCopier.copy", "<builtin>.tuple"], "pyct.ast_util.copy_clean": ["pyct.ast_util.CleanCopier.__init__", "pyct.ast_util.CleanCopier.copy"], "pyct.ast_util.SymbolRenamer.__init__": [], "pyct.ast_util.SymbolRenamer._process_name_node": ["pyct.anno.copyanno", "pyct.anno.keys", "gast.Name", "gast.NodeTransformer.generic_visit", "<builtin>.str", "pyct.anno.getanno"], "gast.NodeTransformer.generic_visit": [], "pyct.ast_util.SymbolRenamer._process_list_of_strings": ["<builtin>.str", "<builtin>.range", "pyct.qual_names.QN", "<builtin>.len"], "pyct.qual_names.QN": [], "pyct.ast_util.SymbolRenamer.visit_Nonlocal": ["pyct.ast_util.SymbolRenamer._process_list_of_strings"], "pyct.ast_util.SymbolRenamer.visit_Global": ["pyct.ast_util.SymbolRenamer._process_list_of_strings"], "pyct.ast_util.SymbolRenamer.visit_Name": ["pyct.ast_util.SymbolRenamer._process_name_node"], "pyct.ast_util.SymbolRenamer.visit_Attribute": ["gast.NodeTransformer.generic_visit", "pyct.ast_util.SymbolRenamer._process_name_node", "pyct.anno.hasanno"], "pyct.ast_util.SymbolRenamer.visit_FunctionDef": ["gast.NodeTransformer.generic_visit", "<builtin>.str", "pyct.qual_names.QN"], "gast.NodeTransformer.visit": [], "pyct.ast_util.keywords_to_dict": ["gast.Dict", "gast.Constant"], "pyct.ast_util.PatternMatcher.__init__": [], "pyct.ast_util.PatternMatcher.compare_and_visit": ["pyct.ast_util.PatternMatcher.generic_visit"], "pyct.ast_util.PatternMatcher.generic_visit": ["<builtin>.hasattr", "<builtin>.zip", "pyct.ast_util.PatternMatcher.compare_and_visit", "pyct.ast_util.PatternMatcher.is_wildcard", "<builtin>.getattr", "<builtin>.len", "<builtin>.type", "<builtin>.isinstance", "pyct.ast_util.PatternMatcher.no_match"], "pyct.ast_util.PatternMatcher.no_match": [], "pyct.ast_util.PatternMatcher.is_wildcard": ["<builtin>.isinstance", "<builtin>.len"], "pyct.parser.parse_str": [], "pyct.ast_util.apply_to_single_assignments": ["<builtin>.range", "<builtin>.len", "gast.Subscript", "<builtin>.isinstance", "<builtin>.str", "pyct.ast_util.apply_to_single_assignments", "gast.Load", "pyct.parser.parse_expression"], "gast.Subscript": [], "pyct.ast_util.parallel_walk": ["<builtin>.list", "<builtin>.getattr", "<builtin>.len", "<builtin>.isinstance", "<builtin>.ValueError"], "pyct.cache": [], "pyct.cache._TransformedFnCache.__init__": ["weakref.WeakKeyDictionary"], "weakref.WeakKeyDictionary": [], "pyct.cache._TransformedFnCache._get_key": ["<builtin>.NotImplementedError"], "pyct.cache._TransformedFnCache.has": ["pyct.cache._TransformedFnCache._get_key"], "pyct.cache._TransformedFnCache.__getitem__": ["pyct.cache._TransformedFnCache._get_key"], "pyct.cache._TransformedFnCache.__len__": ["<builtin>.len"], "pyct.cache.CodeObjectCache._get_key": ["<builtin>.hasattr"], "pyct.cache.UnboundInstanceCache._get_key": ["inspect.ismethod"], "pyct.cfg": [], "pyct.cfg.Node.__init__": [], "pyct.cfg.Node.freeze": ["<builtin>.frozenset", "weakref.WeakSet"], "weakref.WeakSet": [], "pyct.cfg.Node.__repr__": ["astunparse.unparse", "<builtin>.isinstance"], "astunparse.unparse": [], "pyct.cfg.Graph.__repr__": ["pyct.cfg.Graph.as_dot"], "pyct.cfg.Graph.as_dot": ["<builtin>.id"], "pyct.cfg.GraphVisitor.__init__": ["pyct.cfg.GraphVisitor.reset"], "pyct.cfg.GraphVisitor.reset": ["pyct.cfg.GraphVisitor.init_state"], "pyct.cfg.GraphVisitor.init_state": ["<builtin>.NotImplementedError"], "pyct.cfg.GraphVisitor.visit_node": ["<builtin>.NotImplementedError"], "pyct.cfg.GraphVisitor.can_ignore": ["pyct.anno.hasanno", "<builtin>.isinstance"], "pyct.cfg.GraphVisitor._visit_internal": ["<builtin>.set", "<builtin>.list", "pyct.cfg.GraphVisitor.visit_node"], "pyct.cfg.GraphVisitor.visit_forward": ["pyct.cfg.GraphVisitor._visit_internal"], "pyct.cfg.GraphVisitor.visit_reverse": ["pyct.cfg.GraphVisitor._visit_internal"], "pyct.cfg.GraphBuilder.__init__": ["pyct.cfg.GraphBuilder.reset"], "pyct.cfg.GraphBuilder.reset": ["<builtin>.set"], "pyct.cfg.GraphBuilder._connect_nodes": ["<builtin>.isinstance", "pyct.cfg.GraphBuilder._connect_nodes"], "pyct.cfg.GraphBuilder._add_new_node": ["<builtin>.frozenset", "weakref.WeakSet", "pyct.cfg.Node.__init__", "<builtin>.ValueError", "pyct.cfg.GraphBuilder._connect_nodes", "<builtin>.set"], "pyct.cfg.GraphBuilder.begin_statement": [], "pyct.cfg.GraphBuilder.end_statement": [], "pyct.cfg.GraphBuilder.add_ordinary_node": ["pyct.cfg.GraphBuilder._add_new_node", "<builtin>.set"], "pyct.cfg.GraphBuilder._add_jump_node": ["pyct.cfg.GraphBuilder._add_new_node", "<builtin>.set"], "pyct.cfg.GraphBuilder._connect_jump_to_finally_sections": ["<builtin>.set", "pyct.cfg.GraphBuilder._connect_nodes"], "pyct.cfg.GraphBuilder.add_exit_node": ["pyct.cfg.GraphBuilder._add_jump_node"], "pyct.cfg.GraphBuilder.add_continue_node": ["pyct.cfg.GraphBuilder._add_jump_node"], "pyct.cfg.GraphBuilder.connect_raise_node": [], "pyct.cfg.GraphBuilder.enter_section": ["<builtin>.set"], "pyct.cfg.GraphBuilder.exit_section": ["pyct.cfg.GraphBuilder._connect_jump_to_finally_sections"], "pyct.cfg.GraphBuilder.enter_loop_section": ["<builtin>.set", "pyct.cfg.GraphBuilder.add_ordinary_node"], "pyct.cfg.GraphBuilder.exit_loop_section": ["pyct.cfg.GraphBuilder._connect_jump_to_finally_sections", "<builtin>.set", "pyct.cfg.GraphBuilder._connect_nodes"], "pyct.cfg.GraphBuilder.enter_cond_section": [], "pyct.cfg.GraphBuilder.new_cond_branch": [], "pyct.cfg.GraphBuilder.exit_cond_section": [], "pyct.cfg.GraphBuilder.enter_except_section": [], "pyct.cfg.GraphBuilder.enter_finally_section": [], "pyct.cfg.GraphBuilder.exit_finally_section": ["<builtin>.set"], "pyct.cfg.GraphBuilder.build": ["<builtin>.frozenset", "<builtin>.set", "pyct.cfg.GraphBuilder.reset"], "pyct.cfg.AstToCfg.__init__": ["<builtin>.super"], "pyct.cfg.AstToCfg._enter_lexical_scope": [], "pyct.cfg.AstToCfg._exit_lexical_scope": [], "pyct.cfg.AstToCfg._get_enclosing_finally_scopes": ["<builtin>.reversed", "<builtin>.isinstance"], "pyct.cfg.AstToCfg._get_enclosing_except_scopes": ["<builtin>.reversed", "<builtin>.isinstance"], "pyct.cfg.AstToCfg._process_basic_statement": ["pyct.cfg.GraphBuilder.add_ordinary_node", "gast.NodeVisitor.generic_visit"], "pyct.cfg.AstToCfg._process_exit_statement": ["pyct.cfg.AstToCfg._get_enclosing_finally_scopes", "pyct.cfg.GraphBuilder.connect_raise_node", "gast.NodeVisitor.generic_visit", "pyct.cfg.AstToCfg._get_enclosing_except_scopes", "pyct.cfg.GraphBuilder.add_exit_node"], "pyct.cfg.AstToCfg._process_continue_statement": ["pyct.cfg.AstToCfg._get_enclosing_finally_scopes", "<builtin>.tuple", "pyct.cfg.GraphBuilder.add_continue_node", "<builtin>.ValueError"], "pyct.cfg.AstToCfg.visit_ClassDef": ["pyct.cfg.AstToCfg._enter_lexical_scope", "pyct.cfg.AstToCfg._process_basic_statement", "pyct.cfg.GraphBuilder.__init__", "pyct.cfg.AstToCfg._exit_lexical_scope", "gast.NodeVisitor.generic_visit", "pyct.cfg.GraphBuilder.add_ordinary_node"], "pyct.cfg.AstToCfg._process_function_def": ["pyct.cfg.AstToCfg._enter_lexical_scope", "pyct.cfg.GraphBuilder.enter_section", "pyct.cfg.AstToCfg._process_basic_statement", "gast.NodeVisitor.visit", "pyct.cfg.GraphBuilder.build", "pyct.cfg.GraphBuilder.__init__", "pyct.cfg.AstToCfg._exit_lexical_scope", "pyct.cfg.AstToCfg._process_exit_statement", "pyct.cfg.GraphBuilder.add_ordinary_node", "pyct.cfg.GraphBuilder.exit_section"], "pyct.cfg.AstToCfg.visit_FunctionDef": ["pyct.cfg.AstToCfg._process_function_def"], "pyct.cfg.AstToCfg.visit_Lambda": ["pyct.cfg.AstToCfg._process_function_def"], "pyct.cfg.AstToCfg.visit_Return": ["pyct.cfg.AstToCfg._process_exit_statement"], "pyct.cfg.AstToCfg.visit_Import": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_ImportFrom": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_Expr": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_Assign": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_AnnAssign": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_AugAssign": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_Pass": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_Global": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_Nonlocal": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_Print": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_Raise": ["pyct.cfg.AstToCfg._process_exit_statement"], "pyct.cfg.AstToCfg.visit_Assert": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_Delete": ["pyct.cfg.AstToCfg._process_basic_statement"], "pyct.cfg.AstToCfg.visit_If": ["pyct.cfg.GraphBuilder.end_statement", "pyct.cfg.AstToCfg._process_basic_statement", "gast.NodeVisitor.visit", "pyct.cfg.GraphBuilder.enter_cond_section", "pyct.cfg.GraphBuilder.begin_statement", "pyct.cfg.GraphBuilder.exit_cond_section", "pyct.cfg.GraphBuilder.new_cond_branch"], "pyct.cfg.AstToCfg.visit_While": ["pyct.cfg.GraphBuilder.end_statement", "pyct.cfg.AstToCfg._enter_lexical_scope", "pyct.cfg.GraphBuilder.enter_section", "gast.NodeVisitor.visit", "pyct.cfg.GraphBuilder.exit_loop_section", "pyct.cfg.GraphBuilder.begin_statement", "pyct.cfg.AstToCfg._exit_lexical_scope", "pyct.cfg.GraphBuilder.enter_loop_section", "gast.NodeVisitor.generic_visit", "pyct.cfg.GraphBuilder.exit_section"], "pyct.cfg.AstToCfg.visit_For": ["pyct.cfg.GraphBuilder.end_statement", "pyct.cfg.AstToCfg._enter_lexical_scope", "pyct.cfg.GraphBuilder.enter_section", "pyct.cfg.AstToCfg._process_basic_statement", "gast.NodeVisitor.visit", "pyct.anno.getanno", "pyct.cfg.GraphBuilder.exit_loop_section", "pyct.cfg.GraphBuilder.begin_statement", "pyct.anno.hasanno", "pyct.cfg.GraphBuilder.enter_loop_section", "gast.NodeVisitor.generic_visit", "pyct.cfg.AstToCfg._exit_lexical_scope", "pyct.cfg.GraphBuilder.exit_section"], "pyct.cfg.AstToCfg.visit_Break": ["pyct.cfg.AstToCfg._process_exit_statement"], "pyct.cfg.AstToCfg.visit_Continue": ["pyct.cfg.AstToCfg._process_continue_statement"], "pyct.cfg.AstToCfg.visit_ExceptHandler": ["gast.NodeVisitor.visit", "pyct.cfg.GraphBuilder.begin_statement", "pyct.cfg.GraphBuilder.end_statement", "pyct.cfg.GraphBuilder.enter_except_section"], "pyct.cfg.AstToCfg.visit_Try": ["pyct.cfg.GraphBuilder.end_statement", "pyct.cfg.AstToCfg._enter_lexical_scope", "pyct.cfg.GraphBuilder.exit_finally_section", "pyct.cfg.GraphBuilder.enter_cond_section", "gast.NodeVisitor.visit", "pyct.cfg.GraphBuilder.enter_finally_section", "pyct.cfg.GraphBuilder.begin_statement", "pyct.cfg.AstToCfg._exit_lexical_scope", "pyct.cfg.GraphBuilder.exit_cond_section", "pyct.cfg.GraphBuilder.new_cond_branch"], "pyct.cfg.AstToCfg.visit_With": ["gast.NodeVisitor.visit", "pyct.cfg.AstToCfg._process_basic_statement"], "pyct.errors": [], "pyct.error_utils": [], "pyct.error_utils._stack_trace_inside_mapped_code": ["<builtin>.tuple", "pyct.origin_info.LineLocation", "<builtin>.reversed"], "pyct.error_utils.MultilineMessageKeyError.__init__": ["<builtin>.super"], "pyct.error_utils.MultilineMessageKeyError.__str__": [], "pyct.error_utils.ErrorMetadataBase.__init__": ["pyct.error_utils._stack_trace_inside_mapped_code"], "pyct.error_utils.ErrorMetadataBase.get_message": ["<builtin>.len", "util.traceback_utils.is_traceback_filtering_enabled", "util.traceback_utils.include_frame", "<builtin>.range", "<builtin>.reversed"], "util.traceback_utils.is_traceback_filtering_enabled": ["<builtin>.getattr"], "util.traceback_utils.include_frame": [], "pyct.error_utils.ErrorMetadataBase.create_exception": ["pyct.error_utils.ErrorMetadataBase.get_message", "<builtin>.type", "pyct.error_utils.MultilineMessageKeyError.__init__"], "pyct.error_utils.ErrorMetadataBase.to_exception": ["pyct.error_utils.ErrorMetadataBase.create_exception"], "pyct.gast_util": ["functools.partial", "<builtin>.hasattr"], "pyct.gast_util._is_constant_gast_2": ["<builtin>.isinstance"], "pyct.gast_util._is_constant_gast_3": ["<builtin>.isinstance"], "pyct.gast_util.is_literal": ["<builtin>.isinstance", "pyct.gast_util._is_constant_gast_3", "pyct.gast_util._is_constant_gast_2"], "pyct.gast_util._is_ellipsis_gast_2": ["<builtin>.isinstance"], "pyct.gast_util._is_ellipsis_gast_3": ["<builtin>.isinstance"], "pyct.inspect_utils": ["threading.Lock"], "threading.Lock": [], "pyct.inspect_utils.islambda": ["<builtin>.hasattr", "util.tf_inspect.isfunction"], "util.tf_inspect.isfunction": ["inspect.isfunction", "util.tf_decorator.unwrap"], "builtins.__dict__.values": [], "inspect.isbuiltin": [], "inspect.isclass": [], "pyct.inspect_utils._fix_linecache_record": ["inspect.getfile", "<builtin>.hasattr", "sys.modules.values", "linecache.updatecache", "<builtin>.tuple"], "inspect.getfile": [], "linecache.updatecache": [], "pyct.inspect_utils.getimmediatesource": ["pyct.inspect_utils._fix_linecache_record", "inspect.findsource", "inspect.getblock"], "inspect.findsource": [], "inspect.getblock": [], "pyct.inspect_utils.getnamespace": ["six.get_function_closure", "<builtin>.zip", "six.get_function_globals", "<builtin>.dict", "six.get_function_code"], "six.get_function_globals": [], "six.get_function_closure": [], "six.get_function_code": [], "pyct.inspect_utils.getqualifiedname": ["util.tf_inspect.getmodule", "pyct.inspect_utils.getqualifiedname", "util.tf_inspect.ismodule", "<builtin>.id", "<builtin>.set", "<builtin>.dict"], "pyct.inspect_utils._get_unbound_function": ["<builtin>.hasattr"], "inspect.getmro": [], "util.tf_inspect.currentframe": ["inspect.stack"], "itertools.chain": [], "pyct.inspect_utils.getfutureimports": ["<builtin>.getattr", "<builtin>.sorted", "util.tf_inspect.isfunction", "<builtin>.tuple", "util.tf_inspect.ismethod"], "pyct.loader": [], "pyct.loader._remove_file": ["os.remove"], "os.remove": [], "pyct.loader.load_source": ["atexit.register", "importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "tempfile.NamedTemporaryFile", "os.path.basename"], "tempfile.NamedTemporaryFile": [], "os.path.basename": [], "pyct.loader.load_source.<lambda1>": ["pyct.loader._remove_file"], "atexit.register": [], "importlib.util.spec_from_file_location": [], "importlib.util.module_from_spec": [], "pyct.loader.load_ast": ["pyct.loader.load_source", "pyct.origin_info.create_source_map", "<builtin>.isinstance", "pyct.parser.unparse"], "pyct.origin_info.create_source_map": ["<builtin>.str", "<builtin>.ValueError", "difflib.context_diff", "pyct.origin_info.resolve", "pyct.pretty_printer.fmt", "pyct.ast_util.parallel_walk", "pyct.parser.parse", "<builtin>.zip", "pyct.anno.getanno"], "pyct.naming": [], "pyct.naming.Namer.__init__": ["<builtin>.set"], "pyct.naming.Namer.new_symbol": ["<builtin>.type", "<builtin>.set", "<builtin>.ValueError", "<builtin>.int", "<builtin>.isinstance"], "pyct.origin_info": [], "pyct.origin_info.Location.line_loc": [], "pyct.origin_info.OriginInfo.as_frame": [], "pyct.origin_info.OriginInfo.__repr__": ["os.path.split"], "os.path.split": [], "pyct.parser.parse": ["<builtin>.len", "<builtin>.ValueError", "gast.parse"], "pyct.origin_info.resolve": ["tokenize.generate_tokens", "six.StringIO", "pyct.origin_info.OriginResolver.__init__", "pyct.origin_info.OriginResolver.visit", "<builtin>.isinstance"], "pyct.pretty_printer.fmt": ["pyct.pretty_printer.PrettyPrinter.__init__", "gast.NodeVisitor.visit", "<builtin>.isinstance"], "difflib.context_diff": [], "pyct.origin_info._Function.__init__": [], "pyct.origin_info.OriginResolver.__init__": ["<builtin>.hasattr"], "pyct.origin_info.OriginResolver._absolute_lineno": [], "pyct.origin_info.OriginResolver._absolute_col_offset": [], "pyct.origin_info.OriginResolver._attach_origin_info": ["pyct.origin_info.OriginResolver._absolute_col_offset", "pyct.anno.setanno", "pyct.origin_info.OriginResolver._absolute_lineno"], "pyct.origin_info.OriginResolver.visit": ["<builtin>.hasattr", "pyct.origin_info._Function.__init__", "<builtin>.isinstance", "pyct.origin_info.OriginResolver._attach_origin_info", "gast.NodeVisitor.generic_visit"], "six.StringIO": [], "tokenize.generate_tokens": [], "pyct.origin_info.resolve_entity": ["pyct.origin_info.resolve", "util.tf_inspect.getsourcefile", "util.tf_inspect.getsourcelines", "<builtin>.len"], "util.tf_inspect.getsourcelines": ["inspect.getsourcelines", "util.tf_decorator.unwrap"], "util.tf_inspect.getsourcefile": ["util.tf_decorator.unwrap", "inspect.getsourcefile"], "Basic.ORIGIN.of": [], "pyct.parser": ["re.compile", "textwrap.dedent"], "re.compile": [], "pyct.parser._unfold_continuations": [], "pyct.parser.dedent_block": ["<builtin>.len", "<builtin>.enumerate", "re.match", "pyct.parser._unfold_continuations", "six.StringIO", "<builtin>.zip", "tokenize.untokenize", "tokenize.generate_tokens", "pyct.errors.UnsupportedLanguageElementError"], "tokenize.untokenize": [], "re.match": [], "pyct.parser.parse_entity": ["<builtin>.len", "<builtin>.tuple", "pyct.parser.dedent_block", "pyct.inspect_utils.getimmediatesource", "pyct.inspect_utils.islambda", "pyct.parser.parse", "<builtin>.ValueError", "pyct.parser._parse_lambda"], "pyct.parser._parse_lambda": ["<builtin>.len", "pyct.parser.unparse", "<builtin>.max", "inspect.getmodule", "<builtin>.enumerate", "<builtin>.min", "<builtin>.isinstance", "gast.walk", "pyct.parser._without_context", "inspect.getsourcefile", "pyct.parser.parse", "<builtin>.getattr", "pyct.parser._node_matches_argspec", "linecache.getlines", "pyct.errors.UnsupportedLanguageElementError"], "pyct.parser._without_context": ["<builtin>.getattr", "gast.walk", "re.search"], "re.search": [], "pyct.parser._arg_name": ["<builtin>.isinstance"], "pyct.parser._node_matches_argspec": ["<builtin>.tuple", "util.tf_inspect.getfullargspec", "pyct.parser._arg_name"], "inspect.getsourcefile": [], "linecache.getlines": [], "<builtin>.min": [], "<builtin>.max": [], "gast.parse": [], "gast.gast_to_ast": [], "ast.fix_missing_locations": [], "ast.unparse": [], "pyct.pretty_printer": [], "pyct.pretty_printer.PrettyPrinter.__init__": [], "pyct.pretty_printer.PrettyPrinter._color": ["termcolor.colored"], "termcolor.colored": [], "pyct.pretty_printer.PrettyPrinter._type": ["pyct.pretty_printer.PrettyPrinter._color"], "pyct.pretty_printer.PrettyPrinter._field": ["pyct.pretty_printer.PrettyPrinter._color"], "pyct.pretty_printer.PrettyPrinter._value": ["pyct.pretty_printer.PrettyPrinter._color"], "pyct.pretty_printer.PrettyPrinter._warning": ["pyct.pretty_printer.PrettyPrinter._color"], "pyct.pretty_printer.PrettyPrinter._indent": ["pyct.pretty_printer.PrettyPrinter._color"], "pyct.pretty_printer.PrettyPrinter._print": [], "pyct.pretty_printer.PrettyPrinter.generic_visit": ["pyct.pretty_printer.PrettyPrinter._value", "pyct.pretty_printer.PrettyPrinter.generic_visit", "pyct.pretty_printer.PrettyPrinter._indent", "pyct.pretty_printer.PrettyPrinter._print", "<builtin>.hasattr", "pyct.pretty_printer.PrettyPrinter._type", "<builtin>.getattr", "pyct.pretty_printer.PrettyPrinter._warning", "<builtin>.isinstance", "pyct.pretty_printer.PrettyPrinter._field"], "pyct.qual_names": [], "pyct.qual_names.Literal.__str__": ["<builtin>.isinstance", "<builtin>.str"], "pyct.qual_names.Literal.__repr__": ["<builtin>.str"], "pyct.qual_names.QN.__init__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "pyct.qual_names.QN.is_symbol": ["<builtin>.isinstance"], "pyct.qual_names.QN.is_simple": ["<builtin>.len"], "pyct.qual_names.QN.is_composite": ["<builtin>.len"], "pyct.qual_names.QN.has_subscript": [], "pyct.qual_names.QN.has_attr": [], "pyct.qual_names.QN.attr": ["<builtin>.ValueError"], "pyct.qual_names.QN.parent": ["<builtin>.ValueError"], "pyct.qual_names.QN.owner_set": ["pyct.qual_names.QN.has_attr", "<builtin>.set", "pyct.qual_names.QN.has_subscript"], "pyct.qual_names.QN.support_set": ["pyct.qual_names.QN.has_attr", "<builtin>.set", "pyct.qual_names.QN.has_subscript"], "pyct.qual_names.QN.__hash__": ["<builtin>.hash"], "pyct.qual_names.QN.__eq__": ["pyct.qual_names.QN.has_attr", "<builtin>.isinstance", "pyct.qual_names.QN.has_subscript"], "pyct.qual_names.QN.__lt__": ["<builtin>.str"], "pyct.qual_names.QN.__gt__": ["<builtin>.str"], "pyct.qual_names.QN.__str__": ["pyct.qual_names.QN.has_attr", "<builtin>.map", "<builtin>.str", "pyct.qual_names.QN.has_subscript"], "pyct.qual_names.QN.__repr__": ["<builtin>.str"], "pyct.qual_names.QN.ssf": ["<builtin>.range", "<builtin>.isinstance", "<builtin>.len", "pyct.qual_names.QN.has_subscript"], "pyct.qual_names.QN.ast": ["pyct.qual_names.QN.has_attr", "gast.Subscript", "gast.Name", "<builtin>.isinstance", "gast.Attribute", "gast.Constant", "pyct.qual_names.QN.has_subscript"], "gast.Attribute": [], "pyct.qual_names.QnResolver.visit_Name": ["pyct.anno.setanno", "pyct.qual_names.QN.__init__", "gast.NodeTransformer.generic_visit"], "pyct.qual_names.QnResolver.visit_Attribute": ["pyct.anno.getanno", "gast.NodeTransformer.generic_visit", "pyct.anno.setanno", "pyct.anno.hasanno", "pyct.qual_names.QN.__init__"], "pyct.qual_names.QnResolver.visit_Subscript": ["pyct.anno.getanno", "gast.NodeTransformer.generic_visit", "pyct.anno.setanno", "pyct.anno.hasanno", "<builtin>.isinstance", "pyct.qual_names.QN.__init__"], "gast.NodeTransformer.__init__": [], "pyct.qual_names.from_str": ["pyct.anno.getanno", "pyct.qual_names.resolve", "pyct.parser.parse_expression"], "pyct.templates": [], "pyct.templates.ContextAdjuster.__init__": [], "pyct.templates.ContextAdjuster.visit": ["<builtin>.super", "<builtin>.hasattr"], "pyct.templates.ContextAdjuster._apply_override": ["gast.Load"], "pyct.templates.ContextAdjuster.visit_Attribute": ["gast.NodeTransformer.generic_visit", "pyct.templates.ContextAdjuster._apply_override"], "pyct.templates.ContextAdjuster.visit_Tuple": ["gast.NodeTransformer.generic_visit", "pyct.templates.ContextAdjuster._apply_override"], "pyct.templates.ContextAdjuster.visit_List": ["gast.NodeTransformer.generic_visit", "pyct.templates.ContextAdjuster._apply_override"], "pyct.templates.ContextAdjuster.visit_Name": ["gast.NodeTransformer.generic_visit", "pyct.templates.ContextAdjuster._apply_override"], "pyct.templates.ContextAdjuster.visit_Call": ["gast.NodeTransformer.generic_visit", "pyct.templates.ContextAdjuster._apply_override"], "pyct.templates.ContextAdjuster.visit_Dict": ["gast.NodeTransformer.generic_visit"], "pyct.templates.ContextAdjuster.visit_Subscript": ["gast.NodeTransformer.generic_visit", "pyct.templates.ContextAdjuster._apply_override", "pyct.templates.ContextAdjuster.visit"], "pyct.templates.ContextAdjuster.visit_comprehension": ["gast.NodeTransformer.generic_visit"], "pyct.templates.ContextAdjuster.visit_Lambda": ["gast.NodeTransformer.generic_visit"], "pyct.templates.ReplaceTransformer.__init__": [], "pyct.templates.ReplaceTransformer._prepare_replacement": ["<builtin>.isinstance", "pyct.ast_util.copy_clean"], "pyct.templates.ReplaceTransformer.visit_Expr": ["gast.NodeTransformer.visit"], "pyct.templates.ReplaceTransformer.visit_keyword": ["gast.NodeTransformer.generic_visit", "pyct.templates.ReplaceTransformer._prepare_replacement", "<builtin>.ValueError", "<builtin>.all", "<builtin>.isinstance"], "pyct.templates.ReplaceTransformer.visit_FunctionDef": ["gast.NodeTransformer.generic_visit", "<builtin>.ValueError", "<builtin>.isinstance"], "pyct.templates.ReplaceTransformer.visit_Attribute": ["gast.NodeTransformer.generic_visit", "<builtin>.ValueError", "<builtin>.isinstance"], "pyct.templates.ReplaceTransformer.visit_Name": ["<builtin>.type", "pyct.templates.ReplaceTransformer._prepare_replacement", "pyct.templates.ContextAdjuster.__init__", "pyct.templates.ContextAdjuster.visit", "<builtin>.hasattr", "<builtin>.len"], "pyct.templates._convert_to_ast": ["<builtin>.tuple", "<builtin>.isinstance", "pyct.templates._convert_to_ast", "gast.Name"], "pyct.transformer": [], "pyct.transformer.Context.__init__": [], "pyct.transformer._StateStack.__init__": ["<builtin>.hasattr", "pyct.transformer._StateStack.enter"], "pyct.transformer._StateStack.enter": [], "pyct.transformer._StateStack.__enter__": ["pyct.transformer._StateStack.enter"], "pyct.transformer._StateStack.__exit__": ["pyct.transformer._StateStack.exit"], "pyct.transformer._StateStack.exit": [], "pyct.transformer._StateStack.stack": [], "pyct.transformer._StateStack.level": ["<builtin>.len"], "pyct.transformer._StateStack.value": [], "pyct.transformer._StateStack.__iter__": ["<builtin>.iter"], "<builtin>.iter": [], "pyct.transformer._StateStack.__getattr__": ["<builtin>.getattr"], "pyct.transformer._StateStack.__setattr__": ["<builtin>.setattr"], "pyct.transformer._State.__init__": [], "pyct.transformer._State.__getitem__": ["pyct.transformer._StateStack.__init__"], "pyct.transformer.NodeStateTracker.__init__": ["pyct.transformer._State.__init__"], "pyct.transformer.NodeStateTracker.debug_print": ["<builtin>.print", "pyct.pretty_printer.fmt"], "pyct.transformer.NodeStateTracker.debug_print_src": ["<builtin>.print", "pyct.parser.unparse"], "pyct.transformer.NodeStateTracker.visit_block": ["<builtin>.isinstance"], "pyct.transformer.Base.create_assignment": ["pyct.templates.replace"], "pyct.transformer.Base.apply_to_single_assignments": ["pyct.transformer.Base.apply_to_single_assignments", "<builtin>.range", "<builtin>.len", "gast.Subscript", "gast.Store", "<builtin>.isinstance"], "gast.Store": [], "pyct.transformer.Base.visit": ["pyct.anno.getanno", "<builtin>.type", "<builtin>.super", "pyct.anno.setanno", "<builtin>.ValueError", "<builtin>.isinstance", "pyct.anno.hasanno"], "pyct.transformer.CodeGenerator.__init__": ["<builtin>.super"], "pyct.transformer.CodeGenerator.emit": [], "pyct.transformer.CodeGenerator.code_buffer": [], "pyct.transformer.CodeGenerator.visit": ["<builtin>.len", "<builtin>.super", "pyct.anno.hasanno", "pyct.anno.getanno"], "pyct.transpiler": [], "pyct.transpiler._wrap_into_factory": ["pyct.templates.replace", "gast.alias", "gast.Name", "gast.Param", "gast.ImportFrom"], "gast.alias": [], "gast.ImportFrom": [], "gast.Param": [], "pyct.transpiler._PythonFnFactory.__init__": [], "pyct.transpiler._PythonFnFactory.create": ["pyct.transpiler._wrap_into_factory", "<builtin>.ValueError", "<builtin>.getattr", "pyct.loader.load_ast"], "pyct.transpiler._PythonFnFactory.instantiate": ["<builtin>.zip", "<builtin>.tuple", "<builtin>.dict", "types.FunctionType", "<builtin>.ValueError", "<builtin>.len"], "types.FunctionType": [], "pyct.transpiler.GenericTranspiler.get_transformed_name": ["<builtin>.ValueError", "<builtin>.isinstance"], "pyct.transpiler.GenericTranspiler.transform_ast": ["<builtin>.NotImplementedError"], "pyct.transpiler.GenericTranspiler.transform": ["pyct.transpiler.GenericTranspiler.transform_function", "inspect.isfunction", "inspect.ismethod", "<builtin>.NotImplementedError", "<builtin>.type"], "pyct.transpiler.GenericTranspiler.transform_function": ["pyct.naming.Namer", "pyct.transpiler.GenericTranspiler.get_transformed_name", "pyct.transformer.Context", "pyct.transpiler.GenericTranspiler.transform_ast", "pyct.origin_info.resolve_entity", "pyct.transformer.EntityInfo", "pyct.transpiler.GenericTranspiler._erase_arg_defaults", "utils.ag_logging.log", "pyct.inspect_utils.getnamespace", "pyct.inspect_utils.getfutureimports", "pyct.parser.parse_entity"], "pyct.transpiler.GenericTranspiler._erase_arg_defaults": ["<builtin>.enumerate", "<builtin>.len", "pyct.parser.parse_expression", "<builtin>.range"], "pyct.transpiler.GenericTranspiler.transform_module": ["pyct.transpiler.GenericTranspiler.transform", "inspect.ismodule"], "pyct.naming.Namer": [], "pyct.transformer.EntityInfo": [], "pyct.transformer.Context": [], "pyct.transpiler.PyToPy.__init__": ["threading.RLock", "pyct.cache.CodeObjectCache"], "threading.RLock": [], "pyct.cache.CodeObjectCache": [], "pyct.transpiler.PyToPy.get_extra_locals": ["<builtin>.NotImplementedError"], "pyct.transpiler.PyToPy.get_caching_key": ["<builtin>.NotImplementedError"], "pyct.transpiler.PyToPy._cached_factory": ["utils.ag_logging.log"], "pyct.transpiler.PyToPy.transform_function": ["pyct.parser.unparse", "gast.Store", "gast.Assign", "pyct.transpiler.PyToPy._cached_factory", "utils.ag_logging.has_verbosity", "gast.Name", "<builtin>.super", "utils.ag_logging.log", "pyct.transpiler._PythonFnFactory.instantiate", "pyct.transpiler._PythonFnFactory.create", "<builtin>.getattr", "pyct.transpiler.PyToPy.get_caching_key", "<builtin>.isinstance", "pyct.transpiler._PythonFnFactory.__init__", "pyct.transpiler.PyToPy.get_extra_locals"], "gast.Assign": [], "utils.ag_logging": ["util.tf_export.tf_export", "<builtin>.hasattr"], "utils.ag_logging.set_verbosity": [], "utils.ag_logging.trace": ["<builtin>.print"], "utils.ag_logging.get_verbosity": ["os.getenv", "<builtin>.int"], "os.getenv": [], "utils.ag_logging._output_to_stdout": ["traceback.print_exc", "<builtin>.print"], "traceback.print_exc": [], "platform.tf_logging.info": ["platform.tf_logging.get_logger"], "platform.tf_logging.warning": ["platform.tf_logging.get_logger"], "sys.stdout.flush": [], "utils.compat_util": [], "utils.compat_util.BasicRef.__init__": [], "utils.compat_util.deprecated_py2_support": ["importlib.import_module"], "utils.context_managers": [], "utils.context_managers.control_dependency_on_returns": ["framework.ops.control_dependencies", "contextlib.contextmanager", "<builtin>.tuple", "<builtin>.isinstance", "utils.context_managers.control_dependency_on_returns.control_dependency_handle"], "utils.context_managers.control_dependency_on_returns.control_dependency_handle": ["<builtin>.isinstance"], "utils.context_managers.control_dependency_on_returns.<lambda1>": [], "contextlib.contextmanager": [], "utils.misc": [], "utils.misc.alias_tensors": ["<builtin>.ValueError", "utils.misc.alias_tensors.alias_if_tensor", "<builtin>.len"], "utils.misc.alias_tensors.alias_if_tensor": ["ops.array_ops.identity", "<builtin>.isinstance"], "ops.gen_math_ops.not_equal": [], "ops.gen_math_ops.maximum": [], "utils.py_func": [], "utils.py_func.wrap_py_func.match_arg_dtype": ["<builtin>.ValueError", "<builtin>.type"], "utils.py_func.wrap_py_func.f_wrapper": ["<builtin>.tuple", "<builtin>.enumerate"], "ops.script_ops.eager_py_func": ["ops.script_ops._eager_py_func"], "utils.tensors": [], "utils.tensor_list": [], "utils.tensor_list.dynamic_list_append": ["ops.list_ops.tensor_list_push_back", "<builtin>.isinstance"], "utils.tensor_list.TensorList.__init__": ["utils.tensor_list.TensorList.clear"], "utils.tensor_list.TensorList.clear": ["ops.list_ops.empty_tensor_list"], "utils.tensor_list.TensorList.append": ["ops.list_ops.tensor_list_push_back"], "utils.tensor_list.TensorList.pop": ["ops.list_ops.tensor_list_pop_back"], "utils.tensor_list.TensorList.count": ["ops.list_ops.tensor_list_length"], "utils.tensor_list.TensorList.__getitem__": ["ops.list_ops.tensor_list_get_item"], "utils.tensor_list.TensorList.__setitem__": ["ops.list_ops.tensor_list_set_item"], "layer_benchmarks.run_xprof": [], "layer_benchmarks.run_xprof.run_with_xprof": ["<builtin>.str", "profiler.profiler_v2.Profile", "profiler.profiler_v2.ProfilerOptions", "time.time", "<builtin>.range", "uuid.uuid4", "<builtin>.float"], "uuid.uuid4": [], "profiler.profiler_v2.ProfilerOptions": [], "time.time": [], "profiler.profiler_v2.Profile": [], "resnet50.resnet50": [], "resnet50.resnet50._IdentityBlock.__init__": ["keras.layers.BatchNormalization", "keras.layers.Conv2D", "<builtin>.super", "<builtin>.str"], "keras.layers.Conv2D": [], "keras.layers.BatchNormalization": [], "resnet50.resnet50._IdentityBlock.call": ["tensorflow.nn.relu"], "tensorflow.nn.relu": [], "resnet50.resnet50._ConvBlock.__init__": ["keras.layers.BatchNormalization", "keras.layers.Conv2D", "<builtin>.super", "<builtin>.str"], "resnet50.resnet50._ConvBlock.call": ["tensorflow.nn.relu"], "resnet50.resnet50.ResNet50.__init__": ["keras.layers.Flatten", "resnet50.resnet50.ResNet50.__init__.conv_block", "keras.layers.BatchNormalization", "keras.layers.Dense", "tensorflow.constant", "keras.layers.Conv2D", "<builtin>.ValueError", "resnet50.resnet50.ResNet50.__init__.id_block", "functools.partial", "keras.layers.AveragePooling2D", "<builtin>.super", "keras.layers.MaxPooling2D"], "resnet50.resnet50.ResNet50.__init__.conv_block": ["resnet50.resnet50._ConvBlock.__init__"], "resnet50.resnet50.ResNet50.__init__.id_block": ["resnet50.resnet50._IdentityBlock.__init__"], "keras.layers.MaxPooling2D": [], "keras.layers.AveragePooling2D": [], "keras.layers.Flatten": [], "keras.layers.Dense": [], "tensorflow.constant": [], "resnet50.resnet50.ResNet50.call": ["resnet50.resnet50._ConvBlock.__init__", "resnet50.resnet50._IdentityBlock.__init__", "tensorflow.nn.relu"], "saved_model_benchmarks.saved_model_benchmark_util": [], "saved_model_benchmarks.saved_model_benchmark_util.save_and_load_benchmark": ["<builtin>.range", "platform.gfile.MakeDirs", "platform.gfile.DeleteRecursively", "time.time", "tempfile.mkdtemp", "keras.models.load_model", "platform.test.get_temp_dir"], "platform.test.get_temp_dir": [], "platform.gfile.MakeDirs": [], "tempfile.mkdtemp": [], "keras.models.load_model": [], "platform.gfile.DeleteRecursively": [], "builds.check_system_libs": ["<builtin>.print", "<builtin>.sorted", "glob.glob", "os.path.isfile", "builds.check_system_libs.extract_valid_libs", "<builtin>.ValueError", "os.path.join", "os.path.isdir", "builds.check_system_libs.extract_system_builds", "sys.exit", "<builtin>.set"], "os.path.join": [], "os.path.isfile": [], "builds.check_system_libs.extract_valid_libs": ["<builtin>.set", "<builtin>.open", "<builtin>.exec"], "builds.check_system_libs.extract_valid_libs.repository_rule": [], "<builtin>.exec": [], "builds.check_system_libs.extract_system_builds": ["<builtin>.open"], "glob.glob": [], "sys.exit": [], "pip_package.setup": ["setuptools.find_packages", "version.__version__.replace", "setuptools.setup", "fnmatch.fnmatch", "os.listdir", "<builtin>.list", "pip_package.setup.find_files", "<builtin>.enumerate", "sys.argv.pop", "sys.argv.index", "<builtin>.len", "<builtin>.sorted", "os.path.isdir", "sys.argv.remove"], "version.__version__.replace": [], "setuptools.find_packages": [], "setuptools.setup": [], "tpu.tpu_cluster_resolver": ["platform.tf_logging.debug", "collections.namedtuple", "re.compile"], "platform.tf_logging.debug": ["platform.tf_logging.get_logger"], "tpu.tpu_cluster_resolver.is_running_in_gce": [], "tpu.tpu_cluster_resolver._LocalCloudTpuClient.api_available": [], "collections.namedtuple": [], "tpu.tpu_cluster_resolver.TPUClusterResolver.connect": ["tpu.tpu_strategy_util.initialize_tpu_system", "eager.remote.connect_to_cluster", "tpu.tpu_cluster_resolver.TPUClusterResolver.__init__"], "tpu.tpu_cluster_resolver.TPUClusterResolver.__init__": ["client.client.Client", "cloud_tpu_client.client.Client", "tpu.tpu_cluster_resolver.TPUClusterResolver._start_local_server"], "eager.remote.connect_to_cluster": ["eager.context.executing_eagerly", "<builtin>.enumerate", "copy.deepcopy", "<builtin>.isinstance", "python.pywrap_tfe.TF_PickUnusedPortOrDie", "platform.remote_utils.coordination_service_type", "eager.context.update_server_def", "eager.context.context", "eager.context.set_server_def", "absl.logging.info", "protobuf.tensorflow_server_pb2.ServerDef", "<builtin>.ValueError", "framework.ops.device", "distribute.device_util.canonicalize", "eager.context.get_server_def", "platform.remote_utils.get_default_communication_protocol", "distribute.device_util.current"], "tpu.tpu_strategy_util.initialize_tpu_system": ["eager.context.async_wait", "cluster_resolver.tpu_cluster_resolver.TPUClusterResolver", "<builtin>.str", "tpu.tpu._tpu_system_device_name", "protobuf.config_pb2.ConfigProto", "device.DeviceSpec.from_string", "eager.context.executing_eagerly", "framework.ops.device", "platform.tf_logging.warning", "framework.ops.executing_eagerly_outside_functions", "framework.errors.NotFoundError", "eager.function.defun", "eager.context.context", "tpu.tpu.initialize_system", "framework.ops.Graph", "gc.collect", "tpu.tpu_strategy_util.initialize_tpu_system._tpu_init_fn", "util.compat.as_text", "<builtin>.isinstance", "tpu.topology.Topology", "platform.tf_logging.info", "client.session.Session"], "tpu.tpu_cluster_resolver.TPUClusterResolver._get_device_dict_and_cores": ["collections.defaultdict"], "tpu.tpu_cluster_resolver.TPUClusterResolver._verify_and_return_same_core_count": ["<builtin>.len", "<builtin>.RuntimeError"], "<builtin>.RuntimeError": [], "client.client.Client": [], "cloud_tpu_client.client.Client": [], "tpu.tpu_cluster_resolver.TPUClusterResolver._start_local_server": ["util.compat.as_bytes", "<builtin>.len", "training.server_lib.Server", "util.compat.as_text"], "tpu.tpu_cluster_resolver.TPUClusterResolver.__enter__": [], "tpu.tpu_cluster_resolver.TPUClusterResolver.__exit__": [], "tpu.tpu_cluster_resolver.TPUClusterResolver.master": ["cluster_resolver.cluster_resolver.format_master_url", "tpu.tpu_cluster_resolver.TPUClusterResolver.cluster_spec", "<builtin>.ValueError"], "tpu.tpu_cluster_resolver.TPUClusterResolver.cluster_spec": ["training.server_lib.ClusterSpec"], "cluster_resolver.cluster_resolver.format_master_url": [], "tpu.tpu_cluster_resolver.TPUClusterResolver.get_master": ["tpu.tpu_cluster_resolver.TPUClusterResolver.master"], "tpu.tpu_cluster_resolver.TPUClusterResolver.get_job_name": [], "tpu.tpu_cluster_resolver.TPUClusterResolver.get_tpu_system_metadata": ["tpu.tpu_cluster_resolver.TPUClusterResolver.cluster_spec", "tpu.tpu_cluster_resolver.TPUClusterResolver.master", "tpu.tpu_system_metadata._query_tpu_system_metadata"], "tpu.tpu_system_metadata._query_tpu_system_metadata": ["tpu.tpu_system_metadata.get_session_config_with_timeout", "<builtin>.tuple", "<builtin>.sorted", "framework.config.list_logical_devices", "framework.ops.Graph", "collections.defaultdict", "<builtin>.RuntimeError", "platform.tf_logging.info", "<builtin>.len", "tpu.tpu_system_metadata._obtain_topology", "device.DeviceSpec.from_string", "platform.tf_logging.warning", "distribute.device_util.canonicalize", "client.session.Session", "client.session._DeviceAttributes", "<builtin>.set", "<builtin>.ValueError", "eager.context.executing_eagerly"], "training.server_lib.ClusterSpec": [], "tpu.tpu_cluster_resolver.TPUClusterResolver.num_accelerators": ["tpu.tpu_cluster_resolver.TPUClusterResolver._verify_and_return_same_core_count", "<builtin>.len", "cluster_resolver.cluster_resolver.get_accelerator_devices", "platform.tf_logging.warning", "tpu.tpu_cluster_resolver.TPUClusterResolver.master", "<builtin>.RuntimeError", "tpu.tpu_cluster_resolver.TPUClusterResolver._get_device_dict_and_cores", "framework.config.list_logical_devices"], "framework.config.list_logical_devices": ["eager.context.context"], "cluster_resolver.cluster_resolver.get_accelerator_devices": ["client.session.Session", "eager.context.executing_eagerly", "framework.config.list_logical_devices", "client.session._DeviceAttributes", "framework.ops.Graph"], "tpu.tpu_cluster_resolver.TPUClusterResolver.environment": [], "util.compat.as_text": ["<builtin>.TypeError", "<builtin>.isinstance"], "training.server_lib.Server": [], "util.compat.as_bytes": ["<builtin>.bytes", "<builtin>.TypeError", "<builtin>.isinstance"], "tpu.tpu_cluster_resolver.TPUClusterResolver.__deepcopy__": [], "update.generate_v2_renames_map": ["absl.app.run"], "update.generate_v2_renames_map.get_canonical_name": [], "update.generate_v2_renames_map.get_all_v2_names": ["common.traverse.traverse", "common.public_api.PublicAPIVisitor", "<builtin>.set"], "update.generate_v2_renames_map.get_all_v2_names.visit": ["util.tf_decorator.unwrap", "util.tf_export.get_v2_names"], "util.tf_export.get_v2_names": ["<builtin>.hasattr", "<builtin>.getattr"], "common.public_api.PublicAPIVisitor": [], "common.traverse.traverse": ["common.traverse._traverse_internal"], "update.generate_v2_renames_map.collect_constant_renames": ["sys.modules.values", "<builtin>.set", "util.tf_export.get_v2_constants", "update.generate_v2_renames_map.get_canonical_name", "util.tf_export.get_v1_constants"], "util.tf_export.get_v1_constants": ["<builtin>.hasattr", "<builtin>.getattr"], "util.tf_export.get_v2_constants": ["<builtin>.hasattr", "<builtin>.getattr"], "update.generate_v2_renames_map.collect_function_renames": ["common.traverse.traverse", "common.public_api.PublicAPIVisitor", "<builtin>.set", "update.generate_v2_renames_map.get_all_v2_names"], "update.generate_v2_renames_map.collect_function_renames.visit": ["util.tf_decorator.unwrap", "<builtin>.set", "util.tf_export.get_v1_names", "update.generate_v2_renames_map.get_canonical_name", "util.tf_export.get_v2_names"], "util.tf_export.get_v1_names": ["<builtin>.hasattr", "<builtin>.getattr"], "update.generate_v2_renames_map.get_rename_line": [], "update.generate_v2_renames_map.update_renames_v2": ["all_renames_v2.manual_symbol_renames.keys", "update.generate_v2_renames_map.collect_constant_renames", "<builtin>.set", "six.ensure_str", "io.file_io.write_string_to_file", "update.generate_v2_renames_map.collect_function_renames", "<builtin>.sorted", "update.generate_v2_renames_map.get_rename_line"], "all_renames_v2.manual_symbol_renames.keys": [], "io.file_io.write_string_to_file": ["io.file_io.FileIO.__init__"], "update.generate_v2_renames_map.main": ["update.generate_v2_renames_map.update_renames_v2"], "absl.app.run": [], "update.generate_v2_reorders_map": ["absl.app.run"], "update.generate_v2_reorders_map.collect_function_arg_names": ["common.public_api.PublicAPIVisitor", "common.traverse.traverse"], "update.generate_v2_reorders_map.collect_function_arg_names.visit": ["<builtin>.any", "util.tf_decorator.unwrap", "util.tf_inspect.getargspec", "<builtin>.getattr", "util.tf_inspect.isclass", "util.tf_export.get_v1_names"], "update.generate_v2_reorders_map.get_reorder_line": ["<builtin>.str"], "update.generate_v2_reorders_map.update_reorders_v2": ["io.file_io.write_string_to_file", "update.generate_v2_reorders_map.get_reorder_line", "<builtin>.sorted", "compatibility.tf_upgrade_v2.TFAPIChangeSpec", "update.generate_v2_reorders_map.collect_function_arg_names"], "compatibility.tf_upgrade_v2.TFAPIChangeSpec": [], "update.generate_v2_reorders_map.main": ["update.generate_v2_reorders_map.update_reorders_v2"], "mlir.mlir": ["util.tf_export.tf_export"], "mlir.mlir.convert_graph_def": ["python.pywrap_mlir.import_graphdef"], "python.pywrap_mlir.import_graphdef": ["<builtin>.str"], "mlir.mlir.convert_function": ["python.pywrap_mlir.import_function"], "python.pywrap_mlir.import_function": ["eager.context.context", "<builtin>.str"], "mlir.runlit.cfg": ["platform.system", "os.path.basename", "llvm.llvm_config.add_tool_substitutions", "llvm.subst.ToolSubst", "config.substitutions.append", "llvm.llvm_config.use_default_substitutions", "llvm.llvm_config.with_environment"], "platform.system": [], "llvm.subst.ToolSubst": [], "config.substitutions.append": [], "llvm.llvm_config.add_tool_substitutions": [], "llvm.llvm_config.use_default_substitutions": [], "llvm.llvm_config.with_environment": [], "mlir.runlit.site.cfg": ["os.path.join", "platform.system"], "tensorrt.trt_convert": ["util.deprecation.deprecated", "util.lazy_loader.LazyLoader", "<builtin>.globals", "<builtin>.RuntimeError", "platform.system"], "tensorrt.trt_convert._to_bytes": ["<builtin>.isinstance"], "tensorrt.trt_convert._to_string": ["<builtin>.isinstance"], "tensorrt.trt_convert.TrtPrecisionMode.supported_precision_modes": [], "tensorrt.trt_convert.supported_profile_strategies": [], "tensorrt.trt_convert.TrtConversionParams.__new__": ["<builtin>.super"], "tensorrt.trt_convert._check_conversion_params": ["tensorrt.trt_convert.TrtPrecisionMode.supported_precision_modes", "<builtin>.ValueError"], "tensorrt.trt_convert._check_trt_version_compatibility": ["<builtin>.str", "tensorrt.trt_convert._check_trt_version_compatibility.raise_trt_version_deprecated", "tensorrt.utils.is_loaded_tensorrt_version_greater_equal", "tensorrt.utils.is_linked_tensorrt_version_greater_equal", "platform.tf_logging.info", "<builtin>.RuntimeError", "platform.tf_logging.error", "tensorrt.utils.versionTupleToString"], "tensorrt.trt_convert._check_trt_version_compatibility.raise_trt_version_deprecated": ["<builtin>.RuntimeError", "platform.tf_logging.error", "tensorrt.utils.versionTupleToString"], "tensorrt.utils.versionTupleToString": [], "tensorrt.utils.is_linked_tensorrt_version_greater_equal": ["tensorrt.utils._is_tensorrt_version_greater_equal", "tf2tensorrt._pywrap_py_utils.get_linked_tensorrt_version"], "tensorrt.utils.is_loaded_tensorrt_version_greater_equal": ["tensorrt.utils._is_tensorrt_version_greater_equal", "tf2tensorrt._pywrap_py_utils.get_loaded_tensorrt_version"], "tensorrt.trt_convert._get_tensorrt_rewriter_config": ["tensorrt.trt_convert._to_bytes", "<builtin>.ValueError", "tensorrt.trt_convert._check_conversion_params", "<builtin>.isinstance", "protobuf.rewriter_config_pb2.RewriterConfig", "tensorrt.utils.disable_non_trt_optimizers_in_rewriter_config"], "protobuf.rewriter_config_pb2.RewriterConfig": [], "tensorrt.utils.disable_non_trt_optimizers_in_rewriter_config": [], "util.deprecation.deprecated": ["util.deprecation._validate_deprecation_args"], "tensorrt.trt_convert.get_tensorrt_rewriter_config": ["tensorrt.trt_convert._get_tensorrt_rewriter_config"], "tensorrt.trt_convert._get_canonical_engine_name": [], "tensorrt.trt_convert.TrtGraphConverter.__init__": ["platform.tf_logging.warn", "<builtin>.ValueError", "<builtin>.isinstance", "tensorrt.trt_convert._check_conversion_params", "<builtin>.RuntimeError", "tensorrt.trt_convert._check_trt_version_compatibility", "eager.context.executing_eagerly"], "eager.context.executing_eagerly": ["eager.context.context_safe"], "platform.tf_logging.warn": ["platform.tf_logging.get_logger"], "tensorrt.trt_convert.TrtGraphConverter._run_conversion": ["grappler.tf_optimizer.OptimizeGraph", "tensorrt.trt_convert._get_tensorrt_rewriter_config", "protobuf.config_pb2.ConfigProto"], "protobuf.config_pb2.ConfigProto": [], "grappler.tf_optimizer.OptimizeGraph": ["framework.graph_pb2.GraphDef", "<builtin>.type", "<builtin>.isinstance", "grappler._pywrap_tf_optimizer.TF_OptimizeGraph", "grappler.cluster.Cluster", "<builtin>.TypeError"], "tensorrt.trt_convert.TrtGraphConverter._add_nodes_denylist": ["tensorrt.trt_convert._to_bytes", "<builtin>.isinstance"], "tensorrt.trt_convert.TrtGraphConverter._convert_graph_def": ["tensorrt.trt_convert.TrtGraphConverter._add_nodes_denylist", "framework.importer.import_graph_def", "framework.ops.Graph", "training.saver.export_meta_graph", "tensorrt.trt_convert.TrtGraphConverter._run_conversion"], "framework.ops.Graph": ["util.deprecation.deprecated_args", "util.tf_contextlib.contextmanager", "util.traceback_utils.filter_traceback"], "framework.importer.import_graph_def": ["framework.importer._import_graph_def_internal"], "training.saver.export_meta_graph": ["framework.meta_graph.export_scoped_meta_graph", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "tensorrt.trt_convert.TrtGraphConverter._collections_to_keep": [], "tensorrt.trt_convert.TrtGraphConverter._convert_saved_model": ["<builtin>.list", "tensorrt.trt_convert.TrtGraphConverter._add_nodes_denylist", "saved_model.loader.load", "framework.ops.Graph", "framework.graph_util.convert_variables_to_constants", "tensorrt.trt_convert.TrtGraphConverter._convert_saved_model._gather_names", "protobuf.meta_graph_pb2.MetaGraphDef", "<builtin>.isinstance", "client.session.Session", "tensorrt.trt_convert.TrtGraphConverter._run_conversion", "tensorrt.trt_convert.TrtGraphConverter._collections_to_keep"], "client.session.Session": [], "saved_model.loader.load": [], "tensorrt.trt_convert.TrtGraphConverter._convert_saved_model._gather_names": [], "framework.graph_util.convert_variables_to_constants": [], "protobuf.meta_graph_pb2.MetaGraphDef": [], "tensorrt.trt_convert.TrtGraphConverter.convert": ["tensorrt.trt_convert.TrtGraphConverter._convert_graph_def", "tensorrt.trt_convert.TrtGraphConverter._convert_saved_model"], "tensorrt.trt_convert.TrtGraphConverter.calibrate": ["protobuf.config_pb2.GraphOptions", "framework.importer.import_graph_def", "ops.array_ops.placeholder", "framework.ops.Graph", "<builtin>.range", "<builtin>.ValueError", "<builtin>.isinstance", "protobuf.config_pb2.ConfigProto", "protobuf.rewriter_config_pb2.RewriterConfig", "client.session.Session", "tensorrt.utils.disable_non_trt_optimizers_in_rewriter_config"], "protobuf.config_pb2.GraphOptions": [], "ops.array_ops.placeholder": ["eager.context.executing_eagerly", "ops.gen_array_ops.placeholder", "<builtin>.RuntimeError"], "tensorrt.trt_convert.TrtGraphConverter.save": ["framework.importer.import_graph_def", "saved_model.builder.SavedModelBuilder", "framework.ops.Graph", "tensorrt.trt_convert.TrtGraphConverter.save._restore_collections", "<builtin>.ValueError", "client.session.Session", "tensorrt.trt_convert.TrtGraphConverter._collections_to_keep", "framework.ops.get_default_graph"], "tensorrt.trt_convert.TrtGraphConverter.save._restore_collections": ["<builtin>.int", "framework.ops.get_collection_proto_type", "framework.ops.get_from_proto_function", "framework.ops.prepend_name_scope", "platform.tf_logging.error", "<builtin>.getattr"], "framework.ops.get_from_proto_function": [], "framework.ops.get_collection_proto_type": [], "framework.ops.prepend_name_scope": ["platform.tf_logging.warning", "re.sub", "util.compat.as_str"], "saved_model.builder.SavedModelBuilder": [], "tensorrt.trt_convert._get_resource_handle": ["framework.ops.device"], "framework.ops.device": ["framework.ops.Graph.device", "eager.context.executing_eagerly", "<builtin>.callable", "eager.context.device", "framework.ops.get_default_graph", "util.tf_contextlib.contextmanager", "framework.ops.device.combined", "framework.ops.executing_eagerly_outside_functions", "<builtin>.RuntimeError"], "tensorrt.trt_convert._TRTEngineResource.__init__": ["tracking.tracking.Asset", "<builtin>.super", "tracking.TrackableResource._track_trackable"], "tracking.tracking.Asset": [], "tracking.TrackableResource._track_trackable": [], "tensorrt.trt_convert._TRTEngineResource._create_resource": ["tensorrt.trt_convert._get_resource_handle"], "tensorrt.trt_convert._TRTEngineResource._initialize": [], "tensorrt.trt_convert._TRTEngineResource._destroy_resource": ["tensorrt.trt_convert._get_resource_handle", "framework.ops.device", "ops.gen_resource_variable_ops.destroy_resource_op"], "ops.gen_resource_variable_ops.destroy_resource_op": [], "tensorrt.trt_convert.TrtGraphConverterV2._verify_profile_strategy": ["tensorrt.trt_convert.supported_profile_strategies", "<builtin>.ValueError"], "tensorrt.trt_convert.TrtGraphConverterV2.__init__": ["tensorrt.trt_convert.TrtGraphConverterV2._verify_profile_strategy", "tensorrt.trt_convert._check_trt_version_compatibility", "tensorrt.trt_convert._check_conversion_params", "eager.context.executing_eagerly"], "tensorrt.trt_convert.TrtGraphConverterV2._need_trt_profiles": [], "tensorrt.trt_convert.TrtGraphConverterV2._run_conversion": ["grappler.tf_optimizer.OptimizeGraph", "tensorrt.trt_convert._get_tensorrt_rewriter_config", "protobuf.config_pb2.ConfigProto"], "tensorrt.trt_convert.TrtGraphConverterV2._for_each_trt_node": ["tensorrt.trt_convert.TrtGraphConverterV2.save._serialize_and_track_engine", "tensorrt.trt_convert.TrtGraphConverterV2.save._reset_allow_build_at_runtime", "tensorrt.trt_convert.TrtGraphConverterV2.convert._save_calibration_table"], "tensorrt.trt_convert.TrtGraphConverterV2.save._serialize_and_track_engine": ["os.path.join", "tensorrt.trt_convert._TRTEngineResource.__init__", "platform.tf_logging.info", "tensorrt.trt_convert._get_canonical_engine_name"], "tensorrt.trt_convert.TrtGraphConverterV2.save._reset_allow_build_at_runtime": [], "tensorrt.trt_convert.TrtGraphConverterV2.convert._save_calibration_table": ["tensorrt.trt_convert._get_canonical_engine_name"], "tensorrt.trt_convert.TrtGraphConverterV2._rebuild_func": ["eager.wrap_function.function_from_graph_def", "util.nest.pack_sequence_as"], "eager.wrap_function.function_from_graph_def": ["util.nest.map_structure", "eager.wrap_function.wrap_function", "eager.wrap_function.WrappedFunction.prune"], "util.nest.pack_sequence_as": ["<builtin>.isinstance", "util.nest._packed_nest_with_indices", "util._pywrap_utils.FlattenForData", "<builtin>.ValueError", "<builtin>.len", "util.nest._sequence_like", "util._pywrap_utils.IsSequenceForData", "<builtin>.TypeError", "util.nest._pack_sequence_as"], "tensorrt.trt_convert.TrtGraphConverterV2.convert": ["tensorrt.trt_convert.TrtGraphConverterV2._rebuild_func", "util.nest.pack_sequence_as", "framework.convert_to_constants.convert_variables_to_constants_v2", "training.saver.export_meta_graph", "tensorrt.trt_convert.TrtGraphConverterV2._for_each_trt_node", "platform.tf_logging.info", "<builtin>.ValueError", "<builtin>.map", "tensorrt.trt_convert.TrtGraphConverterV2._run_conversion", "saved_model.load.load", "eager.context.context", "eager.wrap_function.function_from_graph_def", "protobuf.meta_graph_pb2.CollectionDef"], "saved_model.load.load": ["saved_model.load.load_internal"], "framework.convert_to_constants.convert_variables_to_constants_v2": ["framework.convert_to_constants._FunctionConverterData.__init__", "framework.convert_to_constants._replace_variables_by_constants", "framework.convert_to_constants._construct_concrete_function"], "protobuf.meta_graph_pb2.CollectionDef": [], "eager.context.context": ["eager.context._create_context"], "tensorrt.trt_convert.TrtGraphConverterV2.build": ["tensorrt.trt_convert.TrtGraphConverterV2._rebuild_func", "functools.partial", "<builtin>.NotImplementedError", "tensorrt.trt_convert.TrtGraphConverterV2._need_trt_profiles", "<builtin>.map", "<builtin>.RuntimeError", "tensorrt.trt_convert.TrtGraphConverterV2._for_each_trt_node"], "tensorrt.trt_convert.TrtGraphConverterV2.build._set_profile_generation_mode": [], "tensorrt.trt_convert.TrtGraphConverterV2.save": ["<builtin>.NotImplementedError", "util.nest.pack_sequence_as", "tensorrt.trt_convert.TrtGraphConverterV2._need_trt_profiles", "tempfile.mkdtemp", "eager.wrap_function.function_from_graph_def", "tensorrt.trt_convert.TrtGraphConverterV2._for_each_trt_node"], "tensorrt.trt_convert.create_inference_graph": ["tensorrt.trt_convert.TrtGraphConverter.__init__", "tensorrt.trt_convert.TrtGraphConverter.save", "tensorrt.trt_convert.TrtGraphConverter.convert"], "tensorrt.trt_convert_windows": ["platform.system", "<builtin>.RuntimeError"], "tensorrt.trt_convert_windows.TrtConversionParams.__new__": ["<builtin>.NotImplementedError"], "tensorrt.trt_convert_windows.TrtConverterWindows.__init__": ["<builtin>.NotImplementedError"], "tensorrt.utils": [], "tensorrt.utils._version_tuple_to_string": ["<builtin>.len", "<builtin>.str", "<builtin>.isinstance"], "tensorrt.utils._is_tensorrt_version_greater_equal": ["distutils.version.LooseVersion", "tensorrt.utils._version_tuple_to_string"], "distutils.version.LooseVersion": [], "tf2tensorrt._pywrap_py_utils.get_linked_tensorrt_version": [], "tf2tensorrt._pywrap_py_utils.get_loaded_tensorrt_version": [], "xla.jit": ["util.tf_export.tf_export", "contextlib.contextmanager"], "xla.jit._XlaScope.__init__": [], "xla.jit.experimental_jit_scope": ["xla.jit._XlaScope.__init__", "framework.ops.get_default_graph", "<builtin>.RuntimeError", "framework.attr_value_pb2.AttrValue", "<builtin>.callable", "framework.ops.get_collection", "eager.context.executing_eagerly", "<builtin>.bool", "framework.ops.add_to_collection"], "xla.jit.experimental_jit_scope.xla_compile": ["framework.attr_value_pb2.AttrValue"], "framework.attr_value_pb2.AttrValue": [], "framework.ops.get_collection": ["framework.ops.Graph.get_collection", "framework.ops.get_default_graph"], "framework.ops.add_to_collection": ["framework.ops.Graph.add_to_collection", "framework.ops.get_default_graph"], "xla.xla": ["util.tf_export.tf_export", "<builtin>.set", "contextlib.contextmanager", "util.deprecation.deprecated"], "xla.xla.compile": ["xla.xla.compile.xla_compile_wrapper", "eager.context.executing_eagerly", "xla.xla._compile_internal"], "xla.xla.compile.xla_compile_wrapper": ["xla.xla._compile_internal"], "xla.xla._compile_internal": ["xla.xla.XLACompileContext.__init__", "util.nest.pack_sequence_as", "control_flow_ops.XLAControlFlowContext.ExitResult", "ops.variable_scope.get_variable_scope", "<builtin>.enumerate", "framework.ops.get_default_graph", "ops.array_ops.identity", "framework.ops.control_dependencies", "util.nest.flatten", "<builtin>.isinstance", "xla.xla.XLACompileContext.report_unsupported_operations", "<builtin>.TypeError", "xla.xla._postprocess_non_flat_outputs", "control_flow_ops.XLAControlFlowContext.Exit", "xla.xla.is_flat", "xla.xla._disable_summary_context", "xla.xla._postprocess_flat_outputs", "ops.xla_ops.xla_cluster_output", "control_flow_ops.XLAControlFlowContext.Enter", "ops.control_flow_ops.group", "ops.control_flow_ops.no_op", "framework.ops.convert_to_tensor"], "xla.xla.XLACompileContext.__init__": ["util.compat.as_bytes", "<builtin>.super"], "xla.xla.XLACompileContext.report_unsupported_operations": ["<builtin>.len", "platform.tf_logging.warning"], "xla.xla.XLACompileContext._RemoveExternalControlEdges": [], "xla.xla.XLACompileContext.AddOp": ["<builtin>.len", "framework.ops.control_dependencies", "ops.array_ops.identity", "framework.attr_value_pb2.AttrValue", "XLAControlFlowContext._outer_context.AddInnerOp", "six.moves.xrange", "platform.tf_logging.error", "<builtin>.any", "XLAControlFlowContext._values.update", "control_flow_ops.XLAControlFlowContext.Exit", "xla.xla.XLACompileContext.AddValue", "control_flow_ops.XLAControlFlowContext.Enter", "_outer_context._values.update", "xla.xla.XLACompileContext._RemoveExternalControlEdges", "<builtin>.NotImplementedError", "<builtin>.ValueError"], "six.moves.xrange": [], "xla.xla.XLACompileContext.AddValue": ["XLAControlFlowContext._external_values.get", "XLAControlFlowContext._values.add", "XLAControlFlowContext._outer_context.AddValue"], "control_flow_ops.XLAControlFlowContext.Enter": [], "control_flow_ops.XLAControlFlowContext.Exit": [], "_outer_context._values.update": [], "XLAControlFlowContext._values.update": [], "XLAControlFlowContext._outer_context.AddInnerOp": [], "XLAControlFlowContext._external_values.get": [], "XLAControlFlowContext._values.add": [], "XLAControlFlowContext._outer_context.AddValue": [], "xla.xla.XLACompileContext.AddInnerOp": ["XLAControlFlowContext._outer_context.AddInnerOp", "xla.xla.XLACompileContext.AddOp"], "xla.xla.XLACompileContext.grad_state": [], "xla.xla.XLACompileContext.back_prop": ["control_flow_ops.XLAControlFlowContext.GetWhileContext"], "control_flow_ops.XLAControlFlowContext.GetWhileContext": [], "ops.control_flow_ops.no_op": [], "ops.variable_scope.get_variable_scope": ["ops.variable_scope.get_variable_scope_store"], "xla.xla._disable_summary_context": [], "xla.xla.is_flat": ["<builtin>.hasattr", "<builtin>.isinstance"], "xla.xla._postprocess_flat_outputs": ["ops.array_ops.identity", "<builtin>.tuple", "<builtin>.isinstance", "<builtin>.str", "framework.ops.device", "ops.control_flow_ops.no_op", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "xla.xla._postprocess_non_flat_outputs": ["ops.array_ops.identity", "util.nest.flatten", "<builtin>.isinstance", "<builtin>.str", "framework.ops.device", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "control_flow_ops.XLAControlFlowContext.ExitResult": [], "ops.control_flow_ops.group": ["framework.ops.name_scope", "<builtin>.sorted", "ops.control_flow_ops._GroupControlDeps", "framework.ops.control_dependencies", "<builtin>.ValueError", "<builtin>.len", "util.nest.flatten", "eager.context.executing_eagerly", "<builtin>.type", "<builtin>.hasattr", "<builtin>.TypeError"], "ops.xla_ops.xla_cluster_output": [], "xla.xla._disable_summary_context.<lambda1>": [], "xla.xla._CapturedObject.__init__": [], "xla.xla._CapturedObject.capture": ["<builtin>.RuntimeError"], "xla.xla._CapturedObject.get": [], "xla.xla._get_scaffold": ["<builtin>.ValueError"], "xla.xla.check_function_argument_count": ["util.tf_inspect.getargspec", "<builtin>.len", "xla.xla.check_function_argument_count.format_error"], "xla.xla.check_function_argument_count.format_error": [], "data.cuda_compute_capability": ["absl.app.run"], "data.cuda_compute_capability.retrieve_from_web": ["six.ensure_str", "data.cuda_compute_capability.create_gpu_capa_map", "request.request.urlopen", "re.search"], "request.request.urlopen": [], "data.cuda_compute_capability.create_gpu_capa_map": ["six.ensure_str", "data.cuda_compute_capability.write_csv_from_dict", "<builtin>.list", "collections.OrderedDict", "<builtin>.len"], "data.cuda_compute_capability.retrieve_from_golden": ["<builtin>.open", "<builtin>.dict"], "collections.OrderedDict": [], "data.cuda_compute_capability.write_csv_from_dict": ["data.cuda_compute_capability.check_with_golden", "six.ensure_str", "<builtin>.open", "<builtin>.print", "six.iteritems"], "six.iteritems": [], "data.cuda_compute_capability.check_with_golden": ["six.ensure_str", "<builtin>.open", "difflib.unified_diff", "os.path.isfile", "<builtin>.print"], "difflib.unified_diff": [], "data.cuda_compute_capability.print_dict": ["<builtin>.print"], "data.cuda_compute_capability.main": ["absl.app.UsageError", "<builtin>.len", "data.cuda_compute_capability.retrieve_from_web"], "absl.app.UsageError": [], "benchmarks.batch_benchmark": ["benchmark_base.test.main"], "benchmarks.batch_benchmark.BatchBenchmark.benchmark_batch_sparse": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.from_tensors", "numpy.arange", "framework.sparse_tensor.SparseTensor"], "numpy.arange": [], "framework.sparse_tensor.SparseTensor": [], "dataset_ops.Dataset.from_tensors": [], "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark": [], "benchmarks.batch_benchmark.BatchBenchmark._benchmark_batch_dense": ["numpy.random.rand", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.from_tensors", "ops.options.Options"], "numpy.random.rand": [], "ops.options.Options": ["util.options.create_option"], "benchmarks.batch_benchmark.BatchBenchmark.benchmark_batch_dense": ["benchmarks.batch_benchmark.BatchBenchmark._benchmark_batch_dense"], "benchmarks.batch_benchmark.BatchBenchmark.benchmark_parallel_batch": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "<builtin>.str", "dataset_ops.Dataset.range"], "benchmarks.batch_benchmark.BatchBenchmark.benchmark_parallel_batch.f": ["ops.random_ops.random_uniform"], "ops.random_ops.random_uniform": ["ops.gen_random_ops.random_uniform", "<builtin>.ValueError", "framework.ops.convert_to_tensor", "ops.math_ops.multiply", "framework.ops.name_scope", "<builtin>.isinstance", "ops.gen_random_ops.random_uniform_int", "ops.math_ops.add", "framework.tensor_util.shape_tensor", "framework.random_seed.get_seed", "framework.tensor_util.maybe_set_static_shape", "framework.dtypes.as_dtype"], "dataset_ops.Dataset.range": [], "benchmark_base.test.main": [], "benchmarks.benchmark_base": [], "benchmarks.benchmark_base.DatasetBenchmarkBase._run_eager_benchmark": ["<builtin>.range", "time.time", "eager.context.executing_eagerly", "<builtin>.RuntimeError", "numpy.median", "<builtin>.iter", "<builtin>.next"], "numpy.median": [], "benchmarks.benchmark_base.DatasetBenchmarkBase._run_graph_benchmark": ["client.session.Session", "<builtin>.range", "time.time", "eager.context.executing_eagerly", "<builtin>.RuntimeError", "numpy.median"], "benchmarks.benchmark_base.DatasetBenchmarkBase.run_op_benchmark": ["eager.context.executing_eagerly", "benchmarks.benchmark_base.DatasetBenchmarkBase._run_graph_benchmark", "benchmarks.benchmark_base.DatasetBenchmarkBase._run_eager_benchmark"], "benchmarks.benchmark_base.DatasetBenchmarkBase.run_benchmark": ["ops.options.Options", "eager.context.executing_eagerly", "benchmarks.benchmark_base.DatasetBenchmarkBase._run_graph_benchmark", "benchmarks.benchmark_base.DatasetBenchmarkBase._run_eager_benchmark", "<builtin>.float", "ops.dataset_ops.make_initializable_iterator", "util.nest.flatten"], "ops.dataset_ops.make_initializable_iterator": ["ops.dataset_ops.DatasetV1Adapter.__init__", "ops.dataset_ops.DatasetV1._make_initializable_iterator"], "benchmarks.benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark": ["eager.context.executing_eagerly", "test.Benchmark.report_benchmark", "benchmarks.benchmark_base.DatasetBenchmarkBase.run_benchmark"], "test.Benchmark.report_benchmark": [], "benchmarks.filter_benchmark": ["benchmark_base.test.main"], "benchmarks.filter_benchmark.FilterBenchmark._benchmark": ["dataset_ops.Dataset.from_tensors", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark"], "benchmarks.filter_benchmark.FilterBenchmark.benchmark_simple_function": ["benchmarks.filter_benchmark.FilterBenchmark._benchmark"], "benchmarks.filter_benchmark.FilterBenchmark.benchmark_return_component_optimization": ["benchmarks.filter_benchmark.FilterBenchmark._benchmark"], "benchmarks.filter_benchmark.FilterBenchmark.benchmark_return_component_optimization.<lambda1>": [], "benchmarks.from_tensor_slices_benchmark": ["benchmark_base.test.main"], "benchmarks.from_tensor_slices_benchmark.SingleThreadedFlatMapDataset.__init__": ["<builtin>.super", "ops.gen_dataset_ops.flat_map_dataset", "ops.dataset_ops.StructuredFunctionWrapper", "benchmarks.from_tensor_slices_benchmark.SingleThreadedFlatMapDataset._transformation_name"], "benchmarks.from_tensor_slices_benchmark.SingleThreadedFlatMapDataset._transformation_name": [], "ops.dataset_ops.StructuredFunctionWrapper": [], "ops.gen_dataset_ops.flat_map_dataset": [], "benchmarks.from_tensor_slices_benchmark.SingleThreadedFlatMapDataset._functions": [], "benchmarks.from_tensor_slices_benchmark.SingleThreadedFlatMapDataset.element_spec": [], "benchmarks.from_tensor_slices_benchmark.FromTensorSlicesBenchmark.benchmark_slice_repeat_batch": ["dataset_ops.Dataset.from_tensor_slices", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "numpy.random.randn"], "numpy.random.randn": [], "dataset_ops.Dataset.from_tensor_slices": [], "benchmarks.from_tensor_slices_benchmark.FromTensorSlicesBenchmark.benchmark_reshape_slice_repeat": ["dataset_ops.Dataset.from_tensor_slices", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "numpy.random.randn"], "benchmarks.from_tensor_slices_benchmark.FromTensorSlicesBenchmark.benchmark_slice_repeat_sparse": ["framework.sparse_tensor.SparseTensor", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "numpy.arange", "benchmarks.from_tensor_slices_benchmark.FromTensorSlicesBenchmark.benchmark_slice_repeat_sparse.make_dataset"], "benchmarks.from_tensor_slices_benchmark.FromTensorSlicesBenchmark.benchmark_slice_repeat_sparse.make_dataset": ["ops.get_single_element.get_single_element", "dataset_ops.Dataset.from_tensors", "benchmarks.from_tensor_slices_benchmark.SingleThreadedFlatMapDataset.__init__"], "ops.get_single_element.get_single_element": ["<builtin>.TypeError", "<builtin>.isinstance"], "benchmarks.from_tensor_slices_benchmark.FromTensorSlicesBenchmark.benchmark_slice_batch_cache_repeat": ["dataset_ops.Dataset.from_tensor_slices", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "numpy.random.randn"], "benchmarks.interleave_benchmark": ["benchmark_base.test.main"], "benchmarks.interleave_benchmark._make_fake_dataset_fn": [], "benchmarks.interleave_benchmark._make_fake_dataset_fn.fake_dataset_fn": ["benchmarks.interleave_benchmark._make_fake_dataset_fn.fake_dataset_fn.make_dataset"], "benchmarks.interleave_benchmark._make_fake_dataset_fn.fake_dataset_fn.make_dataset": ["dataset_ops.Dataset.range", "ops.testing.sleep"], "ops.testing.sleep": [], "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.apply_interleave": ["ops.interleave_ops.parallel_interleave", "<builtin>.ValueError"], "ops.interleave_ops.parallel_interleave": [], "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.make_dataset": ["dataset_ops.Dataset.range", "benchmarks.interleave_benchmark._make_fake_dataset_fn", "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.apply_interleave"], "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark._benchmark": ["benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.make_dataset", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "<builtin>.str"], "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.benchmark_remote_file_simulation": ["<builtin>.enumerate", "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark._benchmark"], "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.benchmark_fast_input": ["<builtin>.enumerate", "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark._benchmark"], "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.benchmark_single_cycle": ["<builtin>.enumerate", "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark._benchmark"], "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.benchmark_single_parallel_call": ["benchmarks.interleave_benchmark.ParallelInterleaveBenchmark._benchmark"], "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark.benchmark_long_cycle": ["<builtin>.enumerate", "benchmarks.interleave_benchmark.ParallelInterleaveBenchmark._benchmark"], "benchmarks.list_files_benchmark": ["benchmark_base.test.main"], "benchmarks.list_files_benchmark.ListFilesBenchmark.benchmark_nested_directories": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.list_files", "os.makedirs", "shutil.rmtree", "<builtin>.range", "tempfile.mkdtemp", "<builtin>.str", "<builtin>.open", "os.path.join"], "dataset_ops.Dataset.list_files": [], "shutil.rmtree": [], "benchmarks.map_benchmark": ["benchmark_base.test.main"], "benchmarks.map_benchmark.MapBenchmark.benchmark_chain_of_maps": ["benchmarks.map_benchmark.MapBenchmark.benchmark_chain_of_maps.benchmark_helper"], "benchmarks.map_benchmark.MapBenchmark.benchmark_chain_of_maps.benchmark_helper": ["ops.dataset_ops.MapDataset", "<builtin>.range", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.range"], "ops.dataset_ops.MapDataset": [], "benchmarks.map_benchmark.MapBenchmark.benchmark_chain_of_maps.<lambda1>": [], "benchmarks.map_benchmark.MapBenchmark.benchmark_chain_of_maps.<lambda2>": [], "benchmarks.map_benchmark.MapBenchmark.benchmark_chain_of_maps.<lambda3>": [], "benchmarks.map_benchmark.MapBenchmark.benchmark_map_fan_out": ["benchmarks.map_benchmark.MapBenchmark.benchmark_map_fan_out.benchmark_helper"], "benchmarks.map_benchmark.MapBenchmark.benchmark_map_fan_out.benchmark_helper": ["<builtin>.tuple", "ops.dataset_ops.MapDataset", "<builtin>.range", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.from_tensors"], "benchmarks.map_benchmark.MapBenchmark.benchmark_map_fan_out.<lambda1>": [], "benchmarks.map_benchmark.MapBenchmark.benchmark_map_fan_out.<lambda2>": [], "benchmarks.map_benchmark.MapBenchmark.benchmark_map_fan_out.<lambda3>": [], "benchmarks.map_benchmark.MapBenchmark.benchmark_sequential_control_flow": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.from_tensors"], "benchmarks.map_benchmark.MapBenchmark.benchmark_sequential_control_flow.fn": ["framework.constant_op.constant", "ops.control_flow_ops.while_loop"], "benchmarks.map_benchmark.MapBenchmark.benchmark_sequential_control_flow.fn.body": ["ops.math_ops.add"], "ops.math_ops.add": ["ops.gen_math_ops.add_v2", "ops.gen_math_ops.add", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "benchmarks.map_benchmark.MapBenchmark.benchmark_parallel_control_flow": ["ops.random_ops.random_uniform", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.from_tensors"], "benchmarks.map_benchmark.MapBenchmark.benchmark_parallel_control_flow.fn": ["ops.map_fn.map_fn"], "benchmarks.map_benchmark.MapBenchmark.benchmark_parallel_control_flow.fn.<lambda1>": ["ops.array_ops.transpose"], "ops.array_ops.transpose": ["ops.gen_array_ops.rank", "framework.ops.convert_to_tensor", "ops.gen_array_ops.transpose", "numpy.arange", "ops.gen_array_ops.conjugate_transpose", "framework.tensor_util.is_tf_type", "framework.ops.name_scope", "ops.gen_math_ops._range"], "ops.map_fn.map_fn": ["ops.map_fn._most_general_compatible_type", "framework.tensor_shape.TensorShape", "ops.variable_scope.get_variable_scope", "framework.type_spec.type_spec_from_value", "<builtin>.TypeError", "ops.array_ops.shape", "util.nest.flatten", "ops.map_fn._result_batchable_to_flat", "<builtin>.zip", "ops.tensor_array_ops.TensorArray", "eager.context.executing_eagerly", "framework.tensor_shape.Dimension", "ops.map_fn.map_fn.<lambda2>", "<builtin>.len", "platform.tf_logging.log_first_n", "framework.ops.name_scope", "<builtin>.ValueError", "<builtin>.callable", "ops.map_fn._result_flat_signature_to_batchable_tensor_spec", "framework.tensor_shape.dimension_value", "framework.ops.convert_to_tensor_or_composite", "framework.constant_op.constant", "ops.map_fn._dtype_to_spec", "ops.map_fn.map_fn.<lambda1>", "ops.control_flow_ops.while_loop", "ops.map_fn._elems_flat_to_batchable"], "benchmarks.map_benchmark.MapBenchmark._benchmark_nested_parallel_map": ["<builtin>.str", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.range"], "benchmarks.map_benchmark.MapBenchmark._benchmark_nested_parallel_map.g": ["numpy.random.rand"], "benchmarks.map_benchmark.MapBenchmark._benchmark_nested_parallel_map.f": ["dataset_ops.Dataset.range"], "benchmarks.map_benchmark.MapBenchmark.benchmark_nested_parallel_map": ["benchmarks.map_benchmark.MapBenchmark._benchmark_nested_parallel_map"], "benchmarks.meta_benchmark": ["platform.test.main"], "benchmarks.meta_benchmark.MetaBenchmark.setup_fast_dataset": ["ops.options.Options", "dataset_ops.Dataset.range"], "benchmarks.meta_benchmark.MetaBenchmark.benchmark_fast_dataset_with_only_cpp_iterations": ["benchmarks.meta_benchmark.MetaBenchmark.setup_fast_dataset", "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_only_cpp_iterations"], "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_only_cpp_iterations": ["benchmarks.meta_benchmark.MetaBenchmark.report", "<builtin>.range", "ops.dataset_ops.make_initializable_iterator", "client.session.Session", "timeit.timeit"], "benchmarks.meta_benchmark.MetaBenchmark.benchmark_fast_dataset_with_session_run": ["benchmarks.meta_benchmark.MetaBenchmark.setup_fast_dataset", "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_session_run"], "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_session_run": ["benchmarks.meta_benchmark.MetaBenchmark.report", "<builtin>.range", "ops.dataset_ops.make_initializable_iterator", "client.session.Session", "timeit.timeit"], "benchmarks.meta_benchmark.MetaBenchmark.benchmark_fast_dataset_with_session_callable": ["benchmarks.meta_benchmark.MetaBenchmark.setup_fast_dataset", "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_session_run"], "benchmarks.meta_benchmark.MetaBenchmark.benchmark_fast_dataset_in_eager": ["benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_in_eager", "eager.context.eager_mode", "benchmarks.meta_benchmark.MetaBenchmark.setup_fast_dataset"], "eager.context.eager_mode": ["eager.context.context"], "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_in_eager": ["<builtin>.iter", "<builtin>.range", "benchmarks.meta_benchmark.MetaBenchmark.report", "timeit.timeit"], "benchmarks.meta_benchmark.MetaBenchmark.setup_slow_dataset": ["benchmarks.meta_benchmark.MetaBenchmark.setup_fast_dataset", "ops.testing.sleep"], "benchmarks.meta_benchmark.MetaBenchmark.benchmark_slow_dataset_with_only_cpp_iterations": ["benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_only_cpp_iterations", "benchmarks.meta_benchmark.MetaBenchmark.setup_slow_dataset"], "benchmarks.meta_benchmark.MetaBenchmark.benchmark_slow_dataset_with_session_run": ["benchmarks.meta_benchmark.MetaBenchmark.setup_slow_dataset", "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_session_run"], "benchmarks.meta_benchmark.MetaBenchmark.benchmark_slow_dataset_with_session_callable": ["benchmarks.meta_benchmark.MetaBenchmark.setup_slow_dataset", "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_session_run"], "benchmarks.meta_benchmark.MetaBenchmark.benchmark_slow_dataset_in_eager": ["benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_in_eager", "eager.context.eager_mode", "benchmarks.meta_benchmark.MetaBenchmark.setup_slow_dataset"], "benchmarks.meta_benchmark.MetaBenchmark.report": ["test.Benchmark.report_benchmark", "numpy.min", "numpy.max", "numpy.mean", "numpy.array", "numpy.median"], "numpy.array": [], "numpy.mean": [], "numpy.min": [], "numpy.max": [], "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_in_eager.<lambda1>": ["<builtin>.next"], "timeit.timeit": [], "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_session_run.<lambda1>": [], "benchmarks.meta_benchmark.MetaBenchmark.run_benchmark_with_only_cpp_iterations.<lambda1>": [], "platform.test.main": [], "benchmarks.prefetch_benchmark": ["benchmark_base.test.main"], "benchmarks.prefetch_benchmark.PrefetchBenchmark.benchmark_prefetch": ["dataset_ops.Dataset.range", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark"], "benchmarks.range_benchmark": ["benchmark_base.test.main"], "benchmarks.range_benchmark.RangeBenchmark._benchmark_range": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "ops.options.Options", "dataset_ops.Dataset.range"], "benchmarks.range_benchmark.RangeBenchmark.benchmark_range_with_modeling": ["benchmarks.range_benchmark.RangeBenchmark._benchmark_range"], "benchmarks.range_benchmark.RangeBenchmark.benchmark_range_without_modeling": ["benchmarks.range_benchmark.RangeBenchmark._benchmark_range"], "ops.dataset_ops": ["<builtin>.globals", "util.tf_export.tf_export", "framework.auto_control_deps.register_acd_resource_resolver", "python.tf2.enabled", "framework.ops.NotDifferentiable", "util.lazy_loader.LazyLoader"], "framework.ops.NotDifferentiable": [], "ops.dataset_ops.DatasetV2.__init__": ["collections_abc.Iterable._track_trackable", "ops.dataset_ops.ConcatenateDataset._inputs", "<builtin>.AssertionError", "ops.dataset_ops._VariantDataset._inputs", "<builtin>.hasattr", "ops.options.Options", "ops.dataset_ops.DatasetV1Adapter._inputs", "ops.dataset_ops.DatasetV2._inputs", "ops.dataset_ops._VariantTracker.__init__", "framework.ops.get_default_graph", "weakref.proxy", "<builtin>.TypeError", "ops.dataset_ops.ZipDataset._inputs", "<builtin>.isinstance", "<builtin>.type"], "weakref.proxy": [], "ops.dataset_ops.DatasetV2.__init__.<lambda1>": [], "ops.dataset_ops._VariantTracker.__init__": ["<builtin>.super"], "collections_abc.Iterable._track_trackable": [], "ops.dataset_ops.ConcatenateDataset._inputs": [], "ops.dataset_ops.DatasetV1Adapter._inputs": ["ops.dataset_ops.UnaryDataset._inputs", "ops.dataset_ops.DatasetSource._inputs", "ops.dataset_ops.ZipDataset._inputs", "ops.dataset_ops.DatasetV1Adapter._inputs"], "ops.dataset_ops._VariantDataset._inputs": [], "ops.dataset_ops.ZipDataset._inputs": ["util.nest.flatten"], "ops.dataset_ops.DatasetV2._inputs": ["<builtin>.NotImplementedError"], "<builtin>.AssertionError": [], "ops.dataset_ops.DatasetV2._variant_tensor": ["<builtin>.ValueError"], "util.deprecation.deprecated_args": ["<builtin>.list", "util.deprecation.deprecated_args._get_arg_names_to_ok_vals", "util.deprecation._validate_deprecation_args", "<builtin>.ValueError"], "ops.dataset_ops.DatasetV2": ["util.deprecation.deprecated_args", "abc.abstractproperty", "abc.abstractmethod"], "ops.dataset_ops.DatasetV2._as_serialized_graph": ["ops.gen_dataset_ops.dataset_to_graph_v2", "ops.gen_dataset_ops.dataset_to_graph"], "ops.gen_dataset_ops.dataset_to_graph_v2": [], "ops.gen_dataset_ops.dataset_to_graph": [], "ops.dataset_ops.DatasetV2._trace_variant_creation": ["ops.dataset_ops._SnapshotDataset._functions", "ops.dataset_ops._GroupByWindowDataset._functions", "ops.dataset_ops.MapDataset._functions", "ops.dataset_ops.ParallelInterleaveDataset._functions", "eager.context.eager_mode", "ops.dataset_ops.FlatMapDataset._functions", "ops.dataset_ops._ScanDataset._functions", "<builtin>.isinstance", "ops.dataset_ops.DatasetV2._functions", "<builtin>.NotImplementedError", "framework.ops.device", "ops.dataset_ops.DatasetV1Adapter._functions", "framework.graph_pb2.GraphDef", "ops.dataset_ops.DatasetV2._as_serialized_graph", "ops.dataset_ops._TakeWhileDataset._functions", "<builtin>.AssertionError", "ops.dataset_ops.InterleaveDataset._functions", "ops.dataset_ops.FilterDataset._functions", "ops.dataset_ops.ParallelMapDataset._functions"], "framework.graph_pb2.GraphDef": [], "ops.dataset_ops._SnapshotDataset._functions": [], "ops.dataset_ops._GroupByWindowDataset._functions": [], "ops.dataset_ops._TakeWhileDataset._functions": [], "ops.dataset_ops.FlatMapDataset._functions": [], "ops.dataset_ops.MapDataset._functions": [], "ops.dataset_ops.ParallelInterleaveDataset._functions": [], "ops.dataset_ops.InterleaveDataset._functions": [], "ops.dataset_ops._ScanDataset._functions": [], "ops.dataset_ops.FilterDataset._functions": [], "ops.dataset_ops.DatasetV1Adapter._functions": ["ops.dataset_ops._SnapshotDataset._functions", "ops.dataset_ops._GroupByWindowDataset._functions", "ops.dataset_ops._TakeWhileDataset._functions", "ops.dataset_ops.FlatMapDataset._functions", "ops.dataset_ops.MapDataset._functions", "ops.dataset_ops.ParallelInterleaveDataset._functions", "ops.dataset_ops.InterleaveDataset._functions", "ops.dataset_ops._ScanDataset._functions", "ops.dataset_ops.FilterDataset._functions", "ops.dataset_ops.DatasetV1Adapter._functions", "ops.dataset_ops.ParallelMapDataset._functions", "ops.dataset_ops.DatasetV2._functions"], "ops.dataset_ops.ParallelMapDataset._functions": [], "ops.dataset_ops.DatasetV2._functions": [], "abc.abstractmethod": [], "ops.dataset_ops.DatasetV2._graph": ["<builtin>.ValueError"], "ops.dataset_ops.DatasetV2._options": ["ops.gen_dataset_ops.get_options"], "ops.gen_dataset_ops.get_options": [], "ops.dataset_ops.DatasetV2._options_tensor_to_options": ["framework.tensor_util.constant_value", "dataset_options_pb2.Options.FromString", "ops.options.Options"], "dataset_options_pb2.Options.FromString": [], "ops.dataset_ops.DatasetV2.options": ["ops.dataset_ops.DatasetV2._options", "warnings.warn", "ops.dataset_ops.DatasetV2._options_tensor_to_options", "eager.context.executing_eagerly"], "warnings.warn": [], "ops.dataset_ops.DatasetV2._apply_debug_options": ["ops.options.Options", "ops.dataset_ops._OptionsDataset.__init__"], "ops.dataset_ops._OptionsDataset.__init__": ["<builtin>.super", "framework.ops.colocate_with", "ops.gen_dataset_ops.options_dataset", "framework.dataset_options_pb2.Options"], "ops.dataset_ops.DatasetV2.__iter__": ["framework.ops.colocate_with", "ops.iterator_ops.OwnedIterator", "<builtin>.RuntimeError", "framework.ops.inside_function", "eager.context.executing_eagerly"], "framework.ops.inside_function": ["framework.ops.get_default_graph"], "framework.ops.colocate_with": ["framework.ops._colocate_with_for_gradient"], "ops.iterator_ops.OwnedIterator": ["util.deprecation.deprecated"], "ops.dataset_ops.DatasetV2.__bool__": [], "ops.dataset_ops.DatasetV2.__len__": ["<builtin>.TypeError", "eager.context.executing_eagerly", "ops.dataset_ops.DatasetV2.cardinality"], "ops.dataset_ops.DatasetV2.cardinality": ["ops.gen_dataset_ops.dataset_cardinality"], "abc.abstractproperty": [], "ops.dataset_ops.DatasetV2.element_spec": ["<builtin>.NotImplementedError"], "ops.dataset_ops.DatasetV2.__repr__": ["util.nest.map_structure", "ops.dataset_ops.get_legacy_output_shapes", "<builtin>.str", "<builtin>.type", "ops.dataset_ops.get_legacy_output_types"], "ops.dataset_ops.get_legacy_output_shapes": ["util.nest.map_structure", "ops.dataset_ops.get_structure"], "ops.dataset_ops.get_legacy_output_types": ["util.nest.map_structure", "ops.dataset_ops.get_structure"], "ops.dataset_ops.DatasetV2.as_numpy_iterator": ["ops.dataset_ops._NumpyIterator.__init__", "util.nest.flatten", "<builtin>.RuntimeError", "<builtin>.TypeError", "<builtin>.str", "<builtin>.isinstance", "eager.context.executing_eagerly"], "ops.dataset_ops._NumpyIterator.__init__": ["<builtin>.iter"], "ops.dataset_ops.DatasetV2._flat_shapes": ["util.structure.get_flat_tensor_shapes"], "util.structure.get_flat_tensor_shapes": ["util.structure.get_flat_tensor_specs"], "ops.dataset_ops.DatasetV2._flat_types": ["util.structure.get_flat_tensor_types"], "util.structure.get_flat_tensor_types": ["util.structure.get_flat_tensor_specs"], "ops.dataset_ops.DatasetV2._flat_structure": [], "ops.dataset_ops.DatasetV2._type_spec": ["ops.dataset_ops.DatasetSpec.__init__"], "ops.dataset_ops.DatasetSpec.__init__": ["framework.tensor_shape.as_shape"], "ops.dataset_ops.DatasetV2.from_tensors": ["ops.dataset_ops.TensorDataset.__init__"], "ops.dataset_ops.TensorDataset.__init__": ["util.structure.type_spec_from_value", "<builtin>.super", "util.structure.normalize_element", "util.structure.get_flat_tensor_shapes", "ops.gen_dataset_ops.tensor_dataset", "util.structure.to_tensor_list"], "ops.dataset_ops.DatasetV2.from_tensor_slices": ["ops.dataset_ops.TensorSliceDataset.__init__"], "ops.dataset_ops.TensorSliceDataset.__init__": ["framework.tensor_shape.Dimension", "util.structure.type_spec_from_value", "util.nest.map_structure", "util.structure.to_batched_tensor_list", "<builtin>.super", "ops.gen_dataset_ops.tensor_slice_dataset", "framework.tensor_shape.dimension_value", "util.structure.normalize_element", "util.structure.get_flat_tensor_shapes"], "ops.dataset_ops.DatasetV2._GeneratorState.__init__": ["threading.Lock"], "ops.dataset_ops.DatasetV2._GeneratorState.get_next_id": ["numpy.array"], "ops.dataset_ops.DatasetV2._GeneratorState.get_iterator": ["<builtin>.iter"], "ops.dataset_ops.DatasetV2._GeneratorState.iterator_completed": [], "ops.dataset_ops.DatasetV2.from_generator": ["util.nest.map_structure", "ops.dataset_ops.DatasetV1.flat_map", "<builtin>.tuple", "util.nest.pack_sequence_as", "util.nest.flatten", "<builtin>.callable", "util.nest.map_structure_up_to", "ops.dataset_ops.DatasetV2.from_tensors", "ops.dataset_ops.DatasetV1.from_tensors", "<builtin>.TypeError", "ops.dataset_ops.DatasetV2._GeneratorState.__init__", "<builtin>.all", "ops.dataset_ops.DatasetV2.flat_map", "<builtin>.isinstance", "framework.ops.convert_n_to_tensor"], "ops.dataset_ops.DatasetV2.from_generator.<lambda1>": ["framework.tensor_shape.TensorShape"], "framework.tensor_shape.TensorShape": [], "util.nest.map_structure_up_to": ["util.nest.flatten_up_to", "util.nest.pack_sequence_as", "util.nest.assert_shallow_structure", "<builtin>.ValueError", "<builtin>.zip", "util.nest.map_structure_with_tuple_paths_up_to"], "framework.ops.convert_n_to_tensor": ["framework.ops.internal_convert_n_to_tensor"], "ops.dataset_ops.DatasetV2.from_generator.get_iterator_id_fn": ["ops.script_ops.numpy_function"], "ops.script_ops.numpy_function": ["ops.script_ops.py_func_common"], "ops.dataset_ops.DatasetV2.from_generator.generator_next_fn": ["ops.dataset_ops.DatasetV2.zip", "ops.script_ops._eager_py_func", "util.nest.pack_sequence_as", "util.nest.flatten", "util.structure.get_flat_tensor_types", "framework.dtypes.as_dtype", "ops.script_ops.numpy_function"], "framework.dtypes.as_dtype": ["<builtin>.isinstance", "<builtin>.TypeError", "numpy.dtype", "<builtin>.hasattr"], "ops.dataset_ops.DatasetV2.from_generator.generator_next_fn.generator_py_func": ["util.structure.type_spec_from_value", "ops.dataset_ops.DatasetV2.zip", "ops.dataset_ops.DatasetV2._GeneratorState.get_iterator", "util.structure.are_compatible", "script_ops.FuncRegistry._convert", "<builtin>.ValueError", "util.nest.flatten_up_to", "<builtin>.TypeError", "<builtin>.next", "util.structure.normalize_element", "six.reraise", "util.structure.to_tensor_list", "sys.exc_info"], "util.nest.flatten_up_to": ["util.nest.assert_shallow_structure", "util.nest._yield_flat_up_to", "<builtin>.list"], "six.reraise": [], "ops.dataset_ops.DatasetV2.zip": ["ops.dataset_ops.ZipDataset.__init__"], "script_ops.FuncRegistry._convert": [], "util.structure.normalize_element": ["sparse_tensor.SparseTensor.from_value", "<builtin>.isinstance", "util.nest.flatten", "util.structure.type_spec_from_value", "<builtin>.zip", "util.nest.pack_sequence_as", "<builtin>.enumerate", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "composite_tensor.CompositeTensor.__init__", "<builtin>.getattr", "<builtin>.len", "framework.ops.convert_to_tensor", "util.nest.flatten_up_to", "framework.ops.name_scope"], "util.structure.type_spec_from_value": ["<builtin>.all", "<builtin>.isinstance", "util.structure.type_spec_from_value", "<builtin>.hasattr", "<builtin>.TypeError", "platform.tf_logging.vlog", "framework.ops.convert_to_tensor", "<builtin>.type", "<builtin>.tuple", "<builtin>.getattr", "framework.type_spec._type_spec_from_value", "util.structure.type_spec_from_value.<lambda1>"], "util.structure.are_compatible": ["<builtin>.zip", "util.nest.assert_same_structure", "util.nest.flatten"], "util.structure.to_tensor_list": ["util.structure._to_tensor_list_helper"], "ops.script_ops._eager_py_func": ["eager.context.context", "framework.ops.executing_eagerly_outside_functions", "framework.ops.device", "ops.script_ops._internal_py_func"], "ops.dataset_ops.DatasetV2.from_generator.finalize_fn": ["ops.script_ops.numpy_function"], "ops.dataset_ops.DatasetV2.from_generator.finalize_fn.finalize_py_func": ["ops.dataset_ops.DatasetV2._GeneratorState.iterator_completed", "numpy.array"], "ops.dataset_ops.DatasetV2.from_generator.flat_map_fn": ["ops.dataset_ops._GeneratorDataset.__init__"], "ops.dataset_ops._GeneratorDataset.__init__": ["util.structure.type_spec_from_value", "ops.dataset_ops._GeneratorDataset._transformation_name", "ops.gen_dataset_ops.generator_dataset", "<builtin>.super", "util.structure.to_tensor_list", "ops.dataset_ops.StructuredFunctionWrapper.__init__"], "ops.dataset_ops.DatasetV1.from_tensors": ["ops.dataset_ops.DatasetV2.from_tensors", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV2.flat_map": ["ops.dataset_ops.FlatMapDataset.__init__"], "ops.dataset_ops.DatasetV1.flat_map": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV2.range": ["ops.dataset_ops.RangeDataset.__init__"], "ops.dataset_ops.RangeDataset.__init__": ["<builtin>.super", "framework.tensor_spec.TensorSpec", "ops.dataset_ops.RangeDataset._parse_args", "ops.gen_dataset_ops.range_dataset"], "ops.dataset_ops.ZipDataset.__init__": ["util.nest.pack_sequence_as", "util.nest.flatten", "ops.gen_dataset_ops.zip_dataset", "<builtin>.super", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.dataset_ops.DatasetV2.concatenate": ["ops.dataset_ops.ConcatenateDataset.__init__"], "ops.dataset_ops.ConcatenateDataset.__init__": ["ops.dataset_ops.get_legacy_output_classes", "util.nest.pack_sequence_as", "util.nest.flatten", "<builtin>.super", "<builtin>.TypeError", "ops.gen_dataset_ops.concatenate_dataset", "ops.dataset_ops.get_legacy_output_types", "<builtin>.zip"], "ops.dataset_ops.DatasetV2.prefetch": ["ops.dataset_ops.PrefetchDataset.__init__"], "ops.dataset_ops.PrefetchDataset.__init__": ["framework.ops.convert_to_tensor", "ops.gen_dataset_ops.prefetch_dataset", "framework.ops.colocate_with", "<builtin>.super"], "ops.dataset_ops.DatasetV2.list_files": ["framework.ops.name_scope", "framework.ops.control_dependencies", "ops.math_ops.greater", "ops.math_ops.maximum", "ops.string_ops.reduce_join", "ops.array_ops.identity", "ops.control_flow_ops.Assert", "ops.dataset_ops.DatasetV2.shuffle", "ops.dataset_ops.DatasetV2.from_tensor_slices", "ops.gen_io_ops.matching_files", "ops.dataset_ops.DatasetV1.from_tensor_slices", "ops.array_ops.shape", "ops.math_ops.add", "framework.ops.convert_to_tensor", "ops.dataset_ops.DatasetV1.shuffle"], "ops.gen_io_ops.matching_files": [], "ops.math_ops.greater": [], "ops.string_ops.reduce_join": ["ops.string_ops.reduce_join_v2", "util.deprecation.deprecated_argument_lookup"], "ops.dataset_ops.DatasetV1.from_tensor_slices": ["ops.dataset_ops.DatasetV1Adapter.__init__", "ops.dataset_ops.DatasetV2.from_tensor_slices"], "ops.dataset_ops.DatasetV1.shuffle": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV2.shuffle": ["ops.dataset_ops.ShuffleDataset.__init__"], "ops.dataset_ops.DatasetV2.repeat": ["ops.dataset_ops.RepeatDataset.__init__"], "ops.dataset_ops.RepeatDataset.__init__": ["framework.ops.convert_to_tensor", "framework.constant_op.constant", "ops.gen_dataset_ops.repeat_dataset", "<builtin>.super"], "ops.dataset_ops.DatasetV2.enumerate": ["ops.dataset_ops.DatasetV1.zip", "numpy.iinfo", "ops.dataset_ops.DatasetV2.zip", "ops.dataset_ops.DatasetV1.range", "ops.dataset_ops.DatasetV2.range"], "numpy.iinfo": [], "ops.dataset_ops.DatasetV1.range": ["ops.dataset_ops.DatasetV1Adapter.__init__", "ops.dataset_ops.DatasetV2.range"], "ops.dataset_ops.DatasetV1.zip": ["ops.dataset_ops.DatasetV2.zip", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.ShuffleDataset.__init__": ["ops.gen_dataset_ops.dummy_seed_generator", "ops.gen_dataset_ops.shuffle_dataset", "python.tf2.enabled", "<builtin>.super", "framework.ops.inside_function", "util.random_seed.get_seed", "ops.gen_dataset_ops.shuffle_dataset_v3", "framework.ops.convert_to_tensor", "eager.context.executing_eagerly"], "ops.dataset_ops.DatasetV2.cache": ["ops.dataset_ops.CacheDataset.__init__"], "ops.dataset_ops.CacheDataset.__init__": ["ops.gen_dataset_ops.dummy_memory_cache", "python.tf2.enabled", "ops.gen_dataset_ops.cache_dataset", "ops.gen_dataset_ops.cache_dataset_v2", "<builtin>.super", "framework.ops.inside_function", "framework.ops.convert_to_tensor", "eager.context.executing_eagerly"], "ops.dataset_ops.DatasetV2.take": ["ops.dataset_ops.TakeDataset.__init__"], "ops.dataset_ops.TakeDataset.__init__": ["framework.ops.convert_to_tensor", "<builtin>.super", "ops.gen_dataset_ops.take_dataset"], "ops.dataset_ops.DatasetV2.skip": ["ops.dataset_ops.SkipDataset.__init__"], "ops.dataset_ops.SkipDataset.__init__": ["framework.ops.convert_to_tensor", "<builtin>.super", "ops.gen_dataset_ops.skip_dataset"], "ops.dataset_ops.DatasetV2.shard": ["ops.dataset_ops.ShardDataset.__init__"], "ops.dataset_ops.ShardDataset.__init__": ["framework.ops.convert_to_tensor", "ops.gen_dataset_ops.shard_dataset", "<builtin>.super"], "ops.dataset_ops.DatasetV2.batch": ["warnings.warn", "ops.dataset_ops.BatchDataset.__init__", "ops.dataset_ops.ParallelBatchDataset.__init__"], "ops.dataset_ops.BatchDataset.__init__": ["framework.tensor_util.constant_value", "util.nest.map_structure", "ops.gen_dataset_ops.batch_dataset_v2", "<builtin>.super", "framework.ops.convert_to_tensor"], "ops.dataset_ops.ParallelBatchDataset.__init__": ["framework.tensor_util.constant_value", "util.nest.map_structure", "<builtin>.super", "ops.gen_dataset_ops.parallel_batch_dataset", "framework.ops.convert_to_tensor"], "ops.dataset_ops.DatasetV2.padded_batch": ["util.nest.flatten", "<builtin>.ValueError", "ops.dataset_ops.get_legacy_output_shapes", "ops.dataset_ops.PaddedBatchDataset.__init__", "<builtin>.all"], "ops.dataset_ops.PaddedBatchDataset.__init__": ["util.nest.flatten_up_to", "util.structure.get_flat_tensor_shapes", "ops.dataset_ops._padded_shape_to_tensor", "ops.dataset_ops.get_legacy_output_types", "ops.dataset_ops._padding_values_or_default", "util.nest.map_structure", "ops.dataset_ops.get_legacy_output_classes", "util.nest.flatten", "ops.dataset_ops.get_legacy_output_shapes", "util.structure.convert_legacy_structure", "util.nest.pack_sequence_as", "util.nest.map_structure_up_to", "ops.gen_dataset_ops.padded_batch_dataset", "framework.ops.convert_to_tensor", "framework.smart_cond.smart_constant_value", "<builtin>.zip", "<builtin>.super", "util.nest.is_sequence", "ops.gen_dataset_ops.padded_batch_dataset_v2"], "ops.dataset_ops.DatasetV2.map": ["warnings.warn", "ops.dataset_ops.ParallelMapDataset.__init__", "ops.dataset_ops.MapDataset.__init__"], "ops.dataset_ops.MapDataset.__init__": ["ops.dataset_ops.MapDataset._transformation_name", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "ops.gen_dataset_ops.map_dataset", "<builtin>.super"], "ops.dataset_ops.ParallelMapDataset.__init__": ["ops.gen_dataset_ops.parallel_map_dataset_v2", "ops.dataset_ops.ParallelMapDataset._transformation_name", "<builtin>.super", "framework.ops.convert_to_tensor", "ops.dataset_ops.StructuredFunctionWrapper.__init__"], "ops.dataset_ops.FlatMapDataset.__init__": ["ops.dataset_ops.FlatMapDataset._transformation_name", "<builtin>.super", "<builtin>.TypeError", "<builtin>.isinstance", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "<builtin>.type", "ops.gen_dataset_ops.flat_map_dataset"], "ops.dataset_ops.DatasetV2.interleave": ["ops.dataset_ops.InterleaveDataset.__init__", "warnings.warn", "ops.dataset_ops.ParallelInterleaveDataset.__init__"], "ops.dataset_ops.InterleaveDataset.__init__": ["ops.gen_dataset_ops.interleave_dataset", "<builtin>.super", "<builtin>.type", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "ops.dataset_ops.InterleaveDataset._transformation_name"], "ops.dataset_ops.ParallelInterleaveDataset.__init__": ["ops.dataset_ops.ParallelInterleaveDataset._transformation_name", "ops.gen_dataset_ops.parallel_interleave_dataset_v4", "<builtin>.super", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "<builtin>.type"], "ops.dataset_ops.DatasetV2.filter": ["ops.dataset_ops.FilterDataset.__init__"], "ops.dataset_ops.FilterDataset.__init__": ["framework.tensor_spec.TensorSpec", "<builtin>.ValueError", "<builtin>.super", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "ops.gen_dataset_ops.filter_dataset", "ops.dataset_ops.FilterDataset._transformation_name"], "ops.dataset_ops.DatasetV2.apply": ["<builtin>.isinstance", "<builtin>.TypeError"], "ops.dataset_ops.DatasetV2.window": ["ops.dataset_ops.WindowDataset.__init__"], "ops.dataset_ops.WindowDataset.__init__": ["ops.dataset_ops.DatasetSpec.__init__", "ops.dataset_ops.get_legacy_output_classes", "util.structure.convert_legacy_structure", "util.nest.pack_sequence_as", "util.nest.flatten", "ops.dataset_ops.get_legacy_output_shapes", "<builtin>.super", "ops.gen_dataset_ops.window_dataset", "framework.ops.convert_to_tensor", "ops.dataset_ops.get_legacy_output_types", "<builtin>.zip"], "ops.dataset_ops.DatasetV2.reduce": ["framework.ops.name_scope", "util.structure.type_spec_from_value", "util.nest.map_structure", "ops.dataset_ops.DatasetV2.zip", "util.structure.convert_legacy_structure", "util.nest.pack_sequence_as", "util.nest.flatten", "ops.gen_dataset_ops.reduce_dataset", "ops.dataset_ops.DatasetV2._apply_debug_options", "util.structure.to_tensor_list", "util.structure.get_flat_tensor_types", "framework.ops.get_default_graph", "util.structure.normalize_element", "<builtin>.TypeError", "util.structure.from_compatible_tensor_list", "util.structure.get_flat_tensor_shapes", "<builtin>.issubclass", "ops.dataset_ops.StructuredFunctionWrapper.__init__"], "ops.dataset_ops.StructuredFunctionWrapper.__init__": ["warnings.warn", "eager.def_function.functions_run_eagerly", "util.structure.convert_legacy_structure", "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_legacy_function.<lambda1>", "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_py_function", "<builtin>.ValueError", "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_legacy_function", "framework.ops.get_default_graph", "<builtin>.len", "eager.context.executing_eagerly", "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_tf_function"], "ops.dataset_ops.DatasetV2.reduce.<lambda1>": [], "ops.dataset_ops.DatasetV2.reduce.<lambda2>": [], "ops.dataset_ops.DatasetV2.reduce.<lambda3>": [], "util.structure.convert_legacy_structure": ["<builtin>.isinstance", "util.nest.flatten", "<builtin>.TypeError", "framework.sparse_tensor.SparseTensorSpec", "<builtin>.zip", "ops.tensor_array_ops.TensorArraySpec", "util.nest.pack_sequence_as", "framework.tensor_spec.TensorSpec", "<builtin>.issubclass", "framework.tensor_shape.dimension_value"], "ops.gen_dataset_ops.reduce_dataset": [], "util.structure.from_compatible_tensor_list": ["util.structure._from_tensor_list_helper"], "ops.dataset_ops.DatasetV2.get_single_element": ["util.structure.from_compatible_tensor_list", "ops.gen_dataset_ops.dataset_to_single_element"], "ops.gen_dataset_ops.dataset_to_single_element": [], "ops.dataset_ops.DatasetV2.unbatch": ["ops.dataset_ops.normalize_to_dense", "ops.dataset_ops._UnbatchDataset.__init__"], "ops.dataset_ops.normalize_to_dense": ["ops.dataset_ops._RestructuredDataset.__init__", "ops.dataset_ops.DatasetV2.map", "ops.dataset_ops._should_unpack"], "ops.dataset_ops._UnbatchDataset.__init__": ["framework.tensor_shape.Dimension", "util.nest.map_structure", "ops.gen_experimental_dataset_ops.unbatch_dataset", "<builtin>.ValueError", "<builtin>.super", "<builtin>.any", "ops.dataset_ops.get_structure"], "ops.dataset_ops.DatasetV2.with_options": ["ops.dataset_ops._OptionsDataset.__init__"], "ops.gen_dataset_ops.dataset_cardinality": [], "ops.dataset_ops.DatasetV2.group_by_window": ["ops.dataset_ops._GroupByWindowDataset.__init__", "<builtin>.ValueError"], "ops.dataset_ops.DatasetV2.group_by_window.constant_window_func": ["framework.ops.convert_to_tensor"], "ops.dataset_ops._GroupByWindowDataset.__init__": ["ops.dataset_ops._GroupByWindowDataset._make_window_size_func", "ops.dataset_ops._GroupByWindowDataset._make_key_func", "ops.dataset_ops._GroupByWindowDataset._make_reduce_func", "ops.gen_experimental_dataset_ops.group_by_window_dataset", "<builtin>.super"], "ops.dataset_ops.DatasetV2.bucket_by_sequence_length": ["ops.dataset_ops.DatasetV2.group_by_window", "framework.constant_op.constant", "<builtin>.ValueError", "<builtin>.len"], "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.element_to_bucket_id": ["numpy.iinfo", "ops.math_ops.reduce_min", "ops.math_ops.less", "ops.math_ops.less_equal", "<builtin>.list", "ops.array_ops.where", "ops.math_ops.logical_and"], "ops.math_ops.less_equal": [], "ops.math_ops.less": [], "ops.array_ops.where": ["<builtin>.ValueError", "ops.gen_math_ops.select", "framework.ops.convert_to_tensor", "ops.gen_array_ops.where", "framework.ops.name_scope"], "ops.math_ops.reduce_min": ["ops.math_ops._ReductionDims", "ops.gen_math_ops._min", "ops.math_ops._may_reduce_to_scalar", "<builtin>.bool"], "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.window_size_fn": [], "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.make_padded_shapes": ["util.nest.pack_sequence_as", "framework.tensor_shape.TensorShape", "util.nest.flatten", "framework.tensor_shape.dimension_value"], "framework.tensor_shape.dimension_value": ["<builtin>.isinstance"], "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.batching_fn": ["framework.ops.control_dependencies", "framework.constant_op.constant", "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.window_size_fn", "ops.dataset_ops.get_legacy_output_shapes", "ops.check_ops.assert_less", "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.make_padded_shapes", "<builtin>.len"], "ops.check_ops.assert_less": ["ops.check_ops._binary_assert"], "ops.dataset_ops.DatasetV2.random": ["ops.dataset_ops.RandomDataset.__init__"], "ops.dataset_ops.RandomDataset.__init__": ["<builtin>.super", "ops.gen_experimental_dataset_ops.random_dataset", "util.random_seed.get_seed"], "ops.dataset_ops.DatasetV2.snapshot": ["ops.dataset_ops._SnapshotDataset.__init__", "ops.dataset_ops.DatasetV2.enumerate", "ops.dataset_ops.DatasetV2.map"], "ops.dataset_ops.DatasetV2.snapshot.<lambda1>": ["multiprocessing.cpu_count"], "multiprocessing.cpu_count": [], "ops.dataset_ops.DatasetV2.snapshot.<lambda2>": [], "ops.dataset_ops._SnapshotDataset.__init__": ["ops.dataset_ops.DatasetSpec.__init__", "framework.tensor_spec.TensorSpec", "ops.dataset_ops._SnapshotDataset._transformation_name", "<builtin>.super", "<builtin>.TypeError", "ops.gen_experimental_dataset_ops.snapshot_dataset_v2", "ops.dataset_ops.StructuredFunctionWrapper.__init__"], "ops.dataset_ops.DatasetV2.scan": ["ops.dataset_ops._ScanDataset.__init__"], "ops.dataset_ops._ScanDataset.__init__": ["ops.gen_experimental_dataset_ops.scan_dataset", "util.structure.type_spec_from_value", "util.nest.map_structure", "util.structure.convert_legacy_structure", "util.nest.pack_sequence_as", "util.nest.flatten", "<builtin>.issubclass", "util.structure.to_tensor_list", "<builtin>.super", "framework.ops.get_default_graph", "util.structure.normalize_element", "<builtin>.TypeError", "<builtin>.len", "<builtin>.isinstance", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "ops.dataset_ops._ScanDataset._transformation_name", "<builtin>.zip"], "ops.dataset_ops.DatasetV2.take_while": ["ops.dataset_ops._TakeWhileDataset.__init__"], "ops.dataset_ops._TakeWhileDataset.__init__": ["framework.tensor_spec.TensorSpec", "<builtin>.ValueError", "<builtin>.super", "ops.gen_experimental_dataset_ops.take_while_dataset", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "ops.dataset_ops._TakeWhileDataset._transformation_name"], "ops.dataset_ops.DatasetV2.unique": ["ops.dataset_ops._UniqueDataset.__init__"], "ops.dataset_ops._UniqueDataset.__init__": ["ops.gen_experimental_dataset_ops.unique_dataset", "<builtin>.super", "ops.dataset_ops.get_legacy_output_types", "<builtin>.TypeError"], "ops.dataset_ops.DatasetV2.rejection_resample": ["ops.dataset_ops.DatasetV2.repeat", "ops.dataset_ops._filter_ds", "ops.dataset_ops._estimate_initial_dist_ds", "ops.dataset_ops._get_prob_original_static", "ops.dataset_ops.DatasetV2.prefetch", "ops.dataset_ops.DatasetV2.map", "ops.dataset_ops.DatasetV2.from_tensors", "ops.dataset_ops._calculate_acceptance_probs_with_mixing", "ops.math_ops.cast", "framework.ops.convert_to_tensor"], "ops.dataset_ops._calculate_acceptance_probs_with_mixing": ["ops.math_ops.reduce_min", "ops.dataset_ops._get_target_to_initial_ratio", "ops.math_ops.reduce_max"], "ops.dataset_ops._estimate_initial_dist_ds": ["ops.dataset_ops.DatasetV2.scan", "ops.array_ops.fill", "ops.dataset_ops.DatasetV2.batch", "ops.dataset_ops.DatasetV2.unbatch", "ops.array_ops.shape", "numpy.int64"], "ops.dataset_ops.DatasetV2.rejection_resample.<lambda1>": ["ops.dataset_ops._calculate_acceptance_probs_with_mixing"], "ops.dataset_ops.DatasetV2.rejection_resample.<lambda2>": [], "ops.dataset_ops.DatasetV2.rejection_resample.<lambda3>": [], "ops.dataset_ops._filter_ds": ["ops.dataset_ops.DatasetV2.map", "ops.dataset_ops.DatasetV2.zip", "ops.dataset_ops.DatasetV2.filter"], "ops.dataset_ops._get_prob_original_static": ["framework.tensor_util.constant_value", "numpy.min"], "ops.dataset_ops.DatasetV2.rejection_resample.add_class_value": ["<builtin>.len"], "ops.dataset_ops.DatasetV2.rejection_resample.<lambda4>": [], "ops.dataset_ops.DatasetV1.__init__": ["ops.dataset_ops.DatasetV1._as_variant_tensor", "<builtin>.AttributeError", "<builtin>.super", "ops.dataset_ops.DatasetV1Adapter._as_variant_tensor", "<builtin>.str"], "ops.dataset_ops.DatasetV1Adapter._as_variant_tensor": [], "ops.dataset_ops.DatasetV1._as_variant_tensor": ["<builtin>.NotImplementedError"], "<builtin>.AttributeError": [], "ops.dataset_ops.DatasetV1": ["util.deprecation.deprecated_args", "functools.wraps", "abc.abstractmethod", "util.deprecation.deprecated"], "ops.dataset_ops.DatasetV1.make_one_shot_iterator": ["ops.dataset_ops.DatasetV1._make_one_shot_iterator"], "ops.dataset_ops.DatasetV1._make_one_shot_iterator": ["framework.ops.colocate_with", "framework.function.Defun", "ops.iterator_ops.OwnedIterator", "ops.dataset_ops.get_legacy_output_classes", "util.traverse.obtain_capture_by_value_ops", "ops.dataset_ops._ensure_same_dataset_graph", "framework.random_seed.get_seed", "<builtin>.ValueError", "ops.dataset_ops.get_legacy_output_shapes", "ops.iterator_ops.Iterator", "framework.ops.get_default_graph", "six.reraise", "<builtin>.str", "ops.gen_dataset_ops.one_shot_iterator", "ops.dataset_ops.get_legacy_output_types", "eager.context.executing_eagerly"], "ops.dataset_ops._ensure_same_dataset_graph": ["<builtin>.str", "framework.ops.get_default_graph", "moves.queue.Queue", "<builtin>.ValueError"], "util.traverse.obtain_capture_by_value_ops": ["util.traverse._traverse"], "framework.random_seed.get_seed": ["framework.config.deterministic_ops_enabled", "<builtin>.RuntimeError", "<builtin>.hasattr", "eager.context.global_seed", "eager.context.executing_eagerly", "framework.random_seed._truncate_seed", "eager.context.internal_operation_seed", "framework.ops.get_default_graph"], "framework.function.Defun": [], "ops.dataset_ops.DatasetV1._make_one_shot_iterator._make_dataset": ["framework.random_seed.set_random_seed", "ops.dataset_ops.DatasetV2._apply_debug_options"], "framework.random_seed.set_random_seed": ["eager.context.executing_eagerly", "framework.ops.get_default_graph", "eager.context.set_global_seed"], "ops.gen_dataset_ops.one_shot_iterator": [], "ops.dataset_ops.get_legacy_output_classes": ["util.nest.map_structure", "ops.dataset_ops.get_structure"], "ops.iterator_ops.Iterator": ["util.deprecation.deprecated"], "ops.dataset_ops.DatasetV1.make_initializable_iterator": ["ops.dataset_ops.DatasetV1._make_initializable_iterator"], "ops.dataset_ops.DatasetV1._make_initializable_iterator": ["framework.ops.colocate_with", "ops.gen_dataset_ops.make_iterator", "ops.dataset_ops.get_legacy_output_classes", "ops.dataset_ops._ensure_same_dataset_graph", "ops.dataset_ops.get_legacy_output_shapes", "ops.dataset_ops.DatasetV2._apply_debug_options", "<builtin>.RuntimeError", "ops.iterator_ops.Iterator", "ops.gen_dataset_ops.iterator_v2", "ops.dataset_ops.get_legacy_output_types", "eager.context.executing_eagerly"], "ops.gen_dataset_ops.iterator_v2": [], "ops.gen_dataset_ops.make_iterator": [], "ops.dataset_ops.DatasetV1.output_classes": ["util.nest.map_structure"], "ops.dataset_ops.DatasetV1.output_classes.<lambda1>": [], "ops.dataset_ops.DatasetV1.output_shapes": ["util.nest.map_structure"], "ops.dataset_ops.DatasetV1.output_shapes.<lambda1>": [], "ops.dataset_ops.DatasetV1.output_types": ["util.nest.map_structure"], "ops.dataset_ops.DatasetV1.output_types.<lambda1>": [], "ops.dataset_ops.DatasetV1.element_spec": ["util.structure.convert_legacy_structure"], "functools.wraps": [], "ops.dataset_ops.DatasetV1Adapter.__init__": ["<builtin>.super"], "ops.dataset_ops.DatasetV1.from_sparse_tensor_slices": ["ops.dataset_ops.SparseTensorSliceDataset.__init__", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.SparseTensorSliceDataset.__init__": ["ops.gen_dataset_ops.sparse_tensor_slice_dataset", "framework.tensor_spec.TensorSpec", "<builtin>.super", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.dataset_ops.DatasetV1.from_generator": ["ops.dataset_ops.DatasetV2.from_generator", "util.deprecation.silence", "ops.dataset_ops.DatasetV1Adapter.__init__"], "util.deprecation.silence": [], "ops.dataset_ops.DatasetV1.concatenate": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.prefetch": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.list_files": ["ops.dataset_ops.DatasetV2.list_files", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.repeat": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.cache": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.take": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.skip": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.shard": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.batch": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.padded_batch": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.map": ["ops.dataset_ops.ParallelMapDataset.__init__", "ops.dataset_ops.DatasetV1Adapter.__init__", "ops.dataset_ops.MapDataset.__init__"], "ops.dataset_ops.DatasetV1.map_with_legacy_function": ["warnings.warn", "ops.dataset_ops.DatasetV1Adapter.__init__", "ops.dataset_ops.ParallelMapDataset.__init__", "ops.dataset_ops.MapDataset.__init__"], "ops.dataset_ops.DatasetV1.interleave": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.filter": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.filter_with_legacy_function": ["ops.dataset_ops.FilterDataset.__init__"], "ops.dataset_ops.DatasetV1.apply": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.window": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.unbatch": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.DatasetV1.with_options": ["<builtin>.super", "ops.dataset_ops.DatasetV1Adapter.__init__"], "python.tf2.enabled": ["platform._pywrap_tf2.is_enabled"], "ops.dataset_ops.UnaryDataset._inputs": [], "ops.dataset_ops.DatasetSource._inputs": [], "ops.dataset_ops.DatasetV1Adapter.options": ["ops.dataset_ops.DatasetV2.options", "ops.dataset_ops.DatasetV1Adapter.options"], "ops.dataset_ops.DatasetV1Adapter.element_spec": [], "ops.dataset_ops.DatasetV1Adapter.__iter__": ["<builtin>.iter"], "moves.queue.Queue": [], "ops.dataset_ops.make_one_shot_iterator": ["ops.dataset_ops.DatasetV1._make_one_shot_iterator", "ops.dataset_ops.DatasetV1Adapter.__init__"], "ops.dataset_ops.get_structure": ["<builtin>.type", "<builtin>.TypeError"], "ops.dataset_ops.get_legacy_output_classes.<lambda1>": [], "ops.dataset_ops.get_legacy_output_shapes.<lambda1>": [], "ops.dataset_ops.get_legacy_output_types.<lambda1>": [], "ops.dataset_ops.UnaryDataset.__init__": ["<builtin>.super"], "ops.dataset_ops.UnaryUnchangedStructureDataset.__init__": ["<builtin>.super"], "ops.dataset_ops.UnaryUnchangedStructureDataset.element_spec": [], "ops.gen_dataset_ops.tensor_dataset": [], "ops.dataset_ops.TensorDataset.element_spec": [], "util.structure.to_batched_tensor_list": ["util.structure._to_tensor_list_helper"], "ops.dataset_ops.TensorSliceDataset.__init__.<lambda1>": [], "framework.tensor_shape.Dimension": [], "ops.gen_dataset_ops.tensor_slice_dataset": [], "ops.dataset_ops.TensorSliceDataset.element_spec": [], "framework.tensor_spec.TensorSpec": [], "ops.gen_dataset_ops.sparse_tensor_slice_dataset": [], "ops.dataset_ops.SparseTensorSliceDataset.element_spec": [], "ops.dataset_ops._VariantDataset.__init__": ["<builtin>.super"], "ops.dataset_ops._VariantDataset.element_spec": [], "ops.dataset_ops._NestedVariant.__init__": [], "ops.dataset_ops._NestedVariant._type_spec": ["ops.dataset_ops.DatasetSpec.__init__"], "ops.dataset_ops.from_variant": ["ops.dataset_ops._VariantDataset.__init__"], "ops.dataset_ops.to_variant": [], "framework.tensor_shape.as_shape": ["framework.tensor_shape.TensorShape.__init__", "<builtin>.isinstance"], "ops.dataset_ops.DatasetSpec.value_type": [], "ops.dataset_ops.DatasetSpec.element_spec": [], "ops.dataset_ops.DatasetSpec._serialize": [], "ops.dataset_ops.DatasetSpec._component_specs": ["framework.tensor_spec.TensorSpec"], "ops.dataset_ops.DatasetSpec._to_components": [], "ops.dataset_ops.DatasetSpec._from_components": ["ops.dataset_ops._VariantDataset.__init__", "ops.dataset_ops._NestedVariant.__init__"], "ops.dataset_ops.DatasetSpec._to_tensor_list": ["framework.ops.convert_to_tensor", "util.nest.map_structure"], "ops.dataset_ops.DatasetSpec._to_tensor_list.<list1>.<lambda1>": [], "ops.dataset_ops.DatasetSpec.from_value": ["ops.dataset_ops.DatasetSpec.__init__"], "ops.dataset_ops.DatasetSpec._batch": ["framework.tensor_shape.TensorShape", "ops.dataset_ops.DatasetSpec.__init__"], "ops.dataset_ops.DatasetSpec._unbatch": ["ops.dataset_ops.DatasetSpec.__init__", "<builtin>.ValueError"], "ops.dataset_ops.DatasetSpec._to_batched_tensor_list": ["ops.dataset_ops.DatasetSpec._to_tensor_list", "<builtin>.ValueError"], "ops.dataset_ops.DatasetSpec._to_legacy_output_types": [], "ops.dataset_ops.DatasetSpec._to_legacy_output_shapes": [], "ops.dataset_ops.DatasetSpec._to_legacy_output_classes": [], "ops.dataset_ops.StructuredFunctionWrapper.__init__.wrapper_helper": ["util.structure.type_spec_from_value", "ops.dataset_ops._should_pack", "six.reraise", "ops.dataset_ops._should_unpack", "util.structure.from_compatible_tensor_list", "<builtin>.TypeError", "<builtin>.tuple", "sys.exc_info"], "ops.dataset_ops._should_unpack": ["<builtin>.type"], "ops.dataset_ops._should_pack": ["<builtin>.isinstance"], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_legacy_function": ["util.structure.get_flat_tensor_types"], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_legacy_function.wrapped_fn": ["util.structure.to_tensor_list", "ops.dataset_ops.StructuredFunctionWrapper.__init__.wrapper_helper"], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_legacy_function.<lambda1>": [], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_py_function": ["eager.function.defun_with_attributes", "util.structure.get_flat_tensor_specs"], "util.structure.get_flat_tensor_specs": ["functools.reduce", "util.nest.flatten"], "eager.function.defun_with_attributes": ["eager.function.validate_signature", "eager.function.defun_with_attributes.decorated"], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_py_function.unused": ["framework.ops.convert_to_tensor", "util.structure.to_tensor_list", "ops.dataset_ops.StructuredFunctionWrapper.__init__.wrapper_helper"], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_py_function.py_function_wrapper": ["ops.dataset_ops.StructuredFunctionWrapper.function", "ops.dataset_ops._filter_ds.maybe_warn_on_large_rejection", "ops.dataset_ops._filter_ds._reject", "ops.dataset_ops.DatasetV2.from_generator.get_iterator_id_fn", "ops.dataset_ops.DatasetV2.from_generator.generator_next_fn", "ops.dataset_ops._estimate_initial_dist_ds.update_estimate_and_tile", "ops.dataset_ops.normalize_to_dense.normalize", "<builtin>.tuple", "ops.dataset_ops._should_unpack", "util.structure.from_compatible_tensor_list", "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.batching_fn", "ops.dataset_ops.DatasetV2.rejection_resample.add_class_value", "ops.dataset_ops.DatasetV2.from_generator.finalize_fn", "ops.dataset_ops.DatasetV2.snapshot.<lambda2>", "ops.dataset_ops.DatasetV2.from_generator.flat_map_fn", "ops.dataset_ops._SnapshotDataset.__init__.<lambda1>", "framework.ops.convert_to_tensor", "ops.dataset_ops._filter_ds._gather_and_copy", "ops.dataset_ops._GroupByWindowDataset._make_key_func.key_func_wrapper", "ops.dataset_ops._should_pack", "ops.dataset_ops.DatasetV2.snapshot.<lambda1>", "ops.dataset_ops._GroupByWindowDataset._make_window_size_func.window_size_func_wrapper", "util.structure.to_tensor_list"], "ops.dataset_ops.StructuredFunctionWrapper.function": [], "ops.dataset_ops._filter_ds.maybe_warn_on_large_rejection": ["ops.math_ops.less", "ops.math_ops.reduce_sum", "ops.control_flow_ops.cond"], "ops.dataset_ops._filter_ds._reject": ["ops.random_ops.random_uniform"], "ops.dataset_ops._SnapshotDataset.__init__.<lambda1>": ["multiprocessing.cpu_count"], "ops.dataset_ops._estimate_initial_dist_ds.update_estimate_and_tile": ["ops.array_ops.expand_dims", "ops.array_ops.tile", "ops.dataset_ops._estimate_data_distribution"], "ops.dataset_ops.normalize_to_dense.normalize": ["<builtin>.tuple", "util.structure.to_batched_tensor_list"], "ops.dataset_ops._GroupByWindowDataset._make_key_func.key_func_wrapper": ["framework.ops.convert_to_tensor", "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.element_to_bucket_id"], "ops.dataset_ops._filter_ds._gather_and_copy": ["<builtin>.isinstance", "ops.array_ops.gather"], "ops.dataset_ops._GroupByWindowDataset._make_window_size_func.window_size_func_wrapper": ["ops.dataset_ops.DatasetV2.group_by_window.constant_window_func", "framework.ops.convert_to_tensor", "ops.dataset_ops.DatasetV2.bucket_by_sequence_length.window_size_fn"], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_py_function.wrapped_fn": ["util.structure.get_flat_tensor_types", "ops.script_ops.eager_py_func"], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_tf_function": ["eager.function.defun_with_attributes", "util.structure.get_flat_tensor_specs"], "ops.dataset_ops.StructuredFunctionWrapper.__init__.trace_tf_function.wrapped_fn": ["framework.ops.convert_to_tensor", "util.structure.to_tensor_list", "ops.dataset_ops.StructuredFunctionWrapper.__init__.wrapper_helper"], "eager.def_function.functions_run_eagerly": [], "ops.dataset_ops.StructuredFunctionWrapper.output_structure": [], "ops.dataset_ops.StructuredFunctionWrapper.output_classes": ["util.nest.map_structure"], "ops.dataset_ops.StructuredFunctionWrapper.output_classes.<lambda1>": [], "ops.dataset_ops.StructuredFunctionWrapper.output_shapes": ["util.nest.map_structure"], "ops.dataset_ops.StructuredFunctionWrapper.output_shapes.<lambda1>": [], "ops.dataset_ops.StructuredFunctionWrapper.output_types": ["util.nest.map_structure"], "ops.dataset_ops.StructuredFunctionWrapper.output_types.<lambda1>": [], "ops.dataset_ops._GeneratorDataset._transformation_name": [], "ops.gen_dataset_ops.generator_dataset": [], "ops.dataset_ops._GeneratorDataset.element_spec": [], "ops.gen_dataset_ops.zip_dataset": [], "ops.dataset_ops.ZipDataset.element_spec": [], "ops.gen_dataset_ops.concatenate_dataset": [], "ops.dataset_ops.ConcatenateDataset.element_spec": [], "ops.gen_dataset_ops.repeat_dataset": [], "ops.dataset_ops.RangeDataset._parse_args": ["<builtin>.str", "ops.dataset_ops.RangeDataset._build_tensor", "<builtin>.ValueError", "<builtin>.len"], "ops.gen_dataset_ops.range_dataset": [], "ops.dataset_ops.RangeDataset._build_tensor": ["framework.ops.convert_to_tensor"], "ops.dataset_ops.RangeDataset.element_spec": [], "ops.gen_dataset_ops.dummy_memory_cache": [], "ops.gen_dataset_ops.cache_dataset_v2": [], "ops.gen_dataset_ops.cache_dataset": [], "util.random_seed.get_seed": ["framework.ops.convert_to_tensor", "ops.array_ops.where_v2", "ops.math_ops.logical_and", "framework.random_seed.get_seed", "framework.ops.name_scope", "framework.constant_op.constant", "ops.math_ops.equal"], "ops.gen_dataset_ops.dummy_seed_generator": [], "ops.gen_dataset_ops.shuffle_dataset_v3": [], "ops.gen_dataset_ops.shuffle_dataset": [], "ops.gen_dataset_ops.take_dataset": [], "ops.gen_dataset_ops.skip_dataset": [], "ops.gen_dataset_ops.shard_dataset": [], "ops.dataset_ops.BatchDataset.__init__.<lambda1>": [], "ops.dataset_ops.BatchDataset.__init__.<lambda2>": [], "ops.gen_dataset_ops.batch_dataset_v2": [], "ops.dataset_ops.BatchDataset.element_spec": [], "ops.dataset_ops.ParallelBatchDataset.__init__.<lambda1>": [], "ops.dataset_ops.ParallelBatchDataset.__init__.<lambda2>": [], "ops.gen_dataset_ops.parallel_batch_dataset": [], "ops.dataset_ops.ParallelBatchDataset.element_spec": [], "ops.dataset_ops._NumpyIterator.__iter__": [], "ops.dataset_ops._NumpyIterator.__next__": ["util.nest.map_structure", "ops.dataset_ops._NumpyIterator.next"], "ops.dataset_ops._NumpyIterator.__next__.to_numpy": ["<builtin>.isinstance"], "ops.dataset_ops._NumpyIterator.next": ["ops.dataset_ops._NumpyIterator.__next__"], "ops.dataset_ops._is_padded_shape_compatible_with": ["<builtin>.zip", "<builtin>.len"], "ops.dataset_ops._padded_shape_to_tensor": ["framework.tensor_shape.as_shape", "<builtin>.ValueError", "ops.dataset_ops._is_padded_shape_compatible_with", "<builtin>.TypeError", "<builtin>.len", "six.reraise", "framework.ops.convert_to_tensor", "framework.tensor_util.constant_value_as_shape", "sys.exc_info"], "framework.tensor_util.constant_value_as_shape": ["<builtin>.ValueError", "framework.dtypes.as_dtype", "framework.tensor_shape.TensorShape", "framework.tensor_util.constant_value", "framework.tensor_shape.unknown_shape", "<builtin>.isinstance", "framework.tensor_shape.Dimension", "numpy.array", "<builtin>.enumerate", "<builtin>.hasattr", "framework.tensor_util.constant_value_as_shape"], "ops.dataset_ops._padding_value_to_tensor": ["framework.ops.convert_to_tensor", "framework.tensor_shape.TensorShape", "<builtin>.TypeError", "<builtin>.ValueError"], "ops.dataset_ops._padding_values_or_default": ["util.nest.map_structure", "util.nest.map_structure_up_to", "ops.dataset_ops.get_legacy_output_types"], "ops.dataset_ops._padding_values_or_default.make_zero": ["framework.constant_op.constant", "<builtin>.TypeError", "numpy.zeros_like"], "numpy.zeros_like": [], "ops.dataset_ops._padding_values_or_default.value_or_default": [], "ops.dataset_ops.PaddedBatchDataset.__init__.check_types": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError"], "util.nest.is_sequence": [], "ops.dataset_ops.PaddedBatchDataset.__init__.<lambda1>": [], "ops.dataset_ops.PaddedBatchDataset.__init__._padded_shape_to_batch_shape": ["framework.tensor_util.constant_value", "framework.tensor_shape.TensorShape", "framework.tensor_util.constant_value_as_shape", "framework.smart_cond.smart_constant_value"], "framework.smart_cond.smart_constant_value": ["<builtin>.type", "<builtin>.bool", "<builtin>.isinstance", "framework.tensor_util.constant_value", "<builtin>.TypeError", "client.pywrap_tf_session.TF_TryEvaluateConstant_wrapper"], "ops.gen_dataset_ops.padded_batch_dataset": [], "ops.gen_dataset_ops.padded_batch_dataset_v2": [], "ops.dataset_ops.PaddedBatchDataset.element_spec": [], "ops.dataset_ops.MapDataset._transformation_name": [], "ops.gen_dataset_ops.map_dataset": [], "ops.dataset_ops.MapDataset.element_spec": [], "ops.dataset_ops.ParallelMapDataset._transformation_name": [], "ops.gen_dataset_ops.parallel_map_dataset_v2": [], "ops.dataset_ops.ParallelMapDataset.element_spec": [], "ops.dataset_ops.FlatMapDataset._transformation_name": [], "ops.dataset_ops.FlatMapDataset.element_spec": [], "ops.dataset_ops.InterleaveDataset._transformation_name": [], "ops.gen_dataset_ops.interleave_dataset": [], "ops.dataset_ops.InterleaveDataset.element_spec": [], "ops.dataset_ops.ParallelInterleaveDataset._transformation_name": [], "ops.gen_dataset_ops.parallel_interleave_dataset_v4": [], "ops.dataset_ops.ParallelInterleaveDataset.element_spec": [], "ops.dataset_ops.FilterDataset._transformation_name": [], "ops.gen_dataset_ops.filter_dataset": [], "ops.gen_dataset_ops.prefetch_dataset": [], "ops.gen_dataset_ops.window_dataset": [], "ops.dataset_ops.WindowDataset.element_spec": [], "framework.dataset_options_pb2.Options": [], "ops.gen_dataset_ops.options_dataset": [], "ops.dataset_ops._RestructuredDataset.__init__": ["<builtin>.super"], "ops.dataset_ops._RestructuredDataset.element_spec": [], "ops.dataset_ops._UnbatchDataset.__init__.<lambda1>": [], "ops.gen_experimental_dataset_ops.unbatch_dataset": [], "ops.dataset_ops._UnbatchDataset.element_spec": [], "ops.dataset_ops._GroupByWindowDataset._make_key_func": ["ops.dataset_ops._GroupByWindowDataset._transformation_name", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "framework.tensor_spec.TensorSpec", "<builtin>.ValueError"], "ops.dataset_ops._GroupByWindowDataset._make_reduce_func": ["ops.dataset_ops.DatasetSpec.__init__", "framework.tensor_spec.TensorSpec", "ops.dataset_ops._GroupByWindowDataset._transformation_name", "<builtin>.TypeError", "<builtin>.isinstance", "ops.dataset_ops.StructuredFunctionWrapper.__init__"], "ops.dataset_ops._GroupByWindowDataset._make_window_size_func": ["ops.dataset_ops._GroupByWindowDataset._transformation_name", "ops.dataset_ops.StructuredFunctionWrapper.__init__", "framework.tensor_spec.TensorSpec", "<builtin>.ValueError"], "ops.gen_experimental_dataset_ops.group_by_window_dataset": [], "ops.dataset_ops._GroupByWindowDataset._transformation_name": [], "ops.dataset_ops._GroupByWindowDataset.element_spec": [], "ops.gen_experimental_dataset_ops.random_dataset": [], "ops.dataset_ops.RandomDataset.element_spec": ["framework.tensor_spec.TensorSpec"], "ops.math_ops.reduce_sum": ["ops.math_ops._ReductionDims", "ops.math_ops.reduce_sum_with_dims"], "ops.dataset_ops._filter_ds.maybe_warn_on_large_rejection.<lambda1>": [], "ops.dataset_ops._filter_ds.maybe_warn_on_large_rejection.<lambda2>": ["ops.logging_ops.Print"], "ops.logging_ops.Print": ["ops.gen_logging_ops._print"], "ops.array_ops.gather": ["ops.gen_array_ops.gather_v2", "framework.tensor_util.constant_value"], "ops.dataset_ops._filter_ds.<lambda1>": [], "numpy.int64": [], "ops.array_ops.fill": ["framework.tensor_util.maybe_set_static_shape", "ops.gen_array_ops.fill"], "ops.dataset_ops._estimate_data_distribution": ["ops.math_ops.truediv", "ops.math_ops.reduce_sum", "ops.math_ops.cast", "ops.math_ops.add", "ops.array_ops.one_hot"], "ops.array_ops.expand_dims": ["<builtin>.ValueError", "ops.array_ops.expand_dims_v2", "util.deprecation.deprecated_argument_lookup"], "ops.array_ops.tile": [], "ops.dataset_ops._get_target_to_initial_ratio": ["numpy.finfo"], "numpy.finfo": [], "ops.array_ops.one_hot": ["framework.ops.name_scope", "<builtin>.TypeError", "ops.gen_array_ops.one_hot", "framework.ops.convert_to_tensor"], "ops.math_ops.truediv": ["ops.math_ops._truediv_python3"], "ops.math_ops.reduce_max": ["ops.math_ops._ReductionDims", "ops.math_ops.reduce_max_with_dims"], "ops.dataset_ops._TakeWhileDataset._transformation_name": [], "ops.gen_experimental_dataset_ops.take_while_dataset": [], "ops.gen_experimental_dataset_ops.unique_dataset": [], "ops.dataset_ops._collect_resource_inputs": ["<builtin>.set", "ops.dataset_ops._collect_resource_inputs._process"], "ops.dataset_ops._collect_resource_inputs._process": ["framework.auto_control_deps_utils.get_read_write_resource_inputs"], "framework.auto_control_deps_utils.get_read_write_resource_inputs": ["<builtin>.len", "util.object_identity.ObjectIdentitySet", "<builtin>.enumerate"], "ops.dataset_ops._SnapshotDataset.__init__.<lambda1>.<lambda1>": [], "ops.dataset_ops._SnapshotDataset._transformation_name": [], "ops.gen_experimental_dataset_ops.snapshot_dataset_v2": [], "ops.dataset_ops._ScanDataset._transformation_name": [], "ops.dataset_ops._ScanDataset.__init__.<lambda1>": [], "ops.dataset_ops._ScanDataset.__init__.<lambda2>": [], "ops.dataset_ops._ScanDataset.__init__.<lambda3>": [], "ops.gen_experimental_dataset_ops.scan_dataset": [], "ops.dataset_ops._ScanDataset.element_spec": [], "framework.auto_control_deps.register_acd_resource_resolver": [], "ops.dataset_ops._resource_resolver": ["ops.dataset_ops._collect_resource_inputs", "<builtin>.len"], "ops.dataset_ops.enable_debug_mode": ["<builtin>.ValueError", "eager.context.executing_eagerly", "ops.dataset_ops.toggle_debug_mode"], "ops.dataset_ops.toggle_debug_mode": [], "ops.iterator_ops": ["threading.Lock", "util._pywrap_utils.RegisterType", "util.tf_export.tf_export", "util.deprecation.deprecated", "util.lazy_loader.LazyLoader", "<builtin>.globals"], "ops.iterator_ops._device_stack_is_empty": ["eager.context.context", "framework.ops.get_default_graph", "<builtin>.bool", "eager.context.executing_eagerly"], "ops.iterator_ops.Iterator.__init__": ["util.structure.get_flat_tensor_types", "<builtin>.ValueError", "util.structure.get_flat_tensor_shapes", "framework.ops.add_to_collection", "util.structure.convert_legacy_structure", "ops.gen_dataset_ops.iterator_to_string_handle"], "ops.gen_dataset_ops.iterator_to_string_handle": [], "ops.iterator_ops.Iterator.from_structure": ["util.structure.get_flat_tensor_types", "util.structure.get_flat_tensor_shapes", "ops.gen_dataset_ops.iterator_v2", "util.nest.assert_same_structure", "util.nest.map_structure", "util.structure.convert_legacy_structure", "util.nest.map_structure_up_to", "ops.iterator_ops.Iterator.__init__"], "ops.iterator_ops.Iterator.from_structure.<lambda1>": ["framework.tensor_shape.TensorShape"], "ops.iterator_ops.Iterator.from_structure.<lambda2>": [], "ops.iterator_ops.Iterator.from_string_handle": ["util.structure.get_flat_tensor_types", "util.structure.get_flat_tensor_shapes", "ops.gen_dataset_ops.iterator_from_string_handle_v2", "util.nest.assert_same_structure", "util.nest.map_structure", "framework.ops.convert_to_tensor", "util.structure.convert_legacy_structure", "util.nest.map_structure_up_to", "ops.iterator_ops.Iterator.__init__"], "ops.iterator_ops.Iterator.from_string_handle.<lambda1>": ["framework.tensor_shape.TensorShape"], "ops.iterator_ops.Iterator.from_string_handle.<lambda2>": [], "ops.gen_dataset_ops.iterator_from_string_handle_v2": [], "ops.iterator_ops.Iterator.initializer": ["<builtin>.ValueError"], "ops.iterator_ops.Iterator.make_initializer": ["framework.ops.name_scope", "<builtin>.zip", "util.nest.flatten", "<builtin>.TypeError", "util.nest.assert_same_structure", "util.nest.map_structure", "framework.ops.colocate_with", "ops.gen_dataset_ops.make_iterator"], "ops.iterator_ops.Iterator.make_initializer.<lambda1>": [], "ops.iterator_ops.Iterator.make_initializer.<lambda2>": [], "ops.iterator_ops.Iterator.make_initializer.<lambda3>": [], "ops.iterator_ops.Iterator.get_next": ["warnings.warn", "framework.ops.colocate_with", "util.structure.from_tensor_list", "ops.gen_dataset_ops.iterator_get_next"], "ops.gen_dataset_ops.iterator_get_next": [], "util.structure.from_tensor_list": ["util.structure._from_tensor_list_helper"], "ops.iterator_ops.Iterator.get_next_as_optional": ["util.structure.get_flat_tensor_types", "util.structure.get_flat_tensor_shapes", "ops.optional_ops._OptionalImpl", "framework.ops.colocate_with", "ops.gen_dataset_ops.iterator_get_next_as_optional"], "ops.gen_dataset_ops.iterator_get_next_as_optional": [], "ops.optional_ops._OptionalImpl": [], "ops.iterator_ops.Iterator.string_handle": ["ops.gen_dataset_ops.iterator_to_string_handle"], "ops.iterator_ops.Iterator.output_classes": ["util.nest.map_structure"], "ops.iterator_ops.Iterator.output_classes.<lambda1>": [], "ops.iterator_ops.Iterator.output_shapes": ["util.nest.map_structure"], "ops.iterator_ops.Iterator.output_shapes.<lambda1>": [], "ops.iterator_ops.Iterator.output_types": ["util.nest.map_structure"], "ops.iterator_ops.Iterator.output_types.<lambda1>": [], "ops.iterator_ops.Iterator.element_spec": [], "ops.iterator_ops.Iterator._gather_saveables_for_checkpoint": [], "ops.iterator_ops.Iterator._gather_saveables_for_checkpoint._saveable_factory": ["ops.iterator_ops._IteratorSaveable.__init__"], "ops.iterator_ops._IteratorSaveable.__init__": ["saver.BaseSaverBuilder.SaveSpec", "<builtin>.super", "ops.gen_dataset_ops.serialize_iterator"], "ops.iterator_ops._generate_shared_name": [], "ops.iterator_ops.IteratorResourceDeleter.__init__": ["eager.context.executing_eagerly"], "ops.iterator_ops.IteratorResourceDeleter.__del__": ["eager.context.graph_mode", "ops.gen_dataset_ops.delete_iterator", "eager.context.eager_mode"], "ops.gen_dataset_ops.delete_iterator": [], "eager.context.graph_mode": ["eager.context.context"], "ops.iterator_ops.IteratorBase": ["abc.abstractmethod", "abc.abstractproperty"], "ops.iterator_ops.IteratorBase.element_spec": ["<builtin>.NotImplementedError"], "ops.iterator_ops.IteratorBase.get_next": ["<builtin>.NotImplementedError"], "ops.iterator_ops.IteratorBase.get_next_as_optional": ["<builtin>.NotImplementedError"], "ops.iterator_ops.OwnedIterator.__init__": ["util.structure.get_flat_tensor_types", "<builtin>.ValueError", "util.structure.get_flat_tensor_shapes", "ops.iterator_ops.OwnedIterator._create_iterator", "<builtin>.super"], "ops.iterator_ops.OwnedIterator._create_iterator": ["util.structure.get_flat_tensor_types", "util.structure.get_flat_tensor_shapes", "ops.iterator_ops.IteratorResourceDeleter.__init__", "ops.gen_dataset_ops.anonymous_iterator_v2", "framework.ops.colocate_with", "ops.gen_dataset_ops.make_iterator"], "ops.gen_dataset_ops.anonymous_iterator_v2": [], "ops.iterator_ops.OwnedIterator.__iter__": [], "ops.iterator_ops.OwnedIterator.next": ["ops.iterator_ops.OwnedIterator.__next__"], "ops.iterator_ops.OwnedIterator.__next__": ["ops.iterator_ops.OwnedIterator._next_internal"], "ops.iterator_ops.OwnedIterator._next_internal": ["<builtin>.ValueError", "ops.gen_dataset_ops.iterator_get_next", "eager.context.executing_eagerly", "util.structure.from_compatible_tensor_list", "framework.ops.colocate_with", "eager.context.execution_mode"], "eager.context.execution_mode": ["eager.executor.new_executor", "eager.context.context"], "ops.iterator_ops.OwnedIterator._type_spec": ["ops.iterator_ops.IteratorSpec.__init__"], "ops.iterator_ops.IteratorSpec.__init__": [], "ops.iterator_ops.OwnedIterator.output_classes": ["util.nest.map_structure"], "ops.iterator_ops.OwnedIterator.output_classes.<lambda1>": [], "ops.iterator_ops.OwnedIterator.output_shapes": ["util.nest.map_structure"], "ops.iterator_ops.OwnedIterator.output_shapes.<lambda1>": [], "ops.iterator_ops.OwnedIterator.output_types": ["util.nest.map_structure"], "ops.iterator_ops.OwnedIterator.output_types.<lambda1>": [], "ops.iterator_ops.OwnedIterator.element_spec": [], "ops.iterator_ops.OwnedIterator.get_next": ["ops.iterator_ops.OwnedIterator._next_internal"], "ops.iterator_ops.OwnedIterator.get_next_as_optional": ["util.structure.get_flat_tensor_types", "util.structure.get_flat_tensor_shapes", "ops.optional_ops._OptionalImpl", "framework.ops.colocate_with", "ops.gen_dataset_ops.iterator_get_next_as_optional"], "ops.iterator_ops.OwnedIterator._gather_saveables_for_checkpoint": [], "ops.iterator_ops.OwnedIterator._gather_saveables_for_checkpoint._saveable_factory": ["ops.iterator_ops._IteratorSaveable.__init__"], "ops.iterator_ops.IteratorSpec.value_type": [], "ops.iterator_ops.IteratorSpec._serialize": [], "ops.iterator_ops.IteratorSpec._component_specs": ["framework.tensor_spec.TensorSpec"], "ops.iterator_ops.IteratorSpec._to_components": [], "ops.iterator_ops.IteratorSpec._from_components": ["ops.iterator_ops.OwnedIterator.__init__"], "ops.iterator_ops.IteratorSpec.from_value": ["ops.iterator_ops.IteratorSpec.__init__"], "ops.gen_dataset_ops.serialize_iterator": [], "saver.BaseSaverBuilder.SaveSpec": [], "ops.iterator_ops._IteratorSaveable.restore": ["framework.ops.colocate_with", "ops.gen_dataset_ops.deserialize_iterator"], "ops.gen_dataset_ops.deserialize_iterator": [], "ops.iterator_ops.get_next_as_optional": [], "util._pywrap_utils.RegisterType": [], "ops.multi_device_iterator_ops": [], "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__": ["eager.function.defun", "ops.gen_dataset_ops.multi_device_iterator_to_string_handle", "<builtin>.enumerate", "<builtin>.super", "ops.gen_dataset_ops.generator_dataset", "eager.function.defun_with_attributes"], "ops.gen_dataset_ops.multi_device_iterator_to_string_handle": [], "eager.function.defun": ["eager.function.defun_with_attributes"], "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__._init_func": [], "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__._remote_init_func": ["ops.functional_ops.remote_call"], "ops.functional_ops.remote_call": [], "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__._next_func": ["util.structure.get_flat_tensor_types", "ops.gen_dataset_ops.multi_device_iterator_from_string_handle", "ops.gen_dataset_ops.multi_device_iterator_get_next_from_shard", "util.structure.get_flat_tensor_shapes"], "ops.gen_dataset_ops.multi_device_iterator_from_string_handle": [], "ops.gen_dataset_ops.multi_device_iterator_get_next_from_shard": [], "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__._remote_next_func": ["ops.functional_ops.remote_call", "util.structure.get_flat_tensor_types"], "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__._finalize_func": ["ops.array_ops.constant"], "ops.array_ops.constant": [], "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__._remote_finalize_func": ["ops.functional_ops.remote_call"], "ops.multi_device_iterator_ops._PerDeviceGenerator._inputs": [], "ops.multi_device_iterator_ops._PerDeviceGenerator.element_spec": [], "ops.multi_device_iterator_ops._ReincarnatedPerDeviceGenerator.__init__": ["ops.gen_dataset_ops.generator_dataset", "<builtin>.super"], "ops.multi_device_iterator_ops._ReincarnatedPerDeviceGenerator._inputs": [], "ops.multi_device_iterator_ops._ReincarnatedPerDeviceGenerator.element_spec": [], "ops.multi_device_iterator_ops._create_device_dataset": ["dataset_ops.DatasetV2.prefetch", "ops.dataset_ops.PrefetchDataset", "ops.multi_device_iterator_ops._ReincarnatedPerDeviceGenerator.__init__"], "ops.dataset_ops.PrefetchDataset": [], "dataset_ops.DatasetV2.prefetch": [], "ops.multi_device_iterator_ops.MultiDeviceIterator.__init__": ["framework.ops.device", "ops.gen_dataset_ops.multi_device_iterator", "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__", "ops.resource_variable_ops.EagerResourceDeleter", "<builtin>.len", "ops.dataset_ops.make_one_shot_iterator", "eager.context.shared_name", "<builtin>.enumerate", "ops.multi_device_iterator_ops.MultiDeviceIterator._create_device_dataset", "framework.ops.convert_to_tensor", "eager.context.executing_eagerly", "ops.options.Options", "ops.gen_dataset_ops.multi_device_iterator_init", "ops.dataset_ops.make_initializable_iterator", "ops.control_flow_ops.group"], "eager.context.shared_name": ["eager.context.executing_eagerly"], "ops.gen_dataset_ops.multi_device_iterator": [], "ops.resource_variable_ops.EagerResourceDeleter": [], "ops.gen_dataset_ops.multi_device_iterator_init": [], "ops.multi_device_iterator_ops.MultiDeviceIterator._create_device_dataset": ["dataset_ops.DatasetV2.prefetch", "ops.dataset_ops.PrefetchDataset", "ops.multi_device_iterator_ops._ReincarnatedPerDeviceGenerator.__init__"], "ops.multi_device_iterator_ops.MultiDeviceIterator.get_next": ["framework.ops.device", "<builtin>.enumerate"], "ops.multi_device_iterator_ops.MultiDeviceIterator.get_next_as_optional": ["framework.ops.device", "<builtin>.enumerate"], "ops.multi_device_iterator_ops.MultiDeviceIterator.initializer": ["ops.control_flow_ops.no_op", "eager.context.executing_eagerly"], "ops.multi_device_iterator_ops.MultiDeviceIterator._eager_reset": ["framework.ops.device", "<builtin>.enumerate", "ops.multi_device_iterator_ops.MultiDeviceIterator._create_device_dataset", "ops.gen_dataset_ops.make_iterator", "<builtin>.ValueError", "ops.gen_dataset_ops.multi_device_iterator_init", "framework.ops.executing_eagerly_outside_functions"], "framework.ops.executing_eagerly_outside_functions": ["eager.context.executing_eagerly", "framework.ops._get_outer_context_and_inner_device_stack"], "ops.multi_device_iterator_ops.MultiDeviceIterator.element_spec": [], "ops.multi_device_iterator_ops.MultiDeviceIteratorResourceDeleter.__init__": ["eager.context.executing_eagerly"], "ops.multi_device_iterator_ops.MultiDeviceIteratorResourceDeleter.__del__": ["framework.ops.device", "ops.gen_dataset_ops.delete_multi_device_iterator", "eager.context.graph_mode", "eager.context.eager_mode"], "ops.gen_dataset_ops.delete_multi_device_iterator": [], "ops.multi_device_iterator_ops.MultiDeviceIteratorSpec.__init__": [], "ops.multi_device_iterator_ops.MultiDeviceIteratorSpec.value_type": [], "ops.multi_device_iterator_ops.MultiDeviceIteratorSpec._serialize": ["<builtin>.tuple"], "ops.multi_device_iterator_ops.MultiDeviceIteratorSpec._component_specs": ["<builtin>.range", "<builtin>.len", "ops.iterator_ops.IteratorSpec", "framework.tensor_spec.TensorSpec"], "ops.iterator_ops.IteratorSpec": [], "ops.multi_device_iterator_ops.MultiDeviceIteratorSpec._to_components": [], "ops.multi_device_iterator_ops.MultiDeviceIteratorSpec._from_components": ["ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.__init__"], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.__init__": ["framework.ops.device", "ops.multi_device_iterator_ops._PerDeviceGenerator.__init__", "<builtin>.len", "ops.multi_device_iterator_ops.MultiDeviceIteratorResourceDeleter.__init__", "<builtin>.enumerate", "ops.multi_device_iterator_ops._create_device_dataset", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "<builtin>.RuntimeError", "eager.context.executing_eagerly", "ops.options.Options", "ops.gen_dataset_ops.multi_device_iterator_init", "<builtin>.iter", "framework.ops.inside_function", "ops.gen_dataset_ops.anonymous_multi_device_iterator"], "ops.multi_device_iterator_ops.MultiDeviceIteratorSpec.from_value": ["ops.multi_device_iterator_ops.MultiDeviceIteratorSpec.__init__"], "ops.gen_dataset_ops.anonymous_multi_device_iterator": [], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.get_next": ["framework.ops.device", "<builtin>.enumerate"], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.__iter__": [], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.next": ["ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.__next__"], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.__next__": ["ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.get_next"], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.get_next_as_optional": ["framework.ops.device", "<builtin>.enumerate"], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator.element_spec": [], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator._type_spec": ["ops.multi_device_iterator_ops.MultiDeviceIteratorSpec.__init__"], "ops.optional_ops": [], "ops.optional_ops.Optional": ["abc.abstractproperty", "abc.abstractmethod"], "ops.optional_ops.Optional.has_value": ["<builtin>.NotImplementedError"], "ops.optional_ops.Optional.get_value": ["<builtin>.NotImplementedError"], "ops.optional_ops.Optional.element_spec": ["<builtin>.NotImplementedError"], "ops.optional_ops.Optional.empty": ["ops.optional_ops._OptionalImpl.__init__", "ops.gen_dataset_ops.optional_none"], "ops.gen_dataset_ops.optional_none": [], "ops.optional_ops._OptionalImpl.__init__": [], "ops.optional_ops.Optional.from_value": ["ops.gen_dataset_ops.optional_from_value", "framework.ops.name_scope", "ops.optional_ops._OptionalImpl.__init__", "util.structure.to_tensor_list", "util.structure.type_spec_from_value"], "ops.gen_dataset_ops.optional_from_value": [], "ops.optional_ops._OptionalImpl.has_value": ["ops.gen_dataset_ops.optional_has_value", "framework.ops.colocate_with"], "ops.gen_dataset_ops.optional_has_value": [], "ops.optional_ops._OptionalImpl.get_value": ["framework.ops.name_scope", "util.structure.get_flat_tensor_shapes", "ops.gen_dataset_ops.optional_get_value", "util.structure.from_tensor_list", "framework.ops.colocate_with", "util.structure.get_flat_tensor_types"], "ops.gen_dataset_ops.optional_get_value": [], "ops.optional_ops._OptionalImpl.element_spec": [], "ops.optional_ops._OptionalImpl._type_spec": ["ops.optional_ops.OptionalSpec.from_value"], "ops.optional_ops.OptionalSpec.from_value": ["ops.optional_ops.OptionalSpec.__init__"], "ops.optional_ops.OptionalSpec.__init__": [], "ops.optional_ops.OptionalSpec.value_type": [], "ops.optional_ops.OptionalSpec._serialize": [], "ops.optional_ops.OptionalSpec._component_specs": ["framework.tensor_spec.TensorSpec"], "ops.optional_ops.OptionalSpec._to_components": [], "ops.optional_ops.OptionalSpec._from_components": ["ops.optional_ops._OptionalImpl.__init__"], "ops.optional_ops.OptionalSpec._to_legacy_output_types": [], "ops.optional_ops.OptionalSpec._to_legacy_output_shapes": [], "ops.optional_ops.OptionalSpec._to_legacy_output_classes": [], "ops.options": [], "ops.options.AutoShardPolicy._to_proto": ["<builtin>.ValueError"], "ops.options.AutoShardPolicy._from_proto": ["<builtin>.ValueError"], "ops.options.ExternalStatePolicy._to_proto": ["<builtin>.ValueError"], "ops.options.ExternalStatePolicy._from_proto": ["<builtin>.ValueError"], "util.options.create_option": ["<builtin>.property"], "ops.options.AutotuneOptions": ["util.options.create_option"], "ops.options.AutotuneOptions._to_proto": ["framework.dataset_options_pb2.AutotuneOptions"], "framework.dataset_options_pb2.AutotuneOptions": [], "ops.options.AutotuneOptions._from_proto": [], "ops.options.AutotuneOptions._set_mutable": [], "ops.options.DistributeOptions.<lambda1>": [], "ops.options.DistributeOptions": ["util.options.create_option"], "ops.options.DistributeOptions._to_proto": ["framework.dataset_options_pb2.DistributeOptions", "ops.options.AutoShardPolicy._to_proto"], "framework.dataset_options_pb2.DistributeOptions": [], "ops.options.DistributeOptions._from_proto": ["ops.options.AutoShardPolicy._from_proto"], "ops.options.OptimizationOptions": ["util.options.create_option"], "ops.options.OptimizationOptions._to_proto": ["framework.dataset_options_pb2.OptimizationOptions"], "framework.dataset_options_pb2.OptimizationOptions": [], "ops.options.OptimizationOptions._from_proto": [], "ops.options.OptimizationOptions._set_mutable": [], "ops.options.ThreadingOptions": ["util.options.create_option"], "ops.options.ThreadingOptions._to_proto": ["framework.dataset_options_pb2.ThreadingOptions"], "framework.dataset_options_pb2.ThreadingOptions": [], "ops.options.ThreadingOptions._from_proto": [], "ops.options.Options.__getattribute__": ["absl.logging.warning", "<builtin>.getattr", "<builtin>.super"], "absl.logging.warning": [], "ops.options.Options.__setattr__": ["absl.logging.warning", "<builtin>.super"], "ops.options.Options._to_proto": ["framework.dataset_options_pb2.Options", "ops.options.ExternalStatePolicy._to_proto"], "ops.options.Options._from_proto": ["ops.options.ExternalStatePolicy._from_proto"], "ops.options.Options._set_mutable": [], "ops.options.Options.merge": ["util.options.merge_options"], "util.options.merge_options": ["<builtin>.getattr", "<builtin>.TypeError", "<builtin>.len", "absl.logging.warning", "util.options.merge_options", "<builtin>.setattr", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "ops.readers": ["python.tf2.enabled", "util.tf_export.tf_export"], "ops.readers._normalise_fspath": ["<builtin>.isinstance", "os.fspath"], "os.fspath": [], "ops.readers._create_or_validate_filenames_dataset": ["util.nest.map_structure", "ops.dataset_ops.get_legacy_output_types", "framework.ops.convert_to_tensor", "<builtin>.TypeError", "ops.dataset_ops.get_legacy_output_shapes", "<builtin>.isinstance", "framework.tensor_shape.TensorShape", "ops.array_ops.reshape", "dataset_ops.DatasetV2.from_tensor_slices"], "dataset_ops.DatasetV2.from_tensor_slices": [], "ops.readers._create_dataset_reader": ["ops.readers.ParallelInterleaveDataset.__init__"], "ops.readers._create_dataset_reader.read_one_file": ["ops.readers.FixedLengthRecordDatasetV2.__init__.creator_fn", "framework.ops.convert_to_tensor", "ops.readers.TFRecordDatasetV2.__init__.creator_fn", "ops.readers.TextLineDatasetV2.__init__.creator_fn"], "ops.readers.FixedLengthRecordDatasetV2.__init__.creator_fn": ["ops.readers._FixedLengthRecordDataset.__init__"], "ops.readers.TFRecordDatasetV2.__init__.creator_fn": ["ops.readers._TFRecordDataset.__init__"], "ops.readers.TextLineDatasetV2.__init__.creator_fn": ["ops.readers._TextLineDataset.__init__"], "ops.readers.ParallelInterleaveDataset.__init__": ["util.convert.optional_param_to_tensor", "framework.ops.convert_to_tensor", "ops.dataset_ops.StructuredFunctionWrapper", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.super", "ops.gen_experimental_dataset_ops.legacy_parallel_interleave_dataset_v2", "ops.readers.ParallelInterleaveDataset._transformation_name"], "ops.readers._TextLineDataset.__init__": ["<builtin>.super", "util.convert.optional_param_to_tensor", "ops.gen_dataset_ops.text_line_dataset"], "util.convert.optional_param_to_tensor": ["framework.ops.convert_to_tensor", "framework.constant_op.constant"], "ops.gen_dataset_ops.text_line_dataset": [], "ops.readers._TextLineDataset.element_spec": ["framework.tensor_spec.TensorSpec"], "ops.readers.TextLineDatasetV2.__init__": ["<builtin>.super", "ops.readers._create_or_validate_filenames_dataset", "ops.readers._create_dataset_reader"], "ops.readers.TextLineDatasetV2.element_spec": ["framework.tensor_spec.TensorSpec"], "ops.readers.TextLineDatasetV1.__init__": ["<builtin>.super", "ops.readers.TextLineDatasetV2.__init__"], "ops.readers.TextLineDatasetV1._filenames": [], "ops.readers._TFRecordDataset.__init__": ["ops.gen_dataset_ops.tf_record_dataset", "<builtin>.super", "util.convert.optional_param_to_tensor"], "ops.gen_dataset_ops.tf_record_dataset": [], "ops.readers._TFRecordDataset.element_spec": ["framework.tensor_spec.TensorSpec"], "ops.readers.ParallelInterleaveDataset._transformation_name": [], "ops.gen_experimental_dataset_ops.legacy_parallel_interleave_dataset_v2": [], "ops.readers.ParallelInterleaveDataset._functions": [], "ops.readers.ParallelInterleaveDataset.element_spec": [], "ops.readers.TFRecordDatasetV2.__init__": ["<builtin>.super", "ops.readers._create_or_validate_filenames_dataset", "ops.readers._create_dataset_reader"], "ops.readers.TFRecordDatasetV2._clone": ["ops.readers.TFRecordDatasetV2.__init__"], "ops.readers.TFRecordDatasetV2._inputs": ["dataset_ops.UnaryDataset._inputs"], "dataset_ops.UnaryDataset._inputs": [], "ops.readers.TFRecordDatasetV2.element_spec": ["framework.tensor_spec.TensorSpec"], "ops.readers.TFRecordDatasetV1.__init__": ["ops.readers.TFRecordDatasetV2.__init__", "<builtin>.super"], "ops.readers.TFRecordDatasetV1._clone": ["ops.readers.TFRecordDatasetV1.__init__"], "ops.readers.TFRecordDatasetV1._filenames": [], "ops.readers._FixedLengthRecordDataset.__init__": ["<builtin>.super", "framework.ops.convert_to_tensor", "util.convert.optional_param_to_tensor", "ops.gen_dataset_ops.fixed_length_record_dataset_v2"], "ops.gen_dataset_ops.fixed_length_record_dataset_v2": [], "ops.readers._FixedLengthRecordDataset.element_spec": ["framework.tensor_spec.TensorSpec"], "ops.readers.FixedLengthRecordDatasetV2.__init__": ["<builtin>.super", "ops.readers._create_or_validate_filenames_dataset", "ops.readers._create_dataset_reader"], "ops.readers.FixedLengthRecordDatasetV2.element_spec": ["framework.tensor_spec.TensorSpec"], "ops.readers.FixedLengthRecordDatasetV1.__init__": ["<builtin>.super", "ops.readers.FixedLengthRecordDatasetV2.__init__"], "ops.readers.FixedLengthRecordDatasetV1._filenames": [], "util.convert": [], "util.convert.partial_shape_to_tensor": ["framework.tensor_shape.as_shape", "<builtin>.ValueError", "framework.ops.convert_to_tensor", "<builtin>.TypeError", "<builtin>.len"], "util.nest": ["util._pywrap_utils.RegisterType", "util.tf_export.tf_export"], "util.nest._sorted": ["<builtin>.TypeError", "<builtin>.sorted", "<builtin>.list"], "util.nest._yield_value": ["util.nest._get_attrs_items", "<builtin>.isinstance", "util.nest._sorted", "util.nest._is_attrs", "util.nest._yield_sorted_items"], "util.nest._is_attrs": [], "util.nest._get_attrs_items": ["<builtin>.getattr"], "util._pywrap_utils.AssertSameStructureForData": [], "util.nest._packed_nest_with_indices": ["util.nest._yield_value", "util.nest._sequence_like", "util._pywrap_utils.IsSequenceForData", "util.nest._packed_nest_with_indices", "util.nest.list_to_tuple.sequence_fn"], "util._pywrap_utils.IsSequenceForData": [], "util.nest._sequence_like": ["util.nest._sorted", "util._pywrap_utils.IsAttrs", "<builtin>.isinstance", "<builtin>.dict", "util.nest.is_namedtuple", "<builtin>.zip", "collections.defaultdict", "util._pywrap_utils.IsTypeSpec", "platform.tf_logging.log_first_n", "util._pywrap_utils.IsMutableMapping", "<builtin>.TypeError", "<builtin>.type", "util._pywrap_utils.IsMappingView", "util._pywrap_utils.IsCompositeTensor", "<builtin>.len", "<builtin>.list", "util.nest._sequence_like", "util._pywrap_utils.IsMapping"], "util._pywrap_utils.FlattenForData": [], "util.nest._yield_flat_up_to": ["util.nest._yield_value", "util._pywrap_utils.IsSequenceForData", "util.nest._yield_flat_up_to", "<builtin>.zip", "<builtin>.dict", "util.nest._yield_sorted_items"], "util.nest.assert_shallow_structure": ["<builtin>.isinstance", "six.iteritems", "<builtin>.sorted", "<builtin>.zip", "<builtin>.list", "<builtin>.type", "util.nest.assert_shallow_structure", "<builtin>.ValueError", "<builtin>.len", "<builtin>.set", "util._pywrap_utils.IsSequenceForData", "<builtin>.TypeError", "util.nest._yield_value", "util.nest.is_namedtuple", "util._pywrap_utils.IsTypeSpec", "util._pywrap_utils.SameNamedtuples", "util._pywrap_utils.IsCompositeTensor"], "util.options": [], "util.options._internal_attr_name": [], "util.options.OptionsBase.__init__": [], "util.options.OptionsBase.__eq__": ["<builtin>.getattr", "<builtin>.isinstance", "<builtin>.set"], "util.options.OptionsBase.__ne__": ["util.options.OptionsBase.__eq__", "<builtin>.isinstance"], "util.options.OptionsBase.__setattr__": ["<builtin>.type", "<builtin>.AttributeError", "<builtin>.hasattr", "<builtin>.ValueError"], "util.options.OptionsBase._set_mutable": [], "util.options.OptionsBase._to_proto": ["<builtin>.type", "<builtin>.NotImplementedError"], "util.options.OptionsBase._from_proto": ["<builtin>.type", "<builtin>.NotImplementedError"], "util.options.graph_rewrites": ["collections.namedtuple"], "util.options.create_option.get_fn": ["util.options.<lambda1>"], "util.options.<lambda1>": [], "util.options.create_option.set_fn": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance"], "<builtin>.property": [], "util.random_seed": [], "ops.math_ops.equal": ["ops.gen_math_ops.equal"], "ops.array_ops.where_v2": ["<builtin>.ValueError", "framework.ops.convert_to_tensor", "ops.gen_math_ops.select_v2", "ops.gen_array_ops.where", "framework.ops.name_scope"], "util.sparse": [], "util.sparse.any_sparse": ["<builtin>.any", "util.nest.flatten"], "util.sparse.as_dense_shapes": ["<builtin>.zip", "util.nest.flatten", "util.nest.pack_sequence_as", "framework.tensor_shape.unknown_shape"], "framework.tensor_shape.unknown_shape": ["framework.tensor_shape.TensorShape.__init__", "framework.tensor_shape.Dimension.__init__", "<builtin>.TypeError"], "util.sparse.as_dense_types": ["<builtin>.zip", "util.nest.flatten", "util.nest.pack_sequence_as"], "util.sparse.deserialize_sparse_tensors": ["<builtin>.zip", "ops.sparse_ops.deserialize_sparse", "util.nest.pack_sequence_as", "util.nest.flatten"], "ops.sparse_ops.deserialize_sparse": ["ops.gen_sparse_ops.deserialize_sparse", "framework.sparse_tensor.SparseTensor"], "util.sparse.get_classes": ["util.nest.pack_sequence_as", "<builtin>.isinstance", "util.nest.flatten"], "util.sparse.serialize_many_sparse_tensors": ["framework.sparse_tensor.is_sparse", "util.nest.pack_sequence_as", "util.nest.flatten", "ops.sparse_ops.serialize_many_sparse"], "framework.sparse_tensor.is_sparse": ["<builtin>.isinstance"], "ops.sparse_ops.serialize_many_sparse": ["ops.sparse_ops.serialize_many_sparse_v2"], "util.sparse.serialize_sparse_tensors": ["util.nest.pack_sequence_as", "<builtin>.isinstance", "util.nest.flatten", "ops.sparse_ops.serialize_sparse"], "ops.sparse_ops.serialize_sparse": ["ops.sparse_ops.serialize_sparse_v2"], "util.structure": ["<builtin>.type", "util.tf_export.tf_export", "util.deprecation.deprecated", "framework.type_spec.register_type_spec_from_value_converter"], "util.structure._TensorStructure": ["framework.tensor_spec.TensorSpec"], "util.structure._SparseTensorStructure": ["framework.sparse_tensor.SparseTensorSpec"], "framework.sparse_tensor.SparseTensorSpec": ["<builtin>.property"], "util.structure._TensorArrayStructure": ["ops.tensor_array_ops.TensorArraySpec"], "ops.tensor_array_ops.TensorArraySpec": ["<builtin>.property"], "util.structure._RaggedTensorStructure": ["ragged.ragged_tensor.RaggedTensorSpec"], "ragged.ragged_tensor.RaggedTensorSpec": [], "sparse_tensor.SparseTensor.from_value": [], "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor": ["framework.ops.name_scope", "ragged.ragged_tensor.RaggedTensor.from_nested_row_splits", "<builtin>.isinstance", "<builtin>.ValueError", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.ops.convert_to_tensor"], "composite_tensor.CompositeTensor.__init__": [], "util.structure._from_tensor_list_helper": ["util.nest.flatten", "<builtin>.zip", "util.nest.pack_sequence_as", "<builtin>.ValueError", "util.structure.from_compatible_tensor_list.<lambda1>", "<builtin>.len", "util.structure.from_tensor_list.<lambda1>", "<builtin>.sum"], "<builtin>.sum": [], "util.structure.from_tensor_list.<lambda1>": [], "util.structure.from_compatible_tensor_list.<lambda1>": [], "util.structure.get_flat_tensor_specs.<lambda1>": [], "functools.reduce": [], "util.structure._to_tensor_list_helper": ["<builtin>.zip", "functools.reduce", "util.nest.assert_same_structure", "util.nest.flatten"], "util.structure._to_tensor_list_helper.reduce_fn": ["util.structure.to_tensor_list.<lambda1>", "util.structure.to_batched_tensor_list.<lambda1>"], "util.structure.to_batched_tensor_list.<lambda1>": [], "util.structure.to_tensor_list.<lambda1>": [], "framework.type_spec._type_spec_from_value": ["<builtin>.reversed", "framework.type_spec._type_spec_from_value", "<builtin>.type", "<builtin>.isinstance", "<builtin>.len"], "util.structure.type_spec_from_value.<lambda1>": ["<builtin>.type"], "platform.tf_logging.vlog": ["platform.tf_logging.get_logger"], "util.structure.NoneTensor._type_spec": ["type_spec.BatchableTypeSpec.__init__"], "type_spec.BatchableTypeSpec.__init__": [], "util.structure.NoneTensorSpec.value_type": [], "util.structure.NoneTensorSpec._serialize": [], "util.structure.NoneTensorSpec._component_specs": [], "util.structure.NoneTensorSpec._to_components": [], "util.structure.NoneTensorSpec._from_components": [], "util.structure.NoneTensorSpec._to_tensor_list": [], "util.structure.NoneTensorSpec.from_value": ["type_spec.BatchableTypeSpec.__init__"], "util.structure.NoneTensorSpec._batch": ["type_spec.BatchableTypeSpec.__init__"], "util.structure.NoneTensorSpec._unbatch": ["type_spec.BatchableTypeSpec.__init__"], "util.structure.NoneTensorSpec._to_batched_tensor_list": [], "util.structure.NoneTensorSpec._to_legacy_output_types": [], "util.structure.NoneTensorSpec._to_legacy_output_shapes": [], "util.structure.NoneTensorSpec._to_legacy_output_classes": [], "util.structure.NoneTensorSpec.most_specific_compatible_shape": ["<builtin>.type", "<builtin>.ValueError"], "framework.type_spec.register_type_spec_from_value_converter": ["util.tf_decorator.unwrap"], "util.traverse": [], "util.traverse._traverse": ["util.traverse.obtain_capture_by_value_ops.capture_by_value", "moves.queue.Queue", "util.traverse.obtain_all_variant_tensor_ops.<lambda1>"], "util.traverse.obtain_capture_by_value_ops.capture_by_value": [], "util.traverse.obtain_all_variant_tensor_ops.<lambda1>": [], "util.traverse.obtain_all_variant_tensor_ops": ["util.traverse._traverse"], "python.debugger": [], "python.debugger.<dict1>.<lambda1>": [], "python.debugger.<dict1>.<lambda2>": [], "numpy.abs": [], "python.debugger.<lambda2>": ["numpy.abs", "numpy.max"], "python.debugger.<dict1>.<lambda3>": [], "numpy.average": [], "python.debugger.<lambda3>": ["numpy.average"], "python.debugger._get_quant_params": [], "python.debugger.QuantizationDebugOptions.__init__": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.set"], "python.debugger.QuantizationDebugger.__init__": ["python.debugger.QuantizationDebugger._init_from_converter", "python.debugger.QuantizationDebugger._initialize_stats", "python.debugger.QuantizationDebugOptions.__init__", "tensorflow.lite.Interpreter", "python.debugger.QuantizationDebugger._set_converter_options_for_float", "python.debugger.QuantizationDebugger._set_converter_options_for_calibration"], "python.debugger.QuantizationDebugger._set_converter_options_for_float": [], "python.debugger.QuantizationDebugger._set_converter_options_for_calibration": ["<builtin>.ValueError"], "python.debugger.QuantizationDebugger._init_from_converter": ["python.convert.mlir_quantize", "tensorflow.lite.Interpreter"], "tensorflow.lite.Interpreter": [], "python.debugger.QuantizationDebugger._initialize_stats": ["python.debugger.QuantizationDebugger._get_numeric_verify_tensor_details", "python.metrics_portable.TFLiteMetrics", "python.metrics_nonportable.TFLiteMetrics", "<builtin>.ValueError", "<builtin>.dict"], "python.debugger.QuantizationDebugger.options": ["python.debugger.QuantizationDebugger._initialize_stats", "python.debugger.QuantizationDebugger._init_from_converter"], "python.debugger.QuantizationDebugger._get_numeric_verify_tensor_details": [], "python.metrics_nonportable.TFLiteMetrics": [], "python.metrics_portable.TFLiteMetrics": [], "python.debugger.QuantizationDebugger._get_quantized_model": ["python.convert.mlir_quantize", "<builtin>.ValueError"], "python.convert.mlir_quantize": ["python.convert.convert_tensor_tf_type_to_tflite_type", "python.wrap_toco.wrapped_experimental_mlir_quantize"], "python.debugger.QuantizationDebugger.get_nondebug_quantized_model": ["python.debugger.QuantizationDebugger._get_quantized_model"], "python.debugger.QuantizationDebugger.get_debug_quantized_model": ["python.debugger.QuantizationDebugger._get_quantized_model"], "python.debugger.QuantizationDebugger.run": ["python.debugger.QuantizationDebugger._collect_model_statistics", "python.debugger.QuantizationDebugger._collect_layer_statistics"], "python.debugger.QuantizationDebugger._collect_layer_statistics": ["python.debugger.QuantizationDebugger._get_numeric_verify_tensor_details", "collections.defaultdict", "python.debugger.QuantizationDebugger._set_input_tensors", "numpy.nanmean"], "python.debugger.QuantizationDebugger._collect_model_statistics": ["collections.defaultdict", "python.debugger.QuantizationDebugger._set_input_tensors", "numpy.mean", "python.debugger.QuantizationDebugger._get_output_tensors"], "python.debugger.QuantizationDebugger._collect_layer_statistics.<lambda1>": ["collections.defaultdict"], "python.debugger.QuantizationDebugger._set_input_tensors": ["python.debugger._get_quant_params", "<builtin>.len", "<builtin>.zip", "numpy.round", "<builtin>.ValueError"], "numpy.nanmean": [], "python.debugger.QuantizationDebugger._get_output_tensors": ["python.debugger._get_quant_params"], "numpy.round": [], "python.debugger.QuantizationDebugger._get_operand_name_and_index": ["<builtin>.len", "<builtin>.int", "re.match"], "python.debugger.QuantizationDebugger.layer_statistics_dump": ["<builtin>.list", "csv.DictWriter", "python.debugger.QuantizationDebugger._get_operand_name_and_index"], "csv.DictWriter": [], "cli.analyzer_cli": [], "cli.analyzer_cli._add_main_menu": ["cli.debugger_cli_common.MenuItem", "cli.debugger_cli_common.Menu"], "cli.debugger_cli_common.Menu": [], "cli.debugger_cli_common.MenuItem": [], "cli.analyzer_cli.DebugAnalyzer.__init__": ["cli.evaluator.ExpressionEvaluator", "cli.analyzer_cli.DebugAnalyzer._build_argument_parsers"], "cli.evaluator.ExpressionEvaluator": [], "cli.analyzer_cli.DebugAnalyzer._build_argument_parsers": ["argparse.ArgumentParser", "cli.command_parser.get_print_tensor_argparser"], "cli.command_parser.get_print_tensor_argparser": ["argparse.ArgumentParser"], "cli.analyzer_cli.DebugAnalyzer.add_tensor_filter": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.isinstance"], "cli.analyzer_cli.DebugAnalyzer.get_tensor_filter": ["<builtin>.ValueError"], "cli.analyzer_cli.DebugAnalyzer.get_help": [], "cli.analyzer_cli.DebugAnalyzer.list_tensors": ["<builtin>.ValueError", "<builtin>.len", "cli.debugger_cli_common.RichTextLines", "cli.analyzer_cli.DebugAnalyzer._measure_tensor_list_column_widths", "cli.analyzer_cli.DebugAnalyzer._sort_dump_data_by", "cli.cli_shared.error", "cli.analyzer_cli.DebugAnalyzer.get_tensor_filter", "cli.analyzer_cli.DebugAnalyzer._tensor_list_column_heads", "cli.analyzer_cli._add_main_menu", "cli.cli_shared.bytes_to_readable_str", "re.compile"], "cli.debugger_cli_common.RichTextLines": [], "cli.cli_shared.error": ["cli.debugger_cli_common.RichLine", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list"], "cli.analyzer_cli.DebugAnalyzer._measure_tensor_list_column_widths": ["cli.cli_shared.bytes_to_readable_str", "<builtin>.max", "<builtin>.len"], "cli.analyzer_cli.DebugAnalyzer._sort_dump_data_by": ["<builtin>.ValueError", "<builtin>.sorted"], "cli.analyzer_cli.DebugAnalyzer._tensor_list_column_heads": ["cli.debugger_cli_common.RichTextLines", "<builtin>.len", "cli.debugger_cli_common.MenuItem"], "cli.cli_shared.bytes_to_readable_str": ["<builtin>.str"], "cli.analyzer_cli.DebugAnalyzer._sort_dump_data_by.<lambda1>": [], "cli.analyzer_cli.DebugAnalyzer._sort_dump_data_by.<lambda2>": [], "cli.analyzer_cli.DebugAnalyzer._sort_dump_data_by.<lambda3>": [], "cli.analyzer_cli.DebugAnalyzer._sort_dump_data_by.<lambda4>": [], "cli.analyzer_cli.DebugAnalyzer.node_info": ["<builtin>.len", "cli.debugger_cli_common.RichTextLines", "lib.debug_graphs.parse_node_or_tensor_name", "cli.cli_shared.error", "cli.analyzer_cli.DebugAnalyzer._render_node_traceback", "cli.analyzer_cli.DebugAnalyzer._list_node_attributes", "cli.analyzer_cli.DebugAnalyzer._list_node_dumps", "cli.analyzer_cli._add_main_menu", "cli.analyzer_cli.DebugAnalyzer._format_neighbors", "cli.analyzer_cli.DebugAnalyzer._exclude_denylisted_ops"], "lib.debug_graphs.parse_node_or_tensor_name": ["<builtin>.int"], "cli.analyzer_cli.DebugAnalyzer._exclude_denylisted_ops": ["lib.debug_graphs.get_node_name"], "cli.analyzer_cli.DebugAnalyzer._format_neighbors": ["cli.debugger_cli_common.RichTextLines", "<builtin>.len", "cli.debugger_cli_common.MenuItem"], "cli.analyzer_cli.DebugAnalyzer._list_node_attributes": ["<builtin>.repr", "cli.debugger_cli_common.RichTextLines"], "cli.analyzer_cli.DebugAnalyzer._list_node_dumps": ["cli.debugger_cli_common.RichTextLines", "<builtin>.len", "cli.debugger_cli_common.MenuItem"], "cli.analyzer_cli.DebugAnalyzer._render_node_traceback": ["cli.debugger_cli_common.RichLine", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "<builtin>.enumerate", "cli.debugger_cli_common.MenuItem"], "lib.debug_graphs.get_node_name": ["lib.debug_graphs.parse_node_or_tensor_name"], "cli.debugger_cli_common.RichLine": [], "cli.debugger_cli_common.rich_text_lines_from_rich_line_list": ["<builtin>.isinstance", "cli.debugger_cli_common.RichTextLines.__init__", "<builtin>.enumerate"], "cli.analyzer_cli.DebugAnalyzer.list_inputs": ["lib.debug_graphs.get_node_name", "cli.analyzer_cli._add_main_menu", "cli.analyzer_cli.DebugAnalyzer._list_inputs_or_outputs"], "cli.analyzer_cli.DebugAnalyzer._list_inputs_or_outputs": ["<builtin>.len", "cli.debugger_cli_common.RichTextLines", "lib.debug_graphs.parse_node_or_tensor_name", "cli.cli_shared.error", "cli.analyzer_cli.DebugAnalyzer._dfs_from_node"], "cli.analyzer_cli.DebugAnalyzer.print_tensor": ["cli.command_parser.parse_tensor_name_with_slicing", "cli.cli_shared.numpy_printoptions_from_screen_info", "<builtin>.len", "lib.debug_graphs.parse_node_or_tensor_name", "cli.cli_shared.parse_ranges_highlight", "cli.cli_shared.error", "<builtin>.int", "cli.debugger_cli_common.RichTextLines", "cli.cli_shared.format_tensor", "<builtin>.enumerate", "cli.analyzer_cli._add_main_menu", "<builtin>.set", "<builtin>.list", "cli.debugger_cli_common.MenuItem"], "cli.cli_shared.numpy_printoptions_from_screen_info": [], "cli.cli_shared.parse_ranges_highlight": ["cli.command_parser.parse_ranges", "cli.tensor_format.HighlightOptions"], "cli.command_parser.parse_tensor_name_with_slicing": [], "cli.cli_shared.format_tensor": ["platform.gfile.Stat", "cli.debugger_cli_common.RichLine", "cli.command_parser.evaluate_tensor_slice", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "platform.gfile.Open", "cli.tensor_format.format_tensor", "cli.cli_shared.bytes_to_readable_str", "numpy.save"], "cli.analyzer_cli.DebugAnalyzer.list_outputs": ["lib.debug_graphs.get_node_name", "cli.analyzer_cli._add_main_menu", "cli.analyzer_cli.DebugAnalyzer._list_inputs_or_outputs"], "cli.analyzer_cli.DebugAnalyzer.evaluate_expression": ["cli.cli_shared.format_tensor", "cli.cli_shared.numpy_printoptions_from_screen_info"], "cli.analyzer_cli.DebugAnalyzer._reconstruct_print_source_command": [], "cli.analyzer_cli.DebugAnalyzer.print_source": ["<builtin>.len", "<builtin>.enumerate", "lib.debug_graphs.get_node_name", "cli.analyzer_cli.DebugAnalyzer._reconstruct_print_source_command", "<builtin>.sorted", "lib.source_utils.annotate_source", "lib.source_utils.load_source", "cli.analyzer_cli._add_main_menu", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "cli.debugger_cli_common.RichLine", "cli.debugger_cli_common.MenuItem"], "lib.source_utils.annotate_source": ["<builtin>.set", "<builtin>.reversed", "<builtin>.map", "lib.source_utils._norm_abs_path", "<builtin>.ValueError", "<builtin>.list"], "lib.source_utils.load_source": ["os.path.isfile", "<builtin>.len", "lib.source_utils._try_load_par_source", "<builtin>.int", "numpy.ceil", "<builtin>.open", "numpy.log10", "<builtin>.IOError"], "cli.analyzer_cli.DebugAnalyzer._make_source_table": ["<builtin>.str", "<builtin>.len", "<builtin>.max", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "cli.debugger_cli_common.RichLine", "lib.source_utils.is_extension_uncompiled_python_source", "cli.debugger_cli_common.MenuItem"], "lib.source_utils.is_extension_uncompiled_python_source": ["os.path.splitext"], "cli.analyzer_cli.DebugAnalyzer.list_source": ["lib.source_utils.list_source_files_against_dump", "cli.analyzer_cli._add_main_menu", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "cli.debugger_cli_common.RichLine", "cli.analyzer_cli.DebugAnalyzer._make_source_table"], "lib.source_utils.list_source_files_against_dump": ["<builtin>.set", "os.path.isfile", "<builtin>.len", "<builtin>.sum", "re.compile", "collections.defaultdict", "lib.source_utils.guess_is_tensorflow_py_library", "lib.source_utils._norm_abs_path", "<builtin>.ValueError", "<builtin>.int", "<builtin>.sorted"], "cli.analyzer_cli.DebugAnalyzer._dfs_from_node": ["copy.copy", "six.moves.xrange", "<builtin>.len", "<builtin>.enumerate", "lib.debug_graphs.get_node_name", "lib.debug_graphs.parse_node_or_tensor_name", "<builtin>.sorted", "cli.analyzer_cli.DebugAnalyzer._dfs_from_node", "cli.analyzer_cli.DebugAnalyzer._exclude_denylisted_ops"], "copy.copy": [], "<builtin>.repr": [], "cli.analyzer_cli.create_analyzer_ui": ["cli.cli_config.CLIConfig", "cli.analyzer_cli.DebugAnalyzer.add_tensor_filter", "cli.analyzer_cli.DebugAnalyzer.__init__", "cli.ui_factory.get_ui", "cli.analyzer_cli.DebugAnalyzer.get_help"], "cli.cli_config.CLIConfig": [], "cli.ui_factory.get_ui": ["<builtin>.ValueError", "cli.ui_factory.get_ui", "cli.readline_ui.ReadlineUI", "cli.curses_ui.CursesUI", "copy.deepcopy"], "cli.base_ui": [], "cli.base_ui.BaseUI.__init__": ["cli.debugger_cli_common.TabCompletionRegistry", "cli.cli_config.CLIConfig", "cli.base_ui.BaseUI.register_command_handler", "cli.debugger_cli_common.CommandHandlerRegistry", "argparse.ArgumentParser"], "cli.debugger_cli_common.CommandHandlerRegistry": [], "cli.debugger_cli_common.TabCompletionRegistry": [], "cli.base_ui.BaseUI.register_command_handler": [], "cli.base_ui.BaseUI.set_help_intro": [], "cli.base_ui.BaseUI.register_tab_comp_context": [], "cli.base_ui.BaseUI.run_ui": ["<builtin>.NotImplementedError"], "cli.base_ui.BaseUI._parse_command": ["cli.command_parser.extract_output_file_path", "cli.command_parser.parse_command"], "cli.command_parser.parse_command": ["<builtin>.any"], "cli.command_parser.extract_output_file_path": ["cli.command_parser._parse_interval", "<builtin>.SyntaxError", "<builtin>.len"], "cli.base_ui.BaseUI._analyze_tab_complete_input": ["<builtin>.len"], "cli.base_ui.BaseUI.config": [], "cli.base_ui.BaseUI._config_command_handler": ["<builtin>.hasattr"], "cli.cli_config": [], "cli.cli_config.CLIConfig.__init__": ["collections.OrderedDict", "platform.gfile.Exists", "cli.cli_config.CLIConfig._load_from_file", "cli.cli_config.CLIConfig._save_to_file", "cli.cli_config.CLIConfig._default_config_file_path"], "cli.cli_config.CLIConfig._default_config_file_path": ["os.path.expanduser", "os.path.join"], "platform.gfile.Exists": [], "cli.cli_config.CLIConfig._load_from_file": ["<builtin>.dict", "collections.OrderedDict", "<builtin>.sorted", "json.load", "platform.gfile.Open"], "cli.cli_config.CLIConfig._save_to_file": ["platform.gfile.Open", "json.dump"], "cli.cli_config.CLIConfig.get": ["<builtin>.KeyError"], "<builtin>.KeyError": [], "cli.cli_config.CLIConfig.set": ["<builtin>.str", "<builtin>.int", "<builtin>.TypeError", "cli.cli_config.CLIConfig._save_to_file", "<builtin>.type", "<builtin>.isinstance", "<builtin>.KeyError", "<builtin>.ValueError", "<builtin>.bool"], "cli.cli_config.CLIConfig.set_callback": ["<builtin>.TypeError", "<builtin>.KeyError", "<builtin>.callable"], "os.path.expanduser": [], "platform.gfile.Open": [], "json.dump": [], "cli.cli_config.CLIConfig.summarize": ["<builtin>.str", "cli.debugger_cli_common.RichLine", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list"], "json.load": [], "cli.cli_shared": [], "cli.cli_shared.time_to_readable_str": ["<builtin>.int", "<builtin>.len", "math.log", "<builtin>.ValueError", "<builtin>.min", "math.pow"], "math.pow": [], "math.log": [], "cli.cli_shared.parse_ranges_highlight.ranges_filter": ["numpy.logical_and", "numpy.logical_or", "numpy.zeros"], "numpy.zeros": [], "numpy.logical_and": [], "numpy.logical_or": [], "cli.command_parser.parse_ranges": ["<builtin>.type", "ast.literal_eval", "<builtin>.len", "<builtin>.ValueError", "re.sub", "<builtin>.repr", "<builtin>.isinstance"], "cli.tensor_format.HighlightOptions": [], "cli.command_parser.evaluate_tensor_slice": ["<builtin>.ValueError", "cli.command_parser._parse_slices", "cli.command_parser.validate_slicing_string"], "numpy.save": [], "platform.gfile.Stat": [], "cli.tensor_format.format_tensor": ["<builtin>.isinstance", "numpy.set_printoptions", "cli.debugger_cli_common.RichTextLines", "<builtin>.repr", "numpy.argwhere", "<builtin>.str", "<builtin>.float", "numpy.size", "cli.tensor_format.numeric_summary", "cli.tensor_format._annotate_ndarray_lines", "<builtin>.zip", "<builtin>.list", "cli.tensor_format.locate_tensor_element", "<builtin>.len"], "cli.cli_shared._recommend_command": ["cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "cli.debugger_cli_common.RichLine", "cli.debugger_cli_common.MenuItem"], "cli.cli_shared.get_tfdbg_logo": ["cli.debugger_cli_common.RichTextLines"], "cli.cli_shared.get_run_start_intro": ["cli.debugger_cli_common.RichLine", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "lib.common.get_flattened_names", "lib.common.get_graph_element_name", "cli.debugger_cli_common.Menu", "cli.cli_shared._recommend_command", "cli.debugger_cli_common.RichTextLines", "cli.debugger_cli_common.MenuItem"], "lib.common.get_flattened_names": ["lib.common.get_flattened_names", "<builtin>.isinstance", "lib.common.get_graph_element_name"], "lib.common.get_graph_element_name": ["<builtin>.str", "<builtin>.hasattr"], "cli.cli_shared.get_run_short_description": ["<builtin>.len", "<builtin>.isinstance", "lib.common.get_flattened_names", "lib.common.get_graph_element_name", "<builtin>.hasattr"], "cli.cli_shared.get_error_intro": ["cli.debugger_cli_common.RichLine", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "<builtin>.hasattr", "cli.cli_shared._recommend_command", "cli.debugger_cli_common.RichTextLines"], "cli.command_parser": ["re.compile"], "cli.command_parser.Interval.__init__": [], "cli.command_parser.Interval.contains": [], "cli.command_parser.Interval.__eq__": [], "<builtin>.SyntaxError": [], "cli.command_parser._parse_interval": ["cli.command_parser.Interval.__init__", "<builtin>.len", "<builtin>.ValueError"], "cli.command_parser.validate_slicing_string": ["re.search", "<builtin>.bool"], "cli.command_parser._parse_slices": ["<builtin>.int", "<builtin>.slice", "<builtin>.len", "<builtin>.tuple", "<builtin>.ValueError"], "cli.command_parser.parse_indices": ["re.sub", "<builtin>.int"], "re.sub": [], "ast.literal_eval": [], "cli.command_parser.parse_memory_interval": ["<builtin>.float", "cli.command_parser.Interval.__init__", "<builtin>.ValueError", "cli.command_parser.parse_readable_size_str", "cli.command_parser._parse_interval"], "cli.command_parser.parse_readable_size_str": ["<builtin>.float", "<builtin>.int", "<builtin>.ValueError"], "cli.command_parser.parse_time_interval": ["<builtin>.float", "cli.command_parser.Interval.__init__", "<builtin>.ValueError", "cli.command_parser.parse_readable_time_str", "cli.command_parser._parse_interval"], "cli.command_parser.parse_readable_time_str": ["cli.command_parser.parse_readable_time_str.parse_positive_float", "<builtin>.int"], "cli.command_parser.parse_readable_time_str.parse_positive_float": ["<builtin>.float", "<builtin>.ValueError"], "cli.curses_ui": [], "cli.curses_ui._get_command_from_line_attr_segs": ["<builtin>.isinstance"], "cli.curses_ui.ScrollBar.__init__": ["<builtin>.ValueError"], "cli.curses_ui.ScrollBar._block_y": ["<builtin>.int", "<builtin>.float"], "cli.curses_ui.ScrollBar.layout": ["cli.debugger_cli_common.RichTextLines", "six.moves.xrange", "cli.curses_ui.ScrollBar._block_y"], "cli.curses_ui.ScrollBar.get_click_command": ["cli.curses_ui.ScrollBar._block_y"], "<builtin>.ord": [], "cli.curses_ui.CursesUI": ["threading.Lock", "<builtin>.ord"], "cli.curses_ui.CursesUI.__init__": ["cli.debugger_cli_common.CommandHistory", "cli.curses_widgets.CursesNavigationHistory", "base_ui.BaseUI.register_command_handler", "base_ui.BaseUI.__init__", "cli.curses_ui.CursesUI._screen_refresh_size", "signal.signal", "cli.curses_ui.CursesUI._init_layout", "cli.curses_ui.CursesUI._screen_init"], "base_ui.BaseUI.__init__": [], "cli.curses_ui.CursesUI._screen_init": ["cli.curses_ui.CursesUI._screen_color_init", "curses.initscr", "os.getenv"], "cli.curses_ui.CursesUI._screen_refresh_size": [], "cli.curses_ui.CursesUI._init_layout": ["collections.namedtuple", "<builtin>.int"], "cli.debugger_cli_common.CommandHistory": [], "cli.curses_widgets.CursesNavigationHistory": [], "signal.signal": [], "base_ui.BaseUI.register_command_handler": [], "curses.initscr": [], "cli.curses_ui.CursesUI._screen_color_init": ["curses.init_pair", "curses.color_pair", "curses.start_color", "curses.use_default_colors"], "curses.start_color": [], "curses.use_default_colors": [], "curses.init_pair": [], "curses.color_pair": [], "cli.curses_ui.CursesUI._screen_launch": ["BaseUI.config.set_callback", "curses.noecho", "curses.cbreak", "BaseUI.config.get", "cli.curses_ui.CursesUI._screen_set_mousemask", "cli.curses_ui.CursesUI._screen_create_command_window"], "curses.noecho": [], "curses.cbreak": [], "BaseUI.config.get": [], "cli.curses_ui.CursesUI._screen_set_mousemask": ["curses.mousemask"], "cli.curses_ui.CursesUI._screen_launch.<lambda1>": ["cli.curses_ui.CursesUI._set_mouse_enabled"], "cli.curses_ui.CursesUI._set_mouse_enabled": ["cli.curses_ui.CursesUI._redraw_output", "cli.curses_ui.CursesUI._screen_set_mousemask"], "BaseUI.config.set_callback": [], "cli.curses_ui.CursesUI._screen_create_command_window": ["<builtin>.len", "curses.newwin"], "curses.newwin": [], "cli.curses_ui.CursesUI._screen_refresh": [], "cli.curses_ui.CursesUI._screen_terminate": ["curses.nocbreak", "signal.signal", "curses.echo", "curses.endwin"], "curses.nocbreak": [], "curses.echo": [], "curses.endwin": [], "cli.curses_ui.CursesUI.run_ui": ["cli.curses_ui.CursesUI._screen_launch", "cli.curses_ui.CursesUI._title", "cli.curses_ui.CursesUI._dispatch_command", "cli.curses_ui.CursesUI._ui_loop", "cli.curses_ui.CursesUI._screen_terminate", "base_ui.BaseUI._on_ui_exit"], "cli.curses_ui.CursesUI._dispatch_command": ["cli.curses_ui.CursesUI._navigate_screen_output", "<builtin>.len", "cli.curses_ui.CursesUI._display_output", "cli.debugger_cli_common.RichTextLines", "cli.tensor_format.locate_tensor_element", "cli.curses_ui.CursesUI._toast", "BaseUI._command_handler_registry.dispatch_command", "<builtin>.str", "cli.command_parser.parse_indices", "cli.curses_ui.CursesUI._error_toast", "base_ui.BaseUI._parse_command", "cli.curses_ui.CursesUI._info_toast", "BaseUI._command_handler_registry.is_registered", "cli.curses_ui.CursesUI._scroll_output"], "cli.curses_ui.CursesUI._title": ["cli.curses_ui.CursesUI._screen_draw_text_line", "<builtin>.len"], "cli.curses_ui.CursesUI._ui_loop": ["cli.curses_ui.CursesUI._screen_create_command_textbox", "cli.curses_ui.CursesUI._tab_complete", "cli.curses_ui.CursesUI._get_user_command", "cli.curses_ui.CursesUI._dispatch_command"], "base_ui.BaseUI._on_ui_exit": [], "cli.curses_ui.CursesUI.get_help": ["BaseUI._command_handler_registry.get_help"], "BaseUI._command_handler_registry.get_help": [], "cli.curses_ui.CursesUI._addstr": [], "cli.curses_ui.CursesUI._refresh_pad": [], "cli.curses_ui.CursesUI._screen_create_command_textbox": ["cli.curses_ui.CursesUI._auto_key_in", "cli.curses_ui.CursesUI._addstr", "curses.textpad.Textbox"], "curses.textpad.Textbox": [], "cli.curses_ui.CursesUI._auto_key_in": ["<builtin>.ord", "cli.curses_ui.CursesUI._erase_existing_command"], "cli.curses_ui.CursesUI._get_user_command": ["cli.curses_ui.CursesUI._screen_get_user_command", "cli.curses_ui.CursesUI._strip_terminator"], "cli.curses_ui.CursesUI._tab_complete": ["base_ui.BaseUI._analyze_tab_complete_input", "<builtin>.len", "BaseUI._tab_completion_registry.get_completions", "cli.curses_ui.CursesUI._display_candidates"], "cli.curses_ui.CursesUI._screen_get_user_command": [], "cli.curses_ui.CursesUI._strip_terminator": ["<builtin>.chr"], "<builtin>.chr": [], "cli.curses_ui.CursesUI._navigate_screen_output": ["cli.curses_ui.CursesUI._scroll_output", "cli.curses_ui.CursesUI._display_output", "cli.curses_ui.CursesUI._toast"], "cli.curses_ui.CursesUI._toast": ["<builtin>.len", "cli.debugger_cli_common.RichTextLines", "cli.curses_ui.CursesUI._display_lines", "cli.curses_ui.CursesUI._screen_scroll_output_pad", "<builtin>.min"], "cli.curses_ui.CursesUI._display_output": ["cli.debugger_cli_common.regex_find", "cli.curses_ui.CursesUI._toast", "cli.curses_ui.CursesUI._screen_display_output", "<builtin>.str", "cli.curses_ui.CursesUI._error_toast", "cli.curses_ui.CursesUI._scroll_output"], "cli.curses_ui.CursesUI._scroll_output": ["<builtin>.ValueError", "cli.curses_ui.CursesUI._screen_render_nav_bar", "cli.curses_ui.CursesUI._screen_draw_text_line", "<builtin>.int", "cli.curses_ui.CursesUI._screen_scroll_output_pad", "<builtin>.isinstance", "cli.curses_ui.CursesUI._compile_ui_status_summary", "<builtin>.type", "<builtin>.TypeError", "cli.curses_ui.CursesUI._screen_render_menu_pad"], "cli.tensor_format.locate_tensor_element": ["<builtin>.isinstance", "<builtin>.AttributeError", "six.moves.xrange", "cli.tensor_format._locate_elements_in_line", "cli.tensor_format._validate_indices_list", "<builtin>.len"], "cli.curses_ui.CursesUI._error_toast": ["cli.curses_ui.CursesUI._toast"], "base_ui.BaseUI._parse_command": [], "BaseUI._command_handler_registry.is_registered": [], "BaseUI._command_handler_registry.dispatch_command": [], "cli.curses_ui.CursesUI._info_toast": ["cli.curses_ui.CursesUI._toast"], "cli.curses_ui.CursesUI._screen_gather_textbox_str": [], "cli.curses_ui.CursesUI._on_textbox_keypress": ["cli.curses_ui.CursesUI._redraw_output", "<builtin>.len", "cli.curses_ui.CursesUI._dispatch_command", "cli.debugger_cli_common.CommandLineExit", "cli.curses_ui.CursesUI._screen_create_command_textbox", "cli.curses_ui.CursesUI._screen_getmouse", "cli.curses_ui.CursesUI._screen_refresh_size", "curses.napms", "cli.curses_ui.ScrollBar.get_click_command", "<builtin>.isinstance", "cli.curses_ui.CursesUI._fetch_hyperlink_command", "cli.curses_ui.CursesUI._init_layout", "cli.curses_ui.CursesUI._screen_gather_textbox_str", "<builtin>.type", "cli.curses_ui.CursesUI._screen_create_command_window", "<builtin>.TypeError", "cli.curses_ui.CursesUI._scroll_output"], "cli.curses_ui.CursesUI._redraw_output": ["cli.curses_ui.CursesUI._display_main_menu", "cli.curses_ui.CursesUI._display_output", "cli.curses_ui.CursesUI._display_nav_bar"], "cli.curses_ui.CursesUI._screen_getmouse": ["curses.getmouse"], "curses.napms": [], "cli.curses_ui.CursesUI._fetch_hyperlink_command": ["cli.curses_ui._get_command_from_line_attr_segs"], "cli.debugger_cli_common.CommandLineExit": [], "curses.getmouse": [], "cli.curses_ui.CursesUI._display_nav_bar": ["cli.curses_ui.CursesUI._screen_new_output_pad", "cli.curses_ui.CursesUI._screen_add_line_to_output_pad"], "cli.curses_ui.CursesUI._display_main_menu": ["cli.debugger_cli_common.wrap_rich_text_lines", "cli.curses_ui.CursesUI._screen_new_output_pad", "cli.curses_ui.CursesUI._screen_add_line_to_output_pad"], "cli.curses_ui.CursesUI._screen_draw_text_line": ["cli.curses_ui.CursesUI._screen_refresh", "<builtin>.len", "cli.curses_ui.CursesUI._addstr", "<builtin>.isinstance", "<builtin>.TypeError"], "cli.curses_ui.CursesUI._erase_existing_command": ["six.moves.xrange", "<builtin>.len"], "cli.curses_ui.CursesUI._screen_new_output_pad": ["curses.newpad"], "curses.newpad": [], "cli.curses_ui.CursesUI._screen_display_output": ["cli.debugger_cli_common.wrap_rich_text_lines", "cli.curses_ui.CursesUI._display_main_menu", "cli.curses_ui.CursesUI._display_lines", "cli.curses_ui.CursesUI._display_nav_bar"], "cli.debugger_cli_common.wrap_rich_text_lines": ["<builtin>.isinstance", "cli.debugger_cli_common.RichTextLines.num_lines", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.len", "cli.debugger_cli_common.RichTextLines.__init__"], "cli.curses_ui.CursesUI._display_lines": ["six.moves.xrange", "<builtin>.ValueError", "cli.curses_ui.CursesUI._screen_refresh", "cli.curses_ui.CursesUI._screen_new_output_pad", "<builtin>.len", "cli.curses_ui.CursesUI._screen_add_line_to_output_pad", "<builtin>.isinstance", "<builtin>.max"], "cli.debugger_cli_common.regex_find": ["re.compile", "<builtin>.ValueError", "copy.deepcopy", "<builtin>.sorted", "<builtin>.enumerate", "cli.debugger_cli_common.RichTextLines.__init__"], "cli.curses_ui.CursesUI._screen_add_line_to_output_pad": ["<builtin>.len", "<builtin>.zip", "<builtin>.isinstance", "cli.curses_ui.CursesUI._pad_line_end_with_whitespace", "<builtin>.TypeError"], "cli.curses_ui.CursesUI._pad_line_end_with_whitespace": [], "cli.curses_ui.CursesUI._screen_scroll_output_pad": ["cli.curses_ui.CursesUI._display_lines", "cli.curses_ui.ScrollBar.layout", "cli.curses_ui.CursesUI._refresh_pad", "cli.curses_ui.ScrollBar.__init__"], "cli.curses_ui.CursesUI._screen_render_nav_bar": ["cli.curses_ui.CursesUI._refresh_pad"], "cli.curses_ui.CursesUI._screen_render_menu_pad": ["cli.curses_ui.CursesUI._refresh_pad"], "cli.curses_ui.CursesUI._compile_ui_status_summary": ["cli.curses_ui.CursesUI._format_indices", "<builtin>.len", "<builtin>.min", "<builtin>.float", "cli.curses_ui.CursesUI._show_array_indices"], "cli.curses_ui.CursesUI._show_array_indices": ["cli.curses_ui.CursesUI._show_array_index_at_line"], "cli.curses_ui.CursesUI._format_indices": ["<builtin>.repr"], "cli.curses_ui.CursesUI._show_array_index_at_line": ["cli.curses_ui.CursesUI._format_indices", "cli.curses_ui.CursesUI._toast"], "base_ui.BaseUI._analyze_tab_complete_input": [], "BaseUI._tab_completion_registry.get_completions": [], "cli.curses_ui.CursesUI._display_candidates": ["<builtin>.len", "cli.debugger_cli_common.RichTextLines", "cli.curses_ui.CursesUI._display_lines", "<builtin>.min", "cli.curses_ui.CursesUI._screen_scroll_output_pad", "cli.debugger_cli_common.wrap_rich_text_lines", "cli.curses_ui.CursesUI._scroll_output"], "cli.curses_ui.CursesUI._interrupt_handler": ["sys.exit", "cli.curses_ui.CursesUI._screen_terminate", "base_ui.BaseUI._on_ui_exit", "<builtin>.print"], "cli.curses_ui.CursesUI._mouse_mode_command_handler": ["cli.curses_ui.CursesUI._info_toast", "cli.curses_ui.CursesUI._error_toast", "<builtin>.len", "cli.curses_ui.CursesUI._set_mouse_enabled"], "curses.mousemask": [], "cli.curses_widgets": [], "cli.curses_widgets.NavigationHistoryItem.__init__": [], "cli.curses_widgets.CursesNavigationHistory.__init__": ["<builtin>.ValueError"], "cli.curses_widgets.CursesNavigationHistory.add_item": ["cli.curses_widgets.NavigationHistoryItem.__init__", "<builtin>.len"], "cli.curses_widgets.CursesNavigationHistory.update_scroll_position": ["<builtin>.ValueError"], "cli.curses_widgets.CursesNavigationHistory.size": ["<builtin>.len"], "cli.curses_widgets.CursesNavigationHistory.pointer": [], "cli.curses_widgets.CursesNavigationHistory.go_back": ["<builtin>.ValueError", "cli.curses_widgets.CursesNavigationHistory.can_go_back"], "cli.curses_widgets.CursesNavigationHistory.can_go_back": [], "cli.curses_widgets.CursesNavigationHistory.go_forward": ["<builtin>.ValueError", "cli.curses_widgets.CursesNavigationHistory.can_go_forward"], "cli.curses_widgets.CursesNavigationHistory.can_go_forward": ["<builtin>.len"], "cli.curses_widgets.CursesNavigationHistory.render": ["cli.curses_widgets.CursesNavigationHistory.can_go_back", "cli.debugger_cli_common.MenuItem", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "<builtin>.len", "cli.debugger_cli_common.RichLine", "cli.curses_widgets.CursesNavigationHistory.can_go_forward"], "cli.debugger_cli_common": [], "cli.debugger_cli_common.CommandLineExit.__init__": [], "cli.debugger_cli_common.CommandLineExit.exit_token": [], "cli.debugger_cli_common.RichLine.__init__": ["<builtin>.len"], "cli.debugger_cli_common.RichLine.__add__": ["<builtin>.TypeError", "<builtin>.isinstance", "cli.debugger_cli_common.RichLine.__init__", "<builtin>.len"], "cli.debugger_cli_common.RichLine.__len__": ["<builtin>.len"], "cli.debugger_cli_common.RichTextLines.__init__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "cli.debugger_cli_common.get_tensorflow_version_lines": ["cli.debugger_cli_common.RichTextLines.__init__"], "cli.debugger_cli_common.RichTextLines.lines": [], "cli.debugger_cli_common.RichTextLines.font_attr_segs": [], "cli.debugger_cli_common.RichTextLines.annotations": [], "cli.debugger_cli_common.RichTextLines.num_lines": ["<builtin>.len"], "cli.debugger_cli_common.RichTextLines.slice": ["<builtin>.isinstance", "cli.debugger_cli_common.RichTextLines.__init__", "<builtin>.ValueError"], "cli.debugger_cli_common.RichTextLines.extend": ["<builtin>.isinstance", "cli.debugger_cli_common.RichTextLines.num_lines"], "cli.debugger_cli_common.RichTextLines._extend_before": ["<builtin>.isinstance", "cli.debugger_cli_common.RichTextLines.num_lines"], "cli.debugger_cli_common.RichTextLines.append": ["<builtin>.len"], "cli.debugger_cli_common.RichTextLines.append_rich_line": ["cli.debugger_cli_common.RichTextLines.append"], "cli.debugger_cli_common.RichTextLines.prepend": ["cli.debugger_cli_common.RichTextLines.__init__", "cli.debugger_cli_common.RichTextLines._extend_before"], "cli.debugger_cli_common.RichTextLines.write_to_file": ["platform.gfile.Open"], "copy.deepcopy": [], "cli.debugger_cli_common.regex_find.<lambda1>": [], "cli.debugger_cli_common.CommandHandlerRegistry.__init__": ["cli.debugger_cli_common.CommandHandlerRegistry.register_command_handler"], "cli.debugger_cli_common.CommandHandlerRegistry.register_command_handler": ["<builtin>.callable", "<builtin>.isinstance", "cli.debugger_cli_common.CommandHandlerRegistry._resolve_prefix", "<builtin>.ValueError"], "cli.debugger_cli_common.CommandHandlerRegistry._resolve_prefix": [], "cli.debugger_cli_common.CommandHandlerRegistry.dispatch_command": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.str", "cli.debugger_cli_common.CommandHandlerRegistry._resolve_prefix", "<builtin>.type", "cli.debugger_cli_common.RichTextLines.__init__", "traceback.format_exc"], "traceback.format_exc": [], "cli.debugger_cli_common.CommandHandlerRegistry.is_registered": ["cli.debugger_cli_common.CommandHandlerRegistry._resolve_prefix"], "cli.debugger_cli_common.CommandHandlerRegistry.get_help": ["<builtin>.sorted", "cli.debugger_cli_common.CommandHandlerRegistry._get_help_for_command_prefix", "cli.debugger_cli_common.RichTextLines.__init__", "cli.debugger_cli_common.RichTextLines.extend"], "cli.debugger_cli_common.CommandHandlerRegistry._get_help_for_command_prefix": ["cli.debugger_cli_common.CommandHandlerRegistry._resolve_prefix"], "cli.debugger_cli_common.CommandHandlerRegistry.set_help_intro": [], "cli.debugger_cli_common.CommandHandlerRegistry._help_handler": ["cli.debugger_cli_common.CommandHandlerRegistry.get_help", "cli.debugger_cli_common.RichTextLines.__init__", "<builtin>.len"], "cli.debugger_cli_common.CommandHandlerRegistry._version_handler": ["cli.debugger_cli_common.get_tensorflow_version_lines"], "cli.debugger_cli_common.TabCompletionRegistry.__init__": [], "cli.debugger_cli_common.TabCompletionRegistry.register_tab_comp_context": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.sorted"], "cli.debugger_cli_common.TabCompletionRegistry.deregister_context": ["<builtin>.KeyError"], "cli.debugger_cli_common.TabCompletionRegistry.extend_comp_items": ["<builtin>.sorted", "<builtin>.KeyError"], "cli.debugger_cli_common.TabCompletionRegistry.remove_comp_items": ["<builtin>.KeyError"], "cli.debugger_cli_common.TabCompletionRegistry.get_completions": ["<builtin>.sorted", "cli.debugger_cli_common.TabCompletionRegistry._common_prefix"], "cli.debugger_cli_common.TabCompletionRegistry._common_prefix": ["<builtin>.max", "<builtin>.enumerate", "<builtin>.min"], "cli.debugger_cli_common.CommandHistory.__init__": ["cli.debugger_cli_common.CommandHistory._load_history_from_file", "cli.debugger_cli_common.CommandHistory._get_default_history_file_path"], "cli.debugger_cli_common.CommandHistory._get_default_history_file_path": ["os.path.expanduser", "os.path.join"], "cli.debugger_cli_common.CommandHistory._load_history_from_file": ["<builtin>.print", "<builtin>.open", "os.path.isfile", "<builtin>.len"], "cli.debugger_cli_common.CommandHistory._add_command_to_history_file": ["<builtin>.open"], "cli.debugger_cli_common.CommandHistory.add_command": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.len", "cli.debugger_cli_common.CommandHistory._add_command_to_history_file"], "cli.debugger_cli_common.CommandHistory.most_recent_n": [], "cli.debugger_cli_common.CommandHistory.lookup_prefix": [], "cli.debugger_cli_common.MenuItem.__init__": [], "cli.debugger_cli_common.MenuItem.caption": [], "cli.debugger_cli_common.MenuItem.type": [], "cli.debugger_cli_common.MenuItem.content": [], "cli.debugger_cli_common.MenuItem.is_enabled": [], "cli.debugger_cli_common.MenuItem.disable": [], "cli.debugger_cli_common.MenuItem.enable": [], "cli.debugger_cli_common.Menu.__init__": [], "cli.debugger_cli_common.Menu.append": [], "cli.debugger_cli_common.Menu.insert": [], "cli.debugger_cli_common.Menu.num_items": ["<builtin>.len"], "cli.debugger_cli_common.Menu.captions": [], "cli.debugger_cli_common.Menu.caption_to_item": ["<builtin>.LookupError", "cli.debugger_cli_common.Menu.captions"], "<builtin>.LookupError": [], "cli.debugger_cli_common.Menu.format_as_single_line": ["<builtin>.isinstance", "cli.debugger_cli_common.RichTextLines.__init__", "<builtin>.len"], "cli.evaluator": ["re.compile"], "cli.evaluator._parse_debug_tensor_name": ["re.search", "<builtin>.ValueError", "<builtin>.len", "<builtin>.int", "re.match"], "cli.evaluator.ExpressionEvaluator.__init__": [], "cli.evaluator.ExpressionEvaluator.evaluate": ["<builtin>.reversed", "cli.evaluator._parse_debug_tensor_name", "<builtin>.ValueError", "<builtin>.eval", "<builtin>.list", "re.finditer"], "re.finditer": [], "<builtin>.eval": [], "cli.offline_analyzer": ["argparse.ArgumentParser", "absl.app.run"], "cli.offline_analyzer.main": ["<builtin>.print", "cli.analyzer_cli.create_analyzer_ui", "sys.exit", "lib.debug_data.DebugDumpDir"], "lib.debug_data.DebugDumpDir": [], "cli.offline_analyzer.<lambda1>": [], "cli.profile_analyzer_cli": [], "cli.profile_analyzer_cli.ProfileDataTableView.__init__": ["cli.cli_shared.time_to_readable_str"], "cli.profile_analyzer_cli.ProfileDataTableView.value": ["<builtin>.IndexError", "<builtin>.str", "cli.debugger_cli_common.MenuItem", "cli.debugger_cli_common.RichLine"], "<builtin>.IndexError": [], "cli.profile_analyzer_cli.ProfileDataTableView.row_count": ["<builtin>.len"], "cli.profile_analyzer_cli.ProfileDataTableView.column_count": ["<builtin>.len"], "cli.profile_analyzer_cli.ProfileDataTableView.column_names": [], "cli.profile_analyzer_cli.ProfileDataTableView.column_sort_id": [], "cli.profile_analyzer_cli._list_profile_filter": [], "cli.profile_analyzer_cli._list_profile_sort_key": [], "cli.profile_analyzer_cli.ProfileAnalyzer.__init__": ["argparse.ArgumentParser", "<builtin>.ValueError"], "cli.profile_analyzer_cli.ProfileAnalyzer.list_profile": ["cli.profile_analyzer_cli.ProfileAnalyzer._get_profile_data_generator.profile_data_generator", "re.compile", "cli.debugger_cli_common.RichTextLines", "cli.profile_analyzer_cli._list_profile_filter", "<builtin>.len", "<builtin>.range", "cli.profile_analyzer_cli.ProfileAnalyzer._get_list_profile_lines", "<builtin>.sorted", "cli.profile_analyzer_cli.ProfileAnalyzer._get_profile_data_generator", "cli.command_parser.parse_time_interval"], "cli.profile_analyzer_cli.ProfileAnalyzer._get_profile_data_generator": ["lib.source_utils.guess_is_tensorflow_py_library", "<builtin>.reversed"], "cli.profile_analyzer_cli.ProfileAnalyzer._get_profile_data_generator.profile_data_generator": ["lib.profiling.ProfileDatum"], "cli.profile_analyzer_cli.ProfileAnalyzer.list_profile.<lambda1>": ["cli.profile_analyzer_cli._list_profile_sort_key"], "cli.profile_analyzer_cli.ProfileAnalyzer._get_list_profile_lines": ["cli.profile_analyzer_cli.ProfileDataTableView.row_count", "cli.cli_shared.time_to_readable_str", "<builtin>.zip", "cli.profile_analyzer_cli.ProfileDataTableView.value", "cli.debugger_cli_common.RichLine", "cli.debugger_cli_common.MenuItem", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "<builtin>.sum", "cli.profile_analyzer_cli.ProfileDataTableView.column_sort_id", "cli.profile_analyzer_cli.ProfileDataTableView.column_count", "<builtin>.len", "<builtin>.range", "<builtin>.max", "cli.profile_analyzer_cli.ProfileDataTableView.__init__", "cli.profile_analyzer_cli.ProfileDataTableView.column_names"], "lib.source_utils.guess_is_tensorflow_py_library": ["os.path.normpath", "lib.source_utils.is_extension_compiled_python_source", "lib.source_utils._norm_abs_path", "lib.source_utils.is_extension_uncompiled_python_source"], "lib.profiling.ProfileDatum": [], "cli.profile_analyzer_cli.ProfileAnalyzer._measure_list_profile_column_widths": ["<builtin>.range", "<builtin>.str", "<builtin>.max", "<builtin>.len"], "cli.profile_analyzer_cli.ProfileAnalyzer.print_source": ["cli.cli_shared.time_to_readable_str", "lib.source_utils.load_source", "cli.debugger_cli_common.RichLine", "re.compile", "cli.debugger_cli_common.MenuItem", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "lib.source_utils.annotate_source_against_profile", "<builtin>.max", "re.escape", "cli.profile_analyzer_cli.ProfileAnalyzer._render_normalized_cost_bar", "<builtin>.range", "cli.profile_analyzer_cli.ProfileAnalyzer._get_profile_data_generator", "<builtin>.sum", "cli.profile_analyzer_cli.ProfileAnalyzer._get_total_cost", "os.path.expanduser", "cli.profile_analyzer_cli.ProfileAnalyzer._get_profile_data_generator.profile_data_generator", "cli.debugger_cli_common.RichTextLines", "<builtin>.len", "<builtin>.enumerate"], "lib.source_utils.annotate_source_against_profile": ["re.compile", "lib.source_utils._norm_abs_path", "lib.profiling.AggregateProfile"], "cli.profile_analyzer_cli.ProfileAnalyzer._get_total_cost": ["<builtin>.ValueError"], "cli.profile_analyzer_cli.ProfileAnalyzer._render_normalized_cost_bar": ["cli.debugger_cli_common.RichLine", "<builtin>.float", "<builtin>.int", "numpy.ceil"], "re.escape": [], "numpy.ceil": [], "cli.profile_analyzer_cli.ProfileAnalyzer.get_help": [], "cli.profile_analyzer_cli.create_profiler_ui": ["cli.profile_analyzer_cli.ProfileAnalyzer.get_help", "cli.profile_analyzer_cli.ProfileAnalyzer.__init__", "cli.ui_factory.get_ui"], "cli.readline_ui": [], "cli.readline_ui.ReadlineUI.__init__": ["base_ui.BaseUI.__init__", "cli.readline_ui.ReadlineUI._init_input"], "cli.readline_ui.ReadlineUI._init_input": ["readline.set_completer", "readline.parse_and_bind", "readline.set_completer_delims"], "readline.parse_and_bind": [], "readline.set_completer_delims": [], "readline.set_completer": [], "cli.readline_ui.ReadlineUI._readline_complete": ["BaseUI._tab_completion_registry.get_completions", "base_ui.BaseUI._analyze_tab_complete_input"], "cli.readline_ui.ReadlineUI.run_ui": ["cli.readline_ui.ReadlineUI._ui_loop", "<builtin>.print", "cli.readline_ui.ReadlineUI._dispatch_command", "base_ui.BaseUI._on_ui_exit"], "cli.readline_ui.ReadlineUI._dispatch_command": ["cli.debugger_cli_common.RichTextLines", "BaseUI._command_handler_registry.is_registered", "base_ui.BaseUI._parse_command", "<builtin>.print", "cli.readline_ui.ReadlineUI._display_output", "BaseUI._command_handler_registry.dispatch_command", "<builtin>.str"], "cli.readline_ui.ReadlineUI._ui_loop": ["cli.readline_ui.ReadlineUI._dispatch_command", "cli.readline_ui.ReadlineUI._get_user_command"], "cli.readline_ui.ReadlineUI._get_user_command": ["six.moves.input", "<builtin>.print"], "six.moves.input": [], "cli.readline_ui.ReadlineUI._display_output": ["<builtin>.print"], "cli.tensor_format": ["re.compile"], "cli.tensor_format.HighlightOptions.__init__": [], "cli.tensor_format.numeric_summary": ["numpy.logical_and", "<builtin>.isinstance", "numpy.issubdtype", "cli.tensor_format.numeric_summary._counts_summary", "cli.debugger_cli_common.RichTextLines", "numpy.max", "numpy.size", "numpy.std", "numpy.isnan", "numpy.isinf", "numpy.logical_or", "numpy.sum", "numpy.logical_not", "numpy.min", "numpy.mean", "numpy.isneginf", "numpy.isposinf"], "numpy.set_printoptions": [], "cli.tensor_format._annotate_ndarray_lines": ["numpy.shape", "six.moves.xrange", "copy.copy", "<builtin>.enumerate", "<builtin>.len"], "numpy.argwhere": [], "numpy.size": [], "numpy.shape": [], "cli.tensor_format._validate_indices_list": ["<builtin>.ValueError", "<builtin>.zip", "<builtin>.len"], "cli.tensor_format._locate_elements_in_line": ["re.finditer", "<builtin>.len"], "cli.tensor_format._pad_string_to_length": ["<builtin>.len"], "cli.tensor_format.numeric_summary._counts_summary": ["cli.tensor_format._pad_string_to_length", "<builtin>.str", "cli.debugger_cli_common.rich_text_lines_from_rich_line_list", "<builtin>.max", "cli.debugger_cli_common.RichLine", "<builtin>.len"], "numpy.issubdtype": [], "numpy.isnan": [], "numpy.sum": [], "numpy.isneginf": [], "numpy.logical_not": [], "numpy.isposinf": [], "numpy.isinf": [], "numpy.std": [], "cli.ui_factory": [], "cli.readline_ui.ReadlineUI": [], "lib.check_numerics_callback": ["eager.monitoring.Counter", "threading.local", "util.tf_export.tf_export", "collections.defaultdict"], "eager.monitoring.Counter": [], "lib.check_numerics_callback.limit_string_length": ["<builtin>.len"], "lib.check_numerics_callback._maybe_lookup_original_input_tensor": [], "lib.check_numerics_callback.get_check_numerics_error_message": ["numpy.logical_and", "lib.source_utils.guess_is_tensorflow_py_library", "numpy.greater", "numpy.isnan", "<builtin>.len", "<builtin>.enumerate", "lib.check_numerics_callback.limit_string_length", "numpy.isinf", "numpy.less", "lib.check_numerics_callback._maybe_lookup_original_input_tensor", "numpy.sum", "<builtin>.hasattr"], "numpy.less": [], "numpy.greater": [], "lib.check_numerics_callback._debug_summary": ["ops.gen_debug_ops.debug_numeric_summary_v2"], "ops.gen_debug_ops.debug_numeric_summary_v2": [], "lib.check_numerics_callback.CheckNumericsCallback.__init__": ["<builtin>.dict"], "lib.check_numerics_callback.CheckNumericsCallback.callback": ["util.compat.as_bytes", "lib.check_numerics_callback.CheckNumericsCallback._get_output_tensor", "ops.array_ops.check_numerics_v2", "<builtin>.len", "<builtin>.enumerate", "framework.ops.executing_eagerly_outside_functions", "lib.check_numerics_callback._debug_summary", "lib.check_numerics_callback.get_check_numerics_error_message"], "ops.array_ops.check_numerics_v2": [], "lib.check_numerics_callback.CheckNumericsCallback._get_output_tensor": [], "lib.check_numerics_callback.enable_check_numerics": ["lib.check_numerics_callback.CheckNumericsCallback.__init__", "framework.op_callbacks.add_op_callback", "platform.tf_logging.info", "<builtin>.hasattr", "threading.current_thread"], "framework.op_callbacks.add_op_callback": ["<builtin>.callable", "eager.context.context", "<builtin>.ValueError"], "threading.current_thread": [], "lib.check_numerics_callback.disable_check_numerics": ["platform.tf_logging.info", "<builtin>.delattr", "<builtin>.hasattr", "framework.op_callbacks.remove_op_callback", "threading.current_thread"], "framework.op_callbacks.remove_op_callback": ["eager.context.context"], "lib.common": ["collections.namedtuple"], "lib.common.get_run_key": ["lib.common.get_flattened_names", "json.dumps"], "json.dumps": [], "lib.debug_data": ["collections.namedtuple"], "lib.debug_data._glob": ["platform.gfile.Glob", "glob.glob", "platform.system"], "platform.gfile.Glob": [], "lib.debug_data.InconvertibleTensorProto.__init__": [], "lib.debug_data.InconvertibleTensorProto.__str__": ["<builtin>.str"], "lib.debug_data.InconvertibleTensorProto.initialized": [], "lib.debug_data.load_tensor_from_event_file": ["platform.gfile.Open", "util.event_pb2.Event", "lib.debug_data.load_tensor_from_event"], "util.event_pb2.Event": [], "lib.debug_data.load_tensor_from_event": ["lib.debug_data.InconvertibleTensorProto.__init__", "framework.tensor_util.MakeNdarray", "framework.tensor_util.TensorShapeProtoToList"], "framework.tensor_util.TensorShapeProtoToList": [], "framework.tensor_util.MakeNdarray": ["framework.dtypes.as_dtype", "<builtin>.iter", "<builtin>.TypeError", "numpy.pad", "<builtin>.list", "<builtin>.complex", "<builtin>.zip", "numpy.fromiter", "numpy.zeros", "numpy.frombuffer", "numpy.prod", "<builtin>.len", "numpy.array"], "lib.debug_data._load_graph_def_from_event_file": ["platform.gfile.Open", "util.event_pb2.Event", "graph_pb2.GraphDef.FromString"], "graph_pb2.GraphDef.FromString": [], "lib.debug_data._load_log_message_from_event_file": ["platform.gfile.Open", "util.event_pb2.Event"], "lib.debug_data._is_graph_file": [], "lib.debug_data._is_run_fetches_info_file": [], "lib.debug_data._is_run_feed_keys_info_file": [], "lib.debug_data._get_tensor_name": [], "lib.debug_data._get_tensor_watch_key": ["lib.debug_data._get_tensor_name"], "lib.debug_data.has_inf_or_nan": ["numpy.isinf", "<builtin>.isinstance", "numpy.isnan", "numpy.issubdtype", "numpy.any"], "numpy.any": [], "lib.debug_data.extract_core_metadata_from_event_proto": ["json.loads"], "json.loads": [], "lib.debug_data.device_name_to_device_path": ["util.compat.as_text"], "lib.debug_data.device_path_to_device_name": ["os.path.basename", "<builtin>.len"], "lib.debug_data.DebugTensorDatum.__init__": ["os.path.normpath", "lib.debug_data.device_path_to_device_name", "<builtin>.ValueError", "os.path.join", "platform.gfile.Exists", "platform.gfile.Stat", "<builtin>.int"], "lib.debug_data.DebugTensorDatum.__str__": [], "lib.debug_data.DebugTensorDatum.__repr__": ["lib.debug_data.DebugTensorDatum.__str__"], "lib.debug_data.DebugTensorDatum.get_tensor": ["lib.debug_data.load_tensor_from_event_file"], "lib.debug_data.DebugTensorDatum.timestamp": [], "lib.debug_data.DebugTensorDatum.extended_timestamp": [], "lib.debug_data.DebugTensorDatum.debug_op": [], "lib.debug_data.DebugTensorDatum.device_name": [], "lib.debug_data.DebugTensorDatum.node_name": [], "lib.debug_data.DebugTensorDatum.output_slot": [], "lib.debug_data.DebugTensorDatum.tensor_name": ["lib.debug_data._get_tensor_name"], "lib.debug_data.DebugTensorDatum.watch_key": ["lib.debug_data._get_tensor_watch_key"], "lib.debug_data.DebugTensorDatum.file_path": [], "lib.debug_data.DebugTensorDatum.dump_size_bytes": [], "lib.debug_data.DebugDumpDir.__init__": ["lib.debug_data.DebugDumpDir._load_feeds_info", "lib.debug_data.DebugDumpDir._load_all_device_dumps", "lib.debug_data.DebugDumpDir._load_core_metadata", "<builtin>.IOError", "lib.debug_data.DebugDumpDir._load_fetches_info", "platform.gfile.IsDirectory"], "platform.gfile.IsDirectory": [], "<builtin>.IOError": [], "lib.debug_data.DebugDumpDir._load_core_metadata": ["platform.gfile.Open", "lib.debug_data.extract_core_metadata_from_event_proto", "lib.debug_data._glob", "os.path.join", "util.event_pb2.Event"], "lib.debug_data.DebugDumpDir._load_fetches_info": ["lib.debug_data._glob", "os.path.join", "lib.debug_data._load_log_message_from_event_file"], "lib.debug_data.DebugDumpDir._load_feeds_info": ["lib.debug_data._glob", "os.path.join", "lib.debug_data._load_log_message_from_event_file"], "lib.debug_data.DebugDumpDir._load_all_device_dumps": ["lib.debug_data.DebugDumpDir._load_partition_graphs", "lib.debug_data.device_path_to_device_name", "lib.debug_data._glob", "os.path.join", "lib.debug_data.DebugDumpDir._calculate_t0", "lib.debug_data.DebugDumpDir._create_tensor_watch_maps", "lib.debug_data.DebugDumpDir._load_device_dumps"], "lib.debug_data.DebugDumpDir._load_device_dumps": ["lib.debug_data._is_graph_file", "<builtin>.sorted", "platform.gfile.Walk", "os.path.join", "collections.defaultdict", "lib.debug_data.DebugDumpDir._dump_file_name_to_datum"], "lib.debug_data.DebugDumpDir._load_partition_graphs": ["platform.tf_logging.warn", "lib.debug_graphs.DebugGraph", "lib.debug_data.DebugDumpDir._collect_node_devices", "lib.debug_data._load_graph_def_from_event_file", "lib.debug_data.DebugDumpDir._find_partition_graph", "lib.debug_data.DebugDumpDir._validate_dump_with_graphs"], "lib.debug_data.DebugDumpDir._calculate_t0": ["six.itervalues", "<builtin>.min"], "lib.debug_data.DebugDumpDir._create_tensor_watch_maps": [], "lib.debug_data.DebugDumpDir._load_device_dumps.<lambda1>": ["collections.defaultdict"], "platform.gfile.Walk": [], "lib.debug_data.DebugDumpDir._dump_file_name_to_datum": ["lib.debug_data.DebugTensorDatum.__init__", "os.path.join", "os.path.relpath"], "lib.debug_data.DebugDumpDir._load_device_dumps.<lambda2>": [], "six.itervalues": [], "os.path.relpath": [], "lib.debug_data.DebugDumpDir.set_python_graph": ["<builtin>.tuple", "<builtin>.map"], "lib.debug_data.DebugDumpDir.python_graph": [], "lib.debug_data.DebugDumpDir.core_metadata": ["<builtin>.len"], "lib.debug_data.DebugDumpDir.dumped_tensor_data": ["<builtin>.sorted", "lib.debug_data.DebugDumpDir.devices", "six.itervalues", "<builtin>.len"], "lib.debug_data.DebugDumpDir.devices": [], "lib.debug_data.DebugDumpDir.dumped_tensor_data.<lambda1>": [], "lib.debug_data.DebugDumpDir.t0": [], "lib.debug_data.DebugDumpDir.size": ["<builtin>.sum", "<builtin>.len"], "lib.debug_data.DebugDumpDir._find_partition_graph": [], "lib.debug_graphs.DebugGraph": [], "lib.debug_data.DebugDumpDir._collect_node_devices": [], "lib.debug_data.DebugDumpDir._validate_dump_with_graphs": ["<builtin>.enumerate", "lib.debug_graphs.get_node_name", "<builtin>.LookupError", "lib.debug_graphs.get_output_slot", "<builtin>.repr", "lib.debug_data.DebugDumpDir.node_op_type", "lib.debug_data.DebugDumpDir._satisfied_at_timestamp", "<builtin>.ValueError"], "lib.debug_graphs.get_output_slot": ["lib.debug_graphs.parse_node_or_tensor_name"], "lib.debug_data.DebugDumpDir._satisfied_at_timestamp": [], "lib.debug_data.DebugDumpDir.node_op_type": ["lib.debug_data.DebugDumpDir._infer_device_name", "<builtin>.LookupError"], "lib.debug_data.DebugDumpDir.loaded_partition_graphs": ["<builtin>.bool"], "lib.debug_data.DebugDumpDir.partition_graphs": ["<builtin>.LookupError"], "lib.debug_data.DebugDumpDir.reconstructed_non_debug_partition_graphs": [], "lib.debug_data.DebugDumpDir.run_fetches_info": ["<builtin>.len"], "lib.debug_data.DebugDumpDir.run_feed_keys_info": ["<builtin>.len"], "lib.debug_data.DebugDumpDir._infer_device_name": ["<builtin>.list", "<builtin>.len", "<builtin>.ValueError"], "lib.debug_data.DebugDumpDir.nodes": ["<builtin>.LookupError", "<builtin>.ValueError"], "lib.debug_data.DebugDumpDir.node_attributes": ["lib.debug_data.DebugDumpDir._infer_device_name", "<builtin>.LookupError"], "lib.debug_data.DebugDumpDir.node_inputs": ["lib.debug_data.DebugDumpDir._infer_device_name", "<builtin>.LookupError"], "lib.debug_data.DebugDumpDir.transitive_inputs": ["lib.debug_data.DebugDumpDir._infer_device_name", "lib.debug_data.DebugDumpDir._get_merge_node_names", "<builtin>.LookupError", "lib.debug_graphs.DFSGraphTracer"], "lib.debug_data.DebugDumpDir._get_merge_node_names": ["<builtin>.hasattr", "<builtin>.ValueError"], "lib.debug_graphs.DFSGraphTracer": [], "lib.debug_data.DebugDumpDir.find_some_path": ["lib.debug_data.DebugDumpDir._get_merge_node_names", "lib.debug_graphs.DFSGraphTracer", "lib.debug_data.DebugDumpDir._infer_device_name", "<builtin>.reversed", "<builtin>.zip", "<builtin>.ValueError"], "lib.debug_data.DebugDumpDir.node_recipients": ["lib.debug_data.DebugDumpDir._infer_device_name", "<builtin>.LookupError"], "lib.debug_data.DebugDumpDir.node_exists": ["<builtin>.LookupError", "<builtin>.ValueError"], "lib.debug_data.DebugDumpDir.node_device": ["<builtin>.list", "<builtin>.LookupError", "<builtin>.len", "<builtin>.ValueError"], "lib.debug_data.DebugDumpDir.debug_watch_keys": ["lib.debug_data.DebugDumpDir._infer_device_name", "lib.debug_data._get_tensor_watch_key"], "lib.debug_data.DebugDumpDir.watch_key_to_data": ["<builtin>.len", "<builtin>.ValueError"], "lib.debug_data.DebugDumpDir.find": ["re.compile", "<builtin>.len"], "lib.debug_data.DebugDumpDir.get_tensor_file_paths": ["lib.debug_data.DebugDumpDir._infer_device_name", "lib.debug_data._get_tensor_watch_key"], "lib.debug_data.DebugDumpDir.get_tensors": ["lib.debug_data.DebugDumpDir._infer_device_name", "lib.debug_data._get_tensor_watch_key"], "lib.debug_data.DebugDumpDir.get_rel_timestamps": ["lib.debug_data.DebugDumpDir._infer_device_name", "lib.debug_data._get_tensor_watch_key"], "lib.debug_data.DebugDumpDir.get_dump_sizes_bytes": ["lib.debug_data.DebugDumpDir._infer_device_name", "lib.debug_data._get_tensor_watch_key"], "lib.debug_data.DebugDumpDir.node_traceback": ["<builtin>.LookupError", "<builtin>.KeyError", "lib.debug_graphs.get_node_name"], "lib.debug_events_monitors": [], "lib.debug_events_monitors.BaseMonitor.__init__": [], "lib.debug_events_monitors.BaseMonitor.on_execution": [], "lib.debug_events_monitors.BaseMonitor.on_graph_execution_trace": [], "lib.debug_events_monitors.InfNanAlert.__init__": [], "lib.debug_events_monitors.InfNanAlert.wall_time": [], "lib.debug_events_monitors.InfNanAlert.op_type": [], "lib.debug_events_monitors.InfNanAlert.output_slot": [], "lib.debug_events_monitors.InfNanAlert.size": [], "lib.debug_events_monitors.InfNanAlert.num_neg_inf": [], "lib.debug_events_monitors.InfNanAlert.num_pos_inf": [], "lib.debug_events_monitors.InfNanAlert.num_nan": [], "lib.debug_events_monitors.InfNanAlert.execution_index": [], "lib.debug_events_monitors.InfNanAlert.graph_execution_trace_index": [], "lib.debug_events_monitors.InfNanMonitor.__init__": ["<builtin>.super"], "lib.debug_events_monitors.InfNanMonitor._check_full_tensor_value": ["numpy.greater", "numpy.less", "numpy.logical_and", "numpy.isinf", "numpy.count_nonzero", "numpy.isnan", "numpy.size", "numpy.issubdtype", "lib.debug_events_monitors.InfNanAlert.__init__"], "numpy.count_nonzero": [], "lib.debug_events_monitors.InfNanMonitor._check_debug_tensor_value": ["lib.debug_events_monitors.InfNanAlert.__init__"], "lib.debug_events_monitors.InfNanMonitor.on_execution": ["lib.debug_events_monitors.InfNanMonitor._check_debug_tensor_value", "lib.debug_events_monitors.InfNanMonitor._check_full_tensor_value", "<builtin>.len", "<builtin>.enumerate"], "lib.debug_events_monitors.InfNanMonitor.on_graph_execution_trace": ["lib.debug_events_monitors.InfNanMonitor._check_debug_tensor_value", "lib.debug_events_monitors.InfNanMonitor._check_full_tensor_value", "<builtin>.len"], "lib.debug_events_monitors.InfNanMonitor.alerts": [], "lib.debug_events_reader": ["collections.namedtuple"], "lib.debug_events_reader.DebugEventsReader.__init__": ["<builtin>.ValueError", "<builtin>.dict", "lib.debug_events_reader.DebugEventsReader._load_metadata_files", "threading.Lock", "io.file_io.is_directory", "<builtin>.len", "util.compat.as_bytes"], "io.file_io.is_directory": ["io.file_io.is_directory_v2"], "lib.debug_events_reader.DebugEventsReader._load_metadata_files": ["debug_event_pb2.DebugEvent.FromString", "<builtin>.ValueError", "io.tf_record.tf_record_random_reader", "io.file_io.get_matching_files", "<builtin>.zip", "<builtin>.sorted", "<builtin>.set", "os.path.join", "<builtin>.len"], "io.file_io.get_matching_files": ["io.file_io.get_matching_files_v2"], "io.tf_record.tf_record_random_reader": ["io._pywrap_record_io.RandomRecordReader"], "debug_event_pb2.DebugEvent.FromString": [], "lib.debug_events_reader.DebugEventsReader._load_metadata_files.<lambda1>": [], "lib.debug_events_reader.DebugEventsReader.starting_wall_time": [], "lib.debug_events_reader.DebugEventsReader.tfdbg_run_id": [], "lib.debug_events_reader.DebugEventsReader.tensorflow_version": [], "lib.debug_events_reader.DebugEventsReader.tfdbg_file_version": [], "lib.debug_events_reader.DebugEventsReader.__enter__": [], "lib.debug_events_reader.DebugEventsReader.__exit__": ["lib.debug_events_reader.DebugEventsReader.close"], "lib.debug_events_reader.DebugEventsReader.close": ["<builtin>.list"], "lib.debug_events_reader.DebugEventsReader._generic_iterator": ["lib.debug_events_reader.DebugEventsReader._get_reader", "debug_event_pb2.DebugEvent.FromString"], "lib.debug_events_reader.DebugEventsReader._get_reader": ["threading.Lock", "io.tf_record.tf_record_random_reader", "util.compat.as_bytes"], "lib.debug_events_reader.DebugEventsReader.source_files_iterator": ["lib.debug_events_reader.DebugEventsReader._generic_iterator"], "lib.debug_events_reader.DebugEventsReader.stack_frames_iterator": ["lib.debug_events_reader.DebugEventsReader._generic_iterator"], "lib.debug_events_reader.DebugEventsReader.graphs_iterator": ["lib.debug_events_reader.DebugEventsReader._generic_iterator"], "lib.debug_events_reader.DebugEventsReader.read_source_files_event": ["lib.debug_events_reader.DebugEventsReader._get_reader", "debug_event_pb2.DebugEvent.FromString"], "lib.debug_events_reader.DebugEventsReader.read_graphs_event": ["lib.debug_events_reader.DebugEventsReader._get_reader", "debug_event_pb2.DebugEvent.FromString"], "lib.debug_events_reader.DebugEventsReader.execution_iterator": ["lib.debug_events_reader.DebugEventsReader._generic_iterator"], "lib.debug_events_reader.DebugEventsReader.read_execution_event": ["lib.debug_events_reader.DebugEventsReader._get_reader", "debug_event_pb2.DebugEvent.FromString"], "lib.debug_events_reader.DebugEventsReader.graph_execution_traces_iterators": ["lib.debug_events_reader.DebugEventsReader._generic_iterator"], "lib.debug_events_reader.DebugEventsReader.read_graph_execution_traces_event": ["lib.debug_events_reader.DebugEventsReader._get_reader", "debug_event_pb2.DebugEvent.FromString"], "lib.debug_events_reader.BaseDigest.__init__": [], "lib.debug_events_reader.BaseDigest.wall_time": [], "lib.debug_events_reader.BaseDigest.locator": [], "lib.debug_events_reader.BaseDigest.to_json": [], "lib.debug_events_reader.ExecutionDigest.__init__": ["lib.debug_events_reader._tuple_or_none", "<builtin>.super"], "lib.debug_events_reader._tuple_or_none": ["<builtin>.tuple"], "lib.debug_events_reader.ExecutionDigest.op_type": [], "lib.debug_events_reader.ExecutionDigest.output_tensor_device_ids": [], "lib.debug_events_reader.ExecutionDigest.to_json": ["<builtin>.super"], "lib.debug_events_reader.Execution.__init__": ["<builtin>.tuple", "lib.debug_events_reader._tuple_or_none", "<builtin>.super"], "lib.debug_events_reader.Execution.host_name": [], "lib.debug_events_reader.Execution.stack_frame_ids": [], "lib.debug_events_reader.Execution.tensor_debug_mode": [], "lib.debug_events_reader.Execution.graph_id": [], "lib.debug_events_reader.Execution.input_tensor_ids": [], "lib.debug_events_reader.Execution.num_outputs": ["<builtin>.len"], "lib.debug_events_reader.Execution.output_tensor_ids": [], "lib.debug_events_reader.Execution.debug_tensor_values": [], "lib.debug_events_reader.Execution.to_json": ["<builtin>.super"], "lib.debug_events_reader.DebuggedGraph.__init__": ["<builtin>.dict", "collections.defaultdict"], "lib.debug_events_reader.DebuggedGraph.add_inner_graph_id": ["<builtin>.isinstance"], "lib.debug_events_reader.DebuggedGraph.add_op": ["<builtin>.ValueError"], "lib.debug_events_reader.DebuggedGraph.add_op_consumer": [], "lib.debug_events_reader.DebuggedGraph.name": [], "lib.debug_events_reader.DebuggedGraph.graph_id": [], "lib.debug_events_reader.DebuggedGraph.outer_graph_id": [], "lib.debug_events_reader.DebuggedGraph.inner_graph_ids": [], "lib.debug_events_reader.DebuggedGraph.get_tensor_id": [], "lib.debug_events_reader.DebuggedGraph.get_op_creation_digest": [], "lib.debug_events_reader.DebuggedGraph.get_op_consumers": [], "lib.debug_events_reader.DebuggedGraph.to_json": [], "lib.debug_events_reader.DebuggedDevice.__init__": [], "lib.debug_events_reader.DebuggedDevice.device_name": [], "lib.debug_events_reader.DebuggedDevice.device_id": [], "lib.debug_events_reader.DebuggedDevice.to_json": [], "lib.debug_events_reader.GraphOpCreationDigest.__init__": ["lib.debug_events_reader._tuple_or_none", "<builtin>.super"], "lib.debug_events_reader.GraphOpCreationDigest.graph_id": [], "lib.debug_events_reader.GraphOpCreationDigest.op_type": [], "lib.debug_events_reader.GraphOpCreationDigest.op_name": [], "lib.debug_events_reader.GraphOpCreationDigest.output_tensor_ids": [], "lib.debug_events_reader.GraphOpCreationDigest.num_outputs": ["<builtin>.len"], "lib.debug_events_reader.GraphOpCreationDigest.input_names": [], "lib.debug_events_reader.GraphOpCreationDigest.device_name": [], "lib.debug_events_reader.GraphOpCreationDigest.host_name": [], "lib.debug_events_reader.GraphOpCreationDigest.stack_frame_ids": [], "lib.debug_events_reader.GraphOpCreationDigest.to_json": ["<builtin>.super"], "lib.debug_events_reader.GraphExecutionTraceDigest.__init__": ["<builtin>.super"], "lib.debug_events_reader.GraphExecutionTraceDigest.op_type": [], "lib.debug_events_reader.GraphExecutionTraceDigest.op_name": [], "lib.debug_events_reader.GraphExecutionTraceDigest.output_slot": [], "lib.debug_events_reader.GraphExecutionTraceDigest.graph_id": [], "lib.debug_events_reader.GraphExecutionTraceDigest.to_json": ["<builtin>.super"], "lib.debug_events_reader.GraphExecutionTrace.__init__": ["<builtin>.tuple", "<builtin>.super"], "lib.debug_events_reader.GraphExecutionTrace.graph_ids": [], "lib.debug_events_reader.GraphExecutionTrace.graph_id": [], "lib.debug_events_reader.GraphExecutionTrace.tensor_debug_mode": [], "lib.debug_events_reader.GraphExecutionTrace.debug_tensor_value": ["lib.debug_events_reader._tuple_or_none"], "lib.debug_events_reader.GraphExecutionTrace.device_name": [], "lib.debug_events_reader.GraphExecutionTrace.to_json": ["<builtin>.super"], "lib.debug_events_reader._parse_tensor_value": ["framework.tensor_util.MakeNdarray"], "lib.debug_events_reader._execution_digest_from_debug_event_proto": ["lib.debug_events_reader.ExecutionDigest.__init__"], "lib.debug_events_reader._execution_from_debug_event_proto": ["lib.debug_events_reader.Execution.__init__", "lib.debug_events_reader._tuple_or_none", "lib.debug_events_reader._execution_digest_from_debug_event_proto", "<builtin>.tuple", "lib.debug_events_reader._parse_tensor_value"], "lib.debug_events_reader.DebugDataReader.__init__": ["<builtin>.dict", "collections.OrderedDict", "lib.debug_events_reader.DebugEventsReader.__init__"], "lib.debug_events_reader.DebugDataReader._add_monitor": [], "lib.debug_events_reader.DebugDataReader._load_source_files": ["lib.debug_events_reader.DebugEventsReader.source_files_iterator"], "lib.debug_events_reader.DebugDataReader._load_stack_frames": ["<builtin>.tuple", "<builtin>.len", "lib.debug_events_reader.DebugEventsReader.stack_frames_iterator", "<builtin>.list"], "lib.debug_events_reader.DebugDataReader._load_graphs": ["lib.debug_events_reader.DebuggedGraph.__init__", "lib.debug_events_reader.GraphOpCreationDigest.__init__", "<builtin>.enumerate", "lib.debug_events_reader.DebugEventsReader.graphs_iterator", "lib.debug_events_reader.DebuggedDevice.__init__", "<builtin>.tuple", "<builtin>.int"], "lib.debug_events_reader.DebugDataReader._load_graph_execution_traces": ["lib.debug_events_reader.DebugDataReader._graph_execution_trace_from_debug_event_proto", "<builtin>.enumerate", "lib.debug_events_reader.DebugDataReader._graph_execution_trace_digest_from_debug_event_proto", "lib.debug_events_reader.DebugEventsReader.graph_execution_traces_iterators", "<builtin>.len"], "lib.debug_events_reader.DebugDataReader._graph_execution_trace_digest_from_debug_event_proto": ["lib.debug_events_reader.DebugDataReader._lookup_op_type", "lib.debug_events_reader.GraphExecutionTraceDigest.__init__"], "lib.debug_events_reader.DebugDataReader._graph_execution_trace_from_debug_event_proto": ["lib.debug_events_reader.DebugDataReader.graph_by_id", "lib.debug_events_reader.GraphExecutionTrace.__init__", "lib.debug_events_reader.DebugDataReader._graph_execution_trace_digest_from_debug_event_proto", "lib.debug_events_reader._parse_tensor_value"], "lib.debug_events_reader.DebugDataReader._lookup_op_type": [], "lib.debug_events_reader.DebugDataReader.graph_by_id": [], "lib.debug_events_reader.DebugDataReader._load_execution": ["<builtin>.len", "lib.debug_events_reader._execution_digest_from_debug_event_proto", "lib.debug_events_reader.DebugEventsReader.execution_iterator", "lib.debug_events_reader._execution_from_debug_event_proto"], "lib.debug_events_reader.DebugDataReader.update": ["lib.debug_events_reader.DebugDataReader._load_source_files", "lib.debug_events_reader.DebugDataReader._load_graph_execution_traces", "lib.debug_events_reader.DebugDataReader._load_graphs", "lib.debug_events_reader.DebugDataReader._load_stack_frames", "lib.debug_events_reader.DebugDataReader._load_execution"], "lib.debug_events_reader.DebugDataReader.source_file_list": ["<builtin>.tuple"], "lib.debug_events_reader.DebugDataReader.source_lines": ["<builtin>.list", "lib.debug_events_reader.DebugEventsReader.read_source_files_event"], "lib.debug_events_reader.DebugDataReader.starting_wall_time": ["lib.debug_events_reader.DebugEventsReader.starting_wall_time"], "lib.debug_events_reader.DebugDataReader.tensorflow_version": ["lib.debug_events_reader.DebugEventsReader.tensorflow_version"], "lib.debug_events_reader.DebugDataReader.tfdbg_run_id": ["lib.debug_events_reader.DebugEventsReader.tfdbg_run_id"], "lib.debug_events_reader.DebugDataReader.outermost_graphs": [], "lib.debug_events_reader.DebugDataReader.device_name_by_id": [], "lib.debug_events_reader.DebugDataReader.device_name_map": [], "lib.debug_events_reader.DebugDataReader.graph_op_digests": [], "lib.debug_events_reader.DebugDataReader.graph_execution_traces": ["lib.debug_events_reader.DebugDataReader.read_graph_execution_trace", "<builtin>.len"], "lib.debug_events_reader.DebugDataReader.read_graph_execution_trace": ["lib.debug_events_reader.DebugEventsReader.read_graph_execution_traces_event", "lib.debug_events_reader.DebugDataReader._graph_execution_trace_from_debug_event_proto"], "lib.debug_events_reader.DebugDataReader.num_graph_execution_traces": ["<builtin>.len"], "lib.debug_events_reader.DebugDataReader.executions": ["<builtin>.len", "lib.debug_events_reader.DebugDataReader.read_execution"], "lib.debug_events_reader.DebugDataReader.read_execution": ["lib.debug_events_reader.DebugEventsReader.read_execution_event", "lib.debug_events_reader._execution_from_debug_event_proto"], "lib.debug_events_reader.DebugDataReader.num_executions": ["<builtin>.len"], "lib.debug_events_reader.DebugDataReader.read_execution_stack_trace": [], "lib.debug_events_reader.DebugDataReader.read_graph_op_creation_stack_trace": [], "lib.debug_events_reader.DebugDataReader.execution_to_tensor_values": ["lib.debug_events_reader._parse_tensor_value", "lib.debug_events_reader.DebugEventsReader.read_execution_event"], "lib.debug_events_reader.DebugDataReader.graph_execution_trace_to_tensor_value": ["lib.debug_events_reader.DebugEventsReader.read_graph_execution_traces_event", "lib.debug_events_reader._parse_tensor_value"], "lib.debug_events_reader.DebugDataReader.symbolic_tensor_id": [], "lib.debug_events_reader.DebugDataReader.graph_execution_trace_to_tensor_id": ["lib.debug_events_reader.DebugDataReader.symbolic_tensor_id"], "lib.debug_events_reader.DebugDataReader.__enter__": [], "lib.debug_events_reader.DebugDataReader.__exit__": ["lib.debug_events_reader.DebugEventsReader.close"], "lib.debug_events_writer": [], "lib.debug_events_writer.DebugEventsWriter.__init__": ["client._pywrap_debug_events_writer.Init", "<builtin>.ValueError"], "client._pywrap_debug_events_writer.Init": [], "lib.debug_events_writer.DebugEventsWriter.WriteSourceFile": ["client._pywrap_debug_events_writer.WriteSourceFile", "protobuf.debug_event_pb2.DebugEvent", "lib.debug_events_writer.DebugEventsWriter._EnsureTimestampAdded"], "protobuf.debug_event_pb2.DebugEvent": [], "lib.debug_events_writer.DebugEventsWriter._EnsureTimestampAdded": ["time.time"], "client._pywrap_debug_events_writer.WriteSourceFile": [], "lib.debug_events_writer.DebugEventsWriter.WriteStackFrameWithId": ["client._pywrap_debug_events_writer.WriteStackFrameWithId", "protobuf.debug_event_pb2.DebugEvent", "lib.debug_events_writer.DebugEventsWriter._EnsureTimestampAdded"], "client._pywrap_debug_events_writer.WriteStackFrameWithId": [], "lib.debug_events_writer.DebugEventsWriter.WriteGraphOpCreation": ["protobuf.debug_event_pb2.DebugEvent", "client._pywrap_debug_events_writer.WriteGraphOpCreation", "lib.debug_events_writer.DebugEventsWriter._EnsureTimestampAdded"], "client._pywrap_debug_events_writer.WriteGraphOpCreation": [], "lib.debug_events_writer.DebugEventsWriter.WriteDebuggedGraph": ["protobuf.debug_event_pb2.DebugEvent", "client._pywrap_debug_events_writer.WriteDebuggedGraph", "lib.debug_events_writer.DebugEventsWriter._EnsureTimestampAdded"], "client._pywrap_debug_events_writer.WriteDebuggedGraph": [], "lib.debug_events_writer.DebugEventsWriter.WriteExecution": ["client._pywrap_debug_events_writer.WriteExecution", "protobuf.debug_event_pb2.DebugEvent", "lib.debug_events_writer.DebugEventsWriter._EnsureTimestampAdded"], "client._pywrap_debug_events_writer.WriteExecution": [], "lib.debug_events_writer.DebugEventsWriter.WriteGraphExecutionTrace": ["protobuf.debug_event_pb2.DebugEvent", "client._pywrap_debug_events_writer.WriteGraphExecutionTrace", "lib.debug_events_writer.DebugEventsWriter._EnsureTimestampAdded"], "client._pywrap_debug_events_writer.WriteGraphExecutionTrace": [], "lib.debug_events_writer.DebugEventsWriter.RegisterDeviceAndGetId": ["client._pywrap_debug_events_writer.RegisterDeviceAndGetId"], "client._pywrap_debug_events_writer.RegisterDeviceAndGetId": [], "lib.debug_events_writer.DebugEventsWriter.FlushNonExecutionFiles": ["client._pywrap_debug_events_writer.FlushNonExecutionFiles"], "client._pywrap_debug_events_writer.FlushNonExecutionFiles": [], "lib.debug_events_writer.DebugEventsWriter.FlushExecutionFiles": ["client._pywrap_debug_events_writer.FlushExecutionFiles"], "client._pywrap_debug_events_writer.FlushExecutionFiles": [], "lib.debug_events_writer.DebugEventsWriter.Close": ["client._pywrap_debug_events_writer.Close"], "client._pywrap_debug_events_writer.Close": [], "lib.debug_events_writer.DebugEventsWriter.dump_root": [], "lib.debug_gradients": ["framework.ops.RegisterGradient"], "lib.debug_gradients._tensor_to_grad_debug_op_name": ["lib.debug_graphs.parse_node_or_tensor_name"], "lib.debug_gradients._parse_grad_debug_op_name": ["<builtin>.int", "<builtin>.len"], "lib.debug_gradients.GradientsDebugger.__init__": ["uuid.uuid4"], "lib.debug_gradients.GradientsDebugger.y_tensor": [], "lib.debug_gradients.GradientsDebugger.graph": [], "lib.debug_gradients.GradientsDebugger.__enter__": [], "lib.debug_gradients.GradientsDebugger.__exit__": [], "lib.debug_gradients.GradientsDebugger.identify_gradient": ["<builtin>.ValueError", "lib.debug_gradients._tensor_to_grad_debug_op_name"], "lib.debug_gradients.GradientsDebugger.watch_gradients_by_tensors": ["re.escape", "<builtin>.isinstance", "lib.debug_gradients.GradientsDebugger.watch_gradients_by_tensor_names"], "lib.debug_gradients.GradientsDebugger.watch_gradients_by_tensor_names": ["re.compile", "<builtin>.enumerate", "<builtin>.list", "lib.debug_gradients.GradientsDebugger.identify_gradient"], "lib.debug_gradients.GradientsDebugger._check_same_graph": ["<builtin>.ValueError"], "lib.debug_gradients.GradientsDebugger.register_gradient_tensor": ["lib.debug_gradients.GradientsDebugger._check_same_graph", "<builtin>.len"], "lib.debug_gradients.GradientsDebugger.gradient_tensor": ["<builtin>.LookupError", "lib.debug_gradients.GradientsDebugger._get_tensor_name"], "lib.debug_gradients.GradientsDebugger._get_tensor_name": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance"], "lib.debug_gradients.GradientsDebugger.gradient_tensors": [], "lib.debug_gradients.clear_gradient_debuggers": [], "framework.ops.RegisterGradient": [], "lib.debug_gradients._identify_gradient_grad": ["lib.debug_gradients._parse_grad_debug_op_name"], "lib.debug_gradients._identify_gradient_grad_ref": ["lib.debug_gradients._identify_gradient_grad"], "lib.debug_gradients.gradient_values_from_dump": ["<builtin>.ValueError", "lib.debug_graphs.parse_node_or_tensor_name"], "lib.debug_graphs": [], "lib.debug_graphs.is_copy_node": [], "lib.debug_graphs.is_debug_node": [], "lib.debug_graphs.parse_debug_node_name": ["<builtin>.len", "<builtin>.int", "<builtin>.ValueError"], "lib.debug_graphs.DFSGraphTracer.__init__": [], "lib.debug_graphs.DFSGraphTracer.trace": ["lib.debug_graphs.DFSGraphTracer.trace", "lib.debug_graphs.get_node_name"], "lib.debug_graphs.DFSGraphTracer.inputs": [], "lib.debug_graphs.DFSGraphTracer.depth_list": [], "lib.debug_graphs._infer_device_name": ["platform.tf_logging.warn"], "lib.debug_graphs.DebugGraph.__init__": ["lib.debug_graphs.DebugGraph._get_copy_nodes", "lib.debug_graphs.DebugGraph._prune_control_edges_of_debug_ops", "lib.debug_graphs._infer_device_name", "lib.debug_graphs.DebugGraph._populate_recipient_maps", "lib.debug_graphs.DebugGraph._process_debug_graph_node", "lib.debug_graphs.DebugGraph._prune_non_control_edges_of_debug_ops", "lib.debug_graphs.DebugGraph._prune_nodes_from_input_and_recipient_maps"], "lib.debug_graphs.DebugGraph._process_debug_graph_node": ["lib.debug_graphs.is_debug_node", "<builtin>.set", "lib.debug_graphs.DebugGraph._get_ref_args", "lib.debug_graphs.is_copy_node", "<builtin>.ValueError"], "lib.debug_graphs.DebugGraph._prune_non_control_edges_of_debug_ops": ["lib.debug_graphs.is_copy_node", "<builtin>.enumerate"], "lib.debug_graphs.DebugGraph._prune_control_edges_of_debug_ops": ["lib.debug_graphs.is_debug_node"], "lib.debug_graphs.DebugGraph._get_copy_nodes": ["lib.debug_graphs.is_copy_node"], "lib.debug_graphs.DebugGraph._prune_nodes_from_input_and_recipient_maps": [], "lib.debug_graphs.DebugGraph._populate_recipient_maps": ["lib.debug_graphs.get_node_name"], "lib.debug_graphs.DebugGraph._get_ref_args": ["<builtin>.enumerate", "framework.op_def_registry.get"], "framework.op_def_registry.get": ["framework._op_def_registry.get", "framework.op_def_pb2.OpDef"], "lib.debug_graphs.DebugGraph._reconstruct_non_debug_graph_def": ["lib.debug_graphs.is_copy_node", "lib.debug_graphs.is_debug_node", "framework.graph_pb2.GraphDef"], "lib.debug_graphs.DebugGraph.device_name": [], "lib.debug_graphs.DebugGraph.debug_graph_def": [], "lib.debug_graphs.DebugGraph.non_debug_graph_def": ["lib.debug_graphs.DebugGraph._reconstruct_non_debug_graph_def"], "lib.debug_graphs.DebugGraph.node_devices": [], "lib.debug_graphs.DebugGraph.node_op_types": [], "lib.debug_graphs.DebugGraph.node_attributes": [], "lib.debug_graphs.DebugGraph.node_inputs": [], "lib.debug_graphs.DebugGraph.node_ctrl_inputs": [], "lib.debug_graphs.DebugGraph.node_reversed_ref_inputs": [], "lib.debug_graphs.DebugGraph.node_recipients": [], "lib.debug_graphs.DebugGraph.node_ctrl_recipients": [], "lib.debug_graphs.reconstruct_non_debug_graph_def": ["lib.debug_graphs.DebugGraph.__init__"], "lib.debug_service_pb2_grpc": [], "lib.debug_service_pb2_grpc.EventListenerStub.__init__": [], "lib.debug_service_pb2_grpc.EventListenerServicer.SendEvents": ["<builtin>.NotImplementedError"], "lib.debug_service_pb2_grpc.EventListenerServicer.SendTracebacks": ["<builtin>.NotImplementedError"], "lib.debug_service_pb2_grpc.EventListenerServicer.SendSourceFiles": ["<builtin>.NotImplementedError"], "lib.debug_service_pb2_grpc.add_EventListenerServicer_to_server": ["grpc.stream_stream_rpc_method_handler", "grpc.method_handlers_generic_handler", "grpc.unary_unary_rpc_method_handler"], "grpc.stream_stream_rpc_method_handler": [], "grpc.unary_unary_rpc_method_handler": [], "grpc.method_handlers_generic_handler": [], "lib.debug_utils": [], "lib.debug_utils.add_debug_tensor_watch": ["<builtin>.isinstance"], "lib.debug_utils.watch_graph": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.ValueError", "re.compile", "six.moves.xrange", "lib.debug_utils.add_debug_tensor_watch"], "lib.debug_utils.watch_graph_with_denylists": ["<builtin>.len", "<builtin>.isinstance", "re.compile", "six.moves.xrange", "lib.debug_utils.add_debug_tensor_watch"], "lib.dumping_callback": ["framework.ops.RegisterGradient", "threading.local", "util.tf_export.tf_export", "util.compat.as_bytes"], "lib.dumping_callback.is_op_type_function": ["util.compat.as_bytes"], "lib.dumping_callback._debug_identity_v2_grad": [], "lib.dumping_callback._get_tfdbg_run_id": ["<builtin>.str", "uuid.uuid4"], "lib.dumping_callback._get_id": ["<builtin>.str", "uuid.uuid4"], "lib.dumping_callback._concrete_tensor_to_proto": ["framework.tensor_util.make_tensor_proto"], "framework.tensor_util.make_tensor_proto": ["<builtin>.type", "framework.dtypes.as_dtype", "framework.tensor_util._AssertCompatible", "<builtin>.int", "numpy.asarray", "framework.fast_tensor_util.AppendObjectArrayToTensorProto", "<builtin>.isinstance", "numpy.prod", "framework.tensor_util._is_array_like", "framework.tensor_pb2.TensorProto", "util.compat.as_bytes", "framework.tensor_shape.as_shape", "numpy.array", "numpy.array_equal", "numpy.empty", "<builtin>.hasattr", "framework.tensor_util._FlattenToStrings", "<builtin>.ValueError", "<builtin>.TypeError", "framework.tensor_util.SlowAppendObjectArrayToTensorProto", "<builtin>.list", "framework.tensor_util.GetNumpyAppendFn", "framework.tensor_util._GetDenseDimensions", "<builtin>.tuple"], "lib.dumping_callback._DumpingCallback.__init__": ["lib.dumping_callback._get_tfdbg_run_id", "<builtin>.dict", "threading.Lock", "socket.gethostname"], "socket.gethostname": [], "lib.dumping_callback._DumpingCallback.function_callback": ["lib.dumping_callback._DumpingCallback._get_context_id"], "lib.dumping_callback._DumpingCallback._get_context_id": ["<builtin>.getattr", "lib.dumping_callback._DumpingCallback.get_writer", "protobuf.debug_event_pb2.DebuggedGraph", "lib.dumping_callback._get_id", "lib.dumping_callback._DumpingCallback._get_outer_context_id"], "lib.dumping_callback._DumpingCallback.dump_root": [], "lib.dumping_callback._DumpingCallback.tfdbg_run_id": [], "lib.dumping_callback._DumpingCallback.tensor_debug_mode": [], "lib.dumping_callback._DumpingCallback.circular_buffer_size": [], "lib.dumping_callback._DumpingCallback.get_writer": ["lib.debug_events_writer.DebugEventsWriter"], "lib.debug_events_writer.DebugEventsWriter": [], "lib.dumping_callback._DumpingCallback._get_outer_context_id": ["lib.dumping_callback._DumpingCallback._get_context_id", "<builtin>.hasattr"], "protobuf.debug_event_pb2.DebuggedGraph": [], "lib.dumping_callback._DumpingCallback._write_source_file_content": ["protobuf.debug_event_pb2.SourceFile", "lib.source_utils.load_source", "lib.dumping_callback._DumpingCallback.get_writer", "platform.tf_logging.warn", "lib.source_utils.is_extension_uncompiled_python_source"], "protobuf.debug_event_pb2.SourceFile": [], "lib.dumping_callback._DumpingCallback._process_stack_frames": ["lib.dumping_callback._DumpingCallback._write_source_file_content", "graph_debug_info_pb2.GraphDebugInfo.FileLineCol", "util.tf_stack.extract_stack", "lib.dumping_callback._DumpingCallback.get_writer", "protobuf.debug_event_pb2.StackFrameWithId", "lib.dumping_callback._get_id", "protobuf.debug_event_pb2.CodeLocation", "os.path.abspath"], "util.tf_stack.extract_stack": ["threading.get_ident", "thread.get_ident", "util._tf_stack.extract_stack"], "os.path.abspath": [], "graph_debug_info_pb2.GraphDebugInfo.FileLineCol": [], "protobuf.debug_event_pb2.StackFrameWithId": [], "protobuf.debug_event_pb2.CodeLocation": [], "lib.dumping_callback._DumpingCallback._process_v1_graph_mode_tensor": ["ops.array_ops.identity"], "lib.dumping_callback._DumpingCallback._instrument_symbolic_tensors": ["lib.dumping_callback._DumpingCallback._process_v1_graph_mode_tensor", "<builtin>.NotImplementedError", "ops.gen_debug_ops.debug_identity_v2", "framework.constant_op.constant", "<builtin>.enumerate", "ops.gen_debug_ops.debug_numeric_summary_v2", "framework.ops.executing_eagerly_outside_functions", "lib.dumping_callback._DumpingCallback._should_dump_tensor"], "lib.dumping_callback._DumpingCallback._should_dump_tensor": ["<builtin>.isinstance", "re.match", "<builtin>.any"], "ops.gen_debug_ops.debug_identity_v2": [], "lib.dumping_callback._DumpingCallback._dump_eager_tensors": ["<builtin>.NotImplementedError", "lib.dumping_callback._concrete_tensor_to_proto", "<builtin>.len", "framework.tensor_pb2.TensorProto", "protobuf.debug_event_pb2.Execution", "ops.gen_debug_ops.debug_numeric_summary_v2", "lib.dumping_callback._DumpingCallback._process_stack_frames", "lib.dumping_callback._DumpingCallback._should_dump_tensor"], "protobuf.debug_event_pb2.Execution": [], "framework.tensor_pb2.TensorProto": [], "lib.dumping_callback._DumpingCallback.callback": ["lib.dumping_callback._DumpingCallback._get_context_id", "<builtin>.len", "lib.dumping_callback._DumpingCallback.get_writer", "lib.dumping_callback._DumpingCallback._func_graph_id_from_func_name", "lib.dumping_callback._DumpingCallback._get_symbolic_tensor_ids", "lib.dumping_callback._DumpingCallback._lookup_tensor_name", "<builtin>.hasattr", "protobuf.debug_event_pb2.GraphOpCreation", "lib.dumping_callback._DumpingCallback._instrument_symbolic_tensors", "lib.dumping_callback._DumpingCallback._dump_eager_tensors", "framework.ops.executing_eagerly_outside_functions", "util.compat.as_bytes", "lib.dumping_callback._DumpingCallback._process_stack_frames"], "lib.dumping_callback._DumpingCallback._get_symbolic_tensor_ids": ["six.moves.xrange"], "lib.dumping_callback._DumpingCallback._lookup_tensor_name": [], "protobuf.debug_event_pb2.GraphOpCreation": [], "lib.dumping_callback._DumpingCallback._func_graph_id_from_func_name": ["lib.dumping_callback.is_op_type_function", "util.compat.as_bytes"], "lib.dumping_callback.enable_dump_debug_info": ["lib.dumping_callback._DumpingCallback.__init__", "debug_event_pb2.TensorDebugMode.keys", "<builtin>.NotImplementedError", "<builtin>.callable", "framework.dtypes.as_dtype", "<builtin>.ValueError", "debug_event_pb2.TensorDebugMode.Value", "debug_event_pb2.TensorDebugMode.Name", "threading.current_thread", "atexit.register", "eager.function.add_function_callback", "<builtin>.hasattr", "<builtin>.isinstance", "platform.tf_logging.info", "framework.op_callbacks.add_op_callback"], "debug_event_pb2.TensorDebugMode.keys": [], "debug_event_pb2.TensorDebugMode.Value": [], "debug_event_pb2.TensorDebugMode.Name": [], "eager.function.add_function_callback": [], "lib.dumping_callback.disable_dump_debug_info": ["lib.debug_events_writer.DebugEventsWriter", "threading.current_thread", "eager.function.remove_function_callback", "<builtin>.hasattr", "<builtin>.delattr", "platform.tf_logging.info", "framework.op_callbacks.remove_op_callback"], "eager.function.remove_function_callback": [], "lib.grpc_debug_server": ["collections.namedtuple"], "lib.grpc_debug_server._state_change": ["debug_service_pb2.EventReply.DebugOpStateChange"], "debug_service_pb2.EventReply.DebugOpStateChange": [], "lib.grpc_debug_server.EventListenerBaseStreamHandler.__init__": [], "lib.grpc_debug_server.EventListenerBaseStreamHandler.on_core_metadata_event": ["<builtin>.NotImplementedError"], "lib.grpc_debug_server.EventListenerBaseStreamHandler.on_graph_def": ["<builtin>.NotImplementedError"], "lib.grpc_debug_server.EventListenerBaseStreamHandler.on_value_event": ["<builtin>.NotImplementedError"], "lib.grpc_debug_server.EventListenerBaseServicer.__init__": ["threading.Lock", "moves.queue.Queue", "<builtin>.set"], "lib.grpc_debug_server.EventListenerBaseServicer.SendEvents": ["lib.grpc_debug_server.EventListenerBaseServicer._process_tensor_event_in_chunks", "<builtin>.ValueError", "lib.grpc_debug_server.EventListenerBaseServicer._process_encoded_graph_def_in_chunks", "lib.grpc_debug_server.EventListenerBaseServicer._process_debug_op_state_changes"], "lib.grpc_debug_server.EventListenerBaseServicer._process_tensor_event_in_chunks": ["json.loads", "<builtin>.list", "util.compat.as_text", "<builtin>.int"], "lib.grpc_debug_server.EventListenerBaseServicer._process_debug_op_state_changes": ["debug.debug_service_pb2.EventReply", "platform.tf_logging.warn", "platform.tf_logging.info"], "lib.grpc_debug_server.EventListenerBaseServicer._process_encoded_graph_def_in_chunks": ["<builtin>.all", "lib.grpc_debug_server.EventListenerBaseServicer._process_graph_def", "framework.graph_pb2.GraphDef", "<builtin>.int"], "debug.debug_service_pb2.EventReply": [], "lib.grpc_debug_server.EventListenerBaseServicer._process_graph_def": ["lib.debug_graphs.parse_debug_node_name", "lib.debug_graphs.is_debug_node"], "lib.grpc_debug_server.EventListenerBaseServicer.run_server": ["lib.debug_service_pb2_grpc.add_EventListenerServicer_to_server", "concurrent.futures.ThreadPoolExecutor", "<builtin>.ValueError", "grpc.server", "time.sleep"], "concurrent.futures.ThreadPoolExecutor": [], "grpc.server": [], "time.sleep": [], "lib.grpc_debug_server.EventListenerBaseServicer.stop_server": ["<builtin>.ValueError"], "lib.grpc_debug_server.EventListenerBaseServicer.request_watch": ["lib.grpc_debug_server._state_change"], "lib.grpc_debug_server.EventListenerBaseServicer.request_unwatch": ["lib.grpc_debug_server._state_change"], "lib.grpc_debug_server.EventListenerBaseServicer.breakpoints": [], "lib.grpc_debug_server.EventListenerBaseServicer.gated_grpc_debug_watches": ["<builtin>.list"], "lib.grpc_debug_server.EventListenerBaseServicer.SendTracebacks": ["debug.debug_service_pb2.EventReply"], "lib.grpc_debug_server.EventListenerBaseServicer.SendSourceFiles": ["debug.debug_service_pb2.EventReply"], "lib.grpc_tensorflow_server": ["argparse.ArgumentParser", "absl.app.run"], "lib.grpc_tensorflow_server.parse_cluster_spec": ["platform.tf_logging.info", "<builtin>.ValueError", "<builtin>.len", "<builtin>.range"], "lib.grpc_tensorflow_server.main": ["<builtin>.ValueError", "protobuf.tensorflow_server_pb2.ServerDef", "lib.grpc_tensorflow_server.parse_cluster_spec", "training.server_lib.Server", "protobuf.config_pb2.GPUOptions", "protobuf.config_pb2.ConfigProto"], "protobuf.tensorflow_server_pb2.ServerDef": [], "protobuf.config_pb2.GPUOptions": [], "lib.grpc_tensorflow_server.<lambda1>": [], "lib.op_callbacks_common": [], "lib.profiling": [], "lib.profiling.ProfileDatum.__init__": ["os.path.basename"], "lib.profiling.ProfileDatum.exec_time": [], "lib.profiling.AggregateProfile.__init__": [], "lib.profiling.AggregateProfile.add": [], "lib.profiling.AggregateProfile.node_count": ["<builtin>.len"], "lib.profiling.AggregateProfile.node_exec_count": ["<builtin>.sum"], "lib.source_remote": [], "lib.source_remote._load_debugged_source_file": ["socket.gethostname", "platform.gfile.Open", "platform.gfile.Stat"], "lib.source_remote._string_to_id": ["<builtin>.len"], "lib.source_remote._format_origin_stack": ["lib.source_remote._string_to_id"], "lib.source_remote._source_file_paths_outside_tensorflow_py_library": ["<builtin>.set", "platform.gfile.Exists", "lib.source_utils.guess_is_tensorflow_py_library"], "lib.source_remote._send_call_tracebacks": ["<builtin>.set", "<builtin>.len", "debug.debug_service_pb2.CallTraceback", "profiler.tfprof_logger.merge_default_with_oplog", "lib.debug_service_pb2_grpc.EventListenerStub", "lib.source_remote._source_file_paths_outside_tensorflow_py_library", "grpc.insecure_channel", "lib.source_remote._format_origin_stack", "protobuf.debug_pb2.DebuggedSourceFiles", "lib.source_remote._load_debugged_source_file", "<builtin>.isinstance"], "profiler.tfprof_logger.merge_default_with_oplog": ["profiler.tfprof_logger._get_logged_ops", "profiler.tfprof_log_pb2.OpLogProto", "six.iteritems", "framework.ops.get_default_graph", "eager.context.executing_eagerly"], "debug.debug_service_pb2.CallTraceback": [], "protobuf.debug_pb2.DebuggedSourceFiles": [], "grpc.insecure_channel": [], "lib.debug_service_pb2_grpc.EventListenerStub": [], "lib.source_remote.send_graph_tracebacks": ["lib.source_remote._send_call_tracebacks"], "lib.source_remote.send_eager_tracebacks": ["lib.source_remote._send_call_tracebacks"], "lib.source_utils": ["os.path.dirname", "os.path.normpath", "os.path.abspath"], "lib.source_utils._norm_abs_path": ["os.path.normpath", "os.path.abspath"], "os.path.splitext": [], "lib.source_utils.is_extension_compiled_python_source": ["os.path.splitext"], "lib.source_utils._convert_watch_key_to_tensor_name": [], "lib.source_utils._try_load_par_source": ["os.path.relpath", "os.path.split", "os.path.normpath", "os.path.isfile", "zipfile.ZipFile"], "numpy.log10": [], "lib.source_utils.list_source_files_against_dump.<lambda1>": [], "lib.profiling.AggregateProfile": [], "wrappers.dumping_wrapper": [], "wrappers.dumping_wrapper.DumpingDebugWrapperSession.__init__": ["platform.gfile.Exists", "platform.gfile.IsDirectory", "<builtin>.ValueError", "platform.gfile.ListDirectory", "platform.gfile.MakeDirs", "threading.Lock", "framework.NonInteractiveDebugWrapperSession.__init__", "os.path.expanduser"], "framework.NonInteractiveDebugWrapperSession.__init__": [], "platform.gfile.ListDirectory": [], "wrappers.dumping_wrapper.DumpingDebugWrapperSession.prepare_run_debug_urls": ["<builtin>.repr", "platform.gfile.Open", "platform.gfile.MkDir", "time.time", "os.path.join", "util.event_pb2.Event", "<builtin>.int"], "platform.gfile.MkDir": [], "wrappers.framework": [], "wrappers.framework._check_type": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "wrappers.framework.OnSessionInitRequest.__init__": ["wrappers.framework._check_type"], "wrappers.framework.OnSessionInitResponse.__init__": ["wrappers.framework._check_type"], "wrappers.framework.OnRunStartRequest.__init__": [], "wrappers.framework.OnRunStartResponse.__init__": ["wrappers.framework._check_type"], "wrappers.framework.OnRunEndRequest.__init__": ["wrappers.framework._check_type"], "wrappers.framework.OnRunEndResponse.__init__": [], "wrappers.framework.BaseDebugWrapperSession.__init__": ["<builtin>.ValueError", "wrappers.framework.OnSessionInitRequest.__init__", "re.compile", "<builtin>.NotImplementedError", "wrappers.framework.BaseDebugWrapperSession.on_session_init", "wrappers.framework._check_type"], "wrappers.framework.BaseDebugWrapperSession.on_session_init": [], "wrappers.framework.BaseDebugWrapperSession.graph": [], "wrappers.framework.BaseDebugWrapperSession.graph_def": [], "wrappers.framework.BaseDebugWrapperSession.sess_str": [], "wrappers.framework.BaseDebugWrapperSession.session": [], "wrappers.framework.BaseDebugWrapperSession.run": ["wrappers.framework.OnRunStartRequest.__init__", "platform.tf_logging.info", "wrappers.framework.BaseDebugWrapperSession.run.is_empty", "wrappers.framework.BaseDebugWrapperSession._run_with_debugging", "<builtin>.ValueError", "wrappers.framework.BaseDebugWrapperSession.run", "wrappers.framework.BaseDebugWrapperSession._make_callable_from_options.wrapped_runner", "wrappers.framework.BaseDebugWrapperSession.on_run_start", "wrappers.framework.BaseDebugWrapperSession._make_callable_from_options", "wrappers.framework.BaseDebugWrapperSession.increment_run_call_count", "wrappers.framework.BaseDebugWrapperSession._run_with_profiling", "wrappers.framework.BaseDebugWrapperSession.make_callable.wrapped_runner", "wrappers.framework.OnRunEndRequest.__init__", "wrappers.framework.BaseDebugWrapperSession.on_run_end", "wrappers.framework.BaseDebugWrapperSession._is_disabled_thread", "<builtin>.bool", "wrappers.framework._check_type"], "wrappers.framework.BaseDebugWrapperSession.increment_run_call_count": [], "wrappers.framework.BaseDebugWrapperSession.run.is_empty": ["util.nest.is_nested", "<builtin>.isinstance", "<builtin>.list", "wrappers.framework.BaseDebugWrapperSession.run.is_empty"], "util.nest.is_nested": ["util._pywrap_utils.IsSequence"], "wrappers.framework.BaseDebugWrapperSession._is_disabled_thread": ["threading.current_thread"], "wrappers.framework.BaseDebugWrapperSession.make_callable.wrapped_runner": ["wrappers.framework.BaseDebugWrapperSession.run"], "wrappers.framework.BaseDebugWrapperSession._make_callable_from_options": [], "wrappers.framework.BaseDebugWrapperSession._make_callable_from_options.wrapped_runner": ["wrappers.framework.BaseDebugWrapperSession.run"], "wrappers.framework.BaseDebugWrapperSession.on_run_start": [], "wrappers.framework.BaseDebugWrapperSession._run_with_debugging": ["protobuf.config_pb2.RunMetadata", "wrappers.framework.BaseDebugWrapperSession._decorate_run_options_for_debug", "<builtin>.id", "protobuf.config_pb2.CallableOptions", "wrappers.framework.BaseDebugWrapperSession.run", "wrappers.framework.BaseDebugWrapperSession._make_callable_from_options.wrapped_runner", "protobuf.config_pb2.RunOptions", "wrappers.framework.BaseDebugWrapperSession._make_callable_from_options", "wrappers.framework.BaseDebugWrapperSession.make_callable.wrapped_runner", "wrappers.framework.OnRunEndRequest.__init__"], "wrappers.framework.BaseDebugWrapperSession._run_with_profiling": ["protobuf.config_pb2.RunMetadata", "<builtin>.id", "protobuf.config_pb2.CallableOptions", "wrappers.framework.BaseDebugWrapperSession.run", "wrappers.framework.BaseDebugWrapperSession._make_callable_from_options.wrapped_runner", "wrappers.framework.BaseDebugWrapperSession._decorate_run_options_for_profile", "protobuf.config_pb2.RunOptions", "wrappers.framework.BaseDebugWrapperSession._make_callable_from_options", "wrappers.framework.BaseDebugWrapperSession.make_callable.wrapped_runner", "wrappers.framework.OnRunEndRequest.__init__"], "wrappers.framework.BaseDebugWrapperSession.on_run_end": [], "protobuf.config_pb2.CallableOptions": [], "protobuf.config_pb2.RunOptions": [], "protobuf.config_pb2.RunMetadata": [], "wrappers.framework.BaseDebugWrapperSession._decorate_run_options_for_debug": ["wrappers.framework.BaseDebugWrapperSession._is_disk_usage_reset_each_run", "lib.debug_utils.watch_graph"], "wrappers.framework.BaseDebugWrapperSession._decorate_run_options_for_profile": [], "wrappers.framework.BaseDebugWrapperSession.run_step_fn": ["monitored_session.MonitoredSession.StepContext"], "monitored_session.MonitoredSession.StepContext": [], "wrappers.framework.BaseDebugWrapperSession.partial_run_setup": ["<builtin>.NotImplementedError"], "wrappers.framework.BaseDebugWrapperSession.partial_run": ["<builtin>.NotImplementedError"], "wrappers.framework.BaseDebugWrapperSession.list_devices": ["wrappers.framework.BaseDebugWrapperSession.list_devices"], "wrappers.framework.BaseDebugWrapperSession.reset": ["wrappers.framework.BaseDebugWrapperSession.reset"], "wrappers.framework.BaseDebugWrapperSession.make_callable": ["wrappers.framework.BaseDebugWrapperSession.make_callable"], "wrappers.framework.BaseDebugWrapperSession.run_call_count": [], "wrappers.framework.BaseDebugWrapperSession._is_disk_usage_reset_each_run": [], "wrappers.framework.BaseDebugWrapperSession": ["abc.abstractmethod"], "wrappers.framework.BaseDebugWrapperSession.as_default": ["framework.ops.default_session"], "framework.ops.default_session": ["framework.ops._DefaultGraphStack.get_controller", "framework.ops._DefaultStack.get_controller"], "wrappers.framework.BaseDebugWrapperSession.__enter__": ["wrappers.framework.BaseDebugWrapperSession.as_default"], "wrappers.framework.BaseDebugWrapperSession.__exit__": [], "wrappers.framework.BaseDebugWrapperSession.__del__": ["wrappers.framework.BaseDebugWrapperSession.__del__", "<builtin>.hasattr"], "wrappers.framework.BaseDebugWrapperSession.close": ["wrappers.framework.BaseDebugWrapperSession.close"], "wrappers.framework.BaseDebugWrapperSession.should_stop": ["<builtin>.hasattr", "wrappers.framework.BaseDebugWrapperSession.should_stop", "<builtin>.ValueError"], "wrappers.framework.WatchOptions.__init__": [], "wrappers.framework.WatchOptions.__repr__": [], "wrappers.framework.NonInteractiveDebugWrapperSession.__init__": ["<builtin>.callable", "<builtin>.TypeError", "wrappers.framework.BaseDebugWrapperSession.__init__"], "wrappers.framework.NonInteractiveDebugWrapperSession.on_session_init": ["wrappers.framework.OnSessionInitResponse.__init__"], "wrappers.framework.NonInteractiveDebugWrapperSession": ["abc.abstractmethod"], "wrappers.framework.NonInteractiveDebugWrapperSession.prepare_run_debug_urls": [], "wrappers.framework.NonInteractiveDebugWrapperSession.on_run_start": ["wrappers.framework.OnRunStartResponse.__init__", "wrappers.framework.NonInteractiveDebugWrapperSession._prepare_run_watch_config"], "wrappers.framework.NonInteractiveDebugWrapperSession._prepare_run_watch_config": ["<builtin>.isinstance", "wrappers.framework.NonInteractiveDebugWrapperSession.prepare_run_debug_urls", "wrappers.framework.WatchOptions.__init__"], "wrappers.framework.NonInteractiveDebugWrapperSession.on_run_end": ["wrappers.framework.OnRunEndResponse.__init__"], "wrappers.grpc_wrapper": [], "wrappers.grpc_wrapper.publish_traceback": ["traceback.extract_stack", "lib.source_remote.send_graph_tracebacks", "lib.common.get_run_key"], "traceback.extract_stack": [], "wrappers.grpc_wrapper.GrpcDebugWrapperSession.__init__": ["<builtin>.TypeError", "wrappers.grpc_wrapper.GrpcDebugWrapperSession._normalize_grpc_url", "<builtin>.type", "<builtin>.isinstance", "framework.NonInteractiveDebugWrapperSession.__init__"], "wrappers.grpc_wrapper.GrpcDebugWrapperSession._normalize_grpc_url": [], "wrappers.grpc_wrapper.GrpcDebugWrapperSession.prepare_run_debug_urls": [], "wrappers.grpc_wrapper._signal_handler": ["six.moves.input", "sys.exit"], "wrappers.grpc_wrapper.register_signal_handler": ["signal.signal"], "wrappers.grpc_wrapper.TensorBoardDebugWrapperSession.__init__": ["<builtin>.super", "wrappers.grpc_wrapper.register_signal_handler"], "wrappers.grpc_wrapper.TensorBoardDebugWrapperSession.__init__._gated_grpc_watch_fn": ["wrappers.framework.WatchOptions"], "wrappers.framework.WatchOptions": [], "wrappers.grpc_wrapper.TensorBoardDebugWrapperSession.run": ["wrappers.grpc_wrapper.publish_traceback", "<builtin>.super"], "wrappers.hooks": [], "wrappers.hooks.LocalCLIDebugHook.__init__": [], "wrappers.hooks.LocalCLIDebugHook.add_tensor_filter": [], "wrappers.hooks.LocalCLIDebugHook.begin": [], "wrappers.hooks.LocalCLIDebugHook.before_run": ["protobuf.config_pb2.RunOptions", "training.session_run_hook.SessionRunArgs", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession", "wrappers.framework.OnRunStartRequest"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession": [], "wrappers.framework.OnRunStartRequest": [], "training.session_run_hook.SessionRunArgs": [], "wrappers.hooks.LocalCLIDebugHook.after_run": ["wrappers.framework.OnRunEndRequest"], "wrappers.framework.OnRunEndRequest": [], "wrappers.hooks.DumpingDebugHook.__init__": [], "wrappers.hooks.DumpingDebugHook.begin": [], "wrappers.hooks.DumpingDebugHook.before_run": ["protobuf.config_pb2.RunOptions", "training.session_run_hook.SessionRunArgs", "wrappers.dumping_wrapper.DumpingDebugWrapperSession", "lib.debug_utils.watch_graph"], "wrappers.dumping_wrapper.DumpingDebugWrapperSession": [], "wrappers.hooks.DumpingDebugHook.after_run": [], "wrappers.hooks.GrpcDebugHook.__init__": ["<builtin>.isinstance"], "wrappers.hooks.GrpcDebugHook.before_run": ["protobuf.config_pb2.RunOptions", "training.session_run_hook.SessionRunArgs", "lib.debug_utils.watch_graph", "wrappers.grpc_wrapper.GrpcDebugWrapperSession"], "wrappers.grpc_wrapper.GrpcDebugWrapperSession": [], "wrappers.hooks.TensorBoardDebugHook.__init__": ["<builtin>.super", "wrappers.grpc_wrapper.register_signal_handler"], "wrappers.hooks.TensorBoardDebugHook.__init__._gated_grpc_watch_fn": ["wrappers.framework.WatchOptions"], "wrappers.hooks.TensorBoardDebugHook.before_run": ["<builtin>.super", "wrappers.grpc_wrapper.publish_traceback"], "wrappers.local_cli_wrapper": [], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.__init__": ["cli.cli_config.CLIConfig", "os.listdir", "os.path.expanduser", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._initialize_argparsers", "tempfile.mktemp", "framework.BaseDebugWrapperSession.__init__", "<builtin>.ValueError", "os.path.isdir", "os.path.isfile", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.add_tensor_filter"], "framework.BaseDebugWrapperSession.__init__": [], "tempfile.mktemp": [], "os.listdir": [], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._initialize_argparsers": ["cli.command_parser.get_print_tensor_argparser", "argparse.ArgumentParser"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.add_tensor_filter": [], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._is_disk_usage_reset_each_run": [], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.on_session_init": ["wrappers.framework.OnSessionInitResponse"], "wrappers.framework.OnSessionInitResponse": [], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.on_run_start": ["wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._prep_cli_for_run_start", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._get_run_debug_urls", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._exit_if_requested_by_user", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._launch_cli", "wrappers.framework.OnRunStartResponse", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._update_run_calls_state"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._update_run_calls_state": ["cli.cli_shared.get_run_start_intro", "cli.cli_shared.get_run_short_description"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._exit_if_requested_by_user": ["sys.exit", "<builtin>.print"], "wrappers.framework.OnRunStartResponse": [], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._get_run_debug_urls": [], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._prep_cli_for_run_start": ["cli.debugger_cli_common.RichTextLines", "cli.cli_shared.get_tfdbg_logo", "cli.debugger_cli_common.get_tensorflow_version_lines", "cli.ui_factory.get_ui"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._launch_cli": ["wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._register_this_run_info"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession.on_run_end": ["wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._prep_debug_cli_for_run_end", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._remove_dump_root", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._prep_profile_cli_for_run_end", "wrappers.framework.OnRunEndResponse", "lib.debug_data.DebugDumpDir", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._launch_cli", "os.path.isdir"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._remove_dump_root": ["io.file_io.delete_recursively", "os.path.isdir"], "wrappers.framework.OnRunEndResponse": [], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._prep_debug_cli_for_run_end": ["cli.cli_shared.get_error_intro", "<builtin>.str", "cli.analyzer_cli.create_analyzer_ui"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._prep_profile_cli_for_run_end": ["cli.profile_analyzer_cli.create_profiler_ui"], "io.file_io.delete_recursively": ["io.file_io.delete_recursively_v2"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._register_this_run_info": ["lib.common.get_graph_element_name", "<builtin>.hasattr", "<builtin>.list"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._run_info_handler": ["cli.debugger_cli_common.RichTextLines", "cli.cli_shared.get_tfdbg_logo", "cli.debugger_cli_common.get_tensorflow_version_lines", "cli.debugger_cli_common.MenuItem"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._print_feed_handler": ["cli.command_parser.parse_tensor_name_with_slicing", "cli.cli_shared.error", "lib.common.get_graph_element_name", "cli.cli_shared.format_tensor", "cli.cli_shared.parse_ranges_highlight", "cli.cli_shared.numpy_printoptions_from_screen_info"], "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._run_handler": ["cli.debugger_cli_common.CommandLineExit", "cli.debugger_cli_common.RichTextLines", "wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession._get_run_debug_urls", "<builtin>.ValueError", "wrappers.framework.OnRunStartResponse"], "cluster_resolver.cluster_resolver": [], "client.session._DeviceAttributes": [], "cluster_resolver.cluster_resolver.ClusterResolver": ["abc.abstractmethod"], "cluster_resolver.cluster_resolver.ClusterResolver.cluster_spec": ["<builtin>.NotImplementedError"], "cluster_resolver.cluster_resolver.ClusterResolver.master": ["<builtin>.NotImplementedError"], "cluster_resolver.cluster_resolver.ClusterResolver.num_accelerators": ["cluster_resolver.cluster_resolver.ClusterResolver.master", "cluster_resolver.cluster_resolver.get_accelerator_devices", "collections.defaultdict"], "cluster_resolver.cluster_resolver.ClusterResolver.environment": [], "cluster_resolver.cluster_resolver.ClusterResolver.task_type": ["<builtin>.getattr"], "cluster_resolver.cluster_resolver.ClusterResolver.task_id": ["<builtin>.getattr"], "cluster_resolver.cluster_resolver.SimpleClusterResolver.__init__": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.super"], "cluster_resolver.cluster_resolver.SimpleClusterResolver.cluster_spec": [], "cluster_resolver.cluster_resolver.SimpleClusterResolver.master": ["cluster_resolver.cluster_resolver.SimpleClusterResolver.cluster_spec", "cluster_resolver.cluster_resolver.format_master_url"], "cluster_resolver.cluster_resolver.SimpleClusterResolver.task_type": [], "cluster_resolver.cluster_resolver.SimpleClusterResolver.task_id": [], "cluster_resolver.cluster_resolver.SimpleClusterResolver.environment": [], "cluster_resolver.cluster_resolver.SimpleClusterResolver.num_accelerators": [], "cluster_resolver.cluster_resolver.SimpleClusterResolver.rpc_layer": [], "cluster_resolver.cluster_resolver.UnionClusterResolver.__init__": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.super", "<builtin>.ValueError"], "cluster_resolver.cluster_resolver.UnionClusterResolver.cluster_spec": ["<builtin>.KeyError", "<builtin>.range", "<builtin>.dict", "training.server_lib.ClusterSpec", "<builtin>.isinstance", "<builtin>.set", "<builtin>.repr", "<builtin>.zip", "<builtin>.len"], "cluster_resolver.cluster_resolver.UnionClusterResolver.master": ["cluster_resolver.cluster_resolver.UnionClusterResolver.cluster_spec", "cluster_resolver.cluster_resolver.format_master_url"], "cluster_resolver.cluster_resolver.UnionClusterResolver.task_type": [], "cluster_resolver.cluster_resolver.UnionClusterResolver.task_id": [], "cluster_resolver.cluster_resolver.UnionClusterResolver.environment": [], "cluster_resolver.cluster_resolver.UnionClusterResolver.num_accelerators": [], "cluster_resolver.cluster_resolver.UnionClusterResolver.rpc_layer": [], "cluster_resolver.gce_cluster_resolver": [], "cluster_resolver.gce_cluster_resolver.GCEClusterResolver.__init__": ["<builtin>.ImportError", "googleapiclient.discovery.build", "client.GoogleCredentials.get_application_default"], "client.GoogleCredentials.get_application_default": [], "<builtin>.ImportError": [], "googleapiclient.discovery.build": [], "cluster_resolver.gce_cluster_resolver.GCEClusterResolver.cluster_spec": ["training.server_lib.ClusterSpec"], "cluster_resolver.gce_cluster_resolver.GCEClusterResolver.master": ["cluster_resolver.gce_cluster_resolver.GCEClusterResolver.cluster_spec"], "cluster_resolver.gce_cluster_resolver.GCEClusterResolver.task_type": ["<builtin>.RuntimeError"], "cluster_resolver.gce_cluster_resolver.GCEClusterResolver.task_id": [], "cluster_resolver.gce_cluster_resolver.GCEClusterResolver.rpc_layer": [], "cluster_resolver.kubernetes_cluster_resolver": [], "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver.__init__": ["<builtin>.ImportError", "kubernetes.config.load_kube_config"], "kubernetes.config.load_kube_config": [], "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver.master": ["cluster_resolver.cluster_resolver.format_master_url", "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver.cluster_spec"], "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver.cluster_spec": ["<builtin>.RuntimeError", "training.server_lib.ClusterSpec", "kubernetes.client.CoreV1Api", "<builtin>.sorted", "kubernetes.config.load_kube_config"], "kubernetes.client.CoreV1Api": [], "cluster_resolver.kubernetes_cluster_resolver.KubernetesClusterResolver.cluster_spec.<lambda1>": [], "cluster_resolver.sagemaker_cluster_resolver": [], "cluster_resolver.sagemaker_cluster_resolver.format_master_url": [], "cluster_resolver.sagemaker_cluster_resolver._load_tf_config": ["<builtin>.all", "<builtin>.sorted", "json.loads"], "cluster_resolver.sagemaker_cluster_resolver._get_value_in_tfconfig": ["cluster_resolver.sagemaker_cluster_resolver._load_tf_config"], "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.__init__": ["<builtin>.str"], "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.task_type": ["<builtin>.str", "cluster_resolver.sagemaker_cluster_resolver._get_value_in_tfconfig"], "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.task_id": ["<builtin>.int", "cluster_resolver.sagemaker_cluster_resolver._get_value_in_tfconfig"], "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.environment": [], "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.rpc_layer": ["cluster_resolver.sagemaker_cluster_resolver._get_value_in_tfconfig"], "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.num_accelerators": ["<builtin>.super"], "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.cluster_spec": ["training.server_lib.ClusterSpec", "cluster_resolver.sagemaker_cluster_resolver._load_tf_config"], "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.master": ["<builtin>.len", "cluster_resolver.sagemaker_cluster_resolver.format_master_url", "cluster_resolver.sagemaker_cluster_resolver._get_value_in_tfconfig", "cluster_resolver.sagemaker_cluster_resolver.SageMakerClusterResolver.cluster_spec"], "cluster_resolver.slurm_cluster_resolver": [], "cluster_resolver.slurm_cluster_resolver.expand_hostlist": ["<builtin>.ValueError", "<builtin>.str", "re.match", "cluster_resolver.slurm_cluster_resolver.expand_hostlist.split_hostlist", "cluster_resolver.slurm_cluster_resolver.expand_hostlist.expand_range_expression"], "cluster_resolver.slurm_cluster_resolver.expand_hostlist.split_hostlist": [], "cluster_resolver.slurm_cluster_resolver.expand_hostlist.expand_range_expression": ["<builtin>.int", "<builtin>.len", "<builtin>.range"], "cluster_resolver.slurm_cluster_resolver.expand_tasks_per_node": ["<builtin>.int", "<builtin>.ValueError", "re.match"], "cluster_resolver.slurm_cluster_resolver._get_slurm_var": ["<builtin>.RuntimeError"], "cluster_resolver.slurm_cluster_resolver._get_num_slurm_tasks": ["<builtin>.int", "cluster_resolver.slurm_cluster_resolver._get_slurm_var"], "cluster_resolver.slurm_cluster_resolver._get_num_nvidia_gpus": ["<builtin>.RuntimeError", "<builtin>.len", "<builtin>.sum", "subprocess.check_output"], "subprocess.check_output": [], "cluster_resolver.slurm_cluster_resolver.get_num_gpus": ["cluster_resolver.slurm_cluster_resolver._get_num_nvidia_gpus"], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver.__init__": ["<builtin>.RuntimeError", "cluster_resolver.slurm_cluster_resolver.get_num_gpus", "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_own_rank", "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_task_configuration", "<builtin>.isinstance", "<builtin>.int", "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_hostlist", "<builtin>.sum", "<builtin>.max", "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_num_tasks"], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_own_rank": ["<builtin>.int", "cluster_resolver.slurm_cluster_resolver._get_slurm_var"], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_num_tasks": ["cluster_resolver.slurm_cluster_resolver._get_num_slurm_tasks"], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_task_configuration": ["cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_hostlist", "<builtin>.zip", "cluster_resolver.slurm_cluster_resolver.expand_tasks_per_node", "cluster_resolver.slurm_cluster_resolver._get_slurm_var"], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver._resolve_hostlist": ["cluster_resolver.slurm_cluster_resolver.expand_hostlist", "cluster_resolver.slurm_cluster_resolver._get_slurm_var"], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver.cluster_spec": ["<builtin>.sorted", "<builtin>.str", "<builtin>.zip", "training.server_lib.ClusterSpec", "<builtin>.range"], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver.get_task_info": [], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver.master": ["cluster_resolver.cluster_resolver.format_master_url", "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver.cluster_spec"], "cluster_resolver.slurm_cluster_resolver.SlurmClusterResolver.num_accelerators": [], "cluster_resolver.tfconfig_cluster_resolver": [], "cluster_resolver.tfconfig_cluster_resolver.format_master_url": [], "cluster_resolver.tfconfig_cluster_resolver._load_tf_config": ["json.loads", "os.environ.get"], "cluster_resolver.tfconfig_cluster_resolver._get_value_in_tfconfig": ["cluster_resolver.tfconfig_cluster_resolver._load_tf_config"], "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.__init__": [], "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.task_type": ["cluster_resolver.tfconfig_cluster_resolver._get_value_in_tfconfig", "<builtin>.str"], "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.task_id": ["<builtin>.int", "cluster_resolver.tfconfig_cluster_resolver._get_value_in_tfconfig"], "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.environment": [], "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.rpc_layer": ["cluster_resolver.tfconfig_cluster_resolver._get_value_in_tfconfig"], "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.num_accelerators": ["<builtin>.super"], "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.cluster_spec": ["cluster_resolver.tfconfig_cluster_resolver._load_tf_config", "training.server_lib.ClusterSpec"], "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.master": ["cluster_resolver.tfconfig_cluster_resolver.format_master_url", "cluster_resolver.tfconfig_cluster_resolver._get_value_in_tfconfig", "cluster_resolver.tfconfig_cluster_resolver.TFConfigClusterResolver.cluster_spec", "<builtin>.len"], "cluster_resolver.tpu_cluster_resolver": ["util.tf_export.tf_export"], "coordinator.cluster_coordinator": [], "coordinator.cluster_coordinator.InputError.__init__": ["<builtin>.super", "<builtin>.str"], "coordinator.cluster_coordinator._maybe_rebuild_remote_values": ["util.nest.map_structure"], "coordinator.cluster_coordinator._maybe_rebuild_remote_values._get_error": ["<builtin>.isinstance"], "coordinator.cluster_coordinator._maybe_get_remote_value": ["<builtin>.AssertionError", "<builtin>.isinstance"], "coordinator.cluster_coordinator._maybe_as_type_spec": ["<builtin>.ValueError", "<builtin>.isinstance"], "coordinator.cluster_coordinator._select_worker_slice": ["util.nest.map_structure"], "coordinator.cluster_coordinator._select_worker_slice._get": ["<builtin>.isinstance"], "coordinator.cluster_coordinator._disallow_remote_value_as_input": ["util.nest.map_structure"], "coordinator.cluster_coordinator._disallow_remote_value_as_input._raise_if_remote_value": ["<builtin>.ValueError", "<builtin>.isinstance"], "coordinator.cluster_coordinator.Closure.__init__": ["<builtin>.callable", "framework.func_graph.convert_structure_to_signature", "coordinator.cluster_coordinator._disallow_remote_value_as_input", "coordinator.metric_utils.monitored_timer", "<builtin>.ValueError", "util.nest.map_structure", "<builtin>.hasattr", "<builtin>.isinstance", "coordinator.cluster_coordinator._select_worker_slice"], "coordinator.metric_utils.monitored_timer": ["time.time", "coordinator.metric_utils._init"], "framework.func_graph.convert_structure_to_signature": ["util.nest.pack_sequence_as", "framework.func_graph.convert_structure_to_signature.encode_arg", "<builtin>.len", "<builtin>.ValueError", "util.nest.flatten_with_tuple_paths"], "coordinator.cluster_coordinator.Closure.build_output_remote_value": ["coordinator.values.RemoteValueImpl", "<builtin>.ValueError", "weakref.ref"], "coordinator.values.RemoteValueImpl": [], "weakref.ref": [], "coordinator.cluster_coordinator.Closure.maybe_call_with_output_remote_value": [], "coordinator.cluster_coordinator.Closure.mark_cancelled": ["framework.errors.CancelledError", "coordinator.cluster_coordinator.Closure.maybe_call_with_output_remote_value"], "framework.errors.CancelledError": [], "coordinator.cluster_coordinator.Closure.mark_cancelled.<lambda1>": [], "coordinator.cluster_coordinator.Closure.execute_on": ["coordinator.cluster_coordinator.Closure.maybe_call_with_output_remote_value", "coordinator.metric_utils.monitored_timer", "util.nest.map_structure", "coordinator.cluster_coordinator._maybe_rebuild_remote_values", "<builtin>.isinstance", "coordinator.cluster_coordinator.InputError.__init__", "coordinator.cluster_coordinator._select_worker_slice", "framework.ops.device", "eager.context.executor_scope"], "eager.context.executor_scope": ["eager.context.context"], "coordinator.cluster_coordinator.Closure.execute_on.<lambda1>": [], "coordinator.cluster_coordinator.ResourceClosure.build_output_remote_value": ["coordinator.values.RemoteValueImpl", "weakref.ref"], "coordinator.cluster_coordinator._CoordinatedClosureQueue.__init__": ["moves.queue.Queue", "threading.Lock", "platform.tf_logging.warning", "eager.cancellation.CancellationManager", "threading.Condition"], "threading.Condition": [], "eager.cancellation.CancellationManager": [], "coordinator.cluster_coordinator._CoordinatedClosureQueue.stop": [], "coordinator.cluster_coordinator._CoordinatedClosureQueue._cancel_all_closures": ["eager.cancellation.CancellationManager"], "coordinator.cluster_coordinator._CoordinatedClosureQueue._raise_if_error": ["platform.tf_logging.error", "coordinator.cluster_coordinator._CoordinatedClosureQueue._cancel_all_closures"], "coordinator.cluster_coordinator._CoordinatedClosureQueue.put": ["coordinator.cluster_coordinator._CoordinatedClosureQueue._raise_if_error"], "coordinator.cluster_coordinator._CoordinatedClosureQueue.put.<lambda1>": [], "coordinator.cluster_coordinator._CoordinatedClosureQueue.get": [], "coordinator.cluster_coordinator._CoordinatedClosureQueue.mark_finished": ["<builtin>.AssertionError"], "coordinator.cluster_coordinator._CoordinatedClosureQueue.put_back": ["<builtin>.AssertionError"], "coordinator.cluster_coordinator._CoordinatedClosureQueue.put_back.<lambda1>": [], "coordinator.cluster_coordinator._CoordinatedClosureQueue.wait": ["coordinator.cluster_coordinator._CoordinatedClosureQueue._raise_if_error"], "coordinator.cluster_coordinator._CoordinatedClosureQueue.mark_failed": ["<builtin>.AssertionError"], "coordinator.cluster_coordinator._CoordinatedClosureQueue.done": ["coordinator.cluster_coordinator._CoordinatedClosureQueue._raise_if_error"], "coordinator.cluster_coordinator.WorkerPreemptionHandler.__init__": ["threading.Lock", "threading.Condition", "threading.Thread", "threading.Event"], "threading.Event": [], "threading.Thread": [], "coordinator.cluster_coordinator.WorkerPreemptionHandler.stop": [], "coordinator.cluster_coordinator.WorkerPreemptionHandler._validate_preemption_failure": ["coordinator.cluster_coordinator._is_worker_failure"], "coordinator.cluster_coordinator._is_worker_failure": ["<builtin>.str", "<builtin>.isinstance"], "coordinator.cluster_coordinator.WorkerPreemptionHandler": ["contextlib.contextmanager"], "coordinator.cluster_coordinator.WorkerPreemptionHandler.wait_on_failure": ["coordinator.cluster_coordinator.WorkerPreemptionHandler._validate_preemption_failure", "<builtin>.isinstance", "coordinator.cluster_coordinator.Worker._set_resources_aborted", "platform.tf_logging.info", "platform.tf_logging.error", "<builtin>.str", "coordinator.cluster_coordinator.WorkerPreemptionHandler.wait_on_failure", "coordinator.cluster_coordinator.Cluster._record_and_ignore_transient_ps_failure"], "coordinator.cluster_coordinator.Cluster._record_and_ignore_transient_ps_failure": ["coordinator.cluster_coordinator._is_ps_failure", "<builtin>.str", "coordinator.cluster_coordinator._extract_failed_ps_instances"], "coordinator.cluster_coordinator.Worker._set_resources_aborted": [], "coordinator.cluster_coordinator.WorkerPreemptionHandler._preemption_handler": ["platform.tf_logging.info", "platform.tf_logging.error", "eager.context.context", "coordinator.cluster_coordinator.WorkerPreemptionHandler._validate_preemption_failure"], "coordinator.cluster_coordinator.Worker.__init__": ["threading.Thread"], "coordinator.cluster_coordinator.Worker.stop": [], "coordinator.cluster_coordinator.Worker._set_dead": ["<builtin>.NotImplementedError"], "coordinator.cluster_coordinator.Worker._process_closure": ["coordinator.metric_utils.monitored_timer", "<builtin>.isinstance", "platform.tf_logging.error", "coordinator.cluster_coordinator._CoordinatedClosureQueue.mark_finished", "coordinator.cluster_coordinator._CoordinatedClosureQueue.mark_failed", "coordinator.cluster_coordinator.WorkerPreemptionHandler.wait_on_failure"], "coordinator.cluster_coordinator.Worker._process_closure.<lambda1>": ["coordinator.cluster_coordinator._CoordinatedClosureQueue.put_back"], "coordinator.cluster_coordinator.Worker._process_closure.<lambda2>": ["coordinator.cluster_coordinator._CoordinatedClosureQueue.put_back"], "coordinator.cluster_coordinator.Worker._process_closure.<lambda3>": [], "coordinator.cluster_coordinator.Worker._process_closure.<lambda4>": [], "coordinator.cluster_coordinator.Worker._maybe_delay": ["time.sleep", "<builtin>.min", "os.environ.get", "platform.tf_logging.info", "<builtin>.int"], "coordinator.cluster_coordinator.Worker._process_queue": ["coordinator.cluster_coordinator._CoordinatedClosureQueue.get", "coordinator.cluster_coordinator.Worker._maybe_delay", "coordinator.cluster_coordinator.Worker._process_closure"], "coordinator.cluster_coordinator.Worker.create_resource": ["coordinator.cluster_coordinator.Closure.__init__", "coordinator.cluster_coordinator.Worker._register_resource", "coordinator.cluster_coordinator.ResourceClosure.build_output_remote_value"], "coordinator.cluster_coordinator.Worker._register_resource": ["<builtin>.ValueError", "weakref.ref", "<builtin>.isinstance"], "coordinator.cluster_coordinator.Cluster.__init__": ["<builtin>.enumerate", "eager.context.get_server_def", "os.environ.get", "threading.Lock", "coordinator.cluster_coordinator._CoordinatedClosureQueue.__init__", "<builtin>.int", "coordinator.cluster_coordinator.WorkerPreemptionHandler.__init__", "<builtin>.range", "coordinator.cluster_coordinator.Worker.__init__"], "eager.context.get_server_def": ["eager.context.context"], "coordinator.cluster_coordinator.Cluster.stop": ["coordinator.cluster_coordinator.WorkerPreemptionHandler.stop", "coordinator.cluster_coordinator._CoordinatedClosureQueue.stop"], "coordinator.cluster_coordinator._is_ps_failure": ["<builtin>.str", "<builtin>.isinstance"], "coordinator.cluster_coordinator._extract_failed_ps_instances": ["<builtin>.int", "re.findall", "<builtin>.set"], "coordinator.cluster_coordinator.Cluster.schedule": ["coordinator.cluster_coordinator.Closure.__init__", "coordinator.cluster_coordinator.Closure.build_output_remote_value", "coordinator.cluster_coordinator.ResourceClosure.build_output_remote_value", "coordinator.cluster_coordinator._CoordinatedClosureQueue.put"], "coordinator.cluster_coordinator.Cluster.join": ["coordinator.cluster_coordinator._CoordinatedClosureQueue.wait"], "coordinator.cluster_coordinator.Cluster.done": ["coordinator.cluster_coordinator._CoordinatedClosureQueue.done"], "coordinator.cluster_coordinator.ClusterCoordinator.__new__": ["<builtin>.super"], "coordinator.cluster_coordinator.ClusterCoordinator.__init__": ["<builtin>.ValueError", "coordinator.cluster_coordinator.Cluster.__init__", "<builtin>.getattr", "<builtin>.isinstance"], "coordinator.cluster_coordinator.ClusterCoordinator.__del__": ["coordinator.cluster_coordinator.Cluster.stop"], "coordinator.cluster_coordinator.ClusterCoordinator.strategy": [], "coordinator.cluster_coordinator.ClusterCoordinator.schedule": ["<builtin>.TypeError", "<builtin>.isinstance", "coordinator.cluster_coordinator.Cluster.schedule"], "coordinator.cluster_coordinator.ClusterCoordinator.join": ["coordinator.cluster_coordinator.Cluster.join"], "coordinator.cluster_coordinator.ClusterCoordinator.done": ["coordinator.cluster_coordinator.Cluster.done"], "coordinator.cluster_coordinator.ClusterCoordinator.create_per_worker_dataset": ["coordinator.values.get_per_worker_dataset"], "coordinator.values.get_per_worker_dataset": ["<builtin>.callable", "coordinator.values.PerWorkerDatasetFromDataset.__init__", "coordinator.values.PerWorkerDatasetFromDatasetFunction.__init__"], "coordinator.cluster_coordinator.ClusterCoordinator._create_per_worker_resources": ["<builtin>.tuple", "coordinator.values.PerWorkerValues"], "coordinator.values.PerWorkerValues": [], "coordinator.cluster_coordinator.ClusterCoordinator.fetch": ["util.nest.map_structure"], "coordinator.cluster_coordinator.ClusterCoordinator.fetch._maybe_fetch": ["<builtin>.isinstance"], "re.findall": [], "coordinator.metric_utils": ["util.tf_contextlib.contextmanager"], "coordinator.metric_utils._init": ["eager.monitoring.ExponentialBuckets", "eager.monitoring.Sampler"], "eager.monitoring.ExponentialBuckets": [], "eager.monitoring.Sampler": [], "util.tf_contextlib.contextmanager": ["contextlib.contextmanager", "util.tf_decorator.make_decorator"], "coordinator.metric_utils.get_metric_summary": ["<builtin>.dict"], "coordinator.utils": [], "coordinator.utils.start_server": ["<builtin>.ValueError", "training.server_lib.Server", "platform.tf_logging.info"], "coordinator.values": [], "coordinator.values.RemoteValue.fetch": ["<builtin>.NotImplementedError"], "coordinator.values.RemoteValue.get": ["<builtin>.NotImplementedError"], "coordinator.values.RemoteValueImpl.__init__": ["threading.Event", "threading.Lock"], "coordinator.values.RemoteValueImpl._set_aborted": [], "coordinator.values.RemoteValueImpl._rebuild_on": [], "coordinator.values.RemoteValueImpl._set_values": [], "coordinator.values.RemoteValueImpl._set_error": [], "coordinator.values.RemoteValueImpl._get_values": [], "coordinator.values.RemoteValueImpl._get_error": [], "coordinator.values.RemoteValueImpl._wait_and_maybe_error": ["framework.errors.CancelledError"], "coordinator.values.RemoteValueImpl.fetch": ["util.nest.map_structure", "coordinator.values.RemoteValueImpl.get"], "coordinator.values.RemoteValueImpl.fetch.<lambda1>": ["<builtin>.hasattr"], "coordinator.values.RemoteValueImpl.get": ["util.nest.map_structure", "coordinator.values.RemoteValueImpl._wait_and_maybe_error"], "coordinator.values.RemoteValueImpl.get.copy_tensor": ["framework.ops.device", "<builtin>.isinstance", "eager.context.get_server_def", "ops.array_ops.identity"], "coordinator.values.PerWorkerValues.__init__": ["<builtin>.AssertionError", "<builtin>.isinstance", "<builtin>.tuple"], "coordinator.values.PerWorkerValues._type_spec": ["coordinator.values.PerWorkerValuesTypeSpec.__init__", "<builtin>.type"], "coordinator.values.PerWorkerValuesTypeSpec.__init__": [], "coordinator.values.PerWorkerValuesTypeSpec._serialize": [], "coordinator.values.PerWorkerValuesTypeSpec.value_type": [], "coordinator.values.PerWorkerValuesTypeSpec.most_specific_compatible_type": ["<builtin>.NotImplementedError"], "coordinator.values.PerWorkerValuesTypeSpec._component_specs": [], "coordinator.values.PerWorkerValuesTypeSpec._to_components": [], "coordinator.values.PerWorkerValuesTypeSpec._from_components": [], "coordinator.values.PerWorkerDatasetFromDatasetFunction.__init__": ["ops.variable_scope.variable_creator_scope", "<builtin>.isinstance", "eager.def_function.function"], "coordinator.values.PerWorkerDatasetFromDatasetFunction.__init__.disallow_variable_creation": ["<builtin>.ValueError"], "ops.variable_scope.variable_creator_scope": ["framework.ops.get_default_graph"], "eager.def_function.function": ["eager.def_function.function.decorated", "eager.function.validate_signature", "eager.function.validate_python_function"], "coordinator.values.PerWorkerDatasetFromDatasetFunction.__iter__": ["<builtin>.RuntimeError", "distribute.input_lib.get_iterator_spec_from_dataset", "framework.ops.get_default_graph", "eager.context.executing_eagerly", "coordinator.values.PerWorkerValues.__init__"], "coordinator.values.PerWorkerDatasetFromDatasetFunction.__iter__._create_per_worker_iterator": ["<builtin>.iter"], "distribute.input_lib.get_iterator_spec_from_dataset": ["ops.iterator_ops.IteratorSpec", "distribute.input_lib.DistributedIteratorSpec.__init__", "<builtin>.isinstance", "platform.tf_logging.warning"], "coordinator.values.PerWorkerDatasetFromDatasetFunction.element_spec": ["<builtin>.isinstance", "<builtin>.NotImplementedError"], "coordinator.values.serialize_dataset_to_graph": ["ops.gen_dataset_ops.dataset_to_graph_v2"], "coordinator.values._RemoteDataset.__init__": ["ops.gen_experimental_dataset_ops.dataset_from_graph", "<builtin>.super"], "ops.gen_experimental_dataset_ops.dataset_from_graph": [], "coordinator.values._RemoteDataset.element_spec": [], "coordinator.values.deserialize_dataset_from_graph": ["coordinator.values._RemoteDataset.__init__"], "coordinator.values.PerWorkerDatasetFromDataset.__init__": ["<builtin>.isinstance", "coordinator.values.serialize_dataset_to_graph", "<builtin>.super", "<builtin>.ValueError"], "coordinator.values.PerWorkerDatasetFromDataset.__init__.dataset_fn": ["coordinator.values.deserialize_dataset_from_graph"], "coordinator.values.PerWorkerDistributedIterator.__next__": ["coordinator.values.PerWorkerDistributedIterator.get_next"], "coordinator.values.PerWorkerDistributedIterator.get_next": ["<builtin>.NotImplementedError"], "parallel_device.parallel_device": ["weakref.WeakValueDictionary", "threading.Lock"], "weakref.WeakValueDictionary": [], "parallel_device.parallel_device.unpack": ["<builtin>.ValueError"], "parallel_device.parallel_device.ParallelDevice.__init__": ["<builtin>.ValueError", "python._pywrap_parallel_device.GetParallelDeviceCapsules", "eager.context.register_custom_device", "<builtin>.tuple", "eager.context.context", "distribute.device_util.canonicalize"], "distribute.device_util.canonicalize": ["framework.ops.executing_eagerly_outside_functions", "device.DeviceSpec.from_string", "<builtin>.isinstance", "framework.device.DeviceSpec", "framework.config.list_logical_devices"], "python._pywrap_parallel_device.GetParallelDeviceCapsules": [], "eager.context.register_custom_device": ["eager.context.context"], "parallel_device.parallel_device.ParallelDevice._pack_tensor": ["<builtin>.ValueError", "ops.tpu_ops.tpu_replicated_input", "framework.ops.device", "<builtin>.isinstance"], "ops.tpu_ops.tpu_replicated_input": [], "parallel_device.parallel_device.ParallelDevice.pack": ["<builtin>.ValueError", "util.nest.map_structure", "parallel_device.parallel_device.ParallelDevice._assert_eager", "<builtin>.len"], "parallel_device.parallel_device.ParallelDevice._assert_eager": ["<builtin>.NotImplementedError", "eager.context.executing_eagerly"], "parallel_device.parallel_device.ParallelDevice._unpack_tensor": ["<builtin>.ValueError", "<builtin>.isinstance", "ops.tpu_ops.tpu_replicated_output", "framework.ops.device", "<builtin>.len"], "ops.tpu_ops.tpu_replicated_output": [], "parallel_device.parallel_device.ParallelDevice.unpack": ["parallel_device.parallel_device.ParallelDevice._unpack_tensor", "util.nest.flatten", "<builtin>.range", "<builtin>.zip", "parallel_device.parallel_device.ParallelDevice._assert_eager", "util.nest.pack_sequence_as", "<builtin>.len"], "parallel_device.parallel_device.ParallelDevice.device_ids": ["framework.ops.init_scope", "framework.constant_op.constant", "ops.array_ops.identity", "parallel_device.parallel_device.ParallelDevice.pack", "<builtin>.enumerate", "framework.ops.device"], "framework.ops.init_scope": ["eager.context.executing_eagerly", "framework.ops._get_outer_context_and_inner_device_stack", "framework.ops.control_dependencies", "framework.ops.name_scope", "eager.tape.stop_recording", "framework.ops.NullContextmanager.__init__", "framework.ops.get_default_graph", "eager.context.device", "framework.ops.Graph.get_name_scope"], "parallel_device.parallel_device.ParallelDevice.__enter__": ["<builtin>.AssertionError", "parallel_device.parallel_device.ParallelDevice._assert_eager", "framework.ops.device", "parallel_device.saving.independent_buffers"], "parallel_device.saving.independent_buffers": ["ops.variable_scope.variable_creator_scope", "functools.partial"], "parallel_device.parallel_device.ParallelDevice.__exit__": [], "parallel_device.saving": ["<builtin>.type", "contextlib.contextmanager", "<builtin>.issubclass"], "parallel_device.saving._ParallelComponentSaveable.__init__": ["saving.saveable_object.SaveSpec", "functools.partial", "<builtin>.super"], "saving.saveable_object.SaveSpec": [], "parallel_device.saving._ParallelComponentSaveable.restore": ["ops.gen_resource_variable_ops.assign_variable_op"], "ops.gen_resource_variable_ops.assign_variable_op": [], "parallel_device.saving.ParallelVariable.__init__": ["<builtin>.super"], "parallel_device.saving.ParallelVariable._gather_saveables_for_checkpoint": ["functools.partial", "<builtin>.enumerate"], "parallel_device.saving._variable_creator": ["parallel_device.saving.ParallelVariable.__init__"], "v1.all_reduce": [], "v1.all_reduce._flatten_tensors": ["<builtin>.len", "ops.array_ops.reshape", "<builtin>.ValueError", "framework.ops.colocate_with"], "v1.all_reduce._reshape_tensors": ["ops.array_ops.reshape", "framework.ops.colocate_with"], "v1.all_reduce._padded_split": ["<builtin>.len", "ops.array_ops.split", "ops.array_ops.zeros", "ops.array_ops.concat", "framework.ops.colocate_with", "<builtin>.range", "<builtin>.ValueError"], "ops.array_ops.concat": ["framework.ops.convert_to_tensor", "<builtin>.isinstance", "ops.gen_array_ops.concat_v2", "ops.array_ops.identity", "framework.ops.name_scope", "<builtin>.len"], "ops.array_ops.split": ["<builtin>.ValueError", "framework.ops.convert_to_tensor", "ops.gen_array_ops.split", "<builtin>.isinstance", "ops.gen_array_ops.split_v"], "v1.all_reduce._strip_padding": ["ops.array_ops.slice", "<builtin>.len", "<builtin>.int", "framework.ops.colocate_with", "<builtin>.ValueError"], "ops.array_ops.slice": ["ops.gen_array_ops._slice"], "v1.all_reduce._ragged_split": ["<builtin>.len", "ops.array_ops.split", "<builtin>.range", "framework.ops.colocate_with", "<builtin>.ValueError"], "v1.all_reduce._ring_permutations": ["<builtin>.max", "<builtin>.len", "<builtin>.int", "<builtin>.range", "<builtin>.ValueError"], "v1.all_reduce.build_ring_all_reduce": ["v1.all_reduce._reshape_tensors", "<builtin>.len", "v1.all_reduce._ring_permutations", "v1.all_reduce._build_ring_gather", "v1.all_reduce._strip_padding", "v1.all_reduce._build_ring_scatter", "<builtin>.ValueError", "v1.all_reduce._flatten_tensors", "v1.all_reduce._apply_unary_to_chunks"], "v1.all_reduce._build_ring_gather": ["<builtin>.len", "framework.ops.device", "<builtin>.range", "v1.all_reduce._padded_split", "<builtin>.ValueError"], "v1.all_reduce._apply_unary_to_chunks": ["framework.ops.colocate_with"], "v1.all_reduce._build_ring_scatter": ["<builtin>.len", "<builtin>.int", "<builtin>.range", "framework.ops.colocate_with", "ops.array_ops.concat", "ops.array_ops.identity", "<builtin>.ValueError"], "v1.all_reduce.build_recursive_hd_all_reduce": ["v1.all_reduce._reshape_tensors", "v1.all_reduce._build_recursive_hd_gather", "<builtin>.len", "v1.all_reduce._flatten_tensors", "v1.all_reduce._build_recursive_hd_scatter"], "v1.all_reduce._build_recursive_hd_gather": ["math.log", "<builtin>.len", "framework.ops.device", "ops.array_ops.split", "<builtin>.int", "<builtin>.range", "<builtin>.ValueError"], "v1.all_reduce._build_recursive_hd_scatter": ["math.log", "<builtin>.len", "framework.ops.device", "<builtin>.int", "<builtin>.reversed", "<builtin>.range", "ops.array_ops.concat"], "v1.all_reduce.build_shuffle_all_reduce": ["v1.all_reduce._build_shuffle_gather", "v1.all_reduce._reshape_tensors", "<builtin>.len", "v1.all_reduce._build_shuffle_scatter", "v1.all_reduce._flatten_tensors"], "v1.all_reduce._build_shuffle_gather": ["<builtin>.len", "framework.ops.device", "v1.all_reduce._ragged_split", "<builtin>.range", "framework.ops.colocate_with", "<builtin>.ValueError"], "v1.all_reduce._build_shuffle_scatter": ["<builtin>.len", "framework.ops.device", "ops.array_ops.concat", "<builtin>.range"], "v1.all_reduce._split_by_task": ["<builtin>.len", "<builtin>.range", "<builtin>.list", "collections.OrderedDict", "<builtin>.ValueError", "<builtin>.hasattr", "device.DeviceSpec.from_string"], "device.DeviceSpec.from_string": [], "v1.all_reduce.build_nccl_all_reduce": ["ops.nccl_ops.all_sum", "<builtin>.ValueError", "framework.ops.colocate_with"], "ops.nccl_ops.all_sum": ["ops.nccl_ops._apply_all_reduce"], "v1.all_reduce._build_nccl_hybrid": ["v1.all_reduce._reshape_tensors", "ops.nccl_ops.broadcast", "<builtin>.len", "framework.ops.device", "framework.ops.control_dependencies", "v1.all_reduce._split_by_task", "v1.all_reduce.build_nccl_all_reduce", "v1.all_reduce.build_nccl_then_ring.upper_level_f", "<builtin>.range", "v1.all_reduce.build_nccl_then_recursive_hd.<lambda1>", "ops.array_ops.identity", "v1.all_reduce._flatten_tensors", "v1.all_reduce.build_nccl_then_shuffle.upper_level_f"], "v1.all_reduce.build_nccl_then_shuffle.upper_level_f": ["v1.all_reduce.build_shuffle_all_reduce"], "v1.all_reduce.build_nccl_then_recursive_hd.<lambda1>": ["v1.all_reduce.build_recursive_hd_all_reduce"], "v1.all_reduce.build_nccl_then_ring.upper_level_f": ["v1.all_reduce._reduce_non_singleton"], "ops.nccl_ops.broadcast": ["ops.gen_nccl_ops.nccl_broadcast", "framework.ops.device", "ops.nccl_ops._check_device"], "v1.all_reduce._reduce_non_singleton": ["v1.all_reduce.build_shuffle_then_shuffle.upper_builder", "v1.all_reduce.build_shuffle_then_ring.upper_builder", "v1.all_reduce.build_nccl_then_ring.upper_builder", "<builtin>.len", "framework.ops.colocate_with"], "v1.all_reduce.build_shuffle_then_shuffle.upper_builder": ["v1.all_reduce.build_shuffle_all_reduce"], "v1.all_reduce.build_shuffle_then_ring.upper_builder": ["<builtin>.len", "v1.all_reduce.build_ring_all_reduce"], "v1.all_reduce.build_nccl_then_ring.upper_builder": ["<builtin>.len", "v1.all_reduce.build_ring_all_reduce"], "v1.all_reduce.build_nccl_then_ring": ["v1.all_reduce._build_nccl_hybrid"], "v1.all_reduce.build_nccl_then_recursive_hd": ["v1.all_reduce._build_nccl_hybrid"], "v1.all_reduce.build_nccl_then_shuffle": ["v1.all_reduce._build_nccl_hybrid"], "v1.all_reduce._build_shuffle_hybrid": ["v1.all_reduce._build_shuffle_gather", "v1.all_reduce._reshape_tensors", "<builtin>.len", "v1.all_reduce.build_shuffle_then_shuffle.upper_level_f", "v1.all_reduce._build_shuffle_scatter", "v1.all_reduce._split_by_task", "<builtin>.range", "v1.all_reduce.build_shuffle_then_ring.upper_level_f", "<builtin>.ValueError", "v1.all_reduce._flatten_tensors"], "v1.all_reduce.build_shuffle_then_ring.upper_level_f": ["v1.all_reduce._reduce_non_singleton"], "v1.all_reduce.build_shuffle_then_shuffle.upper_level_f": ["v1.all_reduce._reduce_non_singleton"], "v1.all_reduce.build_shuffle_then_ring": ["v1.all_reduce._build_shuffle_hybrid"], "v1.all_reduce.build_shuffle_then_shuffle": ["v1.all_reduce._build_shuffle_hybrid"], "canned.baseline": ["<builtin>.dir"], "canned.boosted_trees": ["<builtin>.dir"], "canned.boosted_trees_utils": ["<builtin>.dir"], "canned.dnn": ["<builtin>.dir"], "canned.dnn_linear_combined": ["<builtin>.dir"], "canned.head": ["<builtin>.dir"], "canned.linear": ["<builtin>.dir"], "canned.metric_keys": ["<builtin>.dir"], "canned.optimizers": ["<builtin>.dir"], "canned.parsing_utils": ["<builtin>.dir"], "canned.prediction_keys": ["<builtin>.dir"], "export.export": ["<builtin>.dir"], "export.export_lib": ["<builtin>.dir"], "export.export_output": ["<builtin>.dir"], "inputs.inputs": ["<builtin>.dir"], "inputs.numpy_io": ["<builtin>.dir"], "inputs.pandas_io": ["<builtin>.dir"], "adding_an_op.cuda_op": ["tensorflow.test.is_built_with_cuda", "tensorflow.load_op_library", "v1.resource_loader.get_data_files_path"], "tensorflow.test.is_built_with_cuda": [], "v1.resource_loader.get_data_files_path": [], "tensorflow.load_op_library": [], "adding_an_op.zero_out_grad_2": ["framework.ops.RegisterGradient"], "adding_an_op.zero_out_grad_2._zero_out_grad": ["ops.sparse_ops.sparse_to_dense", "ops.array_ops.zeros_like", "ops.array_ops.shape", "ops.array_ops.reshape"], "ops.sparse_ops.sparse_to_dense": ["ops.gen_sparse_ops.sparse_to_dense"], "adding_an_op.zero_out_op_1": ["tensorflow.load_op_library", "v1.resource_loader.get_data_files_path"], "adding_an_op.zero_out_op_2": ["tensorflow.load_op_library", "v1.resource_loader.get_data_files_path"], "adding_an_op.zero_out_op_3": ["v1.resource_loader.get_data_files_path", "tensorflow.load_op_library"], "customization.ops_defs": ["absl.app.run", "python.composite.Composite", "platform.flags.DEFINE_string", "platform.flags.DEFINE_bool"], "platform.flags.DEFINE_string": [], "platform.flags.DEFINE_bool": [], "python.composite.Composite": [], "customization.ops_defs._override_test_attr_op": ["ops.gen_array_ops.Const"], "ops.gen_array_ops.Const": [], "customization.ops_defs.main": ["python.tfr_gen.tfr_gen_from_module", "os.path.exists", "python.op_reg_gen.gen_register_op", "os.makedirs", "FLAGS.output.endswith", "<builtin>.open", "os.path.dirname"], "FLAGS.output.endswith": [], "python.op_reg_gen.gen_register_op": ["python.op_reg_gen.op_reg_gen", "util.tf_inspect.getmembers"], "python.tfr_gen.tfr_gen_from_module": ["python.tfr_gen.tfr_funcs_gen_from_module", "python.tfr_gen.OpDefCache.mlir_external_funcs"], "os.path.exists": [], "experimental_new_converter.stack_trace_example": ["absl.app.run", "experimental_new_converter.stack_trace_example.suppress_exception"], "experimental_new_converter.stack_trace_example.suppress_exception": [], "experimental_new_converter.stack_trace_example.suppress_exception.wrapped": ["experimental_new_converter.stack_trace_example.test_from_saved_model"], "experimental_new_converter.stack_trace_example.test_from_saved_model": ["tensorflow.saved_model.save", "lite.TFLiteConverter.from_saved_model", "tensorflow.saved_model.SaveOptions", "tensorflow.Module.__init__"], "tensorflow.function": [], "experimental_new_converter.stack_trace_example.TestModule": ["tensorflow.function"], "experimental_new_converter.stack_trace_example.TestModule.model": ["tensorflow.math.reciprocal"], "tensorflow.math.reciprocal": [], "tensorflow.Module.__init__": [], "tensorflow.saved_model.SaveOptions": [], "tensorflow.saved_model.save": [], "lite.TFLiteConverter.from_saved_model": [], "experimental_new_converter.stack_trace_example.test_from_concrete_function": ["tensorflow.TensorSpec", "lite.TFLiteConverter.from_concrete_functions", "tensorflow.function"], "tensorflow.TensorSpec": [], "experimental_new_converter.stack_trace_example.test_from_concrete_function.model": ["tensorflow.math.reciprocal"], "lite.TFLiteConverter.from_concrete_functions": [], "experimental_new_converter.stack_trace_example.main": ["absl.app.UsageError", "sys.stdout.write", "experimental_new_converter.stack_trace_example.test_from_concrete_function", "<builtin>.len", "experimental_new_converter.stack_trace_example.test_from_saved_model"], "sys.stdout.write": [], "label_image.label_image": ["label_image.label_image.load_labels", "compat.v1.Session", "numpy.squeeze", "argparse.ArgumentParser", "label_image.label_image.read_tensor_from_image_file", "<builtin>.print", "label_image.label_image.load_graph"], "label_image.label_image.load_graph": ["tensorflow.GraphDef", "tensorflow.import_graph_def", "<builtin>.open", "tensorflow.Graph"], "tensorflow.Graph": [], "tensorflow.GraphDef": [], "tensorflow.import_graph_def": [], "label_image.label_image.read_tensor_from_image_file": ["tensorflow.expand_dims", "tensorflow.io.decode_png", "compat.v1.Session", "tensorflow.subtract", "tensorflow.image.resize_bilinear", "tensorflow.io.decode_bmp", "tensorflow.io.decode_jpeg", "tensorflow.divide", "tensorflow.squeeze", "tensorflow.read_file", "tensorflow.io.decode_gif", "tensorflow.cast"], "tensorflow.read_file": [], "tensorflow.io.decode_png": [], "tensorflow.io.decode_gif": [], "tensorflow.squeeze": [], "tensorflow.io.decode_bmp": [], "tensorflow.io.decode_jpeg": [], "tensorflow.cast": [], "tensorflow.expand_dims": [], "tensorflow.image.resize_bilinear": [], "tensorflow.subtract": [], "tensorflow.divide": [], "compat.v1.Session": [], "label_image.label_image.load_labels": ["tensorflow.gfile.GFile"], "tensorflow.gfile.GFile": [], "numpy.squeeze": [], "mnist.mnist_train": ["os.path.basename", "os.path.dirname", "os.path.join", "framework.load_library.load_op_library", "absl.flags.DEFINE_integer"], "absl.flags.DEFINE_integer": [], "framework.load_library.load_op_library": ["client.pywrap_tf_session.TF_DeleteLibraryHandle", "client.pywrap_tf_session.TF_LoadLibrary", "client.pywrap_tf_session.TF_GetOpList", "hashlib.sha1", "<builtin>.setattr", "imp.new_module", "framework._pywrap_python_op_gen.GetPythonWrappers", "<builtin>.exec"], "mnist.mnist_train.FloatModel.__init__": ["tensorflow.Variable", "tensorflow.random.truncated_normal", "tensorflow.zeros"], "tensorflow.random.truncated_normal": [], "tensorflow.Variable": [], "tensorflow.zeros": [], "mnist.mnist_train.FloatModel": ["tensorflow.function"], "mnist.mnist_train.FloatModel.__call__": ["mnist.gen_mnist_ops.new_fully_connected", "mnist.gen_mnist_ops.new_conv2d", "tensorflow.reshape", "mnist.gen_mnist_ops.new_max_pool"], "tensorflow.reshape": [], "mnist.gen_mnist_ops.new_conv2d": [], "mnist.gen_mnist_ops.new_max_pool": [], "mnist.gen_mnist_ops.new_fully_connected": [], "mnist.mnist_train.main": ["tensorflow.print", "<builtin>.next", "tensorflow_datasets.load", "keras.optimizers.Adam", "<builtin>.range", "mnist.mnist_train.main.distributed_train_step", "<builtin>.iter", "mnist.mnist_train.FloatModel.__init__", "tensorflow.function"], "tensorflow_datasets.load": [], "keras.optimizers.Adam": [], "mnist.mnist_train.main.train_step": ["tensorflow.equal", "tensorflow.one_hot", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.argmax", "tensorflow.GradientTape", "<builtin>.zip", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.image.convert_image_dtype", "mnist.mnist_train.FloatModel.__init__"], "tensorflow.image.convert_image_dtype": [], "tensorflow.one_hot": [], "tensorflow.GradientTape": [], "tensorflow.nn.softmax_cross_entropy_with_logits": [], "tensorflow.reduce_mean": [], "tensorflow.argmax": [], "tensorflow.equal": [], "mnist.mnist_train.main.distributed_train_step": [], "tensorflow.print": [], "mnist.ops_defs": ["tensorflow.RegisterGradient", "absl.app.run", "python.composite.Composite", "platform.flags.DEFINE_bool", "platform.flags.DEFINE_string"], "mnist.ops_defs._composite_conv_add_relu": ["tensorflow.raw_ops.Tanh", "tensorflow.raw_ops.Add", "tensorflow.raw_ops.Conv2D", "tensorflow.raw_ops.Relu6", "tensorflow.raw_ops.Relu"], "tensorflow.raw_ops.Conv2D": [], "tensorflow.raw_ops.Add": [], "tensorflow.raw_ops.Relu": [], "tensorflow.raw_ops.Relu6": [], "tensorflow.raw_ops.Tanh": [], "tensorflow.RegisterGradient": [], "mnist.ops_defs._conv_add_relu_grad": ["tensorflow.reshape", "tensorflow.shape", "tensorflow.shape_n", "v1.nn.conv2d_backprop_input", "ops.gen_math_ops.tanh_grad", "ops.math_ops.conj", "ops.gen_nn_ops.relu_grad", "ops.gen_nn_ops.relu6_grad", "v1.nn.conv2d_backprop_filter", "tensorflow.reduce_sum", "tensorflow.raw_ops.BroadcastGradientArgs"], "ops.gen_nn_ops.relu_grad": [], "ops.gen_nn_ops.relu6_grad": [], "ops.math_ops.conj": ["<builtin>.TypeError", "<builtin>.isinstance", "ops.gen_math_ops.conj", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.gen_math_ops.tanh_grad": [], "tensorflow.shape": [], "tensorflow.raw_ops.BroadcastGradientArgs": [], "tensorflow.reduce_sum": [], "tensorflow.shape_n": [], "v1.nn.conv2d_backprop_input": [], "v1.nn.conv2d_backprop_filter": [], "mnist.ops_defs._composite_fully_connected": ["tensorflow.raw_ops.MatMul", "tensorflow.raw_ops.Tanh", "tensorflow.raw_ops.Add", "tensorflow.raw_ops.Relu6", "tensorflow.raw_ops.Relu"], "tensorflow.raw_ops.MatMul": [], "mnist.ops_defs._fully_connected_grad": ["tensorflow.reshape", "tensorflow.shape", "ops.gen_math_ops.mat_mul", "ops.gen_math_ops.tanh_grad", "ops.math_ops.conj", "ops.gen_nn_ops.relu_grad", "ops.gen_nn_ops.relu6_grad", "tensorflow.reduce_sum", "tensorflow.raw_ops.BroadcastGradientArgs"], "ops.gen_math_ops.mat_mul": [], "mnist.ops_defs._composite_max_pool": ["tensorflow.raw_ops.MaxPool"], "tensorflow.raw_ops.MaxPool": [], "mnist.ops_defs._max_pool_grad": ["tensorflow.raw_ops.MaxPoolGrad"], "tensorflow.raw_ops.MaxPoolGrad": [], "mnist.ops_defs.main": ["python.tfr_gen.tfr_gen_from_module", "os.path.dirname", "FLAGS.output.endswith", "os.path.exists", "<builtin>.open", "os.makedirs", "python.op_reg_gen.gen_register_op"], "pad.ops_defs": ["platform.flags.DEFINE_bool", "python.composite.Composite", "platform.flags.DEFINE_string", "tensorflow.RegisterGradient", "absl.app.run"], "pad.ops_defs._composite_mirror_pad": ["<builtin>.range", "tensorflow.raw_ops.Concat", "<builtin>.len", "tensorflow.raw_ops.GatherNd", "tensorflow.raw_ops.Reverse", "tensorflow.raw_ops.OneHot", "tensorflow.raw_ops.SplitV"], "tensorflow.raw_ops.OneHot": [], "tensorflow.raw_ops.Reverse": [], "tensorflow.raw_ops.GatherNd": [], "tensorflow.raw_ops.SplitV": [], "tensorflow.raw_ops.Concat": [], "pad.ops_defs._mirror_pad_grad": ["ops.gen_array_ops.mirror_pad_grad"], "ops.gen_array_ops.mirror_pad_grad": [], "pad.ops_defs._composite_mirror_pad_grad": ["<builtin>.range", "tensorflow.raw_ops.Concat", "<builtin>.len", "tensorflow.raw_ops.GatherNd", "tensorflow.raw_ops.Reverse", "tensorflow.raw_ops.OneHot", "tensorflow.raw_ops.ZerosLike", "tensorflow.raw_ops.AddN", "tensorflow.raw_ops.SplitV"], "tensorflow.raw_ops.ZerosLike": [], "tensorflow.raw_ops.AddN": [], "pad.ops_defs._mirror_pad_grad_grad": ["ops.gen_array_ops.mirror_pad"], "ops.gen_array_ops.mirror_pad": [], "pad.ops_defs.main": ["os.makedirs", "<builtin>.open", "os.path.dirname", "python.tfr_gen.tfr_gen_from_module", "os.path.exists", "FLAGS.output.endswith", "python.op_reg_gen.gen_register_op"], "python.label_image": ["tensorflow.lite.Interpreter", "python.label_image.load_labels", "<builtin>.print", "numpy.expand_dims", "numpy.float32", "time.time", "numpy.squeeze", "<builtin>.float", "argparse.ArgumentParser", "PIL.Image.open"], "python.label_image.load_labels": ["<builtin>.open"], "PIL.Image.open": [], "numpy.expand_dims": [], "numpy.float32": [], "speech_commands.accuracy_utils": [], "speech_commands.accuracy_utils.StreamingAccuracyStats.__init__": [], "speech_commands.accuracy_utils.StreamingAccuracyStats.read_ground_truth_file": ["<builtin>.open", "<builtin>.len", "<builtin>.float", "<builtin>.round", "<builtin>.sorted"], "<builtin>.round": [], "speech_commands.accuracy_utils.StreamingAccuracyStats.read_ground_truth_file.<lambda1>": [], "speech_commands.accuracy_utils.StreamingAccuracyStats.delta": ["<builtin>.ValueError"], "speech_commands.accuracy_utils.StreamingAccuracyStats.calculate_accuracy_stats": ["<builtin>.len"], "speech_commands.accuracy_utils.StreamingAccuracyStats.print_accuracy_stats": ["v1.logging.info"], "v1.logging.info": [], "speech_commands.freeze": ["argparse.ArgumentParser", "v1.app.run"], "speech_commands.freeze.create_inference_graph": ["tensorflow.expand_dims", "compat.v1.placeholder", "ops.audio_microfrontend_op.audio_microfrontend", "tensorflow.cast", "<builtin>.len", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.audio.decode_wav", "ops.gen_audio_ops.mfcc", "<builtin>.Exception", "ops.gen_audio_ops.audio_spectrogram", "models.create_model", "models.prepare_model_settings", "input_data.prepare_words_list", "tensorflow.multiply", "tensorflow.nn.pool"], "input_data.prepare_words_list": [], "models.prepare_model_settings": ["<builtin>.int", "<builtin>.ValueError", "math.ceil", "math.floor", "models._next_power_of_two"], "compat.v1.placeholder": [], "tensorflow.audio.decode_wav": [], "ops.gen_audio_ops.audio_spectrogram": [], "tensorflow.nn.pool": [], "ops.gen_audio_ops.mfcc": [], "<builtin>.Exception": [], "tensorflow.multiply": [], "ops.audio_microfrontend_op.audio_microfrontend": ["<builtin>.ValueError", "<builtin>.len", "ops.array_ops.reshape", "ops.gen_audio_microfrontend_op.audio_microfrontend"], "models.create_model": ["models.create_tiny_embedding_conv_model", "models.create_low_latency_conv_model", "models.create_low_latency_svdf_model", "<builtin>.Exception", "models.create_tiny_conv_model", "models.create_single_fc_model", "models.create_conv_model"], "tensorflow.nn.softmax": [], "speech_commands.freeze.save_graph_def": ["v1.logging.info", "tensorflow.io.write_graph"], "tensorflow.io.write_graph": [], "speech_commands.freeze.save_saved_model": ["saved_model.utils.build_tensor_info", "saved_model.builder.SavedModelBuilder", "saved_model.signature_def_utils.build_signature_def"], "saved_model.utils.build_tensor_info": [], "saved_model.signature_def_utils.build_signature_def": [], "speech_commands.freeze.main": ["speech_commands.freeze.create_inference_graph", "framework.graph_util.convert_variables_to_constants", "contrib.quantize.create_eval_graph", "<builtin>.Exception", "compat.v1.InteractiveSession", "speech_commands.freeze.save_saved_model", "models.load_variables_from_checkpoint", "speech_commands.freeze.save_graph_def"], "compat.v1.InteractiveSession": [], "contrib.quantize.create_eval_graph": [], "models.load_variables_from_checkpoint": ["v1.train.Saver", "compat.v1.global_variables"], "v1.app.run": [], "input_data": ["compat.v1.disable_eager_execution"], "compat.v1.disable_eager_execution": [], "input_data.which_set": ["<builtin>.int", "hashlib.sha1", "util.compat.as_bytes", "re.sub"], "hashlib.sha1": [], "input_data.load_wav_file": ["compat.v1.placeholder", "compat.v1.Session", "tensorflow.audio.decode_wav", "ops.io_ops.read_file", "tensorflow.Graph"], "ops.io_ops.read_file": ["ops.gen_io_ops.read_file"], "input_data.save_wav_file": ["tensorflow.audio.encode_wav", "compat.v1.placeholder", "compat.v1.Session", "ops.io_ops.write_file", "tensorflow.Graph"], "tensorflow.audio.encode_wav": [], "ops.io_ops.write_file": [], "input_data.get_features_range": ["<builtin>.Exception"], "input_data.AudioProcessor.__init__": ["input_data.AudioProcessor.prepare_data_index", "input_data.AudioProcessor.prepare_background_data", "input_data.AudioProcessor.maybe_download_and_extract_dataset", "input_data.AudioProcessor.prepare_processing_graph"], "input_data.AudioProcessor.maybe_download_and_extract_dataset": ["tarfile.open", "v1.logging.error", "platform.gfile.Exists", "urllib.request.urlretrieve", "v1.logging.info", "<builtin>.print"], "input_data.AudioProcessor.prepare_data_index": ["random.seed", "input_data.prepare_words_list", "<builtin>.enumerate", "<builtin>.int", "platform.gfile.Glob", "<builtin>.Exception", "input_data.which_set", "<builtin>.range", "math.ceil", "<builtin>.len", "random.shuffle"], "input_data.AudioProcessor.prepare_background_data": ["compat.v1.placeholder", "compat.v1.Session", "platform.gfile.Glob", "tensorflow.audio.decode_wav", "<builtin>.Exception", "platform.gfile.Exists", "ops.io_ops.read_file", "tensorflow.Graph"], "input_data.AudioProcessor.prepare_processing_graph": ["tensorflow.pad", "tensorflow.clip_by_value", "tensorflow.slice", "v1.summary.FileWriter", "tensorflow.cast", "ops.gen_audio_ops.audio_spectrogram", "tensorflow.multiply", "ops.io_ops.read_file", "tensorflow.expand_dims", "v1.summary.merge_all", "<builtin>.Exception", "compat.v1.get_default_graph", "compat.v1.placeholder", "ops.audio_microfrontend_op.audio_microfrontend", "tensorflow.audio.decode_wav", "tensorflow.add", "ops.gen_audio_ops.mfcc", "<builtin>.ValueError", "v1.summary.image", "tensorflow.nn.pool"], "AudioProcessor.maybe_download_and_extract_dataset._progress": ["sys.stdout.flush", "sys.stdout.write", "<builtin>.float"], "urllib.request.urlretrieve": [], "v1.logging.error": [], "tarfile.open": [], "random.seed": [], "math.ceil": [], "random.shuffle": [], "compat.v1.get_default_graph": [], "tensorflow.pad": [], "tensorflow.slice": [], "tensorflow.add": [], "tensorflow.clip_by_value": [], "v1.summary.image": [], "v1.summary.merge_all": [], "v1.summary.FileWriter": [], "input_data.AudioProcessor.set_size": ["<builtin>.len"], "input_data.AudioProcessor.get_data": ["<builtin>.min", "<builtin>.max", "six.moves.xrange", "numpy.random.randint", "<builtin>.ValueError", "numpy.zeros", "numpy.random.uniform", "<builtin>.len"], "numpy.random.randint": [], "numpy.random.uniform": [], "input_data.AudioProcessor.get_features_for_wav": ["numpy.zeros"], "input_data.AudioProcessor.get_unprocessed_data": ["compat.v1.placeholder", "compat.v1.Session", "numpy.random.randint", "tensorflow.audio.decode_wav", "numpy.zeros", "<builtin>.range", "<builtin>.len", "ops.io_ops.read_file", "tensorflow.multiply", "tensorflow.Graph"], "models": [], "models._next_power_of_two": ["<builtin>.int"], "math.floor": [], "models.create_single_fc_model": ["compat.v1.get_variable", "compat.v1.placeholder", "compat.v1.truncated_normal_initializer", "tensorflow.matmul"], "models.create_conv_model": ["compat.v1.get_variable", "compat.v1.placeholder", "tensorflow.nn.dropout", "<builtin>.int", "tensorflow.reshape", "compat.v1.truncated_normal_initializer", "tensorflow.nn.conv2d", "tensorflow.nn.max_pool2d", "tensorflow.matmul", "tensorflow.nn.relu"], "models.create_low_latency_conv_model": ["compat.v1.get_variable", "compat.v1.placeholder", "tensorflow.nn.dropout", "<builtin>.int", "tensorflow.reshape", "compat.v1.truncated_normal_initializer", "tensorflow.nn.conv2d", "tensorflow.matmul", "math.floor", "tensorflow.nn.relu"], "models.create_low_latency_svdf_model": ["compat.v1.get_variable", "tensorflow.nn.dropout", "tensorflow.nn.bias_add", "tensorflow.reshape", "tensorflow.matmul", "<builtin>.len", "<builtin>.int", "tensorflow.nn.conv1d", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.equal", "compat.v1.truncated_normal_initializer", "compat.v1.assign", "tensorflow.cond", "compat.v1.placeholder", "tensorflow.concat", "<builtin>.ValueError", "tensorflow.transpose", "tensorflow.nn.relu"], "models.create_tiny_conv_model": ["compat.v1.get_variable", "compat.v1.placeholder", "tensorflow.nn.dropout", "<builtin>.int", "tensorflow.reshape", "compat.v1.truncated_normal_initializer", "tensorflow.nn.conv2d", "tensorflow.matmul", "tensorflow.nn.relu"], "models.create_tiny_embedding_conv_model": ["compat.v1.get_variable", "compat.v1.placeholder", "tensorflow.nn.dropout", "<builtin>.int", "tensorflow.reshape", "compat.v1.truncated_normal_initializer", "tensorflow.nn.conv2d", "tensorflow.matmul", "tensorflow.nn.relu"], "compat.v1.global_variables": [], "v1.train.Saver": [], "compat.v1.truncated_normal_initializer": [], "compat.v1.get_variable": [], "tensorflow.matmul": [], "tensorflow.nn.conv2d": [], "tensorflow.nn.dropout": [], "tensorflow.nn.max_pool2d": [], "models.create_low_latency_svdf_model.<lambda1>": [], "models.create_low_latency_svdf_model.<lambda2>": ["<builtin>.int"], "tensorflow.cond": [], "tensorflow.nn.conv1d": [], "tensorflow.transpose": [], "tensorflow.concat": [], "compat.v1.assign": [], "tensorflow.nn.bias_add": [], "speech_commands.input_data": ["compat.v1.disable_eager_execution"], "speech_commands.input_data.prepare_words_list": [], "speech_commands.input_data.which_set": ["util.compat.as_bytes", "re.sub", "<builtin>.int", "hashlib.sha1"], "speech_commands.input_data.load_wav_file": ["ops.io_ops.read_file", "tensorflow.audio.decode_wav", "compat.v1.Session", "tensorflow.Graph", "compat.v1.placeholder"], "speech_commands.input_data.save_wav_file": ["tensorflow.audio.encode_wav", "compat.v1.Session", "tensorflow.Graph", "ops.io_ops.write_file", "compat.v1.placeholder"], "speech_commands.input_data.get_features_range": ["<builtin>.Exception"], "speech_commands.input_data.AudioProcessor.__init__": ["speech_commands.input_data.AudioProcessor.prepare_background_data", "speech_commands.input_data.AudioProcessor.maybe_download_and_extract_dataset", "speech_commands.input_data.AudioProcessor.prepare_data_index", "speech_commands.input_data.AudioProcessor.prepare_processing_graph"], "speech_commands.input_data.AudioProcessor.maybe_download_and_extract_dataset": ["v1.logging.error", "v1.logging.info", "platform.gfile.Exists", "<builtin>.print", "tarfile.open", "urllib.request.urlretrieve"], "speech_commands.input_data.AudioProcessor.prepare_data_index": ["random.shuffle", "<builtin>.range", "platform.gfile.Glob", "<builtin>.Exception", "random.seed", "<builtin>.len", "<builtin>.enumerate", "speech_commands.input_data.which_set", "speech_commands.input_data.prepare_words_list", "<builtin>.int", "math.ceil"], "speech_commands.input_data.AudioProcessor.prepare_background_data": ["ops.io_ops.read_file", "platform.gfile.Exists", "tensorflow.audio.decode_wav", "platform.gfile.Glob", "<builtin>.Exception", "compat.v1.Session", "tensorflow.Graph", "compat.v1.placeholder"], "speech_commands.input_data.AudioProcessor.prepare_processing_graph": ["ops.gen_audio_ops.mfcc", "tensorflow.slice", "tensorflow.clip_by_value", "v1.summary.merge_all", "tensorflow.audio.decode_wav", "<builtin>.Exception", "tensorflow.pad", "v1.summary.FileWriter", "compat.v1.placeholder", "compat.v1.get_default_graph", "ops.io_ops.read_file", "ops.gen_audio_ops.audio_spectrogram", "tensorflow.expand_dims", "tensorflow.add", "v1.summary.image", "tensorflow.multiply", "tensorflow.cast", "ops.audio_microfrontend_op.audio_microfrontend", "<builtin>.ValueError", "tensorflow.nn.pool"], "speech_commands.input_data.AudioProcessor.maybe_download_and_extract_dataset._progress": ["sys.stdout.write", "sys.stdout.flush", "<builtin>.float"], "speech_commands.input_data.AudioProcessor.set_size": ["<builtin>.len"], "speech_commands.input_data.AudioProcessor.get_data": ["numpy.zeros", "<builtin>.ValueError", "numpy.random.randint", "<builtin>.len", "six.moves.xrange", "numpy.random.uniform", "<builtin>.min", "<builtin>.max"], "speech_commands.input_data.AudioProcessor.get_features_for_wav": ["numpy.zeros"], "speech_commands.input_data.AudioProcessor.get_unprocessed_data": ["ops.io_ops.read_file", "numpy.zeros", "tensorflow.audio.decode_wav", "<builtin>.range", "numpy.random.randint", "<builtin>.len", "compat.v1.Session", "tensorflow.Graph", "tensorflow.multiply", "compat.v1.placeholder"], "speech_commands.label_wav": ["v1.app.run", "argparse.ArgumentParser"], "speech_commands.label_wav.load_graph": ["io.gfile.GFile", "tensorflow.import_graph_def", "compat.v1.GraphDef"], "io.gfile.GFile": [], "compat.v1.GraphDef": [], "speech_commands.label_wav.load_labels": ["io.gfile.GFile"], "speech_commands.label_wav.run_graph": ["compat.v1.Session", "<builtin>.print"], "speech_commands.label_wav.label_wav": ["<builtin>.open", "speech_commands.label_wav.load_graph", "speech_commands.label_wav.run_graph", "io.gfile.exists", "speech_commands.label_wav.load_labels", "<builtin>.ValueError"], "io.gfile.exists": [], "speech_commands.label_wav.main": ["speech_commands.label_wav.label_wav"], "speech_commands.label_wav_dir": ["v1.app.run", "argparse.ArgumentParser"], "speech_commands.label_wav_dir.load_graph": ["io.gfile.GFile", "compat.v1.GraphDef", "tensorflow.import_graph_def"], "speech_commands.label_wav_dir.load_labels": ["io.gfile.GFile"], "speech_commands.label_wav_dir.run_graph": ["compat.v1.Session", "glob.glob", "io.gfile.exists", "<builtin>.print", "<builtin>.open", "<builtin>.ValueError"], "speech_commands.label_wav_dir.label_wav": ["io.gfile.exists", "<builtin>.ValueError", "speech_commands.label_wav_dir.load_graph", "speech_commands.label_wav_dir.run_graph", "speech_commands.label_wav_dir.load_labels"], "speech_commands.label_wav_dir.main": ["speech_commands.label_wav_dir.label_wav"], "speech_commands.models": [], "speech_commands.models._next_power_of_two": ["<builtin>.int"], "speech_commands.models.prepare_model_settings": ["math.floor", "<builtin>.ValueError", "math.ceil", "<builtin>.int", "speech_commands.models._next_power_of_two"], "speech_commands.models.create_model": ["speech_commands.models.create_low_latency_conv_model", "speech_commands.models.create_single_fc_model", "speech_commands.models.create_conv_model", "<builtin>.Exception", "speech_commands.models.create_low_latency_svdf_model", "speech_commands.models.create_tiny_embedding_conv_model", "speech_commands.models.create_tiny_conv_model"], "speech_commands.models.create_single_fc_model": ["compat.v1.get_variable", "tensorflow.matmul", "compat.v1.truncated_normal_initializer", "compat.v1.placeholder"], "speech_commands.models.create_conv_model": ["compat.v1.get_variable", "tensorflow.nn.dropout", "tensorflow.reshape", "compat.v1.truncated_normal_initializer", "compat.v1.placeholder", "tensorflow.nn.max_pool2d", "tensorflow.nn.relu", "tensorflow.matmul", "<builtin>.int", "tensorflow.nn.conv2d"], "speech_commands.models.create_low_latency_conv_model": ["compat.v1.get_variable", "tensorflow.nn.dropout", "tensorflow.reshape", "compat.v1.truncated_normal_initializer", "math.floor", "compat.v1.placeholder", "tensorflow.nn.relu", "tensorflow.matmul", "<builtin>.int", "tensorflow.nn.conv2d"], "speech_commands.models.create_low_latency_svdf_model": ["tensorflow.equal", "tensorflow.nn.dropout", "tensorflow.matmul", "<builtin>.int", "compat.v1.get_variable", "<builtin>.len", "tensorflow.transpose", "<builtin>.ValueError", "compat.v1.truncated_normal_initializer", "tensorflow.nn.conv1d", "compat.v1.placeholder", "tensorflow.nn.relu", "tensorflow.nn.bias_add", "tensorflow.reshape", "tensorflow.concat", "compat.v1.assign", "tensorflow.cond", "tensorflow.reduce_sum", "tensorflow.expand_dims"], "speech_commands.models.create_tiny_conv_model": ["compat.v1.get_variable", "tensorflow.nn.dropout", "tensorflow.reshape", "compat.v1.truncated_normal_initializer", "compat.v1.placeholder", "tensorflow.nn.relu", "tensorflow.matmul", "<builtin>.int", "tensorflow.nn.conv2d"], "speech_commands.models.create_tiny_embedding_conv_model": ["compat.v1.get_variable", "tensorflow.nn.dropout", "tensorflow.reshape", "compat.v1.truncated_normal_initializer", "compat.v1.placeholder", "tensorflow.nn.relu", "tensorflow.matmul", "<builtin>.int", "tensorflow.nn.conv2d"], "speech_commands.models.load_variables_from_checkpoint": ["v1.train.Saver", "compat.v1.global_variables"], "speech_commands.models.create_low_latency_svdf_model.<lambda1>": [], "speech_commands.models.create_low_latency_svdf_model.<lambda2>": ["<builtin>.int"], "speech_commands.recognize_commands": [], "speech_commands.recognize_commands.RecognizeResult.__init__": [], "speech_commands.recognize_commands.RecognizeResult.founded_command": [], "speech_commands.recognize_commands.RecognizeResult.score": [], "speech_commands.recognize_commands.RecognizeResult.is_new_command": [], "speech_commands.recognize_commands.RecognizeCommands.__init__": ["<builtin>.len", "collections.deque"], "collections.deque": [], "speech_commands.recognize_commands.RecognizeCommands.process_latest_result": ["<builtin>.range", "<builtin>.sorted", "numpy.zeros", "<builtin>.ValueError"], "speech_commands.recognize_commands.RecognizeCommands.process_latest_result.<lambda1>": [], "speech_commands.train": ["argparse.ArgumentParser", "v1.app.run"], "speech_commands.train.main": ["v1.logging.set_verbosity", "input_data.AudioProcessor.__init__", "v1.train.get_or_create_global_step", "input_data.AudioProcessor.get_data", "v1.summary.scalar", "v1.logging.warn", "v1.logging.info", "compat.v1.global_variables", "v1.train.Saver", "v1.summary.merge_all", "compat.v1.placeholder", "tensorflow.equal", "<builtin>.min", "models.prepare_model_settings", "<builtin>.Exception", "compat.v1.InteractiveSession", "v1.summary.FileWriter", "v1.losses.sparse_softmax_cross_entropy", "tensorflow.quantization.fake_quant_with_min_max_args", "v1.train.GradientDescentOptimizer", "platform.gfile.GFile", "tensorflow.io.write_graph", "compat.v1.add_check_numerics_ops", "contrib.quantize.create_training_graph", "tensorflow.math.confusion_matrix", "<builtin>.list", "tensorflow.cast", "models.load_variables_from_checkpoint", "six.moves.xrange", "v1.logging.debug", "numpy.sum", "tensorflow.argmax", "compat.v1.name_scope", "<builtin>.len", "compat.v1.global_variables_initializer", "<builtin>.int", "tensorflow.reduce_mean", "input_data.AudioProcessor.set_size", "input_data.prepare_words_list", "compat.v1.assign", "compat.v1.get_default_graph", "tensorflow.control_dependencies", "<builtin>.map", "models.create_model", "input_data.get_features_range", "<builtin>.range", "v1.train.MomentumOptimizer"], "v1.logging.set_verbosity": [], "tensorflow.quantization.fake_quant_with_min_max_args": [], "compat.v1.add_check_numerics_ops": [], "compat.v1.name_scope": [], "v1.losses.sparse_softmax_cross_entropy": [], "contrib.quantize.create_training_graph": [], "tensorflow.control_dependencies": [], "v1.train.GradientDescentOptimizer": [], "v1.train.MomentumOptimizer": [], "tensorflow.math.confusion_matrix": [], "v1.summary.scalar": [], "v1.train.get_or_create_global_step": [], "compat.v1.global_variables_initializer": [], "platform.gfile.GFile": [], "v1.logging.debug": [], "v1.logging.warn": [], "speech_commands.train.verbosity_arg": ["argparse.ArgumentTypeError"], "argparse.ArgumentTypeError": [], "speech_commands.wav_to_features": ["argparse.ArgumentParser", "v1.app.run"], "speech_commands.wav_to_features.wav_to_features": ["platform.gfile.GFile", "compat.v1.InteractiveSession", "models.prepare_model_settings", "<builtin>.round", "<builtin>.int", "input_data.AudioProcessor.get_features_for_wav", "input_data.get_features_range", "input_data.AudioProcessor.__init__"], "speech_commands.wav_to_features.main": ["v1.logging.set_verbosity", "v1.logging.info", "speech_commands.wav_to_features.wav_to_features"], "v1.debug_errors": ["v1.app.run", "argparse.ArgumentParser", "compat.v1.Graph"], "v1.debug_errors.main": ["tempfile.mktemp", "compat.v1.matmul", "<builtin>.ValueError", "numpy.array", "compat.v1.Session", "python.debug.LocalCLIDebugWrapperSession", "compat.v1.Variable", "compat.v1.constant", "compat.v1.placeholder", "<builtin>.print", "compat.v1.transpose"], "compat.v1.transpose": [], "compat.v1.Variable": [], "compat.v1.constant": [], "compat.v1.matmul": [], "python.debug.LocalCLIDebugWrapperSession": [], "v1.debug_errors.<lambda1>": [], "compat.v1.Graph": [], "v1.debug_fibonacci": ["argparse.ArgumentParser", "v1.app.run", "compat.v1.Graph"], "v1.debug_fibonacci.main": ["python.debug.TensorBoardDebugWrapperSession", "<builtin>.print", "six.moves.xrange", "<builtin>.ValueError", "compat.v1.Variable", "compat.v1.Session", "python.debug.LocalCLIDebugWrapperSession", "compat.v1.add", "numpy.ones", "compat.v1.global_variables_initializer"], "numpy.ones": [], "compat.v1.add": [], "v1.debug_fibonacci.main.has_negative": ["numpy.any"], "python.debug.TensorBoardDebugWrapperSession": [], "v1.debug_fibonacci.<lambda1>": [], "v1.debug_keras": ["v1.app.run", "compat.v1.Graph", "argparse.ArgumentParser"], "v1.debug_keras.main": ["<builtin>.int", "compat.v1.Session", "data.Dataset.from_tensor_slices", "keras.layers.Dense", "v1.keras.Sequential", "tempfile.mktemp", "numpy.zeros", "python.debug.TensorBoardDebugWrapperSession", "keras.backend.set_session", "python.debug.LocalCLIDebugWrapperSession"], "data.Dataset.from_tensor_slices": [], "keras.backend.set_session": [], "v1.keras.Sequential": [], "v1.debug_keras.<lambda1>": [], "v1.debug_mnist_v1": ["v1.debug_mnist_v1.parse_args", "v1.app.run", "compat.v1.Graph"], "v1.debug_mnist_v1.parse_args": ["argparse.ArgumentParser"], "v1.debug_mnist_v1.parse_args.<lambda1>": [], "v1.debug_mnist_v1.main": ["<builtin>.ValueError", "compat.v1.name_scope", "compat.v1.log", "<builtin>.print", "v1.debug_mnist_v1.main.nn_layer", "v1.random.uniform", "compat.v1.InteractiveSession", "compat.v1.equal", "data.Iterator.from_string_handle", "compat.v1.argmax", "<builtin>.range", "datasets.mnist.load_data", "compat.v1.placeholder", "compat.v1.reduce_mean", "data.Dataset.from_tensor_slices", "compat.v1.cast", "v1.nn.softmax", "data.Dataset.from_tensors", "python.debug.TensorBoardDebugWrapperSession", "tempfile.mktemp", "v1.train.AdamOptimizer", "compat.v1.global_variables_initializer", "python.debug.LocalCLIDebugWrapperSession"], "v1.random.uniform": [], "datasets.mnist.load_data": ["numpy.load", "utils.data_utils.get_file"], "v1.debug_mnist_v1.main.format_example": ["compat.v1.reshape", "compat.v1.cast", "compat.v1.one_hot"], "compat.v1.reshape": [], "compat.v1.cast": [], "compat.v1.one_hot": [], "data.Dataset.from_tensors": [], "data.Iterator.from_string_handle": [], "v1.debug_mnist_v1.main.weight_variable": ["compat.v1.Variable", "compat.v1.truncated_normal"], "compat.v1.truncated_normal": [], "v1.debug_mnist_v1.main.bias_variable": ["compat.v1.constant", "compat.v1.Variable"], "v1.debug_mnist_v1.main.nn_layer": ["compat.v1.name_scope", "v1.debug_mnist_v1.main.bias_variable", "compat.v1.identity", "compat.v1.matmul", "v1.debug_mnist_v1.main.weight_variable"], "compat.v1.identity": [], "v1.nn.softmax": [], "compat.v1.log": [], "compat.v1.reduce_mean": [], "v1.train.AdamOptimizer": [], "compat.v1.argmax": [], "compat.v1.equal": [], "v1.debug_tflearn_iris": ["v1.app.run", "argparse.ArgumentParser"], "v1.debug_tflearn_iris.main": ["python.debug.TensorBoardDebugHook", "python.debug.LocalCLIDebugHook", "<builtin>.print", "tempfile.mkdtemp", "v1.feature_column.numeric_column", "v1.estimator.DNNClassifier", "<builtin>.next", "<builtin>.ValueError", "tempfile.mktemp"], "v1.debug_tflearn_iris.main.training_input_fn": ["compat.v1.random_uniform", "compat.v1.random_normal"], "compat.v1.random_normal": [], "compat.v1.random_uniform": [], "v1.debug_tflearn_iris.main.test_input_fn": ["compat.v1.random_uniform", "compat.v1.random_normal"], "v1.feature_column.numeric_column": [], "v1.estimator.DNNClassifier": [], "python.debug.LocalCLIDebugHook": [], "python.debug.TensorBoardDebugHook": [], "v1.debug_tflearn_iris.<lambda1>": [], "v2.debug_fibonacci_v2": ["absl.app.run", "compat.v1.enable_v2_behavior", "argparse.ArgumentParser"], "compat.v1.enable_v2_behavior": [], "v2.debug_fibonacci_v2.main": ["numpy.ones", "compat.v2.constant", "<builtin>.ValueError", "<builtin>.print", "compat.v2.add", "<builtin>.NotImplementedError", "six.moves.xrange"], "compat.v2.constant": [], "compat.v2.add": [], "v2.debug_fibonacci_v2.<lambda1>": [], "v2.debug_mnist_v2": ["v2.debug_mnist_v2.parse_args", "compat.v1.enable_v2_behavior", "absl.app.run"], "v2.debug_mnist_v2.parse_args": ["argparse.ArgumentParser"], "v2.debug_mnist_v2.parse_args.<lambda1>": [], "v2.debug_mnist_v2.main": ["<builtin>.range", "<builtin>.len", "v2.optimizers.Adam", "compat.v2.function", "compat.v2.cast", "<builtin>.next", "v2.debug_mnist_v2.main.get_dense_weights", "<builtin>.ValueError", "<builtin>.zip", "<builtin>.print", "datasets.mnist.load_data", "v2.debug_mnist_v2.main.model", "compat.v2.GradientTape", "compat.v2.reduce_mean", "v2.random.uniform", "v2.debugging.enable_check_numerics", "compat.v2.equal", "<builtin>.iter", "compat.v2.argmax", "v2.debug_mnist_v2.main.loss", "data.Dataset.from_tensor_slices", "debugging.experimental.enable_dump_debug_info"], "v2.debugging.enable_check_numerics": [], "debugging.experimental.enable_dump_debug_info": [], "v2.random.uniform": [], "compat.v2.function": [], "v2.debug_mnist_v2.main.format_example": ["compat.v2.reshape", "compat.v2.one_hot", "compat.v2.cast"], "compat.v2.reshape": [], "compat.v2.cast": [], "compat.v2.one_hot": [], "v2.debug_mnist_v2.main.get_dense_weights": ["compat.v2.Variable", "compat.v2.constant", "keras.initializers.TruncatedNormal"], "keras.initializers.TruncatedNormal": [], "compat.v2.Variable": [], "v2.debug_mnist_v2.main.dense_layer": ["compat.v2.matmul", "compat.v2.identity"], "compat.v2.matmul": [], "compat.v2.identity": [], "v2.debug_mnist_v2.main.model": ["v2.debug_mnist_v2.main.dense_layer", "v2.nn.softmax"], "v2.nn.softmax": [], "v2.debug_mnist_v2.main.loss": ["v2.math.log", "compat.v2.reduce_mean"], "v2.math.log": [], "compat.v2.reduce_mean": [], "v2.optimizers.Adam": [], "compat.v2.GradientTape": [], "compat.v2.argmax": [], "compat.v2.equal": [], "benchmarks.autotune_benchmark": ["benchmark_base.test.main"], "benchmarks.autotune_benchmark.AutotuneBenchmark._run_benchmark": ["ops.options.Options", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark"], "benchmarks.autotune_benchmark.AutotuneBenchmark.benchmark_batch": ["<builtin>.print", "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_batch"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_batch": ["dataset_ops.Dataset.from_tensors", "benchmarks.autotune_benchmark.AutotuneBenchmark._run_benchmark", "numpy.random.rand"], "benchmarks.autotune_benchmark.AutotuneBenchmark.benchmark_map": ["benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map", "<builtin>.print"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map": ["dataset_ops.Dataset.from_tensors", "benchmarks.autotune_benchmark.AutotuneBenchmark._run_benchmark", "numpy.random.rand"], "benchmarks.autotune_benchmark.AutotuneBenchmark.benchmark_map_and_batch": ["<builtin>.print", "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_and_batch"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_and_batch": ["dataset_ops.Dataset.from_tensors", "benchmarks.autotune_benchmark.AutotuneBenchmark._run_benchmark", "numpy.random.rand"], "benchmarks.autotune_benchmark.AutotuneBenchmark.benchmark_interleave": ["<builtin>.print", "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_interleave"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_interleave": ["dataset_ops.Dataset.from_tensors", "benchmarks.autotune_benchmark.AutotuneBenchmark._run_benchmark", "dataset_ops.Dataset.range", "numpy.random.rand"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_interleave.<lambda1>": [], "benchmarks.autotune_benchmark.AutotuneBenchmark.benchmark_map_and_interleave": ["benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_and_interleave", "<builtin>.print"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_and_interleave": ["dataset_ops.Dataset.zip", "dataset_ops.Dataset.range", "numpy.random.rand", "dataset_ops.Dataset.from_tensors", "benchmarks.autotune_benchmark.AutotuneBenchmark._run_benchmark"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_and_interleave.f1": ["ops.math_ops.matmul"], "ops.math_ops.matmul": ["ops.math_ops.cast", "<builtin>.len", "eager.context.executing_eagerly", "ops.math_ops.conj", "ops.gen_math_ops.mat_mul", "<builtin>.ValueError", "ops.gen_math_ops.batch_mat_mul_v3", "ops.gen_math_ops.batch_mat_mul_v2", "<builtin>.isinstance", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_and_interleave.f2": ["ops.math_ops.matmul"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_and_interleave.<lambda1>": [], "dataset_ops.Dataset.zip": [], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_and_interleave.<lambda2>": [], "benchmarks.autotune_benchmark.AutotuneBenchmark.benchmark_map_batch_and_interleave": ["benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_batch_and_interleave", "<builtin>.print"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_batch_and_interleave": ["dataset_ops.Dataset.zip", "dataset_ops.Dataset.range", "numpy.random.rand", "dataset_ops.Dataset.from_tensors", "benchmarks.autotune_benchmark.AutotuneBenchmark._run_benchmark"], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_batch_and_interleave.<lambda1>": [], "benchmarks.autotune_benchmark.AutotuneBenchmark._benchmark_map_batch_and_interleave.<lambda2>": [], "benchmarks.csv_dataset_benchmark": ["benchmark_base.test.main"], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._set_up": ["platform.gfile.MakeDirs", "tempfile.mkdtemp", "<builtin>.range", "platform.googletest.GetTempDir", "os.path.join", "<builtin>.open"], "platform.googletest.GetTempDir": [], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._tear_down": ["platform.gfile.DeleteRecursively"], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._run_benchmark": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark"], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark.benchmark_map_with_floats": ["<builtin>.len", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._tear_down", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._set_up", "<builtin>.range", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._run_benchmark", "ops.readers.TextLineDataset"], "ops.readers.TextLineDataset": [], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark.benchmark_map_with_floats.<lambda1>": ["ops.parsing_ops.decode_csv"], "ops.parsing_ops.decode_csv": ["ops.parsing_ops.decode_csv_v2"], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark.benchmark_map_with_strings": ["<builtin>.len", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._tear_down", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._set_up", "<builtin>.range", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._run_benchmark", "ops.readers.TextLineDataset"], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark.benchmark_map_with_strings.<lambda1>": ["ops.parsing_ops.decode_csv"], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark.benchmark_csv_dataset_with_floats": ["<builtin>.len", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._run_benchmark", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._tear_down", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._set_up", "<builtin>.range", "ops.readers.CsvDataset", "ops.readers.TextLineDataset"], "ops.readers.CsvDataset": [], "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark.benchmark_csv_dataset_with_strings": ["<builtin>.len", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._run_benchmark", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._tear_down", "benchmarks.csv_dataset_benchmark.CsvDatasetBenchmark._set_up", "<builtin>.range", "ops.readers.CsvDataset", "ops.readers.TextLineDataset"], "benchmarks.map_and_batch_benchmark": ["benchmark_base.test.main"], "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark.benchmark_map_and_batch": ["ops.options.Options", "numpy.prod", "ops.batching.map_and_batch", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.range", "<builtin>.str", "ops.random_ops.random_normal"], "ops.random_ops.random_normal": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.math_ops.add", "ops.gen_random_ops.random_standard_normal", "framework.tensor_util.shape_tensor", "framework.random_seed.get_seed", "framework.tensor_util.maybe_set_static_shape"], "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark.benchmark_map_and_batch.<lambda1>": [], "ops.batching.map_and_batch": ["<builtin>.ValueError"], "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series": ["protobuf.config_pb2.ConfigProto", "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series.make_name", "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series.make_dataset", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series.compute_num_iters"], "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series.compute_num_iters": ["<builtin>.min"], "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series.make_dataset": ["dataset_ops.Dataset.range", "ops.options.Options", "framework.constant_op.constant", "numpy.random.rand"], "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series.make_dataset.<lambda1>": [], "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series.make_name": ["<builtin>.str", "hashlib.sha1"], "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark.benchmark_map_and_batch_chaining_versus_fusing": ["numpy.random.seed", "itertools.product", "benchmarks.map_and_batch_benchmark.MapAndBatchBenchmark._benchmark_series"], "itertools.product": [], "numpy.random.seed": [], "benchmarks.map_defun_benchmark": ["benchmark_base.test.main"], "benchmarks.map_defun_benchmark.MapDefunBenchmark._run": ["<builtin>.float", "benchmark_base.DatasetBenchmarkBase.run_op_benchmark", "benchmark_base.DatasetBenchmarkBase.report_benchmark"], "benchmark_base.DatasetBenchmarkBase.run_op_benchmark": [], "benchmark_base.DatasetBenchmarkBase.report_benchmark": [], "benchmarks.map_defun_benchmark.MapDefunBenchmark.benchmark_defun_vs_map_fn": ["ops.math_ops.range", "eager.function.defun", "benchmarks.map_defun_benchmark.MapDefunBenchmark._run", "ops.map_fn.map_fn", "ops.map_defun.map_defun"], "benchmarks.map_defun_benchmark.MapDefunBenchmark.benchmark_defun_vs_map_fn.defun": ["ops.array_ops.identity"], "benchmarks.map_defun_benchmark.MapDefunBenchmark.benchmark_defun_vs_map_fn.fn": ["ops.array_ops.identity"], "ops.map_defun.map_defun": ["ops.gen_dataset_ops.map_defun", "framework.tensor_shape.TensorShape", "<builtin>.isinstance", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "benchmarks.matching_files_benchmark": ["benchmark_base.test.main"], "benchmarks.matching_files_benchmark.MatchingFilesBenchmark.benchmark_nested_directories": ["<builtin>.range", "os.path.join", "<builtin>.open", "tempfile.mkdtemp", "ops.matching_files.MatchingFilesDataset", "shutil.rmtree", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "os.makedirs", "<builtin>.str"], "ops.matching_files.MatchingFilesDataset": [], "benchmarks.optimize_benchmark": ["benchmark_base.test.main"], "benchmarks.optimize_benchmark.OptimizationBenchmark.benchmark_map_fusion": ["benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_map_fusion"], "benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_map_fusion": ["dataset_ops.Dataset.from_tensors", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "<builtin>.range", "ops.options.Options"], "benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_map_fusion.<lambda1>": [], "benchmarks.optimize_benchmark.OptimizationBenchmark.benchmark_map_and_filter_fusion": ["benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_map_and_filter_fusion"], "benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_map_and_filter_fusion": ["dataset_ops.Dataset.from_tensors", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "<builtin>.range", "ops.options.Options"], "benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_map_and_filter_fusion.<lambda1>": ["ops.math_ops.greater_equal"], "ops.math_ops.greater_equal": [], "benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_map_and_filter_fusion.<lambda2>": [], "benchmarks.optimize_benchmark.OptimizationBenchmark.benchmark_filter_fusion": ["benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_filter_fusion"], "benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_filter_fusion": ["dataset_ops.Dataset.from_tensors", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "<builtin>.range", "ops.options.Options"], "benchmarks.optimize_benchmark.OptimizationBenchmark._benchmark_filter_fusion.<lambda1>": ["ops.math_ops.greater_equal"], "benchmarks.parameter_value_benchmark": ["benchmark_base.test.main"], "benchmarks.parameter_value_benchmark.sleep_function": ["time.sleep", "numpy.random.uniform"], "benchmarks.parameter_value_benchmark.map_function": ["ops.script_ops.py_func"], "ops.script_ops.py_func": ["ops.script_ops.py_func_common"], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark._benchmark_map": ["<builtin>.int", "ops.testing.sleep", "numpy.random.rand", "dataset_ops.Dataset.from_tensors", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark"], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark.benchmark_map": ["benchmarks.parameter_value_benchmark.ParameterValueBenchmark._benchmark_map", "<builtin>.print"], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark.benchmark_map.<lambda1>": [], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark._benchmark_map_and_batch": ["<builtin>.int", "ops.testing.sleep", "numpy.random.rand", "dataset_ops.Dataset.from_tensors", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark"], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark.benchmark_map_and_batch": ["benchmarks.parameter_value_benchmark.ParameterValueBenchmark._benchmark_map_and_batch", "<builtin>.print"], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark.benchmark_map_and_batch.<lambda1>": [], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark._benchmark_interleave": ["<builtin>.int", "ops.testing.sleep", "dataset_ops.Dataset.range", "numpy.random.rand", "dataset_ops.Dataset.from_tensors", "benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark"], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark._benchmark_interleave.<lambda1>": [], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark.benchmark_interleave": ["benchmarks.parameter_value_benchmark.ParameterValueBenchmark._benchmark_interleave", "<builtin>.print"], "benchmarks.parameter_value_benchmark.ParameterValueBenchmark.benchmark_interleave.<lambda1>": [], "benchmarks.rejection_resample_benchmark": ["benchmark_base.test.main"], "benchmarks.rejection_resample_benchmark.RejectionResampleBenchmark.benchmark_resample_performance": ["numpy.random.choice", "benchmark_base.DatasetBenchmarkBase.run_benchmark", "dataset_ops.Dataset.from_tensor_slices", "benchmark_base.DatasetBenchmarkBase.report_benchmark", "<builtin>.len", "ops.options.Options", "ops.resampling.rejection_resample"], "numpy.random.choice": [], "benchmarks.rejection_resample_benchmark.RejectionResampleBenchmark.benchmark_resample_performance.<lambda1>": [], "ops.resampling.rejection_resample": [], "benchmark_base.DatasetBenchmarkBase.run_benchmark": [], "benchmarks.snapshot_dataset_benchmark": ["benchmark_base.test.main"], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._makeSnapshotDirectory": ["os.path.exists", "os.mkdir", "os.path.join", "shutil.rmtree", "platform.test.get_temp_dir"], "os.mkdir": [], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset": ["dataset_ops.Dataset.from_tensor_slices", "ops.snapshot.legacy_snapshot", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._makeSnapshotDirectory"], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset.<lambda1>": ["ops.gen_array_ops.broadcast_to"], "ops.gen_array_ops.broadcast_to": [], "ops.snapshot.legacy_snapshot": [], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark.benchmarkWriteSnapshotGzipCompression": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset"], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark.benchmarkWriteSnapshotSnappyCompression": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset"], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark.benchmarkWriteSnapshotSimple": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset"], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark.benchmarkPassthroughSnapshotSimple": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "benchmark_base.DatasetBenchmarkBase.run_benchmark", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._makeSnapshotDirectory", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset"], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark.benchmarkReadSnapshotSimple": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "benchmark_base.DatasetBenchmarkBase.run_benchmark", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._makeSnapshotDirectory", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset"], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark.benchmarkReadSnapshotGzipCompression": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "benchmark_base.DatasetBenchmarkBase.run_benchmark", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._makeSnapshotDirectory", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset"], "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark.benchmarkReadSnapshotSnappyCompression": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "benchmark_base.DatasetBenchmarkBase.run_benchmark", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._makeSnapshotDirectory", "benchmarks.snapshot_dataset_benchmark.SnapshotDatasetBenchmark._createSimpleDataset"], "benchmarks.unbatch_benchmark": ["benchmark_base.test.main"], "benchmarks.unbatch_benchmark.UnbatchBenchmark.benchmark_native_unbatch": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.from_tensors"], "benchmarks.unbatch_benchmark.UnbatchBenchmark.benchmark_old_unbatch_implementation": ["benchmark_base.DatasetBenchmarkBase.run_and_report_benchmark", "dataset_ops.Dataset.from_tensors"], "ops.batching": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "ops.batching.dense_to_ragged_batch": [], "ops.batching.dense_to_ragged_batch._apply_fn": ["ops.dataset_ops.BatchDataset", "ops.batching._DenseToRaggedDataset.__init__"], "ops.batching._DenseToRaggedDataset.__init__": ["util.nest.map_structure", "ops.dataset_ops._should_unpack", "<builtin>.super"], "ops.dataset_ops.BatchDataset": [], "ops.batching.dense_to_sparse_batch": [], "ops.batching.dense_to_sparse_batch._apply_fn": ["ops.batching._DenseToSparseBatchDataset.__init__"], "ops.batching._DenseToSparseBatchDataset.__init__": ["<builtin>.super", "<builtin>.TypeError", "ops.gen_experimental_dataset_ops.dense_to_sparse_batch_dataset", "framework.tensor_shape.TensorShape", "ops.dataset_ops.get_legacy_output_types", "framework.sparse_tensor.SparseTensorSpec", "util.convert.partial_shape_to_tensor", "<builtin>.isinstance"], "ops.batching.map_and_batch_with_legacy_function": ["<builtin>.ValueError"], "ops.batching.map_and_batch_with_legacy_function._apply_fn": ["ops.batching._MapAndBatchDataset.__init__"], "ops.batching._MapAndBatchDataset.__init__": ["framework.tensor_util.constant_value", "<builtin>.super", "util.nest.map_structure", "ops.dataset_ops.StructuredFunctionWrapper", "ops.gen_experimental_dataset_ops.map_and_batch_dataset", "framework.ops.convert_to_tensor"], "ops.batching.map_and_batch._apply_fn": ["ops.batching._MapAndBatchDataset.__init__"], "ops.batching.unbatch": [], "ops.batching.unbatch._apply_fn": [], "ops.gen_experimental_dataset_ops.dense_to_sparse_batch_dataset": [], "ops.batching._DenseToSparseBatchDataset.element_spec": [], "ops.batching._MapAndBatchDataset.__init__.<lambda1>": ["framework.tensor_util.constant_value"], "ops.batching._MapAndBatchDataset.__init__.<lambda2>": [], "ops.gen_experimental_dataset_ops.map_and_batch_dataset": [], "ops.batching._MapAndBatchDataset._functions": [], "ops.batching._MapAndBatchDataset.element_spec": [], "ops.batching._DenseToRaggedDataset.__init__.to_ragged_spec": ["<builtin>.max", "ragged.ragged_tensor.RaggedTensorSpec", "<builtin>.enumerate", "<builtin>.isinstance"], "ops.batching._DenseToRaggedDataset.__init__.to_ragged_variant": ["tensor_spec.TensorSpec.from_tensor", "ragged_tensor.RaggedTensor.from_tensor", "ops.batching._DenseToRaggedDataset.__init__.to_ragged_spec", "<builtin>.isinstance"], "tensor_spec.TensorSpec.from_tensor": [], "ragged_tensor.RaggedTensor.from_tensor": [], "ops.batching._DenseToRaggedDataset.__init__.<lambda1>": ["util.nest.map_structure"], "ops.batching._DenseToRaggedDataset.__init__.<lambda2>": ["util.nest.map_structure"], "ops.batching._DenseToRaggedDataset.element_spec": [], "ops.cardinality": ["util.tf_export.tf_export"], "ops.cardinality.assert_cardinality": [], "ops.cardinality.assert_cardinality._apply_fn": ["ops.cardinality._AssertCardinalityDataset.__init__"], "ops.cardinality._AssertCardinalityDataset.__init__": ["framework.ops.convert_to_tensor", "<builtin>.super", "ops.gen_experimental_dataset_ops.assert_cardinality_dataset"], "ops.gen_experimental_dataset_ops.assert_cardinality_dataset": [], "ops.compression_ops": [], "ops.compression_ops.compress": ["util.structure.to_tensor_list", "ops.gen_experimental_dataset_ops.compress_element", "util.structure.type_spec_from_value"], "ops.gen_experimental_dataset_ops.compress_element": [], "ops.compression_ops.uncompress": ["util.structure.get_flat_tensor_shapes", "util.structure.get_flat_tensor_types", "util.structure.from_tensor_list", "ops.gen_experimental_dataset_ops.uncompress_element"], "ops.gen_experimental_dataset_ops.uncompress_element": [], "ops.counter": ["util.tf_export.tf_export", "python.tf2.enabled"], "ops.counter.CounterV2": ["dataset_ops.Dataset.from_tensors", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.counter.CounterV2.<lambda1>": [], "ops.counter.CounterV1": ["ops.counter.CounterV2", "ops.dataset_ops.DatasetV1Adapter"], "ops.dataset_ops.DatasetV1Adapter": [], "ops.data_service_ops": ["<builtin>.globals", "python.tf2.enabled", "util.lazy_loader.LazyLoader", "util.tf_export.tf_export"], "ops.data_service_ops.ShardingPolicy._to_proto": ["<builtin>.ValueError"], "ops.data_service_ops._get_validated_sharding_policy": ["<builtin>.ValueError", "<builtin>.isinstance", "compat.compat.forward_compatible"], "compat.compat.forward_compatible": ["compat.compat._date_to_date_number"], "ops.data_service_ops._serialize": ["<builtin>.ValueError", "protobuf.data_service_pb2.ProcessingModeDef", "ops.data_service_ops._get_validated_sharding_policy", "<builtin>.isinstance"], "protobuf.data_service_pb2.ProcessingModeDef": [], "ops.data_service_ops._validate_job_name": ["<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance"], "ops.data_service_ops._DataServiceDatasetV2.__init__": ["ops.gen_experimental_dataset_ops.dummy_iteration_counter", "ops.gen_experimental_dataset_ops.data_service_dataset_v2", "compat.compat.forward_compatible", "framework.ops.convert_to_tensor", "ops.data_service_ops._get_validated_sharding_policy", "<builtin>.super", "<builtin>.ValueError", "ops.data_service_ops._serialize"], "ops.gen_experimental_dataset_ops.dummy_iteration_counter": [], "ops.gen_experimental_dataset_ops.data_service_dataset_v2": [], "ops.data_service_ops._DataServiceDatasetV2.element_spec": [], "ops.data_service_ops._DataServiceDatasetV1": ["functools.wraps"], "ops.data_service_ops._DataServiceDatasetV1.__init__": ["<builtin>.super", "ops.data_service_ops._DataServiceDatasetV2.__init__"], "ops.data_service_ops._parse_service": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.type", "<builtin>.ValueError", "service._pywrap_utils.TF_DATA_DefaultProtocol"], "service._pywrap_utils.TF_DATA_DefaultProtocol": [], "ops.data_service_ops._distribute": ["ops.data_service_ops._get_validated_sharding_policy", "<builtin>.ValueError"], "ops.data_service_ops._distribute._apply_fn": ["ops.data_service_ops._register_dataset", "ops.data_service_ops._from_dataset_id"], "ops.data_service_ops._register_dataset": ["eager.context.executing_eagerly", "<builtin>.isinstance", "<builtin>.ValueError", "ops.gen_experimental_dataset_ops.register_dataset", "ops.data_service_ops._parse_service"], "ops.data_service_ops._from_dataset_id": ["ops.options.Options", "service._pywrap_server_lib.TF_DATA_GetElementSpec", "<builtin>.str", "framework.tensor_util.constant_value", "eager.context.executing_eagerly", "ops.data_service_ops._DataServiceDatasetV1.__init__", "framework.tensor_spec.TensorSpec", "ops.data_service_ops._get_validated_sharding_policy", "<builtin>.isinstance", "ops.data_service_ops._DataServiceDatasetV2.__init__", "<builtin>.type", "<builtin>.ValueError", "ops.data_service_ops._parse_service"], "ops.data_service_ops.distribute": ["ops.data_service_ops._distribute", "ops.data_service_ops._validate_job_name"], "ops.data_service_ops._register_dataset.<lambda1>": ["ops.compression_ops.compress"], "ops.gen_experimental_dataset_ops.register_dataset": [], "ops.data_service_ops.register_dataset": ["ops.data_service_ops._register_dataset"], "service._pywrap_server_lib.TF_DATA_GetElementSpec": [], "ops.data_service_ops._from_dataset_id.<lambda1>": ["ops.compression_ops.uncompress"], "ops.data_service_ops.from_dataset_id": ["ops.string_ops.as_string", "ops.string_ops.string_join", "ops.data_service_ops._validate_job_name", "ops.data_service_ops._from_dataset_id"], "ops.string_ops.as_string": [], "ops.string_ops.string_join": ["ops.gen_string_ops.string_join"], "ops.distribute": ["util.tf_export.tf_export"], "ops.distribute._AutoShardDataset.__init__": ["<builtin>.int", "ops.gen_experimental_dataset_ops.auto_shard_dataset", "<builtin>.super"], "ops.gen_experimental_dataset_ops.auto_shard_dataset": [], "ops.distribute._AutoShardDataset.element_spec": [], "ops.distribute._AutoShardDatasetV1": ["ops.distribute._AutoShardDataset.__init__", "ops.dataset_ops.DatasetV1Adapter"], "ops.distribute._RebatchDataset.__init__": ["ops.dataset_ops.normalize_to_dense", "util.nest.map_structure", "ops.dataset_ops.get_structure", "<builtin>.super", "ops.distribute._RebatchDataset._compute_static_batch_dim", "framework.ops.convert_to_tensor", "ops.gen_experimental_dataset_ops.rebatch_dataset_v2"], "ops.distribute._RebatchDataset._compute_static_batch_dim": ["<builtin>.isinstance", "<builtin>.ValueError", "numpy.all", "ops.distribute._RebatchDataset._may_form_partial_batches", "framework.tensor_util.constant_value", "<builtin>.len"], "ops.distribute._RebatchDataset.__init__.<lambda1>": [], "ops.gen_experimental_dataset_ops.rebatch_dataset_v2": [], "numpy.all": [], "ops.distribute._RebatchDataset._may_form_partial_batches": ["ops.dataset_ops.get_structure", "ops.distribute._RebatchDataset._may_form_partial_batches.get_batch_dim", "<builtin>.ValueError", "numpy.all", "framework.tensor_util.constant_value", "util.nest.flatten", "numpy.asarray"], "ops.distribute._RebatchDataset._may_form_partial_batches.get_batch_dim": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance"], "numpy.asarray": [], "ops.distribute._RebatchDataset.element_spec": [], "ops.distribute._LegacyRebatchDataset.__init__": ["ops.dataset_ops.normalize_to_dense", "util.nest.map_structure", "ops.gen_experimental_dataset_ops.rebatch_dataset", "ops.dataset_ops.get_structure", "<builtin>.super"], "ops.distribute._LegacyRebatchDataset.__init__.recalculate_batch_size": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance"], "ops.distribute._LegacyRebatchDataset.__init__.rebatch": ["ops.distribute._LegacyRebatchDataset.__init__.recalculate_batch_size"], "ops.gen_experimental_dataset_ops.rebatch_dataset": [], "ops.distribute._LegacyRebatchDataset.element_spec": [], "ops.distribute._RemoteDataset.__init__": ["framework.ops.device", "ops.gen_experimental_dataset_ops.dataset_from_graph", "<builtin>.super"], "ops.distribute._RemoteDataset.element_spec": [], "ops.distribute.replicate": ["<builtin>.isinstance", "ops.distribute._RemoteDataset.__init__", "<builtin>.TypeError", "framework.ops.colocate_with", "<builtin>.len"], "ops.distribute.batch_sizes_for_worker": ["ops.array_ops.ones", "ops.array_ops.concat", "framework.tensor_util.constant_value", "ops.array_ops.zeros", "framework.ops.convert_to_tensor"], "ops.array_ops.ones": ["eager.context.executing_eagerly", "numpy.ones", "framework.dtypes.as_dtype", "ops.array_ops._constant_if_small", "framework.ops.convert_to_tensor", "framework.constant_op.constant", "ops.array_ops.fill", "ops.array_ops.reshape", "<builtin>.isinstance", "framework.constant_op._tensor_shape_tensor_conversion_function", "framework.tensor_shape.TensorShape", "framework.ops.name_scope"], "ops.distribute.compute_batch_size": ["ops.gen_experimental_dataset_ops.compute_batch_size", "<builtin>.all", "ops.dataset_ops.get_structure", "ops.distribute.compute_batch_size.get_static_batch_dim", "util.nest.flatten", "framework.constant_op.constant"], "ops.distribute.compute_batch_size.get_static_batch_dim": [], "ops.gen_experimental_dataset_ops.compute_batch_size": [], "ops.enumerate_ops": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "ops.enumerate_ops.enumerate_dataset": [], "ops.enumerate_ops.enumerate_dataset._apply_fn": [], "ops.error_ops": ["util.tf_export.tf_export"], "ops.error_ops.ignore_errors": [], "ops.error_ops.ignore_errors._apply_fn": ["ops.error_ops._IgnoreErrorsDataset.__init__"], "ops.error_ops._IgnoreErrorsDataset.__init__": ["ops.gen_experimental_dataset_ops.ignore_errors_dataset", "<builtin>.super"], "ops.gen_experimental_dataset_ops.ignore_errors_dataset": [], "ops.get_single_element": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "ops.grouping": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "ops.grouping.group_by_reducer": [], "ops.grouping.group_by_reducer._apply_fn": ["ops.grouping._GroupByReducerDataset.__init__"], "ops.grouping._GroupByReducerDataset.__init__": ["ops.grouping._GroupByReducerDataset._make_key_func", "ops.grouping._GroupByReducerDataset._make_finalize_func", "ops.gen_experimental_dataset_ops.experimental_group_by_reducer_dataset", "ops.grouping._GroupByReducerDataset._make_reduce_func", "ops.grouping._GroupByReducerDataset._make_init_func", "<builtin>.super"], "ops.grouping.group_by_window": [], "ops.grouping.group_by_window._apply_fn": [], "ops.grouping.bucket_by_sequence_length": [], "ops.grouping.bucket_by_sequence_length._apply_fn": [], "ops.grouping._GroupByReducerDataset._make_key_func": ["framework.tensor_spec.TensorSpec", "<builtin>.ValueError", "ops.dataset_ops.StructuredFunctionWrapper", "ops.grouping._GroupByReducerDataset._transformation_name"], "ops.grouping._GroupByReducerDataset._make_init_func": ["framework.tensor_spec.TensorSpec", "ops.dataset_ops.StructuredFunctionWrapper", "ops.grouping._GroupByReducerDataset._transformation_name"], "ops.grouping._GroupByReducerDataset._make_reduce_func": ["util.nest.flatten", "ops.grouping._GroupByReducerDataset._transformation_name", "<builtin>.issubclass", "<builtin>.zip", "ops.dataset_ops.StructuredFunctionWrapper", "util.structure.convert_legacy_structure", "util.nest.pack_sequence_as", "<builtin>.TypeError", "framework.ops.get_default_graph"], "ops.grouping._GroupByReducerDataset._make_finalize_func": ["ops.dataset_ops.StructuredFunctionWrapper", "ops.grouping._GroupByReducerDataset._transformation_name"], "ops.gen_experimental_dataset_ops.experimental_group_by_reducer_dataset": [], "ops.grouping._GroupByReducerDataset._transformation_name": [], "ops.grouping._GroupByReducerDataset.element_spec": [], "ops.grouping._GroupByReducerDataset._functions": [], "ops.grouping.Reducer.__init__": [], "ops.grouping.Reducer.init_func": [], "ops.grouping.Reducer.reduce_func": [], "ops.grouping.Reducer.finalize_func": [], "ops.interleave_ops": ["util.deprecation.deprecated", "python.tf2.enabled", "util.tf_export.tf_export"], "ops.interleave_ops.parallel_interleave._apply_fn": ["ops.readers.ParallelInterleaveDataset"], "ops.readers.ParallelInterleaveDataset": [], "ops.interleave_ops._DirectedInterleaveDataset.__init__": ["ops.dataset_ops.get_legacy_output_types", "<builtin>.TypeError", "util.nest.flatten", "<builtin>.super", "<builtin>.zip", "<builtin>.enumerate", "<builtin>.list", "ops.gen_experimental_dataset_ops.directed_interleave_dataset", "util.nest.pack_sequence_as", "ops.dataset_ops.get_legacy_output_classes"], "ops.gen_experimental_dataset_ops.directed_interleave_dataset": [], "ops.interleave_ops._DirectedInterleaveDataset._inputs": [], "ops.interleave_ops._DirectedInterleaveDataset.element_spec": [], "ops.interleave_ops.sample_from_datasets_v2": ["<builtin>.TypeError", "ops.interleave_ops.sample_from_datasets_v2._skip_datasets_with_zero_weight", "ops.dataset_ops.MapDataset", "ops.array_ops.expand_dims", "ops.interleave_ops._DirectedInterleaveDataset.__init__", "<builtin>.isinstance", "framework.ops.convert_to_tensor", "ops.random_ops.RandomDataset", "<builtin>.len", "ops.interleave_ops.sample_from_datasets_v2._shapes_are_compatible", "<builtin>.ValueError", "dataset_ops.Dataset.zip", "ops.math_ops.log"], "ops.interleave_ops.sample_from_datasets_v2._shapes_are_compatible": ["<builtin>.isinstance", "<builtin>.len"], "ops.interleave_ops.sample_from_datasets_v2._skip_datasets_with_zero_weight": ["<builtin>.zip"], "ops.math_ops.log": [], "ops.interleave_ops.sample_from_datasets_v2.select_dataset_constant_logits": ["ops.array_ops.squeeze", "ops.gen_stateless_random_ops.stateless_multinomial"], "ops.gen_stateless_random_ops.stateless_multinomial": [], "ops.array_ops.squeeze": ["ops.gen_array_ops.squeeze", "util.deprecation.deprecated_argument_lookup", "numpy.isscalar"], "ops.random_ops.RandomDataset": [], "ops.interleave_ops.sample_from_datasets_v2.<lambda1>": ["ops.math_ops.log"], "ops.interleave_ops.sample_from_datasets_v2.select_dataset_varying_logits": ["ops.array_ops.squeeze", "ops.gen_stateless_random_ops.stateless_multinomial"], "ops.interleave_ops.sample_from_datasets_v1": ["ops.dataset_ops.DatasetV1Adapter", "ops.interleave_ops.sample_from_datasets_v2"], "ops.interleave_ops.choose_from_datasets_v2": ["<builtin>.TypeError", "ops.interleave_ops._DirectedInterleaveDataset.__init__", "framework.tensor_spec.TensorSpec", "util.structure.are_compatible", "<builtin>.ValueError"], "ops.interleave_ops.choose_from_datasets_v1": ["ops.dataset_ops.DatasetV1Adapter", "ops.interleave_ops.choose_from_datasets_v2"], "ops.io": ["util.lazy_loader.LazyLoader", "util.tf_export.tf_export", "<builtin>.globals"], "ops.io.save": ["training.checkpoint_management.CheckpointManager", "<builtin>.enumerate", "compat.compat.forward_compatible", "ops.io._set_save_dataset_attributes", "<builtin>.ValueError", "eager.context.executing_eagerly", "<builtin>.iter", "ops.gen_experimental_dataset_ops.save_dataset", "ops.io._SaveDataset.__init__", "tracking.util.Checkpoint"], "ops.io._SaveDataset.__init__": ["util.structure.get_flat_tensor_types", "ops.io._set_save_dataset_attributes", "ops.gen_experimental_dataset_ops.save_dataset_v2", "util.structure.get_flat_tensor_shapes", "<builtin>.super"], "tracking.util.Checkpoint": [], "training.checkpoint_management.CheckpointManager": [], "ops.io._set_save_dataset_attributes": ["framework.ops.convert_to_tensor", "ops.dataset_ops.StructuredFunctionWrapper", "platform.gfile.MakeDirs", "platform.gfile.GFile", "framework.ops.get_default_graph", "os.path.join"], "ops.gen_experimental_dataset_ops.save_dataset": [], "ops.gen_experimental_dataset_ops.save_dataset_v2": [], "ops.io._SaveDataset._functions": [], "ops.io._set_save_dataset_attributes.<lambda1>": [], "ops.io._LoadDataset.__init__": ["ops.dataset_ops.DatasetSpec", "ops.gen_experimental_dataset_ops.load_dataset", "ops.dataset_ops.StructuredFunctionWrapper", "platform.gfile.GFile", "os.path.join", "<builtin>.super"], "ops.io._LoadDataset.__init__.<lambda1>": ["multiprocessing.cpu_count"], "ops.io._LoadDataset.__init__.<lambda1>.<lambda1>": [], "ops.dataset_ops.DatasetSpec": [], "ops.gen_experimental_dataset_ops.load_dataset": [], "ops.io._LoadDataset._functions": [], "ops.io._LoadDataset.element_spec": [], "ops.io.load": ["ops.io._LoadDataset.__init__"], "ops.iterator_ops._convert_external_state_policy_to_enum": ["<builtin>.isinstance", "<builtin>.ValueError"], "ops.iterator_ops.make_saveable_from_iterator": ["ops.iterator_ops._IteratorSaveable", "ops.iterator_ops._convert_external_state_policy_to_enum"], "ops.iterator_ops._IteratorSaveable": [], "ops.iterator_ops.CheckpointInputPipelineHook.__init__": ["training.basic_session_run_hooks.CheckpointSaverHook", "ops.iterator_ops._convert_external_state_policy_to_enum"], "training.basic_session_run_hooks.CheckpointSaverHook": [], "ops.iterator_ops.CheckpointInputPipelineHook.begin": ["framework.ops.get_collection", "ops.iterator_ops._CustomSaver.__init__", "ops.iterator_ops._IteratorSaveable"], "ops.iterator_ops._CustomSaver.__init__": ["<builtin>.super"], "ops.iterator_ops.CheckpointInputPipelineHook.after_create_session": [], "ops.iterator_ops.CheckpointInputPipelineHook._restore_or_save_initial_ckpt": ["training.checkpoint_management.latest_checkpoint"], "training.checkpoint_management.latest_checkpoint": ["io.file_io.get_matching_files", "training.checkpoint_management.get_checkpoint_state", "training.checkpoint_management._prefix_to_checkpoint_path", "platform.tf_logging.error"], "ops.iterator_ops.CheckpointInputPipelineHook.before_run": ["ops.iterator_ops.CheckpointInputPipelineHook._restore_or_save_initial_ckpt"], "ops.iterator_ops.CheckpointInputPipelineHook.after_run": [], "ops.iterator_ops.CheckpointInputPipelineHook.end": [], "ops.iterator_ops._CustomSaver.save": ["<builtin>.super"], "ops.lookup_ops": ["util.tf_export.tf_export", "framework.ops.NotDifferentiable", "util.deprecation.deprecated"], "ops.lookup_ops.DatasetInitializer.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.isinstance", "<builtin>.len", "<builtin>.type"], "ops.lookup_ops.DatasetInitializer.initialize": ["ops.lookup_ops.check_table_dtypes", "ops.gen_experimental_dataset_ops.initialize_table_from_dataset", "framework.ops.add_to_collection"], "ops.lookup_ops.check_table_dtypes": ["<builtin>.TypeError"], "ops.gen_experimental_dataset_ops.initialize_table_from_dataset": [], "ops.lookup_ops.table_from_dataset": ["ops.lookup_ops.DatasetInitializer.__init__", "ops.lookup_ops.StaticHashTableV1", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.isinstance", "ops.math_ops.cast", "framework.ops.name_scope", "<builtin>.len", "ops.lookup_ops.IdTableWithHashBuckets", "ops.cardinality.assert_cardinality"], "ops.lookup_ops.StaticHashTableV1": [], "ops.lookup_ops.IdTableWithHashBuckets": ["util.deprecation.deprecated"], "ops.lookup_ops.index_table_from_dataset": ["ops.lookup_ops.table_from_dataset"], "ops.lookup_ops.index_table_from_dataset.<lambda1>": [], "ops.map_defun": [], "ops.gen_dataset_ops.map_defun": [], "ops.matching_files": [], "ops.matching_files.MatchingFilesDataset.__init__": ["ops.gen_experimental_dataset_ops.matching_files_dataset", "framework.ops.convert_to_tensor", "<builtin>.super"], "ops.gen_experimental_dataset_ops.matching_files_dataset": [], "ops.matching_files.MatchingFilesDataset.element_spec": ["framework.tensor_spec.TensorSpec"], "ops.parsing_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support", "util.deprecation.deprecated_endpoints", "util.deprecation.deprecated_args", "framework.ops.NotDifferentiable"], "ops.parsing_ops._ParseExampleDataset.__init__": ["<builtin>.super", "ops.parsing_ops._prepend_none_dimension", "ragged.ragged_tensor.RaggedTensorSpec", "<builtin>.zip", "ops.gen_experimental_dataset_ops.parse_example_dataset_v2", "util.structure.are_compatible", "<builtin>.TypeError", "framework.tensor_spec.TensorSpec", "framework.sparse_tensor.SparseTensorSpec", "ops.dataset_ops.get_legacy_output_shapes", "parsing_ops._ParseOpParams.from_features"], "ops.parsing_ops._prepend_none_dimension": ["<builtin>.isinstance", "ops.parsing_config.FixedLenSequenceFeature", "<builtin>.dict", "<builtin>.list", "<builtin>.ValueError"], "parsing_ops._ParseOpParams.from_features": [], "ops.gen_experimental_dataset_ops.parse_example_dataset_v2": [], "ops.parsing_ops._ParseExampleDataset.element_spec": [], "ops.parsing_ops.parse_example_dataset": ["<builtin>.ValueError"], "ops.parsing_ops.parse_example_dataset._apply_fn": ["<builtin>.any", "dataset_ops.UnaryDataset.map", "<builtin>.isinstance", "ops.parsing_ops._ParseExampleDataset.__init__"], "ops.parsing_ops.parse_example_dataset._apply_fn.<lambda1>": ["ops.parsing_ops._construct_tensors_for_composite_features"], "ops.parsing_ops._construct_tensors_for_composite_features": [], "dataset_ops.UnaryDataset.map": [], "ops.prefetching_ops": ["util.tf_export.tf_export"], "ops.prefetching_ops.prefetch_to_device": [], "ops.prefetching_ops.prefetch_to_device._apply_fn": ["ops.prefetching_ops.copy_to_device"], "ops.prefetching_ops.copy_to_device": [], "ops.prefetching_ops.copy_to_device._apply_fn": ["ops.prefetching_ops._CopyToDeviceDataset.__init__"], "ops.prefetching_ops._CopyToDeviceDataset.__init__": ["eager.function.defun", "ops.gen_dataset_ops.generator_dataset", "<builtin>.super", "ops.gen_dataset_ops.wrap_dataset_variant", "framework.device.DeviceSpec", "framework.ops.convert_to_tensor", "eager.function.defun_with_attributes", "framework.ops.device", "framework.ops.get_default_graph"], "framework.device.DeviceSpec": [], "ops.gen_dataset_ops.wrap_dataset_variant": [], "ops.prefetching_ops._CopyToDeviceDataset.__init__._init_func": ["ops.gen_dataset_ops.make_iterator", "ops.gen_dataset_ops.iterator_to_string_handle", "framework.ops.control_dependencies", "ops.gen_dataset_ops.unwrap_dataset_variant", "ops.gen_dataset_ops.anonymous_iterator"], "ops.gen_dataset_ops.unwrap_dataset_variant": [], "ops.gen_dataset_ops.anonymous_iterator": [], "ops.prefetching_ops._CopyToDeviceDataset.__init__._remote_init_func": ["ops.functional_ops.remote_call"], "ops.prefetching_ops._CopyToDeviceDataset.__init__._next_func": ["ops.dataset_ops.get_legacy_output_classes", "ops.dataset_ops.get_legacy_output_types", "iterator_ops.Iterator.from_string_handle", "util.structure.to_tensor_list", "framework.ops.device", "ops.dataset_ops.get_legacy_output_shapes"], "iterator_ops.Iterator.from_string_handle": [], "ops.prefetching_ops._CopyToDeviceDataset.__init__._remote_next_func": ["ops.functional_ops.remote_call"], "ops.prefetching_ops._CopyToDeviceDataset.__init__._finalize_func": ["ops.gen_dataset_ops.iterator_from_string_handle_v2", "ops.resource_variable_ops.destroy_resource_op", "ops.array_ops.constant", "framework.ops.control_dependencies"], "ops.resource_variable_ops.destroy_resource_op": [], "ops.prefetching_ops._CopyToDeviceDataset.__init__._remote_finalize_func": ["ops.functional_ops.remote_call"], "ops.prefetching_ops._CopyToDeviceDataset.make_one_shot_iterator": ["<builtin>.ValueError", "<builtin>.super"], "ops.prefetching_ops._MapOnGpuDataset.__init__": ["ops.prefetching_ops._MapOnGpuDataset._transformation_name", "<builtin>.super", "ops.dataset_ops.StructuredFunctionWrapper", "ops.gen_experimental_dataset_ops.experimental_map_dataset"], "ops.prefetching_ops._MapOnGpuDataset._transformation_name": [], "ops.gen_experimental_dataset_ops.experimental_map_dataset": [], "ops.prefetching_ops._MapOnGpuDataset._functions": [], "ops.prefetching_ops._MapOnGpuDataset.element_spec": [], "ops.prefetching_ops.map_on_gpu": [], "ops.prefetching_ops.map_on_gpu._apply_fn": ["ops.prefetching_ops._MapOnGpuDataset.__init__"], "ops.random_access": [], "ops.random_access.at": ["ops.gen_experimental_dataset_ops.get_element_at_index", "util.structure.from_tensor_list"], "ops.gen_experimental_dataset_ops.get_element_at_index": [], "ops.random_ops": ["python.tf2.enabled", "util.dispatch.add_dispatch_support", "framework.ops.NotDifferentiable", "util.deprecation.deprecated_endpoints", "util.deprecation.deprecated", "util.tf_export.tf_export"], "ops.random_ops.RandomDatasetV1": ["functools.wraps"], "ops.random_ops.RandomDatasetV1.__init__": ["<builtin>.super", "dataset_ops.RandomDataset.__init__"], "dataset_ops.RandomDataset.__init__": [], "ops.readers._is_valid_int32": ["dtypes.int32.as_numpy_dtype", "dtypes.int64.as_numpy_dtype"], "dtypes.int32.as_numpy_dtype": [], "dtypes.int64.as_numpy_dtype": [], "ops.readers._is_valid_int64": ["dtypes.int64.as_numpy_dtype"], "ops.readers._is_valid_float": ["dtypes.float32.as_numpy_dtype", "dtypes.float64.as_numpy_dtype"], "dtypes.float64.as_numpy_dtype": [], "dtypes.float32.as_numpy_dtype": [], "ops.readers._infer_type": ["<builtin>.len", "<builtin>.range"], "ops.readers._infer_type.<list2>.<lambda1>": [], "ops.readers._infer_type.<lambda1>": ["ops.readers._is_valid_float"], "ops.readers._infer_type.<list2>.<lambda2>": [], "ops.readers._infer_type.<lambda2>": ["ops.readers._is_valid_float"], "ops.readers._infer_type.<list2>.<lambda3>": [], "ops.readers._next_csv_row": ["<builtin>.len", "<builtin>.next", "<builtin>.ValueError", "csv.reader"], "csv.reader": [], "ops.readers._infer_column_defaults": ["ops.readers._next_csv_row", "framework.constant_op.constant", "<builtin>.range", "<builtin>.len", "<builtin>.enumerate", "ops.readers._infer_type"], "ops.readers._infer_column_names": ["ops.readers.make_csv_dataset_v2.<lambda2>", "<builtin>.next", "<builtin>.ValueError", "csv.reader", "ops.readers.make_csv_dataset_v2.<lambda1>"], "ops.readers.make_csv_dataset_v2.<lambda2>": ["gzip.open"], "ops.readers.make_csv_dataset_v2.<lambda1>": ["io.file_io.FileIO"], "ops.readers._get_sorted_col_indices": ["<builtin>.ValueError", "<builtin>.sorted", "<builtin>.isinstance", "<builtin>.len", "<builtin>.enumerate", "<builtin>.set"], "ops.readers._maybe_shuffle_and_repeat": [], "ops.readers.make_tf_record_dataset": ["ops.readers._maybe_shuffle_and_repeat", "ops.readers.TFRecordDataset", "dataset_ops.Dataset.list_files"], "ops.readers.TFRecordDataset": [], "ops.readers.make_csv_dataset_v2": ["<builtin>.len", "framework.constant_op.constant", "dataset_ops.Dataset.from_tensor_slices", "ops.readers._maybe_shuffle_and_repeat", "ops.options.Options", "<builtin>.set", "ops.readers._infer_column_names", "ops.dataset_ops.MapDataset", "ops.readers._get_file_names", "ops.readers._get_sorted_col_indices", "<builtin>.ValueError", "framework.tensor_util.is_tf_type", "ops.readers._infer_column_defaults", "framework.tensor_util.constant_value"], "ops.readers._get_file_names": ["<builtin>.sorted", "platform.gfile.Glob", "<builtin>.isinstance", "<builtin>.list", "<builtin>.ValueError"], "io.file_io.FileIO": ["util.deprecation.deprecated_args"], "gzip.open": [], "ops.readers.make_csv_dataset_v2.filename_to_dataset": ["ops.readers.CsvDatasetV2.__init__", "ops.readers.CsvDatasetV1.__init__", "ops.error_ops.ignore_errors"], "ops.readers.CsvDatasetV2.__init__": ["framework.constant_op.constant", "<builtin>.tuple", "util.convert.optional_param_to_tensor", "framework.ops.convert_n_to_tensor", "<builtin>.super", "framework.tensor_util.is_tf_type", "framework.tensor_spec.TensorSpec", "framework.ops.convert_to_tensor", "ops.gen_experimental_dataset_ops.csv_dataset_v2"], "ops.readers.CsvDatasetV1.__init__": ["<builtin>.super", "ops.readers.CsvDatasetV2.__init__"], "ops.readers.make_csv_dataset_v2.map_fn": ["collections.OrderedDict", "<builtin>.zip"], "ops.readers.make_csv_dataset_v2.apply_fn": ["ops.readers.ParallelInterleaveDataset"], "ops.readers.make_csv_dataset_v1": ["ops.readers.make_csv_dataset_v2", "ops.dataset_ops.DatasetV1Adapter"], "ops.gen_experimental_dataset_ops.csv_dataset_v2": [], "ops.readers.CsvDatasetV2.element_spec": [], "ops.readers.CsvDatasetV1": ["functools.wraps"], "ops.readers.make_batched_features_dataset_v2": ["dataset_ops.Dataset.list_files", "<builtin>.ValueError", "ops.parsing_ops.parse_example_dataset", "<builtin>.issubclass", "ops.readers._maybe_shuffle_and_repeat", "<builtin>.TypeError", "<builtin>.isinstance", "ops.options.Options", "ops.dataset_ops.MapDataset", "ops.dataset_ops.get_legacy_output_types"], "ops.readers.make_batched_features_dataset_v2.<lambda1>": ["ops.readers.TFRecordDataset"], "ops.readers.make_batched_features_dataset_v2.apply_fn": ["ops.readers.ParallelInterleaveDataset"], "ops.readers.make_batched_features_dataset_v2.apply_fn.<lambda1>": ["ops.readers.TFRecordDataset"], "ops.readers.make_batched_features_dataset_v2.<lambda2>": [], "ops.readers.make_batched_features_dataset_v2.<lambda3>": [], "ops.readers.make_batched_features_dataset_v1": ["ops.dataset_ops.DatasetV1Adapter", "ops.readers.make_batched_features_dataset_v2"], "ops.readers.SqlDatasetV2.__init__": ["<builtin>.super", "util.nest.map_structure", "framework.ops.convert_to_tensor", "ops.gen_experimental_dataset_ops.sql_dataset"], "ops.readers.SqlDatasetV2.__init__.<lambda1>": ["framework.tensor_spec.TensorSpec"], "ops.gen_experimental_dataset_ops.sql_dataset": [], "ops.readers.SqlDatasetV2.element_spec": [], "ops.readers.SqlDatasetV1": ["functools.wraps"], "ops.readers.SqlDatasetV1.__init__": ["<builtin>.super", "ops.readers.SqlDatasetV2.__init__"], "ops.resampling": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "ops.resampling.rejection_resample._apply_fn": [], "ops.scan_ops": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "ops.scan_ops.scan": [], "ops.scan_ops.scan._apply_fn": [], "ops.shuffle_ops": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "ops.shuffle_ops._ShuffleAndRepeatDataset.__init__": ["util.random_seed.get_seed", "<builtin>.super", "ops.gen_dataset_ops.shuffle_and_repeat_dataset", "framework.constant_op.constant", "framework.ops.convert_to_tensor"], "ops.gen_dataset_ops.shuffle_and_repeat_dataset": [], "ops.shuffle_ops.shuffle_and_repeat": [], "ops.shuffle_ops.shuffle_and_repeat._apply_fn": ["ops.shuffle_ops._ShuffleAndRepeatDataset.__init__"], "ops.sleep": [], "ops.sleep._SleepDataset.__init__": ["ops.gen_experimental_dataset_ops.sleep_dataset", "<builtin>.super"], "ops.gen_experimental_dataset_ops.sleep_dataset": [], "ops.sleep.sleep": [], "ops.sleep.sleep._apply_fn": ["ops.sleep._SleepDataset.__init__"], "ops.snapshot": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "ops.snapshot._LegacySnapshotDataset.__init__": ["framework.random_seed.get_seed", "<builtin>.super", "ops.gen_experimental_dataset_ops.snapshot_dataset", "framework.ops.convert_to_tensor"], "ops.gen_experimental_dataset_ops.snapshot_dataset": [], "ops.snapshot.legacy_snapshot._apply_fn": ["ops.snapshot._LegacySnapshotDataset.__init__"], "ops.snapshot.snapshot": [], "ops.snapshot.snapshot._apply_fn": [], "ops.take_while_ops": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "ops.take_while_ops.take_while._apply_fn": [], "ops.unique": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "ops.unique.unique": [], "ops.unique.unique._apply_fn": [], "ops.writers": [], "ops.writers.TFRecordWriter.__init__": ["framework.ops.convert_to_tensor", "util.convert.optional_param_to_tensor"], "ops.writers.TFRecordWriter.write": ["framework.tensor_spec.TensorSpec", "ops.dataset_ops.get_legacy_output_shapes", "ops.dataset_ops.get_legacy_output_types", "<builtin>.isinstance", "ops.gen_experimental_dataset_ops.dataset_to_tf_record", "ops.dataset_ops.get_structure", "<builtin>.TypeError"], "ops.gen_experimental_dataset_ops.dataset_to_tf_record": [], "service.server_lib": [], "service.server_lib.DispatcherConfig.__new__": ["service._pywrap_utils.TF_DATA_DefaultProtocol", "<builtin>.super"], "service.server_lib.DispatchServer.__init__": ["protobuf.service_config_pb2.DispatcherConfig", "service._pywrap_server_lib.TF_DATA_NewDispatchServer", "<builtin>.ValueError"], "protobuf.service_config_pb2.DispatcherConfig": [], "service._pywrap_server_lib.TF_DATA_NewDispatchServer": [], "service.server_lib.DispatchServer.start": [], "service.server_lib.DispatchServer.join": [], "service.server_lib.DispatchServer.target": [], "service.server_lib.DispatchServer._stop": [], "service.server_lib.DispatchServer.__del__": ["service.server_lib.DispatchServer._stop"], "service.server_lib.DispatchServer._address": [], "service.server_lib.DispatchServer._num_workers": [], "service.server_lib.WorkerConfig.__new__": ["service._pywrap_utils.TF_DATA_DefaultProtocol", "<builtin>.super"], "service.server_lib.WorkerServer.__init__": ["protobuf.service_config_pb2.WorkerConfig", "<builtin>.isinstance", "service._pywrap_server_lib.TF_DATA_NewWorkerServer", "<builtin>.ValueError"], "protobuf.service_config_pb2.WorkerConfig": [], "service._pywrap_server_lib.TF_DATA_NewWorkerServer": [], "service.server_lib.WorkerServer.start": [], "service.server_lib.WorkerServer.join": [], "service.server_lib.WorkerServer._stop": [], "service.server_lib.WorkerServer.__del__": ["service.server_lib.WorkerServer._stop"], "service.server_lib.WorkerServer._address": [], "service.server_lib.WorkerServer._num_tasks": [], "tac.tac": [], "tac.tac.run_tac": ["py_wrapper._pywrap_tac_wrapper.run_tac", "<builtin>.ValueError"], "py_wrapper._pywrap_tac_wrapper.run_tac": [], "xla_sharding.xla_sharding": [], "xla_sharding.xla_sharding.Sharding.__init__": [], "xla_sharding.xla_sharding.Sharding.replicate": ["xla_sharding.xla_sharding.Sharding.__init__", "xla.xla_data_pb2.OpSharding"], "xla.xla_data_pb2.OpSharding": [], "xla_sharding.xla_sharding.Sharding.manual": ["xla_sharding.xla_sharding.Sharding.__init__", "xla.xla_data_pb2.OpSharding"], "xla_sharding.xla_sharding.Sharding.assign_device": ["xla_sharding.xla_sharding.Sharding.__init__", "xla.xla_data_pb2.OpSharding"], "xla_sharding.xla_sharding.Sharding.tile": ["xla.xla_data_pb2.OpSharding", "<builtin>.list", "xla_sharding.xla_sharding.Sharding.__init__", "<builtin>.TypeError", "<builtin>.isinstance"], "xla_sharding.xla_sharding.Sharding.partial_tile": ["xla.xla_data_pb2.OpSharding", "<builtin>.list", "xla_sharding.xla_sharding.Sharding.__init__", "<builtin>.TypeError", "<builtin>.isinstance"], "xla_sharding.xla_sharding.Sharding.split": ["xla.xla_data_pb2.OpSharding", "xla_sharding.xla_sharding.Sharding.__init__", "<builtin>.len", "<builtin>.ValueError", "<builtin>.range"], "xla_sharding.xla_sharding.Sharding.apply_to_tensor": ["xla_sharding.xla_sharding.Sharding._get_or_create_tuple_proto", "framework.attr_value_pb2.AttrValue", "xla.xla_data_pb2.OpSharding", "python.xla.sharding", "<builtin>.list", "<builtin>.len", "xla_sharding.xla_sharding.Sharding._create_tuple_proto"], "xla_sharding.xla_sharding.Sharding._create_tuple_proto": ["xla.xla_data_pb2.OpSharding"], "python.xla.sharding": [], "xla_sharding.xla_sharding.Sharding._get_or_create_tuple_proto": ["<builtin>.len", "xla_sharding.xla_sharding.Sharding._create_tuple_proto", "xla.xla_data_pb2.OpSharding"], "xla_sharding.xla_sharding.Sharding.apply_to_operation": ["framework.attr_value_pb2.AttrValue"], "xla_sharding.xla_sharding.Sharding.proto": [], "xla_sharding.xla_sharding.copy_sharding": ["python.xla.sharding", "framework.attr_value_pb2.AttrValue", "xla_sharding.xla_sharding.get_tensor_sharding"], "xla_sharding.xla_sharding.get_tensor_sharding": ["xla_sharding.xla_sharding.get_op_sharding"], "xla_sharding.xla_sharding.replicate": ["xla_sharding.xla_sharding.Sharding.replicate", "xla_sharding.xla_sharding.Sharding.apply_to_tensor"], "xla_sharding.xla_sharding.assign_device": ["xla_sharding.xla_sharding.Sharding.assign_device", "xla_sharding.xla_sharding.Sharding.apply_to_tensor"], "xla_sharding.xla_sharding.tile": ["xla_sharding.xla_sharding.Sharding.apply_to_tensor", "xla_sharding.xla_sharding.Sharding.tile"], "xla_sharding.xla_sharding.split": ["xla_sharding.xla_sharding.Sharding.split", "xla_sharding.xla_sharding.Sharding.apply_to_tensor"], "xla_sharding.xla_sharding.partial_tile": ["xla_sharding.xla_sharding.Sharding.apply_to_tensor", "xla_sharding.xla_sharding.Sharding.partial_tile"], "xla_sharding.xla_sharding.get_op_sharding": [], "xla_sharding.xla_sharding.get_sharding_tile_shape": ["xla.xla_data_pb2.OpSharding"], "xla_sharding.xla_sharding.auto_to_manual_spmd_partition": ["python.xla.spmd_full_to_shard_shape"], "python.xla.spmd_full_to_shard_shape": [], "xla_sharding.xla_sharding.manual_to_auto_spmd_partition": ["python.xla.spmd_shard_to_full_shape"], "python.xla.spmd_shard_to_full_shape": [], "xla_sharding.xla_sharding.mesh_split_sharding": ["xla_sharding.xla_sharding.Sharding.partial_tile", "<builtin>.ValueError", "<builtin>.len", "xla_sharding.xla_sharding.Sharding.tile", "numpy.prod", "numpy.transpose", "<builtin>.range", "numpy.reshape"], "numpy.transpose": [], "numpy.reshape": [], "xla_sharding.xla_sharding.mesh_split": ["xla_sharding.xla_sharding.mesh_split_sharding", "xla_sharding.xla_sharding.Sharding.apply_to_tensor"], "experimental.context_stack": ["contextlib.contextmanager", "experimental.thread_local_stack.ThreadLocalStack"], "experimental.thread_local_stack.ThreadLocalStack": [], "experimental.context_stack.get_default": [], "experimental.context_stack.set_default": [], "experimental.def_function": [], "experimental.def_function.Function.__init__": [], "experimental.def_function.Function.__call__": ["util.nest.flatten", "<builtin>.len", "util.nest.pack_sequence_as", "experimental._unified_api.NewTracingContext", "experimental.context_stack.set_default", "experimental.context_stack.get_default"], "experimental._unified_api.NewTracingContext": [], "experimental.def_function.function": ["experimental.def_function.Function.__init__"], "experimental.gradient_registry": ["experimental._tape.GradientRegistry"], "experimental._tape.GradientRegistry": [], "experimental.gradient_registry.get_global_registry": [], "experimental.math_ops": [], "experimental.math_ops.add": ["experimental._math_ops.add", "experimental.context_stack.get_default"], "experimental._math_ops.add": [], "experimental.math_ops.mat_mul": ["experimental._math_ops.mat_mul", "experimental.context_stack.get_default"], "experimental._math_ops.mat_mul": [], "experimental.math_ops.neg": ["experimental.context_stack.get_default", "experimental._math_ops.neg"], "experimental._math_ops.neg": [], "experimental.math_ops.sub": ["experimental.context_stack.get_default", "experimental._math_ops.sub"], "experimental._math_ops.sub": [], "experimental.math_ops.mul": ["experimental._math_ops.mul", "experimental.context_stack.get_default"], "experimental._math_ops.mul": [], "experimental.math_ops.log1p": ["experimental.context_stack.get_default", "experimental._math_ops.log1p"], "experimental._math_ops.log1p": [], "experimental.math_ops.div_no_nan": ["experimental._math_ops.div_no_nan", "experimental.context_stack.get_default"], "experimental._math_ops.div_no_nan": [], "experimental.nn_ops": [], "experimental.nn_ops.relu": ["experimental.context_stack.get_default", "experimental._nn_ops.relu"], "experimental._nn_ops.relu": [], "experimental.nn_ops.sparse_softmax_cross_entropy_with_logits": ["experimental._nn_ops.sparse_softmax_cross_entropy_with_logits", "experimental.context_stack.get_default"], "experimental._nn_ops.sparse_softmax_cross_entropy_with_logits": [], "experimental.tape": [], "experimental.tape.GradientTape.__init__": ["experimental.context_stack.get_default", "experimental.gradient_registry.get_global_registry", "experimental._tape.Tape", "experimental._tape.TapeContext"], "experimental._tape.Tape": [], "experimental._tape.TapeContext": [], "experimental.tape.GradientTape.watch": [], "experimental.tape.GradientTape.gradient": ["util.nest.pack_sequence_as", "experimental.context_stack.get_default", "util.nest.flatten"], "experimental.tape.GradientTape.__enter__": ["experimental.context_stack.set_default"], "experimental.tape.GradientTape.__exit__": [], "experimental.thread_local_stack": [], "experimental.thread_local_stack.ThreadLocalStack.__init__": ["<builtin>.super"], "experimental.thread_local_stack.ThreadLocalStack.peek": [], "experimental.thread_local_stack.ThreadLocalStack.push": [], "experimental.thread_local_stack.ThreadLocalStack.pop": [], "tools.build_java_api_docs": ["absl.flags.mark_flags_as_required", "absl.flags.DEFINE_string", "absl.flags.DEFINE_bool", "pathlib.Path", "absl.app.run"], "absl.flags.DEFINE_string": [], "absl.flags.DEFINE_bool": [], "pathlib.Path": [], "tools.build_java_api_docs.main": ["shutil.copytree", "tempfile.mkdtemp", "pathlib.Path", "api_generator.gen_java.gen_java_docs"], "shutil.copytree": [], "api_generator.gen_java.gen_java_docs": [], "absl.flags.mark_flags_as_required": [], "tools.build_py_api_docs": ["absl.flags.DEFINE_string", "absl.flags.DEFINE_bool", "absl.app.run"], "tools.build_py_api_docs.main": ["api_generator.generate_lib.DocGenerator", "<builtin>.str", "pathlib.Path"], "api_generator.generate_lib.DocGenerator": [], "queues.feeding_functions": ["<builtin>.dir"], "queues.feeding_queue_runner": ["<builtin>.dir"], "ops.xla_ops_grad": ["framework.ops.RegisterGradient"], "ops.xla_ops_grad._XlaClusterOutputGrad": ["<builtin>.RuntimeError"], "python_binding.tf_cpurt": [], "applications.densenet": ["util.tf_export.keras_export", "keras.layers.VersionAwareLayers", "imagenet_utils.PREPROCESS_INPUT_DOC.format", "<builtin>.setattr"], "keras.layers.VersionAwareLayers": [], "applications.densenet.dense_block": ["<builtin>.str", "<builtin>.range", "applications.densenet.conv_block"], "applications.densenet.conv_block": ["keras.backend.image_data_format"], "applications.densenet.transition_block": ["keras.backend.int_shape", "<builtin>.int", "keras.backend.image_data_format"], "keras.backend.image_data_format": [], "keras.backend.int_shape": ["<builtin>.isinstance", "<builtin>.tuple"], "applications.densenet.DenseNet": ["utils.data_utils.get_file", "engine.training.Model", "io.file_io.file_exists_v2", "applications.imagenet_utils.validate_activation", "applications.imagenet_utils.obtain_input_shape", "utils.layer_utils.get_source_inputs", "keras.backend.image_data_format", "applications.densenet.dense_block", "<builtin>.ValueError", "keras.backend.is_keras_tensor", "applications.densenet.transition_block"], "io.file_io.file_exists_v2": ["io._pywrap_file_io.FileExists", "util.compat.path_to_bytes"], "applications.imagenet_utils.obtain_input_shape": ["<builtin>.len", "<builtin>.ValueError", "warnings.warn", "<builtin>.str"], "keras.backend.is_keras_tensor": ["<builtin>.str", "<builtin>.ValueError", "<builtin>.hasattr", "<builtin>.isinstance", "framework.ops.executing_eagerly_outside_functions", "<builtin>.type"], "applications.imagenet_utils.validate_activation": ["<builtin>.ValueError", "keras.activations.get"], "utils.layer_utils.get_source_inputs": ["util.nest.flatten", "utils.layer_utils.get_source_inputs", "<builtin>.hasattr", "<builtin>.all"], "engine.training.Model": ["tracking.base.no_automatic_dependency_tracking", "utils.generic_utils.default", "docs.doc_controls.doc_in_current_and_subclasses", "docs.doc_controls.do_not_generate_docs", "<builtin>.frozenset", "itertools.chain"], "utils.data_utils.get_file": ["os.path.join", "os.path.exists", "utils.data_utils._extract_archive", "os.path.expanduser", "<builtin>.Exception", "<builtin>.print", "utils.data_utils.validate_file", "utils.io_utils.path_to_string", "urllib.request.urlretrieve", "os.remove", "utils.data_utils._makedirs_exist_ok", "os.access"], "util.tf_export.keras_export": [], "applications.densenet.DenseNet121": ["applications.densenet.DenseNet"], "applications.densenet.DenseNet169": ["applications.densenet.DenseNet"], "applications.densenet.DenseNet201": ["applications.densenet.DenseNet"], "applications.densenet.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.imagenet_utils.preprocess_input": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.ValueError", "keras.backend.image_data_format", "applications.imagenet_utils._preprocess_numpy_input", "applications.imagenet_utils._preprocess_symbolic_input"], "applications.densenet.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.imagenet_utils.decode_predictions": ["<builtin>.open", "json.load", "<builtin>.str", "<builtin>.ValueError", "utils.data_utils.get_file", "<builtin>.len", "<builtin>.tuple"], "imagenet_utils.PREPROCESS_INPUT_DOC.format": [], "applications.efficientnet": ["keras.layers.VersionAwareLayers", "util.tf_export.keras_export"], "applications.efficientnet.EfficientNet": ["applications.efficientnet.EfficientNet.round_repeats", "applications.imagenet_utils.obtain_input_shape", "engine.training.Model", "<builtin>.ValueError", "<builtin>.sum", "utils.layer_utils.get_source_inputs", "<builtin>.enumerate", "<builtin>.range", "<builtin>.chr", "applications.efficientnet.block", "io.file_io.file_exists_v2", "applications.efficientnet.EfficientNet.round_filters", "keras.backend.is_keras_tensor", "applications.imagenet_utils.validate_activation", "copy.deepcopy", "<builtin>.float", "keras.backend.image_data_format", "applications.imagenet_utils.correct_pad", "utils.data_utils.get_file"], "applications.efficientnet.EfficientNet.round_filters": ["<builtin>.int", "<builtin>.max"], "applications.efficientnet.EfficientNet.round_repeats": ["math.ceil", "<builtin>.int"], "applications.imagenet_utils.correct_pad": ["<builtin>.isinstance", "keras.backend.int_shape", "keras.backend.image_data_format"], "applications.efficientnet.block": ["keras.backend.image_data_format", "<builtin>.int", "applications.imagenet_utils.correct_pad", "<builtin>.max"], "applications.efficientnet.EfficientNetB0": ["applications.efficientnet.EfficientNet"], "applications.efficientnet.EfficientNetB1": ["applications.efficientnet.EfficientNet"], "applications.efficientnet.EfficientNetB2": ["applications.efficientnet.EfficientNet"], "applications.efficientnet.EfficientNetB3": ["applications.efficientnet.EfficientNet"], "applications.efficientnet.EfficientNetB4": ["applications.efficientnet.EfficientNet"], "applications.efficientnet.EfficientNetB5": ["applications.efficientnet.EfficientNet"], "applications.efficientnet.EfficientNetB6": ["applications.efficientnet.EfficientNet"], "applications.efficientnet.EfficientNetB7": ["applications.efficientnet.EfficientNet"], "applications.efficientnet.preprocess_input": [], "applications.efficientnet.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.efficientnet_weight_update_util": ["applications.efficientnet_weight_update_util.write_ckpt_to_h5", "argparse.ArgumentParser"], "applications.efficientnet_weight_update_util.write_ckpt_to_h5": ["applications.efficientnet_weight_update_util.get_keras_blocks", "applications.efficientnet_weight_update_util.get_tf_blocks", "<builtin>.zip", "tensorflow.train.load_variable", "warnings.warn", "<builtin>.any", "applications.efficientnet_weight_update_util.check_match", "applications.efficientnet_weight_update_util.keras_name_to_tf_name_block", "applications.efficientnet_weight_update_util.keras_name_to_tf_name_stem_top", "<builtin>.print", "<builtin>.ValueError", "<builtin>.len", "applications.efficientnet_weight_update_util.get_variable_names_from_ckpt"], "applications.efficientnet_weight_update_util.get_variable_names_from_ckpt": ["tensorflow.train.list_variables"], "applications.efficientnet_weight_update_util.get_keras_blocks": ["<builtin>.sorted"], "applications.efficientnet_weight_update_util.get_tf_blocks": ["<builtin>.sorted"], "applications.efficientnet_weight_update_util.check_match": ["<builtin>.set", "warnings.warn", "applications.efficientnet_weight_update_util.keras_name_to_tf_name_block", "<builtin>.ValueError", "<builtin>.len"], "applications.efficientnet_weight_update_util.keras_name_to_tf_name_block": ["<builtin>.ValueError"], "applications.efficientnet_weight_update_util.keras_name_to_tf_name_stem_top": ["<builtin>.KeyError"], "tensorflow.train.load_variable": [], "tensorflow.train.list_variables": [], "applications.efficientnet_weight_update_util.get_tf_blocks.<lambda1>": ["<builtin>.int"], "applications.imagenet_utils": ["util.tf_export.keras_export"], "applications.imagenet_utils._preprocess_numpy_input": ["<builtin>.issubclass", "keras.backend.floatx"], "applications.imagenet_utils._preprocess_symbolic_input": ["keras.backend.constant", "numpy.array", "keras.backend.ndim", "keras.backend.dtype", "keras.backend.bias_add", "keras.backend.reshape", "keras.backend.cast"], "applications.imagenet_utils.decode_predictions.<lambda1>": [], "keras.backend.floatx": [], "keras.backend.ndim": [], "keras.backend.constant": ["framework.constant_op.constant", "keras.backend_config.floatx"], "keras.backend.dtype": [], "keras.backend.cast": ["ops.math_ops.cast"], "keras.backend.bias_add": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "ops.nn.bias_add", "keras.backend.reshape", "keras.backend.int_shape", "<builtin>.len", "keras.backend.ndim"], "keras.backend.reshape": ["ops.array_ops.reshape"], "keras.activations.get": ["<builtin>.TypeError", "<builtin>.str", "<builtin>.callable", "<builtin>.isinstance", "keras.activations.deserialize"], "applications.inception_resnet_v2": ["imagenet_utils.PREPROCESS_INPUT_DOC.format", "util.tf_export.keras_export"], "applications.inception_resnet_v2.InceptionResNetV2": ["keras.layers.VersionAwareLayers", "keras.backend.is_keras_tensor", "io.file_io.file_exists_v2", "keras.backend.image_data_format", "applications.imagenet_utils.validate_activation", "utils.layer_utils.get_source_inputs", "applications.imagenet_utils.obtain_input_shape", "engine.training.Model", "<builtin>.range", "applications.inception_resnet_v2.inception_resnet_block", "applications.inception_resnet_v2.conv2d_bn", "utils.data_utils.get_file", "<builtin>.ValueError"], "applications.inception_resnet_v2.conv2d_bn": ["keras.backend.image_data_format"], "applications.inception_resnet_v2.inception_resnet_block": ["keras.backend.image_data_format", "keras.backend.int_shape", "applications.inception_resnet_v2.conv2d_bn", "<builtin>.str", "<builtin>.ValueError"], "applications.inception_resnet_v2.inception_resnet_block.<lambda1>": [], "applications.inception_resnet_v2.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.inception_resnet_v2.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.inception_v3": ["keras.layers.VersionAwareLayers", "imagenet_utils.PREPROCESS_INPUT_DOC.format", "util.tf_export.keras_export"], "applications.inception_v3.InceptionV3": ["<builtin>.str", "applications.imagenet_utils.obtain_input_shape", "<builtin>.range", "io.file_io.file_exists_v2", "applications.imagenet_utils.validate_activation", "keras.backend.is_keras_tensor", "applications.inception_v3.conv2d_bn", "engine.training.Model", "utils.data_utils.get_file", "utils.layer_utils.get_source_inputs", "keras.backend.image_data_format", "<builtin>.ValueError"], "applications.inception_v3.conv2d_bn": ["keras.backend.image_data_format"], "applications.inception_v3.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.inception_v3.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.mobilenet": ["util.tf_export.keras_export", "imagenet_utils.PREPROCESS_INPUT_DOC.format"], "applications.mobilenet.MobileNet": ["keras.layers.VersionAwareLayers", "utils.layer_utils.get_source_inputs", "platform.tf_logging.warning", "<builtin>.ValueError", "<builtin>.int", "keras.backend.image_data_format", "keras.backend.is_keras_tensor", "applications.mobilenet._conv_block", "utils.data_utils.get_file", "engine.training.Model", "io.file_io.file_exists_v2", "applications.imagenet_utils.obtain_input_shape", "applications.imagenet_utils.validate_activation", "applications.mobilenet._depthwise_conv_block"], "applications.mobilenet._conv_block": ["keras.backend.image_data_format", "<builtin>.int"], "applications.mobilenet._depthwise_conv_block": ["keras.backend.image_data_format", "<builtin>.int"], "applications.mobilenet.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.mobilenet.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.mobilenet_v2": ["util.tf_export.keras_export", "imagenet_utils.PREPROCESS_INPUT_DOC.format"], "applications.mobilenet_v2.MobileNetV2": ["applications.mobilenet_v2._inverted_res_block", "utils.layer_utils.get_source_inputs", "engine.training.Model", "<builtin>.str", "utils.data_utils.get_file", "keras.backend.image_data_format", "keras.layers.VersionAwareLayers", "<builtin>.type", "io.file_io.file_exists_v2", "keras.backend.int_shape", "keras.backend.is_keras_tensor", "applications.imagenet_utils.validate_activation", "<builtin>.float", "applications.imagenet_utils.obtain_input_shape", "applications.mobilenet_v2._make_divisible", "<builtin>.ValueError", "platform.tf_logging.warning"], "applications.mobilenet_v2._make_divisible": ["<builtin>.max", "<builtin>.int"], "applications.mobilenet_v2._inverted_res_block": ["applications.imagenet_utils.correct_pad", "keras.backend.image_data_format", "keras.backend.int_shape", "<builtin>.int", "applications.mobilenet_v2._make_divisible"], "applications.mobilenet_v2.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.mobilenet_v2.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.mobilenet_v3": ["util.tf_export.keras_export", "keras.layers.VersionAwareLayers"], "applications.mobilenet_v3.MobileNetV3": ["keras.backend.is_keras_tensor", "keras.backend.int_shape", "<builtin>.type", "<builtin>.str", "applications.mobilenet_v3.MobileNetV3Large.stack_fn", "platform.tf_logging.warning", "io.file_io.file_exists_v2", "utils.data_utils.get_file", "applications.imagenet_utils.validate_activation", "utils.layer_utils.get_source_inputs", "<builtin>.ValueError", "applications.mobilenet_v3.relu", "applications.mobilenet_v3._depth", "keras.backend.image_data_format", "keras.models.Model", "applications.mobilenet_v3.hard_swish", "applications.mobilenet_v3.MobileNetV3Small.stack_fn"], "applications.mobilenet_v3.relu": [], "applications.mobilenet_v3.hard_swish": [], "applications.mobilenet_v3.MobileNetV3Large.stack_fn": ["applications.mobilenet_v3._inverted_res_block", "applications.mobilenet_v3.MobileNetV3Large.stack_fn.depth"], "applications.mobilenet_v3.MobileNetV3Small.stack_fn": ["applications.mobilenet_v3._inverted_res_block", "applications.mobilenet_v3.MobileNetV3Small.stack_fn.depth"], "applications.mobilenet_v3._depth": ["<builtin>.int", "<builtin>.max"], "keras.models.Model": [], "applications.mobilenet_v3.MobileNetV3Small": ["applications.mobilenet_v3.MobileNetV3"], "applications.mobilenet_v3.MobileNetV3Small.stack_fn.depth": ["applications.mobilenet_v3._depth"], "applications.mobilenet_v3._inverted_res_block": ["applications.mobilenet_v3._se_block", "keras.backend.int_shape", "applications.mobilenet_v3._depth", "applications.mobilenet_v3.relu", "keras.backend.image_data_format", "applications.imagenet_utils.correct_pad", "applications.mobilenet_v3.hard_swish"], "applications.mobilenet_v3.MobileNetV3Large": ["applications.mobilenet_v3.MobileNetV3"], "applications.mobilenet_v3.MobileNetV3Large.stack_fn.depth": ["applications.mobilenet_v3._depth"], "applications.mobilenet_v3.hard_sigmoid": [], "applications.mobilenet_v3._se_block": ["applications.mobilenet_v3.hard_sigmoid", "applications.mobilenet_v3._depth"], "applications.mobilenet_v3.preprocess_input": [], "applications.mobilenet_v3.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.nasnet": ["imagenet_utils.PREPROCESS_INPUT_DOC.format", "util.tf_export.keras_export", "keras.layers.VersionAwareLayers"], "applications.nasnet.NASNet": ["keras.backend.is_keras_tensor", "applications.imagenet_utils.validate_activation", "keras.backend.image_data_format", "io.file_io.file_exists_v2", "keras.backend.set_image_data_format", "applications.nasnet._reduction_a_cell", "applications.nasnet._normal_a_cell", "utils.layer_utils.get_source_inputs", "applications.imagenet_utils.obtain_input_shape", "platform.tf_logging.warning", "utils.data_utils.get_file", "engine.training.Model", "<builtin>.isinstance", "<builtin>.range", "<builtin>.ValueError", "<builtin>.str"], "keras.backend.set_image_data_format": [], "applications.nasnet._reduction_a_cell": ["keras.backend.name_scope", "applications.imagenet_utils.correct_pad", "keras.backend.image_data_format", "applications.nasnet._separable_conv_block", "applications.nasnet._adjust_block"], "applications.nasnet._normal_a_cell": ["keras.backend.name_scope", "applications.nasnet._separable_conv_block", "applications.nasnet._adjust_block", "keras.backend.image_data_format"], "applications.nasnet.NASNetMobile": ["applications.nasnet.NASNet"], "applications.nasnet.NASNetLarge": ["applications.nasnet.NASNet"], "applications.nasnet._separable_conv_block": ["keras.backend.name_scope", "applications.imagenet_utils.correct_pad", "keras.backend.image_data_format"], "keras.backend.name_scope": ["framework.ops.name_scope_v2"], "applications.nasnet._adjust_block": ["keras.backend.name_scope", "keras.backend.int_shape", "keras.backend.image_data_format"], "applications.nasnet.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.nasnet.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.resnet": ["util.tf_export.keras_export", "imagenet_utils.PREPROCESS_INPUT_DOC.format", "<builtin>.setattr"], "applications.resnet.ResNet": ["applications.resnet.ResNet101.stack_fn", "applications.resnet.ResNet152.stack_fn", "applications.resnet.ResNet50.stack_fn", "engine.training.Model", "keras.backend.image_data_format", "applications.imagenet_utils.obtain_input_shape", "io.file_io.file_exists_v2", "utils.layer_utils.get_source_inputs", "keras.backend.is_keras_tensor", "applications.imagenet_utils.validate_activation", "keras.layers.VersionAwareLayers", "utils.data_utils.get_file", "<builtin>.ValueError"], "applications.resnet.ResNet152.stack_fn": ["applications.resnet.stack1"], "applications.resnet.ResNet50.stack_fn": ["applications.resnet.stack1"], "applications.resnet.ResNet101.stack_fn": ["applications.resnet.stack1"], "applications.resnet.block1": ["keras.backend.image_data_format"], "applications.resnet.stack1": ["applications.resnet.block1", "<builtin>.range", "<builtin>.str"], "applications.resnet.block2": ["keras.backend.image_data_format"], "applications.resnet.stack2": ["applications.resnet.block2", "<builtin>.range", "<builtin>.str"], "applications.resnet.block3": ["keras.backend.reshape", "keras.backend.shape", "keras.backend.concatenate", "keras.backend.image_data_format"], "keras.backend.shape": ["ops.array_ops.shape"], "keras.backend.concatenate": ["keras.backend.is_sparse", "ops.array_ops.concat", "keras.backend.to_dense", "<builtin>.isinstance", "ops.sparse_ops.sparse_concat", "keras.backend.all", "keras.backend.ndim"], "applications.resnet.block3.<lambda1>": ["<builtin>.range", "<builtin>.sum"], "applications.resnet.stack3": ["applications.resnet.block3", "<builtin>.range", "<builtin>.str"], "applications.resnet.ResNet50": ["applications.resnet.ResNet"], "applications.resnet.ResNet101": ["applications.resnet.ResNet"], "applications.resnet.ResNet152": ["applications.resnet.ResNet"], "applications.resnet.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.resnet.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.resnet_v2": ["util.tf_export.keras_export", "imagenet_utils.PREPROCESS_INPUT_DOC.format", "<builtin>.setattr"], "applications.resnet_v2.ResNet50V2": ["applications.resnet.ResNet"], "applications.resnet_v2.ResNet50V2.stack_fn": ["applications.resnet.stack2"], "applications.resnet_v2.ResNet101V2": ["applications.resnet.ResNet"], "applications.resnet_v2.ResNet101V2.stack_fn": ["applications.resnet.stack2"], "applications.resnet_v2.ResNet152V2": ["applications.resnet.ResNet"], "applications.resnet_v2.ResNet152V2.stack_fn": ["applications.resnet.stack2"], "applications.resnet_v2.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.resnet_v2.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.vgg16": ["imagenet_utils.PREPROCESS_INPUT_DOC.format", "util.tf_export.keras_export", "keras.layers.VersionAwareLayers"], "applications.vgg16.VGG16": ["keras.backend.image_data_format", "applications.imagenet_utils.validate_activation", "engine.training.Model", "keras.backend.is_keras_tensor", "applications.imagenet_utils.obtain_input_shape", "utils.layer_utils.get_source_inputs", "utils.data_utils.get_file", "<builtin>.ValueError", "io.file_io.file_exists_v2"], "applications.vgg16.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.vgg16.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.vgg19": ["imagenet_utils.PREPROCESS_INPUT_DOC.format", "util.tf_export.keras_export", "keras.layers.VersionAwareLayers"], "applications.vgg19.VGG19": ["engine.training.Model", "io.file_io.file_exists_v2", "<builtin>.ValueError", "utils.data_utils.get_file", "applications.imagenet_utils.obtain_input_shape", "applications.imagenet_utils.validate_activation", "keras.backend.is_keras_tensor", "keras.backend.image_data_format", "utils.layer_utils.get_source_inputs"], "applications.vgg19.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.vgg19.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "applications.xception": ["keras.layers.VersionAwareLayers", "imagenet_utils.PREPROCESS_INPUT_DOC.format", "util.tf_export.keras_export"], "applications.xception.Xception": ["<builtin>.ValueError", "io.file_io.file_exists_v2", "applications.imagenet_utils.obtain_input_shape", "keras.backend.image_data_format", "applications.imagenet_utils.validate_activation", "<builtin>.str", "utils.layer_utils.get_source_inputs", "engine.training.Model", "utils.data_utils.get_file", "<builtin>.range", "keras.backend.is_keras_tensor"], "applications.xception.preprocess_input": ["applications.imagenet_utils.preprocess_input"], "applications.xception.decode_predictions": ["applications.imagenet_utils.decode_predictions"], "benchmarks.benchmark_util": [], "benchmarks.benchmark_util.get_benchmark_name": ["<builtin>.ValueError"], "benchmarks.benchmark_util.generate_benchmark_params_cpu_gpu": [], "benchmarks.benchmark_util.get_keras_examples_metadata": ["<builtin>.str"], "benchmarks.benchmark_util.TimerCallBack.__init__": ["timeit.default_timer"], "timeit.default_timer": [], "benchmarks.benchmark_util.TimerCallBack.on_epoch_begin": ["timeit.default_timer"], "benchmarks.benchmark_util.TimerCallBack.on_epoch_end": ["timeit.default_timer"], "benchmarks.benchmark_util.TimerCallBack.on_batch_end": ["timeit.default_timer"], "benchmarks.benchmark_util.measure_performance": ["timeit.default_timer", "numpy.mean", "<builtin>.ValueError", "benchmarks.distribution_util.get_strategy_scope", "benchmarks.distribution_util.get_distribution_strategy", "benchmarks.benchmark_util.TimerCallBack.__init__", "<builtin>.range"], "benchmarks.distribution_util.get_distribution_strategy": ["distribute.experimental.MultiWorkerMirroredStrategy", "benchmarks.distribution_util._collective_communication", "tensorflow.distribute.OneDeviceStrategy", "<builtin>.range", "<builtin>.ValueError", "tensorflow.distribute.MirroredStrategy", "benchmarks.distribution_util._mirrored_cross_device_ops"], "benchmarks.distribution_util.get_strategy_scope": [], "benchmarks.distribution_util": [], "benchmarks.distribution_util._collective_communication": ["<builtin>.ValueError"], "benchmarks.distribution_util._mirrored_cross_device_ops": ["<builtin>.ValueError"], "distribute.experimental.MultiWorkerMirroredStrategy": [], "tensorflow.distribute.OneDeviceStrategy": [], "tensorflow.distribute.MirroredStrategy": [], "benchmarks.distribution_util.configure_cluster": ["json.dumps", "<builtin>.len", "json.loads", "os.environ.get", "<builtin>.ValueError"], "benchmarks.distribution_util.DummyContextManager.__enter__": [], "benchmarks.distribution_util.DummyContextManager.__exit__": [], "benchmarks.model_memory_profile": ["absl.flags.mark_flags_as_required", "absl.flags.DEFINE_string", "absl.app.run"], "benchmarks.model_memory_profile._imdb_lstm_model": ["tensorflow.keras.Sequential", "keras.layers.LSTM", "keras.layers.Dense", "numpy.random.random", "keras.layers.Embedding", "numpy.random.randint"], "numpy.random.random": [], "tensorflow.keras.Sequential": [], "keras.layers.Embedding": [], "keras.layers.LSTM": [], "benchmarks.model_memory_profile.main": ["absl.logging.info"], "absl.logging.info": [], "datasets.boston_housing": ["util.tf_export.keras_export"], "datasets.boston_housing.load_data": ["numpy.random.RandomState", "<builtin>.int", "numpy.arange", "numpy.load", "<builtin>.len", "utils.data_utils.get_file", "numpy.array"], "numpy.load": [], "numpy.random.RandomState": [], "datasets.cifar100": ["util.tf_export.keras_export"], "datasets.cifar100.load_data": ["os.path.join", "datasets.cifar.load_batch", "utils.data_utils.get_file", "keras.backend.image_data_format", "<builtin>.ValueError", "numpy.reshape", "<builtin>.len"], "datasets.cifar.load_batch": ["_pickle.load", "<builtin>.open"], "datasets.cifar10": ["util.tf_export.keras_export"], "datasets.cifar10.load_data": ["numpy.reshape", "<builtin>.range", "numpy.empty", "os.path.join", "<builtin>.len", "keras.backend.image_data_format", "<builtin>.str", "datasets.cifar.load_batch", "utils.data_utils.get_file"], "numpy.empty": [], "datasets.cifar": [], "_pickle.load": [], "datasets.fashion_mnist": ["util.tf_export.keras_export"], "datasets.fashion_mnist.load_data": ["numpy.frombuffer", "<builtin>.len", "os.path.join", "utils.data_utils.get_file", "gzip.open"], "numpy.frombuffer": [], "datasets.imdb": ["util.tf_export.keras_export"], "datasets.imdb.load_data": ["<builtin>.max", "numpy.load", "numpy.array", "<builtin>.len", "<builtin>.str", "preprocessing.sequence._remove_long_seq", "utils.data_utils.get_file", "platform.tf_logging.warning", "numpy.arange", "numpy.random.RandomState", "numpy.concatenate", "<builtin>.TypeError", "<builtin>.ValueError"], "preprocessing.sequence._remove_long_seq": [], "numpy.concatenate": [], "datasets.imdb.get_word_index": ["utils.data_utils.get_file", "json.load", "<builtin>.open"], "datasets.mnist": ["util.tf_export.keras_export"], "datasets.reuters": ["util.tf_export.keras_export"], "datasets.reuters.load_data": ["utils.data_utils.get_file", "preprocessing.sequence._remove_long_seq", "<builtin>.max", "platform.tf_logging.warning", "<builtin>.TypeError", "<builtin>.int", "numpy.array", "numpy.load", "<builtin>.len", "numpy.random.RandomState", "<builtin>.str", "numpy.arange"], "datasets.reuters.get_word_index": ["utils.data_utils.get_file", "json.load", "<builtin>.open"], "distribute.distributed_file_utils": [], "distribute.distributed_file_utils._get_base_dirpath": ["<builtin>.str"], "distribute.distributed_file_utils._is_temp_dir": ["distribute.distributed_file_utils._get_base_dirpath"], "distribute.distributed_file_utils._get_temp_dir": ["distribute.distributed_file_utils._get_base_dirpath", "io.file_io.recursive_create_dir_v2", "distribute.distributed_file_utils._is_temp_dir", "os.path.join"], "io.file_io.recursive_create_dir_v2": ["io._pywrap_file_io.RecursivelyCreateDir", "util.compat.path_to_bytes"], "distribute.distributed_file_utils.write_dirpath": ["distribute.distribution_strategy_context.get_strategy", "distribute.distributed_file_utils._get_temp_dir"], "distribute.distribution_strategy_context.get_strategy": ["distribute.distribution_strategy_context._get_per_thread_mode"], "distribute.distributed_file_utils.remove_temp_dirpath": ["io.file_io.delete_recursively", "distribute.distribution_strategy_context.get_strategy", "distribute.distributed_file_utils._get_temp_dir"], "distribute.distributed_file_utils.write_filepath": ["os.path.join", "os.path.basename", "distribute.distributed_file_utils.write_dirpath", "os.path.dirname"], "distribute.distributed_file_utils.remove_temp_dir_with_filepath": ["distribute.distributed_file_utils.remove_temp_dirpath", "os.path.dirname"], "distribute.distributed_training_utils": [], "distribute.distributed_training_utils.global_batch_size_supported": [], "distribute.distributed_training_utils.call_replica_local_fn": ["distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy", "keras.backend.is_tpu_strategy", "distribute.distribution_strategy_context.in_cross_replica_context"], "distribute.distribution_strategy_context.has_strategy": ["distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context._get_default_strategy"], "keras.backend.is_tpu_strategy": ["keras.backend._is_tpu_strategy_class"], "distribute.distribution_strategy_context.in_cross_replica_context": ["distribute.distribution_strategy_context._get_per_thread_mode"], "distribute.distributed_training_utils.is_distributed_variable": ["<builtin>.isinstance"], "distribute.distributed_training_utils_v1": ["utils.tf_contextlib.contextmanager"], "distribute.distributed_training_utils_v1.set_weights": ["<builtin>.len", "framework.ops.executing_eagerly_outside_functions", "<builtin>.zip", "keras.backend.get_session"], "keras.backend.get_session": ["keras.backend._initialize_variables", "keras.backend._get_session"], "distribute.distributed_training_utils_v1.unwrap_values": ["distribute.distributed_training_utils_v1.unwrap_outputs", "distribute.distributed_training_utils_v1.flatten_per_replica_values"], "distribute.distributed_training_utils_v1.flatten_per_replica_values": ["util.nest.flatten"], "distribute.distributed_training_utils_v1.unwrap_outputs": ["<builtin>.isinstance", "framework.ops.executing_eagerly_outside_functions", "keras.backend.is_tpu_strategy", "distribute.distributed_training_utils_v1.flatten_per_replica_values"], "distribute.distributed_training_utils_v1.unwrap_output_dict": ["framework.ops.executing_eagerly_outside_functions", "keras.backend.is_tpu_strategy", "distribute.distributed_training_utils_v1.flatten_per_replica_values"], "distribute.distributed_training_utils_v1.validate_callbacks": ["<builtin>.isinstance", "<builtin>.ValueError", "platform.tf_logging.warning", "<builtin>.UserWarning", "<builtin>.getattr"], "<builtin>.UserWarning": [], "distribute.distributed_training_utils_v1.validate_distributed_dataset_inputs": ["distribute.distributed_training_utils_v1.validate_per_replica_inputs"], "distribute.distributed_training_utils_v1.validate_per_replica_inputs": ["distribute.distributed_training_utils_v1.validate_all_tensor_types", "<builtin>.type", "eager.context.executing_eagerly", "<builtin>.ValueError", "distribute.distributed_training_utils_v1.validate_all_tensor_shapes", "framework.tensor_util.is_tf_type", "util.nest.flatten"], "distribute.distributed_training_utils_v1.validate_all_tensor_shapes": ["<builtin>.range", "<builtin>.len", "<builtin>.ValueError"], "distribute.distributed_training_utils_v1.validate_all_tensor_types": ["<builtin>.range", "<builtin>.len", "<builtin>.ValueError"], "distribute.distributed_training_utils_v1._wait_for_variable_initialization": ["keras.backend._get_variables", "keras.backend.get_graph", "ops.variables.is_variable_initialized", "<builtin>.getattr", "<builtin>.zip"], "keras.backend.get_graph": ["framework.ops.get_default_graph", "eager.context.executing_eagerly", "<builtin>.getattr", "framework.func_graph.FuncGraph"], "keras.backend._get_variables": ["eager.context.executing_eagerly"], "ops.variables.is_variable_initialized": ["ops.state_ops.is_variable_initialized"], "distribute.distributed_training_utils_v1.init_restore_or_wait_for_variables": ["keras.backend._initialize_variables", "keras.backend._get_session"], "keras.backend._get_session": ["framework.ops.inside_function", "keras.backend._current_graph", "client.session.Session", "keras.backend.configure_and_create_distributed_session", "distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy", "framework.ops.get_default_session", "keras.backend.get_default_session_config", "<builtin>.getattr", "<builtin>.RuntimeError"], "keras.backend._initialize_variables": ["keras.backend.get_graph", "<builtin>.enumerate", "ops.variables.variables_initializer", "<builtin>.zip", "ops.variables.is_variable_initialized", "keras.backend._get_variables", "<builtin>.getattr"], "distribute.distributed_training_utils_v1.validate_inputs": ["<builtin>.isinstance", "<builtin>.ValueError"], "distribute.distributed_training_utils_v1.is_dataset_shape_fully_defined": ["util.nest.flatten", "ops.dataset_ops.get_legacy_output_shapes"], "distribute.distributed_training_utils_v1.process_batch_and_step_size": ["<builtin>.isinstance", "distribute.distributed_training_utils_v1.get_input_params", "util.nest.flatten", "<builtin>.int"], "distribute.distributed_training_utils_v1.get_input_params": ["keras.backend.is_tpu_strategy", "<builtin>.min", "eager.context.executing_eagerly", "<builtin>.ValueError", "numpy.ceil", "distribute.distributed_training_utils.global_batch_size_supported"], "distribute.distributed_training_utils_v1.get_batch_dimension": ["util.nest.flatten", "ops.dataset_ops.get_legacy_output_shapes"], "distribute.distributed_training_utils_v1.get_iterator": ["distribute.distributed_training_utils_v1.initialize_iterator"], "distribute.distributed_training_utils_v1.initialize_iterator": ["ops.control_flow_ops.group", "eager.context.executing_eagerly", "keras.backend.get_session"], "distribute.distributed_training_utils_v1._get_input_from_iterator": ["<builtin>.len", "util.nest.flatten", "distribute.distributed_training_utils_v1.validate_distributed_dataset_inputs"], "distribute.distributed_training_utils_v1._prepare_feed_values": ["<builtin>.NotImplementedError", "keras.backend.is_tpu_strategy", "distribute.distributed_training_utils_v1.flatten_per_replica_values", "<builtin>.isinstance", "eager.context.executing_eagerly", "distribute.distributed_training_utils_v1._get_input_from_iterator", "<builtin>.ValueError", "engine.training_utils_v1.ModelInputs", "<builtin>.tuple", "distribute.distributed_training_utils_v1.is_distributing_by_cloning", "util.nest.map_structure"], "distribute.distributed_training_utils_v1.is_distributing_by_cloning": ["<builtin>.bool", "keras.backend.is_tpu_strategy", "framework.ops.executing_eagerly_outside_functions"], "engine.training_utils_v1.ModelInputs": [], "distribute.distributed_training_utils_v1._custom_compile_for_predict": [], "distribute.distributed_training_utils_v1._build_network_on_replica": ["keras.models._clone_sequential_model", "<builtin>.isinstance", "distribute.distributed_training_utils_v1._build_network_on_replica._upcast_low_precision_outputs", "keras.models._clone_functional_model", "util.nest.flatten", "keras.metrics.clone_metrics", "distribute.distributed_training_utils_v1._custom_compile_for_predict"], "keras.models._clone_sequential_model": ["keras.models._clone_layer", "utils.generic_utils.to_list", "<builtin>.ValueError", "<builtin>.zip", "keras.models._make_new_nodes", "keras.models._remove_ancillary_layers", "<builtin>.len", "<builtin>.callable", "<builtin>.list", "keras.backend.is_keras_tensor", "<builtin>.str", "engine.sequential.Sequential", "keras.models._insert_ancillary_layers", "engine.input_layer.Input", "<builtin>.isinstance", "<builtin>.enumerate"], "keras.models._clone_functional_model": ["<builtin>.ValueError", "engine.functional._should_skip_first_node", "keras.models._clone_layers_and_model_config", "keras.models._insert_ancillary_layers", "<builtin>.callable", "keras.backend.is_keras_tensor", "engine.functional.reconstruct_from_config", "engine.training.Model", "util.nest.flatten", "engine.input_layer.Input", "<builtin>.isinstance", "<builtin>.enumerate"], "distribute.distributed_training_utils_v1._build_network_on_replica._upcast_low_precision_outputs": ["ops.math_ops.cast"], "keras.metrics.clone_metrics": ["util.nest.map_structure"], "distribute.distributed_training_utils_v1._build_distributed_network": ["distribute.distributed_training_utils_v1.set_distributed_model", "keras.backend.get_graph"], "distribute.distributed_training_utils_v1.set_distributed_model": ["distribute.distributed_training_utils_v1._generate_cache_key"], "distribute.distributed_training_utils_v1._clone_and_build_model": ["keras.metrics.clone_metrics", "<builtin>.isinstance", "distribute.distributed_training_utils_v1._clone_and_build_model._upcast_low_precision_outputs", "util.nest.flatten", "keras.models.clone_model", "distribute.distributed_training_utils_v1._custom_compile_for_predict"], "keras.models.clone_model": ["keras.models._clone_sequential_model", "utils.generic_utils.DisableSharedObjectScope", "keras.models._clone_functional_model", "<builtin>.isinstance"], "distribute.distributed_training_utils_v1._clone_and_build_model._upcast_low_precision_outputs": ["ops.math_ops.cast"], "distribute.distributed_training_utils_v1.clone_model_on_replicas": ["distribute.distributed_training_utils_v1.set_distributed_model", "keras.backend.get_graph"], "distribute.distributed_training_utils_v1._make_execution_function": ["distribute.distributed_training_utils_v1.get_distributed_function", "distribute.distributed_training_utils_v1._make_execution_function_with_cloning", "distribute.distributed_training_utils_v1.set_distributed_function", "distribute.distributed_training_utils_v1._make_execution_function_without_cloning", "distribute.distributed_training_utils_v1.is_distributing_by_cloning"], "distribute.distributed_training_utils_v1._make_execution_function_with_cloning": ["distribute.distributed_training_utils_v1.get_distributed_model", "distribute.distributed_training_utils_v1._make_eager_execution_function", "<builtin>.hasattr", "eager.context.executing_eagerly", "distribute.distributed_training_utils_v1._make_replicated_models_with_cloning", "distribute.distributed_training_utils_v1._make_graph_execution_function"], "distribute.distributed_training_utils_v1.get_distributed_function": ["distribute.distributed_training_utils_v1._generate_cache_key"], "distribute.distributed_training_utils_v1._make_execution_function_without_cloning": ["distribute.distributed_training_utils_v1._make_replica_execution_function", "eager.def_function.function"], "distribute.distributed_training_utils_v1.set_distributed_function": ["distribute.distributed_training_utils_v1._generate_cache_key"], "distribute.distributed_training_utils_v1._make_replica_execution_function": ["functools.partial"], "distribute.distributed_training_utils_v1._make_execution_function_without_cloning.distributed_function": ["distribute.distributed_training_utils_v1.unwrap_outputs"], "distribute.distributed_training_utils_v1._make_execution_function_without_cloning.execution_function": ["distribute.distributed_training_utils_v1._make_execution_function_without_cloning.distributed_function"], "distribute.distributed_training_utils_v1._make_replica_execution_function.predict_on_batch": [], "distribute.distributed_training_utils_v1._make_replicated_models_with_cloning": ["distribute.distributed_training_utils_v1._build_distributed_network", "distribute.distributed_training_utils_v1.clone_model_on_replicas"], "distribute.distributed_training_utils_v1.get_distributed_model": ["distribute.distributed_training_utils_v1._generate_cache_key"], "distribute.distributed_training_utils_v1._make_eager_execution_function": ["distribute.distributed_training_utils_v1.get_distributed_model", "keras.backend.get_graph", "distribute.distributed_training_utils_v1.unwrap_values", "keras.backend._scratch_graph", "keras.backend.function"], "distribute.distributed_training_utils_v1._make_graph_execution_function": ["distribute.distributed_training_utils_v1.init_restore_or_wait_for_variables", "distribute.distributed_training_utils_v1.unwrap_values", "distribute.distributed_training_utils_v1.get_distributed_model", "keras.backend.function"], "distribute.distributed_training_utils_v1._make_graph_execution_function._per_replica_function": [], "keras.backend.function": ["keras.models.Model", "<builtin>.ValueError", "<builtin>.isinstance", "keras.backend.GraphExecutionFunction.__init__", "framework.ops.executing_eagerly_outside_functions", "<builtin>.len", "utils.tf_inspect.getfullargspec"], "distribute.distributed_training_utils_v1._make_eager_execution_function._per_replica_function": [], "keras.backend._scratch_graph": ["<builtin>.ValueError", "<builtin>.getattr", "framework.func_graph.FuncGraph"], "distribute.distributed_training_utils_v1._copy_weights_to_distributed_model": ["distribute.distributed_training_utils_v1.get_distributed_model", "distribute.distributed_training_utils_v1.set_weights"], "distribute.distributed_training_utils_v1._copy_weights_to_original_model": ["distribute.distributed_training_utils_v1.get_distributed_model"], "distribute.distributed_training_utils_v1._per_replica_aggregate_batch": ["<builtin>.range", "<builtin>.len", "util.nest.flatten", "distribute.distributed_training_utils_v1.concat_along_batch_dimension"], "distribute.distributed_training_utils_v1.concat_along_batch_dimension": ["ops.sparse_ops.sparse_concat_v2", "<builtin>.isinstance", "ops.array_ops.concat", "numpy.concatenate"], "distribute.distributed_training_utils_v1._reset_metrics": ["distribute.distributed_training_utils_v1.get_distributed_model"], "distribute.distributed_training_utils_v1._generate_cache_key": ["<builtin>.hash"], "utils.tf_contextlib.contextmanager": ["contextlib.contextmanager", "util.tf_decorator.make_decorator"], "distribute.distributed_training_utils_v1.distributed_scope": ["keras.backend.learning_phase_scope"], "keras.backend.learning_phase_scope": ["warnings.warn", "keras.backend.deprecated_internal_learning_phase_scope"], "distribute.distributed_training_utils_v1.is_current_worker_chief": ["distribute.distribute_coordinator_utils.get_current_worker_context"], "distribute.distribute_coordinator_utils.get_current_worker_context": [], "distribute.distributed_training_utils_v1.filter_distributed_callbacks": ["distribute.distributed_training_utils_v1.is_current_worker_chief", "<builtin>.isinstance", "<builtin>.ValueError", "platform.tf_logging.warning"], "distribute.distributed_training_utils_v1._update_sample_weight_modes": ["distribute.distributed_training_utils_v1.get_distributed_model", "distribute.distributed_training_utils_v1.flatten_per_replica_values", "distribute.distributed_training_utils_v1._make_replicated_models_with_cloning", "<builtin>.any", "distribute.distributed_training_utils_v1.is_distributing_by_cloning", "<builtin>.zip"], "ops.sparse_ops.sparse_concat_v2": ["ops.array_ops.concat", "<builtin>.range", "framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "<builtin>.sum", "framework.tensor_shape.unknown_shape", "framework.tensor_shape.TensorShape", "ops.math_ops.reduce_max", "ops.sparse_ops._convert_to_sparse_tensors", "ops.array_ops.reshape", "<builtin>.all", "ops.gen_sparse_ops.sparse_concat", "<builtin>.len", "framework.tensor_shape.dimension_at_index", "<builtin>.max"], "distribute.distribute_coordinator_utils": ["threading.local"], "distribute.distribute_coordinator_utils._get_num_workers": ["<builtin>.len"], "distribute.distribute_coordinator_utils._WorkerContext.__init__": ["distribute.distribute_coordinator_utils._get_num_workers", "distribute.distribute_coordinator_utils._WorkerContext._is_chief", "distribute.distribute_coordinator_utils._WorkerContext._get_master_target"], "distribute.distribute_coordinator_utils._WorkerContext._get_master_target": [], "distribute.distribute_coordinator_utils._WorkerContext._is_chief": [], "distribute.distribute_coordinator_utils._WorkerContext._debug_message": [], "distribute.distribute_coordinator_utils._WorkerContext.__enter__": ["distribute.distribute_coordinator_utils.get_current_worker_context", "<builtin>.ValueError", "distribute.distribute_coordinator_utils._WorkerContext._debug_message"], "distribute.distribute_coordinator_utils._WorkerContext.__exit__": [], "distribute.distribute_coordinator_utils._WorkerContext.wait_for_other_workers": [], "distribute.distribute_coordinator_utils._WorkerContext.session_creator": ["training.monitored_session.WorkerSessionCreator", "copy.deepcopy", "training.monitored_session.ChiefSessionCreator", "platform.tf_logging.info"], "training.monitored_session.ChiefSessionCreator": [], "training.monitored_session.WorkerSessionCreator": [], "distribute.distribute_coordinator_utils._WorkerContext.session_config": ["copy.deepcopy"], "distribute.distribute_coordinator_utils._WorkerContext.has_barrier": [], "distribute.distribute_coordinator_utils._WorkerContext.distributed_mode": ["<builtin>.bool"], "distribute.distribute_coordinator_utils._WorkerContext.cluster_spec": ["copy.deepcopy"], "distribute.distribute_coordinator_utils._WorkerContext.task_type": [], "distribute.distribute_coordinator_utils._WorkerContext.task_id": [], "distribute.distribute_coordinator_utils._WorkerContext.master_target": [], "distribute.distribute_coordinator_utils._WorkerContext.is_chief": [], "distribute.distribute_coordinator_utils._WorkerContext.num_workers": [], "distribute.distribute_coordinator_utils._WorkerContext.experimental_should_init": [], "distribute.distribute_coordinator_utils._WorkerContext.should_checkpoint": [], "distribute.distribute_coordinator_utils._WorkerContext.should_save_summary": [], "distribute.distribute_coordinator_utils._run_single_worker": ["distribute.distribute_coordinator_utils._WorkerContext.__init__", "copy.deepcopy"], "distribute.distribute_coordinator_utils._split_cluster_for_evaluator": ["distribute.distribute_coordinator_utils.normalize_cluster_spec"], "distribute.distribute_coordinator_utils.normalize_cluster_spec": ["training.server_lib.ClusterSpec", "<builtin>.isinstance", "<builtin>.ValueError"], "distribute.distribute_coordinator_utils._run_std_server": ["platform.tf_logging.info", "distribute.distribute_coordinator_utils._run_std_server._FakeServer.start", "training.server_lib.Server", "<builtin>.repr", "distribute.distribute_coordinator_utils._split_cluster_for_evaluator", "<builtin>.getattr"], "distribute.distribute_coordinator_utils._run_std_server._FakeServer.start": ["client.session.Session", "platform.tf_logging.info"], "distribute.distribute_coordinator_utils._run_std_server._FakeServer.join": ["time.sleep"], "distribute.distribute_coordinator_utils._configure_session_config_for_std_servers": ["copy.deepcopy"], "distribute.distribute_coordinator_utils.run_distribute_coordinator": ["distribute.distribute_coordinator_utils._run_std_server._FakeServer.join", "platform.tf_logging.warning", "distribute.distribute_coordinator_utils._WorkerContext.__init__", "platform.tf_logging.info", "<builtin>.int", "distribute.distribute_coordinator_utils._run_single_worker", "os.environ.get", "<builtin>.ValueError", "distribute.distribute_coordinator_utils.normalize_cluster_spec", "distribute.distribute_coordinator_utils._configure_session_config_for_std_servers", "json.loads", "protobuf.config_pb2.ConfigProto", "<builtin>.hasattr", "distribute.distribute_coordinator_utils._run_std_server", "<builtin>.getattr"], "distribute.model_collection_base": [], "distribute.model_collection_base.ModelAndInput.get_model": ["<builtin>.NotImplementedError"], "distribute.model_collection_base.ModelAndInput.get_data": ["<builtin>.NotImplementedError"], "distribute.model_collection_base.ModelAndInput.get_batch_size": ["<builtin>.NotImplementedError"], "distribute.model_combinations": ["framework.test_combinations.NamedObject", "distribute.simple_models.SimpleTFModuleModel", "distribute.simple_models.SimpleSequentialModel", "distribute.simple_models.SimpleSubclassModel", "distribute.simple_models.SimpleFunctionalModel"], "distribute.simple_models.SimpleFunctionalModel": [], "framework.test_combinations.NamedObject": [], "distribute.simple_models.SimpleSequentialModel": [], "distribute.simple_models.SimpleSubclassModel": [], "distribute.simple_models.SimpleTFModuleModel": [], "distribute.optimizer_combinations": ["framework.test_combinations.NamedObject"], "distribute.optimizer_combinations.<lambda1>": ["training.gradient_descent.GradientDescentOptimizer"], "training.gradient_descent.GradientDescentOptimizer": [], "distribute.optimizer_combinations.<lambda2>": ["training.adagrad.AdagradOptimizer"], "training.adagrad.AdagradOptimizer": [], "distribute.optimizer_combinations.<lambda3>": ["training.adam.AdamOptimizer"], "training.adam.AdamOptimizer": [], "distribute.optimizer_combinations.<lambda4>": ["training.ftrl.FtrlOptimizer"], "training.ftrl.FtrlOptimizer": [], "distribute.optimizer_combinations.<lambda5>": ["training.rmsprop.RMSPropOptimizer"], "training.rmsprop.RMSPropOptimizer": [], "distribute.optimizer_combinations.<lambda6>": ["optimizer_v2.adadelta.Adadelta"], "optimizer_v2.adadelta.Adadelta": [], "distribute.optimizer_combinations.<lambda7>": ["optimizer_v2.adagrad.Adagrad"], "optimizer_v2.adagrad.Adagrad": [], "distribute.optimizer_combinations.<lambda8>": ["optimizer_v2.adam.Adam"], "optimizer_v2.adam.Adam": [], "distribute.optimizer_combinations.<lambda9>": ["optimizer_v2.adamax.Adamax"], "optimizer_v2.adamax.Adamax": [], "distribute.optimizer_combinations.<lambda10>": ["optimizer_v2.nadam.Nadam"], "optimizer_v2.nadam.Nadam": [], "distribute.optimizer_combinations.<lambda11>": ["optimizer_v2.ftrl.Ftrl"], "optimizer_v2.ftrl.Ftrl": [], "distribute.optimizer_combinations.<lambda12>": ["optimizer_v2.gradient_descent.SGD"], "optimizer_v2.gradient_descent.SGD": [], "distribute.optimizer_combinations.<lambda13>": ["optimizer_v2.rmsprop.RMSprop"], "optimizer_v2.rmsprop.RMSprop": [], "distribute.optimizer_combinations.distributions_and_v1_optimizers": ["framework.test_combinations.combine"], "framework.test_combinations.combine": [], "distribute.optimizer_combinations.distributions_and_v2_optimizers": ["framework.test_combinations.combine"], "distribute.optimizer_combinations.distributions_and_v1_and_v2_optimizers": ["framework.test_combinations.combine"], "distribute.sidecar_evaluator": [], "distribute.sidecar_evaluator.list_checkpoint_attributes": ["training.checkpoint_utils.load_checkpoint"], "training.checkpoint_utils.load_checkpoint": ["<builtin>.ValueError", "training.checkpoint_utils._get_checkpoint_filename", "training.py_checkpoint_reader.NewCheckpointReader"], "distribute.sidecar_evaluator.SidecarEvaluator.__init__": ["ops.variables.Variable"], "ops.variables.Variable": ["util.deprecation.deprecated", "util.deprecation.deprecated_args"], "distribute.sidecar_evaluator.SidecarEvaluator.start": ["training.checkpoint_utils.checkpoints_iterator", "distribute.sidecar_evaluator.list_checkpoint_attributes", "platform.tf_logging.info", "<builtin>.isinstance", "tracking.util.Checkpoint", "<builtin>.RuntimeError"], "training.checkpoint_utils.checkpoints_iterator": ["time.sleep", "platform.tf_logging.info", "time.time", "training.checkpoint_utils.wait_for_new_checkpoint"], "distribute.simple_models": [], "distribute.simple_models._get_data_for_simple_models": ["framework.constant_op.constant", "numpy.random.rand"], "distribute.simple_models.SimpleFunctionalModel.get_model": ["python.keras.Model", "optimizer_v2.gradient_descent.SGD", "keras.layers.Dense", "keras.layers.Input"], "keras.layers.Input": [], "python.keras.Model": [], "distribute.simple_models.SimpleFunctionalModel.get_data": ["distribute.simple_models._get_data_for_simple_models"], "distribute.simple_models.SimpleFunctionalModel.get_batch_size": [], "distribute.simple_models.SimpleSequentialModel.get_model": ["optimizer_v2.gradient_descent.SGD", "python.keras.Sequential", "keras.layers.Dense"], "python.keras.Sequential": [], "distribute.simple_models.SimpleSequentialModel.get_data": ["distribute.simple_models._get_data_for_simple_models"], "distribute.simple_models.SimpleSequentialModel.get_batch_size": [], "distribute.simple_models._SimpleModel.__init__": ["keras.layers.Dense", "<builtin>.super"], "distribute.simple_models._SimpleModel.call": [], "distribute.simple_models.SimpleSubclassModel.get_model": ["optimizer_v2.gradient_descent.SGD", "distribute.simple_models._SimpleModel.__init__", "keras.Model.compile"], "keras.Model.compile": [], "distribute.simple_models.SimpleSubclassModel.get_data": ["distribute.simple_models._get_data_for_simple_models"], "distribute.simple_models.SimpleSubclassModel.get_batch_size": [], "distribute.simple_models._SimpleModule.__init__": ["ops.variables.Variable"], "distribute.simple_models._SimpleModule.__call__": [], "distribute.simple_models.SimpleTFModuleModel.get_model": ["distribute.simple_models._SimpleModule.__init__"], "distribute.simple_models.SimpleTFModuleModel.get_data": ["distribute.simple_models._get_data_for_simple_models"], "distribute.simple_models.SimpleTFModuleModel.get_batch_size": [], "distribute.strategy_combinations": ["distribute.strategy_combinations._get_tpu_strategy_creator", "distribute.strategy_combinations._version_chooser", "distribute.strategy_combinations._deferred_pool_runner", "util.tf_export.tf_export", "distribute.strategy_combinations._get_multi_worker_mirrored_creator", "distribute.strategy_combinations.parameter_server_strategy_fn", "distribute.combinations.NamedDistribution"], "distribute.worker_training_state": [], "distribute.worker_training_state.WorkerTrainingState.__init__": ["ops.variables.Variable", "distribute.distributed_file_utils.write_dirpath", "keras.backend.set_value", "os.path.join", "training.checkpoint_management.CheckpointManager", "tracking.util.Checkpoint", "framework.constant_op.constant"], "keras.backend.set_value": ["keras.backend.get_graph", "numpy.asarray", "framework.dtypes.as_dtype", "keras.backend.dtype_numpy", "ops.array_ops.placeholder", "<builtin>.hasattr", "framework.ops.executing_eagerly_outside_functions", "framework.tensor_shape.TensorShape", "keras.backend.get_session"], "distribute.worker_training_state.WorkerTrainingState.back_up": ["keras.backend.set_value", "distribute.distributed_file_utils.remove_temp_dirpath"], "distribute.worker_training_state.WorkerTrainingState.restore": [], "distribute.worker_training_state.WorkerTrainingState.delete_backup": ["io.file_io.delete_recursively_v2"], "io.file_io.delete_recursively_v2": ["io._pywrap_file_io.DeleteRecursively", "util.compat.path_to_bytes"], "distribute.worker_training_state.WorkerTrainingState.maybe_load_initial_epoch_from_ckpt": ["keras.backend.eval"], "keras.backend.eval": ["keras.backend.to_dense", "keras.backend.get_value"], "engine.base_layer": ["utils.generic_utils.LazyLoader", "<builtin>.globals"], "utils.generic_utils.LazyLoader": [], "engine.base_layer.Layer": ["docs.doc_controls.do_not_doc_inheritable", "<builtin>.frozenset", "utils.layer_utils.cached_per_instance", "docs.doc_controls.for_subclass_implementers", "utils.generic_utils.default", "tracking.base.no_automatic_dependency_tracking", "itertools.chain", "docs.doc_controls.do_not_generate_docs"], "engine.base_layer.Layer._get_cell_name": ["util.tf_export.get_canonical_name_for_symbol"], "util.tf_export.get_canonical_name_for_symbol": ["util.tf_export.get_canonical_name", "<builtin>.hasattr", "util.tf_decorator.unwrap", "<builtin>.getattr"], "engine.base_layer.Layer._instrument_layer_creation": ["<builtin>.getattr"], "tracking.base.no_automatic_dependency_tracking": ["util.tf_decorator.make_decorator"], "engine.base_layer.Layer.__init__": ["keras.regularizers.get", "engine.base_layer.Layer._maybe_create_attribute", "threading.Lock", "threading.local", "engine.base_layer.Layer._set_dtype_policy", "engine.base_layer_utils.v2_dtype_behavior_enabled", "engine.base_layer.Layer._init_set_name", "engine.base_layer.Layer._init_call_fn_args", "utils.generic_utils.is_default", "<builtin>.tuple", "utils.generic_utils.validate_kwargs", "engine.base_layer.Layer._instrument_layer_creation"], "utils.generic_utils.validate_kwargs": ["<builtin>.TypeError"], "utils.generic_utils.is_default": ["<builtin>.getattr"], "engine.base_layer.Layer._init_set_name": ["keras.backend.unique_object_name", "keras.backend.observe_object_name", "utils.generic_utils.to_snake_case"], "keras.regularizers.get": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.ValueError", "<builtin>.callable", "keras.regularizers.deserialize"], "engine.base_layer.Layer._maybe_create_attribute": ["<builtin>.hasattr", "engine.base_layer.Layer.__setattr__"], "engine.base_layer.Layer._set_dtype_policy": ["mixed_precision.policy.deserialize", "framework.dtypes.as_dtype", "mixed_precision.policy.global_policy", "mixed_precision.loss_scale_optimizer.strategy_supports_loss_scaling", "<builtin>.ValueError", "mixed_precision.policy.Policy", "distribute.distribution_strategy_context.get_strategy", "<builtin>.isinstance"], "engine.base_layer_utils.v2_dtype_behavior_enabled": ["python.tf2.enabled"], "engine.base_layer.Layer._init_call_fn_args": ["fget.cache.pop", "fget.cache.pop", "fget.cache.pop"], "utils.generic_utils.default": [], "engine.base_layer.Layer.build": ["<builtin>.hasattr"], "docs.doc_controls.for_subclass_implementers": ["<builtin>.setattr"], "engine.base_layer.Layer.call": [], "engine.base_layer.Layer._add_trackable": ["<builtin>.isinstance", "engine.base_layer_utils.TrackableWeightHandler", "Module._non_trainable_weights.append", "Module._trainable_weights.append"], "engine.base_layer_utils.TrackableWeightHandler": [], "Module._trainable_weights.append": [], "Module._non_trainable_weights.append": [], "engine.base_layer.Layer.add_weight": ["keras.regularizers.get", "<builtin>.TypeError", "module.Module._add_variable_with_custom_getter", "engine.base_layer.Layer._set_dtype_policy", "framework.dtypes.as_dtype", "platform.tf_logging.warning", "engine.base_layer_utils.is_split_variable", "Module._trainable_weights.append", "<builtin>.ValueError", "keras.initializers.get", "keras.constraints.get", "engine.base_layer.Layer._handle_weight_regularization", "keras.backend.track_variable", "Module._non_trainable_weights.append", "mixed_precision.policy.Policy", "keras.backend.floatx"], "mixed_precision.policy.Policy": [], "keras.initializers.get": [], "keras.constraints.get": ["keras.constraints.deserialize", "<builtin>.callable", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.str"], "engine.base_layer.Layer.add_weight.getter": ["mixed_precision.autocast_variable.create_autocast_variable", "engine.base_layer.Layer.add_weight.getter"], "mixed_precision.autocast_variable.create_autocast_variable": ["distribute.distributed_training_utils.is_distributed_variable", "mixed_precision.autocast_variable.AutoCastVariable.__init__"], "module.Module._add_variable_with_custom_getter": [], "engine.base_layer.Layer._handle_weight_regularization": ["engine.base_layer.Layer.add_loss", "engine.base_layer_utils.is_split_variable", "functools.partial"], "engine.base_layer_utils.is_split_variable": ["<builtin>.hasattr"], "keras.backend.track_variable": ["keras.backend.get_graph", "eager.context.executing_eagerly", "<builtin>.hasattr"], "engine.base_layer.Layer.get_config": ["<builtin>.NotImplementedError", "<builtin>.hasattr", "<builtin>.len", "utils.tf_inspect.getfullargspec", "mixed_precision.policy.serialize"], "utils.tf_inspect.getfullargspec": ["utils.tf_inspect._convert_maybe_argspec_to_fullargspec", "inspect.getfullargspec", "util.tf_decorator.unwrap"], "mixed_precision.policy.serialize": ["utils.generic_utils.serialize_keras_object", "mixed_precision.policy._policy_equivalent_to_dtype"], "engine.base_layer.Layer.from_config": ["engine.base_layer.Layer.__init__"], "engine.base_layer.Layer.compute_output_shape": ["engine.base_layer.Layer._maybe_build", "<builtin>.NotImplementedError", "utils.tf_utils.convert_shapes", "<builtin>.str", "framework.func_graph.FuncGraph", "engine.base_layer.Layer.__init__", "eager.context.executing_eagerly", "util.nest.map_structure"], "engine.base_layer.Layer._maybe_build": ["utils.tf_utils.get_shapes", "utils.tf_utils.convert_shapes", "framework.ops.init_scope", "engine.base_layer.Layer._set_dtype_policy", "utils.tf_utils.maybe_init_scope", "<builtin>.all", "<builtin>.hasattr", "util.nest.flatten", "mixed_precision.policy.Policy", "engine.base_layer.Layer.set_weights", "engine.base_layer.Layer.build"], "utils.tf_utils.convert_shapes": ["utils.tf_utils.map_structure_with_atomic"], "engine.base_layer.Layer.compute_output_shape._make_placeholder_like": ["keras.backend.placeholder"], "keras.backend.placeholder": ["keras.backend.get_graph", "util.nest.map_structure", "<builtin>.ValueError", "ops.array_ops.placeholder", "<builtin>.hasattr", "<builtin>.range", "framework.tensor_spec.TensorSpec", "eager.context.executing_eagerly", "keras.backend_config.floatx", "ops.array_ops.sparse_placeholder", "framework.sparse_tensor.SparseTensorSpec", "ragged.ragged_tensor.RaggedTensorSpec", "framework.ops.executing_eagerly_outside_functions", "engine.keras_tensor.keras_tensor_from_type_spec", "<builtin>.len", "engine.input_layer.Input"], "engine.base_layer.Layer.compute_output_shape.<lambda1>": [], "engine.base_layer.Layer.compute_output_signature": ["engine.base_layer.Layer.compute_output_shape", "util.nest.flatten", "util.nest.map_structure"], "engine.base_layer.Layer.compute_output_signature.check_type_return_shape": ["<builtin>.isinstance", "<builtin>.TypeError"], "engine.base_layer.Layer.compute_output_signature.<lambda1>": ["framework.tensor_spec.TensorSpec"], "engine.base_layer.Layer._keras_tensor_symbolic_call": ["engine.base_layer.Layer.compute_output_signature", "engine.base_layer.Layer._infer_output_signature", "util.nest.map_structure"], "engine.base_layer.Layer._keras_tensor_symbolic_call.<lambda1>": ["framework.tensor_spec.TensorSpec"], "engine.base_layer.Layer._infer_output_signature": ["engine.base_layer.Layer._maybe_build", "engine.base_layer.Layer.call", "engine.base_layer.Layer._set_mask_metadata", "<builtin>.str", "core.ag_ctx.control_status_ctx", "engine.base_layer.Layer._name_scope", "mixed_precision.autocast_variable.enable_auto_cast_variables", "module.Module._set_inputs", "engine.base_layer_utils.is_subclassed", "engine.base_layer.Layer._handle_activity_regularization", "<builtin>.hasattr", "keras.backend.name_scope", "engine.base_layer.Layer._maybe_cast_inputs", "framework.func_graph.FuncGraph", "engine.base_layer_utils.from_saved_model", "impl.api.tf_convert", "util.nest.map_structure"], "engine.base_layer_utils.is_subclassed": [], "engine.base_layer_utils.from_saved_model": [], "engine.base_layer.Layer._name_scope": ["python.tf2.enabled", "framework.ops.get_name_scope"], "mixed_precision.autocast_variable.enable_auto_cast_variables": [], "engine.base_layer.Layer._maybe_cast_inputs": ["util.nest.flatten", "<builtin>.any", "<builtin>.map", "util.nest.map_structure"], "engine.base_layer.Layer._handle_activity_regularization": ["ops.array_ops.shape", "engine.base_layer.Layer.add_loss", "ops.math_ops.cast", "keras.backend.name_scope", "util.nest.flatten"], "engine.base_layer.Layer._set_mask_metadata": ["engine.base_layer.Layer.compute_mask", "<builtin>.getattr", "<builtin>.all", "engine.base_layer.Layer._set_mask_keras_history_checked", "util.nest.flatten", "<builtin>.zip"], "module.Module._set_inputs": [], "engine.base_layer.Layer.compute_mask": ["<builtin>.TypeError", "util.nest.flatten", "<builtin>.any", "<builtin>.str"], "engine.base_layer.Layer.__call__": ["<builtin>.hasattr", "util.nest.flatten", "util.nest.map_structure", "engine.base_layer.Layer._get_input_masks", "engine.base_layer.Layer._set_save_spec", "engine.base_layer_utils.call_context", "engine.base_layer.Layer._clear_losses", "engine.base_layer.Layer._maybe_build", "<builtin>.RuntimeError", "engine.base_layer.Layer._name_scope", "engine.base_layer.Layer._handle_activity_regularization", "engine.base_layer.Layer._split_out_first_arg", "framework.ops.name_scope_v2", "engine.base_layer.Layer._set_training_mode", "<builtin>.isinstance", "engine.base_layer._in_functional_construction_mode", "engine.base_layer.Layer.call", "mixed_precision.autocast_variable.enable_auto_cast_variables", "<builtin>.any", "engine.base_layer.Layer._autographed_call", "engine.base_layer.Layer._maybe_cast_inputs", "eager.context.executing_eagerly", "engine.base_layer.Layer._set_mask_metadata", "engine.base_layer.Layer._functional_construction_call"], "engine.base_layer.Layer._split_out_first_arg": ["copy.copy", "<builtin>.ValueError"], "engine.base_layer._in_functional_construction_mode": ["<builtin>.isinstance", "util.nest.flatten", "<builtin>.any"], "engine.base_layer.Layer._functional_construction_call": ["engine.base_layer.Layer._keras_tensor_symbolic_call", "engine.base_layer.Layer._get_input_masks", "framework.tensor_util.is_tf_type", "ops.math_ops.cast", "<builtin>.any", "<builtin>.ValueError", "engine.base_layer_utils.call_context", "engine.base_layer.Layer._set_connectivity_metadata", "engine.base_layer.Layer._get_call_arg_value", "keras.backend.learning_phase", "keras.backend.global_learning_phase_is_set", "util.nest.flatten", "engine.base_layer.Layer._call_arg_was_passed", "<builtin>.bool", "engine.base_layer.Layer._set_call_arg_value", "<builtin>.isinstance", "util.nest.map_structure"], "engine.base_layer_utils.call_context": ["<builtin>.getattr", "engine.base_layer_utils.CallContext.__init__"], "engine.base_layer.Layer._get_input_masks": ["<builtin>.getattr", "<builtin>.all", "engine.base_layer.Layer._get_call_arg_value", "util.nest.pack_sequence_as", "engine.base_layer.Layer._call_arg_was_passed"], "engine.base_layer.Layer._set_training_mode": ["framework.tensor_util.is_tf_type", "ops.math_ops.cast", "engine.base_layer.Layer._get_call_arg_value", "keras.backend.learning_phase", "keras.backend.global_learning_phase_is_set", "engine.base_layer.Layer._call_arg_was_passed", "<builtin>.bool", "engine.base_layer.Layer._set_call_arg_value", "<builtin>.isinstance"], "engine.base_layer.Layer._clear_losses": ["<builtin>.getattr", "engine.base_layer.Layer._flatten_layers"], "engine.base_layer.Layer._autographed_call": ["impl.api.tf_convert", "engine.base_layer_utils.from_saved_model", "engine.base_layer_utils.is_subclassed", "core.ag_ctx.control_status_ctx"], "framework.ops.name_scope_v2": [], "engine.base_layer.Layer._set_save_spec": ["util.nest.map_structure"], "engine.base_layer.Layer._functional_construction_call._convert_non_tensor": ["<builtin>.isinstance", "framework.ops.convert_to_tensor_v2_with_dispatch"], "framework.ops.convert_to_tensor_v2_with_dispatch": ["framework.ops.convert_to_tensor_v2"], "engine.base_layer.Layer._call_arg_was_passed": ["<builtin>.dict", "<builtin>.zip"], "engine.base_layer.Layer._get_call_arg_value": ["<builtin>.dict", "<builtin>.zip"], "keras.backend.global_learning_phase_is_set": [], "keras.backend.learning_phase": ["framework.ops.init_scope", "framework.ops.get_default_graph", "keras.backend.symbolic_learning_phase", "keras.backend._mark_func_graph_as_unsaveable", "<builtin>.getattr"], "engine.base_layer.Layer._set_call_arg_value": ["<builtin>.tuple", "<builtin>.len", "<builtin>.list"], "engine.base_layer.Layer._set_connectivity_metadata": ["<builtin>.id", "ops.array_ops.identity", "util.nest.flatten", "util.nest.pack_sequence_as", "keras.backend.name_scope", "engine.node.Node"], "engine.base_layer.Layer.dtype": [], "engine.base_layer.Layer.name": [], "engine.base_layer.Layer.supports_masking": [], "engine.base_layer.Layer.dynamic": ["engine.base_layer.Layer._flatten_layers", "<builtin>.any"], "engine.base_layer.Layer._flatten_layers": ["<builtin>.isinstance", "engine.base_layer.Layer._flatten_modules"], "docs.doc_controls.do_not_doc_inheritable": ["<builtin>.setattr"], "engine.base_layer.Layer.stateful": ["engine.base_layer.Layer._flatten_layers", "<builtin>.any"], "engine.base_layer.Layer.trainable": ["engine.base_layer.Layer._flatten_layers"], "engine.base_layer.Layer.activity_regularizer": [], "engine.base_layer.Layer.input_spec": ["<builtin>.isinstance", "<builtin>.TypeError", "util.nest.flatten"], "engine.base_layer.Layer.trainable_weights": ["engine.base_layer.Layer._gather_children_attribute", "engine.base_layer.Layer._dedup_weights"], "engine.base_layer.Layer._gather_children_attribute": ["<builtin>.getattr", "<builtin>.hasattr", "engine.base_layer.Layer._flatten_modules", "itertools.chain.from_iterable", "<builtin>.list"], "engine.base_layer.Layer._dedup_weights": ["<builtin>.id", "<builtin>.set"], "engine.base_layer.Layer.non_trainable_weights": ["engine.base_layer.Layer._gather_children_attribute", "engine.base_layer.Layer._dedup_weights"], "engine.base_layer.Layer.weights": [], "docs.doc_controls.do_not_generate_docs": ["<builtin>.setattr"], "engine.base_layer.Layer.updates": ["warnings.warn"], "engine.base_layer.Layer.losses": ["engine.base_layer.Layer._flatten_layers"], "engine.base_layer.Layer.add_loss": ["<builtin>.TypeError", "utils.tf_utils.is_symbolic_tensor", "engine.base_layer_utils.is_in_tf_function", "framework.tensor_util.is_tf_type", "<builtin>.getattr", "module.Module._graph_network_add_loss", "<builtin>.ValueError", "framework.ops.convert_to_tensor_v2_with_dispatch", "engine.base_layer_utils.call_context", "util.nest.flatten", "functools.partial", "<builtin>.callable", "<builtin>.isinstance", "keras.backend.floatx"], "engine.base_layer.Layer.add_loss._tag_callable": ["framework.tensor_util.is_tf_type", "mixed_precision.autocast_variable.enable_auto_cast_variables", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.callable", "keras.backend.floatx"], "utils.tf_utils.is_symbolic_tensor": ["util.nest.flatten", "<builtin>.any", "<builtin>.getattr", "eager.context.executing_eagerly", "utils.tf_utils.is_extension_type", "<builtin>.tuple", "<builtin>.hasattr", "utils.tf_utils.is_symbolic_tensor", "framework.ops.convert_to_tensor_or_composite", "<builtin>.isinstance"], "engine.base_layer_utils.is_in_tf_function": ["framework.ops.inside_function", "framework.ops.executing_eagerly_outside_functions", "framework.ops.get_default_graph", "<builtin>.getattr", "engine.base_layer_utils.is_in_keras_graph"], "module.Module._graph_network_add_loss": [], "engine.base_layer.Layer.metrics": ["engine.base_layer.Layer._flatten_layers"], "engine.base_layer.Layer.add_metric": ["<builtin>.TypeError", "<builtin>.str", "<builtin>.getattr", "<builtin>.ValueError", "engine.base_layer_utils.call_context", "<builtin>.hasattr", "module.Module._graph_network_add_metric", "<builtin>.isinstance", "<builtin>.len", "engine.base_layer.Layer._get_existing_metric", "<builtin>.list"], "engine.base_layer.Layer._get_existing_metric": ["<builtin>.len", "<builtin>.ValueError"], "module.Module._graph_network_add_metric": [], "engine.base_layer.Layer.add_update": ["<builtin>.callable", "util.nest.flatten", "platform.tf_logging.warning", "engine.base_layer_utils.call_context"], "engine.base_layer.Layer.set_weights": ["<builtin>.str", "<builtin>.ValueError", "<builtin>.hasattr", "engine.base_layer.Layer.finalize_state", "<builtin>.isinstance", "<builtin>.len", "engine.base_layer.Layer._flatten_layers", "keras.backend.batch_set_value"], "keras.backend.batch_set_value": ["keras.backend.get_graph", "numpy.asarray", "framework.dtypes.as_dtype", "keras.backend.dtype_numpy", "ops.array_ops.placeholder", "<builtin>.hasattr", "framework.ops.executing_eagerly_outside_functions", "framework.tensor_shape.TensorShape", "keras.backend.get_session"], "engine.base_layer.Layer.finalize_state": [], "engine.base_layer.Layer.get_weights": ["<builtin>.isinstance", "keras.backend.batch_get_value"], "keras.backend.batch_get_value": ["framework.ops.inside_function", "eager.context.executing_eagerly", "keras.backend.get_session", "<builtin>.RuntimeError"], "engine.base_layer.Layer.get_updates_for": ["warnings.warn"], "engine.base_layer.Layer.get_losses_for": ["warnings.warn"], "engine.base_layer.Layer.get_input_mask_at": ["<builtin>.isinstance", "<builtin>.getattr", "engine.base_layer.Layer.get_input_at"], "engine.base_layer.Layer.get_input_at": ["engine.base_layer.Layer._get_node_attribute_at_index"], "engine.base_layer.Layer.get_output_mask_at": ["<builtin>.isinstance", "engine.base_layer.Layer.get_output_at", "<builtin>.getattr"], "engine.base_layer.Layer.get_output_at": ["engine.base_layer.Layer._get_node_attribute_at_index"], "engine.base_layer.Layer.input_mask": ["<builtin>.isinstance", "<builtin>.getattr"], "engine.base_layer.Layer.output_mask": ["<builtin>.isinstance", "<builtin>.getattr"], "engine.base_layer.Layer.get_input_shape_at": ["engine.base_layer.Layer._get_node_attribute_at_index"], "engine.base_layer.Layer._get_node_attribute_at_index": ["<builtin>.RuntimeError", "<builtin>.str", "<builtin>.getattr", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.len"], "engine.base_layer.Layer.get_output_shape_at": ["engine.base_layer.Layer._get_node_attribute_at_index"], "engine.base_layer.Layer.input": ["<builtin>.AttributeError", "engine.base_layer.Layer._get_node_attribute_at_index"], "engine.base_layer.Layer.output": ["<builtin>.AttributeError", "engine.base_layer.Layer._get_node_attribute_at_index"], "engine.base_layer.Layer.input_shape": ["<builtin>.set", "<builtin>.AttributeError", "<builtin>.len", "<builtin>.str"], "engine.base_layer.Layer.count_params": ["engine.base_layer.Layer._maybe_build", "utils.layer_utils.count_params", "<builtin>.getattr", "utils.tf_utils.maybe_init_scope", "<builtin>.ValueError"], "utils.tf_utils.maybe_init_scope": ["framework.ops.executing_eagerly_outside_functions", "<builtin>.getattr", "framework.ops.init_scope"], "utils.layer_utils.count_params": ["numpy.prod", "<builtin>.int", "<builtin>.id", "<builtin>.sum"], "engine.base_layer.Layer.output_shape": ["<builtin>.set", "<builtin>.AttributeError", "<builtin>.len", "<builtin>.str"], "engine.base_layer.Layer.inbound_nodes": [], "engine.base_layer.Layer.outbound_nodes": [], "engine.base_layer.Layer.apply": ["engine.base_layer.Layer.__call__", "warnings.warn"], "engine.base_layer.Layer.add_variable": ["engine.base_layer.Layer.add_weight", "warnings.warn"], "engine.base_layer.Layer.variables": [], "engine.base_layer.Layer.trainable_variables": [], "engine.base_layer.Layer.non_trainable_variables": [], "engine.base_layer.Layer._inbound_nodes": [], "engine.base_layer.Layer._outbound_nodes": [], "mixed_precision.policy.deserialize": ["mixed_precision.policy.Policy.__init__", "<builtin>.isinstance", "utils.generic_utils.deserialize_keras_object", "mixed_precision.policy._is_convertible_to_dtype"], "mixed_precision.policy.global_policy": ["mixed_precision.policy.Policy.__init__", "keras.backend.floatx", "engine.base_layer_utils.v2_dtype_behavior_enabled"], "mixed_precision.loss_scale_optimizer.strategy_supports_loss_scaling": ["distribute.distribution_strategy_context.get_strategy", "<builtin>.isinstance", "distribute.distribution_strategy_context.has_strategy"], "engine.base_layer.Layer.dtype_policy": [], "engine.base_layer.Layer.compute_dtype": [], "engine.base_layer.Layer._compute_dtype": [], "engine.base_layer.Layer.variable_dtype": [], "engine.base_layer.Layer._should_cast_single_input": ["<builtin>.isinstance"], "engine.base_layer.Layer._cast_single_input": ["ops.math_ops.cast", "engine.base_layer.Layer._should_cast_single_input"], "engine.base_layer.Layer._dtype": ["framework.dtypes.as_dtype", "engine.base_layer.Layer._set_dtype_policy", "mixed_precision.policy.Policy"], "framework.ops.get_name_scope": ["eager.context.context", "framework.ops.Graph.get_name_scope", "framework.ops.get_default_graph", "eager.context.executing_eagerly"], "utils.generic_utils.to_snake_case": ["re.sub"], "keras.backend.unique_object_name": ["<builtin>.str", "keras.backend.get_default_graph_uid_map", "<builtin>.set"], "keras.backend.observe_object_name": [], "engine.base_layer.Layer._handle_weight_regularization._loss_for_variable": ["keras.backend.name_scope"], "engine.base_layer.Layer._set_mask_keras_history_checked": ["<builtin>.getattr"], "engine.node.Node": [], "utils.tf_utils.get_shapes": ["util.nest.map_structure"], "engine.base_layer.Layer._symbolic_call": ["engine.base_layer.Layer.compute_output_shape", "utils.tf_utils.convert_shapes", "util.nest.map_structure"], "engine.base_layer.Layer._symbolic_call.<lambda1>": [], "engine.base_layer.Layer._symbolic_call._make_placeholder_like": ["keras.backend.placeholder"], "engine.base_layer.Layer._get_trainable_state": ["engine.base_layer.Layer._flatten_layers", "weakref.WeakKeyDictionary"], "engine.base_layer.Layer._set_trainable_state": ["engine.base_layer.Layer._flatten_layers"], "engine.base_layer.Layer._obj_reference_counts": ["engine.base_layer.Layer._maybe_create_attribute", "utils.object_identity.ObjectIdentityDictionary"], "utils.object_identity.ObjectIdentityDictionary": [], "engine.base_layer.Layer.__setattr__": ["<builtin>.AttributeError", "engine.base_layer.Layer._maybe_create_attribute", "engine.base_layer_utils.has_weights", "<builtin>.getattr", "tracking.data_structures.sticky_attribute_assignment", "<builtin>.any", "engine.base_layer.Layer.__delattr__", "<builtin>.hasattr", "Module._non_trainable_weights.append", "keras.backend.track_variable", "util.nest.flatten", "<builtin>.isinstance", "<builtin>.super", "Module._trainable_weights.append", "Module._self_tracked_trackables.append"], "engine.base_layer.Layer.__delattr__": ["<builtin>.super", "<builtin>.getattr", "engine.base_layer_utils.has_weights", "<builtin>.isinstance"], "engine.base_layer_utils.has_weights": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.hasattr"], "tracking.data_structures.sticky_attribute_assignment": ["base.Trackable._track_trackable", "<builtin>.isinstance", "tracking.data_structures.wrap_or_unwrap"], "Module._self_tracked_trackables.append": [], "engine.base_layer.Layer._flatten_modules": ["<builtin>.getattr", "<builtin>.id", "<builtin>.reversed", "<builtin>.isinstance", "<builtin>.set", "collections.deque"], "itertools.chain.from_iterable": [], "engine.base_layer.Layer._is_layer": [], "fget.cache.pop": [], "utils.layer_utils.cached_per_instance": ["weakref.WeakKeyDictionary", "functools.wraps"], "engine.base_layer.Layer._call_full_argspec": ["utils.tf_inspect.getfullargspec"], "engine.base_layer.Layer._call_fn_args": [], "engine.base_layer.Layer._call_fn_arg_defaults": ["<builtin>.len", "<builtin>.dict", "<builtin>.range"], "engine.base_layer.Layer._call_fn_arg_positions": ["<builtin>.dict", "<builtin>.enumerate"], "engine.base_layer.Layer._call_accepts_kwargs": [], "engine.base_layer.Layer._eager_losses": ["<builtin>.hasattr"], "engine.base_layer.Layer._get_save_spec": ["util.nest.map_structure"], "engine.base_layer.Layer._get_save_spec.<lambda1>": ["utils.tf_utils.get_tensor_spec"], "utils.tf_utils.get_tensor_spec": ["copy.deepcopy", "framework.tensor_shape.TensorShape", "framework.tensor_spec.TensorSpec", "utils.tf_utils.is_extension_type", "<builtin>.hasattr", "<builtin>.isinstance"], "engine.base_layer.Layer._trackable_saved_model_saver": ["saved_model.layer_serialization.LayerSavedModelSaver"], "saved_model.layer_serialization.LayerSavedModelSaver": [], "engine.base_layer.Layer._object_identifier": [], "engine.base_layer.Layer._tracking_metadata": [], "engine.base_layer.Layer._list_extra_dependencies_for_serialization": [], "engine.base_layer.Layer._list_functions_for_serialization": [], "engine.base_layer.Layer._use_input_spec_as_call_signature": ["<builtin>.type", "util.tf_export.get_canonical_name_for_symbol"], "engine.base_layer.Layer.__getstate__": ["Module.__dict__.copy"], "Module.__dict__.copy": [], "engine.base_layer.Layer.__setstate__": ["threading.Lock", "threading.local"], "engine.base_layer.TensorFlowOpLayer": ["tracking.base.no_automatic_dependency_tracking"], "engine.base_layer.TensorFlowOpLayer.__init__": ["node_def_pb2.NodeDef.FromString", "<builtin>.int", "framework.node_def_pb2.NodeDef", "<builtin>.isinstance", "<builtin>.super", "protobuf.json_format.ParseDict"], "framework.node_def_pb2.NodeDef": [], "protobuf.json_format.ParseDict": [], "node_def_pb2.NodeDef.FromString": [], "engine.base_layer.TensorFlowOpLayer.call": ["engine.base_layer.TensorFlowOpLayer._defun_call", "eager.context.executing_eagerly", "engine.base_layer.TensorFlowOpLayer._make_op"], "engine.base_layer.TensorFlowOpLayer._defun_call": ["engine.base_layer.TensorFlowOpLayer._make_op"], "engine.base_layer.TensorFlowOpLayer._make_op": ["engine.base_layer.TensorFlowOpLayer._make_node_def", "eager.backprop.record_gradient", "util.nest.flatten", "util.compat.as_str", "<builtin>.tuple", "<builtin>.len", "framework.tensor_util.constant_value", "framework.constant_op.constant", "framework.ops._create_c_op"], "engine.base_layer.TensorFlowOpLayer._make_node_def": ["framework.node_def_pb2.NodeDef"], "framework.ops._create_c_op": ["client.pywrap_tf_session.TF_FinishOperation", "framework.ops._reconstruct_sequence_inputs", "client.pywrap_tf_session.TF_AddInput", "client.pywrap_tf_session.TF_AddControlInput", "client.pywrap_tf_session.TF_AddInputList", "client.pywrap_tf_session.TF_NewOperation", "client.pywrap_tf_session.TF_SetDevice", "client.pywrap_tf_session.TF_SetAttrValueProto", "<builtin>.isinstance", "<builtin>.ValueError", "util.compat.as_str", "framework.ops.Graph._get_op_def"], "util.compat.as_str": ["util.compat.as_text", "util.compat.as_bytes"], "eager.backprop.record_gradient": ["framework.ops.get_name_scope", "python.pywrap_tfe.TFE_Py_RecordGradient"], "engine.base_layer.TensorFlowOpLayer.get_config": ["<builtin>.super"], "engine.base_layer.AddLoss.__init__": ["<builtin>.super"], "engine.base_layer.AddLoss.call": ["engine.base_layer.Layer.add_loss"], "engine.base_layer.AddLoss.get_config": ["<builtin>.super"], "engine.base_layer.AddMetric.__init__": ["<builtin>.super"], "engine.base_layer.AddMetric.call": ["engine.base_layer.Layer.add_metric"], "engine.base_layer.AddMetric.get_config": ["<builtin>.super"], "engine.base_layer._convert_numpy_or_python_types": ["<builtin>.isinstance", "framework.ops.convert_to_tensor_v2_with_dispatch"], "engine.base_layer_utils": ["util.tf_export.keras_export", "util.keras_deps.register_call_context_function", "threading.local"], "engine.base_layer_utils.create_mean_metric": ["keras.metrics.Mean"], "keras.metrics.Mean": [], "engine.base_layer_utils.make_variable": ["utils.tf_inspect.isclass", "ops.variables.VariableV1", "framework.tensor_shape.TensorShape", "<builtin>.callable", "functools.partial"], "utils.tf_inspect.isclass": ["inspect.isclass", "util.tf_decorator.unwrap"], "ops.variables.VariableV1": [], "engine.base_layer_utils.collect_previous_mask": ["util.nest.map_structure"], "engine.base_layer_utils.collect_previous_mask._collect_previous_mask": ["<builtin>.getattr"], "engine.base_layer_utils.have_all_keras_metadata": ["<builtin>.hasattr", "util.nest.flatten", "<builtin>.all"], "engine.base_layer_utils.generate_placeholders_from_shape": ["keras.backend.floatx", "ops.array_ops.placeholder"], "engine.base_layer_utils.create_keras_history": ["engine.base_layer_utils._create_keras_history_helper", "<builtin>.set"], "engine.base_layer_utils._create_keras_history_helper": ["framework.ops.init_scope", "engine.base_layer.TensorFlowOpLayer", "<builtin>.ValueError", "util.nest.flatten", "framework.ops.executing_eagerly_outside_functions", "framework.ops.get_default_graph", "<builtin>.getattr", "utils.tf_utils.is_ragged", "<builtin>.isinstance", "keras.backend.function", "<builtin>.str", "engine.base_layer_utils.unnest_if_single_tensor", "<builtin>.list", "engine.base_layer_utils._create_keras_history_helper", "engine.base_layer_utils.uses_keras_history", "distribute.distribution_strategy_context.in_cross_replica_context", "<builtin>.enumerate", "utils.control_flow_util.GraphOrParentsInXlaContext"], "utils.tf_utils.is_ragged": ["<builtin>.isinstance"], "engine.base_layer_utils.uses_keras_history": ["engine.base_layer_utils.mark_checked", "<builtin>.set", "<builtin>.id", "util.nest.flatten", "<builtin>.getattr"], "utils.control_flow_util.GraphOrParentsInXlaContext": ["utils.control_flow_util.InXlaContext"], "engine.base_layer_utils.unnest_if_single_tensor": ["<builtin>.len", "<builtin>.isinstance", "util.nest.flatten"], "engine.base_layer_utils.needs_keras_history": ["engine.base_layer_utils.call_context", "util.nest.flatten", "<builtin>.all", "<builtin>.getattr", "engine.base_layer_utils.uses_keras_history"], "engine.base_layer_utils.is_in_keras_graph": ["engine.base_layer_utils.call_context"], "engine.base_layer_utils.is_in_eager_or_tf_function": ["engine.base_layer_utils.is_in_tf_function", "eager.context.executing_eagerly"], "engine.base_layer_utils.mark_checked": ["util.nest.map_structure"], "engine.base_layer_utils.mark_checked._mark_checked": [], "engine.base_layer_utils.CallContext.__init__": [], "util.keras_deps.register_call_context_function": [], "engine.base_layer_utils.CallContext.enter": ["engine.base_layer_utils.CallContextManager.__init__"], "engine.base_layer_utils.CallContextManager.__init__": [], "engine.base_layer_utils.CallContext.layer": [], "engine.base_layer_utils.CallContext.inputs": [], "engine.base_layer_utils.CallContext.build_graph": [], "engine.base_layer_utils.CallContext.training": [], "engine.base_layer_utils.CallContext.saving": [], "engine.base_layer_utils.CallContext.frozen": [], "engine.base_layer_utils.CallContext.in_keras_graph": ["keras.backend.get_graph", "<builtin>.getattr", "eager.context.executing_eagerly"], "engine.base_layer_utils.CallContextManager.__enter__": ["keras.backend.get_graph", "<builtin>.getattr"], "engine.base_layer_utils.CallContextManager.__exit__": [], "engine.base_layer_utils.training_arg_passed_to_call": ["<builtin>.zip", "<builtin>.dict"], "engine.base_layer_utils.check_graph_consistency": ["<builtin>.RuntimeError", "<builtin>.hasattr", "framework.ops.executing_eagerly_outside_functions"], "engine.base_layer_utils.mark_as_return": ["util.nest.map_structure"], "engine.base_layer_utils.mark_as_return._mark_as_return": ["<builtin>.getattr", "framework.tensor_util.is_tf_type"], "engine.base_layer_utils.enable_v2_dtype_behavior": [], "engine.base_layer_utils.disable_v2_dtype_behavior": [], "engine.base_layer_utils.TrackableWeightHandler.__init__": ["distribute.distribution_strategy_context.get_strategy", "<builtin>.ValueError", "framework.ops.executing_eagerly_outside_functions", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "ops.array_ops.placeholder"], "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda1>": [], "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda2>": [], "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda3>": [], "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda4>": [], "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda5>": [], "engine.base_layer_utils.TrackableWeightHandler.num_tensors": [], "engine.base_layer_utils.TrackableWeightHandler.set_weights": ["<builtin>.ValueError", "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda1>", "engine.base_layer_utils.TrackableWeightHandler._set_weights_v1", "engine.base_layer_utils.StaticTableHandler.__init__.raise_error", "<builtin>.len", "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda3>"], "engine.base_layer_utils.StaticTableHandler.__init__.raise_error": ["<builtin>.RuntimeError"], "engine.base_layer_utils.TrackableWeightHandler._set_weights_v1": ["keras.backend.get_session", "<builtin>.enumerate"], "engine.base_layer_utils.TrackableWeightHandler.get_tensors": ["engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda2>", "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda5>", "engine.base_layer_utils.TrackableWeightHandler.__init__.<lambda4>"], "engine.base_layer_utils.StaticTableHandler.__init__": ["distribute.distribution_strategy_context.get_strategy"], "engine.base_layer_utils.no_ragged_support": ["<builtin>.isinstance", "util.nest.flatten", "<builtin>.any", "<builtin>.ValueError"], "engine.base_layer_v1": [], "engine.base_layer_v1.Layer": ["tracking.base.no_automatic_dependency_tracking", "docs.doc_controls.do_not_generate_docs", "<builtin>.frozenset", "docs.doc_controls.do_not_doc_inheritable", "utils.layer_utils.cached_per_instance", "docs.doc_controls.for_subclass_implementers", "itertools.chain", "utils.generic_utils.default"], "engine.base_layer_v1.Layer.__init__": ["base_layer.Layer._instrument_layer_creation", "engine.base_layer_v1.Layer._set_dtype_policy", "engine.base_layer_v1.Layer._init_call_fn_args", "engine.base_layer_utils.v2_dtype_behavior_enabled", "keras.regularizers.get", "<builtin>.tuple", "engine.base_layer_v1.Layer._init_set_name", "threading.local", "engine.base_layer_v1.Layer._maybe_create_attribute", "utils.generic_utils.validate_kwargs"], "base_layer.Layer._instrument_layer_creation": [], "engine.base_layer_v1.Layer._init_set_name": ["utils.generic_utils.to_snake_case", "keras.backend.unique_object_name"], "engine.base_layer_v1.Layer._maybe_create_attribute": ["<builtin>.hasattr", "engine.base_layer_v1.Layer.__setattr__"], "engine.base_layer_v1.Layer._set_dtype_policy": ["mixed_precision.policy.Policy", "framework.dtypes.as_dtype", "mixed_precision.policy.global_policy", "mixed_precision.loss_scale_optimizer.strategy_supports_loss_scaling", "<builtin>.isinstance", "distribute.distribution_strategy_context.get_strategy", "<builtin>.ValueError", "mixed_precision.policy.deserialize"], "engine.base_layer_v1.Layer._init_call_fn_args": ["fget.cache.pop", "fget.cache.pop", "fget.cache.pop"], "engine.base_layer_v1.Layer.build": ["<builtin>.hasattr"], "engine.base_layer_v1.Layer.call": [], "engine.base_layer_v1.Layer._add_trackable": ["Layer._trainable_weights.append", "engine.base_layer_utils.TrackableWeightHandler", "Layer._non_trainable_weights.append", "<builtin>.isinstance"], "Layer._trainable_weights.append": [], "Layer._non_trainable_weights.append": [], "engine.base_layer_v1.Layer.add_weight": ["mixed_precision.policy.Policy", "engine.base_layer_v1.Layer._set_dtype_policy", "keras.constraints.get", "keras.backend.floatx", "base_layer.Layer._add_variable_with_custom_getter", "Layer._non_trainable_weights.append", "Layer._trainable_weights.append", "keras.regularizers.get", "platform.tf_logging.warning", "keras.initializers.get", "<builtin>.ValueError", "engine.base_layer_v1.Layer._handle_weight_regularization", "engine.base_layer_utils.is_split_variable", "keras.backend.track_variable", "<builtin>.TypeError", "framework.dtypes.as_dtype", "keras.initializers.zeros"], "keras.initializers.zeros": [], "engine.base_layer_v1.Layer.add_weight.getter": ["mixed_precision.autocast_variable.create_autocast_variable", "engine.base_layer_v1.Layer.add_weight.getter"], "base_layer.Layer._add_variable_with_custom_getter": [], "engine.base_layer_v1.Layer._handle_weight_regularization": ["engine.base_layer_utils.is_split_variable", "functools.partial", "engine.base_layer_v1.Layer.add_loss"], "engine.base_layer_v1.Layer.get_config": ["utils.tf_inspect.getfullargspec", "<builtin>.len", "<builtin>.hasattr", "mixed_precision.policy.serialize", "<builtin>.NotImplementedError"], "engine.base_layer_v1.Layer.from_config": ["engine.base_layer_v1.Layer.__init__"], "engine.base_layer_v1.Layer.compute_output_shape": ["framework.func_graph.FuncGraph", "framework.ops.get_default_graph", "engine.base_layer_v1.Layer.__init__", "<builtin>.NotImplementedError", "util.nest.map_structure", "utils.tf_utils.convert_shapes", "engine.base_layer_v1.Layer._maybe_build", "eager.context.executing_eagerly"], "engine.base_layer_v1.Layer._maybe_build": ["mixed_precision.policy.Policy", "engine.base_layer_v1.Layer._set_dtype_policy", "engine.base_layer_v1.Layer.set_weights", "util.nest.flatten", "<builtin>.hasattr", "<builtin>.all", "engine.base_layer_v1.Layer.build", "utils.tf_utils.maybe_init_scope", "util.nest.map_structure"], "engine.base_layer_v1.Layer.compute_output_shape.<lambda1>": [], "engine.base_layer_v1.Layer.compute_output_signature": ["util.nest.map_structure", "util.nest.flatten", "engine.base_layer_v1.Layer.compute_output_shape"], "engine.base_layer_v1.Layer.compute_output_signature.check_type_return_shape": ["<builtin>.TypeError", "<builtin>.isinstance"], "engine.base_layer_v1.Layer.compute_output_signature.<lambda1>": ["framework.tensor_spec.TensorSpec"], "engine.base_layer_v1.Layer.compute_mask": ["<builtin>.any", "<builtin>.str", "<builtin>.TypeError", "util.nest.flatten"], "engine.base_layer_v1.Layer.__call__": ["engine.base_layer_utils.is_subclassed", "base_layer.Layer._set_connectivity_metadata", "<builtin>.ValueError", "engine.base_layer_utils.call_context", "engine.base_layer_utils.from_saved_model", "engine.base_layer_v1.Layer._maybe_build", "engine.base_layer_v1.Layer._get_call_arg_value", "ops.math_ops.cast", "impl.api.tf_convert", "mixed_precision.autocast_variable.enable_auto_cast_variables", "engine.base_layer_v1.Layer._handle_activity_regularization", "engine.base_layer_utils.have_all_keras_metadata", "util.nest.flatten", "<builtin>.isinstance", "keras.backend.name_scope", "core.ag_ctx.control_status_ctx", "<builtin>.any", "engine.base_layer_v1.Layer.call", "util.nest.map_structure", "base_layer.Layer._set_inputs", "engine.base_layer_v1.Layer._collect_input_masks", "framework.tensor_util.is_tf_type", "keras.backend.learning_phase", "engine.base_layer_v1.Layer._name_scope", "<builtin>.bool", "keras.backend.get_graph", "engine.base_layer_v1.Layer._set_call_arg_value", "engine.base_layer_v1.Layer._symbolic_call", "utils.tf_utils.are_all_symbolic_tensors", "engine.base_layer_v1.Layer._assert_built_as_v1", "<builtin>.str", "keras.backend.global_learning_phase_is_set", "engine.base_layer_v1.Layer._set_mask_metadata", "engine.base_layer_v1.Layer._call_arg_was_passed", "engine.base_layer_v1.Layer._maybe_cast_inputs", "<builtin>.RuntimeError", "engine.base_layer_utils.is_in_keras_graph", "<builtin>.hasattr", "<builtin>.TypeError", "engine.base_layer_utils.needs_keras_history", "engine.base_layer_utils.create_keras_history"], "engine.base_layer_v1.Layer._assert_built_as_v1": ["<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.type"], "utils.tf_utils.are_all_symbolic_tensors": ["<builtin>.map", "<builtin>.all"], "engine.base_layer_v1.Layer.__call__._convert_non_tensor": ["framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance"], "engine.base_layer_v1.Layer._collect_input_masks": ["util.nest.map_structure", "engine.base_layer_v1.Layer._get_call_arg_value", "engine.base_layer_v1.Layer._call_arg_was_passed", "utils.generic_utils.is_all_none"], "engine.base_layer_v1.Layer._call_arg_was_passed": ["<builtin>.zip", "<builtin>.dict"], "engine.base_layer_v1.Layer._get_call_arg_value": ["<builtin>.zip", "<builtin>.dict"], "engine.base_layer_v1.Layer._set_call_arg_value": ["<builtin>.len", "<builtin>.list"], "engine.base_layer_v1.Layer._name_scope": [], "engine.base_layer_v1.Layer._maybe_cast_inputs": ["util.nest.map_structure", "framework.dtypes.as_dtype"], "engine.base_layer_v1.Layer._symbolic_call": ["util.nest.map_structure", "engine.base_layer_v1.Layer.compute_output_shape"], "base_layer.Layer._set_connectivity_metadata": [], "engine.base_layer_v1.Layer._handle_activity_regularization": ["engine.base_layer_utils.check_graph_consistency", "util.nest.flatten", "keras.backend.name_scope", "engine.base_layer_v1.Layer.add_loss", "ops.array_ops.shape", "ops.math_ops.cast"], "engine.base_layer_v1.Layer._set_mask_metadata": ["engine.base_layer_v1.Layer.compute_mask", "<builtin>.zip", "<builtin>.getattr", "util.nest.flatten", "<builtin>.hasattr", "<builtin>.all", "utils.tf_utils.are_all_symbolic_tensors"], "base_layer.Layer._set_inputs": [], "engine.base_layer_v1.Layer.dtype": [], "engine.base_layer_v1.Layer.name": [], "engine.base_layer_v1.Layer.dynamic": ["base_layer.Layer._flatten_layers", "<builtin>.any"], "base_layer.Layer._flatten_layers": [], "engine.base_layer_v1.Layer.stateful": ["base_layer.Layer._flatten_layers", "<builtin>.any"], "engine.base_layer_v1.Layer.trainable": ["<builtin>.getattr"], "engine.base_layer_v1.Layer.activity_regularizer": [], "engine.base_layer_v1.Layer.input_spec": ["<builtin>.TypeError", "util.nest.flatten", "<builtin>.isinstance"], "engine.base_layer_v1.Layer.updates": ["engine.base_layer_utils.check_graph_consistency", "<builtin>.type", "keras.backend.get_graph", "base_layer.Layer._flatten_layers", "<builtin>.callable"], "engine.base_layer_v1.Layer.losses": ["base_layer.Layer._flatten_layers"], "engine.base_layer_v1.Layer.add_loss": ["engine.base_layer_utils.check_graph_consistency", "functools.partial", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.tensor_util.is_tf_type", "keras.backend.floatx", "util.nest.flatten", "<builtin>.getattr", "engine.base_layer_utils.call_context", "engine.base_layer_utils.is_in_tf_function", "engine.base_layer_v1.Layer.add_loss._tag_unconditional", "base_layer.Layer._graph_network_add_loss", "utils.tf_utils.is_symbolic_tensor", "<builtin>.callable"], "engine.base_layer_v1.Layer.add_loss._tag_unconditional": ["mixed_precision.autocast_variable.enable_auto_cast_variables", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.floatx", "framework.tensor_util.is_tf_type", "<builtin>.callable"], "base_layer.Layer._graph_network_add_loss": [], "engine.base_layer_v1.Layer.metrics": ["base_layer.Layer._flatten_layers"], "engine.base_layer_v1.Layer.add_metric": ["<builtin>.getattr", "<builtin>.ValueError", "<builtin>.hasattr", "engine.base_layer_utils.call_context", "keras.backend.get_graph", "base_layer.Layer._graph_network_add_metric", "utils.tf_utils.is_symbolic_tensor", "engine.base_layer_v1.Layer._symbolic_add_metric", "<builtin>.str"], "engine.base_layer_v1.Layer._symbolic_add_metric": ["engine.base_layer_utils.check_graph_consistency", "<builtin>.ValueError", "<builtin>.hasattr", "engine.base_layer_utils.create_mean_metric", "engine.base_layer_v1.Layer._get_existing_metric"], "base_layer.Layer._graph_network_add_metric": [], "engine.base_layer_v1.Layer.add_update": ["platform.tf_logging.warning", "distribute.distribution_strategy_context.in_cross_replica_context", "<builtin>.getattr", "engine.base_layer_utils.call_context", "engine.base_layer_v1.Layer.add_update.process_update", "utils.generic_utils.to_list", "distribute.distribution_strategy_context.has_strategy"], "utils.generic_utils.to_list": ["<builtin>.isinstance"], "engine.base_layer_v1.Layer.add_update.process_update": ["framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance", "<builtin>.hasattr", "utils.tf_utils.get_reachable_from_inputs", "engine.base_layer_v1.Layer.add_update.process_update.<lambda1>", "<builtin>.callable"], "engine.base_layer_v1.Layer.add_update.process_update.<lambda1>": ["engine.base_layer_v1.Layer.add_update.process_update"], "utils.tf_utils.get_reachable_from_inputs": ["framework.tensor_util.is_tf_type", "util.nest.flatten", "collections.deque", "<builtin>.TypeError", "<builtin>.tuple", "<builtin>.str", "utils.object_identity.ObjectIdentitySet", "<builtin>.isinstance"], "engine.base_layer_v1.Layer.set_weights": ["<builtin>.str", "weights.shape.is_compatible_with", "<builtin>.len", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.hasattr", "keras.backend.batch_set_value", "Layer.weights.set_weights"], "Layer.weights.set_weights": [], "weights.shape.is_compatible_with": [], "engine.base_layer_v1.Layer.get_weights": ["keras.backend.batch_get_value", "Layer.weights.get_tensors", "<builtin>.isinstance"], "Layer.weights.get_tensors": [], "engine.base_layer_v1.Layer.get_updates_for": ["utils.tf_utils.get_reachable_from_inputs", "util.nest.flatten"], "engine.base_layer_v1.Layer.get_losses_for": ["utils.tf_utils.get_reachable_from_inputs", "util.nest.flatten"], "engine.base_layer_v1.Layer.get_input_mask_at": ["<builtin>.getattr", "engine.base_layer_v1.Layer.get_input_at", "<builtin>.isinstance"], "engine.base_layer_v1.Layer.get_input_at": ["engine.base_layer_v1.Layer._get_node_attribute_at_index"], "engine.base_layer_v1.Layer.get_output_mask_at": ["engine.base_layer_v1.Layer.get_output_at", "<builtin>.getattr", "<builtin>.isinstance"], "engine.base_layer_v1.Layer.get_output_at": ["engine.base_layer_v1.Layer._get_node_attribute_at_index"], "engine.base_layer_v1.Layer.input_mask": ["<builtin>.getattr", "<builtin>.isinstance"], "engine.base_layer_v1.Layer.output_mask": ["<builtin>.getattr", "<builtin>.isinstance"], "engine.base_layer_v1.Layer.get_input_shape_at": ["engine.base_layer_v1.Layer._get_node_attribute_at_index"], "engine.base_layer_v1.Layer._get_node_attribute_at_index": ["<builtin>.RuntimeError", "<builtin>.len", "<builtin>.getattr", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.str"], "engine.base_layer_v1.Layer.get_output_shape_at": ["engine.base_layer_v1.Layer._get_node_attribute_at_index"], "engine.base_layer_v1.Layer.input": ["engine.base_layer_v1.Layer._get_node_attribute_at_index", "<builtin>.AttributeError"], "engine.base_layer_v1.Layer.output": ["engine.base_layer_v1.Layer._get_node_attribute_at_index", "<builtin>.AttributeError"], "engine.base_layer_v1.Layer.input_shape": ["<builtin>.str", "<builtin>.AttributeError", "<builtin>.len", "<builtin>.set"], "engine.base_layer_v1.Layer.count_params": ["utils.layer_utils.count_params", "<builtin>.getattr", "<builtin>.ValueError", "utils.tf_utils.maybe_init_scope", "engine.base_layer_v1.Layer._maybe_build"], "engine.base_layer_v1.Layer.output_shape": ["<builtin>.str", "<builtin>.AttributeError", "<builtin>.len", "<builtin>.set"], "engine.base_layer_v1.Layer.inbound_nodes": [], "engine.base_layer_v1.Layer.outbound_nodes": [], "engine.base_layer_v1.Layer.apply": ["engine.base_layer_v1.Layer.__call__", "warnings.warn"], "engine.base_layer_v1.Layer.add_variable": ["warnings.warn", "engine.base_layer_v1.Layer.add_weight"], "engine.base_layer_v1.Layer.variables": [], "engine.base_layer_v1.Layer.trainable_variables": [], "engine.base_layer_v1.Layer.non_trainable_variables": [], "engine.base_layer_v1.Layer._inbound_nodes": [], "engine.base_layer_v1.Layer._outbound_nodes": [], "engine.base_layer_v1.Layer._compute_dtype": [], "engine.base_layer_v1.Layer._maybe_cast_inputs.f": ["framework.tensor_spec.TensorSpec", "ops.math_ops.cast", "<builtin>.isinstance"], "engine.base_layer_v1.Layer._dtype": ["mixed_precision.policy.Policy", "engine.base_layer_v1.Layer._set_dtype_policy", "framework.dtypes.as_dtype"], "engine.base_layer_v1.Layer._get_existing_metric": ["<builtin>.len", "<builtin>.ValueError"], "engine.base_layer_v1.Layer._handle_weight_regularization._loss_for_variable": ["keras.backend.name_scope"], "engine.base_layer_v1.Layer._collect_input_masks.<lambda1>": ["<builtin>.getattr"], "utils.generic_utils.is_all_none": ["util.nest.flatten"], "engine.base_layer_v1.Layer._maybe_build.<lambda1>": [], "engine.base_layer_v1.Layer._symbolic_call.<lambda1>": [], "engine.base_layer_v1.Layer._symbolic_call._make_placeholder_like": ["keras.backend.placeholder"], "engine.base_layer_v1.Layer._get_trainable_state": ["base_layer.Layer._flatten_layers"], "engine.base_layer_v1.Layer._set_trainable_state": ["base_layer.Layer._flatten_layers"], "engine.base_layer_v1.Layer._obj_reference_counts": ["utils.object_identity.ObjectIdentityDictionary", "engine.base_layer_v1.Layer._maybe_create_attribute"], "engine.base_layer_v1.Layer.__setattr__": ["engine.base_layer_utils.has_weights", "tracking.data_structures.sticky_attribute_assignment", "Layer._non_trainable_weights.append", "Layer._trainable_weights.append", "<builtin>.AttributeError", "keras.backend.track_variable", "<builtin>.getattr", "util.nest.flatten", "<builtin>.hasattr", "engine.base_layer_v1.Layer.__delattr__", "<builtin>.isinstance", "<builtin>.any", "engine.base_layer_v1.Layer._maybe_create_attribute", "<builtin>.super", "Layer._self_tracked_trackables.append"], "engine.base_layer_v1.Layer.__delattr__": ["<builtin>.isinstance", "engine.base_layer_utils.has_weights", "<builtin>.getattr", "<builtin>.super"], "Layer._self_tracked_trackables.append": [], "engine.base_layer_v1.Layer._is_layer": [], "engine.base_layer_v1.Layer._call_full_argspec": ["utils.tf_inspect.getfullargspec"], "engine.base_layer_v1.Layer._call_fn_args": [], "engine.base_layer_v1.Layer._call_fn_arg_positions": ["<builtin>.enumerate", "<builtin>.dict"], "engine.base_layer_v1.Layer._call_accepts_kwargs": [], "engine.base_layer_v1.Layer._should_compute_mask": ["<builtin>.getattr"], "engine.base_layer_v1.Layer._dedup_weights": ["<builtin>.set", "<builtin>.id"], "engine.base_layer_v1.Layer._trackable_saved_model_saver": ["saved_model.layer_serialization.LayerSavedModelSaver"], "engine.base_layer_v1.Layer._object_identifier": [], "engine.base_layer_v1.Layer._tracking_metadata": [], "engine.base_layer_v1.Layer._list_extra_dependencies_for_serialization": [], "engine.base_layer_v1.Layer._list_functions_for_serialization": [], "engine.base_layer_v1.Layer.__getstate__": ["Layer.__dict__.copy"], "Layer.__dict__.copy": [], "engine.base_layer_v1.Layer.__setstate__": ["threading.local"], "engine.base_preprocessing_layer": [], "engine.base_preprocessing_layer.PreprocessingLayer.__init__": ["<builtin>.super"], "engine.base_preprocessing_layer.PreprocessingLayer.streaming": [], "engine.base_preprocessing_layer.PreprocessingLayer.is_adapted": [], "engine.base_preprocessing_layer.PreprocessingLayer.update_state": [], "engine.base_preprocessing_layer.PreprocessingLayer.reset_state": [], "engine.base_preprocessing_layer.PreprocessingLayer.merge_state": [], "engine.base_preprocessing_layer.PreprocessingLayer.finalize_state": [], "engine.base_preprocessing_layer.PreprocessingLayer.make_adapt_function": ["eager.def_function.function"], "engine.base_preprocessing_layer.PreprocessingLayer.make_adapt_function.adapt_step": ["engine.base_preprocessing_layer.PreprocessingLayer.update_state", "engine.base_preprocessing_layer.PreprocessingLayer._adapt_maybe_build", "<builtin>.next"], "engine.base_preprocessing_layer.PreprocessingLayer._adapt_maybe_build": ["<builtin>.getattr", "<builtin>.len", "<builtin>.tuple", "base_layer.Layer.build"], "engine.base_preprocessing_layer.PreprocessingLayer.make_adapt_function.adapt_fn": ["engine.base_preprocessing_layer.PreprocessingLayer.make_adapt_function.adapt_step", "ops.math_ops.range"], "engine.base_preprocessing_layer.PreprocessingLayer.compile": ["engine.base_preprocessing_layer.PreprocessingLayer._configure_steps_per_execution"], "engine.base_preprocessing_layer.PreprocessingLayer._configure_steps_per_execution": ["ops.variables.Variable"], "engine.base_preprocessing_layer.PreprocessingLayer.adapt": ["engine.base_preprocessing_layer.PreprocessingLayer.make_adapt_function.adapt_step", "eager.context.async_wait", "engine.base_preprocessing_layer.PreprocessingLayer._reset_state_wrapper", "<builtin>.ValueError", "engine.base_preprocessing_layer.PreprocessingLayer.compile", "engine.base_preprocessing_layer.PreprocessingLayer.finalize_state", "engine.base_preprocessing_layer.PreprocessingLayer.make_adapt_function", "<builtin>.RuntimeError", "engine.base_preprocessing_layer._disallow_inside_tf_function", "utils.version_utils.should_use_v2", "engine.data_adapter.DataHandler"], "engine.base_preprocessing_layer._disallow_inside_tf_function": ["<builtin>.RuntimeError", "framework.ops.inside_function"], "utils.version_utils.should_use_v2": ["<builtin>.getattr", "framework.ops.get_default_graph", "eager.context.executing_eagerly", "framework.ops.executing_eagerly_outside_functions"], "engine.base_preprocessing_layer.PreprocessingLayer._reset_state_wrapper": ["engine.base_preprocessing_layer.PreprocessingLayer._reset_state_wrapper"], "engine.data_adapter.DataHandler": ["contextlib.contextmanager"], "eager.context.async_wait": ["eager.context.context"], "engine.base_preprocessing_layer.PreprocessingLayer": ["tracking.base.no_automatic_dependency_tracking"], "base_layer.Layer.build": [], "engine.base_preprocessing_layer.CombinerPreprocessingLayer.__init__": ["<builtin>.super", "collections.OrderedDict"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer.reset_state": [], "engine.base_preprocessing_layer.CombinerPreprocessingLayer": ["tracking.base.no_automatic_dependency_tracking"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer.update_state": ["engine.base_preprocessing_layer.CombinerPreprocessingLayer._get_accumulator"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer._get_accumulator": ["engine.base_preprocessing_layer.CombinerPreprocessingLayer._restore_updates"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer.merge_state": ["engine.base_preprocessing_layer.CombinerPreprocessingLayer._get_accumulator", "engine.base_preprocessing_layer.CombinerPreprocessingLayer._set_accumulator"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer._set_accumulator": ["engine.base_preprocessing_layer.CombinerPreprocessingLayer._set_state_variables"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer.finalize_state": ["engine.base_preprocessing_layer.CombinerPreprocessingLayer._set_accumulator"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer.compile": ["<builtin>.super"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer.adapt": ["<builtin>.super", "engine.base_preprocessing_layer.CombinerPreprocessingLayer._restore_updates"], "engine.base_preprocessing_layer.CombinerPreprocessingLayer._restore_updates": [], "engine.base_preprocessing_layer.CombinerPreprocessingLayer._add_state_variable": ["base_layer.Layer.add_weight"], "base_layer.Layer.add_weight": [], "engine.base_preprocessing_layer.CombinerPreprocessingLayer._set_state_variables": ["framework.ops.init_scope", "<builtin>.RuntimeError"], "engine.base_preprocessing_layer.convert_to_list": ["ops.sparse_ops.sparse_tensor_to_dense", "keras.backend.get_value", "eager.context.executing_eagerly", "keras.backend.get_session", "<builtin>.isinstance", "utils.tf_utils.is_ragged", "framework.dtypes.as_dtype"], "ops.sparse_ops.sparse_tensor_to_dense": ["ops.gen_sparse_ops.sparse_to_dense", "ops.array_ops.zeros", "ops.sparse_ops._convert_to_sparse_tensor"], "keras.backend.get_value": ["eager.context.eager_mode", "framework.ops.init_scope", "<builtin>.isinstance", "eager.context.executing_eagerly", "framework.ops.executing_eagerly_outside_functions", "framework.tensor_util.is_tf_type", "<builtin>.getattr", "keras.backend.get_session"], "engine.base_preprocessing_layer.Combiner.__repr__": [], "engine.base_preprocessing_layer.Combiner": ["abc.abstractmethod"], "engine.base_preprocessing_layer.Combiner.compute": [], "engine.base_preprocessing_layer.Combiner.merge": [], "engine.base_preprocessing_layer.Combiner.extract": [], "engine.base_preprocessing_layer.Combiner.restore": [], "engine.base_preprocessing_layer.Combiner.serialize": [], "engine.base_preprocessing_layer.Combiner.deserialize": [], "engine.compile_utils": [], "engine.compile_utils.Container.__init__": [], "engine.compile_utils.Container.build": ["engine.compile_utils.create_pseudo_output_names"], "engine.compile_utils.create_pseudo_output_names": ["engine.compile_utils._create_pseudo_names"], "engine.compile_utils.Container._conform_to_outputs": ["util.nest.is_nested", "engine.compile_utils.map_to_output_names", "util.nest.map_structure", "engine.compile_utils.map_missing_dict_keys"], "engine.compile_utils.map_to_output_names": ["<builtin>.len", "<builtin>.isinstance", "engine.compile_utils.create_pseudo_output_names", "<builtin>.any", "copy.copy", "<builtin>.ValueError", "util.nest.is_nested"], "engine.compile_utils.map_missing_dict_keys": ["<builtin>.isinstance"], "engine.compile_utils.Container._conform_to_outputs.<lambda1>": [], "engine.compile_utils.Container._maybe_broadcast_to_outputs": ["util.nest.flatten", "<builtin>.len", "engine.compile_utils.Container._should_broadcast", "util.nest.map_structure"], "engine.compile_utils.Container._should_broadcast": [], "engine.compile_utils.Container._maybe_broadcast_to_outputs._broadcast_fn": ["util.nest.map_structure"], "engine.compile_utils.Container._maybe_broadcast_to_outputs.<lambda1>": ["engine.compile_utils.Container._maybe_broadcast_to_outputs._broadcast_fn"], "engine.compile_utils.Container._copy_object": [], "engine.compile_utils.LossesContainer.__init__": ["<builtin>.super", "keras.metrics.Mean"], "engine.compile_utils.LossesContainer.metrics": ["util.nest.flatten"], "engine.compile_utils.LossesContainer.build": ["util.nest.map_structure", "engine.compile_utils.Container._maybe_broadcast_to_outputs", "engine.compile_utils.Container._conform_to_outputs", "util.nest.flatten", "engine.compile_utils.LossesContainer._create_metrics", "<builtin>.super"], "engine.compile_utils.LossesContainer._create_metrics": ["<builtin>.len", "<builtin>.zip", "keras.metrics.Mean"], "engine.compile_utils.LossesContainer.built": [], "engine.compile_utils.LossesContainer.__call__": ["engine.compile_utils.apply_mask", "ops.array_ops.shape", "ops.array_ops.zeros", "<builtin>.zip", "utils.tf_utils.is_ragged", "util.nest.flatten", "utils.losses_utils.cast_losses_to_common_dtype", "ops.math_ops.add_n", "utils.losses_utils.scale_loss_for_distribution", "distribute.distribution_strategy_context.get_strategy", "engine.compile_utils.Container._conform_to_outputs", "engine.compile_utils.match_dtype_and_rank", "engine.compile_utils.LossesContainer.build", "engine.compile_utils.get_mask"], "engine.compile_utils.match_dtype_and_rank": ["ops.array_ops.expand_dims_v2", "ops.math_ops.cast"], "engine.compile_utils.get_mask": ["<builtin>.getattr"], "engine.compile_utils.apply_mask": ["utils.losses_utils.squeeze_or_expand_dimensions", "ops.math_ops.cast"], "utils.losses_utils.scale_loss_for_distribution": ["distribute.distribution_strategy_context.get_strategy"], "utils.losses_utils.cast_losses_to_common_dtype": ["ops.math_ops.cast"], "ops.math_ops.add_n": ["framework.ops.convert_n_to_tensor_or_indexed_slices", "ops.array_ops.identity", "<builtin>.ValueError", "ops.gen_math_ops.add_n", "<builtin>.isinstance", "<builtin>.len", "framework.ops.convert_to_tensor", "<builtin>.all"], "engine.compile_utils.LossesContainer.reset_state": ["util.nest.flatten"], "engine.compile_utils.LossesContainer._get_loss_object": ["<builtin>.isinstance", "keras.losses.LossFunctionWrapper", "keras.losses.get", "<builtin>.ValueError", "engine.compile_utils.get_custom_object_name"], "keras.losses.get": ["<builtin>.callable", "<builtin>.isinstance", "<builtin>.str", "<builtin>.ValueError", "keras.losses.deserialize"], "engine.compile_utils.get_custom_object_name": ["<builtin>.hasattr", "utils.generic_utils.to_snake_case"], "keras.losses.LossFunctionWrapper": [], "engine.compile_utils.LossesContainer._should_broadcast": ["util.nest.is_nested"], "engine.compile_utils.LossesContainer._copy_object": [], "engine.compile_utils.MetricsContainer.__init__": ["<builtin>.super"], "engine.compile_utils.MetricsContainer.metrics": [], "engine.compile_utils.MetricsContainer.unweighted_metrics": ["util.nest.flatten"], "engine.compile_utils.MetricsContainer.weighted_metrics": ["util.nest.flatten"], "engine.compile_utils.MetricsContainer.build": ["util.nest.map_structure_up_to", "engine.compile_utils.MetricsContainer._set_metric_names", "engine.compile_utils.MetricsContainer._create_ordered_metrics", "engine.compile_utils.Container._maybe_broadcast_to_outputs", "engine.compile_utils.Container._conform_to_outputs", "util.nest.flatten_up_to", "util.nest.list_to_tuple", "<builtin>.super"], "util.nest.list_to_tuple": ["util.nest.flatten", "util.nest._pack_sequence_as"], "engine.compile_utils.MetricsContainer._set_metric_names": ["<builtin>.len", "<builtin>.zip", "<builtin>.set", "<builtin>.ValueError"], "engine.compile_utils.MetricsContainer._create_ordered_metrics": ["util.nest.flatten", "<builtin>.zip"], "engine.compile_utils.MetricsContainer.built": [], "engine.compile_utils.MetricsContainer.update_state": ["engine.compile_utils.apply_mask", "<builtin>.zip", "engine.compile_utils.MetricsContainer.build", "<builtin>.all", "engine.compile_utils.Container._conform_to_outputs", "engine.compile_utils.match_dtype_and_rank", "util.nest.flatten", "engine.compile_utils.get_mask"], "engine.compile_utils.MetricsContainer.reset_state": ["util.nest.flatten", "<builtin>.isinstance"], "engine.compile_utils.MetricsContainer._get_metric_objects": ["util.nest.flatten", "engine.compile_utils.MetricsContainer._get_metric_object"], "engine.compile_utils.MetricsContainer._get_metric_object": ["<builtin>.len", "<builtin>.str", "<builtin>.isinstance", "keras.metrics.MeanMetricWrapper", "keras.metrics.get", "<builtin>.ValueError", "engine.compile_utils.get_custom_object_name"], "keras.metrics.get": ["keras.metrics.deserialize", "<builtin>.callable", "<builtin>.str", "<builtin>.isinstance", "<builtin>.ValueError"], "keras.metrics.MeanMetricWrapper": [], "engine.compile_utils.MetricsContainer._should_broadcast": ["util.nest.is_nested", "<builtin>.any", "<builtin>.isinstance"], "engine.compile_utils.MetricsContainer._copy_object": ["<builtin>.isinstance"], "engine.compile_utils._create_pseudo_names": ["<builtin>.str", "<builtin>.isinstance", "util.nest.map_structure", "util.nest.yield_flat_paths", "<builtin>.list"], "engine.compile_utils.create_pseudo_input_names": ["engine.compile_utils._create_pseudo_names"], "engine.compile_utils._create_pseudo_names.one_index": ["<builtin>.isinstance"], "util.nest.yield_flat_paths": ["util.nest._yield_flat_up_to"], "ops.array_ops.expand_dims_v2": ["ops.gen_array_ops.expand_dims"], "utils.losses_utils.squeeze_or_expand_dimensions": ["ops.array_ops.shape", "ops.array_ops.expand_dims", "utils.losses_utils.remove_squeezable_dimensions", "ops.math_ops.equal", "ops.array_ops.squeeze", "ops.array_ops.rank", "ops.control_flow_ops.cond"], "engine.data_adapter": ["util.tf_export.keras_export"], "engine.data_adapter.DataAdapter.can_handle": [], "engine.data_adapter.DataAdapter": ["abc.abstractmethod"], "engine.data_adapter.DataAdapter.__init__": ["engine.data_adapter.DataAdapter.can_handle", "engine.data_adapter.TensorLikeDataAdapter.can_handle", "<builtin>.ValueError"], "engine.data_adapter.TensorLikeDataAdapter.can_handle": ["engine.data_adapter.TensorLikeDataAdapter.can_handle._is_tensor", "util.nest.flatten", "engine.data_adapter._get_tensor_types", "<builtin>.all"], "engine.data_adapter.DataAdapter.get_dataset": [], "engine.data_adapter.DataAdapter.get_size": [], "engine.data_adapter.DataAdapter.batch_size": [], "engine.data_adapter.DataAdapter.representative_batch_size": ["engine.data_adapter.TensorLikeDataAdapter.batch_size", "engine.data_adapter.DataAdapter.batch_size"], "engine.data_adapter.TensorLikeDataAdapter.batch_size": [], "engine.data_adapter.DataAdapter.has_partial_batch": [], "engine.data_adapter.DataAdapter.partial_batch_size": [], "engine.data_adapter.DataAdapter.should_recreate_iterator": [], "engine.data_adapter.DataAdapter.get_samples": ["engine.data_adapter.TensorLikeDataAdapter.partial_batch_size", "engine.data_adapter.TensorLikeDataAdapter.get_size", "engine.data_adapter.DataAdapter.batch_size", "engine.data_adapter.DataAdapter.partial_batch_size", "engine.data_adapter.TensorLikeDataAdapter.batch_size", "engine.data_adapter.DataAdapter.has_partial_batch", "engine.data_adapter.TensorLikeDataAdapter.has_partial_batch", "engine.data_adapter.DataAdapter.get_size"], "engine.data_adapter.TensorLikeDataAdapter.get_size": [], "engine.data_adapter.TensorLikeDataAdapter.has_partial_batch": [], "engine.data_adapter.TensorLikeDataAdapter.partial_batch_size": [], "engine.data_adapter.DataAdapter.on_epoch_end": [], "engine.data_adapter._get_tensor_types": [], "engine.data_adapter.TensorLikeDataAdapter.can_handle._is_tensor": ["<builtin>.isinstance"], "engine.data_adapter.TensorLikeDataAdapter.__init__": ["dataset_ops.DatasetV2.range", "engine.training_utils.handle_partial_sample_weights", "<builtin>.set", "<builtin>.isinstance", "engine.data_adapter.broadcast_sample_weight_modes", "engine.data_adapter.TensorLikeDataAdapter.slice_inputs", "engine.data_adapter.pack_x_y_sample_weight", "<builtin>.int", "util.nest.flatten", "math.ceil", "engine.data_adapter._process_tensorlike", "<builtin>.super", "engine.data_adapter._check_data_cardinality"], "engine.data_adapter._process_tensorlike": ["util.nest.list_to_tuple", "util.nest.map_structure"], "engine.data_adapter.broadcast_sample_weight_modes": ["util.nest.map_structure", "<builtin>.isinstance", "util.nest.assert_same_structure", "util.nest.pack_sequence_as", "platform.tf_logging.warning", "engine.training_utils.list_to_tuple", "util.nest.flatten", "<builtin>.ValueError", "<builtin>.str"], "engine.training_utils.handle_partial_sample_weights": ["engine.training_utils.list_to_tuple", "ops.array_ops.ones", "util.nest.assert_same_structure", "<builtin>.enumerate", "<builtin>.any", "numpy.ones", "<builtin>.isinstance", "ops.array_ops.shape", "util.nest.flatten"], "engine.data_adapter.pack_x_y_sample_weight": ["util.nest.is_nested"], "engine.data_adapter._check_data_cardinality": ["<builtin>.set", "<builtin>.len", "<builtin>.int", "util.nest.flatten", "<builtin>.zip", "<builtin>.ValueError", "<builtin>.str"], "dataset_ops.DatasetV2.range": [], "engine.data_adapter.TensorLikeDataAdapter.__init__.permutation": ["ops.math_ops.range", "ops.random_ops.random_shuffle"], "ops.random_ops.random_shuffle": ["framework.random_seed.get_seed", "ops.gen_random_ops.random_shuffle"], "engine.data_adapter.TensorLikeDataAdapter.__init__.slice_batch_indices": ["dataset_ops.DatasetV2.from_tensors", "ops.array_ops.slice", "ops.array_ops.reshape", "dataset_ops.DatasetV2.from_tensor_slices"], "dataset_ops.DatasetV2.from_tensors": [], "engine.data_adapter.TensorLikeDataAdapter.slice_inputs": ["dataset_ops.DatasetV2.from_tensors", "ops.options.Options", "dataset_ops.DatasetV2.zip"], "engine.data_adapter.TensorLikeDataAdapter.__init__.shuffle_batch": ["util.nest.map_structure"], "engine.data_adapter.TensorLikeDataAdapter.slice_inputs.grab_batch": ["util.nest.map_structure"], "engine.data_adapter.TensorLikeDataAdapter.slice_inputs.grab_batch.<lambda1>": ["ops.array_ops.gather"], "engine.data_adapter.TensorLikeDataAdapter.get_dataset": [], "engine.data_adapter.TensorLikeDataAdapter.should_recreate_iterator": [], "engine.data_adapter.GenericArrayLikeDataAdapter.can_handle": ["engine.data_adapter.GenericArrayLikeDataAdapter.can_handle._is_array_like", "<builtin>.all", "util.nest.flatten", "engine.data_adapter.CompositeTensorDataAdapter.can_handle", "engine.data_adapter.TensorLikeDataAdapter.can_handle"], "engine.data_adapter.GenericArrayLikeDataAdapter.can_handle._is_array_like": ["<builtin>.hasattr"], "engine.data_adapter.CompositeTensorDataAdapter.can_handle": ["<builtin>.all", "engine.data_adapter.CompositeTensorDataAdapter.can_handle._is_composite", "engine.data_adapter.CompositeTensorDataAdapter.can_handle._is_tensor_or_composite", "util.nest.flatten", "<builtin>.any"], "engine.data_adapter.GenericArrayLikeDataAdapter.__init__": ["platform.tf_logging.warning", "<builtin>.super"], "engine.data_adapter.GenericArrayLikeDataAdapter.slice_inputs": ["util.nest.flatten"], "engine.data_adapter.GenericArrayLikeDataAdapter.slice_inputs.dynamic_shape_like": ["<builtin>.tuple", "<builtin>.list"], "engine.data_adapter.GenericArrayLikeDataAdapter.slice_inputs.grab_batch": ["util.nest.pack_sequence_as", "<builtin>.zip", "ops.script_ops.eager_py_func", "engine.data_adapter.GenericArrayLikeDataAdapter.slice_inputs.dynamic_shape_like"], "engine.data_adapter.GenericArrayLikeDataAdapter.slice_inputs.grab_batch.py_method": ["engine.data_adapter.GenericArrayLikeDataAdapter.slice_inputs.grab_batch.py_method.slice_array"], "engine.data_adapter.GenericArrayLikeDataAdapter.slice_inputs.grab_batch.py_method.slice_array": ["engine.training_utils.slice_arrays"], "engine.training_utils.slice_arrays": ["<builtin>.any", "framework.tensor_util.is_tf_type", "utils.generic_utils.slice_arrays", "<builtin>.isinstance", "ops.array_ops.concat"], "engine.data_adapter.DatasetCreatorAdapter.__init__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.TypeError", "<builtin>.type", "<builtin>.ValueError"], "engine.data_adapter.DatasetCreatorAdapter.can_handle": ["<builtin>.isinstance"], "engine.data_adapter.DatasetCreatorAdapter.should_recreate_iterator": [], "engine.data_adapter.DatasetCreatorAdapter.get_size": [], "engine.data_adapter.DatasetCreatorAdapter.get_dataset": [], "engine.data_adapter.DatasetCreatorAdapter.batch_size": ["<builtin>.NotImplementedError"], "engine.data_adapter.DatasetCreatorAdapter.has_partial_batch": ["<builtin>.NotImplementedError"], "engine.data_adapter.DatasetCreatorAdapter.partial_batch_size": ["<builtin>.NotImplementedError"], "engine.data_adapter.CompositeTensorDataAdapter.can_handle._is_composite": ["engine.data_adapter._is_scipy_sparse", "<builtin>.isinstance", "engine.data_adapter._is_distributed_dataset", "utils.tf_utils.is_extension_type"], "utils.tf_utils.is_extension_type": ["<builtin>.isinstance"], "engine.data_adapter._is_distributed_dataset": ["<builtin>.isinstance"], "engine.data_adapter._is_scipy_sparse": ["scipy.sparse.issparse"], "engine.data_adapter.CompositeTensorDataAdapter.can_handle._is_tensor_or_composite": ["<builtin>.isinstance", "engine.data_adapter.CompositeTensorDataAdapter.can_handle._is_composite"], "engine.data_adapter.CompositeTensorDataAdapter.__init__": ["engine.training_utils.handle_partial_sample_weights", "dataset_ops.DatasetV2.from_tensor_slices", "engine.data_adapter.broadcast_sample_weight_modes", "engine.data_adapter.pack_x_y_sample_weight", "<builtin>.int", "util.nest.flatten", "math.ceil", "engine.data_adapter._process_tensorlike", "<builtin>.super"], "engine.data_adapter.CompositeTensorDataAdapter.get_dataset": [], "engine.data_adapter.CompositeTensorDataAdapter.get_size": [], "engine.data_adapter.CompositeTensorDataAdapter.batch_size": [], "engine.data_adapter.CompositeTensorDataAdapter.has_partial_batch": [], "engine.data_adapter.CompositeTensorDataAdapter.partial_batch_size": [], "engine.data_adapter.CompositeTensorDataAdapter.should_recreate_iterator": [], "engine.data_adapter.ListsOfScalarsDataAdapter.can_handle": ["engine.data_adapter.ListsOfScalarsDataAdapter._is_list_of_scalars"], "engine.data_adapter.ListsOfScalarsDataAdapter._is_list_of_scalars": ["engine.data_adapter.ListsOfScalarsDataAdapter._is_list_of_scalars", "<builtin>.isinstance"], "engine.data_adapter.ListsOfScalarsDataAdapter.__init__": ["engine.data_adapter.broadcast_sample_weight_modes", "engine.data_adapter.TensorLikeDataAdapter.__init__", "numpy.asarray", "<builtin>.super"], "engine.data_adapter.ListsOfScalarsDataAdapter.get_dataset": ["engine.data_adapter.TensorLikeDataAdapter.get_dataset"], "engine.data_adapter.ListsOfScalarsDataAdapter.get_size": ["engine.data_adapter.TensorLikeDataAdapter.get_size"], "engine.data_adapter.ListsOfScalarsDataAdapter.batch_size": ["engine.data_adapter.TensorLikeDataAdapter.batch_size"], "engine.data_adapter.ListsOfScalarsDataAdapter.has_partial_batch": ["engine.data_adapter.TensorLikeDataAdapter.has_partial_batch"], "engine.data_adapter.ListsOfScalarsDataAdapter.partial_batch_size": ["engine.data_adapter.TensorLikeDataAdapter.partial_batch_size"], "engine.data_adapter.ListsOfScalarsDataAdapter.should_recreate_iterator": [], "engine.data_adapter.DatasetAdapter.can_handle": ["<builtin>.isinstance", "engine.data_adapter._is_distributed_dataset"], "engine.data_adapter.DatasetAdapter.__init__": ["engine.data_adapter.DatasetAdapter._validate_args", "<builtin>.super"], "engine.data_adapter.DatasetAdapter._validate_args": ["ops.cardinality.cardinality", "<builtin>.ValueError", "engine.data_adapter._is_distributed_dataset", "engine.data_adapter.is_none_or_empty"], "engine.data_adapter.DatasetAdapter.get_dataset": [], "engine.data_adapter.DatasetAdapter.get_size": [], "engine.data_adapter.DatasetAdapter.batch_size": [], "engine.data_adapter.DatasetAdapter.has_partial_batch": [], "engine.data_adapter.DatasetAdapter.partial_batch_size": [], "engine.data_adapter.DatasetAdapter.should_recreate_iterator": ["engine.data_adapter._is_distributed_dataset", "ops.cardinality.cardinality"], "engine.data_adapter.is_none_or_empty": ["util.nest.flatten"], "engine.data_adapter.GeneratorDataAdapter.can_handle": ["<builtin>.hasattr", "<builtin>.isinstance"], "engine.data_adapter.GeneratorDataAdapter.__init__": ["dataset_ops.DatasetV2.from_generator", "util.nest.map_structure", "engine.data_adapter.GeneratorDataAdapter._standardize_batch", "engine.data_adapter.GeneratorDataAdapter._peek_and_restore", "engine.data_adapter.unpack_x_y_sample_weight", "<builtin>.int", "engine.data_adapter.is_none_or_empty", "util.nest.flatten", "<builtin>.super", "engine.data_adapter._process_tensorlike", "<builtin>.ValueError", "engine.data_adapter.GeneratorDataAdapter._handle_multiprocessing"], "engine.data_adapter.GeneratorDataAdapter._peek_and_restore": ["<builtin>.next", "itertools.chain"], "engine.data_adapter.GeneratorDataAdapter._standardize_batch": ["util.nest.list_to_tuple", "util.nest.map_structure", "engine.data_adapter.pack_x_y_sample_weight", "engine.data_adapter.unpack_x_y_sample_weight"], "engine.data_adapter.unpack_x_y_sample_weight": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.ValueError"], "engine.data_adapter.GeneratorDataAdapter.__init__.<lambda1>": [], "engine.data_adapter.GeneratorDataAdapter.__init__._get_dynamic_shape": ["framework.tensor_shape.TensorShape"], "engine.data_adapter.GeneratorDataAdapter.__init__.<lambda2>": [], "engine.data_adapter.GeneratorDataAdapter._handle_multiprocessing": [], "engine.data_adapter.GeneratorDataAdapter.__init__.wrapped_generator": ["engine.data_adapter.GeneratorDataAdapter._standardize_batch", "engine.data_adapter.GeneratorDataAdapter._handle_multiprocessing.<lambda1>"], "engine.data_adapter.GeneratorDataAdapter._handle_multiprocessing.<lambda1>": [], "dataset_ops.DatasetV2.from_generator": [], "engine.data_adapter.GeneratorDataAdapter._standardize_batch._convert_dtype": ["<builtin>.issubclass", "<builtin>.isinstance", "numpy.array", "keras.backend.floatx"], "engine.data_adapter.GeneratorDataAdapter._handle_multiprocessing.generator_fn": ["utils.data_utils.GeneratorEnqueuer"], "utils.data_utils.GeneratorEnqueuer": [], "engine.data_adapter.GeneratorDataAdapter.get_dataset": [], "engine.data_adapter.GeneratorDataAdapter.get_size": [], "engine.data_adapter.GeneratorDataAdapter.batch_size": [], "engine.data_adapter.GeneratorDataAdapter.representative_batch_size": [], "engine.data_adapter.GeneratorDataAdapter.has_partial_batch": [], "engine.data_adapter.GeneratorDataAdapter.partial_batch_size": [], "engine.data_adapter.GeneratorDataAdapter.should_recreate_iterator": [], "engine.data_adapter.KerasSequenceAdapter.can_handle": ["<builtin>.isinstance"], "engine.data_adapter.KerasSequenceAdapter.__init__": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.len", "engine.data_adapter.is_none_or_empty"], "engine.data_adapter.KerasSequenceAdapter._peek_and_restore": [], "engine.data_adapter.KerasSequenceAdapter._handle_multiprocessing": [], "engine.data_adapter.KerasSequenceAdapter._handle_multiprocessing.generator_fn": ["<builtin>.len", "utils.data_utils.OrderedEnqueuer", "<builtin>.range", "<builtin>.list", "random.shuffle"], "utils.data_utils.OrderedEnqueuer": [], "engine.data_adapter.KerasSequenceAdapter.get_size": [], "engine.data_adapter.KerasSequenceAdapter.should_recreate_iterator": [], "engine.data_adapter.KerasSequenceAdapter.on_epoch_end": [], "engine.data_adapter.select_data_adapter": ["<builtin>.RuntimeError", "engine.data_adapter._type_name", "<builtin>.ValueError", "<builtin>.len"], "engine.data_adapter._type_name": ["<builtin>.set", "<builtin>.isinstance", "engine.data_adapter._type_name", "<builtin>.str", "<builtin>.type"], "engine.data_adapter._process_tensorlike._convert_numpy_and_scipy": ["<builtin>.issubclass", "<builtin>.isinstance", "engine.data_adapter._is_scipy_sparse", "engine.data_adapter._scipy_sparse_to_sparse_tensor", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.floatx"], "engine.data_adapter._scipy_sparse_to_sparse_tensor": ["<builtin>.issubclass", "numpy.concatenate", "numpy.expand_dims", "framework.sparse_tensor.SparseTensor", "keras.backend.floatx"], "engine.training_utils.list_to_tuple": ["<builtin>.tuple", "<builtin>.isinstance"], "engine.data_adapter.broadcast_sample_weight_modes.<lambda1>": [], "engine.data_adapter.broadcast_sample_weight_modes.<lambda2>": [], "engine.data_adapter.DataHandler.__init__": ["engine.data_adapter._ClusterCoordinatorDataHandler._configure_dataset_and_inferred_steps", "engine.data_adapter.DataHandler._configure_dataset_and_inferred_steps", "distribute.distribution_strategy_context.get_strategy", "engine.data_adapter.select_data_adapter"], "engine.data_adapter._ClusterCoordinatorDataHandler._configure_dataset_and_inferred_steps": ["engine.data_adapter.DataHandler._log_indefinite_training_warning", "<builtin>.isinstance", "<builtin>.TypeError"], "engine.data_adapter.DataHandler._configure_dataset_and_inferred_steps": ["engine.data_adapter.DataHandler._infer_steps", "engine.data_adapter.DataHandler._validate_data_handler", "engine.data_adapter._make_class_weight_map_fn", "engine.data_adapter._is_distributed_dataset"], "engine.data_adapter._make_class_weight_map_fn": ["<builtin>.len", "<builtin>.range", "<builtin>.list", "<builtin>.int", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.sorted", "<builtin>.ValueError"], "engine.data_adapter.DataHandler._infer_steps": ["engine.data_adapter.DataHandler._log_indefinite_training_warning", "<builtin>.ValueError", "ops.cardinality.cardinality"], "engine.data_adapter.DataHandler._validate_data_handler": ["<builtin>.ValueError"], "engine.data_adapter.DataHandler.enumerate_epochs": ["<builtin>.iter", "<builtin>.range", "engine.data_adapter.DataHandler._truncate_execution_to_epoch"], "engine.data_adapter.DataHandler._truncate_execution_to_epoch": [], "engine.data_adapter.DataHandler.sync": ["eager.context.async_wait"], "engine.data_adapter.DataHandler.catch_stop_iteration": ["platform.tf_logging.warning", "engine.data_adapter.DataHandler.sync", "engine.data_adapter._ClusterCoordinatorDataHandler.sync"], "engine.data_adapter._ClusterCoordinatorDataHandler.sync": [], "engine.data_adapter.DataHandler.steps": [], "engine.data_adapter.DataHandler.step_increment": [], "engine.data_adapter.DataHandler.inferred_steps": [], "engine.data_adapter.DataHandler.should_sync": [], "engine.data_adapter.DataHandler._log_indefinite_training_warning": ["platform.tf_logging.warning"], "engine.data_adapter.DataHandler._samples": [], "engine.data_adapter._ClusterCoordinatorDataHandler.__init__": ["engine.data_adapter._ClusterCoordinatorDataHandler._convert_to_dataset_creator", "<builtin>.isinstance", "<builtin>.super"], "engine.data_adapter._ClusterCoordinatorDataHandler._convert_to_dataset_creator": ["utils.dataset_creator.DatasetCreator", "<builtin>.NotImplementedError", "<builtin>.isinstance", "engine.data_adapter._get_tensor_types"], "engine.data_adapter._ClusterCoordinatorDataHandler._convert_to_dataset_creator._dataset_fn": ["engine.data_adapter.select_data_adapter"], "utils.dataset_creator.DatasetCreator": [], "engine.data_adapter._ClusterCoordinatorDataHandler._configure_dataset_and_inferred_steps.per_worker_dataset_fn": [], "engine.data_adapter.get_data_handler": ["engine.data_adapter.DataHandler.__init__", "engine.data_adapter._ClusterCoordinatorDataHandler.__init__", "<builtin>.getattr"], "engine.data_adapter._make_class_weight_map_fn._class_weights_map_fn": ["engine.data_adapter.expand_1d", "util.nest.is_nested", "keras.backend.shape", "engine.data_adapter.unpack_x_y_sample_weight", "ops.math_ops.cast", "<builtin>.ValueError", "ops.array_ops.gather_v2", "framework.smart_cond.smart_cond"], "engine.data_adapter._make_class_weight_map_fn._class_weights_map_fn.<lambda1>": ["keras.backend.argmax"], "keras.backend.argmax": ["ops.math_ops.argmax"], "engine.data_adapter._make_class_weight_map_fn._class_weights_map_fn.<lambda2>": ["keras.backend.reshape", "ops.math_ops.cast"], "framework.smart_cond.smart_cond": ["<builtin>.callable", "ops.control_flow_ops.cond", "framework.smart_cond.smart_constant_value", "<builtin>.TypeError"], "engine.data_adapter.expand_1d": ["util.nest.map_structure"], "engine.data_adapter.expand_1d._expand_single_1d_tensor": ["ops.array_ops.expand_dims_v2", "<builtin>.isinstance"], "engine.data_adapter.train_validation_split": ["util.nest.map_structure", "math.floor", "<builtin>.all", "<builtin>.int", "util.nest.flatten", "functools.partial", "engine.data_adapter.train_validation_split._can_split", "<builtin>.type", "<builtin>.ValueError"], "engine.data_adapter.train_validation_split._can_split": ["<builtin>.isinstance", "engine.data_adapter._get_tensor_types"], "engine.data_adapter.train_validation_split._split": [], "engine.data_adapter.single_batch_iterator": ["dataset_ops.DatasetV2.from_tensors", "<builtin>.iter", "engine.data_adapter._make_class_weight_map_fn", "engine.data_adapter._process_tensorlike", "engine.data_adapter._check_data_cardinality"], "scipy.sparse.issparse": [], "engine.functional": [], "engine.functional.Functional": ["tracking.base.no_automatic_dependency_tracking", "docs.doc_controls.do_not_doc_inheritable", "itertools.chain", "<builtin>.frozenset"], "engine.functional.Functional.__init__": ["engine.functional.Functional._init_graph_network", "<builtin>.super", "utils.generic_utils.validate_kwargs"], "engine.functional.Functional._init_graph_network": ["util.nest.flatten", "framework.ops.executing_eagerly_outside_functions", "utils.tf_inspect.getfullargspec", "<builtin>.hasattr", "<builtin>.len", "util.nest.map_structure", "utils.tf_utils.assert_no_legacy_layers", "engine.functional.Functional._validate_graph_inputs_and_outputs", "util.nest.is_nested", "engine.base_layer_utils.create_keras_history", "engine.functional._map_graph_network", "engine.functional.Functional._compute_tensor_usage_count", "engine.functional.Functional._set_output_names", "<builtin>.isinstance", "<builtin>.any", "training.Model._set_save_spec"], "engine.functional.Functional._validate_graph_inputs_and_outputs": ["<builtin>.hasattr", "<builtin>.len", "<builtin>.str", "<builtin>.id", "engine.training_utils.get_static_batch_size", "platform.tf_logging.warning", "<builtin>.ValueError"], "engine.functional.Functional._init_graph_network.<lambda1>": [], "engine.functional._map_graph_network": ["<builtin>.set", "util.nest.flatten", "engine.functional._build_map", "engine.functional._make_node_key", "<builtin>.max", "collections.defaultdict", "<builtin>.list", "<builtin>.str", "<builtin>.id", "<builtin>.reversed", "<builtin>.ValueError"], "engine.functional.Functional._set_output_names": ["<builtin>.set"], "engine.functional.Functional._compute_tensor_usage_count": ["<builtin>.set", "util.nest.flatten", "<builtin>.list", "collections.Counter", "<builtin>.str", "<builtin>.id"], "training.Model._set_save_spec": [], "utils.tf_utils.assert_no_legacy_layers": ["<builtin>.str", "<builtin>.TypeError", "<builtin>.getattr"], "engine.functional.Functional.input": [], "engine.functional.Functional.input_shape": ["util.nest.map_structure"], "engine.functional.Functional.input_spec": ["<builtin>.sorted", "<builtin>.hasattr", "<builtin>.len", "<builtin>.isinstance", "engine.functional.shape_with_no_batch_size"], "engine.functional.shape_with_no_batch_size": [], "engine.functional.Functional.output": [], "engine.functional.Functional.output_shape": ["util.nest.map_structure"], "engine.functional.Functional._layer_checkpoint_dependencies": ["<builtin>.enumerate", "collections.OrderedDict"], "engine.functional.Functional._checkpoint_dependencies": ["<builtin>.super", "tracking.base.TrackableReference"], "tracking.base.TrackableReference": [], "engine.functional.Functional._lookup_dependency": ["<builtin>.super"], "engine.functional.Functional._handle_deferred_layer_dependencies": ["training.Model._handle_deferred_dependencies"], "training.Model._handle_deferred_dependencies": [], "engine.functional.Functional._should_compute_mask": [], "engine.functional.Functional.compute_mask": ["util.nest.map_structure", "engine.functional.Functional._run_internal_graph"], "engine.functional.Functional._run_internal_graph": ["util.nest.flatten", "<builtin>.list", "util.nest.pack_sequence_as", "engine.functional.Functional._conform_to_reference_input", "<builtin>.len", "<builtin>.str", "<builtin>.id", "engine.functional.Functional._flatten_to_reference_inputs", "<builtin>.any", "<builtin>.zip"], "engine.functional.Functional.compute_mask.<lambda1>": ["<builtin>.getattr"], "engine.functional.Functional.call": ["engine.functional.Functional._run_internal_graph"], "engine.functional.Functional.compute_output_shape": ["util.nest.flatten", "<builtin>.tuple", "utils.tf_utils.convert_shapes", "<builtin>.list", "util.nest.pack_sequence_as", "<builtin>.len", "<builtin>.str", "<builtin>.range", "<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.zip"], "engine.functional.Functional._init_set_name": ["utils.generic_utils.to_snake_case", "keras.backend.unique_object_name"], "engine.functional.Functional._flatten_to_reference_inputs": ["<builtin>.sorted", "util.nest.flatten", "<builtin>.len", "util.nest.is_nested", "warnings.warn", "<builtin>.isinstance"], "engine.functional.Functional._conform_to_reference_input": ["utils.tf_utils.is_extension_type", "eager.context.executing_eagerly", "platform.tf_logging.warning", "ops.array_ops.expand_dims_v2", "ops.array_ops.squeeze_v2", "<builtin>.getattr", "<builtin>.isinstance", "ops.math_ops.cast"], "ops.array_ops.squeeze_v2": ["ops.array_ops.squeeze"], "engine.functional.Functional.get_config": ["engine.functional.get_network_config", "copy.deepcopy"], "engine.functional.get_network_config": ["util.nest.pack_sequence_as", "engine.functional._make_node_key", "<builtin>.len", "utils.tf_utils.convert_inner_node_data", "utils.tf_utils.ListWrapper", "util.nest.is_nested", "utils.generic_utils.SharedObjectSavingScope", "engine.functional._should_skip_first_node", "<builtin>.range", "<builtin>.enumerate"], "engine.functional.Functional.from_config": ["engine.functional.connect_ancillary_layers", "engine.functional.reconstruct_from_config", "engine.functional.Functional.__init__", "utils.generic_utils.SharedObjectLoadingScope"], "utils.generic_utils.SharedObjectLoadingScope": [], "engine.functional.reconstruct_from_config": ["util.nest.flatten", "util.nest.pack_sequence_as", "engine.functional.reconstruct_from_config.process_layer", "utils.tf_utils.convert_inner_node_data", "engine.functional.reconstruct_from_config.process_node", "collections.OrderedDict", "engine.functional.reconstruct_from_config.get_node_index"], "engine.functional.connect_ancillary_layers": ["util.nest.flatten", "engine.functional._should_skip_first_node"], "engine.training_utils.get_static_batch_size": ["engine.training_utils.get_input_shape_and_dtype", "framework.tensor_shape.Dimension"], "engine.functional.Functional._insert_layers": ["<builtin>.set", "util.nest.flatten", "<builtin>.list", "engine.functional._make_node_key", "utils.tf_utils.assert_no_legacy_layers", "engine.functional.Functional._compute_tensor_usage_count", "utils.tf_inspect.getfullargspec", "copy.copy", "<builtin>.ValueError", "engine.functional.Functional._insert_layers._get_min_depth", "engine.functional.Functional._handle_deferred_layer_dependencies"], "engine.functional.Functional._insert_layers._get_min_depth": ["<builtin>.min"], "engine.functional._make_node_key": ["<builtin>.str"], "collections.Counter": [], "engine.functional.Functional._assert_weights_created": [], "engine.functional.Functional._graph_network_add_loss": ["engine.functional.Functional._insert_layers", "engine.functional._map_subgraph_network", "engine.base_layer.AddLoss"], "engine.functional._map_subgraph_network": ["util.nest.flatten", "framework.ops.executing_eagerly_outside_functions", "engine.base_layer_utils.create_keras_history", "engine.functional._map_graph_network"], "engine.base_layer.AddLoss": [], "engine.functional.Functional._graph_network_add_metric": ["engine.base_layer.AddMetric", "engine.functional._map_subgraph_network", "engine.functional.Functional._insert_layers"], "engine.base_layer.AddMetric": [], "engine.functional.Functional._trackable_saved_model_saver": ["saved_model.network_serialization.NetworkSavedModelSaver"], "saved_model.network_serialization.NetworkSavedModelSaver": [], "engine.functional.Functional._get_save_spec": ["<builtin>.super", "<builtin>.getattr"], "engine.functional._build_map": ["<builtin>.set", "util.nest.flatten", "engine.functional._build_map_helper"], "engine.functional._map_graph_network.<lambda1>": [], "engine.functional._build_map_helper": ["<builtin>.str", "<builtin>.ValueError", "<builtin>.len", "engine.functional._build_map_helper"], "engine.functional._should_skip_first_node": ["<builtin>.isinstance"], "engine.functional.reconstruct_from_config.add_unprocessed_node": [], "engine.functional.reconstruct_from_config.get_node_index": ["<builtin>.isinstance"], "engine.functional.reconstruct_from_config._deserialize_keras_tensors": ["util.nest.map_structure", "utils.tf_utils.convert_inner_node_data"], "engine.functional.reconstruct_from_config._deserialize_keras_tensors._deserialize_keras_tensor": ["util.nest.flatten", "engine.functional.reconstruct_from_config.get_node_index", "<builtin>.isinstance"], "utils.tf_utils.convert_inner_node_data": ["utils.tf_utils.map_structure_with_atomic"], "engine.functional.reconstruct_from_config.process_node": ["engine.base_layer_utils.unnest_if_single_tensor", "util.nest.flatten", "util.nest.pack_sequence_as", "<builtin>.len", "engine.functional.reconstruct_from_config.get_node_index", "engine.functional.reconstruct_from_config.add_unprocessed_node", "engine.functional.reconstruct_from_config._deserialize_keras_tensors", "<builtin>.ValueError"], "engine.functional.reconstruct_from_config.process_layer": ["utils.tf_utils.convert_inner_node_data", "engine.functional.reconstruct_from_config.add_unprocessed_node", "<builtin>.int", "keras.layers.deserialize", "engine.functional._should_skip_first_node"], "keras.layers.deserialize": [], "utils.generic_utils.SharedObjectSavingScope": [], "utils.tf_utils.ListWrapper": [], "engine.functional.ModuleWrapper.__init__": ["<builtin>.super", "<builtin>.hasattr", "<builtin>.getattr", "utils.tf_inspect.getfullargspec", "<builtin>.ValueError"], "engine.functional.ModuleWrapper.call": ["<builtin>.getattr"], "engine.input_layer": ["util.tf_export.keras_export"], "engine.input_layer._assert_other_arg_none": ["<builtin>.ValueError"], "engine.input_layer.InputLayer.__init__": ["<builtin>.isinstance", "framework.tensor_spec.TensorSpec", "engine.node.Node", "utils.tf_utils.is_extension_type", "engine.input_layer._assert_other_arg_none", "utils.tf_utils.is_symbolic_tensor", "keras.backend.placeholder", "distribute.distributed_training_utils.global_batch_size_supported", "framework.ops.executing_eagerly_outside_functions", "<builtin>.tuple", "distribute.distribution_strategy_context.get_strategy", "<builtin>.super", "<builtin>.str", "keras.backend.floatx", "keras.backend.get_graph", "keras.backend.dtype", "<builtin>.ValueError", "keras.backend.get_uid", "engine.keras_tensor.keras_tensor_from_type_spec", "engine.keras_tensor.keras_tensor_from_tensor"], "keras.backend.get_uid": ["keras.backend.get_graph", "collections.defaultdict"], "engine.keras_tensor.keras_tensor_from_type_spec": ["<builtin>.issubclass"], "engine.keras_tensor.keras_tensor_from_tensor": ["<builtin>.hasattr", "engine.keras_tensor.keras_tensor_from_tensor", "<builtin>.isinstance"], "engine.input_layer.InputLayer.get_config": [], "engine.input_layer.InputLayer._trackable_saved_model_saver": ["saved_model.layer_serialization.InputLayerSavedModelSaver"], "saved_model.layer_serialization.InputLayerSavedModelSaver": [], "engine.input_layer.Input": ["<builtin>.len", "engine.input_layer.InputLayer.__init__", "<builtin>.ValueError", "<builtin>.isinstance"], "engine.input_spec": [], "engine.input_spec.InputSpec.__init__": ["<builtin>.tuple", "<builtin>.TypeError", "<builtin>.ValueError", "framework.dtypes.as_dtype", "<builtin>.int", "<builtin>.len", "framework.tensor_shape.TensorShape", "<builtin>.max"], "engine.input_spec.InputSpec.__repr__": ["<builtin>.str"], "engine.input_spec.InputSpec.get_config": [], "engine.input_spec.InputSpec.from_config": ["engine.input_spec.InputSpec.__init__"], "engine.input_spec.to_tensor_shape": ["framework.tensor_shape.TensorShape"], "engine.input_spec.assert_input_compatibility": ["<builtin>.tuple", "<builtin>.TypeError", "<builtin>.str", "<builtin>.zip", "<builtin>.ValueError", "<builtin>.all", "<builtin>.int", "engine.input_spec.display_shape", "util.nest.flatten", "<builtin>.hasattr", "<builtin>.list", "<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance", "framework.tensor_shape.TensorShape"], "engine.input_spec.display_shape": ["<builtin>.tuple", "<builtin>.str"], "engine.input_spec.to_tensor_spec": ["engine.input_spec.to_tensor_shape", "<builtin>.isinstance", "framework.tensor_spec.TensorSpec", "keras.backend.floatx"], "engine.keras_tensor": ["engine.keras_tensor.KerasTensor._overload_all_operators", "engine.keras_tensor.KerasTensor._overload_operator"], "engine.keras_tensor.KerasTensor.__init__": ["<builtin>.ValueError", "<builtin>.isinstance"], "engine.keras_tensor.KerasTensor.type_spec": [], "engine.keras_tensor.KerasTensor.shape": [], "engine.keras_tensor.KerasTensor.from_tensor": ["framework.type_spec.type_spec_from_value", "ops.array_ops.ones", "<builtin>.isinstance", "<builtin>.len", "<builtin>.getattr", "engine.keras_tensor.KerasTensor.__init__"], "framework.type_spec.type_spec_from_value": ["platform.tf_logging.vlog", "framework.type_spec._type_spec_from_value", "<builtin>.type", "<builtin>.TypeError"], "engine.keras_tensor.KerasTensor.from_type_spec": ["engine.keras_tensor.KerasTensor.__init__"], "engine.keras_tensor.KerasTensor._to_placeholder": ["util.nest.map_structure", "ops.array_ops.placeholder", "ops.array_ops.shape"], "engine.keras_tensor.KerasTensor._to_placeholder.component_to_placeholder": ["ops.array_ops.placeholder"], "engine.keras_tensor.KerasTensor.get_shape": [], "engine.keras_tensor.KerasTensor.__len__": ["<builtin>.TypeError"], "engine.keras_tensor.KerasTensor.op": ["<builtin>.TypeError"], "engine.keras_tensor.KerasTensor.__hash__": ["<builtin>.TypeError"], "engine.keras_tensor.KerasTensor.__array__": ["<builtin>.TypeError"], "engine.keras_tensor.KerasTensor.is_tensor_like": [], "engine.keras_tensor.KerasTensor.set_shape": ["framework.tensor_shape.TensorShape", "<builtin>.isinstance", "<builtin>.range", "<builtin>.ValueError", "<builtin>.len"], "engine.keras_tensor.KerasTensor.__str__": ["<builtin>.hasattr"], "engine.keras_tensor.KerasTensor.__repr__": ["<builtin>.hasattr", "<builtin>.isinstance"], "engine.keras_tensor.KerasTensor.dtype": [], "engine.keras_tensor.KerasTensor.ref": ["utils.object_identity.Reference"], "utils.object_identity.Reference": ["<builtin>.property"], "engine.keras_tensor.KerasTensor.__iter__": ["<builtin>.TypeError", "engine.keras_tensor._KerasTensorIterator.__init__"], "engine.keras_tensor._KerasTensorIterator.__init__": [], "engine.keras_tensor.KerasTensor.name": [], "engine.keras_tensor.KerasTensor._overload_all_operators": ["<builtin>.hasattr", "engine.keras_tensor.KerasTensor._overload_operator"], "engine.keras_tensor.KerasTensor._overload_operator": ["<builtin>.setattr", "<builtin>.getattr"], "engine.keras_tensor.SparseKerasTensor._to_placeholder": ["ops.array_ops.sparse_placeholder"], "ops.array_ops.sparse_placeholder": ["eager.context.executing_eagerly", "framework.tensor_shape.dimension_value", "<builtin>.RuntimeError", "framework.ops.convert_to_tensor", "framework.tensor_util.constant_value_as_shape", "ops.array_ops.placeholder_with_default", "framework.sparse_tensor.SparseTensor", "<builtin>.isinstance", "ops.array_ops.placeholder", "framework.tensor_shape.TensorShape", "<builtin>.tuple", "<builtin>.len"], "engine.keras_tensor.RaggedKerasTensor._to_placeholder": ["ragged_tensor.RaggedTensor.from_row_splits", "<builtin>.range", "ops.array_ops.placeholder", "<builtin>.getattr", "framework.constant_op.constant", "ragged_tensor.RaggedTensor.from_uniform_row_length", "<builtin>.super"], "ragged_tensor.RaggedTensor.from_row_splits": [], "ragged_tensor.RaggedTensor.from_uniform_row_length": [], "engine.keras_tensor.RaggedKerasTensor.ragged_rank": [], "engine.keras_tensor.UserRegisteredSpec.__init__": [], "engine.keras_tensor.UserRegisteredSpec._component_specs": [], "engine.keras_tensor.UserRegisteredSpec._from_components": [], "engine.keras_tensor.UserRegisteredSpec._serialize": [], "engine.keras_tensor.UserRegisteredSpec._to_components": [], "engine.keras_tensor.UserRegisteredSpec.value_type": [], "engine.keras_tensor.UserRegisteredTypeKerasTensor.__init__": ["engine.keras_tensor.UserRegisteredSpec.__init__", "<builtin>.super", "<builtin>.getattr"], "engine.keras_tensor.UserRegisteredTypeKerasTensor.from_tensor": ["engine.keras_tensor.UserRegisteredTypeKerasTensor.__init__"], "engine.keras_tensor.UserRegisteredTypeKerasTensor.from_type_spec": ["<builtin>.NotImplementedError"], "engine.keras_tensor.UserRegisteredTypeKerasTensor._to_placeholder": [], "engine.keras_tensor._KerasTensorIterator.__iter__": [], "engine.keras_tensor._KerasTensorIterator.__next__": [], "engine.keras_tensor.register_keras_tensor_specialization": [], "engine.keras_tensor.keras_tensor_to_placeholder": ["<builtin>.isinstance"], "engine.node": [], "engine.node.Node.__init__": ["util.nest.map_structure", "engine.node.is_keras_tensor", "util.nest.flatten", "<builtin>.len", "framework.tensor_util.is_tf_type", "<builtin>.isinstance", "<builtin>.id", "<builtin>.enumerate", "engine.base_layer_utils.create_keras_history", "<builtin>.str", "engine.base_layer_utils.needs_keras_history", "framework.ops.executing_eagerly_outside_functions"], "engine.node.Node.__init__.<lambda1>": [], "engine.node.Node.__init__.<lambda2>": [], "engine.node.Node.__init__.<lambda3>": [], "engine.node.is_keras_tensor": ["<builtin>.hasattr"], "engine.node.Node.keras_inputs": [], "engine.node.Node.parent_nodes": [], "engine.node.Node.iterate_inbound": [], "engine.node.Node.map_arguments": ["util.nest.pack_sequence_as", "copy.copy"], "engine.node.Node.serialize": ["util.nest.map_structure", "<builtin>.zip", "<builtin>.TypeError", "util.nest.is_nested", "<builtin>.dict", "json.dumps", "utils.tf_utils.convert_inner_node_data", "<builtin>.str"], "engine.node.Node.serialize._serialize_keras_tensor": ["keras.backend.get_value", "<builtin>.hasattr", "<builtin>.isinstance"], "engine.node.Node.serialize.serialize_first_arg_tensor": ["utils.tf_utils.ListWrapper", "engine.node.Node.serialize._serialize_keras_tensor", "engine.node.is_keras_tensor"], "engine.node.Node.input_tensors": [], "engine.node.Node.output_tensors": [], "engine.node.Node.input_shapes": ["util.nest.map_structure", "<builtin>.len"], "engine.node.Node.output_shapes": ["util.nest.map_structure"], "engine.node.Node.outbound_layer": [], "engine.node.Node.inbound_layers": ["util.nest.map_structure"], "engine.node.Node.inbound_layers.<lambda1>": [], "engine.partial_batch_padding_handler": [], "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.__init__": ["ops.array_ops.zeros"], "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.get_real_batch_size": ["util.nest.flatten", "keras.backend.shape", "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.get_real_batch_size._find_any_tensor", "<builtin>.isinstance", "keras.backend.cast"], "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.get_real_batch_size._find_any_tensor": ["util.nest.flatten", "framework.tensor_util.is_tf_type", "<builtin>.ValueError"], "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.update_mask": ["ops.array_ops.zeros", "keras.backend.concatenate", "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.get_real_batch_size", "ops.array_ops.ones"], "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.pad_batch": ["<builtin>.tuple", "<builtin>.len", "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.pad_batch._pad"], "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.pad_batch._pad": ["keras.backend.stack", "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.get_real_batch_size", "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.pad_batch._pad", "<builtin>.isinstance", "<builtin>.len", "ops.array_ops.pad"], "keras.backend.stack": ["ops.array_ops.stack"], "ops.array_ops.pad": ["eager.context.executing_eagerly", "<builtin>.any", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.zip", "ops.gen_array_ops.pad_v2", "ops.array_ops._get_paddings_constant", "framework.tensor_util.is_tf_type", "framework.tensor_shape.TensorShape", "<builtin>.sum", "ops.gen_array_ops.pad", "ops.gen_array_ops.mirror_pad"], "engine.partial_batch_padding_handler.PartialBatchPaddingHandler.apply_mask": ["numpy.nonzero", "keras.backend.get_value", "numpy.squeeze", "<builtin>.len", "numpy.take", "<builtin>.range"], "numpy.nonzero": [], "numpy.take": [], "engine.saving": [], "engine.sequential": [], "engine.sequential.Sequential": ["utils.generic_utils.default", "tracking.base.no_automatic_dependency_tracking"], "engine.sequential.Sequential.__init__": ["<builtin>.isinstance", "<builtin>.set", "engine.sequential.Sequential.add", "<builtin>.super"], "engine.sequential.Sequential.add": ["engine.functional.ModuleWrapper", "<builtin>.ValueError", "utils.layer_utils.get_source_inputs", "<builtin>.TypeError", "engine.training_utils.get_input_shape_and_dtype", "functional.Functional._handle_deferred_layer_dependencies", "platform.tf_logging.warning", "<builtin>.len", "engine.input_layer.Input", "util.nest.flatten", "<builtin>.isinstance", "engine.sequential.Sequential._is_layer_name_unique", "utils.tf_utils.assert_no_legacy_layers", "utils.tf_inspect.getfullargspec", "functional.Functional._maybe_create_attribute", "<builtin>.hasattr", "<builtin>.str", "functional.Functional._init_graph_network", "Functional._self_tracked_trackables.append"], "engine.sequential.Sequential.layers": ["<builtin>.isinstance", "<builtin>.super"], "engine.functional.ModuleWrapper": [], "engine.sequential.Sequential._is_layer_name_unique": [], "functional.Functional._maybe_create_attribute": [], "engine.training_utils.get_input_shape_and_dtype": ["engine.training_utils.get_input_shape_and_dtype._is_graph_model", "<builtin>.ValueError", "<builtin>.getattr"], "functional.Functional._init_graph_network": [], "Functional._self_tracked_trackables.append": [], "functional.Functional._handle_deferred_layer_dependencies": [], "engine.sequential.Sequential.pop": ["Functional._self_tracked_trackables.pop", "<builtin>.TypeError", "functional.Functional._init_graph_network"], "Functional._self_tracked_trackables.pop": [], "engine.sequential.Sequential._build_graph_network_for_inferred_shape": ["<builtin>.set", "util.nest.flatten", "<builtin>.tuple", "engine.input_layer.Input", "framework.ops.init_scope", "engine.sequential.relax_input_shape", "engine.sequential.Sequential.layers", "<builtin>.ValueError", "engine.sequential.track_nodes_created_by_last_call", "functional.Functional._init_graph_network", "<builtin>.len", "python.tf2.enabled", "framework.ops.executing_eagerly_outside_functions", "engine.sequential.clear_previously_created_nodes"], "engine.sequential.relax_input_shape": ["<builtin>.zip", "<builtin>.len", "<builtin>.tuple"], "engine.sequential.clear_previously_created_nodes": ["util.nest.flatten"], "engine.sequential.track_nodes_created_by_last_call": ["util.nest.flatten"], "engine.sequential.Sequential.build": ["<builtin>.tuple", "<builtin>.ValueError", "<builtin>.super", "functional.Functional._init_graph_network", "engine.sequential.Sequential._build_graph_network_for_inferred_shape"], "engine.sequential.Sequential.call": ["util.nest.flatten", "<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "functional.Functional._init_graph_network", "<builtin>.super", "engine.sequential.Sequential.layers", "util.nest.map_structure", "platform.tf_logging.warning", "<builtin>.getattr", "<builtin>.len", "python.tf2.enabled", "framework.tensor_util.is_tf_type", "engine.sequential.Sequential._build_graph_network_for_inferred_shape"], "engine.sequential.Sequential.compute_output_shape": [], "engine.sequential.Sequential.compute_mask": ["engine.sequential.Sequential.call", "<builtin>.getattr"], "engine.sequential.Sequential.predict_proba": ["warnings.warn", "platform.tf_logging.warning", "functional.Functional.predict"], "functional.Functional.predict": [], "engine.sequential.Sequential.predict_classes": ["warnings.warn", "functional.Functional.predict"], "engine.sequential.Sequential.get_config": ["utils.generic_utils.serialize_keras_object", "<builtin>.super", "copy.deepcopy"], "utils.generic_utils.serialize_keras_object": ["utils.generic_utils.get_registered_name", "util.tf_decorator.unwrap", "utils.generic_utils.serialize_keras_object", "<builtin>.ValueError", "<builtin>.getattr", "utils.generic_utils.serialize_keras_class_and_config", "<builtin>.isinstance", "warnings.warn", "utils.generic_utils.is_default", "<builtin>.hasattr"], "engine.sequential.Sequential.from_config": ["<builtin>.isinstance", "keras.layers.deserialize", "engine.sequential.Sequential.__init__"], "engine.sequential.Sequential.input_spec": ["<builtin>.hasattr"], "engine.sequential.Sequential._trackable_saved_model_saver": ["saved_model.model_serialization.SequentialSavedModelSaver"], "saved_model.model_serialization.SequentialSavedModelSaver": [], "engine.sequential.Sequential._assert_weights_created": ["<builtin>.super"], "engine.sequential._get_shape_tuple": ["<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.tuple"], "engine.training_arrays_v1": ["functools.partial"], "engine.training_arrays_v1.model_iteration": ["distribute.distributed_training_utils_v1._copy_weights_to_original_model", "engine.training_utils_v1.infer_steps_for_dataset", "engine.training_arrays_v1._get_iterator", "engine.training_utils_v1.should_run_validation", "utils.generic_utils.slice_arrays", "engine.training_arrays_v1._get_model_feed", "keras.backend.is_sparse", "<builtin>.enumerate", "engine.training_arrays_v1._reinitialize_iterator", "engine.training_arrays_v1._prepare_feed_values", "engine.training_arrays_v1._update_sample_weight_mode", "distribute.distributed_training_utils_v1._copy_weights_to_distributed_model", "distribute.distributed_training_utils_v1._per_replica_aggregate_batch", "<builtin>.len", "util.nest.flatten", "engine.training_arrays_v1._prepare_feed_values.get_distributed_inputs", "engine.training_utils_v1.MetricsAggregator", "distribute.distributed_training_utils_v1.is_distributing_by_cloning", "keras.callbacks.configure_callbacks", "<builtin>.zip", "distribute.distributed_training_utils_v1.distributed_scope", "engine.training_arrays_v1.model_iteration", "engine.training_arrays_v1._get_num_samples_or_steps", "<builtin>.TypeError", "engine.training_utils_v1.OutputsAggregator", "keras.callbacks.make_logs", "engine.training_utils_v1.batch_shuffle", "numpy.arange", "engine.training_arrays_v1._make_execution_function", "<builtin>.callable", "platform.tf_logging.warning", "scipy.sparse.issparse", "numpy.random.shuffle", "<builtin>.range", "engine.training_arrays_v1._print_train_info", "<builtin>.isinstance", "utils.generic_utils.make_batches"], "engine.training_utils_v1.infer_steps_for_dataset": ["ops.cardinality.cardinality", "keras.backend.get_value", "<builtin>.ValueError", "<builtin>.isinstance"], "engine.training_arrays_v1._get_iterator": ["engine.training_utils_v1.get_iterator", "distribute.distributed_training_utils_v1.get_iterator"], "engine.training_arrays_v1._prepare_feed_values": ["engine.training_arrays_v1._prepare_feed_values.get_distributed_inputs", "distribute.distributed_training_utils_v1.get_iterator", "<builtin>.list", "eager.context.executing_eagerly", "engine.training_utils_v1.ModelInputs", "keras.backend.symbolic_learning_phase", "<builtin>.isinstance"], "engine.training_arrays_v1._get_num_samples_or_steps": ["engine.training_utils_v1.check_num_samples"], "engine.training_arrays_v1._update_sample_weight_mode": ["<builtin>.callable", "<builtin>.len", "keras.backend.symbolic_learning_phase", "distribute.distributed_training_utils_v1._update_sample_weight_modes", "<builtin>.isinstance"], "engine.training_arrays_v1._make_execution_function": ["distribute.distributed_training_utils_v1._make_execution_function"], "engine.training_arrays_v1._print_train_info": ["<builtin>.print"], "keras.callbacks.configure_callbacks": ["keras.callbacks.CallbackList.set_model", "keras.callbacks.BaseLogger.__init__", "keras.callbacks.History.__init__", "keras.callbacks.ProgbarLogger.__init__", "keras.callbacks.set_callback_parameters", "<builtin>.isinstance", "keras.callbacks.CallbackList.__init__"], "engine.training_arrays_v1._get_model_feed": [], "keras.backend.is_sparse": ["<builtin>.isinstance", "<builtin>.getattr"], "engine.training_utils_v1.OutputsAggregator": [], "engine.training_utils_v1.MetricsAggregator": [], "engine.training_arrays_v1._prepare_feed_values.get_distributed_inputs": ["distribute.distributed_training_utils_v1._prepare_feed_values"], "keras.callbacks.make_logs": ["<builtin>.zip"], "engine.training_utils_v1.batch_shuffle": ["numpy.append", "<builtin>.int", "numpy.random.shuffle", "<builtin>.len"], "numpy.random.shuffle": [], "utils.generic_utils.make_batches": ["<builtin>.min", "<builtin>.int", "numpy.ceil", "<builtin>.float", "<builtin>.range"], "utils.generic_utils.slice_arrays": ["<builtin>.ValueError", "<builtin>.hasattr", "<builtin>.isinstance"], "engine.training_utils_v1.should_run_validation": ["<builtin>.ValueError", "<builtin>.isinstance"], "engine.training_arrays_v1._reinitialize_iterator": ["engine.training_utils_v1.initialize_iterator", "distribute.distributed_training_utils_v1.initialize_iterator"], "engine.training_utils_v1.check_num_samples": ["<builtin>.hasattr", "<builtin>.int", "<builtin>.ValueError", "engine.training_utils_v1.check_steps_argument"], "keras.backend.symbolic_learning_phase": ["keras.backend.get_graph"], "engine.training_utils_v1.get_iterator": ["ops.dataset_ops.make_initializable_iterator", "eager.context.executing_eagerly", "engine.training_utils_v1.initialize_iterator", "ops.dataset_ops.make_one_shot_iterator"], "engine.training_utils_v1.initialize_iterator": ["eager.context.executing_eagerly", "keras.backend.get_session"], "engine.training_arrays_v1.ArrayLikeTrainingLoop.fit": ["engine.training_utils_v1.split_training_and_validation_data", "<builtin>.ValueError"], "engine.training_utils_v1.split_training_and_validation_data": ["engine.training_utils_v1.has_symbolic_tensors", "<builtin>.hasattr", "utils.generic_utils.slice_arrays", "<builtin>.int", "<builtin>.ValueError", "<builtin>.len"], "engine.training_arrays_v1.ArrayLikeTrainingLoop.evaluate": [], "engine.training_arrays_v1.ArrayLikeTrainingLoop.predict": [], "engine.training": [], "engine.training.disable_multi_worker": ["util.tf_decorator.make_decorator"], "engine.training.disable_multi_worker._method_wrapper": ["<builtin>.ValueError"], "engine.training.inject_functional_model_class": ["Layer.__class__.__new__", "engine.training.inject_functional_model_class", "ModelVersionSelector.__class__.__new__", "<builtin>.tuple"], "ModelVersionSelector.__class__.__new__": [], "Layer.__class__.__new__": [], "engine.training.is_functional_model_init_params": ["<builtin>.len"], "engine.training.Model.__new__": ["<builtin>.super", "engine.training.is_functional_model_init_params", "engine.functional.Functional"], "engine.training.Model.__init__": ["distribute.distribution_strategy_context.get_strategy", "engine.training.saver_with_op_caching", "distribute.distribution_strategy_context.has_strategy", "__class__.__bases__.__init__", "<builtin>.TypeError", "functional.Functional.__init__", "utils.generic_utils.validate_kwargs", "engine.training.Model._reset_compile_cache", "<builtin>.isinstance", "engine.training.inject_functional_model_class", "engine.training.Model._init_batch_counters", "engine.training.is_functional_model_init_params", "<builtin>.issubclass", "base_layer.Layer._maybe_create_attribute", "<builtin>.super"], "functional.Functional.__init__": [], "__class__.__bases__.__init__": [], "base_layer.Layer._maybe_create_attribute": [], "engine.training.Model._reset_compile_cache": ["base_layer.Layer._get_trainable_state"], "engine.training.saver_with_op_caching": ["tracking.util.TrackableSaver", "tracking.graph_view.ObjectGraphView", "utils.object_identity.ObjectIdentityWeakKeyDictionary", "eager.context.executing_eagerly", "weakref.ref"], "engine.training.Model._init_batch_counters": ["ops.variables.Variable"], "engine.training.Model.__setattr__": ["engine.base_layer_utils.has_weights", "<builtin>.isinstance", "<builtin>.RuntimeError", "util.nest.flatten", "<builtin>.super", "<builtin>.all", "<builtin>.getattr"], "engine.training.Model.build": ["<builtin>.type", "engine.training.Model.call", "<builtin>.len", "keras.backend.get_graph", "framework.func_graph.FuncGraph", "engine.base_layer_utils.generate_placeholders_from_shape", "<builtin>.isinstance", "<builtin>.ValueError", "eager.context.executing_eagerly", "<builtin>.super", "<builtin>.all", "<builtin>.tuple"], "engine.training.Model.call": ["<builtin>.NotImplementedError"], "docs.doc_controls.doc_in_current_and_subclasses": ["<builtin>.setattr"], "engine.training.Model.compile": ["engine.training.Model._reset_compile_cache", "engine.training.Model._validate_compile", "engine.compile_utils.MetricsContainer", "engine.training.Model._get_optimizer", "engine.training.Model._configure_steps_per_execution", "engine.compile_utils.LossesContainer", "platform.tf_logging.warning"], "engine.training.Model._validate_compile": ["distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy", "<builtin>.any", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.ValueError", "util.nest.flatten", "<builtin>.set", "<builtin>.getattr"], "engine.training.Model._get_optimizer": ["<builtin>.isinstance", "util.nest.map_structure"], "engine.compile_utils.LossesContainer": [], "engine.compile_utils.MetricsContainer": [], "engine.training.Model._configure_steps_per_execution": ["ops.variables.Variable"], "engine.training.Model._get_optimizer._get_single_optimizer": ["<builtin>.isinstance", "keras.optimizers.get", "mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer"], "keras.optimizers.get": ["keras.optimizer_v1.TFOptimizer", "<builtin>.str", "<builtin>.isinstance", "<builtin>.ValueError", "keras.backend.track_tf_optimizer", "keras.optimizers.deserialize"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1": [], "base_layer.Layer._get_trainable_state": [], "engine.training.Model._should_compute_mask": [], "engine.training.Model.metrics": ["base_layer.Layer._flatten_layers"], "engine.training.Model.metrics_names": [], "engine.training.Model.distribute_strategy": ["distribute.distribution_strategy_context.get_strategy"], "engine.training.Model.run_eagerly": ["<builtin>.ValueError", "eager.def_function.functions_run_eagerly"], "engine.training.Model.train_step": ["eager.backprop.GradientTape", "engine.data_adapter.unpack_x_y_sample_weight", "<builtin>.isinstance", "engine.data_adapter.expand_1d", "engine.training.Model.__init__"], "eager.backprop.GradientTape": ["util.tf_contextlib.contextmanager"], "engine.training.Model.make_train_function": ["eager.def_function.function"], "engine.training.Model.make_train_function.step_function": ["<builtin>.next", "engine.training.reduce_per_replica", "engine.training.write_scalar_summaries"], "engine.training.Model.make_train_function.step_function.run_step": ["engine.training.Model.train_step", "framework.ops.control_dependencies", "engine.training._minimum_control_deps"], "engine.training._minimum_control_deps": ["<builtin>.isinstance", "util.nest.flatten", "eager.context.executing_eagerly"], "engine.training.reduce_per_replica": ["util.nest.map_structure"], "engine.training.write_scalar_summaries": ["ops.summary_ops_v2.scalar", "engine.training._is_scalar"], "engine.training.Model.make_train_function.train_function": ["engine.training.Model.make_train_function.step_function", "ops.math_ops.range"], "engine.training.Model.make_train_function.<lambda1>": [], "engine.training.Model.fit": ["coordinator.cluster_coordinator.ClusterCoordinator", "engine.training.Model.make_train_function.train_function", "<builtin>.isinstance", "engine.training.Model._maybe_load_initial_epoch_from_ckpt", "engine.data_adapter.get_data_handler", "copy.copy", "eager.context.async_wait", "engine.training.Model._assert_compile_was_called", "engine.training.Model.make_train_function", "engine.training.Model.reset_metrics", "<builtin>.ValueError", "keras.callbacks.CallbackList", "utils.version_utils.disallow_legacy_graph", "engine.training_utils.RespectCompiledTrainableState", "<builtin>.getattr", "engine.training._disallow_inside_tf_function", "engine.training.Model.make_train_function.<lambda1>", "engine.training.Model._check_call_args", "engine.training.Model._should_eval", "engine.data_adapter.train_validation_split", "profiler.trace.Trace", "engine.data_adapter.unpack_x_y_sample_weight", "engine.training.Model.evaluate", "utils.tf_utils.sync_to_numpy_or_python_type"], "utils.version_utils.disallow_legacy_graph": ["framework.ops.executing_eagerly_outside_functions", "<builtin>.ValueError"], "engine.training.Model._assert_compile_was_called": ["<builtin>.RuntimeError"], "engine.training.Model._check_call_args": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.str"], "engine.training._disallow_inside_tf_function": ["<builtin>.RuntimeError", "framework.ops.inside_function"], "coordinator.cluster_coordinator.ClusterCoordinator": [], "engine.training_utils.RespectCompiledTrainableState": [], "keras.callbacks.CallbackList": [], "engine.training.Model._maybe_load_initial_epoch_from_ckpt": [], "engine.training.Model.reset_metrics": [], "profiler.trace.Trace": [], "utils.tf_utils.sync_to_numpy_or_python_type": ["util.nest.map_structure", "<builtin>.isinstance"], "engine.training.Model._should_eval": ["<builtin>.isinstance", "<builtin>.ValueError"], "engine.training.Model.evaluate": ["engine.training.Model.make_test_function", "coordinator.cluster_coordinator.ClusterCoordinator", "engine.training.Model.make_test_function.<lambda1>", "engine.training.flatten_metrics_in_order", "profiler.trace.Trace", "engine.training.Model.make_test_function.test_function", "<builtin>.TypeError", "eager.context.async_wait", "engine.training._disallow_inside_tf_function", "engine.training.Model._assert_compile_was_called", "<builtin>.isinstance", "engine.training.Model.reset_metrics", "engine.data_adapter.get_data_handler", "keras.callbacks.CallbackList", "utils.version_utils.disallow_legacy_graph", "utils.tf_utils.sync_to_numpy_or_python_type", "engine.training.Model._check_call_args", "<builtin>.getattr"], "engine.training.Model.test_step": ["<builtin>.isinstance", "engine.training.Model.__init__", "engine.data_adapter.unpack_x_y_sample_weight", "engine.data_adapter.expand_1d"], "engine.training.Model.make_test_function": ["eager.def_function.function"], "engine.training.Model.make_test_function.step_function": ["<builtin>.next", "engine.training.reduce_per_replica"], "engine.training.Model.make_test_function.step_function.run_step": ["framework.ops.control_dependencies", "engine.training._minimum_control_deps", "engine.training.Model.test_step"], "engine.training.Model.make_test_function.test_function": ["engine.training.Model.make_test_function.step_function", "ops.math_ops.range"], "engine.training.Model.make_test_function.<lambda1>": [], "engine.training.flatten_metrics_in_order": ["<builtin>.len", "<builtin>.sorted"], "engine.training.Model.predict_step": ["engine.training.Model.__init__", "engine.data_adapter.unpack_x_y_sample_weight", "engine.data_adapter.expand_1d"], "engine.training.Model.make_predict_function": ["eager.def_function.function"], "engine.training.Model.make_predict_function.step_function": ["<builtin>.next", "engine.training.reduce_per_replica"], "engine.training.Model.make_predict_function.step_function.run_step": ["framework.ops.control_dependencies", "engine.training._minimum_control_deps", "engine.training.Model.predict_step"], "engine.training.Model.make_predict_function.predict_function": ["utils.tf_utils.get_tensor_spec", "util.nest.map_structure", "lang.directives.set_loop_options", "ops.math_ops.range", "util.nest.flatten", "engine.training.Model.make_predict_function.step_function"], "engine.training.Model.make_predict_function.predict_function.<lambda1>": ["engine.training.concat"], "engine.training.concat": ["<builtin>.isinstance", "ops.sparse_ops.sparse_concat_v2", "ops.array_ops.concat"], "engine.training.Model.predict": ["engine.training.Model.make_predict_function.predict_function", "engine.training._is_tpu_multi_host", "util.nest.map_structure", "utils.tf_utils.sync_to_numpy_or_python_type", "eager.context.async_wait", "engine.training._disallow_inside_tf_function", "util.nest.map_structure_up_to", "<builtin>.isinstance", "ops.options.Options", "warnings.warn", "engine.training.Model.make_predict_function", "engine.data_adapter.get_data_handler", "keras.callbacks.CallbackList", "utils.version_utils.disallow_legacy_graph", "<builtin>.ValueError", "engine.training.Model._check_call_args", "engine.training.Model._in_multi_worker_mode"], "engine.training.Model._in_multi_worker_mode": [], "engine.training._is_tpu_multi_host": ["keras.backend.is_tpu_strategy"], "engine.training.Model.predict.<lambda1>": [], "engine.training.Model.predict.<lambda2>": [], "engine.training.Model.train_on_batch": ["engine.training.flatten_metrics_in_order", "engine.data_adapter.single_batch_iterator", "engine.training._disallow_inside_tf_function", "engine.training.Model._assert_compile_was_called", "engine.training.Model.make_train_function", "engine.training.Model.make_train_function.train_function", "engine.training.Model.reset_metrics", "utils.tf_utils.sync_to_numpy_or_python_type", "engine.training_utils.RespectCompiledTrainableState", "engine.training.Model.make_train_function.<lambda1>", "engine.training.Model._check_call_args"], "engine.training.Model.test_on_batch": ["engine.training.Model.make_test_function.<lambda1>", "engine.training.flatten_metrics_in_order", "engine.training.Model.make_test_function.test_function", "engine.data_adapter.single_batch_iterator", "engine.training._disallow_inside_tf_function", "engine.training.Model._assert_compile_was_called", "engine.training.Model.reset_metrics", "utils.tf_utils.sync_to_numpy_or_python_type", "engine.training.Model._check_call_args", "engine.training.Model.make_test_function"], "engine.training.Model.predict_on_batch": ["engine.training.Model.make_predict_function.predict_function", "engine.data_adapter.single_batch_iterator", "engine.training._disallow_inside_tf_function", "engine.training.Model.make_predict_function", "utils.tf_utils.sync_to_numpy_or_python_type", "engine.training.Model._check_call_args"], "engine.training.Model.fit_generator": ["engine.training.Model.fit", "warnings.warn"], "engine.training.Model.evaluate_generator": ["engine.training.Model._check_call_args", "engine.training.Model.evaluate", "warnings.warn"], "engine.training.Model.predict_generator": ["warnings.warn", "engine.training.Model.predict"], "engine.training.Model.trainable_weights": ["engine.training.Model._assert_weights_created", "base_layer.Layer._dedup_weights"], "engine.training.Model._assert_weights_created": ["<builtin>.ValueError"], "base_layer.Layer._dedup_weights": [], "engine.training.Model.non_trainable_weights": ["engine.training.Model._assert_weights_created", "base_layer.Layer._dedup_weights"], "engine.training.Model.get_weights": ["<builtin>.super"], "engine.training.Model.save": [], "engine.training.Model.save_weights": ["keras.backend.get_session", "<builtin>.ImportError", "training.checkpoint_management.update_checkpoint_state_internal", "saving.hdf5_format.save_weights_to_hdf5_group", "saving.saving_utils.is_hdf5_filepath", "utils.io_utils.ask_to_proceed_with_overwrite", "utils.io_utils.path_to_string", "h5py.File", "<builtin>.ValueError", "eager.context.executing_eagerly", "engine.training.Model._assert_weights_created", "os.path.isfile", "os.path.dirname"], "utils.io_utils.path_to_string": ["<builtin>.isinstance", "os.fspath"], "saving.saving_utils.is_hdf5_filepath": [], "utils.io_utils.ask_to_proceed_with_overwrite": ["<builtin>.print", "<builtin>.input"], "h5py.File": [], "saving.hdf5_format.save_weights_to_hdf5_group": ["<builtin>.str", "saving.hdf5_format.save_attributes_to_hdf5_group", "keras.backend.batch_get_value", "<builtin>.zip", "<builtin>.sorted", "saving.hdf5_format._legacy_weights", "keras.backend.backend"], "training.checkpoint_management.update_checkpoint_state_internal": ["io.file_io.atomic_write_string_to_file", "training.checkpoint_management.generate_checkpoint_state_proto", "training.checkpoint_management._GetCheckpointFilename", "protobuf.text_format.MessageToString", "<builtin>.RuntimeError"], "engine.training.Model.load_weights": ["engine.training._detect_save_format", "keras.backend.get_session", "tracking.util.streaming_restore", "saving.hdf5_format.load_weights_from_hdf5_group", "saving.saving_utils.is_hdf5_filepath", "engine.training.Model._assert_weights_created", "saving.hdf5_format.load_weights_from_hdf5_group_by_name", "h5py.File", "<builtin>.ValueError", "eager.context.executing_eagerly", "<builtin>.ImportError", "keras.backend.is_tpu_strategy", "<builtin>.NotImplementedError"], "engine.training._detect_save_format": ["engine.training._is_readable_tf_checkpoint", "saving.saving_utils.is_hdf5_filepath", "utils.io_utils.path_to_string", "saved_model.loader_impl.contains_saved_model", "<builtin>.ValueError", "os.path.join"], "tracking.util.streaming_restore": ["eager.context.executing_eagerly", "tracking.util.get_session", "<builtin>.isinstance", "<builtin>.NotImplementedError"], "saving.hdf5_format.load_weights_from_hdf5_group_by_name": ["keras.backend.int_shape", "<builtin>.str", "keras.backend.batch_set_value", "<builtin>.range", "numpy.asarray", "saving.hdf5_format._legacy_weights", "<builtin>.hasattr", "<builtin>.len", "<builtin>.ValueError", "saving.hdf5_format.load_attributes_from_hdf5_group", "<builtin>.enumerate", "platform.tf_logging.warning", "saving.hdf5_format.preprocess_weights_for_loading"], "saving.hdf5_format.load_weights_from_hdf5_group": ["<builtin>.str", "<builtin>.zip", "keras.backend.batch_set_value", "saving.hdf5_format._legacy_weights", "<builtin>.len", "<builtin>.hasattr", "<builtin>.ValueError", "numpy.asarray", "saving.hdf5_format.load_attributes_from_hdf5_group", "<builtin>.enumerate", "saving.hdf5_format.preprocess_weights_for_loading"], "engine.training.Model._updated_config": ["engine.training.Model.get_config"], "engine.training.Model.get_config": [], "engine.training.Model.from_config": ["utils.generic_utils.SharedObjectLoadingScope", "engine.training.Model.__init__", "engine.functional.connect_ancillary_layers", "engine.functional.reconstruct_from_config"], "engine.training.Model.to_json": ["engine.training.Model._updated_config", "json.dumps"], "engine.training.Model.to_yaml": ["<builtin>.RuntimeError"], "engine.training.Model.reset_states": ["<builtin>.hasattr", "<builtin>.getattr"], "engine.training.Model.state_updates": ["<builtin>.hasattr", "warnings.warn", "<builtin>.getattr"], "engine.training.Model.weights": ["base_layer.Layer._dedup_weights"], "engine.training.Model._undeduplicated_weights": ["engine.training.Model._assert_weights_created"], "engine.training.Model.summary": ["utils.layer_utils.print_summary", "<builtin>.ValueError"], "utils.layer_utils.print_summary": ["utils.layer_utils.print_summary.print_layer_summary", "utils.layer_utils.print_summary.print_row", "<builtin>.len", "utils.layer_utils.count_params", "util.nest.flatten", "utils.layer_utils.print_summary.print_layer_summary_with_connections", "<builtin>.hasattr", "<builtin>.int", "<builtin>.range"], "engine.training.Model.layers": ["<builtin>.list", "base_layer.Layer._flatten_layers"], "engine.training.Model.get_layer": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.str"], "engine.training.Model._set_save_spec": ["utils.tf_utils.get_tensor_spec", "util.nest.map_structure", "<builtin>.zip", "util.nest.pack_sequence_as", "util.nest.flatten", "engine.compile_utils.create_pseudo_input_names"], "engine.training.Model._set_save_spec.<lambda1>": [], "engine.training.Model._set_inputs": ["engine.training.Model._set_save_spec"], "engine.training.Model._trackable_saved_model_saver": ["saved_model.model_serialization.ModelSavedModelSaver"], "saved_model.model_serialization.ModelSavedModelSaver": [], "engine.training.Model._list_functions_for_serialization": ["<builtin>.super"], "engine.training.Model._get_compile_args": ["engine.training.Model._assert_compile_was_called"], "engine.training.Model._get_callback_model": [], "engine.training.Model._compile_was_called": [], "engine.training.reduce_per_replica._reduce": ["engine.training._is_tpu_multi_host", "engine.training._multi_worker_concat", "engine.training._collective_all_reduce_multi_worker", "engine.training.concat", "engine.training._tpu_multi_host_concat", "<builtin>.ValueError", "engine.training._is_per_replica_instance"], "engine.training._collective_all_reduce_multi_worker": ["<builtin>.isinstance"], "engine.training._multi_worker_concat": ["<builtin>.len", "ops.array_ops.split", "ops.array_ops.concat", "ops.array_ops.expand_dims_v2", "engine.training.concat", "<builtin>.range", "ops.array_ops.shape", "engine.training._is_per_replica_instance"], "engine.training._is_per_replica_instance": ["<builtin>.isinstance"], "engine.training._tpu_multi_host_concat": ["engine.training.concat", "<builtin>.range"], "engine.training._is_scalar": ["<builtin>.isinstance"], "ops.summary_ops_v2.scalar": ["ops.summary_ops_v2.summary_writer_function"], "engine.training._is_readable_tf_checkpoint": ["training.py_checkpoint_reader.NewCheckpointReader"], "saved_model.loader_impl.contains_saved_model": ["saved_model.loader_impl.maybe_saved_model_directory"], "training.py_checkpoint_reader.NewCheckpointReader": ["training.py_checkpoint_reader.error_translator", "util._pywrap_checkpoint_reader.CheckpointReader", "util.compat.as_bytes"], "utils.object_identity.ObjectIdentityWeakKeyDictionary": [], "tracking.graph_view.ObjectGraphView": [], "tracking.util.TrackableSaver": [], "engine.training_distributed_v1": [], "engine.training_distributed_v1._per_replica_execution_function": [], "engine.training_distributed_v1._build_model": ["distribute.distributed_training_utils_v1.clone_model_on_replicas", "distribute.distributed_training_utils_v1._build_distributed_network"], "engine.training_distributed_v1._make_train_step_fn": [], "engine.training_distributed_v1._make_train_step_fn._step_fn": ["keras.backend.function", "<builtin>.isinstance", "<builtin>.str", "<builtin>.len", "<builtin>.zip", "distribute.distributed_training_utils_v1.unwrap_values", "engine.training_distributed_v1._build_model", "distribute.distributed_training_utils_v1.get_distributed_model"], "engine.training_distributed_v1.experimental_tpu_fit_loop": ["distribute.distributed_training_utils_v1.get_iterator", "<builtin>.range", "<builtin>.min", "keras.backend.get_session", "engine.training_distributed_v1._make_train_step_fn", "keras.backend.batch_get_value", "<builtin>.len", "keras.callbacks.configure_callbacks", "distribute.distributed_training_utils_v1._reset_metrics", "engine.training_utils_v1.should_run_validation", "distribute.distributed_training_utils_v1.distributed_scope", "platform.tf_logging.warning", "ops.array_ops.zeros", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.bool", "distribute.distributed_training_utils_v1._copy_weights_to_distributed_model", "platform.tf_logging.info", "distribute.distributed_training_utils_v1._copy_weights_to_original_model", "framework.constant_op.constant", "engine.training_distributed_v1.experimental_tpu_test_loop", "keras.backend.variable"], "keras.backend.variable": ["framework.dtypes.as_dtype", "<builtin>.hasattr", "keras.backend.track_variable", "framework.sparse_tensor.SparseTensor", "<builtin>.isinstance", "keras.backend_config.floatx", "numpy.concatenate", "ops.variables.Variable", "numpy.expand_dims", "keras.backend.int_shape"], "engine.training_distributed_v1.experimental_tpu_test_loop": ["distribute.distributed_training_utils_v1.get_iterator", "keras.callbacks.make_logs", "distribute.distributed_training_utils_v1._copy_weights_to_distributed_model", "platform.tf_logging.warning", "keras.backend.batch_get_value", "<builtin>.len", "<builtin>.zip", "<builtin>.list", "keras.callbacks.configure_callbacks", "distribute.distributed_training_utils_v1._reset_metrics", "ops.control_flow_ops.group", "<builtin>.ValueError", "utils.generic_utils.Progbar", "<builtin>.enumerate", "distribute.distributed_training_utils_v1.distributed_scope"], "engine.training_distributed_v1.experimental_tpu_test_loop._test_step_fn": ["ops.array_ops.identity", "engine.training_distributed_v1._per_replica_execution_function", "<builtin>.isinstance", "<builtin>.len", "distribute.distribution_strategy_context.get_replica_context", "distribute.distributed_training_utils_v1.get_distributed_model", "framework.ops.control_dependencies"], "distribute.distribution_strategy_context.get_replica_context": ["distribute.distribution_strategy_context._get_per_thread_mode"], "utils.generic_utils.Progbar": [], "engine.training_distributed_v1.experimental_tpu_predict_loop": ["distribute.distributed_training_utils_v1.get_iterator", "keras.callbacks.make_logs", "engine.partial_batch_padding_handler.PartialBatchPaddingHandler", "distribute.distributed_training_utils_v1.is_dataset_shape_fully_defined", "distribute.distributed_training_utils_v1._copy_weights_to_distributed_model", "distribute.input_lib._get_dataset_attributes", "platform.tf_logging.warning", "keras.backend.batch_get_value", "<builtin>.len", "keras.callbacks.configure_callbacks", "<builtin>.range", "distribute.distributed_training_utils_v1.flatten_per_replica_values", "distribute.distributed_training_utils_v1._reset_metrics", "numpy.concatenate", "<builtin>.ValueError", "ops.control_flow_ops.group", "utils.generic_utils.Progbar", "distribute.distributed_training_utils_v1.distributed_scope"], "engine.partial_batch_padding_handler.PartialBatchPaddingHandler": [], "distribute.input_lib._get_dataset_attributes": ["<builtin>.isinstance", "distribute.input_lib._get_batched_dataset", "distribute.input_lib._get_batched_dataset_attributes"], "engine.training_distributed_v1.experimental_tpu_predict_loop._predict_step_fn": ["ops.array_ops.identity", "engine.training_distributed_v1._per_replica_execution_function", "distribute.distribution_strategy_context.get_replica_context", "distribute.distributed_training_utils_v1.get_distributed_model", "framework.ops.control_dependencies"], "engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop.fit": ["engine.training_utils_v1.infer_steps_for_dataset", "keras.backend.is_tpu_strategy", "engine.training_utils_v1.unpack_validation_data", "engine.training_arrays_v1.fit_loop", "distribute.distributed_training_utils_v1.process_batch_and_step_size", "engine.training_distributed_v1.experimental_tpu_fit_loop", "distribute.distributed_training_utils_v1.validate_inputs", "<builtin>.ValueError", "distribute.distributed_training_utils_v1.validate_callbacks", "distribute.distributed_training_utils_v1.is_distributing_by_cloning", "eager.context.executing_eagerly"], "engine.training_utils_v1.unpack_validation_data": ["<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance"], "engine.training_arrays_v1.fit_loop": [], "engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop.evaluate": ["engine.training_utils_v1.infer_steps_for_dataset", "keras.backend.is_tpu_strategy", "distribute.distributed_training_utils_v1.process_batch_and_step_size", "engine.training_distributed_v1.experimental_tpu_test_loop", "distribute.distributed_training_utils_v1.validate_inputs", "<builtin>.ValueError", "engine.training_arrays_v1.test_loop", "eager.context.executing_eagerly"], "engine.training_arrays_v1.test_loop": [], "engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop.predict": ["engine.training_utils_v1.infer_steps_for_dataset", "keras.backend.is_tpu_strategy", "distribute.distributed_training_utils_v1.process_batch_and_step_size", "engine.training_distributed_v1.experimental_tpu_predict_loop", "engine.training_arrays_v1.predict_loop", "distribute.distributed_training_utils_v1.validate_inputs", "<builtin>.ValueError", "eager.context.executing_eagerly"], "engine.training_arrays_v1.predict_loop": [], "engine.training_distributed_v1._train_with_multi_worker": [], "engine.training_distributed_v1._train_with_multi_worker.wrapper": ["distribute.distribute_coordinator_utils.run_distribute_coordinator"], "engine.training_distributed_v1._train_with_multi_worker.wrapper._worker_fn": ["distribute.distributed_training_utils_v1.filter_distributed_callbacks"], "engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop.__init__": [], "engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop.fit": ["engine.training_distributed_v1._train_with_multi_worker.wrapper", "engine.training_distributed_v1._train_with_multi_worker"], "engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop.evaluate": ["engine.training_distributed_v1._train_with_multi_worker.wrapper", "engine.training_distributed_v1._train_with_multi_worker"], "engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop.predict": [], "engine.training_eager_v1": [], "engine.training_eager_v1._eager_loss_fn": ["keras.backend.name_scope"], "engine.training_eager_v1._eager_metrics_fn": ["<builtin>.len", "util.nest.flatten"], "engine.training_eager_v1._model_loss": ["utils.losses_utils.reduce_weighted_loss", "ops.math_ops.cast", "<builtin>.enumerate", "<builtin>.hasattr", "engine.training_utils_v1.cast_if_floating_dtype", "ops.math_ops.add_n", "util.nest.flatten", "<builtin>.ValueError", "framework.ops.convert_to_tensor_v2_with_dispatch", "util.nest.map_structure", "utils.losses_utils.scale_loss_for_distribution", "utils.losses_utils.squeeze_or_expand_dimensions", "<builtin>.any", "utils.losses_utils.compute_weighted_loss", "engine.training_utils_v1.cast_if_floating_dtype_and_mismatch", "<builtin>.len", "keras.backend.name_scope", "<builtin>.getattr", "<builtin>.isinstance"], "engine.training_utils_v1.cast_if_floating_dtype_and_mismatch": ["<builtin>.zip", "<builtin>.isinstance", "framework.tensor_util.is_tf_type", "framework.ops.convert_to_tensor_v2_with_dispatch", "engine.training_utils_v1.cast_single_tensor"], "engine.training_utils_v1.cast_if_floating_dtype": ["functools.partial", "util.nest.map_structure"], "utils.losses_utils.compute_weighted_loss": ["keras.backend.name_scope", "utils.losses_utils.ReductionV2.validate", "ops.math_ops.multiply", "ops.math_ops.cast", "utils.losses_utils.reduce_weighted_loss", "utils.losses_utils.squeeze_or_expand_dimensions", "framework.ops.get_default_graph", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance"], "utils.losses_utils.reduce_weighted_loss": ["utils.losses_utils._safe_mean", "ops.math_ops.reduce_sum", "utils.losses_utils._num_elements"], "engine.training_eager_v1._process_single_batch": ["<builtin>.hasattr", "eager.backprop.GradientTape", "engine.training_utils.RespectCompiledTrainableState", "keras.backend.eager_learning_phase_scope", "engine.training_eager_v1._model_loss", "platform.tf_logging.warning", "<builtin>.zip", "<builtin>.isinstance"], "keras.backend.eager_learning_phase_scope": ["framework.ops.executing_eagerly_outside_functions", "keras.backend.global_learning_phase_is_set", "keras.backend.learning_phase"], "engine.training_eager_v1.train_on_batch": ["engine.training_utils_v1.cast_to_model_input_dtypes", "engine.training_eager_v1._process_single_batch", "engine.training_eager_v1._eager_metrics_fn", "util.nest.flatten", "<builtin>.isinstance"], "engine.training_utils_v1.cast_to_model_input_dtypes": ["util.nest.map_structure"], "engine.training_eager_v1.test_on_batch": ["engine.training_utils_v1.cast_to_model_input_dtypes", "engine.training_eager_v1._eager_metrics_fn", "keras.backend.eager_learning_phase_scope", "engine.training_eager_v1._model_loss", "util.nest.flatten", "<builtin>.isinstance"], "engine.training_generator_v1": ["functools.partial"], "engine.training_generator_v1.model_iteration": ["platform.tf_logging.warning", "keras.callbacks.set_callback_parameters", "keras.callbacks.make_logs", "engine.training_generator_v1._get_next_batch", "engine.training_utils_v1.OutputsAggregator", "engine.training_utils_v1.MetricsAggregator", "engine.training_generator_v1._make_execution_function.predict_on_batch", "engine.training_generator_v1._make_execution_function", "engine.training_generator_v1.convert_to_generator_like", "ops.dataset_ops.make_one_shot_iterator", "<builtin>.int", "engine.training_generator_v1._get_num_samples_or_steps", "engine.training_utils_v1.infer_steps_for_dataset", "eager.context.executing_eagerly", "engine.training_generator_v1._make_enqueued_generator", "engine.training_generator_v1.model_iteration", "keras.callbacks.configure_callbacks", "keras.backend.eager_learning_phase_scope", "<builtin>.isinstance", "engine.training_utils_v1.should_run_validation", "<builtin>.len", "engine.training_generator_v1._validate_arguments", "<builtin>.range", "util.nest.flatten"], "engine.training_generator_v1.convert_to_generator_like": ["<builtin>.tuple", "<builtin>.len", "<builtin>.all", "ops.dataset_ops.make_one_shot_iterator", "<builtin>.isinstance", "<builtin>.int", "engine.training_generator_v1.convert_to_generator_like._gen", "<builtin>.ValueError", "math.ceil", "util.nest.flatten", "utils.data_utils.is_generator_or_sequence"], "engine.training_generator_v1._validate_arguments": ["platform.tf_logging.warning", "<builtin>.any", "<builtin>.isinstance", "<builtin>.UserWarning", "<builtin>.ValueError", "utils.data_utils.is_generator_or_sequence"], "engine.training_generator_v1._make_execution_function": ["functools.partial"], "engine.training_generator_v1._make_enqueued_generator": ["utils.data_utils.OrderedEnqueuer", "utils.data_utils.iter_sequence_infinite", "utils.data_utils.GeneratorEnqueuer", "<builtin>.isinstance"], "engine.training_generator_v1._get_num_samples_or_steps": ["<builtin>.int", "util.nest.flatten", "<builtin>.hasattr"], "engine.training_generator_v1._get_next_batch": ["<builtin>.next", "<builtin>.len", "<builtin>.ValueError", "<builtin>.isinstance"], "engine.training_generator_v1._make_execution_function.predict_on_batch": [], "keras.callbacks.set_callback_parameters": ["<builtin>.isinstance", "keras.callbacks.CallbackList.set_params", "copy.copy", "keras.callbacks.CallbackList.__iter__"], "utils.data_utils.is_generator_or_sequence": ["utils.tf_inspect.isgenerator", "<builtin>.isinstance"], "engine.training_generator_v1.convert_to_generator_like._gen": ["engine.training_utils.slice_arrays", "numpy.random.shuffle", "<builtin>.range", "util.nest.pack_sequence_as", "utils.generic_utils.make_batches", "numpy.arange", "util.nest.flatten"], "utils.data_utils.iter_sequence_infinite": [], "engine.training_generator_v1.GeneratorOrSequenceTrainingLoop.fit": ["engine.training_utils_v1.check_generator_arguments"], "engine.training_utils_v1.check_generator_arguments": ["<builtin>.ValueError"], "engine.training_generator_v1.GeneratorOrSequenceTrainingLoop.evaluate": ["engine.training_utils_v1.check_generator_arguments"], "engine.training_generator_v1.GeneratorOrSequenceTrainingLoop.predict": [], "engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop.fit": ["engine.training_utils_v1.validate_dataset_input", "<builtin>.isinstance", "engine.training_utils_v1.verify_dataset_shuffled"], "engine.training_utils_v1.validate_dataset_input": ["<builtin>.ValueError"], "engine.training_utils_v1.verify_dataset_shuffled": ["platform.tf_logging.warning", "engine.training_utils_v1.get_dataset_graph_def", "<builtin>.isinstance"], "engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop.evaluate": ["engine.training_utils_v1.validate_dataset_input"], "engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop.predict": [], "engine.training_generator_v1.GeneratorLikeTrainingLoop.fit": ["<builtin>.ValueError", "engine.training_utils_v1.split_training_and_validation_data"], "engine.training_generator_v1.GeneratorLikeTrainingLoop.evaluate": [], "engine.training_generator_v1.GeneratorLikeTrainingLoop.predict": [], "engine.training_utils": [], "engine.training_utils.RespectCompiledTrainableState.__init__": [], "engine.training_utils.RespectCompiledTrainableState.__enter__": [], "engine.training_utils.RespectCompiledTrainableState.__exit__": [], "engine.training_utils.get_input_shape_and_dtype._is_graph_model": ["<builtin>.hasattr"], "engine.training_utils_v1": [], "engine.training_utils_v1.is_composite_or_composite_value": ["<builtin>.isinstance"], "engine.training_utils_v1.Aggregator.__init__": [], "engine.training_utils_v1.Aggregator": ["abc.abstractmethod"], "engine.training_utils_v1.Aggregator.create": ["<builtin>.NotImplementedError"], "engine.training_utils_v1.Aggregator.aggregate": ["<builtin>.NotImplementedError"], "engine.training_utils_v1.Aggregator.finalize": ["<builtin>.NotImplementedError"], "engine.training_utils_v1.MetricsAggregator.__init__": ["<builtin>.super"], "engine.training_utils_v1.MetricsAggregator.create": ["<builtin>.len"], "engine.training_utils_v1.MetricsAggregator.aggregate": [], "engine.training_utils_v1.MetricsAggregator.finalize": ["<builtin>.ValueError"], "engine.training_utils_v1._append_sparse_tensor_value": ["framework.sparse_tensor.SparseTensorValue", "<builtin>.RuntimeError", "<builtin>.list", "<builtin>.max", "<builtin>.len", "numpy.concatenate", "<builtin>.tuple", "numpy.append"], "numpy.append": [], "framework.sparse_tensor.SparseTensorValue": [], "engine.training_utils_v1._append_ragged_tensor_value": ["<builtin>.RuntimeError", "<builtin>.len", "<builtin>.isinstance", "ragged.ragged_tensor_value.RaggedTensorValue", "numpy.concatenate", "engine.training_utils_v1._append_ragged_tensor_value", "numpy.append"], "ragged.ragged_tensor_value.RaggedTensorValue": ["<builtin>.property"], "engine.training_utils_v1._append_composite_tensor": ["<builtin>.type", "<builtin>.RuntimeError", "engine.training_utils_v1._append_sparse_tensor_value", "<builtin>.isinstance", "ops.array_ops.concat", "engine.training_utils_v1._append_ragged_tensor_value", "ops.sparse_ops.sparse_concat"], "ops.sparse_ops.sparse_concat": ["ops.sparse_ops.sparse_concat_v2", "util.deprecation.deprecated_argument_lookup"], "engine.training_utils_v1.ConcatAggregator.__init__": ["<builtin>.super"], "engine.training_utils_v1.ConcatAggregator.create": ["engine.training_utils_v1.is_composite_or_composite_value"], "engine.training_utils_v1.ConcatAggregator.aggregate": ["<builtin>.ValueError"], "engine.training_utils_v1.ConcatAggregator.finalize": ["numpy.concatenate", "engine.training_utils_v1._append_composite_tensor", "<builtin>.len"], "engine.training_utils_v1.get_copy_pool": ["atexit.register"], "engine.training_utils_v1.SliceAggregator.__init__": ["<builtin>.super", "engine.training_utils_v1.get_copy_pool"], "engine.training_utils_v1.SliceAggregator.create": ["numpy.empty"], "engine.training_utils_v1.SliceAggregator.aggregate": ["numpy.prod", "<builtin>.ValueError", "threading.Event"], "engine.training_utils_v1.SliceAggregator._slice_assign": [], "engine.training_utils_v1.SliceAggregator.finalize": ["time.time", "<builtin>.max", "<builtin>.ValueError"], "engine.training_utils_v1.OutputsAggregator.create": ["<builtin>.RuntimeError", "util.nest.get_traverse_shallow_structure", "<builtin>.isinstance", "engine.training_utils_v1.ConcatAggregator.__init__", "engine.training_utils_v1.SliceAggregator.__init__", "util.nest.flatten_up_to", "engine.training_utils_v1.is_composite_or_composite_value"], "engine.training_utils_v1.OutputsAggregator.create.<lambda1>": ["engine.training_utils_v1.is_composite_or_composite_value"], "util.nest.get_traverse_shallow_structure": ["util.nest.get_traverse_shallow_structure", "util.nest._yield_value", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.TypeError", "util.nest.assert_shallow_structure", "util.nest._sequence_like"], "engine.training_utils_v1.OutputsAggregator.aggregate": ["util.nest.flatten_up_to", "<builtin>.zip"], "engine.training_utils_v1.OutputsAggregator.finalize": ["util.nest.pack_sequence_as"], "engine.training_utils_v1.get_progbar": ["<builtin>.getattr", "keras.callbacks.ProgbarLogger"], "keras.callbacks.ProgbarLogger": [], "engine.training_utils_v1.check_steps_argument": ["engine.training_utils_v1.has_symbolic_tensors", "platform.tf_logging.warning", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.any"], "engine.training_utils_v1.standardize_single_array": ["numpy.expand_dims", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "framework.tensor_util.is_tf_type", "ops.array_ops.expand_dims", "engine.training_utils_v1.is_composite_or_composite_value"], "engine.training_utils_v1.get_composite_shape": ["<builtin>.isinstance"], "engine.training_utils_v1.standardize_input_data": ["engine.training_utils_v1.standardize_single_array", "<builtin>.range", "<builtin>.zip", "<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "framework.tensor_util.is_tf_type", "engine.training_utils_v1.get_composite_shape", "<builtin>.tuple", "numpy.asarray", "<builtin>.str", "engine.training_utils_v1.is_composite_or_composite_value", "<builtin>.TypeError"], "engine.training_utils_v1.standardize_sample_or_class_weights": ["utils.generic_utils.check_for_unexpected_keys", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "<builtin>.str", "<builtin>.TypeError"], "utils.generic_utils.check_for_unexpected_keys": ["<builtin>.list", "<builtin>.set", "<builtin>.ValueError"], "engine.training_utils_v1.standardize_class_weights": ["engine.training_utils_v1.standardize_sample_or_class_weights"], "engine.training_utils_v1.standardize_sample_weights": ["engine.training_utils_v1.standardize_sample_or_class_weights"], "engine.training_utils_v1.check_array_lengths": ["<builtin>.list", "<builtin>.ValueError", "<builtin>.len", "engine.training_utils_v1.check_array_lengths.set_of_lengths", "<builtin>.str"], "engine.training_utils_v1.check_array_lengths.is_tensor_or_composite_tensor": ["framework.tensor_util.is_tf_type", "engine.training_utils_v1.is_composite_or_composite_value"], "engine.training_utils_v1.check_array_lengths.set_of_lengths": ["engine.training_utils_v1.check_array_lengths.is_tensor_or_composite_tensor", "<builtin>.set"], "engine.training_utils_v1.check_loss_and_target_compatibility": ["<builtin>.zip", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "framework.tensor_util.is_tf_type", "keras.losses.is_categorical_crossentropy", "<builtin>.str"], "keras.losses.is_categorical_crossentropy": ["<builtin>.isinstance", "<builtin>.hasattr"], "engine.training_utils_v1.collect_per_output_metric_info": ["keras.metrics.clone_metric", "utils.generic_utils.check_for_unexpected_keys", "engine.training_utils_v1.get_metric_name", "keras.metrics.MeanMetricWrapper", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "<builtin>.enumerate", "engine.training_utils_v1.get_metric_function", "utils.generic_utils.to_list", "collections.OrderedDict", "<builtin>.any", "<builtin>.str", "<builtin>.TypeError"], "keras.metrics.clone_metric": ["framework.ops.init_scope", "<builtin>.isinstance"], "engine.training_utils_v1.get_metric_name": ["<builtin>.hasattr", "python.tf2.enabled", "keras.metrics.get", "<builtin>.isinstance"], "engine.training_utils_v1.get_metric_function": ["keras.metrics.get", "<builtin>.isinstance"], "engine.training_utils_v1.standardize_weights": ["numpy.array", "<builtin>.sorted", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "numpy.max", "framework.ops.convert_to_tensor_v2_with_dispatch", "numpy.reshape", "keras.backend.shape", "ops.array_ops.gather", "numpy.argmax", "framework.smart_cond.smart_cond", "framework.tensor_util.is_tf_type", "numpy.asarray", "<builtin>.str", "ops.gen_array_ops.check_numerics", "keras.backend.floatx", "<builtin>.set", "ops.math_ops.cast", "numpy.zeros"], "engine.training_utils_v1.standardize_weights.<lambda1>": ["keras.backend.argmax"], "engine.training_utils_v1.standardize_weights.<lambda2>": ["ops.math_ops.cast", "keras.backend.reshape"], "ops.gen_array_ops.check_numerics": [], "numpy.argmax": [], "engine.training_utils_v1.has_symbolic_tensors": ["engine.training_utils_v1.has_tensors", "eager.context.executing_eagerly"], "engine.training_utils_v1.has_tensors": ["framework.tensor_util.is_tf_type", "<builtin>.any", "<builtin>.isinstance"], "engine.training_utils_v1.call_metric_function": ["utils.losses_utils.squeeze_or_expand_dimensions", "ops.math_ops.cast"], "engine.training_utils_v1.get_loss_function": ["<builtin>.issubclass", "<builtin>.hasattr", "keras.losses.LossFunctionWrapper", "<builtin>.ValueError", "<builtin>.isinstance", "utils.tf_inspect.isclass", "keras.losses.get", "<builtin>.callable"], "engine.training_utils_v1.validate_input_types": ["<builtin>.ValueError", "<builtin>.all", "framework.tensor_util.is_tf_type", "<builtin>.isinstance", "<builtin>.str"], "engine.training_utils_v1.cast_single_tensor": ["framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.floatx", "ops.math_ops.cast", "<builtin>.isinstance"], "engine.training_utils_v1.cast_to_model_input_dtypes.<lambda1>": [], "engine.training_utils_v1.prepare_sample_weight_modes": ["utils.generic_utils.check_for_unexpected_keys", "<builtin>.zip", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "<builtin>.str"], "engine.training_utils_v1.prepare_loss_functions": ["utils.generic_utils.check_for_unexpected_keys", "<builtin>.range", "platform.tf_logging.warning", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "util.nest.map_structure", "engine.training_utils_v1.get_loss_function"], "engine.training_utils_v1.prepare_loss_weights": ["utils.generic_utils.check_for_unexpected_keys", "<builtin>.zip", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "<builtin>.str", "<builtin>.TypeError"], "engine.training_utils_v1.is_feature_layer": ["<builtin>.getattr"], "engine.training_utils_v1.is_eager_dataset_or_iterator": ["eager.context.executing_eagerly", "<builtin>.isinstance"], "engine.training_utils_v1.get_dataset_graph_def": ["eager.context.executing_eagerly", "framework.graph_pb2.GraphDef", "keras.backend.get_value"], "engine.training_utils_v1.is_dataset_or_iterator": ["<builtin>.isinstance"], "engine.training_utils_v1.extract_tensors_from_dataset": ["engine.training_utils_v1.get_iterator", "engine.training_utils_v1.unpack_iterator_input"], "engine.training_utils_v1.unpack_iterator_input": ["<builtin>.RuntimeError", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance"], "engine.training_utils_v1.ModelInputs.__init__": ["<builtin>.range", "<builtin>.sorted", "<builtin>.len", "<builtin>.isinstance", "util.nest.flatten"], "engine.training_utils_v1.ModelInputs.get_input_names": [], "engine.training_utils_v1.ModelInputs.get_symbolic_inputs": ["numpy.expand_dims", "<builtin>.zip", "keras.backend.placeholder", "keras.backend.floatx", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.tuple", "numpy.asarray", "<builtin>.dict", "framework.dtypes.as_dtype"], "engine.training_utils_v1.ModelInputs.as_dict": ["<builtin>.zip"], "engine.training_utils_v1.ModelInputs.as_list": [], "engine.training_utils_v1.generic_output_names": ["<builtin>.range", "<builtin>.len"], "engine.training_utils_v1.TrainingLoop.fit": ["<builtin>.NotImplementedError"], "engine.training_utils_v1.TrainingLoop.evaluate": ["<builtin>.NotImplementedError"], "engine.training_utils_v1.TrainingLoop.predict": ["<builtin>.NotImplementedError"], "engine.training_v1": [], "engine.training_v1.Model.__init__": ["framework.ops.executing_eagerly_outside_functions", "<builtin>.super", "distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy", "engine.training_v1.Model._set_strategy"], "engine.training_v1.Model._set_strategy": [], "engine.training_v1.Model._init_batch_counters": [], "engine.training_v1.Model": ["tracking.base.no_automatic_dependency_tracking"], "engine.training_v1.Model.get_weights": ["base_layer.Layer.get_weights"], "base_layer.Layer.get_weights": [], "engine.training_v1.Model.load_weights": ["<builtin>.super", "keras.backend.is_tpu_strategy", "<builtin>.ValueError", "saving.saving_utils.is_hdf5_filepath"], "engine.training_v1.Model.compile": ["distribute.distribution_strategy_context.get_strategy", "engine.training_v1.Model._compile_eagerly", "util.nest.flatten", "engine.training_v1.Model._set_metric_attributes", "engine.training_utils_v1.prepare_loss_functions", "engine.training_v1.Model._handle_metrics", "keras.backend.get_graph", "<builtin>.isinstance", "engine.training_v1.Model._compile_weights_loss_and_weighted_metrics", "training.Model._clear_losses", "framework.ops.executing_eagerly_outside_functions", "<builtin>.zip", "engine.training_utils_v1.prepare_sample_weight_modes", "distribute.distribution_strategy_context.in_cross_replica_context", "training.Model._track_trackable", "<builtin>.NotImplementedError", "engine.training_v1._TrainingEndpoint.create_training_target", "engine.training_utils_v1.prepare_loss_weights", "engine.training_v1._TrainingEndpoint.__init__", "engine.training_v1.Model._validate_compile_param_for_distribution_strategy", "engine.training_v1.Model._prepare_output_masks", "<builtin>.ValueError", "eager.context.executing_eagerly", "distribute.distribution_strategy_context.has_strategy", "training.Model._assert_built_as_v1", "engine.training_v1.Model._process_target_tensor_for_compile", "python.tf2.enabled", "keras.backend.configure_and_create_distributed_session", "<builtin>.set", "training.Model._get_trainable_state", "<builtin>.TypeError", "engine.training_v1.Model._set_optimizer", "engine.training_v1.Model._prepare_skip_target_masks", "engine.training_v1.Model._cache_output_metric_attributes", "<builtin>.any", "engine.training_v1.Model._init_metric_attributes", "platform.tf_logging.warning"], "training.Model._assert_built_as_v1": [], "engine.training_v1.Model._set_optimizer": ["keras.optimizers.get", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer", "mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1", "<builtin>.ValueError", "<builtin>.isinstance"], "engine.training_v1.Model._validate_compile_param_for_distribution_strategy": ["distribute.distributed_training_utils_v1.is_distributing_by_cloning", "<builtin>.NotImplementedError", "<builtin>.ValueError"], "training.Model._track_trackable": [], "training.Model._get_trainable_state": [], "training.Model._clear_losses": [], "keras.backend.configure_and_create_distributed_session": ["keras.backend.configure_and_create_distributed_session._create_session", "distribute.distribute_coordinator_utils.run_distribute_coordinator"], "engine.training_v1.Model._init_metric_attributes": [], "engine.training_v1.Model._process_target_tensor_for_compile": ["<builtin>.len", "<builtin>.set", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.str", "framework.tensor_util.is_tf_type"], "engine.training_v1._TrainingEndpoint.__init__": [], "engine.training_v1._TrainingEndpoint.create_training_target": ["keras.backend.is_sparse", "keras.backend.dtype", "engine.training_v1._TrainingEndpoint.should_skip_target", "engine.training_v1._TrainingEndpoint.has_training_target", "<builtin>.len", "losses.LABEL_DTYPES_FOR_LOSSES.get", "keras.backend.is_placeholder", "keras.backend.placeholder", "<builtin>.ValueError", "engine.training_v1._TrainingTarget.__init__"], "engine.training_v1.Model._compile_eagerly": ["engine.training_v1.Model._prepare_sample_weights", "engine.training_v1.Model._cache_output_metric_attributes", "engine.training_v1.Model._set_metric_attributes", "engine.training_utils_v1.prepare_sample_weight_modes"], "engine.training_v1.Model._cache_output_metric_attributes": ["engine.training_utils_v1.collect_per_output_metric_info"], "engine.training_v1.Model._set_metric_attributes": ["keras.metrics.Mean", "<builtin>.len", "<builtin>.enumerate", "engine.training_v1.Model._set_per_output_metric_attributes"], "engine.training_v1.Model._prepare_skip_target_masks": [], "engine.training_v1.Model._prepare_output_masks": ["<builtin>.getattr"], "engine.training_v1.Model._handle_metrics": ["<builtin>.range", "<builtin>.len", "keras.backend.name_scope", "engine.training_v1.Model._handle_per_output_metrics"], "engine.training_v1.Model._compile_weights_loss_and_weighted_metrics": ["engine.training_v1.Model._prepare_sample_weights", "engine.training_v1.Model._prepare_skip_target_masks", "engine.training_v1.Model._prepare_total_loss", "engine.training_v1.Model._prepare_output_masks", "engine.training_v1.Model._handle_metrics", "keras.backend.get_graph", "engine.training_v1.Model._update_sample_weight_modes"], "engine.training_v1.Model._init_distributed_function_cache_if_not_compiled": ["<builtin>.hasattr"], "engine.training_v1.Model.metrics": ["<builtin>.super", "training.Model._flatten_layers", "engine.training_v1._get_metrics_from_layers", "<builtin>.hasattr", "<builtin>.list"], "training.Model._flatten_layers": [], "engine.training_v1._get_metrics_from_layers": ["utils.layer_utils.filter_empty_layer_containers", "<builtin>.isinstance", "engine.training_v1._get_metrics_from_layers"], "engine.training_v1.Model.metrics_names": ["<builtin>.hasattr", "<builtin>.super", "<builtin>.len"], "engine.training_v1.Model.run_eagerly": ["eager.context.executing_eagerly", "eager.def_function.functions_run_eagerly", "<builtin>.ValueError"], "engine.training_v1.Model._select_training_loop": ["utils.data_utils.is_generator_or_sequence", "engine.training_utils_v1.is_eager_dataset_or_iterator", "engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop", "engine.training_generator_v1.GeneratorLikeTrainingLoop", "engine.training_generator_v1.GeneratorOrSequenceTrainingLoop", "engine.training_v1.Model._in_multi_worker_mode", "engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop", "engine.training_arrays_v1.ArrayLikeTrainingLoop", "<builtin>.ValueError", "<builtin>.isinstance", "engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop"], "engine.training_v1.Model._in_multi_worker_mode": ["distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy"], "engine.training_distributed_v1.DistributionSingleWorkerTrainingLoop": [], "engine.training_distributed_v1.DistributionMultiWorkerTrainingLoop": [], "engine.training_generator_v1.GeneratorOrSequenceTrainingLoop": [], "engine.training_generator_v1.EagerDatasetOrIteratorTrainingLoop": [], "engine.training_generator_v1.GeneratorLikeTrainingLoop": [], "engine.training_arrays_v1.ArrayLikeTrainingLoop": [], "engine.training_v1.Model.fit": ["engine.training_v1.Model._select_training_loop", "engine.training_v1.Model._check_call_args", "engine.training_v1.Model._assert_compile_was_called", "platform.tf_logging.warning", "<builtin>.TypeError", "<builtin>.str", "training.Model._assert_built_as_v1"], "engine.training_v1.Model._assert_compile_was_called": ["<builtin>.RuntimeError"], "engine.training_v1.Model._check_call_args": ["<builtin>.str", "<builtin>.len", "<builtin>.ValueError"], "engine.training_v1.Model.evaluate": ["engine.training_v1.Model._assert_compile_was_called", "engine.training_v1.Model._select_training_loop", "engine.training_v1.Model._check_call_args", "training.Model._assert_built_as_v1"], "engine.training_v1.Model.predict": ["engine.training_v1.Model._select_training_loop", "engine.training_v1.Model._check_call_args", "training.Model._assert_built_as_v1"], "engine.training_v1.Model.reset_metrics": ["distribute.distributed_training_utils_v1._reset_metrics", "engine.training_v1.Model._get_training_eval_metrics"], "engine.training_v1.Model._get_training_eval_metrics": ["<builtin>.getattr"], "engine.training_v1.Model.train_on_batch": ["engine.training_utils_v1.ModelInputs", "engine.training_v1._non_none_constant_value", "engine.training_v1.Model.reset_metrics", "distribute.distribution_strategy_context.in_cross_replica_context", "engine.training_v1.Model._check_call_args", "<builtin>.len", "<builtin>.NotImplementedError", "engine.training_v1.Model._standardize_user_data", "engine.training_v1.Model._make_train_function", "engine.training_v1.Model._assert_compile_was_called", "<builtin>.isinstance", "keras.backend.symbolic_learning_phase", "engine.training_eager_v1.train_on_batch", "engine.training_v1.Model._update_sample_weight_modes", "<builtin>.list"], "engine.training_v1.Model._standardize_user_data": ["engine.training_v1.Model._build_model_with_inputs", "<builtin>.any", "engine.training_v1.Model._standardize_tensors", "engine.training_utils_v1.verify_dataset_shuffled", "engine.training_utils_v1.check_steps_argument", "engine.training_utils_v1.validate_dataset_input", "engine.training_utils_v1.unpack_iterator_input", "engine.training_v1.Model._compile_from_inputs", "<builtin>.isinstance", "engine.training_v1._is_symbolic_tensor", "engine.training_utils_v1.extract_tensors_from_dataset"], "engine.training_v1._non_none_constant_value": ["framework.tensor_util.constant_value"], "engine.training_v1.Model._update_sample_weight_modes": ["<builtin>.any"], "engine.training_v1.Model._make_train_function": ["engine.training_v1.Model._get_training_eval_metrics", "engine.training_v1.Model._recompile_weights_loss_and_weighted_metrics", "engine.training_v1.Model._check_trainable_weights_consistency", "<builtin>.setattr", "training.Model.get_updates_for", "<builtin>.hasattr", "keras.backend.function", "<builtin>.getattr", "keras.backend.get_graph", "<builtin>.ValueError", "training.Model._set_trainable_state", "<builtin>.isinstance", "training.Model._get_trainable_state", "keras.backend.symbolic_learning_phase", "keras.backend.name_scope"], "engine.training_v1.Model.test_on_batch": ["engine.training_v1.Model._update_sample_weight_modes", "engine.training_utils_v1.ModelInputs", "engine.training_v1._non_none_constant_value", "engine.training_v1.Model.reset_metrics", "distribute.distribution_strategy_context.in_cross_replica_context", "engine.training_v1.Model._check_call_args", "<builtin>.len", "<builtin>.NotImplementedError", "engine.training_v1.Model._standardize_user_data", "engine.training_v1.Model._make_test_function", "engine.training_v1.Model._assert_compile_was_called", "engine.training_eager_v1.test_on_batch", "<builtin>.list"], "engine.training_v1.Model._make_test_function": ["engine.training_v1.Model._get_training_eval_metrics", "engine.training_v1.Model._recompile_weights_loss_and_weighted_metrics", "<builtin>.setattr", "<builtin>.getattr", "keras.backend.get_graph", "keras.backend.name_scope", "<builtin>.hasattr", "keras.backend.function"], "engine.training_v1.Model.predict_on_batch": ["distribute.distribution_strategy_context.in_cross_replica_context", "engine.training_utils_v1.cast_if_floating_dtype", "engine.training_v1.Model._check_call_args", "<builtin>.len", "<builtin>.NotImplementedError", "engine.training_v1.Model._standardize_user_data", "engine.training_v1.Model._make_predict_function", "<builtin>.isinstance", "engine.training_v1.Model.__init__"], "engine.training_v1.Model._make_predict_function": ["<builtin>.hasattr", "keras.backend.function", "<builtin>.getattr", "keras.backend.name_scope"], "engine.training_v1.Model.fit_generator": ["warnings.warn", "engine.training_v1.Model.fit"], "engine.training_v1.Model.evaluate_generator": ["engine.training_v1.Model._check_call_args", "warnings.warn", "engine.training_v1.Model.evaluate"], "engine.training_v1.Model.predict_generator": ["engine.training_v1.Model.predict", "warnings.warn"], "engine.training_v1.Model._prepare_validation_data": ["engine.training_utils_v1.unpack_validation_data", "engine.training_v1.Model._standardize_user_data"], "engine.training_v1.Model._prepare_sample_weights": ["<builtin>.zip", "<builtin>.len", "<builtin>.ValueError"], "engine.training_v1.Model._recompile_weights_loss_and_weighted_metrics": ["engine.training_v1.Model._compile_weights_loss_and_weighted_metrics", "<builtin>.any"], "engine.training_v1.Model._prepare_total_loss": ["<builtin>.zip", "utils.losses_utils.compute_weighted_loss", "utils.losses_utils.scale_loss_for_distribution", "<builtin>.len", "ops.math_ops.cast", "keras.backend.name_scope", "<builtin>.ValueError", "training.Model.get_losses_for", "<builtin>.hasattr", "ops.math_ops.add_n", "utils.losses_utils.cast_losses_to_common_dtype", "<builtin>.TypeError", "utils.losses_utils.reduce_weighted_loss", "utils.losses_utils.squeeze_or_expand_dimensions"], "training.Model.get_losses_for": [], "engine.training_v1.Model._get_callback_model": ["<builtin>.hasattr"], "engine.training_v1.Model._make_callback_model": ["engine.training_v1.DistributedCallbackModel.set_original_model", "engine.training_v1.DistributedCallbackModel.__init__"], "engine.training_v1.DistributedCallbackModel.__init__": ["<builtin>.super"], "engine.training_v1.DistributedCallbackModel.set_original_model": [], "engine.training_v1.Model._validate_or_infer_batch_size": ["ops.dataset_ops.get_legacy_output_shapes", "training.Model._flatten_layers", "util.nest.flatten", "utils.tf_inspect.isgenerator", "engine.training_utils.get_static_batch_size", "framework.tensor_shape.Dimension", "distribute.distributed_training_utils.global_batch_size_supported", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.next"], "utils.tf_inspect.isgenerator": ["inspect.isgenerator", "util.tf_decorator.unwrap"], "engine.training_v1.Model._add_unique_metric_name": ["<builtin>.getattr", "<builtin>.len"], "engine.training_v1.Model._set_per_output_metric_attributes": ["engine.training_v1.Model._add_unique_metric_name", "collections.OrderedDict"], "engine.training_v1.Model._handle_per_output_metrics": ["engine.training_utils_v1.call_metric_function", "keras.backend.name_scope"], "engine.training_v1.Model._check_trainable_weights_consistency": ["platform.tf_logging.log_first_n", "<builtin>.hasattr", "<builtin>.len"], "platform.tf_logging.log_first_n": ["platform.tf_logging._GetNextLogCountPerToken", "platform.tf_logging.log_if", "platform.tf_logging._GetFileAndLine"], "training.Model._set_trainable_state": [], "training.Model.get_updates_for": [], "engine.training_v1.Model._make_execution_function": ["engine.training_v1.Model._make_train_function", "engine.training_v1.Model._make_test_function", "engine.training_v1.Model._make_predict_function"], "engine.training_v1.Model._distribution_standardize_user_data": ["framework.ops.executing_eagerly_outside_functions", "util.nest.flatten", "engine.training_utils_v1.verify_dataset_shuffled", "keras.backend.is_tpu_strategy", "<builtin>.NotImplementedError", "engine.training_utils_v1.validate_dataset_input", "<builtin>.max", "<builtin>.isinstance", "engine.training_utils.list_to_tuple", "keras.backend.get_session"], "engine.training_v1.Model._build_model_with_inputs": ["engine.training_utils_v1.validate_input_types", "<builtin>.sorted", "engine.training_utils_v1.cast_if_floating_dtype", "util.nest.map_structure", "engine.training_utils_v1.is_composite_or_composite_value", "engine.training_utils_v1.has_tensors", "<builtin>.ValueError", "<builtin>.isinstance", "engine.training_v1.Model._set_inputs", "engine.training_utils_v1.extract_tensors_from_dataset", "<builtin>.list"], "engine.training_v1.Model._compile_from_inputs": ["engine.training_v1._is_symbolic_tensor", "engine.training_utils_v1.validate_input_types", "engine.training_utils_v1.cast_if_floating_dtype_and_mismatch", "<builtin>.any", "<builtin>.all", "engine.training_utils_v1.has_tensors", "<builtin>.ValueError", "<builtin>.isinstance", "eager.context.executing_eagerly", "engine.training_v1.Model.compile", "<builtin>.str", "framework.tensor_util.is_tf_type", "<builtin>.list"], "engine.training_v1._is_symbolic_tensor": ["framework.tensor_util.is_tf_type"], "engine.training_v1.Model._standardize_tensors": ["util.nest.flatten", "engine.training_utils_v1.check_array_lengths", "util.nest.assert_same_structure", "<builtin>.isinstance", "<builtin>.zip", "engine.training_utils_v1.prepare_sample_weight_modes", "engine.training_v1._convert_scipy_sparse_tensor", "ops.dataset_ops.get_structure", "<builtin>.ValueError", "engine.training_utils_v1.check_loss_and_target_compatibility", "util.nest.map_structure", "engine.training_utils_v1.standardize_weights", "util.nest.pack_sequence_as", "engine.training_utils_v1.standardize_input_data", "<builtin>.str", "engine.training_utils_v1.standardize_class_weights", "engine.training_utils.handle_partial_sample_weights", "engine.training_utils_v1.standardize_sample_weights", "<builtin>.dict"], "engine.training_v1._convert_scipy_sparse_tensor": ["framework.ops.executing_eagerly_outside_functions", "keras.backend.is_sparse", "framework.sparse_tensor.SparseTensor", "scipy.sparse.issparse", "<builtin>.ValueError", "numpy.concatenate", "numpy.expand_dims"], "engine.training_v1.Model._standardize_tensors._type_spec_from_value": ["framework.type_spec.type_spec_from_value", "utils.tf_utils.is_extension_type", "framework.tensor_spec.TensorSpec", "<builtin>.hasattr"], "engine.training_v1.Model._build_model_with_inputs.create_tensor_spec": ["framework.tensor_spec.TensorSpec"], "engine.training_v1.Model._set_inputs": ["framework.ops.executing_eagerly_outside_functions", "training.Model._set_save_spec", "keras.backend.learning_phase", "engine.training_v1.Model._set_input_attrs", "engine.training_v1.Model._set_output_attrs", "engine.training_v1.Model.__init__"], "engine.training_v1.Model._set_input_attrs": ["engine.training_utils_v1.ModelInputs", "engine.training_utils_v1.is_feature_layer", "keras.backend.is_placeholder", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.isinstance", "training.Model._maybe_cast_inputs", "keras.backend.int_shape", "framework.tensor_util.is_tf_type"], "engine.training_v1.Model._set_output_attrs": ["engine.training_utils_v1.generic_output_names", "util.nest.flatten"], "training.Model._maybe_cast_inputs": [], "keras.backend.is_placeholder": ["<builtin>.hasattr", "keras.backend.is_placeholder", "framework.ops.executing_eagerly_outside_functions", "util.nest.flatten", "keras.backend.any", "utils.tf_utils.is_extension_type"], "engine.training_v1.Model._targets": [], "engine.training_v1.Model._feed_targets": [], "engine.training_v1.Model._feed_output_names": [], "engine.training_v1.Model._feed_output_shapes": [], "engine.training_v1.Model._feed_loss_fns": [], "engine.training_v1.Model._loss_weights_list": [], "engine.training_v1.Model._output_loss_metrics": ["<builtin>.hasattr"], "engine.training_v1.Model.sample_weights": [], "engine.training_v1.Model._sample_weight_modes": [], "engine.training_v1.Model._feed_sample_weights": [], "engine.training_v1.Model._maybe_load_initial_epoch_from_ckpt": ["Model._training_state.maybe_load_initial_epoch_from_ckpt"], "Model._training_state.maybe_load_initial_epoch_from_ckpt": [], "engine.training_v1.Model._trackable_saved_model_saver": ["saved_model.model_serialization.ModelSavedModelSaver"], "engine.training_v1.Model._get_compile_args": ["engine.training_v1.Model._assert_compile_was_called"], "engine.training_v1.Model._compile_was_called": [], "engine.training_v1.DistributedCallbackModel.save_weights": ["engine.training_v1.DistributedCallbackModel.save_weights"], "engine.training_v1.DistributedCallbackModel.save": ["engine.training_v1.Model.get_weights", "engine.training_v1.DistributedCallbackModel.save", "training.Model.set_weights", "training.Model.save"], "training.Model.set_weights": [], "training.Model.save": [], "engine.training_v1.DistributedCallbackModel.load_weights": ["distribute.distributed_training_utils_v1.set_weights", "engine.training_v1.Model.get_weights", "engine.training_v1.DistributedCallbackModel.load_weights", "engine.training_v1.Model.load_weights"], "engine.training_v1.DistributedCallbackModel.__getattr__": ["<builtin>.super", "platform.tf_logging.warning"], "engine.training_v1._TrainingEndpoint.output": [], "engine.training_v1._TrainingEndpoint.output_name": [], "engine.training_v1._TrainingEndpoint.shape": ["keras.backend.int_shape"], "engine.training_v1._TrainingEndpoint.loss_fn": [], "engine.training_v1._TrainingEndpoint.loss_weight": [], "engine.training_v1._TrainingEndpoint.training_target": [], "engine.training_v1._TrainingEndpoint.has_training_target": [], "engine.training_v1._TrainingTarget.__init__": [], "engine.training_v1._TrainingEndpoint.should_skip_target": [], "losses.LABEL_DTYPES_FOR_LOSSES.get": [], "engine.training_v1._TrainingEndpoint.output_loss_metric": [], "engine.training_v1._TrainingEndpoint.sample_weight": [], "engine.training_v1._TrainingEndpoint.sample_weight_mode": [], "engine.training_v1._TrainingEndpoint.should_skip_target_weights": ["engine.training_v1._TrainingEndpoint.should_skip_target"], "engine.training_v1._TrainingEndpoint.has_feedable_training_target": ["engine.training_v1._TrainingEndpoint.should_skip_target"], "engine.training_v1._TrainingEndpoint.loss_name": [], "engine.training_v1._TrainingEndpoint.feed_output_shape": ["<builtin>.isinstance", "keras.backend.image_data_format", "engine.training_v1._TrainingEndpoint.has_feedable_training_target", "<builtin>.getattr"], "engine.training_v1._TrainingEndpoint.sample_weights_mismatch": [], "engine.training_v1._TrainingEndpoint.populate_sample_weight": ["engine.training_v1._TrainingEndpoint.should_skip_target_weights", "ops.array_ops.placeholder_with_default", "framework.constant_op.constant", "<builtin>.ValueError", "eager.context.executing_eagerly", "keras.backend.floatx"], "ops.array_ops.placeholder_with_default": ["ops.gen_array_ops.placeholder_with_default"], "engine.training_v1._TrainingTarget.target": [], "engine.training_v1._TrainingTarget.feedable": [], "engine.training_v1._TrainingTarget.skip_target_weights": [], "utils.layer_utils.filter_empty_layer_containers": ["<builtin>.isinstance", "<builtin>.id", "<builtin>.getattr", "<builtin>.set", "<builtin>.hasattr"], "feature_column.base_feature_layer": [], "feature_column.base_feature_layer._BaseFeaturesLayer.__init__": ["<builtin>.isinstance", "feature_column.base_feature_layer._normalize_feature_columns", "feature_column.feature_column_v2._StateManagerImpl", "<builtin>.super", "<builtin>.ValueError"], "feature_column.base_feature_layer._normalize_feature_columns": ["<builtin>.isinstance", "<builtin>.sorted", "<builtin>.type", "<builtin>.list", "<builtin>.ValueError"], "feature_column.feature_column_v2._StateManagerImpl": [], "feature_column.base_feature_layer._BaseFeaturesLayer.build": ["feature_column.base_feature_layer._sanitize_column_name_for_variable_scope", "<builtin>.super", "ops.variable_scope.variable_scope"], "ops.variable_scope.variable_scope": [], "feature_column.base_feature_layer._sanitize_column_name_for_variable_scope": ["re.compile"], "feature_column.base_feature_layer._BaseFeaturesLayer._output_shape": ["<builtin>.NotImplementedError"], "feature_column.base_feature_layer._BaseFeaturesLayer.compute_output_shape": ["base_layer.Layer._target_shape"], "base_layer.Layer._target_shape": [], "feature_column.base_feature_layer._BaseFeaturesLayer._process_dense_tensor": ["ops.array_ops.reshape", "base_layer.Layer._target_shape", "ops.array_ops.shape"], "feature_column.base_feature_layer._BaseFeaturesLayer._verify_and_concat_tensors": ["feature_column.base_feature_layer._verify_static_batch_size_equality", "ops.array_ops.concat"], "feature_column.base_feature_layer._verify_static_batch_size_equality": ["<builtin>.range", "<builtin>.len", "framework.tensor_shape.dimension_value", "framework.tensor_shape.Dimension", "<builtin>.ValueError"], "feature_column.base_feature_layer._BaseFeaturesLayer.get_config": ["<builtin>.super", "feature_column.serialization.serialize_feature_column", "<builtin>.dict", "utils.generic_utils.serialize_keras_object", "<builtin>.list"], "feature_column.serialization.serialize_feature_column": ["<builtin>.ValueError", "<builtin>.isinstance"], "feature_column.base_feature_layer._BaseFeaturesLayer.from_config": ["utils.generic_utils.deserialize_keras_object", "feature_column.serialization.deserialize_feature_column", "feature_column.base_feature_layer._BaseFeaturesLayer.__init__"], "feature_column.serialization.deserialize_feature_column": ["feature_column.serialization._class_and_config_for_serialized_keras_object", "feature_column.serialization._column_name_with_class_name", "<builtin>.issubclass", "<builtin>.ValueError", "<builtin>.isinstance"], "utils.generic_utils.deserialize_keras_object": ["<builtin>.ValueError", "utils.tf_inspect.isclass", "utils.tf_inspect.getfullargspec", "utils.generic_utils.CustomObjectScope.__init__", "<builtin>.list", "<builtin>.isinstance", "utils.generic_utils._shared_object_loading_scope", "utils.generic_utils.class_and_config_for_serialized_keras_object", "<builtin>.dict", "<builtin>.hasattr", "utils.tf_inspect.isfunction"], "feature_column.base_feature_layer._normalize_feature_columns.<lambda1>": [], "feature_column.dense_features": [], "feature_column.dense_features.DenseFeatures.__init__": ["<builtin>.super"], "feature_column.dense_features.DenseFeatures._is_feature_layer": [], "feature_column.dense_features.DenseFeatures._tracking_metadata": ["<builtin>.super", "json.dumps", "json.loads"], "feature_column.dense_features.DenseFeatures._target_shape": [], "feature_column.dense_features.DenseFeatures.call": ["_BaseFeaturesLayer._feature_columns.get_dense_tensor", "base_feature_layer._BaseFeaturesLayer._verify_and_concat_tensors", "keras.backend.learning_phase", "<builtin>.isinstance", "base_feature_layer._BaseFeaturesLayer._process_dense_tensor", "keras.backend.name_scope", "feature_column.feature_column_v2.FeatureTransformationCache", "<builtin>.ValueError"], "feature_column.feature_column_v2.FeatureTransformationCache": [], "_BaseFeaturesLayer._feature_columns.get_dense_tensor": [], "base_feature_layer._BaseFeaturesLayer._process_dense_tensor": [], "base_feature_layer._BaseFeaturesLayer._verify_and_concat_tensors": [], "feature_column.dense_features_v2": ["utils.tf_contextlib.contextmanager"], "feature_column.dense_features_v2.DenseFeatures.__init__": ["<builtin>.super", "feature_column_v2._StateManagerImpl.__init__"], "feature_column_v2._StateManagerImpl.__init__": [], "feature_column.dense_features_v2.DenseFeatures.build": ["DenseFeatures._feature_columns.create_state", "framework.ops.name_scope_v2", "<builtin>.super"], "DenseFeatures._feature_columns.create_state": [], "feature_column.dense_features_v2._StateManagerImplV2.create_variable": ["_StateManagerImpl._layer._track_trackable", "feature_column.dense_features_v2.no_manual_dependency_tracking_scope", "_StateManagerImpl._layer.add_weight", "<builtin>.ValueError", "<builtin>.isinstance"], "feature_column.dense_features_v2.no_manual_dependency_tracking_scope": ["<builtin>.getattr"], "_StateManagerImpl._layer.add_weight": [], "_StateManagerImpl._layer._track_trackable": [], "feature_column.sequence_feature_column": ["util.tf_export.tf_export"], "feature_column.sequence_feature_column.SequenceFeatures.__init__": ["<builtin>.super"], "feature_column.sequence_feature_column.SequenceFeatures._is_feature_layer": [], "feature_column.sequence_feature_column.SequenceFeatures._target_shape": [], "feature_column.sequence_feature_column.SequenceFeatures.call": ["keras.backend.name_scope", "base_feature_layer._BaseFeaturesLayer._verify_and_concat_tensors", "_BaseFeaturesLayer._feature_columns.get_sequence_dense_tensor", "feature_column.base_feature_layer._verify_static_batch_size_equality", "feature_column.sequence_feature_column._assert_all_equal_and_return", "base_feature_layer._BaseFeaturesLayer._process_dense_tensor", "<builtin>.isinstance", "<builtin>.ValueError", "keras.backend.learning_phase", "feature_column.feature_column_v2.FeatureTransformationCache"], "_BaseFeaturesLayer._feature_columns.get_sequence_dense_tensor": [], "feature_column.sequence_feature_column._assert_all_equal_and_return": ["keras.backend.name_scope", "<builtin>.len", "ops.array_ops.identity", "framework.ops.control_dependencies", "ops.check_ops.assert_equal", "framework.ops.name_scope"], "ops.check_ops.assert_equal": ["eager.context.executing_eagerly", "ops.control_flow_ops.no_op", "ops.check_ops._binary_assert", "framework.ops.name_scope"], "initializers.initializers_v1": ["util.tf_export.keras_export"], "initializers.initializers_v1.RandomNormal.__init__": ["<builtin>.super"], "initializers.initializers_v1.RandomUniform.__init__": ["<builtin>.super"], "initializers.initializers_v1.TruncatedNormal.__init__": ["<builtin>.super"], "initializers.initializers_v1.LecunNormal.__init__": ["<builtin>.super"], "initializers.initializers_v1.LecunNormal.get_config": [], "initializers.initializers_v1.LecunUniform.__init__": ["<builtin>.super"], "initializers.initializers_v1.LecunUniform.get_config": [], "initializers.initializers_v1.HeNormal.__init__": ["<builtin>.super"], "initializers.initializers_v1.HeNormal.get_config": [], "initializers.initializers_v1.HeUniform.__init__": ["<builtin>.super"], "initializers.initializers_v1.HeUniform.get_config": [], "initializers.initializers_v2": [], "initializers.initializers_v2.Initializer.__call__": [], "initializers.initializers_v2.Initializer.get_config": [], "initializers.initializers_v2.Initializer.from_config": [], "initializers.initializers_v2.Zeros.__call__": ["initializers.initializers_v2._validate_kwargs", "<builtin>.ValueError", "ops.array_ops.zeros", "initializers.initializers_v2._get_dtype"], "initializers.initializers_v2._validate_kwargs": ["<builtin>.ValueError", "<builtin>.TypeError"], "initializers.initializers_v2._get_dtype": ["framework.dtypes.as_dtype", "keras.backend.floatx"], "initializers.initializers_v2.Ones.__call__": ["initializers.initializers_v2._validate_kwargs", "<builtin>.ValueError", "ops.array_ops.ones", "initializers.initializers_v2._get_dtype"], "initializers.initializers_v2.Constant.__init__": [], "initializers.initializers_v2.Constant.__call__": ["framework.constant_op.constant", "initializers.initializers_v2._get_dtype"], "initializers.initializers_v2.Constant.get_config": [], "initializers.initializers_v2.RandomUniform.__init__": ["initializers.initializers_v2._RandomGenerator.__init__"], "initializers.initializers_v2._RandomGenerator.__init__": ["<builtin>.super"], "initializers.initializers_v2.RandomUniform.__call__": ["initializers.initializers_v2._validate_kwargs", "<builtin>.ValueError", "initializers.initializers_v2._RandomGenerator.random_uniform", "initializers.initializers_v2._get_dtype"], "initializers.initializers_v2._RandomGenerator.random_uniform": ["ops.stateless_random_ops.stateless_random_uniform", "ops.random_ops.random_uniform"], "initializers.initializers_v2.RandomUniform.get_config": [], "initializers.initializers_v2.RandomNormal.__init__": ["initializers.initializers_v2._RandomGenerator.__init__"], "initializers.initializers_v2.RandomNormal.__call__": ["initializers.initializers_v2._validate_kwargs", "initializers.initializers_v2._assert_float_dtype", "initializers.initializers_v2._RandomGenerator.random_normal", "initializers.initializers_v2._get_dtype"], "initializers.initializers_v2._assert_float_dtype": ["framework.dtypes.as_dtype", "<builtin>.ValueError"], "initializers.initializers_v2._RandomGenerator.random_normal": ["ops.stateless_random_ops.stateless_random_normal", "ops.random_ops.random_normal"], "initializers.initializers_v2.RandomNormal.get_config": [], "initializers.initializers_v2.TruncatedNormal.__init__": ["initializers.initializers_v2._RandomGenerator.__init__"], "initializers.initializers_v2.TruncatedNormal.__call__": ["initializers.initializers_v2._validate_kwargs", "initializers.initializers_v2._assert_float_dtype", "initializers.initializers_v2._RandomGenerator.truncated_normal", "initializers.initializers_v2._get_dtype"], "initializers.initializers_v2._RandomGenerator.truncated_normal": ["ops.random_ops.truncated_normal", "ops.stateless_random_ops.stateless_truncated_normal"], "initializers.initializers_v2.TruncatedNormal.get_config": [], "initializers.initializers_v2.VarianceScaling.__init__": ["initializers.initializers_v2._RandomGenerator.__init__", "<builtin>.ValueError"], "initializers.initializers_v2.VarianceScaling.__call__": ["initializers.initializers_v2._compute_fans", "initializers.initializers_v2._get_dtype", "math.sqrt", "<builtin>.max", "initializers.initializers_v2._RandomGenerator.random_normal", "initializers.initializers_v2._validate_kwargs", "initializers.initializers_v2._RandomGenerator.truncated_normal", "initializers.initializers_v2._assert_float_dtype", "initializers.initializers_v2._RandomGenerator.random_uniform"], "initializers.initializers_v2._compute_fans": ["<builtin>.len", "<builtin>.int"], "math.sqrt": [], "initializers.initializers_v2.VarianceScaling.get_config": [], "initializers.initializers_v2.Orthogonal.__init__": ["initializers.initializers_v2._RandomGenerator.__init__"], "initializers.initializers_v2.Orthogonal.__call__": ["ops.array_ops.tensor_diag_part", "initializers.initializers_v2._get_dtype", "<builtin>.len", "<builtin>.max", "initializers.initializers_v2._RandomGenerator.random_normal", "ops.math_ops.sign", "ops.gen_linalg_ops.qr", "initializers.initializers_v2._validate_kwargs", "initializers.initializers_v2._assert_float_dtype", "ops.array_ops.reshape", "<builtin>.ValueError", "<builtin>.min", "ops.array_ops.matrix_transpose"], "ops.gen_linalg_ops.qr": [], "ops.array_ops.tensor_diag_part": ["ops.gen_array_ops.diag_part"], "ops.math_ops.sign": ["ops.gen_math_ops.complex_abs", "ops.gen_math_ops.sign", "ops.math_ops.cast", "ops.gen_math_ops.div_no_nan", "framework.ops.convert_to_tensor"], "ops.array_ops.matrix_transpose": ["ops.array_ops.concat", "<builtin>.ValueError", "framework.ops.convert_to_tensor", "ops.array_ops.transpose", "<builtin>.range", "<builtin>.list", "ops.array_ops.rank", "framework.ops.name_scope", "ops.gen_math_ops._range"], "initializers.initializers_v2.Orthogonal.get_config": [], "initializers.initializers_v2.Identity.__init__": [], "initializers.initializers_v2.Identity.__call__": ["initializers.initializers_v2._get_dtype", "<builtin>.len", "initializers.initializers_v2._validate_kwargs", "initializers.initializers_v2._assert_float_dtype", "ops.linalg_ops.eye", "<builtin>.ValueError"], "ops.linalg_ops.eye": ["ops.linalg_ops_impl.eye"], "initializers.initializers_v2.Identity.get_config": [], "initializers.initializers_v2.GlorotUniform.__init__": ["<builtin>.super"], "initializers.initializers_v2.GlorotUniform.get_config": [], "initializers.initializers_v2.GlorotNormal.__init__": ["<builtin>.super"], "initializers.initializers_v2.GlorotNormal.get_config": [], "initializers.initializers_v2.LecunNormal.__init__": ["<builtin>.super"], "initializers.initializers_v2.LecunNormal.get_config": [], "initializers.initializers_v2.LecunUniform.__init__": ["<builtin>.super"], "initializers.initializers_v2.LecunUniform.get_config": [], "initializers.initializers_v2.HeNormal.__init__": ["<builtin>.super"], "initializers.initializers_v2.HeNormal.get_config": [], "initializers.initializers_v2.HeUniform.__init__": ["<builtin>.super"], "initializers.initializers_v2.HeUniform.get_config": [], "ops.stateless_random_ops.stateless_random_normal": ["ops.gen_stateless_random_ops_v2.stateless_random_normal_v2", "ops.stateless_random_ops._get_key_counter_alg", "ops.math_ops.add", "framework.tensor_util.shape_tensor", "framework.ops.name_scope", "framework.tensor_util.maybe_set_static_shape", "framework.ops.convert_to_tensor"], "ops.stateless_random_ops.stateless_random_uniform": ["ops.stateless_random_ops._get_key_counter_alg", "framework.dtypes.as_dtype", "ops.gen_stateless_random_ops_v2.stateless_random_uniform_int_v2", "ops.gen_stateless_random_ops_v2.stateless_random_uniform_v2", "ops.gen_stateless_random_ops_v2.stateless_random_uniform_full_int_v2", "ops.math_ops.add", "framework.tensor_util.shape_tensor", "framework.ops.name_scope", "<builtin>.ValueError", "framework.tensor_util.maybe_set_static_shape", "framework.ops.convert_to_tensor"], "ops.random_ops.truncated_normal": ["framework.ops.convert_to_tensor", "ops.gen_random_ops.truncated_normal", "framework.ops.name_scope", "ops.math_ops.add", "framework.tensor_util.shape_tensor", "framework.random_seed.get_seed", "framework.tensor_util.maybe_set_static_shape"], "ops.stateless_random_ops.stateless_truncated_normal": ["ops.stateless_random_ops._get_key_counter_alg", "ops.math_ops.add", "framework.tensor_util.shape_tensor", "framework.ops.name_scope", "framework.tensor_util.maybe_set_static_shape", "ops.gen_stateless_random_ops_v2.stateless_truncated_normal_v2", "framework.ops.convert_to_tensor"], "layers.advanced_activations": [], "layers.advanced_activations.get_globals": ["<builtin>.globals"], "layers.advanced_activations.LeakyReLU.__init__": ["<builtin>.ValueError", "<builtin>.super", "keras.backend.cast_to_floatx"], "keras.backend.cast_to_floatx": ["<builtin>.isinstance", "numpy.asarray", "keras.backend_config.floatx", "ops.math_ops.cast"], "layers.advanced_activations.LeakyReLU.call": ["keras.backend.relu"], "keras.backend.relu": ["keras.backend._constant_to_tensor", "keras.backend._to_tensor", "ops.math_ops.greater", "ops.nn.relu", "ops.nn.leaky_relu", "keras.backend_config.floatx", "ops.math_ops.cast", "ops.nn.relu6", "ops.clip_ops.clip_by_value", "<builtin>.getattr"], "layers.advanced_activations.LeakyReLU.get_config": ["<builtin>.dict", "<builtin>.float", "<builtin>.list", "<builtin>.super"], "layers.advanced_activations.LeakyReLU": ["utils.tf_utils.shape_type_conversion"], "utils.tf_utils.shape_type_conversion": [], "layers.advanced_activations.LeakyReLU.compute_output_shape": [], "layers.advanced_activations.PReLU.__init__": ["keras.regularizers.get", "<builtin>.super", "<builtin>.isinstance", "keras.initializers.get", "<builtin>.list", "keras.constraints.get"], "layers.advanced_activations.PReLU": ["utils.tf_utils.shape_type_conversion"], "layers.advanced_activations.PReLU.build": ["base_layer.Layer.add_weight", "engine.input_spec.InputSpec", "<builtin>.len", "<builtin>.range", "<builtin>.list"], "engine.input_spec.InputSpec": [], "layers.advanced_activations.PReLU.call": ["keras.backend.relu"], "layers.advanced_activations.PReLU.get_config": ["<builtin>.super", "keras.initializers.serialize", "keras.regularizers.serialize", "keras.constraints.serialize", "<builtin>.dict", "<builtin>.list"], "keras.initializers.serialize": [], "keras.regularizers.serialize": ["utils.generic_utils.serialize_keras_object"], "keras.constraints.serialize": ["utils.generic_utils.serialize_keras_object"], "layers.advanced_activations.PReLU.compute_output_shape": [], "layers.advanced_activations.ELU.__init__": ["<builtin>.ValueError", "<builtin>.super", "keras.backend.cast_to_floatx"], "layers.advanced_activations.ELU.call": ["keras.backend.elu"], "keras.backend.elu": ["ops.nn.elu", "ops.array_ops.where_v2"], "layers.advanced_activations.ELU.get_config": ["<builtin>.dict", "<builtin>.float", "<builtin>.list", "<builtin>.super"], "layers.advanced_activations.ELU": ["utils.tf_utils.shape_type_conversion"], "layers.advanced_activations.ELU.compute_output_shape": [], "layers.advanced_activations.ThresholdedReLU.__init__": ["<builtin>.ValueError", "<builtin>.super", "keras.backend.cast_to_floatx"], "layers.advanced_activations.ThresholdedReLU.call": ["ops.math_ops.greater", "ops.math_ops.cast"], "layers.advanced_activations.ThresholdedReLU.get_config": ["<builtin>.dict", "<builtin>.float", "<builtin>.list", "<builtin>.super"], "layers.advanced_activations.ThresholdedReLU": ["utils.tf_utils.shape_type_conversion"], "layers.advanced_activations.ThresholdedReLU.compute_output_shape": [], "layers.advanced_activations._large_compatible_negative": [], "layers.advanced_activations.Softmax.__init__": ["<builtin>.super"], "layers.advanced_activations.Softmax.call": ["ops.math_ops.reduce_logsumexp", "ops.math_ops.exp", "ops.math_ops.cast", "<builtin>.len", "<builtin>.isinstance", "keras.backend.softmax", "layers.advanced_activations._large_compatible_negative"], "ops.math_ops.reduce_logsumexp": ["ops.gen_math_ops.is_finite", "ops.gen_array_ops.shape", "ops.math_ops._may_reduce_to_scalar", "ops.math_ops.reduce_max_with_dims", "ops.gen_math_ops.log", "ops.gen_array_ops.zeros_like", "ops.gen_math_ops.select", "ops.gen_math_ops.sub", "ops.math_ops.reduce_sum_with_dims", "ops.math_ops._ReductionDims", "ops.array_ops.stop_gradient", "ops.gen_math_ops.exp", "ops.math_ops._add_dispatch", "framework.ops.name_scope", "ops.array_ops.reshape", "framework.ops.convert_to_tensor"], "ops.math_ops.exp": ["ops.gen_math_ops.exp"], "keras.backend.softmax": ["ops.nn.softmax"], "layers.advanced_activations.Softmax.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super"], "layers.advanced_activations.Softmax": ["utils.tf_utils.shape_type_conversion"], "layers.advanced_activations.Softmax.compute_output_shape": [], "layers.advanced_activations.ReLU.__init__": ["<builtin>.ValueError", "<builtin>.super", "keras.backend.cast_to_floatx"], "layers.advanced_activations.ReLU.call": ["keras.backend.relu"], "layers.advanced_activations.ReLU.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super"], "layers.advanced_activations.ReLU": ["utils.tf_utils.shape_type_conversion"], "layers.advanced_activations.ReLU.compute_output_shape": [], "layers.convolutional": [], "layers.convolutional.Conv.__init__": ["<builtin>.ValueError", "keras.regularizers.get", "<builtin>.int", "utils.conv_utils.normalize_tuple", "utils.conv_utils.normalize_padding", "utils.conv_utils.normalize_data_format", "engine.input_spec.InputSpec", "utils.conv_utils.convert_data_format", "<builtin>.super", "layers.convolutional.Conv._validate_init", "keras.activations.get", "keras.constraints.get", "keras.initializers.get", "<builtin>.isinstance"], "utils.conv_utils.normalize_tuple": ["<builtin>.tuple", "<builtin>.isinstance", "<builtin>.type", "<builtin>.len", "<builtin>.ValueError", "<builtin>.int", "<builtin>.str"], "utils.conv_utils.normalize_padding": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.str"], "utils.conv_utils.normalize_data_format": ["<builtin>.ValueError", "keras.backend.image_data_format", "<builtin>.str"], "layers.convolutional.Conv._validate_init": ["<builtin>.ValueError", "<builtin>.all", "<builtin>.isinstance"], "utils.conv_utils.convert_data_format": ["<builtin>.ValueError"], "layers.convolutional.Conv.build": ["<builtin>.ValueError", "engine.input_spec.InputSpec", "<builtin>.list", "framework.tensor_shape.TensorShape", "layers.convolutional.Conv._get_input_channel", "layers.convolutional.Conv._get_channel_axis", "functools.partial", "base_layer.Layer.add_weight", "<builtin>.isinstance"], "layers.convolutional.Conv._get_input_channel": ["<builtin>.ValueError", "layers.convolutional.Conv._get_channel_axis", "<builtin>.int"], "layers.convolutional.Conv._get_channel_axis": [], "layers.convolutional.Conv.call": ["eager.context.executing_eagerly", "ops.array_ops.pad", "ops.array_ops.reshape", "layers.convolutional.Conv.compute_output_shape", "ops.nn.bias_add", "utils.conv_utils.squeeze_batch_dims", "layers.convolutional.Conv._compute_causal_padding"], "layers.convolutional.Conv._compute_causal_padding": ["<builtin>.len", "<builtin>.getattr"], "layers.convolutional.Conv.call._apply_fn": ["ops.nn.bias_add"], "ops.nn.bias_add": [], "utils.conv_utils.squeeze_batch_dims": ["ops.array_ops.concat", "<builtin>.isinstance", "ops.array_ops.reshape", "ops.array_ops.shape", "framework.ops.name_scope_v2"], "layers.convolutional.Conv.compute_output_shape": ["layers.convolutional.Conv._spatial_output_shape", "framework.tensor_shape.TensorShape", "<builtin>.len"], "layers.convolutional.Conv._spatial_output_shape": ["utils.conv_utils.conv_output_length", "<builtin>.enumerate"], "utils.conv_utils.conv_output_length": [], "layers.convolutional.Conv._recreate_conv_op": [], "layers.convolutional.Conv.get_config": ["keras.activations.serialize", "<builtin>.list", "keras.initializers.serialize", "<builtin>.super", "keras.regularizers.serialize", "keras.constraints.serialize", "<builtin>.dict"], "keras.activations.serialize": ["<builtin>.hasattr", "utils.generic_utils.serialize_keras_object"], "layers.convolutional.Conv._get_padding_op": ["<builtin>.isinstance"], "layers.convolutional.Conv1D.__init__": ["keras.regularizers.get", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "keras.initializers.get"], "layers.convolutional.Conv2D.__init__": ["keras.regularizers.get", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "keras.initializers.get"], "layers.convolutional.Conv3D.__init__": ["keras.regularizers.get", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "keras.initializers.get"], "layers.convolutional.Conv1DTranspose.__init__": ["utils.conv_utils.normalize_tuple", "keras.regularizers.get", "<builtin>.ValueError", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "<builtin>.str", "keras.initializers.get", "<builtin>.zip"], "layers.convolutional.Conv1DTranspose.build": ["<builtin>.ValueError", "<builtin>.int", "engine.input_spec.InputSpec", "framework.tensor_shape.TensorShape", "layers.convolutional.Conv._get_channel_axis", "<builtin>.str", "<builtin>.len", "base_layer.Layer.add_weight"], "layers.convolutional.Conv1DTranspose.call": ["eager.context.executing_eagerly", "utils.conv_utils.convert_data_format", "layers.convolutional.Conv1DTranspose.compute_output_shape", "ops.nn_ops.conv1d_transpose", "ops.array_ops.stack", "ops.nn.bias_add", "utils.conv_utils.deconv_output_length", "ops.array_ops.shape"], "utils.conv_utils.deconv_output_length": ["<builtin>.max"], "ops.array_ops.stack": ["<builtin>.ValueError", "ops.gen_array_ops.pack", "<builtin>.len", "framework.ops.convert_to_tensor"], "ops.nn_ops.conv1d_transpose": ["<builtin>.isinstance", "<builtin>.ValueError", "ops.array_ops.concat", "ops.array_ops.expand_dims", "framework.ops.name_scope", "ops.nn_ops._get_sequence", "<builtin>.list", "ops.array_ops.squeeze", "ops.gen_nn_ops.conv2d_backprop_input"], "layers.convolutional.Conv1DTranspose.compute_output_shape": ["framework.tensor_shape.TensorShape", "<builtin>.list", "utils.conv_utils.deconv_output_length"], "layers.convolutional.Conv1DTranspose.get_config": ["<builtin>.super"], "layers.convolutional.Conv2DTranspose.__init__": ["utils.conv_utils.normalize_tuple", "keras.regularizers.get", "<builtin>.ValueError", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "<builtin>.str", "keras.initializers.get", "<builtin>.zip"], "layers.convolutional.Conv2DTranspose.build": ["<builtin>.ValueError", "<builtin>.int", "engine.input_spec.InputSpec", "framework.tensor_shape.TensorShape", "layers.convolutional.Conv._get_channel_axis", "<builtin>.str", "<builtin>.len", "base_layer.Layer.add_weight"], "layers.convolutional.Conv2DTranspose.call": ["eager.context.executing_eagerly", "utils.conv_utils.convert_data_format", "keras.backend.conv2d_transpose", "ops.array_ops.stack", "ops.nn.bias_add", "utils.conv_utils.deconv_output_length", "layers.convolutional.Conv2DTranspose.compute_output_shape", "ops.array_ops.shape"], "keras.backend.conv2d_transpose": ["<builtin>.str", "ops.nn.atrous_conv2d_transpose", "<builtin>.ValueError", "keras.backend_config.image_data_format", "ops.array_ops.stack", "ops.nn.conv2d_transpose", "<builtin>.isinstance", "keras.backend._preprocess_conv2d_input", "<builtin>.tuple", "ops.array_ops.transpose", "keras.backend.shape", "<builtin>.list", "keras.backend._preprocess_padding"], "layers.convolutional.Conv2DTranspose.compute_output_shape": ["framework.tensor_shape.TensorShape", "<builtin>.list", "utils.conv_utils.deconv_output_length"], "layers.convolutional.Conv2DTranspose.get_config": ["<builtin>.super"], "layers.convolutional.Conv3DTranspose.__init__": ["utils.conv_utils.normalize_tuple", "keras.regularizers.get", "<builtin>.ValueError", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "<builtin>.str", "keras.initializers.get", "<builtin>.zip"], "layers.convolutional.Conv3DTranspose.build": ["<builtin>.ValueError", "<builtin>.int", "engine.input_spec.InputSpec", "framework.tensor_shape.TensorShape", "layers.convolutional.Conv._get_channel_axis", "<builtin>.str", "<builtin>.len", "base_layer.Layer.add_weight"], "layers.convolutional.Conv3DTranspose.call": ["eager.context.executing_eagerly", "utils.conv_utils.convert_data_format", "layers.convolutional.Conv3DTranspose.compute_output_shape", "ops.nn.conv3d_transpose", "ops.array_ops.stack", "ops.nn.bias_add", "utils.conv_utils.deconv_output_length", "ops.array_ops.shape"], "ops.nn.conv3d_transpose": [], "layers.convolutional.Conv3DTranspose.compute_output_shape": ["framework.tensor_shape.TensorShape", "<builtin>.list", "utils.conv_utils.deconv_output_length"], "layers.convolutional.Conv3DTranspose.get_config": ["<builtin>.super"], "layers.convolutional.SeparableConv.__init__": ["keras.regularizers.get", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "keras.initializers.get"], "layers.convolutional.SeparableConv.build": ["<builtin>.ValueError", "<builtin>.int", "engine.input_spec.InputSpec", "framework.tensor_shape.TensorShape", "layers.convolutional.Conv._get_channel_axis", "base_layer.Layer.add_weight"], "layers.convolutional.SeparableConv.call": [], "layers.convolutional.SeparableConv.get_config": ["keras.activations.serialize", "<builtin>.list", "keras.initializers.serialize", "<builtin>.super", "keras.regularizers.serialize", "keras.constraints.serialize", "<builtin>.dict"], "layers.convolutional.SeparableConv1D.__init__": ["keras.regularizers.get", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "keras.initializers.get"], "layers.convolutional.SeparableConv1D.call": ["ops.nn.separable_conv2d", "utils.conv_utils.convert_data_format", "ops.array_ops.pad", "ops.array_ops.expand_dims", "ops.nn.bias_add", "ops.array_ops.squeeze", "layers.convolutional.Conv._compute_causal_padding"], "ops.nn.separable_conv2d": [], "layers.convolutional.SeparableConv2D.__init__": ["keras.regularizers.get", "<builtin>.super", "keras.activations.get", "keras.constraints.get", "keras.initializers.get"], "layers.convolutional.SeparableConv2D.call": ["ops.nn.separable_conv2d", "utils.conv_utils.convert_data_format", "ops.nn.bias_add"], "layers.convolutional.DepthwiseConv2D.__init__": ["keras.constraints.get", "<builtin>.super", "keras.regularizers.get", "keras.initializers.get"], "layers.convolutional.DepthwiseConv2D.build": ["<builtin>.ValueError", "<builtin>.int", "engine.input_spec.InputSpec", "framework.tensor_shape.TensorShape", "layers.convolutional.Conv._get_channel_axis", "<builtin>.str", "<builtin>.len", "base_layer.Layer.add_weight"], "layers.convolutional.DepthwiseConv2D.call": ["keras.backend.depthwise_conv2d", "keras.backend.bias_add"], "keras.backend.depthwise_conv2d": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "keras.backend._preprocess_conv2d_input", "ops.nn.depthwise_conv2d", "ops.array_ops.transpose", "keras.backend._preprocess_padding"], "layers.convolutional.DepthwiseConv2D": ["utils.tf_utils.shape_type_conversion"], "layers.convolutional.DepthwiseConv2D.compute_output_shape": ["utils.conv_utils.conv_output_length"], "layers.convolutional.DepthwiseConv2D.get_config": ["keras.constraints.serialize", "<builtin>.super", "keras.regularizers.serialize", "keras.initializers.serialize"], "layers.convolutional.UpSampling1D.__init__": ["engine.input_spec.InputSpec", "<builtin>.super", "<builtin>.int"], "layers.convolutional.UpSampling1D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.UpSampling1D.call": ["keras.backend.repeat_elements"], "keras.backend.repeat_elements": ["keras.backend.concatenate", "ops.array_ops.shape", "ops.array_ops.reshape", "<builtin>.range", "<builtin>.tuple", "numpy.ones", "ops.array_ops.expand_dims", "ops.array_ops.split", "ops.array_ops.tile", "numpy.delete", "<builtin>.len", "ops.array_ops.constant"], "layers.convolutional.UpSampling1D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional.UpSampling2D.__init__": ["engine.input_spec.InputSpec", "<builtin>.ValueError", "utils.conv_utils.normalize_tuple", "utils.conv_utils.normalize_data_format", "<builtin>.super"], "layers.convolutional.UpSampling2D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.UpSampling2D.call": ["keras.backend.resize_images"], "keras.backend.resize_images": ["numpy.array", "<builtin>.ValueError", "ops.image_ops.resize_images_v2", "ops.array_ops.shape_v2", "framework.constant_op.constant", "keras.backend.permute_dimensions"], "layers.convolutional.UpSampling2D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional.UpSampling3D.__init__": ["engine.input_spec.InputSpec", "utils.conv_utils.normalize_tuple", "utils.conv_utils.normalize_data_format", "<builtin>.super"], "layers.convolutional.UpSampling3D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.UpSampling3D.call": ["keras.backend.resize_volumes"], "keras.backend.resize_volumes": ["<builtin>.str", "keras.backend.repeat_elements", "<builtin>.ValueError"], "layers.convolutional.UpSampling3D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional.ZeroPadding1D.__init__": ["engine.input_spec.InputSpec", "<builtin>.super", "utils.conv_utils.normalize_tuple"], "layers.convolutional.ZeroPadding1D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.ZeroPadding1D.call": ["keras.backend.temporal_padding"], "keras.backend.temporal_padding": ["ops.array_ops.pad", "<builtin>.len"], "layers.convolutional.ZeroPadding1D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional.ZeroPadding2D.__init__": ["<builtin>.ValueError", "utils.conv_utils.normalize_tuple", "engine.input_spec.InputSpec", "utils.conv_utils.normalize_data_format", "<builtin>.super", "<builtin>.str", "<builtin>.len", "<builtin>.isinstance", "<builtin>.hasattr"], "layers.convolutional.ZeroPadding2D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.ZeroPadding2D.call": ["keras.backend.spatial_2d_padding"], "keras.backend.spatial_2d_padding": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "ops.array_ops.pad", "<builtin>.list", "<builtin>.len"], "layers.convolutional.ZeroPadding2D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional.ZeroPadding3D.__init__": ["<builtin>.ValueError", "utils.conv_utils.normalize_tuple", "engine.input_spec.InputSpec", "utils.conv_utils.normalize_data_format", "<builtin>.super", "<builtin>.str", "<builtin>.len", "<builtin>.isinstance", "<builtin>.hasattr"], "layers.convolutional.ZeroPadding3D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.ZeroPadding3D.call": ["keras.backend.spatial_3d_padding"], "keras.backend.spatial_3d_padding": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "ops.array_ops.pad", "<builtin>.len"], "layers.convolutional.ZeroPadding3D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional.Cropping1D.__init__": ["engine.input_spec.InputSpec", "<builtin>.super", "utils.conv_utils.normalize_tuple"], "layers.convolutional.Cropping1D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.Cropping1D.call": [], "layers.convolutional.Cropping1D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional.Cropping2D.__init__": ["<builtin>.ValueError", "utils.conv_utils.normalize_tuple", "engine.input_spec.InputSpec", "utils.conv_utils.normalize_data_format", "<builtin>.super", "<builtin>.str", "<builtin>.len", "<builtin>.isinstance", "<builtin>.hasattr"], "layers.convolutional.Cropping2D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.Cropping2D.call": [], "layers.convolutional.Cropping2D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional.Cropping3D.__init__": ["<builtin>.ValueError", "utils.conv_utils.normalize_tuple", "engine.input_spec.InputSpec", "utils.conv_utils.normalize_data_format", "<builtin>.super", "<builtin>.str", "<builtin>.len", "<builtin>.isinstance", "<builtin>.hasattr"], "layers.convolutional.Cropping3D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.convolutional.Cropping3D.call": [], "layers.convolutional.Cropping3D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.convolutional_recurrent": [], "layers.convolutional_recurrent.ConvRNN2D.__init__": ["<builtin>.TypeError", "<builtin>.isinstance", "engine.input_spec.InputSpec", "<builtin>.super"], "layers.convolutional_recurrent.ConvRNN2D": ["utils.tf_utils.shape_type_conversion"], "layers.convolutional_recurrent.ConvRNN2D.compute_output_shape": ["<builtin>.range", "utils.conv_utils.conv_output_length", "<builtin>.isinstance"], "layers.convolutional_recurrent.ConvRNN2D.build": ["RNN.cell.build", "<builtin>.ValueError", "layers.convolutional_recurrent.ConvRNN2D.reset_states", "<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.list", "engine.input_spec.InputSpec"], "RNN.cell.build": [], "layers.convolutional_recurrent.ConvRNN2D.reset_states": ["<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.str", "layers.convolutional_recurrent.ConvRNN2D.reset_states.get_tuple_shape", "numpy.zeros", "keras.backend.set_value", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.AttributeError", "<builtin>.hasattr", "layers.convolutional_recurrent.ConvRNN2D.compute_output_shape", "keras.backend.zeros", "<builtin>.len"], "layers.convolutional_recurrent.ConvRNN2D.get_initial_state": ["ops.array_ops.zeros", "<builtin>.tuple", "keras.backend.sum", "RNN.cell.input_conv", "<builtin>.hasattr", "<builtin>.list", "keras.backend.zeros_like"], "keras.backend.zeros_like": ["ops.array_ops.zeros_like"], "keras.backend.sum": ["ops.math_ops.reduce_sum"], "RNN.cell.input_conv": [], "layers.convolutional_recurrent.ConvRNN2D.call": ["keras.backend.update", "recurrent.RNN._process_inputs", "<builtin>.ValueError", "utils.generic_utils.has_arg", "keras.backend.int_shape", "<builtin>.isinstance", "<builtin>.zip", "recurrent.RNN.add_update", "<builtin>.list", "keras.backend.rnn"], "recurrent.RNN._process_inputs": [], "utils.generic_utils.has_arg": ["utils.tf_inspect.getfullargspec"], "layers.convolutional_recurrent.ConvRNN2D.call.step": ["RNN.cell.call"], "RNN.cell.call": [], "keras.backend.rnn": ["<builtin>.enumerate", "framework.ops.get_default_graph", "util.nest.flatten", "ops.array_ops.shape", "eager.context.executing_eagerly", "framework.constant_op.constant", "<builtin>.len", "keras.backend.reverse", "<builtin>.ValueError", "ops.control_flow_ops.while_loop", "<builtin>.zip", "ops.array_ops.unstack", "util.nest.is_nested", "keras.backend.rnn._expand_mask", "keras.backend.rnn._process_single_input_t", "keras.backend.rnn._get_input_tensor", "ops.math_ops.reduce_max", "ops.array_ops.zeros_like", "util.nest.pack_sequence_as", "ops.math_ops.subtract", "util.nest.map_structure", "keras.backend.expand_dims", "ops.array_ops.stack", "utils.control_flow_util.GraphOrParentsInXlaContext", "<builtin>.range", "<builtin>.isinstance", "keras.backend.zeros_like", "<builtin>.tuple", "ops.array_ops.where_v2", "keras.backend.rnn.swap_batch_timestep", "ops.math_ops.cast", "ops.tensor_array_ops.TensorArray"], "keras.backend.update": ["ops.state_ops.assign"], "recurrent.RNN.add_update": [], "layers.convolutional_recurrent.ConvRNN2D.reset_states.get_tuple_shape": ["<builtin>.list", "<builtin>.tuple"], "keras.backend.zeros": ["framework.dtypes.as_dtype", "framework.ops.init_scope", "keras.backend_config.floatx", "ops.array_ops.zeros", "keras.backend.all", "keras.backend.variable"], "layers.convolutional_recurrent.ConvLSTM2DCell.__init__": ["<builtin>.super", "utils.conv_utils.normalize_data_format", "keras.initializers.get", "keras.regularizers.get", "keras.activations.get", "<builtin>.max", "keras.constraints.get", "utils.conv_utils.normalize_tuple", "<builtin>.min", "utils.conv_utils.normalize_padding"], "layers.convolutional_recurrent.ConvLSTM2DCell.build": ["<builtin>.ValueError", "recurrent.DropoutRNNCellMixin.add_weight"], "recurrent.DropoutRNNCellMixin.add_weight": [], "layers.convolutional_recurrent.ConvLSTM2DCell.build.bias_initializer": ["keras.backend.concatenate", "keras.initializers.get"], "layers.convolutional_recurrent.ConvLSTM2DCell.call": ["recurrent.DropoutRNNCellMixin.get_recurrent_dropout_mask_for_cell", "layers.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "recurrent.DropoutRNNCellMixin.get_dropout_mask_for_cell", "layers.convolutional_recurrent.ConvLSTM2DCell.input_conv", "ops.array_ops.split"], "recurrent.DropoutRNNCellMixin.get_dropout_mask_for_cell": [], "recurrent.DropoutRNNCellMixin.get_recurrent_dropout_mask_for_cell": [], "layers.convolutional_recurrent.ConvLSTM2DCell.input_conv": ["keras.backend.bias_add", "keras.backend.conv2d"], "layers.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv": ["keras.backend.conv2d"], "keras.backend.conv2d": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "keras.backend._preprocess_conv2d_input", "ops.nn.convolution", "ops.array_ops.transpose", "keras.backend._preprocess_padding"], "layers.convolutional_recurrent.ConvLSTM2DCell.get_config": ["keras.constraints.serialize", "<builtin>.super", "<builtin>.dict", "keras.activations.serialize", "keras.regularizers.serialize", "<builtin>.list", "keras.initializers.serialize"], "layers.convolutional_recurrent.ConvLSTM2D.__init__": ["layers.convolutional_recurrent.ConvLSTM2DCell.__init__", "keras.regularizers.get", "<builtin>.super"], "layers.convolutional_recurrent.ConvLSTM2D.call": ["<builtin>.super"], "layers.convolutional_recurrent.ConvLSTM2D.filters": [], "layers.convolutional_recurrent.ConvLSTM2D.kernel_size": [], "layers.convolutional_recurrent.ConvLSTM2D.strides": [], "layers.convolutional_recurrent.ConvLSTM2D.padding": [], "layers.convolutional_recurrent.ConvLSTM2D.data_format": [], "layers.convolutional_recurrent.ConvLSTM2D.dilation_rate": [], "layers.convolutional_recurrent.ConvLSTM2D.activation": [], "layers.convolutional_recurrent.ConvLSTM2D.recurrent_activation": [], "layers.convolutional_recurrent.ConvLSTM2D.use_bias": [], "layers.convolutional_recurrent.ConvLSTM2D.kernel_initializer": [], "layers.convolutional_recurrent.ConvLSTM2D.recurrent_initializer": [], "layers.convolutional_recurrent.ConvLSTM2D.bias_initializer": [], "layers.convolutional_recurrent.ConvLSTM2D.unit_forget_bias": [], "layers.convolutional_recurrent.ConvLSTM2D.kernel_regularizer": [], "layers.convolutional_recurrent.ConvLSTM2D.recurrent_regularizer": [], "layers.convolutional_recurrent.ConvLSTM2D.bias_regularizer": [], "layers.convolutional_recurrent.ConvLSTM2D.kernel_constraint": [], "layers.convolutional_recurrent.ConvLSTM2D.recurrent_constraint": [], "layers.convolutional_recurrent.ConvLSTM2D.bias_constraint": [], "layers.convolutional_recurrent.ConvLSTM2D.dropout": [], "layers.convolutional_recurrent.ConvLSTM2D.recurrent_dropout": [], "layers.convolutional_recurrent.ConvLSTM2D.get_config": ["keras.constraints.serialize", "<builtin>.super", "<builtin>.dict", "keras.activations.serialize", "keras.regularizers.serialize", "<builtin>.list", "keras.initializers.serialize"], "layers.convolutional_recurrent.ConvLSTM2D.from_config": ["layers.convolutional_recurrent.ConvLSTM2D.__init__"], "layers.core": ["layers.core._delegate_method", "layers.core._delegate_property", "dispatch.GlobalOpDispatcher.register", "dispatch.OpDispatcher.register", "<builtin>.getattr", "layers.core.TFClassMethodDispatcher.__init__", "layers.core.TFSlicingOpDispatcher.__init__", "dispatch.GlobalOpDispatcher.__init__"], "layers.core.Masking.__init__": ["<builtin>.super"], "layers.core.Masking.compute_mask": ["ops.math_ops.not_equal", "keras.backend.any"], "keras.backend.any": ["ops.math_ops.reduce_any", "ops.math_ops.cast"], "layers.core.Masking.call": ["ops.math_ops.cast", "ops.math_ops.not_equal", "keras.backend.any", "ops.array_ops.squeeze"], "layers.core.Masking.compute_output_shape": [], "layers.core.Masking.get_config": ["<builtin>.super", "<builtin>.list", "<builtin>.dict"], "layers.core.Dropout.__init__": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.isinstance"], "layers.core.Dropout._get_noise_shape": ["<builtin>.enumerate", "ops.array_ops.shape", "framework.ops.convert_to_tensor_v2_with_dispatch"], "layers.core.Dropout.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "layers.core.Dropout.call.dropped_inputs": ["ops.nn.dropout", "layers.core.Dropout._get_noise_shape"], "ops.nn.dropout": [], "layers.core.Dropout.call.<lambda1>": ["ops.array_ops.identity"], "utils.control_flow_util.smart_cond": ["ops.control_flow_ops.cond", "<builtin>.isinstance", "framework.smart_cond.smart_cond"], "layers.core.Dropout.compute_output_shape": [], "layers.core.Dropout.get_config": ["<builtin>.super", "<builtin>.list", "<builtin>.dict"], "layers.core.SpatialDropout1D.__init__": ["<builtin>.super", "engine.input_spec.InputSpec"], "layers.core.SpatialDropout1D._get_noise_shape": ["ops.array_ops.shape"], "layers.core.SpatialDropout2D.__init__": ["keras.backend.image_data_format", "<builtin>.super", "<builtin>.ValueError", "engine.input_spec.InputSpec"], "layers.core.SpatialDropout2D._get_noise_shape": ["ops.array_ops.shape"], "layers.core.SpatialDropout3D.__init__": ["keras.backend.image_data_format", "<builtin>.super", "<builtin>.ValueError", "engine.input_spec.InputSpec"], "layers.core.SpatialDropout3D._get_noise_shape": ["ops.array_ops.shape"], "layers.core.Activation.__init__": ["keras.activations.get", "<builtin>.super"], "layers.core.Activation.call": [], "layers.core.Activation.compute_output_shape": [], "layers.core.Activation.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list", "keras.activations.serialize"], "layers.core.Reshape.__init__": ["<builtin>.tuple", "<builtin>.super"], "layers.core.Reshape._fix_unknown_dimension": ["numpy.prod", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.list"], "layers.core.Reshape.compute_output_shape": ["<builtin>.tuple", "framework.tensor_shape.TensorShape", "layers.core.Reshape._fix_unknown_dimension"], "layers.core.Reshape.call": ["eager.context.executing_eagerly", "layers.core.Reshape.compute_output_shape", "ops.array_ops.reshape", "ops.array_ops.shape"], "layers.core.Reshape.get_config": ["<builtin>.super", "<builtin>.list", "<builtin>.dict"], "layers.core.Permute.__init__": ["<builtin>.tuple", "<builtin>.ValueError", "<builtin>.len", "<builtin>.list", "<builtin>.sorted", "<builtin>.super", "<builtin>.range", "engine.input_spec.InputSpec"], "layers.core.Permute.compute_output_shape": ["framework.tensor_shape.TensorShape", "copy.copy", "<builtin>.enumerate"], "layers.core.Permute.call": ["ops.array_ops.transpose"], "layers.core.Permute.get_config": ["<builtin>.super", "<builtin>.list", "<builtin>.dict"], "layers.core.Flatten.__init__": ["<builtin>.super", "utils.conv_utils.normalize_data_format", "engine.input_spec.InputSpec"], "layers.core.Flatten.call": ["eager.context.executing_eagerly", "ops.array_ops.transpose", "ops.array_ops.reshape", "<builtin>.int", "ops.array_ops.expand_dims_v2", "functools.reduce", "framework.constant_op.constant", "framework.tensor_shape.dimension_value", "<builtin>.range"], "layers.core.Flatten.compute_output_shape": ["framework.tensor_shape.TensorShape", "numpy.all", "numpy.prod"], "layers.core.Flatten.get_config": ["<builtin>.super"], "layers.core.RepeatVector.__init__": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.super", "engine.input_spec.InputSpec", "<builtin>.type"], "layers.core.RepeatVector.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.core.RepeatVector.call": ["keras.backend.repeat"], "keras.backend.repeat": ["ops.array_ops.tile", "ops.array_ops.expand_dims", "ops.array_ops.stack", "keras.backend.ndim"], "layers.core.RepeatVector.get_config": ["<builtin>.super", "<builtin>.list", "<builtin>.dict"], "layers.core.Lambda": ["utils.tf_utils.shape_type_conversion", "tracking.base.no_automatic_dependency_tracking"], "layers.core.Lambda.__init__": ["<builtin>.super", "utils.tf_inspect.getfullargspec"], "layers.core.Lambda.compute_output_shape": ["<builtin>.NotImplementedError", "eager.context.eager_mode", "utils.tf_utils.convert_shapes", "<builtin>.super", "<builtin>.callable", "util.nest.flatten", "util.nest.map_structure"], "layers.core.Lambda.compute_output_shape._add_batch": ["framework.tensor_shape.TensorShape"], "layers.core.Lambda.call": ["ops.variable_scope.variable_creator_scope", "eager.backprop.GradientTape", "layers.core.Lambda._check_variables"], "layers.core.Lambda.call._variable_creator": [], "layers.core.Lambda._check_variables": ["textwrap.dedent", "<builtin>.ValueError", "layers.core.Lambda._warn", "<builtin>.set"], "layers.core.Lambda._warn": ["platform.tf_logging.warning"], "layers.core.Lambda.compute_mask": ["<builtin>.callable"], "layers.core.Lambda.get_config": ["<builtin>.super", "layers.core.Lambda._serialize_function_to_config", "<builtin>.list", "<builtin>.dict"], "layers.core.Lambda._serialize_function_to_config": ["<builtin>.ValueError", "<builtin>.isinstance", "utils.generic_utils.func_dump", "<builtin>.callable", "<builtin>.type"], "utils.generic_utils.func_dump": ["codecs.encode", "marshal.dumps", "<builtin>.tuple"], "layers.core.Lambda.from_config": ["numpy.array", "<builtin>.isinstance", "layers.core.Lambda.__init__", "layers.core.Lambda._parse_function_from_config"], "layers.core.Lambda._parse_function_from_config": ["utils.generic_utils.func_load", "<builtin>.TypeError", "utils.generic_utils.deserialize_keras_object", "<builtin>.globals", "warnings.warn"], "utils.generic_utils.func_load": ["utils.generic_utils.func_load.ensure_value_to_cell", "marshal.loads", "<builtin>.globals", "types.FunctionType", "<builtin>.isinstance", "<builtin>.tuple", "codecs.decode"], "layers.core.Dense.__init__": ["keras.regularizers.get", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.int", "keras.activations.get", "<builtin>.super", "keras.constraints.get", "engine.input_spec.InputSpec", "keras.initializers.get"], "layers.core.Dense.build": ["<builtin>.ValueError", "keras.backend.floatx", "base_layer.Layer.add_weight", "framework.dtypes.as_dtype", "<builtin>.TypeError", "framework.tensor_shape.TensorShape", "framework.tensor_shape.dimension_value", "engine.input_spec.InputSpec"], "layers.core.Dense.call": ["eager.context.executing_eagerly", "ops.embedding_ops.embedding_lookup_sparse_v2", "<builtin>.isinstance", "ops.nn_ops.bias_add", "ops.gen_math_ops.MatMul", "framework.sparse_tensor.SparseTensor", "ops.math_ops.cast", "ops.sparse_ops.sparse_fill_empty_rows", "ops.standard_ops.tensordot"], "ops.sparse_ops.sparse_fill_empty_rows": ["framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "ops.gen_sparse_ops.sparse_fill_empty_rows", "framework.ops.name_scope", "ops.sparse_ops._convert_to_sparse_tensor"], "ops.embedding_ops.embedding_lookup_sparse_v2": ["ops.embedding_ops.embedding_lookup_sparse"], "ops.gen_math_ops.MatMul": [], "ops.standard_ops.tensordot": [], "ops.nn_ops.bias_add": ["ops.array_ops.ones", "<builtin>.ValueError", "eager.context.executing_eagerly", "ops.array_ops.concat", "ops.math_ops.add", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "framework.config.deterministic_ops_enabled", "ops.array_ops.size", "ops.array_ops.reshape", "ops.gen_nn_ops.bias_add", "ops.array_ops.rank"], "layers.core.Dense.compute_output_shape": ["framework.tensor_shape.TensorShape", "framework.tensor_shape.dimension_value", "<builtin>.ValueError"], "layers.core.Dense.get_config": ["<builtin>.super"], "layers.core.ActivityRegularization.__init__": ["<builtin>.super", "keras.regularizers.L1L2"], "keras.regularizers.L1L2": [], "layers.core.ActivityRegularization.compute_output_shape": [], "layers.core.ActivityRegularization.get_config": ["<builtin>.super", "<builtin>.list", "<builtin>.dict"], "layers.core.TFOpLambda": ["tracking.base.no_automatic_dependency_tracking"], "layers.core.TFOpLambda.__init__": ["<builtin>.super", "keras.backend.unique_object_name", "util.tf_export.get_canonical_name_for_symbol", "util.tf_decorator.make_decorator"], "layers.core.TFOpLambda.__init__._call_wrapper": ["layers.core.TFOpLambda._call_wrapper"], "layers.core.TFOpLambda._call_wrapper": ["ops.variable_scope.variable_creator_scope", "eager.backprop.GradientTape", "layers.core.TFOpLambda._check_variables"], "layers.core.TFOpLambda._call_wrapper._variable_creator": [], "layers.core.TFOpLambda._check_variables": ["textwrap.dedent", "layers.core.TFOpLambda._warn", "<builtin>.ValueError", "<builtin>.set"], "layers.core.TFOpLambda._warn": ["platform.tf_logging.warning"], "layers.core.TFOpLambda.get_config": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.list", "<builtin>.dict"], "layers.core.TFOpLambda.from_config": ["<builtin>.ValueError", "util.tf_export.get_symbol_from_name", "layers.core.TFOpLambda.__init__"], "util.tf_export.get_symbol_from_name": [], "layers.core.KerasOpDispatcher.handle": ["util.nest.flatten", "<builtin>.any", "<builtin>.isinstance", "layers.core.TFOpLambda.__init__"], "dispatch.GlobalOpDispatcher.__init__": [], "dispatch.GlobalOpDispatcher.register": [], "layers.core._slice_to_dict": ["<builtin>.isinstance"], "layers.core._dict_to_slice": ["<builtin>.isinstance", "<builtin>.slice"], "layers.core.SlicingOpLambda": ["tracking.base.no_automatic_dependency_tracking"], "layers.core.SlicingOpLambda.__init__": ["<builtin>.super", "util.tf_decorator.make_decorator"], "layers.core.SlicingOpLambda.__init__._call_wrapper": ["layers.core._dict_to_slice", "<builtin>.isinstance"], "layers.core.TFSlicingOpDispatcher.__init__": [], "layers.core.TFSlicingOpDispatcher.handle": ["<builtin>.isinstance", "layers.core.SlicingOpLambda.__init__", "<builtin>.any", "util.nest.flatten", "util.nest.map_structure"], "dispatch.OpDispatcher.register": [], "layers.core.InstanceProperty": ["tracking.base.no_automatic_dependency_tracking"], "layers.core.InstanceProperty.__init__": ["<builtin>.super", "keras.backend.unique_object_name"], "layers.core.InstanceProperty.call": ["<builtin>.getattr"], "layers.core.InstanceProperty.get_config": ["<builtin>.super", "<builtin>.list", "<builtin>.dict"], "layers.core.InstanceProperty.from_config": ["layers.core.InstanceProperty.__init__"], "layers.core.InstanceMethod.call": ["<builtin>.getattr"], "layers.core._delegate_property": ["<builtin>.property", "<builtin>.setattr"], "layers.core._delegate_property.<lambda1>": ["layers.core.InstanceProperty.__init__"], "layers.core._delegate_method": ["<builtin>.setattr"], "layers.core._delegate_method.delegate": ["layers.core.InstanceProperty.__init__"], "layers.core.ClassMethod": ["tracking.base.no_automatic_dependency_tracking"], "layers.core.ClassMethod.__init__": ["<builtin>.super", "keras.backend.unique_object_name", "util.tf_export.get_canonical_name_for_symbol"], "layers.core.ClassMethod.call": ["<builtin>.getattr"], "layers.core.ClassMethod.get_config": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.list", "<builtin>.dict"], "layers.core.ClassMethod.from_config": ["layers.core.ClassMethod.__init__", "<builtin>.ValueError", "util.tf_export.get_symbol_from_name"], "layers.core.TFClassMethodDispatcher.__init__": [], "layers.core.TFClassMethodDispatcher.handle": ["layers.core.ClassMethod.__init__", "util.nest.flatten", "<builtin>.any", "<builtin>.isinstance"], "layers.cudnn_recurrent": [], "layers.cudnn_recurrent._CuDNNRNN.__init__": ["<builtin>.hasattr", "engine.input_spec.InputSpec", "<builtin>.super", "framework.constant_op.constant"], "layers.cudnn_recurrent._CuDNNRNN.call": ["keras.backend.reverse", "<builtin>.ValueError", "recurrent.RNN._process_batch", "<builtin>.len", "<builtin>.zip", "recurrent.RNN.add_update", "ops.state_ops.assign", "<builtin>.isinstance", "recurrent.RNN.get_initial_state", "<builtin>.str"], "recurrent.RNN.get_initial_state": [], "keras.backend.reverse": ["<builtin>.isinstance", "ops.array_ops.reverse"], "recurrent.RNN._process_batch": [], "ops.state_ops.assign": ["ops.gen_state_ops.assign"], "layers.cudnn_recurrent._CuDNNRNN.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super"], "layers.cudnn_recurrent._CuDNNRNN.from_config": ["layers.cudnn_recurrent._CuDNNRNN.__init__"], "layers.cudnn_recurrent._CuDNNRNN.trainable_weights": [], "layers.cudnn_recurrent._CuDNNRNN.non_trainable_weights": [], "layers.cudnn_recurrent._CuDNNRNN.losses": ["<builtin>.super"], "layers.cudnn_recurrent._CuDNNRNN.get_losses_for": ["<builtin>.super"], "layers.cudnn_recurrent.CuDNNGRU.__init__": ["<builtin>.super", "keras.constraints.get", "keras.initializers.get", "collections.namedtuple", "keras.regularizers.get"], "layers.cudnn_recurrent.CuDNNGRU.cell": [], "layers.cudnn_recurrent.CuDNNGRU.build": ["<builtin>.int", "<builtin>.isinstance", "recurrent.RNN.add_weight", "<builtin>.super"], "recurrent.RNN.add_weight": [], "layers.cudnn_recurrent.CuDNNGRU._process_batch": ["layers.recurrent_v2._canonical_to_params", "ops.array_ops.expand_dims", "ops.array_ops.transpose", "ops.gen_cudnn_rnn_ops.CudnnRNNV2"], "layers.recurrent_v2._canonical_to_params": ["layers.recurrent_v2._canonical_to_params.convert", "ops.array_ops.reshape", "ops.array_ops.concat"], "ops.gen_cudnn_rnn_ops.CudnnRNNV2": [], "layers.cudnn_recurrent.CuDNNGRU.get_config": ["keras.regularizers.serialize", "<builtin>.super", "keras.initializers.serialize", "<builtin>.list", "keras.constraints.serialize", "<builtin>.dict"], "layers.cudnn_recurrent.CuDNNLSTM.__init__": ["<builtin>.super", "keras.constraints.get", "keras.initializers.get", "collections.namedtuple", "keras.regularizers.get"], "layers.cudnn_recurrent.CuDNNLSTM.cell": [], "layers.cudnn_recurrent.CuDNNLSTM.build": ["<builtin>.int", "<builtin>.isinstance", "recurrent.RNN.add_weight", "<builtin>.super"], "layers.cudnn_recurrent.CuDNNLSTM.build.bias_initializer": ["keras.initializers.Ones", "ops.array_ops.concat"], "keras.initializers.Ones": [], "layers.cudnn_recurrent.CuDNNLSTM._process_batch": ["layers.recurrent_v2._canonical_to_params", "ops.array_ops.expand_dims", "ops.array_ops.transpose", "ops.gen_cudnn_rnn_ops.CudnnRNNV2"], "layers.cudnn_recurrent.CuDNNLSTM.get_config": ["keras.regularizers.serialize", "<builtin>.super", "keras.initializers.serialize", "<builtin>.list", "keras.constraints.serialize", "<builtin>.dict"], "layers.dense_attention": [], "layers.dense_attention.BaseDenseAttention.__init__": ["<builtin>.super"], "layers.dense_attention.BaseDenseAttention._calculate_scores": [], "layers.dense_attention.BaseDenseAttention._apply_scores": ["ops.math_ops.logical_not", "ops.nn.softmax", "keras.backend.learning_phase", "ops.math_ops.cast", "ops.math_ops.matmul", "utils.control_flow_util.smart_cond"], "ops.nn.softmax": [], "layers.dense_attention.BaseDenseAttention._apply_scores.dropped_weights": ["ops.nn.dropout"], "layers.dense_attention.BaseDenseAttention._apply_scores.<lambda1>": ["ops.array_ops.identity"], "layers.dense_attention.BaseDenseAttention.call": ["ops.array_ops.shape", "ops.array_ops.expand_dims", "ops.array_ops.concat", "ops.math_ops.cast", "layers.dense_attention._lower_triangular_mask", "layers.dense_attention.BaseDenseAttention._calculate_scores", "layers.dense_attention.BaseDenseAttention._apply_scores", "layers.dense_attention._merge_masks", "layers.dense_attention.BaseDenseAttention._validate_call_args", "<builtin>.len", "ops.array_ops.ones_like"], "layers.dense_attention.BaseDenseAttention._validate_call_args": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.ValueError"], "ops.array_ops.ones_like": ["ops.array_ops.ones_like_impl"], "layers.dense_attention._lower_triangular_mask": ["ops.math_ops.cumsum", "ops.math_ops.greater_equal", "ops.array_ops.ones"], "layers.dense_attention._merge_masks": ["ops.math_ops.logical_and"], "layers.dense_attention.BaseDenseAttention.compute_mask": ["layers.dense_attention.BaseDenseAttention._validate_call_args", "framework.ops.convert_to_tensor_v2_with_dispatch"], "layers.dense_attention.BaseDenseAttention.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super"], "layers.dense_attention.Attention.__init__": ["<builtin>.super"], "layers.dense_attention.Attention.build": ["ops.init_ops.ones_initializer", "<builtin>.super", "base_layer.Layer.add_weight"], "ops.init_ops.ones_initializer": [], "layers.dense_attention.Attention._calculate_scores": ["ops.math_ops.matmul"], "layers.dense_attention.Attention.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super"], "layers.dense_attention.AdditiveAttention.__init__": ["<builtin>.super"], "layers.dense_attention.AdditiveAttention.build": ["base_layer.Layer.add_weight", "<builtin>.super", "ops.init_ops.glorot_uniform_initializer", "framework.tensor_shape.TensorShape", "<builtin>.isinstance"], "ops.init_ops.glorot_uniform_initializer": [], "layers.dense_attention.AdditiveAttention._calculate_scores": ["ops.array_ops.expand_dims", "ops.math_ops.tanh", "ops.math_ops.reduce_sum"], "ops.math_ops.tanh": [], "layers.dense_attention.AdditiveAttention.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super"], "ops.math_ops.cumsum": ["ops.gen_math_ops.cumsum", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "layers.einsum_dense": [], "layers.einsum_dense.EinsumDense.__init__": ["keras.initializers.get", "keras.activations.get", "keras.regularizers.get", "<builtin>.isinstance", "keras.constraints.get", "<builtin>.list", "<builtin>.super"], "layers.einsum_dense.EinsumDense.build": ["framework.tensor_shape.TensorShape", "layers.einsum_dense._analyze_einsum_string", "base_layer.Layer.add_weight", "<builtin>.super"], "layers.einsum_dense._analyze_einsum_string": ["<builtin>.ValueError", "re.sub", "re.match", "layers.einsum_dense._analyze_split_string"], "layers.einsum_dense.EinsumDense.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.einsum_dense.EinsumDense.get_config": ["keras.activations.serialize", "keras.initializers.serialize", "<builtin>.dict", "keras.regularizers.serialize", "<builtin>.list", "keras.constraints.serialize", "<builtin>.super"], "layers.einsum_dense.EinsumDense.call": ["ops.special_math_ops.einsum"], "ops.special_math_ops.einsum": ["ops.special_math_ops._einsum_v2"], "layers.einsum_dense._analyze_split_string": ["<builtin>.range", "<builtin>.min", "<builtin>.isinstance", "<builtin>.list", "<builtin>.ValueError", "<builtin>.len", "<builtin>.enumerate"], "layers.embeddings": [], "layers.embeddings.Embedding.__init__": ["keras.constraints.get", "keras.regularizers.get", "<builtin>.ValueError", "<builtin>.super", "keras.backend.floatx", "engine.base_layer_utils.v2_dtype_behavior_enabled", "keras.initializers.get"], "layers.embeddings.Embedding": ["utils.tf_utils.shape_type_conversion"], "layers.embeddings.Embedding.build": ["base_layer.Layer.add_weight"], "layers.embeddings.Embedding.compute_mask": ["ops.math_ops.not_equal"], "layers.embeddings.Embedding.compute_output_shape": ["<builtin>.tuple", "<builtin>.isinstance", "<builtin>.list", "<builtin>.zip", "<builtin>.ValueError", "<builtin>.len", "<builtin>.str", "<builtin>.enumerate"], "layers.embeddings.Embedding.call": ["keras.backend.dtype", "ops.embedding_ops.embedding_lookup_v2", "ops.math_ops.cast"], "ops.embedding_ops.embedding_lookup_v2": ["ops.embedding_ops.embedding_lookup"], "layers.embeddings.Embedding.get_config": ["<builtin>.dict", "<builtin>.list", "keras.regularizers.serialize", "<builtin>.super", "keras.initializers.serialize", "keras.constraints.serialize"], "layers.kernelized": [], "layers.kernelized.RandomFourierFeatures.__init__": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.ValueError"], "layers.kernelized.RandomFourierFeatures.build": ["ops.init_ops.constant_initializer", "framework.tensor_shape.TensorShape", "layers.kernelized._get_default_scale", "base_layer.Layer.add_weight", "layers.kernelized._get_random_features_initializer", "ops.init_ops.random_uniform_initializer", "<builtin>.ValueError", "<builtin>.super"], "layers.kernelized._get_random_features_initializer": ["ops.init_ops.constant_initializer", "ops.init_ops.random_normal_initializer", "<builtin>.ValueError", "<builtin>.isinstance", "layers.kernelized._get_random_features_initializer._get_cauchy_samples"], "ops.init_ops.random_uniform_initializer": [], "layers.kernelized._get_default_scale": ["numpy.sqrt", "<builtin>.isinstance"], "ops.init_ops.constant_initializer": [], "layers.kernelized.RandomFourierFeatures.call": ["ops.nn.bias_add", "ops.gen_math_ops.cos", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.cast", "ops.gen_math_ops.MatMul"], "ops.gen_math_ops.cos": [], "layers.kernelized.RandomFourierFeatures.compute_output_shape": ["framework.tensor_shape.TensorShape", "<builtin>.ValueError"], "layers.kernelized.RandomFourierFeatures.get_config": ["<builtin>.dict", "<builtin>.list", "keras.initializers.serialize", "<builtin>.isinstance", "<builtin>.super"], "layers.kernelized._get_random_features_initializer._get_cauchy_samples": ["numpy.random.uniform", "numpy.tan"], "numpy.tan": [], "ops.init_ops.random_normal_initializer": [], "numpy.sqrt": [], "layers.local": [], "layers.local.LocallyConnected1D.__init__": ["utils.conv_utils.normalize_tuple", "utils.conv_utils.normalize_padding", "keras.regularizers.get", "utils.conv_utils.normalize_data_format", "keras.activations.get", "engine.input_spec.InputSpec", "keras.initializers.get", "keras.constraints.get", "<builtin>.ValueError", "<builtin>.super"], "layers.local.LocallyConnected1D._use_input_spec_as_call_signature": [], "layers.local.LocallyConnected1D": ["utils.tf_utils.shape_type_conversion"], "layers.local.LocallyConnected1D.build": ["utils.conv_utils.conv_kernel_idxs", "<builtin>.len", "base_layer.Layer.add_weight", "<builtin>.sorted", "engine.input_spec.InputSpec", "layers.local.get_locallyconnected_mask", "utils.conv_utils.conv_output_length", "<builtin>.ValueError"], "layers.local.get_locallyconnected_mask": ["numpy.expand_dims", "utils.conv_utils.conv_kernel_mask", "<builtin>.int", "<builtin>.str", "<builtin>.ValueError"], "utils.conv_utils.conv_kernel_idxs": ["<builtin>.isinstance", "utils.conv_utils.conv_output_shape", "<builtin>.NotImplementedError", "numpy.ravel_multi_index", "<builtin>.len", "utils.conv_utils.conv_kernel_idxs.<lambda1>", "utils.conv_utils.conv_connected_inputs", "<builtin>.range", "<builtin>.ValueError", "utils.conv_utils.conv_kernel_idxs.<lambda2>", "itertools.product"], "layers.local.LocallyConnected1D.compute_output_shape": ["utils.conv_utils.conv_output_length"], "layers.local.LocallyConnected1D.call": ["layers.local.LocallyConnected1D.compute_output_shape", "layers.local.local_conv_sparse_matmul", "layers.local.local_conv_matmul", "keras.backend.local_conv", "keras.backend.bias_add", "<builtin>.ValueError"], "keras.backend.local_conv": ["<builtin>.str", "keras.backend.concatenate", "<builtin>.ValueError", "keras.backend_config.image_data_format", "<builtin>.range", "keras.backend.batch_dot", "itertools.product", "<builtin>.list", "keras.backend.reshape", "<builtin>.slice", "keras.backend.permute_dimensions", "keras.backend.int_shape", "<builtin>.len"], "layers.local.local_conv_matmul": ["ops.math_ops.matmul", "keras.backend.reshape", "keras.backend.shape", "keras.backend.ndim", "layers.local.make_2d"], "layers.local.local_conv_sparse_matmul": ["keras.backend.reshape", "keras.backend.transpose", "ops.gen_sparse_ops.SparseTensorDenseMatMul", "keras.backend.shape"], "layers.local.LocallyConnected1D.get_config": ["keras.activations.serialize", "keras.regularizers.serialize", "<builtin>.dict", "keras.initializers.serialize", "keras.constraints.serialize", "<builtin>.list", "<builtin>.super"], "layers.local.LocallyConnected2D.__init__": ["utils.conv_utils.normalize_tuple", "utils.conv_utils.normalize_padding", "keras.regularizers.get", "utils.conv_utils.normalize_data_format", "keras.activations.get", "engine.input_spec.InputSpec", "keras.initializers.get", "keras.constraints.get", "<builtin>.ValueError", "<builtin>.super"], "layers.local.LocallyConnected2D._use_input_spec_as_call_signature": [], "layers.local.LocallyConnected2D": ["utils.tf_utils.shape_type_conversion"], "layers.local.LocallyConnected2D.build": ["utils.conv_utils.conv_kernel_idxs", "<builtin>.len", "base_layer.Layer.add_weight", "<builtin>.sorted", "engine.input_spec.InputSpec", "layers.local.get_locallyconnected_mask", "utils.conv_utils.conv_output_length", "<builtin>.str", "<builtin>.ValueError"], "layers.local.LocallyConnected2D.compute_output_shape": ["utils.conv_utils.conv_output_length"], "layers.local.LocallyConnected2D.call": ["layers.local.local_conv_sparse_matmul", "layers.local.local_conv_matmul", "layers.local.LocallyConnected2D.compute_output_shape", "keras.backend.local_conv", "keras.backend.bias_add", "<builtin>.ValueError"], "layers.local.LocallyConnected2D.get_config": ["keras.activations.serialize", "keras.regularizers.serialize", "<builtin>.dict", "keras.initializers.serialize", "keras.constraints.serialize", "<builtin>.list", "<builtin>.super"], "utils.conv_utils.conv_kernel_mask": ["<builtin>.isinstance", "utils.conv_utils.conv_output_shape", "<builtin>.NotImplementedError", "numpy.zeros", "<builtin>.len", "utils.conv_utils.conv_connected_inputs", "<builtin>.range", "<builtin>.ValueError", "itertools.product"], "layers.local.make_2d": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.math_ops.reduce_prod"], "ops.gen_sparse_ops.SparseTensorDenseMatMul": [], "keras.backend.transpose": ["ops.array_ops.transpose"], "ops.math_ops.reduce_prod": ["ops.math_ops._ReductionDims", "ops.gen_math_ops.prod", "ops.math_ops._may_reduce_to_scalar", "<builtin>.bool"], "layers.merge": ["util.tf_export.keras_export"], "layers.merge._Merge.__init__": ["<builtin>.super"], "layers.merge._Merge._merge_function": [], "layers.merge._Merge._compute_elemwise_op_output_shape": ["<builtin>.ValueError", "<builtin>.str", "<builtin>.tuple", "layers.merge._Merge._compute_elemwise_op_output_shape", "<builtin>.zip", "<builtin>.list", "<builtin>.len"], "layers.merge._Merge": ["utils.tf_utils.shape_type_conversion"], "layers.merge._Merge.build": ["<builtin>.set", "<builtin>.ValueError", "<builtin>.str", "<builtin>.isinstance", "layers.merge._Merge._compute_elemwise_op_output_shape", "<builtin>.map", "<builtin>.range", "<builtin>.len"], "layers.merge._Merge.call": ["<builtin>.max", "<builtin>.ValueError", "<builtin>.isinstance", "layers.merge.Minimum._merge_function", "keras.backend.ndim", "ops.array_ops.reshape", "layers.merge.Multiply._merge_function", "<builtin>.range", "ops.math_ops.reduce_prod", "layers.merge._Merge._merge_function", "ops.array_ops.expand_dims", "ops.array_ops.shape", "keras.backend.concatenate", "layers.merge.Dot._merge_function", "layers.merge.Add._merge_function", "layers.merge.Maximum._merge_function", "layers.merge.Concatenate._merge_function", "<builtin>.list", "layers.merge.Subtract._merge_function", "layers.merge.Average._merge_function", "<builtin>.map", "ops.array_ops.stack", "ops.array_ops.transpose"], "layers.merge.Minimum._merge_function": ["<builtin>.len", "ops.math_ops.minimum", "<builtin>.range"], "layers.merge.Average._merge_function": ["<builtin>.len", "<builtin>.range"], "layers.merge.Maximum._merge_function": ["ops.math_ops.maximum", "<builtin>.len", "<builtin>.range"], "layers.merge.Dot._merge_function": ["<builtin>.ValueError", "engine.base_layer_utils.no_ragged_support", "<builtin>.isinstance", "keras.backend.batch_dot", "keras.backend.ndim", "<builtin>.range", "<builtin>.len", "ops.nn.l2_normalize"], "layers.merge.Concatenate._merge_function": ["keras.backend.concatenate"], "layers.merge.Multiply._merge_function": ["<builtin>.len", "<builtin>.range"], "layers.merge.Add._merge_function": ["<builtin>.len", "<builtin>.range"], "layers.merge.Subtract._merge_function": ["<builtin>.len", "<builtin>.ValueError"], "layers.merge._Merge.compute_output_shape": ["<builtin>.len", "layers.merge._Merge._compute_elemwise_op_output_shape", "<builtin>.list", "<builtin>.range"], "layers.merge._Merge.compute_mask": ["<builtin>.ValueError", "<builtin>.isinstance", "keras.backend.concatenate", "keras.backend.all", "<builtin>.len", "<builtin>.all", "ops.array_ops.expand_dims"], "keras.backend.all": ["ops.math_ops.cast", "ops.math_ops.reduce_all"], "layers.merge.Subtract": ["utils.tf_utils.shape_type_conversion"], "layers.merge.Subtract.build": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.super"], "ops.math_ops.minimum": [], "layers.merge.Concatenate.__init__": ["<builtin>.super"], "layers.merge.Concatenate": ["utils.tf_utils.shape_type_conversion"], "layers.merge.Concatenate.build": ["<builtin>.set", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.list", "<builtin>.range", "<builtin>.len", "<builtin>.all"], "layers.merge.Concatenate.compute_output_shape": ["<builtin>.tuple", "<builtin>.ValueError", "<builtin>.list", "<builtin>.isinstance"], "layers.merge.Concatenate.compute_mask": ["<builtin>.ValueError", "<builtin>.isinstance", "ops.array_ops.ones_like", "keras.backend.ndim", "<builtin>.zip", "keras.backend.concatenate", "keras.backend.all", "<builtin>.len", "<builtin>.all", "ops.array_ops.expand_dims"], "layers.merge.Concatenate.get_config": ["<builtin>.dict", "<builtin>.super", "<builtin>.list"], "layers.merge.Dot.__init__": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.super", "<builtin>.TypeError", "<builtin>.len"], "layers.merge.Dot": ["utils.tf_utils.shape_type_conversion"], "layers.merge.Dot.build": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.isinstance"], "ops.nn.l2_normalize": [], "keras.backend.batch_dot": ["<builtin>.str", "<builtin>.ValueError", "ops.array_ops.shape", "ops.array_ops.stack", "ops.math_ops.matmul", "ops.array_ops.reshape", "<builtin>.range", "<builtin>.isinstance", "ops.array_ops.concat", "ops.array_ops.squeeze", "keras.backend.shape", "<builtin>.list", "ops.array_ops.expand_dims", "keras.backend.any", "keras.backend.int_shape", "ops.array_ops.transpose", "<builtin>.len"], "layers.merge.Dot.compute_output_shape": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.list", "<builtin>.len"], "layers.merge.Dot.compute_mask": [], "layers.merge.Dot.get_config": ["<builtin>.dict", "<builtin>.super", "<builtin>.list"], "layers.merge.add": ["layers.merge._Merge.__init__"], "layers.merge.subtract": ["layers.merge._Merge.__init__"], "layers.merge.multiply": ["layers.merge._Merge.__init__"], "layers.merge.average": ["layers.merge._Merge.__init__"], "layers.merge.maximum": ["layers.merge._Merge.__init__"], "layers.merge.minimum": ["layers.merge._Merge.__init__"], "layers.merge.concatenate": ["layers.merge.Concatenate.__init__"], "layers.merge.dot": ["layers.merge.Dot.__init__"], "layers.multi_head_attention": [], "layers.multi_head_attention._build_attention_equation": ["numpy.delete", "<builtin>.len", "<builtin>.range", "<builtin>.tuple"], "numpy.delete": [], "layers.multi_head_attention._build_proj_equation": ["<builtin>.len", "<builtin>.range"], "layers.multi_head_attention._get_output_shape": ["<builtin>.len", "<builtin>.list"], "layers.multi_head_attention.MultiHeadAttention.__init__": ["keras.regularizers.get", "<builtin>.super", "<builtin>.isinstance", "keras.constraints.get", "keras.initializers.get"], "layers.multi_head_attention.MultiHeadAttention.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict", "keras.regularizers.serialize", "keras.initializers.serialize", "keras.constraints.serialize"], "layers.multi_head_attention.MultiHeadAttention.from_config": ["layers.multi_head_attention.MultiHeadAttention.__init__", "platform.tf_logging.warning", "<builtin>.str"], "layers.multi_head_attention.MultiHeadAttention._build_from_signature": ["framework.tensor_shape.TensorShape", "layers.einsum_dense.EinsumDense", "layers.multi_head_attention.MultiHeadAttention._make_output_dense", "<builtin>.dict", "layers.multi_head_attention.MultiHeadAttention._build_attention", "layers.multi_head_attention._get_output_shape", "<builtin>.hasattr", "utils.tf_utils.maybe_init_scope", "layers.multi_head_attention._build_proj_equation"], "layers.einsum_dense.EinsumDense": [], "layers.multi_head_attention.MultiHeadAttention._build_attention": ["layers.multi_head_attention._build_attention_equation", "<builtin>.len", "layers.core.Dropout", "<builtin>.range", "<builtin>.tuple", "layers.advanced_activations.Softmax"], "layers.multi_head_attention.MultiHeadAttention._make_output_dense": ["<builtin>.len", "layers.einsum_dense.EinsumDense", "<builtin>.isinstance", "layers.multi_head_attention._get_output_shape", "layers.multi_head_attention._build_proj_equation"], "layers.core.Dropout": [], "layers.multi_head_attention.MultiHeadAttention._masked_softmax": ["ops.array_ops.expand_dims", "<builtin>.len", "<builtin>.range"], "layers.multi_head_attention.MultiHeadAttention._compute_attention": ["ops.special_math_ops.einsum", "math.sqrt", "ops.math_ops.multiply", "<builtin>.float", "layers.multi_head_attention.MultiHeadAttention._masked_softmax"], "ops.math_ops.multiply": ["ops.gen_math_ops.mul"], "layers.multi_head_attention.MultiHeadAttention.call": ["layers.multi_head_attention.MultiHeadAttention._build_from_signature", "layers.multi_head_attention.MultiHeadAttention._compute_attention"], "layers.noise": [], "layers.noise.GaussianNoise.__init__": ["<builtin>.super"], "layers.noise.GaussianNoise.call": ["keras.backend.in_train_phase"], "layers.noise.GaussianNoise.call.noised": ["ops.array_ops.shape", "keras.backend.random_normal"], "keras.backend.random_normal": ["numpy.random.randint", "keras.backend_config.floatx", "ops.random_ops.random_normal"], "keras.backend.in_train_phase": ["<builtin>.callable", "framework.tensor_util.is_tf_type", "engine.base_layer_utils.call_context", "keras.backend.switch", "keras.backend.learning_phase"], "layers.noise.GaussianNoise.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super"], "layers.noise.GaussianNoise": ["utils.tf_utils.shape_type_conversion"], "layers.noise.GaussianNoise.compute_output_shape": [], "layers.noise.GaussianDropout.__init__": ["<builtin>.super"], "layers.noise.GaussianDropout.call": ["keras.backend.in_train_phase"], "layers.noise.GaussianDropout.call.noised": ["numpy.sqrt", "ops.array_ops.shape", "keras.backend.random_normal"], "layers.noise.GaussianDropout.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super"], "layers.noise.GaussianDropout": ["utils.tf_utils.shape_type_conversion"], "layers.noise.GaussianDropout.compute_output_shape": [], "layers.noise.AlphaDropout.__init__": ["<builtin>.super"], "layers.noise.AlphaDropout._get_noise_shape": ["ops.array_ops.shape"], "layers.noise.AlphaDropout.call": ["keras.backend.in_train_phase", "layers.noise.AlphaDropout._get_noise_shape"], "layers.noise.AlphaDropout.call.dropped_inputs": ["ops.math_ops.greater_equal", "keras.backend.random_uniform", "ops.math_ops.cast"], "keras.backend.random_uniform": ["numpy.random.randint", "keras.backend_config.floatx", "ops.random_ops.random_uniform"], "layers.noise.AlphaDropout.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super"], "layers.noise.AlphaDropout": ["utils.tf_utils.shape_type_conversion"], "layers.noise.AlphaDropout.compute_output_shape": [], "layers.pooling": [], "layers.pooling.Pooling1D.__init__": ["keras.backend.image_data_format", "utils.conv_utils.normalize_padding", "engine.input_spec.InputSpec", "utils.conv_utils.normalize_data_format", "utils.conv_utils.normalize_tuple", "<builtin>.super"], "layers.pooling.Pooling1D.call": ["ops.array_ops.expand_dims", "ops.array_ops.squeeze"], "layers.pooling.Pooling1D.compute_output_shape": ["framework.tensor_shape.TensorShape", "utils.conv_utils.conv_output_length"], "layers.pooling.Pooling1D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.pooling.MaxPooling1D.__init__": ["functools.partial", "<builtin>.super"], "layers.pooling.AveragePooling1D.__init__": ["functools.partial", "<builtin>.super"], "layers.pooling.Pooling2D.__init__": ["keras.backend.image_data_format", "utils.conv_utils.normalize_padding", "engine.input_spec.InputSpec", "utils.conv_utils.normalize_data_format", "utils.conv_utils.normalize_tuple", "<builtin>.super"], "layers.pooling.Pooling2D.call": ["utils.conv_utils.convert_data_format"], "layers.pooling.Pooling2D.compute_output_shape": ["framework.tensor_shape.TensorShape", "utils.conv_utils.conv_output_length"], "layers.pooling.Pooling2D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.pooling.MaxPooling2D.__init__": ["<builtin>.super"], "layers.pooling.AveragePooling2D.__init__": ["<builtin>.super"], "layers.pooling.Pooling3D.__init__": ["keras.backend.image_data_format", "utils.conv_utils.normalize_padding", "engine.input_spec.InputSpec", "utils.conv_utils.normalize_data_format", "utils.conv_utils.normalize_tuple", "<builtin>.super"], "layers.pooling.Pooling3D.call": ["ops.array_ops.transpose"], "layers.pooling.Pooling3D.compute_output_shape": ["framework.tensor_shape.TensorShape", "utils.conv_utils.conv_output_length"], "layers.pooling.Pooling3D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.pooling.MaxPooling3D.__init__": ["<builtin>.super"], "layers.pooling.AveragePooling3D.__init__": ["<builtin>.super"], "layers.pooling.GlobalPooling1D.__init__": ["engine.input_spec.InputSpec", "<builtin>.super", "utils.conv_utils.normalize_data_format"], "layers.pooling.GlobalPooling1D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.pooling.GlobalPooling1D.call": [], "layers.pooling.GlobalPooling1D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.pooling.GlobalAveragePooling1D.__init__": ["<builtin>.super"], "layers.pooling.GlobalAveragePooling1D.call": ["ops.math_ops.reduce_sum", "ops.array_ops.expand_dims", "keras.backend.mean", "keras.backend.sum", "ops.math_ops.cast"], "keras.backend.mean": ["ops.math_ops.reduce_mean", "keras.backend_config.floatx", "ops.math_ops.cast"], "layers.pooling.GlobalAveragePooling1D.compute_mask": [], "layers.pooling.GlobalMaxPooling1D.call": ["keras.backend.max"], "keras.backend.max": ["ops.math_ops.reduce_max"], "layers.pooling.GlobalPooling2D.__init__": ["engine.input_spec.InputSpec", "<builtin>.super", "utils.conv_utils.normalize_data_format"], "layers.pooling.GlobalPooling2D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.pooling.GlobalPooling2D.call": [], "layers.pooling.GlobalPooling2D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.pooling.GlobalAveragePooling2D.call": ["keras.backend.mean"], "layers.pooling.GlobalMaxPooling2D.call": ["keras.backend.max"], "layers.pooling.GlobalPooling3D.__init__": ["engine.input_spec.InputSpec", "<builtin>.super", "utils.conv_utils.normalize_data_format"], "layers.pooling.GlobalPooling3D.compute_output_shape": ["framework.tensor_shape.TensorShape"], "layers.pooling.GlobalPooling3D.call": [], "layers.pooling.GlobalPooling3D.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "layers.pooling.GlobalAveragePooling3D.call": ["keras.backend.mean"], "layers.pooling.GlobalMaxPooling3D.call": ["keras.backend.max"], "layers.recurrent": [], "layers.recurrent.StackedRNNCells.__init__": ["<builtin>.dir", "<builtin>.ValueError", "<builtin>.super", "platform.tf_logging.warning"], "layers.recurrent.StackedRNNCells.state_size": ["<builtin>.tuple"], "layers.recurrent.StackedRNNCells.output_size": ["<builtin>.getattr", "layers.recurrent._is_multiple_state"], "layers.recurrent._is_multiple_state": ["<builtin>.isinstance", "<builtin>.hasattr"], "layers.recurrent.StackedRNNCells.get_initial_state": ["<builtin>.getattr", "<builtin>.tuple", "layers.recurrent._generate_zero_filled_state_for_cell"], "layers.recurrent._generate_zero_filled_state_for_cell": ["ops.array_ops.shape", "layers.recurrent._generate_zero_filled_state"], "layers.recurrent.StackedRNNCells.call": ["utils.generic_utils.has_arg", "<builtin>.zip", "util.nest.pack_sequence_as", "<builtin>.callable", "<builtin>.len", "<builtin>.getattr", "util.nest.is_nested", "util.nest.flatten"], "layers.recurrent.StackedRNNCells": ["utils.tf_utils.shape_type_conversion"], "layers.recurrent.StackedRNNCells.build": ["<builtin>.getattr", "<builtin>.tuple", "layers.recurrent.StackedRNNCells.build", "<builtin>.isinstance", "keras.backend.name_scope", "framework.tensor_shape.TensorShape", "layers.recurrent._is_multiple_state"], "layers.recurrent.StackedRNNCells.get_config": ["<builtin>.list", "utils.generic_utils.serialize_keras_object", "<builtin>.super", "<builtin>.dict"], "layers.recurrent.StackedRNNCells.from_config": ["keras.layers.deserialize", "layers.recurrent.StackedRNNCells.__init__"], "layers.recurrent.RNN.__init__": ["layers.recurrent.StackedRNNCells.__init__", "distribute.distribution_strategy_context.has_strategy", "<builtin>.super", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.dir"], "layers.recurrent.RNN._use_input_spec_as_call_signature": ["<builtin>.super"], "layers.recurrent.RNN.states": ["util.nest.map_structure", "util.nest.is_nested"], "layers.recurrent.RNN.states.<lambda1>": [], "layers.recurrent.RNN": ["tracking.base.no_automatic_dependency_tracking", "docs.doc_controls.do_not_doc_inheritable"], "layers.recurrent.RNN.compute_output_shape": ["utils.generic_utils.to_list", "<builtin>.len", "util.nest.map_structure", "<builtin>.getattr", "util.nest.flatten", "<builtin>.isinstance", "layers.recurrent.RNN.compute_output_shape._get_output_shape", "framework.tensor_shape.TensorShape", "layers.recurrent._is_multiple_state"], "layers.recurrent.RNN.compute_output_shape._get_output_shape": ["framework.tensor_shape.TensorShape"], "layers.recurrent.RNN.compute_output_shape._get_state_shape": ["framework.tensor_shape.TensorShape"], "layers.recurrent.RNN.compute_mask": ["util.nest.flatten"], "layers.recurrent.RNN.build": ["<builtin>.list", "layers.recurrent.RNN.build.get_input_spec", "utils.generic_utils.to_list", "util.nest.map_structure", "layers.recurrent.RNN.reset_states", "layers.recurrent.RNN.build.get_step_input_shape", "engine.input_spec.InputSpec", "layers.recurrent.StackedRNNCells.build", "<builtin>.isinstance", "util.nest.is_nested", "keras.backend.name_scope", "framework.tensor_shape.TensorShape", "layers.recurrent.RNN._validate_state_spec", "layers.recurrent._is_multiple_state"], "layers.recurrent.RNN.build.get_input_spec": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.tuple", "engine.input_spec.InputSpec"], "layers.recurrent.RNN.build.get_step_input_shape": ["<builtin>.isinstance", "<builtin>.tuple"], "layers.recurrent.RNN._validate_state_spec": ["<builtin>.zip", "<builtin>.len", "<builtin>.ValueError", "framework.tensor_shape.TensorShape", "util.nest.flatten"], "layers.recurrent.RNN.reset_states": ["numpy.zeros", "<builtin>.zip", "util.nest.pack_sequence_as", "<builtin>.str", "framework.tensor_shape.TensorShape", "util.nest.map_structure", "<builtin>.AttributeError", "<builtin>.getattr", "<builtin>.len", "keras.backend.batch_set_value", "<builtin>.ValueError", "<builtin>.enumerate", "layers.recurrent.StackedRNNCells.get_initial_state", "util.nest.is_nested", "layers.recurrent._generate_zero_filled_state", "keras.backend.set_value", "keras.backend.floatx", "util.nest.flatten"], "layers.recurrent.RNN.get_initial_state": ["<builtin>.list", "<builtin>.getattr", "ops.array_ops.shape", "util.nest.is_nested", "layers.recurrent._generate_zero_filled_state", "util.nest.flatten"], "layers.recurrent._generate_zero_filled_state": ["util.nest.is_nested", "<builtin>.ValueError", "util.nest.map_structure", "layers.recurrent._generate_zero_filled_state.create_zeros"], "layers.recurrent.RNN.__call__": ["utils.generic_utils.to_list", "<builtin>.len", "util.nest.map_structure", "keras.backend.int_shape", "<builtin>.super", "<builtin>.ValueError", "engine.input_spec.InputSpec", "layers.recurrent._standardize_args", "keras.backend.is_keras_tensor", "util.nest.flatten"], "layers.recurrent._standardize_args": ["<builtin>.isinstance", "layers.recurrent._standardize_args.to_list_or_none", "<builtin>.tuple", "<builtin>.len"], "layers.recurrent.RNN.__call__.<lambda1>": ["keras.backend.int_shape", "engine.input_spec.InputSpec"], "layers.recurrent.RNN.__call__.<lambda2>": [], "layers.recurrent.RNN.call": ["layers.recurrent.RNN._validate_args_if_ragged", "keras.backend.rnn", "<builtin>.zip", "utils.generic_utils.to_list", "util.nest.is_nested", "layers.recurrent.RNN._maybe_reset_cell_dropout_mask", "<builtin>.list", "ops.state_ops.assign", "<builtin>.callable", "util.nest.flatten", "utils.generic_utils.has_arg", "keras.backend.maybe_convert_to_ragged", "keras.backend.convert_inputs_if_ragged", "<builtin>.ValueError", "base_layer.Layer.add_update", "layers.recurrent.RNN._process_inputs", "keras.backend.int_shape", "<builtin>.getattr", "<builtin>.isinstance"], "keras.backend.convert_inputs_if_ragged": ["util.nest.map_structure", "<builtin>.isinstance", "util.nest.flatten", "keras.backend.any", "ops.math_ops.cast"], "layers.recurrent.RNN._validate_args_if_ragged": ["<builtin>.str", "<builtin>.ValueError"], "layers.recurrent.RNN._process_inputs": ["<builtin>.str", "ops.control_flow_ops.cond", "layers.recurrent.RNN.get_initial_state", "<builtin>.len", "ops.math_ops.add_n", "<builtin>.ValueError", "ops.math_ops.count_nonzero_v2", "<builtin>.isinstance", "util.nest.flatten"], "layers.recurrent.RNN._maybe_reset_cell_dropout_mask": ["<builtin>.isinstance", "base_layer.Layer.reset_recurrent_dropout_mask", "base_layer.Layer.reset_dropout_mask"], "layers.recurrent.RNN.call.step": ["util.nest.is_nested", "<builtin>.len"], "base_layer.Layer.add_update": [], "keras.backend.maybe_convert_to_ragged": ["keras.backend.reverse", "ragged_tensor.RaggedTensor.from_tensor"], "ops.math_ops.count_nonzero_v2": ["ops.math_ops.cast", "ops.gen_math_ops.not_equal", "ops.math_ops.reduce_sum", "ops.array_ops.zeros", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "layers.recurrent.RNN._process_inputs.<lambda1>": [], "layers.recurrent.RNN._process_inputs.<lambda2>": [], "base_layer.Layer.reset_dropout_mask": [], "base_layer.Layer.reset_recurrent_dropout_mask": [], "layers.recurrent.RNN.get_config": ["<builtin>.list", "utils.generic_utils.serialize_keras_object", "<builtin>.super", "<builtin>.dict"], "layers.recurrent.RNN.from_config": ["keras.layers.deserialize", "layers.recurrent.RNN.__init__"], "layers.recurrent.RNN._trackable_saved_model_saver": ["saved_model.layer_serialization.RNNSavedModelSaver"], "saved_model.layer_serialization.RNNSavedModelSaver": [], "layers.recurrent.AbstractRNNCell.call": ["<builtin>.NotImplementedError"], "layers.recurrent.AbstractRNNCell.state_size": ["<builtin>.NotImplementedError"], "layers.recurrent.AbstractRNNCell.output_size": ["<builtin>.NotImplementedError"], "layers.recurrent.AbstractRNNCell.get_initial_state": ["layers.recurrent._generate_zero_filled_state_for_cell"], "layers.recurrent.DropoutRNNCellMixin.__init__": ["layers.recurrent.DropoutRNNCellMixin._create_non_trackable_mask_cache", "<builtin>.super"], "layers.recurrent.DropoutRNNCellMixin._create_non_trackable_mask_cache": ["keras.backend.ContextValueCache"], "layers.recurrent.DropoutRNNCellMixin": ["tracking.base.no_automatic_dependency_tracking"], "keras.backend.ContextValueCache": [], "layers.recurrent.DropoutRNNCellMixin.reset_dropout_mask": [], "layers.recurrent.DropoutRNNCellMixin.reset_recurrent_dropout_mask": [], "layers.recurrent.DropoutRNNCellMixin._create_dropout_mask": ["ops.array_ops.ones_like", "layers.recurrent._generate_dropout_mask"], "layers.recurrent._generate_dropout_mask": ["keras.backend.in_train_phase", "<builtin>.range"], "layers.recurrent.DropoutRNNCellMixin._create_recurrent_dropout_mask": ["ops.array_ops.ones_like", "layers.recurrent._generate_dropout_mask"], "layers.recurrent.DropoutRNNCellMixin.get_dropout_mask_for_cell": ["<builtin>.dict"], "layers.recurrent.DropoutRNNCellMixin.get_recurrent_dropout_mask_for_cell": ["<builtin>.dict"], "layers.recurrent.DropoutRNNCellMixin.__getstate__": ["<builtin>.super"], "layers.recurrent.DropoutRNNCellMixin.__setstate__": ["<builtin>.super", "keras.backend.ContextValueCache"], "layers.recurrent.SimpleRNNCell.__init__": ["<builtin>.min", "framework.ops.executing_eagerly_outside_functions", "<builtin>.super", "keras.initializers.get", "keras.activations.get", "keras.regularizers.get", "<builtin>.max", "<builtin>.ValueError", "keras.constraints.get"], "layers.recurrent.SimpleRNNCell": ["utils.tf_utils.shape_type_conversion"], "layers.recurrent.SimpleRNNCell.build": ["base_layer.Layer.add_weight", "layers.recurrent._caching_device"], "layers.recurrent._caching_device": ["framework.ops.get_default_graph", "platform.tf_logging.warning", "<builtin>.getattr", "utils.control_flow_util.IsInWhileLoop", "eager.context.executing_eagerly"], "layers.recurrent.SimpleRNNCell.call": ["keras.backend.dot", "keras.backend.bias_add", "util.nest.is_nested", "layers.recurrent.DropoutRNNCellMixin.get_dropout_mask_for_cell", "layers.recurrent.DropoutRNNCellMixin.get_recurrent_dropout_mask_for_cell"], "keras.backend.dot": ["ops.array_ops.shape", "keras.backend.is_sparse", "ops.math_ops.matmul", "<builtin>.zip", "ops.array_ops.reshape", "<builtin>.range", "ops.array_ops.unstack", "<builtin>.tuple", "<builtin>.list", "ops.sparse_ops.sparse_tensor_dense_matmul", "keras.backend.int_shape", "ops.array_ops.transpose", "keras.backend.ndim"], "layers.recurrent.SimpleRNNCell.get_initial_state": ["layers.recurrent._generate_zero_filled_state_for_cell"], "layers.recurrent.SimpleRNNCell.get_config": ["<builtin>.list", "<builtin>.dict", "keras.regularizers.serialize", "<builtin>.super", "layers.recurrent._config_for_enable_caching_device", "keras.constraints.serialize", "keras.initializers.serialize", "keras.activations.serialize"], "layers.recurrent._config_for_enable_caching_device": ["framework.ops.executing_eagerly_outside_functions"], "layers.recurrent.SimpleRNN.__init__": ["platform.tf_logging.warning", "layers.recurrent.SimpleRNNCell.__init__", "<builtin>.super", "keras.regularizers.get", "engine.input_spec.InputSpec"], "layers.recurrent.SimpleRNN.call": ["<builtin>.super"], "layers.recurrent.SimpleRNN.units": [], "layers.recurrent.SimpleRNN.activation": [], "layers.recurrent.SimpleRNN.use_bias": [], "layers.recurrent.SimpleRNN.kernel_initializer": [], "layers.recurrent.SimpleRNN.recurrent_initializer": [], "layers.recurrent.SimpleRNN.bias_initializer": [], "layers.recurrent.SimpleRNN.kernel_regularizer": [], "layers.recurrent.SimpleRNN.recurrent_regularizer": [], "layers.recurrent.SimpleRNN.bias_regularizer": [], "layers.recurrent.SimpleRNN.kernel_constraint": [], "layers.recurrent.SimpleRNN.recurrent_constraint": [], "layers.recurrent.SimpleRNN.bias_constraint": [], "layers.recurrent.SimpleRNN.dropout": [], "layers.recurrent.SimpleRNN.recurrent_dropout": [], "layers.recurrent.SimpleRNN.get_config": ["<builtin>.list", "<builtin>.dict", "keras.regularizers.serialize", "<builtin>.super", "layers.recurrent._config_for_enable_caching_device", "keras.constraints.serialize", "keras.initializers.serialize", "keras.activations.serialize"], "layers.recurrent.SimpleRNN.from_config": ["layers.recurrent.SimpleRNN.__init__"], "layers.recurrent.GRUCell.__init__": ["<builtin>.min", "framework.ops.executing_eagerly_outside_functions", "<builtin>.super", "keras.initializers.get", "keras.activations.get", "keras.regularizers.get", "<builtin>.max", "<builtin>.ValueError", "platform.tf_logging.debug", "keras.constraints.get"], "layers.recurrent.GRUCell": ["utils.tf_utils.shape_type_conversion"], "layers.recurrent.GRUCell.build": ["base_layer.Layer.add_weight", "layers.recurrent._caching_device"], "layers.recurrent.GRUCell.call": ["keras.backend.dot", "ops.array_ops.unstack", "ops.array_ops.split", "keras.backend.bias_add", "util.nest.is_nested", "layers.recurrent.DropoutRNNCellMixin.get_dropout_mask_for_cell", "layers.recurrent.DropoutRNNCellMixin.get_recurrent_dropout_mask_for_cell"], "ops.array_ops.unstack": ["ops.gen_array_ops.unpack", "<builtin>.ValueError", "framework.ops.convert_to_tensor"], "layers.recurrent.GRUCell.get_config": ["<builtin>.list", "<builtin>.dict", "keras.regularizers.serialize", "<builtin>.super", "layers.recurrent._config_for_enable_caching_device", "keras.constraints.serialize", "keras.initializers.serialize", "keras.activations.serialize"], "layers.recurrent.GRUCell.get_initial_state": ["layers.recurrent._generate_zero_filled_state_for_cell"], "layers.recurrent.GRU.__init__": ["platform.tf_logging.warning", "layers.recurrent.GRUCell.__init__", "<builtin>.super", "keras.regularizers.get", "engine.input_spec.InputSpec"], "layers.recurrent.GRU.call": ["<builtin>.super"], "layers.recurrent.GRU.units": [], "layers.recurrent.GRU.activation": [], "layers.recurrent.GRU.recurrent_activation": [], "layers.recurrent.GRU.use_bias": [], "layers.recurrent.GRU.kernel_initializer": [], "layers.recurrent.GRU.recurrent_initializer": [], "layers.recurrent.GRU.bias_initializer": [], "layers.recurrent.GRU.kernel_regularizer": [], "layers.recurrent.GRU.recurrent_regularizer": [], "layers.recurrent.GRU.bias_regularizer": [], "layers.recurrent.GRU.kernel_constraint": [], "layers.recurrent.GRU.recurrent_constraint": [], "layers.recurrent.GRU.bias_constraint": [], "layers.recurrent.GRU.dropout": [], "layers.recurrent.GRU.recurrent_dropout": [], "layers.recurrent.GRU.implementation": [], "layers.recurrent.GRU.reset_after": [], "layers.recurrent.GRU.get_config": ["<builtin>.list", "<builtin>.dict", "keras.regularizers.serialize", "<builtin>.super", "layers.recurrent._config_for_enable_caching_device", "keras.constraints.serialize", "keras.initializers.serialize", "keras.activations.serialize"], "layers.recurrent.GRU.from_config": ["layers.recurrent.GRU.__init__"], "layers.recurrent.LSTMCell.__init__": ["<builtin>.min", "framework.ops.executing_eagerly_outside_functions", "<builtin>.super", "keras.initializers.get", "keras.activations.get", "keras.regularizers.get", "<builtin>.max", "<builtin>.ValueError", "platform.tf_logging.debug", "keras.constraints.get"], "layers.recurrent.LSTMCell": ["utils.tf_utils.shape_type_conversion"], "layers.recurrent.LSTMCell.build": ["base_layer.Layer.add_weight", "layers.recurrent._caching_device"], "layers.recurrent.LSTMCell.build.bias_initializer": ["keras.backend.concatenate", "keras.initializers.get"], "layers.recurrent.LSTMCell._compute_carry_and_output": ["keras.backend.dot"], "layers.recurrent.LSTMCell._compute_carry_and_output_fused": [], "layers.recurrent.LSTMCell.call": ["keras.backend.dot", "ops.array_ops.split", "keras.backend.bias_add", "layers.recurrent.LSTMCell._compute_carry_and_output", "layers.recurrent.LSTMCell._compute_carry_and_output_fused", "layers.recurrent.DropoutRNNCellMixin.get_dropout_mask_for_cell", "layers.recurrent.DropoutRNNCellMixin.get_recurrent_dropout_mask_for_cell"], "layers.recurrent.LSTMCell.get_config": ["<builtin>.list", "<builtin>.dict", "keras.regularizers.serialize", "<builtin>.super", "layers.recurrent._config_for_enable_caching_device", "keras.constraints.serialize", "keras.initializers.serialize", "keras.activations.serialize"], "layers.recurrent.LSTMCell.get_initial_state": ["<builtin>.list", "layers.recurrent._generate_zero_filled_state_for_cell"], "layers.recurrent.PeepholeLSTMCell.__init__": ["warnings.warn", "<builtin>.super"], "layers.recurrent.PeepholeLSTMCell.build": ["<builtin>.super", "base_layer.Layer.add_weight"], "layers.recurrent.PeepholeLSTMCell._compute_carry_and_output": ["keras.backend.dot"], "layers.recurrent.PeepholeLSTMCell._compute_carry_and_output_fused": [], "layers.recurrent.LSTM.__init__": ["platform.tf_logging.warning", "<builtin>.super", "keras.regularizers.get", "layers.recurrent.LSTMCell.__init__", "engine.input_spec.InputSpec"], "layers.recurrent.LSTM.call": ["<builtin>.super"], "layers.recurrent.LSTM.units": [], "layers.recurrent.LSTM.activation": [], "layers.recurrent.LSTM.recurrent_activation": [], "layers.recurrent.LSTM.use_bias": [], "layers.recurrent.LSTM.kernel_initializer": [], "layers.recurrent.LSTM.recurrent_initializer": [], "layers.recurrent.LSTM.bias_initializer": [], "layers.recurrent.LSTM.unit_forget_bias": [], "layers.recurrent.LSTM.kernel_regularizer": [], "layers.recurrent.LSTM.recurrent_regularizer": [], "layers.recurrent.LSTM.bias_regularizer": [], "layers.recurrent.LSTM.kernel_constraint": [], "layers.recurrent.LSTM.recurrent_constraint": [], "layers.recurrent.LSTM.bias_constraint": [], "layers.recurrent.LSTM.dropout": [], "layers.recurrent.LSTM.recurrent_dropout": [], "layers.recurrent.LSTM.implementation": [], "layers.recurrent.LSTM.get_config": ["<builtin>.list", "<builtin>.dict", "keras.regularizers.serialize", "<builtin>.super", "layers.recurrent._config_for_enable_caching_device", "keras.constraints.serialize", "keras.initializers.serialize", "keras.activations.serialize"], "layers.recurrent.LSTM.from_config": ["layers.recurrent.LSTM.__init__"], "layers.recurrent._generate_dropout_mask.dropped_inputs": ["keras.backend.dropout"], "keras.backend.dropout": ["ops.nn.dropout_v2", "numpy.random.randint"], "layers.recurrent._standardize_args.to_list_or_none": ["<builtin>.isinstance", "<builtin>.list"], "layers.recurrent._generate_zero_filled_state.create_zeros": ["ops.array_ops.zeros", "framework.tensor_shape.TensorShape"], "utils.control_flow_util.IsInWhileLoop": ["utils.control_flow_util.GetContainingWhileContext"], "layers.recurrent._caching_device.<lambda1>": [], "layers.recurrent_v2": [], "layers.recurrent_v2._use_new_code": [], "layers.recurrent_v2._DefunWrapper.__init__": ["<builtin>.ValueError", "uuid.uuid4", "eager.function.defun_with_attributes", "<builtin>.str"], "layers.recurrent_v2._DefunWrapper.__deepcopy__": ["<builtin>.type", "<builtin>.id"], "layers.recurrent_v2.GRUCell.__init__": ["<builtin>.super"], "layers.recurrent_v2.GRU.__init__": ["framework.config.list_logical_devices", "framework.ops.executing_eagerly_outside_functions", "platform.tf_logging.warning", "layers.recurrent_v2._DefunWrapper.__init__", "layers.recurrent_v2._use_new_code", "<builtin>.super", "platform.tf_logging.debug"], "layers.recurrent_v2.GRU.call": ["recurrent.DropoutRNNCellMixin._validate_args_if_ragged", "<builtin>.list", "keras.backend.convert_inputs_if_ragged", "keras.backend.maybe_convert_to_ragged", "<builtin>.isinstance", "recurrent.DropoutRNNCellMixin._maybe_reset_cell_dropout_mask", "recurrent.DropoutRNNCellMixin.add_update", "ops.state_ops.assign", "keras.backend.int_shape", "recurrent.DropoutRNNCellMixin._process_inputs", "layers.recurrent_v2._runtime", "keras.backend.rnn", "layers.recurrent_v2.GRU._defun_gru_call"], "recurrent.DropoutRNNCellMixin._validate_args_if_ragged": [], "recurrent.DropoutRNNCellMixin._process_inputs": [], "recurrent.DropoutRNNCellMixin._maybe_reset_cell_dropout_mask": [], "layers.recurrent_v2.GRU.call.step": ["recurrent.DropoutRNNCellMixin.cell"], "recurrent.DropoutRNNCellMixin.cell": [], "layers.recurrent_v2._runtime": ["framework.ops.device", "framework.constant_op.constant"], "layers.recurrent_v2.GRU._defun_gru_call": ["recurrent.DropoutRNNCellMixin.reset_dropout_mask", "framework.config.list_logical_devices", "layers.recurrent_v2._read_variable_value", "layers.recurrent_v2._get_context_device_type", "layers.recurrent_v2._use_new_code", "layers.recurrent_v2.standard_gru", "eager.context.executing_eagerly", "layers.recurrent_v2.is_cudnn_supported_inputs", "layers.recurrent_v2.gpu_gru", "layers.recurrent_v2.gru_with_backend_selection", "recurrent.DropoutRNNCellMixin.get_dropout_mask_for_cell"], "recurrent.DropoutRNNCellMixin.add_update": [], "recurrent.DropoutRNNCellMixin.reset_dropout_mask": [], "layers.recurrent_v2._read_variable_value": ["cell.recurrent_kernel.read_value", "<builtin>.isinstance", "cell.kernel.read_value", "cell.bias.read_value"], "layers.recurrent_v2._get_context_device_type": ["eager.context.get_device_name", "device.DeviceSpec.from_string"], "layers.recurrent_v2.is_cudnn_supported_inputs": ["layers.recurrent_v2.has_fully_masked_sequence", "ops.array_ops.transpose", "ops.math_ops.logical_and", "layers.recurrent_v2.is_sequence_right_padded", "ops.math_ops.logical_not"], "layers.recurrent_v2.gpu_gru": ["ops.array_ops.squeeze", "platform.sysconfig.get_build_info", "ops.array_ops.reverse_sequence_v2", "layers.recurrent_v2.calculate_sequence_by_mask", "ops.array_ops.transpose", "ops.gen_cudnn_rnn_ops.CudnnRNNV3", "ops.gen_cudnn_rnn_ops.CudnnRNN", "layers.recurrent_v2._runtime", "layers.recurrent_v2._canonical_to_params", "ops.array_ops.expand_dims", "ops.array_ops.split", "keras.backend.flatten", "ops.array_ops.reverse", "framework.constant_op.constant"], "layers.recurrent_v2.standard_gru": ["layers.recurrent_v2._runtime", "keras.backend.rnn", "ops.array_ops.unstack", "keras.backend.int_shape"], "layers.recurrent_v2.gru_with_backend_selection": ["uuid.uuid4", "layers.recurrent_v2._function_register", "ops.control_flow_ops.execute_fn_for_device", "layers.recurrent_v2._use_new_code", "layers.recurrent_v2._generate_defun_backend", "<builtin>.str"], "layers.recurrent_v2.standard_gru.step": ["ops.nn.sigmoid", "ops.nn.tanh", "keras.backend.dot", "ops.array_ops.split", "keras.backend.bias_add"], "ops.nn.sigmoid": [], "ops.nn.tanh": [], "keras.backend.flatten": ["ops.array_ops.reshape"], "platform.sysconfig.get_build_info": [], "layers.recurrent_v2.calculate_sequence_by_mask": ["ops.math_ops.cast", "ops.math_ops.reduce_sum"], "ops.array_ops.reverse_sequence_v2": ["ops.gen_array_ops.reverse_sequence"], "ops.gen_cudnn_rnn_ops.CudnnRNNV3": [], "ops.array_ops.reverse": [], "ops.gen_cudnn_rnn_ops.CudnnRNN": [], "layers.recurrent_v2.gru_with_backend_selection.gpu_gru_with_fallback": ["layers.recurrent_v2.is_cudnn_supported_inputs", "layers.recurrent_v2.gpu_gru", "ops.control_flow_ops.cond"], "layers.recurrent_v2.gru_with_backend_selection.gpu_gru_with_fallback.cudnn_gru_fn": ["layers.recurrent_v2.gpu_gru"], "layers.recurrent_v2.gru_with_backend_selection.gpu_gru_with_fallback.standard_gru_fn": ["layers.recurrent_v2.standard_gru"], "layers.recurrent_v2.gru_with_backend_selection.<dict2>.<lambda1>": [], "layers.recurrent_v2.gru_with_backend_selection.<lambda1>": ["layers.recurrent_v2.standard_gru"], "layers.recurrent_v2.gru_with_backend_selection.<dict2>.<lambda2>": [], "layers.recurrent_v2.gru_with_backend_selection.<lambda2>": ["layers.recurrent_v2.gru_with_backend_selection.gpu_gru_with_fallback"], "ops.control_flow_ops.execute_fn_for_device": ["ops.control_flow_util.GraphOrParentsInXlaContext", "<builtin>.list", "ops.control_flow_ops._indexed_case_helper", "framework.ops.get_default_graph", "ops.gen_functional_ops.device_index"], "layers.recurrent_v2._generate_defun_backend": ["eager.function.defun_with_attributes"], "layers.recurrent_v2._function_register": [], "layers.recurrent_v2.LSTMCell.__init__": ["<builtin>.super"], "layers.recurrent_v2.LSTM.__init__": ["framework.config.list_logical_devices", "framework.ops.executing_eagerly_outside_functions", "engine.input_spec.InputSpec", "platform.tf_logging.warning", "layers.recurrent_v2._DefunWrapper.__init__", "layers.recurrent_v2._use_new_code", "<builtin>.super", "platform.tf_logging.debug"], "layers.recurrent_v2.LSTM.call": ["keras.backend.maybe_convert_to_ragged", "<builtin>.isinstance", "recurrent.DropoutRNNCellMixin.add_update", "keras.backend.rnn", "recurrent.DropoutRNNCellMixin._validate_args_if_ragged", "<builtin>.list", "recurrent.DropoutRNNCellMixin.reset_dropout_mask", "framework.config.list_logical_devices", "layers.recurrent_v2._read_variable_value", "eager.context.executing_eagerly", "ops.state_ops.assign", "layers.recurrent_v2.is_cudnn_supported_inputs", "keras.backend.convert_inputs_if_ragged", "layers.recurrent_v2.standard_lstm", "layers.recurrent_v2._get_context_device_type", "layers.recurrent_v2.gpu_lstm", "layers.recurrent_v2.lstm_with_backend_selection", "<builtin>.zip", "layers.recurrent_v2._runtime", "recurrent.DropoutRNNCellMixin._maybe_reset_cell_dropout_mask", "layers.recurrent_v2._use_new_code", "keras.backend.int_shape", "recurrent.DropoutRNNCellMixin._process_inputs", "recurrent.DropoutRNNCellMixin.get_dropout_mask_for_cell"], "layers.recurrent_v2.LSTM.call.step": ["recurrent.DropoutRNNCellMixin.cell"], "layers.recurrent_v2.gpu_lstm": ["ops.array_ops.squeeze", "platform.sysconfig.get_build_info", "ops.array_ops.reverse_sequence_v2", "layers.recurrent_v2.calculate_sequence_by_mask", "ops.array_ops.zeros_like", "ops.array_ops.concat", "ops.array_ops.transpose", "ops.gen_cudnn_rnn_ops.CudnnRNNV3", "ops.gen_cudnn_rnn_ops.CudnnRNN", "layers.recurrent_v2._runtime", "layers.recurrent_v2._canonical_to_params", "ops.array_ops.expand_dims", "ops.array_ops.split", "ops.array_ops.reverse", "framework.constant_op.constant"], "layers.recurrent_v2.standard_lstm": ["layers.recurrent_v2._runtime", "keras.backend.rnn", "keras.backend.int_shape"], "layers.recurrent_v2.lstm_with_backend_selection": ["uuid.uuid4", "layers.recurrent_v2._function_register", "ops.control_flow_ops.execute_fn_for_device", "layers.recurrent_v2._use_new_code", "layers.recurrent_v2._generate_defun_backend", "<builtin>.str"], "layers.recurrent_v2._canonical_to_params.convert": ["ops.array_ops.transpose"], "layers.recurrent_v2.standard_lstm.step": ["ops.nn.sigmoid", "ops.nn.tanh", "keras.backend.dot", "ops.array_ops.split", "keras.backend.bias_add"], "layers.recurrent_v2.lstm_with_backend_selection.gpu_lstm_with_fallback": ["layers.recurrent_v2.gpu_lstm", "layers.recurrent_v2.is_cudnn_supported_inputs", "ops.control_flow_ops.cond"], "layers.recurrent_v2.lstm_with_backend_selection.gpu_lstm_with_fallback.cudnn_lstm_fn": ["layers.recurrent_v2.gpu_lstm"], "layers.recurrent_v2.lstm_with_backend_selection.gpu_lstm_with_fallback.stardard_lstm_fn": ["layers.recurrent_v2.standard_lstm"], "layers.recurrent_v2.lstm_with_backend_selection.<dict2>.<lambda1>": [], "layers.recurrent_v2.lstm_with_backend_selection.<lambda1>": ["layers.recurrent_v2.standard_lstm"], "layers.recurrent_v2.lstm_with_backend_selection.<dict2>.<lambda2>": [], "layers.recurrent_v2.lstm_with_backend_selection.<lambda2>": ["layers.recurrent_v2.lstm_with_backend_selection.gpu_lstm_with_fallback"], "layers.recurrent_v2.is_sequence_right_padded": ["ops.math_ops.reduce_all", "ops.math_ops.reduce_sum", "ops.array_ops.sequence_mask", "ops.array_ops.shape", "ops.math_ops.equal", "ops.math_ops.cast"], "ops.array_ops.sequence_mask": ["ops.array_ops.expand_dims", "<builtin>.ValueError", "framework.constant_op.constant", "ops.gen_math_ops._max", "framework.ops.convert_to_tensor", "ops.gen_math_ops.maximum", "ops.array_ops._all_dimensions", "ops.gen_math_ops.cast", "framework.ops.name_scope", "ops.gen_math_ops._range"], "ops.math_ops.reduce_all": ["ops.math_ops._ReductionDims", "ops.gen_math_ops._all", "ops.math_ops._may_reduce_to_scalar", "<builtin>.bool"], "layers.recurrent_v2.has_fully_masked_sequence": ["ops.math_ops.reduce_all", "ops.math_ops.logical_not", "ops.math_ops.reduce_any"], "ops.math_ops.reduce_any": ["ops.math_ops._ReductionDims", "ops.gen_math_ops._any", "ops.math_ops._may_reduce_to_scalar", "<builtin>.bool"], "eager.context.get_device_name": ["eager.context.context"], "cell.recurrent_kernel.read_value": [], "cell.kernel.read_value": [], "cell.bias.read_value": [], "layers.rnn_cell_wrapper_v2": [], "layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.__init__": ["utils.tf_inspect.getfullargspec", "<builtin>.super"], "layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.call": ["recurrent.AbstractRNNCell._call_wrapped_cell"], "recurrent.AbstractRNNCell._call_wrapped_cell": [], "layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.build": [], "layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super"], "layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.from_config": ["layers.serialization.deserialize", "layers.rnn_cell_wrapper_v2._RNNCellWrapperV2.__init__"], "layers.serialization.deserialize": ["layers.serialization.populate_deserializable_objects", "utils.generic_utils.deserialize_keras_object"], "layers.rnn_cell_wrapper_v2.DropoutWrapper.__init__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.ValueError"], "layers.rnn_cell_wrapper_v2.ResidualWrapper.__init__": ["<builtin>.super"], "layers.rnn_cell_wrapper_v2.DeviceWrapper.__init__": ["<builtin>.super"], "layers.serialization": ["threading.local", "util.tf_export.keras_export"], "layers.serialization.populate_deserializable_objects": ["utils.generic_utils.populate_dict_with_module_objects", "<builtin>.hasattr", "python.tf2.enabled"], "layers.serialization.populate_deserializable_objects.<lambda1>": ["<builtin>.issubclass", "utils.tf_inspect.isclass"], "utils.generic_utils.populate_dict_with_module_objects": ["<builtin>.getattr", "<builtin>.dir"], "layers.serialization.populate_deserializable_objects.<lambda2>": ["<builtin>.issubclass", "utils.tf_inspect.isclass"], "layers.serialization.serialize": ["utils.generic_utils.serialize_keras_object"], "layers.wrappers": [], "layers.wrappers.Wrapper.__init__": ["<builtin>.isinstance", "<builtin>.super"], "layers.wrappers.Wrapper.build": [], "layers.wrappers.Wrapper.activity_regularizer": ["<builtin>.hasattr"], "layers.wrappers.Wrapper.get_config": ["<builtin>.list", "utils.generic_utils.serialize_keras_object", "<builtin>.super", "<builtin>.dict"], "layers.wrappers.Wrapper.from_config": ["layers.wrappers.Wrapper.__init__", "keras.layers.deserialize", "copy.deepcopy"], "layers.wrappers.TimeDistributed.__init__": ["utils.layer_utils.is_builtin_layer", "<builtin>.super", "<builtin>.getattr", "<builtin>.isinstance", "<builtin>.ValueError"], "utils.layer_utils.is_builtin_layer": ["<builtin>.getattr"], "layers.wrappers.TimeDistributed._get_shape_tuple": ["<builtin>.any", "<builtin>.enumerate", "keras.backend.shape", "<builtin>.list", "<builtin>.isinstance", "<builtin>.tuple", "keras.backend.int_shape"], "layers.wrappers.TimeDistributed._remove_timesteps": ["framework.tensor_shape.TensorShape"], "layers.wrappers.TimeDistributed.build": ["<builtin>.any", "utils.tf_utils.convert_shapes", "<builtin>.str", "<builtin>.super", "util.nest.flatten", "util.nest.map_structure", "<builtin>.tuple", "<builtin>.ValueError"], "layers.wrappers.TimeDistributed.build.<lambda1>": [], "layers.wrappers.TimeDistributed.build.<lambda2>": ["engine.input_spec.InputSpec"], "layers.wrappers.TimeDistributed.compute_output_shape": ["util.nest.map_structure", "utils.tf_utils.convert_shapes", "util.nest.flatten"], "layers.wrappers.TimeDistributed.compute_output_shape.insert_timesteps": ["framework.tensor_shape.TensorShape"], "layers.wrappers.TimeDistributed.call": ["keras.backend.convert_inputs_if_ragged", "<builtin>.any", "utils.generic_utils.to_list", "layers.wrappers.TimeDistributed.compute_output_shape", "eager.context.executing_eagerly", "utils.generic_utils.has_arg", "utils.tf_utils.convert_shapes", "util.nest.flatten", "keras.backend.rnn", "layers.wrappers.TimeDistributed._get_shape_tuple", "keras.backend.reshape", "<builtin>.all", "util.nest.map_structure", "<builtin>.ValueError", "util.nest.map_structure_up_to"], "layers.wrappers.TimeDistributed.call.<lambda1>": ["framework.tensor_shape.TensorShape", "keras.backend.int_shape"], "layers.wrappers.TimeDistributed.call.step": [], "layers.wrappers.TimeDistributed.call.<lambda2>": ["keras.backend.maybe_convert_to_ragged"], "layers.wrappers.TimeDistributed.call.<lambda3>": ["<builtin>.isinstance"], "layers.wrappers.TimeDistributed.call.<lambda4>": [], "layers.wrappers.TimeDistributed.call.<lambda5>": [], "layers.wrappers.TimeDistributed.call.<lambda6>": ["ops.array_ops.shape"], "layers.wrappers.TimeDistributed.call.<lambda7>": ["layers.wrappers.TimeDistributed._get_shape_tuple"], "layers.wrappers.TimeDistributed.call.<lambda8>": ["layers.wrappers.TimeDistributed._get_shape_tuple"], "layers.wrappers.TimeDistributed.call.<lambda9>": [], "layers.wrappers.TimeDistributed.compute_mask": ["<builtin>.any", "<builtin>.len", "utils.generic_utils.to_list", "keras.backend.any", "utils.tf_utils.convert_shapes", "util.nest.flatten", "layers.wrappers.TimeDistributed._get_shape_tuple", "keras.backend.reshape", "<builtin>.range", "util.nest.map_structure", "keras.backend.compute_output_shape", "keras.backend.int_shape", "util.nest.map_structure_up_to"], "layers.wrappers.TimeDistributed.compute_mask.<lambda1>": ["framework.tensor_shape.TensorShape", "keras.backend.int_shape"], "layers.wrappers.TimeDistributed.compute_mask.<lambda2>": ["<builtin>.isinstance"], "layers.wrappers.TimeDistributed.compute_mask.<lambda3>": ["layers.wrappers.TimeDistributed._get_shape_tuple"], "layers.wrappers.TimeDistributed.compute_mask.<lambda4>": ["keras.backend.shape"], "keras.backend.compute_output_shape": [], "layers.wrappers.Bidirectional.__init__": ["<builtin>.len", "<builtin>.super", "layers.wrappers.Bidirectional._verify_layer_config", "layers.wrappers.Bidirectional._recreate_layer_from_config", "layers.wrappers.Bidirectional.__init__.force_zero_output_for_mask", "<builtin>.isinstance", "utils.generic_utils.serialize_keras_object", "<builtin>.ValueError"], "layers.wrappers.Bidirectional._recreate_layer_from_config": ["utils.tf_inspect.getfullargspec", "<builtin>.getattr"], "layers.wrappers.Bidirectional._verify_layer_config": ["<builtin>.getattr", "<builtin>.ValueError"], "layers.wrappers.Bidirectional.__init__.force_zero_output_for_mask": ["<builtin>.getattr"], "layers.wrappers.Bidirectional": ["utils.tf_utils.shape_type_conversion"], "layers.wrappers.Bidirectional.compute_output_shape": ["framework.tensor_shape.TensorShape", "utils.tf_utils.convert_shapes", "copy.copy"], "layers.wrappers.Bidirectional.__call__": ["<builtin>.len", "<builtin>.ValueError", "engine.input_spec.InputSpec", "keras.backend.is_keras_tensor", "<builtin>.str", "<builtin>.super", "util.nest.flatten", "<builtin>.isinstance", "layers.recurrent._standardize_args", "keras.backend.int_shape", "<builtin>.range"], "layers.wrappers.Bidirectional.call": ["<builtin>.len", "utils.generic_utils.has_arg", "keras.backend.reverse", "<builtin>.getattr", "keras.backend.concatenate", "<builtin>.isinstance", "<builtin>.ValueError"], "layers.wrappers.Bidirectional.reset_states": [], "layers.wrappers.Bidirectional.build": ["keras.backend.name_scope"], "layers.wrappers.Bidirectional.compute_mask": ["<builtin>.isinstance"], "layers.wrappers.Bidirectional.constraints": ["<builtin>.hasattr"], "layers.wrappers.Bidirectional.get_config": ["<builtin>.hasattr", "<builtin>.list", "<builtin>.super", "<builtin>.dict"], "layers.wrappers.Bidirectional.from_config": ["layers.wrappers.Bidirectional.__init__", "keras.layers.deserialize", "copy.deepcopy"], "legacy_tf_layers.base": ["util.tf_export.tf_export", "util.tf_export.keras_export", "utils.tf_contextlib.contextmanager"], "legacy_tf_layers.base.keras_style_scope": [], "legacy_tf_layers.base.set_keras_style": [], "legacy_tf_layers.base._is_in_keras_style_scope": [], "legacy_tf_layers.base.Layer.__init__": ["legacy_tf_layers.base._is_in_keras_style_scope", "<builtin>.super", "mixed_precision.policy.Policy", "ops.variable_scope.variable_scope", "<builtin>.ValueError"], "legacy_tf_layers.base.Layer.graph": ["warnings.warn", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "legacy_tf_layers.base.Layer._init_set_name": ["legacy_tf_layers.base.Layer._make_unique_name", "<builtin>.isinstance"], "legacy_tf_layers.base.Layer._make_unique_name": ["keras.backend.unique_object_name", "engine.base_layer.to_snake_case"], "engine.base_layer.to_snake_case": [], "legacy_tf_layers.base.Layer.scope_name": ["<builtin>.ValueError"], "legacy_tf_layers.base.Layer.add_loss": ["<builtin>.len", "eager.context.executing_eagerly", "legacy_tf_layers.base._add_elements_to_collection", "<builtin>.super"], "legacy_tf_layers.base._add_elements_to_collection": ["eager.context.executing_eagerly", "framework.ops.get_collection_ref", "<builtin>.id", "<builtin>.RuntimeError", "util.nest.flatten"], "legacy_tf_layers.base.Layer._name_scope": ["<builtin>.super"], "legacy_tf_layers.base.Layer._set_scope": ["ops.variable_scope.variable_scope"], "legacy_tf_layers.base.Layer.add_weight": ["ops.variables.global_variables", "ops.variables.trainable_variables", "framework.dtypes.as_dtype", "<builtin>.len", "framework.ops.init_scope", "legacy_tf_layers.base.Layer._set_scope", "ops.variable_scope.variable_scope", "ops.variable_scope._get_default_variable_store", "base_layer.Layer._handle_weight_regularization", "<builtin>.hasattr", "framework.ops.get_default_graph", "framework.ops.executing_eagerly_outside_functions", "<builtin>.super", "keras.backend.name_scope", "legacy_tf_layers.base.Layer.add_weight._should_add_regularizer", "<builtin>.TypeError", "<builtin>.set", "eager.context.executing_eagerly", "<builtin>.ValueError", "legacy_tf_layers.base.Layer._name_scope"], "legacy_tf_layers.base.Layer.add_weight._should_add_regularizer": ["engine.base_layer_utils.is_split_variable"], "ops.variables.global_variables": ["framework.ops.get_collection"], "base_layer.Layer._handle_weight_regularization": [], "ops.variable_scope._get_default_variable_store": ["framework.ops.get_collection", "framework.ops.add_to_collection", "ops.variable_scope._VariableStore.__init__"], "ops.variables.trainable_variables": ["framework.ops.get_collection"], "legacy_tf_layers.base.Layer.__call__": ["eager.context.executing_eagerly", "framework.ops.executing_eagerly_outside_functions", "<builtin>.super", "legacy_tf_layers.variable_scope_shim.fn_args", "legacy_tf_layers.base.Layer._set_scope", "<builtin>.ValueError", "ops.variable_scope.variable_scope", "legacy_tf_layers.base._add_elements_to_collection"], "legacy_tf_layers.variable_scope_shim.fn_args": ["<builtin>.tuple", "<builtin>.hasattr", "utils.tf_inspect.getfullargspec", "legacy_tf_layers.variable_scope_shim.fn_args", "legacy_tf_layers.variable_scope_shim._is_bound_method", "<builtin>.len", "utils.tf_inspect.ismethod", "<builtin>.isinstance"], "legacy_tf_layers.base.Layer.__deepcopy__": ["<builtin>.setattr", "<builtin>.set", "<builtin>.id", "engine.base_layer.is_tensor_or_tensor_list", "copy.deepcopy", "copy.copy", "Layer.__class__.__new__"], "engine.base_layer.is_tensor_or_tensor_list": [], "legacy_tf_layers.base.Layer.__setattr__": ["<builtin>.super"], "legacy_tf_layers.base.Layer._is_legacy_layer": [], "framework.ops.get_collection_ref": ["framework.ops.get_default_graph", "framework.ops.Graph.get_collection_ref"], "legacy_tf_layers.convolutional": ["util.tf_export.tf_export", "util.tf_export.keras_export"], "legacy_tf_layers.convolutional.Conv1D.__init__": ["<builtin>.super"], "legacy_tf_layers.convolutional.conv1d": ["warnings.warn", "layers.Conv1D.apply", "legacy_tf_layers.convolutional.Conv1D.__init__"], "layers.Conv1D.apply": [], "legacy_tf_layers.convolutional.Conv2D.__init__": ["<builtin>.super"], "legacy_tf_layers.convolutional.conv2d": ["warnings.warn", "base.Layer.apply", "legacy_tf_layers.convolutional.Conv2D.__init__"], "base.Layer.apply": [], "legacy_tf_layers.convolutional.Conv3D.__init__": ["<builtin>.super"], "legacy_tf_layers.convolutional.conv3d": ["warnings.warn", "base.Layer.apply", "legacy_tf_layers.convolutional.Conv3D.__init__"], "legacy_tf_layers.convolutional.SeparableConv1D.__init__": ["<builtin>.super"], "legacy_tf_layers.convolutional.SeparableConv2D.__init__": ["<builtin>.super"], "legacy_tf_layers.convolutional.separable_conv1d": ["warnings.warn", "base.Layer.apply", "legacy_tf_layers.convolutional.SeparableConv1D.__init__"], "legacy_tf_layers.convolutional.separable_conv2d": ["warnings.warn", "base.Layer.apply", "legacy_tf_layers.convolutional.SeparableConv2D.__init__"], "legacy_tf_layers.convolutional.Conv2DTranspose.__init__": ["<builtin>.super"], "legacy_tf_layers.convolutional.conv2d_transpose": ["warnings.warn", "base.Layer.apply", "legacy_tf_layers.convolutional.Conv2DTranspose.__init__"], "legacy_tf_layers.convolutional.Conv3DTranspose.__init__": ["<builtin>.super"], "legacy_tf_layers.convolutional.conv3d_transpose": ["warnings.warn", "legacy_tf_layers.convolutional.Conv3DTranspose.__init__", "base.Layer.apply"], "legacy_tf_layers.core": ["util.tf_export.keras_export", "util.tf_export.tf_export"], "legacy_tf_layers.core.Dense.__init__": ["<builtin>.super"], "legacy_tf_layers.core.dense": ["legacy_tf_layers.core.Dense.__init__", "layers.Dense.apply", "warnings.warn"], "layers.Dense.apply": [], "legacy_tf_layers.core.Dropout.__init__": ["<builtin>.super"], "legacy_tf_layers.core.Dropout.call": ["<builtin>.super"], "legacy_tf_layers.core.dropout": ["base.Layer.apply", "legacy_tf_layers.core.Dropout.__init__", "warnings.warn"], "legacy_tf_layers.core.flatten": ["base.Layer.apply", "layers.Flatten.__init__", "base.Layer.__init__", "warnings.warn"], "layers.Flatten.__init__": [], "base.Layer.__init__": [], "legacy_tf_layers.normalization": ["util.tf_export.keras_export", "util.tf_export.tf_export"], "legacy_tf_layers.normalization.BatchNormalization.__init__": ["<builtin>.super"], "legacy_tf_layers.normalization.BatchNormalization.call": ["<builtin>.super"], "legacy_tf_layers.normalization.batch_normalization": ["warnings.warn", "legacy_tf_layers.normalization.BatchNormalization.__init__", "batch_normalization_v1.BatchNormalization.apply"], "batch_normalization_v1.BatchNormalization.apply": [], "legacy_tf_layers.pooling": ["util.tf_export.tf_export", "util.tf_export.keras_export"], "legacy_tf_layers.pooling.AveragePooling1D.__init__": ["<builtin>.super", "<builtin>.ValueError"], "legacy_tf_layers.pooling.average_pooling1d": ["warnings.warn", "legacy_tf_layers.pooling.AveragePooling1D.__init__", "layers.AveragePooling1D.apply"], "layers.AveragePooling1D.apply": [], "legacy_tf_layers.pooling.MaxPooling1D.__init__": ["<builtin>.super", "<builtin>.ValueError"], "legacy_tf_layers.pooling.max_pooling1d": ["legacy_tf_layers.pooling.MaxPooling1D.__init__", "warnings.warn", "base.Layer.apply"], "legacy_tf_layers.pooling.AveragePooling2D.__init__": ["<builtin>.super", "<builtin>.ValueError"], "legacy_tf_layers.pooling.average_pooling2d": ["legacy_tf_layers.pooling.AveragePooling2D.__init__", "warnings.warn", "base.Layer.apply"], "legacy_tf_layers.pooling.MaxPooling2D.__init__": ["<builtin>.super", "<builtin>.ValueError"], "legacy_tf_layers.pooling.max_pooling2d": ["legacy_tf_layers.pooling.MaxPooling2D.__init__", "warnings.warn", "base.Layer.apply"], "legacy_tf_layers.pooling.AveragePooling3D.__init__": ["<builtin>.super", "<builtin>.ValueError"], "legacy_tf_layers.pooling.average_pooling3d": ["legacy_tf_layers.pooling.AveragePooling3D.__init__", "warnings.warn", "base.Layer.apply"], "legacy_tf_layers.pooling.MaxPooling3D.__init__": ["<builtin>.super", "<builtin>.ValueError"], "legacy_tf_layers.pooling.max_pooling3d": ["legacy_tf_layers.pooling.MaxPooling3D.__init__", "warnings.warn", "base.Layer.apply"], "legacy_tf_layers.variable_scope_shim": [], "legacy_tf_layers.variable_scope_shim.as_shape": ["framework.tensor_shape.TensorShape", "<builtin>.isinstance"], "legacy_tf_layers.variable_scope_shim._is_callable_object": ["<builtin>.hasattr", "utils.tf_inspect.ismethod"], "utils.tf_inspect.ismethod": ["inspect.ismethod", "util.tf_decorator.unwrap"], "legacy_tf_layers.variable_scope_shim._has_kwargs": ["<builtin>.TypeError", "legacy_tf_layers.variable_scope_shim._is_callable_object", "utils.tf_inspect.getfullargspec", "<builtin>.type", "<builtin>.callable", "<builtin>.isinstance"], "legacy_tf_layers.variable_scope_shim._is_bound_method": ["utils.tf_inspect.ismethod", "util.tf_decorator.unwrap"], "legacy_tf_layers.variable_scope_shim.validate_synchronization_aggregation_trainable": ["ops.variables.VariableAggregationV2", "<builtin>.ValueError", "ops.variables.VariableSynchronization", "<builtin>.isinstance"], "ops.variables.VariableAggregationV2": [], "ops.variables.VariableSynchronization": [], "legacy_tf_layers.variable_scope_shim._EagerVariableStore.__init__": [], "legacy_tf_layers.variable_scope_shim._EagerVariableStore.get_variable": ["<builtin>.ValueError", "eager.context.executing_eagerly", "legacy_tf_layers.variable_scope_shim._has_kwargs", "legacy_tf_layers.variable_scope_shim.validate_synchronization_aggregation_trainable", "framework.ops.init_scope", "legacy_tf_layers.variable_scope_shim.fn_args", "<builtin>.callable", "legacy_tf_layers.variable_scope_shim._EagerVariableStore.get_variable._true_getter"], "legacy_tf_layers.variable_scope_shim._EagerVariableStore.get_variable._true_getter": ["<builtin>.ValueError", "legacy_tf_layers.variable_scope_shim._EagerVariableStore._get_single_variable"], "legacy_tf_layers.variable_scope_shim._EagerVariableStore._get_single_variable": ["<builtin>.ValueError", "framework.dtypes.as_dtype", "legacy_tf_layers.variable_scope_shim._EagerVariableStore._get_default_initializer", "<builtin>.format", "legacy_tf_layers.variable_scope_shim._EagerVariableStore.add_regularizer", "platform.tf_logging.vlog", "ops.variables.Variable", "framework.ops.init_scope", "utils.tf_inspect.getargspec", "utils.tf_inspect.isclass", "legacy_tf_layers.variable_scope_shim.as_shape", "functools.partial", "<builtin>.callable"], "legacy_tf_layers.variable_scope_shim._EagerVariableStore._get_default_initializer": ["<builtin>.ValueError", "ops.init_ops.glorot_uniform_initializer", "ops.init_ops.zeros_initializer"], "utils.tf_inspect.getargspec": ["inspect.getargspec", "<builtin>.type", "<builtin>.next", "<builtin>.isinstance", "utils.tf_inspect._get_argspec_for_partial", "util.tf_decorator.unwrap"], "<builtin>.format": [], "legacy_tf_layers.variable_scope_shim._EagerVariableStore.add_regularizer": ["functools.partial"], "ops.init_ops.zeros_initializer": [], "legacy_tf_layers.variable_scope_shim.VariableAndLossTracker.__init__": ["legacy_tf_layers.variable_scope_shim._EagerVariableStore.__init__"], "legacy_tf_layers.variable_scope_shim.VariableAndLossTracker._variable_creator": [], "legacy_tf_layers.variable_scope_shim.VariableAndLossTracker": ["utils.tf_contextlib.contextmanager"], "legacy_tf_layers.variable_scope_shim.VariableAndLossTracker.scope": ["ops.variable_scope.with_variable_store", "ops.variable_scope.variable_creator_scope"], "ops.variable_scope.with_variable_store": ["framework.ops.get_collection_ref", "<builtin>.list"], "legacy_tf_layers.variable_scope_shim.VariableAndLossTracker.get_regularization_losses": [], "legacy_tf_layers.variable_scope_shim.VariableScopeWrapperLayer.__init__": ["legacy_tf_layers.variable_scope_shim.VariableAndLossTracker.__init__", "<builtin>.super"], "legacy_tf_layers.variable_scope_shim.VariableScopeWrapperLayer.forward_pass": [], "legacy_tf_layers.variable_scope_shim.VariableScopeWrapperLayer.call": ["base_layer.Layer.add_loss", "legacy_tf_layers.variable_scope_shim.VariableAndLossTracker.get_regularization_losses", "legacy_tf_layers.variable_scope_shim.VariableAndLossTracker.scope", "legacy_tf_layers.variable_scope_shim.VariableScopeWrapperLayer.forward_pass"], "base_layer.Layer.add_loss": [], "mixed_precision.autocast_variable": ["framework.ops.register_tensor_conversion_function", "threading.local"], "mixed_precision.autocast_variable.numpy_text": ["<builtin>.repr", "<builtin>.str"], "mixed_precision.autocast_variable.AutoCastVariable.__init__": ["<builtin>.isinstance", "<builtin>.ValueError"], "mixed_precision.autocast_variable.AutoCastVariable._should_cast": ["<builtin>.getattr"], "mixed_precision.autocast_variable.AutoCastVariable.dtype": [], "mixed_precision.autocast_variable.AutoCastVariable.true_dtype": [], "mixed_precision.autocast_variable.AutoCastVariable._cast_dtype": ["<builtin>.getattr"], "mixed_precision.autocast_variable.AutoCastVariable.value": ["ops.math_ops.cast", "mixed_precision.autocast_variable.AutoCastVariable._should_cast"], "mixed_precision.autocast_variable.AutoCastVariable.read_value": ["ops.math_ops.cast"], "mixed_precision.autocast_variable.AutoCastVariable.sparse_read": ["ops.math_ops.cast"], "mixed_precision.autocast_variable.AutoCastVariable.gather_nd": ["ops.math_ops.cast"], "mixed_precision.autocast_variable.AutoCastVariable.__getattr__": ["<builtin>.getattr"], "mixed_precision.autocast_variable.AutoCastVariable._dense_var_to_tensor": ["ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.ValueError", "mixed_precision.autocast_variable.AutoCastVariable._should_cast"], "mixed_precision.autocast_variable.AutoCastVariable._should_act_as_resource_variable": [], "mixed_precision.autocast_variable.AutoCastVariable.__repr__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value", "mixed_precision.autocast_variable.numpy_text", "eager.context.executing_eagerly"], "mixed_precision.autocast_variable.AutoCastVariable.set_shape": [], "mixed_precision.autocast_variable.AutoCastVariable.trainable": [], "mixed_precision.autocast_variable.AutoCastVariable.synchronization": [], "mixed_precision.autocast_variable.AutoCastVariable.aggregation": [], "mixed_precision.autocast_variable.AutoCastVariable.eval": [], "mixed_precision.autocast_variable.AutoCastVariable.initialized_value": [], "mixed_precision.autocast_variable.AutoCastVariable.initial_value": [], "mixed_precision.autocast_variable.AutoCastVariable.constraint": [], "mixed_precision.autocast_variable.AutoCastVariable._apply_assign_update": ["mixed_precision.autocast_variable.create_autocast_variable", "framework.ops.executing_eagerly_outside_functions", "ops.resource_variable_ops.is_resource_variable"], "ops.resource_variable_ops.is_resource_variable": ["<builtin>.isinstance", "<builtin>.hasattr"], "mixed_precision.autocast_variable.AutoCastVariable._apply_update": ["mixed_precision.autocast_variable.create_autocast_variable", "framework.ops.executing_eagerly_outside_functions", "ops.resource_variable_ops.is_resource_variable"], "mixed_precision.autocast_variable.AutoCastVariable.assign": ["mixed_precision.autocast_variable.AutoCastVariable._apply_assign_update"], "mixed_precision.autocast_variable.AutoCastVariable.assign_add": ["mixed_precision.autocast_variable.AutoCastVariable._apply_assign_update"], "mixed_precision.autocast_variable.AutoCastVariable.assign_sub": ["mixed_precision.autocast_variable.AutoCastVariable._apply_assign_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_sub": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_add": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_max": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_min": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_mul": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_div": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_update": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.batch_scatter_update": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_nd_sub": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_nd_add": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.scatter_nd_update": ["mixed_precision.autocast_variable.AutoCastVariable._apply_update"], "mixed_precision.autocast_variable.AutoCastVariable.load": [], "mixed_precision.autocast_variable.AutoCastVariable.name": [], "mixed_precision.autocast_variable.AutoCastVariable._shared_name": [], "mixed_precision.autocast_variable.AutoCastVariable.initializer": [], "mixed_precision.autocast_variable.AutoCastVariable.device": [], "mixed_precision.autocast_variable.AutoCastVariable.op": [], "mixed_precision.autocast_variable.AutoCastVariable._as_graph_element": [], "mixed_precision.autocast_variable.AutoCastVariable.graph": [], "mixed_precision.autocast_variable.AutoCastVariable.shape": [], "mixed_precision.autocast_variable.AutoCastVariable.get_shape": [], "mixed_precision.autocast_variable.AutoCastVariable._gather_saveables_for_checkpoint": [], "mixed_precision.autocast_variable.AutoCastVariable._map_resources": [], "mixed_precision.autocast_variable.AutoCastVariable.to_proto": [], "mixed_precision.autocast_variable.AutoCastVariable.from_proto": [], "mixed_precision.autocast_variable.AutoCastVariable._handle_name": [], "mixed_precision.autocast_variable.AutoCastVariable._initializer_op": [], "mixed_precision.autocast_variable.AutoCastVariable.__add__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__radd__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__sub__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__rsub__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__mul__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__rmul__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__truediv__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__rtruediv__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__floordiv__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__rfloordiv__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__mod__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__rmod__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__lt__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__le__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__gt__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__ge__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__getitem__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__pow__": ["<builtin>.pow", "mixed_precision.autocast_variable.AutoCastVariable.read_value"], "<builtin>.pow": [], "mixed_precision.autocast_variable.AutoCastVariable.__rpow__": ["<builtin>.pow", "mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__neg__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__abs__": ["<builtin>.abs", "mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__div__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__rdiv__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__matmul__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "mixed_precision.autocast_variable.AutoCastVariable.__rmatmul__": ["mixed_precision.autocast_variable.AutoCastVariable.read_value"], "framework.ops.register_tensor_conversion_function": [], "mixed_precision.autocast_variable.create_autocast_variable.AutoCastDistributedVariable.__repr__": [], "mixed_precision.autocast_variable.enable_auto_cast_variables.__init__": [], "mixed_precision.autocast_variable.enable_auto_cast_variables.__enter__": ["<builtin>.getattr"], "mixed_precision.autocast_variable.enable_auto_cast_variables.__exit__": [], "mixed_precision.device_compatibility_check": [], "mixed_precision.device_compatibility_check._dedup_strings": ["<builtin>.len", "itertools.groupby", "<builtin>.list"], "itertools.groupby": [], "mixed_precision.device_compatibility_check._log_device_compatibility_check": ["<builtin>.len", "platform.tf_logging.info", "mixed_precision.device_compatibility_check._dedup_strings", "platform.tf_logging.warning"], "mixed_precision.device_compatibility_check.log_device_compatibility_check": ["framework.config.list_physical_devices", "mixed_precision.device_compatibility_check._log_device_compatibility_check", "framework.config.get_device_details"], "framework.config.list_physical_devices": ["eager.context.context"], "framework.config.get_device_details": ["eager.context.context"], "mixed_precision.get_layer_policy": ["util.tf_export.keras_export"], "mixed_precision.get_layer_policy.get_layer_policy": ["<builtin>.isinstance", "<builtin>.ValueError"], "mixed_precision.loss_scale_benchmark": ["platform.test.main"], "mixed_precision.loss_scale_benchmark._get_strategy": ["<builtin>.range", "distribute.distribution_strategy_context.get_strategy", "distribute.mirrored_strategy.MirroredStrategy"], "distribute.mirrored_strategy.MirroredStrategy": [], "mixed_precision.loss_scale_benchmark.LossScaleBenchmark._benchmark": ["mixed_precision.loss_scale_optimizer.LossScaleOptimizer", "time.time", "ops.variables.Variable", "mixed_precision.loss_scale_benchmark.LossScaleBenchmark._benchmark.run_fn", "eager.def_function.function", "eager.context.eager_mode", "<builtin>.range", "test.Benchmark.report_benchmark", "optimizer_v2.adam.Adam", "mixed_precision.loss_scale_benchmark._get_strategy", "experimental.loss_scale.DynamicLossScale", "experimental.loss_scale.FixedLossScale"], "experimental.loss_scale.FixedLossScale": ["util.deprecation.deprecated"], "experimental.loss_scale.DynamicLossScale": ["util.deprecation.deprecated"], "mixed_precision.loss_scale_benchmark.LossScaleBenchmark._benchmark.get_loss": ["ops.math_ops.add_n"], "mixed_precision.loss_scale_benchmark.LossScaleBenchmark._benchmark.minimize_fn": ["mixed_precision.loss_scale_benchmark.LossScaleBenchmark._benchmark.get_loss", "eager.backprop.GradientTape", "<builtin>.zip"], "mixed_precision.loss_scale_benchmark.LossScaleBenchmark._benchmark.run_fn": [], "mixed_precision.loss_scale_benchmark.LossScaleBenchmark._gpus_to_test_with": ["<builtin>.len", "framework.config.list_logical_devices"], "mixed_precision.loss_scale_benchmark.LossScaleBenchmark.benchmark_optimizer": ["mixed_precision.loss_scale_benchmark.LossScaleBenchmark._benchmark", "mixed_precision.loss_scale_benchmark.LossScaleBenchmark._gpus_to_test_with"], "mixed_precision.loss_scale_benchmark.LossScaleBenchmark.benchmark_gradient_tape": ["mixed_precision.loss_scale_benchmark.LossScaleBenchmark._benchmark", "mixed_precision.loss_scale_benchmark.LossScaleBenchmark._gpus_to_test_with"], "mixed_precision.loss_scale": [], "mixed_precision.loss_scale.serialize": ["utils.generic_utils.serialize_keras_object"], "mixed_precision.loss_scale.deserialize": ["utils.generic_utils.deserialize_keras_object"], "mixed_precision.loss_scale.get": ["<builtin>.ValueError", "experimental.loss_scale.FixedLossScale", "<builtin>.isinstance", "experimental.loss_scale.DynamicLossScale", "mixed_precision.loss_scale.deserialize"], "mixed_precision.loss_scale_optimizer": ["experimental.mixed_precision.register_loss_scale_wrapper"], "mixed_precision.loss_scale_optimizer._UnwrapPreventer.__init__": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin.__init__": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._setattr_tracking": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._update_uid": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._unconditional_checkpoint_dependencies": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._unconditional_dependency_names": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._name_based_restores": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._maybe_initialize_trackable": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._maybe_initialize_trackable"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._object_identifier": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._tracking_metadata": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._no_dependency": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._no_dependency"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._name_based_attribute_restore": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._name_based_attribute_restore"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._checkpoint_dependencies": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._deferred_dependencies": [], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._lookup_dependency": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._lookup_dependency"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._add_variable_with_custom_getter": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._add_variable_with_custom_getter"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._preload_simple_restoration": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._preload_simple_restoration"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._track_trackable": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._track_trackable"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._handle_deferred_dependencies": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._handle_deferred_dependencies"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._restore_from_checkpoint_position": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._restore_from_checkpoint_position"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._single_restoration_from_checkpoint_position": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._single_restoration_from_checkpoint_position"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._gather_saveables_for_checkpoint": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._gather_saveables_for_checkpoint"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._list_extra_dependencies_for_serialization": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._list_extra_dependencies_for_serialization"], "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._list_functions_for_serialization": ["mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._list_functions_for_serialization"], "mixed_precision.loss_scale_optimizer._is_all_finite": ["ops.math_ops.is_finite", "ops.math_ops.reduce_all"], "ops.math_ops.is_finite": [], "mixed_precision.loss_scale_optimizer._op_in_graph_mode": ["eager.context.executing_eagerly"], "mixed_precision.loss_scale_optimizer._assign_if_finite": ["ops.math_ops.is_finite", "ops.control_flow_ops.cond"], "mixed_precision.loss_scale_optimizer._assign_if_finite.<lambda1>": ["mixed_precision.loss_scale_optimizer._op_in_graph_mode"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.__init__": ["<builtin>.int", "<builtin>.super", "<builtin>.float", "mixed_precision.loss_scale_optimizer._DynamicLossScaleState._add_weight"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState._add_weight": ["eager.context.executing_eagerly", "keras.backend.track_variable", "framework.ops.get_default_graph", "base.Trackable._handle_deferred_dependencies", "ops.variable_scope.variable"], "ops.variable_scope.variable": [], "base.Trackable._handle_deferred_dependencies": [], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState._checkpoint_dependencies": ["<builtin>.super", "eager.context.executing_eagerly", "tracking.base.TrackableReference", "framework.ops.get_default_graph", "<builtin>.sorted"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState._checkpoint_dependencies.<lambda1>": [], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState._lookup_dependency": ["eager.context.executing_eagerly", "framework.ops.get_default_graph", "<builtin>.super"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.initial_loss_scale": [], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.growth_steps": [], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.multiplier": [], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.current_loss_scale": [], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.counter": [], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.__call__": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.update": ["mixed_precision.loss_scale_optimizer._is_all_finite", "ops.control_flow_ops.cond", "util.nest.flatten", "distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy", "distribute.distribution_strategy_context.in_cross_replica_context"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.update.update_if_finite_grads": ["ops.control_flow_ops.cond"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.update.update_if_finite_grads.incr_loss_scale": ["mixed_precision.loss_scale_optimizer._assign_if_finite", "ops.control_flow_ops.group"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.update.update_if_finite_grads.<lambda1>": ["mixed_precision.loss_scale_optimizer._op_in_graph_mode"], "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.update.update_if_not_finite_grads": ["ops.control_flow_ops.group", "ops.math_ops.maximum"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__init__": ["<builtin>.getattr", "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin.__init__", "<builtin>.isinstance", "<builtin>.TypeError", "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.__init__", "mixed_precision.loss_scale_optimizer.FakeOptimizerForRestoration.__init__", "mixed_precision.loss_scale_optimizer._DelegatingTrackableMixin._track_trackable", "<builtin>.float", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._raise_if_strategy_unsupported", "<builtin>.ValueError"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._raise_if_strategy_unsupported": ["distribute.distribution_strategy_context.get_strategy", "<builtin>.isinstance", "<builtin>.ValueError", "mixed_precision.loss_scale_optimizer.strategy_supports_loss_scaling"], "mixed_precision.loss_scale_optimizer.FakeOptimizerForRestoration.__init__": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.dynamic": ["<builtin>.isinstance"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.loss_scale": ["<builtin>.isinstance", "framework.ops.convert_to_tensor_v2_with_dispatch"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.dynamic_counter": ["<builtin>.isinstance"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.initial_scale": ["<builtin>.isinstance"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.dynamic_growth_steps": ["<builtin>.isinstance"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.inner_optimizer": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_scaled_loss": ["ops.math_ops.cast", "<builtin>.callable"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_scaled_loss.new_loss": ["ops.math_ops.cast"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_unscaled_gradients": ["mixed_precision.loss_scale_optimizer._multiply_gradient"], "mixed_precision.loss_scale_optimizer._multiply_gradient": ["<builtin>.isinstance", "ops.math_ops.cast", "framework.ops.IndexedSlices"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._compute_gradients": ["<builtin>.zip", "<builtin>.list", "eager.backprop.GradientTape", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_unscaled_gradients", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_scaled_loss"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_gradients": ["mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_unscaled_gradients", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_scaled_loss"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._create_all_weights": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients": ["framework.smart_cond.smart_cond", "ops.control_flow_ops.group", "optimizer_v2.utils.filter_empty_gradients", "mixed_precision.loss_scale_optimizer._UnwrapPreventer.__init__", "optimizer_v2.utils.strategy_supports_no_merge_call", "<builtin>.tuple", "distribute.distribution_strategy_context.get_replica_context", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._raise_if_strategy_unsupported", "<builtin>.ValueError", "distribute.distribution_strategy_context.in_cross_replica_context", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients._if_should_apply_grads"], "optimizer_v2.utils.filter_empty_gradients": ["platform.tf_logging.warning", "<builtin>.ValueError", "<builtin>.tuple"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients.do_not_apply_fn": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients._if_should_apply_grads": ["<builtin>.isinstance", "ops.control_flow_ops.no_op", "mixed_precision.loss_scale_optimizer._DynamicLossScaleState.update"], "optimizer_v2.utils.strategy_supports_no_merge_call": ["distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients.apply_fn": ["mixed_precision.loss_scale_optimizer.LossScaleOptimizer._apply_gradients"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._apply_gradients": ["<builtin>.list", "<builtin>.zip"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients._apply_gradients_cross_replica": ["framework.smart_cond.smart_cond", "ops.control_flow_ops.group", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients._if_should_apply_grads"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.apply_gradients._apply_gradients_cross_replica.apply_fn": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_config": ["keras.optimizers.serialize"], "keras.optimizers.serialize": ["utils.generic_utils.serialize_keras_object"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.from_config": ["keras.optimizers.deserialize", "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__init__", "mixed_precision.loss_scale.deserialize", "<builtin>.isinstance", "<builtin>.ValueError"], "keras.optimizers.deserialize": ["utils.generic_utils.deserialize_keras_object"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.iterations": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_slot_names": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.variables": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.weights": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_weights": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.set_weights": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.clipnorm": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.global_clipnorm": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.clipvalue": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._aggregate_gradients": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._restore_slot_variable": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer._create_or_restore_slot_variable": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.get_slot": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.add_slot": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__getattribute__": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__dir__": ["<builtin>.list", "<builtin>.set", "<builtin>.super"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.__setattr__": ["<builtin>.super"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.learning_rate": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizer.lr": [], "mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1.__init__": ["<builtin>.super", "mixed_precision.loss_scale.deserialize", "<builtin>.isinstance", "<builtin>.TypeError", "platform.tf_logging.warning", "<builtin>.ValueError"], "mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1.from_config": ["keras.optimizers.deserialize", "mixed_precision.loss_scale.deserialize", "<builtin>.isinstance", "experimental.loss_scale.DynamicLossScale", "experimental.loss_scale.FixedLossScale", "<builtin>.ValueError", "mixed_precision.loss_scale_optimizer.LossScaleOptimizerV1.__init__"], "mixed_precision.loss_scale_optimizer.FakeOptimizerForRestoration.get_slot_names": [], "mixed_precision.loss_scale_optimizer.FakeOptimizerForRestoration._create_or_restore_slot_variable": [], "experimental.mixed_precision.register_loss_scale_wrapper": [], "framework.ops.IndexedSlices": [], "mixed_precision.policy": ["util.tf_export.keras_export", "contextlib.contextmanager"], "mixed_precision.policy.Policy.__init__": ["<builtin>.TypeError", "<builtin>.isinstance", "mixed_precision.policy.Policy._parse_name", "mixed_precision.device_compatibility_check.log_device_compatibility_check"], "mixed_precision.policy.Policy._parse_name": ["framework.dtypes.as_dtype", "<builtin>.ValueError"], "mixed_precision.policy.Policy.variable_dtype": [], "mixed_precision.policy.Policy.compute_dtype": [], "mixed_precision.policy.Policy.name": [], "mixed_precision.policy.Policy.__repr__": [], "mixed_precision.policy.Policy.get_config": [], "mixed_precision.policy.Policy.from_config": ["mixed_precision.policy.Policy.__init__"], "mixed_precision.policy.PolicyV1.__init__": ["mixed_precision.loss_scale.get", "<builtin>.super", "platform.tf_logging.warning"], "mixed_precision.policy.PolicyV1.loss_scale": [], "mixed_precision.policy.PolicyV1.__repr__": [], "mixed_precision.policy.PolicyV1.get_config": ["mixed_precision.loss_scale.serialize"], "mixed_precision.policy.PolicyV1.from_config": ["<builtin>.isinstance", "mixed_precision.loss_scale.deserialize", "mixed_precision.policy.PolicyV1.__init__"], "mixed_precision.policy._check_if_mixed_precision_graph_rewrite_is_enabled": ["experimental.mixed_precision_global_state.is_mixed_precision_graph_rewrite_enabled", "<builtin>.ValueError"], "experimental.mixed_precision_global_state.is_mixed_precision_graph_rewrite_enabled": [], "mixed_precision.policy.set_policy": ["framework.dtypes.as_dtype", "mixed_precision.policy.Policy.__init__", "experimental.mixed_precision_global_state.set_using_mixed_precision_policy", "mixed_precision.policy._check_if_mixed_precision_graph_rewrite_is_enabled", "<builtin>.isinstance", "engine.base_layer_utils.v2_dtype_behavior_enabled", "<builtin>.ValueError"], "experimental.mixed_precision_global_state.set_using_mixed_precision_policy": [], "mixed_precision.policy.policy_scope": ["mixed_precision.policy.set_policy"], "mixed_precision.policy._is_convertible_to_dtype": ["framework.dtypes.as_dtype"], "mixed_precision.policy._policy_equivalent_to_dtype": ["mixed_precision.policy._is_convertible_to_dtype", "<builtin>.type", "<builtin>.list"], "optimizer_v2.adadelta": [], "optimizer_v2.adadelta.Adadelta.__init__": ["optimizer_v2.OptimizerV2._set_hyper", "keras.backend_config.epsilon", "<builtin>.super"], "optimizer_v2.OptimizerV2._set_hyper": [], "keras.backend_config.epsilon": [], "optimizer_v2.adadelta.Adadelta._create_slots": ["optimizer_v2.OptimizerV2.add_slot"], "optimizer_v2.OptimizerV2.add_slot": [], "optimizer_v2.adadelta.Adadelta._prepare_local": ["framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.identity", "<builtin>.super", "optimizer_v2.OptimizerV2._get_hyper", "<builtin>.dict"], "optimizer_v2.OptimizerV2._get_hyper": [], "optimizer_v2.adadelta.Adadelta.set_weights": ["<builtin>.super", "numpy.array", "<builtin>.len"], "optimizer_v2.adadelta.Adadelta._resource_apply_dense": ["optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceApplyAdadelta", "optimizer_v2.OptimizerV2._fallback_apply_state"], "optimizer_v2.OptimizerV2._fallback_apply_state": [], "optimizer_v2.OptimizerV2.get_slot": [], "training.gen_training_ops.ResourceApplyAdadelta": [], "optimizer_v2.adadelta.Adadelta._resource_apply_sparse": ["optimizer_v2.OptimizerV2.get_slot", "optimizer_v2.OptimizerV2._fallback_apply_state", "training.gen_training_ops.ResourceSparseApplyAdadelta"], "training.gen_training_ops.ResourceSparseApplyAdadelta": [], "optimizer_v2.adadelta.Adadelta.get_config": ["<builtin>.super"], "optimizer_v2.adagrad": [], "optimizer_v2.adagrad.Adagrad.__init__": ["optimizer_v2.OptimizerV2._set_hyper", "<builtin>.ValueError", "keras.backend_config.epsilon", "<builtin>.super"], "optimizer_v2.adagrad.Adagrad._create_slots": ["optimizer_v2.OptimizerV2.add_slot", "ops.init_ops.constant_initializer"], "optimizer_v2.adagrad.Adagrad._prepare_local": ["ops.array_ops.zeros", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.dict", "<builtin>.super"], "optimizer_v2.adagrad.Adagrad.set_weights": ["numpy.array", "<builtin>.len", "<builtin>.super"], "optimizer_v2.adagrad.Adagrad.from_config": ["optimizer_v2.adagrad.Adagrad.__init__"], "optimizer_v2.adagrad.Adagrad._resource_apply_dense": ["training.gen_training_ops.ResourceApplyAdagradV2", "optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2.get_slot"], "training.gen_training_ops.ResourceApplyAdagradV2": [], "optimizer_v2.adagrad.Adagrad._resource_apply_sparse": ["optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceSparseApplyAdagradV2"], "training.gen_training_ops.ResourceSparseApplyAdagradV2": [], "optimizer_v2.adagrad.Adagrad.get_config": ["<builtin>.super"], "optimizer_v2.adamax": [], "optimizer_v2.adamax.Adamax.__init__": ["keras.backend_config.epsilon", "<builtin>.super", "optimizer_v2.OptimizerV2._set_hyper"], "optimizer_v2.adamax.Adamax._create_slots": ["optimizer_v2.OptimizerV2.add_slot"], "optimizer_v2.adamax.Adamax._prepare_local": ["framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.cast", "optimizer_v2.OptimizerV2._get_hyper", "<builtin>.super", "ops.math_ops.pow", "ops.array_ops.identity", "ops.array_ops.zeros", "<builtin>.dict"], "ops.math_ops.pow": ["framework.ops.name_scope", "ops.gen_math_ops._pow"], "optimizer_v2.adamax.Adamax._resource_apply_dense": ["optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceApplyAdaMax"], "training.gen_training_ops.ResourceApplyAdaMax": [], "optimizer_v2.adamax.Adamax._resource_apply_sparse": ["ops.array_ops.gather", "optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2._resource_scatter_update", "optimizer_v2.OptimizerV2._resource_scatter_add", "optimizer_v2.OptimizerV2.get_slot", "ops.math_ops.maximum", "ops.math_ops.abs", "framework.ops.control_dependencies", "ops.control_flow_ops.group"], "optimizer_v2.OptimizerV2._resource_scatter_update": [], "optimizer_v2.OptimizerV2._resource_scatter_add": [], "optimizer_v2.adamax.Adamax.get_config": ["<builtin>.super"], "optimizer_v2.adam": [], "optimizer_v2.adam.Adam.__init__": ["<builtin>.super", "keras.backend_config.epsilon", "optimizer_v2.OptimizerV2._set_hyper"], "optimizer_v2.adam.Adam._create_slots": ["optimizer_v2.OptimizerV2.add_slot"], "optimizer_v2.adam.Adam._prepare_local": ["framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.cast", "ops.array_ops.identity", "ops.math_ops.pow", "<builtin>.dict", "<builtin>.super", "ops.math_ops.sqrt", "optimizer_v2.OptimizerV2._get_hyper"], "ops.math_ops.sqrt": ["ops.gen_math_ops.sqrt"], "optimizer_v2.adam.Adam.set_weights": ["<builtin>.int", "<builtin>.super", "<builtin>.len"], "optimizer_v2.adam.Adam._resource_apply_dense": ["optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceApplyAdamWithAmsgrad", "optimizer_v2.OptimizerV2._fallback_apply_state", "training.gen_training_ops.ResourceApplyAdam"], "training.gen_training_ops.ResourceApplyAdam": [], "training.gen_training_ops.ResourceApplyAdamWithAmsgrad": [], "optimizer_v2.adam.Adam._resource_apply_sparse": ["ops.state_ops.assign", "ops.math_ops.maximum", "ops.control_flow_ops.group", "optimizer_v2.OptimizerV2.get_slot", "ops.state_ops.assign_sub", "framework.ops.control_dependencies", "ops.math_ops.sqrt", "optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2._resource_scatter_add"], "ops.state_ops.assign_sub": ["ops.gen_state_ops.assign_sub"], "optimizer_v2.adam.Adam.get_config": ["<builtin>.super"], "optimizer_v2.adam.NonFusedAdam.__init__": ["<builtin>.super", "keras.backend_config.epsilon", "optimizer_v2.OptimizerV2._set_hyper"], "optimizer_v2.adam.NonFusedAdam._create_slots": ["optimizer_v2.OptimizerV2.add_slot"], "optimizer_v2.adam.NonFusedAdam._prepare_local": ["framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.cast", "ops.array_ops.identity", "ops.math_ops.pow", "<builtin>.dict", "<builtin>.super", "ops.math_ops.sqrt", "optimizer_v2.OptimizerV2._get_hyper"], "optimizer_v2.adam.NonFusedAdam.set_weights": ["<builtin>.int", "<builtin>.super", "<builtin>.len"], "optimizer_v2.adam.NonFusedAdam": ["eager.def_function.function"], "optimizer_v2.adam.NonFusedAdam._resource_apply_dense": ["ops.math_ops.maximum", "optimizer_v2.OptimizerV2.get_slot", "ops.math_ops.square", "ops.math_ops.sqrt", "optimizer_v2.OptimizerV2._fallback_apply_state"], "ops.math_ops.square": [], "optimizer_v2.adam.NonFusedAdam._resource_apply_sparse": ["ops.math_ops.maximum", "framework.ops.IndexedSlices", "optimizer_v2.OptimizerV2.get_slot", "ops.math_ops.sqrt", "optimizer_v2.OptimizerV2._fallback_apply_state"], "optimizer_v2.adam.NonFusedAdam.get_config": ["<builtin>.super"], "optimizer_v2.ftrl": [], "optimizer_v2.ftrl.Ftrl.__init__": ["<builtin>.super", "<builtin>.ValueError", "optimizer_v2.OptimizerV2._set_hyper"], "optimizer_v2.ftrl.Ftrl._create_slots": ["ops.init_ops.constant_initializer", "optimizer_v2.OptimizerV2.add_slot"], "optimizer_v2.ftrl.Ftrl._prepare_local": ["ops.array_ops.identity", "optimizer_v2.OptimizerV2._get_hyper", "<builtin>.dict", "<builtin>.super", "ops.math_ops.cast"], "optimizer_v2.ftrl.Ftrl._resource_apply_dense": ["optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceApplyFtrlV2", "training.gen_training_ops.ResourceApplyFtrl", "optimizer_v2.OptimizerV2._fallback_apply_state"], "training.gen_training_ops.ResourceApplyFtrl": [], "training.gen_training_ops.ResourceApplyFtrlV2": [], "optimizer_v2.ftrl.Ftrl._resource_apply_sparse": ["optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceSparseApplyFtrl", "training.gen_training_ops.ResourceSparseApplyFtrlV2", "optimizer_v2.OptimizerV2._fallback_apply_state"], "training.gen_training_ops.ResourceSparseApplyFtrl": [], "training.gen_training_ops.ResourceSparseApplyFtrlV2": [], "optimizer_v2.ftrl.Ftrl.get_config": ["<builtin>.super"], "optimizer_v2.gradient_descent": [], "optimizer_v2.gradient_descent.SGD.__init__": ["<builtin>.callable", "<builtin>.super", "<builtin>.isinstance", "optimizer_v2.OptimizerV2._set_hyper", "<builtin>.ValueError"], "optimizer_v2.gradient_descent.SGD._create_slots": ["optimizer_v2.OptimizerV2.add_slot"], "optimizer_v2.gradient_descent.SGD._prepare_local": ["optimizer_v2.OptimizerV2._get_hyper", "<builtin>.super", "ops.array_ops.identity"], "optimizer_v2.gradient_descent.SGD._resource_apply_dense": ["optimizer_v2.OptimizerV2._fallback_apply_state", "training.gen_training_ops.ResourceApplyGradientDescent", "optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceApplyKerasMomentum"], "training.gen_training_ops.ResourceApplyKerasMomentum": [], "training.gen_training_ops.ResourceApplyGradientDescent": [], "optimizer_v2.gradient_descent.SGD._resource_apply_sparse_duplicate_indices": ["optimizer_v2.OptimizerV2._fallback_apply_state", "ops.gen_resource_variable_ops.ResourceScatterAdd", "<builtin>.super"], "ops.gen_resource_variable_ops.ResourceScatterAdd": [], "optimizer_v2.gradient_descent.SGD._resource_apply_sparse": ["training.gen_training_ops.ResourceSparseApplyKerasMomentum", "optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2.get_slot"], "training.gen_training_ops.ResourceSparseApplyKerasMomentum": [], "optimizer_v2.gradient_descent.SGD.get_config": ["<builtin>.super"], "optimizer_v2.learning_rate_schedule": ["util.tf_export.keras_export"], "optimizer_v2.learning_rate_schedule.LearningRateSchedule": ["abc.abstractmethod"], "optimizer_v2.learning_rate_schedule.LearningRateSchedule.__call__": ["<builtin>.NotImplementedError"], "optimizer_v2.learning_rate_schedule.LearningRateSchedule.get_config": ["<builtin>.NotImplementedError"], "optimizer_v2.learning_rate_schedule.LearningRateSchedule.from_config": [], "optimizer_v2.learning_rate_schedule.ExponentialDecay.__init__": ["<builtin>.super"], "optimizer_v2.learning_rate_schedule.ExponentialDecay.__call__": ["ops.math_ops.floor", "framework.ops.name_scope_v2", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.multiply", "ops.math_ops.pow", "ops.math_ops.cast"], "ops.math_ops.floor": ["ops.gen_math_ops.floor"], "optimizer_v2.learning_rate_schedule.ExponentialDecay.get_config": [], "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.__init__": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.super"], "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.__call__": ["<builtin>.enumerate", "framework.ops.name_scope_v2", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.control_flow_ops.case", "util.nest.map_structure", "<builtin>.zip", "ops.math_ops.cast", "util.nest.flatten"], "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.__call__.<lambda1>": [], "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.__call__.<lambda2>": [], "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.__call__.<lambda3>": [], "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.__call__.<lambda4>": [], "ops.control_flow_ops.case": ["ops.control_flow_ops._case_helper"], "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay.get_config": [], "optimizer_v2.learning_rate_schedule.PolynomialDecay.__init__": ["<builtin>.super"], "optimizer_v2.learning_rate_schedule.PolynomialDecay.__call__": ["ops.math_ops.add", "ops.math_ops.equal", "framework.ops.name_scope_v2", "ops.math_ops.divide", "ops.math_ops.minimum", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.where_v2", "ops.math_ops.multiply", "ops.math_ops.pow", "ops.math_ops.ceil", "ops.math_ops.cast"], "ops.math_ops.ceil": ["ops.gen_math_ops.ceil"], "ops.math_ops.divide": ["ops.math_ops.DivideDelegateWithName.__init__", "framework.tensor_util.is_tf_type", "framework.ops.convert_to_tensor"], "optimizer_v2.learning_rate_schedule.PolynomialDecay.get_config": [], "optimizer_v2.learning_rate_schedule.InverseTimeDecay.__init__": ["<builtin>.super"], "optimizer_v2.learning_rate_schedule.InverseTimeDecay.__call__": ["ops.math_ops.floor", "ops.math_ops.add", "framework.ops.name_scope_v2", "ops.math_ops.divide", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.constant_op.constant", "ops.math_ops.multiply", "ops.math_ops.cast"], "optimizer_v2.learning_rate_schedule.InverseTimeDecay.get_config": [], "optimizer_v2.learning_rate_schedule.CosineDecay.__init__": ["<builtin>.super"], "optimizer_v2.learning_rate_schedule.CosineDecay.__call__": ["framework.ops.name_scope_v2", "ops.math_ops.minimum", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.constant_op.constant", "ops.math_ops.multiply", "ops.math_ops.cast", "ops.math_ops.cos"], "ops.math_ops.cos": [], "optimizer_v2.learning_rate_schedule.CosineDecay.get_config": [], "optimizer_v2.learning_rate_schedule.CosineDecayRestarts.__init__": ["<builtin>.super"], "optimizer_v2.learning_rate_schedule.CosineDecayRestarts.__call__": ["ops.math_ops.equal", "framework.ops.name_scope_v2", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.constant_op.constant", "ops.math_ops.multiply", "ops.control_flow_ops.cond", "ops.math_ops.cast", "ops.math_ops.cos"], "optimizer_v2.learning_rate_schedule.CosineDecayRestarts.__call__.compute_step": ["ops.math_ops.log", "ops.math_ops.floor"], "optimizer_v2.learning_rate_schedule.CosineDecayRestarts.__call__.<lambda1>": ["optimizer_v2.learning_rate_schedule.CosineDecayRestarts.__call__.compute_step"], "optimizer_v2.learning_rate_schedule.CosineDecayRestarts.__call__.<lambda2>": ["optimizer_v2.learning_rate_schedule.CosineDecayRestarts.__call__.compute_step"], "optimizer_v2.learning_rate_schedule.CosineDecayRestarts.get_config": [], "optimizer_v2.learning_rate_schedule.LinearCosineDecay.__init__": ["<builtin>.super"], "optimizer_v2.learning_rate_schedule.LinearCosineDecay.__call__": ["framework.ops.name_scope_v2", "ops.math_ops.minimum", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.constant_op.constant", "ops.math_ops.multiply", "ops.math_ops.cast", "ops.math_ops.cos"], "optimizer_v2.learning_rate_schedule.LinearCosineDecay.get_config": [], "optimizer_v2.learning_rate_schedule.NoisyLinearCosineDecay.__init__": ["<builtin>.super"], "optimizer_v2.learning_rate_schedule.NoisyLinearCosineDecay.__call__": ["ops.math_ops.sqrt", "framework.ops.name_scope_v2", "ops.math_ops.minimum", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.constant_op.constant", "ops.random_ops.random_normal", "ops.math_ops.multiply", "ops.math_ops.pow", "ops.math_ops.cast", "ops.math_ops.cos"], "optimizer_v2.learning_rate_schedule.NoisyLinearCosineDecay.get_config": [], "optimizer_v2.learning_rate_schedule.serialize": ["utils.generic_utils.serialize_keras_object"], "optimizer_v2.learning_rate_schedule.deserialize": ["<builtin>.globals", "utils.generic_utils.deserialize_keras_object"], "optimizer_v2.legacy_learning_rate_decay": ["util.tf_export.tf_export"], "optimizer_v2.legacy_learning_rate_decay.exponential_decay": ["functools.partial", "eager.context.executing_eagerly", "optimizer_v2.learning_rate_schedule.ExponentialDecay"], "optimizer_v2.learning_rate_schedule.ExponentialDecay": [], "optimizer_v2.legacy_learning_rate_decay.piecewise_constant": ["util.nest.map_structure", "util.nest.flatten", "<builtin>.enumerate", "<builtin>.ValueError", "eager.context.executing_eagerly", "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay", "functools.partial", "ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch"], "optimizer_v2.learning_rate_schedule.PiecewiseConstantDecay": [], "optimizer_v2.legacy_learning_rate_decay.polynomial_decay": ["functools.partial", "eager.context.executing_eagerly", "optimizer_v2.learning_rate_schedule.PolynomialDecay"], "optimizer_v2.learning_rate_schedule.PolynomialDecay": [], "optimizer_v2.legacy_learning_rate_decay.natural_exp_decay": ["ops.math_ops.negative", "eager.context.executing_eagerly", "ops.math_ops.exp", "functools.partial", "optimizer_v2.learning_rate_schedule.ExponentialDecay"], "ops.math_ops.negative": [], "optimizer_v2.legacy_learning_rate_decay.inverse_time_decay": ["functools.partial", "eager.context.executing_eagerly", "optimizer_v2.learning_rate_schedule.InverseTimeDecay"], "optimizer_v2.learning_rate_schedule.InverseTimeDecay": [], "optimizer_v2.legacy_learning_rate_decay.cosine_decay": ["optimizer_v2.learning_rate_schedule.CosineDecay", "functools.partial", "eager.context.executing_eagerly"], "optimizer_v2.learning_rate_schedule.CosineDecay": [], "optimizer_v2.legacy_learning_rate_decay.cosine_decay_restarts": ["optimizer_v2.learning_rate_schedule.CosineDecayRestarts", "functools.partial", "eager.context.executing_eagerly"], "optimizer_v2.learning_rate_schedule.CosineDecayRestarts": [], "optimizer_v2.legacy_learning_rate_decay.linear_cosine_decay": ["functools.partial", "optimizer_v2.learning_rate_schedule.LinearCosineDecay", "eager.context.executing_eagerly"], "optimizer_v2.learning_rate_schedule.LinearCosineDecay": [], "optimizer_v2.legacy_learning_rate_decay.noisy_linear_cosine_decay": ["functools.partial", "eager.context.executing_eagerly", "optimizer_v2.learning_rate_schedule.NoisyLinearCosineDecay"], "optimizer_v2.learning_rate_schedule.NoisyLinearCosineDecay": [], "optimizer_v2.nadam": [], "optimizer_v2.nadam.Nadam.__init__": ["keras.backend_config.epsilon", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.super", "optimizer_v2.OptimizerV2._set_hyper"], "optimizer_v2.nadam.Nadam._create_slots": ["optimizer_v2.OptimizerV2.add_weight", "optimizer_v2.OptimizerV2.add_slot", "OptimizerV2._weights.append"], "optimizer_v2.OptimizerV2.add_weight": [], "OptimizerV2._weights.append": [], "optimizer_v2.nadam.Nadam._prepare_local": ["ops.array_ops.identity", "<builtin>.dict", "ops.state_ops.assign", "ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.pow", "optimizer_v2.OptimizerV2._get_hyper"], "optimizer_v2.nadam.Nadam._prepare": ["ops.array_ops.identity", "<builtin>.super"], "optimizer_v2.nadam.Nadam._resource_apply_dense": ["optimizer_v2.OptimizerV2._fallback_apply_state", "ops.math_ops.square", "optimizer_v2.OptimizerV2.get_slot", "ops.math_ops.sqrt", "ops.state_ops.assign"], "optimizer_v2.nadam.Nadam._resource_apply_sparse": ["framework.ops.control_dependencies", "optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2.get_slot", "ops.array_ops.gather", "ops.state_ops.assign", "ops.math_ops.sqrt", "optimizer_v2.OptimizerV2._resource_scatter_add", "ops.control_flow_ops.group"], "optimizer_v2.nadam.Nadam.get_config": ["<builtin>.super"], "optimizer_v2.optimizer_v2": ["saved_model.revived_types.register_revived_type", "<builtin>.frozenset"], "optimizer_v2.optimizer_v2._deduplicate_indexed_slices": ["ops.array_ops.unique", "ops.math_ops.unsorted_segment_sum", "ops.array_ops.shape"], "ops.array_ops.unique": ["ops.gen_array_ops.unique"], "ops.math_ops.unsorted_segment_sum": [], "optimizer_v2.optimizer_v2.NullContextmanager.__init__": [], "optimizer_v2.optimizer_v2.NullContextmanager.__enter__": [], "optimizer_v2.optimizer_v2.NullContextmanager.__exit__": [], "optimizer_v2.optimizer_v2.name_scope_only_in_function_or_graph": ["optimizer_v2.optimizer_v2.NullContextmanager.__init__", "framework.ops.name_scope_v1", "eager.context.executing_eagerly"], "framework.ops.name_scope_v1": [], "optimizer_v2.optimizer_v2.OptimizerV2.__init__": ["distribute.distribution_strategy_context.has_strategy", "warnings.warn", "optimizer_v2.optimizer_v2.OptimizerV2._init_set_name", "<builtin>.ValueError", "distribute.distribution_strategy_context.get_strategy", "<builtin>.str", "<builtin>.TypeError"], "optimizer_v2.optimizer_v2.OptimizerV2._init_set_name": ["keras.backend.unique_object_name", "utils.generic_utils.to_snake_case"], "optimizer_v2.optimizer_v2.OptimizerV2.clipnorm": ["optimizer_v2.utils.make_gradient_clipnorm_fn", "<builtin>.ValueError"], "optimizer_v2.optimizer_v2.OptimizerV2.global_clipnorm": ["optimizer_v2.utils.make_global_gradient_clipnorm_fn", "<builtin>.ValueError"], "optimizer_v2.utils.make_gradient_clipnorm_fn": [], "optimizer_v2.utils.make_global_gradient_clipnorm_fn": [], "optimizer_v2.optimizer_v2.OptimizerV2.clipvalue": ["optimizer_v2.utils.make_gradient_clipvalue_fn", "<builtin>.ValueError"], "optimizer_v2.utils.make_gradient_clipvalue_fn": [], "optimizer_v2.optimizer_v2.OptimizerV2._transform_loss": [], "optimizer_v2.optimizer_v2.OptimizerV2._get_gradients": ["<builtin>.zip", "<builtin>.list"], "optimizer_v2.optimizer_v2.OptimizerV2._transform_unaggregated_gradients": [], "optimizer_v2.optimizer_v2.OptimizerV2._aggregate_gradients": ["optimizer_v2.utils.all_reduce_sum_gradients"], "optimizer_v2.utils.all_reduce_sum_gradients": ["distribute.distribution_strategy_context.get_replica_context", "optimizer_v2.utils.strategy_supports_no_merge_call", "<builtin>.list", "<builtin>.len", "optimizer_v2.utils.filter_empty_gradients", "distribute.distribution_strategy_context.get_strategy"], "optimizer_v2.optimizer_v2.OptimizerV2._transform_gradients": [], "optimizer_v2.optimizer_v2.OptimizerV2.minimize": ["optimizer_v2.optimizer_v2.OptimizerV2._compute_gradients", "optimizer_v2.optimizer_v2.OptimizerV2.apply_gradients"], "optimizer_v2.optimizer_v2.OptimizerV2._compute_gradients": ["optimizer_v2.optimizer_v2.OptimizerV2._get_gradients", "framework.ops.name_scope_v2", "optimizer_v2.optimizer_v2.OptimizerV2._transform_loss", "<builtin>.callable", "optimizer_v2.optimizer_v2.OptimizerV2._assert_valid_dtypes", "eager.backprop.GradientTape", "<builtin>.ValueError", "util.nest.flatten"], "optimizer_v2.optimizer_v2.OptimizerV2.apply_gradients": ["<builtin>.isinstance", "optimizer_v2.optimizer_v2.OptimizerV2._aggregate_gradients", "<builtin>.NotImplementedError", "functools.partial", "framework.ops.name_scope_v2", "optimizer_v2.optimizer_v2.OptimizerV2._prepare", "distribute.distribution_strategy_context.in_cross_replica_context", "optimizer_v2.optimizer_v2.OptimizerV2._distributed_apply", "optimizer_v2.optimizer_v2.OptimizerV2._create_all_weights", "optimizer_v2.optimizer_v2.OptimizerV2._transform_unaggregated_gradients", "framework.ops.init_scope", "<builtin>.RuntimeError", "optimizer_v2.optimizer_v2.OptimizerV2._transform_gradients", "ops.control_flow_ops.no_op", "optimizer_v2.utils.strategy_supports_no_merge_call", "distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.get_strategy", "optimizer_v2.utils.filter_empty_gradients"], "optimizer_v2.optimizer_v2.OptimizerV2._assert_valid_dtypes": ["optimizer_v2.optimizer_v2.OptimizerV2._valid_dtypes", "<builtin>.ValueError"], "optimizer_v2.optimizer_v2.OptimizerV2._create_all_weights": ["optimizer_v2.optimizer_v2.OptimizerV2._create_slots", "optimizer_v2.optimizer_v2.OptimizerV2._create_hypers"], "optimizer_v2.optimizer_v2.OptimizerV2._prepare": ["<builtin>.isinstance", "framework.ops.device", "<builtin>.set", "optimizer_v2.optimizer_v2.OptimizerV2._prepare_local"], "optimizer_v2.optimizer_v2.OptimizerV2._distributed_apply": ["<builtin>.isinstance", "optimizer_v2.optimizer_v2.name_scope_only_in_function_or_graph", "distribute.distribution_strategy_context.in_cross_replica_context", "keras.backend._current_graph", "framework.ops.control_dependencies", "eager.context.executing_eagerly", "utils.tf_utils.is_symbolic_tensor", "ops.control_flow_ops.group", "framework.ops.executing_eagerly_outside_functions", "<builtin>.any"], "optimizer_v2.optimizer_v2.OptimizerV2._distributed_apply.apply_grad_to_update_var": ["<builtin>.isinstance", "optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_sparse_duplicate_indices", "framework.ops.control_dependencies", "<builtin>.RuntimeError", "optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_dense", "<builtin>.NotImplementedError"], "optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_sparse_duplicate_indices": ["optimizer_v2.optimizer_v2._deduplicate_indexed_slices", "optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_sparse"], "optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_dense": ["<builtin>.NotImplementedError"], "keras.backend._current_graph": ["<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.isinstance", "framework.ops.get_default_graph", "<builtin>.tuple", "keras.backend._assert_same_graph", "<builtin>.type", "<builtin>.getattr", "keras.backend._as_graph_element"], "optimizer_v2.optimizer_v2.OptimizerV2.get_gradients": ["<builtin>.ValueError", "keras.backend.get_graph", "ops.gradients.gradients", "keras.backend.name_scope", "<builtin>.zip", "util.nest.flatten"], "ops.gradients.gradients": [], "optimizer_v2.optimizer_v2.OptimizerV2.get_updates": ["optimizer_v2.optimizer_v2.OptimizerV2.apply_gradients", "optimizer_v2.optimizer_v2.OptimizerV2._assert_valid_dtypes", "<builtin>.list", "<builtin>.zip", "optimizer_v2.optimizer_v2.OptimizerV2.get_gradients"], "optimizer_v2.optimizer_v2.OptimizerV2._set_hyper": ["<builtin>.isinstance", "keras.backend.set_value", "<builtin>.callable", "base.Trackable._track_trackable"], "base.Trackable._track_trackable": [], "optimizer_v2.optimizer_v2.OptimizerV2._get_hyper": ["<builtin>.isinstance", "ops.math_ops.cast", "optimizer_v2.optimizer_v2.OptimizerV2._create_hypers", "<builtin>.callable"], "optimizer_v2.optimizer_v2.OptimizerV2._create_hypers": ["<builtin>.isinstance", "<builtin>.callable", "optimizer_v2.optimizer_v2.OptimizerV2._distribution_strategy_scope", "optimizer_v2.optimizer_v2.OptimizerV2.add_weight", "<builtin>.sorted"], "optimizer_v2.optimizer_v2.OptimizerV2._create_slots": [], "optimizer_v2.optimizer_v2.OptimizerV2.__getattribute__": ["optimizer_v2.optimizer_v2.OptimizerV2._get_hyper", "<builtin>.super"], "optimizer_v2.optimizer_v2.OptimizerV2.__dir__": ["<builtin>.set", "<builtin>.super", "<builtin>.list"], "optimizer_v2.optimizer_v2.OptimizerV2.__setattr__": ["optimizer_v2.optimizer_v2.OptimizerV2._set_hyper", "<builtin>.super", "<builtin>.hasattr"], "optimizer_v2.optimizer_v2.OptimizerV2.get_slot_names": [], "optimizer_v2.optimizer_v2.OptimizerV2.add_slot": ["<builtin>.isinstance", "functools.partial", "<builtin>.callable", "optimizer_v2.optimizer_v2.OptimizerV2._distribution_strategy_scope", "optimizer_v2.optimizer_v2.OptimizerV2._restore_slot_variable", "<builtin>.ValueError", "distribute.distribution_strategy_context.get_strategy", "keras.backend.track_variable", "keras.initializers.get", "ops.variables.Variable", "optimizer_v2.optimizer_v2._var_key"], "optimizer_v2.optimizer_v2._var_key": ["<builtin>.hasattr"], "optimizer_v2.optimizer_v2.OptimizerV2._distribution_strategy_scope": ["distribute.distribution_strategy_context.has_strategy"], "optimizer_v2.optimizer_v2.OptimizerV2._restore_slot_variable": ["optimizer_v2.optimizer_v2._var_key"], "optimizer_v2.optimizer_v2.OptimizerV2.get_slot": ["optimizer_v2.optimizer_v2._var_key"], "optimizer_v2.optimizer_v2.OptimizerV2._prepare_local": ["optimizer_v2.optimizer_v2.OptimizerV2._decayed_lr", "ops.array_ops.identity"], "optimizer_v2.optimizer_v2.OptimizerV2._decayed_lr": ["<builtin>.isinstance", "ops.math_ops.cast", "optimizer_v2.optimizer_v2.OptimizerV2._get_hyper"], "optimizer_v2.optimizer_v2.OptimizerV2._fallback_apply_state": ["optimizer_v2.optimizer_v2.OptimizerV2._prepare_local"], "optimizer_v2.optimizer_v2.OptimizerV2.add_weight": ["<builtin>.isinstance", "base.Trackable._add_variable_with_custom_getter", "<builtin>.callable", "<builtin>.ValueError", "keras.backend.track_variable", "keras.initializers.get"], "optimizer_v2.optimizer_v2.OptimizerV2.iterations": ["optimizer_v2.optimizer_v2.OptimizerV2._distribution_strategy_scope", "<builtin>.RuntimeError", "optimizer_v2.optimizer_v2.OptimizerV2.add_weight"], "optimizer_v2.optimizer_v2.OptimizerV2": ["contextlib.contextmanager", "abc.abstractmethod", "utils.layer_utils.cached_per_instance"], "optimizer_v2.optimizer_v2.OptimizerV2.get_config": [], "optimizer_v2.optimizer_v2.OptimizerV2.from_config": ["<builtin>.isinstance", "optimizer_v2.learning_rate_schedule.deserialize", "optimizer_v2.optimizer_v2.OptimizerV2.__init__"], "optimizer_v2.optimizer_v2.OptimizerV2._serialize_hyperparameter": ["<builtin>.isinstance", "<builtin>.callable", "keras.backend.get_value", "optimizer_v2.learning_rate_schedule.serialize", "framework.tensor_util.is_tf_type"], "optimizer_v2.optimizer_v2.OptimizerV2.variables": [], "optimizer_v2.optimizer_v2.OptimizerV2.weights": [], "optimizer_v2.optimizer_v2.OptimizerV2.get_weights": ["keras.backend.batch_get_value"], "optimizer_v2.optimizer_v2.OptimizerV2.set_weights": ["<builtin>.str", "<builtin>.len", "keras.backend.batch_set_value", "keras.backend.batch_get_value", "<builtin>.ValueError", "<builtin>.zip"], "base.Trackable._add_variable_with_custom_getter": [], "optimizer_v2.optimizer_v2.OptimizerV2._valid_dtypes": [], "optimizer_v2.optimizer_v2.OptimizerV2._call_if_callable": ["<builtin>.callable"], "optimizer_v2.optimizer_v2.OptimizerV2._resource_apply_sparse": ["<builtin>.NotImplementedError"], "optimizer_v2.optimizer_v2.OptimizerV2._resource_scatter_add": ["framework.ops.control_dependencies", "ops.gen_resource_variable_ops.ResourceScatterAdd"], "optimizer_v2.optimizer_v2.OptimizerV2._resource_scatter_update": ["framework.ops.control_dependencies", "ops.gen_resource_variable_ops.ResourceScatterUpdate"], "ops.gen_resource_variable_ops.ResourceScatterUpdate": [], "optimizer_v2.optimizer_v2.OptimizerV2._dense_apply_args": ["utils.tf_inspect.getfullargspec"], "optimizer_v2.optimizer_v2.OptimizerV2._sparse_apply_args": ["utils.tf_inspect.getfullargspec"], "optimizer_v2.optimizer_v2.OptimizerV2._restore_slot_variable.<lambda1>": [], "optimizer_v2.optimizer_v2.OptimizerV2._create_or_restore_slot_variable": ["optimizer_v2.optimizer_v2.OptimizerV2.add_slot", "framework.ops.get_default_graph", "tracking.base.CheckpointInitialValueCallable", "eager.context.executing_eagerly", "optimizer_v2.optimizer_v2._var_key"], "tracking.base.CheckpointInitialValueCallable": [], "optimizer_v2.optimizer_v2._get_slot_key_from_var": ["optimizer_v2.optimizer_v2._var_key"], "optimizer_v2.optimizer_v2.RestoredOptimizer.__init__": ["<builtin>.super"], "optimizer_v2.optimizer_v2.RestoredOptimizer.get_config": ["<builtin>.NotImplementedError"], "optimizer_v2.optimizer_v2.<lambda1>": ["<builtin>.isinstance"], "saved_model.revived_types.register_revived_type": ["<builtin>.set", "<builtin>.AssertionError"], "optimizer_v2.rmsprop": [], "optimizer_v2.rmsprop.RMSprop.__init__": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.ValueError", "optimizer_v2.OptimizerV2._set_hyper", "keras.backend_config.epsilon", "<builtin>.callable"], "optimizer_v2.rmsprop.RMSprop._create_slots": ["optimizer_v2.OptimizerV2.add_slot"], "optimizer_v2.rmsprop.RMSprop._prepare_local": ["<builtin>.super", "<builtin>.dict", "optimizer_v2.OptimizerV2._get_hyper", "ops.array_ops.identity", "framework.ops.convert_to_tensor_v2_with_dispatch"], "optimizer_v2.rmsprop.RMSprop._resource_apply_dense": ["ops.math_ops.square", "ops.state_ops.assign", "training.gen_training_ops.ResourceApplyRMSProp", "optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceApplyCenteredRMSProp", "ops.math_ops.sqrt"], "training.gen_training_ops.ResourceApplyCenteredRMSProp": [], "training.gen_training_ops.ResourceApplyRMSProp": [], "optimizer_v2.rmsprop.RMSprop._resource_apply_sparse": ["ops.array_ops.gather", "ops.math_ops.square", "ops.state_ops.assign", "optimizer_v2.OptimizerV2._fallback_apply_state", "optimizer_v2.OptimizerV2._resource_scatter_add", "optimizer_v2.OptimizerV2.get_slot", "training.gen_training_ops.ResourceSparseApplyCenteredRMSProp", "ops.control_flow_ops.group", "framework.ops.control_dependencies", "ops.math_ops.sqrt", "training.gen_training_ops.ResourceSparseApplyRMSProp"], "training.gen_training_ops.ResourceSparseApplyCenteredRMSProp": [], "training.gen_training_ops.ResourceSparseApplyRMSProp": [], "optimizer_v2.rmsprop.RMSprop.set_weights": ["<builtin>.super", "numpy.array", "<builtin>.len"], "optimizer_v2.rmsprop.RMSprop.get_config": ["<builtin>.super"], "optimizer_v2.utils": [], "optimizer_v2.utils.make_gradient_clipnorm_fn.<lambda1>": [], "optimizer_v2.utils.make_gradient_clipnorm_fn.gradient_clipnorm_fn": ["<builtin>.ValueError", "distribute.distribution_strategy_context.get_strategy", "<builtin>.isinstance", "ops.clip_ops.clip_by_norm"], "ops.clip_ops.clip_by_norm": ["<builtin>.isinstance", "ops.math_ops.maximum", "framework.ops.IndexedSlices", "ops.array_ops.where", "ops.array_ops.identity", "ops.math_ops.sqrt", "ops.math_ops.reduce_sum", "ops.array_ops.ones_like", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "optimizer_v2.utils.make_global_gradient_clipnorm_fn.<lambda1>": [], "optimizer_v2.utils.make_global_gradient_clipnorm_fn.gradient_clipnorm_fn": ["<builtin>.zip", "ops.clip_ops.clip_by_global_norm", "<builtin>.ValueError", "<builtin>.list", "<builtin>.isinstance", "distribute.distribution_strategy_context.get_strategy"], "ops.clip_ops.clip_by_global_norm": ["<builtin>.isinstance", "framework.ops.IndexedSlices", "ops.clip_ops.global_norm", "<builtin>.TypeError", "ops.array_ops.identity", "framework.constant_op.constant", "<builtin>.list", "framework.ops.colocate_with", "ops.math_ops.minimum", "framework.ops.convert_to_tensor", "<builtin>.enumerate", "framework.ops.name_scope", "<builtin>.zip"], "optimizer_v2.utils.make_gradient_clipvalue_fn.<lambda1>": [], "optimizer_v2.utils.make_gradient_clipvalue_fn.gradient_clipvalue_fn": ["ops.clip_ops.clip_by_value", "<builtin>.ValueError", "distribute.distribution_strategy_context.get_strategy", "<builtin>.isinstance"], "ops.clip_ops.clip_by_value": ["<builtin>.isinstance", "ops.math_ops.maximum", "framework.ops.IndexedSlices", "ops.math_ops.minimum", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "optimizer_v2.utils._all_reduce_sum_fn": [], "premade.linear": [], "premade.linear.LinearModel.__init__": ["<builtin>.super", "keras.activations.get", "keras.regularizers.get", "keras.initializers.get"], "premade.linear.LinearModel.build": ["engine.input_spec.InputSpec", "<builtin>.list", "<builtin>.isinstance", "layers.core.Dense", "training.Model.add_weight", "<builtin>.sorted", "<builtin>.all"], "layers.core.Dense": [], "training.Model.add_weight": [], "premade.linear.LinearModel.call": ["<builtin>.ValueError", "ops.nn.bias_add", "<builtin>.isinstance", "<builtin>.set", "<builtin>.zip"], "premade.linear.LinearModel.get_config": ["keras.initializers.serialize", "keras.regularizers.serialize", "<builtin>.list", "base_layer.Layer.get_config", "keras.activations.serialize", "<builtin>.dict"], "base_layer.Layer.get_config": [], "premade.linear.LinearModel.from_config": ["premade.linear.LinearModel.__init__"], "premade.wide_deep": [], "premade.wide_deep.WideDeepModel.__init__": ["keras.activations.get", "<builtin>.super"], "premade.wide_deep.WideDeepModel.call": ["keras.backend.learning_phase", "<builtin>.isinstance", "<builtin>.len", "util.nest.map_structure"], "premade.wide_deep.WideDeepModel.call.<lambda1>": [], "premade.wide_deep.WideDeepModel.train_step": ["eager.backprop.GradientTape", "training.Model.compiled_loss", "engine.data_adapter.expand_1d", "engine.data_adapter.unpack_x_y_sample_weight", "<builtin>.zip", "premade.wide_deep.WideDeepModel.__init__", "Model.optimizer.apply_gradients", "<builtin>.isinstance", "Model.compiled_metrics.update_state"], "training.Model.compiled_loss": [], "Model.compiled_metrics.update_state": [], "Model.optimizer.apply_gradients": [], "premade.wide_deep.WideDeepModel._make_train_function": ["keras.backend.get_graph", "training.Model.get_updates_for", "training.Model._check_trainable_weights_consistency", "keras.backend.name_scope", "<builtin>.hasattr", "training.Model._set_trainable_state", "<builtin>.getattr", "keras.backend.symbolic_learning_phase", "training.Model._get_training_eval_metrics", "<builtin>.setattr", "training.Model._recompile_weights_loss_and_weighted_metrics", "keras.backend.function", "<builtin>.isinstance", "Model.optimizer.get_updates", "training.Model._get_trainable_state"], "training.Model._recompile_weights_loss_and_weighted_metrics": [], "training.Model._check_trainable_weights_consistency": [], "Model.optimizer.get_updates": [], "training.Model._get_training_eval_metrics": [], "premade.wide_deep.WideDeepModel.get_config": ["base_layer.Layer.get_config", "utils.generic_utils.serialize_keras_object", "<builtin>.dict", "<builtin>.list", "keras.activations.serialize"], "premade.wide_deep.WideDeepModel.from_config": ["premade.wide_deep.WideDeepModel.__init__", "keras.layers.deserialize", "keras.activations.deserialize"], "keras.activations.deserialize": ["layers.advanced_activations.get_globals", "<builtin>.globals", "utils.generic_utils.deserialize_keras_object"], "preprocessing.dataset_utils": [], "preprocessing.dataset_utils.index_directory": ["<builtin>.sorted", "<builtin>.set", "<builtin>.len", "multiprocessing.pool.ThreadPool", "<builtin>.print", "<builtin>.ValueError", "numpy.zeros", "os.path.isdir", "<builtin>.range", "os.listdir", "os.path.join", "numpy.random.randint", "<builtin>.zip", "<builtin>.dict", "numpy.random.RandomState"], "multiprocessing.pool.ThreadPool": [], "preprocessing.dataset_utils.iter_valid_files": ["<builtin>.sorted", "os.walk"], "os.walk": [], "preprocessing.dataset_utils.iter_valid_files.<lambda1>": [], "preprocessing.dataset_utils.index_subdirectory": ["preprocessing.dataset_utils.iter_valid_files", "os.path.join", "os.path.basename", "os.path.relpath"], "preprocessing.dataset_utils.get_training_or_validation_split": ["<builtin>.int", "<builtin>.len", "<builtin>.print", "<builtin>.ValueError"], "preprocessing.dataset_utils.labels_to_dataset": ["dataset_ops.Dataset.from_tensor_slices"], "preprocessing.dataset_utils.labels_to_dataset.<lambda1>": ["ops.array_ops.expand_dims", "ops.math_ops.cast"], "preprocessing.dataset_utils.labels_to_dataset.<lambda2>": ["ops.array_ops.one_hot"], "preprocessing.dataset_utils.check_validation_split_arg": ["<builtin>.ValueError"], "preprocessing.image": ["util.tf_export.keras_export"], "preprocessing.image.smart_resize": ["framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.shape", "ops.array_ops.stack", "ops.image_ops.resize_images_v2", "ops.array_ops.slice", "ops.math_ops.minimum", "<builtin>.isinstance", "ops.math_ops.cast", "<builtin>.len", "<builtin>.ValueError"], "ops.image_ops.resize_images_v2": [], "preprocessing.image.array_to_img": ["keras_preprocessing.image.array_to_img", "keras.backend.floatx", "keras.backend.image_data_format", "utils.tf_inspect.getfullargspec"], "keras_preprocessing.image.array_to_img": [], "preprocessing.image.img_to_array": ["keras_preprocessing.image.img_to_array", "keras.backend.floatx", "keras.backend.image_data_format", "utils.tf_inspect.getfullargspec"], "keras_preprocessing.image.img_to_array": [], "preprocessing.image.save_img": ["keras_preprocessing.image.save_img", "keras.backend.image_data_format"], "keras_preprocessing.image.save_img": [], "preprocessing.image.load_img": ["keras_preprocessing.image.load_img"], "keras_preprocessing.image.load_img": [], "preprocessing.image.DirectoryIterator.__init__": ["<builtin>.super", "keras.backend.floatx", "keras.backend.image_data_format", "utils.tf_inspect.getfullargspec"], "preprocessing.image.NumpyArrayIterator.__init__": ["<builtin>.super", "keras.backend.floatx", "keras.backend.image_data_format", "utils.tf_inspect.getfullargspec"], "preprocessing.image.DataFrameIterator.__init__": ["<builtin>.super"], "preprocessing.image.ImageDataGenerator.__init__": ["<builtin>.super", "keras.backend.floatx", "keras.backend.image_data_format", "utils.tf_inspect.getfullargspec"], "preprocessing.image.ImageDataGenerator.flow": ["preprocessing.image.NumpyArrayIterator.__init__"], "preprocessing.image.ImageDataGenerator.flow_from_directory": ["preprocessing.image.DirectoryIterator.__init__"], "preprocessing.image.ImageDataGenerator.flow_from_dataframe": ["platform.tf_logging.warning", "preprocessing.image.DataFrameIterator.__init__"], "preprocessing.image_dataset": ["util.tf_export.keras_export"], "preprocessing.image_dataset.image_dataset_from_directory": ["numpy.random.randint", "<builtin>.tuple", "preprocessing.dataset_utils.check_validation_split_arg", "preprocessing.dataset_utils.get_training_or_validation_split", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.len", "preprocessing.dataset_utils.index_directory", "preprocessing.image_dataset.paths_and_labels_to_dataset", "preprocessing.image_preprocessing.get_interpolation"], "preprocessing.image_preprocessing.get_interpolation": ["<builtin>.NotImplementedError"], "preprocessing.image_dataset.paths_and_labels_to_dataset": ["dataset_ops.Dataset.zip", "preprocessing.dataset_utils.labels_to_dataset", "dataset_ops.Dataset.from_tensor_slices"], "preprocessing.image_dataset.paths_and_labels_to_dataset.<lambda1>": ["preprocessing.image_dataset.load_image"], "preprocessing.image_dataset.load_image": ["ops.io_ops.read_file", "ops.image_ops.resize_images_v2", "preprocessing.image.smart_resize", "ops.image_ops.decode_image"], "ops.image_ops.decode_image": [], "preprocessing.sequence": ["util.tf_export.keras_export"], "preprocessing.sequence.pad_sequences": ["keras_preprocessing.sequence.pad_sequences"], "keras_preprocessing.sequence.pad_sequences": [], "preprocessing.text": ["util.tf_export.keras_export"], "preprocessing.text.text_to_word_sequence": ["keras_preprocessing.text.text_to_word_sequence"], "keras_preprocessing.text.text_to_word_sequence": [], "preprocessing.text.one_hot": ["keras_preprocessing.text.one_hot"], "keras_preprocessing.text.one_hot": [], "preprocessing.text_dataset": ["util.tf_export.keras_export"], "preprocessing.text_dataset.text_dataset_from_directory": ["<builtin>.ValueError", "preprocessing.dataset_utils.index_directory", "numpy.random.randint", "preprocessing.dataset_utils.get_training_or_validation_split", "preprocessing.dataset_utils.check_validation_split_arg", "preprocessing.text_dataset.paths_and_labels_to_dataset", "<builtin>.len", "<builtin>.isinstance"], "preprocessing.text_dataset.paths_and_labels_to_dataset": ["dataset_ops.Dataset.zip", "dataset_ops.Dataset.from_tensor_slices", "preprocessing.dataset_utils.labels_to_dataset"], "preprocessing.text_dataset.paths_and_labels_to_dataset.<lambda1>": ["preprocessing.text_dataset.path_to_string_content"], "preprocessing.text_dataset.path_to_string_content": ["ops.io_ops.read_file", "ops.string_ops.substr"], "ops.string_ops.substr": ["ops.gen_string_ops.substr"], "preprocessing.timeseries": ["util.tf_export.keras_export"], "preprocessing.timeseries.timeseries_dataset_from_array": ["<builtin>.ValueError", "numpy.arange", "numpy.random.randint", "dataset_ops.Dataset.from_tensors", "preprocessing.timeseries.sequences_from_indices", "<builtin>.min", "<builtin>.len", "numpy.random.RandomState", "dataset_ops.Dataset.range", "ops.math_ops.cast", "dataset_ops.Dataset.zip"], "preprocessing.timeseries.timeseries_dataset_from_array.<lambda1>": ["ops.math_ops.range"], "preprocessing.timeseries.sequences_from_indices": ["dataset_ops.Dataset.from_tensors", "dataset_ops.Dataset.zip"], "preprocessing.timeseries.timeseries_dataset_from_array.<lambda2>": [], "preprocessing.timeseries.sequences_from_indices.<lambda1>": ["ops.array_ops.gather"], "saving.hdf5_format": ["utils.generic_utils.LazyLoader", "<builtin>.globals"], "saving.hdf5_format.save_model_to_hdf5": ["saving.saving_utils.model_metadata", "os.path.exists", "saving.hdf5_format.save_optimizer_weights_to_hdf5_group", "json.dumps", "platform.gfile.MakeDirs", "<builtin>.ImportError", "os.path.isfile", "<builtin>.isinstance", "<builtin>.len", "os.path.dirname", "saving.hdf5_format.save_weights_to_hdf5_group", "utils.io_utils.ask_to_proceed_with_overwrite", "platform.tf_logging.warning", "h5py.File"], "saving.saving_utils.model_metadata": ["utils.generic_utils.get_registered_name", "saving.saving_utils._serialize_nested_config", "<builtin>.NotImplementedError", "keras.backend.backend", "<builtin>.str", "<builtin>.isinstance", "platform.tf_logging.warning", "<builtin>.dict"], "saving.hdf5_format.save_optimizer_weights_to_hdf5_group": ["<builtin>.getattr", "<builtin>.str", "saving.hdf5_format.save_attributes_to_hdf5_group", "keras.backend.batch_get_value", "<builtin>.zip"], "saving.hdf5_format.load_model_from_hdf5": ["saved_model.json_utils.decode", "saving.hdf5_format.load_optimizer_weights_from_hdf5_group", "saving.saving_utils.compile_args_from_training_config", "<builtin>.ImportError", "saving.model_config.model_from_config", "<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.ValueError", "saving.saving_utils.try_build_compiled_arguments", "platform.tf_logging.warning", "h5py.File", "saving.hdf5_format.load_weights_from_hdf5_group"], "saved_model.json_utils.decode": ["json.loads"], "saving.model_config.model_from_config": ["<builtin>.isinstance", "keras.layers.deserialize", "<builtin>.TypeError"], "saving.saving_utils.compile_args_from_training_config": ["<builtin>.hasattr", "keras.optimizers.deserialize", "utils.generic_utils.CustomObjectScope", "saving.saving_utils._deserialize_nested_config", "<builtin>.dict"], "saving.saving_utils.try_build_compiled_arguments": ["platform.tf_logging.warning", "utils.version_utils.is_v1_layer_or_model"], "saving.hdf5_format.load_optimizer_weights_from_hdf5_group": ["saving.hdf5_format.load_attributes_from_hdf5_group"], "saving.hdf5_format.preprocess_weights_for_loading": ["saving.hdf5_format.preprocess_weights_for_loading.convert_nested_time_distributed", "keras.backend.int_shape", "saving.hdf5_format.preprocess_weights_for_loading.convert_nested_bidirectional", "saving.hdf5_format._convert_rnn_weights", "numpy.transpose", "<builtin>.len", "numpy.concatenate", "saving.hdf5_format.preprocess_weights_for_loading", "saving.hdf5_format.preprocess_weights_for_loading.convert_nested_model"], "saving.hdf5_format.preprocess_weights_for_loading.convert_nested_bidirectional": ["saving.hdf5_format.preprocess_weights_for_loading", "<builtin>.len"], "saving.hdf5_format.preprocess_weights_for_loading.convert_nested_time_distributed": ["saving.hdf5_format.preprocess_weights_for_loading"], "saving.hdf5_format.preprocess_weights_for_loading.convert_nested_model": ["saving.hdf5_format.preprocess_weights_for_loading", "<builtin>.len"], "saving.hdf5_format._convert_rnn_weights": ["<builtin>.str", "saving.hdf5_format._convert_rnn_weights.convert_gru_weights", "<builtin>.len", "<builtin>.ValueError", "saving.hdf5_format._convert_rnn_weights.convert_lstm_weights"], "saving.hdf5_format._convert_rnn_weights.transform_kernels": ["saving.hdf5_format._convert_rnn_weights.transpose_input.transform", "saving.hdf5_format._convert_rnn_weights.convert_lstm_weights.<lambda1>", "saving.hdf5_format._convert_rnn_weights.convert_gru_weights.<lambda1>", "numpy.hsplit", "numpy.hstack"], "saving.hdf5_format._convert_rnn_weights.convert_gru_weights.<lambda1>": [], "saving.hdf5_format._convert_rnn_weights.transpose_input.transform": [], "saving.hdf5_format._convert_rnn_weights.convert_lstm_weights.<lambda1>": [], "numpy.hsplit": [], "numpy.hstack": [], "saving.hdf5_format._convert_rnn_weights.transpose_input": [], "saving.hdf5_format._convert_rnn_weights.convert_lstm_weights": ["saving.hdf5_format._convert_rnn_weights.transform_kernels", "numpy.tile", "numpy.sum", "numpy.split", "saving.hdf5_format._convert_rnn_weights.transpose_input"], "numpy.split": [], "numpy.tile": [], "saving.hdf5_format._convert_rnn_weights.convert_gru_weights": ["saving.hdf5_format._convert_rnn_weights.transpose_input", "saving.hdf5_format._convert_rnn_weights.transform_kernels", "numpy.array"], "saving.hdf5_format.save_attributes_to_hdf5_group": ["<builtin>.any", "<builtin>.RuntimeError", "numpy.array_split", "numpy.asarray", "<builtin>.len", "<builtin>.enumerate"], "saving.hdf5_format.load_attributes_from_hdf5_group": ["<builtin>.hasattr"], "keras.backend.backend": [], "saving.hdf5_format.save_weights_to_hdf5_group.<lambda1>": [], "saving.hdf5_format._legacy_weights": ["<builtin>.isinstance", "<builtin>.NotImplementedError", "<builtin>.any"], "numpy.array_split": [], "saving.model_config": ["util.tf_export.keras_export"], "saving.model_config.model_from_yaml": ["<builtin>.RuntimeError"], "saving.model_config.model_from_json": ["keras.layers.deserialize", "saved_model.json_utils.decode"], "saving.saved_model_experimental": ["utils.generic_utils.LazyLoader", "util.tf_export.keras_export", "<builtin>.globals"], "saving.saved_model_experimental.export_saved_model": ["platform.tf_logging.warning", "saving.saved_model_experimental._save_v1_format", "saving.saving_utils.trace_model_call", "warnings.warn", "saving.saved_model_experimental._export_model_json", "saved_model.save.save"], "saving.saving_utils.trace_model_call": ["eager.def_function.function", "saving.saving_utils.model_input_signature", "saving.saving_utils.raise_model_input_error", "<builtin>.isinstance"], "saved_model.save.save": ["pywrap_saved_model.metrics.IncrementWrite", "saved_model.save.save_and_return_nodes", "pywrap_saved_model.metrics.IncrementWriteApi", "platform.gfile.GFile", "utils.io_utils.ask_to_proceed_with_overwrite", "saving.saving_utils.raise_model_input_error", "os.path.exists", "saved_model.save.generate_keras_metadata", "saved_model.utils.keras_option_scope", "os.path.join", "saved_model.save_impl.should_skip_serialization", "keras.backend.deprecated_internal_learning_phase_scope"], "saving.saved_model_experimental._save_v1_format": ["<builtin>.ValueError", "platform.tf_logging.warning", "saving.saved_model_experimental._export_mode", "<builtin>.NotImplementedError", "saving.saved_model_experimental._export_model_variables", "saved_model.builder._SavedModelBuilder", "<builtin>.isinstance"], "saving.saved_model_experimental._export_model_json": ["util.compat.as_text", "os.path.join", "saving.saved_model_experimental._get_or_create_assets_dir", "platform.gfile.Open"], "saving.saved_model_experimental._get_or_create_assets_dir": ["saving.saved_model_experimental._get_assets_dir", "io.file_io.recursive_create_dir"], "saving.saved_model_experimental._export_model_variables": ["saving.saved_model_experimental._get_or_create_variables_dir", "saving.saved_model_experimental._get_variables_path"], "saving.saved_model_experimental._get_or_create_variables_dir": ["io.file_io.recursive_create_dir", "saving.saved_model_experimental._get_variables_dir"], "saving.saved_model_experimental._get_variables_path": ["util.compat.as_text", "os.path.join", "saving.saved_model_experimental._get_variables_dir"], "saved_model.builder._SavedModelBuilder": [], "saving.saved_model_experimental._export_mode": ["<builtin>.ValueError", "training.saver.Saver", "util.nest.map_structure", "client.session.Session", "saving.saved_model_experimental._assert_same_non_optimizer_objects", "saving.saved_model_experimental._create_signature_def_map", "saving.saved_model_experimental._get_var_list", "keras.backend.learning_phase_scope", "framework.ops.Graph", "framework.ops.get_default_graph", "ops.variables.local_variables_initializer"], "saving.saved_model_experimental._get_var_list": ["tracking.graph_view.ObjectGraphView"], "saving.saved_model_experimental.create_placeholder": ["keras.backend.placeholder"], "saving.saved_model_experimental._assert_same_non_optimizer_objects": [], "saving.saved_model_experimental._create_signature_def_map": ["saving.utils_v1.build_all_signature_defs", "<builtin>.isinstance", "framework.ops.get_collection", "saving.saving_utils.extract_model_metrics", "framework.ops.add_to_collection", "<builtin>.zip", "saving.utils_v1.export_outputs_for_mode", "<builtin>.set"], "training.saver.Saver": [], "ops.variables.local_variables_initializer": ["ops.control_flow_ops.no_op", "ops.variables.variables_initializer", "ops.variables.local_variables", "eager.context.executing_eagerly"], "saving.saving_utils.extract_model_metrics": ["<builtin>.getattr"], "saving.utils_v1.export_outputs_for_mode": [], "saving.utils_v1.build_all_signature_defs": [], "saving.saved_model_experimental.load_from_saved_model": ["saving.model_config.model_from_json", "os.path.join", "util.compat.as_text", "warnings.warn", "util.compat.as_bytes", "platform.gfile.Open"], "saving.saved_model_experimental._get_variables_dir": ["util.compat.as_text", "os.path.join"], "io.file_io.recursive_create_dir": ["io.file_io.recursive_create_dir_v2"], "saving.saved_model_experimental._get_assets_dir": ["util.compat.as_text", "os.path.join"], "saving.save": ["util.tf_export.keras_export", "util.keras_deps.register_load_model_function"], "saving.save.save_model": ["<builtin>.NotImplementedError", "utils.generic_utils.SharedObjectSavingScope", "python.tf2.enabled", "saving.hdf5_format.save_model_to_hdf5", "saving.saving_utils.try_build_compiled_arguments", "<builtin>.isinstance", "utils.io_utils.path_to_string", "saved_model.save.save", "saving.saving_utils.is_hdf5_filepath"], "saving.save.load_model": ["utils.generic_utils.CustomObjectScope", "saved_model.load.load", "<builtin>.IOError", "utils.generic_utils.SharedObjectLoadingScope", "<builtin>.isinstance", "utils.io_utils.path_to_string", "h5py.is_hdf5", "saving.hdf5_format.load_model_from_hdf5", "saved_model.load_context.load_context"], "utils.generic_utils.CustomObjectScope": [], "saved_model.load_context.load_context": ["saved_model.load_context.LoadContext.set_load_options", "saved_model.load_context.LoadContext.clear_load_options"], "h5py.is_hdf5": [], "util.keras_deps.register_load_model_function": [], "saving.saving_utils": [], "saving.saving_utils.model_input_signature": ["saving.saving_utils._enforce_names_consistency", "<builtin>.len", "<builtin>.isinstance"], "saving.saving_utils._enforce_names_consistency": ["util.nest.map_structure", "util.nest.flatten", "saving.saving_utils._enforce_names_consistency._has_name", "<builtin>.all", "<builtin>.any"], "saving.saving_utils.raise_model_input_error": ["<builtin>.ValueError"], "saving.saving_utils.trace_model_call._wrapped_model": ["<builtin>.list", "util.nest.flatten", "<builtin>.len", "<builtin>.zip", "engine.compile_utils.create_pseudo_output_names", "engine.base_layer_utils.call_context"], "saving.saving_utils._serialize_nested_config": ["util.nest.map_structure"], "utils.generic_utils.get_registered_name": [], "saving.saving_utils.should_overwrite": ["utils.io_utils.ask_to_proceed_with_overwrite", "os.path.isfile"], "saving.saving_utils._deserialize_nested_config": ["saving.saving_utils._deserialize_metric", "saving.saving_utils._deserialize_nested_config", "<builtin>.ValueError", "saving.saving_utils._deserialize_nested_config._is_single_object", "<builtin>.isinstance", "keras.losses.deserialize"], "saving.saving_utils._deserialize_nested_config._is_single_object": ["<builtin>.isinstance"], "keras.losses.deserialize": ["utils.generic_utils.deserialize_keras_object", "<builtin>.globals"], "saving.saving_utils._deserialize_metric": ["keras.metrics.deserialize"], "saving.saving_utils._serialize_nested_config._serialize_fn": ["utils.generic_utils.serialize_keras_object", "<builtin>.callable"], "keras.metrics.deserialize": ["<builtin>.globals", "utils.generic_utils.deserialize_keras_object"], "saving.saving_utils._enforce_names_consistency._has_name": ["<builtin>.hasattr"], "saving.saving_utils._enforce_names_consistency._clear_name": ["<builtin>.hasattr", "copy.deepcopy"], "utils.version_utils.is_v1_layer_or_model": ["<builtin>.isinstance"], "type.types": [], "utils.all_utils": [], "utils.control_flow_util": [], "utils.control_flow_util.InXlaContext": ["utils.control_flow_util.GetContainingXLAContext"], "utils.control_flow_util.GetContainingXLAContext": [], "utils.control_flow_util.GetContainingWhileContext": [], "utils.control_flow_util.constant_value": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError", "framework.tensor_util.constant_value", "<builtin>.bool"], "utils.conv_utils": [], "utils.conv_utils.conv_input_length": [], "utils.conv_utils.conv_output_shape": ["<builtin>.tuple", "utils.conv_utils.conv_output_length", "<builtin>.len", "<builtin>.range"], "utils.conv_utils.conv_connected_inputs": ["<builtin>.min", "<builtin>.len", "<builtin>.max", "<builtin>.range", "<builtin>.int"], "utils.conv_utils.conv_kernel_idxs.<lambda1>": [], "utils.conv_utils.conv_kernel_idxs.<lambda2>": [], "numpy.ravel_multi_index": [], "utils.dataset_creator": [], "utils.dataset_creator.DatasetCreator.__init__": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.callable"], "utils.dataset_creator.DatasetCreator.__call__": ["<builtin>.TypeError", "<builtin>.isinstance"], "utils.data_utils": ["util.tf_export.keras_export", "threading.RLock", "<builtin>.set", "weakref.WeakSet"], "utils.data_utils.urlretrieve": ["urllib.request.urlopen", "utils.data_utils.urlretrieve.chunk_read", "<builtin>.open"], "utils.data_utils.urlretrieve.chunk_read": ["<builtin>.int"], "urllib.request.urlopen": [], "utils.data_utils._extract_archive": ["zipfile.ZipFile", "os.path.exists", "zipfile.is_zipfile", "os.path.isfile", "tarfile.open", "utils.io_utils.path_to_string", "shutil.rmtree", "<builtin>.isinstance", "os.remove", "tarfile.is_tarfile"], "tarfile.is_tarfile": [], "os.access": [], "utils.data_utils._makedirs_exist_ok": ["os.makedirs"], "utils.data_utils.validate_file": ["utils.data_utils._hash_file", "utils.data_utils._resolve_hasher", "<builtin>.str"], "utils.data_utils.get_file.dl_progress": ["utils.generic_utils.Progbar"], "utils.data_utils._resolve_hasher": ["<builtin>.len", "hashlib.md5", "hashlib.sha256"], "hashlib.sha256": [], "hashlib.md5": [], "utils.data_utils._hash_file": ["<builtin>.isinstance", "<builtin>.iter", "utils.data_utils._resolve_hasher", "<builtin>.open"], "utils.data_utils._hash_file.<lambda1>": [], "utils.data_utils.ThreadsafeIter.__init__": ["threading.Lock"], "utils.data_utils.ThreadsafeIter.__iter__": [], "utils.data_utils.ThreadsafeIter.next": ["utils.data_utils.ThreadsafeIter.__next__"], "utils.data_utils.ThreadsafeIter.__next__": ["utils.data_utils.ThreadsafeIter.next"], "utils.data_utils.threadsafe_generator": ["functools.wraps"], "utils.data_utils.threadsafe_generator.g": ["utils.data_utils.ThreadsafeIter.__init__"], "utils.data_utils.Sequence": ["abc.abstractmethod"], "utils.data_utils.Sequence.__getitem__": [], "utils.data_utils.Sequence.__len__": [], "utils.data_utils.Sequence.on_epoch_end": [], "utils.data_utils.Sequence.__iter__": ["<builtin>.len", "<builtin>.range"], "utils.data_utils.dont_use_multiprocessing_pool": ["functools.wraps"], "utils.data_utils.dont_use_multiprocessing_pool.wrapped": [], "utils.data_utils.get_pool_class": [], "utils.data_utils.get_worker_id_queue": ["multiprocessing.Queue"], "multiprocessing.Queue": [], "utils.data_utils.init_pool": [], "utils.data_utils.get_index": [], "utils.data_utils.SequenceEnqueuer.__init__": ["<builtin>.isinstance", "multiprocessing.Value"], "multiprocessing.Value": [], "utils.data_utils.SequenceEnqueuer.is_running": [], "utils.data_utils.SequenceEnqueuer.start": ["utils.data_utils.SequenceEnqueuer._get_executor_init", "threading.Event", "threading.Thread"], "utils.data_utils.SequenceEnqueuer._get_executor_init": [], "utils.data_utils.SequenceEnqueuer.start.<lambda1>": ["multiprocessing.dummy.Pool", "utils.data_utils.get_pool_class", "multiprocessing.Pool"], "multiprocessing.Pool": [], "multiprocessing.dummy.Pool": [], "utils.data_utils.SequenceEnqueuer._send_sequence": [], "utils.data_utils.SequenceEnqueuer.stop": [], "utils.data_utils.SequenceEnqueuer.__del__": ["utils.data_utils.SequenceEnqueuer.stop", "utils.data_utils.SequenceEnqueuer.is_running"], "utils.data_utils.SequenceEnqueuer": ["abc.abstractmethod"], "utils.data_utils.SequenceEnqueuer._run": [], "utils.data_utils.SequenceEnqueuer.get": [], "utils.data_utils.OrderedEnqueuer.__init__": ["<builtin>.super"], "utils.data_utils.OrderedEnqueuer._get_executor_init": [], "utils.data_utils.OrderedEnqueuer._get_executor_init.pool_fn": ["multiprocessing.dummy.Pool", "utils.data_utils.get_pool_class", "utils.data_utils.get_worker_id_queue", "multiprocessing.Pool"], "utils.data_utils.OrderedEnqueuer._wait_queue": ["time.sleep"], "utils.data_utils.OrderedEnqueuer._run": ["contextlib.closing", "<builtin>.range", "utils.data_utils.SequenceEnqueuer._send_sequence", "<builtin>.list", "random.shuffle", "<builtin>.len", "utils.data_utils.SequenceEnqueuer.start.<lambda1>", "utils.data_utils.OrderedEnqueuer._wait_queue"], "contextlib.closing": [], "utils.data_utils.OrderedEnqueuer.get": ["utils.data_utils.SequenceEnqueuer.stop", "utils.data_utils.SequenceEnqueuer.is_running"], "utils.data_utils.init_pool_generator": ["multiprocessing.current_process", "numpy.random.seed"], "multiprocessing.current_process": [], "utils.data_utils.next_sample": ["<builtin>.next"], "utils.data_utils.GeneratorEnqueuer.__init__": ["<builtin>.super"], "utils.data_utils.GeneratorEnqueuer._get_executor_init": [], "utils.data_utils.GeneratorEnqueuer._get_executor_init.pool_fn": ["multiprocessing.dummy.Pool", "utils.data_utils.get_pool_class", "utils.data_utils.get_worker_id_queue", "multiprocessing.Pool"], "utils.data_utils.GeneratorEnqueuer._run": ["contextlib.closing", "utils.data_utils.SequenceEnqueuer._send_sequence", "utils.data_utils.SequenceEnqueuer.start.<lambda1>"], "utils.data_utils.GeneratorEnqueuer.get": ["utils.data_utils.SequenceEnqueuer.stop", "utils.data_utils.SequenceEnqueuer.is_running", "<builtin>.RuntimeError", "<builtin>.str"], "utils.generic_utils": ["util.tf_export.keras_export", "utils.tf_contextlib.contextmanager", "threading.local"], "utils.generic_utils.CustomObjectScope.__init__": [], "utils.generic_utils.CustomObjectScope.__enter__": [], "utils.generic_utils.CustomObjectScope.__exit__": [], "utils.generic_utils.get_custom_objects": [], "utils.generic_utils._shared_object_disabled": ["<builtin>.getattr"], "utils.generic_utils._shared_object_loading_scope": ["<builtin>.getattr"], "utils.generic_utils._shared_object_saving_scope": ["<builtin>.getattr"], "utils.generic_utils.DisableSharedObjectScope.__enter__": ["utils.generic_utils._shared_object_loading_scope", "utils.generic_utils._shared_object_saving_scope"], "utils.generic_utils.DisableSharedObjectScope.__exit__": [], "utils.generic_utils.NoopLoadingScope.get": [], "utils.generic_utils.NoopLoadingScope.set": [], "utils.generic_utils.SharedObjectLoadingScope.__enter__": ["utils.generic_utils._shared_object_disabled"], "utils.generic_utils.SharedObjectLoadingScope.get": [], "utils.generic_utils.SharedObjectLoadingScope.set": [], "utils.generic_utils.SharedObjectLoadingScope.__exit__": [], "utils.generic_utils.SharedObjectConfig.__init__": ["<builtin>.super"], "utils.generic_utils.SharedObjectConfig.increment_ref_count": [], "utils.generic_utils.SharedObjectSavingScope.__enter__": ["utils.generic_utils._shared_object_disabled", "weakref.WeakKeyDictionary", "utils.generic_utils._shared_object_saving_scope"], "utils.generic_utils.SharedObjectSavingScope.get_config": [], "utils.generic_utils.SharedObjectSavingScope.create_config": ["utils.generic_utils.SharedObjectConfig.__init__"], "utils.generic_utils.SharedObjectSavingScope.__exit__": ["<builtin>.getattr"], "utils.generic_utils.serialize_keras_class_and_config": ["utils.generic_utils._shared_object_saving_scope"], "utils.generic_utils.register_keras_serializable": [], "utils.generic_utils.register_keras_serializable.decorator": ["<builtin>.ValueError", "<builtin>.hasattr", "utils.tf_inspect.isclass"], "utils.generic_utils.skip_failed_serialization": [], "utils.generic_utils.get_registered_object": [], "utils.generic_utils.get_custom_objects_by_name": [], "utils.generic_utils.class_and_config_for_serialized_keras_object": ["<builtin>.str", "<builtin>.ValueError", "utils.generic_utils.deserialize_keras_object", "utils.generic_utils.get_registered_object", "<builtin>.isinstance", "utils.tf_inspect.isfunction"], "utils.tf_inspect.isfunction": ["inspect.isfunction", "util.tf_decorator.unwrap"], "marshal.dumps": [], "codecs.encode": [], "utils.generic_utils.func_load.ensure_value_to_cell": ["<builtin>.isinstance", "<builtin>.type"], "utils.generic_utils.func_load.ensure_value_to_cell.dummy_fn": [], "codecs.decode": [], "marshal.loads": [], "utils.generic_utils.Progbar.__init__": ["sys.stdout.isatty", "<builtin>.hasattr", "time.time", "<builtin>.set"], "sys.stdout.isatty": [], "utils.generic_utils.Progbar.update": ["sys.stdout.flush", "sys.stdout.write", "<builtin>.str", "<builtin>.int", "utils.generic_utils.Progbar._estimate_step_duration", "numpy.mean", "<builtin>.max", "time.time", "numpy.log10", "<builtin>.isinstance", "<builtin>.len", "<builtin>.float", "<builtin>.abs"], "utils.generic_utils.Progbar._estimate_step_duration": [], "utils.generic_utils.Progbar.add": ["utils.generic_utils.Progbar.update"], "utils.generic_utils.Progbar._update_stateful_metrics": [], "utils.generic_utils.validate_config": ["<builtin>.isinstance"], "utils.generic_utils.LazyLoader.__init__": ["<builtin>.super"], "utils.generic_utils.LazyLoader._load": ["ModuleType.__dict__.update", "importlib.import_module"], "ModuleType.__dict__.update": [], "utils.generic_utils.LazyLoader.__getattr__": ["<builtin>.getattr", "utils.generic_utils.LazyLoader._load"], "utils.io_utils": [], "<builtin>.input": [], "utils.kernelized_utils": [], "utils.kernelized_utils._to_matrix": ["<builtin>.len", "ops.array_ops.expand_dims", "<builtin>.ValueError"], "utils.kernelized_utils._align_matrices": ["<builtin>.ValueError", "ops.array_ops.expand_dims", "ops.array_ops.tile", "utils.kernelized_utils._to_matrix"], "utils.kernelized_utils.inner_product": ["ops.math_ops.matmul", "utils.kernelized_utils._to_matrix"], "utils.kernelized_utils.exact_gaussian_kernel": ["ops.math_ops.exp", "ops.math_ops.squared_difference", "utils.kernelized_utils._align_matrices", "ops.math_ops.reduce_sum"], "ops.math_ops.squared_difference": [], "utils.kernelized_utils.exact_laplacian_kernel": ["ops.math_ops.subtract", "ops.math_ops.reduce_sum", "ops.math_ops.abs", "ops.math_ops.exp", "utils.kernelized_utils._align_matrices"], "ops.math_ops.subtract": ["ops.gen_math_ops.sub"], "utils.layer_utils": ["util.tf_export.keras_export"], "utils.layer_utils.validate_string_arg": ["<builtin>.callable", "<builtin>.ValueError", "<builtin>.isinstance"], "utils.layer_utils.print_summary.print_row": ["<builtin>.str", "<builtin>.len", "<builtin>.range"], "utils.layer_utils.print_summary.print_layer_summary": ["<builtin>.getattr", "utils.layer_utils.print_summary.print_row"], "utils.layer_utils.print_summary.print_layer_summary_with_connections": ["utils.layer_utils.print_summary.print_row", "<builtin>.len", "<builtin>.range"], "utils.layer_utils.convert_dense_weights_data_format": ["numpy.prod", "numpy.reshape", "<builtin>.range", "numpy.transpose"], "utils.layer_utils.cached_per_instance.wrapped": [], "utils.losses_utils": ["util.tf_export.keras_export"], "utils.losses_utils.ReductionV2.all": [], "utils.losses_utils.ReductionV2.validate": ["<builtin>.ValueError", "utils.losses_utils.ReductionV2.all"], "utils.losses_utils.remove_squeezable_dimensions": ["keras.backend.name_scope", "ops.math_ops.equal", "ops.array_ops.squeeze", "ops.array_ops.rank", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.control_flow_ops.cond", "<builtin>.isinstance"], "utils.losses_utils.remove_squeezable_dimensions.<lambda1>": ["ops.array_ops.squeeze"], "utils.losses_utils.remove_squeezable_dimensions.<lambda2>": [], "utils.losses_utils.remove_squeezable_dimensions.<lambda3>": ["ops.array_ops.squeeze"], "utils.losses_utils.remove_squeezable_dimensions.<lambda4>": [], "utils.losses_utils.squeeze_or_expand_dimensions.<lambda1>": ["utils.losses_utils.remove_squeezable_dimensions"], "utils.losses_utils.squeeze_or_expand_dimensions.<lambda2>": ["ops.control_flow_ops.cond"], "utils.losses_utils.squeeze_or_expand_dimensions.<lambda2>.<lambda1>": [], "utils.losses_utils.squeeze_or_expand_dimensions.<lambda3>": ["ops.array_ops.squeeze"], "utils.losses_utils.squeeze_or_expand_dimensions._maybe_expand_weights": ["ops.math_ops.equal", "ops.control_flow_ops.cond"], "utils.losses_utils.squeeze_or_expand_dimensions._maybe_expand_weights.<lambda1>": ["ops.array_ops.expand_dims"], "utils.losses_utils.squeeze_or_expand_dimensions._maybe_expand_weights.<lambda2>": [], "utils.losses_utils.squeeze_or_expand_dimensions._maybe_adjust_weights": ["ops.math_ops.equal", "ops.control_flow_ops.cond"], "utils.losses_utils.squeeze_or_expand_dimensions.<lambda4>": [], "utils.losses_utils._safe_mean": ["ops.math_ops.div_no_nan", "ops.math_ops.reduce_sum"], "ops.math_ops.div_no_nan": ["framework.ops.name_scope", "ops.gen_math_ops.div_no_nan", "framework.ops.convert_to_tensor"], "utils.losses_utils._num_elements": ["keras.backend.name_scope", "ops.array_ops.size", "ops.math_ops.cast"], "ops.array_ops.size": ["ops.array_ops.size_internal"], "utils.metrics_utils": [], "utils.metrics_utils.update_state_wrapper": ["util.tf_decorator.make_decorator"], "utils.metrics_utils.update_state_wrapper.decorated": ["keras.backend.is_tpu_strategy", "<builtin>.ValueError", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.distribution_strategy_context.get_strategy", "utils.tf_utils.graph_context_for_symbolic_tensors"], "utils.tf_utils.graph_context_for_symbolic_tensors": ["<builtin>.any", "keras.backend.get_graph", "utils.tf_utils.is_symbolic_tensor", "<builtin>.list"], "utils.metrics_utils.result_wrapper": ["util.tf_decorator.make_decorator"], "utils.metrics_utils.result_wrapper.decorated": ["<builtin>.RuntimeError", "distribute.distribution_strategy_context.has_strategy", "ops.array_ops.identity", "distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.variable_sync_on_read_context", "<builtin>.isinstance"], "distribute.distribution_strategy_context.variable_sync_on_read_context": [], "utils.metrics_utils.result_wrapper.decorated.merge_fn_wrapper": ["ops.array_ops.identity"], "utils.metrics_utils.weakmethod": ["functools.wraps", "weakref.ref"], "utils.metrics_utils.weakmethod.inner": [], "utils.metrics_utils.assert_thresholds_range": ["<builtin>.ValueError"], "utils.metrics_utils.parse_init_thresholds": ["utils.generic_utils.to_list", "utils.metrics_utils.assert_thresholds_range"], "utils.metrics_utils.AUCCurve.from_str": ["<builtin>.ValueError"], "utils.metrics_utils.AUCSummationMethod.from_str": ["<builtin>.ValueError"], "utils.metrics_utils._update_confusion_matrix_variables_optimized": ["ops.control_flow_ops.group", "ops.math_ops.unsorted_segment_sum", "ops.array_ops.expand_dims", "ops.nn_ops.relu", "parallel_for.control_flow_ops.vectorized_map", "ops.math_ops.multiply", "ops.weights_broadcast_ops.broadcast_weights", "ops.array_ops.transpose_v2", "ops.math_ops.cast", "ops.array_ops.reshape", "ops.math_ops.reduce_sum", "ops.clip_ops.clip_by_value", "ops.math_ops.ceil", "ops.math_ops.cumsum"], "ops.weights_broadcast_ops.broadcast_weights": ["ops.weights_broadcast_ops.assert_broadcastable", "framework.ops.control_dependencies", "framework.ops.convert_to_tensor", "ops.control_flow_ops.get_enclosing_xla_context", "ops.math_ops.multiply", "ops.array_ops.ones_like", "framework.ops.name_scope"], "ops.nn_ops.relu": [], "ops.array_ops.transpose_v2": ["ops.array_ops.transpose"], "utils.metrics_utils._update_confusion_matrix_variables_optimized.gather_bucket": ["ops.math_ops.unsorted_segment_sum"], "parallel_for.control_flow_ops.vectorized_map": ["ops.math_ops.reduce_max", "util.nest.flatten", "functools.partial", "<builtin>.max", "parallel_for.control_flow_ops.pfor", "parallel_for.control_flow_ops.vectorized_map._get_shape", "util.nest.map_structure", "<builtin>.any", "ops.array_ops.shape"], "utils.metrics_utils.is_evenly_distributed_thresholds": ["<builtin>.len", "keras.backend.epsilon", "numpy.allclose", "numpy.arange"], "keras.backend.epsilon": [], "numpy.allclose": [], "utils.metrics_utils.update_confusion_matrix_variables": ["<builtin>.list", "utils.losses_utils.squeeze_or_expand_dimensions", "utils.metrics_utils._filter_top_k", "ops.array_ops.expand_dims", "ops.array_ops.tile", "compat.compat.forward_compatible", "ops.control_flow_ops.group", "ops.array_ops.stack", "ops.array_ops.ones", "ops.math_ops.logical_not", "ops.gen_math_ops.Prod", "utils.metrics_utils.ragged_assert_compatible_and_get_flat_values", "framework.ops.control_dependencies", "ops.array_ops.rank", "utils.metrics_utils._update_confusion_matrix_variables_optimized", "framework.ops.convert_to_tensor_v2_with_dispatch", "utils.metrics_utils.update_confusion_matrix_variables.weighted_assign_add", "ops.math_ops.equal", "<builtin>.any", "ops.check_ops.assert_greater_equal", "ops.array_ops.shape", "ops.check_ops.assert_less_equal", "ops.array_ops.where_v2", "ops.math_ops.multiply", "<builtin>.ValueError", "ops.weights_broadcast_ops.broadcast_weights", "ops.math_ops.greater", "ops.math_ops.cast", "ops.array_ops.reshape"], "utils.metrics_utils.ragged_assert_compatible_and_get_flat_values": ["ops.array_ops.expand_dims", "<builtin>.TypeError", "<builtin>.all", "<builtin>.isinstance", "framework.ops.control_dependencies", "<builtin>.any", "utils.metrics_utils._assert_splits_match"], "ops.check_ops.assert_greater_equal": ["ops.check_ops._binary_assert"], "ops.check_ops.assert_less_equal": ["ops.check_ops._binary_assert"], "utils.metrics_utils._filter_top_k": ["ops.array_ops.one_hot", "ops.math_ops.reduce_sum", "ops.array_ops.shape", "ops.nn_ops.top_k"], "ops.gen_math_ops.Prod": [], "utils.metrics_utils.update_confusion_matrix_variables.weighted_assign_add": ["ops.math_ops.logical_and", "ops.math_ops.reduce_sum", "ops.math_ops.cast"], "ops.nn_ops.top_k": ["ops.gen_nn_ops.top_kv2"], "utils.metrics_utils._assert_splits_match": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.zip", "ops.check_ops.assert_equal"], "utils.mode_keys": [], "utils.multi_gpu_utils": [], "utils.multi_gpu_utils._get_available_devices": ["keras.backend.get_session"], "utils.multi_gpu_utils._normalize_device_name": [], "utils.multi_gpu_utils.multi_gpu_model": ["layers.core.Lambda", "<builtin>.ValueError", "keras.models.clone_model", "engine.training.Model", "utils.multi_gpu_utils._normalize_device_name", "<builtin>.enumerate", "<builtin>.len", "<builtin>.range", "utils.multi_gpu_utils._get_available_devices", "framework.ops.device", "<builtin>.isinstance", "<builtin>.tuple", "keras.backend.name_scope", "layers.merge.concatenate", "<builtin>.zip"], "utils.multi_gpu_utils.multi_gpu_model.get_slice": ["ops.array_ops.slice", "ops.array_ops.shape", "ops.array_ops.concat"], "utils.np_utils": ["util.tf_export.keras_export"], "utils.np_utils.to_categorical": ["<builtin>.tuple", "numpy.zeros", "numpy.array", "<builtin>.len", "numpy.reshape", "numpy.arange", "numpy.max"], "utils.np_utils.normalize": ["numpy.atleast_1d", "numpy.linalg.norm", "numpy.expand_dims"], "numpy.linalg.norm": [], "numpy.atleast_1d": [], "utils.object_identity": [], "utils.object_identity._ObjectIdentityWrapper.__init__": [], "utils.object_identity._ObjectIdentityWrapper.unwrapped": [], "utils.object_identity._ObjectIdentityWrapper._assert_type": ["<builtin>.TypeError", "<builtin>.isinstance"], "utils.object_identity._ObjectIdentityWrapper.__lt__": ["<builtin>.id", "utils.object_identity._ObjectIdentityWrapper._assert_type"], "utils.object_identity._ObjectIdentityWrapper.__gt__": ["<builtin>.id", "utils.object_identity._ObjectIdentityWrapper._assert_type"], "utils.object_identity._ObjectIdentityWrapper.__eq__": ["utils.object_identity._ObjectIdentityWrapper._assert_type"], "utils.object_identity._ObjectIdentityWrapper.__ne__": ["utils.object_identity._ObjectIdentityWrapper.__eq__"], "utils.object_identity._ObjectIdentityWrapper.__hash__": ["<builtin>.id"], "utils.object_identity._ObjectIdentityWrapper.__repr__": ["<builtin>.type"], "utils.object_identity._WeakObjectIdentityWrapper.__init__": ["weakref.ref", "<builtin>.super"], "utils.object_identity._WeakObjectIdentityWrapper.unwrapped": [], "utils.object_identity.Reference.deref": [], "utils.object_identity.ObjectIdentityDictionary.__init__": [], "utils.object_identity.ObjectIdentityDictionary._wrap_key": ["utils.object_identity._ObjectIdentityWrapper.__init__"], "utils.object_identity.ObjectIdentityDictionary.__getitem__": ["utils.object_identity.ObjectIdentityDictionary._wrap_key"], "utils.object_identity.ObjectIdentityDictionary.__setitem__": ["utils.object_identity.ObjectIdentityDictionary._wrap_key"], "utils.object_identity.ObjectIdentityDictionary.__delitem__": ["utils.object_identity.ObjectIdentityDictionary._wrap_key"], "utils.object_identity.ObjectIdentityDictionary.__len__": ["<builtin>.len"], "utils.object_identity.ObjectIdentityDictionary.__iter__": [], "utils.object_identity.ObjectIdentityDictionary.__repr__": ["<builtin>.repr"], "utils.object_identity.ObjectIdentityWeakKeyDictionary._wrap_key": ["utils.object_identity._WeakObjectIdentityWrapper.__init__"], "utils.object_identity.ObjectIdentityWeakKeyDictionary.__len__": ["<builtin>.list", "<builtin>.len"], "utils.object_identity.ObjectIdentityWeakKeyDictionary.__iter__": [], "utils.object_identity.ObjectIdentitySet.__init__": ["<builtin>.set", "utils.object_identity.ObjectIdentitySet._wrap_key", "<builtin>.list"], "utils.object_identity.ObjectIdentitySet._wrap_key": ["utils.object_identity._ObjectIdentityWrapper.__init__"], "utils.object_identity.ObjectIdentitySet._from_storage": ["utils.object_identity.ObjectIdentitySet.__init__"], "utils.object_identity.ObjectIdentitySet.__contains__": ["utils.object_identity.ObjectIdentitySet._wrap_key"], "utils.object_identity.ObjectIdentitySet.discard": ["utils.object_identity.ObjectIdentitySet._wrap_key"], "utils.object_identity.ObjectIdentitySet.add": ["utils.object_identity.ObjectIdentitySet._wrap_key"], "utils.object_identity.ObjectIdentitySet.update": ["utils.object_identity.ObjectIdentitySet._wrap_key"], "utils.object_identity.ObjectIdentitySet.clear": [], "utils.object_identity.ObjectIdentitySet.intersection": ["utils.object_identity.ObjectIdentitySet._wrap_key"], "utils.object_identity.ObjectIdentitySet.difference": ["utils.object_identity.ObjectIdentitySet._wrap_key", "utils.object_identity.ObjectIdentitySet._from_storage"], "utils.object_identity.ObjectIdentitySet.__len__": ["<builtin>.len"], "utils.object_identity.ObjectIdentitySet.__iter__": ["<builtin>.list"], "utils.object_identity.ObjectIdentityWeakSet._wrap_key": ["utils.object_identity._WeakObjectIdentityWrapper.__init__"], "utils.object_identity.ObjectIdentityWeakSet.__len__": ["<builtin>.len"], "utils.object_identity.ObjectIdentityWeakSet.__iter__": ["utils.object_identity.ObjectIdentitySet.discard", "<builtin>.list"], "utils.tf_contextlib": [], "utils.tf_inspect": ["collections.namedtuple", "<builtin>.hasattr"], "utils.tf_inspect._convert_maybe_argspec_to_fullargspec": ["<builtin>.isinstance", "inspect.FullArgSpec"], "inspect.FullArgSpec": [], "utils.tf_inspect._getargspec": ["utils.tf_inspect.getfullargspec", "inspect.ArgSpec"], "inspect.ArgSpec": [], "utils.tf_inspect._getfullargspec": ["utils.tf_inspect.getargspec", "utils.tf_inspect._convert_maybe_argspec_to_fullargspec"], "utils.tf_inspect.currentframe": ["inspect.stack"], "inspect.stack": [], "utils.tf_inspect._get_argspec_for_partial": ["<builtin>.tuple", "<builtin>.len", "<builtin>.object", "<builtin>.next", "<builtin>.enumerate", "<builtin>.ValueError", "utils.tf_inspect.getargspec", "inspect.ArgSpec"], "inspect.getargspec": [], "inspect.getfullargspec": [], "utils.tf_inspect.getcallargs": ["<builtin>.getattr", "utils.tf_inspect.getfullargspec", "<builtin>.dict", "<builtin>.zip", "<builtin>.len", "utils.tf_inspect.ismethod"], "utils.tf_inspect.getframeinfo": ["inspect.getframeinfo"], "inspect.getframeinfo": [], "utils.tf_inspect.getdoc": ["inspect.getdoc"], "inspect.getdoc": [], "utils.tf_inspect.getfile": ["<builtin>.hasattr", "util.tf_decorator.unwrap", "inspect.getfile"], "utils.tf_inspect.getmembers": ["inspect.getmembers"], "inspect.getmembers": [], "utils.tf_inspect.getmodule": ["inspect.getmodule"], "utils.tf_inspect.getmro": ["inspect.getmro"], "utils.tf_inspect.getsource": ["inspect.getsource", "util.tf_decorator.unwrap"], "inspect.getsource": [], "utils.tf_inspect.getsourcefile": ["inspect.getsourcefile", "util.tf_decorator.unwrap"], "utils.tf_inspect.getsourcelines": ["inspect.getsourcelines", "util.tf_decorator.unwrap"], "inspect.getsourcelines": [], "utils.tf_inspect.isbuiltin": ["inspect.isbuiltin", "util.tf_decorator.unwrap"], "utils.tf_inspect.isframe": ["inspect.isframe", "util.tf_decorator.unwrap"], "inspect.isframe": [], "inspect.isgenerator": [], "utils.tf_inspect.isgeneratorfunction": ["inspect.isgeneratorfunction", "util.tf_decorator.unwrap"], "inspect.isgeneratorfunction": [], "utils.tf_inspect.ismodule": ["inspect.ismodule", "util.tf_decorator.unwrap"], "utils.tf_inspect.isroutine": ["inspect.isroutine", "util.tf_decorator.unwrap"], "inspect.isroutine": [], "utils.tf_inspect.stack": ["inspect.stack"], "utils.tf_utils": ["util.tf_export.keras_export", "<builtin>.set", "utils.tf_contextlib.contextmanager"], "utils.tf_utils.is_tensor_or_tensor_list": ["util.nest.flatten", "<builtin>.isinstance"], "utils.object_identity.ObjectIdentitySet": [], "utils.tf_utils.map_structure_with_atomic": ["utils.tf_utils._astuple", "utils.tf_utils.convert_shapes._is_atomic_shape", "utils.tf_utils.map_structure_with_atomic", "utils.tf_utils.convert_inner_node_data._is_atomic_nested", "<builtin>.ValueError", "util.nest.is_mapping", "utils.tf_utils.convert_inner_node_data._convert_object_or_list", "util.nest.is_nested", "<builtin>.sorted", "utils.tf_utils.convert_shapes._convert_shape", "util.nest.is_attrs", "util.nest._sequence_like"], "utils.tf_utils.convert_inner_node_data._is_atomic_nested": ["utils.tf_utils.convert_inner_node_data._is_serialized_node_data", "util.nest.is_nested", "<builtin>.isinstance"], "utils.tf_utils.convert_shapes._is_atomic_shape": ["<builtin>.all", "utils.tf_utils.convert_shapes._is_shape_component", "<builtin>.isinstance"], "utils.tf_utils.convert_shapes._convert_shape": ["<builtin>.tuple", "framework.tensor_shape.TensorShape"], "utils.tf_utils.convert_inner_node_data._convert_object_or_list": ["utils.tf_utils.ListWrapper.__init__", "utils.tf_utils.convert_inner_node_data._is_serialized_node_data", "<builtin>.isinstance"], "util.nest.is_mapping": ["util._pywrap_utils.IsMapping"], "util.nest.is_attrs": ["util._pywrap_utils.IsAttrs"], "utils.tf_utils._astuple": ["<builtin>.type", "<builtin>.tuple", "<builtin>.getattr", "<builtin>.ValueError"], "utils.tf_utils.get_shapes.<lambda1>": [], "utils.tf_utils.convert_shapes._is_shape_component": ["<builtin>.isinstance"], "utils.tf_utils.ListWrapper.__init__": [], "utils.tf_utils.ListWrapper.as_list": [], "utils.tf_utils.convert_inner_node_data._is_serialized_node_data": ["<builtin>.len", "<builtin>.isinstance"], "utils.tf_utils.shape_type_conversion.wrapper": ["utils.tf_utils.convert_shapes"], "framework.ops.convert_to_tensor_or_composite": ["framework.ops.internal_convert_to_tensor_or_composite"], "utils.tf_utils.register_symbolic_tensor_type": ["engine.keras_tensor.register_keras_tensor_specialization"], "utils.tf_utils.type_spec_from_value": ["framework.tensor_spec.TensorSpec", "framework.type_spec.type_spec_from_value", "<builtin>.hasattr", "utils.tf_utils.is_extension_type"], "utils.tf_utils.is_sparse": ["<builtin>.isinstance"], "utils.tf_utils.is_tensor_or_variable": ["framework.tensor_util.is_tf_type", "<builtin>.isinstance"], "utils.tf_utils.dataset_is_infinite": ["keras.backend.get_session", "framework.ops.executing_eagerly_outside_functions", "ops.math_ops.equal", "ops.cardinality.cardinality"], "utils.tf_utils.sync_to_numpy_or_python_type._to_single_numpy_or_python_type": ["numpy.ndim", "<builtin>.isinstance"], "numpy.ndim": [], "utils.version_utils": ["utils.generic_utils.LazyLoader", "<builtin>.globals"], "utils.version_utils.ModelVersionSelector.__new__": ["utils.version_utils.should_use_v2", "<builtin>.super", "utils.version_utils.swap_class"], "utils.version_utils.swap_class": ["utils.version_utils.swap_class", "<builtin>.tuple", "<builtin>.issubclass"], "utils.version_utils.LayerVersionSelector.__new__": ["utils.version_utils.should_use_v2", "<builtin>.super", "utils.version_utils.swap_class"], "utils.version_utils.TensorBoardVersionSelector.__new__": ["utils.version_utils.should_use_v2", "<builtin>.super", "utils.version_utils.swap_class"], "utils.vis_utils": ["util.tf_export.keras_export"], "utils.vis_utils.check_pydot": ["pydot.Dot.create", "pydotplus.Dot.create", "pydotplus.Dot", "pydot.Dot", "pydot_ng.Dot.create", "pydot_ng.Dot"], "pydot.Dot": [], "pydotplus.Dot": [], "pydot_ng.Dot": [], "pydot.Dot.create": [], "pydot_ng.Dot.create": [], "pydotplus.Dot.create": [], "utils.vis_utils.is_wrapped_model": ["<builtin>.isinstance"], "utils.vis_utils.add_edge": ["pydot_ng.Edge", "pydot.Edge", "pydotplus.Edge"], "pydot_ng.Edge": [], "pydot.Edge": [], "pydotplus.Edge": [], "utils.vis_utils.model_to_dot": ["utils.vis_utils.model_to_dot.format_dtype", "<builtin>.super", "pydot_ng.Node", "<builtin>.str", "pydotplus.Cluster", "utils.vis_utils.model_to_dot.format_shape", "utils.vis_utils.add_edge", "pydot.Node", "utils.vis_utils.model_to_dot", "<builtin>.hasattr", "pydot_ng.Dot", "<builtin>.print", "<builtin>.enumerate", "pydotplus.Dot", "pydotplus.Node", "<builtin>.isinstance", "pydot_ng.Cluster", "utils.vis_utils.check_pydot", "<builtin>.id", "pydot.Cluster", "utils.vis_utils.is_wrapped_model", "util.nest.flatten", "pydot.Dot", "<builtin>.ImportError"], "pydotplus.Cluster": [], "pydot.Cluster": [], "pydot_ng.Cluster": [], "pydot.Node": [], "pydot_ng.Node": [], "pydotplus.Node": [], "utils.vis_utils.model_to_dot.format_dtype": ["<builtin>.str"], "utils.vis_utils.model_to_dot.format_shape": ["<builtin>.str"], "utils.vis_utils.plot_model": ["utils.io_utils.path_to_string", "IPython.display.Image", "os.path.splitext", "utils.vis_utils.model_to_dot"], "IPython.display.Image": [], "wrappers.scikit_learn": [], "wrappers.scikit_learn.BaseWrapper.__init__": ["wrappers.scikit_learn.BaseWrapper.check_params"], "wrappers.scikit_learn.BaseWrapper.check_params": ["<builtin>.isinstance", "utils.generic_utils.has_arg"], "wrappers.scikit_learn.BaseWrapper.get_params": [], "wrappers.scikit_learn.BaseWrapper.set_params": ["wrappers.scikit_learn.BaseWrapper.check_params"], "wrappers.scikit_learn.BaseWrapper.fit": ["<builtin>.isinstance", "keras.losses.is_categorical_crossentropy", "wrappers.scikit_learn.BaseWrapper.filter_sk_params", "copy.deepcopy", "utils.np_utils.to_categorical", "<builtin>.len"], "wrappers.scikit_learn.BaseWrapper.filter_sk_params": ["utils.generic_utils.has_arg"], "wrappers.scikit_learn.KerasClassifier.fit": ["numpy.searchsorted", "numpy.array", "<builtin>.str", "numpy.unique", "<builtin>.super", "<builtin>.len", "numpy.arange", "<builtin>.ValueError"], "numpy.unique": [], "numpy.searchsorted": [], "wrappers.scikit_learn.KerasClassifier.predict": ["wrappers.scikit_learn.BaseWrapper.filter_sk_params"], "wrappers.scikit_learn.KerasClassifier.predict_proba": ["numpy.hstack", "wrappers.scikit_learn.BaseWrapper.filter_sk_params"], "wrappers.scikit_learn.KerasClassifier.score": ["<builtin>.zip", "numpy.searchsorted", "<builtin>.hasattr", "<builtin>.isinstance", "wrappers.scikit_learn.BaseWrapper.filter_sk_params", "utils.np_utils.to_categorical", "<builtin>.ValueError", "<builtin>.len"], "wrappers.scikit_learn.KerasRegressor.predict": ["numpy.squeeze", "wrappers.scikit_learn.BaseWrapper.filter_sk_params"], "wrappers.scikit_learn.KerasRegressor.score": ["<builtin>.isinstance", "wrappers.scikit_learn.BaseWrapper.filter_sk_params"], "legacy_rnn.rnn_cell_impl": ["collections.namedtuple"], "legacy_rnn.rnn_cell_impl._hasattr": ["<builtin>.getattr"], "legacy_rnn.rnn_cell_impl.assert_like_rnncell": ["legacy_rnn.rnn_cell_impl._hasattr", "<builtin>.callable", "<builtin>.zip", "<builtin>.all", "<builtin>.TypeError"], "legacy_rnn.rnn_cell_impl._concat": ["framework.tensor_shape.TensorShape", "<builtin>.ValueError", "ops.array_ops.concat", "framework.tensor_util.constant_value", "<builtin>.isinstance", "ops.array_ops.expand_dims", "framework.constant_op.constant"], "legacy_rnn.rnn_cell_impl._zero_state_tensors": ["util.nest.map_structure"], "legacy_rnn.rnn_cell_impl._zero_state_tensors.get_state_shape": ["ops.array_ops.zeros", "eager.context.executing_eagerly", "legacy_rnn.rnn_cell_impl._concat"], "legacy_rnn.rnn_cell_impl.RNNCell.__init__": ["<builtin>.super"], "legacy_rnn.rnn_cell_impl.RNNCell.__call__": ["ops.variable_scope.get_variable_scope", "<builtin>.super", "ops.variable_scope.variable_scope", "<builtin>.getattr", "<builtin>.setattr"], "legacy_rnn.rnn_cell_impl.RNNCell._rnn_get_variable": ["engine.base_layer_utils.is_split_variable", "Layer._trainable_weights.append", "framework.ops.executing_eagerly_outside_functions", "ops.variables.trainable_variables", "<builtin>.list", "<builtin>.all", "Layer._non_trainable_weights.append"], "legacy_rnn.rnn_cell_impl.RNNCell.state_size": ["<builtin>.NotImplementedError"], "legacy_rnn.rnn_cell_impl.RNNCell.output_size": ["<builtin>.NotImplementedError"], "legacy_rnn.rnn_cell_impl.RNNCell.build": [], "legacy_rnn.rnn_cell_impl.RNNCell.get_initial_state": ["<builtin>.ValueError", "framework.tensor_util.is_tf_type", "framework.tensor_util.constant_value", "framework.ops.convert_to_tensor_v2_with_dispatch", "legacy_rnn.rnn_cell_impl.RNNCell.zero_state", "ops.array_ops.shape"], "legacy_rnn.rnn_cell_impl.RNNCell.zero_state": ["legacy_rnn.rnn_cell_impl._hasattr", "<builtin>.type", "legacy_rnn.rnn_cell_impl._zero_state_tensors", "eager.context.executing_eagerly", "keras.backend.name_scope", "<builtin>.getattr"], "legacy_rnn.rnn_cell_impl.RNNCell.get_config": ["<builtin>.super"], "legacy_rnn.rnn_cell_impl.RNNCell._use_input_spec_as_call_signature": [], "legacy_rnn.rnn_cell_impl.LayerRNNCell.__call__": ["base.Layer.__call__"], "base.Layer.__call__": [], "legacy_rnn.rnn_cell_impl.BasicRNNCell.__init__": ["platform.tf_logging.warning", "keras.activations.get", "framework.config.list_logical_devices", "<builtin>.super", "eager.context.executing_eagerly", "legacy_rnn.rnn_cell_impl._check_supported_dtypes", "warnings.warn"], "legacy_rnn.rnn_cell_impl._check_supported_dtypes": ["<builtin>.ValueError", "framework.dtypes.as_dtype"], "legacy_rnn.rnn_cell_impl.BasicRNNCell.state_size": [], "legacy_rnn.rnn_cell_impl.BasicRNNCell.output_size": [], "legacy_rnn.rnn_cell_impl.BasicRNNCell": ["utils.tf_utils.shape_type_conversion"], "legacy_rnn.rnn_cell_impl.BasicRNNCell.build": ["<builtin>.ValueError", "<builtin>.str", "ops.init_ops.zeros_initializer", "base.Layer.add_variable", "legacy_rnn.rnn_cell_impl._check_supported_dtypes"], "base.Layer.add_variable": [], "legacy_rnn.rnn_cell_impl.BasicRNNCell.call": ["ops.nn_ops.bias_add", "ops.array_ops.concat", "ops.math_ops.matmul", "ops.math_ops.tanh", "legacy_rnn.rnn_cell_impl._check_rnn_cell_input_dtypes"], "legacy_rnn.rnn_cell_impl._check_rnn_cell_input_dtypes": ["util.nest.flatten", "legacy_rnn.rnn_cell_impl._check_supported_dtypes"], "legacy_rnn.rnn_cell_impl.BasicRNNCell.get_config": ["keras.activations.serialize", "<builtin>.list", "<builtin>.super", "<builtin>.dict"], "legacy_rnn.rnn_cell_impl.GRUCell.__init__": ["platform.tf_logging.warning", "keras.activations.get", "framework.config.list_logical_devices", "<builtin>.super", "eager.context.executing_eagerly", "keras.initializers.get", "legacy_rnn.rnn_cell_impl._check_supported_dtypes", "warnings.warn"], "legacy_rnn.rnn_cell_impl.GRUCell.state_size": [], "legacy_rnn.rnn_cell_impl.GRUCell.output_size": [], "legacy_rnn.rnn_cell_impl.GRUCell": ["utils.tf_utils.shape_type_conversion"], "legacy_rnn.rnn_cell_impl.GRUCell.build": ["<builtin>.ValueError", "<builtin>.str", "ops.init_ops.constant_initializer", "ops.init_ops.zeros_initializer", "base.Layer.add_variable", "legacy_rnn.rnn_cell_impl._check_supported_dtypes"], "legacy_rnn.rnn_cell_impl.GRUCell.call": ["ops.nn_ops.bias_add", "ops.array_ops.concat", "ops.math_ops.sigmoid", "ops.math_ops.matmul", "ops.math_ops.tanh", "legacy_rnn.rnn_cell_impl._check_rnn_cell_input_dtypes", "ops.array_ops.split"], "ops.math_ops.sigmoid": ["framework.ops.name_scope", "ops.gen_math_ops.sigmoid", "framework.ops.convert_to_tensor"], "legacy_rnn.rnn_cell_impl.GRUCell.get_config": ["keras.activations.serialize", "<builtin>.super", "<builtin>.list", "keras.initializers.serialize", "<builtin>.dict"], "legacy_rnn.rnn_cell_impl.LSTMStateTuple.dtype": ["<builtin>.str", "<builtin>.TypeError"], "legacy_rnn.rnn_cell_impl.BasicLSTMCell.__init__": ["platform.tf_logging.warning", "keras.activations.get", "framework.config.list_logical_devices", "<builtin>.super", "eager.context.executing_eagerly", "legacy_rnn.rnn_cell_impl._check_supported_dtypes", "warnings.warn"], "legacy_rnn.rnn_cell_impl.BasicLSTMCell.state_size": [], "legacy_rnn.rnn_cell_impl.BasicLSTMCell.output_size": [], "legacy_rnn.rnn_cell_impl.BasicLSTMCell": ["utils.tf_utils.shape_type_conversion"], "legacy_rnn.rnn_cell_impl.BasicLSTMCell.build": ["<builtin>.ValueError", "<builtin>.str", "ops.init_ops.zeros_initializer", "base.Layer.add_variable", "legacy_rnn.rnn_cell_impl._check_supported_dtypes"], "legacy_rnn.rnn_cell_impl.BasicLSTMCell.call": ["ops.nn_ops.bias_add", "ops.array_ops.concat", "ops.math_ops.sigmoid", "ops.math_ops.matmul", "legacy_rnn.rnn_cell_impl._check_rnn_cell_input_dtypes", "ops.math_ops.tanh", "ops.math_ops.multiply", "ops.math_ops.add", "framework.constant_op.constant", "ops.array_ops.split"], "legacy_rnn.rnn_cell_impl.BasicLSTMCell.get_config": ["keras.activations.serialize", "<builtin>.list", "<builtin>.super", "<builtin>.dict"], "legacy_rnn.rnn_cell_impl.LSTMCell.__init__": ["platform.tf_logging.warning", "keras.activations.get", "framework.config.list_logical_devices", "<builtin>.super", "eager.context.executing_eagerly", "keras.initializers.get", "legacy_rnn.rnn_cell_impl._check_supported_dtypes", "warnings.warn"], "legacy_rnn.rnn_cell_impl.LSTMCell.state_size": [], "legacy_rnn.rnn_cell_impl.LSTMCell.output_size": [], "legacy_rnn.rnn_cell_impl.LSTMCell": ["utils.tf_utils.shape_type_conversion"], "legacy_rnn.rnn_cell_impl.LSTMCell.build": ["<builtin>.ValueError", "legacy_rnn.rnn_cell_impl._check_supported_dtypes", "<builtin>.str", "ops.init_ops.zeros_initializer", "base.Layer.add_variable", "ops.partitioned_variables.fixed_size_partitioner"], "ops.partitioned_variables.fixed_size_partitioner": [], "legacy_rnn.rnn_cell_impl.LSTMCell.call": ["<builtin>.ValueError", "ops.nn_ops.bias_add", "ops.array_ops.concat", "ops.array_ops.slice", "ops.math_ops.sigmoid", "ops.clip_ops.clip_by_value", "ops.math_ops.matmul", "ops.math_ops.tanh", "legacy_rnn.rnn_cell_impl._check_rnn_cell_input_dtypes", "ops.array_ops.split"], "legacy_rnn.rnn_cell_impl.LSTMCell.get_config": ["keras.activations.serialize", "<builtin>.super", "<builtin>.list", "keras.initializers.serialize", "<builtin>.dict"], "legacy_rnn.rnn_cell_impl._RNNCellWrapperV1.__init__": ["<builtin>.isinstance", "base.Layer._track_trackable", "<builtin>.super", "legacy_rnn.rnn_cell_impl.assert_like_rnncell"], "base.Layer._track_trackable": [], "legacy_rnn.rnn_cell_impl._RNNCellWrapperV1._call_wrapped_cell": [], "legacy_rnn.rnn_cell_impl._RNNCellWrapperV1.__call__": ["legacy_rnn.rnn_cell_impl._RNNCellWrapperV1._call_wrapped_cell"], "legacy_rnn.rnn_cell_impl._RNNCellWrapperV1.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "legacy_rnn.rnn_cell_impl._RNNCellWrapperV1.from_config": ["<builtin>.ValueError", "legacy_rnn.rnn_cell_impl._RNNCellWrapperV1.__init__", "legacy_rnn.rnn_cell_impl.assert_like_rnncell"], "legacy_rnn.rnn_cell_impl.DropoutWrapper.__init__": ["<builtin>.super"], "legacy_rnn.rnn_cell_impl.ResidualWrapper.__init__": ["<builtin>.super"], "legacy_rnn.rnn_cell_impl.DeviceWrapper.__init__": ["<builtin>.super"], "legacy_rnn.rnn_cell_impl.MultiRNNCell.__init__": ["<builtin>.enumerate", "<builtin>.ValueError", "platform.tf_logging.warning", "<builtin>.id", "base.Layer._track_trackable", "<builtin>.set", "platform.tf_logging.log_first_n", "<builtin>.super", "<builtin>.any", "<builtin>.str", "util.nest.is_nested", "<builtin>.isinstance", "<builtin>.len", "<builtin>.TypeError"], "legacy_rnn.rnn_cell_impl.MultiRNNCell.state_size": ["<builtin>.sum", "<builtin>.tuple"], "legacy_rnn.rnn_cell_impl.MultiRNNCell.output_size": [], "legacy_rnn.rnn_cell_impl.MultiRNNCell.zero_state": ["<builtin>.tuple", "keras.backend.name_scope", "<builtin>.super", "<builtin>.type"], "legacy_rnn.rnn_cell_impl.MultiRNNCell.trainable_weights": ["<builtin>.isinstance"], "legacy_rnn.rnn_cell_impl.MultiRNNCell.non_trainable_weights": ["<builtin>.isinstance"], "legacy_rnn.rnn_cell_impl.MultiRNNCell.call": ["<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.tuple", "ops.array_ops.concat", "ops.array_ops.slice", "ops.variable_scope.variable_scope", "util.nest.is_nested", "<builtin>.len"], "legacy_rnn.rnn_cell_wrapper_impl": [], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__": ["<builtin>.setattr", "legacy_rnn.rnn_cell_wrapper_impl._enumerated_map_structure_up_to", "<builtin>.super", "<builtin>.isinstance", "<builtin>.callable", "framework.ops.name_scope_v2", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.tensor_and_const_value", "<builtin>.ValueError", "<builtin>.float", "<builtin>.TypeError"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.tensor_and_const_value": ["framework.ops.convert_to_tensor_v2_with_dispatch", "framework.tensor_util.constant_value"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.convert_to_batch_shape": ["ops.array_ops.concat", "framework.tensor_shape.TensorShape"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.batch_noise": ["legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.convert_to_batch_shape", "ops.random_ops.random_uniform"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.<lambda1>": ["legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.batch_noise", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._gen_seed"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._gen_seed": ["hashlib.md5", "<builtin>.str", "<builtin>.int"], "legacy_rnn.rnn_cell_wrapper_impl._enumerated_map_structure_up_to": ["util.nest.map_structure_up_to"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.<lambda2>": ["legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.batch_noise", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._gen_seed"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.<lambda3>": ["legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.batch_noise", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._gen_seed"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.wrapped_cell": [], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.state_size": [], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.output_size": [], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.build": [], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.zero_state": ["<builtin>.type", "framework.ops.name_scope_v2"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._variational_recurrent_dropout_value": ["ops.math_ops.divide", "ops.math_ops.floor"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._dropout": ["legacy_rnn.rnn_cell_wrapper_impl._enumerated_map_structure_up_to"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._dropout.dropout": ["legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._variational_recurrent_dropout_value", "<builtin>.isinstance", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._gen_seed", "ops.nn_ops.dropout_v2"], "ops.nn_ops.dropout_v2": ["functools.partial", "ops.nn_ops._dropout"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._call_wrapped_cell": ["legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._call_wrapped_cell._should_dropout", "util.nest.get_traverse_shallow_structure", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._dropout"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._call_wrapped_cell._should_dropout": ["<builtin>.isinstance"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.get_config": ["<builtin>.super", "<builtin>.dict", "legacy_rnn.rnn_cell_wrapper_impl._serialize_function_to_config", "<builtin>.list"], "legacy_rnn.rnn_cell_wrapper_impl._serialize_function_to_config": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.callable", "utils.generic_utils.func_dump", "<builtin>.ValueError"], "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.from_config": ["<builtin>.super", "legacy_rnn.rnn_cell_wrapper_impl._parse_config_to_function"], "legacy_rnn.rnn_cell_wrapper_impl._parse_config_to_function": ["warnings.warn", "<builtin>.globals", "utils.generic_utils.func_load", "utils.generic_utils.deserialize_keras_object", "<builtin>.TypeError"], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.__init__": ["<builtin>.super"], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.state_size": [], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.output_size": [], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.zero_state": ["<builtin>.type", "framework.ops.name_scope_v2"], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase._call_wrapped_cell": [], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase._call_wrapped_cell.assert_shape_match": [], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase._call_wrapped_cell.default_residual_fn": ["util.nest.assert_same_structure", "util.nest.map_structure"], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase._call_wrapped_cell.default_residual_fn.<lambda1>": [], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.get_config": ["<builtin>.super", "<builtin>.dict", "legacy_rnn.rnn_cell_wrapper_impl._serialize_function_to_config", "<builtin>.list"], "legacy_rnn.rnn_cell_wrapper_impl.ResidualWrapperBase.from_config": ["<builtin>.super", "legacy_rnn.rnn_cell_wrapper_impl._parse_config_to_function"], "legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.__init__": ["<builtin>.super"], "legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.state_size": [], "legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.output_size": [], "legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.zero_state": ["<builtin>.type", "framework.ops.device", "framework.ops.name_scope_v2"], "legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase._call_wrapped_cell": ["framework.ops.device"], "legacy_rnn.rnn_cell_wrapper_impl.DeviceWrapperBase.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "legacy_rnn.rnn_cell_wrapper_impl._default_dropout_state_filter_visitor": ["legacy_rnn.rnn_cell_impl.LSTMStateTuple", "<builtin>.isinstance"], "legacy_rnn.rnn_cell_impl.LSTMStateTuple": [], "legacy_rnn.rnn_cell_wrapper_impl._enumerated_map_structure_up_to.enumerated_fn": ["legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.<lambda3>", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase._dropout.dropout", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.<lambda2>", "legacy_rnn.rnn_cell_wrapper_impl.DropoutWrapperBase.__init__.<lambda1>"], "normalization.batch_normalization": [], "normalization.batch_normalization.BatchNormalizationBase.__init__": ["<builtin>.ValueError", "<builtin>.super", "keras.initializers.get", "<builtin>.set", "<builtin>.isinstance", "normalization.batch_normalization.BatchNormalizationBase._raise_if_fused_cannot_be_used", "keras.regularizers.get", "<builtin>.TypeError", "keras.constraints.get", "normalization.batch_normalization.BatchNormalizationBase._fused_can_be_used"], "normalization.batch_normalization.BatchNormalizationBase._raise_if_fused_cannot_be_used": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.isinstance"], "normalization.batch_normalization.BatchNormalizationBase._fused_can_be_used": ["normalization.batch_normalization.BatchNormalizationBase._raise_if_fused_cannot_be_used"], "normalization.batch_normalization.BatchNormalizationBase.trainable": [], "normalization.batch_normalization.BatchNormalizationBase._param_dtype": [], "normalization.batch_normalization.BatchNormalizationBase._support_zero_size_input": ["distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy", "<builtin>.getattr"], "normalization.batch_normalization.BatchNormalizationBase.build": ["<builtin>.range", "distribute.distribution_strategy_context.get_strategy", "<builtin>.list", "<builtin>.len", "keras.backend.constant", "<builtin>.set", "base_layer.Layer.add_weight", "Layer._scope.set_partitioner", "<builtin>.enumerate", "<builtin>.isinstance", "framework.tensor_shape.TensorShape", "<builtin>.hasattr", "engine.input_spec.InputSpec", "<builtin>.tuple", "normalization.batch_normalization.BatchNormalizationBase.build._renorm_variable", "<builtin>.ValueError", "normalization.batch_normalization.BatchNormalizationBase._fused_can_be_used"], "Layer._scope.set_partitioner": [], "normalization.batch_normalization.BatchNormalizationBase.build.moving_stddev_initializer": ["ops.math_ops.sqrt"], "normalization.batch_normalization.BatchNormalizationBase.build._renorm_variable": ["base_layer.Layer.add_weight"], "normalization.batch_normalization.BatchNormalizationBase._assign_moving_average": ["framework.ops.executing_eagerly_outside_functions", "keras.backend.name_scope", "normalization.batch_normalization.BatchNormalizationBase._assign_moving_average.calculate_update_delta", "ops.state_ops.assign_sub", "framework.ops._colocate_with"], "normalization.batch_normalization.BatchNormalizationBase._assign_moving_average.calculate_update_delta": ["ops.array_ops.where", "keras.backend.zeros_like", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.cast"], "framework.ops._colocate_with": ["framework.ops.colocate_with"], "normalization.batch_normalization.BatchNormalizationBase._assign_new_value": ["ops.state_ops.assign", "framework.ops.executing_eagerly_outside_functions", "framework.ops._colocate_with", "keras.backend.name_scope"], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm": ["framework.ops.executing_eagerly_outside_functions", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance", "normalization.batch_normalization.BatchNormalizationBase._support_zero_size_input", "utils.control_flow_util.constant_value", "ops.array_ops.shape", "ops.control_flow_ops.get_enclosing_xla_context", "base_layer.Layer.add_update", "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm._maybe_add_or_remove_bessels_correction", "utils.control_flow_util.smart_cond"], "ops.control_flow_ops.get_enclosing_xla_context": ["framework.ops.get_default_graph", "<builtin>.isinstance", "<builtin>.getattr"], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm._maybe_add_or_remove_bessels_correction": ["ops.array_ops.size", "ops.math_ops.cast"], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm._fused_batch_norm_training": ["ops.nn.fused_batch_norm", "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm._maybe_add_or_remove_bessels_correction"], "ops.nn.fused_batch_norm": [], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm._fused_batch_norm_training_empty": [], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm._fused_batch_norm_inference": ["ops.nn.fused_batch_norm"], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm.<lambda1>": ["utils.control_flow_util.smart_cond"], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm.<lambda2>": [], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm.<lambda3>": [], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm.mean_update": ["normalization.batch_normalization.BatchNormalizationBase._assign_new_value", "normalization.batch_normalization.BatchNormalizationBase._assign_moving_average"], "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm.variance_update": ["normalization.batch_normalization.BatchNormalizationBase._assign_new_value", "normalization.batch_normalization.BatchNormalizationBase._assign_moving_average"], "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments": ["normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments._update_renorm_variable", "framework.ops.control_dependencies", "ops.array_ops.identity", "ops.math_ops.minimum", "ops.math_ops.maximum", "ops.math_ops.sqrt", "utils.control_flow_util.smart_cond"], "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments.<lambda1>": [], "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments.<lambda2>": ["ops.array_ops.ones_like"], "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments.<lambda3>": [], "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments.<lambda4>": ["ops.array_ops.zeros_like"], "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments._update_renorm_variable": ["ops.array_ops.identity", "utils.control_flow_util.smart_cond"], "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments._update_renorm_variable._do_update": ["normalization.batch_normalization.BatchNormalizationBase._assign_moving_average"], "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments._update_renorm_variable._fake_update": ["ops.array_ops.identity"], "normalization.batch_normalization.BatchNormalizationBase._calculate_mean_and_var": ["ops.nn.moments"], "ops.nn.moments": [], "normalization.batch_normalization.BatchNormalizationBase._moments": ["ops.array_ops.where", "normalization.batch_normalization.BatchNormalizationBase._support_zero_size_input", "normalization.batch_normalization.BatchNormalizationBase._calculate_mean_and_var", "ops.array_ops.shape", "keras.backend.zeros_like"], "normalization.batch_normalization.BatchNormalizationBase._get_training_value": ["keras.backend.learning_phase", "<builtin>.bool", "<builtin>.isinstance"], "normalization.batch_normalization.BatchNormalizationBase.call": ["ops.array_ops.concat", "normalization.batch_normalization.BatchNormalizationBase._moments", "ops.math_ops.cast", "ops.nn.batch_normalization", "normalization.batch_normalization.BatchNormalizationBase._get_training_value", "framework.constant_op.constant", "utils.control_flow_util.constant_value", "normalization.batch_normalization.BatchNormalizationBase.call._broadcast", "normalization.batch_normalization.BatchNormalizationBase._fused_batch_norm", "<builtin>.len", "normalization.batch_normalization.BatchNormalizationBase.call.undo_virtual_batching", "ops.math_ops.reduce_mean", "base_layer.Layer.add_update", "normalization.batch_normalization.BatchNormalizationBase.call._compose_transforms", "normalization.batch_normalization.BatchNormalizationBase._renorm_correction_and_moments", "<builtin>.range", "ops.array_ops.reshape", "normalization.batch_normalization.BatchNormalizationBase._support_zero_size_input", "ops.array_ops.shape", "ops.array_ops.stop_gradient", "utils.control_flow_util.smart_cond"], "normalization.batch_normalization.BatchNormalizationBase.call.undo_virtual_batching": ["ops.array_ops.reshape"], "normalization.batch_normalization.BatchNormalizationBase.call._broadcast": ["<builtin>.range", "ops.array_ops.reshape", "<builtin>.list", "<builtin>.len"], "normalization.batch_normalization.BatchNormalizationBase.call._compose_transforms": [], "normalization.batch_normalization.BatchNormalizationBase.call.<lambda1>": [], "normalization.batch_normalization.BatchNormalizationBase.call.<lambda2>": ["ops.array_ops.ones_like"], "normalization.batch_normalization.BatchNormalizationBase.call.<lambda3>": [], "normalization.batch_normalization.BatchNormalizationBase.call.<lambda4>": ["ops.array_ops.zeros_like"], "normalization.batch_normalization.BatchNormalizationBase.call.<lambda5>": [], "normalization.batch_normalization.BatchNormalizationBase.call.<lambda6>": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "normalization.batch_normalization.BatchNormalizationBase.call.<lambda7>": [], "normalization.batch_normalization.BatchNormalizationBase.call.<lambda8>": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "ops.math_ops.reduce_mean": ["ops.math_ops._ReductionDims", "ops.math_ops._may_reduce_to_scalar", "ops.gen_math_ops.mean", "<builtin>.bool"], "ops.array_ops.stop_gradient": [], "normalization.batch_normalization.BatchNormalizationBase.call._do_update": ["normalization.batch_normalization.BatchNormalizationBase._assign_moving_average"], "normalization.batch_normalization.BatchNormalizationBase.call.mean_update": ["utils.control_flow_util.smart_cond"], "normalization.batch_normalization.BatchNormalizationBase.call.mean_update.<lambda1>": ["normalization.batch_normalization.BatchNormalizationBase.call._do_update"], "normalization.batch_normalization.BatchNormalizationBase.call.mean_update.<lambda2>": [], "normalization.batch_normalization.BatchNormalizationBase.call.variance_update": ["utils.control_flow_util.smart_cond"], "normalization.batch_normalization.BatchNormalizationBase.call.variance_update.true_branch_renorm": ["normalization.batch_normalization.BatchNormalizationBase._assign_new_value", "keras.backend.relu", "normalization.batch_normalization.BatchNormalizationBase.call._do_update", "ops.math_ops.sqrt"], "normalization.batch_normalization.BatchNormalizationBase.call.variance_update.<lambda1>": ["normalization.batch_normalization.BatchNormalizationBase.call._do_update"], "normalization.batch_normalization.BatchNormalizationBase.call.variance_update.<lambda2>": [], "ops.nn.batch_normalization": [], "normalization.batch_normalization.BatchNormalizationBase.compute_output_shape": [], "normalization.batch_normalization.BatchNormalizationBase.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super", "keras.initializers.serialize", "platform.tf_logging.warning", "keras.constraints.serialize", "keras.regularizers.serialize"], "normalization.batch_normalization.SyncBatchNormalization.__init__": ["<builtin>.ValueError", "<builtin>.super"], "normalization.batch_normalization.SyncBatchNormalization._calculate_mean_and_var": ["<builtin>.range", "ops.math_ops.cast", "<builtin>.len", "keras.backend.name_scope", "ops.math_ops.squared_difference", "distribute.distribution_strategy_context.get_replica_context", "ops.math_ops.reduce_prod", "ops.array_ops.squeeze", "ops.math_ops.reduce_mean", "ops.math_ops.reduce_sum", "ops.math_ops.square", "ops.array_ops.stop_gradient", "ops.array_ops.shape_v2"], "ops.array_ops.shape_v2": ["ops.array_ops.shape"], "normalization.batch_normalization.BatchNormalization.__init__": ["<builtin>.super"], "normalization.batch_normalization_v1": [], "normalization.layer_normalization": [], "normalization.layer_normalization.LayerNormalization.__init__": ["keras.regularizers.get", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.super", "keras.constraints.get", "keras.initializers.get"], "normalization.layer_normalization.LayerNormalization._fused_can_be_used": ["<builtin>.sorted", "<builtin>.len"], "normalization.layer_normalization.LayerNormalization.build": ["<builtin>.ValueError", "base_layer.Layer.add_weight", "<builtin>.enumerate", "<builtin>.set", "<builtin>.list", "<builtin>.isinstance", "normalization.layer_normalization.LayerNormalization._fused_can_be_used", "<builtin>.tuple", "<builtin>.len"], "normalization.layer_normalization.LayerNormalization.call": ["normalization.layer_normalization.LayerNormalization.call._broadcast", "ops.array_ops.zeros", "ops.nn.fused_batch_norm", "ops.array_ops.reshape", "ops.math_ops.cast", "ops.array_ops.ones", "ops.array_ops.shape", "ops.nn.moments", "ops.nn.batch_normalization", "<builtin>.range", "<builtin>.sorted", "<builtin>.len"], "normalization.layer_normalization.LayerNormalization.call._broadcast": ["ops.array_ops.reshape", "<builtin>.len"], "normalization.layer_normalization.LayerNormalization.compute_output_shape": [], "normalization.layer_normalization.LayerNormalization.get_config": ["keras.initializers.serialize", "<builtin>.list", "<builtin>.super", "keras.regularizers.serialize", "<builtin>.dict", "keras.constraints.serialize"], "preprocessing.category_crossing": [], "preprocessing.category_crossing.CategoryCrossing.__init__": ["<builtin>.tuple", "<builtin>.super", "<builtin>.range", "<builtin>.isinstance"], "preprocessing.category_crossing.CategoryCrossing.partial_crossing": ["ops.sparse_ops.sparse_cross", "ragged.ragged_array_ops.cross", "ops.sparse_ops.sparse_tensor_to_dense", "<builtin>.ValueError"], "ragged.ragged_array_ops.cross": ["ragged.ragged_array_ops._cross_internal"], "ops.sparse_ops.sparse_cross": ["ops.sparse_ops._sparse_cross_internal_v2", "ops.gen_sparse_ops.sparse_cross_v2", "framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor"], "preprocessing.category_crossing.CategoryCrossing._preprocess_input": ["framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.expand_dims", "<builtin>.isinstance"], "preprocessing.category_crossing.CategoryCrossing.call": ["preprocessing.category_crossing.CategoryCrossing.partial_crossing", "ops.sparse_ops.sparse_concat_v2", "ops.array_ops.concat", "itertools.combinations", "utils.tf_utils.is_ragged", "<builtin>.len", "preprocessing.category_crossing.CategoryCrossing._preprocess_input", "<builtin>.ValueError", "<builtin>.any", "<builtin>.isinstance"], "itertools.combinations": [], "preprocessing.category_crossing.CategoryCrossing.compute_output_shape": ["framework.tensor_shape.TensorShape", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance"], "preprocessing.category_crossing.CategoryCrossing.compute_output_signature": ["preprocessing.category_crossing.CategoryCrossing.compute_output_shape", "<builtin>.isinstance", "framework.tensor_spec.TensorSpec", "<builtin>.any", "framework.sparse_tensor.SparseTensorSpec"], "preprocessing.category_crossing.CategoryCrossing.get_config": ["<builtin>.super", "<builtin>.list", "<builtin>.dict"], "preprocessing.category_encoding": [], "preprocessing.category_encoding.CategoryEncoding.__init__": ["<builtin>.ValueError", "platform.tf_logging.warning", "utils.layer_utils.validate_string_arg", "<builtin>.super"], "preprocessing.category_encoding.CategoryEncoding.compute_output_shape": ["framework.tensor_shape.TensorShape"], "preprocessing.category_encoding.CategoryEncoding.compute_output_signature": ["framework.sparse_tensor.SparseTensorSpec", "framework.tensor_spec.TensorSpec", "preprocessing.category_encoding.CategoryEncoding.compute_output_shape"], "preprocessing.category_encoding.CategoryEncoding.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super"], "preprocessing.category_encoding.CategoryEncoding.call": ["ops.control_flow_ops.Assert", "<builtin>.isinstance", "ops.math_ops.reduce_min", "preprocessing.category_encoding.dense_bincount", "preprocessing.category_encoding.sparse_bincount", "ops.math_ops.logical_and", "framework.ops.convert_to_tensor_v2_with_dispatch", "preprocessing.category_encoding.CategoryEncoding.call.expand_dims", "ops.math_ops.cast", "framework.ops.control_dependencies", "ops.math_ops.greater", "ops.math_ops.greater_equal", "<builtin>.ValueError", "ops.math_ops.reduce_max"], "preprocessing.category_encoding.CategoryEncoding.call.expand_dims": ["ops.array_ops.expand_dims", "ops.sparse_ops.sparse_expand_dims", "utils.tf_utils.is_sparse"], "ops.sparse_ops.sparse_expand_dims": ["ops.array_ops.concat", "framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "framework.ops.name_scope", "<builtin>.isinstance", "ops.array_ops.zeros", "ops.array_ops.slice", "ops.array_ops.where_v2", "<builtin>.TypeError"], "preprocessing.category_encoding.sparse_bincount": ["ops.array_ops.shape", "ops.bincount_ops.sparse_bincount", "framework.sparse_tensor.SparseTensor", "keras.backend.floatx", "ops.math_ops.cast"], "preprocessing.category_encoding.dense_bincount": ["keras.backend.floatx", "ops.bincount_ops.bincount", "framework.tensor_shape.TensorShape"], "ops.bincount_ops.sparse_bincount": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ops.gen_count_ops.sparse_count_sparse_output", "<builtin>.isinstance", "ops.gen_count_ops.ragged_count_sparse_output", "ops.gen_count_ops.dense_count_sparse_output", "framework.sparse_tensor.SparseTensor", "framework.ops.name_scope", "<builtin>.ValueError", "ops.bincount_ops.validate_dense_weights", "ops.array_ops.reshape", "ops.bincount_ops.validate_sparse_weights", "ops.bincount_ops.validate_ragged_weights"], "ops.bincount_ops.bincount": ["ops.gen_math_ops.ragged_bincount", "ops.math_ops.cast", "ops.gen_math_ops.bincount", "ops.gen_math_ops.unsorted_segment_sum", "ops.array_ops.shape", "ops.gen_math_ops.minimum", "ops.gen_math_ops.sparse_bincount", "framework.constant_op.constant", "ops.bincount_ops.validate_sparse_weights", "framework.ops.convert_to_tensor", "ops.bincount_ops.validate_ragged_weights", "ops.math_ops.reduce_max", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.isinstance", "<builtin>.ValueError", "ops.array_ops.reshape", "ops.gen_math_ops.maximum", "ops.gen_math_ops.dense_bincount", "framework.ops.name_scope", "ops.bincount_ops.validate_dense_weights", "ops.math_ops.reduce_prod"], "preprocessing.discretization": [], "preprocessing.discretization.summarize": ["ops.math_ops.maximum", "ops.array_ops.size", "ops.array_ops.ones_like", "ops.math_ops.cast", "ops.sort_ops.sort", "ops.array_ops.reshape", "ops.array_ops.stack"], "preprocessing.discretization.compress": ["ops.script_ops.numpy_function"], "preprocessing.discretization.compress.<lambda1>": ["preprocessing.discretization._compress_summary_numpy"], "preprocessing.discretization._compress_summary_numpy": ["numpy.arange", "numpy.interp", "numpy.array", "numpy.concatenate", "numpy.stack"], "numpy.interp": [], "numpy.stack": [], "preprocessing.discretization.merge_summaries": ["ops.array_ops.concat", "preprocessing.discretization.compress", "ops.array_ops.gather_v2", "ops.sort_ops.argsort"], "preprocessing.discretization.get_bin_boundaries": ["preprocessing.discretization.compress"], "preprocessing.discretization.Discretization.__init__": ["preprocessing.discretization.Discretization._convert_to_list", "platform.tf_logging.warning", "<builtin>.ValueError", "<builtin>.super", "<builtin>.isinstance"], "preprocessing.discretization.Discretization._convert_to_list": ["framework.tensor_util.is_tensor", "<builtin>.list", "<builtin>.isinstance"], "preprocessing.discretization.Discretization.build": ["base_preprocessing_layer.PreprocessingLayer.add_weight", "<builtin>.super"], "preprocessing.discretization.Discretization.build.<lambda1>": [], "base_preprocessing_layer.PreprocessingLayer.add_weight": [], "preprocessing.discretization.Discretization.update_state": ["framework.ops.convert_to_tensor_v2_with_dispatch", "preprocessing.discretization.merge_summaries", "preprocessing.discretization.summarize", "<builtin>.ValueError", "<builtin>.RuntimeError", "ops.math_ops.cast"], "preprocessing.discretization.Discretization.merge_state": ["preprocessing.discretization.Discretization.finalize_state", "preprocessing.discretization.merge_summaries", "<builtin>.ValueError"], "preprocessing.discretization.Discretization.finalize_state": ["preprocessing.discretization.get_bin_boundaries", "preprocessing.discretization.Discretization._convert_to_list"], "preprocessing.discretization.Discretization.reset_state": [], "preprocessing.discretization.Discretization.get_config": ["<builtin>.super"], "preprocessing.discretization.Discretization.compute_output_shape": [], "preprocessing.discretization.Discretization.compute_output_signature": ["framework.sparse_tensor.SparseTensorSpec", "<builtin>.isinstance", "preprocessing.discretization.Discretization.compute_output_shape", "framework.tensor_spec.TensorSpec"], "preprocessing.discretization.Discretization.call": ["utils.tf_utils.is_sparse", "ops.array_ops.identity", "framework.sparse_tensor.SparseTensor", "ragged.ragged_functional_ops.map_flat_values", "utils.tf_utils.is_ragged", "preprocessing.discretization.Discretization.call.bucketize"], "preprocessing.discretization.Discretization.call.bucketize": ["ops.gen_math_ops.Bucketize"], "ops.gen_math_ops.Bucketize": [], "ragged.ragged_functional_ops.map_flat_values": ["ragged_tensor.RaggedTensor.from_nested_row_splits", "<builtin>.set", "framework.ops.control_dependencies", "<builtin>.ValueError", "ragged.ragged_util.assert_splits_match", "ragged.ragged_functional_ops._replace_ragged_with_flat_values", "ragged.ragged_config.auto_cast_partition_dtype", "<builtin>.len", "ops.math_ops.cast"], "framework.tensor_util.is_tensor": [], "preprocessing.hashing": [], "preprocessing.hashing.Hashing.__init__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.ValueError", "<builtin>.len"], "preprocessing.hashing.Hashing._preprocess_single_input": ["<builtin>.isinstance", "framework.ops.convert_to_tensor_v2_with_dispatch"], "preprocessing.hashing.Hashing._preprocess_inputs": ["<builtin>.isinstance", "framework.tensor_util.is_tf_type", "<builtin>.any", "preprocessing.hashing.Hashing._preprocess_single_input"], "preprocessing.hashing.Hashing.call": ["<builtin>.isinstance", "preprocessing.hashing.Hashing._preprocess_inputs", "preprocessing.hashing.Hashing._hash_values_to_bins", "framework.sparse_tensor.SparseTensor"], "preprocessing.hashing.Hashing._hash_values_to_bins": ["ops.string_ops.as_string", "ops.array_ops.where", "ops.array_ops.zeros_like", "preprocessing.hashing.Hashing._get_string_to_hash_bucket_fn", "ops.math_ops.equal", "ops.math_ops.add", "ops.array_ops.ones_like", "ops.string_ops.string_to_hash_bucket_fast"], "preprocessing.hashing.Hashing._get_string_to_hash_bucket_fn": ["functools.partial"], "ops.string_ops.string_to_hash_bucket_fast": [], "preprocessing.hashing.Hashing.compute_output_shape": [], "preprocessing.hashing.Hashing.compute_output_signature": ["preprocessing.hashing.Hashing.compute_output_shape", "<builtin>.isinstance", "framework.sparse_tensor.SparseTensorSpec", "framework.tensor_spec.TensorSpec"], "preprocessing.hashing.Hashing.get_config": ["<builtin>.dict", "<builtin>.list", "<builtin>.super"], "preprocessing.image_preprocessing": [], "preprocessing.image_preprocessing.check_fill_mode_and_interpolation": ["<builtin>.NotImplementedError"], "preprocessing.image_preprocessing.Resizing.__init__": ["preprocessing.image_preprocessing.get_interpolation", "engine.input_spec.InputSpec", "<builtin>.super"], "preprocessing.image_preprocessing.Resizing.call": ["preprocessing.image.smart_resize", "ops.image_ops.resize_images_v2"], "preprocessing.image_preprocessing.Resizing.compute_output_shape": ["framework.tensor_shape.TensorShape"], "preprocessing.image_preprocessing.Resizing.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.CenterCrop.__init__": ["engine.input_spec.InputSpec", "<builtin>.super"], "preprocessing.image_preprocessing.CenterCrop.call": ["framework.ops.control_dependencies", "ops.array_ops.shape", "ops.array_ops.slice", "ops.check_ops.assert_non_negative", "ops.math_ops.cast", "ops.array_ops.stack"], "ops.check_ops.assert_non_negative": ["eager.context.executing_eagerly", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.check_ops.assert_less_equal", "ops.check_ops._shape_and_dtype_str"], "preprocessing.image_preprocessing.CenterCrop.compute_output_shape": ["framework.tensor_shape.TensorShape"], "preprocessing.image_preprocessing.CenterCrop.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.RandomCrop.__init__": ["engine.input_spec.InputSpec", "preprocessing.image_preprocessing.make_generator", "<builtin>.super"], "preprocessing.image_preprocessing.make_generator": ["stateful_random_ops.Generator.from_non_deterministic_state", "stateful_random_ops.Generator.from_seed"], "preprocessing.image_preprocessing.RandomCrop.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "preprocessing.image_preprocessing.RandomCrop.call.random_cropped_inputs": ["framework.ops.control_dependencies", "ops.array_ops.shape", "ops.array_ops.slice", "ops.control_flow_ops.Assert", "ops.stateless_random_ops.stateless_random_uniform", "ops.array_ops.stack", "ops.math_ops.reduce_all"], "preprocessing.image_preprocessing.RandomCrop.call.resize_and_center_cropped_inputs": ["ops.array_ops.shape", "ops.array_ops.slice", "ops.math_ops.cast", "utils.control_flow_util.smart_cond", "ops.array_ops.stack", "ops.image_ops.resize_images_v2"], "preprocessing.image_preprocessing.RandomCrop.call.resize_and_center_cropped_inputs.<lambda1>": ["ops.math_ops.cast"], "preprocessing.image_preprocessing.RandomCrop.call.resize_and_center_cropped_inputs.<lambda2>": [], "preprocessing.image_preprocessing.RandomCrop.call.resize_and_center_cropped_inputs.<lambda3>": [], "preprocessing.image_preprocessing.RandomCrop.call.resize_and_center_cropped_inputs.<lambda4>": ["ops.math_ops.cast"], "preprocessing.image_preprocessing.RandomCrop.compute_output_shape": ["framework.tensor_shape.TensorShape"], "preprocessing.image_preprocessing.RandomCrop.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.Rescaling.__init__": ["<builtin>.super"], "preprocessing.image_preprocessing.Rescaling.call": ["ops.math_ops.cast"], "preprocessing.image_preprocessing.Rescaling.compute_output_shape": [], "preprocessing.image_preprocessing.Rescaling.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.RandomFlip.__init__": ["engine.input_spec.InputSpec", "<builtin>.ValueError", "preprocessing.image_preprocessing.make_generator", "<builtin>.super"], "preprocessing.image_preprocessing.RandomFlip.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "preprocessing.image_preprocessing.RandomFlip.call.random_flipped_inputs": ["ops.image_ops.stateless_random_flip_left_right", "ops.image_ops.stateless_random_flip_up_down"], "ops.image_ops.stateless_random_flip_left_right": [], "ops.image_ops.stateless_random_flip_up_down": [], "preprocessing.image_preprocessing.RandomFlip.call.<lambda1>": [], "preprocessing.image_preprocessing.RandomFlip.compute_output_shape": [], "preprocessing.image_preprocessing.RandomFlip.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.RandomTranslation.__init__": ["<builtin>.isinstance", "preprocessing.image_preprocessing.make_generator", "<builtin>.super", "preprocessing.image_preprocessing.check_fill_mode_and_interpolation", "<builtin>.ValueError", "<builtin>.abs", "engine.input_spec.InputSpec"], "preprocessing.image_preprocessing.RandomTranslation.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "preprocessing.image_preprocessing.RandomTranslation.call.random_translated_inputs": ["preprocessing.image_preprocessing.transform", "ops.array_ops.shape", "ops.array_ops.concat", "ops.math_ops.cast", "preprocessing.image_preprocessing.get_translation_matrix"], "preprocessing.image_preprocessing.get_translation_matrix": ["ops.array_ops.shape", "ops.array_ops.concat", "keras.backend.name_scope", "ops.array_ops.ones", "ops.array_ops.zeros"], "preprocessing.image_preprocessing.transform": ["eager.context.executing_eagerly", "ops.array_ops.shape", "keras.backend.name_scope", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.ValueError", "ops.gen_image_ops.ImageProjectiveTransformV3", "framework.tensor_util.constant_value"], "preprocessing.image_preprocessing.RandomTranslation.call.<lambda1>": [], "preprocessing.image_preprocessing.RandomTranslation.compute_output_shape": [], "preprocessing.image_preprocessing.RandomTranslation.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "ops.gen_image_ops.ImageProjectiveTransformV3": [], "preprocessing.image_preprocessing.get_rotation_matrix": ["ops.array_ops.shape", "ops.array_ops.concat", "keras.backend.name_scope", "ops.array_ops.zeros", "ops.math_ops.cos", "ops.math_ops.sin"], "ops.math_ops.sin": [], "preprocessing.image_preprocessing.RandomRotation.__init__": ["<builtin>.isinstance", "preprocessing.image_preprocessing.make_generator", "<builtin>.super", "preprocessing.image_preprocessing.check_fill_mode_and_interpolation", "<builtin>.ValueError", "engine.input_spec.InputSpec"], "preprocessing.image_preprocessing.RandomRotation.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "preprocessing.image_preprocessing.RandomRotation.call.random_rotated_inputs": ["ops.array_ops.shape", "preprocessing.image_preprocessing.get_rotation_matrix", "preprocessing.image_preprocessing.transform", "ops.math_ops.cast"], "preprocessing.image_preprocessing.RandomRotation.call.<lambda1>": [], "preprocessing.image_preprocessing.RandomRotation.compute_output_shape": [], "preprocessing.image_preprocessing.RandomRotation.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.RandomZoom.__init__": ["<builtin>.isinstance", "preprocessing.image_preprocessing.make_generator", "<builtin>.super", "preprocessing.image_preprocessing.check_fill_mode_and_interpolation", "<builtin>.ValueError", "<builtin>.abs", "engine.input_spec.InputSpec"], "preprocessing.image_preprocessing.RandomZoom.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "preprocessing.image_preprocessing.RandomZoom.call.random_zoomed_inputs": ["preprocessing.image_preprocessing.transform", "preprocessing.image_preprocessing.get_zoom_matrix", "ops.array_ops.shape", "ops.array_ops.concat", "ops.math_ops.cast"], "preprocessing.image_preprocessing.get_zoom_matrix": ["ops.array_ops.shape", "ops.array_ops.concat", "keras.backend.name_scope", "ops.array_ops.zeros"], "preprocessing.image_preprocessing.RandomZoom.call.<lambda1>": [], "preprocessing.image_preprocessing.RandomZoom.compute_output_shape": [], "preprocessing.image_preprocessing.RandomZoom.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.RandomContrast.__init__": ["<builtin>.isinstance", "preprocessing.image_preprocessing.make_generator", "<builtin>.super", "<builtin>.ValueError", "engine.input_spec.InputSpec"], "preprocessing.image_preprocessing.RandomContrast.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "preprocessing.image_preprocessing.RandomContrast.call.random_contrasted_inputs": ["ops.image_ops.stateless_random_contrast"], "ops.image_ops.stateless_random_contrast": [], "preprocessing.image_preprocessing.RandomContrast.call.<lambda1>": [], "preprocessing.image_preprocessing.RandomContrast.compute_output_shape": [], "preprocessing.image_preprocessing.RandomContrast.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.RandomHeight.__init__": ["<builtin>.isinstance", "preprocessing.image_preprocessing.make_generator", "<builtin>.super", "<builtin>.ValueError", "preprocessing.image_preprocessing.get_interpolation", "engine.input_spec.InputSpec"], "preprocessing.image_preprocessing.RandomHeight.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "preprocessing.image_preprocessing.RandomHeight.call.random_height_inputs": ["ops.array_ops.shape", "ops.image_ops.resize_images_v2", "ops.array_ops.stack", "ops.math_ops.cast"], "preprocessing.image_preprocessing.RandomHeight.call.<lambda1>": [], "preprocessing.image_preprocessing.RandomHeight.compute_output_shape": ["framework.tensor_shape.TensorShape"], "preprocessing.image_preprocessing.RandomHeight.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "preprocessing.image_preprocessing.RandomWidth.__init__": ["<builtin>.isinstance", "preprocessing.image_preprocessing.make_generator", "<builtin>.super", "<builtin>.ValueError", "preprocessing.image_preprocessing.get_interpolation", "engine.input_spec.InputSpec"], "preprocessing.image_preprocessing.RandomWidth.call": ["utils.control_flow_util.smart_cond", "keras.backend.learning_phase"], "preprocessing.image_preprocessing.RandomWidth.call.random_width_inputs": ["ops.array_ops.shape", "ops.image_ops.resize_images_v2", "ops.array_ops.stack", "ops.math_ops.cast"], "preprocessing.image_preprocessing.RandomWidth.call.<lambda1>": [], "preprocessing.image_preprocessing.RandomWidth.compute_output_shape": ["framework.tensor_shape.TensorShape"], "preprocessing.image_preprocessing.RandomWidth.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "stateful_random_ops.Generator.from_seed": [], "stateful_random_ops.Generator.from_non_deterministic_state": [], "preprocessing.index_lookup": [], "preprocessing.index_lookup._NullInitializer.__init__": ["framework.dtypes.as_dtype"], "preprocessing.index_lookup._NullInitializer.key_dtype": [], "preprocessing.index_lookup._NullInitializer.value_dtype": [], "preprocessing.index_lookup._NullInitializer.initialize": [], "preprocessing.index_lookup._NullInitializer._shared_name": ["keras.backend.get_uid", "eager.context.executing_eagerly", "<builtin>.str"], "preprocessing.index_lookup.IndexLookup.__init__": ["<builtin>.list", "platform.gfile.Exists", "utils.layer_utils.validate_string_arg", "ops.lookup_ops.MutableHashTable", "<builtin>.super", "numpy.int32", "framework.tensor_shape.TensorShape", "preprocessing.index_lookup.IndexLookup._oov_start_index", "base_preprocessing_layer.CombinerPreprocessingLayer._add_trackable", "preprocessing.index_lookup._IndexLookupCombiner.__init__", "base_preprocessing_layer.CombinerPreprocessingLayer._add_state_variable", "preprocessing.index_lookup._NullInitializer.__init__", "<builtin>.range", "preprocessing.index_lookup.IndexLookup.set_vocabulary", "ops.lookup_ops.TextFileInitializer", "preprocessing.index_lookup.IndexLookup._token_start_index", "<builtin>.ValueError", "<builtin>.isinstance", "ops.lookup_ops.StaticHashTable", "preprocessing.table_utils.TableHandler", "numpy.int64", "preprocessing.table_utils.num_tokens_in_file", "keras.backend.floatx"], "numpy.int32": [], "preprocessing.index_lookup.IndexLookup._token_start_index": ["preprocessing.index_lookup.IndexLookup._oov_start_index"], "preprocessing.index_lookup._IndexLookupCombiner.__init__": [], "preprocessing.index_lookup.IndexLookup._oov_start_index": [], "preprocessing.table_utils.num_tokens_in_file": ["platform.gfile.GFile"], "ops.lookup_ops.TextFileInitializer": [], "ops.lookup_ops.StaticHashTable": [], "preprocessing.table_utils.TableHandler": [], "base_preprocessing_layer.CombinerPreprocessingLayer._add_trackable": [], "ops.lookup_ops.MutableHashTable": [], "preprocessing.index_lookup.IndexLookup.set_vocabulary": ["framework.tensor_util.is_tensor", "preprocessing.index_lookup.IndexLookup._convert_to_ndarray", "numpy.pad", "<builtin>.isinstance", "<builtin>.any", "preprocessing.index_lookup.IndexLookup._tensor_vocab_to_numpy", "preprocessing.table_utils.find_repeated_tokens", "<builtin>.all", "<builtin>.len", "numpy.average", "<builtin>.type", "numpy.arange", "keras.backend.set_value", "<builtin>.RuntimeError", "eager.context.executing_eagerly", "preprocessing.index_lookup.IndexLookup._token_start_index", "<builtin>.ValueError", "preprocessing.index_lookup.IndexLookup._oov_start_index"], "preprocessing.index_lookup.IndexLookup.__init__.<lambda1>": [], "base_preprocessing_layer.CombinerPreprocessingLayer._add_state_variable": [], "preprocessing.index_lookup.IndexLookup.compute_output_shape": ["framework.tensor_shape.TensorShape"], "preprocessing.index_lookup.IndexLookup.compute_output_signature": ["keras.backend.floatx", "preprocessing.index_lookup.IndexLookup.compute_output_shape", "framework.tensor_spec.TensorSpec"], "preprocessing.index_lookup.IndexLookup.adapt": ["<builtin>.super", "<builtin>.ValueError"], "preprocessing.index_lookup.IndexLookup.get_vocabulary": ["preprocessing.index_lookup.IndexLookup._tensor_vocab_to_numpy", "preprocessing.index_lookup.IndexLookup.vocabulary_size", "collections.defaultdict", "<builtin>.range", "<builtin>.zip", "preprocessing.index_lookup.IndexLookup._token_start_index"], "preprocessing.index_lookup.IndexLookup.vocabulary_size": [], "preprocessing.index_lookup.IndexLookup.get_vocabulary.<lambda1>": [], "preprocessing.index_lookup.IndexLookup._tensor_vocab_to_numpy": [], "preprocessing.index_lookup.IndexLookup.vocab_size": ["platform.tf_logging.warning", "preprocessing.index_lookup.IndexLookup.vocabulary_size"], "preprocessing.index_lookup.IndexLookup.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super", "preprocessing.index_lookup.IndexLookup.vocabulary_size"], "preprocessing.index_lookup.IndexLookup.count_params": [], "preprocessing.table_utils.find_repeated_tokens": ["<builtin>.set", "collections.Counter", "<builtin>.len"], "preprocessing.index_lookup.IndexLookup._convert_to_ndarray": ["<builtin>.isinstance", "numpy.array"], "numpy.pad": [], "preprocessing.index_lookup.IndexLookup._set_state_variables": ["<builtin>.RuntimeError", "preprocessing.index_lookup.IndexLookup.set_vocabulary"], "preprocessing.index_lookup.IndexLookup.call": ["ops.control_flow_ops.Assert", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance", "ops.math_ops.cast", "ops.math_ops.equal", "utils.tf_utils.is_ragged", "preprocessing.index_lookup.IndexLookup._encode_output", "ops.array_ops.gather_nd", "framework.ops.control_dependencies", "ops.array_ops.size", "ops.array_ops.identity", "ops.string_ops.string_format", "ops.array_ops.where_v2", "utils.tf_utils.is_sparse", "<builtin>.ValueError"], "ops.array_ops.gather_nd": ["ops.gen_array_ops.gather_nd", "ops.array_ops.batch_gather_nd", "framework.tensor_util.constant_value", "<builtin>.int"], "ops.string_ops.string_format": ["<builtin>.len", "<builtin>.ValueError", "framework.tensor_util.is_tf_type", "ops.gen_string_ops.string_format"], "preprocessing.index_lookup.IndexLookup._encode_output": ["preprocessing.category_encoding.sparse_bincount", "preprocessing.index_lookup.IndexLookup._encode_output.expand_dims", "ops.math_ops.multiply", "<builtin>.ValueError", "preprocessing.category_encoding.dense_bincount"], "preprocessing.index_lookup.IndexLookup._encode_output.expand_dims": ["ops.sparse_ops.sparse_expand_dims", "ops.array_ops.expand_dims", "utils.tf_utils.is_sparse"], "preprocessing.index_lookup.IndexLookup._trackable_saved_model_saver": ["saved_model.layer_serialization.IndexLookupLayerSavedModelSaver"], "saved_model.layer_serialization.IndexLookupLayerSavedModelSaver": [], "preprocessing.index_lookup._IndexLookupCombiner.compute": ["engine.base_preprocessing_layer.convert_to_list", "<builtin>.isinstance", "preprocessing.index_lookup._IndexLookupCombiner._create_accumulator"], "preprocessing.index_lookup._IndexLookupCombiner._create_accumulator": ["collections.defaultdict"], "preprocessing.index_lookup._IndexLookupCombiner.merge": [], "preprocessing.index_lookup._IndexLookupCombiner.extract": ["<builtin>.isinstance", "operator.itemgetter", "<builtin>.sorted", "preprocessing.index_lookup._IndexLookupCombiner._inverse_document_frequency", "util.compat.as_bytes"], "operator.itemgetter": [], "preprocessing.index_lookup._IndexLookupCombiner._inverse_document_frequency": ["numpy.array", "numpy.log"], "preprocessing.index_lookup._IndexLookupCombiner.restore": ["<builtin>.NotImplementedError"], "preprocessing.index_lookup._IndexLookupCombiner.serialize": ["<builtin>.list", "util.compat.as_bytes", "json.dumps"], "preprocessing.index_lookup._IndexLookupCombiner.deserialize": ["json.loads", "preprocessing.index_lookup._IndexLookupCombiner.deserialize.<lambda1>", "<builtin>.dict", "<builtin>.zip", "preprocessing.index_lookup._IndexLookupCombiner._create_accumulator", "util.compat.as_text"], "preprocessing.index_lookup._IndexLookupCombiner.deserialize.<lambda1>": [], "preprocessing.index_lookup._IndexLookupCombiner._create_accumulator.<lambda1>": [], "numpy.log": [], "preprocessing.integer_lookup": [], "preprocessing.integer_lookup.IntegerLookup.__init__": ["<builtin>.ValueError", "platform.tf_logging.log_first_n", "<builtin>.super"], "preprocessing.integer_lookup.IntegerLookup.set_vocabulary": ["<builtin>.isinstance", "<builtin>.RuntimeError", "preprocessing.table_utils.get_vocabulary_from_file", "<builtin>.int", "<builtin>.super"], "preprocessing.table_utils.get_vocabulary_from_file": ["platform.gfile.GFile", "<builtin>.isinstance"], "preprocessing.normalization": [], "preprocessing.normalization.Normalization.__init__": ["<builtin>.ValueError", "<builtin>.tuple", "<builtin>.isinstance", "<builtin>.super"], "preprocessing.normalization.Normalization.build": ["<builtin>.range", "<builtin>.tuple", "framework.tensor_shape.TensorShape", "numpy.ones", "<builtin>.sorted", "<builtin>.any", "ops.array_ops.reshape", "<builtin>.len", "<builtin>.ValueError", "preprocessing.normalization.Normalization.finalize_state", "base_preprocessing_layer.PreprocessingLayer.add_weight", "ops.math_ops.cast", "<builtin>.super"], "preprocessing.normalization.Normalization.finalize_state": ["ops.math_ops.cast", "ops.array_ops.reshape"], "preprocessing.normalization.Normalization.update_state": ["ops.math_ops.reduce_prod", "ops.nn_impl.moments_v2", "ops.array_ops.gather", "ops.array_ops.shape", "<builtin>.RuntimeError", "<builtin>.ValueError", "ops.math_ops.cast", "preprocessing.normalization.Normalization._standardize_inputs"], "preprocessing.normalization.Normalization._standardize_inputs": ["ops.array_ops.expand_dims", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.reshape"], "ops.nn_impl.moments_v2": ["ops.nn_impl.moments"], "preprocessing.normalization.Normalization.merge_state": ["ops.math_ops.reduce_sum", "ops.array_ops.reshape", "<builtin>.ValueError", "<builtin>.len", "preprocessing.normalization.Normalization.finalize_state", "ops.math_ops.cast"], "preprocessing.normalization.Normalization.reset_state": ["ops.array_ops.zeros_like", "ops.array_ops.ones_like"], "preprocessing.normalization.Normalization.call": ["keras.backend.epsilon", "ops.math_ops.maximum", "ops.math_ops.sqrt", "ops.math_ops.cast", "preprocessing.normalization.Normalization._standardize_inputs"], "preprocessing.normalization.Normalization.compute_output_shape": [], "preprocessing.normalization.Normalization.compute_output_signature": [], "preprocessing.normalization.Normalization.get_config": ["<builtin>.super"], "preprocessing.normalization.Normalization._convert_to_list": ["<builtin>.isinstance", "<builtin>.list", "framework.tensor_util.is_tensor"], "preprocessing.preprocessing_stage": [], "preprocessing.preprocessing_stage.PreprocessingStage.adapt": ["<builtin>.hasattr", "<builtin>.range", "<builtin>.isinstance", "preprocessing.preprocessing_stage.PreprocessingStage.adapt.map_fn", "utils.tf_utils.dataset_is_infinite", "<builtin>.ValueError", "<builtin>.len", "<builtin>.type"], "preprocessing.preprocessing_stage.PreprocessingStage.adapt.map_fn": ["<builtin>.range"], "preprocessing.preprocessing_stage.FunctionalPreprocessingStage.fit": ["<builtin>.ValueError"], "preprocessing.preprocessing_stage.FunctionalPreprocessingStage.adapt": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.any", "utils.tf_utils.dataset_is_infinite", "<builtin>.ValueError", "Functional._nodes_by_depth.keys", "PreprocessingLayer._nodes_by_depth.keys", "preprocessing.preprocessing_stage.FunctionalPreprocessingStage.adapt.build_map_fn", "<builtin>.type", "<builtin>.id", "dataset_ops.Dataset.zip", "<builtin>.zip", "preprocessing.preprocessing_stage._unzip_dataset", "<builtin>.str", "util.nest.list_to_tuple", "<builtin>.sorted", "functional.Functional._flatten_to_reference_inputs", "dataset_ops.Dataset.from_tensor_slices"], "functional.Functional._flatten_to_reference_inputs": [], "preprocessing.preprocessing_stage._unzip_dataset": ["<builtin>.len", "<builtin>.range", "util.nest.flatten"], "Functional._nodes_by_depth.keys": [], "PreprocessingLayer._nodes_by_depth.keys": [], "preprocessing.preprocessing_stage.FunctionalPreprocessingStage.adapt.build_map_fn": ["<builtin>.isinstance"], "preprocessing.preprocessing_stage.FunctionalPreprocessingStage.adapt.build_map_fn.map_fn": ["util.nest.flatten"], "preprocessing.preprocessing_stage._unzip_dataset.map_fn": ["util.nest.flatten"], "preprocessing.reduction": [], "preprocessing.reduction.get_reduce_op": ["<builtin>.ValueError"], "preprocessing.reduction.Reduction.__init__": ["<builtin>.super"], "preprocessing.reduction.Reduction.call": ["preprocessing.reduction.get_reduce_op", "ops.math_ops.reduce_prod", "ops.math_ops.divide", "ops.math_ops.reduce_min", "ops.array_ops.expand_dims", "platform.tf_logging.warning", "ops.math_ops.reduce_mean", "<builtin>.ValueError", "ops.math_ops.multiply", "ops.math_ops.sqrt", "ops.math_ops.pow", "ops.math_ops.reduce_max", "ops.math_ops.reduce_sum"], "preprocessing.string_lookup": [], "preprocessing.string_lookup.StringLookup.__init__": ["<builtin>.super", "<builtin>.ValueError"], "preprocessing.string_lookup.StringLookup.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super"], "preprocessing.string_lookup.StringLookup.set_vocabulary": ["<builtin>.RuntimeError", "<builtin>.super", "preprocessing.table_utils.get_vocabulary_from_file", "<builtin>.isinstance"], "preprocessing.string_lookup.StringLookup._tensor_vocab_to_numpy": ["numpy.array", "util.compat.as_text"], "preprocessing.table_utils": [], "preprocessing.table_utils.TableHandler.__init__": ["ops.math_ops.cast", "<builtin>.isinstance"], "preprocessing.table_utils.TableHandler.table_size": [], "preprocessing.table_utils.TableHandler.clear": ["<builtin>.RuntimeError"], "preprocessing.table_utils.TableHandler.insert": ["<builtin>.RuntimeError", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.len", "<builtin>.ValueError"], "preprocessing.table_utils.TableHandler._replace_oov_buckets": ["ops.array_ops.gather", "ops.math_ops.floormod", "ops.array_ops.where", "ops.string_ops.string_to_hash_bucket_fast", "ops.math_ops.equal"], "ops.math_ops.floormod": [], "preprocessing.table_utils.TableHandler._lookup_and_mask": ["ops.math_ops.equal", "ops.math_ops.cast", "ops.array_ops.where_v2"], "preprocessing.table_utils.TableHandler._ragged_lookup": ["ops.array_ops.identity", "ragged.ragged_functional_ops.map_flat_values"], "preprocessing.table_utils.TableHandler._sparse_lookup": ["ops.array_ops.identity", "preprocessing.table_utils.TableHandler._replace_oov_buckets", "framework.sparse_tensor.SparseTensor", "preprocessing.table_utils.TableHandler._lookup_and_mask"], "preprocessing.table_utils.TableHandler._tensor_lookup": ["preprocessing.table_utils.TableHandler._replace_oov_buckets", "preprocessing.table_utils.TableHandler._lookup_and_mask"], "preprocessing.table_utils.TableHandler.lookup": ["ragged_tensor.RaggedTensor.from_nested_row_splits", "preprocessing.table_utils.TableHandler._tensor_lookup", "utils.tf_utils.is_ragged", "<builtin>.isinstance", "framework.ops.convert_to_tensor_v2_with_dispatch", "preprocessing.table_utils.TableHandler._sparse_lookup", "preprocessing.table_utils.TableHandler._ragged_lookup"], "ragged_tensor.RaggedTensor.from_nested_row_splits": [], "preprocessing.text_vectorization": [], "preprocessing.text_vectorization.TextVectorization.__init__": ["<builtin>.isinstance", "<builtin>.super", "preprocessing.string_lookup.StringLookup", "<builtin>.all", "<builtin>.tuple", "<builtin>.range", "utils.layer_utils.validate_string_arg", "<builtin>.ValueError"], "preprocessing.string_lookup.StringLookup": [], "preprocessing.text_vectorization.TextVectorization._assert_same_type": ["<builtin>.RuntimeError", "framework.dtypes.as_dtype"], "preprocessing.text_vectorization.TextVectorization.compute_output_shape": ["<builtin>.tuple", "<builtin>.len", "framework.tensor_shape.TensorShape", "<builtin>.list"], "preprocessing.text_vectorization.TextVectorization.compute_output_signature": ["preprocessing.text_vectorization.TextVectorization.compute_output_shape", "framework.tensor_spec.TensorSpec", "keras.backend.floatx"], "preprocessing.text_vectorization.TextVectorization.adapt": ["<builtin>.isinstance", "preprocessing.text_vectorization.TextVectorization._preprocess", "ops.array_ops.expand_dims", "preprocessing.text_vectorization.TextVectorization.build", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.ValueError", "ops.dataset_ops.get_legacy_output_shapes", "<builtin>.type"], "preprocessing.text_vectorization.TextVectorization.build": ["<builtin>.RuntimeError", "<builtin>.super"], "preprocessing.text_vectorization.TextVectorization._preprocess": ["ops.array_ops.squeeze", "ragged.ragged_string_ops.ngrams", "utils.tf_utils.is_ragged", "ops.array_ops.identity", "ops.gen_string_ops.string_lower", "<builtin>.callable", "ragged.ragged_string_ops.string_split_v2", "ragged.ragged_functional_ops.map_flat_values", "<builtin>.ValueError", "ops.string_ops.regex_replace"], "preprocessing.text_vectorization.TextVectorization.adapt.<lambda1>": ["ops.array_ops.expand_dims"], "preprocessing.text_vectorization.TextVectorization.adapt.<lambda2>": ["ops.array_ops.expand_dims"], "preprocessing.text_vectorization.TextVectorization.get_vocabulary": [], "preprocessing.text_vectorization.TextVectorization.vocabulary_size": [], "preprocessing.text_vectorization.TextVectorization.get_config": ["<builtin>.super", "<builtin>.dict", "<builtin>.list"], "preprocessing.text_vectorization.TextVectorization.count_params": [], "preprocessing.text_vectorization.TextVectorization.set_vocabulary": [], "preprocessing.text_vectorization.TextVectorization._set_state_variables": ["<builtin>.RuntimeError", "preprocessing.text_vectorization.TextVectorization.set_vocabulary"], "ops.gen_string_ops.string_lower": [], "ops.string_ops.regex_replace": ["ops.gen_string_ops.static_regex_replace", "ops.gen_string_ops.regex_replace", "<builtin>.isinstance"], "ragged.ragged_string_ops.string_split_v2": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "framework.ops.name_scope", "ragged_tensor.RaggedTensor.from_tensor", "<builtin>.isinstance", "ragged.ragged_string_ops.string_split_v2", "ops.array_ops.stack", "ops.string_ops.string_split_v2", "ragged_tensor.RaggedTensor.from_value_rowids"], "ragged.ragged_string_ops.ngrams": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged_tensor.RaggedTensor.from_row_splits", "framework.ops.name_scope", "ragged_tensor.RaggedTensor.from_tensor", "ops.gen_string_ops.string_n_grams", "ops.array_ops.shape", "<builtin>.ValueError", "<builtin>.isinstance", "ragged.ragged_string_ops.ngrams", "ops.array_ops.reshape", "ops.array_ops.concat", "ragged_tensor.RaggedTensor.from_row_starts", "<builtin>.TypeError"], "preprocessing.text_vectorization.TextVectorization.call": ["<builtin>.isinstance", "ops.array_ops.required_space_to_batch_paddings", "ops.array_ops.pad", "preprocessing.text_vectorization.TextVectorization._preprocess", "utils.tf_utils.is_ragged", "framework.ops.convert_to_tensor_v2_with_dispatch"], "ops.array_ops.required_space_to_batch_paddings": ["framework.ops.convert_to_tensor", "framework.tensor_util.constant_value", "<builtin>.range", "ops.array_ops.zeros", "framework.ops.name_scope", "ops.array_ops.stack"], "io.file_io": ["util.tf_export.tf_export"], "io.file_io.FileIO.__init__": ["framework.errors.InvalidArgumentError"], "framework.errors.InvalidArgumentError": [], "io.file_io.FileIO.name": [], "io.file_io.FileIO.mode": [], "io.file_io.FileIO._preread_check": ["io._pywrap_file_io.BufferedInputStream", "util.compat.path_to_str", "framework.errors.PermissionDeniedError"], "framework.errors.PermissionDeniedError": [], "util.compat.path_to_str": ["<builtin>.hasattr", "util.compat.as_str_any"], "io._pywrap_file_io.BufferedInputStream": [], "io.file_io.FileIO._prewrite_check": ["util.compat.path_to_bytes", "io._pywrap_file_io.WritableFile", "util.compat.as_bytes", "framework.errors.PermissionDeniedError"], "util.compat.path_to_bytes": ["util.compat.as_bytes", "<builtin>.hasattr"], "io._pywrap_file_io.WritableFile": [], "io.file_io.FileIO._prepare_value": ["util.compat.as_str_any", "util.compat.as_bytes"], "util.compat.as_str_any": ["util.compat.as_str", "<builtin>.str", "<builtin>.isinstance"], "io.file_io.FileIO.size": ["io.file_io.stat"], "io.file_io.stat": ["io.file_io.stat_v2"], "io.file_io.FileIO.write": ["util.compat.as_bytes", "io.file_io.FileIO._prewrite_check"], "io.file_io.FileIO.read": ["io.file_io.FileIO.tell", "io.file_io.FileIO._preread_check", "io.file_io.FileIO.size", "io.file_io.FileIO._prepare_value"], "io.file_io.FileIO.tell": ["io.file_io.FileIO._preread_check", "io.file_io.FileIO._prewrite_check"], "io.file_io.FileIO.seek": ["io.file_io.FileIO._preread_check", "io.file_io.FileIO.tell", "<builtin>.TypeError", "io.file_io.FileIO.size", "framework.errors.InvalidArgumentError"], "io.file_io.FileIO.readline": ["io.file_io.FileIO._preread_check", "io.file_io.FileIO._prepare_value"], "io.file_io.FileIO.readlines": ["io.file_io.FileIO._preread_check", "io.file_io.FileIO.readline"], "io.file_io.FileIO.__enter__": [], "io.file_io.FileIO.__exit__": ["io.file_io.FileIO.close"], "io.file_io.FileIO.close": [], "io.file_io.FileIO.__iter__": [], "io.file_io.FileIO.__next__": ["io.file_io.FileIO.readline", "<builtin>.StopIteration"], "<builtin>.StopIteration": [], "io.file_io.FileIO.next": ["io.file_io.FileIO.__next__"], "io.file_io.FileIO.flush": [], "io.file_io.FileIO.seekable": [], "io._pywrap_file_io.FileExists": [], "io.file_io.file_exists": ["io.file_io.file_exists_v2"], "io.file_io.delete_file": ["io.file_io.delete_file_v2"], "io.file_io.delete_file_v2": ["io._pywrap_file_io.DeleteFile", "util.compat.path_to_bytes"], "io._pywrap_file_io.DeleteFile": [], "io.file_io.read_file_to_string": ["io.file_io.FileIO.__init__", "io.file_io.FileIO.read"], "io.file_io.get_matching_files_v2": ["util.compat.as_str_any", "util.compat.as_bytes", "<builtin>.isinstance", "io._pywrap_file_io.GetMatchingFiles"], "io._pywrap_file_io.GetMatchingFiles": [], "io.file_io.create_dir": ["io.file_io.create_dir_v2"], "io.file_io.create_dir_v2": ["io._pywrap_file_io.CreateDir", "util.compat.path_to_bytes"], "io._pywrap_file_io.CreateDir": [], "io._pywrap_file_io.RecursivelyCreateDir": [], "io.file_io.copy_v2": ["io._pywrap_file_io.CopyFile", "util.compat.path_to_bytes"], "io._pywrap_file_io.CopyFile": [], "io.file_io.copy": ["io.file_io.copy_v2"], "io.file_io.rename": ["io.file_io.rename_v2"], "io.file_io.rename_v2": ["io._pywrap_file_io.RenameFile", "util.compat.path_to_bytes"], "io._pywrap_file_io.RenameFile": [], "io.file_io.atomic_write_string_to_file": ["io.file_io.has_atomic_move", "io.file_io.write_string_to_file", "io.file_io.rename", "io.file_io.delete_file", "uuid.uuid4"], "io.file_io.has_atomic_move": ["io._pywrap_file_io.HasAtomicMove", "util.compat.path_to_bytes"], "io._pywrap_file_io.DeleteRecursively": [], "io.file_io.is_directory_v2": ["io._pywrap_file_io.IsDirectory", "util.compat.path_to_bytes"], "io._pywrap_file_io.IsDirectory": [], "io._pywrap_file_io.HasAtomicMove": [], "io.file_io.list_directory": ["io.file_io.list_directory_v2"], "io.file_io.list_directory_v2": ["util.compat.as_str_any", "util.compat.path_to_bytes", "framework.errors.NotFoundError", "io.file_io.is_directory", "io._pywrap_file_io.GetChildren"], "framework.errors.NotFoundError": [], "io._pywrap_file_io.GetChildren": [], "io.file_io.walk": ["io.file_io.walk_v2"], "io.file_io.walk_v2": ["util.compat.as_str_any", "io.file_io.walk_v2._make_full_path", "io.file_io.list_directory", "io.file_io.is_directory", "util.compat.path_to_str", "io.file_io.walk_v2"], "io.file_io.walk_v2._make_full_path": ["os.path.join"], "io.file_io.stat_v2": ["io._pywrap_file_io.Stat", "util.compat.path_to_str"], "io._pywrap_file_io.Stat": [], "io.file_io.filecmp": ["io.file_io.FileIO.size", "io.file_io.file_crc32", "io.file_io.FileIO.__init__"], "io.file_io.file_crc32": ["binascii.crc32", "io.file_io.FileIO.__init__", "<builtin>.hex"], "binascii.crc32": [], "<builtin>.hex": [], "io.python_io": [], "io.tf_record": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "io.tf_record.TFRecordOptions.__init__": ["io.tf_record.TFRecordOptions.get_compression_type_string"], "io.tf_record.TFRecordOptions.get_compression_type_string": ["<builtin>.ValueError", "<builtin>.isinstance", "io.tf_record.TFRecordOptions.get_compression_type_string"], "io.tf_record.TFRecordOptions._as_record_writer_options": ["util.compat.as_bytes", "io._pywrap_record_io.RecordWriterOptions", "io.tf_record.TFRecordOptions.get_compression_type_string"], "io._pywrap_record_io.RecordWriterOptions": [], "io.tf_record.tf_record_iterator": ["io._pywrap_record_io.RecordIterator", "io.tf_record.TFRecordOptions.get_compression_type_string"], "io._pywrap_record_io.RecordIterator": [], "io._pywrap_record_io.RandomRecordReader": [], "io.tf_record.TFRecordWriter.__init__": ["<builtin>.isinstance", "util.compat.as_bytes", "<builtin>.super", "io.tf_record.TFRecordOptions._as_record_writer_options", "io.tf_record.TFRecordOptions.__init__"], "io.tf_record.TFRecordWriter.write": ["<builtin>.super"], "io.tf_record.TFRecordWriter.flush": ["<builtin>.super"], "io.tf_record.TFRecordWriter.close": ["<builtin>.super"], "sparse.conjugate_gradient": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "util.dispatch.add_dispatch_support": ["util.dispatch.add_dispatch_list", "util.tf_decorator.make_decorator", "util.traceback_utils.filter_traceback"], "sparse.conjugate_gradient.conjugate_gradient": ["collections.namedtuple", "ops.array_ops.concat", "ops.control_flow_ops.while_loop", "linalg.linalg_impl.norm", "ops.array_ops.shape", "framework.ops.name_scope", "ops.array_ops.broadcast_dynamic_shape", "<builtin>.ValueError", "ops.math_ops.matvec", "ops.array_ops.broadcast_to", "framework.constant_op.constant", "sparse.conjugate_gradient.conjugate_gradient.dot", "ops.array_ops.zeros"], "sparse.conjugate_gradient.conjugate_gradient.stopping_criterion": ["ops.math_ops.logical_and", "ops.math_ops.reduce_any", "linalg.linalg_impl.norm"], "linalg.linalg_impl.norm": [], "sparse.conjugate_gradient.conjugate_gradient.dot": ["ops.math_ops.matvec", "ops.array_ops.squeeze"], "ops.math_ops.matvec": ["ops.array_ops.squeeze", "ops.math_ops.matmul", "framework.ops.name_scope", "ops.array_ops.expand_dims"], "sparse.conjugate_gradient.conjugate_gradient.cg_step": ["ops.math_ops.matvec", "sparse.conjugate_gradient.conjugate_gradient.dot"], "ops.array_ops.broadcast_dynamic_shape": ["ops.gen_array_ops.broadcast_args"], "ops.array_ops.broadcast_to": [], "sparse.sparse": [], "sparse.sparse_csr_matrix_grad": ["framework.ops.RegisterGradient", "framework.ops.NotDifferentiable"], "sparse.sparse_csr_matrix_grad._DenseToCSRSparseMatrixGrad": ["sparse.sparse_csr_matrix_ops.csr_sparse_matrix_to_dense"], "sparse.sparse_csr_matrix_ops.csr_sparse_matrix_to_dense": [], "sparse.sparse_csr_matrix_grad._CSRSparseMatrixToDenseGrad": ["ops.array_ops.gather_nd", "sparse.sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix", "sparse.sparse_csr_matrix_ops.csr_sparse_matrix_to_sparse_tensor"], "sparse.sparse_csr_matrix_ops.csr_sparse_matrix_to_sparse_tensor": [], "sparse.sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix": [], "sparse.sparse_csr_matrix_grad._SparseTensorToCSRSparseMatrixGrad": ["sparse.sparse_csr_matrix_ops.csr_sparse_matrix_to_sparse_tensor"], "sparse.sparse_csr_matrix_grad._CSRSparseMatrixToSparseTensorGrad": ["sparse.sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix"], "sparse.sparse_csr_matrix_grad._PruneSparseTensor": ["ops.array_ops.gather_nd", "ops.sparse_ops.sparse_reshape", "ops.math_ops.equal", "ops.array_ops.where", "ops.array_ops.gather", "ops.array_ops.searchsorted"], "ops.sparse_ops.sparse_reshape": ["framework.constant_op.constant", "<builtin>.ValueError", "framework.sparse_tensor.SparseTensor", "<builtin>.sum", "ops.array_ops.identity", "framework.tensor_util.constant_value_as_shape", "framework.ops.name_scope", "ops.math_ops.cast", "numpy.prod", "<builtin>.int", "ops.gen_sparse_ops.sparse_reshape", "<builtin>.list", "ops.sparse_ops._convert_to_sparse_tensor", "framework.tensor_util.constant_value"], "ops.array_ops.searchsorted": ["ops.array_ops.shape_internal", "<builtin>.ValueError", "ops.gen_array_ops.lower_bound", "ops.array_ops.reshape", "ops.gen_array_ops.upper_bound"], "sparse.sparse_csr_matrix_grad._PruneCSRMatrix": ["sparse.sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix", "sparse.sparse_csr_matrix_ops.dense_shape_and_type", "sparse.sparse_csr_matrix_ops.csr_sparse_matrix_to_sparse_tensor", "sparse.sparse_csr_matrix_grad._PruneSparseTensor", "framework.sparse_tensor.SparseTensor"], "sparse.sparse_csr_matrix_ops.dense_shape_and_type": ["<builtin>.isinstance", "<builtin>.len", "framework.tensor_shape.TensorShape", "framework.dtypes.DType", "sparse.sparse_csr_matrix_ops._get_handle_data", "<builtin>.ValueError", "<builtin>.TypeError"], "sparse.sparse_csr_matrix_grad._SparseMatrixAddGrad": ["sparse.sparse_csr_matrix_ops.sparse_matrix_mul", "sparse.sparse_csr_matrix_grad._PruneCSRMatrix"], "sparse.sparse_csr_matrix_ops.sparse_matrix_mul": [], "sparse.sparse_csr_matrix_grad._PrunedDenseMatrixMultiplication": ["ops.array_ops.gather_nd", "sparse.sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix", "<builtin>.len", "ops.math_ops.reduce_sum", "ops.array_ops.transpose", "ops.array_ops.stack", "sparse.sparse_csr_matrix_grad._PrunedDenseMatrixMultiplication.<lambda1>", "ops.array_ops.gather", "ops.math_ops.conj"], "sparse.sparse_csr_matrix_grad._PrunedDenseMatrixMultiplication.<lambda1>": ["ops.array_ops.transpose"], "sparse.sparse_csr_matrix_grad._SparseMatrixTransposeGrad": ["sparse.sparse_csr_matrix_ops.sparse_matrix_transpose"], "sparse.sparse_csr_matrix_ops.sparse_matrix_transpose": [], "sparse.sparse_csr_matrix_grad._SparseMatrixSoftmaxGrad": ["sparse.sparse_csr_matrix_ops.sparse_matrix_softmax_grad"], "sparse.sparse_csr_matrix_ops.sparse_matrix_softmax_grad": [], "sparse.sparse_csr_matrix_grad._SparseMatrixMatMulGrad": ["sparse.sparse_csr_matrix_grad._SparseMatrixMatMulGrad.matmul", "sparse.sparse_csr_matrix_ops.sparse_matrix_mat_mul", "ops.math_ops.conj"], "sparse.sparse_csr_matrix_grad._SparseMatrixMatMulGrad.matmul": ["sparse.sparse_csr_matrix_ops.csr_sparse_matrix_to_sparse_tensor", "sparse.sparse_csr_matrix_grad._PrunedDenseMatrixMultiplication"], "sparse.sparse_csr_matrix_ops.sparse_matrix_mat_mul": [], "sparse.sparse_csr_matrix_grad._SparseMatrixSparseMatMulGrad": ["sparse.sparse_csr_matrix_ops.sparse_matrix_sparse_mat_mul", "sparse.sparse_csr_matrix_grad._PruneCSRMatrix", "ops.math_ops.conj"], "sparse.sparse_csr_matrix_ops.sparse_matrix_sparse_mat_mul": [], "sparse.sparse_csr_matrix_grad._SparseMatrixMulGrad": [], "sparse.sparse_csr_matrix_ops": ["<builtin>.dir"], "sparse.sparse_csr_matrix_ops._get_handle_data": ["ops.resource_variable_ops.get_eager_safe_handle_data"], "ops.resource_variable_ops.get_eager_safe_handle_data": ["ops.handle_data_util.get_resource_handle_data", "<builtin>.isinstance"], "sparse.sparse_csr_matrix_ops._create_handle_data_proto": ["cpp_shape_inference_pb2.CppShapeInferenceResult.HandleData"], "cpp_shape_inference_pb2.CppShapeInferenceResult.HandleData": [], "sparse.sparse_csr_matrix_ops._make_handle_data": ["sparse.sparse_csr_matrix_ops._create_handle_data_proto"], "sparse.sparse_csr_matrix_ops.get_shape_and_type": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.getattr"], "framework.dtypes.DType": [], "sparse.sparse_csr_matrix_ops.matmul_shape_inference": ["sparse.sparse_csr_matrix_ops.get_shape_and_type", "<builtin>.len", "sparse.sparse_csr_matrix_ops._create_handle_data_proto", "framework.tensor_shape.TensorShape", "<builtin>.getattr"], "sparse.sparse_csr_matrix_ops.matmul": ["<builtin>.isinstance", "ops.math_ops.conj", "ops.math_ops.matmul", "sparse.sparse_csr_matrix_ops.matmul_shape_inference", "<builtin>.type", "sparse.gen_sparse_csr_matrix_ops.sparse_matrix_mat_mul", "sparse.gen_sparse_csr_matrix_ops.sparse_matrix_sparse_mat_mul", "framework.ops.name_scope", "<builtin>.TypeError"], "sparse.gen_sparse_csr_matrix_ops.sparse_matrix_sparse_mat_mul": [], "sparse.gen_sparse_csr_matrix_ops.sparse_matrix_mat_mul": [], "sparse.sparse_csr_matrix_ops.SparseMatrix": ["abc.abstractproperty", "abc.abstractmethod"], "sparse.sparse_csr_matrix_ops.SparseMatrix.__init__": ["eager.context.executing_eagerly"], "sparse.sparse_csr_matrix_ops.SparseMatrix._matrix": [], "sparse.sparse_csr_matrix_ops.SparseMatrix._from_matrix": [], "sparse.sparse_csr_matrix_ops.SparseMatrix.to_dense": [], "sparse.sparse_csr_matrix_ops.SparseMatrix.to_sparse_tensor": [], "sparse.sparse_csr_matrix_ops.SparseMatrix.graph": [], "sparse.sparse_csr_matrix_ops.SparseMatrix.shape": ["sparse.sparse_csr_matrix_ops.dense_shape_and_type"], "sparse.sparse_csr_matrix_ops.SparseMatrix.dtype": ["sparse.sparse_csr_matrix_ops.dense_shape_and_type"], "sparse.sparse_csr_matrix_ops.SparseMatrix.eager_handle_data": ["sparse.sparse_csr_matrix_ops._get_handle_data"], "sparse.sparse_csr_matrix_ops.SparseMatrix.conj": ["sparse.sparse_csr_matrix_ops.SparseMatrix._from_matrix", "ops.math_ops.conj"], "sparse.sparse_csr_matrix_ops.SparseMatrix.hermitian_transpose": ["sparse.gen_sparse_csr_matrix_ops.sparse_matrix_transpose", "sparse.sparse_csr_matrix_ops.SparseMatrix._from_matrix"], "sparse.gen_sparse_csr_matrix_ops.sparse_matrix_transpose": [], "sparse.sparse_csr_matrix_ops.SparseMatrix.nnz": ["sparse.gen_sparse_csr_matrix_ops.sparse_matrix_nnz"], "sparse.gen_sparse_csr_matrix_ops.sparse_matrix_nnz": [], "sparse.sparse_csr_matrix_ops.SparseMatrix.sorted_indices": ["sparse.sparse_csr_matrix_ops.SparseMatrix.to_sparse_tensor"], "sparse.sparse_csr_matrix_ops.SparseMatrix.transpose": ["sparse.gen_sparse_csr_matrix_ops.sparse_matrix_transpose", "sparse.sparse_csr_matrix_ops.SparseMatrix._from_matrix"], "sparse.sparse_csr_matrix_ops.CSRSparseMatrix.__init__": ["<builtin>.isinstance", "sparse.gen_sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix", "sparse.sparse_csr_matrix_ops._make_handle_data", "framework.ops.convert_to_tensor", "ops.array_ops.stop_gradient", "sparse.gen_sparse_csr_matrix_ops.dense_to_csr_sparse_matrix", "<builtin>.ValueError", "<builtin>.super", "ops.array_ops.where"], "sparse.gen_sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix": [], "sparse.gen_sparse_csr_matrix_ops.dense_to_csr_sparse_matrix": [], "sparse.sparse_csr_matrix_ops.CSRSparseMatrix._matrix": [], "sparse.sparse_csr_matrix_ops.CSRSparseMatrix._from_matrix": ["<builtin>.isinstance", "<builtin>.type"], "sparse.sparse_csr_matrix_ops.CSRSparseMatrix.to_dense": ["sparse.gen_sparse_csr_matrix_ops.csr_sparse_matrix_to_dense"], "sparse.gen_sparse_csr_matrix_ops.csr_sparse_matrix_to_dense": [], "sparse.sparse_csr_matrix_ops.CSRSparseMatrix.to_sparse_tensor": ["framework.sparse_tensor.SparseTensor", "sparse.gen_sparse_csr_matrix_ops.csr_sparse_matrix_to_sparse_tensor"], "sparse.gen_sparse_csr_matrix_ops.csr_sparse_matrix_to_sparse_tensor": [], "mkl.set-build-env": ["mkl.set-build-env.BuildEnvSetter.go", "mkl.set-build-env.BuildEnvSetter.__init__"], "mkl.set-build-env.IntelPlatform.__init__": [], "mkl.set-build-env.IntelPlatform.set_host_gcc_version": ["<builtin>.print"], "mkl.set-build-env.IntelPlatform.get_bazel_gcc_flags": ["<builtin>.NotImplementedError"], "mkl.set-build-env.IntelPlatform.use_old_arch_names": [], "mkl.set-build-env.NehalemPlatform.__init__": ["mkl.set-build-env.IntelPlatform.__init__"], "mkl.set-build-env.NehalemPlatform.get_bazel_gcc_flags": ["mkl.set-build-env.IntelPlatform.use_old_arch_names"], "mkl.set-build-env.SandyBridgePlatform.__init__": ["mkl.set-build-env.IntelPlatform.__init__"], "mkl.set-build-env.SandyBridgePlatform.get_bazel_gcc_flags": ["mkl.set-build-env.IntelPlatform.use_old_arch_names"], "mkl.set-build-env.HaswellPlatform.__init__": ["mkl.set-build-env.IntelPlatform.__init__"], "mkl.set-build-env.HaswellPlatform.get_bazel_gcc_flags": ["mkl.set-build-env.IntelPlatform.use_old_arch_names"], "mkl.set-build-env.SkylakePlatform.__init__": ["mkl.set-build-env.IntelPlatform.__init__"], "mkl.set-build-env.SkylakePlatform.get_bazel_gcc_flags": ["mkl.set-build-env.IntelPlatform.use_old_arch_names"], "mkl.set-build-env.CascadelakePlatform.__init__": ["mkl.set-build-env.IntelPlatform.__init__"], "mkl.set-build-env.CascadelakePlatform.get_bazel_gcc_flags": ["mkl.set-build-env.IntelPlatform.use_old_arch_names"], "mkl.set-build-env.IcelakeClientPlatform.__init__": ["mkl.set-build-env.IntelPlatform.__init__"], "mkl.set-build-env.IcelakeClientPlatform.get_bazel_gcc_flags": ["mkl.set-build-env.IntelPlatform.use_old_arch_names"], "mkl.set-build-env.IcelakeServerPlatform.__init__": ["mkl.set-build-env.IntelPlatform.__init__"], "mkl.set-build-env.IcelakeServerPlatform.get_bazel_gcc_flags": ["mkl.set-build-env.IntelPlatform.use_old_arch_names"], "mkl.set-build-env.BuildEnvSetter": ["mkl.set-build-env.IcelakeServerPlatform.__init__", "mkl.set-build-env.CascadelakePlatform.__init__", "mkl.set-build-env.SkylakePlatform.__init__", "mkl.set-build-env.NehalemPlatform.__init__", "mkl.set-build-env.HaswellPlatform.__init__", "mkl.set-build-env.SandyBridgePlatform.__init__", "mkl.set-build-env.IcelakeClientPlatform.__init__"], "mkl.set-build-env.BuildEnvSetter.__init__": [], "mkl.set-build-env.BuildEnvSetter.get_gcc_version": ["<builtin>.isinstance", "<builtin>.ValueError", "subprocess.check_output", "os.access", "<builtin>.print", "<builtin>.int"], "mkl.set-build-env.BuildEnvSetter.parse_args": ["argparse.ArgumentParser"], "mkl.set-build-env.BuildEnvSetter.validate_args": ["os.path.exists", "os.path.isdir", "os.path.isfile", "mkl.set-build-env.BuildEnvSetter.get_gcc_version", "<builtin>.print", "mkl.set-build-env.BuildEnvSetter._debug"], "mkl.set-build-env.BuildEnvSetter._debug": ["<builtin>.print"], "mkl.set-build-env.BuildEnvSetter.set_build_args": [], "mkl.set-build-env.BuildEnvSetter.write_build_args": ["<builtin>.open", "mkl.set-build-env.BuildEnvSetter._debug"], "mkl.set-build-env.BuildEnvSetter.go": ["mkl.set-build-env.BuildEnvSetter.validate_args", "mkl.set-build-env.BuildEnvSetter.parse_args", "mkl.set-build-env.BuildEnvSetter.set_build_args", "<builtin>.print", "mkl.set-build-env.BuildEnvSetter.write_build_args"], "ios.extract_object_files": [], "ios.extract_object_files.extract_object_files": ["ios.extract_object_files._check_archive_signature", "ios.extract_object_files._extract_next_file", "hashlib.md5", "<builtin>.open", "<builtin>.dict", "os.path.join", "os.path.exists", "os.makedirs", "ios.extract_object_files._generate_modified_filenames"], "ios.extract_object_files._check_archive_signature": ["<builtin>.RuntimeError"], "ios.extract_object_files._extract_next_file": ["struct.unpack", "<builtin>.RuntimeError", "<builtin>.int", "<builtin>.len"], "ios.extract_object_files._generate_modified_filenames": ["itertools.count", "os.path.splitext"], "itertools.count": [], "struct.unpack": [], "ios.extract_object_files_main": ["ios.extract_object_files_main.main"], "ios.extract_object_files_main.main": ["ios.extract_object_files.extract_object_files", "<builtin>.len", "<builtin>.RuntimeError", "<builtin>.open"], "python.analyzer": ["os.path.splitext", "os.path.join"], "python.analyzer._handle_webserver": ["<builtin>.print"], "python.analyzer._handle_webserver.MyServer.do_GET": ["<builtin>.bytes"], "<builtin>.bytes": [], "python.analyzer.ModelAnalyzer.analyze": ["analyzer_wrapper._pywrap_analyzer_wrapper.FlatBufferToMlir", "tflite_runtime._pywrap_analyzer_wrapper.ModelAnalyzer", "<builtin>.ValueError", "<builtin>.print", "tflite_runtime._pywrap_analyzer_wrapper.FlatBufferToMlir", "analyzer_wrapper._pywrap_analyzer_wrapper.ModelAnalyzer"], "analyzer_wrapper._pywrap_analyzer_wrapper.FlatBufferToMlir": [], "tflite_runtime._pywrap_analyzer_wrapper.FlatBufferToMlir": [], "tflite_runtime._pywrap_analyzer_wrapper.ModelAnalyzer": [], "analyzer_wrapper._pywrap_analyzer_wrapper.ModelAnalyzer": [], "python.convert": ["util.deprecation.deprecated", "os.path.exists", "platform.resource_loader.get_path_to_datafile", "python.convert_phase.convert_phase", "util.tf_export.tf_export"], "python.convert._requires_input_stats": [], "python.convert.convert_tensor_tf_type_to_tflite_type": ["<builtin>.ValueError"], "python.convert.convert_inference_tf_type_to_tflite_type": ["<builtin>.ValueError"], "platform.resource_loader.get_path_to_datafile": ["runfiles.runfiles.Create", "os.path.exists", "sys._getframe", "util.tf_inspect.getfile", "os.path.join", "os.path.dirname", "os.path.abspath"], "python.convert._try_convert_to_unicode": ["six.ensure_text", "<builtin>.isinstance"], "six.ensure_text": [], "python.convert.OpsSet.__str__": ["<builtin>.str"], "python.convert.OpsSet.get_options": ["<builtin>.list", "<builtin>.str"], "python.convert_phase.convert_phase": ["<builtin>.ValueError"], "python.wrap_toco.wrapped_experimental_mlir_quantize": ["python._pywrap_toco_api.ExperimentalMlirQuantizeModel"], "python.convert.mlir_sparsify": ["python.wrap_toco.wrapped_experimental_mlir_sparsify"], "python.wrap_toco.wrapped_experimental_mlir_sparsify": ["python._pywrap_toco_api.ExperimentalMlirSparsifyModel"], "python.convert.register_custom_opdefs": ["python.wrap_toco.wrapped_register_custom_opdefs"], "python.wrap_toco.wrapped_register_custom_opdefs": ["python._pywrap_toco_api.RegisterCustomOpdefs"], "python.convert.toco_convert_protos": ["python.convert._run_toco_binary", "python.convert_phase.ConverterError", "python.wrap_toco.wrapped_toco_convert", "<builtin>.str", "metrics_wrapper.metrics_wrapper.retrieve_collected_errors"], "python.wrap_toco.wrapped_toco_convert": ["python._pywrap_toco_api.TocoConvert"], "python.convert_phase.ConverterError": [], "metrics_wrapper.metrics_wrapper.retrieve_collected_errors": ["python.wrap_toco.wrapped_retrieve_collected_errors", "<builtin>.list", "<builtin>.map"], "python.convert._run_toco_binary": ["python.convert._try_convert_to_unicode", "os.unlink", "<builtin>.isinstance", "python.convert_phase.ConverterError", "subprocess.Popen", "tempfile.NamedTemporaryFile", "six.ensure_binary", "<builtin>.open", "platform.system"], "six.ensure_binary": [], "subprocess.Popen": [], "os.unlink": [], "python.convert.build_toco_flags": ["python.convert.convert_inference_tf_type_to_tflite_type", "toco.toco_flags_pb2.TocoFlags", "python.convert.convert_tensor_tf_type_to_tflite_type", "<builtin>.set"], "toco.toco_flags_pb2.TocoFlags": [], "python.convert.build_toco_convert_protos": ["python.convert.build_toco_flags", "python.util.get_tensor_name", "<builtin>.enumerate", "python.convert._requires_input_stats", "<builtin>.isinstance", "<builtin>.int", "toco.model_flags_pb2.ModelFlags", "python.convert.convert_tensor_tf_type_to_tflite_type"], "toco.model_flags_pb2.ModelFlags": [], "python.util.get_tensor_name": ["<builtin>.ValueError", "six.ensure_str", "<builtin>.len"], "python.convert.toco_convert_graph_def": ["six.moves.map", "<builtin>.enumerate", "python.convert._requires_input_stats", "<builtin>.list", "<builtin>.ValueError", "python.convert.toco_convert_protos", "python.convert.build_toco_convert_protos"], "six.moves.map": [], "python.convert.toco_convert_impl": ["python.convert.build_toco_convert_protos", "python.convert.toco_convert_protos"], "python.convert.convert_saved_model": ["toco.model_flags_pb2.ModelFlags", "python.convert.build_toco_flags", "python.convert.toco_convert_protos"], "python.convert.toco_convert": ["python.convert.toco_convert_impl"], "python.convert.deduplicate_readonly_buffers": ["tools.flatbuffer_utils.convert_object_to_bytearray", "<builtin>.enumerate", "<builtin>.list", "<builtin>.isinstance", "<builtin>.len", "<builtin>.sorted", "tools.flatbuffer_utils.convert_bytearray_to_object", "<builtin>.set"], "tools.flatbuffer_utils.convert_bytearray_to_object": ["schema_py_generated.ModelT.InitFromObj", "schema_py_generated.Model.GetRootAsModel"], "python.convert.deduplicate_readonly_buffers.<lambda1>": [], "tools.flatbuffer_utils.convert_object_to_bytearray": ["<builtin>.bytes", "flatbuffers.Builder"], "python.convert_file_to_c_source": ["absl.app.run", "absl.flags.DEFINE_boolean", "absl.flags.mark_flag_as_required", "absl.flags.DEFINE_integer", "absl.flags.DEFINE_string"], "absl.flags.DEFINE_boolean": [], "absl.flags.mark_flag_as_required": [], "python.convert_file_to_c_source.main": ["python.util.convert_bytes_to_c_source", "<builtin>.open"], "python.util.convert_bytes_to_c_source": ["<builtin>.bytearray", "datetime.date.today", "<builtin>.len"], "python.convert_phase": ["collections.namedtuple"], "python.convert_phase.SubComponent.__str__": [], "python.convert_phase.SubComponent.name": [], "python.convert_phase.SubComponent.component": [], "python.convert_phase.ConverterError.__init__": ["<builtin>.super", "python.convert_phase.ConverterError._parse_error_message"], "python.convert_phase.ConverterError._parse_error_message": ["python.convert_phase.ConverterError.append_error", "metrics_wrapper.converter_error_data_pb2.ConverterErrorData"], "python.convert_phase.ConverterError.append_error": [], "metrics_wrapper.converter_error_data_pb2.ConverterErrorData": [], "python.convert_phase.convert_phase.report_error": ["python.metrics_nonportable.TFLiteConverterMetrics", "python.metrics_portable.TFLiteConverterMetrics"], "python.metrics_portable.TFLiteConverterMetrics": [], "python.metrics_nonportable.TFLiteConverterMetrics": [], "python.convert_phase.convert_phase.report_error_message": ["python.convert_phase.convert_phase.report_error", "metrics_wrapper.converter_error_data_pb2.ConverterErrorData"], "python.convert_phase.convert_phase.actual_decorator": ["functools.wraps"], "python.convert_phase.convert_phase.actual_decorator.wrapper": ["<builtin>.str", "python.convert_phase.convert_phase.report_error", "python.convert_phase.convert_phase.report_error_message"], "python.convert_saved_model": ["python.convert_phase.convert_phase"], "python.convert_saved_model._log_tensor_details": ["<builtin>.str", "types_pb2.DataType.Name", "platform.tf_logging.info"], "types_pb2.DataType.Name": [], "python.convert_saved_model.get_meta_graph_def": ["framework.ops.Graph", "client.session.Session", "saved_model.loader.load"], "python.convert_saved_model.get_signature_def": ["<builtin>.set", "platform.tf_logging.info", "<builtin>.ValueError"], "python.convert_saved_model.get_inputs_outputs": ["python.convert_saved_model._log_tensor_details", "python.convert_saved_model.get_inputs_outputs.gather_names", "platform.tf_logging.info"], "python.convert_saved_model.get_inputs_outputs.gather_names": [], "python.convert_saved_model._get_tensors": ["python.util.get_tensors_from_tensor_names", "<builtin>.ValueError", "<builtin>.sorted"], "python.util.get_tensors_from_tensor_names": ["<builtin>.isinstance", "<builtin>.ValueError", "python.util.get_tensor_name", "<builtin>.type"], "python.convert_saved_model.freeze_saved_model": ["python.util.freeze_graph", "saved_model.loader.load", "<builtin>.ValueError", "python.convert_saved_model.get_signature_def", "python.convert_saved_model._get_tensors", "python.util.set_tensor_shapes", "python.convert_saved_model.get_meta_graph_def", "client.session.Session", "python.convert_saved_model.get_inputs_outputs", "framework.ops.Graph"], "python.util.set_tensor_shapes": ["<builtin>.str", "<builtin>.ValueError", "python.util.get_tensor_name"], "python.util.freeze_graph": ["python.op_hint.find_all_hinted_output_nodes", "python.util.is_frozen_graph", "framework.graph_util.convert_variables_to_constants", "python.util._convert_op_hints_if_present", "framework.convert_to_constants.disable_lower_using_switch_merge", "python.util.run_graph_optimizations", "python.util.get_grappler_config"], "python.interpreter": ["util.tf_export.tf_export", "os.path.splitext", "python.interpreter._tf_export.<lambda1>", "os.path.join"], "python.interpreter._tf_export": [], "python.interpreter._tf_export.<lambda1>": [], "python.interpreter.Delegate.__init__": ["python.interpreter.Delegate.__init__.ErrorMessageCapture.__init__", "<builtin>.ValueError", "<builtin>.len", "<builtin>.RuntimeError", "<builtin>.enumerate", "ctypes.POINTER", "<builtin>.str", "platform.python_implementation", "ctypes.pydll.LoadLibrary", "ctypes.CFUNCTYPE"], "platform.python_implementation": [], "ctypes.pydll.LoadLibrary": [], "ctypes.POINTER": [], "ctypes.CFUNCTYPE": [], "python.interpreter.Delegate.__init__.ErrorMessageCapture.__init__": [], "python.interpreter.Delegate.__init__.ErrorMessageCapture.report": ["<builtin>.isinstance"], "python.interpreter.Delegate.__del__": [], "python.interpreter.Delegate._get_native_delegate_pointer": [], "python.interpreter.load_delegate": ["python.interpreter.Delegate.__init__", "<builtin>.str", "<builtin>.ValueError"], "python.interpreter.SignatureRunner.__init__": ["<builtin>.ValueError", "python.interpreter.Interpreter._get_full_signature_list"], "python.interpreter.Interpreter._get_full_signature_list": [], "python.interpreter.SignatureRunner.__call__": ["<builtin>.ValueError", "<builtin>.len", "numpy.array"], "python.interpreter._get_op_resolver_id": [], "python.interpreter.Interpreter.__init__": ["tflite_runtime._pywrap_tensorflow_interpreter_wrapper.CreateWrapperFromBuffer", "<builtin>.hasattr", "interpreter_wrapper._pywrap_tensorflow_interpreter_wrapper.CreateWrapperFromFile", "python.interpreter.Interpreter.get_signature_list", "python.metrics_nonportable.TFLiteMetrics", "tflite_runtime.metrics_portable.TFLiteMetrics", "python.metrics_portable.TFLiteMetrics", "python.interpreter._get_op_resolver_id", "interpreter_wrapper._pywrap_tensorflow_interpreter_wrapper.CreateWrapperFromBuffer", "<builtin>.ValueError", "tflite_runtime._pywrap_tensorflow_interpreter_wrapper.CreateWrapperFromFile", "<builtin>.isinstance"], "interpreter_wrapper._pywrap_tensorflow_interpreter_wrapper.CreateWrapperFromFile": [], "tflite_runtime._pywrap_tensorflow_interpreter_wrapper.CreateWrapperFromFile": [], "tflite_runtime._pywrap_tensorflow_interpreter_wrapper.CreateWrapperFromBuffer": [], "interpreter_wrapper._pywrap_tensorflow_interpreter_wrapper.CreateWrapperFromBuffer": [], "python.interpreter.Interpreter.get_signature_list": ["<builtin>.list"], "tflite_runtime.metrics_portable.TFLiteMetrics": [], "python.interpreter.Interpreter.__del__": [], "python.interpreter.Interpreter.allocate_tensors": ["python.interpreter.Interpreter._ensure_safe"], "python.interpreter.Interpreter._ensure_safe": ["python.interpreter.Interpreter._safe_to_run", "<builtin>.RuntimeError"], "python.interpreter.Interpreter._safe_to_run": ["sys.getrefcount"], "sys.getrefcount": [], "python.interpreter.Interpreter._get_op_details": ["<builtin>.int"], "python.interpreter.Interpreter._get_tensor_details": ["<builtin>.ValueError", "<builtin>.int"], "python.interpreter.Interpreter._get_ops_details": ["python.interpreter.Interpreter._get_op_details", "<builtin>.range"], "python.interpreter.Interpreter.get_tensor_details": ["<builtin>.range", "python.interpreter.Interpreter._get_tensor_details"], "python.interpreter.Interpreter.get_input_details": ["python.interpreter.Interpreter._get_tensor_details"], "python.interpreter.Interpreter.set_tensor": [], "python.interpreter.Interpreter.resize_tensor_input": ["python.interpreter.Interpreter._ensure_safe", "numpy.array"], "python.interpreter.Interpreter.get_output_details": ["python.interpreter.Interpreter._get_tensor_details"], "python.interpreter.Interpreter.get_signature_runner": ["<builtin>.next", "python.interpreter.SignatureRunner.__init__", "<builtin>.len", "<builtin>.ValueError", "<builtin>.iter"], "python.interpreter.Interpreter.get_tensor": [], "python.interpreter.Interpreter.tensor": [], "python.interpreter.Interpreter.tensor.<lambda1>": [], "python.interpreter.Interpreter.invoke": ["python.interpreter.Interpreter._ensure_safe"], "python.interpreter.Interpreter.reset_all_variables": [], "python.interpreter.Interpreter._native_handle": [], "python.interpreter.InterpreterWithCustomOps.__init__": ["<builtin>.super"], "python.lite": [], "python.lite.Optimize.__str__": ["<builtin>.str"], "python.lite.RepresentativeDataset.__init__": [], "python.lite.TargetSpec.__init__": ["<builtin>.set"], "python.lite.QuantizationMode.__init__": ["python.lite.QuantizationMode._validate_int8_required", "absl.logging.warning"], "python.lite.QuantizationMode._validate_int8_required": ["python.lite.RepresentativeDataset.__init__", "python.lite.QuantizationMode._smallest_supported_type", "python.lite.QuantizationMode._is_int8_target_required", "<builtin>.isinstance", "<builtin>.ValueError"], "python.lite.QuantizationMode.post_training_int8_no_float": ["python.lite.QuantizationMode.is_allow_float", "python.lite.QuantizationMode._is_int8_target_required", "python.lite.QuantizationMode.any_optimization_enabled", "python.lite.QuantizationMode._is_int16x8_target_required"], "python.lite.QuantizationMode.any_optimization_enabled": ["<builtin>.bool", "<builtin>.set"], "python.lite.QuantizationMode._is_int8_target_required": ["<builtin>.set"], "python.lite.QuantizationMode._is_int16x8_target_required": ["<builtin>.set"], "python.lite.QuantizationMode.is_allow_float": ["<builtin>.set"], "python.lite.QuantizationMode.post_training_int8_allow_float": ["python.lite.QuantizationMode._is_int16x8_target_required", "python.lite.QuantizationMode.any_optimization_enabled", "python.lite.QuantizationMode._smallest_supported_type"], "python.lite.QuantizationMode._smallest_supported_type": ["<builtin>.min"], "python.lite.QuantizationMode.is_post_training_integer_quantize_8": ["python.lite.QuantizationMode.post_training_int8_no_float", "python.lite.QuantizationMode.post_training_int8_allow_float"], "python.lite.QuantizationMode.is_post_training_integer_quantize_16x8": ["python.lite.QuantizationMode.post_training_int16x8_allow_float", "python.lite.QuantizationMode.post_training_int16x8_no_float"], "python.lite.QuantizationMode.post_training_int16x8_no_float": ["python.lite.QuantizationMode.is_allow_float", "python.lite.QuantizationMode._is_int8_target_required", "python.lite.QuantizationMode.any_optimization_enabled", "python.lite.QuantizationMode._is_int16x8_target_required"], "python.lite.QuantizationMode.post_training_int16x8_allow_float": ["python.lite.QuantizationMode.is_allow_float", "python.lite.QuantizationMode._is_int16x8_target_required", "python.lite.QuantizationMode.any_optimization_enabled"], "python.lite.QuantizationMode.is_post_training_integer_quantize": ["python.lite.QuantizationMode.is_post_training_integer_quantize_8", "python.lite.QuantizationMode.is_post_training_integer_quantize_16x8"], "python.lite.QuantizationMode.is_integer_quantize": ["python.lite.QuantizationMode.is_training_time_int8_allow_float", "python.lite.QuantizationMode.is_post_training_integer_quantize"], "python.lite.QuantizationMode.is_training_time_int8_allow_float": ["python.lite.QuantizationMode.contains_training_quant_op", "python.lite.QuantizationMode.any_optimization_enabled"], "python.lite.QuantizationMode.contains_training_quant_op": ["<builtin>.frozenset"], "python.lite.QuantizationMode.is_bfloat16_inference_allowed": ["python.lite.QuantizationMode._smallest_supported_type", "python.lite.QuantizationMode.any_optimization_enabled"], "python.lite.QuantizationMode.post_training_dynamic_range_int8": ["python.lite.QuantizationMode.contains_training_quant_op", "python.lite.QuantizationMode._smallest_supported_type", "python.lite.QuantizationMode.any_optimization_enabled"], "python.lite.QuantizationMode.post_training_fp16": ["python.lite.QuantizationMode._smallest_supported_type", "python.lite.QuantizationMode.any_optimization_enabled"], "python.lite.QuantizationMode.fp32_execution": ["python.lite.QuantizationMode.is_integer_quantize", "python.lite.QuantizationMode.post_training_dynamic_range_int8", "python.lite.QuantizationMode.post_training_fp16"], "python.lite.QuantizationMode.activations_type": ["python.lite.QuantizationMode.is_integer_quantize", "python.lite.QuantizationMode._is_int16x8_target_required"], "python.lite.QuantizationMode.converter_flags": ["python.lite.QuantizationMode.post_training_dynamic_range_int8", "python.lite.QuantizationMode.post_training_fp16", "python.lite.QuantizationMode.is_bfloat16_inference_allowed", "python.lite.QuantizationMode.is_integer_quantize", "python.lite.QuantizationMode.activations_type"], "python.lite.QuantizationMode._smallest_supported_type.<lambda1>": [], "python.lite.TFLiteConverterBase.__init__": ["python.metrics_nonportable.TFLiteConverterMetrics", "python.lite.TargetSpec.__init__", "python.metrics_portable.TFLiteConverterMetrics", "<builtin>.set"], "python.lite.TFLiteConverterBase._grappler_config": ["python.util.get_grappler_config", "<builtin>.set"], "python.util.get_grappler_config": ["protobuf.config_pb2.ConfigProto"], "python.lite.TFLiteConverterBase._quantize": ["python.convert.mlir_quantize", "python.lite.RepresentativeDataset.__init__", "optimize.calibrator.Calibrator", "optimize.calibrator.add_intermediate_tensors", "<builtin>.isinstance"], "optimize.calibrator.add_intermediate_tensors": [], "optimize.calibrator.Calibrator": ["python.convert_phase.convert_phase"], "python.lite.TFLiteConverterBase._is_unknown_shapes_allowed": [], "python.lite.TFLiteConverterBase._get_base_converter_args": [], "python.lite.TFLiteConverterBase._contains_function_with_implements_attr": [], "python.lite.TFLiteConverterBase._parse_saved_model_args": ["saved_model.loader_impl.parse_saved_model_with_debug_info", "python.lite.TFLiteConverterBase._contains_function_with_implements_attr", "absl.logging.warning", "<builtin>.ValueError"], "saved_model.loader_impl.parse_saved_model_with_debug_info": ["os.path.join", "<builtin>.str", "saved_model.utils_impl.get_debug_dir", "saved_model.loader_impl.parse_saved_model", "protobuf.graph_debug_info_pb2.GraphDebugInfo", "io.file_io.FileIO", "io.file_io.file_exists", "<builtin>.IOError"], "python.lite.TFLiteConverterBase._sparsify_model": [], "python.lite.TFLiteConverterBase._validate_experimental_new_quantizer_flag": ["<builtin>.ValueError"], "python.lite.TFLiteConverterBase._increase_conversion_attempt_metric": [], "python.lite.TFLiteConverterBase._increase_conversion_success_metric": [], "python.lite.TFLiteConverterBase._save_conversion_params_metric": ["python.lite.TFLiteConverterBase._save_conversion_params_metric.format_param", "python.lite.QuantizationMode.__init__", "python.lite.QuantizationMode.converter_flags", "python.lite.TFLiteConverterBase._get_base_converter_args"], "python.lite.TFLiteConverterBase._save_conversion_params_metric.format_element": ["<builtin>.str", "<builtin>.isinstance", "pprint.pformat"], "pprint.pformat": [], "python.lite.TFLiteConverterBase._save_conversion_params_metric.format_param": ["python.lite.TFLiteConverterBase._save_conversion_params_metric.format_element", "<builtin>.sorted", "<builtin>.isinstance"], "python.lite.TFLiteConverterBase._set_conversion_latency_metric": [], "python.lite.TFLiteConverterBase": ["python.convert_phase.convert_phase"], "python.lite.TFLiteConverterBase._optimize_tflite_model": ["python.lite.QuantizationMode.is_allow_float", "python.lite.QuantizationMode.is_post_training_integer_quantize", "python.convert.mlir_sparsify", "python.lite.TFLiteConverterBase._sparsify_model", "absl.logging.warning", "python.lite.QuantizationMode.is_integer_quantize", "python.lite.TFLiteConverterBase._quantize", "python.convert.deduplicate_readonly_buffers", "python.util.modify_model_io_type", "python.lite.QuantizationMode.activations_type"], "python.util.modify_model_io_type": ["python.util._remove_redundant_quantize_ops", "python.util._convert_model_from_object_to_bytearray", "<builtin>.ValueError", "python.util._modify_model_output_type", "<builtin>.len", "python.util._modify_model_input_type", "python.util._convert_model_from_bytearray_to_object"], "python.lite.TFLiteConverterBase._convert_and_export_metrics": ["python.lite.TFLiteConverterBase._increase_conversion_attempt_metric", "time.process_time", "python.lite.TFLiteConverterBase._increase_conversion_success_metric", "python.lite.TFLiteConverterBase._save_conversion_params_metric", "python.lite.TFLiteConverterBase._set_conversion_latency_metric", "<builtin>.round"], "time.process_time": [], "python.lite._export_metrics": ["functools.wraps"], "python.lite._export_metrics.wrapper": [], "python.lite.TFLiteConverterBaseV2.__init__": ["<builtin>.super"], "python.lite.TFLiteConverterBaseV2._validate_inference_input_output_types": ["python.lite.QuantizationMode.is_integer_quantize", "python.lite.QuantizationMode.is_post_training_integer_quantize_16x8", "<builtin>.ValueError"], "python.lite.TFLiteConverterBaseV2": ["python.convert_phase.convert_phase"], "python.lite.TFLiteConverterBaseV2._load_saved_model": ["saved_model.loader_impl.SavedModelLoader", "framework.ops.Graph"], "saved_model.loader_impl.SavedModelLoader": [], "python.lite.TFLiteConverterBaseV2._validate_inputs": ["python.lite.TFLiteConverterBaseV2._validate_inference_input_output_types", "python.lite.QuantizationMode.__init__", "python.lite.TFLiteConverterBase._is_unknown_shapes_allowed", "python.util.build_debug_info_func", "python.lite.TFLiteConverterBase._save_conversion_params_metric", "python.util.convert_debug_info_func", "<builtin>.hasattr", "python.util.get_debug_info", "python.lite.TFLiteConverterBase._validate_experimental_new_quantizer_flag", "python.util.get_tensor_name", "<builtin>.ValueError"], "python.util.build_debug_info_func": [], "python.util.get_debug_info": ["<builtin>.set", "six.moves.range", "<builtin>.len"], "python.util.convert_debug_info_func": [], "python.lite.TFLiteConverterBaseV2._optimize_tf_model": ["python.lite.TFLiteConverterBase._grappler_config", "python.util.run_graph_optimizations"], "python.util.run_graph_optimizations": ["training.saver.export_meta_graph", "protobuf.meta_graph_pb2.CollectionDef", "protobuf.meta_graph_pb2.SignatureDef", "grappler.tf_optimizer.OptimizeGraph"], "python.lite.TFLiteConverterBaseV2.convert": ["python.lite.TFLiteConverterBaseV2._validate_inputs", "python.convert.toco_convert_impl", "absl.logging.warning", "absl.logging.info", "python.lite.QuantizationMode.converter_flags", "python.lite.TFLiteConverterBase._get_base_converter_args", "python.lite.TFLiteConverterBase._optimize_tflite_model"], "python.lite.TFLiteSavedModelConverterV2.__init__": ["<builtin>.super", "python.lite.TFLiteConverterBase._parse_saved_model_args"], "python.lite.TFLiteSavedModelConverterV2": ["python.lite._export_metrics"], "python.lite.TFLiteSavedModelConverterV2.convert": ["python.lite.TFLiteConverterBaseV2._load_saved_model", "python.convert_saved_model.freeze_saved_model", "python.lite.TFLiteConverterBaseV2._validate_inference_input_output_types", "python.lite.QuantizationMode.__init__", "python.util.build_debug_info_func", "python.lite.TFLiteConverterBase._save_conversion_params_metric", "<builtin>.super", "python.util.convert_debug_info_func", "python.lite.QuantizationMode.converter_flags", "python.lite.TFLiteConverterBase._get_base_converter_args", "python.convert.convert_saved_model", "python.util.get_debug_info", "python.lite.TFLiteConverterBase._optimize_tflite_model"], "python.lite.TFLiteKerasModelConverterV2.__init__": ["<builtin>.super"], "python.lite.TFLiteKerasModelConverterV2": ["python.convert_phase.convert_phase", "python.lite._export_metrics"], "python.lite.TFLiteKerasModelConverterV2._convert_keras_to_saved_model": ["python.lite.TFLiteConverterBaseV2._load_saved_model", "<builtin>.set", "saved_model.save_options.SaveOptions", "python.lite.TFLiteConverterBase._parse_saved_model_args", "saved_model.load.load", "python.saved_model.save"], "saved_model.save_options.SaveOptions": [], "python.saved_model.save": [], "python.lite.TFLiteKerasModelConverterV2._freeze_keras_model": ["framework.convert_to_constants.convert_variables_to_constants_v2_as_graph", "python.util.model_input_signature", "python.util.trace_model_call", "<builtin>.isinstance"], "python.util.model_input_signature": [], "python.util.trace_model_call": [], "framework.convert_to_constants.convert_variables_to_constants_v2_as_graph": ["framework.convert_to_constants._FunctionConverterData.__init__", "framework.convert_to_constants._replace_variables_by_constants", "framework.convert_to_constants._construct_concrete_function"], "python.lite.TFLiteKerasModelConverterV2._convert_as_saved_model": ["<builtin>.super", "shutil.rmtree", "tempfile.mkdtemp", "python.lite.TFLiteKerasModelConverterV2._convert_keras_to_saved_model"], "python.lite.TFLiteKerasModelConverterV2.convert": ["python.lite.TFLiteKerasModelConverterV2._freeze_keras_model", "python.lite.TFLiteConverterBaseV2._optimize_tf_model", "python.lite.TFLiteKerasModelConverterV2._convert_as_saved_model", "<builtin>.super"], "python.lite.TFLiteFrozenGraphConverterV2.__init__": ["<builtin>.super"], "python.lite.TFLiteFrozenGraphConverterV2": ["python.convert_phase.convert_phase", "python.lite._export_metrics"], "python.lite.TFLiteFrozenGraphConverterV2._freeze_concrete_function": ["framework.convert_to_constants.convert_variables_to_constants_v2_as_graph", "<builtin>.len", "<builtin>.ValueError"], "python.lite.TFLiteFrozenGraphConverterV2._convert_concrete_functions_to_saved_model": ["python.lite.TFLiteConverterBaseV2._load_saved_model", "<builtin>.set", "saved_model.save_options.SaveOptions", "<builtin>.len", "python.lite.TFLiteConverterBase._parse_saved_model_args", "saved_model.load.load", "python.saved_model.save", "<builtin>.ValueError"], "python.lite.TFLiteFrozenGraphConverterV2._convert_as_saved_model": ["shutil.rmtree", "<builtin>.super", "python.lite.TFLiteFrozenGraphConverterV2._convert_concrete_functions_to_saved_model", "tempfile.mkdtemp"], "python.lite.TFLiteFrozenGraphConverterV2.convert": ["python.lite.TFLiteConverterBaseV2._optimize_tf_model", "python.lite.TFLiteFrozenGraphConverterV2._freeze_concrete_function", "<builtin>.super", "python.lite.TFLiteFrozenGraphConverterV2._convert_as_saved_model"], "python.lite.TFLiteConverterV2.__init__": ["<builtin>.super"], "python.lite.TFLiteConverterV2.from_concrete_functions": ["python.lite.TFLiteConverterV2.__init__", "absl.logging.warning", "<builtin>.isinstance", "<builtin>.ValueError"], "python.lite.TFLiteConverterV2.from_saved_model": ["python.lite.TFLiteSavedModelConverterV2.__init__", "absl.logging.warning", "<builtin>.ValueError", "<builtin>.set", "<builtin>.len", "eager.context.eager_mode", "eager.context.executing_eagerly", "saved_model.load.load", "python.lite.TFLiteConverterV2.__init__", "python.lite.TFLiteConverter.from_saved_model"], "python.lite.TFLiteConverter.from_saved_model": ["python.convert_saved_model.freeze_saved_model", "python.lite.TFLiteSavedModelConverter.__init__", "python.util.build_debug_info_func", "<builtin>.set", "python.lite.TFLiteConverter.__init__"], "python.lite.TFLiteConverterV2.from_keras_model": ["python.lite.TFLiteKerasModelConverterV2.__init__"], "python.lite.TFLiteConverterV2.convert": ["<builtin>.super"], "python.lite.TFLiteConverterBaseV1.__init__": ["<builtin>.super"], "python.lite.TFLiteConverterBaseV1.__setattr__": ["warnings.warn"], "python.lite.TFLiteConverterBaseV1.__getattribute__": ["warnings.warn", "<builtin>.set"], "python.lite.TFLiteConverterBaseV1._validate_quantized_input_stats": ["<builtin>.frozenset", "python.util.get_tf_type_name", "<builtin>.ValueError", "python.lite.QuantizationMode.is_post_training_integer_quantize"], "python.util.get_tf_type_name": [], "python.lite.TFLiteConverterBaseV1": ["python.convert_phase.convert_phase"], "python.lite.TFLiteConverterBaseV1._validate_inputs": ["python.lite.TFLiteConverterBaseV1._set_batch_size", "python.lite.TFLiteConverterBaseV1.get_input_arrays", "python.lite.TFLiteConverterBaseV1._has_valid_tensors", "python.lite.TFLiteConverterBaseV1._is_unknown_shapes_allowed", "python.util.get_tensor_name", "<builtin>.ValueError"], "python.lite.TFLiteConverterBaseV1._is_unknown_shapes_allowed": ["<builtin>.super", "python.op_hint.is_ophint_converted", "absl.logging.warning"], "python.lite.TFLiteConverterBaseV1._has_valid_tensors": [], "python.lite.TFLiteConverterBaseV1._set_batch_size": ["python.lite.TFLiteConverterBaseV1._has_valid_tensors", "<builtin>.ValueError"], "python.lite.TFLiteConverterBaseV1.get_input_arrays": ["python.lite.TFLiteConverterBaseV1._has_valid_tensors", "python.util.get_tensor_name"], "python.lite.TFLiteConverterBaseV1._optimize_tf_model": ["python.lite.TFLiteConverterBase._grappler_config", "python.lite.QuantizationMode.contains_training_quant_op", "python.util.run_graph_optimizations", "framework.convert_to_constants.disable_lower_using_switch_merge"], "framework.convert_to_constants.disable_lower_using_switch_merge": ["framework.convert_to_constants.disable_lower_using_switch_merge.disable_control_flow_lowering", "framework.graph_pb2.GraphDef"], "python.lite.TFLiteConverterBaseV1.convert": ["python.lite.QuantizationMode.__init__", "python.convert.toco_convert_impl", "python.lite.TFLiteConverterBaseV1._optimize_tf_model", "python.lite.TFLiteConverterBaseV1._has_valid_tensors", "absl.logging.warning", "python.lite.TFLiteConverterBaseV1._validate_inputs", "absl.logging.info", "python.convert.toco_convert_graph_def", "python.lite.QuantizationMode.converter_flags", "python.lite.TFLiteConverterBase._get_base_converter_args", "python.lite.TFLiteConverterBaseV1._validate_quantized_input_stats", "python.util.get_debug_info", "python.lite.TFLiteConverterBase._optimize_tflite_model", "python.lite.TFLiteConverterBase._validate_experimental_new_quantizer_flag"], "python.op_hint.is_ophint_converted": ["<builtin>.ValueError"], "python.lite.TFLiteConverterBaseV1._save_conversion_params_metric": ["<builtin>.super"], "python.lite.TFLiteSavedModelConverter.__init__": ["python.convert_saved_model.freeze_saved_model", "<builtin>.super", "<builtin>.len", "python.lite.TFLiteConverterBase._parse_saved_model_args", "<builtin>.ValueError"], "python.lite.TFLiteSavedModelConverter": ["python.lite._export_metrics"], "python.lite.TFLiteSavedModelConverter.convert": ["<builtin>.super"], "python.lite.TFLiteKerasModelConverter.__init__": ["python.util.freeze_graph", "util.keras_deps.get_clear_session_function", "util.keras_deps.get_get_session_function", "python.util.build_debug_info_func", "<builtin>.ValueError", "python.util.get_tensors_from_tensor_names", "python.util.set_tensor_shapes", "<builtin>.super", "framework.convert_to_constants.convert_variables_to_constants_v2", "eager.context.executing_eagerly", "python.util.trace_model_call", "util.keras_deps.get_load_model_function"], "util.keras_deps.get_load_model_function": [], "util.keras_deps.get_clear_session_function": [], "util.keras_deps.get_get_session_function": [], "python.lite.TFLiteKerasModelConverter": ["python.convert_phase.convert_phase", "python.lite._export_metrics"], "python.lite.TFLiteKerasModelConverter._freeze_keras_model": ["python.convert_saved_model.freeze_saved_model", "python.util.build_debug_info_func", "python.lite.TFLiteConverterBase._parse_saved_model_args", "<builtin>.set"], "python.lite.TFLiteKerasModelConverter._convert_as_saved_model": ["<builtin>.super", "shutil.rmtree", "python.lite.TFLiteKerasModelConverter._freeze_keras_model", "tempfile.mkdtemp"], "python.lite.TFLiteKerasModelConverter.convert": ["python.lite.TFLiteKerasModelConverter._convert_as_saved_model", "<builtin>.super"], "python.lite.TFLiteFrozenGraphConverter.__init__": ["python.lite.TFLiteConverterBaseV1._has_valid_tensors", "<builtin>.super", "absl.logging.warning"], "python.lite.TFLiteFrozenGraphConverter": ["python.lite._export_metrics"], "python.lite.TFLiteFrozenGraphConverter.convert": ["python.lite.TFLiteConverterBaseV1._has_valid_tensors", "<builtin>.super", "<builtin>.ValueError"], "python.lite.TFLiteConverter.__init__": ["<builtin>.super"], "python.lite.TFLiteConverter.from_session": ["python.util.freeze_graph", "python.util.build_debug_info_func", "python.lite.TFLiteConverter.__init__"], "python.lite.TFLiteConverter.from_frozen_graph": ["framework.graph_pb2.GraphDef", "platform.gfile.Exists", "client.session.Session", "protobuf.text_format.Merge", "framework.importer.import_graph_def", "python.util.is_frozen_graph", "<builtin>.IOError", "six.ensure_binary", "<builtin>.ValueError", "python.util.get_tensors_from_tensor_names", "python.util.set_tensor_shapes", "<builtin>.set", "framework.ops.Graph", "six.ensure_text", "platform.gfile.GFile", "python.lite.TFLiteConverter.__init__", "<builtin>.isinstance", "<builtin>.print"], "protobuf.text_format.Merge": [], "python.util.is_frozen_graph": ["six.ensure_str"], "python.lite.TFLiteConverter.from_keras_model_file": ["python.lite.TFLiteKerasModelConverter.__init__"], "python.lite.TFLiteConverter.convert": ["<builtin>.super"], "python.lite.TocoConverter": ["util.deprecation.deprecated"], "python.lite.TocoConverter.from_session": ["python.lite.TFLiteConverter.from_session"], "python.lite.TocoConverter.from_frozen_graph": ["python.lite.TFLiteConverter.from_frozen_graph"], "python.lite.TocoConverter.from_saved_model": ["python.lite.TFLiteConverter.from_saved_model"], "python.lite.TocoConverter.from_keras_model_file": ["python.lite.TFLiteConverter.from_keras_model_file"], "python.lite_constants": ["util.tf_export.tf_export", "util.all_util.remove_undocumented"], "util.all_util.remove_undocumented": ["<builtin>.dir", "util.all_util.make_all", "<builtin>.getattr", "<builtin>.delattr", "<builtin>.set"], "python.metrics_interface": [], "python.metrics_interface.TFLiteMetricsInterface": ["abc.abstractmethod"], "python.metrics_interface.TFLiteMetricsInterface.increase_counter_debugger_creation": [], "python.metrics_interface.TFLiteMetricsInterface.increase_counter_interpreter_creation": [], "python.metrics_interface.TFLiteMetricsInterface.increase_counter_converter_attempt": [], "python.metrics_interface.TFLiteMetricsInterface.increase_counter_converter_success": [], "python.metrics_interface.TFLiteMetricsInterface.set_converter_param": [], "python.metrics_interface.TFLiteMetricsInterface.set_converter_error": [], "python.metrics_interface.TFLiteMetricsInterface.set_converter_latency": [], "python.metrics_nonportable": ["eager.monitoring.StringGauge", "eager.monitoring.IntGauge", "eager.monitoring.Counter"], "eager.monitoring.StringGauge": [], "eager.monitoring.IntGauge": [], "python.metrics_nonportable.TFLiteMetrics.__init__": ["<builtin>.ValueError"], "python.metrics_nonportable.TFLiteMetrics.increase_counter_debugger_creation": [], "python.metrics_nonportable.TFLiteMetrics.increase_counter_interpreter_creation": [], "python.metrics_nonportable.TFLiteMetrics.increase_counter_converter_attempt": [], "python.metrics_nonportable.TFLiteMetrics.increase_counter_converter_success": [], "python.metrics_nonportable.TFLiteMetrics.set_converter_param": [], "python.metrics_nonportable.TFLiteMetrics.set_converter_error": ["ConverterErrorData.ErrorCode.Name"], "ConverterErrorData.ErrorCode.Name": [], "python.metrics_nonportable.TFLiteMetrics.set_converter_latency": [], "python.metrics_nonportable.TFLiteConverterMetrics.__init__": ["<builtin>.super", "metrics_wrapper.metrics_wrapper.MetricsWrapper", "uuid.uuid4"], "metrics_wrapper.metrics_wrapper.MetricsWrapper": [], "python.metrics_nonportable.TFLiteConverterMetrics.__del__": ["python.metrics_nonportable.TFLiteConverterMetrics.export_metrics"], "python.metrics_nonportable.TFLiteConverterMetrics.export_metrics": [], "python.metrics_nonportable.TFLiteConverterMetrics.set_export_required": [], "python.metrics_portable": ["os.path.splitext", "os.path.join"], "python.metrics_portable.TFLiteMetrics.__init__": [], "python.metrics_portable.TFLiteMetrics.increase_counter_debugger_creation": [], "python.metrics_portable.TFLiteMetrics.increase_counter_interpreter_creation": [], "python.metrics_portable.TFLiteMetrics.increase_counter_converter_attempt": [], "python.metrics_portable.TFLiteMetrics.increase_counter_converter_success": [], "python.metrics_portable.TFLiteMetrics.set_converter_param": [], "python.metrics_portable.TFLiteMetrics.set_converter_error": [], "python.metrics_portable.TFLiteMetrics.set_converter_latency": [], "python.metrics_portable.TFLiteConverterMetrics.__del__": [], "python.metrics_portable.TFLiteConverterMetrics.set_export_required": [], "python.metrics_portable.TFLiteConverterMetrics.export_metrics": [], "python.op_hint": ["util.all_util.remove_undocumented", "util.tf_export.tf_export", "util.deprecation.deprecated"], "python.op_hint.OpHint.OpHintArgumentTracker.__init__": ["<builtin>.set"], "python.op_hint.OpHint.OpHintArgumentTracker._get_new_global_index": ["<builtin>.ValueError"], "python.op_hint.OpHint.OpHintArgumentTracker.add": ["util.compat.as_bytes", "ops.array_ops.identity", "framework.attr_value_pb2.AttrValue", "<builtin>.ValueError", "json.dumps", "python.op_hint.OpHint.OpHintArgumentTracker._get_new_global_index"], "python.op_hint.OpHint.__init__": ["<builtin>.isinstance", "python.op_hint.OpHint.OpHintArgumentTracker.__init__", "uuid.uuid1", "python.op_hint.OpHint._validate_children_inputs_mappings"], "python.op_hint.OpHint._validate_children_inputs_mappings": ["<builtin>.isinstance", "python.op_hint.OpHint._validate_children_inputs_mappings.assert_dictlist_has_keys"], "uuid.uuid1": [], "python.op_hint.OpHint._validate_children_inputs_mappings.assert_dictlist_has_keys": ["<builtin>.isinstance"], "python.op_hint.OpHint._setattr": ["framework.attr_value_pb2.AttrValue", "framework.ops.convert_to_tensor"], "python.op_hint.OpHint.add_input": ["python.op_hint.OpHint.OpHintArgumentTracker.add"], "python.op_hint.OpHint.add_output": ["python.op_hint.OpHint.OpHintArgumentTracker.add"], "python.op_hint.OpHint.add_inputs": ["python.op_hint.OpHint.OpHintArgumentTracker.add", "<builtin>.zip"], "python.op_hint.OpHint.add_outputs": ["python.op_hint.OpHint.OpHintArgumentTracker.add", "<builtin>.zip"], "python.op_hint._LiteOperand.aggregate_and_return_name_for_input": ["<builtin>.RuntimeError"], "python.op_hint._LiteOperand.aggregate_and_return_name_for_output": ["<builtin>.RuntimeError"], "python.op_hint._LiteSingleOperand.__init__": ["python.op_hint._tensor_name_base"], "python.op_hint._tensor_name_base": [], "python.op_hint._LiteSingleOperand.flatten": [], "python.op_hint._LiteSingleOperand.aggregate_and_return_name_for_input": [], "python.op_hint._LiteSingleOperand.aggregate_and_return_name_for_output": ["copy.deepcopy", "python.op_hint._tensorflow_output_name"], "python.op_hint._tensorflow_output_name": [], "python.op_hint._LiteSingleOperand.__str__": ["<builtin>.str"], "python.op_hint._LiteAggregateOperand.__init__": [], "python.op_hint._LiteAggregateOperand.add": ["python.op_hint._tensor_name_base"], "python.op_hint._LiteAggregateOperand.flatten_nodes": ["<builtin>.RuntimeError", "six.iteritems", "<builtin>.ValueError", "<builtin>.len"], "python.op_hint._LiteAggregateOperand.flatten": ["python.op_hint._tensor_name_base", "python.op_hint._LiteAggregateOperand.flatten_nodes"], "python.op_hint._LiteAggregateOperand.aggregate_and_return_name_for_input": ["<builtin>.len", "framework.node_def_pb2.NodeDef", "python.op_hint._tensor_name_base", "python.op_hint._LiteAggregateOperand.flatten_nodes"], "python.op_hint._LiteAggregateOperand.aggregate_and_return_name_for_output": ["python.op_hint._tensorflow_output_name", "python.op_hint._LiteSingleOperand.__init__", "python.op_hint._LiteSingleOperand.aggregate_and_return_name_for_output", "python.op_hint._LiteAggregateOperand.flatten_nodes", "<builtin>.enumerate", "framework.node_def_pb2.NodeDef", "copy.deepcopy", "<builtin>.len"], "python.op_hint._LiteAggregateOperand.__str__": [], "python.op_hint._LiteFuncCall.__init__": [], "python.op_hint._LiteFuncCall.flattened_inputs_and_outputs": ["python.op_hint._LiteFuncCall.flattened_inputs_and_outputs._flatten"], "python.op_hint._LiteFuncCall.flattened_inputs_and_outputs._flatten": [], "python.op_hint._LiteFuncCall.__str__": ["python.op_hint._LiteFuncCall.__str__.format_args"], "python.op_hint._LiteFuncCall.__str__.format_args": ["<builtin>.str"], "python.op_hint._find_all_hints_in_nodes": ["util.compat.as_text", "python.op_hint._find_all_hints_in_nodes.put_operand", "collections.defaultdict", "json.loads"], "python.op_hint._find_all_hints_in_nodes.put_operand": ["python.op_hint._LiteAggregateOperand.__init__", "python.op_hint._LiteSingleOperand.__init__"], "python.op_hint._extract_topology_sequence_mapping": ["<builtin>.dict", "<builtin>.enumerate", "python.op_hint._tensor_name_base"], "python.op_hint._find_children_hints_in_while_loop": ["six.itervalues", "python.op_hint._extract_topology_sequence_mapping", "<builtin>.min", "<builtin>.enumerate", "copy.deepcopy", "python.op_hint._find_all_hints_in_nodes"], "python.op_hint._find_children_hints_in_while_loop.<lambda1>": [], "python.op_hint._find_children_hints": ["framework.graph_util_impl._extract_graph_summary", "python.op_hint._find_children_hints_in_while_loop", "python.op_hint._tensor_name_base", "framework.graph_util_impl._bfs_for_reachable_nodes", "framework.graph_pb2.GraphDef", "<builtin>.enumerate", "<builtin>.set", "<builtin>.len"], "framework.graph_util_impl._extract_graph_summary": ["framework.graph_util_impl._node_name", "framework.graph_util_impl._get_colocated_node_name"], "framework.graph_util_impl._bfs_for_reachable_nodes": ["<builtin>.set", "<builtin>.list"], "python.op_hint._check_subgraph_closed": ["<builtin>.TypeError", "<builtin>.set"], "python.op_hint._convert_single_op_hint_to_stub": ["framework.graph_util_impl._extract_graph_summary", "python.op_hint._tensor_name_base", "framework.tensor_util.make_tensor_proto", "<builtin>.str", "<builtin>.sorted", "<builtin>.max", "framework.graph_util_impl._bfs_for_reachable_nodes", "framework.graph_pb2.GraphDef", "framework.attr_value_pb2.AttrValue", "framework.node_def_pb2.NodeDef", "uuid.uuid1", "<builtin>.range", "<builtin>.set", "copy.deepcopy", "<builtin>.list"], "python.op_hint._convert_single_op_hint_to_stub.<lambda1>": [], "python.op_hint._remove_one_redundant_stack_unstack": ["framework.graph_util_impl._extract_graph_summary", "python.op_hint._tensor_name_base", "framework.graph_pb2.GraphDef", "<builtin>.zip", "<builtin>.set", "copy.deepcopy", "<builtin>.len"], "python.op_hint._remove_redundant_stack_unstack": ["python.op_hint._remove_one_redundant_stack_unstack"], "python.op_hint._get_correct_mapping": ["<builtin>.sorted"], "python.op_hint._convert_op_hints_to_stubs_helper": ["six.itervalues", "python.op_hint._find_all_hints_in_nodes", "python.op_hint.<lambda1>", "python.op_hint.<lambda2>", "python.op_hint._convert_single_op_hint_to_stub", "python.op_hint._get_correct_mapping", "<builtin>.enumerate", "python.op_hint._remove_redundant_stack_unstack", "<builtin>.range", "python.op_hint._find_children_hints", "<builtin>.len"], "python.op_hint._convert_op_hints_to_stubs_helper.<lambda1>": [], "python.op_hint.<lambda1>": [], "python.op_hint.<lambda2>": [], "python.op_hint.find_all_hinted_output_nodes": ["python.op_hint._find_all_hints_in_nodes", "six.itervalues", "<builtin>.ValueError"], "python.op_hint.convert_op_hints_to_stubs": ["python.op_hint._convert_op_hints_to_stubs_helper", "<builtin>.ValueError"], "python.schema_util": ["util.all_util.remove_undocumented"], "python.schema_util.get_builtin_code_from_operator_code": ["<builtin>.max", "<builtin>.callable", "<builtin>.hasattr"], "python.tflite_convert": ["python.tflite_convert.main"], "python.tflite_convert._parse_array": ["six.ensure_str"], "python.tflite_convert._parse_set": ["<builtin>.set", "six.ensure_str"], "python.tflite_convert._parse_inference_type": ["<builtin>.ValueError"], "python.tflite_convert._ParseBooleanFlag.__init__": ["<builtin>.ValueError", "<builtin>.super"], "python.tflite_convert._ParseBooleanFlag.__call__": ["<builtin>.ValueError", "<builtin>.setattr"], "python.tflite_convert._get_tflite_converter": ["python.tflite_convert._parse_set", "lite.TFLiteConverter.from_keras_model_file", "<builtin>.dict", "python.tflite_convert._parse_array", "six.moves.zip", "<builtin>.ValueError", "lite.TFLiteConverter.from_saved_model", "six.ensure_str", "lite.TFLiteConverter.from_frozen_graph", "<builtin>.list"], "six.moves.zip": [], "lite.TFLiteConverter.from_keras_model_file": [], "lite.TFLiteConverter.from_frozen_graph": [], "python.tflite_convert._convert_tf1_model": ["python.convert.register_custom_opdefs", "<builtin>.open", "toco_flags_pb2.FileFormat.Value", "python.tflite_convert._parse_inference_type", "python.tflite_convert._parse_array", "six.moves.zip", "<builtin>.dict", "lite.OpsSet.get_options", "six.ensure_binary", "<builtin>.set", "<builtin>.len", "<builtin>.print", "<builtin>.ValueError", "python.lite.OpsSet", "python.tflite_convert._get_tflite_converter", "six.ensure_str", "<builtin>.list"], "toco_flags_pb2.FileFormat.Value": [], "lite.OpsSet.get_options": [], "python.lite.OpsSet": [], "python.tflite_convert._convert_tf2_model": ["<builtin>.open", "python.tflite_convert._parse_set", "lite.TFLiteConverterV2.from_keras_model", "python.tflite_convert._parse_array", "six.ensure_binary", "lite.TFLiteConverterV2.from_saved_model", "util.keras_deps.get_load_model_function"], "lite.TFLiteConverterV2.from_saved_model": [], "lite.TFLiteConverterV2.from_keras_model": [], "python.tflite_convert._check_tf1_flags": ["<builtin>.ValueError", "<builtin>.bool", "python.tflite_convert._check_tf1_flags._get_message_unparsed"], "python.tflite_convert._check_tf1_flags._get_message_unparsed": ["six.ensure_str"], "python.tflite_convert._check_tf2_flags": ["<builtin>.ValueError"], "python.tflite_convert._get_tf1_flags": ["lite.OpsSet.get_options"], "python.tflite_convert._get_tf2_flags": [], "python.tflite_convert._get_parser": ["python.tflite_convert._get_tf2_flags", "argparse.ArgumentParser", "python.tflite_convert._get_tf1_flags"], "python.tflite_convert.run_main": ["python.tf2.enabled", "<builtin>.str", "sys.exit", "os.path.basename", "warnings.warn", "python.tflite_convert._check_tf2_flags", "logging.gen_html.gen_conversion_log_html", "python.tflite_convert._convert_tf1_model", "sys.stderr.write", "python.tflite_convert._check_tf1_flags", "python.tflite_convert._get_parser", "python.tflite_convert._convert_tf2_model"], "logging.gen_html.gen_conversion_log_html": ["<builtin>.IOError", "os.path.join", "os.path.exists", "logging.toco_conversion_log_pb2.TocoConversionLog", "platform.resource_loader.get_path_to_datafile", "<builtin>.open", "io.open", "logging.gen_html.HTMLGenerator.generate", "logging.gen_html.HTMLGenerator.__init__"], "python.tflite_convert.main": ["absl.app.run"], "python.tflite_keras_util": [], "python.tflite_keras_util._enforce_names_consistency": ["<builtin>.all", "<builtin>.any", "util.nest.map_structure", "util.nest.flatten", "python.tflite_keras_util._enforce_names_consistency._has_name"], "python.tflite_keras_util._enforce_names_consistency._has_name": ["<builtin>.hasattr"], "python.tflite_keras_util._enforce_names_consistency._clear_name": ["copy.deepcopy", "<builtin>.hasattr"], "python.tflite_keras_util.model_input_signature": ["<builtin>.len", "python.tflite_keras_util._enforce_names_consistency", "<builtin>.isinstance", "<builtin>.hasattr"], "python.tflite_keras_util.raise_model_input_error": ["<builtin>.ValueError"], "python.tflite_keras_util._create_pseudo_names": ["<builtin>.str", "<builtin>.isinstance", "util.nest.yield_flat_paths", "<builtin>.list", "util.nest.map_structure"], "python.tflite_keras_util._create_pseudo_names.one_index": ["<builtin>.isinstance"], "python.tflite_keras_util.create_pseudo_output_names": ["python.tflite_keras_util._create_pseudo_names"], "python.tflite_keras_util.trace_model_call": ["eager.def_function.function", "<builtin>.isinstance", "python.tflite_keras_util.raise_model_input_error", "python.tflite_keras_util.model_input_signature"], "python.tflite_keras_util.trace_model_call._wrapped_model": ["<builtin>.len", "util.keras_deps.get_call_context_function", "<builtin>.list"], "util.keras_deps.get_call_context_function": [], "python.util": [], "python.util._convert_tflite_enum_type_to_tf_type": ["<builtin>.ValueError"], "protobuf.meta_graph_pb2.SignatureDef": [], "python.util._convert_op_hints_if_present": ["python.util.is_frozen_graph", "framework.graph_util.convert_variables_to_constants", "python.op_hint.convert_op_hints_to_stubs", "<builtin>.ValueError", "python.util.get_tensor_name"], "python.util.build_debug_info_func.f": ["<builtin>.isinstance", "framework.error_interpolation.create_graph_debug_info_def", "sys.stderr.write"], "framework.error_interpolation.create_graph_debug_info_def": ["<builtin>.enumerate", "protobuf.graph_debug_info_pb2.GraphDebugInfo", "framework.error_interpolation._compute_useful_frames", "<builtin>.dict", "<builtin>.set", "<builtin>.reversed"], "python.util.convert_debug_info_func.f": ["protobuf.graph_debug_info_pb2.GraphDebugInfo"], "protobuf.graph_debug_info_pb2.GraphDebugInfo": [], "six.moves.range": [], "python.util._convert_model_from_bytearray_to_object": ["schema_py_generated.Model.GetRootAsModel", "schema_py_generated.ModelT.InitFromObj", "copy.deepcopy"], "schema_py_generated.Model.GetRootAsModel": [], "schema_py_generated.ModelT.InitFromObj": [], "python.util._convert_model_from_object_to_bytearray": ["<builtin>.bytes", "flatbuffers.Builder"], "flatbuffers.Builder": [], "python.util.get_quantize_opcode_idx": ["python.schema_util.get_builtin_code_from_operator_code", "<builtin>.enumerate"], "python.util.get_dequantize_opcode_idx": ["python.schema_util.get_builtin_code_from_operator_code", "<builtin>.enumerate"], "python.util._update_signature_def_tensors": ["six.moves.range", "<builtin>.len"], "python.util._remove_tensors_from_model": ["python.util._update_signature_def_tensors", "<builtin>.sorted", "<builtin>.ValueError", "python.util._remove_tensors_from_model.update_tensors", "absl.logging.debug", "six.moves.range", "<builtin>.len", "<builtin>.min"], "absl.logging.debug": [], "python.util._remove_tensors_from_model.update_tensors": ["<builtin>.enumerate"], "python.util._modify_model_input_type": ["<builtin>.ValueError", "python.util._convert_tflite_enum_type_to_tf_type", "<builtin>.tuple", "python.util.get_tf_type_name", "python.util.get_quantize_opcode_idx", "six.moves.range", "<builtin>.len", "<builtin>.set", "absl.logging.warning", "python.util._remove_tensors_from_model", "python.schema_py_generated.QuantizationParametersT"], "python.schema_py_generated.QuantizationParametersT": [], "python.util._modify_model_output_type": ["<builtin>.enumerate", "python.schema_util.get_builtin_code_from_operator_code", "<builtin>.ValueError", "python.util.get_dequantize_opcode_idx", "python.util._convert_tflite_enum_type_to_tf_type", "python.schema_py_generated.OperatorCodeT", "<builtin>.tuple", "python.util.get_tf_type_name", "six.moves.range", "<builtin>.len", "<builtin>.set", "absl.logging.warning", "python.util._remove_tensors_from_model", "python.schema_py_generated.QuantizationParametersT"], "python.schema_py_generated.OperatorCodeT": [], "python.util._remove_redundant_quantize_ops": ["python.util.get_dequantize_opcode_idx", "python.util._convert_tflite_enum_type_to_tf_type", "python.util.get_quantize_opcode_idx"], "python.wrap_toco": [], "python._pywrap_toco_api.TocoConvert": [], "python._pywrap_toco_api.ExperimentalMlirQuantizeModel": [], "python._pywrap_toco_api.ExperimentalMlirSparsifyModel": [], "python._pywrap_toco_api.RegisterCustomOpdefs": [], "python.wrap_toco.wrapped_retrieve_collected_errors": ["python._pywrap_toco_api.RetrieveCollectedErrors"], "python._pywrap_toco_api.RetrieveCollectedErrors": [], "schema.upgrade_schema": ["argparse.ArgumentParser", "contextlib.contextmanager", "v1.app.run"], "schema.upgrade_schema.TemporaryDirectoryResource": ["tempfile.mkdtemp", "shutil.rmtree"], "schema.upgrade_schema.Converter.__init__": ["schema.upgrade_schema.Converter.__init__.FindSchema", "platform.resource_loader.get_path_to_datafile", "os.path.exists"], "schema.upgrade_schema.Converter.__init__.FindSchema": ["platform.resource_loader.get_path_to_datafile"], "schema.upgrade_schema.Converter._Read": ["subprocess.call", "<builtin>.open", "json.load", "os.path.join", "os.path.basename", "<builtin>.RuntimeError", "os.path.splitext", "os.path.exists", "<builtin>.ValueError", "schema.upgrade_schema.TemporaryDirectoryResource"], "subprocess.call": [], "schema.upgrade_schema.Converter._Write": ["subprocess.call", "<builtin>.open", "json.dump", "shutil.copy", "os.path.join", "<builtin>.RuntimeError", "os.path.splitext", "<builtin>.ValueError", "schema.upgrade_schema.TemporaryDirectoryResource"], "shutil.copy": [], "schema.upgrade_schema.Converter._Upgrade0To1": [], "schema.upgrade_schema.Converter._Upgrade1To2": ["<builtin>.type", "schema.upgrade_schema.Converter._Upgrade1To2.RemapOperator", "schema.upgrade_schema.Converter._Upgrade1To2.RemapOperatorType", "<builtin>.isinstance", "<builtin>.ValueError"], "schema.upgrade_schema.Converter._Upgrade1To2.RemapOperator": [], "schema.upgrade_schema.Converter._Upgrade1To2.RemapOperatorType": [], "schema.upgrade_schema.Converter._Upgrade2To3": ["<builtin>.len"], "schema.upgrade_schema.Converter._PerformUpgrade": [], "schema.upgrade_schema.Converter.Convert": ["<builtin>.RuntimeError", "schema.upgrade_schema.Converter._Read", "schema.upgrade_schema.Converter._Write", "schema.upgrade_schema.Converter._PerformUpgrade"], "schema.upgrade_schema.main": ["schema.upgrade_schema.Converter.Convert", "schema.upgrade_schema.Converter.__init__"], "tools.convert_image_to_csv": ["absl.app.run", "absl.flags.DEFINE_boolean", "absl.flags.DEFINE_integer", "absl.flags.DEFINE_multi_string"], "absl.flags.DEFINE_multi_string": [], "tools.convert_image_to_csv.get_image": ["framework.ops.Graph", "ops.io_ops.read_file", "ops.image_ops.resize_images_v2", "ops.image_ops.decode_image", "client.session.Session"], "tools.convert_image_to_csv.array_to_int_csv": [], "tools.convert_image_to_csv.main": ["tools.convert_image_to_csv.array_to_int_csv", "sys.stderr.write", "sys.exit", "tools.convert_image_to_csv.get_image", "<builtin>.print"], "tools.flatbuffer_utils": [], "tools.flatbuffer_utils.read_model": ["platform.gfile.Exists", "<builtin>.RuntimeError", "<builtin>.bytearray", "tools.flatbuffer_utils.convert_bytearray_to_object", "platform.gfile.GFile"], "tools.flatbuffer_utils.read_model_with_mutable_tensors": ["tools.flatbuffer_utils.read_model", "copy.deepcopy"], "tools.flatbuffer_utils.write_model": ["tools.flatbuffer_utils.convert_object_to_bytearray", "platform.gfile.GFile"], "tools.flatbuffer_utils.strip_strings": [], "tools.flatbuffer_utils.randomize_weights": ["<builtin>.len", "<builtin>.range", "random.seed", "random.randint"], "random.randint": [], "tools.flatbuffer_utils.rename_custom_ops": [], "tools.flatbuffer_utils.xxd_output_to_bytes": ["<builtin>.bytes", "re.compile", "<builtin>.bytearray", "<builtin>.open", "<builtin>.filter", "<builtin>.int"], "tools.flatbuffer_utils.xxd_output_to_object": ["tools.flatbuffer_utils.convert_bytearray_to_object", "tools.flatbuffer_utils.xxd_output_to_bytes"], "tools.randomize_weights": ["absl.flags.DEFINE_string", "absl.app.run", "absl.flags.mark_flag_as_required", "absl.flags.DEFINE_integer"], "tools.randomize_weights.main": ["tools.flatbuffer_utils.randomize_weights", "tools.flatbuffer_utils.write_model", "tools.flatbuffer_utils.read_model"], "tools.reverse_xxd_dump_from_cc": ["absl.flags.DEFINE_string", "absl.flags.mark_flag_as_required", "absl.app.run"], "tools.reverse_xxd_dump_from_cc.main": ["tools.flatbuffer_utils.xxd_output_to_object", "tools.flatbuffer_utils.write_model"], "tools.strip_strings": ["absl.flags.mark_flag_as_required", "absl.app.run", "absl.flags.DEFINE_string"], "tools.strip_strings.main": ["tools.flatbuffer_utils.write_model", "tools.flatbuffer_utils.strip_strings", "tools.flatbuffer_utils.read_model"], "tools.visualize": ["os.path.splitext", "tools.visualize.main", "os.path.join"], "tools.visualize.TensorTypeToName": ["TensorType.__dict__.items", "TensorType.__dict__.items"], "TensorType.__dict__.items": [], "tools.visualize.BuiltinCodeToName": ["BuiltinOperator.__dict__.items", "BuiltinOperator.__dict__.items"], "BuiltinOperator.__dict__.items": [], "tools.visualize.NameListToString": ["<builtin>.chr", "<builtin>.int", "<builtin>.isinstance"], "tools.visualize.OpCodeMapper.__init__": ["<builtin>.enumerate", "tools.visualize.NameListToString", "tools.visualize.BuiltinCodeToName"], "tools.visualize.OpCodeMapper.__call__": [], "tools.visualize.DataSizeMapper.__call__": ["<builtin>.len"], "tools.visualize.TensorMapper.__init__": [], "tools.visualize.TensorMapper.__call__": ["<builtin>.str", "<builtin>.repr", "tools.visualize.TensorTypeToName", "tools.visualize.NameListToString"], "tools.visualize.GenerateGraph": ["json.dumps", "<builtin>.enumerate", "tools.visualize.GenerateGraph.TensorName", "tools.visualize.GenerateGraph.OpName"], "tools.visualize.GenerateGraph.TensorName": [], "tools.visualize.GenerateGraph.OpName": [], "tools.visualize.GenerateTableHtml": ["<builtin>.enumerate"], "tools.visualize.CamelCaseToSnakeCase": ["re.sub"], "tools.visualize.FlatbufferToDict": ["<builtin>.hasattr", "tools.visualize.FlatbufferToDict", "<builtin>.dir", "<builtin>.isinstance", "tools.visualize.CamelCaseToSnakeCase", "<builtin>.callable"], "tools.visualize.CreateDictFromFlatbuffer": ["tools.visualize.FlatbufferToDict", "schema_py_generated.Model.GetRootAsModel", "schema_py_generated.ModelT.InitFromObj", "schema_py_generated.Model.GetRootAsModel", "schema_py_generated.ModelT.InitFromObj"], "tools.visualize.create_html": ["tools.visualize.TensorMapper.__init__", "tools.visualize.CreateDictFromFlatbuffer", "tools.visualize.GenerateGraph", "tools.visualize.OpCodeMapper.__init__", "json.load", "<builtin>.open", "<builtin>.bytearray", "<builtin>.enumerate", "os.path.exists", "tools.visualize.create_html.<lambda1>", "<builtin>.RuntimeError", "<builtin>.max", "tools.visualize.GenerateTableHtml"], "tools.visualize.create_html.<lambda1>": [], "tools.visualize.main": ["<builtin>.print", "tools.visualize.create_html", "<builtin>.open"], "tools.zip_files": ["absl.app.run", "absl.flags.DEFINE_string"], "tools.zip_files.main": ["zipfile.ZipFile", "os.walk", "os.path.join"], "tutorials.dataset": [], "tutorials.dataset.read32": ["numpy.dtype", "numpy.frombuffer"], "numpy.dtype": [], "tutorials.dataset.check_image_file_header": ["<builtin>.ValueError", "tutorials.dataset.read32", "tensorflow.gfile.Open"], "tensorflow.gfile.Open": [], "tutorials.dataset.check_labels_file_header": ["<builtin>.ValueError", "tutorials.dataset.read32", "tensorflow.gfile.Open"], "tutorials.dataset.download": ["os.path.join", "urllib.request.urlretrieve", "os.remove", "tempfile.mkstemp", "tensorflow.gfile.MakeDirs", "tensorflow.gfile.Exists", "gzip.open", "shutil.copyfileobj", "<builtin>.print", "tensorflow.gfile.Open"], "tensorflow.gfile.Exists": [], "tensorflow.gfile.MakeDirs": [], "tempfile.mkstemp": [], "shutil.copyfileobj": [], "tutorials.dataset.dataset": ["tutorials.dataset.check_image_file_header", "tutorials.dataset.check_labels_file_header", "tutorials.dataset.download", "tensorflow.data.FixedLengthRecordDataset", "data.Dataset.zip"], "tutorials.dataset.dataset.decode_image": ["tensorflow.reshape", "tensorflow.cast", "tensorflow.decode_raw"], "tensorflow.decode_raw": [], "tutorials.dataset.dataset.decode_label": ["tensorflow.to_int32", "tensorflow.reshape", "tensorflow.decode_raw"], "tensorflow.to_int32": [], "tensorflow.data.FixedLengthRecordDataset": [], "data.Dataset.zip": [], "tutorials.dataset.train": ["tutorials.dataset.dataset"], "tutorials.dataset.test": ["tutorials.dataset.dataset"], "tutorials.mnist_tflite": ["flags.FLAGS.DEFINE_string", "tensorflow.logging.set_verbosity", "app.flags.DEFINE_string", "v1.app.run"], "flags.FLAGS.DEFINE_string": [], "app.flags.DEFINE_string": [], "tutorials.mnist_tflite.test_image_generator": ["tutorials.dataset.test", "compat.v1.Session", "v1.data.make_one_shot_iterator"], "v1.data.make_one_shot_iterator": [], "tutorials.mnist_tflite.run_eval": ["numpy.squeeze", "numpy.reshape"], "tutorials.mnist_tflite.main": ["tutorials.mnist_tflite.run_eval", "<builtin>.float", "tensorflow.lite.Interpreter", "<builtin>.print", "tutorials.mnist_tflite.test_image_generator"], "tensorflow.logging.set_verbosity": [], "metrics.blazeface_metrics": ["sys.stderr.write", "metrics.blazeface_metrics.main", "compat.v1.function", "<builtin>.exit", "argparse.ArgumentParser"], "compat.v1.function": [], "metrics.blazeface_metrics.metrics": ["compat.v1.divide", "compat.v1.where", "v1.math.pow", "v1.math.divide", "v1.math.logical_or", "v1.math.count_nonzero", "v1.math.greater", "compat.v1.shape", "v1.math.reduce_sum", "metrics.kl_divergence.symmetric_kl_divergence", "v1.math.exp", "compat.v1.logical_and", "v1.math.maximum", "compat.v1.broadcast_to"], "v1.math.exp": [], "v1.math.divide": [], "metrics.kl_divergence.symmetric_kl_divergence": ["compat.v1.constant", "v1.math.reduce_sum", "v1.math.multiply", "v1.math.maximum", "v1.math.log", "v1.math.divide", "compat.v1.add"], "v1.math.greater": [], "v1.math.logical_or": [], "compat.v1.shape": [], "compat.v1.broadcast_to": [], "compat.v1.where": [], "v1.math.pow": [], "v1.math.reduce_sum": [], "v1.math.count_nonzero": [], "v1.math.maximum": [], "compat.v1.divide": [], "compat.v1.logical_and": [], "metrics.blazeface_metrics.main": ["lite.TFLiteConverter.from_session", "compat.v1.Session", "compat.v1.reshape", "compat.v1.reset_default_graph", "metrics.blazeface_metrics.metrics", "<builtin>.open", "compat.v1.placeholder", "compat.v1.Graph"], "compat.v1.reset_default_graph": [], "lite.TFLiteConverter.from_session": [], "metrics.kl_divergence": [], "v1.math.log": [], "v1.math.multiply": [], "metrics.mobilenet": ["metrics.mobilenet.main", "<builtin>.exit", "argparse.ArgumentParser", "sys.stderr.write"], "metrics.mobilenet.main": ["compat.v1.logical_and", "lite.TFLiteConverter.from_session", "metrics.kl_divergence.symmetric_kl_divergence", "<builtin>.open", "compat.v1.placeholder", "compat.v1.Graph", "compat.v1.reshape", "compat.v1.Session", "v1.math.reduce_mean", "compat.v1.reset_default_graph"], "v1.math.reduce_mean": [], "dialects.chlo": [], "dialects.chlo.register_chlo_dialect": ["_cext_loader.load_extension"], "_cext_loader.load_extension": [], "dialects.mhlo": [], "dialects.mhlo.register_mhlo_dialect": ["_cext_loader.load_extension"], "tfr.define_op_template": ["platform.flags.mark_flag_as_required", "platform.flags.DEFINE_bool", "python.composite.Composite", "platform.flags.DEFINE_string", "absl.app.run"], "platform.flags.mark_flag_as_required": [], "tfr.define_op_template._composite_random_op": [], "tfr.define_op_template.main": ["python.tfr_gen.tfr_gen_from_module", "<builtin>.open", "os.makedirs", "FLAGS.output.endswith", "os.path.exists", "os.path.dirname", "python.op_reg_gen.gen_register_op"], "distributions.bernoulli": ["distributions.kullback_leibler.RegisterKL"], "distributions.bernoulli.Bernoulli": ["util.deprecation.deprecated"], "distributions.bernoulli.Bernoulli.__init__": ["distributions.util.get_logits_and_probs", "framework.ops.name_scope", "<builtin>.dict", "<builtin>.super", "<builtin>.locals"], "<builtin>.locals": [], "distributions.util.get_logits_and_probs": ["ops.math_ops.log", "ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "ops.nn.softmax", "ops.check_ops.assert_non_negative", "framework.ops.name_scope", "ops.math_ops.reduce_sum", "<builtin>.TypeError", "ops.check_ops.assert_less_equal", "framework.constant_op.constant", "distributions.util.embed_check_categorical_event_shape", "ops.math_ops.log1p", "ops.math_ops.sigmoid", "ops.check_ops.assert_near", "framework.ops.convert_to_tensor"], "distributions.bernoulli.Bernoulli._param_shapes": ["framework.ops.convert_to_tensor"], "distributions.bernoulli.Bernoulli.logits": [], "distributions.bernoulli.Bernoulli.probs": [], "distributions.bernoulli.Bernoulli._batch_shape_tensor": ["ops.array_ops.shape"], "distributions.bernoulli.Bernoulli._batch_shape": ["Distribution._logits.get_shape"], "Distribution._logits.get_shape": [], "distributions.bernoulli.Bernoulli._event_shape_tensor": ["ops.array_ops.constant"], "distributions.bernoulli.Bernoulli._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.bernoulli.Bernoulli._sample_n": ["ops.random_ops.random_uniform", "distribution.Distribution.batch_shape_tensor", "ops.array_ops.concat", "ops.math_ops.cast", "ops.math_ops.less"], "distribution.Distribution.batch_shape_tensor": [], "distributions.bernoulli.Bernoulli._log_prob": ["ops.nn.sigmoid_cross_entropy_with_logits", "distributions.util.embed_check_integer_casting_closed", "distributions.bernoulli.Bernoulli._log_prob._broadcast", "ops.math_ops.cast"], "distributions.util.embed_check_integer_casting_closed": ["distributions.util._smallest_integer_by_dtype", "ops.control_flow_ops.with_dependencies", "distributions.util._is_integer_like_by_dtype", "ops.check_ops.assert_non_negative", "ops.check_ops.assert_greater_equal", "framework.ops.name_scope", "<builtin>.TypeError", "distributions.util._largest_integer_by_dtype", "ops.check_ops.assert_less_equal", "distributions.util.assert_integer_form", "framework.ops.convert_to_tensor"], "distributions.bernoulli.Bernoulli._log_prob._broadcast": ["ops.array_ops.ones_like"], "ops.nn.sigmoid_cross_entropy_with_logits": [], "distributions.bernoulli.Bernoulli._entropy": ["ops.nn.softplus", "ops.math_ops.sigmoid"], "ops.nn.softplus": [], "distributions.bernoulli.Bernoulli._mean": ["ops.array_ops.identity"], "distributions.bernoulli.Bernoulli._variance": ["distributions.bernoulli.Bernoulli._mean"], "distributions.bernoulli.Bernoulli._mode": ["ops.math_ops.cast"], "distributions.kullback_leibler.RegisterKL": ["util.deprecation.deprecated"], "distributions.bernoulli._kl_bernoulli_bernoulli": ["ops.nn.softplus", "ops.math_ops.sigmoid", "framework.ops.name_scope"], "distributions.beta": ["distributions.kullback_leibler.RegisterKL"], "distributions.beta.Beta": ["util.deprecation.deprecated", "distributions.util.AppendDocstring"], "distributions.beta.Beta.__init__": ["distributions.beta.Beta._maybe_assert_valid_concentration", "framework.ops.name_scope", "<builtin>.dict", "<builtin>.super", "ops.check_ops.assert_same_float_dtype", "<builtin>.locals", "framework.ops.convert_to_tensor"], "distributions.beta.Beta._maybe_assert_valid_concentration": ["ops.check_ops.assert_positive", "ops.control_flow_ops.with_dependencies"], "ops.check_ops.assert_same_float_dtype": ["ops.check_ops._assert_same_base_type", "<builtin>.ValueError"], "distributions.beta.Beta._param_shapes": ["<builtin>.dict", "<builtin>.zip"], "distributions.beta.Beta.concentration1": [], "distributions.beta.Beta.concentration0": [], "distributions.beta.Beta.total_concentration": [], "distributions.beta.Beta._batch_shape_tensor": ["ops.array_ops.shape"], "distributions.beta.Beta._batch_shape": [], "distributions.beta.Beta._event_shape_tensor": ["framework.constant_op.constant"], "distributions.beta.Beta._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.beta.Beta._sample_n": ["distributions.util.gen_new_seed", "ops.array_ops.ones_like", "ops.random_ops.random_gamma"], "ops.random_ops.random_gamma": ["ops.gen_random_ops.random_gamma", "ops.random_ops._maybe_set_static_shape_helper", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.array_ops.broadcast_to", "ops.math_ops.maximum", "ops.array_ops.shape", "numpy.finfo", "ops.array_ops.broadcast_dynamic_shape", "framework.random_seed.get_seed"], "distributions.util.gen_new_seed": ["hashlib.md5", "<builtin>.int", "<builtin>.str"], "distributions.util.AppendDocstring": [], "distributions.beta.Beta._log_prob": ["distributions.beta.Beta._log_unnormalized_prob", "distributions.beta.Beta._log_normalization"], "distributions.beta.Beta._log_unnormalized_prob": ["ops.math_ops.log1p", "distributions.beta.Beta._maybe_assert_valid_sample", "ops.math_ops.xlogy"], "distributions.beta.Beta._log_normalization": ["ops.math_ops.lgamma"], "distributions.beta.Beta._prob": ["distributions.beta.Beta._log_prob", "ops.math_ops.exp"], "distributions.beta.Beta._log_cdf": ["ops.math_ops.log", "distributions.beta.Beta._cdf"], "distributions.beta.Beta._cdf": ["ops.math_ops.betainc"], "ops.math_ops.betainc": [], "distributions.beta.Beta._maybe_assert_valid_sample": ["ops.check_ops.assert_positive", "ops.check_ops.assert_less", "ops.array_ops.ones", "ops.control_flow_ops.with_dependencies"], "ops.math_ops.xlogy": [], "ops.math_ops.log1p": [], "ops.math_ops.lgamma": [], "distributions.beta.Beta._entropy": ["ops.math_ops.digamma", "distributions.beta.Beta._log_normalization"], "ops.math_ops.digamma": [], "distributions.beta.Beta._mean": [], "distributions.beta.Beta._variance": ["distributions.beta.Beta._mean"], "distributions.beta.Beta._mode": ["numpy.array", "Distribution.dtype.as_numpy_dtype", "ops.array_ops.where_v2", "ops.math_ops.logical_and", "ops.array_ops.ones", "ops.control_flow_ops.with_dependencies", "ops.check_ops.assert_less", "distribution.Distribution.batch_shape_tensor", "ops.array_ops.fill"], "Distribution.dtype.as_numpy_dtype": [], "ops.control_flow_ops.with_dependencies": ["framework.ops.convert_to_tensor_or_composite", "<builtin>.isinstance", "framework.ops.name_scope", "framework.ops.colocate_with", "<builtin>.list", "framework.ops.control_dependencies", "framework.ops.IndexedSlices", "ops.control_flow_ops._Identity", "eager.context.executing_eagerly"], "ops.check_ops.assert_positive": ["eager.context.executing_eagerly", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.check_ops.assert_less", "ops.check_ops._shape_and_dtype_str"], "distributions.beta.BetaWithSoftplusConcentration": ["util.deprecation.deprecated"], "distributions.beta.BetaWithSoftplusConcentration.__init__": ["framework.ops.name_scope", "<builtin>.dict", "<builtin>.super", "ops.nn.softplus", "<builtin>.locals"], "distributions.beta._kl_beta_beta": ["ops.math_ops.digamma", "distributions.beta._kl_beta_beta.delta", "framework.ops.name_scope"], "distributions.beta._kl_beta_beta.delta": ["<builtin>.getattr"], "distributions.bijector": [], "distributions.bijector_impl": [], "distributions.bijector_impl._Mapping.__new__": ["<builtin>.super"], "distributions.bijector_impl._Mapping.x_key": ["distributions.bijector_impl._Mapping._deep_tuple", "<builtin>.tuple", "<builtin>.sorted", "util.object_identity.Reference"], "util.object_identity.Reference": ["<builtin>.property"], "distributions.bijector_impl._Mapping._deep_tuple": ["<builtin>.tuple", "<builtin>.map", "<builtin>.isinstance"], "distributions.bijector_impl._Mapping.y_key": ["distributions.bijector_impl._Mapping._deep_tuple", "<builtin>.tuple", "<builtin>.sorted", "util.object_identity.Reference"], "distributions.bijector_impl._Mapping.merge": ["<builtin>.ValueError", "distributions.bijector_impl._Mapping._merge", "distributions.bijector_impl._Mapping._merge_dicts", "<builtin>.any"], "distributions.bijector_impl._Mapping._merge": ["<builtin>.ValueError"], "distributions.bijector_impl._Mapping._merge_dicts": ["<builtin>.ValueError", "six.iteritems"], "distributions.bijector_impl.Bijector": ["contextlib.contextmanager", "abc.abstractmethod"], "distributions.bijector_impl.Bijector.__init__": ["<builtin>.type", "<builtin>.ValueError", "distributions.bijector_impl.Bijector.__init__.camel_to_snake", "<builtin>.TypeError", "<builtin>.enumerate", "<builtin>.isinstance", "framework.tensor_util.is_tf_type"], "distributions.bijector_impl.Bijector.__init__.camel_to_snake": ["re.sub"], "distributions.bijector_impl.Bijector.graph_parents": [], "distributions.bijector_impl.Bijector.forward_min_event_ndims": [], "distributions.bijector_impl.Bijector.inverse_min_event_ndims": [], "distributions.bijector_impl.Bijector.is_constant_jacobian": [], "distributions.bijector_impl.Bijector._is_injective": [], "distributions.bijector_impl.Bijector.validate_args": [], "distributions.bijector_impl.Bijector.dtype": [], "distributions.bijector_impl.Bijector.name": [], "distributions.bijector_impl.Bijector._forward_event_shape_tensor": [], "distributions.bijector_impl.Bijector.forward_event_shape_tensor": ["distributions.bijector_impl.Bijector._forward_event_shape_tensor", "distributions.bijector_impl.Bijector._name_scope", "framework.ops.convert_to_tensor"], "distributions.bijector_impl.Bijector._name_scope": ["framework.ops.name_scope"], "distributions.bijector_impl.Bijector._forward_event_shape": [], "distributions.bijector_impl.Bijector.forward_event_shape": ["framework.tensor_shape.TensorShape", "distributions.bijector_impl.Bijector._forward_event_shape"], "distributions.bijector_impl.Bijector._inverse_event_shape_tensor": [], "distributions.bijector_impl.Bijector.inverse_event_shape_tensor": ["distributions.bijector_impl.Bijector._inverse_event_shape_tensor", "distributions.bijector_impl.Bijector._name_scope", "framework.ops.convert_to_tensor"], "distributions.bijector_impl.Bijector._inverse_event_shape": ["framework.tensor_shape.TensorShape"], "distributions.bijector_impl.Bijector.inverse_event_shape": ["distributions.bijector_impl.Bijector._inverse_event_shape"], "distributions.bijector_impl.Bijector._forward": ["<builtin>.NotImplementedError"], "distributions.bijector_impl.Bijector._call_forward": ["distributions.bijector_impl.Bijector._name_scope", "framework.ops.convert_to_tensor", "distributions.bijector_impl.Bijector._maybe_assert_dtype", "distributions.bijector_impl._Mapping.merge", "distributions.bijector_impl.Bijector._forward", "distributions.bijector_impl.Bijector._lookup", "distributions.bijector_impl.Bijector._cache"], "distributions.bijector_impl.Bijector._maybe_assert_dtype": ["<builtin>.TypeError"], "distributions.bijector_impl.Bijector._lookup": [], "distributions.bijector_impl.Bijector._cache": ["distributions.bijector_impl.Bijector._lookup", "distributions.bijector_impl._Mapping.merge", "<builtin>.ValueError"], "distributions.bijector_impl.Bijector.forward": ["distributions.bijector_impl.Bijector._call_forward"], "distributions.bijector_impl.Bijector._inverse": ["<builtin>.NotImplementedError"], "distributions.bijector_impl.Bijector._call_inverse": ["distributions.bijector_impl.Bijector._name_scope", "framework.ops.convert_to_tensor", "distributions.bijector_impl.Bijector._maybe_assert_dtype", "distributions.bijector_impl._Mapping.merge", "distributions.bijector_impl.Bijector._inverse", "distributions.bijector_impl.Bijector._lookup", "distributions.bijector_impl.Bijector._cache"], "distributions.bijector_impl.Bijector.inverse": ["distributions.bijector_impl.Bijector._call_inverse"], "distributions.bijector_impl.Bijector._inverse_log_det_jacobian": ["<builtin>.NotImplementedError"], "distributions.bijector_impl.Bijector._call_inverse_log_det_jacobian": ["<builtin>.tuple", "distributions.bijector_impl.Bijector._reduce_jacobian_det_over_event", "distributions.bijector_impl.Bijector._name_scope", "distributions.bijector_impl.Bijector._inverse_log_det_jacobian", "framework.ops.convert_to_tensor", "distributions.bijector_impl.Bijector._maybe_assert_dtype", "distributions.bijector_impl._Mapping.merge", "distributions.bijector_impl.Bijector._check_valid_event_ndims", "framework.ops.control_dependencies", "distributions.bijector_impl.Bijector._inverse", "distributions.bijector_impl.Bijector._lookup", "distributions.bijector_impl.Bijector._forward_log_det_jacobian", "distributions.bijector_impl.Bijector._cache"], "distributions.bijector_impl.Bijector._check_valid_event_ndims": ["<builtin>.ValueError", "framework.tensor_util.constant_value", "framework.ops.convert_to_tensor", "ops.check_ops.assert_rank", "ops.check_ops.assert_greater_equal"], "distributions.bijector_impl.Bijector._reduce_jacobian_det_over_event": ["distributions.bijector_impl.Bijector._maybe_get_static_event_ndims", "ops.array_ops.ones", "ops.array_ops.shape", "ops.array_ops.rank", "distributions.bijector_impl.Bijector._get_event_reduce_dims", "ops.array_ops.broadcast_static_shape", "ops.math_ops.reduce_sum"], "distributions.bijector_impl.Bijector._forward_log_det_jacobian": ["<builtin>.NotImplementedError"], "distributions.bijector_impl.Bijector.inverse_log_det_jacobian": ["distributions.bijector_impl.Bijector._call_inverse_log_det_jacobian"], "distributions.bijector_impl.Bijector._call_forward_log_det_jacobian": ["<builtin>.tuple", "distributions.bijector_impl.Bijector._reduce_jacobian_det_over_event", "distributions.bijector_impl.Bijector._name_scope", "framework.ops.control_dependencies", "distributions.bijector_impl.Bijector._inverse_log_det_jacobian", "distributions.bijector_impl.Bijector._forward", "framework.ops.convert_to_tensor", "distributions.bijector_impl.Bijector._maybe_assert_dtype", "distributions.bijector_impl._Mapping.merge", "distributions.bijector_impl.Bijector._check_valid_event_ndims", "<builtin>.NotImplementedError", "distributions.bijector_impl.Bijector._lookup", "distributions.bijector_impl.Bijector._forward_log_det_jacobian", "distributions.bijector_impl.Bijector._cache"], "distributions.bijector_impl.Bijector.forward_log_det_jacobian": ["distributions.bijector_impl.Bijector._call_forward_log_det_jacobian"], "distributions.bijector_impl.Bijector._get_event_reduce_dims": ["distributions.bijector_impl.Bijector._maybe_get_static_event_ndims", "<builtin>.range", "ops.math_ops.range"], "distributions.bijector_impl.Bijector._maybe_get_static_event_ndims": ["distributions.util.maybe_get_static_value", "<builtin>.len", "<builtin>.int", "<builtin>.ValueError", "<builtin>.isinstance"], "ops.array_ops.broadcast_static_shape": ["framework.common_shapes.broadcast_shape"], "ops.check_ops.assert_rank": ["eager.context.executing_eagerly", "<builtin>.isinstance", "framework.ops.name_scope", "<builtin>.ValueError", "ops.check_ops._assert_rank_condition", "framework.ops.convert_to_tensor", "<builtin>.tuple"], "distributions.util.maybe_get_static_value": ["framework.tensor_util.constant_value", "numpy.array"], "distributions.categorical": ["distributions.kullback_leibler.RegisterKL"], "distributions.categorical._broadcast_cat_event_and_params": ["ops.array_ops.ones_like", "<builtin>.TypeError", "ops.math_ops.cast", "ops.array_ops.ones", "framework.tensor_shape.TensorShape", "ops.array_ops.shape"], "distributions.categorical.Categorical": ["util.deprecation.deprecated"], "distributions.categorical.Categorical.__init__": ["framework.ops.name_scope", "ops.array_ops.rank", "<builtin>.locals", "<builtin>.super", "framework.ops.convert_to_tensor", "<builtin>.dict", "framework.tensor_shape.dimension_value", "distributions.util.embed_check_categorical_event_shape", "ops.array_ops.shape", "framework.constant_op.constant", "distributions.util.get_logits_and_probs"], "distributions.util.embed_check_categorical_event_shape": ["ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "ops.check_ops.assert_greater_equal", "framework.ops.name_scope", "<builtin>.TypeError", "distributions.util._largest_integer_by_dtype", "ops.check_ops.assert_less_equal", "ops.check_ops.assert_rank_at_least", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "framework.tensor_shape.dimension_value"], "distributions.categorical.Categorical.event_size": [], "distributions.categorical.Categorical.logits": [], "distributions.categorical.Categorical.probs": [], "distributions.categorical.Categorical._batch_shape_tensor": ["ops.array_ops.identity"], "distributions.categorical.Categorical._batch_shape": [], "distributions.categorical.Categorical._event_shape_tensor": ["framework.constant_op.constant"], "distributions.categorical.Categorical._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.categorical.Categorical._sample_n": ["ops.array_ops.reshape", "ops.array_ops.transpose", "distribution.Distribution.batch_shape_tensor", "ops.math_ops.cast", "ops.random_ops.multinomial", "ops.array_ops.concat"], "ops.random_ops.multinomial": ["framework.ops.name_scope", "ops.random_ops.multinomial_categorical_impl"], "distributions.categorical.Categorical._cdf": ["ops.array_ops.reshape", "distributions.util.embed_check_integer_casting_closed", "ops.array_ops.zeros_like", "ops.math_ops.reduce_sum", "framework.ops.convert_to_tensor", "ops.array_ops.sequence_mask", "ops.array_ops.shape", "ops.array_ops.where", "distributions.categorical._broadcast_cat_event_and_params"], "distributions.categorical.Categorical._log_prob": ["ops.nn_ops.sparse_softmax_cross_entropy_with_logits", "distributions.util.embed_check_integer_casting_closed", "framework.ops.convert_to_tensor", "distributions.categorical._broadcast_cat_event_and_params"], "ops.nn_ops.sparse_softmax_cross_entropy_with_logits": ["ops.math_ops.cast", "framework.ops.control_dependencies", "<builtin>.ValueError", "framework.dtypes.as_dtype", "framework.ops.convert_to_tensor", "ops.gen_nn_ops.sparse_softmax_cross_entropy_with_logits", "ops.array_ops.shape", "framework.ops.name_scope", "ops.check_ops.assert_equal", "ops.array_ops.reshape", "ops.array_ops.rank", "ops.nn_ops._ensure_xent_args"], "distributions.categorical.Categorical._entropy": ["ops.math_ops.reduce_sum", "ops.nn_ops.log_softmax"], "ops.nn_ops.log_softmax": ["util.deprecation.deprecated_argument_lookup", "ops.nn_ops._wrap_2d_function"], "distributions.categorical.Categorical._mode": ["ops.math_ops.argmax", "ops.math_ops.cast"], "ops.math_ops.argmax": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.argmax_v2"], "distributions.categorical._kl_categorical_categorical": ["ops.nn_ops.softmax", "framework.ops.name_scope", "ops.math_ops.reduce_sum", "ops.nn_ops.log_softmax"], "ops.nn_ops.softmax": ["util.deprecation.deprecated_argument_lookup", "ops.nn_ops._wrap_2d_function"], "distributions.dirichlet": ["distributions.kullback_leibler.RegisterKL"], "distributions.dirichlet.Dirichlet": ["util.deprecation.deprecated", "distributions.util.AppendDocstring"], "distributions.dirichlet.Dirichlet.__init__": ["ops.math_ops.reduce_sum", "<builtin>.locals", "<builtin>.super", "distributions.dirichlet.Dirichlet._maybe_assert_valid_concentration", "<builtin>.dict", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "distributions.dirichlet.Dirichlet._maybe_assert_valid_concentration": ["ops.array_ops.shape", "ops.check_ops.assert_positive", "ops.check_ops.assert_less", "ops.check_ops.assert_rank_at_least", "ops.control_flow_ops.with_dependencies"], "distributions.dirichlet.Dirichlet.concentration": [], "distributions.dirichlet.Dirichlet.total_concentration": [], "distributions.dirichlet.Dirichlet._batch_shape_tensor": ["ops.array_ops.shape"], "distributions.dirichlet.Dirichlet._batch_shape": [], "distributions.dirichlet.Dirichlet._event_shape_tensor": ["ops.array_ops.shape"], "distributions.dirichlet.Dirichlet._event_shape": [], "distributions.dirichlet.Dirichlet._sample_n": ["ops.math_ops.reduce_sum", "ops.random_ops.random_gamma"], "distributions.dirichlet.Dirichlet._log_prob": ["distributions.dirichlet.Dirichlet._log_normalization", "distributions.dirichlet.Dirichlet._log_unnormalized_prob"], "distributions.dirichlet.Dirichlet._log_unnormalized_prob": ["ops.math_ops.reduce_sum", "distributions.dirichlet.Dirichlet._maybe_assert_valid_sample", "ops.math_ops.xlogy"], "distributions.dirichlet.Dirichlet._log_normalization": ["ops.special_math_ops.lbeta"], "distributions.dirichlet.Dirichlet._prob": ["distributions.dirichlet.Dirichlet._log_prob", "ops.math_ops.exp"], "distributions.dirichlet.Dirichlet._maybe_assert_valid_sample": ["ops.array_ops.ones", "ops.math_ops.reduce_sum", "ops.check_ops.assert_positive", "ops.check_ops.assert_near", "ops.control_flow_ops.with_dependencies"], "ops.special_math_ops.lbeta": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.math_ops.reduce_sum", "ops.math_ops.lgamma"], "distributions.dirichlet.Dirichlet._entropy": ["ops.math_ops.reduce_sum", "distributions.dirichlet.Dirichlet._log_normalization", "ops.math_ops.digamma", "distribution.Distribution.event_shape_tensor", "ops.math_ops.cast"], "distribution.Distribution.event_shape_tensor": [], "distributions.dirichlet.Dirichlet._mean": [], "distributions.dirichlet.Dirichlet._covariance": ["distributions.dirichlet.Dirichlet._variance", "distributions.dirichlet.Dirichlet._mean", "ops.math_ops.matmul", "distributions.dirichlet.Dirichlet._variance_scale_term", "ops.array_ops.matrix_set_diag"], "distributions.dirichlet.Dirichlet._variance_scale_term": ["ops.math_ops.rsqrt"], "distributions.dirichlet.Dirichlet._variance": ["distributions.dirichlet.Dirichlet._variance_scale_term", "distributions.dirichlet.Dirichlet._mean"], "ops.array_ops.matrix_set_diag": ["ops.gen_array_ops.matrix_set_diag_v3"], "ops.math_ops.rsqrt": ["ops.gen_math_ops.rsqrt"], "distributions.dirichlet.Dirichlet._mode": ["numpy.array", "ops.array_ops.ones", "ops.array_ops.shape", "ops.math_ops.reduce_all", "ops.check_ops.assert_less", "distribution.Distribution.event_shape_tensor", "ops.array_ops.fill", "ops.control_flow_ops.with_dependencies", "ops.array_ops.where_v2", "Distribution.dtype.as_numpy_dtype", "ops.math_ops.cast"], "ops.check_ops.assert_rank_at_least": ["eager.context.executing_eagerly", "framework.ops.name_scope", "<builtin>.ValueError", "ops.check_ops._assert_rank_condition", "framework.ops.convert_to_tensor", "<builtin>.tuple"], "ops.check_ops.assert_near": ["eager.context.executing_eagerly", "framework.ops.name_scope", "ops.math_ops.reduce_all", "numpy.finfo", "ops.control_flow_ops.Assert", "ops.math_ops.abs", "framework.ops.convert_to_tensor", "ops.math_ops.less", "ops.check_ops._shape_and_dtype_str"], "distributions.dirichlet._kl_dirichlet_dirichlet": ["ops.math_ops.digamma", "ops.special_math_ops.lbeta", "ops.math_ops.reduce_sum", "framework.ops.name_scope"], "distributions.dirichlet_multinomial": [], "distributions.dirichlet_multinomial.DirichletMultinomial": ["distributions.util.AppendDocstring", "util.deprecation.deprecated"], "distributions.dirichlet_multinomial.DirichletMultinomial.__init__": ["<builtin>.super", "distributions.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_concentration", "<builtin>.dict", "ops.math_ops.reduce_sum", "<builtin>.locals", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "distributions.util.embed_check_nonnegative_integer_form"], "distributions.util.embed_check_nonnegative_integer_form": ["ops.control_flow_ops.with_dependencies", "ops.check_ops.assert_non_negative", "framework.ops.name_scope", "distributions.util.assert_integer_form", "framework.ops.convert_to_tensor"], "distributions.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_concentration": ["distributions.util.embed_check_categorical_event_shape", "ops.check_ops.assert_positive", "ops.control_flow_ops.with_dependencies"], "distributions.dirichlet_multinomial.DirichletMultinomial.total_count": [], "distributions.dirichlet_multinomial.DirichletMultinomial.concentration": [], "distributions.dirichlet_multinomial.DirichletMultinomial.total_concentration": [], "distributions.dirichlet_multinomial.DirichletMultinomial._batch_shape_tensor": ["ops.array_ops.shape"], "distributions.dirichlet_multinomial.DirichletMultinomial._batch_shape": [], "distributions.dirichlet_multinomial.DirichletMultinomial._event_shape_tensor": ["ops.array_ops.shape"], "distributions.dirichlet_multinomial.DirichletMultinomial._event_shape": [], "distributions.dirichlet_multinomial.DirichletMultinomial._sample_n": ["ops.array_ops.concat", "distribution.Distribution.batch_shape_tensor", "ops.random_ops.multinomial", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.random_ops.random_gamma", "ops.math_ops.log", "ops.array_ops.one_hot", "ops.math_ops.cast", "distributions.util.gen_new_seed", "distribution.Distribution.event_shape_tensor"], "distributions.dirichlet_multinomial.DirichletMultinomial._log_prob": ["ops.special_math_ops.lbeta", "distributions.util.log_combinations", "distributions.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_sample"], "distributions.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_sample": ["ops.check_ops.assert_equal", "ops.control_flow_ops.with_dependencies", "ops.math_ops.reduce_sum", "distributions.util.embed_check_nonnegative_integer_form"], "distributions.util.log_combinations": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.math_ops.lgamma", "ops.math_ops.reduce_sum"], "distributions.dirichlet_multinomial.DirichletMultinomial._prob": ["distributions.dirichlet_multinomial.DirichletMultinomial._log_prob", "ops.math_ops.exp"], "distributions.dirichlet_multinomial.DirichletMultinomial._mean": [], "distributions.dirichlet_multinomial.DirichletMultinomial._covariance": ["ops.math_ops.matmul", "distributions.dirichlet_multinomial.DirichletMultinomial._variance", "ops.array_ops.matrix_set_diag", "distributions.dirichlet_multinomial.DirichletMultinomial._variance_scale_term", "distributions.dirichlet_multinomial.DirichletMultinomial._mean"], "distributions.dirichlet_multinomial.DirichletMultinomial._variance_scale_term": ["ops.math_ops.sqrt"], "distributions.dirichlet_multinomial.DirichletMultinomial._variance": ["distributions.dirichlet_multinomial.DirichletMultinomial._variance_scale_term", "distributions.dirichlet_multinomial.DirichletMultinomial._mean"], "distributions.distributions": ["util.deprecation.silence"], "distributions.distribution": ["util.tf_export.tf_export", "distributions.distribution.ReparameterizationType.__init__"], "distributions.distribution._copy_fn": ["<builtin>.callable", "types.FunctionType", "<builtin>.TypeError"], "distributions.distribution._update_docstring": ["<builtin>.enumerate"], "distributions.distribution._convert_to_tensor": ["framework.ops.convert_to_tensor", "eager.context.executing_eagerly"], "distributions.distribution._DistributionMeta.__new__": ["abc.ABCMeta.__new__", "<builtin>.TypeError", "distributions.distribution._update_docstring", "util.tf_inspect.getdoc", "distributions.distribution._copy_fn", "<builtin>.issubclass", "<builtin>.ValueError", "<builtin>.getattr", "<builtin>.AttributeError"], "abc.ABCMeta.__new__": [], "util.tf_inspect.getdoc": ["inspect.getdoc"], "distributions.distribution.ReparameterizationType": ["util.deprecation.deprecated"], "distributions.distribution.ReparameterizationType.__init__": [], "distributions.distribution.ReparameterizationType.__repr__": [], "distributions.distribution.ReparameterizationType.__eq__": [], "distributions.distribution.Distribution": ["util.deprecation.deprecated", "contextlib.contextmanager"], "distributions.distribution.Distribution.__init__": ["framework.ops.name_scope", "<builtin>.type", "framework.tensor_util.is_tf_type", "<builtin>.enumerate", "<builtin>.ValueError"], "distributions.distribution.Distribution._parameters": [], "distributions.distribution.Distribution.param_shapes": ["distributions.distribution.Distribution._param_shapes", "framework.ops.name_scope"], "distributions.distribution.Distribution._param_shapes": ["<builtin>.NotImplementedError"], "distributions.distribution.Distribution.param_static_shapes": ["framework.tensor_util.constant_value", "framework.tensor_shape.TensorShape", "distributions.distribution.Distribution.param_shapes", "<builtin>.ValueError", "<builtin>.isinstance"], "distributions.distribution.Distribution.name": [], "distributions.distribution.Distribution.dtype": [], "distributions.distribution.Distribution.parameters": [], "distributions.distribution.Distribution.reparameterization_type": [], "distributions.distribution.Distribution.allow_nan_stats": [], "distributions.distribution.Distribution.validate_args": [], "distributions.distribution.Distribution.copy": ["<builtin>.type", "<builtin>.dict"], "distributions.distribution.Distribution._batch_shape_tensor": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.batch_shape_tensor": ["distributions.distribution.Distribution._batch_shape_tensor", "distributions.distribution.Distribution._name_scope", "framework.ops.convert_to_tensor"], "distributions.distribution.Distribution._name_scope": ["framework.ops.name_scope"], "distributions.distribution.Distribution._batch_shape": ["framework.tensor_shape.TensorShape"], "distributions.distribution.Distribution.batch_shape": ["framework.tensor_shape.as_shape", "distributions.distribution.Distribution._batch_shape"], "distributions.distribution.Distribution._event_shape_tensor": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.event_shape_tensor": ["distributions.distribution.Distribution._name_scope", "framework.ops.convert_to_tensor", "distributions.distribution.Distribution._event_shape_tensor"], "distributions.distribution.Distribution._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.distribution.Distribution.event_shape": ["framework.tensor_shape.as_shape", "distributions.distribution.Distribution._event_shape"], "distributions.distribution.Distribution.is_scalar_event": ["distributions.distribution.Distribution._is_scalar_helper", "distributions.distribution.Distribution._name_scope", "framework.ops.convert_to_tensor"], "distributions.distribution.Distribution._is_scalar_helper": ["ops.array_ops.shape", "ops.math_ops.equal", "distributions.distribution.Distribution.event_shape_tensor", "distributions.distribution.Distribution.batch_shape_tensor"], "distributions.distribution.Distribution.is_scalar_batch": ["distributions.distribution.Distribution._is_scalar_helper", "distributions.distribution.Distribution._name_scope", "framework.ops.convert_to_tensor"], "distributions.distribution.Distribution._sample_n": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution._call_sample_n": ["distributions.distribution.Distribution._set_sample_static_shape", "distributions.distribution.Distribution._expand_sample_shape_to_vector", "distributions.distribution.Distribution._name_scope", "distributions.distribution.Distribution._sample_n", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "ops.array_ops.reshape", "ops.array_ops.concat"], "distributions.distribution.Distribution._expand_sample_shape_to_vector": ["numpy.array", "ops.math_ops.equal", "framework.tensor_util.constant_value", "numpy.prod", "distributions.util.pick_vector", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "ops.math_ops.reduce_prod", "ops.array_ops.rank", "<builtin>.ValueError", "ops.array_ops.reshape"], "distributions.distribution.Distribution._set_sample_static_shape": ["framework.tensor_util.constant_value", "framework.tensor_shape.TensorShape"], "distributions.distribution.Distribution.sample": ["distributions.distribution.Distribution._call_sample_n"], "distributions.distribution.Distribution._log_prob": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution._call_log_prob": ["distributions.distribution.Distribution._log_prob", "distributions.distribution.Distribution._name_scope", "distributions.distribution._convert_to_tensor", "ops.math_ops.log", "distributions.distribution.Distribution._prob"], "distributions.distribution.Distribution._prob": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.log_prob": ["distributions.distribution.Distribution._call_log_prob"], "distributions.distribution.Distribution._call_prob": ["ops.math_ops.exp", "distributions.distribution.Distribution._log_prob", "distributions.distribution.Distribution._name_scope", "distributions.distribution._convert_to_tensor", "distributions.distribution.Distribution._prob"], "distributions.distribution.Distribution.prob": ["distributions.distribution.Distribution._call_prob"], "distributions.distribution.Distribution._log_cdf": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution._call_log_cdf": ["distributions.distribution.Distribution._cdf", "distributions.distribution.Distribution._name_scope", "distributions.distribution._convert_to_tensor", "distributions.distribution.Distribution._log_cdf", "ops.math_ops.log"], "distributions.distribution.Distribution._cdf": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.log_cdf": ["distributions.distribution.Distribution._call_log_cdf"], "distributions.distribution.Distribution._call_cdf": ["distributions.distribution.Distribution._cdf", "ops.math_ops.exp", "distributions.distribution.Distribution._name_scope", "distributions.distribution._convert_to_tensor", "distributions.distribution.Distribution._log_cdf"], "distributions.distribution.Distribution.cdf": ["distributions.distribution.Distribution._call_cdf"], "distributions.distribution.Distribution._log_survival_function": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution._call_log_survival_function": ["distributions.distribution.Distribution._log_survival_function", "distributions.distribution.Distribution._name_scope", "ops.math_ops.log1p", "distributions.distribution.Distribution.cdf", "distributions.distribution._convert_to_tensor"], "distributions.distribution.Distribution.log_survival_function": ["distributions.distribution.Distribution._call_log_survival_function"], "distributions.distribution.Distribution._survival_function": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution._call_survival_function": ["distributions.distribution._convert_to_tensor", "distributions.distribution.Distribution._name_scope", "distributions.distribution.Distribution._survival_function", "distributions.distribution.Distribution.cdf"], "distributions.distribution.Distribution.survival_function": ["distributions.distribution.Distribution._call_survival_function"], "distributions.distribution.Distribution._entropy": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.entropy": ["distributions.distribution.Distribution._entropy", "distributions.distribution.Distribution._name_scope"], "distributions.distribution.Distribution._mean": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.mean": ["distributions.distribution.Distribution._mean", "distributions.distribution.Distribution._name_scope"], "distributions.distribution.Distribution._quantile": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution._call_quantile": ["distributions.distribution.Distribution._quantile", "distributions.distribution._convert_to_tensor", "distributions.distribution.Distribution._name_scope"], "distributions.distribution.Distribution.quantile": ["distributions.distribution.Distribution._call_quantile"], "distributions.distribution.Distribution._variance": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.variance": ["ops.math_ops.square", "distributions.distribution.Distribution._variance", "distributions.distribution.Distribution._name_scope", "distributions.distribution.Distribution._stddev"], "distributions.distribution.Distribution._stddev": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.stddev": ["ops.math_ops.sqrt", "distributions.distribution.Distribution._variance", "distributions.distribution.Distribution._name_scope", "distributions.distribution.Distribution._stddev"], "distributions.distribution.Distribution._covariance": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.covariance": ["distributions.distribution.Distribution._name_scope", "distributions.distribution.Distribution._covariance"], "distributions.distribution.Distribution._mode": ["<builtin>.type", "<builtin>.NotImplementedError"], "distributions.distribution.Distribution.mode": ["distributions.distribution.Distribution._name_scope", "distributions.distribution.Distribution._mode"], "distributions.distribution.Distribution._cross_entropy": ["distributions.kullback_leibler.cross_entropy"], "distributions.kullback_leibler.cross_entropy": ["framework.ops.name_scope", "distributions.kullback_leibler.kl_divergence"], "distributions.distribution.Distribution.cross_entropy": ["distributions.distribution.Distribution._cross_entropy", "distributions.distribution.Distribution._name_scope"], "distributions.distribution.Distribution._kl_divergence": ["distributions.kullback_leibler.kl_divergence"], "distributions.kullback_leibler.kl_divergence": ["ops.math_ops.logical_not", "ops.math_ops.reduce_any", "<builtin>.NotImplementedError", "ops.array_ops.identity", "distributions.kullback_leibler._registered_kl", "framework.ops.control_dependencies", "ops.math_ops.is_nan", "ops.control_flow_ops.Assert", "framework.ops.name_scope", "<builtin>.type"], "distributions.distribution.Distribution.kl_divergence": ["distributions.distribution.Distribution._name_scope", "distributions.distribution.Distribution._kl_divergence"], "distributions.distribution.Distribution.__str__": ["<builtin>.type"], "distributions.distribution.Distribution.__repr__": ["<builtin>.type"], "distributions.util.pick_vector": ["ops.array_ops.concat", "ops.array_ops.slice", "ops.array_ops.where", "framework.ops.name_scope", "<builtin>.TypeError", "ops.array_ops.where_v2", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "framework.tensor_util.constant_value"], "distributions.exponential": [], "distributions.exponential.Exponential": ["util.deprecation.deprecated"], "distributions.exponential.Exponential.__init__": ["framework.ops.convert_to_tensor", "<builtin>.locals", "<builtin>.super", "<builtin>.dict", "framework.ops.name_scope", "ops.array_ops.ones"], "distributions.exponential.Exponential._param_shapes": ["framework.ops.convert_to_tensor"], "distributions.exponential.Exponential.rate": [], "distributions.exponential.Exponential._log_survival_function": ["gamma.Gamma._log_prob", "ops.math_ops.log"], "gamma.Gamma._log_prob": [], "distributions.exponential.Exponential._sample_n": ["numpy.finfo", "ops.array_ops.concat", "ops.array_ops.shape", "ops.math_ops.log", "ops.random_ops.random_uniform"], "distributions.exponential.ExponentialWithSoftplusRate": ["util.deprecation.deprecated"], "distributions.exponential.ExponentialWithSoftplusRate.__init__": ["ops.nn.softplus", "<builtin>.locals", "<builtin>.super", "<builtin>.dict", "framework.ops.name_scope"], "distributions.gamma": ["distributions.kullback_leibler.RegisterKL"], "distributions.gamma.Gamma": ["distributions.util.AppendDocstring", "util.deprecation.deprecated"], "distributions.gamma.Gamma.__init__": ["<builtin>.dict", "framework.ops.control_dependencies", "ops.check_ops.assert_same_float_dtype", "<builtin>.super", "framework.ops.name_scope", "ops.array_ops.identity", "<builtin>.locals", "ops.check_ops.assert_positive"], "distributions.gamma.Gamma._param_shapes": ["<builtin>.dict", "<builtin>.zip"], "distributions.gamma.Gamma.concentration": [], "distributions.gamma.Gamma.rate": [], "distributions.gamma.Gamma._batch_shape_tensor": ["ops.array_ops.shape", "ops.array_ops.broadcast_dynamic_shape"], "distributions.gamma.Gamma._batch_shape": ["ops.array_ops.broadcast_static_shape"], "distributions.gamma.Gamma._event_shape_tensor": ["framework.constant_op.constant"], "distributions.gamma.Gamma._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.gamma.Gamma._sample_n": ["ops.random_ops.random_gamma"], "distributions.gamma.Gamma._log_prob": ["distributions.gamma.Gamma._log_unnormalized_prob", "distributions.gamma.Gamma._log_normalization"], "distributions.gamma.Gamma._log_unnormalized_prob": ["ops.math_ops.xlogy", "distributions.gamma.Gamma._maybe_assert_valid_sample"], "distributions.gamma.Gamma._log_normalization": ["ops.math_ops.lgamma", "ops.math_ops.log"], "distributions.gamma.Gamma._cdf": ["ops.math_ops.igamma", "distributions.gamma.Gamma._maybe_assert_valid_sample"], "distributions.gamma.Gamma._maybe_assert_valid_sample": ["ops.check_ops.assert_same_float_dtype", "ops.check_ops.assert_positive", "ops.control_flow_ops.with_dependencies"], "ops.math_ops.igamma": [], "distributions.gamma.Gamma._entropy": ["ops.math_ops.lgamma", "ops.math_ops.digamma", "ops.math_ops.log"], "distributions.gamma.Gamma._mean": [], "distributions.gamma.Gamma._variance": ["ops.math_ops.square"], "distributions.gamma.Gamma._stddev": ["ops.math_ops.sqrt"], "distributions.gamma.Gamma._mode": ["ops.control_flow_ops.with_dependencies", "distribution.Distribution.batch_shape_tensor", "ops.array_ops.where_v2", "numpy.array", "ops.array_ops.fill", "Distribution.dtype.as_numpy_dtype", "ops.array_ops.ones", "ops.check_ops.assert_less"], "distributions.gamma.GammaWithSoftplusConcentrationRate": ["util.deprecation.deprecated"], "distributions.gamma.GammaWithSoftplusConcentrationRate.__init__": ["<builtin>.dict", "<builtin>.super", "framework.ops.name_scope", "ops.nn.softplus", "<builtin>.locals"], "distributions.gamma._kl_gamma_gamma": ["ops.math_ops.lgamma", "ops.math_ops.digamma", "framework.ops.name_scope", "ops.math_ops.log"], "distributions.identity_bijector": [], "distributions.identity_bijector.Identity": ["util.deprecation.deprecated"], "distributions.identity_bijector.Identity.__init__": ["<builtin>.super"], "distributions.identity_bijector.Identity._forward": [], "distributions.identity_bijector.Identity._inverse": [], "distributions.identity_bijector.Identity._inverse_log_det_jacobian": ["framework.constant_op.constant"], "distributions.identity_bijector.Identity._forward_log_det_jacobian": ["framework.constant_op.constant"], "distributions.kullback_leibler": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "distributions.kullback_leibler._registered_kl": ["util.tf_inspect.getmro", "<builtin>.enumerate"], "ops.math_ops.is_nan": [], "distributions.kullback_leibler.RegisterKL.__init__": [], "distributions.kullback_leibler.RegisterKL.__call__": ["<builtin>.ValueError", "<builtin>.callable", "<builtin>.TypeError"], "distributions.laplace": [], "distributions.laplace.Laplace": ["util.deprecation.deprecated"], "distributions.laplace.Laplace.__init__": ["ops.check_ops.assert_positive", "framework.ops.control_dependencies", "ops.check_ops.assert_same_float_dtype", "<builtin>.locals", "ops.array_ops.identity", "<builtin>.super", "<builtin>.dict", "framework.ops.name_scope"], "distributions.laplace.Laplace._param_shapes": ["<builtin>.dict", "<builtin>.zip"], "distributions.laplace.Laplace.loc": [], "distributions.laplace.Laplace.scale": [], "distributions.laplace.Laplace._batch_shape_tensor": ["ops.array_ops.broadcast_dynamic_shape", "ops.array_ops.shape"], "distributions.laplace.Laplace._batch_shape": ["ops.array_ops.broadcast_static_shape"], "distributions.laplace.Laplace._event_shape_tensor": ["framework.constant_op.constant"], "distributions.laplace.Laplace._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.laplace.Laplace._sample_n": ["distribution.Distribution.batch_shape_tensor", "numpy.nextafter", "ops.array_ops.concat", "Distribution.dtype.as_numpy_dtype", "ops.math_ops.log1p", "ops.math_ops.sign", "ops.math_ops.abs", "ops.random_ops.random_uniform"], "numpy.nextafter": [], "distributions.laplace.Laplace._log_prob": ["distributions.laplace.Laplace._log_unnormalized_prob", "distributions.laplace.Laplace._log_normalization"], "distributions.laplace.Laplace._log_unnormalized_prob": ["ops.math_ops.abs", "distributions.laplace.Laplace._z"], "distributions.laplace.Laplace._log_normalization": ["ops.math_ops.log", "math.log"], "distributions.laplace.Laplace._prob": ["distributions.laplace.Laplace._log_prob", "ops.math_ops.exp"], "distributions.laplace.Laplace._log_cdf": ["distributions.special_math.log_cdf_laplace", "distributions.laplace.Laplace._z"], "distributions.laplace.Laplace._z": [], "distributions.special_math.log_cdf_laplace": ["ops.math_ops.log1p", "framework.ops.name_scope", "ops.math_ops.abs", "framework.ops.convert_to_tensor", "numpy.log", "ops.array_ops.where_v2", "ops.math_ops.exp"], "distributions.laplace.Laplace._log_survival_function": ["distributions.special_math.log_cdf_laplace", "distributions.laplace.Laplace._z"], "distributions.laplace.Laplace._cdf": ["ops.math_ops.sign", "ops.math_ops.abs", "ops.math_ops.exp", "distributions.laplace.Laplace._z"], "distributions.laplace.Laplace._entropy": ["ops.math_ops.log", "math.log", "ops.array_ops.zeros_like"], "distributions.laplace.Laplace._mean": ["ops.array_ops.zeros_like"], "distributions.laplace.Laplace._stddev": ["ops.array_ops.zeros_like", "math.sqrt"], "distributions.laplace.Laplace._median": ["distributions.laplace.Laplace._mean"], "distributions.laplace.Laplace._mode": ["distributions.laplace.Laplace._mean"], "distributions.laplace.LaplaceWithSoftplusScale": ["util.deprecation.deprecated"], "distributions.laplace.LaplaceWithSoftplusScale.__init__": ["<builtin>.locals", "<builtin>.super", "ops.nn.softplus", "<builtin>.dict", "framework.ops.name_scope"], "distributions.multinomial": [], "distributions.multinomial.Multinomial": ["util.deprecation.deprecated", "distributions.util.AppendDocstring"], "distributions.multinomial.Multinomial.__init__": ["distributions.util.get_logits_and_probs", "framework.ops.name_scope", "<builtin>.dict", "<builtin>.locals", "distributions.util.embed_check_nonnegative_integer_form", "framework.ops.convert_to_tensor", "<builtin>.super"], "distributions.multinomial.Multinomial.total_count": [], "distributions.multinomial.Multinomial.logits": [], "distributions.multinomial.Multinomial.probs": [], "distributions.multinomial.Multinomial._batch_shape_tensor": ["ops.array_ops.shape"], "distributions.multinomial.Multinomial._batch_shape": [], "distributions.multinomial.Multinomial._event_shape_tensor": ["ops.array_ops.shape"], "distributions.multinomial.Multinomial._event_shape": [], "distributions.multinomial.Multinomial._sample_n": ["ops.array_ops.concat", "ops.array_ops.reshape", "ops.array_ops.transpose", "ops.map_fn.map_fn", "distribution.Distribution.event_shape_tensor", "ops.math_ops.cast", "ops.array_ops.ones_like"], "distributions.multinomial.Multinomial._sample_n._sample_single": ["ops.array_ops.reshape", "ops.random_ops.multinomial", "ops.array_ops.one_hot", "ops.math_ops.reduce_sum"], "distributions.multinomial.Multinomial._log_prob": ["distributions.multinomial.Multinomial._log_unnormalized_prob", "distributions.multinomial.Multinomial._log_normalization"], "distributions.multinomial.Multinomial._log_unnormalized_prob": ["ops.nn_ops.log_softmax", "ops.math_ops.reduce_sum", "distributions.multinomial.Multinomial._maybe_assert_valid_sample"], "distributions.multinomial.Multinomial._log_normalization": ["distributions.multinomial.Multinomial._maybe_assert_valid_sample", "distributions.util.log_combinations"], "distributions.multinomial.Multinomial._maybe_assert_valid_sample": ["ops.control_flow_ops.with_dependencies", "ops.check_ops.assert_equal", "distributions.util.embed_check_nonnegative_integer_form", "ops.math_ops.reduce_sum"], "distributions.multinomial.Multinomial._mean": ["ops.array_ops.identity"], "distributions.multinomial.Multinomial._covariance": ["ops.math_ops.matmul", "distributions.multinomial.Multinomial._variance", "ops.array_ops.ones_like", "ops.array_ops.matrix_set_diag"], "distributions.multinomial.Multinomial._variance": ["ops.array_ops.ones_like"], "distributions.normal": ["distributions.kullback_leibler.RegisterKL"], "distributions.normal.Normal": ["util.deprecation.deprecated"], "distributions.normal.Normal.__init__": ["ops.check_ops.assert_same_float_dtype", "framework.ops.name_scope", "<builtin>.dict", "ops.check_ops.assert_positive", "framework.ops.control_dependencies", "<builtin>.super", "ops.array_ops.identity", "<builtin>.locals"], "distributions.normal.Normal._param_shapes": ["<builtin>.zip", "<builtin>.dict"], "distributions.normal.Normal.loc": [], "distributions.normal.Normal.scale": [], "distributions.normal.Normal._batch_shape_tensor": ["ops.array_ops.broadcast_dynamic_shape", "ops.array_ops.shape"], "distributions.normal.Normal._batch_shape": ["ops.array_ops.broadcast_static_shape"], "distributions.normal.Normal._event_shape_tensor": ["framework.constant_op.constant"], "distributions.normal.Normal._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.normal.Normal._sample_n": ["distribution.Distribution.batch_shape_tensor", "ops.array_ops.concat", "ops.random_ops.random_normal"], "distributions.normal.Normal._log_prob": ["distributions.normal.Normal._log_unnormalized_prob", "distributions.normal.Normal._log_normalization"], "distributions.normal.Normal._log_unnormalized_prob": ["ops.math_ops.square", "distributions.normal.Normal._z"], "distributions.normal.Normal._log_normalization": ["math.log", "ops.math_ops.log"], "distributions.normal.Normal._log_cdf": ["distributions.normal.Normal._z", "distributions.special_math.log_ndtr"], "distributions.normal.Normal._z": ["framework.ops.name_scope"], "distributions.special_math.log_ndtr": ["framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.math_ops.minimum", "distributions.special_math._log_ndtr_lower", "<builtin>.ValueError", "ops.math_ops.log", "ops.array_ops.where_v2", "<builtin>.TypeError", "ops.math_ops.greater", "<builtin>.isinstance", "distributions.special_math._ndtr", "ops.math_ops.maximum"], "distributions.normal.Normal._cdf": ["distributions.normal.Normal._z", "distributions.special_math.ndtr"], "distributions.special_math.ndtr": ["distributions.special_math._ndtr", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "distributions.normal.Normal._log_survival_function": ["distributions.normal.Normal._z", "distributions.special_math.log_ndtr"], "distributions.normal.Normal._survival_function": ["distributions.normal.Normal._z", "distributions.special_math.ndtr"], "distributions.normal.Normal._entropy": ["math.log", "ops.array_ops.ones_like", "ops.math_ops.log"], "distributions.normal.Normal._mean": ["ops.array_ops.ones_like"], "distributions.normal.Normal._quantile": ["distributions.special_math.ndtri", "distributions.normal.Normal._inv_z"], "distributions.special_math.ndtri": ["<builtin>.TypeError", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "distributions.special_math._ndtri"], "distributions.normal.Normal._inv_z": ["framework.ops.name_scope"], "distributions.normal.Normal._stddev": ["ops.array_ops.ones_like"], "distributions.normal.Normal._mode": ["distributions.normal.Normal._mean"], "distributions.normal.NormalWithSoftplusScale": ["util.deprecation.deprecated"], "distributions.normal.NormalWithSoftplusScale.__init__": ["framework.ops.name_scope", "ops.nn.softplus", "<builtin>.dict", "<builtin>.super", "<builtin>.locals"], "distributions.normal._kl_normal_normal": ["framework.constant_op.constant", "framework.ops.name_scope", "ops.math_ops.square", "ops.math_ops.squared_difference", "ops.math_ops.log"], "distributions.special_math": ["numpy.array"], "distributions.special_math._ndtr": ["ops.math_ops.less", "ops.math_ops.abs", "framework.constant_op.constant", "numpy.sqrt", "ops.math_ops.erfc", "ops.math_ops.erf", "ops.math_ops.greater", "ops.array_ops.where_v2"], "ops.math_ops.erf": [], "ops.math_ops.erfc": [], "distributions.special_math._ndtri": ["ops.math_ops.sqrt", "numpy.expm1", "distributions.special_math._ndtri._create_polynomial", "ops.array_ops.fill", "ops.array_ops.shape", "framework.constant_op.constant", "numpy.sqrt", "numpy.array", "ops.math_ops.log", "numpy.exp", "ops.array_ops.where_v2"], "distributions.special_math._ndtri._create_polynomial": ["numpy.array", "ops.array_ops.zeros_like", "distributions.special_math._ndtri._create_polynomial"], "numpy.expm1": [], "numpy.exp": [], "distributions.special_math._log_ndtr_lower": ["distributions.special_math._log_ndtr_asymptotic_series", "ops.math_ops.square", "ops.math_ops.log", "numpy.log"], "distributions.special_math._log_ndtr_asymptotic_series": ["ops.array_ops.zeros_like", "ops.math_ops.square", "numpy.array", "distributions.special_math._double_factorial", "<builtin>.range"], "distributions.special_math._double_factorial": ["numpy.arange", "numpy.prod"], "distributions.special_math.erfinv": ["framework.ops.name_scope", "framework.ops.convert_to_tensor", "numpy.sqrt", "distributions.special_math.ndtri", "<builtin>.TypeError"], "distributions.student_t": [], "distributions.student_t.StudentT": ["distributions.util.AppendDocstring", "util.deprecation.deprecated"], "distributions.student_t.StudentT.__init__": ["<builtin>.dict", "framework.ops.name_scope", "<builtin>.super", "<builtin>.locals", "ops.array_ops.identity", "ops.check_ops.assert_positive", "framework.ops.control_dependencies", "ops.check_ops.assert_same_float_dtype"], "distributions.student_t.StudentT._param_shapes": ["<builtin>.dict", "<builtin>.zip"], "distributions.student_t.StudentT.df": [], "distributions.student_t.StudentT.loc": [], "distributions.student_t.StudentT.scale": [], "distributions.student_t.StudentT._batch_shape_tensor": ["ops.array_ops.shape", "ops.array_ops.broadcast_dynamic_shape"], "distributions.student_t.StudentT._batch_shape": ["ops.array_ops.broadcast_static_shape"], "distributions.student_t.StudentT._event_shape_tensor": ["framework.constant_op.constant"], "distributions.student_t.StudentT._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.student_t.StudentT._sample_n": ["ops.random_ops.random_normal", "distribution.Distribution.batch_shape_tensor", "ops.array_ops.concat", "ops.math_ops.rsqrt", "ops.random_ops.random_gamma", "ops.array_ops.ones", "distributions.util.gen_new_seed"], "distributions.student_t.StudentT._log_prob": ["distributions.student_t.StudentT._log_normalization", "distributions.student_t.StudentT._log_unnormalized_prob"], "distributions.student_t.StudentT._log_unnormalized_prob": ["ops.math_ops.log1p"], "distributions.student_t.StudentT._log_normalization": ["ops.math_ops.abs", "numpy.log", "ops.math_ops.lgamma", "ops.math_ops.log"], "distributions.student_t.StudentT._cdf": ["ops.math_ops.abs", "ops.array_ops.where_v2", "ops.math_ops.betainc", "ops.math_ops.less"], "distributions.student_t.StudentT._entropy": ["ops.math_ops.abs", "distribution.Distribution.batch_shape_tensor", "ops.special_math_ops.lbeta", "ops.math_ops.log", "ops.array_ops.concat", "ops.math_ops.digamma", "ops.array_ops.ones"], "distributions.student_t.StudentT._mean": ["ops.check_ops.assert_less", "ops.math_ops.greater", "distribution.Distribution.batch_shape_tensor", "ops.control_flow_ops.with_dependencies", "Distribution.dtype.as_numpy_dtype", "ops.array_ops.ones", "ops.array_ops.where_v2", "ops.array_ops.fill", "numpy.array"], "distributions.student_t.StudentT._variance": ["ops.check_ops.assert_less", "ops.array_ops.ones_like", "distribution.Distribution.batch_shape_tensor", "ops.math_ops.greater", "numpy.array", "ops.control_flow_ops.with_dependencies", "Distribution.dtype.as_numpy_dtype", "ops.array_ops.ones", "ops.array_ops.where_v2", "ops.array_ops.fill", "ops.math_ops.square"], "distributions.student_t.StudentT._mode": ["ops.array_ops.identity"], "distributions.student_t.StudentTWithAbsDfSoftplusScale": ["util.deprecation.deprecated"], "distributions.student_t.StudentTWithAbsDfSoftplusScale.__init__": ["ops.math_ops.abs", "<builtin>.dict", "framework.ops.name_scope", "<builtin>.super", "<builtin>.locals", "ops.nn.softplus", "ops.math_ops.floor"], "distributions.transformed_distribution": [], "distributions.transformed_distribution._static_value": ["framework.ops.convert_to_tensor", "framework.tensor_util.constant_value"], "distributions.transformed_distribution._logical_and": ["<builtin>.any", "framework.constant_op.constant", "<builtin>.all", "ops.math_ops.logical_and", "<builtin>.len", "distributions.transformed_distribution._static_value", "<builtin>.bool", "ops.math_ops.reduce_all"], "distributions.transformed_distribution._logical_equal": ["ops.math_ops.equal", "numpy.array_equal", "framework.constant_op.constant", "distributions.transformed_distribution._static_value"], "numpy.array_equal": [], "distributions.transformed_distribution._logical_not": ["numpy.logical_not", "ops.math_ops.logical_not", "framework.constant_op.constant", "distributions.transformed_distribution._static_value"], "distributions.transformed_distribution._concat_vectors": ["<builtin>.any", "framework.constant_op.constant", "ops.array_ops.concat", "distributions.transformed_distribution._static_value"], "distributions.transformed_distribution._pick_scalar_condition": ["ops.array_ops.where_v2", "distributions.transformed_distribution._static_value"], "distributions.transformed_distribution._ones_like": ["ops.array_ops.ones_like", "ops.array_ops.ones"], "distributions.transformed_distribution._ndims_from_shape": ["<builtin>.TypeError", "<builtin>.ValueError", "ops.array_ops.shape", "framework.constant_op.constant"], "distributions.transformed_distribution._is_scalar_from_shape": ["distributions.transformed_distribution._logical_equal", "distributions.transformed_distribution._ndims_from_shape"], "distributions.transformed_distribution.TransformedDistribution": ["util.deprecation.deprecated"], "distributions.transformed_distribution.TransformedDistribution.__init__": ["ops.math_ops.range", "distributions.transformed_distribution.TransformedDistribution._maybe_validate_shape_override", "framework.constant_op.constant", "<builtin>.locals", "distributions.transformed_distribution._logical_not", "<builtin>.super", "distributions.transformed_distribution._ndims_from_shape", "distributions.transformed_distribution._pick_scalar_condition", "distributions.identity_bijector.Identity", "framework.tensor_util.constant_value", "<builtin>.dict", "distributions.transformed_distribution._logical_and", "<builtin>.bool", "distributions.transformed_distribution._logical_equal", "framework.ops.name_scope"], "distributions.transformed_distribution.TransformedDistribution._maybe_validate_shape_override": ["<builtin>.any", "<builtin>.TypeError", "distributions.transformed_distribution._is_scalar_from_shape", "ops.check_ops.assert_rank", "distributions.transformed_distribution._logical_not", "<builtin>.ValueError", "ops.check_ops.assert_equal", "ops.control_flow_ops.with_dependencies", "framework.tensor_util.constant_value", "distributions.transformed_distribution._logical_and", "framework.ops.convert_to_tensor", "ops.check_ops.assert_positive"], "distributions.transformed_distribution.TransformedDistribution.distribution": [], "distributions.transformed_distribution.TransformedDistribution.bijector": [], "distributions.transformed_distribution.TransformedDistribution._event_shape_tensor": ["distributions.util.pick_vector"], "distributions.transformed_distribution.TransformedDistribution._event_shape": ["framework.tensor_util.constant_value_as_shape"], "distributions.transformed_distribution.TransformedDistribution._batch_shape_tensor": ["distributions.util.pick_vector"], "distributions.transformed_distribution.TransformedDistribution._batch_shape": ["framework.tensor_util.constant_value_as_shape"], "distributions.transformed_distribution.TransformedDistribution._sample_n": ["distributions.transformed_distribution._concat_vectors", "distributions.util.pick_vector", "distributions.transformed_distribution.TransformedDistribution._maybe_rotate_dims"], "distributions.transformed_distribution.TransformedDistribution._maybe_rotate_dims": ["ops.math_ops.range", "ops.array_ops.transpose", "ops.array_ops.rank", "distributions.transformed_distribution._concat_vectors", "framework.tensor_util.constant_value"], "distributions.transformed_distribution.TransformedDistribution._call_sample_n": ["distribution.Distribution._name_scope", "ops.array_ops.reshape", "distribution.Distribution._expand_sample_shape_to_vector", "distributions.transformed_distribution.TransformedDistribution._sample_n", "ops.array_ops.concat", "distribution.Distribution._set_sample_static_shape", "ops.array_ops.shape", "framework.ops.convert_to_tensor"], "distribution.Distribution._name_scope": [], "distribution.Distribution._expand_sample_shape_to_vector": [], "distribution.Distribution._set_sample_static_shape": [], "distributions.transformed_distribution.TransformedDistribution._log_prob": ["distributions.transformed_distribution.TransformedDistribution._maybe_get_static_event_ndims", "distributions.transformed_distribution.TransformedDistribution._finish_log_prob_for_one_fiber", "ops.math_ops.reduce_logsumexp", "ops.array_ops.stack", "<builtin>.zip"], "distributions.transformed_distribution.TransformedDistribution._maybe_get_static_event_ndims": ["ops.array_ops.size", "distribution.Distribution.event_shape_tensor", "distributions.util.maybe_get_static_value"], "distributions.transformed_distribution.TransformedDistribution._finish_log_prob_for_one_fiber": ["<builtin>.isinstance", "ops.array_ops.broadcast_static_shape", "ops.math_ops.cast", "ops.math_ops.reduce_sum", "distributions.transformed_distribution.TransformedDistribution._maybe_rotate_dims"], "distributions.transformed_distribution.TransformedDistribution._prob": ["<builtin>.sum", "distributions.transformed_distribution.TransformedDistribution._maybe_get_static_event_ndims", "<builtin>.zip", "distributions.transformed_distribution.TransformedDistribution._finish_prob_for_one_fiber"], "distributions.transformed_distribution.TransformedDistribution._finish_prob_for_one_fiber": ["ops.math_ops.reduce_prod", "<builtin>.isinstance", "ops.array_ops.broadcast_static_shape", "ops.math_ops.cast", "distributions.transformed_distribution.TransformedDistribution._maybe_rotate_dims", "ops.math_ops.exp"], "distributions.transformed_distribution.TransformedDistribution._log_cdf": ["<builtin>.NotImplementedError"], "distributions.transformed_distribution.TransformedDistribution._cdf": ["<builtin>.NotImplementedError"], "distributions.transformed_distribution.TransformedDistribution._log_survival_function": ["<builtin>.NotImplementedError"], "distributions.transformed_distribution.TransformedDistribution._survival_function": ["<builtin>.NotImplementedError"], "distributions.transformed_distribution.TransformedDistribution._quantile": ["<builtin>.NotImplementedError"], "distributions.transformed_distribution.TransformedDistribution._entropy": ["ops.math_ops.reduce_prod", "ops.array_ops.size", "ops.array_ops.reshape", "ops.array_ops.concat", "distribution.Distribution.event_shape_tensor", "distributions.transformed_distribution._ones_like", "ops.array_ops.tile", "ops.array_ops.zeros", "ops.math_ops.cast", "<builtin>.NotImplementedError", "distribution.Distribution.batch_shape_tensor"], "distributions.uniform": [], "distributions.uniform.Uniform": ["util.deprecation.deprecated"], "distributions.uniform.Uniform.__init__": ["ops.check_ops.assert_less", "ops.array_ops.identity", "<builtin>.locals", "<builtin>.dict", "<builtin>.super", "framework.ops.control_dependencies", "ops.check_ops.assert_same_float_dtype", "framework.ops.name_scope"], "distributions.uniform.Uniform._param_shapes": ["<builtin>.dict", "<builtin>.zip"], "distributions.uniform.Uniform.low": [], "distributions.uniform.Uniform.high": [], "distributions.uniform.Uniform.range": ["distribution.Distribution._name_scope"], "distributions.uniform.Uniform._batch_shape_tensor": ["ops.array_ops.shape", "ops.array_ops.broadcast_dynamic_shape"], "distributions.uniform.Uniform._batch_shape": ["ops.array_ops.broadcast_static_shape"], "distributions.uniform.Uniform._event_shape_tensor": ["framework.constant_op.constant"], "distributions.uniform.Uniform._event_shape": ["framework.tensor_shape.TensorShape"], "distributions.uniform.Uniform._sample_n": ["distribution.Distribution.batch_shape_tensor", "ops.array_ops.concat", "ops.random_ops.random_uniform", "distributions.uniform.Uniform.range"], "distributions.uniform.Uniform._prob": ["ops.array_ops.ones_like", "ops.array_ops.zeros_like", "distribution.Distribution.batch_shape_tensor", "ops.math_ops.logical_or", "ops.array_ops.where_v2", "distributions.uniform.Uniform.range", "ops.math_ops.is_nan", "ops.array_ops.ones"], "distributions.uniform.Uniform._cdf": ["ops.array_ops.shape", "ops.array_ops.where_v2", "distribution.Distribution.batch_shape_tensor", "distributions.uniform.Uniform.range", "ops.array_ops.zeros", "ops.array_ops.broadcast_dynamic_shape", "ops.array_ops.ones"], "distributions.uniform.Uniform._entropy": ["distributions.uniform.Uniform.range", "ops.math_ops.log"], "distributions.uniform.Uniform._mean": [], "distributions.uniform.Uniform._variance": ["ops.math_ops.square", "distributions.uniform.Uniform.range"], "distributions.uniform.Uniform._stddev": ["math.sqrt", "distributions.uniform.Uniform.range"], "distributions.util": [], "distributions.util.assert_integer_form": ["ops.check_ops.assert_equal", "framework.ops.name_scope", "<builtin>.TypeError", "ops.control_flow_ops.no_op", "framework.ops.convert_to_tensor", "ops.math_ops.cast"], "distributions.util.assert_symmetric": ["ops.control_flow_ops.with_dependencies", "ops.check_ops.assert_equal", "ops.array_ops.matrix_transpose"], "distributions.util.same_dynamic_shape": ["framework.ops.convert_to_tensor", "ops.math_ops.equal", "ops.control_flow_ops.cond", "ops.array_ops.rank"], "distributions.util.same_dynamic_shape.all_shapes_equal": ["ops.array_ops.concat", "ops.math_ops.reduce_all", "ops.math_ops.equal", "ops.array_ops.shape"], "distributions.util.same_dynamic_shape.<lambda1>": ["framework.constant_op.constant"], "distributions.util._is_known_unsigned_by_dtype": [], "distributions.util._is_known_signed_by_dtype": [], "distributions.util._is_known_dtype": ["distributions.util._is_known_signed_by_dtype", "distributions.util._is_known_unsigned_by_dtype"], "distributions.util._largest_integer_by_dtype": ["<builtin>.int", "distributions.util._is_known_dtype", "<builtin>.TypeError", "numpy.finfo", "numpy.iinfo"], "distributions.util._smallest_integer_by_dtype": ["distributions.util._is_known_dtype", "<builtin>.TypeError", "distributions.util._largest_integer_by_dtype", "distributions.util._is_known_unsigned_by_dtype"], "distributions.util._is_integer_like_by_dtype": ["distributions.util._is_known_dtype", "<builtin>.TypeError"], "distributions.util.matrix_diag_transform": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.array_ops.matrix_diag_part", "ops.array_ops.matrix_set_diag"], "ops.array_ops.matrix_diag_part": ["<builtin>.hasattr", "<builtin>.bool", "ops.gen_array_ops.matrix_diag_part_v3"], "distributions.util.rotate_transpose": ["<builtin>.abs", "ops.check_ops.assert_integer", "numpy.arange", "ops.array_ops.concat", "ops.array_ops.rank", "ops.math_ops.range", "framework.ops.name_scope", "numpy.roll", "ops.array_ops.transpose", "ops.math_ops.mod", "ops.array_ops.where_v2", "framework.ops.convert_to_tensor", "framework.tensor_util.constant_value", "numpy.sign", "ops.math_ops.less"], "ops.check_ops.assert_integer": ["eager.context.executing_eagerly", "framework.ops.name_scope", "ops.control_flow_ops.no_op", "<builtin>.TypeError", "framework.ops.convert_to_tensor"], "numpy.sign": [], "numpy.roll": [], "ops.math_ops.mod": [], "distributions.util.prefer_static_broadcast_shape": ["ops.array_ops.broadcast_static_shape", "framework.ops.name_scope", "distributions.util.prefer_static_broadcast_shape.get_tensor_shape", "distributions.util.prefer_static_broadcast_shape.get_shape_tensor", "ops.array_ops.broadcast_dynamic_shape"], "distributions.util.prefer_static_broadcast_shape.make_shape_tensor": ["framework.ops.convert_to_tensor"], "distributions.util.prefer_static_broadcast_shape.get_tensor_shape": ["<builtin>.isinstance", "distributions.util.prefer_static_broadcast_shape.make_shape_tensor", "framework.tensor_shape.TensorShape", "framework.tensor_util.constant_value"], "distributions.util.prefer_static_broadcast_shape.get_shape_tensor": ["<builtin>.isinstance", "distributions.util.prefer_static_broadcast_shape.make_shape_tensor", "<builtin>.ValueError"], "distributions.util.prefer_static_rank": ["ops.array_ops.rank", "distributions.util.prefer_static_value"], "distributions.util.prefer_static_value": ["framework.tensor_util.constant_value"], "distributions.util.prefer_static_shape": ["ops.array_ops.shape", "distributions.util.prefer_static_value"], "distributions.util.fill_triangular": ["ops.array_ops.concat", "<builtin>.ValueError", "numpy.int32", "distributions.util.prefer_static_rank", "framework.ops.name_scope", "numpy.floor", "ops.array_ops.reshape", "ops.array_ops.reverse", "ops.array_ops.matrix_band_part", "ops.array_ops.shape", "ops.math_ops.sqrt", "framework.ops.convert_to_tensor", "numpy.sqrt", "ops.math_ops.cast", "framework.tensor_shape.dimension_value"], "numpy.floor": [], "ops.array_ops.matrix_band_part": [], "distributions.util.fill_triangular_inverse": ["ops.array_ops.concat", "numpy.int32", "distributions.util.prefer_static_rank", "framework.ops.name_scope", "ops.array_ops.reshape", "ops.array_ops.reverse", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "framework.tensor_shape.dimension_value"], "distributions.util.tridiag": ["distributions.util.tridiag._pad", "ops.array_ops.matrix_diag", "framework.ops.name_scope", "distributions.util.tridiag._add", "framework.ops.convert_to_tensor"], "distributions.util.tridiag._pad": ["ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.zeros"], "distributions.util.tridiag._add": ["<builtin>.ValueError"], "ops.array_ops.matrix_diag": ["<builtin>.hasattr", "<builtin>.bool", "ops.gen_array_ops.matrix_diag_v3"], "distributions.util.reduce_weighted_logsumexp": ["ops.math_ops.log", "ops.array_ops.zeros_like", "ops.math_ops.exp", "ops.math_ops.reduce_sum", "framework.ops.name_scope", "ops.math_ops.reduce_max", "ops.math_ops.sign", "ops.array_ops.squeeze", "ops.math_ops.is_inf", "ops.array_ops.where_v2", "framework.ops.convert_to_tensor", "ops.array_ops.ones_like", "ops.math_ops.abs", "ops.math_ops.reduce_logsumexp"], "ops.math_ops.is_inf": [], "distributions.util.softplus_inverse": ["ops.math_ops.log", "numpy.log", "ops.math_ops.expm1", "ops.math_ops.greater", "ops.math_ops.logical_or", "framework.ops.name_scope", "ops.array_ops.where_v2", "framework.ops.convert_to_tensor", "ops.array_ops.ones_like", "numpy.exp", "numpy.finfo", "ops.math_ops.less"], "ops.math_ops.expm1": [], "distributions.util.dimension_size": ["numpy.abs", "ops.array_ops.shape", "framework.tensor_shape.dimension_value"], "distributions.util.process_quadrature_grid_and_probs": ["numpy.linalg.norm", "polynomial.hermite.hermgauss", "ops.linalg_ops.norm", "distributions.util.process_quadrature_grid_and_probs._static_event_size", "ops.check_ops.assert_equal", "<builtin>.ValueError", "framework.ops.name_scope", "ops.array_ops.identity", "framework.ops.control_dependencies", "distributions.util.dimension_size", "framework.ops.convert_to_tensor", "<builtin>.tuple"], "polynomial.hermite.hermgauss": [], "ops.linalg_ops.norm": ["numpy.isreal", "framework.ops.name_scope", "ops.math_ops.abs", "framework.ops.convert_to_tensor", "ops.gen_linalg_ops.svd", "ops.array_ops.transpose", "<builtin>.isinstance", "ops.array_ops.squeeze", "ops.array_ops.rank", "<builtin>.ValueError", "ops.math_ops.range", "util.deprecation.deprecated_argument_lookup", "<builtin>.tuple", "ops.map_fn.map_fn", "<builtin>.len", "ops.math_ops.conj", "ops.array_ops.concat", "ops.math_ops.pow", "ops.math_ops.sqrt", "ops.math_ops.reduce_sum", "ops.math_ops.reduce_max", "ops.array_ops.expand_dims", "ops.gen_array_ops.list_diff"], "distributions.util.process_quadrature_grid_and_probs._static_event_size": ["framework.tensor_shape.dimension_value"], "distributions.util.pad": ["ops.array_ops.pad", "ops.array_ops.rank", "<builtin>.ValueError", "framework.tensor_shape.dimension_at_index", "framework.ops.name_scope", "ops.array_ops.one_hot", "<builtin>.TypeError", "framework.tensor_shape.TensorShape", "ops.array_ops.where_v2", "ops.array_ops.stack", "framework.ops.convert_to_tensor", "framework.tensor_util.constant_value"], "framework.tensor_shape.dimension_at_index": ["framework.tensor_shape.Dimension.__init__", "<builtin>.isinstance"], "distributions.util.parent_frame_arguments": ["tf_inspect._inspect.getargvalues", "tf_inspect._inspect.stack"], "tf_inspect._inspect.stack": [], "tf_inspect._inspect.getargvalues": [], "distributions.util.AppendDocstring.__init__": ["<builtin>.sorted", "<builtin>.any", "<builtin>.ValueError"], "distributions.util.AppendDocstring.__call__": ["functools.wraps"], "distributions.util.AppendDocstring.__call__._fn": [], "linalg.adjoint_registrations": ["linalg.linear_operator_algebra.RegisterAdjoint"], "linalg.linear_operator_algebra.RegisterAdjoint": [], "linalg.adjoint_registrations._adjoint_linear_operator": ["linalg.linear_operator_adjoint.LinearOperatorAdjoint"], "linalg.linear_operator_adjoint.LinearOperatorAdjoint": [], "linalg.adjoint_registrations._adjoint_adjoint_linear_operator": [], "linalg.adjoint_registrations._adjoint_identity": [], "linalg.adjoint_registrations._adjoint_scaled_identity": ["linalg.linear_operator_identity.LinearOperatorScaledIdentity", "ops.math_ops.conj"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity": [], "linalg.adjoint_registrations._adjoint_diag": ["linalg.linear_operator_diag.LinearOperatorDiag", "ops.math_ops.conj"], "linalg.linear_operator_diag.LinearOperatorDiag": [], "linalg.adjoint_registrations._adjoint_block_diag": ["linalg.linear_operator_block_diag.LinearOperatorBlockDiag"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag": [], "linalg.adjoint_registrations._adjoint_kronecker": ["linalg.linear_operator_kronecker.LinearOperatorKronecker"], "linalg.linear_operator_kronecker.LinearOperatorKronecker": [], "linalg.adjoint_registrations._adjoint_circulant": ["ops.math_ops.conj", "linalg.linear_operator_circulant.LinearOperatorCirculant"], "linalg.linear_operator_circulant.LinearOperatorCirculant": [], "linalg.adjoint_registrations._adjoint_householder": [], "linalg.cholesky_registrations": ["linalg.linear_operator_algebra.RegisterCholesky"], "linalg.linear_operator_algebra.RegisterCholesky": [], "linalg.cholesky_registrations._cholesky_linear_operator": ["linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular", "ops.linalg_ops.cholesky"], "ops.linalg_ops.cholesky": [], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular": [], "linalg.cholesky_registrations._cholesky_diag": ["linalg.linear_operator_diag.LinearOperatorDiag", "ops.math_ops.sqrt"], "linalg.cholesky_registrations._cholesky_identity": ["linalg.linear_operator_identity.LinearOperatorIdentity"], "linalg.linear_operator_identity.LinearOperatorIdentity": [], "linalg.cholesky_registrations._cholesky_scaled_identity": ["linalg.linear_operator_identity.LinearOperatorScaledIdentity", "ops.math_ops.sqrt"], "linalg.cholesky_registrations._cholesky_block_diag": ["linalg.linear_operator_block_diag.LinearOperatorBlockDiag"], "linalg.cholesky_registrations._cholesky_kronecker": ["linalg.linear_operator_kronecker.LinearOperatorKronecker"], "linalg.inverse_registrations": ["linalg.linear_operator_algebra.RegisterInverse"], "linalg.linear_operator_algebra.RegisterInverse": [], "linalg.inverse_registrations._inverse_linear_operator": ["linalg.linear_operator_inversion.LinearOperatorInversion"], "linalg.linear_operator_inversion.LinearOperatorInversion": [], "linalg.inverse_registrations._inverse_inverse_linear_operator": [], "linalg.inverse_registrations._inverse_diag": ["linalg.linear_operator_diag.LinearOperatorDiag"], "linalg.inverse_registrations._inverse_identity": [], "linalg.inverse_registrations._inverse_scaled_identity": ["linalg.linear_operator_identity.LinearOperatorScaledIdentity"], "linalg.inverse_registrations._inverse_block_diag": ["linalg.linear_operator_block_diag.LinearOperatorBlockDiag"], "linalg.inverse_registrations._inverse_block_lower_triangular": ["linalg.linear_operator_full_matrix.LinearOperatorFullMatrix", "linalg.linear_operator_identity.LinearOperatorScaledIdentity", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular", "<builtin>.isinstance", "<builtin>.len", "<builtin>.range", "linalg.linear_operator_addition.add_operators", "ops.math_ops.cast", "<builtin>.any"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular": [], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix": [], "linalg.linear_operator_addition.add_operators": ["<builtin>.len", "linalg.linear_operator_addition._pop_a_match_at_tier", "<builtin>.reversed", "linalg.linear_operator_addition._static_check_for_same_dimensions", "linalg.linear_operator_addition._static_check_for_broadcastable_batch_shape", "<builtin>.list", "ops.check_ops.assert_proper_iterable", "<builtin>.TypeError", "<builtin>.ValueError", "framework.ops.name_scope", "<builtin>.isinstance", "<builtin>.all"], "linalg.inverse_registrations._inverse_kronecker": ["linalg.linear_operator_kronecker.LinearOperatorKronecker"], "linalg.inverse_registrations._inverse_circulant": ["linalg.linear_operator_circulant.LinearOperatorCirculant"], "linalg.inverse_registrations._inverse_householder": [], "linalg.linalg": [], "linalg.linear_operator_addition": [], "ops.check_ops.assert_proper_iterable": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "linalg.linear_operator_addition._static_check_for_same_dimensions": ["<builtin>.set", "<builtin>.len", "<builtin>.ValueError", "framework.tensor_shape.dimension_value"], "linalg.linear_operator_addition._static_check_for_broadcastable_batch_shape": ["<builtin>.len", "ops.array_ops.broadcast_static_shape"], "linalg.linear_operator_addition._pop_a_match_at_tier": ["<builtin>.range", "<builtin>.len"], "linalg.linear_operator_addition._infer_hints_allowing_override": ["linalg.linear_operator_addition._Hints.__init__"], "linalg.linear_operator_addition._Hints.__init__": [], "linalg.linear_operator_addition._Adder.name": [], "linalg.linear_operator_addition._Adder": ["abc.abstractmethod"], "linalg.linear_operator_addition._Adder.can_add": [], "linalg.linear_operator_addition._Adder._add": [], "linalg.linear_operator_addition._Adder.add": ["linalg.linear_operator_addition._AddAndReturnScaledIdentity._add", "linalg.linear_operator_addition._AddAndReturnMatrix._add", "linalg.linear_operator_addition._Adder._add", "framework.ops.name_scope", "linalg.linear_operator_addition._infer_hints_allowing_override", "linalg.linear_operator_addition._AddAndReturnDiag._add", "linalg.linear_operator_addition._AddAndReturnTriL._add"], "linalg.linear_operator_addition._AddAndReturnScaledIdentity._add": ["linalg.linear_operator_addition._type", "linalg.linear_operator_identity.LinearOperatorScaledIdentity", "ops.array_ops.ones"], "linalg.linear_operator_addition._AddAndReturnMatrix._add": ["linalg.linear_operator_full_matrix.LinearOperatorFullMatrix", "linalg.linear_operator_addition._type"], "linalg.linear_operator_addition._AddAndReturnDiag._add": ["linalg.linear_operator_diag.LinearOperatorDiag"], "linalg.linear_operator_addition._AddAndReturnTriL._add": ["linalg.linear_operator_addition._type", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular"], "linalg.linear_operator_addition._AddAndReturnScaledIdentity.can_add": ["linalg.linear_operator_addition._type"], "linalg.linear_operator_addition._type": ["<builtin>.isinstance", "<builtin>.TypeError"], "linalg.linear_operator_addition._AddAndReturnDiag.can_add": ["linalg.linear_operator_addition._type"], "linalg.linear_operator_addition._AddAndReturnTriL.can_add": ["linalg.linear_operator_addition._type"], "linalg.linear_operator_addition._AddAndReturnMatrix.can_add": ["<builtin>.isinstance"], "linalg.linear_operator_adjoint": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint.__init__": ["framework.ops.name_scope", "<builtin>.super", "<builtin>.dict", "linear_operator.LinearOperator._set_graph_parents", "linalg.linear_operator_util.use_operator_or_provided_hint_unless_contradicting"], "linalg.linear_operator_util.use_operator_or_provided_hint_unless_contradicting": ["<builtin>.getattr", "<builtin>.ValueError"], "linear_operator.LinearOperator._set_graph_parents": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint.operator": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._assert_non_singular": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._assert_positive_definite": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._assert_self_adjoint": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._shape": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._shape_tensor": ["ops.array_ops.concat"], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._matmul": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._matvec": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._determinant": ["ops.math_ops.conj"], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._log_abs_determinant": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._trace": ["ops.math_ops.conj"], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._solve": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._solvevec": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._to_dense": ["linalg.linalg_impl.adjoint"], "linalg.linalg_impl.adjoint": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._add_to_tensor": ["linear_operator.LinearOperator.to_dense"], "linear_operator.LinearOperator.to_dense": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._eigvals": ["ops.math_ops.conj"], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._cond": [], "linalg.linear_operator_adjoint.LinearOperatorAdjoint._composite_tensor_fields": [], "linalg.linear_operator_algebra": [], "linalg.linear_operator_algebra._registered_function": ["<builtin>.tuple", "util.tf_inspect.getmro", "<builtin>.list", "<builtin>.min", "<builtin>.enumerate", "itertools.product"], "linalg.linear_operator_algebra._registered_function.hierarchy_distance": ["<builtin>.tuple", "<builtin>.sum"], "linalg.linear_operator_algebra._registered_adjoint": ["linalg.linear_operator_algebra._registered_function"], "linalg.linear_operator_algebra._registered_cholesky": ["linalg.linear_operator_algebra._registered_function"], "linalg.linear_operator_algebra._registered_matmul": ["linalg.linear_operator_algebra._registered_function"], "linalg.linear_operator_algebra._registered_solve": ["linalg.linear_operator_algebra._registered_function"], "linalg.linear_operator_algebra._registered_inverse": ["linalg.linear_operator_algebra._registered_function"], "linalg.linear_operator_algebra.adjoint": ["<builtin>.type", "framework.ops.name_scope", "linalg.linear_operator_algebra._registered_adjoint", "<builtin>.ValueError"], "linalg.linear_operator_algebra.cholesky": ["<builtin>.type", "framework.ops.name_scope", "linalg.linear_operator_algebra._registered_cholesky", "<builtin>.ValueError"], "linalg.linear_operator_algebra.matmul": ["linalg.linear_operator_algebra._registered_matmul", "<builtin>.type", "framework.ops.name_scope", "<builtin>.ValueError"], "linalg.linear_operator_algebra.solve": ["<builtin>.type", "framework.ops.name_scope", "<builtin>.ValueError", "linalg.linear_operator_algebra._registered_solve"], "linalg.linear_operator_algebra.inverse": ["<builtin>.type", "framework.ops.name_scope", "<builtin>.ValueError", "linalg.linear_operator_algebra._registered_inverse"], "linalg.linear_operator_algebra.RegisterAdjoint.__init__": [], "linalg.linear_operator_algebra.RegisterAdjoint.__call__": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.ValueError"], "linalg.linear_operator_algebra.RegisterCholesky.__init__": [], "linalg.linear_operator_algebra.RegisterCholesky.__call__": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.ValueError"], "linalg.linear_operator_algebra.RegisterMatmul.__init__": [], "linalg.linear_operator_algebra.RegisterMatmul.__call__": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.ValueError"], "linalg.linear_operator_algebra.RegisterSolve.__init__": [], "linalg.linear_operator_algebra.RegisterSolve.__call__": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.ValueError"], "linalg.linear_operator_algebra.RegisterInverse.__init__": [], "linalg.linear_operator_algebra.RegisterInverse.__call__": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.ValueError"], "linalg.linear_operator_block_diag": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.__init__": ["<builtin>.dict", "linear_operator.LinearOperator._set_graph_parents", "<builtin>.TypeError", "<builtin>.all", "framework.ops.name_scope", "<builtin>.str", "<builtin>.super", "<builtin>.ValueError", "<builtin>.list", "ops.check_ops.assert_proper_iterable"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.operators": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimensions": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimensions": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimension_tensors": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimension_tensors": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._shape": ["<builtin>.sum", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimensions", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimensions", "framework.tensor_shape.TensorShape", "framework.common_shapes.broadcast_shape"], "framework.common_shapes.broadcast_shape": ["framework.tensor_shape.unknown_shape", "framework.common_shapes._broadcast_shape_helper", "<builtin>.ValueError", "framework.tensor_shape.TensorShape"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._shape_tensor": ["<builtin>.sum", "ops.array_ops.stack", "ops.array_ops.shape", "LinearOperator.shape.is_fully_defined", "ops.array_ops.concat", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimension_tensors", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.zeros", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimension_tensors", "LinearOperator.shape.as_list"], "LinearOperator.shape.is_fully_defined": [], "LinearOperator.shape.as_list": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.matmul": ["linalg.linear_operator_algebra.matmul", "linear_operator.LinearOperator._check_input_dtype", "<builtin>.zip", "<builtin>.len", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimensions", "<builtin>.enumerate", "linear_operator.LinearOperator.adjoint", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimensions", "linalg.linear_operator_util.arg_is_blockwise", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._matmul", "framework.ops.convert_to_tensor_v2_with_dispatch", "linear_operator.LinearOperator._name_scope", "<builtin>.ValueError", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.matmul._check_operators_agree", "<builtin>.isinstance"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.matmul._check_operators_agree": ["<builtin>.ValueError"], "linear_operator.LinearOperator.adjoint": [], "linear_operator.LinearOperator._name_scope": [], "linalg.linear_operator_util.arg_is_blockwise": ["<builtin>.len", "<builtin>.any", "util.nest.is_nested", "<builtin>.ValueError", "<builtin>.all", "<builtin>.sum", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance", "<builtin>.zip"], "linear_operator.LinearOperator._check_input_dtype": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._matmul": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimensions", "<builtin>.enumerate", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimensions", "linalg.linear_operator_util.arg_is_blockwise", "ops.array_ops.concat", "linalg.linear_operator_util.split_arg_into_blocks"], "linalg.linear_operator_util.split_arg_into_blocks": ["<builtin>.any", "ops.array_ops.split"], "linalg.linear_operator_util.broadcast_matrix_batch_dims": ["<builtin>.len", "ops.array_ops.broadcast_dynamic_shape", "linalg.linear_operator_util.assert_is_batch_matrix", "ops.array_ops.shape", "<builtin>.list", "ops.check_ops.assert_proper_iterable", "ops.array_ops.broadcast_to", "<builtin>.enumerate", "ops.array_ops.concat", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.broadcast_static_shape", "framework.ops.name_scope"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.matvec": ["linear_operator.LinearOperator._check_input_dtype", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimensions", "<builtin>.enumerate", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimensions", "linalg.linear_operator_util.arg_is_blockwise", "ops.array_ops.squeeze", "framework.ops.convert_to_tensor_v2_with_dispatch", "linear_operator.LinearOperator._name_scope", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.matmul", "<builtin>.isinstance"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._determinant": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._log_abs_determinant": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.solve": ["linear_operator.LinearOperator._check_input_dtype", "<builtin>.zip", "<builtin>.len", "linalg.linear_operator_util.broadcast_matrix_batch_dims", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimensions", "<builtin>.enumerate", "linear_operator.LinearOperator.adjoint", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.solve._check_operators_agree", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimensions", "linalg.linear_operator_util.arg_is_blockwise", "linalg.linear_operator_util.split_arg_into_blocks", "ops.array_ops.concat", "<builtin>.NotImplementedError", "linalg.linear_operator_algebra.solve", "framework.ops.convert_to_tensor_v2_with_dispatch", "linear_operator.LinearOperator._name_scope", "<builtin>.ValueError", "<builtin>.isinstance"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.solve._check_operators_agree": ["<builtin>.ValueError"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.solvevec": ["linear_operator.LinearOperator._check_input_dtype", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_range_dimensions", "<builtin>.enumerate", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._block_domain_dimensions", "linalg.linear_operator_util.arg_is_blockwise", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag.solve", "ops.array_ops.squeeze", "framework.ops.convert_to_tensor_v2_with_dispatch", "linear_operator.LinearOperator._name_scope", "ops.array_ops.expand_dims", "<builtin>.isinstance"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._diag_part": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "ops.array_ops.concat", "ops.array_ops.squeeze", "<builtin>.NotImplementedError", "<builtin>.all"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._trace": ["<builtin>.NotImplementedError", "<builtin>.all"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._to_dense": ["linear_operator.LinearOperator.domain_dimension_tensor", "linalg.linear_operator_util.broadcast_matrix_batch_dims", "ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.zeros"], "linear_operator.LinearOperator.domain_dimension_tensor": [], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._assert_non_singular": ["ops.control_flow_ops.group"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._assert_self_adjoint": ["ops.control_flow_ops.group"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._assert_positive_definite": ["ops.control_flow_ops.group"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._eigvals": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "ops.array_ops.concat", "ops.array_ops.squeeze", "<builtin>.NotImplementedError", "<builtin>.all"], "linalg.linear_operator_block_diag.LinearOperatorBlockDiag._composite_tensor_fields": [], "linalg.linear_operator_block_lower_triangular": [], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular.__init__": ["linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_dtype", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_square", "<builtin>.super", "<builtin>.ValueError", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_num_operators", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_non_singular", "<builtin>.list", "ops.check_ops.assert_proper_iterable", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_operator_dimensions", "framework.ops.name_scope", "<builtin>.dict"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_dtype": ["<builtin>.TypeError", "<builtin>.enumerate", "<builtin>.str"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_non_singular": ["<builtin>.any", "<builtin>.ValueError", "<builtin>.all"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_num_operators": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.enumerate"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_operator_dimensions": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.range"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._validate_square": ["<builtin>.any", "<builtin>.ValueError"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular.operators": [], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimensions": [], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimensions": [], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimension_tensors": [], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimension_tensors": [], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._shape": ["framework.common_shapes.broadcast_shape", "framework.tensor_shape.TensorShape", "<builtin>.sum", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimensions", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimensions"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._shape_tensor": ["ops.array_ops.broadcast_dynamic_shape", "LinearOperator.shape.as_list", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimension_tensors", "<builtin>.sum", "ops.array_ops.concat", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimension_tensors", "ops.array_ops.stack", "LinearOperator.shape.is_fully_defined", "framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular.matmul": ["linear_operator.LinearOperator.adjoint", "linalg.linear_operator_algebra.matmul", "<builtin>.ValueError", "linear_operator.LinearOperator._name_scope", "<builtin>.enumerate", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._matmul", "linear_operator.LinearOperator._check_input_dtype", "<builtin>.isinstance", "linalg.linear_operator_util.arg_is_blockwise", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimensions", "framework.ops.convert_to_tensor_v2_with_dispatch", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimensions"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._matmul": ["linalg.linear_operator_util.split_arg_into_blocks", "<builtin>.enumerate", "ops.array_ops.concat", "linalg.linear_operator_util.broadcast_matrix_batch_dims", "linalg.linear_operator_util.arg_is_blockwise", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimensions", "<builtin>.len", "<builtin>.range", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimensions"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular.matvec": ["linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular.matmul", "ops.array_ops.squeeze", "<builtin>.enumerate", "linear_operator.LinearOperator._name_scope", "linear_operator.LinearOperator._check_input_dtype", "<builtin>.isinstance", "linalg.linear_operator_util.arg_is_blockwise", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimensions", "framework.ops.convert_to_tensor_v2_with_dispatch", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimensions"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._determinant": ["linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._log_abs_determinant", "ops.math_ops.exp", "<builtin>.all"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._log_abs_determinant": [], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular.solve": ["linalg.linear_operator_algebra.solve", "<builtin>.enumerate", "<builtin>.isinstance", "linalg.linear_operator_util.split_arg_into_blocks", "<builtin>.reversed", "linear_operator.LinearOperator._name_scope", "linear_operator.LinearOperator._check_input_dtype", "linalg.linear_operator_util.arg_is_blockwise", "<builtin>.NotImplementedError", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimensions", "<builtin>.len", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.zip", "ops.array_ops.concat", "linalg.linalg_impl.adjoint", "linalg.linear_operator_util.broadcast_matrix_batch_dims", "linear_operator.LinearOperator.adjoint", "<builtin>.ValueError", "<builtin>.range", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimensions"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular.solvevec": ["ops.array_ops.squeeze", "ops.array_ops.expand_dims", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular.solve", "<builtin>.enumerate", "linear_operator.LinearOperator._name_scope", "linear_operator.LinearOperator._check_input_dtype", "<builtin>.isinstance", "linalg.linear_operator_util.arg_is_blockwise", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_domain_dimensions", "framework.ops.convert_to_tensor_v2_with_dispatch", "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._block_range_dimensions"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._diag_part": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "ops.array_ops.squeeze", "ops.array_ops.concat"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._trace": [], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._to_dense": ["linear_operator.LinearOperator.domain_dimension_tensor", "<builtin>.range", "ops.array_ops.concat", "linalg.linear_operator_util.broadcast_matrix_batch_dims", "ops.array_ops.zeros", "<builtin>.len", "ops.array_ops.shape"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._assert_non_singular": ["ops.control_flow_ops.group"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._eigvals": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "ops.array_ops.squeeze", "ops.array_ops.concat"], "linalg.linear_operator_block_lower_triangular.LinearOperatorBlockLowerTriangular._composite_tensor_fields": [], "linalg.linear_operator_circulant": [], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.__init__": ["framework.dtypes.as_dtype", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._check_spectrum_and_return_tensor", "<builtin>.ValueError", "<builtin>.super", "linear_operator.LinearOperator._set_graph_parents", "framework.ops.name_scope"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._check_spectrum_and_return_tensor": ["linalg.linear_operator_util.convert_nonref_to_tensor", "<builtin>.ValueError"], "linalg.linear_operator_util.convert_nonref_to_tensor": ["linalg.linear_operator_util.base_dtype", "<builtin>.TypeError", "linalg.linear_operator_util.dtype_name", "linalg.linear_operator_util.is_ref", "framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.block_depth": [], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.block_shape_tensor": ["linalg.linear_operator_circulant._BaseLinearOperatorCirculant._block_shape_tensor"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._block_shape_tensor": ["linalg.linear_operator_util.shape_tensor", "ops.array_ops.shape"], "linalg.linear_operator_util.shape_tensor": ["framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.block_shape": [], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.spectrum": [], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._vectorize_then_blockify": ["distributions.util.rotate_transpose", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.concat", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.block_shape_tensor"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._unblockify_then_matricize": ["numpy.prod", "ops.math_ops.reduce_prod", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.concat", "distributions.util.rotate_transpose"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._fft": ["linalg.linear_operator_circulant._to_complex"], "linalg.linear_operator_circulant._to_complex": ["ops.math_ops.cast"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._ifft": ["linalg.linear_operator_circulant._to_complex"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.convolution_kernel": ["linear_operator.LinearOperator._name_scope", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._ifft", "linalg.linear_operator_circulant._to_complex", "ops.math_ops.cast"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._shape": ["framework.tensor_shape.TensorShape", "numpy.prod"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._shape_tensor": ["ops.array_ops.concat", "ops.math_ops.reduce_prod", "ops.array_ops.shape"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.assert_hermitian_spectrum": ["linear_operator.LinearOperator._name_scope", "linear_operator.LinearOperator.domain_dimension_tensor", "ops.check_ops.assert_less", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant.convolution_kernel", "ops.math_ops.imag", "ops.math_ops.abs", "numpy.finfo"], "ops.math_ops.imag": ["ops.array_ops.zeros_like", "ops.gen_math_ops.imag", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._assert_non_singular": ["linalg.linear_operator_util.assert_no_entries_with_modulus_zero"], "linalg.linear_operator_util.assert_no_entries_with_modulus_zero": ["ops.math_ops.abs", "ops.check_ops.assert_less", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.ops.name_scope"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._assert_positive_definite": ["ops.math_ops.real", "ops.check_ops.assert_positive"], "ops.math_ops.real": ["framework.ops.name_scope", "ops.gen_math_ops.real", "framework.ops.convert_to_tensor"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._assert_self_adjoint": ["linalg.linear_operator_util.assert_zero_imag_part"], "linalg.linear_operator_util.assert_zero_imag_part": ["ops.math_ops.imag", "ops.control_flow_ops.no_op", "ops.check_ops.assert_equal", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.ops.name_scope"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._broadcast_batch_dims": ["linalg.linear_operator_circulant._BaseLinearOperatorCirculant._shape_tensor", "linalg.linear_operator_util.broadcast_matrix_batch_dims", "linear_operator.LinearOperator._batch_shape_tensor", "ops.array_ops.shape", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._block_shape_tensor", "ops.array_ops.concat", "ops.array_ops.reshape", "framework.ops.convert_to_tensor_v2_with_dispatch"], "linear_operator.LinearOperator._batch_shape_tensor": [], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._matmul": ["linalg.linear_operator_circulant._to_complex", "ops.math_ops.cast", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._unblockify_then_matricize", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._fft", "ops.math_ops.conj", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._vectorize_then_blockify", "linalg.linalg_impl.adjoint", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._broadcast_batch_dims", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._ifft"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._determinant": ["<builtin>.range", "ops.math_ops.reduce_prod", "ops.math_ops.cast"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._log_abs_determinant": ["ops.math_ops.cast", "ops.math_ops.log", "ops.math_ops.reduce_sum", "<builtin>.range", "ops.math_ops.abs"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._solve": ["linalg.linear_operator_circulant._to_complex", "ops.math_ops.cast", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._unblockify_then_matricize", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._fft", "ops.math_ops.conj", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._vectorize_then_blockify", "linalg.linalg_impl.adjoint", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._broadcast_batch_dims", "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._ifft"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._diag_part": ["LinearOperator.shape.is_fully_defined", "linear_operator.LinearOperator.domain_dimension_tensor", "ops.math_ops.cast", "linear_operator.LinearOperator.trace", "linear_operator.LinearOperator.shape_tensor", "ops.array_ops.ones"], "linear_operator.LinearOperator.shape_tensor": [], "linear_operator.LinearOperator.trace": [], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._trace": ["ops.array_ops.zeros_like", "ops.array_ops.rank", "ops.math_ops.cast", "ops.math_ops.reduce_sum", "ops.math_ops.range", "ops.math_ops.imag", "ops.math_ops.complex", "ops.math_ops.real", "numpy.arange"], "ops.math_ops.complex": ["<builtin>.TypeError", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.gen_math_ops._complex"], "linalg.linear_operator_circulant._BaseLinearOperatorCirculant._composite_tensor_fields": [], "linalg.linear_operator_circulant.LinearOperatorCirculant.__init__": ["<builtin>.super", "<builtin>.dict"], "linalg.linear_operator_circulant.LinearOperatorCirculant._eigvals": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator_circulant.LinearOperatorCirculant2D.__init__": ["<builtin>.super", "<builtin>.dict"], "linalg.linear_operator_circulant.LinearOperatorCirculant3D.__init__": ["<builtin>.super", "<builtin>.dict"], "linalg.linear_operator": ["util.dispatch.dispatch_for_types"], "linalg.linear_operator.LinearOperator": ["util.deprecation.deprecated_args", "<builtin>.property", "abc.abstractmethod", "contextlib.contextmanager", "util.deprecation.deprecated"], "linalg.linear_operator.LinearOperator.__init__": ["<builtin>.ValueError", "linalg.linear_operator.LinearOperator._set_graph_parents", "framework.dtypes.as_dtype", "module.Module._no_dependency", "<builtin>.type"], "linalg.linear_operator.LinearOperator._set_graph_parents": ["framework.tensor_util.is_tf_type", "<builtin>.ValueError", "linalg.linear_operator_util.is_ref", "<builtin>.enumerate"], "module.Module._no_dependency": [], "linalg.linear_operator.LinearOperator._name_scope": ["framework.ops.name_scope"], "linalg.linear_operator.LinearOperator.parameters": ["<builtin>.dict"], "linalg.linear_operator.LinearOperator.dtype": [], "linalg.linear_operator.LinearOperator.name": [], "linalg.linear_operator.LinearOperator.graph_parents": [], "linalg.linear_operator.LinearOperator.is_non_singular": [], "linalg.linear_operator.LinearOperator.is_self_adjoint": [], "linalg.linear_operator.LinearOperator.is_positive_definite": [], "linalg.linear_operator.LinearOperator.is_square": ["<builtin>.ValueError"], "linalg.linear_operator.LinearOperator._shape": ["<builtin>.NotImplementedError"], "linalg.linear_operator.LinearOperator.shape": ["linalg.linear_operator.LinearOperator._shape"], "linalg.linear_operator.LinearOperator._shape_tensor": ["<builtin>.NotImplementedError"], "linalg.linear_operator.LinearOperator.shape_tensor": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._shape_tensor", "linalg.linear_operator_util.shape_tensor"], "linalg.linear_operator.LinearOperator.batch_shape": [], "linalg.linear_operator.LinearOperator.batch_shape_tensor": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._batch_shape_tensor"], "linalg.linear_operator.LinearOperator._batch_shape_tensor": ["linalg.linear_operator.LinearOperator.shape_tensor", "linalg.linear_operator_util.shape_tensor"], "linalg.linear_operator.LinearOperator.tensor_rank": ["linalg.linear_operator.LinearOperator._name_scope"], "linalg.linear_operator.LinearOperator.tensor_rank_tensor": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._tensor_rank_tensor"], "linalg.linear_operator.LinearOperator._tensor_rank_tensor": ["linalg.linear_operator.LinearOperator.shape_tensor", "ops.array_ops.size", "framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator.LinearOperator.domain_dimension": ["framework.tensor_shape.Dimension"], "linalg.linear_operator.LinearOperator.domain_dimension_tensor": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._domain_dimension_tensor"], "linalg.linear_operator.LinearOperator._domain_dimension_tensor": ["linalg.linear_operator.LinearOperator.shape_tensor", "framework.tensor_shape.dimension_value", "framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator.LinearOperator.range_dimension": ["framework.tensor_shape.Dimension"], "linalg.linear_operator.LinearOperator.range_dimension_tensor": ["linalg.linear_operator.LinearOperator._range_dimension_tensor", "linalg.linear_operator.LinearOperator._name_scope"], "linalg.linear_operator.LinearOperator._range_dimension_tensor": ["linalg.linear_operator.LinearOperator.shape_tensor", "framework.tensor_shape.dimension_value", "framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator.LinearOperator._assert_non_singular": ["platform.tf_logging.warn", "linalg.linear_operator.LinearOperator.assert_positive_definite", "ops.check_ops.assert_less", "ops.math_ops.reduce_min", "linalg.linear_operator.LinearOperator._max_condition_number_to_be_non_singular", "ops.math_ops.reduce_max", "linalg.linear_operator.LinearOperator.to_dense", "linalg.linear_operator.LinearOperator._can_use_cholesky", "ops.linalg_ops.svd"], "linalg.linear_operator.LinearOperator._can_use_cholesky": [], "linalg.linear_operator.LinearOperator.assert_positive_definite": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._assert_positive_definite"], "linalg.linear_operator.LinearOperator.to_dense": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._to_dense"], "ops.linalg_ops.svd": ["ops.math_ops.real", "ops.gen_linalg_ops.svd"], "linalg.linear_operator.LinearOperator._max_condition_number_to_be_non_singular": ["ops.math_ops.cast", "framework.ops.name_scope", "ops.math_ops.reduce_max", "numpy.finfo", "linalg.linear_operator.LinearOperator.range_dimension_tensor", "linalg.linear_operator.LinearOperator.domain_dimension_tensor"], "linalg.linear_operator.LinearOperator.assert_non_singular": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._assert_non_singular"], "linalg.linear_operator.LinearOperator._assert_positive_definite": ["ops.check_ops.assert_positive", "platform.tf_logging.warn", "ops.array_ops.matrix_diag_part", "ops.linalg_ops.cholesky", "linalg.linear_operator.LinearOperator.to_dense", "<builtin>.NotImplementedError"], "linalg.linear_operator.LinearOperator._assert_self_adjoint": ["linalg.linear_operator.LinearOperator.to_dense", "platform.tf_logging.warn", "linalg.linalg_impl.adjoint", "ops.check_ops.assert_equal"], "linalg.linear_operator.LinearOperator.assert_self_adjoint": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._assert_self_adjoint"], "linalg.linear_operator.LinearOperator._check_input_dtype": ["<builtin>.TypeError"], "linalg.linear_operator.LinearOperator._matmul": ["<builtin>.NotImplementedError"], "linalg.linear_operator.LinearOperator.matmul": ["linalg.linear_operator.LinearOperator.adjoint", "<builtin>.ValueError", "framework.tensor_shape.dimension_at_index", "linalg.linear_operator.LinearOperator._matmul", "linalg.linear_operator.LinearOperator._check_input_dtype", "linalg.linear_operator.LinearOperator._name_scope", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance", "linalg.linear_operator_algebra.matmul"], "linalg.linear_operator.LinearOperator.adjoint": ["linalg.linear_operator_algebra.adjoint", "linalg.linear_operator.LinearOperator._name_scope"], "linalg.linear_operator.LinearOperator.__matmul__": ["linalg.linear_operator.LinearOperator.matmul"], "linalg.linear_operator.LinearOperator._matvec": ["ops.array_ops.squeeze", "ops.array_ops.expand_dims", "linalg.linear_operator.LinearOperator.matmul"], "linalg.linear_operator.LinearOperator.matvec": ["framework.ops.convert_to_tensor_v2_with_dispatch", "framework.tensor_shape.dimension_at_index", "linalg.linear_operator.LinearOperator._check_input_dtype", "linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._matvec"], "linalg.linear_operator.LinearOperator._determinant": ["platform.tf_logging.warn", "linalg.linear_operator.LinearOperator.log_abs_determinant", "ops.math_ops.exp", "linalg.linear_operator.LinearOperator.to_dense", "linalg.linear_operator.LinearOperator._can_use_cholesky", "ops.linalg_ops.matrix_determinant"], "linalg.linear_operator.LinearOperator.log_abs_determinant": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._log_abs_determinant", "<builtin>.NotImplementedError"], "ops.linalg_ops.matrix_determinant": [], "linalg.linear_operator.LinearOperator.determinant": ["linalg.linear_operator.LinearOperator._name_scope", "<builtin>.NotImplementedError", "linalg.linear_operator.LinearOperator._determinant"], "linalg.linear_operator.LinearOperator._log_abs_determinant": ["ops.math_ops.reduce_sum", "platform.tf_logging.warn", "ops.array_ops.matrix_diag_part", "linalg.linalg_impl.slogdet", "ops.linalg_ops.cholesky", "ops.math_ops.log", "linalg.linear_operator.LinearOperator.to_dense", "linalg.linear_operator.LinearOperator._can_use_cholesky"], "linalg.linalg_impl.slogdet": [], "linalg.linear_operator.LinearOperator._dense_solve": ["linalg.linalg_impl.adjoint", "ops.linalg_ops.cholesky", "linalg.linear_operator_util.matrix_solve_with_broadcast", "linalg.linear_operator.LinearOperator.to_dense", "ops.linalg_ops.cholesky_solve", "linalg.linear_operator.LinearOperator._can_use_cholesky", "<builtin>.NotImplementedError"], "ops.linalg_ops.cholesky_solve": ["ops.gen_linalg_ops.matrix_triangular_solve", "framework.ops.name_scope"], "linalg.linear_operator_util.matrix_solve_with_broadcast": ["linalg.linear_operator_util.broadcast_matrix_batch_dims", "ops.linalg_ops.matrix_solve", "linalg.linear_operator_util._reshape_for_efficiency", "framework.ops.convert_to_tensor_v2_with_dispatch", "framework.ops.name_scope"], "linalg.linear_operator.LinearOperator._solve": ["platform.tf_logging.warn", "linalg.linear_operator.LinearOperator._dense_solve"], "linalg.linear_operator.LinearOperator.solve": ["linalg.linear_operator.LinearOperator.adjoint", "<builtin>.ValueError", "framework.tensor_shape.dimension_at_index", "linalg.linear_operator.LinearOperator._solve", "linalg.linear_operator.LinearOperator._check_input_dtype", "linalg.linear_operator.LinearOperator._name_scope", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.isinstance", "<builtin>.NotImplementedError", "linalg.linear_operator_algebra.solve"], "linalg.linear_operator.LinearOperator._solvevec": ["ops.array_ops.squeeze", "ops.array_ops.expand_dims", "linalg.linear_operator.LinearOperator.solve"], "linalg.linear_operator.LinearOperator.solvevec": ["framework.tensor_shape.dimension_at_index", "linalg.linear_operator.LinearOperator._check_input_dtype", "linalg.linear_operator.LinearOperator._name_scope", "framework.ops.convert_to_tensor_v2_with_dispatch", "linalg.linear_operator.LinearOperator._solvevec"], "linalg.linear_operator.LinearOperator.inverse": ["linalg.linear_operator.LinearOperator._name_scope", "<builtin>.ValueError", "linalg.linear_operator_algebra.inverse"], "linalg.linear_operator.LinearOperator.cholesky": ["linalg.linear_operator.LinearOperator._name_scope", "<builtin>.ValueError", "linalg.linear_operator.LinearOperator._can_use_cholesky", "linalg.linear_operator_algebra.cholesky"], "linalg.linear_operator.LinearOperator._to_dense": ["linalg.linear_operator.LinearOperator.batch_shape_tensor", "linalg.linear_operator.LinearOperator.matmul", "framework.tensor_shape.dimension_value", "ops.linalg_ops.eye", "linalg.linear_operator.LinearOperator.domain_dimension_tensor"], "linalg.linear_operator.LinearOperator._diag_part": ["linalg.linear_operator.LinearOperator.to_dense", "ops.array_ops.matrix_diag_part"], "linalg.linear_operator.LinearOperator.diag_part": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._diag_part"], "linalg.linear_operator.LinearOperator._trace": ["ops.math_ops.reduce_sum", "linalg.linear_operator.LinearOperator.diag_part"], "linalg.linear_operator.LinearOperator.trace": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._trace"], "linalg.linear_operator.LinearOperator._add_to_tensor": ["linalg.linear_operator.LinearOperator.to_dense"], "linalg.linear_operator.LinearOperator.add_to_tensor": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._add_to_tensor", "linalg.linear_operator.LinearOperator._check_input_dtype", "framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator.LinearOperator._eigvals": ["linalg.linear_operator.LinearOperator.to_dense", "ops.linalg_ops.self_adjoint_eigvals"], "ops.linalg_ops.self_adjoint_eigvals": ["ops.gen_linalg_ops.self_adjoint_eig_v2"], "linalg.linear_operator.LinearOperator.eigvals": ["linalg.linear_operator.LinearOperator._name_scope", "linalg.linear_operator.LinearOperator._eigvals", "<builtin>.NotImplementedError"], "linalg.linear_operator.LinearOperator._cond": ["ops.math_ops.abs", "ops.math_ops.reduce_min", "ops.math_ops.reduce_max", "linalg.linear_operator.LinearOperator.to_dense", "linalg.linear_operator.LinearOperator._eigvals", "ops.linalg_ops.svd"], "linalg.linear_operator.LinearOperator.cond": ["linalg.linear_operator.LinearOperator._cond", "linalg.linear_operator.LinearOperator._name_scope"], "linalg.linear_operator_util.is_ref": ["<builtin>.hasattr", "<builtin>.isinstance"], "linalg.linear_operator.LinearOperator._composite_tensor_fields": [], "linalg.linear_operator.LinearOperator._composite_tensor_prefer_static_fields": [], "linalg.linear_operator.LinearOperator._type_spec": [], "linalg.linear_operator._LinearOperatorSpec.__init__": [], "linalg.linear_operator._LinearOperatorSpec.from_operator": ["linalg.linear_operator._extract_type_spec_recursively", "<builtin>.any", "linalg.linear_operator._extract_attrs", "linalg.linear_operator._LinearOperatorSpec.__init__", "<builtin>.list", "util.nest.flatten", "<builtin>.set", "<builtin>.all", "<builtin>.isinstance", "<builtin>.NotImplementedError"], "linalg.linear_operator._extract_attrs": ["<builtin>.ValueError", "<builtin>.any", "framework.tensor_util.is_tensor", "<builtin>.object", "<builtin>.getattr", "<builtin>.isinstance", "framework.tensor_util.constant_value"], "linalg.linear_operator._extract_type_spec_recursively": ["linalg.linear_operator._extract_type_spec_recursively", "framework.tensor_util.is_tensor", "<builtin>.list", "ops.resource_variable_ops.VariableSpec", "<builtin>.type", "<builtin>.isinstance", "framework.tensor_spec.TensorSpec"], "linalg.linear_operator._LinearOperatorSpec._to_components": ["linalg.linear_operator._extract_attrs", "<builtin>.list"], "linalg.linear_operator._LinearOperatorSpec._from_components": ["type_spec.TypeSpec.value_type", "<builtin>.dict"], "type_spec.TypeSpec.value_type": [], "linalg.linear_operator._LinearOperatorSpec._component_specs": [], "linalg.linear_operator._LinearOperatorSpec._serialize": [], "linalg.linear_operator.make_composite_tensor": ["framework.type_spec.register", "<builtin>.property", "<builtin>.type"], "framework.type_spec.register": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "ops.resource_variable_ops.VariableSpec": ["<builtin>.property"], "util.dispatch.dispatch_for_types": [], "linalg.linear_operator._adjoint": [], "linalg.linear_operator._cholesky": [], "linalg.linear_operator._diag_part": [], "linalg.linear_operator._det": [], "linalg.linear_operator._inverse": [], "linalg.linear_operator._logdet": ["<builtin>.ValueError"], "linalg.linear_operator._matmul": ["<builtin>.isinstance", "<builtin>.ValueError", "linalg.linalg_impl.adjoint"], "linalg.linear_operator._solve": ["<builtin>.isinstance", "<builtin>.ValueError"], "linalg.linear_operator._trace": [], "linalg.linear_operator_composition": [], "linalg.linear_operator_composition.LinearOperatorComposition.__init__": ["<builtin>.ValueError", "<builtin>.TypeError", "linear_operator.LinearOperator._set_graph_parents", "<builtin>.dict", "ops.check_ops.assert_proper_iterable", "<builtin>.list", "<builtin>.super", "<builtin>.str", "framework.ops.name_scope", "<builtin>.all"], "linalg.linear_operator_composition.LinearOperatorComposition.operators": [], "linalg.linear_operator_composition.LinearOperatorComposition._shape": ["framework.tensor_shape.TensorShape", "framework.common_shapes.broadcast_shape"], "linalg.linear_operator_composition.LinearOperatorComposition._shape_tensor": ["ops.array_ops.stack", "framework.ops.convert_to_tensor", "ops.array_ops.zeros", "LinearOperator.shape.is_fully_defined", "ops.array_ops.shape", "LinearOperator.shape.as_list", "ops.array_ops.concat"], "linalg.linear_operator_composition.LinearOperatorComposition._matmul": ["<builtin>.reversed", "<builtin>.list"], "linalg.linear_operator_composition.LinearOperatorComposition._determinant": [], "linalg.linear_operator_composition.LinearOperatorComposition._log_abs_determinant": [], "linalg.linear_operator_composition.LinearOperatorComposition._solve": ["<builtin>.reversed", "<builtin>.list"], "linalg.linear_operator_composition.LinearOperatorComposition._composite_tensor_fields": [], "linalg.linear_operator_diag": [], "linalg.linear_operator_diag.LinearOperatorDiag.__init__": ["linear_operator.LinearOperator._set_graph_parents", "<builtin>.dict", "<builtin>.super", "linalg.linear_operator_util.convert_nonref_to_tensor", "framework.ops.name_scope", "<builtin>.ValueError", "linalg.linear_operator_diag.LinearOperatorDiag._check_diag"], "linalg.linear_operator_diag.LinearOperatorDiag._check_diag": ["<builtin>.ValueError"], "linalg.linear_operator_diag.LinearOperatorDiag._shape": [], "linalg.linear_operator_diag.LinearOperatorDiag._shape_tensor": ["ops.array_ops.concat", "ops.array_ops.shape"], "linalg.linear_operator_diag.LinearOperatorDiag.diag": [], "linalg.linear_operator_diag.LinearOperatorDiag._assert_non_singular": ["linalg.linear_operator_util.assert_no_entries_with_modulus_zero"], "linalg.linear_operator_diag.LinearOperatorDiag._assert_positive_definite": ["ops.check_ops.assert_positive", "ops.math_ops.real"], "linalg.linear_operator_diag.LinearOperatorDiag._assert_self_adjoint": ["linalg.linear_operator_util.assert_zero_imag_part"], "linalg.linear_operator_diag.LinearOperatorDiag._matmul": ["ops.math_ops.conj", "linalg.linalg_impl.adjoint", "ops.array_ops.expand_dims"], "linalg.linear_operator_diag.LinearOperatorDiag._matvec": ["ops.math_ops.conj"], "linalg.linear_operator_diag.LinearOperatorDiag._determinant": ["ops.math_ops.reduce_prod"], "linalg.linear_operator_diag.LinearOperatorDiag._log_abs_determinant": ["ops.math_ops.log", "ops.math_ops.reduce_sum", "ops.math_ops.cast", "ops.math_ops.abs"], "linalg.linear_operator_diag.LinearOperatorDiag._solve": ["ops.math_ops.conj", "linalg.linalg_impl.adjoint", "ops.array_ops.expand_dims"], "linalg.linear_operator_diag.LinearOperatorDiag._to_dense": ["ops.array_ops.matrix_diag"], "linalg.linear_operator_diag.LinearOperatorDiag._diag_part": [], "linalg.linear_operator_diag.LinearOperatorDiag._add_to_tensor": ["ops.array_ops.matrix_diag_part", "ops.array_ops.matrix_set_diag"], "linalg.linear_operator_diag.LinearOperatorDiag._eigvals": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator_diag.LinearOperatorDiag._cond": ["ops.math_ops.reduce_min", "ops.math_ops.abs", "ops.math_ops.reduce_max"], "linalg.linear_operator_diag.LinearOperatorDiag._composite_tensor_fields": [], "linalg.linear_operator_full_matrix": [], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix.__init__": ["framework.ops.name_scope", "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix._check_matrix", "linalg.linear_operator_util.convert_nonref_to_tensor", "<builtin>.super", "linear_operator.LinearOperator._set_graph_parents", "<builtin>.dict"], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix._check_matrix": ["<builtin>.ValueError", "framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.TypeError"], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix._shape": [], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix._shape_tensor": ["ops.array_ops.shape"], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix._matmul": ["ops.math_ops.matmul"], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix._solve": ["linear_operator.LinearOperator._dense_solve"], "linear_operator.LinearOperator._dense_solve": [], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix._to_dense": [], "linalg.linear_operator_full_matrix.LinearOperatorFullMatrix._composite_tensor_fields": [], "linalg.linear_operator_householder": [], "linalg.linear_operator_householder.LinearOperatorHouseholder.__init__": ["linalg.linear_operator_util.convert_nonref_to_tensor", "<builtin>.dict", "linalg.linear_operator_householder.LinearOperatorHouseholder._check_reflection_axis", "<builtin>.super", "<builtin>.ValueError", "linear_operator.LinearOperator._set_graph_parents", "framework.ops.name_scope"], "linalg.linear_operator_householder.LinearOperatorHouseholder._check_reflection_axis": ["<builtin>.ValueError"], "linalg.linear_operator_householder.LinearOperatorHouseholder._shape": [], "linalg.linear_operator_householder.LinearOperatorHouseholder._shape_tensor": ["ops.array_ops.concat", "ops.array_ops.shape"], "linalg.linear_operator_householder.LinearOperatorHouseholder._assert_non_singular": ["ops.control_flow_ops.no_op"], "linalg.linear_operator_householder.LinearOperatorHouseholder._assert_positive_definite": ["framework.errors.InvalidArgumentError"], "linalg.linear_operator_householder.LinearOperatorHouseholder._assert_self_adjoint": ["ops.control_flow_ops.no_op"], "linalg.linear_operator_householder.LinearOperatorHouseholder._matmul": ["framework.ops.convert_to_tensor_v2_with_dispatch", "ops.nn.l2_normalize", "linalg.linalg_impl.adjoint", "ops.math_ops.matmul"], "linalg.linear_operator_householder.LinearOperatorHouseholder._trace": ["ops.math_ops.cast", "linear_operator.LinearOperator._domain_dimension_tensor", "linear_operator.LinearOperator.shape_tensor", "ops.array_ops.ones", "linear_operator.LinearOperator._batch_shape_tensor"], "linear_operator.LinearOperator._domain_dimension_tensor": [], "linalg.linear_operator_householder.LinearOperatorHouseholder._determinant": ["ops.array_ops.ones", "linear_operator.LinearOperator.batch_shape_tensor"], "linear_operator.LinearOperator.batch_shape_tensor": [], "linalg.linear_operator_householder.LinearOperatorHouseholder._log_abs_determinant": ["ops.array_ops.zeros", "linear_operator.LinearOperator.batch_shape_tensor"], "linalg.linear_operator_householder.LinearOperatorHouseholder._solve": ["linalg.linear_operator_householder.LinearOperatorHouseholder._matmul"], "linalg.linear_operator_householder.LinearOperatorHouseholder._to_dense": ["ops.array_ops.matrix_set_diag", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.matrix_diag_part", "ops.nn.l2_normalize", "ops.math_ops.matmul"], "linalg.linear_operator_householder.LinearOperatorHouseholder._diag_part": ["ops.math_ops.conj", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.nn.l2_normalize"], "linalg.linear_operator_householder.LinearOperatorHouseholder._eigvals": ["ops.array_ops.concat", "ops.array_ops.ones", "ops.array_ops.shape"], "linalg.linear_operator_householder.LinearOperatorHouseholder._cond": ["ops.array_ops.ones", "linear_operator.LinearOperator.batch_shape_tensor"], "linalg.linear_operator_householder.LinearOperatorHouseholder.reflection_axis": [], "linalg.linear_operator_householder.LinearOperatorHouseholder._composite_tensor_fields": [], "linalg.linear_operator_identity": [], "linalg.linear_operator_identity.BaseLinearOperatorIdentity._check_num_rows_possibly_add_asserts": ["ops.check_ops.assert_non_negative", "ops.check_ops.assert_rank", "<builtin>.TypeError", "<builtin>.ValueError", "ops.control_flow_ops.with_dependencies"], "linalg.linear_operator_identity.BaseLinearOperatorIdentity._min_matrix_dim": ["framework.tensor_shape.dimension_value", "<builtin>.min"], "linalg.linear_operator_identity.BaseLinearOperatorIdentity._min_matrix_dim_tensor": ["linear_operator.LinearOperator.shape_tensor", "ops.math_ops.reduce_min"], "linalg.linear_operator_identity.BaseLinearOperatorIdentity._ones_diag": ["ops.array_ops.ones", "linalg.linear_operator_identity.BaseLinearOperatorIdentity._min_matrix_dim_tensor", "linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.concat", "LinearOperator.batch_shape.concatenate", "linalg.linear_operator_identity.BaseLinearOperatorIdentity._min_matrix_dim", "LinearOperator.shape.is_fully_defined"], "LinearOperator.batch_shape.concatenate": [], "linalg.linear_operator_identity.LinearOperatorIdentity.__init__": ["linalg.linear_operator_util.assert_not_ref_type", "framework.tensor_util.constant_value", "framework.dtypes.as_dtype", "linalg.linear_operator_identity.LinearOperatorIdentity._check_batch_shape_possibly_add_asserts", "linalg.linear_operator_identity.LinearOperatorIdentity._check_num_rows_possibly_add_asserts", "<builtin>.super", "<builtin>.ValueError", "<builtin>.dict", "framework.ops.name_scope", "linalg.linear_operator_util.shape_tensor"], "linalg.linear_operator_util.assert_not_ref_type": ["<builtin>.TypeError", "<builtin>.type", "linalg.linear_operator_util.is_ref"], "linalg.linear_operator_identity.LinearOperatorIdentity._check_num_rows_possibly_add_asserts": ["ops.check_ops.assert_non_negative", "ops.check_ops.assert_rank", "<builtin>.TypeError", "<builtin>.ValueError", "ops.control_flow_ops.with_dependencies"], "linalg.linear_operator_identity.LinearOperatorIdentity._check_batch_shape_possibly_add_asserts": ["numpy.any", "ops.check_ops.assert_non_negative", "ops.check_ops.assert_rank", "<builtin>.TypeError", "<builtin>.ValueError", "ops.control_flow_ops.with_dependencies"], "linalg.linear_operator_identity.LinearOperatorIdentity._shape": ["framework.tensor_shape.TensorShape"], "linalg.linear_operator_identity.LinearOperatorIdentity._shape_tensor": ["ops.array_ops.stack", "ops.array_ops.concat"], "linalg.linear_operator_identity.LinearOperatorIdentity._assert_non_singular": ["ops.control_flow_ops.no_op"], "linalg.linear_operator_identity.LinearOperatorIdentity._assert_positive_definite": ["ops.control_flow_ops.no_op"], "linalg.linear_operator_identity.LinearOperatorIdentity._assert_self_adjoint": ["ops.control_flow_ops.no_op"], "linalg.linear_operator_identity.LinearOperatorIdentity._possibly_broadcast_batch_shape": ["ops.array_ops.zeros", "linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.concat", "ops.array_ops.broadcast_static_shape", "LinearOperator.batch_shape.concatenate"], "linalg.linear_operator_identity.LinearOperatorIdentity._matmul": ["linalg.linear_operator_util.assert_compatible_matrix_dimensions", "ops.control_flow_ops.with_dependencies", "linalg.linear_operator_identity.LinearOperatorIdentity._possibly_broadcast_batch_shape", "linalg.linalg_impl.adjoint"], "linalg.linear_operator_util.assert_compatible_matrix_dimensions": ["ops.check_ops.assert_equal", "ops.array_ops.shape"], "linalg.linear_operator_identity.LinearOperatorIdentity._determinant": ["ops.array_ops.ones", "linear_operator.LinearOperator.batch_shape_tensor"], "linalg.linear_operator_identity.LinearOperatorIdentity._log_abs_determinant": ["linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.zeros"], "linalg.linear_operator_identity.LinearOperatorIdentity._solve": ["linalg.linear_operator_identity.LinearOperatorIdentity._matmul"], "linalg.linear_operator_identity.LinearOperatorIdentity._trace": ["ops.array_ops.ones", "linalg.linear_operator_identity.BaseLinearOperatorIdentity._min_matrix_dim_tensor", "LinearOperator.batch_shape.is_fully_defined", "linear_operator.LinearOperator.batch_shape_tensor", "ops.math_ops.cast", "linalg.linear_operator_identity.BaseLinearOperatorIdentity._min_matrix_dim"], "LinearOperator.batch_shape.is_fully_defined": [], "linalg.linear_operator_identity.LinearOperatorIdentity._diag_part": ["linalg.linear_operator_identity.BaseLinearOperatorIdentity._ones_diag"], "linalg.linear_operator_identity.LinearOperatorIdentity.add_to_tensor": ["ops.array_ops.matrix_set_diag", "ops.array_ops.matrix_diag_part", "framework.ops.convert_to_tensor_v2_with_dispatch", "linear_operator.LinearOperator._name_scope"], "linalg.linear_operator_identity.LinearOperatorIdentity._eigvals": ["linalg.linear_operator_identity.BaseLinearOperatorIdentity._ones_diag"], "linalg.linear_operator_identity.LinearOperatorIdentity._cond": ["ops.array_ops.ones", "linear_operator.LinearOperator.batch_shape_tensor"], "linalg.linear_operator_identity.LinearOperatorIdentity._composite_tensor_prefer_static_fields": [], "linalg.linear_operator_identity.LinearOperatorIdentity._composite_tensor_fields": [], "linalg.linear_operator_identity.LinearOperatorScaledIdentity.__init__": ["linalg.linear_operator_util.assert_not_ref_type", "framework.tensor_util.constant_value", "<builtin>.super", "linalg.linear_operator_identity.BaseLinearOperatorIdentity._check_num_rows_possibly_add_asserts", "ops.math_ops.cast", "linalg.linear_operator_util.convert_nonref_to_tensor", "<builtin>.ValueError", "<builtin>.dict", "framework.ops.name_scope", "linalg.linear_operator_util.shape_tensor"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._shape": ["framework.tensor_shape.TensorShape"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._shape_tensor": ["ops.array_ops.shape", "ops.array_ops.stack", "ops.array_ops.concat"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._assert_non_singular": ["ops.math_ops.abs", "ops.check_ops.assert_positive"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._assert_positive_definite": ["ops.math_ops.real", "ops.check_ops.assert_positive"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._assert_self_adjoint": ["ops.check_ops.assert_equal", "ops.array_ops.zeros_like", "ops.math_ops.imag"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._make_multiplier_matrix": ["ops.math_ops.conj", "ops.array_ops.expand_dims"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._matmul": ["linalg.linear_operator_util.assert_compatible_matrix_dimensions", "ops.control_flow_ops.with_dependencies", "linalg.linear_operator_identity.LinearOperatorScaledIdentity._make_multiplier_matrix", "linalg.linalg_impl.adjoint"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._determinant": [], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._log_abs_determinant": ["ops.math_ops.abs", "ops.math_ops.log"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._solve": ["linalg.linear_operator_util.assert_compatible_matrix_dimensions", "ops.control_flow_ops.with_dependencies", "linalg.linear_operator_identity.LinearOperatorScaledIdentity._make_multiplier_matrix", "linalg.linalg_impl.adjoint"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._trace": ["ops.array_ops.ones", "linalg.linear_operator_identity.BaseLinearOperatorIdentity._min_matrix_dim_tensor", "LinearOperator.batch_shape.is_fully_defined", "linear_operator.LinearOperator.batch_shape_tensor", "ops.math_ops.cast", "linalg.linear_operator_identity.BaseLinearOperatorIdentity._min_matrix_dim"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._diag_part": ["linalg.linear_operator_identity.BaseLinearOperatorIdentity._ones_diag"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity.add_to_tensor": ["ops.array_ops.matrix_set_diag", "ops.array_ops.expand_dims", "ops.array_ops.matrix_diag_part", "framework.ops.convert_to_tensor_v2_with_dispatch", "linear_operator.LinearOperator._name_scope"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._eigvals": ["linalg.linear_operator_identity.BaseLinearOperatorIdentity._ones_diag"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._cond": ["ops.math_ops.equal", "ops.math_ops.cast", "ops.array_ops.where_v2"], "linalg.linear_operator_identity.LinearOperatorScaledIdentity.multiplier": [], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._composite_tensor_prefer_static_fields": [], "linalg.linear_operator_identity.LinearOperatorScaledIdentity._composite_tensor_fields": [], "linalg.linear_operator_inversion": [], "linalg.linear_operator_inversion.LinearOperatorInversion.__init__": ["<builtin>.super", "<builtin>.dict", "<builtin>.ValueError", "framework.ops.name_scope", "linalg.linear_operator_util.use_operator_or_provided_hint_unless_contradicting", "linear_operator.LinearOperator._set_graph_parents"], "linalg.linear_operator_inversion.LinearOperatorInversion.operator": [], "linalg.linear_operator_inversion.LinearOperatorInversion._assert_non_singular": [], "linalg.linear_operator_inversion.LinearOperatorInversion._assert_positive_definite": [], "linalg.linear_operator_inversion.LinearOperatorInversion._assert_self_adjoint": [], "linalg.linear_operator_inversion.LinearOperatorInversion._shape": [], "linalg.linear_operator_inversion.LinearOperatorInversion._shape_tensor": [], "linalg.linear_operator_inversion.LinearOperatorInversion._matmul": [], "linalg.linear_operator_inversion.LinearOperatorInversion._determinant": [], "linalg.linear_operator_inversion.LinearOperatorInversion._log_abs_determinant": [], "linalg.linear_operator_inversion.LinearOperatorInversion._solve": [], "linalg.linear_operator_inversion.LinearOperatorInversion._eigvals": [], "linalg.linear_operator_inversion.LinearOperatorInversion._cond": [], "linalg.linear_operator_inversion.LinearOperatorInversion._composite_tensor_fields": [], "linalg.linear_operator_kronecker": [], "linalg.linear_operator_kronecker._vec": ["ops.array_ops.concat", "ops.array_ops.reshape", "ops.array_ops.matrix_transpose", "ops.array_ops.shape"], "linalg.linear_operator_kronecker._unvec_by": ["ops.array_ops.concat", "ops.array_ops.reshape", "ops.array_ops.matrix_transpose", "ops.array_ops.shape"], "linalg.linear_operator_kronecker._rotate_last_dim": ["ops.array_ops.transpose", "ops.array_ops.concat", "ops.array_ops.rank", "ops.math_ops.range"], "linalg.linear_operator_kronecker.LinearOperatorKronecker.__init__": ["<builtin>.list", "<builtin>.ValueError", "<builtin>.str", "linear_operator.LinearOperator._set_graph_parents", "<builtin>.all", "framework.ops.name_scope", "<builtin>.TypeError", "ops.check_ops.assert_proper_iterable", "<builtin>.super", "<builtin>.dict"], "linalg.linear_operator_kronecker.LinearOperatorKronecker.operators": [], "linalg.linear_operator_kronecker.LinearOperatorKronecker._shape": ["framework.tensor_shape.TensorShape", "framework.common_shapes.broadcast_shape"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._shape_tensor": ["ops.array_ops.concat", "ops.array_ops.broadcast_dynamic_shape"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._matmul": ["ops.array_ops.matrix_transpose", "ops.array_ops.concat", "linear_operator.LinearOperator.batch_shape_tensor", "framework.common_shapes.broadcast_shape", "ops.array_ops.zeros", "ops.array_ops.ones_like", "linalg.linear_operator_kronecker._unvec_by", "linalg.linalg_impl.adjoint", "linalg.linear_operator_kronecker._vec", "linalg.linear_operator_kronecker._rotate_last_dim"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._determinant": ["linear_operator.LinearOperator.domain_dimension_tensor", "ops.math_ops.cast"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._log_abs_determinant": ["linear_operator.LinearOperator.domain_dimension_tensor", "ops.math_ops.cast"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._trace": [], "linalg.linear_operator_kronecker.LinearOperatorKronecker._solve": ["ops.array_ops.matrix_transpose", "ops.array_ops.concat", "linear_operator.LinearOperator.batch_shape_tensor", "framework.common_shapes.broadcast_shape", "ops.array_ops.zeros", "ops.array_ops.ones_like", "linalg.linear_operator_kronecker._unvec_by", "linalg.linalg_impl.adjoint", "linalg.linear_operator_kronecker._vec", "linalg.linear_operator_kronecker._rotate_last_dim"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._diag_part": ["LinearOperator.batch_shape.concatenate", "ops.array_ops.concat", "ops.array_ops.reshape", "ops.array_ops.shape"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._to_dense": ["ops.array_ops.concat", "ops.array_ops.reshape", "ops.array_ops.shape"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._eigvals": ["ops.array_ops.concat", "ops.array_ops.reshape", "ops.array_ops.shape"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._assert_non_singular": ["framework.errors.InvalidArgumentError", "<builtin>.all", "ops.control_flow_ops.group"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._assert_self_adjoint": ["framework.errors.InvalidArgumentError", "<builtin>.all", "ops.control_flow_ops.group"], "linalg.linear_operator_kronecker.LinearOperatorKronecker._composite_tensor_fields": [], "linalg.linear_operator_lower_triangular": [], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular.__init__": ["<builtin>.dict", "<builtin>.super", "linalg.linear_operator_util.convert_nonref_to_tensor", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._check_tril", "linear_operator.LinearOperator._set_graph_parents", "framework.ops.name_scope", "<builtin>.ValueError"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._check_tril": ["<builtin>.ValueError"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_tril": ["ops.array_ops.matrix_band_part"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_diag": ["ops.array_ops.matrix_diag_part"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._shape": [], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._shape_tensor": ["ops.array_ops.shape"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._assert_non_singular": ["linalg.linear_operator_util.assert_no_entries_with_modulus_zero", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_diag"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._matmul": ["ops.math_ops.matmul", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_tril"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._determinant": ["ops.math_ops.reduce_prod", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_diag"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._log_abs_determinant": ["ops.math_ops.reduce_sum", "ops.math_ops.log", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_diag", "ops.math_ops.abs"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._solve": ["linalg.linalg_impl.triangular_solve", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_tril", "linalg.linalg_impl.adjoint"], "linalg.linalg_impl.triangular_solve": [], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._to_dense": ["linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_tril"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._eigvals": ["linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._get_diag"], "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular._composite_tensor_fields": [], "linalg.linear_operator_low_rank_update": [], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate.__init__": ["framework.ops.name_scope", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._set_diag_operators", "<builtin>.ValueError", "<builtin>.super", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._check_shapes", "platform.tf_logging.warn", "<builtin>.dict", "linear_operator.LinearOperator._set_graph_parents", "linalg.linear_operator_util.convert_nonref_to_tensor"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._set_diag_operators": ["linalg.linear_operator_diag.LinearOperatorDiag", "ops.array_ops.shape", "framework.tensor_shape.dimension_value", "linalg.linear_operator_identity.LinearOperatorIdentity"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._check_shapes": ["ops.array_ops.broadcast_static_shape", "framework.tensor_shape.dimension_at_index", "framework.tensor_shape.Dimension"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate.u": [], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate.v": [], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate.is_diag_update_positive": [], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate.diag_update": [], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate.diag_operator": [], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate.base_operator": [], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._assert_self_adjoint": ["<builtin>.super"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._shape": ["ops.array_ops.broadcast_static_shape"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._shape_tensor": ["ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.broadcast_dynamic_shape"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._get_uv_as_tensors": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._matmul": ["linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._get_uv_as_tensors", "ops.math_ops.matmul"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._determinant": ["ops.math_ops.exp", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._get_uv_as_tensors", "ops.linalg_ops.matrix_determinant", "linear_operator.LinearOperator.log_abs_determinant", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._make_capacitance"], "linear_operator.LinearOperator.log_abs_determinant": [], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._make_capacitance": ["ops.math_ops.matmul"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._diag_part": ["ops.math_ops.conj", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._get_uv_as_tensors", "ops.math_ops.reduce_sum", "ops.array_ops.expand_dims"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._log_abs_determinant": ["ops.math_ops.log", "ops.math_ops.abs", "ops.math_ops.reduce_sum", "ops.array_ops.matrix_diag_part", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._get_uv_as_tensors", "ops.math_ops.cast", "ops.linalg_ops.cholesky", "ops.linalg_ops.matrix_determinant", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._make_capacitance"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._solve": ["linalg.linear_operator_util.matrix_solve_with_broadcast", "<builtin>.ValueError", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._get_uv_as_tensors", "ops.math_ops.matmul", "ops.linalg_ops.cholesky", "ops.linalg_ops.cholesky_solve", "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._make_capacitance"], "linalg.linear_operator_low_rank_update.LinearOperatorLowRankUpdate._composite_tensor_fields": [], "linalg.linear_operator_permutation": [], "linalg.linear_operator_permutation.LinearOperatorPermutation.__init__": ["framework.ops.name_scope", "linalg.linear_operator_util.convert_nonref_to_tensor", "linalg.linear_operator_permutation.LinearOperatorPermutation._check_perm", "<builtin>.dict", "<builtin>.super", "<builtin>.ValueError"], "linalg.linear_operator_permutation.LinearOperatorPermutation._check_perm": ["numpy.arange", "<builtin>.TypeError", "framework.tensor_util.constant_value", "numpy.any", "numpy.sort", "<builtin>.ValueError"], "numpy.sort": [], "linalg.linear_operator_permutation.LinearOperatorPermutation._shape": [], "linalg.linear_operator_permutation.LinearOperatorPermutation._shape_tensor": ["ops.array_ops.shape", "ops.array_ops.concat"], "linalg.linear_operator_permutation.LinearOperatorPermutation._assert_non_singular": ["ops.control_flow_ops.no_op"], "linalg.linear_operator_permutation.LinearOperatorPermutation._domain_dimension_tensor": ["ops.array_ops.shape"], "linalg.linear_operator_permutation.LinearOperatorPermutation._matmul": ["linalg.linalg_impl.adjoint", "ops.array_ops.gather", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.concat", "ops.sort_ops.argsort", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.broadcast_to", "ops.array_ops.broadcast_dynamic_shape"], "linalg.linear_operator_permutation.LinearOperatorPermutation._log_abs_determinant": ["linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.zeros"], "linalg.linear_operator_permutation.LinearOperatorPermutation._solve": ["linalg.linear_operator_permutation.LinearOperatorPermutation._matmul"], "linalg.linear_operator_permutation.LinearOperatorPermutation._to_dense": ["ops.math_ops.range", "ops.math_ops.equal", "linalg.linear_operator_permutation.LinearOperatorPermutation._domain_dimension_tensor", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.cast"], "linalg.linear_operator_permutation.LinearOperatorPermutation._diag_part": ["ops.math_ops.range", "ops.math_ops.equal", "linalg.linear_operator_permutation.LinearOperatorPermutation._domain_dimension_tensor", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.cast"], "linalg.linear_operator_permutation.LinearOperatorPermutation._cond": ["linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.ones"], "linalg.linear_operator_permutation.LinearOperatorPermutation.perm": [], "linalg.linear_operator_permutation.LinearOperatorPermutation._composite_tensor_fields": [], "linalg.linear_operator_toeplitz": [], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz.__init__": ["linear_operator.LinearOperator._set_graph_parents", "<builtin>.ValueError", "linalg.linear_operator_util.convert_nonref_to_tensor", "<builtin>.dict", "<builtin>.super", "framework.ops.name_scope", "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._check_row_col"], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._check_row_col": ["<builtin>.ValueError"], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._shape": ["ops.array_ops.broadcast_static_shape"], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._shape_tensor": ["ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.broadcast_dynamic_shape"], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._assert_self_adjoint": ["ops.check_ops.assert_equal"], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._matmul": ["ops.math_ops.cast", "ops.array_ops.reverse", "linalg.linear_operator_toeplitz._to_complex", "linear_operator.LinearOperator._domain_dimension_tensor", "linalg.linear_operator_circulant.LinearOperatorCirculant", "ops.array_ops.zeros_like", "linalg.linalg_impl.adjoint", "ops.array_ops.concat", "framework.ops.convert_to_tensor_v2_with_dispatch", "signal.fft_ops.fft", "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._shape_tensor"], "linalg.linear_operator_toeplitz._to_complex": ["ops.math_ops.cast"], "signal.fft_ops.fft": [], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._trace": ["ops.math_ops.cast", "linear_operator.LinearOperator.domain_dimension_tensor"], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._diag_part": ["ops.array_ops.ones", "linear_operator.LinearOperator.domain_dimension_tensor"], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._to_dense": ["ops.array_ops.gather", "ops.array_ops.reverse", "ops.math_ops.mod", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.concat", "ops.array_ops.broadcast_to", "ops.array_ops.broadcast_dynamic_shape", "ops.math_ops.range", "ops.array_ops.shape"], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz.col": [], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz.row": [], "linalg.linear_operator_toeplitz.LinearOperatorToeplitz._composite_tensor_fields": [], "linalg.linear_operator_tridiag": ["<builtin>.frozenset"], "linalg.linear_operator_tridiag.LinearOperatorTridiag.__init__": ["<builtin>.ValueError", "framework.ops.name_scope", "<builtin>.enumerate", "linalg.linear_operator_util.convert_nonref_to_tensor", "<builtin>.dict", "<builtin>.super"], "linalg.linear_operator_tridiag.LinearOperatorTridiag._shape": ["ops.array_ops.broadcast_static_shape"], "linalg.linear_operator_tridiag.LinearOperatorTridiag._shape_tensor": ["ops.array_ops.broadcast_dynamic_shape", "ops.array_ops.concat", "ops.array_ops.shape"], "linalg.linear_operator_tridiag.LinearOperatorTridiag._assert_self_adjoint": ["linalg.linear_operator_util.assert_zero_imag_part", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.manip_ops.roll", "ops.check_ops.assert_equal", "ops.control_flow_ops.group", "linalg.linalg_impl.adjoint", "ops.math_ops.conj"], "ops.manip_ops.roll": ["ops.gen_manip_ops.roll"], "linalg.linear_operator_tridiag.LinearOperatorTridiag._construct_adjoint_diagonals": ["ops.manip_ops.roll", "<builtin>.reversed", "ops.array_ops.stack", "ops.array_ops.unstack", "linalg.linalg_impl.adjoint", "ops.math_ops.conj"], "linalg.linear_operator_tridiag.LinearOperatorTridiag._matmul": ["linalg.linalg_impl.tridiagonal_matmul", "linalg.linalg_impl.adjoint", "linalg.linear_operator_tridiag.LinearOperatorTridiag._construct_adjoint_diagonals"], "linalg.linalg_impl.tridiagonal_matmul": [], "linalg.linear_operator_tridiag.LinearOperatorTridiag._solve": ["ops.array_ops.broadcast_to", "ops.array_ops.concat", "linalg.linear_operator_tridiag.LinearOperatorTridiag._shape_tensor", "ops.array_ops.broadcast_dynamic_shape", "linalg.linalg_impl.tridiagonal_solve", "ops.array_ops.shape", "linalg.linear_operator_tridiag.LinearOperatorTridiag._construct_adjoint_diagonals"], "linalg.linalg_impl.tridiagonal_solve": [], "linalg.linear_operator_tridiag.LinearOperatorTridiag._diag_part": ["ops.array_ops.matrix_diag_part", "ops.array_ops.broadcast_to", "linear_operator.LinearOperator.shape_tensor"], "linalg.linear_operator_tridiag.LinearOperatorTridiag._to_dense": ["ops.gen_array_ops.matrix_diag_v3", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.array_ops.stack"], "ops.gen_array_ops.matrix_diag_v3": [], "linalg.linear_operator_tridiag.LinearOperatorTridiag.diagonals": [], "linalg.linear_operator_tridiag.LinearOperatorTridiag.diagonals_format": [], "linalg.linear_operator_tridiag.LinearOperatorTridiag._composite_tensor_fields": [], "linalg.linear_operator_util": [], "linalg.linear_operator_util.base_dtype": ["<builtin>.hasattr", "framework.dtypes.as_dtype"], "linalg.linear_operator_util.dtype_name": ["<builtin>.hasattr", "<builtin>.str", "framework.dtypes.as_dtype"], "linalg.linear_operator_util.check_dtype": ["<builtin>.TypeError"], "linalg.linear_operator_util.assert_is_batch_matrix": ["<builtin>.ValueError"], "linalg.linear_operator_util._reshape_for_efficiency": ["numpy.concatenate", "ops.array_ops.concat", "numpy.arange", "ops.array_ops.shape", "numpy.prod", "ops.array_ops.transpose", "ops.array_ops.matrix_transpose", "ops.array_ops.reshape"], "ops.linalg_ops.matrix_solve": [], "linalg.linear_operator_util._reshape_for_efficiency.identity": [], "linalg.linear_operator_util._reshape_for_efficiency.reshape_inv": ["numpy.argsort", "ops.array_ops.shape", "ops.array_ops.transpose", "ops.array_ops.concat", "ops.array_ops.reshape"], "numpy.argsort": [], "linalg.linear_operator_zeros": [], "linalg.linear_operator_zeros.LinearOperatorZeros.__init__": ["<builtin>.super", "<builtin>.dict", "framework.tensor_util.constant_value", "linalg.linear_operator_util.assert_not_ref_type", "framework.dtypes.as_dtype", "linalg.linear_operator_util.shape_tensor", "linalg.linear_operator_zeros.LinearOperatorZeros._check_domain_range_possibly_add_asserts", "<builtin>.ValueError", "linalg.linear_operator_zeros.LinearOperatorZeros._check_batch_shape_possibly_add_asserts", "framework.ops.name_scope"], "linalg.linear_operator_zeros.LinearOperatorZeros._check_domain_range_possibly_add_asserts": ["ops.check_ops.assert_non_negative", "ops.control_flow_ops.with_dependencies", "<builtin>.TypeError", "<builtin>.ValueError", "ops.check_ops.assert_rank"], "linalg.linear_operator_zeros.LinearOperatorZeros._check_batch_shape_possibly_add_asserts": ["ops.check_ops.assert_non_negative", "ops.control_flow_ops.with_dependencies", "numpy.any", "<builtin>.TypeError", "<builtin>.ValueError", "ops.check_ops.assert_rank"], "linalg.linear_operator_zeros.LinearOperatorZeros._shape": ["framework.tensor_shape.TensorShape"], "linalg.linear_operator_zeros.LinearOperatorZeros._shape_tensor": ["ops.array_ops.concat", "ops.array_ops.stack"], "linalg.linear_operator_zeros.LinearOperatorZeros._assert_non_singular": ["framework.errors.InvalidArgumentError"], "linalg.linear_operator_zeros.LinearOperatorZeros._assert_positive_definite": ["framework.errors.InvalidArgumentError"], "linalg.linear_operator_zeros.LinearOperatorZeros._assert_self_adjoint": ["ops.control_flow_ops.no_op"], "linalg.linear_operator_zeros.LinearOperatorZeros._possibly_broadcast_batch_shape": ["LinearOperator.batch_shape.concatenate", "ops.array_ops.zeros", "linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.concat", "ops.array_ops.broadcast_static_shape"], "linalg.linear_operator_zeros.LinearOperatorZeros._matmul": ["ops.control_flow_ops.with_dependencies", "ops.array_ops.shape", "ops.array_ops.zeros", "linalg.linear_operator_zeros.LinearOperatorZeros._possibly_broadcast_batch_shape", "ops.array_ops.concat", "linalg.linear_operator_util.assert_compatible_matrix_dimensions", "linalg.linalg_impl.adjoint"], "linalg.linear_operator_zeros.LinearOperatorZeros._determinant": ["linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.zeros", "LinearOperator.batch_shape.is_fully_defined"], "linalg.linear_operator_zeros.LinearOperatorZeros._trace": ["linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.zeros", "LinearOperator.batch_shape.is_fully_defined"], "linalg.linear_operator_zeros.LinearOperatorZeros._diag_part": ["linalg.linear_operator_zeros.LinearOperatorZeros._zeros_diag"], "linalg.linear_operator_zeros.LinearOperatorZeros._zeros_diag": ["LinearOperator.batch_shape.concatenate", "LinearOperator.shape.is_fully_defined", "linalg.linear_operator_zeros.LinearOperatorZeros._min_matrix_dim_tensor", "ops.array_ops.zeros", "linalg.linear_operator_zeros.LinearOperatorZeros._min_matrix_dim", "linear_operator.LinearOperator.batch_shape_tensor", "ops.array_ops.concat"], "linalg.linear_operator_zeros.LinearOperatorZeros.add_to_tensor": ["linalg.linear_operator_zeros.LinearOperatorZeros._possibly_broadcast_batch_shape"], "linalg.linear_operator_zeros.LinearOperatorZeros._min_matrix_dim": ["<builtin>.min"], "linalg.linear_operator_zeros.LinearOperatorZeros._min_matrix_dim_tensor": ["linear_operator.LinearOperator.shape_tensor", "ops.math_ops.reduce_min"], "linalg.linear_operator_zeros.LinearOperatorZeros._eigvals": ["linalg.linear_operator_zeros.LinearOperatorZeros._zeros_diag"], "linalg.linear_operator_zeros.LinearOperatorZeros._composite_tensor_prefer_static_fields": [], "linalg.linear_operator_zeros.LinearOperatorZeros._composite_tensor_fields": [], "linalg.matmul_registrations": ["linalg.linear_operator_algebra.RegisterMatmul"], "linalg.linear_operator_algebra.RegisterMatmul": [], "linalg.matmul_registrations._matmul_linear_operator": ["linalg.registrations_util.combined_non_singular_hint", "linalg.linear_operator_composition.LinearOperatorComposition", "linalg.registrations_util.is_square"], "linalg.registrations_util.is_square": [], "linalg.registrations_util.combined_non_singular_hint": [], "linalg.linear_operator_composition.LinearOperatorComposition": [], "linalg.matmul_registrations._matmul_linear_operator_identity_left": [], "linalg.matmul_registrations._matmul_linear_operator_identity_right": [], "linalg.matmul_registrations._matmul_linear_operator_scaled_identity": ["linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_identity.LinearOperatorScaledIdentity", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.registrations_util.combined_commuting_self_adjoint_hint": [], "linalg.registrations_util.combined_commuting_positive_definite_hint": [], "linalg.matmul_registrations._matmul_linear_operator_zeros_right": ["<builtin>.ValueError"], "linalg.matmul_registrations._matmul_linear_operator_zeros_left": ["<builtin>.ValueError"], "linalg.matmul_registrations._matmul_linear_operator_diag": ["linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_diag.LinearOperatorDiag", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.matmul_registrations._matmul_linear_operator_diag_scaled_identity_right": ["linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_diag.LinearOperatorDiag", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.matmul_registrations._matmul_linear_operator_diag_scaled_identity_left": ["linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_diag.LinearOperatorDiag", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.matmul_registrations._matmul_linear_operator_diag_tril": ["linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_self_adjoint_hint", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular"], "linalg.matmul_registrations._matmul_linear_operator_tril_diag": ["linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_self_adjoint_hint", "linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular"], "linalg.matmul_registrations._matmul_linear_operator_circulant_circulant": ["linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_circulant.LinearOperatorCirculant", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.matmul_registrations._matmul_linear_operator_block_diag_block_diag": ["<builtin>.zip", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag", "linalg.registrations_util.combined_non_singular_hint"], "linalg.registrations_util": [], "linalg.solve_registrations": ["linalg.linear_operator_algebra.RegisterSolve"], "linalg.linear_operator_algebra.RegisterSolve": [], "linalg.solve_registrations._solve_linear_operator": ["linalg.registrations_util.is_square", "linalg.linear_operator_inversion.LinearOperatorInversion", "linalg.linear_operator_composition.LinearOperatorComposition", "linalg.registrations_util.combined_non_singular_hint"], "linalg.solve_registrations._solve_inverse_linear_operator": [], "linalg.solve_registrations._solve_linear_operator_identity_left": [], "linalg.solve_registrations._solve_linear_operator_identity_right": [], "linalg.solve_registrations._solve_linear_operator_scaled_identity": ["linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_identity.LinearOperatorScaledIdentity", "linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.solve_registrations._solve_linear_operator_diag": ["linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_diag.LinearOperatorDiag", "linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.solve_registrations._solve_linear_operator_diag_scaled_identity_right": ["linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_diag.LinearOperatorDiag", "linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.solve_registrations._solve_linear_operator_diag_scaled_identity_left": ["linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_diag.LinearOperatorDiag", "linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.solve_registrations._solve_linear_operator_diag_tril": ["linalg.linear_operator_lower_triangular.LinearOperatorLowerTriangular", "linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.solve_registrations._solve_linear_operator_circulant_circulant": ["linalg.registrations_util.combined_commuting_positive_definite_hint", "linalg.linear_operator_circulant.LinearOperatorCirculant", "linalg.registrations_util.combined_non_singular_hint", "linalg.registrations_util.combined_commuting_self_adjoint_hint"], "linalg.solve_registrations._solve_linear_operator_block_diag_block_diag": ["<builtin>.zip", "linalg.linear_operator_block_diag.LinearOperatorBlockDiag", "linalg.registrations_util.combined_non_singular_hint"], "losses.losses": [], "losses.losses_impl": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support", "util.deprecation.deprecated_args"], "losses.losses_impl.Reduction.all": [], "losses.losses_impl.Reduction.validate": ["<builtin>.ValueError", "losses.losses_impl.Reduction.all"], "losses.losses_impl._safe_mean": ["ops.math_ops.div_no_nan", "ops.math_ops.reduce_sum"], "losses.losses_impl._num_present": ["ops.math_ops.equal", "ops.array_ops.zeros_like", "losses.losses_impl._num_elements", "ops.array_ops.where", "eager.context.executing_eagerly", "ops.math_ops.cast", "framework.ops.name_scope", "ops.weights_broadcast_ops.broadcast_weights", "ops.array_ops.rank", "ops.math_ops.reduce_sum", "ops.array_ops.ones_like", "ops.math_ops.range", "<builtin>.isinstance"], "losses.losses_impl._num_elements": ["ops.math_ops.cast", "ops.array_ops.size", "framework.ops.name_scope"], "losses.losses_impl.compute_weighted_loss": ["losses.losses_impl.Reduction.validate", "ops.weights_broadcast_ops.assert_broadcastable", "framework.ops.control_dependencies", "losses.losses_impl.compute_weighted_loss.compute_loss", "framework.ops.name_scope", "ops.control_flow_ops.get_enclosing_xla_context", "framework.ops.get_default_graph"], "losses.losses_impl.compute_weighted_loss.compute_loss": ["losses.losses_impl._num_elements", "ops.math_ops.cast", "losses.util.add_loss", "ops.math_ops.reduce_sum", "losses.losses_impl._safe_mean", "losses.losses_impl._num_present", "ops.array_ops.ones_like", "ops.math_ops.multiply", "framework.ops.convert_to_tensor"], "losses.util.add_loss": ["eager.context.executing_eagerly", "framework.ops.add_to_collection"], "ops.weights_broadcast_ops.assert_broadcastable": ["<builtin>.len", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "ops.array_ops.rank", "<builtin>.ValueError", "ops.control_flow_ops.cond", "ops.math_ops.equal", "ops.control_flow_ops.no_op", "ops.control_flow_ops.Assert", "<builtin>.range", "framework.tensor_util.constant_value", "framework.ops.name_scope"], "losses.losses_impl.absolute_difference": ["ops.math_ops.abs", "losses.losses_impl.compute_weighted_loss", "ops.math_ops.subtract", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.name_scope"], "losses.losses_impl.cosine_distance": ["losses.losses_impl.compute_weighted_loss", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.name_scope", "ops.math_ops.reduce_sum", "ops.math_ops.multiply", "util.deprecation.deprecated_argument_lookup"], "util.deprecation.deprecated_argument_lookup": ["<builtin>.ValueError"], "losses.losses_impl.hinge_loss": ["losses.losses_impl.compute_weighted_loss", "ops.nn_ops.relu", "ops.math_ops.subtract", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.name_scope", "ops.array_ops.ones_like", "ops.math_ops.multiply"], "losses.losses_impl.huber_loss": ["ops.math_ops.abs", "losses.losses_impl.compute_weighted_loss", "ops.math_ops.add", "ops.math_ops.subtract", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.name_scope", "ops.math_ops.minimum", "ops.math_ops.multiply", "framework.ops.convert_to_tensor"], "losses.losses_impl.log_loss": ["losses.losses_impl.compute_weighted_loss", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.name_scope", "ops.math_ops.multiply", "ops.math_ops.log"], "losses.losses_impl.mean_pairwise_squared_error": ["losses.losses_impl.mean_pairwise_squared_error.compute_loss", "ops.weights_broadcast_ops.assert_broadcastable", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.control_dependencies", "framework.ops.name_scope", "ops.control_flow_ops.get_enclosing_xla_context"], "losses.losses_impl.mean_pairwise_squared_error.compute_loss": ["ops.array_ops.zeros_like", "ops.array_ops.where", "ops.math_ops.subtract", "ops.math_ops.cast", "ops.math_ops.multiply", "losses.util.add_loss", "ops.math_ops.square", "ops.math_ops.div_no_nan", "ops.math_ops.reduce_sum", "losses.losses_impl._num_present", "ops.array_ops.rank", "ops.math_ops.maximum", "ops.math_ops.range"], "losses.losses_impl.mean_squared_error": ["losses.losses_impl.compute_weighted_loss", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.name_scope", "ops.math_ops.squared_difference"], "losses.losses_impl.sigmoid_cross_entropy": ["ops.nn.sigmoid_cross_entropy_with_logits", "losses.losses_impl.compute_weighted_loss", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "losses.losses_impl.softmax_cross_entropy": ["losses.losses_impl.compute_weighted_loss", "ops.nn.softmax_cross_entropy_with_logits_v2", "ops.math_ops.cast", "<builtin>.ValueError", "framework.ops.name_scope", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "ops.array_ops.stop_gradient"], "ops.nn.softmax_cross_entropy_with_logits_v2": [], "losses.losses_impl._remove_squeezable_dimensions": ["ops.math_ops.equal", "ops.array_ops.squeeze", "ops.control_flow_ops.cond", "ops.array_ops.rank", "ops.confusion_matrix.remove_squeezable_dimensions", "framework.ops.convert_to_tensor"], "ops.confusion_matrix.remove_squeezable_dimensions": ["ops.array_ops.rank", "ops.array_ops.squeeze", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.math_ops.equal", "ops.control_flow_ops.cond"], "losses.losses_impl._remove_squeezable_dimensions.<lambda1>": ["ops.array_ops.squeeze"], "losses.losses_impl._remove_squeezable_dimensions.<lambda2>": [], "losses.losses_impl.sparse_softmax_cross_entropy": ["losses.losses_impl.compute_weighted_loss", "losses.losses_impl._remove_squeezable_dimensions", "ops.nn.sparse_softmax_cross_entropy_with_logits", "<builtin>.ValueError", "framework.ops.name_scope"], "ops.nn.sparse_softmax_cross_entropy_with_logits": [], "losses.util": ["util.tf_contextlib.contextmanager", "util.tf_export.tf_export"], "losses.util.squeeze_or_expand_dimensions": ["ops.array_ops.rank", "ops.control_flow_ops.cond", "ops.array_ops.shape", "ops.confusion_matrix.remove_squeezable_dimensions", "ops.array_ops.expand_dims", "ops.math_ops.equal", "ops.array_ops.squeeze"], "losses.util.squeeze_or_expand_dimensions.<lambda1>": ["ops.confusion_matrix.remove_squeezable_dimensions"], "losses.util.squeeze_or_expand_dimensions.<lambda2>": ["ops.control_flow_ops.cond"], "losses.util.squeeze_or_expand_dimensions.<lambda2>.<lambda1>": [], "losses.util.squeeze_or_expand_dimensions.<lambda3>": ["ops.array_ops.squeeze"], "losses.util.squeeze_or_expand_dimensions._maybe_expand_weights": ["ops.math_ops.equal", "ops.control_flow_ops.cond"], "losses.util.squeeze_or_expand_dimensions._maybe_expand_weights.<lambda1>": ["ops.array_ops.expand_dims"], "losses.util.squeeze_or_expand_dimensions._maybe_expand_weights.<lambda2>": [], "losses.util.squeeze_or_expand_dimensions._maybe_adjust_weights": ["ops.math_ops.equal", "ops.control_flow_ops.cond"], "losses.util.squeeze_or_expand_dimensions.<lambda4>": [], "losses.util.scale_losses_by_sample_weight": ["ops.math_ops.cast", "ops.math_ops.multiply", "losses.util.squeeze_or_expand_dimensions"], "losses.util.check_per_example_loss_rank": ["ops.check_ops.assert_greater_equal", "ops.array_ops.rank", "ops.math_ops.cast", "framework.ops.control_dependencies", "<builtin>.ValueError"], "losses.util.get_losses": ["framework.ops.get_collection"], "losses.util.get_regularization_losses": ["framework.ops.get_collection"], "losses.util.get_regularization_loss": ["ops.math_ops.add_n", "losses.util.get_regularization_losses", "framework.constant_op.constant"], "losses.util.get_total_loss": ["ops.math_ops.add_n", "losses.util.get_losses", "losses.util.get_regularization_losses"], "numpy_ops.np_arrays": [], "numpy_ops.np_arrays.convert_to_tensor": ["framework.ops.convert_to_tensor", "<builtin>.isinstance", "numpy_ops.np_dtypes.default_float_type"], "numpy_ops.np_dtypes.default_float_type": ["numpy_ops.np_dtypes.is_prefer_float32", "numpy_ops.np_dtypes.is_allow_float64"], "numpy_ops.np_array_ops": ["numpy_ops.np_export.np_export_constant", "numpy_ops.np_array_ops._split_on_axis", "numpy_ops.np_utils.NoLink", "numpy_ops.np_utils.np_doc", "numpy_ops.np_utils.np_doc_only", "<builtin>.setattr", "functools.partial", "numpy_ops.np_utils.Link"], "numpy_ops.np_export.np_export_constant": ["numpy_ops.np_export.np_export"], "numpy_ops.np_utils.np_doc": ["numpy_ops.np_utils._prepare_np_fun_name_and_fun", "numpy_ops.np_utils._np_signature"], "numpy_ops.np_array_ops.empty": ["numpy_ops.np_array_ops.zeros"], "numpy_ops.np_array_ops.zeros": ["ops.array_ops.zeros", "numpy_ops.np_utils.result_type", "numpy_ops.np_dtypes.default_float_type"], "numpy_ops.np_array_ops.empty_like": ["numpy_ops.np_array_ops.zeros_like"], "numpy_ops.np_array_ops.zeros_like": ["numpy_ops.np_utils.result_type", "framework.dtypes.as_dtype", "ops.array_ops.zeros_like"], "numpy_ops.np_utils.result_type": ["numpy_ops.np_utils._maybe_get_dtype", "util.nest.flatten", "numpy_ops.np_dtypes._result_type", "numpy.asarray"], "numpy_ops.np_array_ops.ones": ["numpy_ops.np_utils.result_type", "ops.array_ops.ones"], "numpy_ops.np_array_ops.ones_like": ["numpy_ops.np_utils.result_type", "ops.array_ops.ones_like"], "numpy_ops.np_array_ops.eye": ["<builtin>.min", "ops.linalg_ops.eye", "numpy_ops.np_utils.result_type", "ops.array_ops.ones", "<builtin>.int", "ops.array_ops.matrix_diag", "numpy_ops.np_array_ops.zeros"], "numpy_ops.np_array_ops.identity": ["numpy_ops.np_array_ops.eye"], "numpy_ops.np_array_ops.full": ["ops.array_ops.broadcast_to", "numpy_ops.np_array_ops.atleast_1d", "numpy_ops.np_array_ops.asarray", "<builtin>.isinstance", "numpy_ops.np_arrays.convert_to_tensor"], "numpy_ops.np_array_ops.asarray": ["numpy_ops.np_array_ops.array", "<builtin>.isinstance", "numpy_ops.np_utils.result_type"], "numpy_ops.np_array_ops.atleast_1d": ["numpy_ops.np_array_ops._atleast_nd"], "numpy_ops.np_utils.np_doc_only": ["numpy_ops.np_utils._prepare_np_fun_name_and_fun"], "numpy_ops.np_array_ops.full_like": ["<builtin>.ValueError", "numpy_ops.np_utils.result_type", "ops.array_ops.broadcast_to", "numpy_ops.np_array_ops.asarray", "ops.array_ops.shape"], "numpy_ops.np_array_ops._array_internal": ["ops.array_ops.rank", "numpy_ops.np_utils.result_type", "ops.array_ops.identity", "numpy_ops.np_utils.cond", "ops.math_ops.cast", "numpy_ops.np_utils.greater", "<builtin>.isinstance", "numpy_ops.np_arrays.convert_to_tensor"], "numpy_ops.np_array_ops._array_internal.true_fn": ["ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.ones"], "numpy_ops.np_utils.greater": ["numpy_ops.np_utils._maybe_static"], "numpy_ops.np_array_ops._array_internal.<lambda1>": [], "numpy_ops.np_utils.cond": ["numpy_ops.np_utils.get_static_value", "numpy_ops.np_utils._canonicalize_axes.<lambda1>.<lambda2>", "ops.control_flow_ops.cond", "numpy_ops.np_utils._canonicalize_axes.<lambda1>.<lambda1>"], "numpy_ops.np_array_ops.array": ["numpy_ops.np_utils.result_type", "numpy_ops.np_array_ops._array_internal"], "numpy_ops.np_array_ops.asanyarray": ["numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.ascontiguousarray": ["numpy_ops.np_array_ops.array"], "numpy_ops.np_array_ops.arange": ["numpy_ops.np_array_ops.array", "<builtin>.ValueError", "ops.math_ops.range", "numpy_ops.np_utils.result_type", "ops.math_ops.cast"], "numpy_ops.np_array_ops.diag": ["ops.control_flow_ops.Assert", "ops.array_ops.rank", "numpy_ops.np_utils.logical_or", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_utils.cond", "ops.math_ops.equal"], "numpy_ops.np_utils.logical_or": ["numpy_ops.np_utils.get_static_value", "numpy.isscalar", "numpy_ops.np_utils._maybe_static"], "numpy_ops.np_array_ops.diag._diag": ["numpy_ops.np_utils.cond", "ops.array_ops.size", "ops.math_ops.equal"], "numpy_ops.np_array_ops.diag._diag.<lambda1>": ["ops.array_ops.zeros", "<builtin>.abs"], "numpy_ops.np_array_ops.diag._diag.<lambda2>": ["ops.array_ops.matrix_diag"], "numpy_ops.np_array_ops.diag._diag_part": ["ops.array_ops.matrix_diag_part", "numpy_ops.np_utils.logical_or", "numpy_ops.np_utils.cond", "numpy_ops.np_utils.greater_equal", "numpy_ops.np_utils.getitem", "ops.array_ops.shape", "numpy_ops.np_utils.less_equal"], "numpy_ops.np_utils.getitem": ["numpy_ops.np_utils._maybe_static"], "numpy_ops.np_utils.less_equal": ["numpy_ops.np_utils._maybe_static"], "numpy_ops.np_utils.greater_equal": ["numpy_ops.np_utils._maybe_static"], "numpy_ops.np_array_ops.diag._diag_part.<lambda1>": ["ops.array_ops.zeros"], "numpy_ops.np_array_ops.diag._diag_part.<lambda2>": [], "numpy_ops.np_array_ops.diag.<lambda1>": ["numpy_ops.np_array_ops.diag._diag"], "numpy_ops.np_array_ops.diag.<lambda2>": ["numpy_ops.np_array_ops.diag._diag_part"], "numpy_ops.np_array_ops.diagonal": ["ops.array_ops.matrix_diag_part", "numpy_ops.np_utils.logical_or", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_utils.cond", "numpy_ops.np_utils.greater_equal", "numpy_ops.np_utils.getitem", "ops.array_ops.shape", "numpy_ops.np_array_ops.moveaxis", "numpy_ops.np_utils.less_equal"], "numpy_ops.np_array_ops.moveaxis": ["ops.array_ops.expand_dims", "ops.array_ops.rank", "<builtin>.ValueError", "<builtin>.sorted", "ops.math_ops.range", "<builtin>.range", "numpy_ops.np_array_ops.asarray", "ops.array_ops.scatter_nd", "numpy_ops.np_array_ops.moveaxis._correct_axis", "<builtin>.zip", "numpy_ops.np_utils._maybe_static", "numpy_ops.np_array_ops.moveaxis._remove_indices", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.len", "ops.array_ops.tensor_scatter_update", "ops.array_ops.transpose"], "numpy_ops.np_array_ops.diagonal._zeros": ["ops.array_ops.zeros", "ops.array_ops.concat"], "numpy_ops.np_array_ops.diagonal.<lambda1>": [], "numpy_ops.np_array_ops.diagflat": ["ops.array_ops.reshape", "numpy_ops.np_array_ops.diag", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops._promote_dtype": ["numpy_ops.np_array_ops._promote_dtype._fast_asarray", "numpy_ops.np_utils.result_type"], "numpy_ops.np_array_ops._promote_dtype._fast_asarray": ["<builtin>.isinstance", "numpy_ops.np_array_ops._array_internal"], "numpy_ops.np_array_ops._promote_dtype_binary": ["numpy_ops.np_utils._result_type_binary", "<builtin>.isinstance", "numpy_ops.np_array_ops._array_internal"], "numpy_ops.np_utils._result_type_binary": ["numpy_ops.np_utils._maybe_get_dtype", "numpy_ops.np_utils.result_type", "numpy_ops.np_dtypes._result_type"], "numpy_ops.np_array_ops.all": ["ops.math_ops.reduce_all", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.any": ["ops.math_ops.reduce_any", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.compress": ["ops.array_ops.boolean_mask", "<builtin>.ValueError", "ops.array_ops.fill", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_array_ops.ravel", "ops.array_ops.concat"], "numpy_ops.np_array_ops.ravel": ["ops.array_ops.reshape", "numpy_ops.np_array_ops.asarray"], "ops.array_ops.boolean_mask": ["ops.gen_math_ops.prod", "ops.array_ops.concat", "<builtin>.ValueError", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "framework.tensor_util.constant_value", "ops.array_ops.reshape", "ops.array_ops.boolean_mask._apply_mask_1d", "framework.ops.name_scope", "framework.tensor_shape.as_shape"], "numpy_ops.np_array_ops.copy": ["numpy_ops.np_array_ops.array"], "numpy_ops.np_array_ops._maybe_promote_to_int": ["numpy_ops.np_array_ops.asarray", "framework.dtypes.as_dtype", "numpy.promote_types"], "numpy.promote_types": [], "numpy_ops.np_array_ops.cumprod": ["numpy_ops.np_array_ops._maybe_promote_to_int", "ops.array_ops.rank", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_array_ops.ravel", "ops.math_ops.cumprod"], "ops.math_ops.cumprod": ["ops.gen_math_ops.cumprod", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "numpy_ops.np_array_ops.cumsum": ["numpy_ops.np_array_ops._maybe_promote_to_int", "ops.array_ops.rank", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_array_ops.ravel", "ops.math_ops.cumsum"], "numpy_ops.np_array_ops.imag": ["ops.math_ops.imag", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops._reduce": ["ops.math_ops.reduce_sum", "ops.math_ops.reduce_mean", "ops.math_ops.reduce_any", "ops.math_ops.reduce_min", "numpy_ops.np_utils.result_type", "numpy_ops.np_array_ops.asarray", "ops.math_ops.reduce_prod", "ops.math_ops.reduce_all", "ops.math_ops.cast", "ops.math_ops.reduce_std", "ops.math_ops.reduce_variance", "ops.math_ops.reduce_max", "<builtin>.isinstance", "numpy.issubdtype", "numpy.iinfo", "numpy_ops.np_dtypes.default_float_type"], "ops.math_ops.reduce_std": ["ops.math_ops.reduce_variance", "ops.gen_math_ops.sqrt", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.math_ops.reduce_variance": ["ops.gen_math_ops.real", "ops.gen_math_ops.mul", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "ops.gen_math_ops.square", "ops.gen_math_ops.conj", "framework.ops.name_scope", "ops.math_ops.reduce_mean"], "numpy_ops.np_array_ops.size": ["numpy.prod", "<builtin>.NotImplementedError", "numpy_ops.np_array_ops.asarray", "ops.array_ops.size_v2", "<builtin>.isinstance"], "ops.array_ops.size_v2": ["ops.array_ops.size"], "numpy_ops.np_array_ops.sum": ["numpy_ops.np_array_ops._reduce"], "numpy_ops.np_array_ops.prod": ["numpy_ops.np_array_ops._reduce"], "numpy_ops.np_array_ops.mean": ["<builtin>.ValueError", "numpy_ops.np_array_ops._reduce"], "numpy_ops.np_array_ops.amax": ["<builtin>.ValueError", "numpy_ops.np_array_ops._reduce"], "numpy_ops.np_array_ops.amin": ["<builtin>.ValueError", "numpy_ops.np_array_ops._reduce"], "numpy_ops.np_array_ops.var": ["<builtin>.ValueError", "ops.math_ops.cast", "numpy_ops.np_utils.result_type", "numpy_ops.np_array_ops._reduce"], "numpy_ops.np_array_ops.var.reduce_fn": ["ops.math_ops.reduce_sum", "ops.math_ops.reduce_mean", "ops.array_ops.rank", "ops.array_ops.size", "ops.math_ops.divide", "ops.array_ops.gather", "ops.math_ops.reduce_prod", "ops.math_ops.real", "ops.math_ops.cast", "ops.math_ops.conj", "ops.math_ops.square", "ops.array_ops.shape"], "numpy_ops.np_array_ops.std": ["numpy_ops.np_array_ops._reduce"], "numpy_ops.np_array_ops.real": ["ops.math_ops.real", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.repeat": ["numpy.prod", "ops.array_ops.repeat", "numpy_ops.np_array_ops.asarray", "numpy.array", "numpy.ravel"], "numpy.ravel": [], "ops.array_ops.repeat": ["ops.array_ops.reshape", "ops.array_ops.repeat_with_axis"], "numpy_ops.np_array_ops.around": ["math.pow", "ops.math_ops.divide", "numpy_ops.np_array_ops.asarray", "ops.math_ops.cast", "ops.math_ops.multiply", "numpy.issubdtype", "ops.math_ops.round", "numpy_ops.np_dtypes.default_float_type"], "ops.math_ops.round": ["ops.gen_math_ops.round", "framework.ops.convert_to_tensor"], "numpy_ops.np_array_ops.reshape": ["<builtin>.ValueError", "numpy_ops.np_array_ops.asarray", "ops.array_ops.reshape", "<builtin>.isinstance", "ops.array_ops.transpose"], "numpy_ops.np_array_ops._reshape_method_wrapper": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "numpy_ops.np_array_ops.reshape"], "numpy_ops.np_array_ops.expand_dims": ["ops.array_ops.expand_dims", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.squeeze": ["ops.array_ops.squeeze", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.transpose": ["ops.array_ops.transpose", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.swapaxes": ["ops.array_ops.rank", "ops.math_ops.range", "<builtin>.range", "numpy_ops.np_array_ops.swapaxes.adjust_axes", "numpy_ops.np_array_ops.asarray", "<builtin>.list", "<builtin>.isinstance", "ops.array_ops.tensor_scatter_update", "ops.array_ops.transpose"], "numpy_ops.np_array_ops.swapaxes.adjust_axes": ["util.nest.map_structure"], "numpy_ops.np_array_ops.swapaxes.adjust_axes.f": ["numpy_ops.np_utils.add", "<builtin>.isinstance", "ops.array_ops.where_v2"], "numpy_ops.np_utils.add": ["numpy_ops.np_utils._maybe_static"], "ops.array_ops.tensor_scatter_update": [], "numpy_ops.np_utils._maybe_static": ["numpy_ops.np_utils.get_static_value"], "numpy_ops.np_array_ops.moveaxis._correct_axis": [], "numpy_ops.np_array_ops.moveaxis._remove_indices": ["ops.array_ops.stack", "ops.array_ops.unstack", "ops.sort_ops.sort", "ops.array_ops.concat", "<builtin>.len"], "ops.array_ops.scatter_nd": [], "numpy_ops.np_array_ops.pad": ["<builtin>.ValueError", "ops.array_ops.pad", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.take": ["<builtin>.ValueError", "ops.clip_ops.clip_by_value", "ops.array_ops.gather", "numpy_ops.np_array_ops.asarray", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.math_ops.floormod"], "numpy_ops.np_array_ops.where": ["numpy_ops.np_array_ops.nonzero", "<builtin>.ValueError", "ops.array_ops.where_v2", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_array_ops._promote_dtype"], "numpy_ops.np_array_ops.nonzero": ["ops.array_ops.unstack", "<builtin>.ValueError", "ops.array_ops.where_v2", "numpy_ops.np_array_ops.atleast_1d", "ops.math_ops.cast"], "numpy_ops.np_array_ops.select": ["numpy_ops.np_array_ops.where", "<builtin>.ValueError", "<builtin>.zip", "numpy_ops.np_array_ops._promote_dtype", "<builtin>.len"], "numpy_ops.np_utils.Link": [], "numpy_ops.np_array_ops.shape": ["numpy_ops.np_array_ops.asarray"], "numpy_ops.np_utils.NoLink": [], "numpy_ops.np_array_ops.ndim": ["numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.isscalar": ["numpy_ops.np_array_ops.ndim"], "numpy_ops.np_array_ops._boundaries_to_sizes": ["<builtin>.min", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.max", "<builtin>.len"], "numpy_ops.np_array_ops.split": ["<builtin>.isinstance", "ops.array_ops.split", "numpy_ops.np_array_ops._boundaries_to_sizes", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops._split_on_axis": ["numpy_ops.np_utils.np_doc"], "numpy_ops.np_array_ops._split_on_axis.f": ["numpy_ops.np_array_ops.split"], "numpy_ops.np_array_ops.broadcast_to": ["numpy_ops.np_array_ops.full"], "numpy_ops.np_array_ops.stack": ["ops.array_ops.stack", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_array_ops.swapaxes", "numpy_ops.np_array_ops._promote_dtype", "<builtin>.isinstance"], "numpy_ops.np_array_ops.hstack": ["ops.array_ops.rank", "numpy_ops.np_array_ops.atleast_1d", "numpy_ops.np_utils.cond", "ops.math_ops.equal", "numpy_ops.np_array_ops._promote_dtype", "<builtin>.isinstance"], "numpy_ops.np_array_ops.hstack.<lambda1>": ["ops.array_ops.concat"], "numpy_ops.np_array_ops.hstack.<lambda2>": ["ops.array_ops.concat"], "numpy_ops.np_array_ops.vstack": ["numpy_ops.np_array_ops._promote_dtype", "<builtin>.isinstance", "numpy_ops.np_array_ops.atleast_2d", "ops.array_ops.concat"], "numpy_ops.np_array_ops.atleast_2d": ["numpy_ops.np_array_ops._atleast_nd"], "numpy_ops.np_array_ops.dstack": ["numpy_ops.np_array_ops._promote_dtype", "<builtin>.isinstance", "ops.array_ops.concat", "numpy_ops.np_array_ops.atleast_3d"], "numpy_ops.np_array_ops.atleast_3d": ["numpy_ops.np_array_ops._atleast_nd"], "numpy_ops.np_array_ops._pad_left_to": ["ops.math_ops.maximum", "ops.array_ops.size", "ops.array_ops.pad", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops._atleast_nd": ["<builtin>.map", "<builtin>.len", "<builtin>.list"], "numpy_ops.np_array_ops._atleast_nd.f": ["numpy_ops.np_utils.cond", "numpy_ops.np_utils.greater", "ops.array_ops.rank", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops._atleast_nd.f.<lambda1>": ["numpy_ops.np_array_ops._pad_left_to", "numpy_ops.np_array_ops.atleast_3d.new_shape", "ops.array_ops.shape", "numpy_ops.np_array_ops.reshape"], "numpy_ops.np_array_ops.atleast_3d.new_shape": ["numpy_ops.np_utils.cond", "ops.array_ops.size", "ops.math_ops.equal"], "numpy_ops.np_array_ops._atleast_nd.f.<lambda2>": [], "numpy_ops.np_array_ops.atleast_3d.new_shape.<lambda1>": ["framework.constant_op.constant"], "numpy_ops.np_array_ops.atleast_3d.new_shape.<lambda2>": ["numpy_ops.np_utils.cond", "ops.math_ops.equal"], "numpy_ops.np_array_ops.atleast_3d.new_shape.<lambda2>.<lambda1>": ["ops.array_ops.pad"], "numpy_ops.np_array_ops.atleast_3d.new_shape.<lambda2>.<lambda2>": ["ops.array_ops.pad"], "numpy_ops.np_array_ops.diag_indices": ["<builtin>.ValueError", "ops.math_ops.range"], "numpy_ops.np_array_ops.tri": ["ops.array_ops.zeros", "numpy_ops.np_utils.result_type", "ops.array_ops.ones", "ops.math_ops.cast", "ops.math_ops.logical_not", "ops.array_ops.matrix_band_part", "numpy_ops.np_dtypes.default_float_type"], "numpy_ops.np_array_ops.tril": ["<builtin>.ValueError", "ops.array_ops.where_v2", "ops.array_ops.broadcast_to", "numpy_ops.np_array_ops.asarray", "framework.constant_op.constant", "ops.array_ops.shape", "<builtin>.len", "numpy_ops.np_array_ops.tri"], "numpy_ops.np_array_ops.triu": ["<builtin>.ValueError", "ops.array_ops.where_v2", "ops.array_ops.broadcast_to", "numpy_ops.np_array_ops.asarray", "framework.constant_op.constant", "ops.array_ops.shape", "<builtin>.len", "numpy_ops.np_array_ops.tri"], "numpy_ops.np_array_ops.flip": ["ops.array_ops.rank", "ops.math_ops.range", "numpy_ops.np_array_ops.asarray", "ops.array_ops.reverse", "numpy_ops.np_utils._canonicalize_axis"], "numpy_ops.np_utils._canonicalize_axis": ["numpy_ops.np_utils._canonicalize_axes"], "numpy_ops.np_array_ops.flipud": ["numpy_ops.np_array_ops.flip"], "numpy_ops.np_array_ops.fliplr": ["numpy_ops.np_array_ops.flip"], "numpy_ops.np_array_ops.roll": ["ops.array_ops.reshape", "ops.manip_ops.roll", "ops.array_ops.shape", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_array_ops.rot90": ["ops.array_ops.rank", "ops.math_ops.range", "numpy_ops.np_array_ops.transpose", "numpy_ops.np_utils._canonicalize_axes", "ops.array_ops.tensor_scatter_update", "numpy_ops.np_array_ops.flip"], "numpy_ops.np_utils._canonicalize_axes": ["numpy_ops.np_utils._canonicalize_axes.<lambda2>", "numpy_ops.np_utils._canonicalize_axes.<lambda1>", "numpy_ops.np_utils._maybe_static", "<builtin>.isinstance"], "numpy_ops.np_array_ops.vander": ["ops.array_ops.expand_dims", "ops.control_flow_ops.Assert", "ops.array_ops.rank", "<builtin>.ValueError", "ops.math_ops.range", "numpy_ops.np_array_ops.asarray", "ops.math_ops.cast", "numpy_ops.np_utils.get_static_value", "ops.array_ops.shape", "ops.math_ops.equal", "ops.math_ops.pow"], "numpy_ops.np_utils.get_static_value": ["framework.tensor_util.constant_value", "<builtin>.isinstance"], "numpy_ops.np_array_ops.ix_": ["ops.control_flow_ops.Assert", "ops.array_ops.rank", "<builtin>.ValueError", "numpy_ops.np_array_ops.nonzero", "numpy_ops.np_array_ops.asarray", "<builtin>.enumerate", "numpy_ops.np_utils.get_static_value", "ops.math_ops.equal", "ops.array_ops.reshape", "<builtin>.len"], "numpy_ops.np_array_ops.broadcast_arrays": ["<builtin>.ValueError", "numpy_ops.np_utils.tf_broadcast", "numpy_ops.np_array_ops.asarray"], "numpy_ops.np_utils.tf_broadcast": ["ops.array_ops.shape", "ops.array_ops.broadcast_to", "ops.array_ops.broadcast_dynamic_shape", "<builtin>.len"], "numpy_ops.np_array_ops.sign": ["<builtin>.ValueError", "numpy_ops.np_array_ops.asarray", "ops.math_ops.real", "ops.math_ops.cast", "ops.math_ops.sign", "numpy.issubdtype"], "numpy_ops.np_array_ops.take_along_axis": ["ops.array_ops.rank", "numpy_ops.np_utils.subtract", "ops.array_ops.broadcast_dynamic_shape", "ops.array_ops.where_v2", "ops.array_ops.broadcast_to", "numpy_ops.np_array_ops.asarray", "ops.array_ops.gather", "numpy_ops.np_utils.cond", "ops.array_ops.shape", "numpy_ops.np_array_ops.take_along_axis", "ops.math_ops.equal", "ops.array_ops.reshape", "ops.array_ops.tensor_scatter_update"], "numpy_ops.np_array_ops.take_along_axis.<lambda1>": ["numpy_ops.np_array_ops.swapaxes"], "numpy_ops.np_utils.subtract": ["numpy_ops.np_utils._maybe_static"], "numpy_ops.np_array_ops.take_along_axis.<lambda2>": [], "numpy_ops.np_array_ops.take_along_axis.<lambda3>": ["numpy_ops.np_array_ops.take_along_axis.<lambda1>"], "numpy_ops.np_array_ops.take_along_axis.<lambda4>": [], "numpy_ops.np_array_ops.take_along_axis.<lambda5>": ["numpy_ops.np_array_ops.take_along_axis.<lambda1>"], "numpy_ops.np_array_ops.take_along_axis.<lambda6>": [], "numpy_ops.np_array_ops.take_along_axis.<lambda7>": ["numpy_ops.np_array_ops.take_along_axis.<lambda1>"], "numpy_ops.np_array_ops._as_index": ["ops.array_ops.where_v2", "<builtin>.NotImplementedError", "numpy_ops.np_array_ops.asarray", "<builtin>.IndexError", "ops.math_ops.cast", "numpy.promote_types", "ops.array_ops.reshape", "<builtin>.isinstance", "numpy.issubdtype"], "numpy_ops.np_array_ops._slice_helper": ["<builtin>.sorted", "ops.array_ops.where_v2", "ops.array_ops.concat", "ops.array_ops.tensor_scatter_max", "ops.array_ops.tensor_scatter_update", "framework.ops.name_scope", "ops.array_ops.rank", "ops.math_ops.maximum", "numpy_ops.np_utils.tf_broadcast", "<builtin>.enumerate", "numpy_ops.np_array_ops.moveaxis", "ops.math_ops.cumprod", "ops.array_ops.gather_nd", "numpy_ops.np_utils._maybe_static", "numpy_ops.np_array_ops._promote_dtype", "<builtin>.isinstance", "numpy_ops.np_array_ops._as_index", "ops.array_ops.stack", "ops.array_ops.tensor_scatter_add", "ops.array_ops.strided_slice", "numpy_ops.np_array_ops._slice_helper.range_", "ops.array_ops.tensor_scatter_min", "<builtin>.NotImplementedError", "ops.array_ops.tensor_strided_slice_update", "ops.math_ops.minimum", "ops.array_ops.shape", "numpy_ops.np_array_ops._slice_helper._tensordot", "<builtin>.len", "ops.math_ops.add", "<builtin>.range", "ops.array_ops.gather", "framework.constant_op.constant", "ops.math_ops.cast", "ops.array_ops.reshape"], "ops.array_ops.tensor_strided_slice_update": [], "ops.array_ops.strided_slice": ["ops.array_ops.ones_like", "ops.gen_array_ops.strided_slice"], "ops.array_ops.tensor_scatter_add": [], "ops.array_ops.tensor_scatter_max": [], "ops.array_ops.tensor_scatter_min": [], "numpy_ops.np_array_ops._slice_helper.range_": ["<builtin>.range"], "numpy_ops.np_array_ops._slice_helper._tensordot": ["ops.math_ops.reduce_sum", "ops.array_ops.shape", "ops.array_ops.broadcast_to"], "numpy_ops.np_array_ops._as_spec_tuple": ["<builtin>.isinstance", "<builtin>.tuple"], "numpy_ops.np_array_ops._getitem": ["numpy_ops.np_array_ops._slice_helper", "<builtin>.isinstance", "numpy_ops.np_array_ops._as_spec_tuple", "ops.array_ops.boolean_mask"], "numpy_ops.np_array_ops._with_index_update_helper": ["numpy_ops.np_array_ops._promote_dtype_binary", "numpy_ops.np_array_ops.nonzero", "numpy_ops.np_array_ops._slice_helper", "numpy_ops.np_array_ops._as_spec_tuple", "<builtin>.isinstance"], "numpy_ops.np_config": ["numpy_ops.np_export.np_export"], "numpy_ops.np_export.np_export": ["util.tf_export.tf_export", "numpy_ops.np_export.public_name"], "numpy_ops.np_config.enable_numpy_behavior": ["numpy_ops.np_math_ops.enable_numpy_methods_on_tensor", "framework.ops.enable_numpy_style_slicing", "framework.ops.enable_numpy_style_type_promotion", "numpy_ops.np_dtypes.set_prefer_float32"], "framework.ops.enable_numpy_style_type_promotion": [], "framework.ops.enable_numpy_style_slicing": [], "numpy_ops.np_math_ops.enable_numpy_methods_on_tensor": ["<builtin>.setattr", "<builtin>.property"], "numpy_ops.np_dtypes.set_prefer_float32": [], "numpy_ops.np_dtypes": ["numpy_ops.np_export.np_export_constant", "numpy_ops.np_export.np_export", "numpy.dtype"], "numpy_ops.np_dtypes.is_prefer_float32": [], "numpy_ops.np_dtypes.is_allow_float64": [], "numpy_ops.np_dtypes.set_allow_float64": [], "numpy_ops.np_dtypes.canonicalize_dtype": [], "numpy_ops.np_dtypes._result_type": ["framework.dtypes.as_dtype", "numpy.result_type", "numpy_ops.np_dtypes.canonicalize_dtype", "numpy_ops.np_dtypes._result_type.preprocess_float"], "numpy_ops.np_dtypes._result_type.preprocess_float": ["<builtin>.isinstance", "numpy.float32", "numpy_ops.np_dtypes.is_prefer_float32", "numpy.complex64"], "numpy.complex64": [], "numpy.result_type": [], "numpy_ops.np_dtypes._get_cached_dtype": ["numpy.dtype"], "numpy_ops.np_export": [], "numpy_ops.np_export.public_name": [], "numpy_ops.np_math_ops": ["<builtin>.setattr", "numpy_ops.np_utils.AliasOf", "numpy_ops.np_math_ops._make_nan_reduction", "numpy_ops.np_utils.np_doc", "numpy_ops.np_export.np_export_constant", "numpy_ops.np_utils.np_doc_only"], "numpy_ops.np_math_ops.dot": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.dot.f": ["ops.array_ops.rank", "numpy_ops.np_utils.cond", "ops.math_ops.equal", "numpy_ops.np_utils.logical_or"], "numpy_ops.np_math_ops.dot.f.<lambda1>": [], "numpy_ops.np_math_ops.dot.f.<lambda2>": ["ops.array_ops.rank", "ops.math_ops.equal", "numpy_ops.np_utils.cond"], "numpy_ops.np_math_ops.dot.f.<lambda2>.<lambda1>": ["ops.math_ops.tensordot"], "ops.math_ops.tensordot": ["ops.math_ops.matmul", "ops.math_ops.tensordot._tensordot_axes", "ops.array_ops.concat", "<builtin>.isinstance", "ops.math_ops.tensordot._tensordot_reshape", "framework.ops.name_scope", "ops.array_ops.reshape", "framework.ops.convert_to_tensor"], "numpy_ops.np_math_ops.dot.f.<lambda2>.<lambda2>": ["ops.math_ops.tensordot"], "numpy_ops.np_math_ops._bin_op": ["numpy_ops.np_math_ops.true_divide.f", "numpy_ops.np_math_ops.dot.f", "numpy_ops.np_math_ops.lcm.f", "numpy_ops.np_math_ops.inner.f", "numpy_ops.np_array_ops._promote_dtype_binary", "ops.math_ops.atan2", "numpy_ops.np_math_ops.minimum.min_or_and", "numpy_ops.np_math_ops.tensordot.<lambda1>", "numpy_ops.np_math_ops.mod.f", "numpy_ops.np_math_ops.isclose.f", "ops.math_ops.nextafter", "numpy_ops.np_math_ops.outer.f", "ops.math_ops.subtract", "numpy_ops.np_math_ops._bitwise_binary_op.f", "numpy_ops.np_math_ops.multiply.mul_or_and", "numpy_ops.np_math_ops.floor_divide.f", "numpy_ops.np_math_ops.polyval.f", "numpy_ops.np_math_ops.cross.f", "numpy_ops.np_math_ops._tf_gcd", "numpy_ops.np_array_ops.array", "numpy_ops.np_math_ops.heaviside.f", "numpy_ops.np_math_ops.matmul.f", "numpy_ops.np_math_ops.maximum.max_or_or", "numpy_ops.np_math_ops.add.add_or_or", "ops.math_ops.pow"], "numpy_ops.np_math_ops.true_divide.f": ["numpy_ops.np_dtypes.is_allow_float64", "ops.math_ops.cast", "numpy_ops.np_dtypes.default_float_type", "ops.math_ops.truediv", "numpy_ops.np_math_ops.true_divide._avoid_float64"], "numpy_ops.np_math_ops.multiply.mul_or_and": ["ops.math_ops.logical_and", "ops.math_ops.multiply"], "numpy_ops.np_math_ops.floor_divide.f": ["ops.math_ops.floordiv", "ops.math_ops.cast"], "numpy_ops.np_math_ops.lcm.f": ["ops.math_ops.equal", "ops.math_ops.abs", "framework.constant_op.constant", "numpy_ops.np_math_ops._tf_gcd", "ops.array_ops.where_v2"], "numpy_ops.np_math_ops.inner.f": ["ops.array_ops.rank", "numpy_ops.np_utils.cond", "ops.math_ops.equal", "numpy_ops.np_utils.logical_or"], "numpy_ops.np_math_ops.polyval.f": ["ops.array_ops.unstack", "ops.array_ops.broadcast_to", "<builtin>.len", "ops.array_ops.reshape", "ops.math_ops.polyval"], "numpy_ops.np_math_ops.cross.f": ["ops.array_ops.shape", "numpy_ops.np_utils.cond", "numpy_ops.np_utils.add", "numpy_ops.np_math_ops.cross.f.maybe_pad_0", "numpy_ops.np_math_ops.cross.f.maybe_move_axis_to_last", "numpy_ops.np_utils.tf_broadcast", "ops.math_ops.cross", "numpy_ops.np_utils.getitem", "ops.array_ops.rank"], "numpy_ops.np_math_ops._tf_gcd": ["ops.array_ops.broadcast_to", "numpy.issubdtype", "ops.array_ops.shape", "ops.math_ops.abs", "ops.array_ops.broadcast_dynamic_shape", "ops.control_flow_ops.while_loop", "<builtin>.ValueError"], "numpy_ops.np_math_ops.heaviside.f": ["framework.constant_op.constant", "ops.array_ops.where_v2"], "ops.math_ops.atan2": [], "numpy_ops.np_math_ops.minimum.min_or_and": ["ops.math_ops.minimum", "ops.math_ops.logical_and"], "numpy_ops.np_math_ops.tensordot.<lambda1>": ["ops.math_ops.tensordot"], "numpy_ops.np_math_ops.matmul.f": ["ops.math_ops.equal", "ops.gen_math_ops.mat_mul", "numpy_ops.np_utils.cond", "numpy_ops.np_utils.tf_rank", "<builtin>.str", "sys.exc_info", "<builtin>.ValueError", "six.reraise"], "numpy_ops.np_math_ops.mod.f": ["ops.math_ops.cast", "ops.math_ops.mod"], "numpy_ops.np_math_ops.isclose.f": ["ops.math_ops.abs", "ops.math_ops.is_nan", "framework.ops.convert_to_tensor", "numpy.issubdtype"], "numpy_ops.np_math_ops.maximum.max_or_or": ["ops.math_ops.maximum", "ops.math_ops.logical_or"], "numpy_ops.np_math_ops.add.add_or_or": ["ops.math_ops.add", "ops.math_ops.logical_or"], "ops.math_ops.nextafter": [], "numpy_ops.np_math_ops.outer.f": ["ops.array_ops.reshape"], "numpy_ops.np_math_ops._bitwise_binary_op.f": ["ops.bitwise_ops.bitwise_and", "ops.bitwise_ops.bitwise_xor", "ops.math_ops.cast", "ops.bitwise_ops.bitwise_or"], "numpy_ops.np_math_ops.add": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.subtract": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.multiply": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.true_divide": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.true_divide._avoid_float64": ["ops.math_ops.cast"], "numpy_ops.np_math_ops.divide": ["numpy_ops.np_math_ops.true_divide"], "numpy_ops.np_math_ops.floor_divide": ["numpy_ops.np_math_ops._bin_op"], "ops.math_ops.floordiv": ["ops.gen_math_ops.floor_div", "framework.ops.name_scope"], "numpy_ops.np_math_ops.mod": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.remainder": ["numpy_ops.np_math_ops.mod"], "numpy_ops.np_math_ops.divmod": ["numpy_ops.np_math_ops.floor_divide", "numpy_ops.np_math_ops.mod"], "numpy_ops.np_math_ops.maximum": ["ops.nn_ops.relu", "<builtin>.isinstance", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.minimum": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.clip": ["numpy_ops.np_array_ops._promote_dtype", "numpy_ops.np_math_ops.minimum", "numpy_ops.np_utils.tf_broadcast", "numpy_ops.np_math_ops.maximum", "<builtin>.ValueError", "ops.clip_ops.clip_by_value"], "numpy_ops.np_math_ops.matmul": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_utils.tf_rank": ["ops.array_ops.rank"], "numpy_ops.np_math_ops.matmul.f.<lambda1>": ["ops.math_ops.tensordot"], "numpy_ops.np_math_ops.matmul.f.<lambda2>": ["numpy_ops.np_utils.cond", "ops.math_ops.equal", "numpy_ops.np_utils.tf_rank"], "numpy_ops.np_math_ops.matmul.f.<lambda2>.<lambda1>": ["ops.math_ops.tensordot"], "numpy_ops.np_math_ops.matmul.f.<lambda2>.<lambda2>": ["ops.math_ops.matmul"], "numpy_ops.np_math_ops.tensordot": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.inner": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.inner.f.<lambda1>": [], "numpy_ops.np_math_ops.inner.f.<lambda2>": ["ops.math_ops.tensordot"], "numpy_ops.np_math_ops.cross": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.cross.f.maybe_move_axis_to_last": ["ops.array_ops.rank", "numpy_ops.np_utils.cond", "numpy_ops.np_utils.subtract"], "numpy_ops.np_math_ops.cross.f.maybe_move_axis_to_last.move_axis_to_last": ["ops.array_ops.transpose", "ops.array_ops.rank", "ops.array_ops.concat", "ops.math_ops.range"], "numpy_ops.np_math_ops.cross.f.maybe_move_axis_to_last.<lambda1>": [], "numpy_ops.np_math_ops.cross.f.maybe_move_axis_to_last.<lambda2>": ["numpy_ops.np_math_ops.cross.f.maybe_move_axis_to_last.move_axis_to_last"], "numpy_ops.np_math_ops.cross.f.maybe_pad_0": ["ops.math_ops.equal", "numpy_ops.np_utils.cond"], "numpy_ops.np_math_ops.cross.f.maybe_pad_0.pad_0": ["ops.array_ops.zeros", "ops.array_ops.pad", "ops.array_ops.concat", "framework.constant_op.constant", "ops.array_ops.rank"], "numpy_ops.np_math_ops.cross.f.maybe_pad_0.<lambda1>": ["numpy_ops.np_math_ops.cross.f.maybe_pad_0.pad_0"], "numpy_ops.np_math_ops.cross.f.maybe_pad_0.<lambda2>": [], "ops.math_ops.cross": [], "numpy_ops.np_math_ops.cross.f.move_last_to_axis": ["ops.array_ops.transpose", "ops.array_ops.rank", "ops.array_ops.concat", "ops.math_ops.range"], "numpy_ops.np_math_ops.cross.f.<lambda1>": [], "numpy_ops.np_math_ops.cross.f.<lambda2>": ["ops.array_ops.rank", "numpy_ops.np_utils.cond", "numpy_ops.np_utils.subtract"], "numpy_ops.np_math_ops.cross.f.<lambda2>.<lambda1>": [], "numpy_ops.np_math_ops.cross.f.<lambda2>.<lambda2>": ["numpy_ops.np_math_ops.cross.f.move_last_to_axis"], "numpy_ops.np_math_ops.vdot": ["numpy_ops.np_array_ops._promote_dtype", "numpy_ops.np_array_ops.reshape", "numpy_ops.np_math_ops.conj", "numpy_ops.np_math_ops.dot"], "numpy_ops.np_math_ops.conj": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.power": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.float_power": ["numpy_ops.np_math_ops.power"], "numpy_ops.np_math_ops.arctan2": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.nextafter": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.heaviside": ["numpy_ops.np_dtypes.default_float_type", "numpy.issubdtype", "numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.hypot": ["numpy_ops.np_math_ops.sqrt", "numpy_ops.np_math_ops.square"], "numpy_ops.np_math_ops.square": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.sqrt": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.kron": ["ops.array_ops.shape", "numpy_ops.np_array_ops.reshape", "numpy_ops.np_utils.cond", "numpy_ops.np_array_ops._promote_dtype", "numpy_ops.np_math_ops.kron._make_shape"], "numpy_ops.np_math_ops.kron.<lambda1>": ["numpy_ops.np_array_ops.reshape", "numpy_ops.np_array_ops._pad_left_to"], "numpy_ops.np_math_ops.kron.<lambda2>": [], "numpy_ops.np_math_ops.kron.<lambda3>": ["numpy_ops.np_array_ops.reshape", "numpy_ops.np_array_ops._pad_left_to"], "numpy_ops.np_math_ops.kron.<lambda4>": [], "numpy_ops.np_math_ops.kron._make_shape": ["ops.array_ops.ones_like", "ops.array_ops.reshape", "ops.array_ops.stack"], "numpy_ops.np_math_ops.outer": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.logaddexp": ["numpy_ops.np_math_ops.log1p", "numpy_ops.np_math_ops.abs", "numpy_ops.np_math_ops.exp", "numpy_ops.np_array_ops.where", "numpy_ops.np_math_ops.maximum", "numpy_ops.np_math_ops.isnan"], "numpy_ops.np_math_ops.isnan": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.abs": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.exp": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.log1p": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.logaddexp2": ["numpy.log", "numpy_ops.np_math_ops.log1p", "numpy_ops.np_math_ops.abs", "numpy_ops.np_math_ops.exp2", "numpy_ops.np_array_ops.where", "numpy_ops.np_math_ops.maximum", "numpy_ops.np_math_ops.isnan"], "numpy_ops.np_math_ops.exp2": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.polyval": ["numpy_ops.np_math_ops._bin_op"], "ops.math_ops.polyval": ["<builtin>.len", "framework.ops.name_scope", "ops.array_ops.zeros_like", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.type", "<builtin>.isinstance", "util.nest.flatten", "framework.ops.convert_to_tensor"], "numpy_ops.np_math_ops.isclose": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.allclose": ["numpy_ops.np_array_ops.all", "numpy_ops.np_math_ops.isclose"], "numpy_ops.np_math_ops._tf_gcd._gcd_cond_fn": ["ops.math_ops.reduce_any"], "numpy_ops.np_math_ops._tf_gcd._gcd_body_fn": ["framework.constant_op.constant", "ops.math_ops.mod", "ops.array_ops.where_v2"], "numpy_ops.np_math_ops.gcd": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops.lcm": ["numpy_ops.np_math_ops._bin_op"], "numpy_ops.np_math_ops._bitwise_binary_op": ["numpy_ops.np_math_ops._bin_op"], "ops.bitwise_ops.bitwise_and": [], "ops.bitwise_ops.bitwise_or": [], "ops.bitwise_ops.bitwise_xor": [], "numpy_ops.np_math_ops.bitwise_and": ["numpy_ops.np_math_ops._bitwise_binary_op"], "numpy_ops.np_math_ops.bitwise_or": ["numpy_ops.np_math_ops._bitwise_binary_op"], "numpy_ops.np_math_ops.bitwise_xor": ["numpy_ops.np_math_ops._bitwise_binary_op"], "numpy_ops.np_utils.AliasOf": [], "numpy_ops.np_math_ops.bitwise_not": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.bitwise_not.f": ["ops.math_ops.logical_not", "ops.bitwise_ops.invert"], "ops.bitwise_ops.invert": [], "numpy_ops.np_math_ops._scalar": ["ops.math_ops.reciprocal", "ops.math_ops.log1p", "numpy_ops.np_math_ops.bitwise_not.f", "ops.math_ops.atan", "ops.math_ops.sin", "ops.math_ops.tan", "numpy_ops.np_math_ops.signbit.f", "numpy_ops.np_math_ops.fix.f", "ops.math_ops.sqrt", "ops.math_ops.floor", "ops.math_ops.cosh", "numpy_ops.np_dtypes.default_float_type", "ops.math_ops.exp", "numpy_ops.np_math_ops.deg2rad.f", "ops.math_ops.atanh", "numpy_ops.np_array_ops.asarray", "ops.math_ops.asin", "ops.math_ops.square", "ops.math_ops.is_finite", "ops.math_ops.log", "ops.math_ops.conj", "ops.math_ops.acosh", "numpy.issubdtype", "ops.math_ops.abs", "ops.math_ops.expm1", "ops.math_ops.acos", "numpy_ops.np_math_ops.sinc.f", "ops.math_ops.cos", "ops.math_ops.is_inf", "numpy_ops.np_math_ops.angle.f", "numpy_ops.np_math_ops.cbrt.f", "ops.math_ops.tanh", "numpy_ops.np_math_ops.exp2.f", "numpy_ops.np_math_ops.positive.<lambda1>", "numpy_ops.np_math_ops.diff.f", "ops.math_ops.ceil", "ops.math_ops.is_nan", "ops.math_ops.sinh", "ops.math_ops.negative", "ops.math_ops.asinh"], "ops.math_ops.reciprocal": [], "ops.math_ops.atan": [], "ops.math_ops.tan": [], "numpy_ops.np_math_ops.signbit.f": ["ops.array_ops.shape", "ops.array_ops.fill"], "numpy_ops.np_math_ops.fix.f": ["ops.math_ops.floor", "ops.math_ops.ceil", "ops.array_ops.where_v2"], "ops.math_ops.cosh": [], "numpy_ops.np_math_ops.deg2rad.f": [], "ops.math_ops.atanh": [], "ops.math_ops.asin": [], "ops.math_ops.acosh": [], "ops.math_ops.acos": ["ops.gen_math_ops.acos"], "numpy_ops.np_math_ops.sinc.f": ["ops.array_ops.ones_like", "ops.math_ops.sin", "ops.array_ops.where_v2"], "numpy_ops.np_math_ops.angle.f": ["ops.math_ops.angle", "ops.array_ops.where_v2"], "numpy_ops.np_math_ops.cbrt.f": ["ops.math_ops.abs", "ops.array_ops.where_v2"], "numpy_ops.np_math_ops.exp2.f": [], "numpy_ops.np_math_ops.positive.<lambda1>": [], "numpy_ops.np_math_ops.diff.f": ["<builtin>.tuple", "<builtin>.slice", "<builtin>.ValueError", "<builtin>.range"], "ops.math_ops.sinh": [], "ops.math_ops.asinh": [], "numpy_ops.np_math_ops.log": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.absolute": ["numpy_ops.np_math_ops.abs"], "numpy_ops.np_math_ops.fabs": ["numpy_ops.np_math_ops.abs"], "numpy_ops.np_math_ops.ceil": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.floor": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.negative": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.reciprocal": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.signbit": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.sin": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.cos": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.tan": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.sinh": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.cosh": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.tanh": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.arcsin": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.arccos": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.arctan": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.arcsinh": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.arccosh": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.arctanh": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.deg2rad": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.rad2deg": [], "numpy_ops.np_math_ops.angle": ["numpy_ops.np_math_ops._scalar", "numpy_ops.np_math_ops.rad2deg"], "ops.math_ops.angle": ["ops.array_ops.where", "ops.array_ops.zeros_like", "framework.ops.name_scope", "ops.gen_math_ops.angle", "ops.array_ops.ones_like", "framework.ops.convert_to_tensor"], "numpy_ops.np_math_ops.cbrt": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.conjugate": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.expm1": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.fix": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.iscomplex": ["numpy_ops.np_array_ops.imag"], "numpy_ops.np_math_ops.isreal": ["numpy_ops.np_array_ops.imag"], "numpy_ops.np_math_ops.iscomplexobj": ["numpy.issubdtype", "numpy_ops.np_array_ops.array"], "numpy_ops.np_math_ops.isrealobj": ["numpy_ops.np_math_ops.iscomplexobj"], "numpy_ops.np_math_ops._make_nan_reduction": ["numpy_ops.np_utils.np_doc"], "numpy_ops.np_math_ops._make_nan_reduction.nan_reduction": ["numpy_ops.np_array_ops.where", "numpy_ops.np_array_ops.sum", "numpy_ops.np_array_ops.prod", "numpy_ops.np_array_ops.array", "numpy_ops.np_math_ops.isnan"], "numpy_ops.np_math_ops.nanmean": ["numpy.issubdtype", "numpy_ops.np_math_ops._make_nan_reduction.nan_reduction", "numpy_ops.np_array_ops.mean", "numpy_ops.np_math_ops.logical_not", "numpy_ops.np_array_ops.sum", "numpy_ops.np_array_ops.array", "numpy_ops.np_math_ops.isnan"], "numpy_ops.np_math_ops.logical_not": ["ops.math_ops.logical_not", "numpy_ops.np_array_ops.array"], "numpy_ops.np_math_ops.isfinite": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.isinf": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.isneginf": ["numpy_ops.np_array_ops.full_like"], "numpy_ops.np_math_ops.isposinf": ["numpy_ops.np_array_ops.full_like"], "numpy_ops.np_math_ops.log2": ["numpy.log", "numpy_ops.np_math_ops.log"], "numpy_ops.np_math_ops.log10": ["numpy.log", "numpy_ops.np_math_ops.log"], "numpy_ops.np_math_ops.positive": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.sinc": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops.diff": ["numpy_ops.np_math_ops._scalar"], "numpy_ops.np_math_ops._wrap": [], "numpy_ops.np_math_ops._wrap._f": ["<builtin>.getattr"], "numpy_ops.np_math_ops._comparison": ["ops.math_ops.equal", "numpy_ops.np_math_ops.array_equal.f", "ops.math_ops.cast", "ops.math_ops.greater_equal", "ops.math_ops.greater", "numpy_ops.np_utils.result_type", "ops.math_ops.less_equal", "ops.math_ops.less", "numpy_ops.np_array_ops.array", "ops.math_ops.not_equal"], "numpy_ops.np_math_ops.array_equal.f": ["ops.array_ops.rank", "ops.math_ops.equal", "numpy_ops.np_utils.cond"], "numpy_ops.np_math_ops.equal": ["numpy_ops.np_math_ops._comparison"], "numpy_ops.np_math_ops.not_equal": ["numpy_ops.np_math_ops._comparison"], "numpy_ops.np_math_ops.greater": ["numpy_ops.np_math_ops._comparison"], "numpy_ops.np_math_ops.greater_equal": ["numpy_ops.np_math_ops._comparison"], "numpy_ops.np_math_ops.less": ["numpy_ops.np_math_ops._comparison"], "numpy_ops.np_math_ops.less_equal": ["numpy_ops.np_math_ops._comparison"], "numpy_ops.np_math_ops.array_equal": ["numpy_ops.np_math_ops._comparison"], "numpy_ops.np_math_ops.array_equal.f.<lambda1>": ["ops.array_ops.shape", "numpy_ops.np_utils.reduce_all", "ops.math_ops.equal", "numpy_ops.np_utils.cond"], "numpy_ops.np_utils.reduce_all": ["numpy_ops.np_utils.get_static_value", "ops.math_ops.reduce_all"], "numpy_ops.np_math_ops.array_equal.f.<lambda1>.<lambda1>": ["ops.math_ops.equal", "ops.math_ops.reduce_all"], "numpy_ops.np_math_ops.array_equal.f.<lambda1>.<lambda2>": ["framework.constant_op.constant"], "numpy_ops.np_math_ops.array_equal.f.<lambda2>": ["framework.constant_op.constant"], "numpy_ops.np_math_ops._logical_binary_op": ["ops.math_ops.logical_and", "ops.math_ops.logical_xor", "numpy_ops.np_array_ops.array", "ops.math_ops.logical_or"], "ops.math_ops.logical_xor": ["ops.gen_math_ops.logical_not", "ops.gen_math_ops.logical_and", "ops.gen_math_ops.logical_or"], "numpy_ops.np_math_ops.logical_and": ["numpy_ops.np_math_ops._logical_binary_op"], "numpy_ops.np_math_ops.logical_or": ["numpy_ops.np_math_ops._logical_binary_op"], "numpy_ops.np_math_ops.logical_xor": ["numpy_ops.np_math_ops._logical_binary_op"], "numpy_ops.np_math_ops.linspace": ["ops.math_ops.cast", "numpy_ops.np_utils.result_type", "<builtin>.ValueError", "numpy_ops.np_array_ops.array", "framework.ops.convert_to_tensor", "ops.math_ops.linspace"], "ops.math_ops.linspace": [], "numpy_ops.np_math_ops.logspace": ["ops.math_ops.pow", "numpy_ops.np_utils.result_type", "numpy_ops.np_math_ops.linspace", "ops.math_ops.cast"], "numpy_ops.np_math_ops.geomspace": ["framework.dtypes.as_dtype", "numpy_ops.np_array_ops.moveaxis", "ops.math_ops.cast", "numpy_ops.np_array_ops.sign", "numpy_ops.np_math_ops.logspace", "numpy_ops.np_utils.result_type", "<builtin>.float", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_math_ops.log10", "numpy.promote_types", "numpy_ops.np_array_ops.zeros", "numpy_ops.np_array_ops.real"], "numpy_ops.np_math_ops.ptp": ["numpy_ops.np_array_ops.amax", "numpy_ops.np_array_ops.amin"], "numpy_ops.np_math_ops.concatenate": ["ops.array_ops.concat", "numpy_ops.np_utils.result_type", "<builtin>.isinstance", "<builtin>.ValueError", "numpy_ops.np_array_ops.array"], "numpy_ops.np_math_ops.tile": ["ops.array_ops.tile", "ops.array_ops.shape", "ops.array_ops.size", "ops.array_ops.pad", "numpy_ops.np_array_ops.array", "ops.array_ops.rank", "ops.array_ops.reshape", "ops.math_ops.maximum"], "numpy_ops.np_math_ops.count_nonzero": ["ops.math_ops.count_nonzero", "numpy_ops.np_array_ops.array"], "ops.math_ops.count_nonzero": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.count_nonzero_v2"], "numpy_ops.np_math_ops.argsort": ["ops.math_ops.equal", "numpy_ops.np_utils.cond", "<builtin>.ValueError", "numpy_ops.np_array_ops.array", "ops.array_ops.rank"], "numpy_ops.np_math_ops.argsort._argsort": ["ops.sort_ops.argsort", "ops.array_ops.reshape"], "numpy_ops.np_math_ops.argsort.<lambda1>": ["framework.constant_op.constant"], "numpy_ops.np_math_ops.argsort.<lambda2>": ["numpy_ops.np_math_ops.argsort._argsort"], "numpy_ops.np_math_ops.sort": ["ops.sort_ops.sort", "ops.array_ops.reshape", "<builtin>.ValueError", "numpy_ops.np_array_ops.array"], "numpy_ops.np_math_ops._argminmax": ["numpy_ops.np_array_ops.atleast_1d", "ops.math_ops.argmin", "numpy_ops.np_array_ops.array", "ops.array_ops.reshape", "ops.math_ops.argmax"], "ops.math_ops.argmin": ["ops.math_ops.argmin_v2", "util.deprecation.deprecated_argument_lookup"], "numpy_ops.np_math_ops.argmax": ["numpy_ops.np_math_ops._argminmax"], "numpy_ops.np_math_ops.argmin": ["numpy_ops.np_math_ops._argminmax"], "numpy_ops.np_math_ops.append": ["numpy_ops.np_array_ops.ravel", "numpy_ops.np_math_ops.concatenate"], "numpy_ops.np_math_ops.average": ["numpy_ops.np_array_ops.broadcast_to", "ops.math_ops.cast", "ops.math_ops.equal", "numpy.issubdtype", "ops.array_ops.shape", "numpy_ops.np_math_ops.average.rank_equal_case", "numpy_ops.np_utils.cond", "numpy_ops.np_dtypes.default_float_type", "ops.array_ops.size", "numpy_ops.np_utils.result_type", "<builtin>.isinstance", "<builtin>.ValueError", "numpy_ops.np_array_ops.array", "<builtin>.type", "ops.math_ops.reduce_mean", "ops.array_ops.rank"], "numpy_ops.np_math_ops.average.rank_equal_case": ["ops.array_ops.shape", "ops.control_flow_ops.Assert", "ops.math_ops.reduce_all", "ops.math_ops.reduce_sum"], "numpy_ops.np_math_ops.average.rank_not_equal_case": ["ops.control_flow_ops.Assert", "ops.math_ops.reduce_sum", "ops.array_ops.rank", "ops.math_ops.tensordot", "framework.ops.convert_to_tensor"], "numpy_ops.np_math_ops.trace": ["ops.math_ops.trace", "numpy_ops.np_array_ops.diagonal", "numpy_ops.np_array_ops.sum", "numpy_ops.np_utils.result_type", "<builtin>.len", "numpy_ops.np_array_ops.asarray"], "ops.math_ops.trace": ["ops.math_ops.reduce_sum", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.array_ops.matrix_diag_part"], "numpy_ops.np_math_ops.meshgrid": ["ops.array_ops.meshgrid", "<builtin>.ValueError", "numpy_ops.np_array_ops.asarray"], "ops.array_ops.meshgrid": ["ops.array_ops.size", "<builtin>.ValueError", "framework.ops.convert_to_tensor", "<builtin>.enumerate", "ops.array_ops.reshape", "<builtin>.TypeError", "ops.array_ops.ones", "<builtin>.list", "framework.ops.name_scope", "ops.array_ops.stack", "<builtin>.len"], "numpy_ops.np_math_ops.einsum": ["numpy_ops.np_array_ops._promote_dtype", "<builtin>.ValueError", "numpy_ops.np_array_ops.asarray", "ops.special_math_ops.einsum"], "numpy_ops.np_math_ops._tensor_t": [], "numpy_ops.np_math_ops._tensor_ndim": [], "numpy_ops.np_math_ops._tensor_pos": [], "numpy_ops.np_math_ops._tensor_size": ["numpy.prod"], "numpy_ops.np_math_ops._tensor_tolist": ["<builtin>.isinstance", "<builtin>.ValueError"], "numpy_ops.np_math_ops.enable_numpy_methods_on_tensor.<lambda1>": [], "numpy_ops.np_random": ["numpy_ops.np_utils.np_doc"], "numpy_ops.np_random.seed": ["<builtin>.int", "<builtin>.ValueError", "framework.random_seed.set_seed"], "framework.random_seed.set_seed": ["framework.random_seed.set_random_seed"], "numpy_ops.np_random.randn": ["numpy_ops.np_random.standard_normal"], "numpy_ops.np_random.standard_normal": ["ops.random_ops.random_normal", "numpy_ops.np_utils.isscalar", "numpy_ops.np_dtypes.default_float_type"], "numpy_ops.np_utils.isscalar": ["ops.math_ops.equal", "numpy.isscalar", "ops.array_ops.rank", "<builtin>.isinstance"], "numpy_ops.np_random.uniform": ["ops.random_ops.random_uniform", "ops.array_ops.broadcast_dynamic_shape", "numpy_ops.np_array_ops.asarray", "numpy_ops.np_dtypes.default_float_type"], "numpy_ops.np_random.poisson": ["ops.random_ops.random_poisson", "numpy_ops.np_utils.isscalar"], "ops.random_ops.random_poisson": ["ops.random_ops.random_poisson_v2"], "numpy_ops.np_random.random": ["numpy_ops.np_random.uniform"], "numpy_ops.np_random.rand": ["numpy_ops.np_random.uniform"], "numpy_ops.np_random.randint": ["numpy_ops.np_utils.result_type", "ops.random_ops.random_uniform", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.int"], "numpy_ops.np_utils": ["numpy_ops.np_utils.np_doc_only.decorator", "numpy_ops.np_utils.np_doc.decorator", "numpy_ops.np_utils.np_doc_only", "os.getenv", "numpy_ops.np_utils.np_doc"], "numpy_ops.np_utils._canonicalize_axes.<lambda1>": ["numpy_ops.np_utils.cond"], "numpy_ops.np_utils._canonicalize_axes.<lambda1>.<lambda1>": [], "numpy_ops.np_utils._canonicalize_axes.<lambda1>.<lambda2>": [], "numpy_ops.np_utils._canonicalize_axes.<lambda2>": [], "numpy_ops.np_utils._supports_signature": ["<builtin>.hasattr"], "numpy_ops.np_utils._to_tf_type": ["framework.dtypes.as_dtype"], "numpy_ops.np_utils._to_numpy_type": ["numpy.dtype", "<builtin>.isinstance"], "numpy.isscalar": [], "numpy_ops.np_utils._has_docstring": ["<builtin>.isinstance", "<builtin>.hasattr"], "numpy_ops.np_utils._add_blank_line": [], "numpy_ops.np_utils._np_signature": ["numpy_ops.np_utils._np_signature.names_from_num", "inspect.Parameter", "inspect.signature", "<builtin>.isinstance", "inspect.Signature", "<builtin>.hasattr"], "inspect.signature": [], "numpy_ops.np_utils._np_signature.names_from_num": ["<builtin>.range", "<builtin>.str"], "inspect.Parameter": [], "inspect.Signature": [], "numpy_ops.np_utils._is_compatible_param_kind": ["numpy_ops.np_utils._is_compatible_param_kind.relax"], "numpy_ops.np_utils._is_compatible_param_kind.relax": [], "numpy_ops.np_utils._prepare_np_fun_name_and_fun": ["<builtin>.str", "<builtin>.getattr", "<builtin>.isinstance"], "numpy_ops.np_utils._np_doc_helper": ["numpy_ops.np_utils._add_np_doc", "numpy_ops.np_utils._add_blank_line", "numpy_ops.np_utils._has_docstring"], "numpy_ops.np_utils._add_np_doc": ["<builtin>.ValueError", "numpy_ops.np_utils.generate_link", "numpy_ops.np_utils._has_docstring", "numpy_ops.np_utils.is_check_link", "numpy_ops.np_utils.get_np_doc_form", "<builtin>.isinstance", "requests.head"], "numpy_ops.np_utils.get_np_doc_form": [], "numpy_ops.np_utils.set_np_doc_form": [], "numpy_ops.np_utils.Link.__init__": [], "numpy_ops.np_utils.AliasOf.__init__": [], "numpy_ops.np_utils.generate_link": ["re.match"], "numpy_ops.np_utils.is_check_link": [], "numpy_ops.np_utils.set_check_link": [], "requests.head": [], "numpy_ops.np_utils.is_sig_mismatch_an_error": [], "numpy_ops.np_utils.set_is_sig_mismatch_an_error": [], "numpy_ops.np_utils.np_doc.decorator": ["numpy_ops.np_utils._np_doc_helper", "<builtin>.TypeError", "numpy_ops.np_utils.is_sig_mismatch_an_error", "numpy_ops.np_export.np_export", "inspect.signature", "<builtin>.list", "numpy_ops.np_utils._is_compatible_param_kind", "<builtin>.hasattr"], "numpy_ops.np_utils.np_doc_only.decorator": ["numpy_ops.np_export.np_export", "numpy_ops.np_utils._np_doc_helper"], "numpy_ops.np_utils.finfo": ["numpy_ops.np_utils._to_numpy_type", "numpy.finfo"], "numpy_ops.np_utils._maybe_get_dtype": ["<builtin>.type", "<builtin>.ValueError", "numpy_ops.np_utils._to_numpy_type", "<builtin>.isinstance"], "numpy_ops.np_utils.promote_types": ["numpy_ops.np_utils._to_numpy_type", "numpy_ops.np_dtypes.canonicalize_dtype", "numpy.promote_types"], "numpy_ops.np_utils.logical_and": ["numpy_ops.np_utils.get_static_value", "numpy.isscalar", "numpy_ops.np_utils._maybe_static"], "numpy_ops.np_utils.reduce_any": ["numpy_ops.np_utils.get_static_value", "ops.math_ops.reduce_any"], "parallel_for.control_flow_ops": ["util.tf_export.tf_export"], "parallel_for.control_flow_ops.for_loop": ["util.nest.flatten", "ops.control_flow_ops.while_loop", "util.nest.pack_sequence_as", "<builtin>.zip", "<builtin>.len", "ops.tensor_array_ops.TensorArray"], "parallel_for.control_flow_ops.for_loop.while_body": ["util.nest.flatten", "parallel_for.control_flow_ops._pfor_impl.tiled_loop_body", "<builtin>.ValueError", "ops.array_ops.expand_dims", "<builtin>.zip", "<builtin>.len", "<builtin>.tuple"], "parallel_for.control_flow_ops._pfor_impl.tiled_loop_body": ["parallel_for.control_flow_ops._pfor_impl"], "parallel_for.control_flow_ops.for_loop.<lambda1>": [], "parallel_for.control_flow_ops._flatten_first_two_dims": ["ops.array_ops.reshape", "ops.array_ops.shape", "ops.array_ops.concat"], "parallel_for.control_flow_ops._is_under_xla_context": ["<builtin>.getattr", "framework.ops.get_default_graph"], "parallel_for.control_flow_ops.pfor": ["parallel_for.control_flow_ops._is_under_xla_context", "eager.def_function.functions_run_eagerly", "platform.tf_logging.warning", "eager.def_function.function", "eager.def_function.run_functions_eagerly", "parallel_for.control_flow_ops.pfor.f", "eager.context.executing_eagerly"], "parallel_for.control_flow_ops.pfor.f": ["parallel_for.control_flow_ops._pfor_impl"], "parallel_for.control_flow_ops._pfor_impl": ["platform.tf_logging.warn", "util.nest.flatten", "parallel_for.control_flow_ops._flatten_first_two_dims", "<builtin>.set", "framework.tensor_util.constant_value", "parallel_for.pfor.PFor", "parallel_for.control_flow_ops.vectorized_map.loop_fn", "<builtin>.zip", "ops.math_ops.equal", "util.nest.map_structure_up_to", "framework.tensor_shape.TensorShape", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "framework.ops.get_default_graph", "<builtin>.ValueError", "util.nest.map_structure", "ops.control_flow_ops.cond", "parallel_for.control_flow_ops._pfor_impl.tiled_loop_body.tiled_loop_fn", "eager.context.executing_eagerly", "<builtin>.isinstance", "parallel_for.control_flow_ops.for_loop", "ops.array_ops.placeholder_with_default", "functools.partial", "parallel_for.pfor.PForConfig", "parallel_for.control_flow_ops._loop_fn_has_config", "util.nest.pack_sequence_as"], "eager.def_function.run_functions_eagerly": ["<builtin>.bool"], "parallel_for.control_flow_ops._should_expand_composite": ["<builtin>.isinstance"], "parallel_for.control_flow_ops._composite_to_tensors": ["<builtin>.ValueError", "<builtin>.isinstance", "parallel_for.control_flow_ops._should_expand_composite"], "parallel_for.control_flow_ops._composite_from_tensors": ["parallel_for.control_flow_ops._should_expand_composite"], "parallel_for.control_flow_ops._loop_fn_has_config": ["<builtin>.hasattr", "<builtin>.isinstance", "util.tf_decorator.unwrap", "util.tf_inspect.isfunction", "<builtin>.ValueError", "util.tf_inspect.getargspec"], "parallel_for.pfor.PForConfig": [], "parallel_for.control_flow_ops.vectorized_map.loop_fn": ["util.nest.map_structure"], "parallel_for.control_flow_ops._pfor_impl.tiled_loop_body.tiled_loop_fn": ["parallel_for.control_flow_ops.vectorized_map.loop_fn", "util.nest.flatten", "util.nest.map_structure", "parallel_for.control_flow_ops._pfor_impl.tiled_loop_body.tiled_loop_fn"], "parallel_for.pfor.PFor": [], "parallel_for.control_flow_ops._pfor_impl.<lambda1>": [], "parallel_for.control_flow_ops._pfor_impl.<lambda2>": ["<builtin>.zip", "ops.array_ops.concat"], "parallel_for.control_flow_ops._broadcasting_gather": ["framework.tensor_shape.dimension_value", "ops.array_ops.where_v2", "ops.array_ops.shape", "ops.array_ops.gather"], "parallel_for.control_flow_ops._gather_from_tensor_or_composite": ["parallel_for.control_flow_ops._broadcasting_gather", "parallel_for.control_flow_ops._should_expand_composite"], "parallel_for.control_flow_ops.vectorized_map.loop_fn.<lambda1>": ["parallel_for.control_flow_ops._gather_from_tensor_or_composite"], "parallel_for.control_flow_ops.vectorized_map._get_shape": [], "parallel_for.gradients": [], "parallel_for.gradients.jacobian": ["ops.array_ops.concat", "<builtin>.int", "util.nest.pack_sequence_as", "parallel_for.control_flow_ops.pfor", "<builtin>.enumerate", "parallel_for.control_flow_ops.for_loop", "util.nest.flatten", "<builtin>.len", "ops.array_ops.shape", "ops.array_ops.reshape", "<builtin>.isinstance"], "parallel_for.gradients.jacobian.loop_fn": ["ops.gradients_impl.gradients", "ops.array_ops.gather"], "ops.gradients_impl.gradients": ["framework.ops.get_default_graph", "ops.gradients_util._GradientsHelper"], "parallel_for.gradients.batch_jacobian": ["ops.array_ops.concat", "ops.array_ops.transpose", "<builtin>.int", "<builtin>.ValueError", "ops.array_ops.size", "framework.ops.control_dependencies", "parallel_for.control_flow_ops.pfor", "parallel_for.control_flow_ops.for_loop", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.check_ops.assert_equal"], "parallel_for.gradients.batch_jacobian.loop_fn": ["ops.gradients_impl.gradients", "ops.array_ops.gather"], "parallel_for.pfor": ["parallel_for.pfor.RegisterPFor", "platform.flags.DEFINE_bool", "collections.namedtuple", "parallel_for.pfor.RegisterPFor.__init__", "<builtin>.set", "parallel_for.pfor.RegisterPForWithArgs.__init__", "parallel_for.pfor.RegisterPForWithArgs"], "parallel_for.pfor._variant_handle_data": ["ops.resource_variable_ops.get_eager_safe_handle_data"], "parallel_for.pfor._variant_type_id": ["parallel_for.pfor._variant_handle_data"], "parallel_for.pfor._is_variant_with_internal_stacking": ["parallel_for.pfor._variant_type_id"], "parallel_for.pfor._parse_variant_shapes_and_types": ["<builtin>.ValueError", "parallel_for.pfor._variant_handle_data"], "parallel_for.pfor._stack": ["<builtin>.ValueError", "parallel_for.pfor.wrap", "parallel_for.pfor._parse_variant_shapes_and_types", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.expand_dims", "<builtin>.len", "ops.array_ops.tile", "parallel_for.pfor._stack_tensor_list", "ops.array_ops.shape", "ops.array_ops.ones_like"], "parallel_for.pfor._stack_tensor_list": ["parallel_for.pfor._stack_tensor_list_shape", "ops.list_ops.tensor_list_length", "ops.control_flow_ops.while_loop", "ops.list_ops.tensor_list_element_shape", "ops.list_ops.tensor_list_reserve"], "parallel_for.pfor.wrap": ["<builtin>.isinstance"], "parallel_for.pfor._is_stateful_pfor_op": ["<builtin>.isinstance", "<builtin>.hasattr"], "parallel_for.pfor.WhileOp.__init__": ["parallel_for.pfor._is_stateful_pfor_op", "<builtin>.isinstance", "parallel_for.pfor.WhileOp.op_is_inside_loop", "framework.ops.get_default_graph", "<builtin>.set"], "parallel_for.pfor.WhileOp.op_is_inside_loop": ["<builtin>.isinstance"], "parallel_for.pfor.WhileOp.__str__": [], "parallel_for.pfor.WhileOp.inputs": [], "parallel_for.pfor.WhileOp.control_inputs": [], "parallel_for.pfor.WhileOp.outputs": [], "parallel_for.pfor.WhileOp.name": [], "parallel_for.pfor.WhileOp.is_inside_loop": [], "parallel_for.pfor.WhileOp.is_stateful": [], "parallel_for.pfor.WhileOp.pfor_converter": [], "parallel_for.pfor.WhileOp._init_pfor": ["framework.constant_op.constant", "parallel_for.pfor.wrap", "<builtin>.zip", "parallel_for.pfor.PFor._add_conversion", "parallel_for.pfor.PFor.__init__", "ops.array_ops.size", "<builtin>.len", "<builtin>.range"], "parallel_for.pfor.PFor.__init__": ["framework.tensor_util.constant_value", "parallel_for.pfor.wrap", "util.object_identity.ObjectIdentityDictionary", "<builtin>.isinstance", "ops.array_ops.reshape", "ops.math_ops.range", "<builtin>.set"], "parallel_for.pfor.PFor._add_conversion": ["<builtin>.isinstance"], "parallel_for.pfor.WhileOp._convert_enter": ["<builtin>.isinstance", "framework.ops.control_dependencies", "ops.array_ops.identity"], "parallel_for.pfor.WhileOp._maybe_stacked": ["parallel_for.pfor._is_stateful_pfor_op", "parallel_for.pfor.WhileOp._maybe_stacked", "parallel_for.pfor.WhileOp.op_is_inside_loop"], "parallel_for.pfor.WhileOp._create_init_values": ["framework.ops.name_scope", "ops.tensor_array_ops.TensorArray", "framework.tensor_shape.TensorShape", "parallel_for.pfor._stack", "<builtin>.len", "parallel_for.pfor.WhileOp._convert_enter", "<builtin>.enumerate", "parallel_for.pfor.WhileOp._maybe_stacked"], "parallel_for.pfor.WhileOp._process_cond_unstacked": ["ops.control_flow_ops.cond", "ops.array_ops.reshape", "<builtin>.enumerate"], "parallel_for.pfor.WhileOp._process_cond_unstacked.<lambda1>": [], "parallel_for.pfor.WhileOp._process_cond_unstacked.<lambda2>": [], "parallel_for.pfor.WhileOp._process_cond_stacked": ["ops.data_flow_ops.dynamic_partition", "<builtin>.zip", "ops.array_ops.size", "parallel_for.pfor._stack", "<builtin>.len", "ops.math_ops.cast", "ops.math_ops.reduce_any", "<builtin>.enumerate"], "ops.data_flow_ops.dynamic_partition": [], "parallel_for.pfor.WhileOp._process_body": ["<builtin>.zip", "ops.control_flow_ops.cond", "parallel_for.pfor.WhileOp._init_pfor", "<builtin>.enumerate"], "parallel_for.pfor.WhileOp._process_body.true_fn": ["parallel_for.pfor.PFor.convert", "parallel_for.pfor.PFor._convert_helper", "framework.ops.control_dependencies", "ops.array_ops.identity"], "parallel_for.pfor.PFor._convert_helper": ["framework.ops.name_scope", "framework.tensor_util.constant_value", "parallel_for.pfor.PFor.op_is_inside_loop", "<builtin>.any", "<builtin>.str", "<builtin>.list", "framework.ops.control_dependencies", "traceback.format_list", "parallel_for.pfor._fallback_converter", "parallel_for.pfor._is_variant_with_internal_stacking", "<builtin>.zip", "framework.tensor_shape.TensorShape", "collections.deque", "sys.exc_info", "<builtin>.len", "framework.ops.get_default_graph", "parallel_for.pfor._create_op", "parallel_for.pfor.PFor._was_converted", "<builtin>.hasattr", "parallel_for.pfor.wrap", "<builtin>.ValueError", "<builtin>.isinstance", "parallel_for.pfor.PFor._add_conversion", "parallel_for.pfor.PFor._convert_helper._add_to_stack", "parallel_for.pfor._PforInput.__init__", "platform.tf_logging.vlog", "<builtin>.set", "six.reraise", "parallel_for.pfor._is_stateful_pfor_op", "ops.handle_data_util.copy_handle_data", "parallel_for.pfor.WhileOp.__init__", "parallel_for.pfor.PFor._convert_reduction", "platform.tf_logging.error", "parallel_for.pfor.WhileOp.pfor_converter"], "parallel_for.pfor.PFor.convert": ["parallel_for.pfor.PFor._unwrap_or_tile", "<builtin>.isinstance", "parallel_for.pfor.PFor._convert_sparse", "parallel_for.pfor.PFor._convert_helper"], "parallel_for.pfor.WhileOp._process_body.<lambda1>": ["parallel_for.pfor.WhileOp._process_body.true_fn"], "parallel_for.pfor.WhileOp._process_body.<lambda2>": ["framework.constant_op.constant"], "parallel_for.pfor.WhileOp.__call__": ["parallel_for.pfor.wrap", "parallel_for.pfor.WhileOp._create_init_values", "<builtin>.zip", "ops.control_flow_ops.while_loop", "<builtin>.len"], "parallel_for.pfor.WhileOp.__call__.cond": [], "parallel_for.pfor.WhileOp.__call__.body": ["framework.ops.name_scope", "parallel_for.pfor.WhileOp._process_cond_unstacked", "<builtin>.len", "parallel_for.pfor.WhileOp._init_pfor", "parallel_for.pfor.PFor._convert_helper", "<builtin>.tuple", "parallel_for.pfor.WhileOp._process_cond_stacked", "parallel_for.pfor.WhileOp._process_body", "<builtin>.list"], "parallel_for.pfor._PforInput.__init__": [], "parallel_for.pfor._PforInput.stack_inputs": ["parallel_for.pfor._untile_variant", "parallel_for.pfor.wrap", "parallel_for.pfor._stack", "<builtin>.len", "parallel_for.pfor._tile_variant_with_length", "<builtin>.range"], "parallel_for.pfor._tile_variant_with_length": ["ops.handle_data_util.copy_handle_data", "parallel_for.pfor._is_variant_with_internal_stacking", "ops.array_ops.reshape", "framework.ops.device", "ops.array_ops.tile"], "parallel_for.pfor._untile_variant": ["<builtin>.AssertionError", "parallel_for.pfor._is_variant_with_internal_stacking", "ops.array_ops.gather"], "parallel_for.pfor._PforInput.expanddim_inputs_for_broadcast": ["parallel_for.pfor.wrap", "parallel_for.pfor._PforInput.expanddim_inputs_for_broadcast._get_rank", "ops.math_ops.maximum", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.tile", "ops.array_ops.shape", "<builtin>.enumerate"], "parallel_for.pfor._PforInput.expanddim_inputs_for_broadcast._get_rank": ["ops.array_ops.rank"], "parallel_for.pfor._PforInput.inputs": [], "parallel_for.pfor._PforInput.num_inputs": ["<builtin>.len"], "parallel_for.pfor._PforInput.input": ["<builtin>.len"], "parallel_for.pfor._PforInput.stacked_input": ["parallel_for.pfor._PforInput.input", "<builtin>.getattr"], "parallel_for.pfor._PforInput.unstacked_input": ["parallel_for.pfor._PforInput.input", "<builtin>.getattr"], "parallel_for.pfor._PforInput.op": [], "parallel_for.pfor._PforInput.op_type": [], "parallel_for.pfor._PforInput.get_attr": [], "parallel_for.pfor._PforInput.outputs": [], "parallel_for.pfor._PforInput.output": ["<builtin>.len"], "parallel_for.pfor.RegisterPFor.__init__": [], "parallel_for.pfor.RegisterPFor.__call__": [], "parallel_for.pfor.RegisterPForWithArgs.__init__": ["<builtin>.super"], "parallel_for.pfor.RegisterPForWithArgs.__call__": ["<builtin>.super"], "parallel_for.pfor.RegisterPForWithArgs.__call__._f": [], "parallel_for.pfor._create_op": ["framework.ops.get_default_graph", "<builtin>.str", "eager.execute.record_gradient", "<builtin>.tuple"], "eager.execute.record_gradient": [], "parallel_for.pfor._wrap_and_tile_variants": ["parallel_for.pfor.wrap", "parallel_for.pfor._tile_variant_with_length"], "parallel_for.pfor._fallback_converter": ["parallel_for.pfor.wrap", "ops.tensor_array_ops.TensorArray", "ops.control_flow_ops.while_loop", "platform.tf_logging.warning", "<builtin>.tuple"], "parallel_for.pfor._fallback_converter.while_body": ["<builtin>.zip", "<builtin>.isinstance", "ops.array_ops.expand_dims", "<builtin>.tuple", "parallel_for.pfor._create_op"], "parallel_for.pfor._fallback_converter.<lambda1>": [], "parallel_for.pfor.PForConfig.__init__": [], "parallel_for.pfor.PForConfig._has_reductions": ["<builtin>.len"], "parallel_for.pfor.PForConfig._set_iters": ["<builtin>.isinstance", "framework.tensor_util.constant_value"], "parallel_for.pfor.PForConfig.reduce": ["<builtin>.ValueError", "ops.array_ops.identity_n", "ops.array_ops.placeholder_with_default", "eager.context.executing_eagerly", "ops.array_ops.zeros", "<builtin>.isinstance", "framework.tensor_shape.TensorShape", "eager.def_function.function", "framework.tensor_spec.TensorSpec", "<builtin>.len", "<builtin>.tuple", "framework.ops.control_dependencies", "ops.array_ops.placeholder"], "ops.array_ops.identity_n": [], "parallel_for.pfor.PForConfig.reduce_concat": ["parallel_for.pfor.PForConfig.reduce"], "parallel_for.pfor.PForConfig.reduce_concat.<lambda1>": [], "parallel_for.pfor.PForConfig.reduce_mean": ["parallel_for.pfor.PForConfig.reduce"], "parallel_for.pfor.PForConfig.reduce_mean.<lambda1>": ["ops.math_ops.reduce_mean"], "parallel_for.pfor.PForConfig.reduce_sum": ["parallel_for.pfor.PForConfig.reduce"], "parallel_for.pfor.PForConfig.reduce_sum.<lambda1>": ["ops.math_ops.reduce_sum"], "parallel_for.pfor.PForConfig._lookup_reduction": ["<builtin>.isinstance"], "util.object_identity.ObjectIdentityDictionary": [], "parallel_for.pfor.PFor.op_is_inside_loop": ["<builtin>.isinstance"], "parallel_for.pfor.PFor._convert_sparse": ["parallel_for.pfor.PFor._unwrap_or_tile", "<builtin>.all", "<builtin>.any", "<builtin>.isinstance", "parallel_for.pfor.PFor._restack_sparse_tensor_logically", "parallel_for.pfor.PFor._convert_helper", "framework.sparse_tensor.SparseTensor"], "parallel_for.pfor.PFor._unwrap_or_tile": ["parallel_for.pfor._stack"], "parallel_for.pfor.PFor._restack_sparse_tensor_logically": ["ops.map_fn.map_fn", "ops.sparse_ops.deserialize_sparse"], "parallel_for.pfor.PFor._restack_sparse_tensor_logically.fn": ["ops.gen_sparse_ops.serialize_sparse"], "ops.gen_sparse_ops.serialize_sparse": [], "parallel_for.pfor.PFor._was_converted": [], "parallel_for.pfor.PFor._convert_reduction": ["parallel_for.pfor.PFor._unwrap_or_tile", "<builtin>.isinstance", "util.nest.flatten", "parallel_for.pfor.wrap"], "parallel_for.pfor.PFor._convert_helper._add_to_stack": [], "ops.handle_data_util.copy_handle_data": ["<builtin>.isinstance", "ops.handle_data_util.set_handle_data", "framework.ops.get_resource_handle_data"], "traceback.format_list": [], "parallel_for.pfor.PFor.loop_len_vector": [], "parallel_for.pfor.PFor.loop_var": [], "parallel_for.pfor.PFor.pfor_ops": [], "parallel_for.pfor.PFor.pfor_config": [], "parallel_for.pfor.PFor.all_indices_partitioned": [], "parallel_for.pfor.PFor.fallback_to_while_loop": [], "parallel_for.pfor.RegisterPFor": [], "parallel_for.pfor._convert_adjust_contrastv2": ["ops.gen_image_ops.adjust_contrastv2", "parallel_for.pfor.wrap"], "ops.gen_image_ops.adjust_contrastv2": [], "parallel_for.pfor._convert_adjust_hue": ["parallel_for.pfor.wrap", "ops.gen_image_ops.adjust_hue"], "ops.gen_image_ops.adjust_hue": [], "parallel_for.pfor._convert_adjust_saturation": ["ops.gen_image_ops.adjust_saturation", "parallel_for.pfor.wrap"], "ops.gen_image_ops.adjust_saturation": [], "parallel_for.pfor._flatten_first_two_dims": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.concat"], "parallel_for.pfor._unflatten_first_dim": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.concat"], "parallel_for.pfor._inputs_with_flattening": ["parallel_for.pfor._flatten_first_two_dims", "<builtin>.range"], "parallel_for.pfor.RegisterPForWithArgs": [], "parallel_for.pfor._convert_flatten_batch": ["parallel_for.pfor._unflatten_first_dim", "parallel_for.pfor._create_op", "parallel_for.pfor._inputs_with_flattening", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_batch_to_space_nd": ["parallel_for.pfor.wrap", "ops.gen_array_ops.batch_to_space_nd", "ops.math_ops.reduce_prod", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.transpose", "parallel_for.pfor._unflatten_first_dim", "ops.array_ops.shape"], "ops.gen_array_ops.batch_to_space_nd": [], "parallel_for.pfor._convert_space_to_batch_nd": ["ops.gen_array_ops.space_to_batch_nd", "parallel_for.pfor.wrap", "ops.math_ops.reduce_prod", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.transpose", "ops.array_ops.shape", "parallel_for.pfor._flatten_first_two_dims"], "ops.gen_array_ops.space_to_batch_nd": [], "parallel_for.pfor._channel_flatten_input": ["ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.transpose", "framework.ops.get_default_graph", "ops.array_ops.shape"], "parallel_for.pfor._convert_fused_batch_norm": ["parallel_for.pfor.wrap", "ops.array_ops.reshape", "parallel_for.pfor._inputs_with_flattening", "parallel_for.pfor._unflatten_first_dim", "ops.array_ops.transpose", "<builtin>.range", "ops.array_ops.zeros_like", "parallel_for.pfor._create_op", "parallel_for.pfor._channel_flatten_input"], "parallel_for.pfor._convert_fused_batch_norm_grad": ["parallel_for.pfor.wrap", "ops.array_ops.reshape", "ops.array_ops.transpose", "parallel_for.pfor._unflatten_first_dim", "<builtin>.range", "parallel_for.pfor._create_op", "parallel_for.pfor._channel_flatten_input"], "parallel_for.pfor._convert_flatten_batch_shape_input": ["parallel_for.pfor.wrap", "parallel_for.pfor._inputs_with_flattening", "ops.array_ops.concat", "parallel_for.pfor._unflatten_first_dim", "ops.array_ops.ones", "ops.array_ops.shape", "parallel_for.pfor._create_op"], "parallel_for.pfor._convert_conv2d_backprop_filter": ["ops.nn_ops.conv2d_backprop_filter", "parallel_for.pfor.wrap", "ops.tensor_array_ops.TensorArray", "ops.control_flow_ops.while_loop", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.transpose", "platform.tf_logging.warning", "parallel_for.pfor._channel_flatten_input"], "parallel_for.pfor._convert_conv2d_backprop_filter.while_body": ["ops.nn_ops.conv2d_backprop_filter", "ops.array_ops.expand_dims"], "ops.nn_ops.conv2d_backprop_filter": ["ops.gen_nn_ops.conv2d_backprop_filter", "ops.nn_ops.convert_padding"], "parallel_for.pfor._convert_conv2d_backprop_filter.<lambda1>": [], "parallel_for.pfor._flatten_with_inner_dim": ["ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.transpose", "<builtin>.range", "ops.array_ops.shape", "<builtin>.list"], "parallel_for.pfor._unflatten_with_inner_dim": ["ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.transpose", "<builtin>.range", "ops.array_ops.shape", "<builtin>.list"], "parallel_for.pfor._convert_depthwise_conv2d_native": ["parallel_for.pfor._unflatten_with_inner_dim", "parallel_for.pfor._create_op", "parallel_for.pfor._flatten_with_inner_dim", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_depthwise_conv2d_native_backprop_input": ["framework.constant_op.constant", "parallel_for.pfor._unflatten_with_inner_dim", "parallel_for.pfor.wrap", "ops.array_ops.concat", "parallel_for.pfor._create_op", "parallel_for.pfor._flatten_with_inner_dim"], "parallel_for.pfor._convert_depthwise_conv2d_native_backprop_filter": ["framework.constant_op.constant", "parallel_for.pfor._unflatten_with_inner_dim", "parallel_for.pfor.wrap", "ops.array_ops.concat", "parallel_for.pfor._create_op", "parallel_for.pfor._flatten_with_inner_dim"], "parallel_for.pfor._convert_softmax": ["parallel_for.pfor.wrap"], "parallel_for.pfor._convert_identity": ["parallel_for.pfor.wrap"], "parallel_for.pfor._convert_identity_n": ["<builtin>.zip", "ops.array_ops.identity_n", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_reshape": ["ops.array_ops.reshape", "parallel_for.pfor.wrap", "ops.array_ops.concat"], "parallel_for.pfor._convert_fill": ["ops.array_ops.broadcast_to", "parallel_for.pfor.wrap", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.size", "ops.array_ops.ones"], "parallel_for.pfor._convert_broadcast_to": ["ops.array_ops.broadcast_to", "parallel_for.pfor.wrap", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.tile", "ops.array_ops.rank", "ops.array_ops.shape"], "parallel_for.pfor._convert_expanddims": ["ops.array_ops.expand_dims", "parallel_for.pfor.wrap", "ops.math_ops.cast"], "parallel_for.pfor._convert_searchsorted": ["parallel_for.pfor._flatten_first_two_dims", "parallel_for.pfor.wrap", "parallel_for.pfor._unflatten_first_dim"], "parallel_for.pfor._convert_matrix_band_part": ["ops.array_ops.matrix_band_part", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_matrix_set_diag": ["parallel_for.pfor.wrap", "ops.array_ops.matrix_set_diag"], "parallel_for.pfor._convert_matrix_diag_v2": ["ops.array_ops.matrix_diag", "parallel_for.pfor.wrap", "ops.array_ops.matrix_diag_v2"], "ops.array_ops.matrix_diag_v2": [], "parallel_for.pfor._convert_diag": ["parallel_for.pfor._fallback_converter", "ops.array_ops.matrix_diag", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_matrix_diag_part_v2": ["ops.array_ops.matrix_diag_part", "parallel_for.pfor.wrap", "ops.array_ops.matrix_diag_part_v2"], "ops.array_ops.matrix_diag_part_v2": [], "parallel_for.pfor._convert_matrix_set_diag_v2": ["ops.array_ops.matrix_set_diag", "parallel_for.pfor.wrap", "ops.array_ops.matrix_set_diag_v2"], "ops.array_ops.matrix_set_diag_v2": [], "parallel_for.pfor._convert_diag_part": ["ops.array_ops.matrix_diag_part", "parallel_for.pfor.wrap", "parallel_for.pfor._fallback_converter"], "parallel_for.pfor._convert_one_hot": ["parallel_for.pfor.wrap", "ops.array_ops.one_hot"], "parallel_for.pfor._convert_slice": ["ops.array_ops.slice", "parallel_for.pfor.wrap", "ops.array_ops.concat"], "parallel_for.pfor._convert_tile": ["ops.array_ops.tile", "parallel_for.pfor.wrap", "ops.array_ops.concat"], "parallel_for.pfor._convert_pack": ["ops.array_ops.stack", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_unpack": ["ops.array_ops.unstack", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_pad": ["parallel_for.pfor.wrap", "ops.array_ops.pad", "ops.array_ops.concat"], "parallel_for.pfor._convert_split": ["ops.array_ops.split", "parallel_for.pfor.wrap", "ops.math_ops.cast"], "parallel_for.pfor._convert_split_v": ["ops.array_ops.split", "parallel_for.pfor.wrap", "ops.math_ops.cast"], "parallel_for.pfor._convert_squeeze": ["parallel_for.pfor.wrap", "ops.array_ops.squeeze"], "parallel_for.pfor._convert_reverse": ["parallel_for.pfor.wrap", "ops.array_ops.where_v2", "ops.gen_array_ops.reverse_v2"], "ops.gen_array_ops.reverse_v2": [], "parallel_for.pfor._convert_transpose": ["parallel_for.pfor.wrap", "ops.array_ops.concat"], "parallel_for.pfor._convert_zeroslike": ["ops.array_ops.zeros", "ops.array_ops.shape", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_gather": ["framework.tensor_util.constant_value", "parallel_for.pfor.wrap", "ops.array_ops.concat", "ops.math_ops.range", "ops.array_ops.transpose", "ops.array_ops.rank", "ops.math_ops.cast", "ops.math_ops.equal", "ops.array_ops.gather", "ops.array_ops.where", "ops.control_flow_ops.cond", "framework.tensor_shape.dimension_value"], "parallel_for.pfor._convert_gather.<lambda1>": ["ops.array_ops.rank"], "parallel_for.pfor._convert_gather.<lambda2>": [], "parallel_for.pfor._convert_gather.<lambda3>": [], "parallel_for.pfor._convert_gather.<lambda4>": ["ops.array_ops.transpose"], "parallel_for.pfor._convert_gather_nd": ["ops.array_ops.gather_nd", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_concatv2": ["parallel_for.pfor.wrap", "ops.math_ops.cast", "<builtin>.range", "ops.array_ops.concat"], "parallel_for.pfor._convert_strided_slice": ["ops.array_ops.strided_slice", "parallel_for.pfor.wrap", "ops.array_ops.concat"], "parallel_for.pfor._convert_strided_slice_grad": ["ops.array_ops.strided_slice_grad", "parallel_for.pfor.wrap", "ops.array_ops.concat"], "ops.array_ops.strided_slice_grad": [], "parallel_for.pfor._convert_check_numerics": ["ops.gen_array_ops.check_numerics", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_ensure_shape": ["framework.tensor_shape.TensorShape", "parallel_for.pfor.wrap", "ops.gen_array_ops.ensure_shape"], "ops.gen_array_ops.ensure_shape": [], "parallel_for.pfor._convert_roll": ["ops.manip_ops.roll", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_matmul": ["parallel_for.pfor.wrap", "ops.array_ops.split", "ops.array_ops.reshape", "ops.array_ops.stack", "ops.math_ops.matmul", "ops.array_ops.transpose", "ops.math_ops.equal", "ops.array_ops.where", "ops.array_ops.shape", "ops.math_ops.minimum"], "parallel_for.pfor._convert_batch_mat_mul": ["ops.math_ops.matmul", "parallel_for.pfor._flatten_first_two_dims", "parallel_for.pfor.wrap", "parallel_for.pfor._unflatten_first_dim"], "parallel_for.pfor._convert_batch_mat_mul_v2": ["ops.math_ops.matmul", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_reduction": ["parallel_for.pfor.wrap", "ops.math_ops.cast"], "parallel_for.pfor._convert_argmax_argmin": ["parallel_for.pfor.wrap", "ops.math_ops.cast"], "parallel_for.pfor._convert_bucketize": ["ops.math_ops.bucketize", "parallel_for.pfor.wrap"], "ops.math_ops.bucketize": [], "parallel_for.pfor._convert_clip_by_value": ["parallel_for.pfor.wrap", "ops.gen_math_ops.clip_by_value"], "ops.gen_math_ops.clip_by_value": [], "parallel_for.pfor._convert_cumfoo": ["parallel_for.pfor.wrap", "ops.math_ops.cast"], "parallel_for.pfor._convert_biasadd": ["ops.nn_ops.bias_add", "parallel_for.pfor.wrap", "ops.math_ops.add", "ops.array_ops.reshape", "ops.array_ops.concat", "util.compat.as_bytes", "ops.math_ops.cast", "ops.array_ops.shape"], "parallel_for.pfor._convert_unsortedsegmentsum": ["parallel_for.pfor.wrap", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.math_ops.range", "ops.math_ops.cast", "ops.array_ops.shape", "ops.array_ops.ones_like"], "parallel_for.pfor._flatten_array_with_offset": ["ops.math_ops.range", "ops.array_ops.expand_dims", "ops.array_ops.reshape", "ops.math_ops.cast"], "parallel_for.pfor._convert_sparse_segment": ["parallel_for.pfor.wrap", "ops.math_ops.reduce_max", "ops.array_ops.reshape", "parallel_for.pfor._flatten_array_with_offset", "<builtin>.len", "parallel_for.pfor._unflatten_first_dim", "ops.array_ops.shape", "parallel_for.pfor._flatten_first_two_dims", "ops.nn_ops.relu"], "parallel_for.pfor._convert_sparse_segment_grad": ["parallel_for.pfor.wrap", "ops.math_ops.reduce_max", "parallel_for.pfor._flatten_array_with_offset", "parallel_for.pfor._unflatten_first_dim", "parallel_for.pfor._flatten_first_two_dims", "ops.nn_ops.relu"], "parallel_for.pfor._convert_cast": ["parallel_for.pfor.wrap", "ops.math_ops.cast"], "parallel_for.pfor._convert_cwise": ["<builtin>.len", "parallel_for.pfor._create_op", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_xla_sharding": ["python.xla.sharding", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_leaky_relu": ["parallel_for.pfor.wrap", "ops.gen_nn_ops.leaky_relu"], "ops.gen_nn_ops.leaky_relu": [], "parallel_for.pfor._convert_equal": ["ops.gen_math_ops.equal", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_not_equal": ["parallel_for.pfor.wrap", "ops.gen_math_ops.not_equal"], "parallel_for.pfor._convert_approximate_equal": ["parallel_for.pfor.wrap", "ops.math_ops.approximate_equal"], "ops.math_ops.approximate_equal": [], "parallel_for.pfor._convert_shape": ["ops.array_ops.shape", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_shape_n": ["ops.array_ops.shape", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_size": ["ops.array_ops.size", "parallel_for.pfor.wrap", "ops.math_ops.cast"], "parallel_for.pfor._convert_rank": ["ops.array_ops.rank", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_addn": ["parallel_for.pfor._wrap_and_tile_variants", "ops.math_ops.add_n"], "parallel_for.pfor._convert_cross": ["parallel_for.pfor.wrap", "ops.math_ops.cross"], "parallel_for.pfor._convert_biasaddgrad": ["ops.math_ops.reduce_sum", "ops.array_ops.reshape", "parallel_for.pfor.wrap", "ops.array_ops.shape"], "parallel_for.pfor._convert_grads": ["parallel_for.pfor._create_op", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_select": ["parallel_for.pfor._create_op", "ops.array_ops.rank", "framework.smart_cond.smart_cond", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_select.<lambda1>": ["parallel_for.pfor._inputs_with_flattening"], "parallel_for.pfor._convert_select.<lambda2>": [], "parallel_for.pfor._convert_select.<lambda3>": ["parallel_for.pfor._unflatten_first_dim"], "parallel_for.pfor._convert_select.<lambda4>": [], "parallel_for.pfor._convert_selectv2": ["parallel_for.pfor.wrap", "ops.array_ops.where_v2"], "parallel_for.pfor._transpose_dim_to_front": ["ops.math_ops.range", "ops.array_ops.transpose", "ops.array_ops.rank", "ops.array_ops.concat"], "parallel_for.pfor._convert_random": ["parallel_for.pfor.wrap", "ops.array_ops.concat", "platform.tf_logging.warning", "<builtin>.range", "parallel_for.pfor._create_op"], "parallel_for.pfor._convert_random_with_param": ["parallel_for.pfor.wrap", "parallel_for.pfor._transpose_dim_to_front", "ops.array_ops.concat", "platform.tf_logging.warning", "ops.array_ops.shape", "parallel_for.pfor._create_op"], "parallel_for.pfor._convert_multinomial": ["parallel_for.pfor.wrap", "ops.array_ops.reshape", "ops.gen_random_ops.multinomial", "parallel_for.pfor._unflatten_first_dim", "ops.array_ops.transpose", "platform.tf_logging.warning", "parallel_for.pfor._flatten_first_two_dims"], "ops.gen_random_ops.multinomial": [], "parallel_for.pfor._convert_stateless_multinomial": ["parallel_for.pfor._fallback_converter"], "parallel_for.pfor._convert_einsum": ["python.xla.einsum", "<builtin>.ValueError", "parallel_for.pfor.wrap", "<builtin>.any", "<builtin>.zip", "<builtin>.len", "<builtin>.range", "ops.special_math_ops.einsum"], "python.xla.einsum": [], "parallel_for.pfor._convert_cholesky": ["parallel_for.pfor.wrap", "ops.linalg_ops.cholesky"], "parallel_for.pfor._convert_log_matrix_determinant": ["parallel_for.pfor.wrap", "ops.linalg_ops.log_matrix_determinant"], "ops.linalg_ops.log_matrix_determinant": [], "parallel_for.pfor._convert_matrix_inverse": ["parallel_for.pfor.wrap", "ops.gen_linalg_ops.matrix_inverse"], "ops.gen_linalg_ops.matrix_inverse": [], "parallel_for.pfor._convert_matrix_solve": ["ops.gen_linalg_ops.matrix_solve", "parallel_for.pfor.wrap"], "ops.gen_linalg_ops.matrix_solve": [], "parallel_for.pfor._convert_matrix_triangular_solve": ["ops.linalg_ops.matrix_triangular_solve", "parallel_for.pfor.wrap"], "ops.linalg_ops.matrix_triangular_solve": ["ops.gen_linalg_ops.matrix_triangular_solve", "framework.ops.name_scope"], "parallel_for.pfor._convert_self_adjoint_eig": ["parallel_for.pfor.wrap", "ops.gen_linalg_ops.self_adjoint_eig_v2"], "ops.gen_linalg_ops.self_adjoint_eig_v2": [], "parallel_for.pfor._convert_assert": ["parallel_for.pfor._create_op", "ops.math_ops.reduce_all"], "parallel_for.pfor._convert_print": ["parallel_for.pfor._create_op", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_print_v2": ["parallel_for.pfor._create_op"], "parallel_for.pfor._convert_string_format": ["parallel_for.pfor._create_op", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_tensor_array_v3": ["parallel_for.pfor.wrap", "ops.data_flow_ops.tensor_array_v3"], "ops.data_flow_ops.tensor_array_v3": [], "parallel_for.pfor._convert_tensor_array_size_v3": ["parallel_for.pfor._unstack_flow", "parallel_for.pfor.wrap", "ops.data_flow_ops.tensor_array_size_v3"], "parallel_for.pfor._unstack_flow": ["ops.array_ops.gather"], "ops.data_flow_ops.tensor_array_size_v3": [], "parallel_for.pfor._handle_inside_pfor": ["<builtin>.ValueError"], "parallel_for.pfor._convert_tensor_array_read_v3": ["<builtin>.ValueError", "parallel_for.pfor.wrap", "parallel_for.pfor._unstack_flow", "ops.data_flow_ops.tensor_array_gather_v3", "ops.array_ops.gather", "ops.data_flow_ops.tensor_array_read_v3", "parallel_for.pfor._handle_inside_pfor"], "ops.data_flow_ops.tensor_array_gather_v3": [], "ops.data_flow_ops.tensor_array_read_v3": [], "parallel_for.pfor._convert_tensor_array_write_v3": ["<builtin>.ValueError", "parallel_for.pfor.wrap", "parallel_for.pfor._unstack_flow", "ops.data_flow_ops.tensor_array_write_v3", "parallel_for.pfor._stack", "ops.data_flow_ops.tensor_array_scatter_v3", "parallel_for.pfor._handle_inside_pfor"], "ops.data_flow_ops.tensor_array_write_v3": [], "ops.data_flow_ops.tensor_array_scatter_v3": [], "parallel_for.pfor._transpose_first_two_dims": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.transpose", "ops.array_ops.concat"], "parallel_for.pfor._convert_tensor_array_gather_v3": ["<builtin>.ValueError", "parallel_for.pfor.wrap", "parallel_for.pfor._transpose_first_two_dims", "parallel_for.pfor._unstack_flow", "ops.array_ops.reshape", "ops.data_flow_ops.tensor_array_gather_v3", "parallel_for.pfor._unflatten_first_dim", "parallel_for.pfor._handle_inside_pfor"], "parallel_for.pfor._convert_tensor_array_scatter_v3": ["<builtin>.ValueError", "parallel_for.pfor.wrap", "parallel_for.pfor._transpose_first_two_dims", "parallel_for.pfor._unstack_flow", "ops.array_ops.reshape", "parallel_for.pfor._stack", "ops.data_flow_ops.tensor_array_scatter_v3", "parallel_for.pfor._flatten_first_two_dims", "parallel_for.pfor._handle_inside_pfor"], "parallel_for.pfor._convert_tensor_array_grad_v3": ["parallel_for.pfor._unstack_flow", "parallel_for.pfor._stack", "ops.data_flow_ops.tensor_array_grad_with_shape", "parallel_for.pfor.wrap"], "ops.data_flow_ops.tensor_array_grad_with_shape": [], "parallel_for.pfor._stack_tensor_list_shape": ["framework.tensor_util.constant_value", "framework.constant_op.constant", "ops.array_ops.reshape", "numpy.asarray", "ops.control_flow_ops.cond", "ops.math_ops.reduce_any"], "parallel_for.pfor._stack_tensor_list_shape.<lambda1>": ["framework.constant_op.constant"], "parallel_for.pfor._stack_tensor_list_shape.<lambda2>": ["ops.array_ops.concat"], "parallel_for.pfor._tile_variant": ["parallel_for.pfor._tile_variant_with_length"], "parallel_for.pfor._convert_optional_from_value": ["parallel_for.pfor.wrap", "ops.gen_dataset_ops.optional_from_value"], "parallel_for.pfor._convert_optional_get_value": ["ops.gen_dataset_ops.optional_get_value", "framework.tensor_util.constant_value", "framework.tensor_shape.TensorShape", "parallel_for.pfor.wrap"], "parallel_for.pfor._convert_tensor_list_reserve": ["ops.list_ops.tensor_list_reserve", "parallel_for.pfor._tile_variant", "parallel_for.pfor.wrap", "parallel_for.pfor._stack_tensor_list_shape"], "ops.list_ops.tensor_list_reserve": ["ops.list_ops._build_element_shape", "ops.list_ops._set_handle_data", "ops.gen_list_ops.tensor_list_reserve"], "parallel_for.pfor._convert_tensor_list_element_shape": ["ops.list_ops.tensor_list_element_shape", "ops.array_ops.reshape", "parallel_for.pfor._untile_variant", "parallel_for.pfor.wrap"], "ops.list_ops.tensor_list_element_shape": [], "parallel_for.pfor._convert_tensor_list_length": ["parallel_for.pfor._untile_variant", "parallel_for.pfor.wrap", "ops.list_ops.tensor_list_length"], "parallel_for.pfor._stack_tensor_list._body_fn": ["ops.list_ops.tensor_list_set_item", "parallel_for.pfor._stack", "ops.list_ops.tensor_list_get_item"], "parallel_for.pfor._stack_tensor_list.<lambda1>": [], "parallel_for.pfor._convert_tensor_list_get_item": ["parallel_for.pfor._untile_variant", "parallel_for.pfor.wrap", "parallel_for.pfor._stack_tensor_list_shape", "ops.list_ops.tensor_list_gather", "ops.map_fn.map_fn", "ops.list_ops.tensor_list_get_item"], "parallel_for.pfor._convert_tensor_list_get_item._map_fn": ["ops.list_ops.tensor_list_get_item", "ops.array_ops.gather"], "ops.list_ops.tensor_list_gather": ["ops.list_ops._build_element_shape", "ops.gen_list_ops.tensor_list_gather"], "parallel_for.pfor._convert_tensor_array_set_item": ["parallel_for.pfor._tile_variant", "parallel_for.pfor._untile_variant", "ops.list_ops.tensor_list_scatter", "parallel_for.pfor.wrap", "<builtin>.ValueError", "parallel_for.pfor._stack", "parallel_for.pfor._stack_tensor_list", "ops.list_ops.tensor_list_set_item"], "ops.list_ops.tensor_list_scatter": ["ops.list_ops._build_element_shape", "ops.gen_list_ops.tensor_list_scatter_into_existing_list", "ops.gen_list_ops.tensor_list_scatter_v2", "ops.handle_data_util.copy_handle_data", "framework.ops.convert_to_tensor", "ops.list_ops._set_handle_data"], "parallel_for.pfor._convert_tensor_list_push_back": ["parallel_for.pfor._tile_variant", "parallel_for.pfor._untile_variant", "parallel_for.pfor.wrap", "ops.list_ops.tensor_list_push_back", "parallel_for.pfor._stack", "parallel_for.pfor._stack_tensor_list"], "parallel_for.pfor._convert_tensor_array_push_back": ["parallel_for.pfor._untile_variant", "parallel_for.pfor.wrap", "ops.gen_list_ops.tensor_list_pop_back", "ops.array_ops.concat"], "ops.gen_list_ops.tensor_list_pop_back": [], "parallel_for.pfor._convert_tensor_list_concat_v2": ["parallel_for.pfor._untile_variant", "parallel_for.pfor._transpose_first_two_dims", "parallel_for.pfor.wrap", "ops.list_ops.tensor_list_length", "ops.control_flow_ops.while_loop", "ops.array_ops.concat", "ops.list_ops.tensor_list_reserve", "ops.control_flow_ops.cond", "ops.gen_list_ops.tensor_list_concat_v2"], "parallel_for.pfor._convert_tensor_list_concat_v2.<lambda1>": ["ops.array_ops.shape", "ops.list_ops.tensor_list_get_item"], "parallel_for.pfor._convert_tensor_list_concat_v2.<lambda2>": ["framework.constant_op.constant"], "parallel_for.pfor._convert_tensor_list_concat_v2._transpose_elem": ["ops.list_ops.tensor_list_set_item", "parallel_for.pfor._transpose_first_two_dims", "ops.list_ops.tensor_list_get_item"], "parallel_for.pfor._convert_tensor_list_concat_v2.<lambda3>": [], "ops.gen_list_ops.tensor_list_concat_v2": [], "parallel_for.pfor._convert_tensor_list_stack": ["parallel_for.pfor._untile_variant", "parallel_for.pfor._transpose_first_two_dims", "parallel_for.pfor.wrap", "parallel_for.pfor._stack_tensor_list_shape", "ops.list_ops.tensor_list_stack"], "parallel_for.pfor._convert_tensor_list_gather": ["parallel_for.pfor._untile_variant", "parallel_for.pfor.wrap", "parallel_for.pfor._stack_tensor_list_shape", "ops.list_ops.tensor_list_gather", "ops.array_ops.reshape", "ops.map_fn.map_fn", "ops.array_ops.concat", "ops.array_ops.shape"], "parallel_for.pfor._convert_tensor_list_gather._map_fn": ["ops.list_ops.tensor_list_gather", "ops.array_ops.rank", "ops.array_ops.gather"], "parallel_for.pfor._convert_tensor_list_scatter": ["parallel_for.pfor._tile_variant", "parallel_for.pfor._untile_variant", "parallel_for.pfor._transpose_first_two_dims", "ops.array_ops.unique", "ops.list_ops.tensor_list_scatter", "parallel_for.pfor.wrap", "ops.list_ops.tensor_list_gather", "ops.array_ops.reshape", "ops.array_ops.stack", "ops.array_ops.tensor_scatter_nd_update", "ops.math_ops.range", "ops.array_ops.tile", "parallel_for.pfor._stack_tensor_list", "ops.array_ops.shape", "parallel_for.pfor._flatten_first_two_dims"], "ops.array_ops.tensor_scatter_nd_update": ["ops.gen_array_ops.tensor_scatter_update"], "parallel_for.pfor._convert_tensor_list_from_tensor": ["parallel_for.pfor._tile_variant", "parallel_for.pfor._transpose_first_two_dims", "parallel_for.pfor.wrap", "parallel_for.pfor._stack_tensor_list_shape", "ops.list_ops.tensor_list_from_tensor"], "parallel_for.pfor._stack_cache_key": ["framework.ops.get_default_graph"], "parallel_for.pfor._stack_handle_inside_pfor": [], "parallel_for.pfor._convert_stack_push_v2": ["<builtin>.ValueError", "parallel_for.pfor.wrap", "parallel_for.pfor._stack", "parallel_for.pfor._stack_cache_key", "parallel_for.pfor._stack_handle_inside_pfor", "ops.data_flow_ops.stack_push_v2"], "ops.data_flow_ops.stack_push_v2": [], "parallel_for.pfor._convert_stack_pop_v2": ["parallel_for.pfor.wrap", "parallel_for.pfor._stack_cache_key", "ops.data_flow_ops.stack_pop_v2"], "ops.data_flow_ops.stack_pop_v2": [], "parallel_for.pfor._convert_decode_csv": ["ops.parsing_ops.decode_csv", "parallel_for.pfor.wrap", "<builtin>.range"], "parallel_for.pfor._convert_parse_single_example": ["ops.gen_parsing_ops.parse_example", "util.nest.flatten", "parallel_for.pfor.wrap", "<builtin>.range"], "ops.gen_parsing_ops.parse_example": [], "parallel_for.pfor._convert_parse_example_v2": ["<builtin>.ValueError", "parallel_for.pfor.wrap", "util.nest.flatten", "<builtin>.range", "ops.gen_parsing_ops.parse_example_v2"], "ops.gen_parsing_ops.parse_example_v2": [], "parallel_for.pfor._convert_function_call": ["parallel_for.pfor._convert_function_call.f", "parallel_for.pfor.wrap", "<builtin>.zip", "<builtin>.isinstance", "<builtin>.len", "parallel_for.pfor.PFor._convert_helper"], "parallel_for.pfor._convert_function_call.f": ["<builtin>.all", "<builtin>.zip", "<builtin>.isinstance", "parallel_for.pfor.PFor._add_conversion", "<builtin>.len", "parallel_for.pfor.PFor._convert_helper", "<builtin>.tuple"], "parallel_for.pfor._convert_partitioned_call": ["<builtin>.isinstance", "util.compat.as_bytes", "parallel_for.pfor._convert_function_call", "parallel_for.pfor.PFor.__init__"], "parallel_for.pfor._partition_inputs_for_indices": ["parallel_for.pfor.wrap", "ops.array_ops.gather"], "parallel_for.pfor._outputs_for_branch": ["ops.array_ops.size", "parallel_for.pfor._stack", "parallel_for.pfor._convert_function_call", "parallel_for.pfor.PFor.__init__"], "parallel_for.pfor._convert_if": ["parallel_for.pfor.wrap", "ops.data_flow_ops.dynamic_partition", "parallel_for.pfor._outputs_for_branch", "<builtin>.zip", "ops.math_ops.range", "parallel_for.pfor._partition_inputs_for_indices", "ops.data_flow_ops.dynamic_stitch", "<builtin>.len", "ops.math_ops.cast", "ops.control_flow_ops.cond"], "ops.data_flow_ops.dynamic_stitch": [], "parallel_for.pfor._convert_if.<lambda1>": ["parallel_for.pfor._outputs_for_branch"], "parallel_for.pfor._convert_if.<lambda2>": ["parallel_for.pfor._outputs_for_branch"], "parallel_for.pfor.WhileV2.__init__": ["<builtin>.ValueError", "<builtin>.id", "<builtin>.zip", "util.compat.as_bytes", "<builtin>.set", "<builtin>.enumerate"], "parallel_for.pfor.WhileV2._output_shapes": ["parallel_for.pfor._is_variant_with_internal_stacking", "<builtin>.len", "framework.tensor_shape.TensorShape", "<builtin>.enumerate"], "parallel_for.pfor.WhileV2._init_values": ["framework.ops.name_scope", "ops.list_ops.tensor_list_length", "parallel_for.pfor._parse_variant_shapes_and_types", "ops.tensor_array_ops.TensorArray", "ops.control_flow_ops.while_loop", "ops.math_ops.range", "ops.list_ops.tensor_list_element_shape", "ops.array_ops.rank", "ops.math_ops.equal", "ops.control_flow_ops.cond", "<builtin>.NotImplementedError", "parallel_for.pfor._variant_type_id"], "parallel_for.pfor.WhileV2._init_values.<lambda1>": [], "parallel_for.pfor.WhileV2._init_values.<lambda2>": [], "parallel_for.pfor.WhileV2._init_values._init_loop_body": ["ops.list_ops.tensor_list_reserve"], "parallel_for.pfor.WhileV2._init_values.<lambda3>": [], "parallel_for.pfor.WhileV2._process_cond_unstacked": ["ops.array_ops.reshape"], "parallel_for.pfor.WhileV2._process_cond_stacked": ["ops.data_flow_ops.dynamic_partition", "parallel_for.pfor._parse_variant_shapes_and_types", "ops.list_ops.tensor_list_length", "<builtin>.zip", "ops.control_flow_ops.while_loop", "framework.tensor_shape.TensorShape", "ops.array_ops.size", "parallel_for.pfor._stack", "ops.list_ops.tensor_list_element_shape", "<builtin>.len", "ops.math_ops.cast", "ops.list_ops.tensor_list_reserve", "ops.math_ops.reduce_any", "parallel_for.pfor._variant_type_id", "<builtin>.enumerate"], "parallel_for.pfor.WhileV2._process_cond_stacked._split_vectorized_ta_element": ["ops.list_ops.tensor_list_scatter", "ops.data_flow_ops.dynamic_partition", "ops.array_ops.size", "parallel_for.pfor._stack", "ops.list_ops.tensor_list_set_item", "ops.list_ops.tensor_list_get_item"], "parallel_for.pfor.WhileV2._process_cond_stacked.<lambda1>": [], "parallel_for.pfor.WhileV2._process_body": ["ops.control_flow_ops.cond"], "parallel_for.pfor.WhileV2._process_body.true_fn": ["parallel_for.pfor.wrap", "<builtin>.zip", "parallel_for.pfor.PFor.__init__", "parallel_for.pfor._convert_function_call", "ops.array_ops.size", "parallel_for.pfor._stack", "framework.ops.control_dependencies", "parallel_for.pfor._tile_variant_with_length", "ops.array_ops.gather", "ops.control_flow_ops.Assert", "<builtin>.enumerate", "ops.array_ops.identity"], "parallel_for.pfor.WhileV2._process_body.<lambda1>": ["<builtin>.list"], "parallel_for.pfor.WhileV2.__call__": ["parallel_for.pfor.wrap", "<builtin>.zip", "parallel_for.pfor.WhileV2._output_shapes", "parallel_for.pfor.WhileV2.__init__", "<builtin>.enumerate", "parallel_for.pfor.WhileV2.__call__.while_fn"], "parallel_for.pfor.WhileV2.__call__.cond": [], "parallel_for.pfor.WhileV2.__call__.body": ["parallel_for.pfor.WhileV2._process_cond_unstacked", "framework.ops.name_scope", "parallel_for.pfor.wrap", "<builtin>.zip", "parallel_for.pfor.WhileV2._process_body", "parallel_for.pfor.PFor.__init__", "parallel_for.pfor._convert_function_call", "ops.array_ops.size", "parallel_for.pfor.WhileV2._process_cond_stacked", "<builtin>.len", "<builtin>.list", "<builtin>.tuple", "<builtin>.enumerate"], "parallel_for.pfor.WhileV2.__call__.while_fn": ["ops.list_ops.tensor_list_length", "parallel_for.pfor._parse_variant_shapes_and_types", "ops.control_flow_ops.while_loop", "framework.tensor_shape.TensorShape", "parallel_for.pfor.WhileV2._init_values", "ops.list_ops.tensor_list_reserve", "parallel_for.pfor._variant_type_id", "<builtin>.enumerate"], "parallel_for.pfor.WhileV2.__call__.while_fn._stack_loop_body": ["ops.list_ops.tensor_list_set_item", "ops.list_ops.tensor_list_stack"], "parallel_for.pfor.WhileV2.__call__.while_fn.<lambda1>": [], "parallel_for.pfor._convert_while": ["parallel_for.pfor.WhileV2.__init__"], "parallel_for.pfor._convert_fft": ["parallel_for.pfor.wrap"], "parallel_for.pfor._convert_rfft": ["parallel_for.pfor.wrap"], "ragged.ragged_array_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ragged.ragged_array_ops.boolean_mask": ["framework.ops.name_scope", "ops.math_ops.range", "ragged_tensor.RaggedTensor.from_row_lengths", "ops.math_ops.count_nonzero", "ragged.segment_id_ops.row_splits_to_segment_ids", "<builtin>.range", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_tensor.is_ragged", "framework.ops.control_dependencies", "ops.array_ops.shape", "ops.array_ops.reshape", "ragged.ragged_tensor.match_row_splits_dtypes", "ragged_tensor.RaggedTensor.from_tensor", "ragged.ragged_util.assert_splits_match", "ragged_tensor.RaggedTensor.from_row_splits", "ops.array_ops.gather", "<builtin>.min", "ragged.ragged_math_ops.reduce_sum", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ragged.ragged_array_ops.boolean_mask", "ragged.ragged_functional_ops.map_flat_values", "<builtin>.ValueError", "ops.math_ops.cumprod", "ragged.ragged_util.lengths_to_splits", "ops.array_ops.boolean_mask"], "ragged.ragged_tensor.match_row_splits_dtypes": ["ragged.ragged_config.auto_cast_partition_dtype", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.ValueError"], "ragged.ragged_tensor.is_ragged": ["<builtin>.isinstance"], "ragged.ragged_util.assert_splits_match": ["<builtin>.zip", "<builtin>.len", "<builtin>.ValueError", "ops.check_ops.assert_equal"], "ragged.ragged_math_ops.reduce_sum": ["ragged.ragged_math_ops.ragged_reduce_aggregate"], "ragged.ragged_util.lengths_to_splits": ["ops.array_ops.concat", "ops.math_ops.cumsum"], "ragged.segment_id_ops.row_splits_to_segment_ids": ["ops.array_ops.shape", "framework.tensor_shape.dimension_value", "framework.dtypes.as_dtype", "<builtin>.ValueError", "ragged.ragged_util.repeat", "framework.ops.convert_to_tensor", "ops.math_ops.range", "framework.ops.name_scope"], "ragged_tensor.RaggedTensor.from_row_lengths": [], "ragged.ragged_array_ops.tile": ["ops.array_ops.tile", "framework.ops.name_scope", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ragged.ragged_array_ops._tile_ragged_splits", "ragged.ragged_util.convert_to_int_tensor", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_array_ops._tile_ragged_values", "framework.tensor_util.constant_value", "ragged.ragged_tensor.is_ragged"], "ragged.ragged_util.convert_to_int_tensor": [], "ragged.ragged_array_ops._tile_ragged_values": ["ops.array_ops.tile", "ops.array_ops.gather", "ops.math_ops.range", "ops.array_ops.concat", "<builtin>.range", "ragged.ragged_util.repeat_ranges"], "ragged.ragged_array_ops._tile_ragged_splits": ["ops.array_ops.tile", "ops.array_ops.gather", "<builtin>.range", "ragged.ragged_util.lengths_to_splits", "ragged.ragged_util.repeat_ranges"], "ragged.ragged_util.repeat_ranges": ["ops.array_ops.ones", "ops.array_ops.repeat_with_axis", "ops.gen_ragged_math_ops.ragged_range", "ops.array_ops.shape", "ops.array_ops.gather"], "ragged.ragged_array_ops.expand_dims": ["ops.array_ops.expand_dims", "framework.ops.name_scope", "ragged.ragged_array_ops.expand_dims", "ops.array_ops.get_positive_axis", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged_tensor.RaggedTensor.from_uniform_row_length", "ragged.ragged_tensor.is_ragged"], "ops.array_ops.get_positive_axis": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.type", "<builtin>.isinstance"], "ragged.ragged_array_ops.size": ["ops.array_ops.size", "ragged.ragged_tensor.is_ragged"], "ragged.ragged_array_ops.rank": ["framework.ops.name_scope", "ops.array_ops.rank", "ragged.ragged_tensor.is_ragged"], "ragged.ragged_array_ops.ragged_one_hot": ["framework.ops.name_scope", "ops.array_ops.one_hot", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.ValueError", "<builtin>.isinstance"], "ragged.ragged_array_ops.stack_dynamic_partitions": ["ops.check_ops.assert_less", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.array_ops.gather", "framework.ops.control_dependencies", "ops.sort_ops.argsort", "ops.check_ops.assert_equal", "ragged_tensor.RaggedTensor.from_value_rowids", "<builtin>.max", "ops.math_ops.cast", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged_tensor.RaggedTensor.from_tensor", "ops.array_ops.stack", "<builtin>.ValueError", "<builtin>.isinstance", "ragged.ragged_array_ops.stack_dynamic_partitions"], "ragged_tensor.RaggedTensor.from_value_rowids": [], "ragged.ragged_array_ops.reverse": ["framework.ops.name_scope", "<builtin>.all", "<builtin>.TypeError", "<builtin>.slice", "ops.array_ops.get_positive_axis", "<builtin>.tuple", "<builtin>.max", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.isinstance", "framework.tensor_util.constant_value", "<builtin>.enumerate"], "ragged.ragged_array_ops._cross_internal": ["<builtin>.TypeError", "framework.ops.name_scope", "<builtin>.all", "sparse_tensor.SparseTensor.from_value", "ops.gen_ragged_array_ops.ragged_cross", "framework.sparse_tensor.is_sparse", "ops.math_ops.cast", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged_tensor.RaggedTensor.from_row_splits", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.enumerate"], "ragged.ragged_array_ops.cross_hashed": ["ragged.ragged_array_ops._cross_internal"], "ops.gen_ragged_array_ops.ragged_cross": [], "ragged.ragged_batch_gather_ops": [], "ragged.ragged_batch_gather_ops.batch_gather": ["ragged.ragged_gather_ops.gather"], "ragged.ragged_gather_ops.gather": ["framework.ops.name_scope", "ops.array_ops.get_positive_axis", "<builtin>.ValueError", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_tensor.match_row_splits_dtypes", "ragged.ragged_gather_ops._gather"], "ragged.ragged_batch_gather_with_default_op": [], "ragged.ragged_batch_gather_with_default_op.batch_gather_with_default": ["ops.array_ops.broadcast_to", "ops.check_ops.assert_greater_equal", "ragged.ragged_tensor.is_ragged", "<builtin>.ValueError", "ops.math_ops.cast", "ragged.ragged_tensor_shape.broadcast_to", "framework.ops.control_dependencies", "ops.array_ops.rank", "ragged.ragged_batch_gather_with_default_op._get_pad_shape", "framework.ops.name_scope", "ragged.ragged_array_ops.expand_dims", "ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.zeros_like", "ragged.ragged_where_op.where", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_tensor.match_row_splits_dtypes", "ops.array_ops.batch_gather"], "ragged.ragged_batch_gather_with_default_op._get_pad_shape": ["framework.constant_op.constant", "ops.array_ops.concat", "ops.array_ops.ones_like", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape", "ragged_tensor_shape.RaggedTensorDynamicShape.from_tensor"], "ragged.ragged_tensor_shape.broadcast_to": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_tensor_shape._broadcast_to_ragged_shape", "ragged.ragged_tensor_shape._broadcast_to_uniform_shape", "<builtin>.isinstance", "<builtin>.TypeError"], "ragged.ragged_where_op.where": ["ragged.ragged_where_op._coordinate_where", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.ValueError", "ragged.ragged_where_op._elementwise_where", "ragged.ragged_tensor.match_row_splits_dtypes", "framework.ops.name_scope"], "ops.array_ops.batch_gather": ["ops.array_ops._batch_gather", "framework.ops.name_scope", "<builtin>.ValueError", "framework.ops.convert_to_tensor"], "ragged_tensor_shape.RaggedTensorDynamicShape.from_tensor": [], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape": [], "ragged.ragged_concat_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ragged.ragged_concat_ops.concat": ["ragged.ragged_concat_ops._ragged_stack_concat_helper", "framework.ops.name_scope", "<builtin>.isinstance"], "ragged.ragged_concat_ops._ragged_stack_concat_helper": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_tensor.match_row_splits_dtypes", "<builtin>.max", "framework.ops.control_dependencies", "ops.array_ops.get_positive_axis", "ops.array_ops.concat", "ragged.ragged_concat_ops._ragged_stack_concat_axis_0", "ragged.ragged_tensor.is_ragged", "<builtin>.all", "<builtin>.len", "ragged_tensor.RaggedTensor.from_row_splits", "ragged_tensor.RaggedTensor.from_tensor", "<builtin>.ValueError", "ragged.ragged_concat_ops._increase_ragged_rank_to", "ops.array_ops.shape", "ops.array_ops.stack", "ragged.ragged_concat_ops._ragged_stack_concat_axis_1", "ragged.ragged_util.assert_splits_match", "ragged_tensor.RaggedTensor.from_row_lengths", "<builtin>.range", "ragged.ragged_concat_ops._ragged_stack_concat_helper", "<builtin>.list"], "ragged.ragged_concat_ops.stack": ["ragged.ragged_concat_ops._ragged_stack_concat_helper", "framework.ops.name_scope", "<builtin>.isinstance"], "ragged.ragged_concat_ops._increase_ragged_rank_to": ["ragged.ragged_tensor.is_ragged", "ragged.ragged_concat_ops._increase_ragged_rank_to", "ragged_tensor.RaggedTensor.from_tensor"], "ragged.ragged_concat_ops._ragged_stack_concat_axis_0": ["ops.array_ops.concat", "<builtin>.range", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ragged.ragged_concat_ops._concat_ragged_splits", "ragged.ragged_util.lengths_to_splits", "ops.array_ops.stack"], "ragged.ragged_concat_ops._ragged_stack_concat_axis_1": ["ragged_tensor.RaggedTensor.from_row_splits", "ragged.ragged_gather_ops.gather", "framework.ops.control_dependencies", "<builtin>.len", "ops.array_ops.reshape", "ops.array_ops.transpose", "ops.check_ops.assert_equal", "ragged.ragged_concat_ops._copy_row_shape", "ragged.ragged_concat_ops._ragged_stack_concat_axis_0", "ops.math_ops.range"], "ragged.ragged_concat_ops._concat_ragged_splits": ["ops.array_ops.concat"], "ragged.ragged_concat_ops._copy_row_shape": ["framework.tensor_shape.TensorShape"], "ragged.ragged_config": [], "ragged.ragged_config.auto_cast_partition_dtype": [], "ragged.ragged_conversion_ops": ["framework.ops.RegisterGradient"], "ragged.ragged_conversion_ops.from_tensor": ["ragged_tensor.RaggedTensor.from_tensor", "ragged.ragged_tensor.is_ragged"], "ragged.ragged_conversion_ops.to_tensor": ["ragged.ragged_tensor.is_ragged"], "ragged.ragged_conversion_ops.ragged_to_dense": [], "ragged.ragged_conversion_ops._ragged_tensor_to_tensor_grad": ["ops.array_ops.shape", "ragged.ragged_conversion_ops._rank_ignoring_leading_dims_with_size_1", "ops.array_ops.reshape", "ops.array_ops.boolean_mask", "ops.math_ops.range", "ops.array_ops.rank", "ops.math_ops.reduce_sum", "ops.gen_ragged_conversion_ops.ragged_tensor_to_tensor", "ops.math_ops.not_equal", "framework.indexed_slices.IndexedSlices", "<builtin>.sum"], "ops.gen_ragged_conversion_ops.ragged_tensor_to_tensor": [], "framework.indexed_slices.IndexedSlices": [], "ragged.ragged_conversion_ops._rank_ignoring_leading_dims_with_size_1": ["ops.math_ops.equal", "ops.array_ops.shape", "ops.math_ops.cumprod", "ops.math_ops.reduce_sum", "ops.math_ops.cast", "ops.array_ops.rank"], "ragged.ragged_conversion_ops.to_sparse": [], "ragged.ragged_conversion_ops.from_sparse": ["ragged_tensor.RaggedTensor.from_sparse"], "ragged_tensor.RaggedTensor.from_sparse": [], "ragged.ragged_conversion_ops._ragged_tensor_from_variant_grad": ["<builtin>.ValueError", "ops.gen_ragged_conversion_ops.ragged_tensor_to_variant"], "ops.gen_ragged_conversion_ops.ragged_tensor_to_variant": [], "ragged.ragged_conversion_ops._ragged_tensor_to_variant_grad": ["ops.gen_ragged_conversion_ops.ragged_tensor_to_variant_gradient", "ops.array_ops.shape", "<builtin>.len"], "ops.gen_ragged_conversion_ops.ragged_tensor_to_variant_gradient": [], "ragged.ragged_dispatch": ["ragged.ragged_dispatch.register_dispatchers", "collections.namedtuple"], "ragged.ragged_dispatch._get_arg_infos": ["<builtin>.ValueError", "util.tf_inspect.getargspec", "<builtin>.isinstance"], "ragged.ragged_dispatch._is_convertible_to_tensor": ["framework.ops.convert_to_tensor", "<builtin>.isinstance"], "ragged.ragged_dispatch.UnaryRaggedElementwiseDispatcher.__init__": ["util.tf_inspect.getfullargspec"], "ragged.ragged_dispatch.UnaryRaggedElementwiseDispatcher.handle": ["ragged.ragged_util.assert_splits_match", "framework.ops.control_dependencies", "ragged.ragged_dispatch._is_convertible_to_tensor", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_tensor.is_ragged", "ragged.ragged_tensor.match_row_splits_dtypes"], "ragged.ragged_dispatch.BinaryRaggedElementwiseDispatcher.__init__": ["util.tf_inspect.getfullargspec"], "ragged.ragged_dispatch.BinaryRaggedElementwiseDispatcher.handle": ["ragged.ragged_tensor_shape.broadcast_dynamic_shape", "ragged.ragged_tensor_shape.broadcast_to", "ragged_tensor_shape.RaggedTensorDynamicShape.from_tensor", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.len", "ragged.ragged_tensor.is_ragged", "ragged.ragged_tensor.match_row_splits_dtypes"], "ragged.ragged_tensor_shape.broadcast_dynamic_shape": ["<builtin>.max", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.range", "<builtin>.ValueError"], "ragged.ragged_dispatch.RaggedDispatcher.__init__": ["ragged.ragged_dispatch._get_arg_infos", "<builtin>.AssertionError", "util.tf_inspect.getfullargspec"], "ragged.ragged_dispatch.RaggedDispatcher.handle": ["ragged.ragged_dispatch.RaggedDispatcher.is_supported"], "ragged.ragged_dispatch.RaggedDispatcher.is_supported": ["ragged.ragged_dispatch._is_convertible_to_tensor", "<builtin>.len", "ragged.ragged_tensor.is_ragged", "<builtin>.isinstance"], "ragged.ragged_dispatch._ragged_gather_v1": ["ragged.ragged_gather_ops.gather"], "ragged.ragged_dispatch._ragged_gather_nd_v1": ["ragged.ragged_gather_ops.gather_nd"], "ragged.ragged_gather_ops.gather_nd": ["framework.ops.name_scope", "ops.array_ops.ones", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged_tensor.RaggedTensor.to_tensor", "ragged.ragged_tensor.is_ragged", "ragged.ragged_gather_ops.gather", "ragged_tensor.RaggedTensor.from_tensor", "ops.array_ops.reshape", "<builtin>.ValueError", "framework.tensor_shape.dimension_value", "ops.math_ops.cast", "ops.array_ops.rank", "ops.array_ops.gather_nd", "ragged.ragged_array_ops.tile", "ragged.ragged_array_ops.expand_dims", "<builtin>.isinstance", "ops.array_ops.shape", "ops.array_ops.gather", "ops.array_ops.concat", "<builtin>.range", "ragged.ragged_gather_ops.gather_nd", "ragged.ragged_tensor.match_row_splits_dtypes", "ops.array_ops.expand_dims"], "ragged.ragged_dispatch._ragged_expand_dims_v1": ["ragged.ragged_array_ops.expand_dims"], "ragged.ragged_dispatch._ragged_size_v1": ["ragged.ragged_array_ops.size"], "ragged.ragged_dispatch._ragged_squeeze_v1": ["ragged.ragged_squeeze_op.squeeze", "util.deprecation.deprecated_argument_lookup"], "ragged.ragged_squeeze_op.squeeze": ["<builtin>.all", "<builtin>.isinstance", "ops.math_ops.equal", "<builtin>.ValueError", "ops.array_ops.squeeze", "framework.ops.name_scope", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ops.array_ops.get_positive_axis", "<builtin>.TypeError", "<builtin>.enumerate", "ops.array_ops.size", "<builtin>.list", "<builtin>.set", "ragged_tensor.RaggedTensor.from_nested_row_splits", "<builtin>.range", "ops.math_ops.reduce_all", "ops.control_flow_ops.Assert", "ops.control_flow_ops.with_dependencies", "framework.constant_op.constant"], "ragged.ragged_dispatch._ragged_dynamic_partition": ["<builtin>.range", "<builtin>.TypeError", "<builtin>.isinstance", "ragged.ragged_array_ops.stack_dynamic_partitions"], "ragged.ragged_dispatch._ragged_nn_dropout_v1": ["framework.ops.name_scope", "ops.nn_ops.dropout", "<builtin>.ValueError", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor"], "ops.nn_ops.dropout": ["<builtin>.ValueError", "util.deprecation.deprecated_argument_lookup", "ops.nn_ops.dropout_v2"], "ragged.ragged_dispatch._ragged_nn_dropout_v2": ["framework.ops.name_scope", "ops.nn_ops.dropout_v2", "<builtin>.ValueError", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor"], "ragged.ragged_dispatch.register_dispatchers": ["ragged.ragged_dispatch.BinaryRaggedElementwiseDispatcher.__init__", "<builtin>.hasattr", "ragged.ragged_dispatch.RaggedDispatcher.__init__", "ragged.ragged_dispatch.UnaryRaggedElementwiseDispatcher.__init__", "<builtin>.AssertionError", "dispatch.OpDispatcher.register", "util.tf_decorator.unwrap"], "ragged.ragged_dispatch._ragged_op_signature": ["<builtin>.len", "util.tf_inspect.getfullargspec", "<builtin>.range", "util.tf_export.get_canonical_name_for_symbol"], "ragged.ragged_dispatch._op_is_in_tf_version": ["<builtin>.ValueError", "util.tf_export.get_v1_names", "util.tf_decorator.unwrap", "util.tf_export.get_v2_names"], "ragged.ragged_dispatch.ragged_op_list": ["ragged.ragged_dispatch._get_arg_infos", "<builtin>.sorted", "ragged.ragged_dispatch._op_is_in_tf_version", "ragged.ragged_dispatch._ragged_op_signature"], "ragged.ragged_factory_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export"], "ragged.ragged_factory_ops.constant": ["ragged.ragged_factory_ops._constant_value", "framework.ops.name_scope"], "ragged.ragged_factory_ops.constant.ragged_factory": ["ragged_tensor.RaggedTensor.from_row_splits", "framework.constant_op.constant"], "ragged.ragged_factory_ops._constant_value": ["<builtin>.reversed", "ragged.ragged_factory_ops.constant.ragged_factory", "<builtin>.range", "ragged.ragged_tensor.is_ragged", "<builtin>.ValueError", "ragged.ragged_factory_ops._default_inner_shape_for_pylist", "<builtin>.TypeError", "ragged.ragged_factory_ops.constant_value._ragged_factory", "<builtin>.isinstance", "numpy.ndim", "<builtin>.len", "ragged.ragged_factory_ops._find_scalar_and_max_depth", "<builtin>.max", "ragged.ragged_factory_ops.constant_value._inner_factory"], "ragged.ragged_factory_ops.constant_value": ["framework.dtypes.as_dtype", "ragged.ragged_factory_ops._constant_value", "<builtin>.isinstance"], "ragged.ragged_factory_ops.constant_value._ragged_factory": ["numpy.array", "ragged.ragged_tensor_value.RaggedTensorValue"], "ragged.ragged_factory_ops.constant_value._inner_factory": ["numpy.array", "numpy.reshape"], "ragged.ragged_factory_ops._find_scalar_and_max_depth": ["<builtin>.ValueError", "<builtin>.isinstance", "numpy.ndim", "ragged.ragged_factory_ops._find_scalar_and_max_depth", "<builtin>.max"], "ragged.ragged_factory_ops._default_inner_shape_for_pylist": ["<builtin>.range", "<builtin>.ValueError", "<builtin>.all", "ragged.ragged_factory_ops._default_inner_shape_for_pylist.check_inner_shape", "<builtin>.isinstance", "ragged.ragged_factory_ops._default_inner_shape_for_pylist.get_inner_shape", "numpy.ndim", "<builtin>.list", "<builtin>.sum"], "ragged.ragged_factory_ops._default_inner_shape_for_pylist.get_inner_shape": ["ragged.ragged_factory_ops._default_inner_shape_for_pylist.get_inner_shape", "<builtin>.len", "numpy.ndim", "<builtin>.isinstance"], "ragged.ragged_factory_ops._default_inner_shape_for_pylist.check_inner_shape": ["<builtin>.ValueError", "<builtin>.bool", "ragged.ragged_factory_ops._default_inner_shape_for_pylist.check_inner_shape", "<builtin>.isinstance", "numpy.ndim", "<builtin>.len"], "ragged.ragged_factory_ops.placeholder": ["ops.array_ops.placeholder", "<builtin>.reversed", "ragged_tensor.RaggedTensor.from_row_splits", "<builtin>.range", "framework.tensor_shape.TensorShape", "framework.ops.name_scope"], "ragged.ragged_functional_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ragged.ragged_functional_ops._replace_ragged_with_flat_values": ["framework.tensor_shape.dimension_at_index", "<builtin>.isinstance", "ragged.ragged_functional_ops._replace_ragged_with_flat_values.recurse", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.dict", "ragged.ragged_tensor.is_ragged", "<builtin>.tuple"], "ragged.ragged_functional_ops._replace_ragged_with_flat_values.recurse": ["ragged.ragged_functional_ops._replace_ragged_with_flat_values"], "ragged.ragged_gather_ops": ["framework.ops.RegisterGradient"], "ragged.ragged_gather_ops._gather": ["ops.array_ops.shape", "ops.math_ops.cumprod", "ragged.ragged_gather_ops._axis_gather", "ops.array_ops.gather", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ragged.ragged_gather_ops._batch_gather", "<builtin>.ValueError", "<builtin>.range", "<builtin>.len", "ragged.ragged_gather_ops._gather", "ragged.ragged_tensor.is_ragged", "ops.gen_ragged_array_ops.ragged_gather"], "ragged.ragged_gather_ops._batch_gather": ["ragged.ragged_gather_ops._batch_gather", "ops.math_ops.range", "ragged.ragged_gather_ops._increase_rank_to", "ops.array_ops.repeat", "ragged.ragged_gather_ops._row_starts", "ragged.ragged_gather_ops._flatten_dims_0_and_1", "<builtin>.ValueError", "ragged.ragged_gather_ops._gather", "<builtin>.isinstance", "ragged_tensor.RaggedTensor.from_tensor"], "ragged.ragged_gather_ops._axis_gather": ["ragged.ragged_gather_ops._increase_rank_to", "ragged.ragged_gather_ops._row_starts", "ragged.ragged_gather_ops._flatten_dims_0_and_1", "<builtin>.ValueError", "ragged.ragged_gather_ops._gather", "<builtin>.isinstance", "ragged_tensor.RaggedTensor.from_tensor"], "ops.gen_ragged_array_ops.ragged_gather": [], "ragged.ragged_gather_ops._flatten_dims_0_and_1": ["ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.reshape", "<builtin>.isinstance"], "ragged.ragged_gather_ops._row_starts": ["ops.array_ops.shape", "ops.math_ops.range", "ops.math_ops.cast", "<builtin>.isinstance"], "ragged.ragged_gather_ops._increase_rank_to": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.rank", "ragged.ragged_gather_ops._increase_rank_to", "ops.array_ops.concat", "ops.array_ops.ones", "<builtin>.isinstance"], "ragged_tensor.RaggedTensor.to_tensor": [], "ragged.ragged_gather_ops._ragged_gather_grad": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.gather", "framework.indexed_slices.IndexedSlices", "ragged.ragged_math_ops.range"], "ragged.ragged_math_ops.range": ["ragged.ragged_math_ops._infer_matching_dtype", "framework.ops.name_scope", "ops.gen_ragged_math_ops.ragged_range", "ragged_tensor.RaggedTensor.from_row_splits", "framework.ops.convert_to_tensor", "framework.dtypes.as_dtype"], "ragged.ragged_getitem": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ragged.ragged_getitem.ragged_tensor_getitem": ["<builtin>.TypeError", "framework.ops.name_scope", "ragged.ragged_getitem._ragged_getitem", "ragged.ragged_getitem._tensors_in_key_list", "<builtin>.isinstance", "<builtin>.list"], "ragged.ragged_getitem._tensors_in_key_list": ["<builtin>.isinstance", "ragged.ragged_getitem._tensors_in_key_list"], "ragged.ragged_getitem._ragged_getitem": ["ops.array_ops.shape", "<builtin>.len", "ragged.ragged_getitem._expand_ellipsis", "eager.context.executing_eagerly", "ragged_tensor.RaggedTensor.from_uniform_row_length", "ragged.ragged_getitem._ragged_getitem_inner_dimensions", "ragged.ragged_getitem._ragged_getitem", "<builtin>.IndexError", "<builtin>.isinstance", "ragged.ragged_getitem._slice_ragged_row_dimension", "framework.tensor_shape.dimension_at_index", "<builtin>.int"], "ragged.ragged_getitem._expand_ellipsis": ["<builtin>.ValueError", "<builtin>.IndexError", "<builtin>.slice", "<builtin>.sum"], "ragged.ragged_getitem._slice_ragged_row_dimension": ["ragged.ragged_getitem._build_ragged_tensor_from_value_ranges", "ops.array_ops.concat", "ragged_tensor.RaggedTensor.from_row_splits", "ops.array_ops.size", "ops.array_ops.zeros"], "ragged.ragged_getitem._ragged_getitem_inner_dimensions": ["ops.array_ops.shape", "ragged.ragged_getitem._expand_ellipsis", "<builtin>.TypeError", "ragged.ragged_getitem._build_ragged_tensor_from_value_ranges", "<builtin>.ValueError", "ops.math_ops.cast", "ragged.ragged_getitem._if_ge_zero", "ragged.ragged_getitem._ragged_getitem_inner_dimensions", "ragged_tensor.RaggedTensor.from_uniform_row_length", "<builtin>.type", "ragged.ragged_getitem._slice_length", "framework.ops.control_dependencies", "<builtin>.slice", "<builtin>.isinstance", "framework.tensor_shape.dimension_at_index"], "ragged.ragged_getitem._build_ragged_tensor_from_value_ranges": ["ops.array_ops.gather", "<builtin>.TypeError", "ops.math_ops.cast", "ragged.ragged_math_ops.range", "ragged.ragged_gather_ops.gather", "<builtin>.isinstance", "framework.ops.convert_to_tensor"], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda1>": [], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda2>": [], "ragged.ragged_getitem._if_ge_zero": ["ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda9>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda11>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda12>", "ops.control_flow_ops.cond", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda13>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda5>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda3>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda7>", "framework.tensor_util.constant_value", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda14>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda4>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda8>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda10>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda1>", "<builtin>.isinstance", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda6>", "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda2>"], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda3>": [], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda4>": [], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda5>": [], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda6>": [], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda7>": ["ops.math_ops.minimum"], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda8>": ["ops.math_ops.maximum"], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda9>": [], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda10>": [], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda11>": ["ops.math_ops.minimum"], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda12>": ["ops.math_ops.maximum"], "ragged.ragged_getitem._slice_length": ["ops.array_ops.size", "ops.array_ops.zeros"], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda13>": [], "ragged.ragged_getitem._ragged_getitem_inner_dimensions.<lambda14>": [], "ragged.ragged_map_ops": ["<builtin>.globals", "util.lazy_loader.LazyLoader"], "ragged.ragged_map_ops.map_fn": ["util.nest.map_structure"], "ragged.ragged_map_ops.map_fn.<lambda1>": [], "ragged.ragged_map_ops._ragged_type_to_spec": ["<builtin>.isinstance", "ragged.ragged_tensor.RaggedTensorSpec"], "ragged.ragged_math_ops": ["ragged.ragged_math_ops._set_ragged_reduce_docstring", "framework.ops.no_gradient", "util.dispatch.add_dispatch_support", "util.tf_export.tf_export", "ragged.ragged_math_ops._set_ragged_segment_docstring"], "ragged.ragged_math_ops._infer_matching_dtype": ["<builtin>.all", "ops.math_ops.cast", "<builtin>.max"], "ops.gen_ragged_math_ops.ragged_range": [], "framework.ops.no_gradient": ["<builtin>.isinstance", "<builtin>.TypeError"], "ragged.ragged_math_ops._ragged_segment_aggregate": ["ops.math_ops.maximum", "ragged.ragged_math_ops._ragged_segment_aggregate", "ragged.ragged_math_ops.range", "ops.array_ops.concat", "framework.ops.name_scope", "ops.math_ops.unsorted_segment_prod", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ops.math_ops.cumsum", "ragged.ragged_tensor.match_row_splits_dtypes", "ops.array_ops.zeros", "ops.check_ops.assert_equal", "ops.math_ops.unsorted_segment_min", "ragged.ragged_tensor.is_ragged", "ops.math_ops.unsorted_segment_max", "ops.array_ops.gather", "framework.ops.control_dependencies", "<builtin>.ValueError", "ragged_tensor.RaggedTensor.from_row_splits", "ops.math_ops.unsorted_segment_sum"], "ops.math_ops.unsorted_segment_max": [], "ops.math_ops.unsorted_segment_prod": [], "ops.math_ops.unsorted_segment_min": [], "ragged.ragged_math_ops.segment_sum": ["ragged.ragged_math_ops._ragged_segment_aggregate"], "ragged.ragged_math_ops.segment_prod": ["ragged.ragged_math_ops._ragged_segment_aggregate"], "ragged.ragged_math_ops.segment_min": ["ragged.ragged_math_ops._ragged_segment_aggregate"], "ragged.ragged_math_ops.segment_max": ["ragged.ragged_math_ops._ragged_segment_aggregate"], "ragged.ragged_math_ops.segment_mean": ["framework.ops.name_scope", "ops.array_ops.ones_like", "ragged.ragged_tensor.is_ragged", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ragged.ragged_math_ops.segment_sum"], "ragged.ragged_math_ops.segment_sqrt_n": ["framework.ops.name_scope", "ops.array_ops.ones_like", "ragged.ragged_tensor.is_ragged", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ops.math_ops.sqrt", "ragged.ragged_math_ops.segment_sum"], "ragged.ragged_math_ops._set_ragged_segment_docstring": ["<builtin>.dict"], "ragged.ragged_math_ops.ragged_reduce_aggregate": ["ops.math_ops.maximum", "ragged.ragged_math_ops._ragged_segment_aggregate", "ragged.ragged_math_ops.range", "framework.ops.name_scope", "ops.math_ops.reduce_sum", "ops.array_ops.get_positive_axis", "<builtin>.len", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.segment_id_ops.row_splits_to_segment_ids", "ops.math_ops.reduce_min", "ops.math_ops.reduce_prod", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.sorted", "ops.array_ops.shape", "ragged.ragged_tensor.is_ragged", "ragged.ragged_math_ops.ragged_reduce_aggregate", "ops.math_ops.reduce_max", "ops.array_ops.expand_dims", "framework.tensor_util.constant_value", "<builtin>.ValueError"], "ragged.ragged_math_ops.reduce_prod": ["ragged.ragged_math_ops.ragged_reduce_aggregate"], "ragged.ragged_math_ops.reduce_min": ["ragged.ragged_math_ops.ragged_reduce_aggregate"], "ragged.ragged_math_ops.reduce_max": ["ragged.ragged_math_ops.ragged_reduce_aggregate"], "ragged.ragged_math_ops.reduce_mean": ["framework.ops.name_scope", "ops.array_ops.ones_like", "ragged.ragged_tensor.is_ragged", "ragged_tensor.RaggedTensor.from_nested_row_splits", "ragged.ragged_math_ops.reduce_sum"], "ragged.ragged_math_ops.reduce_variance": ["framework.ops.name_scope", "ops.math_ops.square", "ragged.ragged_math_ops.reduce_mean"], "ragged.ragged_math_ops.reduce_std": ["ops.math_ops.sqrt", "framework.ops.name_scope", "ragged.ragged_math_ops.reduce_variance"], "ragged.ragged_math_ops._cast": ["ragged.ragged_functional_ops.map_flat_values"], "ragged.ragged_math_ops.reduce_all": ["ragged.ragged_math_ops._cast", "framework.ops.name_scope", "ragged.ragged_math_ops.reduce_prod"], "ragged.ragged_math_ops.reduce_any": ["ragged.ragged_math_ops.reduce_sum", "ragged.ragged_math_ops._cast", "framework.ops.name_scope"], "ragged.ragged_math_ops._set_ragged_reduce_docstring": ["<builtin>.dict"], "ragged.ragged_math_ops.matmul": ["ops.check_ops.assert_equal", "<builtin>.dict", "ragged.ragged_math_ops._matmul_3d_with_map_fn", "ops.math_ops.matmul", "framework.ops.control_dependencies", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_math_ops._matmul_2d", "framework.ops.name_scope", "ragged.ragged_math_ops._matmul_3d_with_batch_dim_folding", "<builtin>.ValueError", "<builtin>.isinstance", "ragged_tensor.RaggedTensor.from_tensor", "ragged.ragged_math_ops.matmul"], "ragged.ragged_math_ops._matmul_2d": ["ops.check_ops.assert_equal", "framework.ops.control_dependencies", "ops.math_ops.matmul", "ops.array_ops.size", "<builtin>.isinstance"], "ragged.ragged_math_ops._matmul_3d_with_batch_dim_folding": ["ops.array_ops.expand_dims", "ops.array_ops.squeeze", "ops.math_ops.matmul", "ops.array_ops.repeat"], "ragged.ragged_math_ops._matmul_3d_with_map_fn": ["<builtin>.isinstance", "ragged.ragged_tensor.RaggedTensorSpec", "ops.map_fn.map_fn"], "ragged.ragged_math_ops._matmul_3d_with_map_fn.single_batch_matmul": ["ragged.ragged_math_ops._matmul_2d", "ragged_tensor.RaggedTensor.from_tensor"], "ragged.ragged_math_ops.softmax": ["ragged.ragged_math_ops.reduce_sum", "framework.ops.name_scope", "ops.math_ops.divide", "ops.math_ops.exp"], "ragged.ragged_operators": ["ragged.ragged_operators._right"], "ragged.ragged_operators._right": ["util.tf_decorator.make_decorator"], "ragged.ragged_operators._right.<lambda1>": ["ops.math_ops.logical_and", "ops.math_ops.floormod", "ops.math_ops.div", "ops.math_ops.floordiv", "ops.math_ops.pow", "ops.math_ops.subtract", "ops.math_ops.truediv", "ops.math_ops.multiply", "ops.math_ops.add", "ops.math_ops.logical_or", "ops.math_ops.logical_xor"], "ops.math_ops.div": ["ops.math_ops._div_python2"], "ragged.ragged_operators.ragged_hash": ["<builtin>.getattr", "<builtin>.id", "framework.ops.executing_eagerly_outside_functions", "<builtin>.TypeError"], "ragged.ragged_operators._dummy_bool": ["<builtin>.TypeError"], "ragged.ragged_ops": [], "ragged.ragged_squeeze_op": [], "ragged.ragged_string_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support", "util.deprecation.deprecated_args", "<builtin>.globals", "util.lazy_loader.LazyLoader"], "ragged.ragged_string_ops.string_bytes_split": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ops.gen_string_ops.string_split", "framework.ops.name_scope", "ragged.ragged_string_ops.string_bytes_split", "ragged_tensor.RaggedTensor.from_tensor", "<builtin>.ValueError", "<builtin>.isinstance", "ops.array_ops.stack", "ragged_tensor.RaggedTensor.from_value_rowids"], "ops.gen_string_ops.string_split": [], "ragged.ragged_string_ops.unicode_encode": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged_tensor.RaggedTensor.from_row_splits", "ragged.ragged_tensor.is_ragged", "framework.ops.name_scope", "ragged_tensor.RaggedTensor.from_tensor", "ops.array_ops.shape", "<builtin>.ValueError", "ops.array_ops.reshape", "ops.array_ops.stack", "ragged.ragged_string_ops.unicode_encode", "ops.gen_string_ops.unicode_encode"], "ops.gen_string_ops.unicode_encode": [], "ragged.ragged_string_ops.unicode_decode": ["ragged.ragged_string_ops._unicode_decode", "framework.ops.name_scope"], "ragged.ragged_string_ops._unicode_decode": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged_tensor.RaggedTensor.from_row_splits", "ops.gen_string_ops.unicode_decode_with_offsets", "ragged.ragged_tensor.is_ragged", "ragged_tensor.RaggedTensor.from_tensor", "<builtin>.ValueError", "ops.array_ops.reshape", "ops.gen_string_ops.unicode_decode"], "ragged.ragged_string_ops.unicode_decode_with_offsets": ["ragged.ragged_string_ops._unicode_decode", "framework.ops.name_scope"], "ragged.ragged_string_ops.unicode_split": ["ragged.ragged_string_ops.unicode_encode", "ragged.ragged_string_ops._unicode_decode", "framework.ops.name_scope", "ragged.ragged_array_ops.expand_dims"], "ragged.ragged_string_ops.unicode_split_with_offsets": ["ragged.ragged_string_ops.unicode_encode", "ragged.ragged_string_ops._unicode_decode", "framework.ops.name_scope", "ragged.ragged_array_ops.expand_dims"], "ops.gen_string_ops.unicode_decode": [], "ops.gen_string_ops.unicode_decode_with_offsets": [], "ops.string_ops.string_split_v2": ["framework.ops.convert_to_tensor", "ops.gen_string_ops.string_split_v2", "framework.sparse_tensor.SparseTensor"], "ragged.ragged_string_ops.string_split": ["ops.string_ops.string_split", "framework.ops.name_scope", "ragged_tensor.RaggedTensor.from_value_rowids", "<builtin>.ValueError"], "ops.string_ops.string_split": ["framework.ops.convert_to_tensor", "framework.sparse_tensor.SparseTensor", "util.deprecation.deprecated_argument_lookup", "ops.gen_string_ops.string_split"], "ragged.ragged_string_ops.strings_split_v1": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "util.deprecation.deprecated_argument_lookup", "framework.ops.name_scope", "<builtin>.ValueError", "ragged.ragged_string_ops.string_split_v2", "ops.string_ops.string_split_v2", "ops.array_ops.expand_dims"], "ragged.ragged_string_ops.reduce_join": ["ragged.ragged_math_ops.ragged_reduce_aggregate"], "ragged_tensor.RaggedTensor.from_row_starts": [], "ops.gen_string_ops.string_n_grams": [], "ragged.ragged_string_ops.string_format": ["<builtin>.enumerate", "ragged.ragged_tensor.is_ragged", "framework.ops.name_scope", "ops.string_ops.reduce_join", "ragged.ragged_string_ops.ragged_tensor_to_string", "<builtin>.ValueError", "framework.constant_op.constant", "framework.tensor_util.is_tf_type", "<builtin>.len", "ops.string_ops.string_format"], "ragged.ragged_string_ops.ragged_tensor_to_string": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "framework.ops.name_scope", "ragged.ragged_string_ops._ragged_tensor_to_string", "ops.string_ops.as_string", "<builtin>.ValueError", "ops.string_ops.regex_replace", "<builtin>.isinstance"], "ragged.ragged_string_ops._ragged_tensor_to_string": ["framework.tensor_spec.TensorSpec", "ragged.ragged_string_ops._nrows", "ops.string_ops.reduce_join", "ops.control_flow_ops.cond"], "ragged.ragged_string_ops._ragged_tensor_to_string.<lambda1>": ["ragged.ragged_string_ops._ragged_tensor_to_string"], "ragged.ragged_string_ops._nrows": ["ops.array_ops.shape", "<builtin>.isinstance"], "ragged.ragged_string_ops._ragged_tensor_to_string.<lambda2>": [], "ragged.ragged_string_ops._ragged_tensor_to_string.<lambda3>": ["ops.array_ops.concat"], "ragged.ragged_tensor": ["framework.type_spec.register_type_spec_from_value_converter", "framework.ops.RegisterGradient", "client.session.register_session_run_conversion_functions"], "ragged.ragged_tensor.RaggedTensor": ["docs.doc_controls.do_not_generate_docs", "ragged.ragged_tensor.RaggedTensor._overloaded_operator", "util.dispatch.add_dispatch_support"], "ragged.ragged_tensor.RaggedTensor.__init__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "ragged.ragged_tensor._assert_is_supported_ragged_values_type"], "ragged.ragged_tensor._assert_is_supported_ragged_values_type": ["ragged.ragged_tensor._is_supported_ragged_values_type", "<builtin>.TypeError"], "ragged.ragged_tensor.RaggedTensor._from_row_partition": ["ops.check_ops.assert_rank_at_least", "ragged.ragged_tensor.RaggedTensor._convert_values_and_partition", "ragged.ragged_tensor.RaggedTensor.__init__", "ops.check_ops.assert_equal", "<builtin>.TypeError", "<builtin>.isinstance", "ragged.ragged_tensor._nrows"], "ragged.ragged_tensor.RaggedTensor._convert_values_and_partition": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.ValueError", "ragged.ragged_tensor._convert_to_ragged_tensor_values", "ragged.ragged_config.auto_cast_partition_dtype"], "ragged.ragged_tensor._nrows": ["ops.array_ops.shape", "<builtin>.isinstance"], "ragged.ragged_tensor.RaggedTensor.from_value_rowids": ["framework.ops.name_scope", "row_partition.RowPartition.from_value_rowids", "ragged.ragged_tensor._get_optional_partition_dtype", "ragged.ragged_tensor.RaggedTensor._from_row_partition", "<builtin>.TypeError", "<builtin>.isinstance"], "ragged.ragged_tensor._get_optional_partition_dtype": ["<builtin>.isinstance"], "row_partition.RowPartition.from_value_rowids": [], "ragged.ragged_tensor.RaggedTensor.from_row_splits": ["framework.ops.name_scope", "row_partition.RowPartition.from_row_splits", "ragged.ragged_tensor._get_optional_partition_dtype", "ragged.ragged_tensor.RaggedTensor._from_row_partition", "<builtin>.TypeError", "<builtin>.isinstance"], "row_partition.RowPartition.from_row_splits": [], "ragged.ragged_tensor.RaggedTensor.from_row_lengths": ["framework.ops.name_scope", "ragged.ragged_tensor._get_optional_partition_dtype", "ragged.ragged_tensor.RaggedTensor._from_row_partition", "<builtin>.TypeError", "row_partition.RowPartition.from_row_lengths", "<builtin>.isinstance"], "row_partition.RowPartition.from_row_lengths": [], "ragged.ragged_tensor.RaggedTensor.from_row_starts": ["framework.ops.name_scope", "ragged.ragged_tensor._get_optional_partition_dtype", "ragged.ragged_tensor.RaggedTensor._from_row_partition", "row_partition.RowPartition.from_row_starts", "<builtin>.TypeError", "<builtin>.isinstance", "ragged.ragged_tensor._nrows", "ragged.ragged_tensor._convert_to_ragged_tensor_values"], "ragged.ragged_tensor._convert_to_ragged_tensor_values": ["ragged.ragged_tensor._is_supported_ragged_values_type", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor"], "row_partition.RowPartition.from_row_starts": [], "ragged.ragged_tensor.RaggedTensor.from_row_limits": ["framework.ops.name_scope", "row_partition.RowPartition.from_row_limits", "ragged.ragged_tensor._get_optional_partition_dtype", "ragged.ragged_tensor.RaggedTensor._from_row_partition", "<builtin>.TypeError", "<builtin>.isinstance"], "row_partition.RowPartition.from_row_limits": [], "ragged.ragged_tensor.RaggedTensor.from_uniform_row_length": ["framework.ops.name_scope", "row_partition.RowPartition.from_uniform_row_length", "ragged.ragged_tensor._get_optional_partition_dtype", "ragged.ragged_tensor.RaggedTensor._from_row_partition", "<builtin>.TypeError", "<builtin>.isinstance", "ragged.ragged_tensor._convert_to_ragged_tensor_values", "row_partition.RowPartition._convert_row_partition", "ragged.ragged_tensor._nvals_uniform_row_length"], "row_partition.RowPartition._convert_row_partition": [], "ragged.ragged_tensor._nvals_uniform_row_length": ["ops.array_ops.shape", "<builtin>.isinstance", "framework.tensor_shape.dimension_at_index", "framework.constant_op.constant"], "row_partition.RowPartition.from_uniform_row_length": [], "ragged.ragged_tensor.RaggedTensor.from_nested_value_rowids": ["framework.ops.name_scope", "<builtin>.len", "<builtin>.zip", "<builtin>.list", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.reversed", "<builtin>.ValueError", "ragged.ragged_tensor.RaggedTensor.from_value_rowids"], "ragged.ragged_tensor.RaggedTensor.from_nested_row_splits": ["framework.ops.name_scope", "<builtin>.list", "ragged.ragged_tensor.RaggedTensor.from_row_splits", "<builtin>.TypeError", "<builtin>.reversed", "<builtin>.isinstance"], "ragged.ragged_tensor.RaggedTensor.from_nested_row_lengths": ["framework.ops.name_scope", "<builtin>.list", "<builtin>.TypeError", "<builtin>.reversed", "<builtin>.isinstance", "ragged.ragged_tensor.RaggedTensor.from_row_lengths"], "ragged.ragged_tensor.RaggedTensor._from_nested_row_partitions": ["framework.ops.name_scope", "ragged.ragged_tensor.RaggedTensor._from_row_partition", "<builtin>.list", "<builtin>.TypeError", "<builtin>.reversed", "<builtin>.isinstance"], "ragged.ragged_tensor.RaggedTensor.dtype": [], "ragged.ragged_tensor.RaggedTensor.shape": ["framework.tensor_shape.TensorShape"], "ragged.ragged_tensor.RaggedTensor.get_shape": [], "ragged.ragged_tensor.RaggedTensor.ragged_rank": ["<builtin>.isinstance"], "ragged.ragged_tensor.RaggedTensor.values": [], "ragged.ragged_tensor.RaggedTensor._nested_row_partitions": ["<builtin>.isinstance", "<builtin>.tuple"], "ragged.ragged_tensor.RaggedTensor.row_splits": [], "ragged.ragged_tensor.RaggedTensor.uniform_row_length": [], "ragged.ragged_tensor.RaggedTensor.flat_values": ["<builtin>.isinstance"], "ragged.ragged_tensor.RaggedTensor.nested_row_splits": ["<builtin>.isinstance", "<builtin>.tuple"], "ragged.ragged_tensor.RaggedTensor.value_rowids": ["framework.ops.name_scope"], "ragged.ragged_tensor.RaggedTensor.nested_value_rowids": ["framework.ops.name_scope", "<builtin>.tuple", "<builtin>.isinstance", "ragged.ragged_tensor.RaggedTensor.value_rowids"], "ragged.ragged_tensor.RaggedTensor.nrows": ["framework.ops.name_scope"], "ragged.ragged_tensor.RaggedTensor.row_starts": ["framework.ops.name_scope"], "ragged.ragged_tensor.RaggedTensor.row_limits": ["framework.ops.name_scope"], "ragged.ragged_tensor.RaggedTensor.row_lengths": ["ragged.ragged_tensor.RaggedTensor.with_values", "framework.ops.name_scope", "ops.array_ops.shape", "ops.array_ops.ones", "<builtin>.isinstance", "ops.array_ops.get_positive_axis", "ragged.ragged_tensor.RaggedTensor.nrows"], "ragged.ragged_tensor.RaggedTensor.with_values": ["ragged.ragged_tensor.RaggedTensor.with_values", "ragged.ragged_tensor.RaggedTensor.__init__", "<builtin>.isinstance", "<builtin>.ValueError", "ragged.ragged_tensor._convert_to_ragged_tensor_values", "ragged.ragged_tensor.RaggedTensor.with_row_splits_dtype", "ragged.ragged_config.auto_cast_partition_dtype"], "ragged.ragged_tensor.RaggedTensor.nested_row_lengths": ["framework.ops.name_scope", "<builtin>.tuple", "ragged.ragged_tensor.RaggedTensor.row_lengths", "<builtin>.isinstance"], "ragged.ragged_tensor.RaggedTensor.bounding_shape": ["ops.array_ops.shape", "framework.ops.name_scope", "ops.array_ops.concat", "ops.array_ops.gather", "ops.math_ops.reduce_max", "framework.dtypes.as_dtype", "ops.math_ops.cast", "ops.math_ops.maximum", "<builtin>.isinstance", "ops.array_ops.stack", "ragged.ragged_tensor.RaggedTensor.row_lengths"], "ragged.ragged_tensor.RaggedTensor.with_row_splits_dtype": ["ragged.ragged_tensor.RaggedTensor.__init__", "framework.dtypes.as_dtype", "<builtin>.isinstance", "<builtin>.ValueError", "ragged.ragged_tensor.RaggedTensor.with_row_splits_dtype"], "ragged.ragged_tensor.RaggedTensor.with_flat_values": ["ragged.ragged_tensor.RaggedTensor.with_values", "<builtin>.isinstance", "ragged.ragged_tensor._convert_to_ragged_tensor_values"], "ragged.ragged_tensor.RaggedTensor.merge_dims": ["ragged.ragged_tensor.RaggedTensor.merge_dims", "<builtin>.ValueError", "ops.array_ops.get_positive_axis"], "ragged.ragged_tensor.RaggedTensor._set_shape": ["framework.tensor_shape.as_shape", "ops.array_ops.size", "<builtin>.ValueError", "framework.tensor_util.constant_value", "framework.ops.convert_to_tensor", "<builtin>.enumerate"], "ragged.ragged_tensor.RaggedTensor.from_tensor": ["framework.ops.name_scope", "ops.math_ops.cumsum", "framework.constant_op.constant", "ops.array_ops.ones", "<builtin>.TypeError", "ragged.ragged_tensor.RaggedTensor.from_nested_row_lengths", "ops.control_flow_ops.cond", "ops.math_ops.maximum", "framework.ops.convert_to_tensor", "ops.array_ops.zeros", "ops.math_ops.cumprod", "ragged.ragged_tensor.RaggedTensor.from_row_splits", "framework.tensor_shape.TensorShape", "ops.array_ops.expand_dims", "ops.math_ops.minimum", "ops.math_ops.equal", "ops.array_ops.rank", "ops.math_ops.reduce_sum", "ops.array_ops.sequence_mask", "ragged.ragged_tensor.RaggedTensor.from_tensor", "ops.array_ops.shape", "ops.array_ops.concat", "ops.math_ops.range", "ops.math_ops.reduce_max", "<builtin>.range", "framework.tensor_shape.dimension_at_index", "framework.dtypes.as_dtype", "ops.math_ops.logical_not", "ops.array_ops.boolean_mask", "ops.array_ops.reshape", "<builtin>.len", "ops.math_ops.cast", "ragged.ragged_util.convert_to_int_tensor", "<builtin>.isinstance", "<builtin>.ValueError", "ragged.ragged_tensor.RaggedTensor.from_uniform_row_length", "numpy.cumprod"], "numpy.cumprod": [], "ragged.ragged_tensor.RaggedTensor.from_tensor.<lambda1>": ["ops.math_ops.reduce_all"], "ragged.ragged_tensor.RaggedTensor.from_tensor.<lambda2>": [], "ragged.ragged_tensor.RaggedTensor.to_tensor": ["framework.ops.name_scope", "framework.tensor_shape.as_shape", "ragged.ragged_tensor._shape_as_tensor", "<builtin>.zip", "ragged.ragged_tensor._get_row_partition_type_tensor_pairs", "<builtin>.isinstance", "<builtin>.all", "ops.gen_ragged_conversion_ops.ragged_tensor_to_tensor", "ops.array_ops.zeros", "ops.array_ops.stack", "framework.ops.convert_to_tensor", "<builtin>.any"], "ragged.ragged_tensor._get_row_partition_type_tensor_pairs": ["ragged.ragged_tensor._get_row_partition_type_tensor_pairs_tail"], "ragged.ragged_tensor._shape_as_tensor": ["framework.tensor_shape.as_shape", "framework.constant_op.constant", "ops.math_ops.cast", "<builtin>.isinstance", "<builtin>.ValueError"], "ragged.ragged_tensor.RaggedTensor.from_sparse": ["framework.ops.name_scope", "framework.ops.control_dependencies", "framework.sparse_tensor.is_sparse", "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "framework.dtypes.as_dtype", "<builtin>.type", "<builtin>.TypeError", "ops.math_ops.cast", "<builtin>.ValueError", "ragged.ragged_tensor.RaggedTensor.from_value_rowids", "ragged.ragged_tensor._assert_sparse_indices_are_ragged_right"], "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor": ["framework.sparse_tensor.SparseTensor.from_value", "framework.ops.convert_to_tensor", "framework.dtypes.as_dtype", "<builtin>.isinstance", "<builtin>.RuntimeError"], "ragged.ragged_tensor._assert_sparse_indices_are_ragged_right": ["ops.array_ops.where", "ops.math_ops.not_equal", "ops.math_ops.reduce_all", "ops.math_ops.logical_and", "ops.math_ops.equal", "ops.math_ops.reduce_any", "ops.control_flow_ops.Assert"], "ragged.ragged_tensor.RaggedTensor.to_sparse": ["framework.ops.name_scope", "ops.gen_ragged_conversion_ops.ragged_tensor_to_sparse", "framework.sparse_tensor.SparseTensor"], "ops.gen_ragged_conversion_ops.ragged_tensor_to_sparse": [], "ragged.ragged_tensor.RaggedTensor._from_variant": ["framework.ops.name_scope", "ragged.ragged_tensor.RaggedTensor.from_nested_row_splits", "ops.gen_ragged_conversion_ops.ragged_tensor_from_variant", "<builtin>.ValueError", "framework.ops.convert_to_tensor"], "ops.gen_ragged_conversion_ops.ragged_tensor_from_variant": [], "ragged.ragged_tensor.RaggedTensor._to_variant": ["framework.ops.name_scope", "ops.gen_ragged_conversion_ops.ragged_tensor_to_variant"], "ragged.ragged_tensor.RaggedTensor.__repr__": ["ragged.ragged_tensor.RaggedTensor._is_eager", "ragged.ragged_tensor.RaggedTensor.to_list"], "ragged.ragged_tensor.RaggedTensor._is_eager": ["<builtin>.isinstance"], "ragged.ragged_tensor.RaggedTensor.to_list": ["<builtin>.hasattr", "<builtin>.len", "<builtin>.range", "<builtin>.isinstance", "<builtin>.ValueError"], "ragged.ragged_tensor.RaggedTensor.numpy": ["<builtin>.len", "<builtin>.range", "ragged.ragged_tensor.RaggedTensor._is_eager", "numpy.array", "<builtin>.ValueError", "numpy.zeros"], "ragged.ragged_tensor.RaggedTensor._eager_value": ["<builtin>.reversed", "ragged.ragged_tensor_value.RaggedTensorValue"], "ragged.ragged_tensor.RaggedTensor._overloaded_operator": [], "ragged.ragged_tensor.RaggedTensor._overloaded_operator.stub": ["<builtin>.ValueError"], "ragged.ragged_tensor.RaggedTensor._as_graph_element": ["<builtin>.isinstance"], "ragged.ragged_tensor.RaggedTensor._type_spec": ["ragged.ragged_tensor.RaggedTensorSpec.from_value"], "ragged.ragged_tensor.RaggedTensorSpec.from_value": ["<builtin>.isinstance", "ragged.ragged_tensor.RaggedTensorSpec.__init__", "framework.type_spec.type_spec_from_value"], "ragged.ragged_tensor.RaggedTensor._shape_invariant_to_type_spec": ["ragged.ragged_tensor.RaggedTensorSpec.__init__"], "ragged.ragged_tensor.RaggedTensorSpec.__init__": ["framework.tensor_shape.as_shape", "framework.dtypes.as_dtype", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.ValueError"], "ragged.ragged_tensor.RaggedTensor.consumers": ["composite_tensor.CompositeTensor._consumers"], "composite_tensor.CompositeTensor._consumers": [], "ragged.ragged_tensor.RaggedTensorSpec.dtype": [], "ragged.ragged_tensor.RaggedTensorSpec.shape": [], "ragged.ragged_tensor.RaggedTensorSpec.ragged_rank": [], "ragged.ragged_tensor.RaggedTensorSpec.row_splits_dtype": [], "ragged.ragged_tensor.RaggedTensorSpec.flat_values_spec": [], "ragged.ragged_tensor.RaggedTensorSpec.value_type": [], "ragged.ragged_tensor.RaggedTensorSpec.is_compatible_with": ["<builtin>.isinstance", "<builtin>.super", "framework.tensor_spec.TensorSpec"], "ragged.ragged_tensor.RaggedTensorSpec._serialize": [], "ragged.ragged_tensor.RaggedTensorSpec._component_specs": ["framework.tensor_shape.dimension_at_index", "framework.tensor_shape.TensorShape", "<builtin>.range", "framework.tensor_spec.TensorSpec"], "ragged.ragged_tensor.RaggedTensorSpec._to_components": ["ragged.ragged_tensor.is_ragged", "<builtin>.list"], "ragged.ragged_tensor.RaggedTensorSpec._from_components": ["row_partition.RowPartition.from_row_splits", "ragged.ragged_tensor.RaggedTensor.__init__", "python.tf2.enabled", "<builtin>.reversed", "<builtin>.isinstance", "<builtin>.all", "ragged.ragged_tensor_value.RaggedTensorValue", "framework.ops.convert_to_tensor"], "ragged.ragged_tensor.RaggedTensorSpec._flat_tensor_specs": ["framework.tensor_spec.TensorSpec"], "ragged.ragged_tensor.RaggedTensorSpec._to_tensor_list": ["<builtin>.isinstance", "<builtin>.ValueError", "ops.gen_ragged_conversion_ops.ragged_tensor_to_variant"], "ragged.ragged_tensor.RaggedTensorSpec._to_batched_tensor_list": ["<builtin>.isinstance", "<builtin>.ValueError"], "ragged.ragged_tensor.RaggedTensorSpec._from_compatible_tensor_list": ["<builtin>.isinstance", "<builtin>.ValueError", "framework.tensor_shape.dimension_value", "ragged.ragged_tensor.RaggedTensor._from_variant"], "ragged.ragged_tensor.RaggedTensorSpec._batch": ["<builtin>.ValueError", "ragged.ragged_tensor.RaggedTensorSpec.__init__", "framework.tensor_shape.TensorShape"], "ragged.ragged_tensor.RaggedTensorSpec._unbatch": ["<builtin>.ValueError", "ragged.ragged_tensor.RaggedTensorSpec.__init__"], "ragged.ragged_tensor.RaggedTensorSpec._to_legacy_output_types": [], "ragged.ragged_tensor.RaggedTensorSpec._to_legacy_output_shapes": [], "ragged.ragged_tensor.RaggedTensorSpec._to_legacy_output_classes": [], "ragged.ragged_tensor._is_supported_ragged_values_type": ["<builtin>.isinstance"], "ragged.ragged_tensor._ragged_tensor_value_from_components": ["<builtin>.list", "ragged.ragged_tensor_value.RaggedTensorValue"], "ragged.ragged_tensor._ragged_tensor_session_fetch": [], "ragged.ragged_tensor._ragged_tensor_session_feed": ["<builtin>.zip"], "ragged.ragged_tensor._ragged_tensor_session_feed_for_partial_run": [], "client.session.register_session_run_conversion_functions": ["<builtin>.issubclass", "<builtin>.ValueError"], "ragged.ragged_tensor.RaggedTensorType.__init__": ["framework.dtypes.as_dtype"], "ragged.ragged_tensor.RaggedTensorType.<lambda1>": [], "ragged.ragged_tensor.RaggedTensorType": ["<builtin>.property"], "ragged.ragged_tensor.RaggedTensorType.<lambda2>": [], "ragged.ragged_tensor.RaggedTensorType.<lambda3>": [], "ragged.ragged_tensor.RaggedTensorType.__repr__": [], "ragged.ragged_tensor._ragged_tensor_to_sparse_gradient": ["<builtin>.len", "ops.array_ops.reshape", "ops.array_ops.shape"], "ragged.ragged_tensor._assert_monotonic_increasing": ["ops.check_ops.assert_non_negative"], "ragged.ragged_tensor._assert_zero": ["ops.check_ops.assert_equal", "framework.constant_op.constant"], "ragged.ragged_tensor.merge_dims": ["ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.gather", "ops.array_ops.reshape", "<builtin>.range", "ragged.ragged_tensor.RaggedTensor.from_row_splits", "ragged.ragged_tensor._prod", "ops.math_ops.cast", "<builtin>.isinstance", "ops.math_ops.reduce_prod", "ragged.ragged_tensor.merge_dims"], "ragged.ragged_tensor._prod": ["functools.reduce"], "ragged.ragged_tensor._get_row_partition_type_tensor_pairs_tail": [], "ragged.ragged_tensor._add_supported_value_type": ["<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.issubclass"], "ragged.ragged_tensor_shape": [], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__": ["ops.math_ops.cast", "<builtin>.set", "<builtin>.tuple", "<builtin>.isinstance", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "<builtin>.enumerate", "<builtin>.len", "ragged.ragged_config.auto_cast_partition_dtype", "<builtin>.ValueError"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__repr__": [], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.from_dim_sizes": ["ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__", "<builtin>.tuple", "<builtin>.enumerate", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.from_tensor": ["ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__", "framework.ops.name_scope", "ops.array_ops.shape", "ragged.ragged_tensor.is_ragged"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.dimension_size": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.len"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.is_ragged": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.len"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.rank": ["framework.tensor_shape.dimension_value", "<builtin>.len"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.partitioned_dim_sizes": [], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.inner_dim_sizes": [], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.num_partitioned_dimensions": ["<builtin>.len"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.num_inner_dimensions": ["framework.tensor_shape.dimension_value"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.dim_size_dtype": [], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.broadcast_to_rank": ["ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__", "ops.array_ops.ones", "ops.array_ops.concat", "<builtin>.ValueError"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.broadcast_dimension": ["ragged.ragged_tensor_shape.RaggedTensorDynamicShape._broadcast_inner_dimension_to_ragged", "ops.math_ops.equal", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.is_ragged", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape._broadcast_uniform_partitioned_dimension", "ragged.ragged_util.convert_to_int_tensor", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__", "ops.math_ops.reduce_all", "ops.control_flow_ops.Assert", "ops.array_ops.identity", "framework.ops.control_dependencies", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape._broadcast_inner_dimension_to_uniform", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.dimension_size", "<builtin>.ValueError"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape._broadcast_uniform_partitioned_dimension": ["ragged.ragged_tensor_shape.RaggedTensorDynamicShape.num_slices_in_dimension", "ops.array_ops.where", "ops.math_ops.equal", "ops.array_ops.stack", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__", "ops.math_ops.range", "ragged.ragged_util.repeat_ranges", "ragged.ragged_util.lengths_to_splits", "ops.array_ops.gather", "ops.array_ops.size", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.dimension_size", "<builtin>.list"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape._broadcast_inner_dimension_to_uniform": ["ops.array_ops.where", "ops.array_ops.concat", "ops.math_ops.equal", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.dimension_size"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape._broadcast_inner_dimension_to_ragged": ["ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__", "<builtin>.range", "<builtin>.tuple"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.num_slices_in_dimension": ["ragged.ragged_tensor_shape.RaggedTensorDynamicShape.num_slices_in_dimension", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.is_ragged", "framework.constant_op.constant", "ops.math_ops.reduce_sum", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.dimension_size"], "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.with_dim_size_dtype": ["ops.math_ops.cast", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.__init__", "<builtin>.ValueError"], "ragged.ragged_tensor_shape._broadcast_to_uniform_shape": ["<builtin>.isinstance", "ops.array_ops.broadcast_to", "<builtin>.ValueError"], "ragged.ragged_tensor_shape._broadcast_to_ragged_shape": ["ops.array_ops.concat", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.broadcast_to_rank", "ops.array_ops.broadcast_to", "ops.array_ops.reshape", "ops.math_ops.equal", "ragged.ragged_array_ops.tile", "ops.array_ops.stack", "<builtin>.isinstance", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.dimension_size", "framework.tensor_util.constant_value", "ragged.ragged_config.auto_cast_partition_dtype", "<builtin>.range", "<builtin>.ValueError", "ragged_tensor.RaggedTensor.from_tensor", "ragged_tensor.RaggedTensor.from_row_lengths", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.from_tensor", "ragged.ragged_tensor_shape._ragged_tile_axis", "ops.array_ops.broadcast_dynamic_shape", "ops.array_ops.where", "ragged.ragged_tensor_shape.RaggedTensorDynamicShape.is_ragged", "ops.array_ops.shape", "ragged.ragged_tensor.is_ragged", "<builtin>.all"], "ragged.ragged_tensor_shape._ragged_tile_axis": ["ragged_tensor.RaggedTensor.from_tensor", "ragged.ragged_tensor_shape._ragged_tile_axis", "ragged_tensor.RaggedTensor.from_nested_row_lengths", "ragged.ragged_util.repeat_ranges", "ops.array_ops.gather", "<builtin>.len", "ragged.ragged_tensor.is_ragged", "<builtin>.range"], "ragged_tensor.RaggedTensor.from_nested_row_lengths": [], "ragged.ragged_tensor_value": [], "ragged.ragged_tensor_value.RaggedTensorValue.__init__": ["<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.isinstance"], "ragged.ragged_tensor_value.RaggedTensorValue.<lambda1>": [], "ragged.ragged_tensor_value.RaggedTensorValue.<lambda2>": [], "ragged.ragged_tensor_value.RaggedTensorValue.<lambda3>": [], "ragged.ragged_tensor_value.RaggedTensorValue.flat_values": ["<builtin>.isinstance"], "ragged.ragged_tensor_value.RaggedTensorValue.nested_row_splits": ["<builtin>.tuple", "<builtin>.isinstance"], "ragged.ragged_tensor_value.RaggedTensorValue.ragged_rank": ["<builtin>.isinstance"], "ragged.ragged_tensor_value.RaggedTensorValue.shape": [], "ragged.ragged_tensor_value.RaggedTensorValue.__str__": ["ragged.ragged_tensor_value.RaggedTensorValue.to_list"], "ragged.ragged_tensor_value.RaggedTensorValue.to_list": ["<builtin>.range", "<builtin>.len", "<builtin>.isinstance"], "ragged.ragged_tensor_value.RaggedTensorValue.__repr__": [], "ragged.ragged_util": [], "ops.array_ops.repeat_with_axis": ["ops.array_ops.get_positive_axis", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "ops.gen_math_ops._sum", "ops.array_ops.reshape", "<builtin>.isinstance", "ops.array_ops.convert_to_int_tensor", "ops.array_ops._with_nonzero_rank", "ops.array_ops.concat", "ops.array_ops.expand_dims", "ops.gen_math_ops._max", "ops.array_ops._all_dimensions", "framework.ops.name_scope", "ops.array_ops.rank", "ops.gen_math_ops._range", "ops.array_ops.sequence_mask", "ops.gen_math_ops.maximum", "<builtin>.type", "<builtin>.TypeError", "ops.array_ops.tile_one_dimension", "ops.array_ops.boolean_mask"], "ragged.ragged_where_op": [], "ragged.ragged_where_op.where_v2": ["ragged.ragged_where_op._coordinate_where", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.ValueError", "ragged.ragged_tensor.match_row_splits_dtypes", "framework.ops.name_scope", "ragged.ragged_where_op._elementwise_where_v2"], "ragged.ragged_where_op._coordinate_where": ["ops.array_ops.concat", "<builtin>.isinstance", "ops.array_ops.gather", "ragged.ragged_where_op._coordinate_where", "ops.array_ops.where", "ops.array_ops.expand_dims"], "ragged.ragged_where_op._elementwise_where_v2": ["ragged.ragged_tensor_shape.broadcast_to", "ragged.ragged_functional_ops.map_flat_values", "<builtin>.isinstance", "ragged.ragged_tensor_shape.broadcast_dynamic_shape", "ops.array_ops.where_v2", "ragged_tensor_shape.RaggedTensorDynamicShape.from_tensor"], "ragged.ragged_where_op._elementwise_where": ["ragged.ragged_concat_ops.concat", "ragged.ragged_functional_ops.map_flat_values", "<builtin>.isinstance", "ops.math_ops.range", "ragged.ragged_gather_ops.gather", "ops.array_ops.where", "<builtin>.ValueError", "ragged.ragged_where_op._nrows"], "ragged.ragged_where_op._nrows": ["<builtin>.isinstance", "ops.array_ops.shape"], "ragged.row_partition": ["<builtin>.object"], "ragged.row_partition.RowPartition.__init__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError"], "ragged.row_partition.RowPartition.from_value_rowids": ["<builtin>.ValueError", "ops.array_ops.concat", "framework.ops.name_scope", "ops.check_ops.assert_less", "<builtin>.TypeError", "ops.check_ops.assert_rank", "ops.math_ops.cumsum", "ragged.row_partition._assert_monotonic_increasing", "ops.control_flow_ops.with_dependencies", "ops.bincount_ops.bincount", "framework.tensor_util.constant_value", "ragged.row_partition.RowPartition.__init__", "framework.ops.convert_to_tensor", "ops.check_ops.assert_non_negative", "<builtin>.isinstance", "ragged.row_partition.RowPartition._convert_row_partition", "ops.math_ops.cast"], "ragged.row_partition.RowPartition._convert_row_partition": ["<builtin>.isinstance", "<builtin>.ValueError", "framework.ops.convert_to_tensor"], "ragged.row_partition._assert_monotonic_increasing": ["ops.check_ops.assert_non_negative"], "ragged.row_partition.RowPartition.from_row_splits": ["<builtin>.ValueError", "framework.ops.name_scope", "ragged.row_partition.RowPartition._convert_row_partition", "ops.check_ops.assert_rank", "ragged.row_partition._assert_monotonic_increasing", "ops.control_flow_ops.with_dependencies", "ragged.row_partition.RowPartition.__init__", "ragged.row_partition._assert_zero", "<builtin>.isinstance", "<builtin>.TypeError"], "ragged.row_partition._assert_zero": ["framework.constant_op.constant", "ops.check_ops.assert_equal"], "ragged.row_partition.RowPartition.from_row_lengths": ["ops.array_ops.concat", "framework.ops.name_scope", "<builtin>.TypeError", "ops.check_ops.assert_rank", "ops.math_ops.cumsum", "ops.control_flow_ops.with_dependencies", "ops.check_ops.assert_non_negative", "ragged.row_partition.RowPartition.__init__", "<builtin>.isinstance", "ragged.row_partition.RowPartition._convert_row_partition"], "ragged.row_partition.RowPartition.from_row_starts": ["ops.array_ops.concat", "framework.ops.name_scope", "ops.check_ops.assert_less_equal", "<builtin>.TypeError", "ops.check_ops.assert_rank", "ragged.row_partition._assert_monotonic_increasing", "ops.control_flow_ops.with_dependencies", "ragged.row_partition.RowPartition.__init__", "ragged.row_partition._assert_zero", "<builtin>.isinstance", "ragged.row_partition.RowPartition._convert_row_partition", "ops.math_ops.cast"], "ragged.row_partition.RowPartition.from_row_limits": ["ops.array_ops.concat", "framework.ops.name_scope", "<builtin>.TypeError", "ops.check_ops.assert_rank", "ragged.row_partition._assert_monotonic_increasing", "ops.control_flow_ops.with_dependencies", "ops.check_ops.assert_non_negative", "ragged.row_partition.RowPartition.__init__", "<builtin>.isinstance", "ragged.row_partition.RowPartition._convert_row_partition", "ops.array_ops.zeros"], "ragged.row_partition.RowPartition.from_uniform_row_length": ["ops.math_ops.maximum", "ops.check_ops.assert_equal", "<builtin>.ValueError", "framework.ops.name_scope", "<builtin>.TypeError", "ops.check_ops.assert_rank", "ops.math_ops.range", "<builtin>.range", "ops.control_flow_ops.with_dependencies", "framework.tensor_util.constant_value", "framework.ops.convert_to_tensor", "ragged.row_partition.RowPartition.__init__", "framework.constant_op.constant", "<builtin>.isinstance", "ragged.row_partition.RowPartition._convert_row_partition", "ops.check_ops.assert_greater_equal"], "ragged.row_partition.RowPartition.with_dependencies": ["ops.control_flow_ops.with_dependencies", "ragged.row_partition.RowPartition.__init__"], "ragged.row_partition.RowPartition.dtype": [], "ragged.row_partition.RowPartition.row_splits": [], "ragged.row_partition.RowPartition.value_rowids": ["ragged.segment_id_ops.row_splits_to_segment_ids"], "ragged.row_partition.RowPartition.nvals": ["framework.dtypes.as_dtype", "ops.math_ops.cast"], "ragged.row_partition.RowPartition.nrows": ["framework.dtypes.as_dtype", "framework.tensor_shape.dimension_at_index", "ops.array_ops.shape", "framework.constant_op.constant", "ops.math_ops.cast"], "ragged.row_partition.RowPartition.uniform_row_length": [], "ragged.row_partition.RowPartition.row_starts": [], "ragged.row_partition.RowPartition.row_limits": [], "ragged.row_partition.RowPartition.row_lengths": [], "ragged.row_partition.RowPartition.static_nrows": ["framework.tensor_shape.Dimension", "framework.tensor_util.constant_value", "framework.tensor_shape.dimension_at_index"], "ragged.row_partition.RowPartition.static_nvals": ["framework.tensor_shape.dimension_at_index"], "ragged.row_partition.RowPartition.static_uniform_row_length": ["framework.tensor_util.constant_value"], "ragged.row_partition.RowPartition.with_row_splits_dtype": ["ragged.row_partition._cast_if_not_none", "framework.dtypes.as_dtype", "<builtin>.ValueError", "ragged.row_partition.RowPartition.__init__"], "ragged.row_partition._cast_if_not_none": ["ops.math_ops.cast"], "ragged.row_partition.RowPartition.__repr__": [], "ragged.row_partition.RowPartition.has_precomputed_row_splits": [], "ragged.row_partition.RowPartition.has_precomputed_row_lengths": [], "ragged.row_partition.RowPartition.has_precomputed_value_rowids": [], "ragged.row_partition.RowPartition.has_precomputed_nrows": [], "ragged.row_partition.RowPartition.with_precomputed_row_splits": ["ragged.row_partition.RowPartition.row_splits", "ragged.row_partition.RowPartition.__init__"], "ragged.row_partition.RowPartition.with_precomputed_row_lengths": ["ragged.row_partition.RowPartition.row_lengths", "ragged.row_partition.RowPartition.__init__"], "ragged.row_partition.RowPartition.with_precomputed_value_rowids": ["ragged.row_partition.RowPartition.value_rowids", "ragged.row_partition.RowPartition.__init__"], "ragged.row_partition.RowPartition.with_precomputed_nrows": ["ragged.row_partition.RowPartition.__init__", "ragged.row_partition.RowPartition.nrows"], "ragged.row_partition.RowPartition.merge_precomputed_encodings": ["ragged.row_partition._merge_tensors", "ragged.row_partition.RowPartition.__init__"], "ragged.row_partition._merge_tensors": ["ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "ops.check_ops.assert_equal"], "ragged.row_partition.RowPartition._type_spec": ["ragged.row_partition.RowPartitionSpec.from_value"], "ragged.row_partition.RowPartitionSpec.from_value": ["<builtin>.isinstance", "ragged.row_partition.RowPartitionSpec.__init__", "<builtin>.TypeError"], "ragged.row_partition.RowPartitionSpec.<lambda1>": [], "ragged.row_partition.RowPartitionSpec": ["<builtin>.property"], "ragged.row_partition.RowPartitionSpec.__init__": ["framework.dtypes.as_dtype", "<builtin>.ValueError", "framework.tensor_shape.dimension_value", "framework.tensor_shape.TensorShape", "<builtin>.isinstance"], "ragged.row_partition.RowPartitionSpec.is_compatible_with": ["ragged.row_partition.RowPartitionSpec._dimensions_compatible", "<builtin>.super"], "ragged.row_partition.RowPartitionSpec._dimensions_compatible": ["framework.tensor_shape.dimension_value"], "ragged.row_partition.RowPartitionSpec._serialize": [], "ragged.row_partition.RowPartitionSpec._deserialize": ["ragged.row_partition.RowPartitionSpec.__init__", "framework.tensor_shape.dimension_value"], "ragged.row_partition.RowPartitionSpec.nrows": ["framework.tensor_shape.dimension_value"], "ragged.row_partition.RowPartitionSpec.nvals": ["framework.tensor_shape.dimension_value"], "ragged.row_partition.RowPartitionSpec.uniform_row_length": ["framework.tensor_shape.dimension_value"], "ragged.row_partition.RowPartitionSpec.dtype": [], "ragged.row_partition.RowPartitionSpec._component_specs": ["framework.tensor_shape.TensorShape", "framework.tensor_spec.TensorSpec", "framework.tensor_shape.dimension_at_index"], "ragged.row_partition.RowPartitionSpec._to_components": [], "ragged.row_partition.RowPartitionSpec._from_components": ["ragged.row_partition.RowPartition.from_row_splits"], "ragged.row_partition.RowPartitionSpec.__repr__": [], "ragged.segment_id_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export"], "ragged.ragged_util.repeat": [], "ragged.segment_id_ops.segment_ids_to_row_splits": ["framework.tensor_util.constant_value", "<builtin>.isinstance", "framework.dtypes.as_dtype", "ops.array_ops.concat", "ops.bincount_ops.bincount", "ragged.ragged_util.convert_to_int_tensor", "ops.math_ops.cumsum", "framework.tensor_shape.TensorShape", "framework.ops.name_scope"], "risc.risc_grad": ["framework.ops.RegisterGradient"], "risc.risc_grad._RiscAbsGrad": [], "risc.risc_grad._RiscAddGrad": [], "risc.risc_grad._RiscBinaryArithmeticGrad": [], "risc.risc_grad._RiscBinaryComparisonGrad": [], "risc.risc_grad._RiscBitcastGrad": [], "risc.risc_grad._RiscBroadcastGrad": [], "risc.risc_grad._RiscCastGrad": [], "risc.risc_grad._RiscCholeskyGrad": [], "risc.risc_grad._RiscCeilGrad": [], "risc.risc_grad._RiscConcatGrad": [], "risc.risc_grad._RiscConditionGrad": [], "risc.risc_grad._RiscConvGrad": [], "risc.risc_grad._RiscCosGrad": [], "risc.risc_grad._RiscDivGrad": [], "risc.risc_grad._RiscDotGrad": [], "risc.risc_grad._RiscExpGrad": [], "risc.risc_grad._RiscFftGrad": [], "risc.risc_grad._RiscFloorGrad": [], "risc.risc_grad._RiscGatherGrad": [], "risc.risc_grad._RiscImagGrad": [], "risc.risc_grad._RiscIsFiniteGrad": [], "risc.risc_grad._RiscLogGrad": [], "risc.risc_grad._RiscLogicalAndGrad": [], "risc.risc_grad._RiscLogicalNotGrad": [], "risc.risc_grad._RiscLogicalOrGrad": [], "risc.risc_grad._RiscMaxGrad": [], "risc.risc_grad._RiscMinGrad": [], "risc.risc_grad._RiscMulGrad": [], "risc.risc_grad._RiscNegGrad": [], "risc.risc_grad._RiscPadGrad": [], "risc.risc_grad._RiscPoolGrad": [], "risc.risc_grad._RiscPowGrad": [], "risc.risc_grad._RiscRandomUniformGrad": [], "risc.risc_grad._RiscRealGrad": [], "risc.risc_grad._RiscReduceGrad": [], "risc.risc_grad._RiscRemGrad": [], "risc.risc_grad._RiscReshapeGrad": [], "risc.risc_grad._RiscReverseGrad": [], "risc.risc_grad._RiscScatterGrad": [], "risc.risc_grad._RiscShapeGrad": [], "risc.risc_grad._RiscSignGrad": [], "risc.risc_grad._RiscSliceGrad": [], "risc.risc_grad._RiscSortGrad": [], "risc.risc_grad._RiscSqueezeGrad": [], "risc.risc_grad._RiscSubGrad": [], "risc.risc_grad._RiscTransposeGrad": [], "risc.risc_grad._RiscTriangularSolvesGrad": [], "risc.risc_grad._RiscUnaryGrad": [], "risc.risc_grad._RiscWhileGrad": [], "risc.risc_ops": [], "risc.risc_ops.risc_abs": ["ops.gen_risc_ops.risc_abs"], "ops.gen_risc_ops.risc_abs": [], "risc.risc_ops.risc_add": ["ops.gen_risc_ops.risc_add"], "ops.gen_risc_ops.risc_add": [], "risc.risc_ops.risc_binary_arithmetic": ["ops.gen_risc_ops.risc_binary_arithmetic"], "ops.gen_risc_ops.risc_binary_arithmetic": [], "risc.risc_ops.risc_binary_comparison": ["ops.gen_risc_ops.risc_binary_comparison"], "ops.gen_risc_ops.risc_binary_comparison": [], "risc.risc_ops.risc_bitcast": ["ops.gen_risc_ops.risc_bitcast"], "ops.gen_risc_ops.risc_bitcast": [], "risc.risc_ops.risc_broadcast": ["ops.gen_risc_ops.risc_broadcast"], "ops.gen_risc_ops.risc_broadcast": [], "risc.risc_ops.risc_cast": ["ops.gen_risc_ops.risc_cast"], "ops.gen_risc_ops.risc_cast": [], "risc.risc_ops.risc_ceil": ["ops.gen_risc_ops.risc_ceil"], "ops.gen_risc_ops.risc_ceil": [], "risc.risc_ops.risc_cos": ["ops.gen_risc_ops.risc_cos"], "ops.gen_risc_ops.risc_cos": [], "risc.risc_ops.risc_cholesky": ["ops.gen_risc_ops.risc_cholesky"], "ops.gen_risc_ops.risc_cholesky": [], "risc.risc_ops.risc_concat": ["ops.gen_risc_ops.risc_concat"], "ops.gen_risc_ops.risc_concat": [], "risc.risc_ops.risc_condition": ["ops.gen_risc_ops.risc_condition"], "ops.gen_risc_ops.risc_condition": [], "risc.risc_ops.risc_conv": ["ops.gen_risc_ops.risc_conv"], "ops.gen_risc_ops.risc_conv": [], "risc.risc_ops.risc_div": ["ops.gen_risc_ops.risc_div"], "ops.gen_risc_ops.risc_div": [], "risc.risc_ops.risc_dot": ["ops.gen_risc_ops.risc_dot"], "ops.gen_risc_ops.risc_dot": [], "risc.risc_ops.risc_exp": ["ops.gen_risc_ops.risc_exp"], "ops.gen_risc_ops.risc_exp": [], "risc.risc_ops.risc_fft": ["ops.gen_risc_ops.risc_fft"], "ops.gen_risc_ops.risc_fft": [], "risc.risc_ops.risc_floor": ["ops.gen_risc_ops.risc_floor"], "ops.gen_risc_ops.risc_floor": [], "risc.risc_ops.risc_gather": ["ops.gen_risc_ops.risc_gather"], "ops.gen_risc_ops.risc_gather": [], "risc.risc_ops.risc_imag": ["ops.gen_risc_ops.risc_imag"], "ops.gen_risc_ops.risc_imag": [], "risc.risc_ops.risc_is_finite": ["ops.gen_risc_ops.risc_is_finite"], "ops.gen_risc_ops.risc_is_finite": [], "risc.risc_ops.risc_log": ["ops.gen_risc_ops.risc_log"], "ops.gen_risc_ops.risc_log": [], "risc.risc_ops.risc_logical_and": ["ops.gen_risc_ops.risc_logical_and"], "ops.gen_risc_ops.risc_logical_and": [], "risc.risc_ops.risc_logical_not": ["ops.gen_risc_ops.risc_logical_not"], "ops.gen_risc_ops.risc_logical_not": [], "risc.risc_ops.risc_logical_or": ["ops.gen_risc_ops.risc_logical_or"], "ops.gen_risc_ops.risc_logical_or": [], "risc.risc_ops.risc_max": ["ops.gen_risc_ops.risc_max"], "ops.gen_risc_ops.risc_max": [], "risc.risc_ops.risc_min": ["ops.gen_risc_ops.risc_min"], "ops.gen_risc_ops.risc_min": [], "risc.risc_ops.risc_mul": ["ops.gen_risc_ops.risc_mul"], "ops.gen_risc_ops.risc_mul": [], "risc.risc_ops.risc_neg": ["ops.gen_risc_ops.risc_neg"], "ops.gen_risc_ops.risc_neg": [], "risc.risc_ops.risc_pad": ["ops.gen_risc_ops.risc_pad"], "ops.gen_risc_ops.risc_pad": [], "risc.risc_ops.risc_pool": ["ops.gen_risc_ops.risc_pool"], "ops.gen_risc_ops.risc_pool": [], "risc.risc_ops.risc_pow": ["ops.gen_risc_ops.risc_pow"], "ops.gen_risc_ops.risc_pow": [], "risc.risc_ops.risc_random_uniform": ["ops.gen_risc_ops.risc_random_uniform"], "ops.gen_risc_ops.risc_random_uniform": [], "risc.risc_ops.risc_real": ["ops.gen_risc_ops.risc_real"], "ops.gen_risc_ops.risc_real": [], "risc.risc_ops.risc_reduce": ["ops.gen_risc_ops.risc_reduce"], "ops.gen_risc_ops.risc_reduce": [], "risc.risc_ops.risc_rem": ["ops.gen_risc_ops.risc_rem"], "ops.gen_risc_ops.risc_rem": [], "risc.risc_ops.risc_reshape": ["ops.gen_risc_ops.risc_reshape"], "ops.gen_risc_ops.risc_reshape": [], "risc.risc_ops.risc_reverse": ["ops.gen_risc_ops.risc_reverse"], "ops.gen_risc_ops.risc_reverse": [], "risc.risc_ops.risc_scatter": ["ops.gen_risc_ops.risc_scatter"], "ops.gen_risc_ops.risc_scatter": [], "risc.risc_ops.risc_shape": ["ops.gen_risc_ops.risc_shape"], "ops.gen_risc_ops.risc_shape": [], "risc.risc_ops.risc_sign": ["ops.gen_risc_ops.risc_sign"], "ops.gen_risc_ops.risc_sign": [], "risc.risc_ops.risc_slice": ["ops.gen_risc_ops.risc_slice"], "ops.gen_risc_ops.risc_slice": [], "risc.risc_ops.risc_sub": ["ops.gen_risc_ops.risc_sub"], "ops.gen_risc_ops.risc_sub": [], "risc.risc_ops.risc_sort": ["ops.gen_risc_ops.risc_sort"], "ops.gen_risc_ops.risc_sort": [], "risc.risc_ops.risc_squeeze": ["ops.gen_risc_ops.risc_squeeze"], "ops.gen_risc_ops.risc_squeeze": [], "risc.risc_ops.risc_transpose": ["ops.gen_risc_ops.risc_transpose"], "ops.gen_risc_ops.risc_transpose": [], "risc.risc_ops.risc_triangular_solve": ["ops.gen_risc_ops.risc_triangular_solve"], "ops.gen_risc_ops.risc_triangular_solve": [], "risc.risc_ops.risc_unary": ["ops.gen_risc_ops.risc_unary"], "ops.gen_risc_ops.risc_unary": [], "risc.risc_ops.risc_while": ["ops.gen_risc_ops.risc_while"], "ops.gen_risc_ops.risc_while": [], "signal.dct_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "signal.dct_ops._validate_dct_arguments": ["<builtin>.ValueError", "<builtin>.NotImplementedError"], "signal.dct_ops.dct": ["framework.tensor_shape.dimension_value", "ops.array_ops.shape", "ops.array_ops.concat", "signal.dct_ops._validate_dct_arguments", "ops.math_ops.range", "ops.math_ops.sqrt", "signal.dct_ops.dct", "ops.math_ops.cast", "signal.fft_ops.irfft", "ops.math_ops.exp", "ops.math_ops.real", "ops.array_ops.pad", "math.sqrt", "ops.array_ops.expand_dims", "framework.ops.convert_to_tensor", "ops.math_ops.rsqrt", "ops.math_ops.complex", "framework.ops.name_scope", "signal.fft_ops.rfft", "<builtin>.range", "<builtin>.len"], "signal.fft_ops.rfft": [], "signal.fft_ops.irfft": [], "signal.dct_ops.idct": ["signal.dct_ops._validate_dct_arguments", "signal.dct_ops.dct"], "signal.fft_ops": ["util.tf_export.tf_export", "signal.fft_ops._irfft_grad_helper", "signal.fft_ops._irfft_wrapper", "framework.ops.RegisterGradient", "util.dispatch.add_dispatch_support", "signal.fft_ops._rfft_wrapper", "signal.fft_ops._rfft_grad_helper"], "signal.fft_ops._infer_fft_length_for_rfft": ["ops.array_ops.shape", "framework.ops.convert_to_tensor"], "signal.fft_ops._infer_fft_length_for_irfft": ["ops.array_ops.stack", "ops.array_ops.shape", "<builtin>.max", "framework.ops.convert_to_tensor", "ops.math_ops.maximum", "ops.array_ops.unstack"], "signal.fft_ops._maybe_pad_for_rfft": ["ops.array_ops.stack", "ops.array_ops.concat", "ops.array_ops.shape", "framework.tensor_util.constant_value_as_shape", "ops.array_ops.pad", "<builtin>.any", "ops.array_ops.rank", "ops.array_ops.zeros_like", "<builtin>.max", "<builtin>.zip", "ops.array_ops.zeros", "ops.math_ops.maximum"], "signal.fft_ops._rfft_wrapper": ["re.sub"], "signal.fft_ops._rfft_wrapper._rfft": ["framework.tensor_util.constant_value", "signal.fft_ops._infer_fft_length_for_rfft", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "ops.gen_spectral_ops.rfft", "signal.fft_ops._maybe_pad_for_rfft", "framework.ops.name_scope", "ops.gen_spectral_ops.rfft2d", "ops.gen_spectral_ops.rfft3d"], "ops.gen_spectral_ops.rfft": [], "ops.gen_spectral_ops.rfft2d": [], "ops.gen_spectral_ops.rfft3d": [], "signal.fft_ops._irfft_wrapper": ["re.sub"], "signal.fft_ops._irfft_wrapper._irfft": ["ops.gen_spectral_ops.irfft", "framework.tensor_util.constant_value", "ops.gen_spectral_ops.irfft3d", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "ops.gen_spectral_ops.irfft2d", "signal.fft_ops._infer_fft_length_for_irfft", "signal.fft_ops._maybe_pad_for_rfft", "framework.ops.name_scope"], "ops.gen_spectral_ops.irfft": [], "ops.gen_spectral_ops.irfft2d": [], "ops.gen_spectral_ops.irfft3d": [], "signal.fft_ops._fft_size_for_grad": ["ops.math_ops.reduce_prod", "ops.array_ops.shape"], "signal.fft_ops._fft_grad": ["signal.fft_ops._fft_size_for_grad", "ops.gen_spectral_ops.ifft", "ops.math_ops.cast"], "ops.gen_spectral_ops.ifft": [], "signal.fft_ops._ifft_grad": ["signal.fft_ops._fft_size_for_grad", "ops.gen_spectral_ops.fft", "ops.math_ops.cast"], "ops.gen_spectral_ops.fft": [], "signal.fft_ops._fft2d_grad": ["signal.fft_ops._fft_size_for_grad", "ops.math_ops.cast", "ops.gen_spectral_ops.ifft2d"], "ops.gen_spectral_ops.ifft2d": [], "signal.fft_ops._ifft2d_grad": ["signal.fft_ops._fft_size_for_grad", "ops.gen_spectral_ops.fft2d", "ops.math_ops.cast"], "ops.gen_spectral_ops.fft2d": [], "signal.fft_ops._fft3d_grad": ["signal.fft_ops._fft_size_for_grad", "ops.math_ops.cast", "ops.gen_spectral_ops.ifft3d"], "ops.gen_spectral_ops.ifft3d": [], "signal.fft_ops._ifft3d_grad": ["signal.fft_ops._fft_size_for_grad", "ops.gen_spectral_ops.fft3d", "ops.math_ops.cast"], "ops.gen_spectral_ops.fft3d": [], "signal.fft_ops._rfft_grad_helper": [], "signal.fft_ops._rfft_grad_helper._grad": ["signal.fft_ops._rfft_grad_helper._grad._mask_matrix", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.rank", "ops.array_ops.ones", "signal.fft_ops._rfft_grad_helper._grad._ymask", "ops.math_ops.conj", "ops.array_ops.tile", "ops.math_ops.matmul", "signal.fft_ops._fft_size_for_grad", "ops.math_ops.cast", "signal.fft_ops._rfft_grad_helper._grad._tile_for_broadcasting", "ops.math_ops.real"], "signal.fft_ops._rfft_grad_helper._grad._tile_for_broadcasting": ["ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.ones", "ops.array_ops.rank", "ops.array_ops.tile"], "signal.fft_ops._rfft_grad_helper._grad._mask_matrix": ["ops.math_ops.exp", "ops.array_ops.tile", "ops.array_ops.transpose", "ops.array_ops.expand_dims", "ops.math_ops.cast", "ops.math_ops.range"], "signal.fft_ops._rfft_grad_helper._grad._ymask": ["ops.math_ops.cast", "ops.math_ops.range"], "signal.fft_ops._irfft_grad_helper": [], "signal.fft_ops._irfft_grad_helper._grad": ["ops.array_ops.concat", "ops.array_ops.shape", "framework.tensor_util.constant_value", "ops.array_ops.ones", "signal.fft_ops._fft_size_for_grad", "ops.math_ops.cast", "ops.math_ops.mod", "ops.math_ops.reciprocal"], "signal.fft_ops.fftshift": ["<builtin>.isinstance", "ops.array_ops.shape", "ops.math_ops.less", "ops.array_ops.rank", "framework.ops.convert_to_tensor", "<builtin>.range", "<builtin>.tuple", "ops.manip_ops.roll", "framework.ops.name_scope", "ops.array_ops.gather", "ops.array_ops.where"], "signal.fft_ops.ifftshift": ["<builtin>.isinstance", "ops.array_ops.shape", "ops.math_ops.less", "ops.array_ops.rank", "framework.ops.convert_to_tensor", "<builtin>.range", "<builtin>.tuple", "ops.manip_ops.roll", "framework.ops.name_scope", "ops.array_ops.gather", "ops.array_ops.where"], "signal.mel_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export"], "signal.mel_ops._mel_to_hertz": ["framework.ops.convert_to_tensor", "ops.math_ops.exp", "framework.ops.name_scope"], "signal.mel_ops._hertz_to_mel": ["ops.math_ops.log", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "signal.mel_ops._validate_arguments": ["<builtin>.isinstance", "<builtin>.ValueError"], "signal.mel_ops.linear_to_mel_weight_matrix": ["ops.array_ops.split", "ops.math_ops.cast", "<builtin>.isinstance", "framework.tensor_util.constant_value", "ops.array_ops.pad", "signal.mel_ops._hertz_to_mel", "ops.array_ops.expand_dims", "ops.math_ops.linspace", "framework.ops.convert_to_tensor", "ops.math_ops.minimum", "ops.array_ops.reshape", "<builtin>.tuple", "signal.mel_ops._validate_arguments", "framework.ops.name_scope", "ops.math_ops.maximum", "signal.shape_ops.frame"], "signal.shape_ops.frame": ["ops.array_ops.gather", "signal.util_ops.gcd", "ops.math_ops.maximum", "ops.array_ops.reshape", "framework.ops.name_scope", "numpy.split", "framework.ops.convert_to_tensor", "ops.array_ops.zeros_like", "ops.math_ops.range", "signal.shape_ops.frame.maybe_constant", "<builtin>.len", "ops.array_ops.zeros", "ops.array_ops.split", "<builtin>.range", "ops.array_ops.pad", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.rank", "ops.array_ops.strided_slice", "ops.array_ops.size", "signal.shape_ops._infer_frame_shape"], "signal.mfcc_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export"], "signal.mfcc_ops.mfccs_from_log_mel_spectrograms": ["<builtin>.ValueError", "framework.ops.name_scope", "ops.math_ops.rsqrt", "signal.dct_ops.dct", "ops.math_ops.cast", "ops.array_ops.shape", "framework.ops.convert_to_tensor"], "signal.reconstruction_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export"], "signal.reconstruction_ops.overlap_and_add": ["ops.array_ops.zeros", "ops.array_ops.reshape", "ops.math_ops.reduce_sum", "framework.ops.name_scope", "ops.array_ops.shape", "signal.reconstruction_ops.overlap_and_add.full_shape", "ops.array_ops.size", "framework.ops.convert_to_tensor", "ops.math_ops.range", "ops.array_ops.concat", "ops.array_ops.pad", "<builtin>.ValueError", "ops.array_ops.transpose", "framework.tensor_util.constant_value"], "signal.reconstruction_ops.overlap_and_add.full_shape": ["ops.array_ops.concat"], "signal.shape_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "signal.shape_ops._infer_frame_shape": ["framework.tensor_util.constant_value", "<builtin>.max"], "signal.shape_ops.frame.maybe_constant": ["framework.tensor_util.constant_value"], "signal.util_ops.gcd": ["ops.control_flow_ops.while_loop", "fractions.gcd", "math.gcd", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "<builtin>.ValueError", "framework.tensor_util.constant_value"], "signal.spectral_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "signal.spectral_ops.stft": ["signal.shape_ops.frame", "signal.spectral_ops._enclosing_power_of_two", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "signal.fft_ops.rfft"], "signal.spectral_ops._enclosing_power_of_two": ["ops.math_ops.ceil", "ops.math_ops.pow", "framework.constant_op.constant", "numpy.log", "numpy.ceil", "ops.math_ops.log", "ops.math_ops.cast", "framework.tensor_util.constant_value", "<builtin>.int"], "signal.spectral_ops.inverse_stft_window_fn": [], "signal.spectral_ops.inverse_stft_window_fn.inverse_stft_window_fn_inner": ["framework.ops.convert_to_tensor", "ops.array_ops.reshape", "ops.array_ops.tile", "ops.math_ops.square", "ops.array_ops.pad", "ops.math_ops.reduce_sum", "framework.ops.name_scope"], "signal.spectral_ops.inverse_stft": ["signal.reconstruction_ops.overlap_and_add", "ops.array_ops.rank", "signal.fft_ops.irfft", "signal.spectral_ops._enclosing_power_of_two", "ops.math_ops.maximum", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.pad", "ops.array_ops.zeros", "framework.tensor_util.constant_value", "framework.ops.name_scope"], "signal.spectral_ops.mdct": ["signal.shape_ops.frame", "framework.ops.convert_to_tensor", "ops.array_ops.split", "signal.dct_ops.dct", "<builtin>.ValueError", "numpy.sqrt", "ops.array_ops.reverse", "ops.array_ops.concat", "framework.tensor_util.constant_value", "framework.ops.name_scope"], "signal.spectral_ops.inverse_mdct": ["signal.reconstruction_ops.overlap_and_add", "framework.ops.convert_to_tensor", "ops.array_ops.split", "ops.array_ops.concat", "ops.array_ops.reverse", "numpy.sqrt", "ops.math_ops.cast", "signal.dct_ops.dct", "framework.ops.name_scope"], "signal.util_ops": [], "math.gcd": [], "fractions.gcd": [], "signal.util_ops.gcd.<lambda1>": ["ops.array_ops.zeros_like", "ops.math_ops.greater"], "signal.util_ops.gcd.<lambda2>": ["ops.math_ops.mod"], "signal.window_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export"], "signal.window_ops._check_params": ["framework.ops.convert_to_tensor", "<builtin>.ValueError"], "signal.window_ops.kaiser_window": ["ops.math_ops.range", "ops.array_ops.ones", "ops.math_ops.pow", "ops.special_math_ops.bessel_i0e", "framework.ops.name_scope", "signal.window_ops._check_params", "ops.math_ops.exp", "framework.tensor_util.constant_value", "ops.math_ops.sqrt", "ops.math_ops.cast"], "ops.special_math_ops.bessel_i0e": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_i0e"], "signal.window_ops.kaiser_bessel_derived_window": ["ops.math_ops.sqrt", "framework.ops.name_scope", "ops.array_ops.concat", "signal.window_ops._check_params", "signal.window_ops.kaiser_window", "ops.math_ops.cumsum"], "signal.window_ops.vorbis_window": ["ops.math_ops.range", "ops.math_ops.pow", "ops.math_ops.sin", "framework.ops.name_scope", "signal.window_ops._check_params", "ops.math_ops.cast"], "signal.window_ops.hann_window": ["signal.window_ops._raised_cosine_window"], "signal.window_ops._raised_cosine_window": ["framework.ops.convert_to_tensor", "ops.math_ops.equal", "ops.math_ops.range", "ops.array_ops.ones", "framework.constant_op.constant", "framework.ops.name_scope", "ops.control_flow_ops.cond", "ops.math_ops.cos", "framework.tensor_util.constant_value", "ops.math_ops.mod", "ops.math_ops.cast", "<builtin>.ValueError"], "signal.window_ops.hamming_window": ["signal.window_ops._raised_cosine_window"], "signal.window_ops._raised_cosine_window.<lambda1>": ["ops.array_ops.ones"], "signal.window_ops._raised_cosine_window.<lambda2>": ["ops.math_ops.cos", "ops.math_ops.cast"], "structured.structured_array_ops": ["util.deprecation.deprecated_args", "util.dispatch.dispatch_for_types"], "structured.structured_array_ops.expand_dims": ["util.deprecation.deprecated_argument_lookup", "structured.structured_array_ops._expand_dims_impl"], "structured.structured_array_ops._expand_dims_impl": ["ops.array_ops.get_positive_axis", "structured.structured_array_ops._expand_st_row_partitions", "framework.ops.name_scope", "ops.array_ops.expand_dims", "structured_tensor.StructuredTensor.from_fields"], "structured.structured_array_ops.expand_dims_v2": ["structured.structured_array_ops._expand_dims_impl"], "structured.structured_array_ops.gather": ["ops.array_ops.get_positive_axis", "framework.ops.name_scope", "structured.structured_array_ops._extend_op_single", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor"], "structured.structured_array_ops.gather.leaf_op": ["ops.array_ops.gather"], "structured.structured_array_ops._extend_op_single": ["structured.structured_array_ops._extend_op_single.to_list_op", "structured.structured_array_ops._extend_op"], "structured.structured_array_ops.concat": ["ops.array_ops.get_positive_axis", "framework.ops.name_scope", "structured.structured_array_ops._assert_concat_compatible_structured_tensors", "structured.structured_array_ops._extend_op"], "structured.structured_array_ops._assert_concat_compatible_structured_tensors": ["structured.structured_array_ops._assert_all_ranks_match", "<builtin>.isinstance", "structured.structured_array_ops._assert_all_paths_match", "<builtin>.ValueError"], "structured.structured_array_ops.concat.leaf_op": ["ops.array_ops.concat"], "structured.structured_array_ops._extend_op": ["structured.structured_array_ops.concat.leaf_op", "<builtin>.ValueError", "structured.structured_array_ops.empty_st_op_like_zeros.empty_st_op", "structured.structured_array_ops._extend_op_single.to_list_op.list_op", "structured.structured_array_ops.empty_st_op_like_zeros", "structured.structured_array_ops._extend_op", "<builtin>.isinstance", "structured_tensor.StructuredTensor.from_fields"], "structured.structured_array_ops.random_shuffle": ["structured.structured_array_ops.gather", "ops.math_ops.range", "<builtin>.ValueError", "ops.random_ops.random_shuffle", "framework.ops.name_scope"], "structured.structured_array_ops.size_v2": ["structured.structured_array_ops.size"], "structured.structured_array_ops.size": ["framework.ops.name_scope", "ops.math_ops.cast"], "structured.structured_array_ops.zeros_like": ["structured.structured_array_ops.zeros_like_v2"], "structured.structured_array_ops.zeros_like_v2": ["framework.ops.name_scope", "ragged_tensor.RaggedTensor._from_nested_row_partitions", "ops.array_ops.zeros"], "ragged_tensor.RaggedTensor._from_nested_row_partitions": [], "structured.structured_array_ops.ones_like": ["structured.structured_array_ops.ones_like_v2"], "structured.structured_array_ops.ones_like_v2": ["framework.ops.name_scope", "ops.array_ops.ones", "ragged_tensor.RaggedTensor._from_nested_row_partitions"], "structured.structured_array_ops.rank": ["framework.constant_op.constant", "framework.ops.name_scope"], "structured.structured_array_ops._expand_st_row_partitions": ["row_partition.RowPartition.from_uniform_row_length"], "structured_tensor.StructuredTensor.from_fields": [], "structured.structured_array_ops.empty_st_op_like_zeros": [], "structured.structured_array_ops.empty_st_op_like_zeros.empty_st_op": ["structured.structured_array_ops.zeros_like_v2", "structured.structured_array_ops._extend_op_single.to_list_op.list_op", "structured.structured_array_ops._structured_tensor_like", "structured.structured_array_ops.concat.leaf_op"], "structured.structured_array_ops._extend_op_single.to_list_op.list_op": ["structured.structured_array_ops.gather.leaf_op"], "structured.structured_array_ops._extend_op_single.to_list_op": [], "structured.structured_array_ops._structured_tensor_like": ["ragged.ragged_tensor.is_ragged", "structured.structured_array_ops._all_nested_row_partitions", "<builtin>.isinstance", "structured.structured_array_ops._structured_tensor_from_dense_tensor", "structured_tensor.StructuredTensor.from_fields"], "structured.structured_array_ops._structured_tensor_from_dense_tensor": ["<builtin>.ValueError", "ops.array_ops.shape", "ragged_tensor.RaggedTensor.from_tensor", "structured.structured_array_ops._structured_tensor_from_row_partitions", "structured_tensor.StructuredTensor.from_fields"], "structured.structured_array_ops._structured_tensor_from_row_partitions": ["structured_tensor.StructuredTensor.from_fields"], "structured.structured_array_ops._all_nested_row_partitions": ["<builtin>.isinstance", "structured.structured_array_ops._all_nested_row_partitions", "ragged_tensor.RaggedTensor.from_tensor"], "structured.structured_array_ops._get_all_paths": ["structured.structured_array_ops._get_all_paths", "<builtin>.isinstance"], "structured.structured_array_ops._get_all_ranks": ["structured.structured_array_ops._get_all_ranks", "<builtin>.isinstance"], "structured.structured_array_ops._assert_all_paths_match": ["structured.structured_array_ops._get_all_paths", "<builtin>.set", "<builtin>.ValueError"], "structured.structured_array_ops._assert_all_ranks_match": ["structured.structured_array_ops._get_all_ranks", "<builtin>.ValueError"], "structured.structured_ops": [], "structured.structured_tensor": ["<builtin>.object", "re.compile"], "structured.structured_tensor.StructuredTensor.__init__": ["<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor.from_fields": ["framework.tensor_shape.dimension_at_index", "structured.structured_tensor._merge_row_partitions", "<builtin>.type", "<builtin>.dict", "framework.tensor_shape.as_shape", "<builtin>.max", "structured.structured_tensor._find_shape_dtype", "<builtin>.ValueError", "structured.structured_tensor._merge_nrows", "framework.ops.convert_to_tensor", "structured.structured_tensor._replace_row_partitions", "<builtin>.len", "numpy.array", "structured.structured_tensor._convert_to_structured_field_value", "framework.ops.name_scope", "structured.structured_tensor._row_partitions_for_uniform_shape", "framework.constant_op.constant", "<builtin>.tuple", "<builtin>.TypeError", "structured.structured_tensor.StructuredTensor.__init__", "<builtin>.isinstance"], "structured.structured_tensor._convert_to_structured_field_value": ["framework.ops.convert_to_tensor", "ragged.ragged_tensor.convert_to_tensor_or_ragged_tensor", "<builtin>.TypeError", "ragged.ragged_tensor.is_ragged", "<builtin>.isinstance"], "structured.structured_tensor._find_shape_dtype": ["<builtin>.set", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance"], "structured.structured_tensor._merge_nrows": ["ops.check_ops.assert_equal", "framework.tensor_shape.dimension_at_index", "ops.array_ops.shape", "ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor._merge_row_partitions": ["<builtin>.isinstance", "structured.structured_tensor._row_partitions_for_tensor", "<builtin>.tuple", "<builtin>.len", "<builtin>.type", "<builtin>.zip", "structured.structured_tensor._row_partitions_for_ragged_tensor"], "structured.structured_tensor._row_partitions_for_uniform_shape": ["<builtin>.range", "ops.math_ops.cumprod", "row_partition.RowPartition.from_uniform_row_length", "<builtin>.tuple"], "structured.structured_tensor._replace_row_partitions": ["structured.structured_tensor._replace_row_partitions", "ragged_tensor.RaggedTensor._from_row_partition", "<builtin>.len", "structured.structured_tensor.StructuredTensor.__init__", "<builtin>.dict", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor.with_updates": ["structured.structured_tensor._normalize_field_name_to_tuple", "<builtin>.range", "<builtin>.len", "<builtin>.sorted", "structured.structured_tensor.StructuredTensor._with_updates_impl", "<builtin>.ValueError"], "structured.structured_tensor._normalize_field_name_to_tuple": ["<builtin>.tuple", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor._with_updates_impl": ["structured.structured_tensor.StructuredTensor._with_updates_impl.name_fullpath", "structured.structured_tensor.StructuredTensor._with_updates_impl.apply_value", "<builtin>.tuple", "<builtin>.len", "<builtin>.type", "structured.structured_tensor.StructuredTensor.from_fields", "<builtin>.dict", "<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor._with_updates_impl.name_fullpath": ["<builtin>.str"], "structured.structured_tensor.StructuredTensor._with_updates_impl.apply_value": ["structured.structured_tensor.StructuredTensor._with_updates_impl.name_fullpath", "<builtin>.ValueError", "<builtin>.callable"], "structured.structured_tensor.StructuredTensor._promote_helper": ["structured.structured_tensor.StructuredTensor.field_value", "<builtin>.min", "<builtin>.ValueError", "structured.structured_tensor._merge_dims_generic"], "structured.structured_tensor.StructuredTensor.field_value": ["structured.structured_tensor.StructuredTensor.field_value", "<builtin>.KeyError", "<builtin>.isinstance"], "structured.structured_tensor._merge_dims_generic": ["structured.structured_tensor.StructuredTensor.merge_dims", "<builtin>.isinstance", "ragged.ragged_tensor.merge_dims"], "structured.structured_tensor.StructuredTensor.promote": ["<builtin>.len", "structured.structured_tensor.StructuredTensor.with_updates", "structured.structured_tensor.StructuredTensor._promote_helper", "<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor.rank": [], "structured.structured_tensor.StructuredTensor.shape": [], "structured.structured_tensor.StructuredTensor.row_partitions": [], "structured.structured_tensor.StructuredTensor.nrows": [], "structured.structured_tensor.StructuredTensor._is_eager": ["util.nest.flatten", "<builtin>.isinstance", "<builtin>.all"], "structured.structured_tensor.StructuredTensor.field_names": ["<builtin>.tuple"], "structured.structured_tensor.StructuredTensor.__getitem__": ["<builtin>.tuple", "structured.structured_tensor.StructuredTensor._tensor_getitem", "<builtin>.isinstance", "structured.structured_tensor.StructuredTensor._scalar_getitem"], "structured.structured_tensor.StructuredTensor._scalar_getitem": ["structured.structured_tensor.StructuredTensor.from_fields", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.dict"], "structured.structured_tensor.StructuredTensor._tensor_getitem": ["<builtin>.enumerate", "<builtin>.len", "structured.structured_tensor.StructuredTensor.from_fields", "<builtin>.dict", "<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor.__repr__": ["<builtin>.sorted", "<builtin>.str"], "structured.structured_tensor.StructuredTensor.to_pyval": ["<builtin>.len", "structured.structured_tensor._pyval_field_major_to_node_major", "<builtin>.list", "structured.structured_tensor.StructuredTensor._is_eager", "structured.structured_tensor._empty_dict_pylist_from_row_partitions", "<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor._empty_dict_pylist_from_row_partitions": ["structured.structured_tensor._empty_dict_pylist_from_row_partitions", "<builtin>.range", "<builtin>.len"], "structured.structured_tensor._pyval_field_major_to_node_major": ["<builtin>.range", "<builtin>.len", "<builtin>.all", "structured.structured_tensor._pyval_field_major_to_node_major", "<builtin>.zip", "<builtin>.dict"], "structured.structured_tensor.StructuredTensor.from_pyval": ["structured.structured_tensor.StructuredTensor._from_pyval"], "structured.structured_tensor.StructuredTensor._from_pyval": ["structured.structured_tensor.StructuredTensor._from_pylist_of_dict", "structured.structured_tensor.StructuredTensor._from_pyscalar", "structured.structured_tensor.StructuredTensor._from_pydict", "<builtin>.set", "structured.structured_tensor.StructuredTensor._from_pylist_of_value", "structured.structured_tensor._pyval_find_struct_keys_and_depth", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor._from_pydict": ["structured.structured_tensor.StructuredTensor.from_fields", "structured.structured_tensor.StructuredTensor._from_pyval", "<builtin>.dict", "<builtin>.set", "<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor._pyval_find_struct_keys_and_depth": ["<builtin>.ValueError", "structured.structured_tensor._pyval_find_struct_keys_and_depth", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor._from_pylist_of_dict": ["framework.tensor_shape.TensorShape", "structured.structured_tensor.StructuredTensor.from_fields", "structured.structured_tensor._pyval_update_fields", "structured.structured_tensor.StructuredTensor._from_pyval", "structured.structured_tensor.StructuredTensor._from_pylist_of_empty_dict", "<builtin>.dict", "<builtin>.set", "<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor._from_pylist_of_value": ["framework.constant_op.constant", "<builtin>.ValueError", "structured.structured_tensor._pyval_empty_list_depth", "structured.structured_tensor.StructuredTensor._from_pylist_of_dict", "<builtin>.set", "ragged.ragged_factory_ops.constant", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor._from_pyscalar": ["<builtin>.ValueError", "framework.constant_op.constant", "<builtin>.isinstance"], "structured.structured_tensor._pyval_update_fields": ["structured.structured_tensor._pyval_update_fields", "<builtin>.ValueError", "<builtin>.range", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor._from_pylist_of_empty_dict": ["framework.tensor_shape.TensorShape", "structured.structured_tensor._dicts_to_zeros", "<builtin>.len", "structured.structured_tensor.StructuredTensor.from_fields", "ragged.ragged_factory_ops.constant"], "structured.structured_tensor._dicts_to_zeros": ["structured.structured_tensor._dicts_to_zeros", "<builtin>.isinstance"], "structured.structured_tensor._pyval_empty_list_depth": ["<builtin>.any", "structured.structured_tensor._pyval_empty_list_depth", "<builtin>.max", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor.partition_outer_dimension": ["structured.structured_tensor._partition_outer_dimension", "<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.isinstance"], "structured.structured_tensor._partition_outer_dimension": ["ops.array_ops.reshape", "ops.array_ops.concat", "ragged_tensor.RaggedTensor._from_row_partition", "framework.tensor_shape.TensorShape", "structured.structured_tensor._partition_outer_dimension", "structured.structured_tensor.StructuredTensor.__init__", "ops.array_ops.shape", "<builtin>.dict", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor.merge_dims": ["ops.array_ops.get_positive_axis", "<builtin>.ValueError", "structured.structured_tensor._merge_dims"], "structured.structured_tensor._merge_dims": ["ops.array_ops.gather", "structured.structured_tensor._merge_dims", "<builtin>.range", "structured.structured_tensor.StructuredTensor.__init__", "<builtin>.dict", "ragged.ragged_tensor.merge_dims", "row_partition.RowPartition.from_row_splits", "<builtin>.isinstance"], "structured.structured_tensor.StructuredTensor._type_spec": ["structured.structured_tensor.StructuredTensorSpec.from_value"], "structured.structured_tensor.StructuredTensorSpec.from_value": ["structured.structured_tensor.StructuredTensorSpec.__init__", "framework.type_spec.type_spec_from_value", "<builtin>.dict"], "structured.structured_tensor.StructuredTensorSpec.__init__": ["framework.tensor_shape.as_shape", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.dict"], "structured.structured_tensor.StructuredTensorSpec.value_type": [], "structured.structured_tensor.StructuredTensorSpec._to_components": [], "structured.structured_tensor.StructuredTensorSpec._from_components": ["structured.structured_tensor.StructuredTensor.from_fields", "logging.warning", "structured.structured_tensor.StructuredTensor.__init__", "<builtin>.isinstance"], "logging.warning": [], "structured.structured_tensor.StructuredTensorSpec._component_specs": ["ragged.row_partition.RowPartitionSpec", "framework.tensor_spec.TensorSpec"], "structured.structured_tensor.StructuredTensorSpec._serialize": [], "structured.structured_tensor.StructuredTensorSpec._batch": ["structured.structured_tensor.StructuredTensorSpec.__init__", "framework.tensor_shape.TensorShape", "<builtin>.dict"], "structured.structured_tensor.StructuredTensorSpec._unbatch": ["structured.structured_tensor.StructuredTensorSpec.__init__", "<builtin>.dict"], "structured.structured_tensor.StructuredTensorSpec._flat_tensor_specs": ["<builtin>.sorted"], "structured.structured_tensor.StructuredTensorSpec._flat_tensor_specs.<lambda1>": [], "structured.structured_tensor.StructuredTensorSpec._to_tensor_list": ["structured.structured_tensor.StructuredTensorSpec._to_tensor_list_internal"], "structured.structured_tensor.StructuredTensorSpec._to_tensor_list_internal": ["<builtin>.sorted"], "structured.structured_tensor.StructuredTensorSpec._to_batched_tensor_list": ["structured.structured_tensor.StructuredTensorSpec._to_tensor_list_internal"], "structured.structured_tensor.StructuredTensorSpec._from_compatible_tensor_list": ["<builtin>.sorted", "structured.structured_tensor.StructuredTensor.from_fields", "<builtin>.len"], "structured.structured_tensor.StructuredTensorSpec._from_compatible_tensor_list.<lambda1>": [], "structured.structured_tensor.StructuredTensorSpec._to_tensor_list_internal.<lambda1>": [], "structured.structured_tensor._row_partitions_for_tensor": ["ops.array_ops.shape", "structured.structured_tensor._row_partitions_for_uniform_shape"], "structured.structured_tensor._row_partitions_for_ragged_tensor": ["structured.structured_tensor._row_partitions_for_tensor", "<builtin>.len"], "ragged_tensor.RaggedTensor._from_row_partition": [], "python.modify_model_interface": ["absl.app.run", "absl.flags.DEFINE_string", "absl.flags.DEFINE_enum", "absl.flags.mark_flag_as_required"], "absl.flags.DEFINE_enum": [], "python.modify_model_interface.main": ["<builtin>.print", "python.modify_model_interface_lib.modify_model_interface"], "python.modify_model_interface_lib.modify_model_interface": ["python._pywrap_modify_model_interface.modify_model_interface", "<builtin>.RuntimeError", "python.modify_model_interface_lib._parse_type_to_int"], "python.modify_model_interface_constants": [], "python.modify_model_interface_lib": [], "python.modify_model_interface_lib._parse_type_to_int": ["<builtin>.ValueError"], "python._pywrap_modify_model_interface.modify_model_interface": [], "benchmarks.bucketized_column_dense_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "compat.v2_compat.enable_v2_behavior": ["ops.control_flow_v2_toggles.enable_control_flow_v2", "ops.variable_scope.enable_resource_variables", "framework.tensor_shape.enable_v2_tensorshape", "framework.ops.enable_tensor_equality", "framework.ops.enable_eager_execution", "python.tf2.enable"], "benchmarks.bucketized_column_dense_benchmark.embedding_varlen": ["feature_column.feature_column_v2.bucketized_column", "benchmarks.feature_column_benchmark.create_data", "python.keras.Input", "numpy.arange", "feature_column.feature_column_v2.numeric_column", "benchmarks.feature_column_benchmark.run_keras", "preprocessing.discretization.Discretization", "eager.def_function.function", "benchmarks.feature_column_benchmark.run_fc", "<builtin>.list", "python.keras.Sequential"], "benchmarks.feature_column_benchmark.create_data": ["numpy.random.random", "ragged_tensor.RaggedTensor.from_row_lengths", "numpy.sum"], "python.keras.Input": [], "preprocessing.discretization.Discretization": [], "feature_column.feature_column_v2.numeric_column": ["<builtin>.TypeError", "feature_column._DenseColumn.__init__", "feature_column.utils.check_default_value", "<builtin>.ValueError", "feature_column.utils.assert_key_is_string", "<builtin>.callable", "feature_column.feature_column_v2._check_shape"], "feature_column.feature_column_v2.bucketized_column": ["<builtin>.range", "feature_column._DenseColumn.__init__", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.len"], "benchmarks.bucketized_column_dense_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.feature_column_benchmark.run_keras": ["dataset_ops.Dataset.from_tensor_slices", "numpy.mean", "<builtin>.range", "benchmarks.feature_column_benchmark.StepTimingCallback.__init__"], "benchmarks.feature_column_benchmark.run_fc": ["numpy.array", "time.time", "numpy.mean", "<builtin>.range", "dataset_ops.Dataset.from_tensor_slices", "<builtin>.next"], "benchmarks.bucketized_column_dense_benchmark.BenchmarkLayer.benchmark_layer": ["feature_column_benchmark.LayerBenchmark.report", "benchmarks.bucketized_column_dense_benchmark.embedding_varlen"], "feature_column_benchmark.LayerBenchmark.report": [], "benchmarks.category_crossing_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.category_crossing_benchmark.int_gen": ["itertools.count", "numpy.random.randint"], "benchmarks.category_crossing_benchmark.BenchmarkLayer.run_dataset_implementation": ["dataset_ops.Dataset.from_generator", "framework.tensor_shape.TensorShape", "ops.sparse_ops.sparse_cross", "<builtin>.range", "time.time", "numpy.mean", "numpy.array"], "dataset_ops.Dataset.from_generator": [], "benchmarks.category_crossing_benchmark.BenchmarkLayer.bm_layer_implementation": ["dataset_ops.Dataset.from_generator", "python.keras.Input", "framework.tensor_shape.TensorShape", "benchmark.TensorFlowBenchmark.report_benchmark", "<builtin>.range", "benchmarks.category_crossing_benchmark.BenchmarkLayer.run_dataset_implementation", "time.time", "numpy.mean", "preprocessing.category_crossing.CategoryCrossing", "numpy.array"], "preprocessing.category_crossing.CategoryCrossing": [], "benchmark.TensorFlowBenchmark.report_benchmark": [], "benchmarks.category_crossing_benchmark.BenchmarkLayer.benchmark_vocab_size_by_batch": ["benchmarks.category_crossing_benchmark.BenchmarkLayer.bm_layer_implementation"], "benchmarks.category_cross_hash_dense_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.category_cross_hash_dense_benchmark.embedding_varlen": ["python.keras.Input", "benchmarks.feature_column_benchmark.create_vocabulary", "preprocessing.hashing.Hashing", "feature_column.feature_column_v2.crossed_column", "preprocessing.category_crossing.CategoryCrossing", "benchmarks.feature_column_benchmark.create_string_data", "benchmarks.feature_column_benchmark.run_keras", "benchmarks.feature_column_benchmark.run_fc", "eager.def_function.function", "python.keras.Model"], "benchmarks.feature_column_benchmark.create_vocabulary": ["math.ceil", "itertools.product", "<builtin>.range", "<builtin>.len", "math.log"], "benchmarks.feature_column_benchmark.create_string_data": ["random.choice", "ragged_tensor.RaggedTensor.from_row_lengths", "<builtin>.int", "<builtin>.range", "numpy.sum", "numpy.random.random"], "preprocessing.hashing.Hashing": [], "feature_column.feature_column_v2.crossed_column": ["feature_column._CategoricalColumn.__init__", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.len"], "benchmarks.category_cross_hash_dense_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_cross_hash_dense_benchmark.BenchmarkLayer.benchmark_layer": ["benchmarks.category_cross_hash_dense_benchmark.embedding_varlen", "feature_column_benchmark.LayerBenchmark.report"], "benchmarks.category_encoding_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.category_encoding_benchmark.BenchmarkLayer.run_dataset_implementation": ["preprocessing.category_encoding.CategoryEncoding", "ops.random_ops.random_uniform", "numpy.array", "benchmark.TensorFlowBenchmark.report_benchmark", "<builtin>.range", "python.keras.Input", "time.time", "numpy.mean", "dataset_ops.Dataset.from_tensor_slices"], "preprocessing.category_encoding.CategoryEncoding": [], "benchmarks.category_encoding_benchmark.BenchmarkLayer.benchmark_vocab_size_by_batch": ["benchmarks.category_encoding_benchmark.BenchmarkLayer.run_dataset_implementation"], "benchmarks.category_hash_dense_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.category_hash_dense_benchmark.embedding_varlen": ["python.keras.Sequential", "benchmarks.feature_column_benchmark.run_fc", "eager.def_function.function", "benchmarks.feature_column_benchmark.create_vocabulary", "benchmarks.feature_column_benchmark.run_keras", "python.keras.Input", "preprocessing.hashing.Hashing", "benchmarks.feature_column_benchmark.create_string_data", "feature_column.sequence_feature_column.sequence_categorical_column_with_hash_bucket"], "feature_column.sequence_feature_column.sequence_categorical_column_with_hash_bucket": ["feature_column.feature_column_v2.categorical_column_with_hash_bucket", "feature_column.feature_column_v2.SequenceCategoricalColumn"], "benchmarks.category_hash_dense_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_hash_dense_benchmark.BenchmarkLayer.benchmark_layer": ["feature_column_benchmark.LayerBenchmark.report", "benchmarks.category_hash_dense_benchmark.embedding_varlen"], "benchmarks.category_hash_varlen_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.category_hash_varlen_benchmark.embedding_varlen": ["benchmarks.feature_column_benchmark.create_string_data", "python.keras.Input", "eager.def_function.function", "python.keras.Sequential", "feature_column.feature_column_v2.categorical_column_with_hash_bucket", "benchmarks.feature_column_benchmark.run_fc", "benchmarks.feature_column_benchmark.run_keras", "preprocessing.hashing.Hashing", "benchmarks.feature_column_benchmark.create_vocabulary"], "feature_column.feature_column_v2.categorical_column_with_hash_bucket": ["feature_column.utils.assert_key_is_string", "feature_column.utils.assert_string_or_int", "feature_column._CategoricalColumn.__init__", "<builtin>.ValueError"], "benchmarks.category_hash_varlen_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_hash_varlen_benchmark.BenchmarkLayer.benchmark_layer": ["feature_column_benchmark.LayerBenchmark.report", "benchmarks.category_hash_varlen_benchmark.embedding_varlen"], "benchmarks.category_vocab_file_dense_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.category_vocab_file_dense_benchmark.BenchmarkLayer._write_to_temp_file": ["platform.gfile.GFile", "os.path.join", "test.TestCase.get_temp_dir"], "test.TestCase.get_temp_dir": [], "benchmarks.category_vocab_file_dense_benchmark.BenchmarkLayer.embedding_varlen": ["benchmarks.feature_column_benchmark.run_fc", "feature_column.feature_column_v2.categorical_column_with_vocabulary_list", "benchmarks.feature_column_benchmark.create_vocabulary", "preprocessing.string_lookup.StringLookup", "python.keras.Sequential", "benchmarks.feature_column_benchmark.create_string_data", "benchmarks.feature_column_benchmark.run_keras", "python.keras.Input", "benchmarks.category_vocab_file_dense_benchmark.BenchmarkLayer._write_to_temp_file", "eager.def_function.function"], "feature_column.feature_column_v2.categorical_column_with_vocabulary_list": ["feature_column._CategoricalColumn.__init__", "<builtin>.tuple", "feature_column.utils.assert_string_or_int", "<builtin>.ValueError", "feature_column.utils.assert_key_is_string", "<builtin>.len", "framework.dtypes.as_dtype", "numpy.array", "<builtin>.set"], "benchmarks.category_vocab_file_dense_benchmark.BenchmarkLayer.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_vocab_file_dense_benchmark.BenchmarkLayer.benchmark_layer": ["benchmarks.category_vocab_file_dense_benchmark.BenchmarkLayer.embedding_varlen", "test.TestCase.report"], "test.TestCase.report": [], "benchmarks.category_vocab_file_varlen_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.category_vocab_file_varlen_benchmark.BenchmarkLayer._write_to_temp_file": ["test.TestCase.get_temp_dir", "os.path.join", "platform.gfile.GFile"], "benchmarks.category_vocab_file_varlen_benchmark.BenchmarkLayer.embedding_varlen": ["python.keras.Sequential", "eager.def_function.function", "python.keras.Input", "preprocessing.string_lookup.StringLookup", "benchmarks.feature_column_benchmark.create_string_data", "benchmarks.feature_column_benchmark.run_fc", "benchmarks.feature_column_benchmark.create_vocabulary", "benchmarks.category_vocab_file_varlen_benchmark.BenchmarkLayer._write_to_temp_file", "feature_column.sequence_feature_column.sequence_categorical_column_with_vocabulary_list", "benchmarks.feature_column_benchmark.run_keras"], "feature_column.sequence_feature_column.sequence_categorical_column_with_vocabulary_list": ["feature_column.feature_column_v2.categorical_column_with_vocabulary_list", "feature_column.feature_column_v2.SequenceCategoricalColumn"], "benchmarks.category_vocab_file_varlen_benchmark.BenchmarkLayer.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_vocab_file_varlen_benchmark.BenchmarkLayer.benchmark_layer": ["test.TestCase.report", "benchmarks.category_vocab_file_varlen_benchmark.BenchmarkLayer.embedding_varlen"], "benchmarks.category_vocab_list_dense_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.category_vocab_list_dense_benchmark.embedding_varlen": ["benchmarks.feature_column_benchmark.run_keras", "benchmarks.feature_column_benchmark.run_fc", "benchmarks.feature_column_benchmark.create_vocabulary", "python.keras.Sequential", "python.keras.Input", "feature_column.feature_column_v2.categorical_column_with_vocabulary_list", "preprocessing.string_lookup.StringLookup", "eager.def_function.function", "benchmarks.feature_column_benchmark.create_string_data"], "benchmarks.category_vocab_list_dense_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_vocab_list_dense_benchmark.BenchmarkLayer.benchmark_layer": ["benchmarks.category_vocab_list_dense_benchmark.embedding_varlen", "feature_column_benchmark.LayerBenchmark.report"], "benchmarks.category_vocab_list_indicator_dense_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.category_vocab_list_indicator_dense_benchmark.embedding_varlen": ["benchmarks.feature_column_benchmark.create_vocabulary", "feature_column.feature_column_v2.categorical_column_with_vocabulary_list", "eager.def_function.function", "python.keras.Sequential", "python.keras.Input", "benchmarks.feature_column_benchmark.create_string_data", "preprocessing.string_lookup.StringLookup", "feature_column.feature_column_v2.indicator_column", "preprocessing.category_encoding.CategoryEncoding", "benchmarks.feature_column_benchmark.run_fc", "benchmarks.feature_column_benchmark.run_keras"], "feature_column.feature_column_v2.indicator_column": ["<builtin>.isinstance", "feature_column._DenseColumn.__init__", "<builtin>.ValueError"], "benchmarks.category_vocab_list_indicator_dense_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_vocab_list_indicator_dense_benchmark.BenchmarkLayer.benchmark_layer": ["benchmarks.category_vocab_list_indicator_dense_benchmark.embedding_varlen", "feature_column_benchmark.LayerBenchmark.report"], "benchmarks.category_vocab_list_indicator_varlen_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.category_vocab_list_indicator_varlen_benchmark.embedding_varlen": ["benchmarks.feature_column_benchmark.create_string_data", "python.keras.Sequential", "python.keras.Input", "preprocessing.string_lookup.StringLookup", "feature_column.feature_column_v2.indicator_column", "benchmarks.feature_column_benchmark.create_vocabulary", "benchmarks.feature_column_benchmark.run_keras", "feature_column.sequence_feature_column.sequence_categorical_column_with_vocabulary_list", "eager.def_function.function", "preprocessing.category_encoding.CategoryEncoding", "benchmarks.feature_column_benchmark.run_fc"], "benchmarks.category_vocab_list_indicator_varlen_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_vocab_list_indicator_varlen_benchmark.BenchmarkLayer.benchmark_layer": ["benchmarks.category_vocab_list_indicator_varlen_benchmark.embedding_varlen", "feature_column_benchmark.LayerBenchmark.report"], "benchmarks.category_vocab_list_varlen_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.category_vocab_list_varlen_benchmark.embedding_varlen": ["feature_column.sequence_feature_column.sequence_categorical_column_with_vocabulary_list", "benchmarks.feature_column_benchmark.run_fc", "python.keras.Sequential", "benchmarks.feature_column_benchmark.create_string_data", "eager.def_function.function", "benchmarks.feature_column_benchmark.create_vocabulary", "preprocessing.string_lookup.StringLookup", "benchmarks.feature_column_benchmark.run_keras", "python.keras.Input"], "benchmarks.category_vocab_list_varlen_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.category_vocab_list_varlen_benchmark.BenchmarkLayer.benchmark_layer": ["benchmarks.category_vocab_list_varlen_benchmark.embedding_varlen", "feature_column_benchmark.LayerBenchmark.report"], "benchmarks.discretization_adapt_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.discretization_adapt_benchmark.reduce_fn": ["preprocessing.discretization.summarize", "preprocessing.discretization.merge_summaries", "numpy.sum"], "benchmarks.discretization_adapt_benchmark.BenchmarkAdapt.run_dataset_implementation": ["numpy.array", "preprocessing.discretization.Discretization", "numpy.zeros", "dataset_ops.Dataset.range", "<builtin>.range", "preprocessing.discretization.get_bucket_boundaries", "numpy.mean", "time.time", "python.keras.Input"], "benchmarks.discretization_adapt_benchmark.BenchmarkAdapt.run_dataset_implementation.<lambda1>": ["ops.array_ops.expand_dims", "ops.math_ops.cast"], "preprocessing.discretization.get_bucket_boundaries": [], "benchmarks.discretization_adapt_benchmark.BenchmarkAdapt.bm_adapt_implementation": ["benchmark.TensorFlowBenchmark.report_benchmark", "numpy.array", "preprocessing.discretization.Discretization", "dataset_ops.Dataset.range", "<builtin>.range", "numpy.mean", "time.time", "benchmarks.discretization_adapt_benchmark.BenchmarkAdapt.run_dataset_implementation", "python.keras.Input"], "benchmarks.discretization_adapt_benchmark.BenchmarkAdapt.bm_adapt_implementation.<lambda1>": ["ops.array_ops.expand_dims", "ops.math_ops.cast"], "benchmarks.discretization_adapt_benchmark.BenchmarkAdapt.benchmark_vocab_size_by_batch": ["benchmarks.discretization_adapt_benchmark.BenchmarkAdapt.bm_adapt_implementation"], "benchmarks.embedding_dense_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.embedding_dense_benchmark.embedding_varlen": ["python.keras.Sequential", "eager.def_function.function", "python.keras.Input", "benchmarks.feature_column_benchmark.run_keras", "feature_column.feature_column_v2.categorical_column_with_identity", "feature_column.feature_column_v2.embedding_column", "keras.layers.Embedding", "benchmarks.feature_column_benchmark.run_fc", "keras.layers.Lambda", "benchmarks.feature_column_benchmark.create_data"], "benchmarks.embedding_dense_benchmark.embedding_varlen.<lambda1>": ["ops.math_ops.reduce_mean"], "keras.layers.Lambda": [], "feature_column.feature_column_v2.categorical_column_with_identity": ["feature_column.utils.assert_key_is_string", "feature_column._CategoricalColumn.__init__", "<builtin>.ValueError"], "feature_column.feature_column_v2.embedding_column": ["feature_column._DenseColumn.__init__", "feature_column._SequenceDenseColumn.__init__", "math.sqrt", "<builtin>.ValueError", "<builtin>.callable", "ops.init_ops.truncated_normal_initializer"], "benchmarks.embedding_dense_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.embedding_dense_benchmark.BenchmarkLayer.benchmark_layer": ["feature_column_benchmark.LayerBenchmark.report", "benchmarks.embedding_dense_benchmark.embedding_varlen"], "benchmarks.embedding_varlen_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.embedding_varlen_benchmark.embedding_varlen": ["python.keras.Sequential", "eager.def_function.function", "feature_column.feature_column_v2.categorical_column_with_identity", "keras.layers.Embedding", "benchmarks.feature_column_benchmark.create_data", "benchmarks.feature_column_benchmark.run_keras", "feature_column.feature_column_v2.embedding_column", "benchmarks.feature_column_benchmark.run_fc", "keras.layers.Lambda", "python.keras.Input"], "benchmarks.embedding_varlen_benchmark.embedding_varlen.<lambda1>": ["ops.math_ops.reduce_mean"], "benchmarks.embedding_varlen_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.embedding_varlen_benchmark.BenchmarkLayer.benchmark_layer": ["feature_column_benchmark.LayerBenchmark.report", "benchmarks.embedding_varlen_benchmark.embedding_varlen"], "benchmarks.feature_column_benchmark": ["compat.v2_compat.enable_v2_behavior"], "benchmarks.feature_column_benchmark.LayerBenchmark.report": ["test.Benchmark.report_benchmark"], "benchmarks.feature_column_benchmark.StepTimingCallback.__init__": [], "benchmarks.feature_column_benchmark.StepTimingCallback.on_predict_batch_begin": ["time.time"], "benchmarks.feature_column_benchmark.StepTimingCallback.on_predict_end": ["time.time"], "random.choice": [], "benchmarks.hashing_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.hashing_benchmark.word_gen": ["<builtin>.range", "itertools.count", "random.choice"], "benchmarks.hashing_benchmark.BenchmarkLayer.run_dataset_implementation": ["numpy.array", "time.time", "<builtin>.range", "ops.string_ops.string_to_hash_bucket", "framework.tensor_shape.TensorShape", "dataset_ops.Dataset.from_generator", "numpy.mean"], "ops.string_ops.string_to_hash_bucket": ["ops.gen_string_ops.string_to_hash_bucket"], "benchmarks.hashing_benchmark.BenchmarkLayer.bm_layer_implementation": ["numpy.array", "python.keras.Input", "time.time", "benchmark.TensorFlowBenchmark.report_benchmark", "<builtin>.range", "preprocessing.hashing.Hashing", "framework.tensor_shape.TensorShape", "benchmarks.hashing_benchmark.BenchmarkLayer.run_dataset_implementation", "dataset_ops.Dataset.from_generator", "numpy.mean"], "benchmarks.hashing_benchmark.BenchmarkLayer.benchmark_vocab_size_by_batch": ["benchmarks.hashing_benchmark.BenchmarkLayer.bm_layer_implementation"], "benchmarks.image_preproc_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.image_preproc_benchmark.rotate": ["preprocessing.image_preprocessing.transform", "preprocessing.image_preprocessing.get_rotation_matrix", "ops.random_ops.random_uniform", "ops.math_ops.cast", "ops.array_ops.shape"], "benchmarks.image_preproc_benchmark.zoom": ["ops.array_ops.concat", "preprocessing.image_preprocessing.transform", "ops.random_ops.random_uniform", "ops.array_ops.shape", "ops.math_ops.cast", "preprocessing.image_preprocessing.get_zoom_matrix"], "benchmarks.image_preproc_benchmark.image_augmentation": ["ops.random_ops.random_crop", "ops.image_ops_impl.resize_images_v2", "benchmarks.image_preproc_benchmark.zoom", "benchmarks.image_preproc_benchmark.rotate"], "ops.image_ops_impl.resize_images_v2": ["ops.image_ops_impl._resize_images_common"], "ops.random_ops.random_crop": ["framework.ops.convert_to_tensor", "ops.math_ops.reduce_all", "ops.control_flow_ops.with_dependencies", "framework.ops.name_scope", "ops.array_ops.shape", "ops.control_flow_ops.Assert", "ops.array_ops.slice", "ops.random_ops.random_uniform"], "benchmarks.image_preproc_benchmark.BenchmarkLayer.run_dataset_implementation": ["functools.partial", "<builtin>.range", "dataset_ops.Dataset.from_tensor_slices", "numpy.mean", "time.time", "numpy.array", "numpy.random.random"], "benchmarks.image_preproc_benchmark.BenchmarkLayer.bm_layer_implementation": ["numpy.random.random", "preprocessing.image_preprocessing.RandomCrop", "benchmarks.image_preproc_benchmark.BenchmarkLayer.run_dataset_implementation", "preprocessing.image_preprocessing.RandomRotation", "<builtin>.range", "preprocessing.image_preprocessing.RandomFlip", "dataset_ops.Dataset.from_tensor_slices", "numpy.mean", "time.time", "framework.ops.device_v2", "preprocessing.image_preprocessing.RandomZoom", "numpy.array", "preprocessing.image_preprocessing.Resizing", "benchmark.TensorFlowBenchmark.report_benchmark", "python.keras.Sequential", "python.keras.Input"], "framework.ops.device_v2": ["framework.ops.device", "<builtin>.callable", "<builtin>.RuntimeError"], "preprocessing.image_preprocessing.Resizing": [], "preprocessing.image_preprocessing.RandomCrop": [], "preprocessing.image_preprocessing.RandomRotation": [], "preprocessing.image_preprocessing.RandomFlip": [], "preprocessing.image_preprocessing.RandomZoom": [], "benchmarks.image_preproc_benchmark.BenchmarkLayer.benchmark_vocab_size_by_batch": ["benchmarks.image_preproc_benchmark.BenchmarkLayer.bm_layer_implementation"], "benchmarks.index_lookup_adapt_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.index_lookup_adapt_benchmark.word_gen": ["random.choice", "itertools.count", "<builtin>.range"], "benchmarks.index_lookup_adapt_benchmark.get_top_k": ["<builtin>.sorted", "<builtin>.len", "collections.defaultdict"], "benchmarks.index_lookup_adapt_benchmark.get_top_k.<lambda1>": [], "benchmarks.index_lookup_adapt_benchmark.BenchmarkAdapt.run_numpy_implementation": ["<builtin>.range", "python.keras.Input", "framework.tensor_shape.TensorShape", "numpy.array", "preprocessing.index_lookup.IndexLookup", "time.time", "benchmarks.index_lookup_adapt_benchmark.get_top_k", "numpy.mean", "dataset_ops.Dataset.from_generator"], "preprocessing.index_lookup.IndexLookup": [], "benchmarks.index_lookup_adapt_benchmark.BenchmarkAdapt.bm_adapt_implementation": ["<builtin>.range", "python.keras.Input", "framework.tensor_shape.TensorShape", "benchmark.TensorFlowBenchmark.report_benchmark", "numpy.array", "preprocessing.index_lookup.IndexLookup", "time.time", "numpy.mean", "dataset_ops.Dataset.from_generator", "benchmarks.index_lookup_adapt_benchmark.BenchmarkAdapt.run_numpy_implementation"], "benchmarks.index_lookup_adapt_benchmark.BenchmarkAdapt.benchmark_vocab_size_by_batch": ["benchmarks.index_lookup_adapt_benchmark.BenchmarkAdapt.bm_adapt_implementation", "<builtin>.int"], "benchmarks.index_lookup_forward_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.index_lookup_forward_benchmark.tensor_gen": ["framework.constant_op.constant", "random.choice", "<builtin>.range"], "benchmarks.index_lookup_forward_benchmark.get_vocab": ["<builtin>.list", "<builtin>.set"], "benchmarks.index_lookup_forward_benchmark.BenchmarkLookup._write_to_temp_file": ["benchmark.TensorFlowBenchmark.get_temp_dir", "platform.gfile.GFile", "os.path.join"], "benchmark.TensorFlowBenchmark.get_temp_dir": [], "benchmarks.index_lookup_forward_benchmark.BenchmarkLookup.run_numpy_implementation": ["numpy.array", "time.time", "python.keras.Input", "<builtin>.range", "python.keras.Model", "numpy.mean", "preprocessing.index_lookup.IndexLookup"], "benchmarks.index_lookup_forward_benchmark.BenchmarkLookup.bm_adapt_implementation": ["ops.lookup_ops.TextFileInitializer", "benchmarks.index_lookup_forward_benchmark.BenchmarkLookup.run_numpy_implementation", "benchmarks.index_lookup_forward_benchmark.BenchmarkLookup._write_to_temp_file", "numpy.array", "benchmarks.index_lookup_forward_benchmark.get_vocab", "time.time", "python.keras.Input", "<builtin>.range", "python.keras.Model", "numpy.mean", "benchmark.TensorFlowBenchmark.report_benchmark", "preprocessing.index_lookup.IndexLookup", "benchmarks.index_lookup_forward_benchmark.tensor_gen"], "benchmarks.index_lookup_forward_benchmark.BenchmarkLookup.benchmark_vocab_size_by_batch": ["benchmarks.index_lookup_forward_benchmark.BenchmarkLookup.bm_adapt_implementation"], "benchmarks.normalization_adapt_benchmark": ["compat.v2_compat.enable_v2_behavior", "platform.test.main"], "benchmarks.normalization_adapt_benchmark.reduce_fn": ["ops.array_ops.ones_like", "ops.math_ops.equal", "ops.math_ops.cast", "ops.math_ops.reduce_sum", "ops.math_ops.multiply", "ops.control_flow_ops.cond", "ops.math_ops.square"], "benchmarks.normalization_adapt_benchmark.reduce_fn.<lambda1>": [], "benchmarks.normalization_adapt_benchmark.reduce_fn.<lambda2>": [], "benchmarks.normalization_adapt_benchmark.BenchmarkAdapt.run_dataset_implementation": ["dataset_ops.Dataset.range", "<builtin>.range", "numpy.mean", "time.time", "python.keras.Input", "preprocessing.normalization.Normalization", "numpy.array"], "preprocessing.normalization.Normalization": [], "benchmarks.normalization_adapt_benchmark.BenchmarkAdapt.run_dataset_implementation.<lambda1>": ["ops.array_ops.expand_dims", "ops.math_ops.cast"], "benchmarks.normalization_adapt_benchmark.BenchmarkAdapt.bm_adapt_implementation": ["dataset_ops.Dataset.range", "<builtin>.range", "numpy.mean", "time.time", "benchmark.TensorFlowBenchmark.report_benchmark", "python.keras.Input", "preprocessing.normalization.Normalization", "numpy.array", "benchmarks.normalization_adapt_benchmark.BenchmarkAdapt.run_dataset_implementation"], "benchmarks.normalization_adapt_benchmark.BenchmarkAdapt.bm_adapt_implementation.<lambda1>": ["ops.array_ops.expand_dims", "ops.math_ops.cast"], "benchmarks.normalization_adapt_benchmark.BenchmarkAdapt.benchmark_vocab_size_by_batch": ["benchmarks.normalization_adapt_benchmark.BenchmarkAdapt.bm_adapt_implementation"], "benchmarks.weighted_embedding_varlen_benchmark": ["platform.test.main", "compat.v2_compat.enable_v2_behavior"], "benchmarks.weighted_embedding_varlen_benchmark.embedding_varlen": ["eager.def_function.function", "ops.array_ops.expand_dims", "ops.math_ops.reduce_sum", "ops.math_ops.multiply", "python.keras.Model", "feature_column.feature_column_v2.categorical_column_with_identity", "python.keras.Input", "benchmarks.feature_column_benchmark.create_data", "benchmarks.feature_column_benchmark.run_fc", "keras.layers.Embedding", "ops.array_ops.ones_like_v2", "feature_column.feature_column_v2.weighted_categorical_column", "feature_column.feature_column_v2.embedding_column", "benchmarks.feature_column_benchmark.run_keras"], "ops.array_ops.ones_like_v2": ["ops.array_ops.ones_like_impl"], "feature_column.feature_column_v2.weighted_categorical_column": ["feature_column._CategoricalColumn.__init__", "<builtin>.ValueError"], "benchmarks.weighted_embedding_varlen_benchmark.embedding_varlen.fc_fn": ["feature_column.feature_column_v2.FeatureTransformationCache"], "benchmarks.weighted_embedding_varlen_benchmark.BenchmarkLayer.benchmark_layer": ["feature_column_benchmark.LayerBenchmark.report", "benchmarks.weighted_embedding_varlen_benchmark.embedding_varlen"], "internal.flops_registry": ["framework.ops.RegisterStatistics", "<builtin>.set"], "internal.flops_registry._zero_flops": ["framework.ops.OpStats"], "framework.ops.OpStats": [], "internal.flops_registry._list_product": [], "internal.flops_registry._unary_op_flops": ["framework.graph_util.tensor_shape_from_node_def_name", "framework.ops.OpStats"], "framework.graph_util.tensor_shape_from_node_def_name": [], "framework.ops.RegisterStatistics": [], "internal.flops_registry._reciprocal_flops": ["internal.flops_registry._unary_op_flops"], "internal.flops_registry._square_flops": ["internal.flops_registry._unary_op_flops"], "internal.flops_registry._rsqrt_flops": ["internal.flops_registry._unary_op_flops"], "internal.flops_registry._log_flops": ["internal.flops_registry._unary_op_flops"], "internal.flops_registry._neg_flops": ["internal.flops_registry._unary_op_flops"], "internal.flops_registry._assign_sub_flops": ["internal.flops_registry._unary_op_flops"], "internal.flops_registry._assign_add_flops": ["internal.flops_registry._unary_op_flops"], "internal.flops_registry._l2_loss_flops": ["framework.graph_util.tensor_shape_from_node_def_name", "framework.ops.OpStats"], "internal.flops_registry._softmax_flops": ["internal.flops_registry._unary_op_flops"], "internal.flops_registry._binary_per_element_op_flops": ["framework.graph_util.tensor_shape_from_node_def_name", "framework.ops.OpStats"], "internal.flops_registry._add_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._sub_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._mul_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._real_div_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._maximum_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._minimum_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._pow_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._rsqrt_grad_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._greater_equal_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._greater_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._less_equal_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._less_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._equal_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._not_equal_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._squared_difference_flops": ["internal.flops_registry._binary_per_element_op_flops"], "internal.flops_registry._reduction_op_flops": ["framework.graph_util.tensor_shape_from_node_def_name", "framework.ops.OpStats"], "internal.flops_registry._mean_flops": ["internal.flops_registry._reduction_op_flops"], "internal.flops_registry._sum_flops": ["internal.flops_registry._reduction_op_flops"], "internal.flops_registry._arg_max_flops": ["internal.flops_registry._reduction_op_flops"], "internal.flops_registry._arg_min_flops": ["internal.flops_registry._reduction_op_flops"], "internal.flops_registry._bias_add_grad_flops": ["internal.flops_registry._reduction_op_flops"], "internal.flops_registry._verify_conv_data_format": ["<builtin>.ValueError"], "internal.flops_registry._pool_flops": ["framework.graph_util.tensor_shape_from_node_def_name", "internal.flops_registry._verify_conv_data_format", "internal.flops_registry._list_product", "framework.ops.OpStats", "<builtin>.list"], "internal.flops_registry._avg_pool_flops": ["internal.flops_registry._pool_flops"], "internal.flops_registry._max_pool_flops": ["internal.flops_registry._pool_flops"], "internal.flops_registry._avg_pool_grad_flops": ["framework.graph_util.tensor_shape_from_node_def_name", "internal.flops_registry._verify_conv_data_format", "internal.flops_registry._list_product", "framework.ops.OpStats", "<builtin>.list"], "internal.flops_registry._max_pool_grad_flops": ["framework.graph_util.tensor_shape_from_node_def_name", "internal.flops_registry._verify_conv_data_format", "internal.flops_registry._list_product", "framework.ops.OpStats", "<builtin>.list"], "internal.flops_registry._conv_2d_backprop_input_flops": ["internal.flops_registry._verify_conv_data_format", "<builtin>.list", "framework.graph_util.tensor_shape_from_node_def_name", "framework.ops.OpStats"], "internal.flops_registry._conv_2d_backprop_filter_flops": ["internal.flops_registry._verify_conv_data_format", "<builtin>.list", "framework.graph_util.tensor_shape_from_node_def_name", "framework.ops.OpStats"], "internal.flops_registry._add_n_flops": ["internal.flops_registry._zero_flops", "framework.graph_util.tensor_shape_from_node_def_name", "framework.ops.OpStats", "<builtin>.len"], "common_transformers.anf": ["<builtin>.object"], "common_transformers.anf.DummyGensym.__init__": [], "common_transformers.anf.DummyGensym.new_name": ["<builtin>.str"], "common_transformers.anf.<lambda1>": [], "common_transformers.anf.<lambda2>": [], "common_transformers.anf.ASTEdgePattern.matches": ["<builtin>.isinstance"], "common_transformers.anf.AnfTransformer.__init__": ["common_transformers.anf.DummyGensym.__init__", "<builtin>.super"], "common_transformers.anf.AnfTransformer._consume_pending_statements": [], "common_transformers.anf.AnfTransformer._add_pending_statement": [], "common_transformers.anf.AnfTransformer._match": [], "common_transformers.anf.AnfTransformer._should_transform": ["common_transformers.anf.AnfTransformer._match"], "common_transformers.anf.AnfTransformer._do_transform_node": ["pyct.templates.replace", "common_transformers.anf.AnfTransformer._add_pending_statement", "common_transformers.anf.DummyGensym.new_name"], "common_transformers.anf.AnfTransformer._ensure_node_in_anf": ["common_transformers.anf.AnfTransformer._ensure_fields_in_anf", "common_transformers.anf.AnfTransformer._should_transform", "<builtin>.isinstance", "common_transformers.anf.AnfTransformer._ensure_node_in_anf", "common_transformers.anf.AnfTransformer._do_transform_node", "common_transformers.anf._is_trivial"], "common_transformers.anf._is_trivial": ["<builtin>.isinstance", "common_transformers.anf._is_py2_name_constant", "pyct.gast_util.is_ellipsis"], "common_transformers.anf.AnfTransformer._ensure_fields_in_anf": ["<builtin>.setattr", "common_transformers.anf.AnfTransformer._ensure_node_in_anf", "<builtin>.getattr"], "common_transformers.anf.AnfTransformer._visit_strict_statement": ["transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_fields_in_anf", "common_transformers.anf.AnfTransformer._consume_pending_statements"], "transformer.Base.generic_visit": [], "common_transformers.anf.AnfTransformer._visit_trivial_only_statement": ["transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_fields_in_anf", "<builtin>.ValueError"], "common_transformers.anf.AnfTransformer._visit_strict_expression": ["transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_fields_in_anf"], "common_transformers.anf.AnfTransformer._visit_trivial_only_expression": ["<builtin>.len", "common_transformers.anf.AnfTransformer._ensure_fields_in_anf", "<builtin>.ValueError", "transformer.Base.generic_visit"], "common_transformers.anf.AnfTransformer.visit_Return": ["common_transformers.anf.AnfTransformer._visit_strict_statement"], "common_transformers.anf.AnfTransformer.visit_Delete": ["common_transformers.anf.AnfTransformer._visit_strict_statement"], "common_transformers.anf.AnfTransformer.visit_Assign": ["common_transformers.anf.AnfTransformer._visit_strict_statement"], "common_transformers.anf.AnfTransformer.visit_AugAssign": ["common_transformers.anf.AnfTransformer._visit_strict_statement"], "common_transformers.anf.AnfTransformer.visit_Print": ["common_transformers.anf.AnfTransformer._visit_strict_statement"], "common_transformers.anf.AnfTransformer.visit_For": ["transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_node_in_anf", "transformer.Base.visit", "common_transformers.anf.AnfTransformer._consume_pending_statements"], "transformer.Base.visit": [], "common_transformers.anf.AnfTransformer.visit_AsyncFor": ["common_transformers.anf.AnfTransformer._visit_trivial_only_statement"], "common_transformers.anf.AnfTransformer.visit_While": ["<builtin>.ValueError", "transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_node_in_anf", "transformer.Base.visit"], "common_transformers.anf.AnfTransformer.visit_If": ["transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_node_in_anf", "transformer.Base.visit", "common_transformers.anf.AnfTransformer._consume_pending_statements"], "common_transformers.anf.AnfTransformer.visit_With": ["transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_node_in_anf", "transformer.Base.visit", "common_transformers.anf.AnfTransformer._consume_pending_statements"], "common_transformers.anf.AnfTransformer.visit_AsyncWith": ["common_transformers.anf.AnfTransformer._visit_trivial_only_statement"], "common_transformers.anf.AnfTransformer.visit_Raise": ["common_transformers.anf.AnfTransformer._visit_strict_statement"], "common_transformers.anf.AnfTransformer.visit_Assert": ["common_transformers.anf.AnfTransformer._visit_trivial_only_statement"], "common_transformers.anf.AnfTransformer.visit_Exec": ["common_transformers.anf.AnfTransformer._visit_strict_statement"], "common_transformers.anf.AnfTransformer.visit_Expr": ["common_transformers.anf.AnfTransformer._visit_strict_statement"], "common_transformers.anf.AnfTransformer.visit_BoolOp": ["common_transformers.anf.AnfTransformer._visit_trivial_only_expression"], "common_transformers.anf.AnfTransformer.visit_BinOp": ["common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_UnaryOp": ["common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_Lambda": ["common_transformers.anf.AnfTransformer._visit_trivial_only_expression"], "common_transformers.anf.AnfTransformer.visit_IfExp": ["common_transformers.anf.AnfTransformer._visit_trivial_only_expression"], "common_transformers.anf.AnfTransformer.visit_Dict": ["common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_Set": ["common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_ListComp": ["<builtin>.ValueError"], "common_transformers.anf.AnfTransformer.visit_SetComp": ["<builtin>.ValueError"], "common_transformers.anf.AnfTransformer.visit_DictComp": ["<builtin>.ValueError"], "common_transformers.anf.AnfTransformer.visit_GeneratorExp": ["<builtin>.ValueError"], "common_transformers.anf.AnfTransformer.visit_Await": ["common_transformers.anf.AnfTransformer._visit_trivial_only_expression"], "common_transformers.anf.AnfTransformer.visit_Yield": ["common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_YieldFrom": ["common_transformers.anf.AnfTransformer._visit_trivial_only_expression"], "common_transformers.anf.AnfTransformer.visit_Compare": ["<builtin>.len", "<builtin>.ValueError", "common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_Call": ["common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_Repr": ["common_transformers.anf.AnfTransformer._visit_trivial_only_expression"], "common_transformers.anf.AnfTransformer.visit_FormattedValue": ["common_transformers.anf.AnfTransformer._visit_trivial_only_expression"], "common_transformers.anf.AnfTransformer.visit_JoinedStr": ["common_transformers.anf.AnfTransformer._visit_trivial_only_expression"], "common_transformers.anf.AnfTransformer.visit_Attribute": ["common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_Subscript": ["common_transformers.anf.AnfTransformer._visit_strict_expression"], "common_transformers.anf.AnfTransformer.visit_List": ["<builtin>.isinstance", "transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_fields_in_anf"], "common_transformers.anf.AnfTransformer.visit_Tuple": ["<builtin>.isinstance", "transformer.Base.generic_visit", "common_transformers.anf.AnfTransformer._ensure_fields_in_anf"], "common_transformers.anf._is_py2_name_constant": ["<builtin>.isinstance"], "pyct.gast_util.is_ellipsis": [], "common_transformers.anf.transform": ["common_transformers.anf.AnfTransformer.__init__", "transformer.Base.visit"], "static_analysis.activity": [], "static_analysis.activity.Scope.__init__": ["<builtin>.set", "weakref.WeakValueDictionary"], "static_analysis.activity.Scope.enclosing_scope": [], "static_analysis.activity.Scope.referenced": [], "static_analysis.activity.Scope.free_vars": [], "static_analysis.activity.Scope.copy_from": ["static_analysis.activity.Scope.copy_from", "copy.copy"], "static_analysis.activity.Scope.copy_of": ["static_analysis.activity.Scope.__init__", "static_analysis.activity.Scope.copy_of"], "static_analysis.activity.Scope.merge_from": ["static_analysis.activity.Scope.merge_from"], "static_analysis.activity.Scope.finalize": [], "static_analysis.activity.Scope.__repr__": ["<builtin>.tuple"], "static_analysis.activity.Scope.mark_param": [], "static_analysis.activity._Comprehension.__init__": ["<builtin>.set"], "static_analysis.activity._FunctionOrClass.__init__": [], "static_analysis.activity.ActivityAnalyzer.__init__": ["static_analysis.activity.Scope.__init__", "<builtin>.super"], "static_analysis.activity.ActivityAnalyzer._in_constructor": ["<builtin>.isinstance"], "static_analysis.activity.ActivityAnalyzer._node_sets_self_attribute": ["pyct.anno.hasanno", "pyct.anno.getanno"], "static_analysis.activity.ActivityAnalyzer._track_symbol": ["pyct.anno.hasanno", "<builtin>.set", "<builtin>.ValueError", "static_analysis.activity.Scope.mark_param", "<builtin>.type", "pyct.anno.getanno", "<builtin>.isinstance"], "static_analysis.activity.ActivityAnalyzer._enter_scope": ["static_analysis.activity.Scope.__init__"], "static_analysis.activity.ActivityAnalyzer._exit_scope": ["static_analysis.activity.Scope.finalize"], "static_analysis.activity.ActivityAnalyzer._exit_and_record_scope": ["pyct.anno.setanno", "static_analysis.activity.ActivityAnalyzer._exit_scope"], "static_analysis.activity.ActivityAnalyzer._process_statement": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "transformer.Base.generic_visit", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer._process_annotation": ["transformer.Base.visit"], "static_analysis.activity.ActivityAnalyzer.visit_Import": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_ImportFrom": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_Global": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "pyct.qual_names.QN", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_Nonlocal": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "pyct.qual_names.QN", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_Expr": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_Raise": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_Return": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_Assign": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_AnnAssign": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "transformer.Base.visit", "static_analysis.activity.ActivityAnalyzer._process_annotation", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_AugAssign": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "transformer.Base.visit", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_Delete": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_Name": ["static_analysis.activity.ActivityAnalyzer._process_annotation", "static_analysis.activity.ActivityAnalyzer._track_symbol"], "static_analysis.activity.ActivityAnalyzer.visit_alias": ["transformer.Base.generic_visit", "pyct.qual_names.QN"], "static_analysis.activity.ActivityAnalyzer.visit_Attribute": ["static_analysis.activity.ActivityAnalyzer._node_sets_self_attribute", "transformer.Base.generic_visit", "static_analysis.activity.ActivityAnalyzer._track_symbol"], "static_analysis.activity.ActivityAnalyzer.visit_Subscript": ["transformer.Base.generic_visit", "static_analysis.activity.ActivityAnalyzer._track_symbol"], "static_analysis.activity.ActivityAnalyzer.visit_Print": ["transformer.Base.visit_block", "pyct.anno.setanno", "static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "transformer.Base.visit_block": [], "static_analysis.activity.ActivityAnalyzer.visit_Assert": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_Call": ["transformer.Base.visit_block", "transformer.Base.visit", "static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer._process_block_node": ["transformer.Base.visit_block", "static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer._process_parallel_blocks": ["static_analysis.activity.ActivityAnalyzer._process_block_node", "static_analysis.activity.Scope.copy_from", "static_analysis.activity.Scope.copy_of", "static_analysis.activity.Scope.merge_from"], "static_analysis.activity.ActivityAnalyzer._process_comprehension": ["transformer.Base.visit_block", "transformer.Base.visit"], "static_analysis.activity.ActivityAnalyzer.visit_comprehension": ["transformer.Base.generic_visit", "transformer.Base.visit"], "static_analysis.activity.ActivityAnalyzer.visit_DictComp": ["static_analysis.activity.ActivityAnalyzer._process_comprehension"], "static_analysis.activity.ActivityAnalyzer.visit_ListComp": ["static_analysis.activity.ActivityAnalyzer._process_comprehension"], "static_analysis.activity.ActivityAnalyzer.visit_SetComp": ["static_analysis.activity.ActivityAnalyzer._process_comprehension"], "static_analysis.activity.ActivityAnalyzer.visit_GeneratorExp": ["static_analysis.activity.ActivityAnalyzer._process_comprehension"], "static_analysis.activity.ActivityAnalyzer.visit_ClassDef": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "transformer.Base.generic_visit", "transformer.Base.visit_block", "static_analysis.activity.ActivityAnalyzer._exit_scope", "pyct.qual_names.QN", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer._visit_node_list": ["transformer.Base.visit"], "static_analysis.activity.ActivityAnalyzer._visit_arg_annotations": ["static_analysis.activity.ActivityAnalyzer._visit_node_list", "static_analysis.activity.ActivityAnalyzer._visit_arg_declarations"], "static_analysis.activity.ActivityAnalyzer._visit_arg_declarations": ["static_analysis.activity.ActivityAnalyzer._visit_node_list", "transformer.Base.visit"], "static_analysis.activity.ActivityAnalyzer.visit_FunctionDef": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "static_analysis.activity.ActivityAnalyzer._process_annotation", "static_analysis.activity.ActivityAnalyzer._visit_arg_declarations", "transformer.Base.visit_block", "static_analysis.activity.ActivityAnalyzer._visit_arg_annotations", "pyct.qual_names.QN", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_Lambda": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "pyct.anno.hasanno", "pyct.anno.setanno", "static_analysis.activity.ActivityAnalyzer._visit_arg_declarations", "transformer.Base.visit", "static_analysis.activity.ActivityAnalyzer._visit_arg_annotations", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_With": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "transformer.Base.generic_visit", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_withitem": ["static_analysis.activity.ActivityAnalyzer._process_statement"], "static_analysis.activity.ActivityAnalyzer.visit_If": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "pyct.anno.setanno", "static_analysis.activity.ActivityAnalyzer._process_parallel_blocks", "transformer.Base.visit", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_For": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "pyct.anno.hasanno", "static_analysis.activity.ActivityAnalyzer._process_statement", "static_analysis.activity.ActivityAnalyzer._process_parallel_blocks", "transformer.Base.visit", "pyct.anno.getanno", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_While": ["static_analysis.activity.ActivityAnalyzer._exit_and_record_scope", "pyct.anno.setanno", "static_analysis.activity.ActivityAnalyzer._process_parallel_blocks", "transformer.Base.visit", "static_analysis.activity.ActivityAnalyzer._enter_scope"], "static_analysis.activity.ActivityAnalyzer.visit_ExceptHandler": ["transformer.Base.generic_visit", "pyct.anno.getanno", "static_analysis.activity.ActivityAnalyzer._enter_scope", "static_analysis.activity.ActivityAnalyzer._exit_scope"], "static_analysis.annos": [], "static_analysis.annos.NoValue.__repr__": [], "static_analysis.liveness": [], "static_analysis.liveness.Analyzer.__init__": ["<builtin>.super"], "static_analysis.liveness.Analyzer.init_state": ["<builtin>.set"], "static_analysis.liveness.Analyzer.visit_node": ["cfg.GraphVisitor.can_ignore", "pyct.anno.hasanno", "<builtin>.isinstance", "pyct.anno.getanno", "<builtin>.set"], "cfg.GraphVisitor.can_ignore": [], "static_analysis.liveness.TreeAnnotator.__init__": ["<builtin>.super"], "static_analysis.liveness.TreeAnnotator.visit": ["<builtin>.super", "pyct.anno.setanno", "<builtin>.isinstance", "<builtin>.frozenset"], "static_analysis.liveness.TreeAnnotator._analyze_function": ["static_analysis.liveness.Analyzer.__init__", "cfg.GraphVisitor.visit_reverse", "transformer.Base.generic_visit"], "cfg.GraphVisitor.visit_reverse": [], "static_analysis.liveness.TreeAnnotator.visit_Lambda": ["static_analysis.liveness.TreeAnnotator._analyze_function"], "static_analysis.liveness.TreeAnnotator.visit_FunctionDef": ["static_analysis.liveness.TreeAnnotator._analyze_function"], "static_analysis.liveness.TreeAnnotator._block_statement_live_out": ["<builtin>.frozenset", "pyct.anno.setanno", "<builtin>.set"], "static_analysis.liveness.TreeAnnotator._block_statement_live_in": ["<builtin>.frozenset", "pyct.anno.setanno", "pyct.anno.hasanno", "pyct.anno.getanno"], "static_analysis.liveness.TreeAnnotator.visit_If": ["static_analysis.liveness.TreeAnnotator._block_statement_live_out", "static_analysis.liveness.TreeAnnotator._block_statement_live_in", "transformer.Base.generic_visit"], "static_analysis.liveness.TreeAnnotator.visit_For": ["static_analysis.liveness.TreeAnnotator._block_statement_live_out", "static_analysis.liveness.TreeAnnotator._block_statement_live_in", "transformer.Base.generic_visit"], "static_analysis.liveness.TreeAnnotator.visit_While": ["static_analysis.liveness.TreeAnnotator._block_statement_live_out", "static_analysis.liveness.TreeAnnotator._block_statement_live_in", "transformer.Base.generic_visit"], "static_analysis.liveness.TreeAnnotator.visit_Try": ["static_analysis.liveness.TreeAnnotator._block_statement_live_out", "static_analysis.liveness.TreeAnnotator._block_statement_live_in", "transformer.Base.generic_visit"], "static_analysis.liveness.TreeAnnotator.visit_ExceptHandler": ["static_analysis.liveness.TreeAnnotator._block_statement_live_out", "static_analysis.liveness.TreeAnnotator._block_statement_live_in", "transformer.Base.generic_visit"], "static_analysis.liveness.TreeAnnotator.visit_With": ["static_analysis.liveness.TreeAnnotator._block_statement_live_in", "transformer.Base.generic_visit"], "static_analysis.liveness.TreeAnnotator.visit_Expr": ["<builtin>.frozenset", "pyct.anno.setanno", "transformer.Base.generic_visit"], "static_analysis.reaching_definitions": [], "static_analysis.reaching_definitions.Definition.__init__": [], "static_analysis.reaching_definitions.Definition.__repr__": ["<builtin>.id"], "static_analysis.reaching_definitions._NodeState.__init__": ["<builtin>.isinstance", "<builtin>.set"], "static_analysis.reaching_definitions._NodeState.__eq__": ["<builtin>.frozenset", "<builtin>.all"], "static_analysis.reaching_definitions._NodeState.__ne__": ["static_analysis.reaching_definitions._NodeState.__eq__"], "static_analysis.reaching_definitions._NodeState.__or__": ["static_analysis.reaching_definitions._NodeState.__init__", "<builtin>.isinstance", "<builtin>.set"], "static_analysis.reaching_definitions._NodeState.__sub__": ["static_analysis.reaching_definitions._NodeState.__init__", "<builtin>.isinstance"], "static_analysis.reaching_definitions._NodeState.__repr__": ["<builtin>.id", "<builtin>.repr"], "static_analysis.reaching_definitions.Analyzer.__init__": ["<builtin>.super"], "static_analysis.reaching_definitions.Analyzer.init_state": ["static_analysis.reaching_definitions._NodeState.__init__"], "static_analysis.reaching_definitions.Analyzer.visit_node": ["static_analysis.reaching_definitions.Definition.__init__", "pyct.anno.hasanno", "pyct.anno.getanno", "weakref.ref", "static_analysis.reaching_definitions._NodeState.__init__", "cfg.GraphVisitor.can_ignore"], "static_analysis.reaching_definitions.TreeAnnotator.__init__": ["<builtin>.super"], "static_analysis.reaching_definitions.TreeAnnotator.visit_FunctionDef": ["static_analysis.reaching_definitions.Analyzer.__init__", "cfg.GraphVisitor.visit_forward", "transformer.Base.visit_block", "static_analysis.reaching_definitions.TreeAnnotator.visit"], "cfg.GraphVisitor.visit_forward": [], "static_analysis.reaching_definitions.TreeAnnotator.visit": ["<builtin>.super"], "static_analysis.reaching_definitions.TreeAnnotator.visit_Name": ["pyct.anno.setanno", "pyct.anno.getanno", "<builtin>.isinstance", "<builtin>.tuple"], "static_analysis.reaching_definitions.TreeAnnotator._aggregate_predecessors_defined_in": ["pyct.anno.setanno", "<builtin>.frozenset", "<builtin>.set"], "static_analysis.reaching_definitions.TreeAnnotator.visit_If": ["static_analysis.reaching_definitions.TreeAnnotator._aggregate_predecessors_defined_in", "transformer.Base.generic_visit"], "static_analysis.reaching_definitions.TreeAnnotator.visit_For": ["static_analysis.reaching_definitions.TreeAnnotator._aggregate_predecessors_defined_in", "transformer.Base.visit_block", "static_analysis.reaching_definitions.TreeAnnotator.visit"], "static_analysis.reaching_definitions.TreeAnnotator.visit_While": ["static_analysis.reaching_definitions.TreeAnnotator._aggregate_predecessors_defined_in", "transformer.Base.generic_visit"], "static_analysis.reaching_definitions.TreeAnnotator.visit_Try": ["static_analysis.reaching_definitions.TreeAnnotator._aggregate_predecessors_defined_in", "transformer.Base.generic_visit"], "static_analysis.reaching_definitions.TreeAnnotator.visit_ExceptHandler": ["static_analysis.reaching_definitions.TreeAnnotator._aggregate_predecessors_defined_in", "transformer.Base.visit_block"], "static_analysis.reaching_fndefs": [], "static_analysis.reaching_fndefs.Definition.__init__": [], "static_analysis.reaching_fndefs._NodeState.__init__": ["<builtin>.set"], "static_analysis.reaching_fndefs._NodeState.__eq__": [], "static_analysis.reaching_fndefs._NodeState.__ne__": [], "static_analysis.reaching_fndefs._NodeState.__or__": ["static_analysis.reaching_fndefs._NodeState.__init__", "<builtin>.isinstance"], "static_analysis.reaching_fndefs._NodeState.__add__": ["static_analysis.reaching_fndefs._NodeState.__init__"], "static_analysis.reaching_fndefs._NodeState.__repr__": ["<builtin>.repr", "<builtin>.id"], "static_analysis.reaching_fndefs.Analyzer.__init__": ["<builtin>.super"], "static_analysis.reaching_fndefs.Analyzer.init_state": ["static_analysis.reaching_fndefs._NodeState.__init__"], "static_analysis.reaching_fndefs.Analyzer.visit_node": ["static_analysis.reaching_fndefs._NodeState.__init__", "<builtin>.isinstance"], "static_analysis.reaching_fndefs.TreeAnnotator.__init__": ["<builtin>.super"], "static_analysis.reaching_fndefs.TreeAnnotator._proces_function": ["cfg.GraphVisitor.visit_forward", "static_analysis.reaching_fndefs.Analyzer.__init__", "transformer.Base.generic_visit"], "static_analysis.reaching_fndefs.TreeAnnotator.visit_FunctionDef": ["static_analysis.reaching_fndefs.TreeAnnotator._proces_function"], "static_analysis.reaching_fndefs.TreeAnnotator.visit_Lambda": ["static_analysis.reaching_fndefs.TreeAnnotator._proces_function"], "static_analysis.reaching_fndefs.TreeAnnotator.visit": ["<builtin>.super", "pyct.anno.setanno", "pyct.anno.getanno"], "static_analysis.type_inference": ["<builtin>.object"], "static_analysis.type_inference.Resolver.res_name": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_value": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_arg": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_call": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_slice": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_compare": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_unop": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_binop": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.Resolver.res_list_literal": ["<builtin>.NotImplementedError"], "static_analysis.type_inference._TypeMap.__init__": ["<builtin>.set", "<builtin>.isinstance"], "static_analysis.type_inference._TypeMap.__eq__": ["<builtin>.frozenset", "<builtin>.all"], "static_analysis.type_inference._TypeMap.__ne__": ["static_analysis.type_inference._TypeMap.__eq__"], "static_analysis.type_inference._TypeMap.__or__": ["static_analysis.type_inference._TypeMap.__init__", "<builtin>.set", "<builtin>.isinstance"], "static_analysis.type_inference._TypeMap.__repr__": [], "static_analysis.type_inference.StmtInferrer.__init__": [], "static_analysis.type_inference.StmtInferrer.visit": ["pyct.anno.setanno", "static_analysis.type_inference.StmtInferrer._check_set", "<builtin>.tuple", "<builtin>.super"], "static_analysis.type_inference.StmtInferrer._check_set": ["<builtin>.ValueError", "<builtin>.isinstance"], "static_analysis.type_inference.StmtInferrer.visit_Constant": ["static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.StmtInferrer._apply_unpacking": ["static_analysis.type_inference.StmtInferrer.visit", "<builtin>.enumerate", "<builtin>.isinstance"], "static_analysis.type_inference.StmtInferrer.visit_Tuple": ["<builtin>.isinstance", "static_analysis.type_inference.StmtInferrer._apply_unpacking", "itertools.product", "<builtin>.set", "static_analysis.type_inference.StmtInferrer.visit"], "static_analysis.type_inference.StmtInferrer.visit_List": ["static_analysis.type_inference.StmtInferrer.visit", "static_analysis.type_inference.StmtInferrer._apply_unpacking", "<builtin>.tuple", "<builtin>.isinstance"], "static_analysis.type_inference.StmtInferrer.visit_Set": ["<builtin>.NotImplementedError"], "static_analysis.type_inference.StmtInferrer.visit_Name": ["pyct.anno.setanno", "static_analysis.type_inference.StmtInferrer._check_set", "pyct.anno.getanno", "<builtin>.isinstance"], "static_analysis.type_inference.StmtInferrer.visit_Attribute": ["static_analysis.type_inference.StmtInferrer._check_set", "Static.VALUE.of", "Basic.QN.of", "<builtin>.getattr", "pyct.anno.setanno", "<builtin>.any", "static_analysis.type_inference.StmtInferrer.visit"], "Static.VALUE.of": [], "Basic.QN.of": [], "static_analysis.type_inference.StmtInferrer.visit_FunctionDef": ["static_analysis.type_inference.StmtInferrer._check_set", "Basic.QN.of", "pyct.qual_names.QN", "<builtin>.set", "<builtin>.NotImplementedError"], "static_analysis.type_inference.StmtInferrer._resolve_typed_callable": ["<builtin>.type", "<builtin>.set", "<builtin>.NotImplementedError", "<builtin>.isinstance"], "static_analysis.type_inference.StmtInferrer.visit_Call": ["static_analysis.type_inference.StmtInferrer._check_set", "<builtin>.ValueError", "<builtin>.isinstance", "Basic.QN.of", "static_analysis.type_inference.StmtInferrer._resolve_typed_callable", "static_analysis.type_inference.StmtInferrer.visit", "Static.TYPES.of"], "Static.TYPES.of": [], "static_analysis.type_inference.StmtInferrer.visit_Expr": ["static_analysis.type_inference.StmtInferrer.visit"], "static_analysis.type_inference.StmtInferrer.visit_Assign": ["static_analysis.type_inference.StmtInferrer.visit"], "static_analysis.type_inference.StmtInferrer.visit_Subscript": ["static_analysis.type_inference.StmtInferrer.visit", "static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.StmtInferrer.visit_Compare": ["static_analysis.type_inference.StmtInferrer.visit", "<builtin>.any", "static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.StmtInferrer.visit_BinOp": ["static_analysis.type_inference.StmtInferrer.visit", "static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.StmtInferrer.visit_UnaryOp": ["static_analysis.type_inference.StmtInferrer.visit", "static_analysis.type_inference.StmtInferrer._check_set"], "static_analysis.type_inference.Analyzer.__init__": ["static_analysis.type_inference._TypeMap.__init__", "<builtin>.super"], "static_analysis.type_inference.Analyzer.init_state": ["static_analysis.type_inference._TypeMap.__init__"], "static_analysis.type_inference.Analyzer._update_closure_types": ["Static.CLOSURE_TYPES.add_to", "<builtin>.set", "Static.CLOSURE_TYPES.of"], "Static.CLOSURE_TYPES.of": [], "Static.CLOSURE_TYPES.add_to": [], "static_analysis.type_inference.Analyzer.visit_node": ["<builtin>.str", "static_analysis.type_inference._TypeMap.__init__", "static_analysis.type_inference.StmtInferrer.__init__", "static_analysis.type_inference.Analyzer._update_closure_types", "Static.DEFINED_FNS_IN.of", "Static.SCOPE.of", "static_analysis.type_inference.StmtInferrer.visit"], "Static.DEFINED_FNS_IN.of": [], "Static.SCOPE.of": [], "static_analysis.type_inference.FunctionVisitor.__init__": ["<builtin>.super"], "static_analysis.type_inference.FunctionVisitor.visit_FunctionDef": ["transformer.Base.visit_block", "pyct.anno.getanno", "cfg.GraphVisitor.visit_forward", "static_analysis.type_inference.Analyzer.__init__"], "static_analysis.type_inference.resolve": ["transformer.Base.visit", "static_analysis.type_inference.FunctionVisitor.__init__"], "authoring.authoring": [], "authoring.authoring._Compatible.__init__": ["functools.update_wrapper"], "authoring.authoring._Compatible.__get__": [], "authoring.authoring._Compatible._get_func": [], "authoring.authoring._Compatible.__call__": ["authoring.authoring._Compatible._get_func", "authoring.authoring._Compatible._decode_error", "lite.TFLiteConverterV2.from_concrete_functions"], "lite.TFLiteConverterV2.from_concrete_functions": [], "authoring.authoring._Compatible._decode_error": ["authoring.authoring._Compatible._decode_converter_error", "<builtin>.repr", "authoring.authoring._Compatible._decode_error_legacy", "<builtin>.hasattr"], "authoring.authoring._Compatible.get_concrete_function": ["authoring.authoring._Compatible._get_func"], "authoring.authoring._Compatible._dump_error_details": ["<builtin>.len", "authoring.authoring._Compatible._log", "<builtin>.range", "<builtin>.str"], "authoring.authoring._Compatible._log": ["<builtin>.print"], "authoring.authoring._Compatible._decode_error_legacy": ["<builtin>.len", "authoring.authoring._Compatible._log", "<builtin>.str"], "authoring.authoring._Compatible._decode_converter_error": ["authoring.authoring._Compatible._log", "authoring.authoring._Compatible._dump_error_details", "<builtin>.sorted"], "authoring.authoring._Compatible.get_compatibility_log": ["<builtin>.RuntimeError"], "authoring.authoring.compatible": ["authoring.authoring._Compatible.__init__"], "authoring.authoring.compatible.wrapper": ["authoring.authoring._Compatible.__init__"], "client.client_lib": [], "client.device_lib": [], "client.device_lib.list_local_devices": ["client.device_lib.list_local_devices._convert", "client._pywrap_device_lib.list_devices"], "client.device_lib.list_local_devices._convert": ["framework.device_attributes_pb2.DeviceAttributes"], "framework.device_attributes_pb2.DeviceAttributes": [], "client._pywrap_device_lib.list_devices": [], "client.notebook": ["<builtin>.len", "absl.app.run", "argparse.ArgumentParser"], "client.notebook.main": ["IPython.lib.passwd", "kernelapp.IPKernelApp.instance", "notebookapp.NotebookApp.instance", "socket.gethostname", "<builtin>.print"], "notebookapp.NotebookApp.instance": [], "IPython.lib.passwd": [], "kernelapp.IPKernelApp.instance": [], "client.pywrap_tf_session": ["<builtin>.str"], "client.pywrap_tf_session.TF_NewSessionOptions": ["client._pywrap_tf_session._TF_SetConfig", "client._pywrap_tf_session._TF_NewSessionOptions", "client._pywrap_tf_session._TF_SetTarget"], "client._pywrap_tf_session._TF_NewSessionOptions": [], "client._pywrap_tf_session._TF_SetTarget": [], "client._pywrap_tf_session._TF_SetConfig": [], "client.pywrap_tf_session.TF_Reset": ["client.pywrap_tf_session.TF_NewSessionOptions"], "client.session_benchmark": ["platform.test.main"], "client.session_benchmark.SessionBenchmark._benchmarkFeed": ["test.Benchmark.report_benchmark", "<builtin>.print", "time.time", "client.session.Session", "numpy.random.rand", "six.moves.xrange", "ops.array_ops.identity", "framework.ops.Graph", "ops.array_ops.placeholder", "numpy.median"], "client.session_benchmark.SessionBenchmark._benchmarkFetch": ["ops.variables.Variable", "<builtin>.print", "time.time", "client.session.Session", "test.Benchmark.report_benchmark", "six.moves.xrange", "framework.ops.Graph", "numpy.median", "ops.random_ops.random_normal"], "client.session_benchmark.SessionBenchmark._benchmarkFetchPrebuilt": ["ops.variables.Variable", "<builtin>.print", "time.time", "client.session.Session", "test.Benchmark.report_benchmark", "six.moves.xrange", "framework.ops.Graph", "numpy.median", "ops.random_ops.random_normal"], "client.session_benchmark.SessionBenchmark._benchmarkRunOp": ["ops.variables.Variable", "<builtin>.print", "time.time", "client.session.Session", "test.Benchmark.report_benchmark", "six.moves.xrange", "framework.ops.Graph", "numpy.median", "ops.random_ops.random_normal"], "client.session_benchmark.SessionBenchmark._benchmarkRunOpPrebuilt": ["ops.variables.Variable", "<builtin>.print", "time.time", "client.session.Session", "test.Benchmark.report_benchmark", "six.moves.xrange", "framework.ops.Graph", "numpy.median", "ops.random_ops.random_normal"], "client.session_benchmark.SessionBenchmark.benchmarkGrpcSession": ["client.session_benchmark.SessionBenchmark._benchmarkRunOpPrebuilt", "server_lib.Server.create_local_server", "session.Session.reset", "client.session_benchmark.SessionBenchmark._benchmarkRunOp", "client.session_benchmark.SessionBenchmark._benchmarkFeed", "client.session_benchmark.SessionBenchmark._benchmarkFetchPrebuilt", "client.session_benchmark.SessionBenchmark._benchmarkFetch"], "server_lib.Server.create_local_server": [], "session.Session.reset": [], "client.session_benchmark.SessionBenchmark.benchmarkDirectSession": ["client.session_benchmark.SessionBenchmark._benchmarkRunOpPrebuilt", "client.session_benchmark.SessionBenchmark._benchmarkRunOp", "client.session_benchmark.SessionBenchmark._benchmarkFeed", "client.session_benchmark.SessionBenchmark._benchmarkFetchPrebuilt", "client.session_benchmark.SessionBenchmark._benchmarkFetch"], "client.session": ["eager.monitoring.Counter"], "client.session.SessionInterface.graph": ["<builtin>.NotImplementedError"], "client.session.SessionInterface.sess_str": ["<builtin>.NotImplementedError"], "client.session.SessionInterface.run": ["<builtin>.NotImplementedError"], "client.session.SessionInterface.partial_run_setup": ["<builtin>.NotImplementedError"], "client.session.SessionInterface.partial_run": ["<builtin>.NotImplementedError"], "client.session._get_indexed_slices_value_from_fetches": ["framework.ops.IndexedSlicesValue", "<builtin>.len"], "framework.ops.IndexedSlicesValue": [], "client.session._get_feeds_for_indexed_slices": ["<builtin>.list", "<builtin>.zip"], "client.session.<list1>.<lambda1>": [], "client.session.<list1>.<lambda1>.<lambda1>": [], "client.session.<lambda1>.<lambda1>": ["framework.sparse_tensor.SparseTensorValue"], "client.session.<list1>.<lambda2>": [], "client.session.<lambda2>": ["<builtin>.list", "<builtin>.zip"], "client.session.<list1>.<lambda3>": [], "client.session.<list1>.<lambda4>": [], "client.session.<list1>.<lambda5>": [], "client.session.<list1>.<lambda6>": [], "client.session.<list1>.<lambda6>.<lambda1>": [], "client.session.<list1>.<lambda7>": [], "client.session.<list1>.<lambda8>": [], "client.session._convert_to_numpy_obj": ["<builtin>.str"], "client.session._is_attrs_instance": ["<builtin>.getattr"], "client.session._get_attrs_values": ["<builtin>.getattr"], "client.session._FetchMapper.unique_fetches": ["<builtin>.NotImplementedError"], "client.session._FetchMapper.build_results": ["<builtin>.NotImplementedError"], "client.session._FetchMapper.for_fetch": ["client.session._is_attrs_instance", "client.session._ElementFetchMapper.__init__", "client.session._AttrsFetchMapper.__init__", "<builtin>.isinstance", "<builtin>.TypeError", "client.session._DictFetchMapper.__init__", "client.session._ListFetchMapper.__init__", "<builtin>.type"], "client.session._ListFetchMapper.__init__": ["<builtin>.type", "client.session._FetchMapper.for_fetch", "<builtin>.isinstance", "client.session._uniquify_fetches"], "client.session._DictFetchMapper.__init__": ["client.session._FetchMapper.for_fetch", "client.session._uniquify_fetches", "<builtin>.isinstance", "functools.partial", "<builtin>.type"], "client.session._AttrsFetchMapper.__init__": ["<builtin>.type", "client.session._get_attrs_values", "client.session._FetchMapper.for_fetch", "client.session._uniquify_fetches"], "client.session._ElementFetchMapper.__init__": ["<builtin>.str", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.type", "framework.ops.get_default_graph"], "client.session._ElementFetchMapper.unique_fetches": [], "client.session._ElementFetchMapper.build_results": [], "client.session._uniquify_fetches": ["<builtin>.id", "<builtin>.len"], "client.session._ListFetchMapper.unique_fetches": [], "client.session._ListFetchMapper.build_results": ["<builtin>.tuple", "<builtin>.issubclass", "<builtin>.zip"], "client.session._DictFetchMapper.unique_fetches": [], "client.session._DictFetchMapper.build_results": ["client.session._DictFetchMapper.build_results._generator"], "client.session._DictFetchMapper.build_results._generator": ["<builtin>.zip"], "client.session._AttrsFetchMapper.unique_fetches": [], "client.session._AttrsFetchMapper.build_results": ["<builtin>.zip"], "client.session._FetchHandler.__init__": ["client.session._FetchMapper.for_fetch", "client.session._DictFetchMapper.unique_fetches", "<builtin>.isinstance", "client.session._FetchHandler._assert_fetchable", "client.session._ListFetchMapper.unique_fetches", "client.session._AttrsFetchMapper.unique_fetches", "client.session._ElementFetchMapper.unique_fetches"], "client.session._FetchHandler._assert_fetchable": ["framework.errors.InaccessibleTensorError"], "framework.errors.InaccessibleTensorError": [], "client.session._FetchHandler.fetches": [], "client.session._FetchHandler.targets": [], "client.session._FetchHandler.build_results": ["client.session._AttrsFetchMapper.build_results", "client.session._ListFetchMapper.build_results", "ops.session_ops.TensorHandle", "client.session._ElementFetchMapper.build_results", "client.session._DictFetchMapper.build_results", "<builtin>.len"], "ops.session_ops.TensorHandle": [], "client.session._name_list": ["util.compat.as_bytes"], "client.session._DeviceAttributes.__init__": ["framework.device.canonical_name"], "framework.device.canonical_name": ["device_spec.DeviceSpecV2.from_string", "device_spec.DeviceSpecV1.from_string", "framework.device.is_device_spec"], "client.session._DeviceAttributes.name": [], "client.session._DeviceAttributes.device_type": [], "client.session._DeviceAttributes.memory_limit_bytes": [], "client.session._DeviceAttributes.incarnation": [], "client.session._DeviceAttributes.__repr__": [], "client.session.BaseSession.__init__": ["client.pywrap_tf_session.TF_NewSessionRef", "client.pywrap_tf_session.TF_DeleteSessionOptions", "client.pywrap_tf_session.TF_NewSessionOptions", "protobuf.config_pb2.ConfigProto", "<builtin>.isinstance", "<builtin>.TypeError", "threading.Lock", "eager.context.context", "<builtin>.type", "framework.ops.get_default_graph", "util.compat.as_bytes", "experimental.mixed_precision_global_state.set_non_mixed_precision_session_created", "experimental.mixed_precision_global_state.is_mixed_precision_graph_rewrite_enabled"], "experimental.mixed_precision_global_state.set_non_mixed_precision_session_created": [], "client.pywrap_tf_session.TF_NewSessionRef": [], "client.pywrap_tf_session.TF_DeleteSessionOptions": [], "client.session.BaseSession.list_devices": ["client.session._DeviceAttributes.__init__", "<builtin>.range", "client.pywrap_tf_session.TF_DeleteDeviceList", "client.pywrap_tf_session.TF_DeviceListMemoryBytes", "client.pywrap_tf_session.TF_DeviceListName", "client.pywrap_tf_session.TF_DeviceListType", "client.pywrap_tf_session.TF_DeviceListCount", "client.pywrap_tf_session.TF_DeviceListIncarnation", "client.pywrap_tf_session.TF_SessionListDevices"], "client.pywrap_tf_session.TF_SessionListDevices": [], "client.pywrap_tf_session.TF_DeviceListCount": [], "client.pywrap_tf_session.TF_DeviceListName": [], "client.pywrap_tf_session.TF_DeviceListType": [], "client.pywrap_tf_session.TF_DeviceListMemoryBytes": [], "client.pywrap_tf_session.TF_DeviceListIncarnation": [], "client.pywrap_tf_session.TF_DeleteDeviceList": [], "client.session.BaseSession.close": ["client.pywrap_tf_session.TF_CloseSession"], "client.pywrap_tf_session.TF_CloseSession": [], "client.session.BaseSession.__del__": ["client.pywrap_tf_session.TF_DeleteSession", "client.session.BaseSession.close"], "client.pywrap_tf_session.TF_DeleteSession": [], "client.session.BaseSession.graph": [], "client.session.BaseSession.graph_def": [], "client.session.BaseSession.sess_str": [], "client.session.BaseSession.as_default": ["framework.ops.default_session"], "client.session.BaseSession.run": ["client.pywrap_tf_session.TF_NewBufferFromString", "client.pywrap_tf_session.TF_DeleteBuffer", "client.session.BaseSession._run", "client.pywrap_tf_session.TF_NewBuffer", "client.pywrap_tf_session.TF_GetBuffer", "util.compat.as_bytes"], "client.pywrap_tf_session.TF_NewBufferFromString": [], "client.pywrap_tf_session.TF_NewBuffer": [], "client.session.BaseSession._run": ["<builtin>.str", "<builtin>.ValueError", "client.session.BaseSession._do_run", "client.session._FetchHandler.fetches", "<builtin>.RuntimeError", "client.session._FetchHandler.targets", "<builtin>.isinstance", "client.session.BaseSession._update_with_movers", "client.session._FetchHandler.build_results", "numpy.asarray", "client.session._FetchHandler.__init__", "<builtin>.type", "client.session.BaseSession._run._feed_fn", "<builtin>.TypeError", "client.session._convert_to_numpy_obj", "util.compat.as_bytes", "util.nest.flatten_dict_items"], "client.pywrap_tf_session.TF_GetBuffer": [], "client.pywrap_tf_session.TF_DeleteBuffer": [], "client.session.BaseSession.partial_run": ["client.session.BaseSession._run"], "client.session.BaseSession.partial_run_setup": ["client.session._FetchHandler.fetches", "<builtin>.RuntimeError", "client.session.BaseSession.partial_run_setup._feed_fn", "<builtin>.isinstance", "client.session.BaseSession._do_call", "client.session._FetchHandler.__init__", "client.session._FetchHandler.targets"], "client.session.BaseSession.partial_run_setup._feed_fn": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance"], "client.session.BaseSession.partial_run_setup._setup_fn": ["client.session.BaseSession._extend_graph", "client.pywrap_tf_session.TF_SessionPRunSetup_wrapper"], "client.session.BaseSession._extend_graph": ["client.pywrap_tf_session.ExtendSession"], "client.pywrap_tf_session.TF_SessionPRunSetup_wrapper": [], "client.session.BaseSession._do_call": ["client.session.BaseSession._do_run._run_fn", "util.compat.as_text", "<builtin>.type", "client.session.BaseSession.partial_run_setup._setup_fn", "framework.error_interpolation.interpolate", "client.session.BaseSession._do_run._prun_fn"], "client.session.BaseSession._run._feed_fn": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance"], "util.nest.flatten_dict_items": ["util._pywrap_nest.FlattenDictItems"], "client.session.BaseSession._update_with_movers": ["numpy.array", "ops.session_ops._get_handle_mover", "<builtin>.zip", "client.session.BaseSession.run"], "client.session.BaseSession._do_run": ["client.session.BaseSession._do_call", "<builtin>.dict"], "client.session.BaseSession.make_callable": ["client.session.BaseSession._extend_graph", "client.session._FetchHandler.fetches", "<builtin>.isinstance", "functools.partial", "client.session._FetchHandler.__init__", "client.session._FetchHandler.targets", "<builtin>.TypeError", "<builtin>.len"], "client.session.BaseSession.make_callable._generic_run": ["client.session.BaseSession.run", "<builtin>.zip"], "client.session.BaseSession.make_callable._callable_template_with_options_and_metadata": ["client.session.BaseSession._call_tf_sessionrun", "client.pywrap_tf_session.TF_NewBufferFromString", "client.pywrap_tf_session.TF_DeleteBuffer", "client.pywrap_tf_session.TF_NewBuffer", "client.pywrap_tf_session.TF_GetBuffer", "util.compat.as_bytes"], "client.session.BaseSession._call_tf_sessionrun": ["client.pywrap_tf_session.TF_SessionRun_wrapper"], "client.session.BaseSession.make_callable._single_operation_run": ["client.session.BaseSession._call_tf_sessionrun"], "client.session.BaseSession.make_callable._single_tensor_run": ["client.session.BaseSession._call_tf_sessionrun"], "client.session.BaseSession.make_callable._fetch_handler_run": ["client.session._FetchHandler.build_results", "client.session.BaseSession._call_tf_sessionrun"], "client.session.BaseSession": ["re.compile"], "client.session.BaseSession._do_run._run_fn": ["client.session.BaseSession._extend_graph", "client.session.BaseSession._call_tf_sessionrun"], "client.session.BaseSession._do_run._prun_fn": ["<builtin>.RuntimeError", "client.session.BaseSession._call_tf_sessionprun"], "client.session.BaseSession._call_tf_sessionprun": ["client.pywrap_tf_session.TF_SessionPRun_wrapper"], "framework.error_interpolation.interpolate": ["six.moves.zip_longest", "framework.error_interpolation._compute_field_dict", "framework.error_interpolation.parse_message", "<builtin>.zip", "collections.defaultdict", "framework.error_interpolation._build_error_message", "itertools.chain", "framework.error_interpolation._get_input_ops_for_op"], "client.pywrap_tf_session.ExtendSession": [], "client.session.BaseSession._register_dead_handle": ["client.session.BaseSession.run", "ops.session_ops._get_handle_deleter", "<builtin>.enumerate", "<builtin>.len"], "ops.session_ops._get_handle_deleter": ["ops.session_ops.TensorHandle._get_device_name", "ops.gen_data_flow_ops.delete_session_tensor", "ops.array_ops.placeholder"], "ops.session_ops._get_handle_mover": ["ops.session_ops._get_handle_reader", "ops.gen_data_flow_ops.get_session_handle", "ops.session_ops.TensorHandle._get_mover_key", "ops.session_ops.TensorHandle._get_device_name", "ops.session_ops._get_handle_feeder"], "client.pywrap_tf_session.TF_SessionRun_wrapper": [], "client.pywrap_tf_session.TF_SessionPRun_wrapper": [], "client.session.BaseSession._Callable.__init__": ["client.pywrap_tf_session.TF_SessionMakeCallable", "util.compat.as_bytes", "client.pywrap_tf_session.TF_NewBufferFromString", "client.pywrap_tf_session.TF_DeleteBuffer"], "client.pywrap_tf_session.TF_SessionMakeCallable": [], "client.session.BaseSession._Callable.__call__": ["client.pywrap_tf_session.TF_DeleteBuffer", "client.pywrap_tf_session.TF_NewBuffer", "client.pywrap_tf_session.TF_GetBuffer", "util.compat.as_bytes", "client.pywrap_tf_session.TF_SessionRunCallable"], "client.pywrap_tf_session.TF_SessionRunCallable": [], "client.session.BaseSession._Callable.__del__": ["client.pywrap_tf_session.TF_SessionReleaseCallable"], "client.pywrap_tf_session.TF_SessionReleaseCallable": [], "client.session.BaseSession._make_callable_from_options": ["client.session.BaseSession._extend_graph", "client.session.BaseSession._Callable.__init__"], "client.session.Session.__init__": ["<builtin>.super"], "client.session.Session.__enter__": ["<builtin>.RuntimeError", "client.session.BaseSession.as_default"], "client.session.Session.__exit__": ["threading.Thread", "client.session.BaseSession.close", "platform.tf_logging.error"], "client.session.Session.reset": ["client.pywrap_tf_session.TF_Reset", "util.compat.as_bytes"], "client.session.InteractiveSession": ["threading.Lock"], "client.session.InteractiveSession.__init__": ["<builtin>.super", "warnings.warn", "client.session.BaseSession.as_default", "protobuf.config_pb2.GPUOptions", "protobuf.config_pb2.ConfigProto"], "client.session.InteractiveSession.close": ["<builtin>.super"], "client.timeline": [], "client.timeline._ChromeTraceFormatter.__init__": [], "client.timeline._ChromeTraceFormatter._create_event": [], "client.timeline._ChromeTraceFormatter.emit_pid": [], "client.timeline._ChromeTraceFormatter.emit_tid": [], "client.timeline._ChromeTraceFormatter.emit_region": ["client.timeline._ChromeTraceFormatter._create_event"], "client.timeline._ChromeTraceFormatter.emit_obj_create": ["client.timeline._ChromeTraceFormatter._create_event"], "client.timeline._ChromeTraceFormatter.emit_obj_delete": ["client.timeline._ChromeTraceFormatter._create_event"], "client.timeline._ChromeTraceFormatter.emit_obj_snapshot": ["client.timeline._ChromeTraceFormatter._create_event"], "client.timeline._ChromeTraceFormatter.emit_flow_start": ["client.timeline._ChromeTraceFormatter._create_event"], "client.timeline._ChromeTraceFormatter.emit_flow_end": ["client.timeline._ChromeTraceFormatter._create_event"], "client.timeline._ChromeTraceFormatter.emit_counter": ["client.timeline._ChromeTraceFormatter._create_event"], "client.timeline._ChromeTraceFormatter.emit_counters": ["client.timeline._ChromeTraceFormatter._create_event"], "client.timeline._ChromeTraceFormatter.format_to_string": ["json.dumps"], "client.timeline._TensorTracker.__init__": [], "client.timeline._TensorTracker.name": [], "client.timeline._TensorTracker.pid": [], "client.timeline._TensorTracker.create_time": [], "client.timeline._TensorTracker.object_id": [], "client.timeline._TensorTracker.num_bytes": [], "client.timeline._TensorTracker.allocator": [], "client.timeline._TensorTracker.last_unref": ["<builtin>.max"], "client.timeline._TensorTracker.add_ref": [], "client.timeline._TensorTracker.add_unref": [], "client.timeline.Timeline.__init__": ["client.timeline._ChromeTraceFormatter.__init__"], "client.timeline.Timeline._alloc_pid": [], "client.timeline.Timeline._alloc_flow_id": [], "client.timeline.Timeline._parse_op_label": ["re.match"], "client.timeline.Timeline._parse_kernel_label": [], "client.timeline.Timeline._assign_lanes": ["<builtin>.len", "<builtin>.enumerate"], "client.timeline.Timeline._emit_op": ["<builtin>.enumerate", "client.timeline.Timeline._parse_op_label", "client.timeline.Timeline._parse_kernel_label", "client.timeline._ChromeTraceFormatter.emit_region"], "client.timeline.Timeline._emit_tensor_snapshot": ["<builtin>.str", "client.timeline._ChromeTraceFormatter.emit_obj_snapshot"], "client.timeline.Timeline._produce_tensor": ["client.timeline._TensorTracker.__init__", "<builtin>.len"], "client.timeline.Timeline._is_gputrace_device": [], "client.timeline.Timeline._allocate_pids": ["client.timeline.Timeline._alloc_pid", "client.timeline._ChromeTraceFormatter.emit_pid"], "client.timeline.Timeline._analyze_tensors": ["client.timeline.Timeline._emit_tensor_snapshot", "client.timeline._TensorTracker.add_unref", "client.timeline._TensorTracker.add_ref", "<builtin>.enumerate", "client.timeline.Timeline._produce_tensor", "client.timeline._ChromeTraceFormatter.emit_obj_create"], "client.timeline.Timeline._show_compute": ["client.timeline.Timeline._emit_op", "client.timeline._ChromeTraceFormatter.emit_flow_end", "client.timeline.Timeline._is_gputrace_device", "client.timeline._ChromeTraceFormatter.emit_flow_start", "client.timeline.Timeline._alloc_flow_id", "platform.tf_logging.vlog", "client.timeline.Timeline._parse_op_label"], "client.timeline.Timeline._show_memory_counters": ["client.timeline._ChromeTraceFormatter.emit_counter", "copy.deepcopy", "<builtin>.set", "<builtin>.sorted", "client.timeline._ChromeTraceFormatter.emit_obj_delete"], "client.timeline.Timeline._show_memory_counters.<lambda1>": [], "client.timeline.Timeline._preprocess_op_time": ["<builtin>.min", "client.timeline.Timeline._parse_kernel_label", "<builtin>.max", "copy.deepcopy"], "client.timeline.Timeline.analyze_step_stats": ["client.timeline.Timeline._analyze_tensors", "client.timeline.Timeline._allocate_pids", "client.timeline.Timeline._show_compute", "client.timeline.Timeline._preprocess_op_time", "client.timeline.Timeline._show_memory_counters", "client.timeline.Timeline._assign_lanes"], "client.timeline.Timeline.generate_chrome_trace_format": ["client.timeline.Timeline.analyze_step_stats"], "compat.compat": ["datetime.date", "util.tf_export.tf_export", "compat.compat._update_forward_compatibility_date_number", "util.tf_contextlib.contextmanager"], "datetime.date": [], "compat.compat._date_to_date_number": [], "compat.compat._update_forward_compatibility_date_number": ["datetime.timedelta", "compat.compat._date_to_date_number", "<builtin>.int", "platform.tf_logging.warning", "os.getenv"], "datetime.timedelta": [], "compat.compat.forward_compatibility_horizon": ["datetime.date", "compat.compat._update_forward_compatibility_date_number"], "compat.v2_compat": ["eager.monitoring.BoolGauge", "util.tf_export.tf_export"], "eager.monitoring.BoolGauge": [], "python.tf2.enable": ["platform._pywrap_tf2.enable"], "framework.ops.enable_eager_execution": ["platform.tf_logging.vlog", "framework.ops.enable_eager_execution_internal"], "framework.tensor_shape.enable_v2_tensorshape": ["platform.tf_logging.vlog"], "ops.variable_scope.enable_resource_variables": ["platform.tf_logging.vlog"], "framework.ops.enable_tensor_equality": ["platform.tf_logging.vlog"], "ops.control_flow_v2_toggles.enable_control_flow_v2": ["ops._control_flow_api_gauge.get_cell", "platform.tf_logging.vlog"], "compat.v2_compat.disable_v2_behavior": ["ops.variable_scope.disable_resource_variables", "framework.ops.disable_tensor_equality", "python.tf2.disable", "framework.tensor_shape.disable_v2_tensorshape", "ops.control_flow_v2_toggles.disable_control_flow_v2", "framework.ops.disable_eager_execution"], "python.tf2.disable": ["platform._pywrap_tf2.enable"], "framework.ops.disable_eager_execution": ["eager.context.context_safe", "platform.tf_logging.vlog"], "framework.tensor_shape.disable_v2_tensorshape": ["platform.tf_logging.vlog"], "ops.variable_scope.disable_resource_variables": ["platform.tf_logging.vlog"], "framework.ops.disable_tensor_equality": ["platform.tf_logging.vlog"], "ops.control_flow_v2_toggles.disable_control_flow_v2": ["ops._control_flow_api_gauge.get_cell", "platform.tf_logging.vlog"], "distribute.central_storage_strategy": [], "distribute.central_storage_strategy.CentralStorageStrategy.__init__": ["<builtin>.super", "distribute.parameter_server_strategy.ParameterServerStrategyExtended", "distribute_lib.distribution_strategy_gauge.get_cell"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended": [], "distribute_lib.distribution_strategy_gauge.get_cell": [], "distribute.central_storage_strategy.CentralStorageStrategy._from_num_gpus": ["distribute.device_util.local_devices_from_num_gpus", "distribute.central_storage_strategy.CentralStorageStrategy.__init__"], "distribute.device_util.local_devices_from_num_gpus": ["<builtin>.range", "<builtin>.tuple"], "distribute.central_storage_strategy.CentralStorageStrategy.experimental_distribute_dataset": ["<builtin>.super", "<builtin>.NotImplementedError"], "distribute.central_storage_strategy.CentralStorageStrategy.experimental_local_results": ["<builtin>.super"], "distribute.central_storage_strategy.CentralStorageStrategy.run": ["<builtin>.super"], "distribute.central_storage_strategy.CentralStorageStrategy.reduce": ["<builtin>.super"], "distribute.central_storage_strategy.CentralStorageStrategyV1.__init__": ["<builtin>.super", "distribute.parameter_server_strategy.ParameterServerStrategyExtended", "distribute_lib.distribution_strategy_gauge.get_cell"], "distribute.collective_all_reduce_strategy": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceStrategy.__init__": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.__init__", "distribute_lib.distribution_strategy_gauge.get_cell", "distribute_lib.distribution_strategy_replica_gauge.get_cell", "distribute.collective_util.Options", "<builtin>.super"], "distribute.collective_util.Options": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.__init__": ["<builtin>.isinstance", "distribute_lib.StrategyExtendedV1.__init__", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._initialize_strategy", "distribute.cluster_resolver.TFConfigClusterResolver", "weakref.WeakKeyDictionary", "<builtin>.ValueError"], "distribute_lib.distribution_strategy_replica_gauge.get_cell": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceStrategy._from_local_devices": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceStrategy.__init__", "distribute.cluster_resolver.TFConfigClusterResolver"], "distribute.cluster_resolver.TFConfigClusterResolver": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceStrategy.cluster_resolver": [], "distribute.collective_all_reduce_strategy._CollectiveAllReduceStrategyExperimentalMeta.__instancecheck__": ["<builtin>.isinstance"], "distribute.collective_all_reduce_strategy._CollectiveAllReduceStrategyExperimental": ["util.deprecation.deprecated"], "distribute.collective_all_reduce_strategy._CollectiveAllReduceStrategyExperimental.__init__": ["distribute.collective_util.Options", "<builtin>.super"], "distribute.collective_all_reduce_strategy._CollectiveAllReduceStrategyExperimental._from_local_devices": ["distribute.collective_all_reduce_strategy._CollectiveAllReduceStrategyExperimental.__init__", "distribute.cluster_resolver.TFConfigClusterResolver"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceStrategyV1.__init__": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.__init__", "distribute_lib.distribution_strategy_gauge.get_cell", "distribute_lib.distribution_strategy_replica_gauge.get_cell", "distribute.collective_util.Options", "<builtin>.super"], "distribute_lib.StrategyExtendedV1.__init__": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._initialize_strategy": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._initialize_multi_worker", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._initialize_local"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._use_merge_call": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._initialize_multi_worker": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._warn_nccl_no_gpu", "distribute.cross_device_ops.CollectiveAllReduce", "protobuf.tensorflow_server_pb2.ServerDef", "<builtin>.isinstance", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._update_config_proto", "<builtin>.range", "<builtin>.len", "copy.deepcopy", "distribute.numpy_dataset.SingleDevice", "distribute.multi_worker_util.collective_leader", "platform.tf_logging.info", "<builtin>.getattr", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._start_check_health_thread", "distribute.multi_worker_util.is_chief", "<builtin>.hasattr", "distribute.multi_worker_util.id_in_cluster", "<builtin>.super", "distribute.multi_worker_util.worker_count", "distribute.cross_device_utils.CollectiveKeys", "distribute.multi_worker_util.normalize_cluster_spec", "device.DeviceSpec.from_string", "<builtin>.tuple", "eager.context.executing_eagerly", "framework.ops.executing_eagerly_outside_functions", "<builtin>.ValueError", "eager.context.context"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._initialize_local": ["platform.tf_logging.warning", "distribute.cross_device_utils.CollectiveKeys", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._warn_nccl_no_gpu", "platform.tf_logging.info", "eager.context.num_gpus", "distribute.cross_device_ops.CollectiveAllReduce", "framework.ops.executing_eagerly_outside_functions", "distribute.device_util.canonicalize", "<builtin>.isinstance", "<builtin>.range", "<builtin>.tuple", "<builtin>.len", "distribute.numpy_dataset.SingleDevice", "<builtin>.super", "eager.context.context"], "eager.context.num_gpus": ["eager.context.context"], "distribute.numpy_dataset.SingleDevice": [], "distribute.cross_device_utils.CollectiveKeys": [], "distribute.cross_device_ops.CollectiveAllReduce": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._warn_nccl_no_gpu": ["platform.tf_logging.warning"], "distribute.multi_worker_util.normalize_cluster_spec": ["<builtin>.ValueError", "<builtin>.isinstance", "training.server_lib.ClusterSpec"], "distribute.multi_worker_util.id_in_cluster": ["distribute.multi_worker_util._validate_cluster_spec", "<builtin>.len", "distribute.multi_worker_util.normalize_cluster_spec", "<builtin>.ValueError"], "distribute.multi_worker_util.worker_count": ["distribute.multi_worker_util._validate_cluster_spec", "<builtin>.len", "distribute.multi_worker_util.normalize_cluster_spec", "<builtin>.ValueError"], "distribute.multi_worker_util.is_chief": ["distribute.multi_worker_util.has_worker_context", "distribute.distribute_coordinator_context.get_current_worker_context", "distribute.multi_worker_util.normalize_cluster_spec", "distribute.multi_worker_util._validate_cluster_spec"], "distribute.multi_worker_util.collective_leader": ["distribute.multi_worker_util._validate_cluster_spec", "distribute.multi_worker_util.normalize_cluster_spec"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._update_config_proto": ["distribute.multi_worker_util.collective_leader", "framework.ops.executing_eagerly_outside_functions", "copy.deepcopy"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._start_check_health_thread": ["platform.tf_logging.info", "threading.Thread", "eager.context.is_async", "<builtin>.RuntimeError", "threading.Event", "eager.context.async_wait", "ops.array_ops.identity", "distribute.collective_util.Options"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.__del__": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._stop_check_health_thread"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._stop_check_health_thread": ["<builtin>.getattr", "platform.tf_logging.info"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._input_workers_with_options": ["distribute.input_lib.InputWorkers", "distribute.device_util.get_host_for_device"], "distribute.device_util.get_host_for_device": ["framework.device.DeviceSpec", "device.DeviceSpec.from_string"], "distribute.input_lib.InputWorkers": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._input_workers": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._input_workers_with_options"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._get_variable_creator_initial_value": ["<builtin>.super"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._get_variable_creator_initial_value.initial_value_fn": ["ops.collective_ops.broadcast_send", "ops.collective_ops.broadcast_recv", "framework.ops.control_dependencies", "framework.ops.device", "<builtin>.isinstance", "framework.ops.convert_to_tensor", "<builtin>.callable", "ops.array_ops.identity"], "ops.collective_ops.broadcast_send": ["ops.gen_collective_ops.collective_bcast_send", "<builtin>.ValueError"], "ops.collective_ops.broadcast_recv": ["<builtin>.ValueError", "ops.gen_collective_ops.collective_bcast_recv"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._make_input_context": ["distribute.distribute_lib.InputContext"], "distribute.distribute_lib.InputContext": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._experimental_distribute_dataset": ["mirrored_strategy.MirroredExtended._container_strategy", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._input_workers_with_options", "<builtin>.NotImplementedError", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._make_input_context", "distribute.input_lib.get_distributed_dataset"], "mirrored_strategy.MirroredExtended._container_strategy": [], "distribute.input_lib.get_distributed_dataset": ["distribute.input_lib.DistributedDatasetV1.__init__", "distribute.input_lib.DistributedDataset.__init__", "python.tf2.enabled"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._distribute_datasets_from_function": ["mirrored_strategy.MirroredExtended._container_strategy", "distribute.input_lib.get_distributed_datasets_from_function", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._input_workers_with_options", "<builtin>.NotImplementedError", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._make_input_context"], "distribute.input_lib.get_distributed_datasets_from_function": ["python.tf2.enabled", "distribute.input_lib.DistributedDatasetsFromFunction.__init__", "<builtin>.ValueError"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._experimental_distribute_values_from_function": ["distribute.distribute_utils.regroup", "distribute.distribute_lib.ValueContext", "<builtin>.len", "<builtin>.range"], "distribute.distribute_lib.ValueContext": [], "distribute.distribute_utils.regroup": ["<builtin>.isinstance", "<builtin>.id", "distribute.values.Mirrored", "<builtin>.hasattr", "<builtin>.len", "distribute.distribute_utils.regroup", "distribute.distribute_utils.update_regroup._make_grouped_mirrored", "<builtin>.set", "<builtin>.type", "<builtin>.tuple", "<builtin>.range"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._make_dataset_iterator": ["mirrored_strategy.MirroredExtended._container_strategy", "distribute.input_lib.DatasetIterator", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._make_input_context"], "distribute.input_lib.DatasetIterator": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._make_input_fn_iterator": ["mirrored_strategy.MirroredExtended._container_strategy", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._make_input_context", "distribute.input_lib.InputFunctionIterator"], "distribute.input_lib.InputFunctionIterator": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._configure": ["distribute.cluster_resolver.SimpleClusterResolver", "distribute.multi_worker_util.normalize_cluster_spec", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._initialize_multi_worker", "<builtin>.isinstance", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._update_config_proto"], "distribute.cluster_resolver.SimpleClusterResolver": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._get_cross_device_ops": ["<builtin>.isinstance", "<builtin>.len"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._gather_to_implementation": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._get_cross_device_ops"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._reduce_to": ["<builtin>.isinstance", "<builtin>.len", "distribute.cross_device_ops.reduce_non_distributed_value", "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._get_cross_device_ops"], "distribute.cross_device_ops.reduce_non_distributed_value": ["<builtin>.ValueError", "distribute.cross_device_ops.validate_destinations", "framework.tensor_util.is_tf_type", "distribute.cross_device_ops.simple_broadcast", "<builtin>.isinstance"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._replica_ctx_all_reduce": ["distribute.distribution_strategy_context.get_replica_context", "distribute.collective_util.Options", "<builtin>.super", "eager.context.executing_eagerly"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._check_health": ["platform.tf_logging.warning", "<builtin>.range", "platform.tf_logging.error", "eager.context.context", "time.sleep"], "eager.context.is_async": ["eager.context.context"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._in_multi_worker_mode": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.experimental_between_graph": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.experimental_should_init": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.should_checkpoint": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.should_save_summary": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._num_replicas_in_sync": ["<builtin>.len"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._global_batch_size": [], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._get_replica_id_in_sync_group": ["<builtin>.len"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended._get_local_replica_id": ["<builtin>.len"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceExtended.__deepcopy__": ["MirroredExtended.__class__.__new__", "<builtin>.id", "<builtin>.hasattr", "copy.deepcopy", "<builtin>.ValueError", "<builtin>.setattr"], "MirroredExtended.__class__.__new__": [], "distribute.collective_util": [], "distribute.collective_util._OptionsExported.__new__": ["distribute.collective_util.Options.__init__"], "distribute.collective_util.Options.__init__": ["<builtin>.isinstance", "enum.Enum.__init__", "enum.Enum.upper", "<builtin>.ValueError"], "distribute.collective_util._OptionsExported.__init__": [], "enum.Enum.upper": [], "enum.Enum.__init__": [], "distribute.collective_util.Options.merge": ["copy.deepcopy"], "distribute.collective_util.Hints": ["util.deprecation.deprecated"], "distribute.collective_util.Hints.__new__": ["distribute.collective_util.Options.__init__"], "distribute.collective_util.Hints.__init__": [], "distribute.combinations": ["absl.app.call_after_init", "collections.namedtuple", "distribute.combinations.TestEnvironment.__init__", "framework.test_combinations.NamedObject", "util.tf_export.tf_export"], "distribute.combinations.DistributionParameter.modified_arguments": ["<builtin>.isinstance"], "distribute.combinations.ClusterParameters.modified_arguments": ["distribute.combinations._num_total_workers", "<builtin>.isinstance", "<builtin>.ValueError"], "distribute.combinations._num_total_workers": [], "distribute.combinations.DistributionCombination.should_execute_combination": ["framework.test_util.is_xla_enabled", "<builtin>.any", "<builtin>.isinstance"], "framework.test_util.is_xla_enabled": [], "distribute.combinations.DistributionCombination.parameter_modifiers": ["test_combinations.ParameterModifier.__init__", "framework.test_combinations.OptionalParameter"], "test_combinations.ParameterModifier.__init__": [], "framework.test_combinations.OptionalParameter": [], "distribute.combinations.ClusterCombination.parameter_modifiers": ["test_combinations.ParameterModifier.__init__"], "distribute.combinations.GPUCombination": ["re.search"], "distribute.combinations.GPUCombination.should_execute_combination": ["<builtin>.isinstance", "eager.context.num_gpus", "<builtin>.len", "<builtin>.ValueError", "framework.config.list_physical_devices", "<builtin>.max"], "distribute.combinations.GPUCombination.parameter_modifiers": ["framework.test_combinations.OptionalParameter"], "distribute.combinations.TPUCombination.should_execute_combination": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.max", "<builtin>.any"], "distribute.combinations.TPUCombination.parameter_modifiers": ["framework.test_combinations.OptionalParameter"], "distribute.combinations.NamedDistribution.__init__": [], "distribute.combinations.NamedDistribution.runner": [], "distribute.combinations.NamedDistribution.strategy": [], "distribute.combinations.NamedDistribution.__repr__": [], "distribute.combinations.<lambda1>": [], "distribute.combinations.concat": [], "distribute.combinations.generate": ["test_combinations.TestCombination.__init__", "framework.test_combinations.generate", "framework.combinations.TFVersionCombination", "framework.combinations.EagerGraphCombination"], "framework.combinations.EagerGraphCombination": [], "framework.combinations.TFVersionCombination": [], "test_combinations.TestCombination.__init__": [], "framework.test_combinations.generate": [], "distribute.combinations.generate.decorator": ["six.iteritems", "<builtin>.isinstance", "<builtin>.setattr", "distribute.combinations._multi_worker_test"], "distribute.combinations._multi_worker_test": ["util.tf_decorator.make_decorator", "util.tf_inspect.getfullargspec"], "distribute.combinations.in_main_process": [], "distribute.combinations.TestEnvironment.__init__": [], "distribute.combinations.TestEnvironment.__setattr__": ["<builtin>.super", "distribute.combinations.in_main_process", "<builtin>.ValueError"], "distribute.combinations.env": [], "distribute.combinations._set_total_phsyical_gpus": ["eager.context.context", "distribute.combinations.in_main_process", "<builtin>.len", "distribute.combinations.env"], "absl.app.call_after_init": [], "distribute.combinations._test_runner": ["unittest.defaultTestLoader.loadTestsFromName", "<builtin>.print", "unittest.TextTestRunner"], "unittest.defaultTestLoader.loadTestsFromName": [], "unittest.TextTestRunner": [], "distribute.combinations._multi_worker_test.decorator": ["distribute.combinations._multi_worker_session", "framework.test_util.is_xla_enabled", "distribute.multi_worker_test_base.create_cluster_spec", "distribute.multi_process_runner.MultiProcessRunner", "distribute.combinations._num_total_workers"], "distribute.combinations._multi_worker_session": ["<builtin>.isinstance", "platform.tf_logging.warning", "client.session.Session", "copy.deepcopy", "eager.context.executing_eagerly", "eager.context.context", "framework.ops.NullContextmanager"], "distribute.multi_worker_test_base.create_cluster_spec": [], "distribute.multi_process_runner.MultiProcessRunner": [], "framework.ops.NullContextmanager": [], "distribute.cross_device_ops": ["collections.namedtuple"], "distribute.cross_device_ops.check_destinations": ["<builtin>.bool", "<builtin>.isinstance"], "distribute.cross_device_ops.validate_destinations": ["<builtin>.ValueError", "ops.resource_variable_ops.is_resource_variable", "distribute.cross_device_ops.check_destinations", "<builtin>.isinstance"], "distribute.cross_device_ops.simple_broadcast": ["distribute.cross_device_ops.get_devices_from", "<builtin>.len", "distribute.cross_device_utils.copy_tensor_or_indexed_slices_to_device", "distribute.distribute_utils.regroup"], "distribute.cross_device_ops._make_tensor_into_per_replica": ["<builtin>.ValueError", "<builtin>.hasattr", "distribute.values.PerReplica", "<builtin>.isinstance"], "distribute.values.PerReplica": [], "distribute.cross_device_ops._normalize_value_destination_pairs": ["<builtin>.ValueError", "<builtin>.list", "<builtin>.len", "distribute.cross_device_ops._make_tensor_into_per_replica", "<builtin>.isinstance"], "distribute.cross_device_ops._validate_value_destination_pairs": ["<builtin>.all", "<builtin>.isinstance"], "distribute.cross_device_ops.get_devices_from": ["distribute.device_util.canonicalize_without_job_and_task", "distribute.device_util.resolve", "<builtin>.isinstance"], "distribute.device_util.resolve": ["distribute.device_util.canonicalize", "distribute.device_util.current"], "distribute.device_util.canonicalize_without_job_and_task": ["distribute.device_util.canonicalize", "device.DeviceSpec.from_string"], "distribute.cross_device_ops._devices_match": ["distribute.cross_device_ops.get_devices_from", "<builtin>.set"], "distribute.cross_device_ops._all_devices_match": ["<builtin>.all", "distribute.cross_device_ops._devices_match"], "distribute.cross_device_utils.copy_tensor_or_indexed_slices_to_device": ["framework.ops.IndexedSlices", "framework.ops.device", "ops.array_ops.identity", "<builtin>.isinstance"], "distribute.cross_device_ops._simple_reduce": ["<builtin>.ValueError", "distribute.cross_device_utils.aggregate_tensors_or_indexed_slices", "distribute.cross_device_utils.divide_by_n_tensors_or_indexed_slices", "framework.ops.device", "eager.context.device_policy", "<builtin>.len"], "eager.context.device_policy": ["eager.context.context"], "distribute.cross_device_utils.aggregate_tensors_or_indexed_slices": ["<builtin>.any", "eager.backprop.aggregate_indexed_slices_gradients", "<builtin>.isinstance"], "distribute.cross_device_utils.divide_by_n_tensors_or_indexed_slices": ["framework.ops.IndexedSlices", "eager.backprop.flatten_nested_indexed_slices", "<builtin>.isinstance"], "distribute.cross_device_ops._simple_gather": ["<builtin>.ValueError", "ops.array_ops.concat", "eager.context.device_policy", "framework.ops.device"], "distribute.cross_device_ops.CrossDeviceOps.__init__": [], "distribute.cross_device_ops.CrossDeviceOps._num_between_graph_workers": [], "distribute.cross_device_ops.CrossDeviceOps.reduce": ["framework.ops.device", "ops.array_ops.identity", "distribute.cross_device_ops.ReductionToOneDevice.reduce_implementation", "distribute.cross_device_ops.validate_destinations", "distribute.collective_util.Options", "distribute.cross_device_ops.CollectiveAllReduce.reduce_implementation", "distribute.cross_device_ops._devices_match", "distribute.distribute_utils.regroup", "distribute.cross_device_ops.CrossDeviceOps.reduce_implementation", "<builtin>.len", "distribute.cross_device_ops._make_tensor_into_per_replica", "<builtin>.isinstance"], "distribute.cross_device_ops.ReductionToOneDevice.reduce_implementation": ["distribute.cross_device_ops.check_destinations", "distribute.cross_device_ops._simple_reduce", "distribute.cross_device_ops.get_devices_from", "platform.tf_logging.log_first_n", "distribute.cross_device_ops.CrossDeviceOps.broadcast"], "distribute.cross_device_ops.CrossDeviceOps.reduce_implementation": ["<builtin>.NotImplementedError"], "distribute.cross_device_ops.CollectiveAllReduce.reduce_implementation": ["framework.ops.control_dependencies", "distribute.values.Mirrored", "framework.ops.device", "ops.array_ops.identity", "distribute.cross_device_ops.get_devices_from", "distribute.values_util.mark_as_unsaveable", "distribute.cross_device_ops._devices_match", "distribute.distribute_utils.regroup", "distribute.cross_device_ops.CollectiveAllReduce._all_reduce_per_replica_values", "<builtin>.isinstance"], "distribute.cross_device_ops.CrossDeviceOps._gather": ["framework.ops.device", "ops.array_ops.identity", "distribute.cross_device_ops.validate_destinations", "distribute.collective_util.Options", "distribute.cross_device_ops.ReductionToOneDevice._gather_implementation", "distribute.cross_device_ops._devices_match", "<builtin>.NotImplementedError", "distribute.distribute_utils.regroup", "<builtin>.len", "distribute.cross_device_ops.CrossDeviceOps._gather_implementation", "distribute.cross_device_ops._make_tensor_into_per_replica", "<builtin>.isinstance", "distribute.cross_device_ops.CollectiveAllReduce._gather_implementation"], "distribute.cross_device_ops.ReductionToOneDevice._gather_implementation": ["distribute.cross_device_ops.check_destinations", "distribute.cross_device_ops.get_devices_from", "platform.tf_logging.log_first_n", "distribute.cross_device_ops._simple_gather", "distribute.cross_device_ops.CrossDeviceOps.broadcast"], "distribute.cross_device_ops.CrossDeviceOps._gather_implementation": ["<builtin>.NotImplementedError"], "distribute.cross_device_ops.CollectiveAllReduce._gather_implementation": ["framework.ops.control_dependencies", "distribute.values.Mirrored", "framework.ops.device", "ops.array_ops.identity", "distribute.cross_device_ops.get_devices_from", "distribute.cross_device_ops.CollectiveAllReduce._batch_all_gather", "distribute.values_util.mark_as_unsaveable", "distribute.cross_device_ops._devices_match", "distribute.distribute_utils.regroup", "<builtin>.isinstance"], "distribute.cross_device_ops.CrossDeviceOps.batch_reduce": ["distribute.cross_device_ops._all_devices_match", "distribute.cross_device_ops._normalize_value_destination_pairs", "distribute.cross_device_ops.CrossDeviceOps.batch_reduce_implementation", "distribute.cross_device_ops.validate_destinations", "distribute.collective_util.Options", "distribute.cross_device_ops.ReductionToOneDevice.batch_reduce_implementation", "distribute.distribute_utils.regroup", "distribute.cross_device_ops._validate_value_destination_pairs", "<builtin>.len", "distribute.cross_device_ops.CollectiveAllReduce.batch_reduce_implementation"], "distribute.cross_device_ops.ReductionToOneDevice.batch_reduce_implementation": ["distribute.cross_device_ops.ReductionToOneDevice.reduce_implementation"], "distribute.cross_device_ops.CollectiveAllReduce.batch_reduce_implementation": ["distribute.cross_device_ops._all_devices_match", "distribute.values_util.mark_as_unsaveable", "distribute.cross_device_ops.CollectiveAllReduce.reduce_implementation", "platform.tf_logging.log_first_n", "distribute.cross_device_ops.CollectiveAllReduce._all_reduce_per_replica_values"], "distribute.cross_device_ops.CrossDeviceOps.batch_reduce_implementation": ["<builtin>.NotImplementedError"], "distribute.cross_device_ops.CrossDeviceOps.broadcast": ["distribute.cross_device_ops.validate_destinations", "distribute.cross_device_ops.CrossDeviceOps.broadcast_implementation"], "distribute.cross_device_ops.CrossDeviceOps.broadcast_implementation": ["distribute.cross_device_ops.simple_broadcast"], "distribute.cross_device_ops.CrossDeviceOps": ["docs.doc_controls.for_subclass_implementers"], "distribute.cross_device_ops.CrossDeviceOps._all_reduce": ["<builtin>.NotImplementedError"], "distribute.cross_device_ops.ReductionToOneDevice.__init__": ["<builtin>.super"], "distribute.cross_device_ops._group_value_by_device": ["<builtin>.enumerate", "<builtin>.len", "<builtin>.range"], "distribute.cross_device_ops._ungroup_and_make_mirrored": ["framework.ops.device", "distribute.cross_device_ops.get_devices_from", "<builtin>.range", "distribute.distribute_utils.regroup", "<builtin>.enumerate", "<builtin>.len"], "distribute.cross_device_ops._ConcatAndSplitPacker.__init__": ["<builtin>.ValueError"], "distribute.cross_device_ops._ConcatAndSplitPacker.pack": ["ops.array_ops.shape", "<builtin>.zip", "<builtin>.sum", "ops.array_ops.size", "ops.array_ops.concat", "ops.array_ops.split", "framework.ops.colocate_with", "ops.array_ops.reshape", "<builtin>.all"], "distribute.cross_device_ops._ConcatAndSplitPacker.unpack": ["<builtin>.zip", "ops.array_ops.concat", "ops.array_ops.split", "framework.ops.colocate_with", "ops.array_ops.reshape"], "distribute.cross_device_ops._pack_tensors": ["distribute.cross_device_ops._ConcatAndSplitPacker.pack", "distribute.cross_device_ops._ConcatAndSplitPacker.__init__"], "distribute.cross_device_ops._unpack_tensors": [], "distribute.cross_device_ops.AllReduceCrossDeviceOps.__init__": ["distribute.cross_device_ops.ReductionToOneDevice.__init__", "<builtin>.super"], "distribute.cross_device_ops.AllReduceCrossDeviceOps.reduce_implementation": ["distribute.cross_device_ops.get_devices_from", "distribute.cross_device_ops._devices_match", "<builtin>.any", "distribute.cross_device_ops.CrossDeviceOps.reduce", "distribute.cross_device_ops.AllReduceCrossDeviceOps._batch_all_reduce"], "distribute.cross_device_ops.AllReduceCrossDeviceOps._batch_all_reduce": ["distribute.cross_device_utils.stitch_values", "distribute.cross_device_ops.AllReduceCrossDeviceOps._do_batch_all_reduce", "distribute.cross_device_utils.split_by_sparsity", "distribute.cross_device_ops.AllReduceCrossDeviceOps._do_batch_all_reduce_sparse"], "distribute.cross_device_ops.AllReduceCrossDeviceOps.batch_reduce_implementation": ["distribute.cross_device_ops.AllReduceCrossDeviceOps._batch_all_reduce", "distribute.cross_device_ops.AllReduceCrossDeviceOps.reduce_implementation", "distribute.cross_device_ops._all_devices_match"], "distribute.cross_device_utils.split_by_sparsity": ["distribute.cross_device_utils.is_indexed_slices", "<builtin>.enumerate"], "distribute.cross_device_ops.AllReduceCrossDeviceOps._do_batch_all_reduce": ["distribute.cross_device_ops._unpack_tensors", "distribute.cross_device_utils.aggregate_gradients_using_nccl", "distribute.cross_device_ops._ungroup_and_make_mirrored", "distribute.cross_device_utils.aggregate_gradients_using_hierarchical_copy", "distribute.cross_device_ops._group_value_by_device", "platform.tf_logging.log_first_n", "<builtin>.len", "distribute.cross_device_ops._pack_tensors"], "distribute.cross_device_ops.AllReduceCrossDeviceOps._do_batch_all_reduce_sparse": ["platform.tf_logging.log_first_n", "<builtin>.len", "<builtin>.zip", "distribute.cross_device_ops.CrossDeviceOps.batch_reduce"], "distribute.cross_device_utils.stitch_values": ["<builtin>.zip", "<builtin>.len"], "distribute.cross_device_utils.aggregate_gradients_using_nccl": ["<builtin>.zip", "<builtin>.list", "ops.nccl_ops.all_sum"], "distribute.cross_device_utils.aggregate_gradients_using_hierarchical_copy": ["<builtin>.zip", "<builtin>.enumerate", "distribute.cross_device_utils.aggregate_single_gradient_using_copy", "<builtin>.range", "ops.array_ops.identity", "framework.ops.device", "<builtin>.list", "<builtin>.len"], "distribute.cross_device_ops.AllReduceCrossDeviceOps._gather_implementation": ["distribute.cross_device_ops.ReductionToOneDevice.__init__", "distribute.cross_device_ops.CrossDeviceOps._gather", "platform.tf_logging.warning"], "distribute.cross_device_ops.NcclAllReduce.__init__": ["<builtin>.ValueError", "<builtin>.super"], "distribute.cross_device_ops.HierarchicalCopyAllReduce.__init__": ["<builtin>.ValueError", "<builtin>.super"], "distribute.cross_device_ops.CollectiveAllReduce.__init__": ["<builtin>.ValueError", "distribute.cross_device_utils.CollectiveReplicaLauncher", "distribute.cross_device_utils.CollectiveKeys", "<builtin>.super", "<builtin>.tuple", "distribute.device_util.canonicalize", "<builtin>.len", "distribute.device_util.canonicalize_without_job_and_task", "threading.Lock"], "distribute.cross_device_utils.CollectiveReplicaLauncher": [], "distribute.cross_device_ops.CollectiveAllReduce._num_between_graph_workers": ["<builtin>.len"], "distribute.cross_device_ops.CollectiveAllReduce._all_reduce": ["distribute.cross_device_utils.group_by_size", "framework.ops.device", "framework.ops.IndexedSlices", "util.nest.flatten", "distribute.cross_device_utils.stitch_values", "util.nest.pack_sequence_as", "distribute.cross_device_utils.split_by_sparsity", "eager.context.executing_eagerly", "<builtin>.enumerate", "<builtin>.len", "platform.tf_logging.info"], "distribute.cross_device_utils.group_by_size": ["platform.tf_logging.warning"], "distribute.cross_device_ops.CollectiveAllReduce._all_reduce_per_replica_values": ["<builtin>.range", "<builtin>.zip", "distribute.distribute_utils.regroup", "eager.context.executing_eagerly", "<builtin>.len", "distribute.cross_device_ops.CollectiveAllReduce._all_reduce", "<builtin>.list"], "distribute.cross_device_ops.CollectiveAllReduce._all_reduce_per_replica_values.thread_fn": ["eager.context.eager_mode", "distribute.cross_device_ops.CollectiveAllReduce._all_reduce"], "distribute.values_util.mark_as_unsaveable": ["framework.ops.get_default_graph", "saved_model.save_context.in_save_context", "framework.ops.inside_function"], "distribute.values.Mirrored": [], "distribute.cross_device_ops.CollectiveAllReduce._batch_all_gather": ["eager.def_function.function", "platform.tf_logging.log_first_n", "distribute.cross_device_ops.CollectiveAllReduce._batch_all_gather.compute_gathered_values", "distribute.distribute_utils.regroup", "eager.context.executing_eagerly", "<builtin>.len"], "distribute.cross_device_ops.CollectiveAllReduce._batch_all_gather.compute_gathered_values": ["framework.ops.name_scope", "<builtin>.len", "<builtin>.range"], "distribute.cross_device_ops.CollectiveAllReduce.__deepcopy__": ["copy.deepcopy", "distribute.cross_device_ops.CollectiveAllReduce.__init__"], "distribute.cross_device_ops.select_cross_device_ops": ["eager.context.context", "client.device_lib.list_local_devices", "framework.ops.executing_eagerly_outside_functions", "distribute.cross_device_ops.NcclAllReduce.__init__", "distribute.cross_device_ops.ReductionToOneDevice.__init__", "<builtin>.any", "distribute.device_util.canonicalize", "<builtin>.len", "framework.kernels.get_registered_kernels_for_op", "platform.tf_logging.warning", "<builtin>.set", "<builtin>.list"], "framework.kernels.get_registered_kernels_for_op": ["framework.kernel_def_pb2.KernelList", "util.compat.as_bytes", "client.pywrap_tf_session.TF_GetBuffer", "client.pywrap_tf_session.TF_GetRegisteredKernelsForOp"], "distribute.cross_device_utils": [], "distribute.cross_device_utils.aggregate_single_gradient_using_copy": ["ops.array_ops.logical_not", "ops.array_ops.is_finite", "ops.array_ops.multiply", "ops.math_ops.add_n", "ops.array_ops.reduce_all", "<builtin>.len"], "ops.array_ops.multiply": [], "ops.array_ops.is_finite": [], "ops.array_ops.reduce_all": [], "ops.array_ops.logical_not": [], "distribute.cross_device_utils.CollectiveKeys.__init__": ["threading.Lock"], "distribute.cross_device_utils.CollectiveKeys.get_group_key": ["<builtin>.hash", "<builtin>.sorted", "<builtin>.tuple"], "distribute.cross_device_utils.CollectiveKeys.get_instance_key": ["<builtin>.ValueError"], "distribute.cross_device_utils.CollectiveKeys.__deepcopy__": ["copy.deepcopy", "distribute.cross_device_utils.CollectiveKeys.__init__"], "distribute.cross_device_utils.CollectiveReplicaLauncher.__init__": ["framework.ops.device", "distribute.cross_device_utils.CollectiveReplicaLauncher._use_ordering_token", "framework.ops.init_scope", "ops.resource_variable_ops.ResourceVariable"], "distribute.cross_device_utils.CollectiveReplicaLauncher._use_ordering_token": ["framework.ops.executing_eagerly_outside_functions"], "ops.resource_variable_ops.ResourceVariable": [], "distribute.cross_device_utils.CollectiveReplicaLauncher._control_input": ["framework.ops.control_dependencies", "distribute.cross_device_utils.CollectiveReplicaLauncher._use_ordering_token", "framework.ops.NullContextmanager"], "distribute.cross_device_utils.CollectiveReplicaLauncher._use_unique_instance_key": ["framework.ops.executing_eagerly_outside_functions"], "distribute.cross_device_utils.CollectiveReplicaLauncher._next_instance_key": ["<builtin>.getattr", "framework.ops.device", "distribute.cross_device_utils.CollectiveReplicaLauncher._use_unique_instance_key", "eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "framework.ops.get_default_graph", "framework.tensor_spec.TensorSpec"], "distribute.cross_device_utils.CollectiveReplicaLauncher._get_ordering_token": ["distribute.cross_device_utils.CollectiveReplicaLauncher._use_ordering_token"], "distribute.cross_device_utils.CollectiveReplicaLauncher.can_order_nccl": ["distribute.cross_device_utils.CollectiveReplicaLauncher._use_ordering_token"], "distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce": ["ops.collective_ops.all_reduce_v2", "distribute.cross_device_utils.CollectiveReplicaLauncher._control_input", "framework.ops.device", "distribute.cross_device_utils.CollectiveReplicaLauncher._next_instance_key", "distribute.cross_device_utils.CollectiveReplicaLauncher._get_ordering_token"], "ops.collective_ops.all_reduce_v2": ["ops.gen_collective_ops.collective_reduce_v2"], "distribute.cross_device_utils.CollectiveReplicaLauncher._all_gather": ["framework.ops.device", "distribute.cross_device_utils.CollectiveReplicaLauncher._next_instance_key", "ops.collective_ops.all_gather_v2", "distribute.cross_device_utils.CollectiveReplicaLauncher._get_ordering_token"], "ops.collective_ops.all_gather_v2": ["ops.gen_collective_ops.collective_gather_v2"], "distribute.cross_device_utils.CollectiveReplicaLauncher.batch_all_reduce": ["<builtin>.zip", "ops.array_ops.concat", "ops.array_ops.reshape", "distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce", "framework.ops.device", "ops.array_ops.split", "eager.context.executing_eagerly", "ops.math_ops.reduce_prod", "ops.array_ops.shape"], "distribute.cross_device_utils.CollectiveReplicaLauncher.all_gather": ["ops.array_ops.concat", "distribute.cross_device_utils.CollectiveReplicaLauncher._all_gather", "ops.array_ops.transpose", "framework.ops.control_dependencies", "ops.math_ops.reduce_max", "<builtin>.range", "ops.array_ops.identity", "ops.array_ops.rank", "ops.array_ops.expand_dims_v2", "framework.ops.device", "distribute.cross_device_utils._pad_util", "eager.context.executing_eagerly", "<builtin>.RuntimeError", "ops.array_ops.shape_v2", "ops.math_ops.range"], "distribute.cross_device_utils._pad_util": ["ops.array_ops.concat", "ops.array_ops.zeros", "ops.array_ops.rank", "ops.array_ops.pad", "ops.array_ops.shape_v2"], "distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce_indexed_slices": ["ops.math_ops.reduce_min", "distribute.cross_device_utils.CollectiveReplicaLauncher._all_gather", "ops.math_ops.reduce_max", "ops.math_ops.equal", "ops.control_flow_ops.cond", "framework.ops.device", "eager.context.executing_eagerly", "<builtin>.RuntimeError", "ops.array_ops.shape"], "distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce_indexed_slices.all_gather_indexed_slices": ["framework.ops.control_dependencies", "distribute.cross_device_utils.CollectiveReplicaLauncher._all_gather", "distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce_indexed_slices.all_gather_with_padding", "framework.ops.IndexedSlices"], "distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce_indexed_slices.all_gather_with_padding": ["ops.array_ops.concat", "distribute.cross_device_utils.CollectiveReplicaLauncher._all_gather", "<builtin>.range", "distribute.cross_device_utils._pad_util", "ops.math_ops.reduce_max"], "distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce_indexed_slices.<lambda1>": ["distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce_indexed_slices.all_gather_indexed_slices"], "distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce_indexed_slices.<lambda2>": ["distribute.cross_device_utils.CollectiveReplicaLauncher.all_reduce_indexed_slices.all_gather_indexed_slices"], "eager.backprop.aggregate_indexed_slices_gradients": ["<builtin>.isinstance", "ops.array_ops.concat", "framework.ops.IndexedSlices", "<builtin>.len", "ops.math_ops.add_n", "eager.backprop.flatten_nested_indexed_slices", "<builtin>.any", "ops.math_ops._as_indexed_slices_list"], "eager.backprop.flatten_nested_indexed_slices": ["framework.ops.IndexedSlices", "ops.array_ops.gather", "eager.backprop.flatten_nested_indexed_slices", "<builtin>.isinstance"], "distribute.cross_device_utils.is_indexed_slices": ["<builtin>.all", "<builtin>.isinstance"], "distribute.device_util": [], "distribute.device_util.current": ["eager.context.context", "framework.ops.get_default_graph", "framework.ops.executing_eagerly_outside_functions", "distribute.device_util._FakeOperation.__init__"], "distribute.device_util._FakeNodeDef.__init__": [], "distribute.device_util._FakeOperation.__init__": ["distribute.device_util._FakeNodeDef.__init__"], "distribute.device_util._FakeOperation._set_device": ["framework.ops._device_string"], "framework.ops._device_string": ["framework.device.is_device_spec"], "distribute.device_util._FakeOperation._set_device_from_string": [], "distribute.distribute_config": [], "distribute.distribute_config.DistributeConfig.__new__": ["<builtin>.super"], "distribute.distribute_coordinator": ["threading.local"], "distribute.distribute_coordinator._Barrier.__init__": ["threading.Condition", "threading.Lock", "threading.local"], "distribute.distribute_coordinator._Barrier.wait": [], "distribute.distribute_coordinator._get_num_workers": ["<builtin>.len"], "distribute.distribute_coordinator._WorkerContext.__init__": ["distribute.distribute_coordinator._WorkerContext._is_chief", "distribute.distribute_coordinator._WorkerContext._get_master_target", "distribute.distribute_coordinator._get_num_workers"], "distribute.distribute_coordinator._WorkerContext._get_master_target": [], "distribute.distribute_coordinator._WorkerContext._is_chief": [], "distribute.distribute_coordinator._WorkerContext._debug_message": [], "distribute.distribute_coordinator._WorkerContext.__enter__": ["<builtin>.ValueError", "distribute.distribute_coordinator_context.get_current_worker_context", "distribute.distribute_coordinator._WorkerContext._debug_message"], "distribute.distribute_coordinator_context.get_current_worker_context": [], "distribute.distribute_coordinator._WorkerContext.__exit__": [], "distribute.distribute_coordinator._WorkerContext.wait_for_other_workers": [], "distribute.distribute_coordinator._WorkerContext.session_creator": ["training.monitored_session.ChiefSessionCreator", "platform.tf_logging.info", "training.monitored_session.WorkerSessionCreator", "copy.deepcopy"], "distribute.distribute_coordinator._WorkerContext.session_config": ["copy.deepcopy"], "distribute.distribute_coordinator._WorkerContext.has_barrier": [], "distribute.distribute_coordinator._WorkerContext.distributed_mode": ["<builtin>.bool"], "distribute.distribute_coordinator._WorkerContext.cluster_spec": ["copy.deepcopy"], "distribute.distribute_coordinator._WorkerContext.task_type": [], "distribute.distribute_coordinator._WorkerContext.task_id": [], "distribute.distribute_coordinator._WorkerContext.master_target": [], "distribute.distribute_coordinator._WorkerContext.is_chief": [], "distribute.distribute_coordinator._WorkerContext.num_workers": [], "distribute.distribute_coordinator._WorkerContext.experimental_should_init": [], "distribute.distribute_coordinator._WorkerContext.should_checkpoint": [], "distribute.distribute_coordinator._WorkerContext.should_save_summary": [], "distribute.distribute_coordinator._run_single_worker": ["distribute.distribute_coordinator._WorkerContext.__init__", "copy.deepcopy"], "distribute.distribute_coordinator._split_cluster_for_evaluator": ["distribute.multi_worker_util.normalize_cluster_spec"], "distribute.distribute_coordinator._run_std_server": ["training.server_lib.Server", "distribute.distribute_coordinator._run_std_server._FakeServer.start", "<builtin>.repr", "distribute.distribute_coordinator._split_cluster_for_evaluator", "<builtin>.getattr", "platform.tf_logging.info"], "distribute.distribute_coordinator._run_std_server._FakeServer.start": ["platform.tf_logging.info", "client.session.Session"], "distribute.distribute_coordinator._run_std_server._FakeServer.join": ["time.sleep"], "distribute.distribute_coordinator._run_between_graph_client": ["<builtin>.len", "<builtin>.range", "distribute.distribute_coordinator._Barrier.__init__", "training.coordinator.Coordinator", "threading.Thread", "distribute.distribute_coordinator._get_num_workers"], "training.coordinator.Coordinator": ["contextlib.contextmanager"], "distribute.distribute_coordinator._run_in_graph_client": ["training.coordinator.Coordinator", "threading.Thread", "distribute.distribute_coordinator._run_single_worker"], "distribute.distribute_coordinator._configure_session_config_for_std_servers": ["copy.deepcopy"], "distribute.distribute_coordinator.run_standard_tensorflow_server": ["<builtin>.ValueError", "distribute.multi_worker_util.normalize_cluster_spec", "distribute.distribute_coordinator._run_std_server._FakeServer.start", "<builtin>.int", "distribute.distribute_coordinator._run_std_server", "json.loads", "protobuf.config_pb2.ConfigProto", "os.environ.get"], "distribute.distribute_coordinator.run_distribute_coordinator": ["<builtin>.ValueError", "distribute.distribute_coordinator._run_between_graph_client", "platform.tf_logging.warning", "distribute.multi_worker_util.normalize_cluster_spec", "distribute.distribute_coordinator._configure_session_config_for_std_servers", "<builtin>.int", "distribute.distribute_coordinator._run_in_graph_client", "json.loads", "protobuf.config_pb2.ConfigProto", "distribute.distribute_coordinator._run_std_server", "distribute.distribute_coordinator._run_single_worker", "distribute.distribute_coordinator._WorkerContext.__init__", "<builtin>.getattr", "platform.tf_logging.info", "distribute.distribute_coordinator._run_std_server._FakeServer.join", "<builtin>.hasattr", "os.environ.get"], "distribute.distribute_coordinator_context": ["threading.local"], "distribute.distribute_lib": ["eager.monitoring.StringGauge", "eager.monitoring.IntGauge", "eager.monitoring.Counter", "threading.local", "util.tf_export.tf_export"], "distribute.distribute_lib.get_update_replica_id": [], "distribute.distribute_lib.UpdateContext.__init__": [], "distribute.distribute_lib.UpdateContext.__enter__": ["distribute.distribute_lib.get_update_replica_id"], "distribute.distribute_lib.UpdateContext.__exit__": [], "distribute.distribute_lib.get_loss_reduction": ["framework.ops.get_default_graph", "distribute.distribution_strategy_context.get_strategy"], "distribute.distribute_lib._require_cross_replica_or_default_context_extended": ["<builtin>.RuntimeError", "distribute.distribute_lib.StrategyExtendedV2._container_strategy", "distribute.distribution_strategy_context._get_default_replica_mode", "distribute.distribution_strategy_context._get_per_thread_mode", "distribute.distribute_lib._wrong_strategy_scope"], "distribute.distribution_strategy_context._get_per_thread_mode": ["framework.ops.get_default_graph", "distribute.distribution_strategy_context._get_default_replica_mode"], "distribute.distribution_strategy_context._get_default_replica_mode": ["distribute.distribution_strategy_context._DefaultReplicaThreadMode.__init__"], "distribute.distribute_lib.StrategyExtendedV2._container_strategy": [], "distribute.distribute_lib._wrong_strategy_scope": ["<builtin>.RuntimeError", "distribute.distribution_strategy_context.has_strategy"], "distribute.distribute_lib.require_replica_context": ["distribute.distribution_strategy_context._get_per_thread_mode", "<builtin>.RuntimeError"], "distribute.distribute_lib._require_strategy_scope_strategy": ["distribute.distribution_strategy_context._get_per_thread_mode", "distribute.distribute_lib._wrong_strategy_scope"], "distribute.distribute_lib._require_strategy_scope_extended": ["distribute.distribution_strategy_context._get_per_thread_mode", "distribute.distribute_lib.StrategyExtendedV2._container_strategy", "distribute.distribute_lib._wrong_strategy_scope"], "distribute.distribute_lib._CurrentDistributionContext.__init__": ["distribute.distribution_strategy_context._CrossReplicaThreadMode", "framework.ops.device"], "distribute.distribution_strategy_context._CrossReplicaThreadMode": [], "distribute.distribute_lib._CurrentDistributionContext.__enter__": ["util.nest.map_structure", "distribute.distribution_strategy_context.has_strategy", "distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.distribution_strategy_context._push_per_thread_mode"], "distribute.distribution_strategy_context._push_per_thread_mode": ["framework.ops.get_default_graph"], "distribute.distribute_lib._CurrentDistributionContext.__enter__.<lambda1>": [], "distribute.distribute_lib._CurrentDistributionContext.__exit__": ["six.raise_from", "<builtin>.RuntimeError", "distribute.distribution_strategy_context._pop_per_thread_mode"], "six.raise_from": [], "distribute.distribution_strategy_context._pop_per_thread_mode": ["framework.ops.get_default_graph"], "distribute.distribute_lib.InputContext.__init__": [], "distribute.distribute_lib.InputContext.num_replicas_in_sync": [], "distribute.distribute_lib.InputContext.input_pipeline_id": [], "distribute.distribute_lib.InputContext.num_input_pipelines": [], "distribute.distribute_lib.InputContext.get_per_replica_batch_size": ["<builtin>.ValueError"], "distribute.distribute_lib.InputContext.__str__": [], "distribute.distribute_lib.ValueContext.__init__": [], "distribute.distribute_lib.ValueContext.num_replicas_in_sync": [], "distribute.distribute_lib.ValueContext.replica_id_in_sync_group": [], "distribute.distribute_lib.ValueContext.__str__": [], "distribute.distribute_lib.RunOptions.__new__": ["<builtin>.super"], "distribute.distribute_lib.InputOptions.__new__": ["<builtin>.super"], "distribute.distribute_lib.StrategyBase.__init__": ["<builtin>.hasattr", "<builtin>.len"], "distribute.distribute_lib.StrategyBase.extended": [], "distribute.distribute_lib.StrategyBase": ["util.tf_contextlib.contextmanager", "util.deprecation.deprecated", "docs.doc_controls.do_not_generate_docs", "docs.doc_controls.do_not_doc_inheritable"], "distribute.distribute_lib.StrategyBase._scale_loss_for_estimator_enabled": [], "distribute.distribute_lib.StrategyBase.scope": [], "distribute.distribute_lib.StrategyBase.colocate_vars_with": [], "distribute.distribute_lib.StrategyBase.make_dataset_iterator": [], "distribute.distribute_lib.StrategyBase.make_input_fn_iterator": ["distribute.distribute_lib.StrategyBase.scope", "<builtin>.ValueError"], "distribute.distribute_lib.StrategyBase.experimental_run": ["distribute.distribute_lib.StrategyBase.run", "distribute.distribute_lib.StrategyBase.scope"], "distribute.distribute_lib.StrategyBase.run": ["<builtin>.ValueError", "<builtin>.isinstance", "impl.api.tf_convert", "<builtin>.type", "core.ag_ctx.control_status_ctx", "distribute.distribute_lib.StrategyBase.scope"], "distribute.distribute_lib.StrategyBase.experimental_distribute_dataset": [], "distribute.distribute_lib.StrategyBase.distribute_datasets_from_function": [], "distribute.distribute_lib.StrategyBase.experimental_distribute_datasets_from_function": ["distribute.distribute_lib.StrategyBase.distribute_datasets_from_function"], "distribute.distribute_lib.StrategyBase.reduce": ["ops.math_ops.cast", "eager.def_function.function", "<builtin>.TypeError", "eager.context.executing_eagerly", "<builtin>.isinstance", "distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.reduce_util.ReduceOp", "distribute.distribute_lib.StrategyBase.run", "ops.math_ops.truediv"], "distribute.reduce_util.ReduceOp": [], "distribute.distribute_lib.StrategyBase.reduce.reduce_sum": ["ops.math_ops.reduce_sum"], "distribute.distribute_lib.StrategyBase.reduce.reduce_sum_fn": ["distribute.distribute_lib.StrategyBase.run"], "distribute.distribute_lib.StrategyBase.reduce.mean_reduce_helper": ["ops.math_ops.reduce_sum", "<builtin>.TypeError", "<builtin>.isinstance", "distribute.distribute_lib.StrategyBase.reduce.mean_reduce_helper.dimension", "ops.math_ops.reduce_prod"], "distribute.distribute_lib.StrategyBase.reduce.mean_reduce_helper.dimension": ["<builtin>.ValueError", "framework.tensor_shape.dimension_value", "framework.constant_op.constant", "ops.array_ops.identity", "ops.array_ops.rank", "ops.array_ops.shape_v2"], "distribute.distribute_lib.StrategyBase.reduce.mean_reduce_fn": ["distribute.distribute_lib.StrategyBase.run"], "distribute.distribute_lib.StrategyBase.unwrap": [], "distribute.distribute_lib.StrategyBase.experimental_local_results": [], "distribute.distribute_lib.StrategyBase.group": [], "distribute.distribute_lib.StrategyBase.num_replicas_in_sync": [], "distribute.distribute_lib.StrategyBase.configure": [], "distribute.distribute_lib.StrategyBase.update_config_proto": [], "distribute.distribute_lib.StrategyBase.__deepcopy__": ["<builtin>.setattr", "<builtin>.id", "weakref.ref", "copy.deepcopy"], "distribute.distribute_lib.StrategyBase.__copy__": ["<builtin>.RuntimeError"], "distribute.distribute_lib.StrategyBase.cluster_resolver": ["<builtin>.hasattr"], "distribute.distribute_lib.Strategy.experimental_distribute_values_from_function": [], "distribute.distribute_lib.Strategy.gather": ["distribute.device_util.current", "<builtin>.isinstance", "distribute.distribute_lib._require_cross_replica_or_default_context_extended", "<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyV1.make_dataset_iterator": [], "distribute.distribute_lib.StrategyV1.make_input_fn_iterator": ["<builtin>.super"], "distribute.distribute_lib.StrategyV1.experimental_make_numpy_dataset": [], "distribute.distribute_lib.StrategyV1": ["util.deprecation.deprecated"], "distribute.distribute_lib.StrategyV1.experimental_run": ["<builtin>.super"], "distribute.distribute_lib.StrategyV1.reduce": ["<builtin>.super"], "distribute.distribute_lib.StrategyV1.update_config_proto": [], "distribute.distribute_lib.StrategyExtendedV2.__init__": ["weakref.ref"], "distribute.distribute_lib.StrategyExtendedV2._resource_creator_scope": [], "distribute.distribute_lib.StrategyExtendedV2._scope": ["ops.variable_scope.get_variable_scope", "distribute.distribute_lib._CurrentDistributionContext.__init__", "ops.variable_scope.variable_creator_scope", "ops.variable_scope.variable_scope"], "distribute.distribute_lib.StrategyExtendedV2._scope.creator_with_resource_vars": ["distribute.distribute_lib.StrategyExtendedV2._create_variable", "<builtin>.isinstance", "distribute.distribute_lib._require_strategy_scope_extended"], "distribute.distribute_lib.StrategyExtendedV2._create_variable": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._scope.distributed_getter": ["distribute.distribute_lib.StrategyExtendedV2._allow_variable_partition", "platform.tf_logging.log_first_n"], "distribute.distribute_lib.StrategyExtendedV2._allow_variable_partition": [], "distribute.distribute_lib.StrategyExtendedV2.variable_created_in_scope": [], "distribute.distribute_lib.StrategyExtendedV2.colocate_vars_with": ["distribute.distribute_lib.StrategyExtendedV2._validate_colocate_with_variable", "distribute.distribute_lib._require_strategy_scope_extended", "ops.variable_scope.variable_creator_scope"], "distribute.distribute_lib.StrategyExtendedV2.colocate_vars_with.create_colocated_variable": ["distribute.distribute_lib._require_strategy_scope_extended"], "distribute.distribute_lib.StrategyExtendedV2._validate_colocate_with_variable": [], "distribute.distribute_lib.StrategyExtendedV2._make_dataset_iterator": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._make_input_fn_iterator": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._experimental_distribute_dataset": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._distribute_datasets_from_function": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._experimental_distribute_values_from_function": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._reduce": ["distribute.distribute_lib.StrategyExtendedV2._local_results", "distribute.device_util.current", "distribute.distribute_lib.StrategyExtendedV2.reduce_to"], "distribute.distribute_lib.StrategyExtendedV2.reduce_to": ["distribute.distribute_lib.StrategyExtendedV2._reduce_to", "<builtin>.isinstance", "distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.reduce_util.ReduceOp", "distribute.collective_util.Options"], "distribute.distribute_lib.StrategyExtendedV2._local_results": ["<builtin>.len", "util.nest.is_nested", "util.nest.map_structure", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.range"], "distribute.distribute_lib.StrategyExtendedV2._reduce_to": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2.batch_reduce_to": ["<builtin>.isinstance", "distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.reduce_util.ReduceOp", "distribute.collective_util.Options", "distribute.distribute_lib.StrategyExtendedV2._batch_reduce_to"], "distribute.distribute_lib.StrategyExtendedV2._batch_reduce_to": ["distribute.distribute_lib.StrategyExtendedV2.reduce_to"], "distribute.distribute_lib.StrategyExtendedV2._replica_ctx_all_reduce": ["util.nest.pack_sequence_as", "util.nest.flatten", "distribute.collective_util.Options", "distribute.distribution_strategy_context.get_replica_context"], "distribute.distribute_lib.StrategyExtendedV2._replica_ctx_all_reduce.merge_fn": ["distribute.distribute_lib.StrategyExtendedV2.batch_reduce_to"], "distribute.distribute_lib.StrategyExtendedV2._replica_ctx_update": ["<builtin>.ValueError", "distribute.distribution_strategy_context.get_replica_context"], "distribute.distribute_lib.StrategyExtendedV2._replica_ctx_update.merge_fn": ["distribute.distribute_lib.StrategyExtendedV2.update"], "distribute.distribute_lib.StrategyExtendedV2.update": ["distribute.distribute_lib.StrategyExtendedV2._container_strategy", "distribute.distribution_strategy_context.get_replica_context", "distribute.distribute_lib.StrategyExtendedV2._replica_ctx_update", "impl.api.tf_convert", "distribute.distribute_lib.StrategyExtendedV2._update", "core.ag_ctx.control_status_ctx", "distribute.distribution_strategy_context._get_default_replica_context"], "distribute.distribute_lib.StrategyExtendedV2._gather_to": ["distribute.distribute_lib.StrategyExtendedV2._gather_to_implementation", "<builtin>.isinstance", "distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.collective_util.Options"], "distribute.distribute_lib.StrategyExtendedV2._gather_to_implementation": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._batch_gather_to": ["distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.collective_util.Options", "distribute.distribute_lib.StrategyExtendedV2._gather_to"], "distribute.distribution_strategy_context._get_default_replica_context": ["distribute.distribution_strategy_context._get_default_strategy"], "distribute.distribute_lib.StrategyExtendedV2._update": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._local_results.get_values": ["<builtin>.isinstance"], "distribute.distribute_lib.StrategyExtendedV2._local_results.<lambda1>": ["distribute.distribute_lib.StrategyExtendedV2._local_results.get_values"], "distribute.distribute_lib.StrategyExtendedV2.value_container": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._group": ["ops.control_flow_ops.group", "<builtin>.len", "distribute.distribute_lib.StrategyExtendedV2._local_results", "util.nest.flatten", "<builtin>.hasattr"], "distribute.distribute_lib.StrategyExtendedV2.experimental_require_static_shapes": [], "distribute.distribute_lib.StrategyExtendedV2._num_replicas_in_sync": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2.worker_devices": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2.parameter_devices": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV2._configure": [], "distribute.distribute_lib.StrategyExtendedV2._update_config_proto": ["copy.deepcopy"], "distribute.distribute_lib.StrategyExtendedV2._in_multi_worker_mode": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.experimental_make_numpy_dataset": ["distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.distribute_lib.StrategyExtendedV1._experimental_make_numpy_dataset"], "distribute.distribute_lib.StrategyExtendedV1._experimental_make_numpy_dataset": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.broadcast_to": ["distribute.distribute_lib.StrategyExtendedV1._broadcast_to", "<builtin>.isinstance", "distribute.distribute_lib._require_cross_replica_or_default_context_extended"], "distribute.distribute_lib.StrategyExtendedV1._broadcast_to": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1": ["util.deprecation.deprecated"], "distribute.distribute_lib.StrategyExtendedV1.experimental_run_steps_on_iterator": ["distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.distribute_lib.StrategyExtendedV1._experimental_run_steps_on_iterator", "distribute.distribute_lib.StrategyExtendedV2._container_strategy"], "distribute.distribute_lib.StrategyExtendedV1._experimental_run_steps_on_iterator": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.call_for_each_replica": ["distribute.distribute_lib._require_cross_replica_or_default_context_extended", "distribute.distribute_lib.StrategyExtendedV2._container_strategy", "distribute.distribute_lib.StrategyExtendedV1._call_for_each_replica"], "distribute.distribute_lib.StrategyExtendedV1._call_for_each_replica": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.read_var": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.update_non_slot": ["distribute.distribute_lib.StrategyExtendedV2._container_strategy", "distribute.distribute_lib.StrategyExtendedV1._update_non_slot", "distribute.distribute_lib._require_cross_replica_or_default_context_extended", "impl.api.tf_convert", "core.ag_ctx.control_status_ctx"], "distribute.distribute_lib.StrategyExtendedV1._update_non_slot": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.non_slot_devices": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1._use_merge_call": [], "distribute.distribute_lib.StrategyExtendedV1.experimental_between_graph": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.experimental_should_init": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.should_checkpoint": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.StrategyExtendedV1.should_save_summary": ["<builtin>.NotImplementedError"], "distribute.distribute_lib.ReplicaContextBase.__init__": ["framework.tensor_util.is_tf_type", "distribute.distribution_strategy_context._InReplicaThreadMode", "<builtin>.isinstance", "<builtin>.ValueError"], "distribute.distribution_strategy_context._InReplicaThreadMode": [], "distribute.distribute_lib.ReplicaContextBase": ["util.deprecation.deprecated", "docs.doc_controls.do_not_generate_docs"], "distribute.distribute_lib.ReplicaContextBase.__enter__": ["distribute.distribution_strategy_context._push_per_thread_mode"], "distribute.distribute_lib.ReplicaContextBase.__enter__.replica_id_is_zero": ["ops.math_ops.equal", "framework.constant_op.constant"], "distribute.distribute_lib.ReplicaContextBase.__exit__": ["distribute.distribution_strategy_context._pop_per_thread_mode"], "distribute.distribute_lib.ReplicaContextBase.merge_call": ["core.ag_ctx.control_status_ctx", "distribute.distribute_lib.require_replica_context", "impl.api.tf_convert", "distribute.distribute_lib.ReplicaContextBase._merge_call"], "distribute.distribute_lib.ReplicaContextBase._merge_call": ["distribute.distribute_lib.ReplicaContext.all_gather.batch_all_gather", "distribute.distribution_strategy_context._push_per_thread_mode", "distribute.distribution_strategy_context._CrossReplicaThreadMode", "distribute.distribution_strategy_context._pop_per_thread_mode", "distribute.distribute_lib.ReplicaContextBase.all_reduce.batch_all_reduce"], "distribute.distribute_lib.ReplicaContext.all_gather.batch_all_gather": ["distribute.distribute_lib._batch_reduce_destination"], "distribute.distribute_lib.ReplicaContextBase.all_reduce.batch_all_reduce": ["distribute.distribute_lib._batch_reduce_destination"], "distribute.distribute_lib.ReplicaContextBase.num_replicas_in_sync": [], "distribute.distribute_lib.ReplicaContextBase.replica_id_in_sync_group": ["framework.tensor_util.is_tf_type", "framework.constant_op.constant"], "distribute.distribute_lib.ReplicaContextBase._replica_id": [], "distribute.distribute_lib.ReplicaContextBase.strategy": [], "distribute.distribute_lib.ReplicaContextBase.devices": ["distribute.device_util.current", "distribute.distribute_lib.require_replica_context"], "distribute.distribute_lib.ReplicaContextBase.all_reduce": ["<builtin>.isinstance", "util.nest.flatten", "distribute.reduce_util.ReduceOp", "ReduceOp.SUM.upper", "util.nest.pack_sequence_as", "distribute.distribute_lib.ReplicaContextBase.merge_call", "distribute.collective_util.Options", "distribute.distribute_lib.ReplicaContextBase.all_reduce.grad_wrapper"], "ReduceOp.SUM.upper": [], "distribute.distribute_lib._batch_reduce_destination": ["<builtin>.isinstance"], "distribute.distribute_lib.ReplicaContextBase.all_reduce.grad_wrapper": ["distribute.distribute_lib.ReplicaContextBase.merge_call"], "distribute.distribute_lib.ReplicaContextBase.all_reduce.grad_wrapper.<lambda1>": ["distribute.distribute_lib.ReplicaContextBase.all_reduce"], "distribute.distribute_lib.ReplicaContext.all_gather": ["distribute.distribute_lib.ReplicaContext.all_gather.grad_wrapper", "<builtin>.isinstance", "util.nest.flatten", "util.nest.pack_sequence_as", "distribute.collective_util.Options", "<builtin>.NotImplementedError"], "distribute.distribute_lib.ReplicaContext.all_gather.grad_wrapper": ["distribute.distribute_lib.ReplicaContextBase.merge_call"], "distribute.distribute_lib.ReplicaContext.all_gather.grad_wrapper.grad": ["<builtin>.enumerate", "ops.math_ops.reduce_sum", "distribute.distribute_lib.ReplicaContextBase.all_reduce", "distribute.distribute_lib.ReplicaContext.all_gather", "ops.math_ops.range", "ops.array_ops.gather", "ops.array_ops.identity", "ops.array_ops.reshape", "ops.array_ops.shape", "framework.ops.control_dependencies"], "distribute.distribute_lib.ReplicaContext._update": [], "distribute.distribute_lib._DefaultDistributionStrategyV1.__init__": ["<builtin>.RuntimeError", "<builtin>.super", "distribute.distribute_lib._DefaultDistributionExtended.__init__"], "distribute.distribute_lib._DefaultDistributionExtended.__init__": ["<builtin>.super"], "distribute.distribute_lib._DefaultDistributionStrategyV1.__deepcopy__": ["<builtin>.RuntimeError"], "distribute.distribute_lib._DefaultDistributionStrategy.__init__": ["<builtin>.RuntimeError", "<builtin>.super", "distribute.distribute_lib._DefaultDistributionExtended.__init__"], "distribute.distribute_lib._DefaultDistributionStrategy.__deepcopy__": ["<builtin>.RuntimeError"], "distribute.distribute_lib._DefaultDistributionContext.__init__": ["ops.variable_scope.variable_creator_scope"], "distribute.distribute_lib._DefaultDistributionContext.__init__.creator": ["distribute.distribute_lib._require_strategy_scope_strategy"], "distribute.distribute_lib._DefaultDistributionContext.__enter__": ["<builtin>.RuntimeError", "distribute.distribution_strategy_context.has_strategy"], "distribute.distribute_lib._DefaultDistributionContext.__exit__": ["six.raise_from", "<builtin>.RuntimeError"], "distribute.distribute_lib._DefaultDistributionExtended._scope": ["distribute.distribute_lib._DefaultDistributionContext.__init__"], "distribute.distribute_lib._DefaultDistributionExtended.colocate_vars_with": ["framework.ops.colocate_with", "distribute.distribute_lib._require_strategy_scope_extended"], "distribute.distribute_lib._DefaultDistributionExtended.variable_created_in_scope": [], "distribute.distribute_lib._DefaultDistributionExtended._experimental_distribute_dataset": [], "distribute.distribute_lib._DefaultDistributionExtended._distribute_datasets_from_function": ["distribute.distribute_lib.InputContext.__init__"], "distribute.distribute_lib._DefaultDistributionExtended._experimental_distribute_values_from_function": ["distribute.distribute_lib.ValueContext.__init__"], "distribute.distribute_lib._DefaultDistributionExtended._make_dataset_iterator": ["distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator.__init__"], "distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator.__init__": ["eager.context.executing_eagerly", "ops.dataset_ops.make_one_shot_iterator", "ops.dataset_ops.make_initializable_iterator"], "distribute.distribute_lib._DefaultDistributionExtended._make_input_fn_iterator": ["distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator.__init__", "distribute.distribute_lib.InputContext.__init__"], "distribute.distribute_lib._DefaultDistributionExtended._experimental_make_numpy_dataset": ["ops.array_ops.zeros", "util.nest.flatten", "util.nest.pack_sequence_as", "dataset_ops.Dataset.from_tensor_slices", "ops.variable_scope.variable", "<builtin>.zip", "distribute.numpy_dataset.init_var_from_numpy", "<builtin>.tuple"], "distribute.numpy_dataset.init_var_from_numpy": ["numpy.prod", "<builtin>.int", "framework.ops.init_scope", "eager.context.executing_eagerly", "<builtin>.min", "ops.array_ops.placeholder", "numpy.ceil"], "distribute.distribute_lib._DefaultDistributionExtended._broadcast_to": ["<builtin>.NotImplementedError"], "distribute.distribute_lib._DefaultDistributionExtended._call_for_each_replica": ["distribute.distribute_lib.ReplicaContextBase.__init__", "distribute.distribute_lib.StrategyExtendedV2._container_strategy"], "distribute.distribute_lib._DefaultDistributionExtended._reduce_to": [], "distribute.distribute_lib._DefaultDistributionExtended._gather_to_implementation": [], "distribute.distribute_lib._DefaultDistributionExtended._update": ["distribute.distribute_lib._DefaultDistributionExtended._update_non_slot", "<builtin>.tuple"], "distribute.distribute_lib._DefaultDistributionExtended._update_non_slot": ["util.nest.map_structure", "distribute.distribute_lib.UpdateContext.__init__"], "distribute.distribute_lib._DefaultDistributionExtended.read_var": ["ops.array_ops.identity"], "distribute.distribute_lib._DefaultDistributionExtended._local_results": [], "distribute.distribute_lib._DefaultDistributionExtended.value_container": [], "distribute.distribute_lib._DefaultDistributionExtended._num_replicas_in_sync": [], "distribute.distribute_lib._DefaultDistributionExtended.worker_devices": ["<builtin>.RuntimeError"], "distribute.distribute_lib._DefaultDistributionExtended.parameter_devices": ["<builtin>.RuntimeError"], "distribute.distribute_lib._DefaultDistributionExtended.non_slot_devices": ["<builtin>.min"], "distribute.distribute_lib._DefaultDistributionExtended.non_slot_devices.<lambda1>": [], "distribute.distribute_lib._DefaultDistributionExtended._in_multi_worker_mode": [], "distribute.distribute_lib._DefaultDistributionExtended.should_checkpoint": [], "distribute.distribute_lib._DefaultDistributionExtended.should_save_summary": [], "distribute.distribute_lib._DefaultDistributionExtended._get_local_replica_id": [], "distribute.distribute_lib._DefaultDistributionExtended._get_replica_id_in_sync_group": [], "distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator.get_next": [], "distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator.get_next_as_optional": [], "distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator": ["util.deprecation.deprecated"], "distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator.initialize": ["eager.context.executing_eagerly"], "distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator.initializer": ["distribute.distribute_lib._DefaultDistributionExtended.DefaultInputIterator.initialize"], "distribute.distribute_lib._DefaultDistributionExtended._global_batch_size": [], "distribute.distribute_lib._DefaultReplicaContext.replica_id_in_sync_group": [], "distribute.distribute_lib._from_proto_fn": ["ops.resource_variable_ops._from_proto_fn", "distribute.distribution_strategy_context.has_strategy", "<builtin>.NotImplementedError"], "ops.resource_variable_ops._from_proto_fn": ["ops.resource_variable_ops.BaseResourceVariable.from_proto", "variables.Variable.from_proto"], "distribute.distribute_utils": ["distribute.distribute_utils.CachingScopeLocal.__init__", "contextlib.contextmanager"], "distribute.distribute_utils.update_regroup._make_grouped_mirrored": ["<builtin>.all", "distribute.values.Mirrored", "ops.control_flow_ops.group", "ops.array_ops.identity", "framework.tensor_util.is_tf_type", "<builtin>.len", "framework.ops.control_dependencies", "framework.ops.device"], "distribute.distribute_utils.select_replica": ["util.nest.map_structure"], "distribute.distribute_utils.select_replica._get": ["<builtin>.isinstance"], "distribute.distribute_utils.select_replica_mirrored": ["distribute.distribute_utils.assert_mirrored", "distribute.distribute_utils.select_replica"], "distribute.distribute_utils.assert_mirrored": ["util.nest.map_structure"], "distribute.distribute_utils.assert_mirrored._assert_mirrored": ["distribute.distribute_utils.is_mirrored", "<builtin>.TypeError", "<builtin>.isinstance"], "distribute.distribute_utils.is_mirrored": ["<builtin>.isinstance"], "distribute.distribute_utils.update_regroup": ["util.nest.map_structure", "distribute.distribute_utils.regroup"], "distribute.distribute_utils.value_container": ["<builtin>.isinstance", "<builtin>.hasattr"], "distribute.distribute_utils.is_distributed_variable": ["<builtin>.isinstance"], "distribute.distribute_utils._validate_colocate_extended": ["<builtin>.ValueError"], "distribute.distribute_utils.validate_colocate_distributed_variable": ["distribute.distribute_utils._validate_colocate_extended", "<builtin>.isinstance", "<builtin>.ValueError"], "distribute.distribute_utils.validate_colocate": ["distribute.distribute_utils._validate_colocate_extended", "<builtin>.hasattr", "<builtin>.ValueError"], "distribute.distribute_utils._validate_synchronization": ["<builtin>.ValueError", "<builtin>.str"], "distribute.distribute_utils._validate_aggregation": ["<builtin>.ValueError"], "distribute.distribute_utils.create_mirrored_variable": ["distribute.distribute_utils._validate_aggregation", "distribute.distribute_utils._validate_synchronization", "eager.context.executing_eagerly", "framework.ops.add_to_collections", "ops.control_flow_ops.no_op", "<builtin>.hasattr", "<builtin>.enumerate", "eager.tape.stop_recording", "framework.ops.get_default_graph", "<builtin>.getattr"], "eager.tape.stop_recording": ["python.pywrap_tfe.TFE_Py_TapeSetStopOnThread", "python.pywrap_tfe.TFE_Py_TapeSetRestartOnThread", "python.pywrap_tfe.TFE_Py_TapeSetIsStopped"], "framework.ops.add_to_collections": ["framework.ops.get_default_graph", "framework.ops.Graph.add_to_collections"], "distribute.distribute_utils.is_sync_on_read": ["<builtin>.isinstance"], "distribute.distribute_utils.CachingScopeLocal.__init__": ["<builtin>.super"], "distribute.distribute_utils.CachingScopeLocal.enter_scope": [], "distribute.distribute_utils.CachingScopeLocal.exit_scope": [], "distribute.distribute_utils.CachingScopeLocal.in_caching_scope": [], "distribute.distribute_utils.cache_variable_reads": ["distribute.distribute_utils.CachingScopeLocal.enter_scope", "distribute.distribute_utils.CachingScopeLocal.in_caching_scope", "distribute.distribute_utils.CachingScopeLocal.exit_scope", "<builtin>.ValueError"], "distribute.distribution_strategy_context": ["<builtin>.globals", "util.tf_export.tf_export", "util.lazy_loader.LazyLoader", "threading.Lock", "contextlib.contextmanager", "threading.local"], "distribute.distribution_strategy_context._ThreadMode.__init__": [], "distribute.distribution_strategy_context._CrossReplicaThreadMode.__init__": ["distribute.distribution_strategy_context._ThreadMode.__init__"], "distribute.distribution_strategy_context._InReplicaThreadMode.__init__": ["distribute.distribution_strategy_context._ThreadMode.__init__"], "distribute.distribution_strategy_context._DefaultReplicaThreadMode.__init__": ["distribute.distribution_strategy_context._get_default_replica_context", "distribute.distribution_strategy_context._ThreadMode.__init__", "distribute.distribution_strategy_context._get_default_strategy"], "distribute.distribution_strategy_context._get_default_strategy": ["python.tf2.enabled"], "distribute.distribution_strategy_context.in_variable_sync_on_read_context": [], "distribute.distribution_strategy_context.get_cross_replica_context": ["distribute.distribution_strategy_context._get_per_thread_mode"], "distribute.distribution_strategy_context.get_strategy_and_replica_context": ["distribute.distribution_strategy_context._get_per_thread_mode"], "distribute.distribution_strategy_context.experimental_set_strategy": ["framework.ops.get_default_graph", "distribute.distribution_strategy_context.has_strategy", "<builtin>.RuntimeError"], "distribute.distribution_strategy_context.enter_or_assert_strategy": ["distribute.distribution_strategy_context.has_strategy", "distribute.distribution_strategy_context._assert_strategy"], "distribute.distribution_strategy_context._assert_strategy": ["distribute.distribution_strategy_context.has_strategy", "distribute.distribution_strategy_context.get_strategy", "<builtin>.RuntimeError"], "distribute.estimator_training": [], "distribute.estimator_training._count_ps": ["<builtin>.RuntimeError", "<builtin>.len"], "distribute.estimator_training._count_worker": ["<builtin>.RuntimeError", "<builtin>.len"], "distribute.estimator_training._get_global_id": ["<builtin>.RuntimeError", "<builtin>.len", "<builtin>.sorted"], "distribute.estimator_training._init_run_config_from_worker_context": ["distribute.estimator_training._get_global_id", "distribute.estimator_training._count_ps", "training.server_lib.ClusterSpec", "distribute.estimator_training._count_worker"], "distribute.estimator_training.init_run_config": ["<builtin>.ValueError", "platform.tf_logging.info", "training.server_lib.ClusterSpec"], "distribute.estimator_training.should_run_distribute_coordinator": ["<builtin>.isinstance", "platform.tf_logging.info", "platform.tf_logging.warning", "<builtin>.hasattr"], "distribute.estimator_training.train_and_evaluate": ["<builtin>.ValueError", "distribute.distribute_coordinator.run_distribute_coordinator"], "distribute.estimator_training.train_and_evaluate._worker_fn": ["<builtin>.str", "platform.tf_logging.info", "<builtin>.list", "<builtin>.vars", "distribute.distribute_coordinator_context.get_current_worker_context", "distribute.estimator_training._init_run_config_from_worker_context", "copy.deepcopy"], "<builtin>.vars": [], "distribute.estimator_training.train_and_evaluate._eval_fn": ["<builtin>.str", "platform.tf_logging.info", "<builtin>.vars", "distribute.distribute_coordinator_context.get_current_worker_context", "distribute.estimator_training._init_run_config_from_worker_context", "copy.deepcopy"], "distribute.estimator_training.estimator_train": ["<builtin>.ValueError", "distribute.multi_worker_util.normalize_cluster_spec", "distribute.distribute_coordinator.run_distribute_coordinator"], "distribute.estimator_training.estimator_train._worker_fn": ["<builtin>.str", "platform.tf_logging.info", "<builtin>.vars", "distribute.distribute_coordinator_context.get_current_worker_context", "distribute.estimator_training._init_run_config_from_worker_context", "copy.deepcopy"], "distribute.estimator_training.estimator_evaluate": ["<builtin>.ValueError", "distribute.multi_worker_util.normalize_cluster_spec", "distribute.distribute_coordinator.run_distribute_coordinator"], "distribute.estimator_training.estimator_evaluate._worker_fn": ["<builtin>.str", "platform.tf_logging.info", "<builtin>.vars", "distribute.distribute_coordinator_context.get_current_worker_context", "distribute.estimator_training._init_run_config_from_worker_context", "copy.deepcopy"], "distribute.input_lib": [], "distribute.input_lib.DistributedDataset.__init__": ["distribute.input_lib.DistributedDataset.build", "<builtin>.super", "distribute.input_lib._create_distributed_tensor_spec", "<builtin>.ValueError"], "distribute.input_lib.DistributedDatasetV1.__init__": ["<builtin>.super"], "distribute.input_lib.DistributedDatasetsFromFunction.__init__": ["<builtin>.len", "<builtin>.super", "distribute.input_lib.DistributedDatasetsFromFunction.build", "<builtin>.ValueError"], "distribute.input_lib.DistributedIteratorSpec.__init__": ["<builtin>.super"], "distribute.input_lib.DistributedIteratorInterface.get_next": ["<builtin>.NotImplementedError"], "distribute.input_lib.DistributedIteratorInterface.element_spec": ["<builtin>.NotImplementedError"], "distribute.input_lib.DistributedIteratorInterface.get_next_as_optional": ["<builtin>.NotImplementedError"], "distribute.input_lib.DistributedDatasetInterface.__iter__": ["<builtin>.NotImplementedError"], "distribute.input_lib.DistributedDatasetInterface.element_spec": ["<builtin>.NotImplementedError"], "distribute.input_lib.DistributedDatasetInterface": ["docs.doc_controls.do_not_generate_docs"], "distribute.input_lib.DistributedDatasetInterface.reduce": ["<builtin>.NotImplementedError"], "distribute.input_lib.InputWorkers.__init__": ["distribute.device_util.canonicalize_without_job_and_task", "distribute.device_util.canonicalize", "<builtin>.tuple"], "distribute.input_lib.InputWorkers.num_workers": ["<builtin>.len"], "distribute.input_lib.InputWorkers.worker_devices": [], "distribute.input_lib.InputWorkers.compute_devices_for_worker": [], "distribute.input_lib.InputWorkers.__repr__": ["<builtin>.range", "<builtin>.len"], "distribute.input_lib.InputWorkers.serialize": [], "distribute.input_lib.InputWorkers.deserialize": ["distribute.input_lib.InputWorkers.__init__"], "distribute.input_lib._get_next_as_optional": ["ops.math_ops.cast", "distribute.values.PerReplica", "distribute.distribution_strategy_context.get_replica_context", "distribute.input_lib._create_per_replica", "<builtin>.len", "<builtin>.getattr", "ops.array_ops.reshape", "distribute.distribution_strategy_context.enter_or_assert_strategy", "<builtin>.enumerate", "framework.ops.device", "<builtin>.ValueError"], "distribute.input_lib._create_per_replica": ["distribute.distribute_utils.regroup", "distribute.input_lib._always_wrap"], "distribute.input_lib._is_statically_shaped": ["<builtin>.isinstance", "util.nest.flatten"], "distribute.input_lib.DistributedIteratorBase.__init__": ["<builtin>.isinstance", "<builtin>.ValueError"], "distribute.input_lib.DistributedIteratorBase.next": ["distribute.input_lib.DistributedIteratorBase.__next__"], "distribute.input_lib.DistributedIteratorBase.__next__": ["distribute.input_lib.DistributedIteratorBase.get_next"], "distribute.input_lib.DistributedIteratorBase.get_next": ["device.DeviceSpec.from_string", "distribute.distribution_strategy_context.get_replica_context", "distribute.input_lib._create_per_replica", "ops.control_flow_ops.cond", "distribute.input_lib._get_next_as_optional", "distribute.distribution_strategy_context.enter_or_assert_strategy", "<builtin>.enumerate", "framework.ops.device", "<builtin>.ValueError"], "distribute.input_lib.DistributedIteratorBase.__iter__": [], "distribute.input_lib.DistributedIteratorBase.get_next_as_optional": ["ops.control_flow_ops.cond", "distribute.input_lib._get_next_as_optional"], "distribute.input_lib.DistributedIteratorBase.get_next_as_optional.return_none": ["optional_ops.Optional.empty"], "optional_ops.Optional.empty": [], "distribute.input_lib.DistributedIteratorBase.get_next_as_optional.<lambda1>": ["optional_ops.Optional.from_value"], "optional_ops.Optional.from_value": [], "distribute.input_lib.DistributedIteratorBase.get_next.out_of_range_fn": [], "distribute.input_lib.DistributedIteratorBase.get_next.<lambda1>": [], "distribute.input_lib.DistributedIteratorBase.get_next.<lambda2>": ["distribute.input_lib.DistributedIteratorBase.get_next.out_of_range_fn"], "distribute.input_lib.DistributedIteratorV1._initializer": ["ops.control_flow_ops.group"], "distribute.input_lib.DistributedIteratorV1": ["util.deprecation.deprecated"], "distribute.input_lib.DistributedIteratorV1.initialize": [], "distribute.input_lib.DistributedIteratorV1.initializer": ["distribute.input_lib.DistributedIteratorV1.initialize"], "distribute.input_lib.DistributedIteratorV1.output_classes": [], "distribute.input_lib.DistributedIteratorV1.output_shapes": [], "distribute.input_lib.DistributedIteratorV1.output_types": [], "distribute.input_lib.DistributedIteratorV1.get_iterator": ["<builtin>.enumerate"], "distribute.input_lib.DistributedIteratorV1.element_spec": [], "distribute.input_lib.DistributedDatasetAndIteratorSpec.__init__": ["<builtin>.getattr", "<builtin>.isinstance", "<builtin>.NotImplementedError"], "distribute.input_lib.DistributedDatasetAndIteratorSpec._serialize": ["<builtin>.id"], "distribute.input_lib.DistributedDatasetAndIteratorSpec._deserialize": ["<builtin>.type", "<builtin>.ValueError"], "distribute.input_lib.DistributedDatasetAndIteratorSpec.sanity_check_type": ["<builtin>.type", "<builtin>.ValueError"], "distribute.input_lib.DistributedIteratorSpec.value_type": [], "distribute.input_lib.DistributedIteratorSpec.most_specific_compatible_type": ["util.nest.map_structure", "distribute.input_lib.DistributedIteratorSpec.__init__", "distribute.input_lib.DistributedDatasetAndIteratorSpec.sanity_check_type"], "distribute.input_lib.DistributedIteratorSpec.most_specific_compatible_type.<lambda1>": [], "distribute.input_lib.DistributedIteratorSpec._component_specs": ["util.nest.map_structure", "<builtin>.enumerate", "functools.partial", "distribute.input_lib._SingleWorkerDatasetIteratorSpec.__init__"], "distribute.input_lib._SingleWorkerDatasetIteratorSpec.__init__": ["distribute.distribute_lib.InputOptions", "distribute.device_util.canonicalize_without_job_and_task", "distribute.device_util.canonicalize", "<builtin>.tuple"], "distribute.input_lib.DistributedIteratorSpec._to_components": [], "distribute.input_lib.DistributedIteratorSpec._from_components": ["distribute.input_lib.DistributedIterator.__init__"], "distribute.input_lib.DistributedIterator.__init__": ["<builtin>.super", "<builtin>.ValueError"], "distribute.input_lib.DistributedIteratorSpec.from_value": ["distribute.input_lib.DistributedIteratorSpec.__init__"], "distribute.input_lib.DistributedIteratorSpec._with_tensor_ranks_only": ["util.nest.map_structure", "distribute.input_lib.DistributedIteratorSpec.__init__"], "distribute.input_lib.DistributedIteratorSpec._with_tensor_ranks_only.<lambda1>": [], "distribute.input_lib.DistributedIterator.element_spec": ["util.nest.map_structure"], "distribute.input_lib.DistributedIterator._type_spec": ["distribute.input_lib.DistributedIteratorSpec.__init__"], "distribute.input_lib._IterableInput.__init__": ["<builtin>.isinstance"], "distribute.input_lib._IterableInput.__iter__": ["<builtin>.NotImplementedError"], "distribute.input_lib._IterableInput.reduce": ["<builtin>.iter", "ops.control_flow_ops.while_loop", "distribute.input_lib._get_next_as_optional"], "distribute.input_lib._IterableInput.reduce.cond": [], "distribute.input_lib._IterableInput.reduce.loop_body": ["distribute.input_lib._get_next_as_optional"], "distribute.input_lib.DistributedDatasetSpec.__init__": ["<builtin>.super"], "distribute.input_lib.DistributedDatasetSpec.value_type": [], "distribute.input_lib.DistributedDatasetSpec.most_specific_compatible_type": ["util.nest.map_structure", "distribute.input_lib.DistributedDatasetSpec.__init__", "distribute.input_lib.DistributedDatasetAndIteratorSpec.sanity_check_type"], "distribute.input_lib.DistributedDatasetSpec.most_specific_compatible_type.<lambda1>": [], "distribute.input_lib.DistributedDatasetSpec._component_specs": ["util.nest.map_structure", "<builtin>.enumerate", "functools.partial", "ops.dataset_ops.DatasetSpec"], "distribute.input_lib.DistributedDatasetSpec._to_components": [], "distribute.input_lib.DistributedDatasetSpec._from_components": ["distribute.input_lib.DistributedDataset.__init__"], "distribute.input_lib.DistributedDatasetSpec.from_value": ["distribute.input_lib.DistributedDatasetSpec.__init__"], "distribute.input_lib.DistributedDataset.build": ["distribute.input_lib.DistributedDataset._create_cloned_datasets_from_dataset", "distribute.input_lib._create_distributed_tensor_spec"], "distribute.input_lib._create_distributed_tensor_spec": ["util.nest.map_structure", "distribute.input_lib._always_wrap", "<builtin>.len"], "distribute.input_lib.DistributedDataset._create_cloned_datasets_from_dataset": ["<builtin>.len", "distribute.input_lib.DistributedDataset._make_rebatch_fn.rebatch_fn", "distribute.input_lib.DistributedDataset._make_rebatch_fn", "<builtin>.enumerate", "ops.distribute.replicate", "framework.ops.device", "distribute.input_ops.auto_shard_dataset"], "distribute.input_lib.DistributedDataset._make_rebatch_fn": ["framework.ops.colocate_with", "ops.distribute.compute_batch_size", "<builtin>.ValueError"], "distribute.input_lib.DistributedDataset._make_rebatch_fn.rebatch_fn": ["sys.exc_info", "framework.ops.colocate_with", "ops.control_flow_ops.cond", "six.reraise", "ops.math_ops.not_equal", "<builtin>.str", "<builtin>.ValueError"], "distribute.input_ops.auto_shard_dataset": ["ops.distribute._AutoShardDataset", "ops.distribute._AutoShardDatasetV1", "<builtin>.isinstance"], "distribute.input_lib.DistributedDataset._make_rebatch_fn.rebatch_fn.apply_rebatch": ["ops.distribute._RebatchDataset", "ops.distribute.batch_sizes_for_worker"], "ops.distribute._RebatchDataset": [], "distribute.input_lib.DistributedDataset._make_rebatch_fn.rebatch_fn.apply_legacy_rebatch": ["ops.distribute._LegacyRebatchDataset"], "ops.distribute._LegacyRebatchDataset": [], "distribute.input_lib.DistributedDataset.__iter__": ["framework.ops.get_default_graph", "eager.context.executing_eagerly", "<builtin>.getattr", "<builtin>.RuntimeError", "distribute.input_lib._create_iterators_per_worker", "distribute.input_lib.DistributedIterator.__init__", "distribute.input_lib.DistributedIteratorBase.__init__", "eager.context.async_wait", "<builtin>.ValueError"], "distribute.input_lib._create_iterators_per_worker": ["distribute.input_lib._SingleWorkerOwnedDatasetIterator.__init__", "<builtin>.len", "<builtin>.isinstance", "python.tf2.enabled", "<builtin>.enumerate", "framework.ops.device", "distribute.input_lib._SingleWorkerDatasetIteratorBase.__init__"], "distribute.input_lib.DistributedDataset.element_spec": ["util.nest.map_structure"], "distribute.input_lib.DistributedDataset._type_spec": ["distribute.input_lib.DistributedDatasetSpec.__init__"], "distribute.input_lib.DistributedDatasetV1.make_one_shot_iterator": ["distribute.input_lib.DistributedDatasetV1._make_one_shot_iterator"], "distribute.input_lib.DistributedDatasetV1._make_one_shot_iterator": ["eager.context.executing_eagerly", "distribute.input_lib.DistributedDatasetV1._get_iterator", "<builtin>.ValueError"], "distribute.input_lib.DistributedDatasetV1._get_iterator": ["distribute.input_lib._create_iterators_per_worker", "distribute.input_lib.DistributedIteratorBase.__init__", "eager.context.executing_eagerly", "eager.context.async_wait"], "distribute.input_lib.DistributedDatasetV1.make_initializable_iterator": ["distribute.input_lib.DistributedDatasetV1._make_initializable_iterator"], "distribute.input_lib.DistributedDatasetV1._make_initializable_iterator": ["eager.context.executing_eagerly", "distribute.input_lib.DistributedDatasetV1._get_iterator", "<builtin>.ValueError"], "distribute.input_lib.DistributedDatasetV1.__iter__": ["framework.ops.get_default_graph", "framework.ops.executing_eagerly_outside_functions", "<builtin>.RuntimeError", "distribute.input_lib.DistributedDatasetV1._get_iterator"], "distribute.input_lib.DistributedDatasetsFromFunctionSpec.__init__": ["<builtin>.super"], "distribute.input_lib.DistributedDatasetsFromFunctionSpec.value_type": [], "distribute.input_lib.DistributedDatasetsFromFunctionSpec._component_specs": ["util.nest.map_structure", "<builtin>.enumerate", "functools.partial", "ops.dataset_ops.DatasetSpec"], "distribute.input_lib.DistributedDatasetsFromFunctionSpec.most_specific_compatible_type": ["util.nest.map_structure", "distribute.input_lib.DistributedDatasetsFromFunctionSpec.__init__", "distribute.input_lib.DistributedDatasetAndIteratorSpec.sanity_check_type"], "distribute.input_lib.DistributedDatasetsFromFunctionSpec.most_specific_compatible_type.<lambda1>": [], "distribute.input_lib.DistributedDatasetsFromFunctionSpec._to_components": [], "distribute.input_lib.DistributedDatasetsFromFunctionSpec._from_components": ["distribute.input_lib.DistributedDatasetsFromFunction.__init__"], "distribute.input_lib.DistributedDatasetsFromFunctionSpec.from_value": ["distribute.input_lib.DistributedDatasetsFromFunctionSpec.__init__"], "distribute.input_lib.DistributedDatasetsFromFunction.build": ["distribute.input_lib._create_datasets_from_function_with_input_context", "distribute.input_lib._create_distributed_tensor_spec"], "distribute.input_lib._create_datasets_from_function_with_input_context": ["<builtin>.enumerate", "framework.ops.device"], "distribute.input_lib.DistributedDatasetsFromFunction.__iter__": ["framework.ops.get_default_graph", "eager.context.executing_eagerly", "<builtin>.getattr", "<builtin>.RuntimeError", "distribute.input_lib._create_iterators_per_worker", "distribute.input_lib.DistributedIterator.__init__", "distribute.input_lib.DistributedIteratorBase.__init__", "framework.ops.executing_eagerly_outside_functions", "eager.context.async_wait", "<builtin>.ValueError"], "distribute.input_lib.DistributedDatasetsFromFunction.element_spec": ["util.nest.map_structure"], "distribute.input_lib.DistributedDatasetsFromFunction._type_spec": ["distribute.input_lib.DistributedDatasetsFromFunctionSpec.__init__"], "distribute.input_lib.DistributedDatasetsFromFunctionV1._make_initializable_iterator": ["distribute.input_lib.DistributedDatasetsFromFunctionV1._get_iterator", "eager.context.executing_eagerly", "<builtin>.ValueError"], "distribute.input_lib.DistributedDatasetsFromFunctionV1._get_iterator": ["distribute.input_lib._create_iterators_per_worker", "distribute.input_lib.DistributedIteratorBase.__init__", "eager.context.executing_eagerly", "eager.context.async_wait"], "distribute.input_lib.DistributedDatasetsFromFunctionV1._make_one_shot_iterator": ["distribute.input_lib.DistributedDatasetsFromFunctionV1._get_iterator", "eager.context.executing_eagerly", "<builtin>.ValueError"], "distribute.input_lib.DistributedDatasetsFromFunctionV1.__iter__": ["distribute.input_lib.DistributedDatasetsFromFunctionV1._get_iterator", "framework.ops.get_default_graph", "framework.ops.executing_eagerly_outside_functions", "<builtin>.RuntimeError"], "distribute.input_lib.InputFunctionIterator.__init__": ["<builtin>.len", "<builtin>.isinstance", "distribute.input_lib._SingleWorkerDatasetIteratorBase.__init__", "<builtin>.callable", "distribute.input_lib._SingleWorkerCallableIterator.__init__", "<builtin>.super", "<builtin>.enumerate", "framework.ops.device", "<builtin>.ValueError"], "distribute.input_lib._SingleWorkerDatasetIteratorBase.__init__": ["distribute.input_lib._SingleWorkerOwnedDatasetIterator._make_iterator", "distribute.input_lib._SingleWorkerDatasetIteratorBase._make_iterator", "distribute.input_lib._SingleWorkerDatasetIterator._make_iterator"], "distribute.input_lib._SingleWorkerCallableIterator.__init__": [], "distribute.input_lib.DatasetIterator.__init__": ["distribute.input_lib.DistributedDatasetV1.__init__", "<builtin>.super", "distribute.input_lib._create_iterators_per_worker"], "distribute.input_lib._dummy_tensor_fn": ["util.nest.map_structure"], "distribute.input_lib._dummy_tensor_fn.create_dummy_tensor": ["framework.sparse_tensor.SparseTensor", "<builtin>.hasattr", "ops.array_ops.zeros", "<builtin>.len", "framework.tensor_shape.TensorShape", "ragged_tensor.RaggedTensor.from_nested_row_splits", "framework.tensor_shape.Dimension", "<builtin>.isinstance"], "distribute.input_lib._recover_shape_fn": ["<builtin>.zip", "util.nest.pack_sequence_as", "framework.sparse_tensor.SparseTensor", "framework.ops.device", "ops.array_ops.stack", "util.nest.flatten", "<builtin>.enumerate", "<builtin>.isinstance"], "distribute.input_lib._SingleWorkerOwnedDatasetIterator._make_iterator": ["distribute.input_lib._SingleWorkerOwnedDatasetIterator._create_owned_multi_device_iterator", "distribute.input_lib._should_use_multi_device_iterator", "<builtin>.iter", "framework.ops.device", "<builtin>.ValueError"], "distribute.input_lib._SingleWorkerDatasetIteratorBase._make_iterator": ["<builtin>.NotImplementedError"], "distribute.input_lib._SingleWorkerDatasetIterator._make_iterator": ["ops.multi_device_iterator_ops.MultiDeviceIterator", "framework.ops.device"], "distribute.input_lib._SingleWorkerDatasetIteratorBase._format_data_list_with_options": [], "distribute.input_lib._SingleWorkerDatasetIteratorBase.get_next": ["distribute.input_lib._should_use_multi_device_iterator", "framework.ops.device"], "distribute.input_lib._should_use_multi_device_iterator": [], "distribute.input_lib._SingleWorkerDatasetIteratorBase.get_next_as_list_static_shapes": ["framework.ops.device", "distribute.input_lib._SingleWorkerDatasetIteratorBase._format_data_list_with_options"], "distribute.input_lib._SingleWorkerDatasetIteratorBase.get_next_as_list": ["eager.context.executing_eagerly", "distribute.input_lib._SingleWorkerDatasetIteratorBase._format_data_list_with_options", "ops.control_flow_ops.cond", "distribute.input_lib._recover_shape_fn", "<builtin>.enumerate", "framework.ops.device"], "distribute.input_lib._SingleWorkerDatasetIteratorBase.get_next_as_list.<lambda1>": [], "distribute.input_lib._SingleWorkerDatasetIteratorBase.get_next_as_list.<lambda2>": ["distribute.input_lib._dummy_tensor_fn"], "distribute.distribute_lib.InputOptions": [], "distribute.input_lib._SingleWorkerDatasetIteratorSpec.value_type": [], "distribute.input_lib._SingleWorkerDatasetIteratorSpec._serialize": [], "distribute.input_lib._SingleWorkerDatasetIteratorSpec._get_multi_device_iterator_spec": ["ops.multi_device_iterator_ops.MultiDeviceIteratorSpec", "distribute.device_util.get_host_for_device", "distribute.device_util.current", "distribute.device_util.canonicalize"], "ops.multi_device_iterator_ops.MultiDeviceIteratorSpec": [], "distribute.input_lib._SingleWorkerDatasetIteratorSpec._component_specs": ["distribute.input_lib._should_use_multi_device_iterator", "distribute.input_lib._SingleWorkerDatasetIteratorSpec._get_multi_device_iterator_spec", "ops.iterator_ops.IteratorSpec"], "distribute.input_lib._SingleWorkerDatasetIteratorSpec._to_components": [], "distribute.input_lib._SingleWorkerDatasetIteratorSpec._from_components": ["distribute.input_lib._SingleWorkerOwnedDatasetIterator.__init__"], "distribute.input_lib._SingleWorkerOwnedDatasetIterator.__init__": ["<builtin>.super", "<builtin>.ValueError"], "distribute.input_lib._SingleWorkerDatasetIteratorSpec.from_value": ["distribute.input_lib._SingleWorkerDatasetIteratorSpec.__init__"], "distribute.input_lib._SingleWorkerOwnedDatasetIterator._create_owned_multi_device_iterator": ["distribute.device_util.get_host_for_device", "distribute.device_util.canonicalize", "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator", "distribute.device_util.current", "framework.ops.device"], "ops.multi_device_iterator_ops.OwnedMultiDeviceIterator": [], "distribute.input_lib._SingleWorkerOwnedDatasetIterator.element_spec": [], "distribute.input_lib._SingleWorkerOwnedDatasetIterator._type_spec": ["distribute.input_lib._SingleWorkerDatasetIteratorSpec.__init__"], "distribute.input_lib._SingleWorkerOwnedDatasetIterator.output_classes": ["util.nest.map_structure"], "distribute.input_lib._SingleWorkerOwnedDatasetIterator.output_classes.<lambda1>": [], "distribute.input_lib._SingleWorkerOwnedDatasetIterator.output_shapes": ["util.nest.map_structure"], "distribute.input_lib._SingleWorkerOwnedDatasetIterator.output_shapes.<lambda1>": [], "distribute.input_lib._SingleWorkerOwnedDatasetIterator.output_types": ["util.nest.map_structure"], "distribute.input_lib._SingleWorkerOwnedDatasetIterator.output_types.<lambda1>": [], "ops.multi_device_iterator_ops.MultiDeviceIterator": [], "distribute.input_lib._SingleWorkerDatasetIterator.initialize": ["framework.ops.executing_eagerly_outside_functions"], "distribute.input_lib._SingleWorkerDatasetIterator.output_classes": ["ops.dataset_ops.get_legacy_output_classes"], "distribute.input_lib._SingleWorkerDatasetIterator.output_shapes": ["ops.dataset_ops.get_legacy_output_shapes"], "distribute.input_lib._SingleWorkerDatasetIterator.output_types": ["ops.dataset_ops.get_legacy_output_types"], "distribute.input_lib._SingleWorkerCallableIterator.get_next": ["framework.ops.device"], "distribute.input_lib._SingleWorkerCallableIterator.get_next_as_list_static_shapes": ["framework.ops.device"], "distribute.input_lib._SingleWorkerCallableIterator.get_next_as_list": ["framework.constant_op.constant", "framework.ops.device"], "distribute.input_lib._SingleWorkerCallableIterator.initialize": [], "distribute.input_lib._get_batched_dataset": ["distribute.input_lib._get_batched_dataset", "<builtin>.isinstance", "<builtin>.ValueError"], "distribute.input_lib._get_batched_dataset_attributes": ["framework.tensor_util.is_tf_type", "<builtin>.isinstance", "framework.tensor_util.constant_value"], "distribute.input_lib.MultiStepContext.__init__": [], "distribute.input_lib.MultiStepContext.last_step_outputs": [], "distribute.input_lib.MultiStepContext._set_last_step_outputs": ["<builtin>.isinstance", "<builtin>.ValueError"], "distribute.input_lib.MultiStepContext.set_last_step_output": ["distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.distribution_strategy_context.get_strategy"], "distribute.input_lib.MultiStepContext.set_last_step_output.merge_fn": [], "distribute.input_lib.MultiStepContext.non_tensor_outputs": [], "distribute.input_lib.MultiStepContext.set_non_tensor_output": ["distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.in_cross_replica_context"], "distribute.input_lib.MultiStepContext.set_non_tensor_output.merge_fn": [], "distribute.input_lib._always_wrap": ["<builtin>.len"], "distribute.input_lib._create_distributed_tensor_spec._get_value_per_replica": ["distribute.values.PerReplicaSpec", "<builtin>.range"], "distribute.values.PerReplicaSpec": ["<builtin>.property"], "distribute.input_lib._replace_per_replica_spec": ["<builtin>.isinstance"], "distribute.input_lib._enable_get_next_as_optional": ["<builtin>.getattr", "eager.context.executing_eagerly", "distribute.input_lib._is_statically_shaped", "framework.ops.device"], "distribute.input_lib._rebatch_as_dynamic": ["util.nest.map_structure", "distribute.values.PerReplicaSpec", "<builtin>.isinstance"], "distribute.input_lib._rebatch_as_dynamic._rebatch": [], "distribute.input_ops": [], "ops.distribute._AutoShardDataset": [], "distribute.input_ops._clone_dataset": ["ops.dataset_ops._VariantDataset", "distribute.input_ops._clone_helper", "util.traverse.obtain_all_variant_tensor_ops"], "distribute.input_ops._clone_helper": ["distribute.input_ops._clone_helper", "framework.ops.get_default_graph", "distribute.input_ops._get_op_def"], "ops.dataset_ops._VariantDataset": [], "distribute.input_ops._get_op_def": ["framework.op_def_registry.get"], "distribute.mirrored_run": ["weakref.WeakKeyDictionary", "contextlib.contextmanager"], "distribute.mirrored_run._is_gpu_device": ["device.DeviceSpec.from_string"], "distribute.mirrored_run.call_for_each_replica": ["weakref.WeakKeyDictionary", "<builtin>.isinstance", "impl.api.tf_convert", "eager.context.executing_eagerly", "core.ag_ctx.control_status_ctx", "functools.partial", "platform.tf_logging.log_first_n", "distribute.mirrored_run._is_gpu_device", "<builtin>.all", "distribute.mirrored_run._call_for_each_replica"], "distribute.mirrored_run._call_for_each_replica": ["distribute.shared_variable_creator.make_fn", "framework.ops.control_dependencies", "<builtin>.all", "<builtin>.len", "ops.variable_scope.variable_scope", "framework.ops.get_default_graph", "<builtin>.tuple", "<builtin>.range", "threading.Thread.start", "<builtin>.set", "<builtin>.RuntimeError", "training.coordinator.Coordinator", "distribute.mirrored_run._MirroredReplicaThread.__init__", "framework.ops.name_scope", "<builtin>.enumerate", "eager.context.executing_eagerly", "<builtin>.any", "distribute.distribute_utils.regroup", "distribute.distribute_utils.select_replica"], "distribute.mirrored_run._enter_graph": ["eager.context.eager_mode"], "distribute.mirrored_run._cpu_device": ["device.DeviceSpec.from_string"], "distribute.shared_variable_creator.make_fn": ["<builtin>.isinstance"], "distribute.mirrored_run._MirroredReplicaThread.__init__": ["python.pywrap_tfe.TFE_ContextGetDevicePlacementPolicy", "eager.context.ensure_initialized", "distribute.mirrored_run._MirroredReplicaThread.record_thread_local_eager_context_state", "eager.context.context", "distribute.mirrored_run._MirroredReplicaThread.record_thread_local_summary_state", "framework.ops.get_default_graph", "eager.context.executing_eagerly", "ops.variable_scope.get_variable_scope", "threading.Event", "framework.ops.init_scope", "<builtin>.super"], "threading.Thread.start": [], "eager.context.ensure_initialized": ["eager.context.context"], "distribute.mirrored_run._MirroredReplicaThread.record_thread_local_summary_state": [], "distribute.mirrored_run._MirroredReplicaThread.record_thread_local_eager_context_state": ["eager.context.context"], "python.pywrap_tfe.TFE_ContextGetDevicePlacementPolicy": [], "distribute.mirrored_run._MirroredReplicaThread.run": ["framework.ops.device", "distribute_lib.ReplicaContext.__init__", "framework.ops.name_scope", "ops.variable_scope.variable_scope", "distribute.mirrored_run._MirroredReplicaThread.restore_thread_local_summary_state", "distribute.mirrored_run._enter_graph", "distribute.mirrored_run._MirroredReplicaThread.restore_thread_local_eager_context_state", "eager.context.device_policy", "ops.variable_scope.variable_creator_scope"], "distribute.mirrored_run._MirroredReplicaThread.restore_thread_local_summary_state": [], "distribute.mirrored_run._MirroredReplicaThread.restore_thread_local_eager_context_state": ["eager.context.context"], "distribute_lib.ReplicaContext.__init__": [], "distribute.mirrored_run._MirroredReplicaContext._merge_call": ["<builtin>.isinstance", "framework.ops.get_default_graph", "threading.current_thread", "ops.variable_scope.get_variable_scope", "<builtin>.RuntimeError"], "distribute.mirrored_run._MirroredReplicaContext.devices": ["distribute.distribute_lib.require_replica_context"], "distribute.mirrored_strategy": [], "distribute.mirrored_strategy._is_device_list_single_worker": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.all", "<builtin>.any", "device.DeviceSpec.from_string", "<builtin>.ValueError"], "distribute.mirrored_strategy._cluster_spec_to_device_list": ["<builtin>.range", "distribute.multi_worker_util.normalize_cluster_spec", "<builtin>.len"], "distribute.mirrored_strategy._group_device_list": ["distribute.mirrored_strategy._is_device_list_single_worker", "<builtin>.len", "device.DeviceSpec.from_string"], "distribute.mirrored_strategy._is_gpu_device": ["device.DeviceSpec.from_string"], "distribute.mirrored_strategy._infer_num_gpus_per_worker": ["<builtin>.sum", "distribute.mirrored_strategy._is_gpu_device", "distribute.mirrored_strategy._is_device_list_single_worker", "distribute.mirrored_strategy._group_device_list", "device.DeviceSpec.from_string", "<builtin>.ValueError"], "distribute.mirrored_strategy.all_local_devices": ["framework.config.list_logical_devices"], "distribute.mirrored_strategy.all_devices": ["eager.context.num_gpus", "distribute.mirrored_strategy.all_local_devices", "distribute.mirrored_strategy._cluster_spec_to_device_list", "distribute.cluster_resolver.TFConfigClusterResolver"], "distribute.mirrored_strategy.MirroredStrategy.__init__": ["distribute.mirrored_strategy.MirroredExtended.__init__", "distribute_lib.distribution_strategy_gauge.get_cell", "<builtin>.super"], "distribute.mirrored_strategy.MirroredExtended.__init__": ["eager.context.executing_eagerly", "platform.tf_logging.info", "distribute.cluster_resolver.TFConfigClusterResolver", "distribute.mirrored_strategy.all_devices", "distribute.collective_util.Options", "distribute.mirrored_strategy._is_device_list_single_worker", "framework.ops.executing_eagerly_outside_functions", "distribute.mirrored_strategy.MirroredExtended._initialize_strategy", "distribute.mirrored_strategy.all_local_devices", "<builtin>.RuntimeError", "<builtin>.super"], "distribute.mirrored_strategy.MirroredStrategyV1.__init__": ["distribute.mirrored_strategy.MirroredExtended.__init__", "distribute_lib.distribution_strategy_gauge.get_cell", "<builtin>.super"], "distribute.mirrored_strategy.MirroredExtended._initialize_strategy": ["<builtin>.isinstance", "platform.tf_logging.info", "distribute.device_util.resolve", "distribute.mirrored_strategy._is_device_list_single_worker", "distribute.mirrored_strategy.MirroredExtended._initialize_multi_worker", "distribute.mirrored_strategy.MirroredExtended._initialize_single_worker", "<builtin>.len", "<builtin>.set", "<builtin>.tuple", "distribute.mirrored_strategy.MirroredExtended._make_collective_ops"], "distribute.mirrored_strategy.MirroredExtended._use_merge_call": ["ops.control_flow_util.GraphOrParentsInXlaContext", "framework.ops.get_default_graph", "<builtin>.all", "distribute.mirrored_strategy._is_gpu_device"], "distribute.mirrored_strategy.MirroredExtended._initialize_single_worker": ["distribute.cross_device_ops.select_cross_device_ops", "distribute.numpy_dataset.SingleDevice", "distribute.device_util.canonicalize", "device.DeviceSpec.from_string", "<builtin>.tuple"], "distribute.mirrored_strategy.MirroredExtended._make_collective_ops": ["distribute.cross_device_utils.CollectiveKeys", "<builtin>.len", "distribute.cross_device_ops.CollectiveAllReduce"], "distribute.mirrored_strategy.MirroredExtended._initialize_multi_worker": ["<builtin>.isinstance", "distribute.cross_device_ops.NcclAllReduce", "platform.tf_logging.info", "<builtin>.range", "<builtin>.len", "distribute.mirrored_strategy._group_device_list", "distribute.numpy_dataset.SingleDevice", "<builtin>.tuple", "<builtin>.ValueError"], "distribute.cross_device_ops.NcclAllReduce": [], "distribute.mirrored_strategy.MirroredExtended._input_workers_with_options": ["<builtin>.len", "<builtin>.tuple", "distribute.input_lib.InputWorkers", "distribute.device_util.canonicalize"], "distribute.mirrored_strategy.MirroredExtended._input_workers": ["distribute.mirrored_strategy.MirroredExtended._input_workers_with_options"], "distribute.mirrored_strategy.MirroredExtended._get_variable_creator_initial_value": [], "distribute.mirrored_strategy.MirroredExtended._get_variable_creator_initial_value.initial_value_fn": ["eager.context.executing_eagerly", "framework.ops.device", "ops.array_ops.identity", "framework.ops.inside_function"], "distribute.mirrored_strategy.MirroredExtended._create_variable": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.distribute_utils.create_mirrored_variable", "framework.ops.device", "<builtin>.isinstance"], "distribute.mirrored_strategy.MirroredExtended._create_variable._real_mirrored_creator": ["eager.context.device_policy", "<builtin>.isinstance", "eager.tape.stop_recording", "framework.ops.device", "<builtin>.enumerate", "distribute.mirrored_strategy.MirroredExtended._get_variable_creator_initial_value"], "distribute_lib.StrategyExtendedV1._container_strategy": [], "distribute.mirrored_strategy.MirroredExtended._validate_colocate_with_variable": ["distribute.distribute_utils.validate_colocate_distributed_variable"], "distribute.mirrored_strategy.MirroredExtended._make_dataset_iterator": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.input_lib.DatasetIterator"], "distribute.mirrored_strategy.MirroredExtended._make_input_fn_iterator": ["distribute.input_lib.InputFunctionIterator", "distribute_lib.StrategyExtendedV1._container_strategy", "<builtin>.range", "distribute.distribute_lib.InputContext"], "distribute.mirrored_strategy.MirroredExtended._experimental_distribute_dataset": ["<builtin>.NotImplementedError", "distribute.mirrored_strategy.MirroredExtended._input_workers_with_options", "distribute.input_lib.get_distributed_dataset", "distribute_lib.StrategyExtendedV1._container_strategy"], "distribute.mirrored_strategy.MirroredExtended._experimental_make_numpy_dataset": ["distribute.numpy_dataset.one_host_numpy_dataset"], "distribute.numpy_dataset.one_host_numpy_dataset": ["ops.variable_scope.variable_creator_scope", "dataset_ops.Dataset.from_tensor_slices", "distribute.numpy_dataset.init_var_from_numpy", "util.nest.pack_sequence_as", "<builtin>.zip", "ops.variable_scope.variable", "util.nest.flatten", "<builtin>.tuple", "ops.array_ops.zeros"], "distribute.mirrored_strategy.MirroredExtended._distribute_datasets_from_function": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.mirrored_strategy.MirroredExtended._input_workers_with_options", "<builtin>.range", "distribute.distribute_lib.InputContext", "distribute.input_lib.get_distributed_datasets_from_function"], "distribute.mirrored_strategy.MirroredExtended._experimental_distribute_values_from_function": ["<builtin>.range", "distribute.distribute_utils.regroup", "distribute.distribute_lib.ValueContext"], "distribute.mirrored_strategy.MirroredExtended._experimental_run_steps_on_iterator": ["framework.constant_op.constant", "distribute.distribute_utils.regroup", "ops.control_flow_ops.while_loop", "util.nest.flatten", "distribute.input_lib.MultiStepContext", "ops.control_flow_ops.group", "util.nest.pack_sequence_as", "<builtin>.len", "framework.ops.get_default_graph"], "distribute.input_lib.MultiStepContext": [], "distribute.mirrored_strategy.MirroredExtended._experimental_run_steps_on_iterator.body": ["distribute_lib.StrategyExtendedV1._local_results", "util.nest.flatten", "framework.ops.control_dependencies"], "distribute_lib.StrategyExtendedV1._local_results": [], "distribute.mirrored_strategy.MirroredExtended._experimental_run_steps_on_iterator.<lambda1>": [], "distribute.mirrored_strategy.MirroredExtended._broadcast_to": ["<builtin>.isinstance", "distribute.mirrored_strategy.MirroredExtended._get_cross_device_ops"], "distribute.mirrored_strategy.MirroredExtended._get_cross_device_ops": ["distribute.cross_device_ops.ReductionToOneDevice", "framework.dtypes.as_dtype", "<builtin>.isinstance", "distribute.mirrored_strategy.MirroredExtended._use_merge_call"], "distribute.mirrored_strategy.MirroredExtended._call_for_each_replica": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.mirrored_run.call_for_each_replica"], "distribute.mirrored_strategy.MirroredExtended._configure": ["distribute.mirrored_strategy.MirroredExtended._initialize_multi_worker", "distribute.mirrored_strategy._infer_num_gpus_per_worker", "distribute.mirrored_strategy._cluster_spec_to_device_list", "distribute.mirrored_strategy.MirroredExtended._update_config_proto"], "distribute.mirrored_strategy.MirroredExtended._update_config_proto": ["copy.deepcopy"], "distribute.cross_device_ops.ReductionToOneDevice": [], "distribute.mirrored_strategy.MirroredExtended._gather_to_implementation": ["<builtin>.isinstance", "distribute.mirrored_strategy.MirroredExtended._get_cross_device_ops"], "distribute.mirrored_strategy.MirroredExtended._reduce_to": ["distribute.distribute_utils.is_mirrored", "util.nest.map_structure"], "distribute.mirrored_strategy.MirroredExtended._reduce_to.get_values": ["distribute.cross_device_ops.ReductionToOneDevice", "<builtin>.isinstance", "distribute.cross_device_ops._devices_match", "distribute.cross_device_ops.get_devices_from", "distribute.mirrored_strategy.MirroredExtended._get_cross_device_ops", "<builtin>.any", "distribute.mirrored_strategy.MirroredExtended._use_merge_call", "distribute.cross_device_ops.reduce_non_distributed_value"], "distribute.mirrored_strategy.MirroredExtended._batch_reduce_to": ["distribute.mirrored_strategy.MirroredExtended._get_cross_device_ops", "<builtin>.ValueError"], "distribute.mirrored_strategy.MirroredExtended._update": ["<builtin>.isinstance", "distribute.distribute_utils.update_regroup", "framework.ops.name_scope", "distribute.distribute_lib.UpdateContext", "framework.ops.device", "<builtin>.enumerate", "distribute.distribute_utils.select_replica"], "distribute.distribute_lib.UpdateContext": [], "distribute.mirrored_strategy.MirroredExtended._replica_ctx_all_reduce": ["eager.context.executing_eagerly", "distribute.distribution_strategy_context.get_replica_context", "python.tf2.enabled", "distribute.collective_util.Options", "distribute.mirrored_strategy.MirroredExtended._get_cross_device_ops", "distribute.mirrored_strategy.MirroredExtended._use_merge_call", "<builtin>.super"], "distribute.mirrored_strategy.MirroredExtended._replica_ctx_update": ["distribute.distribution_strategy_context.get_replica_context", "<builtin>.isinstance", "framework.ops.name_scope", "framework.ops.device", "distribute.values_util.get_current_replica_id_as_int", "distribute.mirrored_strategy.MirroredExtended._use_merge_call", "<builtin>.super"], "distribute.values_util.get_current_replica_id_as_int": ["distribute.distribution_strategy_context.get_replica_context", "<builtin>.isinstance", "framework.tensor_util.constant_value", "distribute.distribute_lib.get_update_replica_id"], "distribute.mirrored_strategy.MirroredExtended._update_non_slot": ["<builtin>.isinstance", "distribute.distribute_utils.update_regroup", "framework.ops.name_scope", "distribute.distribute_lib.UpdateContext", "framework.ops.device", "<builtin>.enumerate", "distribute.distribute_utils.select_replica"], "distribute.mirrored_strategy.MirroredExtended.read_var": ["ops.array_ops.identity", "distribute.distribute_utils.is_sync_on_read", "distribute.distribute_utils.is_mirrored"], "distribute.mirrored_strategy.MirroredExtended.value_container": ["distribute.distribute_utils.value_container"], "distribute.mirrored_strategy.MirroredExtended._num_replicas_in_sync": ["<builtin>.len"], "distribute.mirrored_strategy.MirroredExtended.worker_devices": [], "distribute.mirrored_strategy.MirroredExtended.worker_devices_by_replica": [], "distribute.mirrored_strategy.MirroredExtended.parameter_devices": [], "distribute.mirrored_strategy.MirroredExtended.experimental_between_graph": [], "distribute.mirrored_strategy.MirroredExtended.experimental_should_init": [], "distribute.mirrored_strategy.MirroredExtended.should_checkpoint": [], "distribute.mirrored_strategy.MirroredExtended.should_save_summary": [], "distribute.mirrored_strategy.MirroredExtended.non_slot_devices": [], "distribute.mirrored_strategy.MirroredExtended._global_batch_size": [], "distribute.mirrored_strategy.MirroredExtended._in_multi_worker_mode": [], "distribute.mirrored_strategy.MirroredExtended._get_local_replica_id": [], "distribute.mirrored_strategy.MirroredExtended._get_replica_id_in_sync_group": [], "distribute.multi_process_lib": ["distribute.multi_process_lib._is_enabled", "context.ForkServerContext.__init__"], "distribute.multi_process_lib.is_oss": ["<builtin>.len"], "distribute.multi_process_lib._is_enabled": ["distribute.multi_process_lib.is_oss", "platform.system"], "distribute.multi_process_lib._AbslProcess.__init__": ["<builtin>.super", "<builtin>.getattr"], "distribute.multi_process_lib._AbslProcess._run_with_absl": ["absl.app.run"], "distribute.multi_process_lib._AbslProcess._run_with_absl.<lambda1>": [], "context.ForkServerContext.__init__": [], "distribute.multi_process_lib.Process.__init__": ["unittest.SkipTest"], "unittest.SkipTest": [], "distribute.multi_process_lib._set_spawn_exe_path": ["distribute.multi_process_lib._set_spawn_exe_path.guess_path", "<builtin>.RuntimeError", "context.ForkServerContext.get_context", "multiprocessing.get_context", "absl.logging.error"], "distribute.multi_process_lib._set_spawn_exe_path.guess_path": ["os.path.join", "absl.logging.info", "os.access"], "absl.logging.error": [], "context.ForkServerContext.get_context": [], "multiprocessing.get_context": [], "distribute.multi_process_lib._if_spawn_run_and_exit": ["sys.argv.index", "sys.exit", "<builtin>.exec"], "sys.argv.index": [], "distribute.multi_process_lib.test_main": ["distribute.multi_process_lib._is_enabled", "distribute.multi_process_lib._if_spawn_run_and_exit", "eager.test.main", "distribute.multi_process_lib._set_spawn_exe_path"], "eager.test.main": [], "distribute.multi_process_lib.initialized": [], "distribute.multi_process_runner": ["collections.namedtuple", "threading.Lock", "util.tf_export.tf_export", "weakref.WeakSet"], "distribute.multi_process_runner.MultiProcessRunner.__init__": ["python.tf2.enabled", "unittest.SkipTest", "framework.test_util.is_tsan_enabled", "<builtin>.len", "<builtin>.callable", "distribute.multi_process_runner.manager", "eager.context.executing_eagerly", "<builtin>.set", "threading.Lock", "distribute.multi_process_runner._check_initialization", "<builtin>.sum", "<builtin>.ValueError", "eager.context.context"], "framework.test_util.is_tsan_enabled": [], "distribute.multi_process_runner._check_initialization": ["distribute.multi_process_lib.initialized"], "distribute.multi_process_runner.manager": ["multi_process_lib.multiprocessing.Manager"], "distribute.multi_process_runner.MultiProcessRunner.set_args": [], "distribute.multi_process_runner.MultiProcessRunner._continuously_readline_from_sub": ["os.fdopen", "<builtin>.print"], "os.fdopen": [], "distribute.multi_process_runner.MultiProcessRunner._start_subprocess_and_reading_thread": ["distribute.multi_process_runner._Process.__init__", "multi_process_lib.multiprocessing.Pipe", "<builtin>.list", "threading.Thread", "<builtin>.range", "dill.dumps", "distribute.multi_worker_util.id_in_cluster", "distribute.multi_worker_util.worker_count", "unittest.SkipTest", "multi_process_lib.Process.start"], "multi_process_lib.multiprocessing.Pipe": [], "dill.dumps": [], "distribute.multi_process_runner._Process.__init__": ["<builtin>.super", "<builtin>.getattr"], "multi_process_lib.Process.start": [], "distribute.multi_process_runner.MultiProcessRunner.start": ["<builtin>.enumerate", "distribute.multi_process_runner.MultiProcessRunner._start_subprocess_and_reading_thread", "<builtin>.ValueError", "signal.alarm", "signal.signal"], "distribute.multi_process_runner.MultiProcessRunner.start.handler": ["distribute.multi_process_runner.MultiProcessRunner.terminate_all"], "distribute.multi_process_runner.MultiProcessRunner.terminate_all": ["distribute.multi_process_runner.MultiProcessRunner._terminate_all"], "signal.alarm": [], "distribute.multi_process_runner.MultiProcessRunner.start_in_process_as": ["distribute.multi_process_runner._set_tf_config", "<builtin>.enumerate", "distribute.multi_process_runner.MultiProcessRunner._start_subprocess_and_reading_thread", "distribute.multi_process_runner.MultiProcessPoolRunner._start.<lambda1>", "<builtin>.ValueError"], "distribute.multi_process_runner._set_tf_config": ["json.dumps"], "distribute.multi_process_runner.MultiProcessPoolRunner._start.<lambda1>": [], "distribute.multi_process_runner.MultiProcessRunner.start_single_process": ["distribute.multi_process_runner.MultiProcessRunner._start_subprocess_and_reading_thread", "<builtin>.ValueError"], "distribute.multi_process_runner.MultiProcessRunner._queue_to_list": [], "distribute.multi_process_runner.MultiProcessRunner._get_process_statuses": ["distribute.multi_process_runner.MultiProcessRunner._queue_to_list"], "distribute.multi_process_runner.MultiProcessRunner.get_process_id": [], "distribute.multi_process_runner.MultiProcessRunner.get_process_exit_code": [], "distribute.multi_process_runner.MultiProcessRunner.process_exists": ["distribute.multi_process_runner.MultiProcessRunner.get_process_exit_code"], "distribute.multi_process_runner.MultiProcessRunner._process_watchdog": ["absl.logging.info", "distribute.multi_process_runner.MultiProcessRunner._terminate_all", "<builtin>.all", "distribute.multi_process_runner.MultiProcessRunner._start_subprocess_and_reading_thread", "time.sleep"], "distribute.multi_process_runner.MultiProcessRunner._terminate_all": ["<builtin>.getattr", "os.kill", "absl.logging.info"], "distribute.multi_process_runner.MultiProcessRunner._reraise_if_subprocess_error": ["six.reraise", "distribute.multi_process_runner.MultiProcessRunner._get_mpr_result", "<builtin>.isinstance"], "distribute.multi_process_runner.MultiProcessRunner._get_mpr_result": ["distribute.multi_process_runner.MultiProcessRunner._queue_to_list"], "distribute.multi_process_runner.MultiProcessRunner.join": ["distribute.multi_process_runner.UnexpectedSubprocessExitError.__init__", "absl.logging.error", "distribute.multi_process_runner.MultiProcessRunner._get_process_statuses", "absl.logging.info", "distribute.multi_process_runner.SubprocessTimeoutError.__init__", "distribute.multi_process_runner.MultiProcessRunner._get_mpr_result", "<builtin>.isinstance", "distribute.multi_process_runner.MultiProcessRunner.terminate_all", "<builtin>.ValueError", "signal.alarm", "distribute.multi_process_runner.MultiProcessRunner._reraise_if_subprocess_error"], "distribute.multi_process_runner.SubprocessTimeoutError.__init__": ["<builtin>.super"], "distribute.multi_process_runner.UnexpectedSubprocessExitError.__init__": ["<builtin>.super"], "distribute.multi_process_runner.MultiProcessRunner.terminate": ["<builtin>.ValueError"], "os.kill": [], "distribute.multi_process_runner._Process._run_with_setenv": ["distribute.multi_process_runner._set_tf_config", "<builtin>.str"], "distribute.multi_process_runner._ProcFunc": ["contextlib.contextmanager"], "distribute.multi_process_runner._ProcFunc._runtime_mode": ["eager.context.graph_mode", "eager.context.eager_mode"], "distribute.multi_process_runner._ProcFunc._message_checking_func": ["os._exit", "<builtin>.ValueError", "time.sleep"], "os._exit": [], "distribute.multi_process_runner._ProcFunc._close_streaming": ["sys.stderr.close", "sys.stdout.flush", "sys.stdout.close", "sys.stderr.flush"], "sys.stderr.flush": [], "sys.stdout.close": [], "sys.stderr.close": [], "distribute.multi_process_runner._ProcFunc.__call__": ["os.dup2", "os.getpid", "sys.exit", "absl.logging.set_stderrthreshold", "absl.logging.info", "sys.stderr.fileno", "threading.Thread", "faulthandler.register", "distribute.multi_process_runner._run_contained", "sys.stdout.fileno", "six.reraise", "compat.v2_compat.enable_v2_behavior", "distribute.multi_process_runner._ProcFunc._runtime_mode", "faulthandler.enable", "distribute.multi_process_runner._ProcFunc._close_streaming", "dill.loads"], "dill.loads": [], "faulthandler.enable": [], "faulthandler.register": [], "absl.logging.set_stderrthreshold": [], "sys.stdout.fileno": [], "os.dup2": [], "sys.stderr.fileno": [], "os.getpid": [], "distribute.multi_process_runner._run_contained": ["sys.exc_info"], "distribute.multi_process_runner._shutdown_all_pool_runners": [], "distribute.multi_process_runner.is_oss": ["<builtin>.len"], "distribute.multi_process_runner.MultiProcessPoolRunner.__init__": [], "distribute.multi_process_runner.MultiProcessPoolRunner.__del__": ["distribute.multi_process_runner.MultiProcessPoolRunner.shutdown"], "distribute.multi_process_runner.MultiProcessPoolRunner.shutdown": ["absl.logging.error", "distribute.multi_process_runner.MultiProcessRunner.join"], "distribute.multi_process_runner.MultiProcessPoolRunner._start": ["multi_process_lib.multiprocessing.Pipe", "<builtin>.enumerate", "dill.dumps", "unittest.SkipTest", "distribute.multi_process_runner.MultiProcessRunner.__init__", "distribute.multi_process_runner.MultiProcessRunner.start_single_process"], "distribute.multi_process_runner.MultiProcessPoolRunner.run": ["<builtin>.RuntimeError", "absl.logging.info", "distribute.multi_process_runner.MultiProcessPoolRunner._start", "distribute.multi_process_lib.Process", "<builtin>.isinstance", "dill.dumps", "six.reraise", "distribute.multi_process_runner._check_initialization", "distribute.multi_process_runner.MultiProcessPoolRunner.shutdown"], "distribute.multi_process_lib.Process": [], "distribute.multi_process_runner._pool_runner_worker": ["sys.stdout.flush", "distribute.multi_process_runner._run_contained", "dill.loads", "sys.stderr.flush"], "distribute.multi_process_runner.run": ["distribute.multi_process_runner.MultiProcessRunner.start", "distribute.multi_process_runner.MultiProcessRunner.__init__", "distribute.multi_process_runner.MultiProcessRunner.join"], "distribute.multi_process_runner.get_barrier": ["<builtin>.ValueError"], "multi_process_lib.multiprocessing.Manager": [], "distribute.multi_process_runner.test_main": ["<builtin>.setattr", "<builtin>.getattr", "distribute.multi_process_lib.test_main"], "distribute.multi_process_runner.test_main.tear_down_module": ["distribute.multi_process_runner._shutdown_all_pool_runners"], "distribute.multi_worker_util": [], "distribute.multi_worker_util.task_count": [], "distribute.multi_worker_util._validate_cluster_spec": ["<builtin>.any", "distribute.multi_worker_util.normalize_cluster_spec", "<builtin>.ValueError", "distribute.multi_worker_util.task_count"], "distribute.multi_worker_util.has_worker_context": ["distribute.distribute_coordinator_context.get_current_worker_context"], "distribute.multi_worker_util.should_save_checkpoint": ["distribute.distribute_coordinator_context.get_current_worker_context"], "distribute.multi_worker_util.should_load_checkpoint": ["distribute.distribute_coordinator_context.get_current_worker_context"], "distribute.multi_worker_util.wait_for_other_workers": ["distribute.distribute_coordinator_context.get_current_worker_context"], "distribute.numpy_dataset": [], "distribute.numpy_dataset.one_host_numpy_dataset.create_colocated_variable": [], "distribute.numpy_dataset.SingleDevice.__init__": [], "distribute.one_device_strategy": [], "distribute.one_device_strategy.OneDeviceStrategy.__init__": ["distribute.one_device_strategy.OneDeviceExtended.__init__", "distribute_lib.distribution_strategy_gauge.get_cell", "<builtin>.super"], "distribute.one_device_strategy.OneDeviceExtended.__init__": ["distribute.device_util.resolve", "<builtin>.super", "distribute.device_util.get_host_for_device"], "distribute.one_device_strategy.OneDeviceStrategy.experimental_distribute_dataset": ["<builtin>.super"], "distribute.one_device_strategy.OneDeviceStrategy.distribute_datasets_from_function": ["<builtin>.super"], "distribute.one_device_strategy.OneDeviceStrategy.experimental_local_results": ["<builtin>.super"], "distribute.one_device_strategy.OneDeviceStrategy.run": ["<builtin>.super"], "distribute.one_device_strategy.OneDeviceStrategy.reduce": ["<builtin>.super"], "distribute.one_device_strategy.OneDeviceStrategy.scope": ["<builtin>.super"], "Strategy.__doc__.replace": [], "distribute.one_device_strategy.OneDeviceStrategyV1": ["Strategy.__doc__.replace"], "distribute.one_device_strategy.OneDeviceStrategyV1.__init__": ["distribute.one_device_strategy.OneDeviceExtended.__init__", "distribute_lib.distribution_strategy_gauge.get_cell", "<builtin>.super"], "distribute.one_device_strategy.OneDeviceExtended._input_workers_with_options": ["distribute.input_lib.InputWorkers"], "distribute.one_device_strategy.OneDeviceExtended._input_workers": ["distribute.one_device_strategy.OneDeviceExtended._input_workers_with_options"], "distribute.one_device_strategy.OneDeviceExtended._create_variable": ["framework.ops.device", "framework.ops.colocate_with", "<builtin>.isinstance"], "distribute.one_device_strategy.OneDeviceExtended._validate_colocate_with_variable": ["distribute.distribute_utils.validate_colocate"], "distribute.one_device_strategy.OneDeviceExtended._make_dataset_iterator": ["distribute.input_lib.DatasetIterator", "distribute_lib.StrategyExtendedV1._container_strategy"], "distribute.one_device_strategy.OneDeviceExtended._make_input_fn_iterator": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.input_lib.InputFunctionIterator", "distribute.distribute_lib.InputContext"], "distribute.one_device_strategy.OneDeviceExtended._experimental_make_numpy_dataset": ["distribute.numpy_dataset.one_host_numpy_dataset", "distribute.numpy_dataset.SingleDevice"], "distribute.one_device_strategy.OneDeviceExtended._broadcast_to": [], "distribute.one_device_strategy.OneDeviceExtended._experimental_distribute_dataset": ["<builtin>.NotImplementedError", "distribute_lib.StrategyExtendedV1._container_strategy", "distribute.input_lib.get_distributed_dataset", "distribute.one_device_strategy.OneDeviceExtended._input_workers_with_options"], "distribute.one_device_strategy.OneDeviceExtended._distribute_datasets_from_function": ["distribute.distribute_lib.InputContext", "distribute.one_device_strategy.OneDeviceExtended._input_workers_with_options", "<builtin>.NotImplementedError", "distribute_lib.StrategyExtendedV1._container_strategy", "distribute.input_lib.get_distributed_datasets_from_function"], "distribute.one_device_strategy.OneDeviceExtended._experimental_distribute_values_from_function": ["distribute.distribute_lib.ValueContext"], "distribute.one_device_strategy.OneDeviceExtended._experimental_run_steps_on_iterator": ["util.nest.flatten", "util.nest.pack_sequence_as", "framework.ops.get_default_graph", "framework.constant_op.constant", "ops.control_flow_ops.group", "distribute.input_lib.MultiStepContext", "ops.control_flow_ops.while_loop"], "distribute.one_device_strategy.OneDeviceExtended._experimental_run_steps_on_iterator.body": ["framework.ops.control_dependencies", "util.nest.flatten"], "distribute.one_device_strategy.OneDeviceExtended._experimental_run_steps_on_iterator.<lambda1>": [], "distribute.one_device_strategy.OneDeviceExtended._call_for_each_replica": ["distribute_lib.StrategyExtendedV1._container_strategy", "framework.ops.device", "distribute.one_device_strategy._OneDeviceReplicaContext.__init__"], "distribute.one_device_strategy._OneDeviceReplicaContext.__init__": ["distribute_lib.ReplicaContext.__init__"], "distribute.one_device_strategy.OneDeviceExtended._reduce_to": [], "distribute.one_device_strategy.OneDeviceExtended._gather_to_implementation": [], "distribute.one_device_strategy.OneDeviceExtended._update": ["<builtin>.tuple", "distribute.one_device_strategy.OneDeviceExtended._update_non_slot"], "distribute.one_device_strategy.OneDeviceExtended._update_non_slot": ["util.nest.map_structure", "distribute.distribute_lib.UpdateContext", "framework.ops.device"], "distribute.one_device_strategy.OneDeviceExtended.read_var": ["ops.array_ops.identity"], "distribute.one_device_strategy.OneDeviceExtended._local_results": [], "distribute.one_device_strategy.OneDeviceExtended.value_container": [], "distribute.one_device_strategy.OneDeviceExtended._in_multi_worker_mode": [], "distribute.one_device_strategy.OneDeviceExtended._num_replicas_in_sync": [], "distribute.one_device_strategy.OneDeviceExtended.worker_devices": [], "distribute.one_device_strategy.OneDeviceExtended.parameter_devices": [], "distribute.one_device_strategy.OneDeviceExtended.non_slot_devices": [], "distribute.one_device_strategy.OneDeviceExtended.experimental_should_init": [], "distribute.one_device_strategy.OneDeviceExtended.experimental_between_graph": [], "distribute.one_device_strategy.OneDeviceExtended.should_checkpoint": [], "distribute.one_device_strategy.OneDeviceExtended.should_save_summary": [], "distribute.one_device_strategy.OneDeviceExtended._global_batch_size": [], "distribute.one_device_strategy.OneDeviceExtended._support_per_replica_values": [], "distribute.one_device_strategy.OneDeviceExtended._get_local_replica_id": [], "distribute.one_device_strategy._OneDeviceReplicaContext.devices": [], "distribute.packed_distributed_variable": ["framework.ops.register_tensor_conversion_function"], "distribute.packed_distributed_variable.PackedDistributedVariable.__init__": ["framework.ops.executing_eagerly_outside_functions", "framework.ops.name_scope", "framework.ops.uid", "<builtin>.ValueError", "ops.resource_variable_ops.is_resource_variable", "framework.ops.init_scope", "<builtin>.type", "<builtin>.super", "<builtin>.enumerate", "framework.ops.name_from_scope_name", "framework.ops.pack_eager_tensors"], "framework.ops.pack_eager_tensors": ["<builtin>.len", "eager.context.context", "<builtin>.TypeError", "<builtin>.range", "eager.tape.record_operation", "<builtin>.isinstance", "<builtin>.ValueError"], "framework.ops.name_from_scope_name": [], "framework.ops.uid": ["python.pywrap_tfe.TFE_Py_UID"], "distribute.packed_distributed_variable.PackedDistributedVariable.devices": [], "distribute.packed_distributed_variable.PackedDistributedVariable.on_device": ["distribute.packed_distributed_variable.PackedVarAndDevice.__init__"], "distribute.packed_distributed_variable.PackedVarAndDevice.__init__": [], "distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_device": ["<builtin>.ValueError", "<builtin>.enumerate"], "distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_current_device": ["distribute.device_util.canonicalize", "distribute.device_util.current", "distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_device"], "distribute.packed_distributed_variable.PackedDistributedVariable.initial_value": ["distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_device"], "distribute.packed_distributed_variable.PackedDistributedVariable.handle": ["distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_current_device", "eager.context.executing_eagerly"], "distribute.packed_distributed_variable.PackedDistributedVariable.packed_handle": [], "distribute.packed_distributed_variable.PackedDistributedVariable._read_variable_op": ["distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_current_device", "eager.context.executing_eagerly", "<builtin>.super"], "distribute.packed_distributed_variable.PackedDistributedVariable.value": ["distribute.packed_distributed_variable.PackedDistributedVariable._read_variable_op"], "distribute.packed_distributed_variable.PackedDistributedVariable.is_initialized": ["framework.ops.device", "ops.math_ops.logical_and", "eager.context.executing_eagerly", "<builtin>.super"], "distribute.packed_distributed_variable.PackedDistributedVariable._update": ["distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_current_device", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_update.<lambda1>", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_add.<lambda1>", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_mul.<lambda1>", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_min.<lambda1>", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_sub.<lambda1>", "distribute.packed_distributed_variable.PackedDistributedVariable.assign.<lambda1>", "distribute.packed_distributed_variable.PackedDistributedVariable.assign_sub.<lambda1>", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_max.<lambda1>", "eager.context.executing_eagerly", "<builtin>.super", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_div.<lambda1>", "distribute.packed_distributed_variable.PackedDistributedVariable.assign_add.<lambda1>"], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_update.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_mul.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_min.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_sub.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.assign.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.assign_sub.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_max.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_div.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_add.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.assign_add.<lambda1>": [], "distribute.packed_distributed_variable.PackedDistributedVariable.assign_sub": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.assign_add": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.assign": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_sub": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_add": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_mul": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_div": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_min": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_max": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_update": ["distribute.packed_distributed_variable.PackedDistributedVariable._update"], "distribute.packed_distributed_variable.PackedDistributedVariable._dense_var_to_tensor": ["distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_current_device", "eager.context.executing_eagerly", "<builtin>.super"], "distribute.packed_distributed_variable.PackedVarAndDevice.__getattr__": ["framework.ops.device", "<builtin>.getattr"], "distribute.packed_distributed_variable.PackedVarAndDevice.var": [], "distribute.packed_distributed_variable.PackedVarAndDevice.value": ["distribute.packed_distributed_variable.PackedDistributedVariable.value", "framework.ops.device"], "distribute.packed_distributed_variable.PackedVarAndDevice.read_value": ["resource_variable_ops.BaseResourceVariable.read_value", "framework.ops.device"], "resource_variable_ops.BaseResourceVariable.read_value": [], "distribute.packed_distributed_variable.PackedVarAndDevice.initial_value": ["distribute.packed_distributed_variable.PackedDistributedVariable.initial_value"], "distribute.packed_distributed_variable.PackedVarAndDevice.initialized_value": ["resource_variable_ops.BaseResourceVariable.initialized_value", "framework.ops.device"], "resource_variable_ops.BaseResourceVariable.initialized_value": [], "distribute.packed_distributed_variable.PackedVarAndDevice.device": [], "distribute.packed_distributed_variable.PackedVarAndDevice.handle": ["framework.ops.device"], "distribute.packed_distributed_variable.PackedVarAndDevice.on_device_handle": ["distribute.packed_distributed_variable.PackedDistributedVariable.get_var_on_current_device", "framework.ops.device"], "distribute.packed_distributed_variable.PackedVarAndDevice.op": ["framework.ops.device"], "distribute.packed_distributed_variable.PackedVarAndDevice.assign_sub": ["framework.ops.device", "distribute.packed_distributed_variable.PackedDistributedVariable.assign_sub"], "distribute.packed_distributed_variable.PackedVarAndDevice.assign_add": ["framework.ops.device", "distribute.packed_distributed_variable.PackedDistributedVariable.assign_add"], "distribute.packed_distributed_variable.PackedVarAndDevice.assign": ["distribute.packed_distributed_variable.PackedDistributedVariable.assign", "framework.ops.device"], "distribute.packed_distributed_variable.PackedVarAndDevice.scatter_sub": ["distribute.packed_distributed_variable.PackedDistributedVariable.scatter_sub", "framework.ops.device"], "distribute.packed_distributed_variable.PackedVarAndDevice.scatter_add": ["framework.ops.device", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_add"], "distribute.packed_distributed_variable.PackedVarAndDevice.scatter_mul": ["distribute.packed_distributed_variable.PackedDistributedVariable.scatter_mul", "framework.ops.device"], "distribute.packed_distributed_variable.PackedVarAndDevice.scatter_div": ["framework.ops.device", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_div"], "distribute.packed_distributed_variable.PackedVarAndDevice.scatter_min": ["framework.ops.device", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_min"], "distribute.packed_distributed_variable.PackedVarAndDevice.scatter_max": ["framework.ops.device", "distribute.packed_distributed_variable.PackedDistributedVariable.scatter_max"], "distribute.packed_distributed_variable.PackedVarAndDevice.scatter_update": ["distribute.packed_distributed_variable.PackedDistributedVariable.scatter_update", "framework.ops.device"], "distribute.packed_distributed_variable.PackedVarAndDevice._dense_var_to_tensor": ["framework.ops.device", "distribute.packed_distributed_variable.PackedDistributedVariable._dense_var_to_tensor"], "distribute.packed_distributed_variable.PackedVarAndDevice._as_graph_element": ["resource_variable_ops.BaseResourceVariable._as_graph_element"], "resource_variable_ops.BaseResourceVariable._as_graph_element": [], "distribute.packed_distributed_variable._tensor_conversion_packed_var_and_device": [], "distribute.parameter_server_strategy": [], "distribute.parameter_server_strategy.ParameterServerStrategyV1.__init__": ["distribute.cluster_resolver.TFConfigClusterResolver", "<builtin>.super", "distribute_lib.distribution_strategy_gauge.get_cell", "distribute.parameter_server_strategy.ParameterServerStrategyExtended.__init__"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.__init__": ["<builtin>.super", "distribute.cross_device_ops.ReductionToOneDevice", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._initialize_strategy"], "distribute.parameter_server_strategy.ParameterServerStrategyV1.experimental_distribute_dataset": ["<builtin>.super", "distribute.parameter_server_strategy.ParameterServerStrategyV1._raise_pss_error_if_eager", "<builtin>.NotImplementedError"], "distribute.parameter_server_strategy.ParameterServerStrategyV1._raise_pss_error_if_eager": ["eager.context.executing_eagerly", "<builtin>.NotImplementedError"], "distribute.parameter_server_strategy.ParameterServerStrategyV1.distribute_datasets_from_function": ["<builtin>.super", "distribute.parameter_server_strategy.ParameterServerStrategyV1._raise_pss_error_if_eager", "<builtin>.NotImplementedError"], "distribute.parameter_server_strategy.ParameterServerStrategyV1.run": ["<builtin>.super", "distribute.parameter_server_strategy.ParameterServerStrategyV1._raise_pss_error_if_eager"], "distribute.parameter_server_strategy.ParameterServerStrategyV1.scope": ["<builtin>.super", "distribute.parameter_server_strategy.ParameterServerStrategyV1._raise_pss_error_if_eager"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._initialize_strategy": ["distribute.parameter_server_strategy.ParameterServerStrategyExtended._initialize_local", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._initialize_multi_worker"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._initialize_multi_worker": ["eager.context.num_gpus", "<builtin>.range", "platform.tf_logging.info", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.map", "<builtin>.len", "distribute.multi_worker_util.normalize_cluster_spec", "distribute.device_util.canonicalize", "<builtin>.isinstance", "training.device_setter.replica_device_setter", "distribute.multi_worker_util.is_chief", "distribute.numpy_dataset.SingleDevice"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._initialize_local": ["eager.context.num_gpus", "platform.tf_logging.info", "distribute.device_util.local_devices_from_num_gpus", "<builtin>.len", "distribute.device_util.canonicalize", "distribute.numpy_dataset.SingleDevice"], "training.device_setter.replica_device_setter": ["training.server_lib.ClusterSpec", "<builtin>.list", "training.device_setter._ReplicaDeviceChooser.__init__", "six.callable", "<builtin>.len", "platform.tf_logging.warning", "device.DeviceSpec.from_string", "<builtin>.isinstance", "<builtin>.TypeError", "training.device_setter._RoundRobinStrategy.__init__"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._input_workers_with_options": ["distribute.input_lib.InputWorkers", "<builtin>.len"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._input_workers": ["distribute.parameter_server_strategy.ParameterServerStrategyExtended._input_workers_with_options"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._validate_colocate_with_variable": ["distribute.distribute_utils.validate_colocate"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._experimental_distribute_dataset": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.input_lib.get_distributed_dataset", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._input_workers_with_options"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._make_dataset_iterator": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.input_lib.DatasetIterator"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._make_input_fn_iterator": ["distribute.distribute_lib.InputContext", "distribute.multi_worker_util.worker_count", "distribute.input_lib.InputFunctionIterator", "distribute_lib.StrategyExtendedV1._container_strategy", "distribute.multi_worker_util.id_in_cluster"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._experimental_make_numpy_dataset": ["distribute.numpy_dataset.one_host_numpy_dataset"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._distribute_datasets_from_function": ["distribute.distribute_lib.InputContext", "distribute.multi_worker_util.worker_count", "distribute_lib.StrategyExtendedV1._container_strategy", "distribute.multi_worker_util.id_in_cluster", "distribute.input_lib.get_distributed_datasets_from_function", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._input_workers_with_options"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._experimental_distribute_values_from_function": ["<builtin>.range", "distribute.distribute_utils.regroup", "distribute.distribute_lib.ValueContext"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._broadcast_to": ["<builtin>.isinstance", "distribute.cross_device_ops.check_destinations"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._allow_variable_partition": ["eager.context.executing_eagerly"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._create_var_creator": ["<builtin>.ValueError"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._create_var_creator.var_creator": ["framework.ops.add_to_collections", "eager.context.executing_eagerly", "framework.ops.get_default_graph", "distribute_lib.StrategyExtendedV1._container_strategy", "distribute.ps_values.AggregatingVariable"], "distribute.ps_values.AggregatingVariable": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._create_variable": ["framework.ops.colocate_with", "framework.ops.device", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._create_var_creator.var_creator", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._create_var_creator", "<builtin>.isinstance"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._call_for_each_replica": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.mirrored_run.call_for_each_replica"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._verify_destinations_not_different_worker": ["<builtin>.ValueError", "device.DeviceSpec.from_string", "distribute.cross_device_ops.get_devices_from"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._gather_to_implementation": ["<builtin>.isinstance", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._verify_destinations_not_different_worker"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._reduce_to": ["<builtin>.isinstance", "distribute.cross_device_ops.reduce_non_distributed_value", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._verify_destinations_not_different_worker"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._batch_reduce_to": ["distribute.parameter_server_strategy.ParameterServerStrategyExtended._verify_destinations_not_different_worker"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._select_single_value": ["util.nest.map_structure"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._select_single_value._select_fn": ["<builtin>.isinstance"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._update": ["framework.ops.colocate_with", "<builtin>.ValueError", "distribute.distribute_lib.UpdateContext", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._select_single_value", "<builtin>.isinstance", "util.nest.map_structure", "ops.resource_variable_ops.is_resource_variable"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._update_non_slot": ["distribute.distribute_lib.UpdateContext", "util.nest.map_structure", "framework.ops.device"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.value_container": ["<builtin>.isinstance", "<builtin>.hasattr"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.read_var": ["ops.array_ops.identity"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._configure": ["distribute.parameter_server_strategy.ParameterServerStrategyExtended._update_config_proto", "distribute.parameter_server_strategy.ParameterServerStrategyExtended._initialize_multi_worker", "distribute.cluster_resolver.SimpleClusterResolver", "distribute.multi_worker_util.normalize_cluster_spec"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._update_config_proto": ["copy.deepcopy"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._in_multi_worker_mode": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._num_replicas_in_sync": ["<builtin>.len"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.worker_devices": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.worker_devices_by_replica": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.parameter_devices": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.non_slot_devices": ["<builtin>.min"], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.non_slot_devices.<lambda1>": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.experimental_between_graph": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.experimental_should_init": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.should_checkpoint": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended.should_save_summary": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._global_batch_size": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._get_local_replica_id": [], "distribute.parameter_server_strategy.ParameterServerStrategyExtended._get_replica_id_in_sync_group": [], "distribute.parameter_server_strategy_v2": [], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2.__init__": ["platform.tf_logging.info", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2._verify_args_and_config", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2._connect_to_cluster", "distribute_lib.distribution_strategy_gauge.get_cell", "<builtin>.super", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended.__init__"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2._verify_args_and_config": ["distribute.multi_worker_util._validate_cluster_spec", "distribute.multi_worker_util.task_count", "<builtin>.ValueError"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2._connect_to_cluster": ["platform.tf_logging.info", "<builtin>.range", "training.server_lib.ClusterDeviceFilters", "distribute_lib.distribution_strategy_replica_gauge.get_cell", "<builtin>.len", "eager.remote.connect_to_cluster", "<builtin>.ValueError"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended.__init__": ["distribute_lib.distribution_strategy_replica_gauge.get_cell", "distribute.cross_device_ops.ReductionToOneDevice", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._set_num_gpus", "<builtin>.super", "<builtin>.len"], "training.server_lib.ClusterDeviceFilters": [], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._set_num_gpus": ["platform.tf_logging.info", "device.DeviceSpec.from_string", "<builtin>.ValueError", "framework.config.list_logical_devices"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._num_replicas_in_sync": [], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_var_creator": ["<builtin>.ValueError"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_var_creator.var_creator": ["distribute.ps_values.CachingVariable", "parameter_server_strategy.ParameterServerStrategyExtended._container_strategy", "distribute.ps_values.AggregatingVariable"], "distribute.ps_values.CachingVariable": [], "parameter_server_strategy.ParameterServerStrategyExtended._container_strategy": [], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_var_creator.variable_creator_single_replica": ["distribute.ps_values.CachingVariable"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_variable": ["<builtin>.range", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_variable_round_robin", "platform.tf_logging.debug", "distribute.sharded_variable.ShardedVariable", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_var_creator.variable_creator_single_replica", "<builtin>.min", "framework.tensor_shape.as_shape", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_var_creator", "<builtin>.any", "<builtin>.callable", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_var_creator.var_creator", "<builtin>.ValueError", "framework.ops.colocate_with", "framework.ops.convert_to_tensor", "framework.ops.device"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_variable_round_robin": ["platform.tf_logging.debug", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_var_creator.variable_creator_single_replica", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_var_creator.var_creator", "framework.ops.colocate_with", "framework.ops.device"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_variable.init_shard_fn": ["util.tf_inspect.getfullargspec", "framework.tensor_shape.as_shape", "platform.tf_logging.log_if", "tracking.base.ShardInfo", "<builtin>.len"], "platform.tf_logging.log_if": ["platform.tf_logging.vlog"], "tracking.base.ShardInfo": [], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_variable.<lambda1>": ["distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._create_variable.init_shard_fn"], "distribute.sharded_variable.ShardedVariable": [], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._assert_used_with_cluster_coordinator": ["<builtin>.NotImplementedError"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._assert_being_scheduled_by_cluster_coordinator": ["platform.tf_logging.warning"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._input_workers_with_options": ["distribute.input_lib.InputWorkers"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._experimental_distribute_dataset": ["framework.ops.inside_function", "distribute.input_lib.get_distributed_dataset", "parameter_server_strategy.ParameterServerStrategyExtended._container_strategy", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._input_workers_with_options"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._distribute_datasets_from_function": ["framework.ops.inside_function", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._input_workers_with_options", "distribute.input_lib.get_distributed_datasets_from_function", "distribute.distribute_lib.InputContext", "parameter_server_strategy.ParameterServerStrategyExtended._container_strategy"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended.worker_devices": ["<builtin>.range", "<builtin>.tuple"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._call_for_each_replica": ["distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._assert_being_scheduled_by_cluster_coordinator", "parameter_server_strategy.ParameterServerStrategyExtended._container_strategy", "distribute.mirrored_run.call_for_each_replica"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._reduce": ["parameter_server_strategy.ParameterServerStrategyExtended.reduce_to", "distribute.device_util.canonicalize_without_job_and_task", "distribute.device_util.current", "parameter_server_strategy.ParameterServerStrategyExtended._local_results", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._assert_being_scheduled_by_cluster_coordinator"], "parameter_server_strategy.ParameterServerStrategyExtended.reduce_to": [], "parameter_server_strategy.ParameterServerStrategyExtended._local_results": [], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._reduce_to": ["util.nest.map_structure", "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._assert_being_scheduled_by_cluster_coordinator"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2Extended._reduce_to.get_values": ["<builtin>.isinstance"], "distribute.ps_values": ["distribute.ps_values.CachingVariable._overload_overloadable_operators", "framework.ops.register_tensor_conversion_function"], "distribute.ps_values.AggregatingVariable.__init__": ["weakref.ref"], "distribute.ps_values.AggregatingVariable.__deepcopy__": ["distribute.distribution_strategy_context.enter_or_assert_strategy", "<builtin>.type", "copy.deepcopy", "<builtin>.id"], "distribute.ps_values.AggregatingVariable.get": [], "distribute.ps_values.AggregatingVariable.distribute_strategy": [], "distribute.ps_values.AggregatingVariable.__getattr__": ["<builtin>.getattr"], "distribute.ps_values.AggregatingVariable._assign_func": ["<builtin>.ValueError", "distribute.distribute_lib.get_update_replica_id", "distribute.distribution_strategy_context.enter_or_assert_strategy", "values_util.aggregation_error_msg.format", "distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.in_cross_replica_context"], "values_util.aggregation_error_msg.format": [], "distribute.ps_values.AggregatingVariable._assign_func.merge_fn": ["<builtin>.isinstance", "distribute.values_util.apply_aggregation"], "distribute.values_util.apply_aggregation": ["reduce_util.ReduceOp.from_variable_aggregation"], "distribute.ps_values.AggregatingVariable.assign_sub": ["distribute.ps_values.AggregatingVariable._assign_func"], "distribute.ps_values.AggregatingVariable.assign_sub.<lambda1>": [], "distribute.ps_values.AggregatingVariable.assign_add": ["distribute.ps_values.AggregatingVariable._assign_func"], "distribute.ps_values.AggregatingVariable.assign_add.<lambda1>": [], "distribute.ps_values.AggregatingVariable.assign": ["distribute.ps_values.AggregatingVariable._assign_func"], "distribute.ps_values.AggregatingVariable.assign.<lambda1>": [], "distribute.ps_values.AggregatingVariable.initializer": [], "distribute.ps_values.AggregatingVariable.initialized_value": [], "distribute.ps_values.AggregatingVariable.initial_value": [], "distribute.ps_values.AggregatingVariable.op": [], "distribute.ps_values.AggregatingVariable.value": [], "distribute.ps_values.AggregatingVariable.read_value": [], "distribute.ps_values.AggregatingVariable.sparse_read": [], "distribute.ps_values.AggregatingVariable.eval": [], "distribute.ps_values.AggregatingVariable.graph": [], "distribute.ps_values.AggregatingVariable.device": [], "distribute.ps_values.AggregatingVariable.shape": [], "distribute.ps_values.AggregatingVariable.aggregation": [], "distribute.ps_values.AggregatingVariable.synchronization": [], "distribute.ps_values.AggregatingVariable.name": [], "distribute.ps_values.AggregatingVariable.trainable": [], "distribute.ps_values.AggregatingVariable.dtype": [], "distribute.ps_values.AggregatingVariable._gather_saveables_for_checkpoint": ["<builtin>.isinstance"], "distribute.ps_values.AggregatingVariable._map_resources": [], "distribute.ps_values.AggregatingVariable.__add__": [], "distribute.ps_values.AggregatingVariable.__radd__": [], "distribute.ps_values.AggregatingVariable.__sub__": [], "distribute.ps_values.AggregatingVariable.__rsub__": [], "distribute.ps_values.AggregatingVariable.__mul__": [], "distribute.ps_values.AggregatingVariable.__rmul__": [], "distribute.ps_values.AggregatingVariable.__truediv__": [], "distribute.ps_values.AggregatingVariable.__rtruediv__": [], "distribute.ps_values.AggregatingVariable.__floordiv__": [], "distribute.ps_values.AggregatingVariable.__rfloordiv__": [], "distribute.ps_values.AggregatingVariable.__mod__": [], "distribute.ps_values.AggregatingVariable.__rmod__": [], "distribute.ps_values.AggregatingVariable.__lt__": [], "distribute.ps_values.AggregatingVariable.__le__": [], "distribute.ps_values.AggregatingVariable.__gt__": [], "distribute.ps_values.AggregatingVariable.__ge__": [], "distribute.ps_values.AggregatingVariable.__and__": [], "distribute.ps_values.AggregatingVariable.__rand__": [], "distribute.ps_values.AggregatingVariable.__or__": [], "distribute.ps_values.AggregatingVariable.__ror__": [], "distribute.ps_values.AggregatingVariable.__xor__": [], "distribute.ps_values.AggregatingVariable.__rxor__": [], "distribute.ps_values.AggregatingVariable.__getitem__": [], "distribute.ps_values.AggregatingVariable.__pow__": ["<builtin>.pow"], "distribute.ps_values.AggregatingVariable.__rpow__": ["<builtin>.pow"], "distribute.ps_values.AggregatingVariable.__invert__": [], "distribute.ps_values.AggregatingVariable.__neg__": [], "distribute.ps_values.AggregatingVariable.__abs__": ["<builtin>.abs"], "distribute.ps_values.AggregatingVariable.__div__": [], "distribute.ps_values.AggregatingVariable.__rdiv__": [], "distribute.ps_values.AggregatingVariable.__matmul__": [], "distribute.ps_values.AggregatingVariable.__rmatmul__": [], "distribute.ps_values.AggregatingVariable.__str__": ["<builtin>.str"], "distribute.ps_values.AggregatingVariable.__repr__": ["<builtin>.repr"], "distribute.ps_values.AggregatingVariable._should_act_as_resource_variable": [], "distribute.ps_values.AggregatingVariable._dense_var_to_tensor": [], "distribute.ps_values.CachingVariable.__init__": [], "distribute.ps_values.CachingVariable.get": [], "distribute.ps_values.CachingVariable.__getattr__": ["<builtin>.getattr"], "distribute.ps_values.CachingVariable.read_value": ["distribute.ps_values.CachingVariable.cached_read_value", "distribute_utils.caching_scope_local.in_caching_scope"], "distribute_utils.caching_scope_local.in_caching_scope": [], "distribute.ps_values.CachingVariable.cached_read_value": ["ops.array_ops.identity", "framework.ops.device"], "distribute.ps_values.CachingVariable.sparse_read": [], "distribute.ps_values.CachingVariable.assign_sub": [], "distribute.ps_values.CachingVariable.assign_add": [], "distribute.ps_values.CachingVariable.assign": [], "distribute.ps_values.CachingVariable.initializer": [], "distribute.ps_values.CachingVariable.initialized_value": [], "distribute.ps_values.CachingVariable.initial_value": [], "distribute.ps_values.CachingVariable.op": [], "distribute.ps_values.CachingVariable.value": ["distribute.ps_values.CachingVariable.cached_read_value", "distribute_utils.caching_scope_local.in_caching_scope"], "distribute.ps_values.CachingVariable.eval": [], "distribute.ps_values.CachingVariable.graph": [], "distribute.ps_values.CachingVariable.device": [], "distribute.ps_values.CachingVariable.shape": [], "distribute.ps_values.CachingVariable.synchronization": [], "distribute.ps_values.CachingVariable.name": [], "distribute.ps_values.CachingVariable.trainable": [], "distribute.ps_values.CachingVariable.dtype": [], "distribute.ps_values.CachingVariable.constraint": [], "distribute.ps_values.CachingVariable.__array__": ["numpy.asarray", "distribute.ps_values.CachingVariable.numpy"], "distribute.ps_values.CachingVariable.numpy": ["<builtin>.NotImplementedError", "distribute.ps_values.CachingVariable.read_value", "eager.context.executing_eagerly"], "distribute.ps_values.CachingVariable.__complex__": ["distribute.ps_values.CachingVariable.value", "<builtin>.complex"], "<builtin>.complex": [], "distribute.ps_values.CachingVariable.__int__": ["distribute.ps_values.CachingVariable.value", "<builtin>.int"], "distribute.ps_values.CachingVariable.__float__": ["<builtin>.float", "distribute.ps_values.CachingVariable.value"], "distribute.ps_values.CachingVariable.__str__": ["<builtin>.str"], "distribute.ps_values.CachingVariable.__repr__": ["<builtin>.repr"], "distribute.ps_values.CachingVariable._should_act_as_resource_variable": [], "distribute.ps_values.CachingVariable._dense_var_to_tensor": ["distribute.ps_values.CachingVariable.cached_read_value", "distribute_utils.caching_scope_local.in_caching_scope"], "distribute.ps_values.CachingVariable._overload_overloadable_operators": ["distribute.ps_values.CachingVariable._tensor_overload_operator"], "distribute.ps_values.CachingVariable._tensor_overload_operator": ["<builtin>.getattr", "<builtin>.setattr"], "distribute.ps_values.CachingVariable._tensor_overload_operator._operator": [], "distribute.ps_values.CachingVariable._gather_saveables_for_checkpoint": [], "distribute.ps_values.CachingVariable._map_resources": [], "distribute.ps_values._tensor_conversion_aggregate": [], "distribute.ps_values._tensor_conversion_caching": [], "distribute.reduce_util": [], "distribute.reduce_util.ReduceOp.from_variable_aggregation": ["<builtin>.ValueError"], "distribute.sharded_variable": ["saved_model.revived_types.VersionedTypeRegistration", "util.dispatch.dispatch_for_types", "distribute.sharded_variable.ShardedVariable._overload_all_operators", "framework.ops.register_tensor_conversion_function", "saved_model.revived_types.register_revived_type"], "distribute.sharded_variable.Partitioner.__call__": [], "distribute.sharded_variable.FixedShardsPartitioner.__init__": [], "distribute.sharded_variable.FixedShardsPartitioner.__call__": ["<builtin>.len", "<builtin>.min"], "distribute.sharded_variable.MinSizePartitioner.__init__": ["<builtin>.ValueError"], "distribute.sharded_variable.MinSizePartitioner.__call__": ["ops.partitioned_variables.min_max_variable_partitioner"], "ops.partitioned_variables.min_max_variable_partitioner": [], "distribute.sharded_variable.MaxSizePartitioner.__init__": ["<builtin>.ValueError"], "distribute.sharded_variable.MaxSizePartitioner.__call__": ["ops.partitioned_variables.variable_axis_size_partitioner"], "ops.partitioned_variables.variable_axis_size_partitioner": ["<builtin>.ValueError"], "distribute.sharded_variable.ShardedVariableSpec.<lambda1>": [], "distribute.sharded_variable.ShardedVariableSpec": ["<builtin>.property"], "distribute.sharded_variable.ShardedVariableSpec.__init__": ["<builtin>.tuple"], "distribute.sharded_variable.ShardedVariableSpec._serialize": [], "distribute.sharded_variable.ShardedVariableSpec._component_specs": [], "distribute.sharded_variable.ShardedVariableSpec._to_components": [], "distribute.sharded_variable.ShardedVariableSpec._from_components": ["distribute.sharded_variable.ShardedVariableMixin.__init__"], "distribute.sharded_variable.ShardedVariableMixin.__init__": ["<builtin>.int", "<builtin>.isinstance", "<builtin>.super", "framework.tensor_shape.TensorShape", "ops.resource_variable_ops.UninitializedVariable", "<builtin>.any", "<builtin>.ValueError", "<builtin>.tuple", "<builtin>.range", "<builtin>.len", "<builtin>.TypeError", "<builtin>.sum"], "ops.resource_variable_ops.UninitializedVariable": [], "distribute.sharded_variable.ShardedVariableMixin.__iter__": ["<builtin>.iter"], "distribute.sharded_variable.ShardedVariableMixin.__getitem__": ["<builtin>.isinstance", "<builtin>.enumerate", "ops.array_ops.boolean_mask", "<builtin>.IndexError", "ops.array_ops.concat", "<builtin>.range", "<builtin>.len", "distribute.sharded_variable.ShardedVariableMixin._decompose_slice_spec", "<builtin>.TypeError", "distribute.sharded_variable._var_to_tensor", "framework.constant_op.constant"], "distribute.sharded_variable._var_to_tensor": ["framework.ops.get_name_scope", "ops.array_ops.concat", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.NotImplementedError"], "distribute.sharded_variable.ShardedVariableMixin._decompose_slice_spec": ["<builtin>.int", "<builtin>.isinstance", "<builtin>.slice", "<builtin>.ValueError", "math.ceil", "<builtin>.range", "<builtin>.min", "<builtin>.len", "<builtin>.TypeError"], "distribute.sharded_variable.ShardedVariableMixin._type_spec": ["ops.resource_variable_ops.VariableSpec", "distribute.sharded_variable.ShardedVariableSpec.__init__"], "distribute.sharded_variable.ShardedVariableMixin.variables": ["saved_model.save_context.in_save_context"], "saved_model.save_context.in_save_context": ["saved_model.save_context.SaveContext.in_save_context"], "distribute.sharded_variable.ShardedVariableMixin.name": [], "distribute.sharded_variable.ShardedVariableMixin.dtype": [], "distribute.sharded_variable.ShardedVariableMixin.shape": [], "distribute.sharded_variable.ShardedVariableMixin.assign": ["ops.array_ops.slice", "<builtin>.enumerate"], "distribute.sharded_variable.ShardedVariableMixin.assign_add": ["ops.array_ops.slice", "<builtin>.enumerate"], "distribute.sharded_variable.ShardedVariableMixin.assign_sub": ["ops.array_ops.slice", "<builtin>.enumerate"], "distribute.sharded_variable.ShardedVariableMixin._decompose_indices": ["ops.math_ops.cast", "ops.math_ops.maximum", "ops.array_ops.where", "<builtin>.ValueError", "<builtin>.range", "<builtin>.len", "ops.data_flow_ops.dynamic_partition", "<builtin>.NotImplementedError"], "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices": ["framework.ops.IndexedSlices", "<builtin>.range", "<builtin>.len", "ops.data_flow_ops.dynamic_partition", "distribute.sharded_variable.ShardedVariableMixin._decompose_indices"], "distribute.sharded_variable.ShardedVariableMixin.scatter_add": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices"], "distribute.sharded_variable.ShardedVariableMixin.scatter_div": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices"], "distribute.sharded_variable.ShardedVariableMixin.scatter_max": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices"], "distribute.sharded_variable.ShardedVariableMixin.scatter_min": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices"], "distribute.sharded_variable.ShardedVariableMixin.scatter_mul": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices"], "distribute.sharded_variable.ShardedVariableMixin.scatter_sub": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices"], "distribute.sharded_variable.ShardedVariableMixin.scatter_update": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices"], "distribute.sharded_variable.ShardedVariableMixin.batch_scatter_update": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indexed_slices"], "distribute.sharded_variable.ShardedVariableMixin.sparse_read": ["<builtin>.enumerate", "distribute.sharded_variable.ShardedVariableMixin._decompose_indices", "ops.array_ops.concat"], "distribute.sharded_variable.ShardedVariableMixin._gather_saveables_for_checkpoint": [], "distribute.sharded_variable.ShardedVariableMixin._gather_saveables_for_checkpoint._saveable_factory": ["<builtin>.int", "saving.saveable_object_util.ResourceVariableSaveable", "copy.copy", "variables.Variable.SaveSliceInfo", "<builtin>.range", "<builtin>.len"], "variables.Variable.SaveSliceInfo": [], "saving.saveable_object_util.ResourceVariableSaveable": [], "distribute.sharded_variable.ShardedVariableMixin._map_resources": ["distribute.sharded_variable.ShardedVariableMixin.__init__"], "distribute.sharded_variable.ShardedVariable._type_spec": ["ops.resource_variable_ops.VariableSpec", "distribute.sharded_variable.ShardedVariableSpec.__init__"], "distribute.sharded_variable.ShardedVariable._overload_all_operators": ["distribute.sharded_variable.ShardedVariable._overload_operator"], "distribute.sharded_variable.ShardedVariable._overload_operator": ["<builtin>.getattr", "<builtin>.setattr"], "distribute.sharded_variable.ShardedVariable._overload_operator._operator": ["distribute.sharded_variable._var_to_tensor"], "distribute.sharded_variable.embedding_lookup": ["<builtin>.isinstance", "ops.embedding_ops.embedding_lookup"], "ops.embedding_ops.embedding_lookup": ["<builtin>.isinstance", "ops.embedding_ops.embedding_lookup_ragged", "ops.embedding_ops._embedding_lookup_and_transform"], "distribute.sharded_variable._raise_when_load": ["<builtin>.ValueError"], "distribute.sharded_variable.<lambda1>": ["<builtin>.isinstance"], "saved_model.revived_types.VersionedTypeRegistration": [], "distribute.shared_variable_creator": ["re.compile"], "distribute.shared_variable_creator._canonicalize_variable_name": [], "distribute.shared_variable_creator.make_fn.create_new_variable": ["distribute.shared_variable_creator._canonicalize_variable_name"], "distribute.shared_variable_creator.make_fn.reuse_variable": ["<builtin>.RuntimeError", "distribute.shared_variable_creator._canonicalize_variable_name"], "distribute.single_loss_example": [], "distribute.single_loss_example.single_loss_example": ["layers.core.Dense", "distribute.step_fn.StandardSingleLossStep"], "distribute.single_loss_example.single_loss_example.dataset_fn": ["dataset_ops.Dataset.from_tensors"], "distribute.single_loss_example.single_loss_example.loss_fn": ["framework.constant_op.constant", "ops.array_ops.reshape"], "distribute.step_fn.StandardSingleLossStep": [], "distribute.single_loss_example.minimize_loss_example": ["layers.core.Dense"], "distribute.single_loss_example.minimize_loss_example.dataset_fn": ["dataset_ops.Dataset.from_tensors"], "distribute.single_loss_example.minimize_loss_example.model_fn": ["distribute.strategy_test_lib.is_optimizer_v2_instance", "distribute.single_loss_example.minimize_loss_example.model_fn.loss_fn"], "distribute.single_loss_example.minimize_loss_example.model_fn.loss_fn": ["framework.constant_op.constant", "ops.array_ops.reshape"], "distribute.strategy_test_lib.is_optimizer_v2_instance": [], "distribute.single_loss_example.minimize_loss_example.model_fn.<lambda1>": [], "distribute.single_loss_example.batchnorm_example": ["layers.normalization.BatchNormalization", "layers.core.Dense"], "distribute.single_loss_example.batchnorm_example.dataset_fn": ["dataset_ops.Dataset.from_tensor_slices", "<builtin>.float", "<builtin>.range"], "layers.normalization.BatchNormalization": [], "distribute.single_loss_example.batchnorm_example.model_fn": ["distribute.strategy_test_lib.is_optimizer_v2_instance"], "distribute.single_loss_example.batchnorm_example.model_fn.loss_fn": ["framework.ops.control_dependencies", "ops.math_ops.reduce_mean", "framework.ops.get_collection", "ops.math_ops.reduce_sum", "framework.constant_op.constant"], "distribute.single_loss_example.batchnorm_example.model_fn.<lambda1>": [], "distribute.step_fn": [], "distribute.step_fn.Step.__init__": [], "distribute.step_fn.Step.distribution": [], "distribute.step_fn.Step.initialize": [], "distribute.step_fn.Step.__call__": ["<builtin>.NotImplementedError"], "distribute.step_fn.StandardInputStep.__init__": ["<builtin>.super"], "distribute.step_fn.StandardInputStep.__init__.<lambda1>": [], "distribute.step_fn.StandardInputStep.initialize": [], "distribute.step_fn.StandardSingleLossStep.__init__": ["<builtin>.super"], "distribute.step_fn.StandardSingleLossStep.__call__": [], "distribute.step_fn.StandardSingleLossStep.__call__.step_fn": ["eager.backprop.implicit_grad", "training.optimizer.get_filtered_grad_fn"], "eager.backprop.implicit_grad": [], "training.optimizer.get_filtered_grad_fn": [], "distribute.strategy_combinations._version_chooser": [], "distribute.strategy_combinations._version_chooser.creator": ["python.tf2.enabled", "distribute.central_storage_strategy.CentralStorageStrategyV1", "distribute.central_storage_strategy.CentralStorageStrategy", "distribute.mirrored_strategy.MirroredStrategy", "distribute.mirrored_strategy.MirroredStrategyV1", "distribute.one_device_strategy.OneDeviceStrategyV1", "distribute.one_device_strategy.OneDeviceStrategy"], "distribute.central_storage_strategy.CentralStorageStrategy": [], "distribute.one_device_strategy.OneDeviceStrategy": [], "distribute.mirrored_strategy.MirroredStrategyV1": [], "distribute.central_storage_strategy.CentralStorageStrategyV1": [], "distribute.strategy_combinations._get_tpu_strategy_creator": [], "distribute.strategy_combinations._get_tpu_strategy_creator._create_tpu_strategy": ["eager.remote.connect_to_cluster", "tpu.device_assignment.DeviceAssignment", "python.tf2.enabled", "tpu.tpu_strategy_util.initialize_tpu_system", "<builtin>.hasattr", "<builtin>.getattr", "distribute.tpu_strategy.TPUStrategy", "cluster_resolver.tpu_cluster_resolver.TPUClusterResolver", "distribute.tpu_strategy.TPUStrategyV1"], "cluster_resolver.tpu_cluster_resolver.TPUClusterResolver": [], "tpu.device_assignment.DeviceAssignment": [], "distribute.tpu_strategy.TPUStrategy": [], "distribute.tpu_strategy.TPUStrategyV1": [], "distribute.strategy_combinations._mirrored_strategy_with_collective_key_base": ["distribute.strategy_combinations._version_chooser.creator"], "distribute.strategy_combinations._mirrored_strategy_with_no_merge_call": ["distribute.strategy_combinations._version_chooser.creator"], "distribute.strategy_combinations._mirrored_strategy_with_no_merge_call.<lambda1>": [], "distribute.strategy_combinations._get_multi_worker_mirrored_creator": [], "distribute.strategy_combinations._get_multi_worker_mirrored_creator._create_multi_worker_mirrored": ["distribute.collective_all_reduce_strategy.CollectiveAllReduceStrategy", "eager.context.eager_mode", "distribute.cluster_resolver.TFConfigClusterResolver", "distribute.cluster_resolver.SimpleClusterResolver", "<builtin>.len", "distribute.multi_process_runner.get_barrier"], "distribute.collective_all_reduce_strategy.CollectiveAllReduceStrategy": [], "distribute.strategy_combinations._get_multi_worker_mirrored_creator._create_multi_worker_mirrored.<lambda1>": [], "distribute.strategy_combinations.get_cluster_def": ["distribute.multi_worker_test_base.create_in_process_cluster", "<builtin>.ValueError"], "distribute.multi_worker_test_base.create_in_process_cluster": [], "distribute.strategy_combinations._get_ps_strategy_creator": [], "distribute.strategy_combinations._get_ps_strategy_creator._create_ps_strategy": ["distribute.parameter_server_strategy_v2.ParameterServerStrategyV2"], "distribute.parameter_server_strategy_v2.ParameterServerStrategyV2": [], "distribute.strategy_combinations._get_ps_strategy_creator._create_parameter_server": ["training.server_lib.Server", "distribute.strategy_combinations._get_ps_strategy_creator._create_ps_strategy", "framework.test_util.is_xla_enabled", "distribute.cluster_resolver.TFConfigClusterResolver", "protobuf.config_pb2.ConfigProto", "distribute.cluster_resolver.SimpleClusterResolver", "distribute.multi_worker_test_base.create_in_process_cluster", "training.server_lib.ClusterSpec"], "distribute.strategy_combinations._deferred_pool_runner": [], "distribute.strategy_combinations._deferred_pool_runner.get_or_create": ["distribute.multi_worker_test_base.create_cluster_spec", "distribute.multi_process_runner.MultiProcessPoolRunner"], "distribute.multi_process_runner.MultiProcessPoolRunner": [], "distribute.combinations.NamedDistribution": [], "distribute.strategy_combinations.<lambda1>": ["distribute.strategy_combinations._version_chooser.creator"], "distribute.strategy_combinations.<lambda2>": ["distribute.strategy_combinations._version_chooser.creator"], "distribute.strategy_combinations.<lambda3>": ["distribute.strategy_combinations._version_chooser.creator"], "distribute.strategy_combinations.<lambda4>": ["distribute.strategy_combinations._version_chooser.creator"], "distribute.strategy_combinations.<lambda5>": ["distribute.strategy_combinations._mirrored_strategy_with_collective_key_base"], "distribute.strategy_combinations.<lambda6>": ["distribute.strategy_combinations._mirrored_strategy_with_collective_key_base"], "distribute.strategy_combinations.<lambda7>": ["distribute.strategy_combinations._mirrored_strategy_with_collective_key_base"], "distribute.strategy_combinations.<lambda8>": ["distribute.strategy_combinations._mirrored_strategy_with_collective_key_base"], "distribute.strategy_combinations.<lambda9>": ["distribute.strategy_combinations._mirrored_strategy_with_collective_key_base"], "distribute.strategy_combinations.<lambda10>": ["distribute.strategy_combinations._mirrored_strategy_with_no_merge_call"], "distribute.strategy_combinations.<lambda11>": ["distribute.strategy_combinations._mirrored_strategy_with_collective_key_base"], "distribute.strategy_combinations.<lambda12>": ["distribute.strategy_combinations._version_chooser.creator"], "distribute.strategy_combinations.<lambda13>": ["distribute.strategy_combinations._version_chooser.creator"], "distribute.strategy_combinations.parameter_server_strategy_fn": ["distribute.strategy_combinations._get_ps_strategy_creator", "distribute.combinations.NamedDistribution"], "distribute.strategy_combinations.set_virtual_cpus_to_at_least": ["distribute.test_util.set_logical_devices_to_at_least"], "distribute.test_util.set_logical_devices_to_at_least": [], "distribute.strategy_combinations.strategy_minus_tpu_combinations": ["distribute.combinations.combine"], "distribute.combinations.combine": [], "distribute.strategy_combinations.tpu_strategy_combinations": ["distribute.combinations.combine"], "distribute.strategy_combinations.all_strategy_combinations": ["distribute.strategy_combinations.strategy_minus_tpu_combinations", "distribute.strategy_combinations.tpu_strategy_combinations"], "distribute.strategy_combinations.all_strategy_minus_default_and_tpu_combinations": ["distribute.combinations.combine"], "distribute.strategy_combinations.all_strategy_combinations_minus_default": ["distribute.strategy_combinations.all_strategy_minus_default_and_tpu_combinations", "distribute.strategy_combinations.tpu_strategy_combinations"], "distribute.summary_op_util": [], "distribute.summary_op_util.skip_summary": ["distribute.distribution_strategy_context.get_replica_context", "framework.tensor_util.constant_value", "<builtin>.isinstance"], "distribute.tpu_strategy": ["contextlib.contextmanager"], "distribute.tpu_strategy.maybe_init_scope": ["framework.ops.init_scope", "framework.ops.executing_eagerly_outside_functions"], "distribute.tpu_strategy.validate_run_function": ["<builtin>.isinstance", "<builtin>.callable", "eager.context.executing_eagerly", "<builtin>.NotImplementedError"], "distribute.tpu_strategy._maybe_partial_apply_variables": ["util.tf_inspect.signature", "functools.partial", "<builtin>.ValueError", "<builtin>.any", "distribute.tpu_strategy._maybe_partial_apply_variables.is_distributed_var", "<builtin>.len", "<builtin>.enumerate"], "distribute.tpu_strategy._maybe_partial_apply_variables.is_distributed_var": ["<builtin>.isinstance", "util.nest.flatten"], "util.tf_inspect.signature": ["util.tf_decorator.unwrap", "inspect.signature"], "distribute.tpu_strategy.TPUStrategyV2.__init__": ["<builtin>.super", "distribute_lib.distribution_strategy_gauge.get_cell", "distribute_lib.distribution_strategy_replica_gauge.get_cell", "distribute.tpu_strategy.TPUExtended.__init__"], "distribute.tpu_strategy.TPUExtended.__init__": ["numpy.array", "distribute.cluster_resolver.TPUClusterResolver", "distribute.device_util.canonicalize", "atexit.register", "<builtin>.super", "weakref.WeakKeyDictionary", "collections.OrderedDict", "distribute.device_util.get_host_for_device", "<builtin>.range", "eager.context.executing_eagerly", "device_spec.DeviceSpecV2.from_string"], "distribute.tpu_strategy.TPUStrategyV2.run": ["impl.api.tf_convert", "core.ag_ctx.control_status_ctx", "distribute.tpu_strategy._maybe_partial_apply_variables", "distribute.distribute_lib.RunOptions", "Strategy.extended.tpu_run", "distribute.tpu_strategy.validate_run_function"], "distribute.distribute_lib.RunOptions": [], "Strategy.extended.tpu_run": [], "distribute.tpu_strategy.TPUStrategyV2.experimental_assign_to_logical_device": ["xla_sharding.xla_sharding.assign_device", "<builtin>.ValueError"], "distribute.tpu_strategy.TPUStrategyV2.experimental_split_to_logical_devices": ["numpy.arange", "numpy.prod", "<builtin>.ValueError", "xla_sharding.xla_sharding.tile", "<builtin>.enumerate", "<builtin>.len"], "distribute.tpu_strategy.TPUStrategyV2.experimental_replicate_to_logical_devices": ["xla_sharding.xla_sharding.replicate"], "distribute.tpu_strategy.TPUStrategy.__init__": ["distribute_lib.distribution_strategy_replica_gauge.get_cell", "distribute.tpu_strategy.TPUExtended.__init__", "<builtin>.super", "distribute_lib.distribution_strategy_gauge.get_cell", "absl.logging.warning"], "distribute.tpu_strategy.TPUStrategy.run": ["impl.api.tf_convert", "core.ag_ctx.control_status_ctx", "distribute.tpu_strategy._maybe_partial_apply_variables", "distribute.distribute_lib.RunOptions", "Strategy.extended.tpu_run", "distribute.tpu_strategy.validate_run_function"], "distribute.tpu_strategy.TPUStrategy.cluster_resolver": [], "distribute.tpu_strategy.TPUStrategyV1.__init__": ["<builtin>.super", "distribute_lib.distribution_strategy_gauge.get_cell", "distribute_lib.distribution_strategy_replica_gauge.get_cell", "distribute.tpu_strategy.TPUExtended.__init__"], "distribute.tpu_strategy.TPUStrategyV1.steps_per_run": [], "distribute.tpu_strategy.TPUStrategyV1.run": ["impl.api.tf_convert", "core.ag_ctx.control_status_ctx", "StrategyV1.extended.tpu_run", "distribute.tpu_strategy._maybe_partial_apply_variables", "distribute.distribute_lib.RunOptions", "distribute.tpu_strategy.validate_run_function"], "StrategyV1.extended.tpu_run": [], "distribute.cluster_resolver.TPUClusterResolver": [], "device_spec.DeviceSpecV2.from_string": [], "distribute.tpu_strategy.TPUExtended._validate_colocate_with_variable": ["distribute.distribute_utils.validate_colocate"], "distribute.tpu_strategy.TPUExtended._make_dataset_iterator": ["<builtin>.tuple", "distribute_lib.StrategyExtendedV1._container_strategy", "distribute.input_lib.InputWorkers", "distribute.input_lib.DatasetIterator"], "distribute.tpu_strategy.TPUExtended._make_input_fn_iterator": ["distribute.input_lib.InputWorkers", "distribute.distribute_lib.InputContext", "<builtin>.tuple", "distribute_lib.StrategyExtendedV1._container_strategy", "distribute.input_lib.InputFunctionIterator", "<builtin>.range"], "distribute.tpu_strategy.TPUExtended._experimental_make_numpy_dataset": ["distribute.numpy_dataset.SingleDevice", "distribute.numpy_dataset.one_host_numpy_dataset"], "distribute.tpu_strategy.TPUExtended._get_input_workers": ["<builtin>.tuple", "distribute.input_lib.InputWorkers"], "distribute.tpu_strategy.TPUExtended._check_spec": ["<builtin>.isinstance", "util.nest.flatten_with_joined_string_paths", "<builtin>.ValueError", "<builtin>.type"], "util.nest.flatten_with_joined_string_paths": ["util.nest.flatten", "util.nest.yield_flat_paths", "<builtin>.zip", "util.nest.flatten_with_joined_string_paths.stringify_and_join", "<builtin>.list"], "distribute.tpu_strategy.TPUExtended._experimental_distribute_dataset": ["distribute.input_lib.get_distributed_dataset", "distribute_lib.StrategyExtendedV1._container_strategy", "<builtin>.NotImplementedError", "distribute.tpu_strategy.TPUExtended._get_input_workers", "distribute.tpu_strategy.TPUExtended._check_spec"], "distribute.tpu_strategy.TPUExtended._distribute_datasets_from_function": ["distribute.input_lib.get_distributed_datasets_from_function", "distribute.distribute_lib.InputContext", "distribute_lib.StrategyExtendedV1._container_strategy", "<builtin>.NotImplementedError", "<builtin>.range", "distribute.tpu_strategy.TPUExtended._get_input_workers", "distribute.tpu_strategy.TPUExtended._check_spec"], "distribute.tpu_strategy.TPUExtended._experimental_distribute_values_from_function": ["<builtin>.range", "distribute.distribute_utils.regroup", "distribute.distribute_lib.ValueContext"], "distribute.tpu_strategy.TPUExtended._experimental_run_steps_on_iterator": ["distribute.tpu_strategy._set_last_step_outputs", "tpu.training_loop.repeat", "framework.ops.device", "<builtin>.len", "framework.ops.get_default_graph", "ops.control_flow_ops.group", "<builtin>.isinstance", "distribute.input_lib.MultiStepContext", "util.nest.flatten", "<builtin>.range", "distribute.tpu_strategy.TPUExtended._experimental_run_steps_on_iterator.rewrite_fn"], "distribute.tpu_strategy.TPUExtended._experimental_run_steps_on_iterator.run_fn": ["ops.array_ops.identity", "framework.ops.control_dependencies", "util.nest.flatten"], "distribute.tpu_strategy.TPUExtended._experimental_run_steps_on_iterator.rewrite_fn": ["util.nest.map_structure", "tpu.tpu.replicate", "<builtin>.isinstance", "tpu.tpu.XLAOptions", "<builtin>.range", "util.nest.flatten"], "distribute.tpu_strategy.TPUExtended._experimental_run_steps_on_iterator.rewrite_fn.<lambda1>": ["distribute.distribute_utils.select_replica"], "tpu.tpu.XLAOptions": [], "tpu.tpu.replicate": ["tpu.tpu.split_compile_and_replicate"], "tpu.training_loop.repeat": ["<builtin>.len", "tpu.training_loop.repeat._convert_to_list", "tpu.training_loop.while_loop"], "distribute.tpu_strategy._set_last_step_outputs": ["util.nest.pack_sequence_as", "distribute.values.PerReplica"], "distribute.tpu_strategy.TPUExtended._call_for_each_replica": ["distribute_lib.StrategyExtendedV1._container_strategy", "distribute.tpu_strategy._TPUReplicaContext.__init__"], "distribute.tpu_strategy._TPUReplicaContext.__init__": ["distribute_lib.ReplicaContext.__init__"], "distribute.tpu_strategy.TPUExtended": ["contextlib.contextmanager"], "distribute.tpu_strategy.TPUExtended.experimental_logical_device": ["distribute.tpu_util.enclosing_tpu_context", "<builtin>.ValueError", "framework.ops.device", "tpu.tpu.core"], "distribute.tpu_util.enclosing_tpu_context": ["distribute.tpu_util.enclosing_tpu_context_and_graph"], "tpu.tpu.core": [], "distribute.tpu_strategy.TPUExtended._experimental_initialize_system": ["tpu.tpu_strategy_util.initialize_tpu_system"], "distribute.tpu_strategy.TPUExtended._create_variable": ["<builtin>.isinstance", "distribute_lib.StrategyExtendedV1._container_strategy", "framework.ops.device", "distribute.distribute_utils.create_mirrored_variable"], "distribute.tpu_strategy.TPUExtended._create_variable._real_mirrored_creator": ["framework.ops.device", "<builtin>.isinstance", "eager.context.device_policy", "distribute.tpu_strategy.maybe_init_scope", "<builtin>.callable", "<builtin>.enumerate"], "distribute.tpu_strategy.TPUExtended._resource_creator_scope": ["framework.ops.resource_creator_scope"], "distribute.tpu_strategy.TPUExtended._resource_creator_scope.lookup_creator": ["distribute.values.PerWorkerResource", "distribute_lib.StrategyExtendedV1._container_strategy", "collections.OrderedDict", "framework.ops.device"], "distribute.values.PerWorkerResource": [], "framework.ops.resource_creator_scope": ["framework.ops.Graph._resource_creator_scope", "framework.ops.get_default_graph"], "distribute.tpu_strategy.TPUExtended._gather_to_implementation": ["ops.array_ops.concat", "<builtin>.list", "<builtin>.isinstance", "distribute.tpu_strategy.TPUExtended._broadcast_output", "<builtin>.range", "<builtin>.len"], "distribute.tpu_strategy.TPUExtended._broadcast_output": ["ops.array_ops.identity", "distribute.cross_device_ops.simple_broadcast", "framework.ops.device", "distribute.device_util.canonicalize", "distribute.cross_device_ops.get_devices_from", "<builtin>.len"], "distribute.tpu_strategy.TPUExtended._reduce_to": ["distribute.tpu_util.enclosing_tpu_context", "ops.tpu_ops.cross_replica_sum", "<builtin>.tuple", "<builtin>.NotImplementedError", "framework.tensor_util.is_tf_type", "<builtin>.isinstance", "distribute.cross_device_ops.reduce_non_distributed_value", "ops.math_ops.add_n", "ops.array_ops.zeros_like", "<builtin>.range", "ops.math_ops.scalar_mul", "distribute.tpu_strategy.TPUExtended._broadcast_output", "<builtin>.len"], "ops.math_ops.scalar_mul": ["ops.gen_math_ops.mul", "<builtin>.ValueError", "framework.ops.IndexedSlices", "<builtin>.isinstance", "framework.ops.convert_to_tensor"], "ops.tpu_ops.cross_replica_sum": ["ops.gen_tpu_ops.cross_replica_sum", "ops.tpu_ops._create_default_group_assignment"], "distribute.tpu_strategy.TPUExtended._update": ["distribute.distribute_utils.assert_mirrored", "distribute.distribute_utils.update_regroup", "framework.ops.device", "distribute.tpu_util.enclosing_tpu_context", "distribute.distribute_lib.UpdateContext", "<builtin>.isinstance", "distribute.distribute_utils.select_replica", "framework.ops.name_scope", "<builtin>.enumerate"], "distribute.tpu_strategy.TPUExtended.read_var": ["<builtin>.isinstance"], "distribute.tpu_strategy.TPUExtended.value_container": [], "distribute.tpu_strategy.TPUExtended._broadcast_to": ["ops.tpu_ops.all_to_all", "<builtin>.isinstance", "<builtin>.range", "distribute.tpu_util.enclosing_tpu_context"], "ops.tpu_ops.all_to_all": ["ops.gen_tpu_ops.all_to_all", "ops.tpu_ops._create_default_group_assignment"], "distribute.tpu_strategy.TPUExtended.num_hosts": ["<builtin>.set", "<builtin>.range", "<builtin>.len"], "distribute.tpu_strategy.TPUExtended.num_replicas_per_host": ["<builtin>.min"], "distribute.tpu_strategy.TPUExtended._num_replicas_in_sync": [], "distribute.tpu_strategy.TPUExtended.experimental_between_graph": [], "distribute.tpu_strategy.TPUExtended.experimental_should_init": [], "distribute.tpu_strategy.TPUExtended.should_checkpoint": [], "distribute.tpu_strategy.TPUExtended.should_save_summary": [], "distribute.tpu_strategy.TPUExtended.worker_devices": ["<builtin>.tuple"], "distribute.tpu_strategy.TPUExtended.parameter_devices": [], "distribute.tpu_strategy.TPUExtended.non_slot_devices": [], "distribute.tpu_strategy.TPUExtended._update_non_slot": ["util.nest.map_structure", "framework.ops.device", "distribute.distribute_lib.UpdateContext"], "distribute.tpu_strategy.TPUExtended._configure": ["distribute.tpu_strategy.TPUExtended._update_config_proto"], "distribute.tpu_strategy.TPUExtended._update_config_proto": ["copy.deepcopy"], "distribute.tpu_strategy.TPUExtended._global_batch_size": [], "distribute.tpu_strategy.TPUExtended.tpu_run": ["distribute.tpu_strategy.TPUExtended._tpu_function_creator.tpu_function", "distribute.tpu_strategy.TPUExtended._tpu_function_creator"], "distribute.tpu_strategy.TPUExtended._tpu_function_creator": ["distribute_lib.StrategyExtendedV1._container_strategy", "eager.def_function.function", "eager.context.executing_eagerly"], "distribute.tpu_strategy.TPUExtended._tpu_function_creator.tpu_function": ["framework.tensor_shape.TensorShape", "distribute.distribute_utils.regroup", "util.nest.pack_sequence_as", "tpu.tpu.replicate", "framework.tensor_util.is_tf_type", "<builtin>.isinstance", "tpu.tpu.XLAOptions", "distribute.tpu_strategy.TPUExtended._tpu_function_creator.tpu_function.<lambda1>", "<builtin>.range", "distribute.distribute_utils.select_replica", "framework.constant_op.constant", "util.nest.flatten", "<builtin>.ValueError", "<builtin>.len", "numpy.ndim"], "distribute.tpu_strategy.TPUExtended._tpu_function_creator.tpu_function.replicated_fn": ["distribute.tpu_strategy._TPUReplicaContext.__init__"], "distribute.tpu_strategy.TPUExtended._tpu_function_creator.tpu_function.<lambda1>": ["<builtin>.isinstance"], "distribute.tpu_strategy.TPUExtended._in_multi_worker_mode": [], "distribute.tpu_strategy.TPUExtended._get_local_replica_id": [], "distribute.tpu_strategy._TPUReplicaContext.devices": ["framework.tensor_util.constant_value", "distribute.distribute_lib.require_replica_context", "tpu.tpu.core"], "distribute.tpu_strategy._TPUReplicaContext.experimental_logical_device": ["strategy.extended.experimental_logical_device"], "strategy.extended.experimental_logical_device": [], "distribute.tpu_strategy._TPUReplicaContext.all_gather": ["<builtin>.NotImplementedError", "util.nest.pack_sequence_as", "<builtin>.isinstance", "distribute.tpu_strategy._TPUReplicaContext.all_gather._all_to_all", "util.nest.flatten"], "distribute.tpu_strategy._TPUReplicaContext.all_gather._all_to_all": ["ops.array_ops.concat", "ops.array_ops.expand_dims_v2", "ops.math_ops.unsorted_segment_sum", "ops.array_ops.split", "ops.tpu_ops.all_to_all", "ops.array_ops.squeeze", "<builtin>.range", "ops.array_ops.expand_dims"], "distribute.tpu_util": ["contextlib.contextmanager"], "distribute.tpu_util.enclosing_tpu_context_and_graph": ["<builtin>.isinstance", "framework.ops.get_default_graph", "<builtin>.getattr"], "distribute.tpu_util.outside_or_skip_tpu_context": ["distribute.tpu_util.enclosing_tpu_context_and_graph"], "distribute.tpu_values": ["contextlib.contextmanager"], "distribute.tpu_values._maybe_enter_graph": ["eager.context.executing_eagerly", "<builtin>.isinstance", "framework.ops.has_default_graph"], "framework.ops.has_default_graph": ["<builtin>.len"], "distribute.tpu_values._maybe_on_device": ["<builtin>.isinstance", "framework.ops.device"], "distribute.tpu_values._make_raw_assign_fn": [], "distribute.tpu_values._make_raw_assign_fn.assign_fn": ["distribute.tpu_values.TPUVariableMixin._read_variable_op", "ops.gen_resource_variable_ops.assign_variable_op", "framework.ops.convert_to_tensor", "ops.gen_resource_variable_ops.assign_add_variable_op", "distribute.tpu_values._maybe_enter_graph", "distribute.tpu_values._maybe_on_device", "ops.gen_resource_variable_ops.assign_sub_variable_op", "framework.ops.control_dependencies"], "ops.gen_resource_variable_ops.assign_add_variable_op": [], "ops.gen_resource_variable_ops.assign_sub_variable_op": [], "distribute.tpu_values.TPUVariableMixin._read_variable_op": ["ops.gen_resource_variable_ops.read_variable_op", "eager.tape.variable_accessed", "framework.ops.device", "<builtin>.getattr"], "distribute.tpu_values._make_raw_scatter_xxx_fn": [], "distribute.tpu_values._make_raw_scatter_xxx_fn.scatter_xxx_fn": ["ops.gen_resource_variable_ops.resource_scatter_div", "framework.ops.convert_to_tensor", "ops.gen_resource_variable_ops.resource_scatter_update", "distribute.tpu_values._maybe_enter_graph", "distribute.tpu_values._maybe_on_device", "framework.ops.control_dependencies", "ops.gen_resource_variable_ops.resource_scatter_add", "ops.gen_resource_variable_ops.resource_scatter_min", "ops.gen_resource_variable_ops.resource_scatter_mul", "ops.gen_resource_variable_ops.resource_scatter_max", "ops.gen_resource_variable_ops.resource_scatter_sub"], "ops.gen_resource_variable_ops.resource_scatter_sub": [], "ops.gen_resource_variable_ops.resource_scatter_add": [], "ops.gen_resource_variable_ops.resource_scatter_max": [], "ops.gen_resource_variable_ops.resource_scatter_min": [], "ops.gen_resource_variable_ops.resource_scatter_update": [], "ops.gen_resource_variable_ops.resource_scatter_div": [], "ops.gen_resource_variable_ops.resource_scatter_mul": [], "distribute.tpu_values.TPUVariableMixin.__init__": ["<builtin>.super", "<builtin>.str", "<builtin>.id", "framework.ops.executing_eagerly_outside_functions"], "distribute.tpu_values.TPUVariableMixin.__getattr__": ["<builtin>.AttributeError", "<builtin>.super", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUVariableMixin.get": ["<builtin>.NotImplementedError", "<builtin>.super", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUVariableMixin._get_as_operand": ["distribute.tpu_values.TPUVariableMixin.read_value"], "distribute.tpu_values.TPUVariableMixin.read_value": ["distribute.tpu_values.TPUVariableMixin._read_variable_op", "<builtin>.super", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUVariableMixin._is_mirrored": ["<builtin>.NotImplementedError"], "distribute.tpu_values.TPUVariableMixin.handle": ["eager.context.executing_eagerly", "<builtin>.isinstance", "distribute.tpu_values.TPUVariableMixin._is_mirrored", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUVariableMixin.device": [], "eager.tape.variable_accessed": ["python.pywrap_tfe.TFE_Py_TapeVariableAccessed", "python.pywrap_tfe.TFE_Py_VariableWatcherVariableAccessed"], "ops.gen_resource_variable_ops.read_variable_op": [], "distribute.tpu_values.TPUVariableMixin.value": ["distribute.tpu_values.TPUVariableMixin._read_variable_op", "<builtin>.super", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUVariableMixin._as_graph_element": ["<builtin>.super", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUVariableMixin.op": ["distribute.values_util.is_saving_non_distributed", "distribute.values.DistributedVarOp"], "distribute.values_util.is_saving_non_distributed": ["saved_model.save_context.in_save_context", "saved_model.save_context.get_save_options"], "distribute.values.DistributedVarOp": [], "distribute.tpu_values.TPUVariableMixin._dense_var_to_tensor": ["distribute.tpu_values.TPUVariableMixin.read_value", "<builtin>.super", "ops.math_ops.cast", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUDistributedVariable._is_mirrored": ["DistributedVariable._policy._is_mirrored"], "DistributedVariable._policy._is_mirrored": [], "distribute.tpu_values.TPUDistributedVariable.assign_sub": ["DistributedVariable._policy.assign_sub", "distribute.values_util.is_saving_non_distributed", "DistributedVariable._primary.assign_sub"], "DistributedVariable._primary.assign_sub": [], "DistributedVariable._policy.assign_sub": [], "distribute.tpu_values.TPUDistributedVariable.assign_add": ["DistributedVariable._primary.assign_add", "distribute.values_util.is_saving_non_distributed", "DistributedVariable._policy.assign_add"], "DistributedVariable._primary.assign_add": [], "DistributedVariable._policy.assign_add": [], "distribute.tpu_values.TPUDistributedVariable.assign": ["DistributedVariable._policy.assign", "distribute.values_util.is_saving_non_distributed", "DistributedVariable._primary.assign"], "DistributedVariable._primary.assign": [], "DistributedVariable._policy.assign": [], "distribute.tpu_values.TPUDistributedVariable.scatter_sub": ["distribute.values_util.is_saving_non_distributed", "DistributedVariable._policy.scatter_sub", "DistributedVariable._primary.scatter_sub"], "DistributedVariable._primary.scatter_sub": [], "DistributedVariable._policy.scatter_sub": [], "distribute.tpu_values.TPUDistributedVariable.scatter_add": ["DistributedVariable._policy.scatter_add", "DistributedVariable._primary.scatter_add", "distribute.values_util.is_saving_non_distributed"], "DistributedVariable._primary.scatter_add": [], "DistributedVariable._policy.scatter_add": [], "distribute.tpu_values.TPUDistributedVariable.scatter_mul": ["DistributedVariable._policy.scatter_mul", "DistributedVariable._primary.scatter_mul", "distribute.values_util.is_saving_non_distributed"], "DistributedVariable._primary.scatter_mul": [], "DistributedVariable._policy.scatter_mul": [], "distribute.tpu_values.TPUDistributedVariable.scatter_div": ["distribute.values_util.is_saving_non_distributed", "DistributedVariable._primary.scatter_div", "DistributedVariable._policy.scatter_div"], "DistributedVariable._primary.scatter_div": [], "DistributedVariable._policy.scatter_div": [], "distribute.tpu_values.TPUDistributedVariable.scatter_min": ["DistributedVariable._policy.scatter_min", "distribute.values_util.is_saving_non_distributed", "DistributedVariable._primary.scatter_min"], "DistributedVariable._primary.scatter_min": [], "DistributedVariable._policy.scatter_min": [], "distribute.tpu_values.TPUDistributedVariable.scatter_max": ["distribute.values_util.is_saving_non_distributed", "DistributedVariable._primary.scatter_max", "DistributedVariable._policy.scatter_max"], "DistributedVariable._primary.scatter_max": [], "DistributedVariable._policy.scatter_max": [], "distribute.tpu_values.TPUDistributedVariable.scatter_update": ["distribute.values_util.is_saving_non_distributed", "DistributedVariable._policy.scatter_update", "DistributedVariable._primary.scatter_update"], "DistributedVariable._primary.scatter_update": [], "DistributedVariable._policy.scatter_update": [], "distribute.tpu_values.TPUMirroredVariable.assign_sub": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "distribute.tpu_values.TPUMirroredVariable.assign_sub", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUMirroredVariable.assign_add": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_values.TPUMirroredVariable.assign_add", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUMirroredVariable.assign": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_values.TPUMirroredVariable.assign", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUMirroredVariable.scatter_sub": ["MirroredVariable._primary.scatter_sub", "distribute.values_util.is_saving_non_distributed"], "MirroredVariable._primary.scatter_sub": [], "distribute.tpu_values.TPUMirroredVariable.scatter_add": ["MirroredVariable._primary.scatter_add", "distribute.values_util.is_saving_non_distributed"], "MirroredVariable._primary.scatter_add": [], "distribute.tpu_values.TPUMirroredVariable.scatter_max": ["MirroredVariable._primary.scatter_max", "distribute.values_util.is_saving_non_distributed"], "MirroredVariable._primary.scatter_max": [], "distribute.tpu_values.TPUMirroredVariable.scatter_min": ["MirroredVariable._primary.scatter_min", "distribute.values_util.is_saving_non_distributed"], "MirroredVariable._primary.scatter_min": [], "distribute.tpu_values.TPUMirroredVariable.scatter_mul": ["MirroredVariable._primary.scatter_mul", "distribute.values_util.is_saving_non_distributed"], "MirroredVariable._primary.scatter_mul": [], "distribute.tpu_values.TPUMirroredVariable.scatter_div": ["distribute.values_util.is_saving_non_distributed", "MirroredVariable._primary.scatter_div"], "MirroredVariable._primary.scatter_div": [], "distribute.tpu_values.TPUMirroredVariable.scatter_update": ["distribute.values_util.is_saving_non_distributed", "MirroredVariable._primary.scatter_update"], "MirroredVariable._primary.scatter_update": [], "distribute.tpu_values.TPUMirroredVariable._is_mirrored": [], "distribute.tpu_values.TPUSyncOnReadVariable.assign_sub": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "distribute.tpu_values._make_raw_assign_fn", "values.SyncOnReadVariable.assign_sub", "distribute.tpu_util.enclosing_tpu_context"], "values.SyncOnReadVariable.assign_sub": [], "distribute.tpu_values.TPUSyncOnReadVariable.assign_add": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "values.SyncOnReadVariable.assign_add", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_util.enclosing_tpu_context"], "values.SyncOnReadVariable.assign_add": [], "distribute.tpu_values.TPUSyncOnReadVariable.assign": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "values.SyncOnReadVariable.assign", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_util.enclosing_tpu_context"], "values.SyncOnReadVariable.assign": [], "distribute.tpu_values.TPUSyncOnReadVariable._is_mirrored": [], "distribute.tpu_values.assign_sub": ["distribute.tpu_values._make_raw_assign_fn"], "distribute.tpu_values.assign_add": ["distribute.tpu_values._make_raw_assign_fn"], "distribute.tpu_values.assign": ["distribute.tpu_values._make_raw_assign_fn"], "distribute.tpu_values.TPUOnWritePolicy.assign_sub": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_values.TPUOnWritePolicy.assign_sub", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUOnWritePolicy.assign_add": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "distribute.tpu_values.TPUOnWritePolicy.assign_add", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUOnWritePolicy.assign": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_values.TPUOnWritePolicy.assign", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUOnWritePolicy._scatter_xxx": ["<builtin>.NotImplementedError", "distribute.tpu_values._make_raw_scatter_xxx_fn", "distribute.tpu_values._make_raw_scatter_xxx_fn.scatter_xxx_fn", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUOnWritePolicy.scatter_sub": ["distribute.tpu_values.TPUOnWritePolicy._scatter_xxx"], "distribute.tpu_values.TPUOnWritePolicy.scatter_add": ["distribute.tpu_values.TPUOnWritePolicy._scatter_xxx"], "distribute.tpu_values.TPUOnWritePolicy.scatter_max": ["distribute.tpu_values.TPUOnWritePolicy._scatter_xxx"], "distribute.tpu_values.TPUOnWritePolicy.scatter_min": ["distribute.tpu_values.TPUOnWritePolicy._scatter_xxx"], "distribute.tpu_values.TPUOnWritePolicy.scatter_mul": ["distribute.tpu_values.TPUOnWritePolicy._scatter_xxx"], "distribute.tpu_values.TPUOnWritePolicy.scatter_div": ["distribute.tpu_values.TPUOnWritePolicy._scatter_xxx"], "distribute.tpu_values.TPUOnWritePolicy.scatter_update": ["distribute.tpu_values.TPUOnWritePolicy._scatter_xxx"], "distribute.tpu_values.TPUOnWritePolicy._is_mirrored": [], "distribute.tpu_values.TPUOnReadPolicy.assign_sub": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "<builtin>.super", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUOnReadPolicy.assign_add": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "<builtin>.super", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUOnReadPolicy.assign": ["distribute.tpu_values._make_raw_assign_fn.assign_fn", "<builtin>.super", "distribute.tpu_values._make_raw_assign_fn", "distribute.tpu_util.enclosing_tpu_context"], "distribute.tpu_values.TPUOnReadPolicy._is_mirrored": [], "distribute.tpu_values.TPUOnReadPolicy.scatter_sub": [], "distribute.tpu_values.TPUOnReadPolicy.scatter_add": [], "distribute.tpu_values.TPUOnReadPolicy.scatter_max": [], "distribute.tpu_values.TPUOnReadPolicy.scatter_min": [], "distribute.tpu_values.TPUOnReadPolicy.scatter_mul": [], "distribute.tpu_values.TPUOnReadPolicy.scatter_div": [], "distribute.tpu_values.TPUOnReadPolicy.scatter_update": [], "distribute.values": ["framework.ops.register_tensor_conversion_function"], "distribute.values._on_write_update_replica": ["distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.get_strategy", "distribute.values_util.mark_as_unsaveable", "framework.tensor_util.is_tf_type", "distribute.values.apply_aggregation_replica_context", "<builtin>.ValueError", "distribute.values.DistributedVariable._get_on_device_or_primary"], "distribute.values.DistributedVariable._get_on_device_or_primary": ["distribute.values_util.get_current_replica_id_as_int", "distribute.values.DistributedVariable._get_replica", "<builtin>.enumerate", "distribute.device_util.canonicalize", "distribute.values_util.is_saving_non_distributed", "distribute.device_util.current"], "distribute.values.apply_aggregation_replica_context": ["reduce_util.ReduceOp.from_variable_aggregation", "<builtin>.TypeError", "<builtin>.isinstance", "distribute.distribution_strategy_context.get_strategy", "framework.tensor_util.is_tf_type", "distribute.distribution_strategy_context.get_replica_context"], "distribute.values._on_write_update_replica.merge_fn": ["distribute.values_util.apply_aggregation", "<builtin>.isinstance", "<builtin>.ValueError", "distribute.values.DistributedVariable._update_cross_replica"], "distribute.values.DistributedVariable._update_cross_replica": ["distribute.values_util.mark_as_unsaveable"], "distribute.values.apply_aggregation_replica_context.merge_fn": [], "reduce_util.ReduceOp.from_variable_aggregation": [], "distribute.values.DistributedValues.__init__": ["<builtin>.tuple"], "distribute.values.DistributedValues._get": ["distribute.values_util.get_current_replica_id_as_int", "distribute.values.DistributedValues._get_cross_replica"], "distribute.values.DistributedValues._get_cross_replica": ["<builtin>.NotImplementedError"], "distribute.values.DistributedValues._get_on_device_or_primary": ["distribute.values_util.get_current_replica_id_as_int", "distribute.device_util.canonicalize", "distribute.device_util.current"], "distribute.values.DistributedValues._primary": [], "distribute.values.DistributedValues._devices": ["<builtin>.tuple"], "distribute.values.DistributedValues.__str__": ["<builtin>.enumerate"], "distribute.values.DistributedValues.__repr__": ["<builtin>.enumerate"], "distribute.values.DistributedDelegate.__getattr__": ["<builtin>.super", "<builtin>.AttributeError", "distribute.values.DistributedValues._get", "<builtin>.getattr"], "distribute.values.DistributedDelegate.values": [], "distribute.values.DistributedDelegate._get_as_operand": ["distribute.values.DistributedValues._get"], "distribute.values.DistributedDelegate.__add__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__radd__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__sub__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rsub__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__mul__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rmul__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__truediv__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rtruediv__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__floordiv__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rfloordiv__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__mod__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rmod__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__lt__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__le__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__gt__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__ge__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__and__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rand__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__or__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__ror__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__xor__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rxor__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__getitem__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__pow__": ["<builtin>.pow", "distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rpow__": ["<builtin>.pow", "distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__invert__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__neg__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__abs__": ["<builtin>.abs", "distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__div__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rdiv__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__matmul__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.DistributedDelegate.__rmatmul__": ["distribute.values.DistributedDelegate._get_as_operand"], "distribute.values.PerReplica._type_spec": ["framework.type_spec.type_spec_from_value", "distribute.values.PerReplicaSpec.__init__"], "distribute.values.PerReplicaSpec.__init__": ["<builtin>.tuple"], "distribute.values.PerReplica.values": [], "distribute.values.PerReplicaSpec.<lambda1>": [], "distribute.values.PerReplicaSpec._serialize": [], "distribute.values.PerReplicaSpec._component_specs": [], "distribute.values.PerReplicaSpec._to_components": ["distribute.distribution_strategy_context.get_replica_context", "<builtin>.ValueError"], "distribute.values.PerReplicaSpec._from_components": ["distribute.values.DistributedValues.__init__"], "distribute.values.Mirrored._get_cross_replica": ["distribute.values.DistributedValues._get_on_device_or_primary"], "distribute.values.Mirrored._as_graph_element": ["<builtin>.callable", "distribute.values.DistributedValues._get", "<builtin>.getattr"], "distribute.values.DistributedVarOp.__init__": [], "distribute.values.DistributedVarOp.__eq__": ["<builtin>.isinstance"], "distribute.values.DistributedVarOp.__hash__": ["<builtin>.hash", "<builtin>.tuple"], "distribute.values.DistributedVariable.__init__": ["<builtin>.super", "distribute.packed_distributed_variable.PackedDistributedVariable", "<builtin>.getattr", "<builtin>.ValueError", "weakref.ref", "framework.ops.executing_eagerly_outside_functions"], "distribute.packed_distributed_variable.PackedDistributedVariable": [], "distribute.values.DistributedVariable.__deepcopy__": ["copy.deepcopy", "<builtin>.type", "distribute.distribution_strategy_context.enter_or_assert_strategy", "framework.ops.device", "<builtin>.id"], "distribute.values.DistributedVariable._use_packed_variable": ["saved_model.save_context.in_save_context"], "distribute.values.DistributedVariable.is_initialized": ["distribute.values.DistributedVariable._use_packed_variable", "distribute.values_util.is_saving_non_distributed", "ops.math_ops.logical_and"], "distribute.values.DistributedVariable.initializer": ["ops.control_flow_ops.group", "distribute.values_util.is_saving_non_distributed", "<builtin>.tuple"], "distribute.values.DistributedVariable.initialized_value": ["distribute.values.DistributedVariable._get_on_device_or_primary"], "distribute.values.DistributedVariable.initial_value": ["distribute.values.DistributedVariable._get_on_device_or_primary"], "distribute.values.DistributedVariable.constraint": [], "distribute.values.DistributedVariable.graph": [], "distribute.values.DistributedVariable._shared_name": [], "distribute.values.DistributedVariable._unique_id": [], "distribute.values.DistributedVariable._graph_key": [], "distribute.values.DistributedVariable.name": [], "distribute.values.DistributedVariable.dtype": [], "distribute.values.DistributedVariable.shape": [], "distribute.values.DistributedVariable.synchronization": [], "distribute.values.DistributedVariable.aggregation": [], "distribute.values.DistributedVariable._packed_variable": ["distribute.values.DistributedVariable._use_packed_variable"], "distribute.values.DistributedVariable.handle": ["distribute.values_util.get_current_replica_id_as_int", "distribute.values.DistributedVariable._use_packed_variable", "distribute.values_util.is_saving_non_distributed", "<builtin>.ValueError"], "distribute.values.DistributedVariable.eval": ["distribute.values.DistributedVariable._get_on_device_or_primary"], "distribute.values.DistributedVariable._save_slice_info": [], "distribute.values.DistributedVariable._get_save_slice_info": [], "distribute.values.DistributedVariable._set_save_slice_info": [], "distribute.values.DistributedVariable.device": ["distribute.values.DistributedVariable._get_on_device_or_primary"], "distribute.values.DistributedVariable.trainable": [], "distribute.values.DistributedVariable.distribute_strategy": [], "distribute.values.DistributedVariable.get_shape": [], "distribute.values.DistributedVariable.to_proto": [], "distribute.values.DistributedVariable.op": ["distribute.values.DistributedVarOp.__init__", "distribute.values.DistributedVariable._get", "distribute.values_util.is_saving_non_distributed", "distribute.distribution_strategy_context.in_cross_replica_context"], "distribute.values.DistributedVariable._get": ["distribute.values_util.get_current_replica_id_as_int", "distribute.values.DistributedVariable._get_cross_replica", "distribute.values_util.is_saving_non_distributed", "distribute.values.DistributedVariable._get_replica"], "distribute.values.DistributedVariable._in_graph_mode": [], "distribute.values.DistributedVariable._get_replica": ["distribute.values.DistributedVariable._use_packed_variable"], "distribute.values.DistributedVariable._get_cross_replica": ["distribute.values_util.is_saving_non_distributed", "<builtin>.NotImplementedError"], "distribute.values.DistributedVariable.read_value": ["distribute.values.DistributedVariable._get", "distribute.values_util.is_saving_non_distributed", "distribute.distribution_strategy_context.enter_or_assert_strategy", "ops.array_ops.identity"], "distribute.values.DistributedVariable.value": ["distribute.values_util.is_saving_non_distributed", "distribute.values.DistributedVariable._get_on_device_or_primary"], "distribute.values.DistributedVariable.numpy": ["<builtin>.NotImplementedError", "distribute.values.DistributedVariable.read_value", "eager.context.executing_eagerly"], "distribute.values.DistributedVariable.assign_sub": ["distribute.values_util.on_write_assign_sub", "distribute.values_util.is_saving_non_distributed"], "distribute.values_util.on_write_assign_sub": [], "distribute.values.DistributedVariable.assign_add": ["distribute.values_util.on_write_assign_add", "distribute.values_util.is_saving_non_distributed"], "distribute.values_util.on_write_assign_add": [], "distribute.values.DistributedVariable.assign": ["distribute.values_util.on_write_assign", "distribute.values_util.is_saving_non_distributed"], "distribute.values_util.on_write_assign": [], "distribute.values.DistributedVariable.scatter_sub": ["distribute.values_util.scatter_sub", "distribute.values_util.is_saving_non_distributed"], "distribute.values_util.scatter_sub": [], "distribute.values.DistributedVariable.scatter_add": ["distribute.values_util.is_saving_non_distributed", "distribute.values_util.scatter_add"], "distribute.values_util.scatter_add": [], "distribute.values.DistributedVariable.scatter_mul": ["distribute.values_util.is_saving_non_distributed", "distribute.values_util.scatter_mul"], "distribute.values_util.scatter_mul": [], "distribute.values.DistributedVariable.scatter_div": ["distribute.values_util.scatter_div", "distribute.values_util.is_saving_non_distributed"], "distribute.values_util.scatter_div": [], "distribute.values.DistributedVariable.scatter_min": ["distribute.values_util.scatter_min", "distribute.values_util.is_saving_non_distributed"], "distribute.values_util.scatter_min": [], "distribute.values.DistributedVariable.scatter_max": ["distribute.values_util.is_saving_non_distributed", "distribute.values_util.scatter_max"], "distribute.values_util.scatter_max": [], "distribute.values.DistributedVariable.scatter_update": ["distribute.values_util.is_saving_non_distributed", "distribute.values_util.scatter_update"], "distribute.values_util.scatter_update": [], "distribute.values.DistributedVariable._gather_saveables_for_checkpoint": [], "distribute.values.DistributedVariable._gather_saveables_for_checkpoint._saveable_factory": ["distribute.values._DistributedVariableSaveable.__init__"], "distribute.values._DistributedVariableSaveable.__init__": ["<builtin>.super", "<builtin>.ValueError"], "distribute.values.DistributedVariable._as_graph_element": ["distribute.values_util.is_saving_non_distributed", "<builtin>.NotImplementedError"], "distribute.values.DistributedVariable._update_replica": ["<builtin>.NotImplementedError"], "distribute.values.DistributedVariable._update": ["distribute.values.DistributedVariable._get_replica", "distribute.values_util.assert_replica_context", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.distribute_lib.get_update_replica_id", "distribute.values.DistributedVariable._update_replica", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values.DistributedVariable._update_cross_replica", "distribute.values_util.is_saving_non_distributed"], "distribute.values_util.assert_replica_context": ["<builtin>.RuntimeError", "distribute.distribution_strategy_context.get_replica_context"], "distribute.values.DistributedVariable._should_act_as_resource_variable": [], "distribute.values.DistributedVariable._dense_var_to_tensor": ["distribute.values.DistributedVariable._get", "distribute.values_util.is_saving_non_distributed", "distribute.distribution_strategy_context.enter_or_assert_strategy", "framework.ops.convert_to_tensor"], "distribute.values.DistributedVariable._map_resources": [], "distribute.values.DistributedVariable._write_object_proto": ["ops.resource_variable_ops.write_object_proto_for_resource_variable"], "ops.resource_variable_ops.write_object_proto_for_resource_variable": ["<builtin>.ValueError", "<builtin>.hasattr", "framework.meta_graph._op_name"], "distribute.values._DistributedVariableSaveable.restore": [], "distribute.values._MirroredSaveable.__init__": ["distribute.values_util.get_on_write_saveable", "<builtin>.super"], "distribute.values_util.get_on_write_saveable": ["saving.saveable_object.SaveSpec"], "distribute.values._MirroredSaveable.restore": ["distribute.values_util.get_on_write_restore_ops"], "distribute.values_util.get_on_write_restore_ops": ["distribute.values_util.assign_on_device", "ops.control_flow_ops.group", "<builtin>.tuple"], "distribute.values.MirroredVariable._update_replica": ["distribute.values._on_write_update_replica"], "distribute.values.MirroredVariable.scatter_min": ["values_util.scatter_error_msg.format", "distribute.values_util.is_saving_non_distributed", "<builtin>.NotImplementedError", "<builtin>.super"], "values_util.scatter_error_msg.format": [], "distribute.values.MirroredVariable.scatter_max": ["values_util.scatter_error_msg.format", "distribute.values_util.is_saving_non_distributed", "<builtin>.NotImplementedError", "<builtin>.super"], "distribute.values.MirroredVariable.scatter_update": ["values_util.scatter_error_msg.format", "distribute.values_util.is_saving_non_distributed", "<builtin>.NotImplementedError", "<builtin>.super"], "distribute.values.MirroredVariable._get_cross_replica": ["ops.array_ops.identity", "distribute.values.Mirrored._get_cross_replica"], "distribute.values.MirroredVariable._as_graph_element": ["distribute.values.DistributedVariable._get_on_device_or_primary"], "distribute.values.MirroredVariable._gather_saveables_for_checkpoint": [], "distribute.values.MirroredVariable._gather_saveables_for_checkpoint._saveable_factory": ["distribute.values._MirroredSaveable.__init__"], "distribute.values.MirroredVariable._write_object_proto": ["distribute.values_util.write_object_proto", "<builtin>.super"], "distribute.values_util.write_object_proto": [], "distribute.values.MirroredVariable._dense_var_to_tensor": ["distribute.values.DistributedVariable._get", "<builtin>.ValueError", "framework.ops.convert_to_tensor"], "distribute.values._SyncOnReadSaveable.__init__": ["<builtin>.super", "distribute.values_util.get_on_read_saveable"], "distribute.values_util.get_on_read_saveable": ["saving.saveable_object.SaveSpec"], "distribute.values._SyncOnReadSaveable.restore": ["distribute.values_util.get_on_read_restore_ops"], "distribute.values_util.get_on_read_restore_ops": ["distribute.values_util.assign_on_device", "ops.control_flow_ops.group", "<builtin>.tuple", "ops.math_ops.cast"], "distribute.values.SyncOnReadVariable._update_replica": ["distribute.values.DistributedVariable._get_on_device_or_primary"], "distribute.values.SyncOnReadVariable._get": ["distribute.distribution_strategy_context.enter_or_assert_strategy", "<builtin>.super"], "distribute.values.SyncOnReadVariable.assign_sub": ["<builtin>.super", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.values_util.on_read_assign_sub_cross_replica", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.is_saving_non_distributed", "distribute.values_util.mark_as_unsaveable", "distribute.values_util.in_replica_update_context"], "distribute.values_util.in_replica_update_context": ["distribute.distribute_lib.get_update_replica_id"], "distribute.values_util.on_read_assign_sub_cross_replica": ["<builtin>.ValueError", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.values_util.assign_on_each_device"], "distribute.values.SyncOnReadVariable.assign_add": ["<builtin>.super", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.on_read_assign_add_cross_replica", "distribute.values_util.is_saving_non_distributed", "distribute.values_util.mark_as_unsaveable", "distribute.values_util.in_replica_update_context"], "distribute.values_util.on_read_assign_add_cross_replica": ["<builtin>.ValueError", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.values_util.assign_on_each_device"], "distribute.values.SyncOnReadVariable.assign": ["<builtin>.super", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.on_read_assign_cross_replica", "distribute.values_util.is_saving_non_distributed", "distribute.values_util.mark_as_unsaveable", "distribute.values_util.in_replica_update_context"], "distribute.values_util.on_read_assign_cross_replica": ["distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.values_util.assign_on_each_device", "ops.math_ops.cast"], "distribute.values.SyncOnReadVariable._scatter_not_implemented": ["<builtin>.NotImplementedError"], "distribute.values.SyncOnReadVariable.scatter_sub": ["distribute.values_util.is_saving_non_distributed", "distribute.values.SyncOnReadVariable._scatter_not_implemented"], "distribute.values.SyncOnReadVariable.scatter_add": ["distribute.values_util.is_saving_non_distributed", "distribute.values.SyncOnReadVariable._scatter_not_implemented"], "distribute.values.SyncOnReadVariable.scatter_mul": ["distribute.values_util.is_saving_non_distributed", "distribute.values.SyncOnReadVariable._scatter_not_implemented"], "distribute.values.SyncOnReadVariable.scatter_div": ["distribute.values_util.is_saving_non_distributed", "distribute.values.SyncOnReadVariable._scatter_not_implemented"], "distribute.values.SyncOnReadVariable.scatter_min": ["distribute.values_util.is_saving_non_distributed", "distribute.values.SyncOnReadVariable._scatter_not_implemented"], "distribute.values.SyncOnReadVariable.scatter_max": ["distribute.values_util.is_saving_non_distributed", "distribute.values.SyncOnReadVariable._scatter_not_implemented"], "distribute.values.SyncOnReadVariable.scatter_update": ["distribute.values_util.is_saving_non_distributed", "distribute.values.SyncOnReadVariable._scatter_not_implemented"], "distribute.values.SyncOnReadVariable.value": ["distribute.values.DistributedVariable._get_replica", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.values.SyncOnReadVariable._get_cross_replica", "<builtin>.NotImplementedError", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values.DistributedVariable._get_on_device_or_primary", "distribute.values_util.is_saving_non_distributed", "distribute.values_util.in_replica_update_context", "distribute.distribution_strategy_context.in_variable_sync_on_read_context"], "distribute.values.SyncOnReadVariable._get_cross_replica": ["distribute.values.DistributedVariable._get_replica", "distribute.values_util.mark_as_unsaveable", "distribute.distribution_strategy_context.enter_or_assert_strategy", "reduce_util.ReduceOp.from_variable_aggregation"], "distribute.values.SyncOnReadVariable.read_value": ["<builtin>.NotImplementedError", "<builtin>.super", "distribute.distribution_strategy_context.in_variable_sync_on_read_context"], "distribute.values.SyncOnReadVariable._as_graph_element": ["distribute.values.SyncOnReadVariable._get", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.values.SyncOnReadVariable._get_cross_replica", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.is_saving_non_distributed", "framework.ops.convert_to_tensor"], "distribute.values.SyncOnReadVariable._gather_saveables_for_checkpoint": [], "distribute.values.SyncOnReadVariable._gather_saveables_for_checkpoint._saveable_factory": ["distribute.values._SyncOnReadSaveable.__init__"], "distribute.values.SyncOnReadVariable._dense_var_to_tensor": ["distribute.values.DistributedVariable._get_replica", "reduce_util.ReduceOp.from_variable_aggregation", "distribute.values.SyncOnReadVariable._get", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.is_saving_non_distributed", "distribute.values_util.mark_as_unsaveable", "framework.ops.convert_to_tensor", "distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.in_variable_sync_on_read_context"], "distribute.values._tensor_conversion_distributed_var": [], "distribute.values._tensor_conversion_mirrored": [], "distribute.values._tensor_conversion_mirrored_val": ["framework.ops.convert_to_tensor"], "distribute.values._tensor_conversion_sync_on_read": [], "distribute.values.VariablePolicy.__init__": [], "distribute.values.VariablePolicy.value": ["<builtin>.NotImplementedError"], "distribute.values.VariablePolicy._is_mirrored": ["<builtin>.NotImplementedError"], "distribute.values.VariablePolicy._as_graph_element": ["<builtin>.NotImplementedError"], "distribute.values.VariablePolicy._get_cross_replica": ["<builtin>.NotImplementedError"], "distribute.values.VariablePolicy._update_replica": ["<builtin>.NotImplementedError"], "distribute.values.OnReadPolicy._is_mirrored": [], "distribute.values.OnReadPolicy.value": ["distribute.values_util.in_replica_update_context", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.distribution_strategy_context.in_cross_replica_context"], "distribute.values.OnReadPolicy._as_graph_element": ["framework.ops.convert_to_tensor", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.distribution_strategy_context.in_cross_replica_context"], "distribute.values.OnReadPolicy._get_cross_replica": ["reduce_util.ReduceOp.from_variable_aggregation", "distribute.values_util.mark_as_unsaveable", "distribute.distribution_strategy_context.enter_or_assert_strategy"], "distribute.values.OnReadPolicy._update_replica": [], "distribute.values.OnReadPolicy._scatter_not_implemented": ["<builtin>.NotImplementedError"], "distribute.values.OnReadPolicy.assign_sub": ["distribute.values_util.on_read_assign_sub_cross_replica", "distribute.distribution_strategy_context.in_cross_replica_context", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.mark_as_unsaveable", "distribute.values_util.on_write_assign_sub", "distribute.values_util.in_replica_update_context"], "distribute.values.OnReadPolicy.assign_add": ["distribute.distribution_strategy_context.in_cross_replica_context", "distribute.values_util.on_write_assign_add", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.on_read_assign_add_cross_replica", "distribute.values_util.mark_as_unsaveable", "distribute.values_util.in_replica_update_context"], "distribute.values.OnReadPolicy.assign": ["distribute.distribution_strategy_context.in_cross_replica_context", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.on_read_assign_cross_replica", "distribute.values_util.mark_as_unsaveable", "distribute.values_util.in_replica_update_context", "distribute.values_util.on_write_assign"], "distribute.values.OnReadPolicy.scatter_sub": ["distribute.values.OnReadPolicy._scatter_not_implemented"], "distribute.values.OnReadPolicy.scatter_add": ["distribute.values.OnReadPolicy._scatter_not_implemented"], "distribute.values.OnReadPolicy.scatter_mul": ["distribute.values.OnReadPolicy._scatter_not_implemented"], "distribute.values.OnReadPolicy.scatter_div": ["distribute.values.OnReadPolicy._scatter_not_implemented"], "distribute.values.OnReadPolicy.scatter_min": ["distribute.values.OnReadPolicy._scatter_not_implemented"], "distribute.values.OnReadPolicy.scatter_max": ["distribute.values.OnReadPolicy._scatter_not_implemented"], "distribute.values.OnReadPolicy.scatter_update": ["distribute.values.OnReadPolicy._scatter_not_implemented"], "distribute.values.OnReadPolicy.get_saveable": ["distribute.values_util.get_on_read_saveable"], "distribute.values.OnReadPolicy.get_restore_ops": ["distribute.values_util.get_on_read_restore_ops"], "distribute.values.OnWritePolicy._is_mirrored": [], "distribute.values.OnWritePolicy.value": [], "distribute.values.OnWritePolicy._as_graph_element": [], "distribute.values.OnWritePolicy._get_cross_replica": ["ops.array_ops.identity"], "distribute.values.OnWritePolicy._update_replica": ["distribute.values._on_write_update_replica"], "distribute.values.OnWritePolicy.assign": ["distribute.values_util.on_write_assign"], "distribute.values.OnWritePolicy.assign_add": ["distribute.values_util.on_write_assign_add"], "distribute.values.OnWritePolicy.assign_sub": ["distribute.values_util.on_write_assign_sub"], "distribute.values.OnWritePolicy.scatter_sub": ["distribute.values_util.scatter_sub"], "distribute.values.OnWritePolicy.scatter_add": ["distribute.values_util.scatter_add"], "distribute.values.OnWritePolicy.scatter_mul": ["distribute.values_util.scatter_mul"], "distribute.values.OnWritePolicy.scatter_div": ["distribute.values_util.scatter_div"], "distribute.values.OnWritePolicy.scatter_min": ["distribute.values_util.scatter_min", "values_util.scatter_error_msg.format", "<builtin>.NotImplementedError"], "distribute.values.OnWritePolicy.scatter_max": ["values_util.scatter_error_msg.format", "distribute.values_util.scatter_max", "<builtin>.NotImplementedError"], "distribute.values.OnWritePolicy.scatter_update": ["values_util.scatter_error_msg.format", "<builtin>.NotImplementedError", "distribute.values_util.scatter_update"], "distribute.values.OnWritePolicy.get_saveable": ["distribute.values_util.get_on_write_saveable"], "distribute.values.OnWritePolicy.get_restore_ops": ["distribute.values_util.get_on_write_restore_ops"], "distribute.values.OnWritePolicy._write_object_proto": ["distribute.values_util.write_object_proto"], "distribute.values.PerWorkerResource.__init__": [], "distribute.values.PerWorkerResource.__getattribute__": ["<builtin>.super", "distribute.values.PerWorkerResource.local_resource", "<builtin>.getattr"], "distribute.values.PerWorkerResource.local_resource": ["distribute.device_util.canonicalize", "distribute.device_util.get_host_for_device", "distribute.device_util.current", "<builtin>.iter", "<builtin>.next"], "distribute.values_util": [], "distribute.values_util.get_on_write_saveable.tensor": ["eager.context.executing_eagerly"], "distribute.values_util.assign_on_device": ["framework.ops.device"], "distribute.values_util.get_on_read_saveable.tensor": [], "distribute.values_util.on_write_assign.<lambda1>": [], "distribute.values_util.on_write_assign_add.<lambda1>": [], "distribute.values_util.on_write_assign_sub.<lambda1>": [], "distribute.values_util.assign_on_each_device": ["distribute.values_util.assign_on_device", "distribute.values_util.assign_sub_on_device", "<builtin>.tuple", "framework.ops.control_dependencies", "ops.control_flow_ops.group", "distribute.values_util.assign_add_on_device"], "distribute.values_util.assign_sub_on_device": ["framework.ops.device"], "distribute.values_util.assign_add_on_device": ["framework.ops.device"], "distribute.values_util.scatter_sub.<lambda1>": [], "distribute.values_util.scatter_add.<lambda1>": [], "distribute.values_util.scatter_mul.<lambda1>": [], "distribute.values_util.scatter_div.<lambda1>": [], "distribute.values_util.scatter_min.<lambda1>": [], "distribute.values_util.scatter_max.<lambda1>": [], "distribute.values_util.scatter_update.<lambda1>": [], "saved_model.save_context.get_save_options": ["saved_model.save_context.SaveContext.options"], "distribute.values_v2": ["framework.ops.register_tensor_conversion_function"], "distribute.values_v2.DistributedVariable.__init__": ["framework.ops.name_from_scope_name", "framework.ops.name_scope", "ops.control_flow_ops.group", "<builtin>.ValueError", "weakref.ref", "eager.context.executing_eagerly", "framework.ops.executing_eagerly_outside_functions", "framework.ops.init_scope", "framework.ops.pack_eager_tensors", "<builtin>.super", "framework.ops.uid"], "distribute.values_v2.DistributedVariable.handle": ["distribute.device_util.current", "eager.context.executing_eagerly", "distribute.values_util.is_saving_non_distributed", "distribute.tpu_util.enclosing_tpu_context", "distribute.device_util.canonicalize"], "distribute.values_v2.DistributedVariable.name": ["<builtin>.super", "distribute.values_util.is_saving_non_distributed"], "distribute.values_v2.DistributedVariable.initializer": ["<builtin>.super", "distribute.values_util.is_saving_non_distributed"], "distribute.values_v2.DistributedVariable._lazy_read": ["distribute.values_v2.DistributedVariable.read_value", "framework.ops.control_dependencies"], "distribute.values_v2.DistributedVariable.read_value": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable._device_scope": ["distribute.device_util.current", "framework.ops.device", "distribute.values_util.is_saving_non_distributed", "distribute.tpu_util.enclosing_tpu_context", "framework.ops.NullContextmanager", "distribute.device_util.canonicalize"], "distribute.values_v2.DistributedVariable.value": ["distribute.values_v2.DistributedVariable.read_value"], "distribute.values_v2.DistributedVariable.assign_sub": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.assign_add": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.assign": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_sub": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_add": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_mul": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_div": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_min": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_max": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_update": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.batch_scatter_update": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_nd_sub": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_nd_add": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.scatter_nd_update": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.sparse_read": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.gather_nd": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.to_proto": ["<builtin>.TypeError"], "distribute.values_v2.DistributedVariable.from_proto": ["<builtin>.TypeError"], "distribute.values_v2.DistributedVariable._as_graph_element": ["distribute.values_v2.DistributedVariable.read_value", "framework.ops.get_default_graph"], "distribute.values_v2.DistributedVariable._strided_slice_assign": ["<builtin>.super", "distribute.values_v2.DistributedVariable._device_scope"], "distribute.values_v2.DistributedVariable.__str__": ["<builtin>.enumerate"], "distribute.values_v2.DistributedVariable.__repr__": ["<builtin>.enumerate"], "distribute.values_v2.DistributedVariable.__deepcopy__": ["copy.deepcopy", "distribute.values_v2.DistributedVariable.__init__"], "distribute.values_v2._tensor_conversion": ["framework.ops.convert_to_tensor", "<builtin>.ValueError"], "dlpack.dlpack": ["util.tf_export.tf_export"], "dlpack.dlpack.to_dlpack": ["python.pywrap_tfe.TFE_ToDlpackCapsule"], "python.pywrap_tfe.TFE_ToDlpackCapsule": [], "dlpack.dlpack.from_dlpack": ["python.pywrap_tfe.TFE_FromDlpackCapsule", "eager.context.context"], "python.pywrap_tfe.TFE_FromDlpackCapsule": [], "eager.backprop": ["python.pywrap_tfe.TFE_Py_RegisterVSpace", "python.pywrap_tfe.TFE_Py_RegisterGradientFunction", "<builtin>.globals", "util.tf_export.tf_export", "util.lazy_loader.LazyLoader", "eager.imperative_grad.VSpace"], "eager.backprop.op_attr_type": ["eager.context.context", "python.pywrap_tfe.TFE_OpNameGetAttrType", "eager.context.ensure_initialized"], "python.pywrap_tfe.TFE_OpNameGetAttrType": [], "eager.backprop.make_attr": ["framework.tensor_shape.as_shape", "framework.dtypes.as_dtype", "<builtin>.isinstance", "<builtin>.int"], "eager.backprop._MockOp.__init__": [], "eager.backprop._MockOp.get_attr": ["<builtin>.range", "eager.backprop.op_attr_type", "<builtin>.len", "eager.backprop.make_attr", "<builtin>.KeyError"], "eager.backprop._MockOp._get_control_flow_context": ["<builtin>.NotImplementedError"], "eager.backprop._gradient_function": ["framework.ops.executing_eagerly_outside_functions", "ops.control_flow_util.EnableControlFlowV2", "framework.ops.get_default_graph", "framework.ops.name_scope", "ops._gradient_registry.lookup", "eager.backprop._MockOp.__init__"], "ops._gradient_registry.lookup": [], "ops.control_flow_util.EnableControlFlowV2": ["<builtin>.hasattr"], "python.pywrap_tfe.TFE_Py_RegisterGradientFunction": [], "eager.backprop._must_record_gradient": ["python.pywrap_tfe.TFE_Py_TapeSetIsEmpty"], "python.pywrap_tfe.TFE_Py_TapeSetIsEmpty": [], "python.pywrap_tfe.TFE_Py_RecordGradient": [], "eager.backprop.implicit_val_and_grad": [], "eager.backprop.implicit_val_and_grad.grad_fn": ["eager.tape.push_new_tape", "eager.imperative_grad.imperative_grad", "<builtin>.ValueError", "<builtin>.getattr", "eager.tape.pop_tape", "util.nest.flatten", "<builtin>.list", "<builtin>.zip"], "eager.tape.push_new_tape": ["python.pywrap_tfe.TFE_Py_TapeSetNew", "eager.tape.Tape.__init__"], "eager.tape.pop_tape": ["python.pywrap_tfe.TFE_Py_TapeSetRemove"], "eager.imperative_grad.imperative_grad": ["<builtin>.ValueError", "python.pywrap_tfe.TFE_Py_TapeGradient", "ops.unconnected_gradients.UnconnectedGradients", "util.compat.as_str"], "eager.backprop.implicit_grad.grad_fn": ["eager.backprop.implicit_val_and_grad", "eager.backprop.implicit_val_and_grad.grad_fn"], "eager.backprop._get_arg_spec": ["<builtin>.isinstance", "<builtin>.range", "<builtin>.ValueError", "util.tf_inspect.getfullargspec", "<builtin>.all", "<builtin>.len"], "eager.backprop.gradients_function": [], "eager.backprop.gradients_function.decorated": ["eager.backprop.val_and_grad_function", "eager.backprop.val_and_grad_function.decorated"], "eager.backprop.val_and_grad_function": [], "eager.backprop.val_and_grad_function.decorated": ["<builtin>.ValueError", "eager.backprop.make_vjp", "eager.backprop.make_vjp.decorated"], "eager.backprop._ensure_unique_tensor_objects": ["<builtin>.set", "ops.gen_array_ops.identity", "framework.ops.tensor_id", "<builtin>.enumerate"], "framework.ops.tensor_id": [], "ops.gen_array_ops.identity": [], "eager.backprop.make_vjp": [], "eager.backprop.make_vjp.decorated": ["eager.tape.push_new_tape", "eager.backprop._get_arg_spec", "<builtin>.ValueError", "<builtin>.getattr", "framework.ops.convert_to_tensor", "util.nest.flatten", "eager.tape.watch", "eager.tape.pop_tape", "util.nest.pack_sequence_as", "ops.gen_array_ops.identity", "eager.backprop._ensure_unique_tensor_objects", "<builtin>.enumerate"], "eager.tape.watch": ["python.pywrap_tfe.TFE_Py_TapeWatch"], "eager.backprop.make_vjp.decorated.vjp": ["util.nest.flatten", "eager.imperative_grad.imperative_grad", "framework.ops.convert_to_tensor"], "ops.math_ops._as_indexed_slices_list": ["ops.math_ops.cast", "<builtin>.TypeError", "<builtin>.type", "framework.ops.IndexedSlices", "<builtin>.isinstance", "<builtin>.len", "ops.math_ops._as_indexed_slices"], "eager.backprop._aggregate_grads": ["<builtin>.isinstance", "<builtin>.all", "<builtin>.len", "eager.backprop.aggregate_indexed_slices_gradients", "ops.gen_math_ops.add_n"], "ops.gen_math_ops.add_n": [], "eager.backprop._num_elements": ["<builtin>.ValueError", "<builtin>.isinstance", "functools.reduce"], "eager.backprop._fast_fill": ["ops.array_ops.fill", "framework.constant_op.constant"], "eager.backprop._zeros": ["eager.backprop._fast_fill", "eager.context.context", "framework.dtypes.as_dtype", "framework.tensor_util.is_tf_type", "ops.array_ops.zeros"], "eager.backprop._ones": ["framework.constant_op.constant", "eager.backprop._fast_fill", "framework.dtypes.as_dtype", "eager.context.executing_eagerly", "ops.array_ops.ones"], "eager.imperative_grad.VSpace": [], "python.pywrap_tfe.TFE_Py_RegisterVSpace": [], "eager.backprop._handle_or_self": ["ops.resource_variable_ops.is_resource_variable"], "eager.backprop.GradientTape.__init__": [], "eager.backprop.GradientTape.__enter__": ["eager.backprop.GradientTape._push_tape"], "eager.backprop.GradientTape._push_tape": ["<builtin>.ValueError", "eager.tape.push_new_tape", "eager.tape.push_tape"], "eager.backprop.GradientTape.__exit__": ["eager.backprop.GradientTape._pop_tape"], "eager.backprop.GradientTape._pop_tape": ["<builtin>.ValueError", "eager.tape.pop_tape"], "eager.tape.push_tape": ["python.pywrap_tfe.TFE_Py_TapeSetAdd"], "eager.backprop.GradientTape._ensure_recording": ["eager.backprop.GradientTape._pop_tape", "eager.backprop.GradientTape._push_tape"], "eager.backprop.GradientTape.watch": ["eager.backprop_util.IsTrainable", "<builtin>.ValueError", "util._pywrap_utils.IsTensor", "util.nest.flatten", "eager.tape.watch", "eager.tape.watch_variable", "platform.tf_logging.log_first_n", "util._pywrap_utils.IsVariable", "<builtin>.hasattr", "<builtin>.type"], "util._pywrap_utils.IsTensor": [], "util._pywrap_utils.IsVariable": [], "eager.backprop_util.IsTrainable": ["eager.backprop_util._DTypeFromTensor", "framework.tensor_util.is_tf_type", "framework.dtypes.as_dtype"], "eager.tape.watch_variable": ["python.pywrap_tfe.TFE_Py_VariableWatcherVariableAccessed", "python.pywrap_tfe.TFE_Py_TapeWatchVariable"], "eager.backprop.GradientTape.stop_recording": ["eager.backprop.GradientTape._pop_tape", "eager.backprop.GradientTape._push_tape", "<builtin>.RuntimeError"], "eager.backprop.GradientTape.reset": ["eager.backprop.GradientTape._pop_tape", "eager.backprop.GradientTape._push_tape"], "eager.backprop.GradientTape.watched_variables": [], "eager.backprop.GradientTape.gradient": ["platform.tf_logging.vlog", "eager.backprop._handle_or_self", "eager.backprop.GradientTape._pop_tape", "eager.backprop_util.IsTrainable", "ops.resource_variable_ops.is_resource_variable", "<builtin>.RuntimeError", "<builtin>.ValueError", "eager.imperative_grad.imperative_grad", "<builtin>.getattr", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "util.nest.flatten", "platform.tf_logging.log_first_n", "util.nest.pack_sequence_as"], "eager.backprop.GradientTape.jacobian": ["sys.exc_info", "eager.backprop.GradientTape._ensure_recording", "six.reraise", "ops.array_ops.concat", "<builtin>.ValueError", "eager.context.executing_eagerly", "<builtin>.len", "util.nest.flatten", "<builtin>.str", "ops.array_ops.reshape", "ops.array_ops.shape", "<builtin>.RuntimeError", "util.nest.pack_sequence_as", "<builtin>.enumerate", "<builtin>.int"], "eager.backprop.GradientTape.jacobian.loop_fn": ["eager.backprop.GradientTape._ensure_recording", "ops.array_ops.gather", "eager.backprop.GradientTape.gradient"], "eager.backprop.GradientTape.batch_jacobian": ["sys.exc_info", "eager.backprop.GradientTape._ensure_recording", "six.reraise", "ops.array_ops.transpose", "ops.array_ops.concat", "<builtin>.ValueError", "ops.array_ops.zeros", "eager.context.executing_eagerly", "framework.tensor_shape.Dimension", "framework.ops.control_dependencies", "<builtin>.str", "ops.array_ops.reshape", "ops.array_ops.shape", "ops.check_ops.assert_equal", "<builtin>.RuntimeError", "ops.array_ops.size", "<builtin>.int"], "eager.backprop.GradientTape.batch_jacobian.loop_fn": ["eager.backprop.GradientTape._ensure_recording", "ops.array_ops.gather", "eager.backprop.GradientTape.gradient", "<builtin>.RuntimeError"], "eager.backprop_util": [], "eager.backprop_util._DTypeFromTensor": ["ops.handle_data_util.get_resource_handle_data", "<builtin>.isinstance", "<builtin>.all"], "ops.handle_data_util.get_resource_handle_data": [], "eager.cancellation": [], "eager.cancellation.CancellationManager.__init__": ["python.pywrap_tfe.TFE_NewCancellationManager"], "python.pywrap_tfe.TFE_NewCancellationManager": [], "eager.cancellation.CancellationManager.is_cancelled": ["python.pywrap_tfe.TFE_CancellationManagerIsCancelled"], "python.pywrap_tfe.TFE_CancellationManagerIsCancelled": [], "eager.cancellation.CancellationManager.start_cancel": ["python.pywrap_tfe.TFE_CancellationManagerStartCancel"], "python.pywrap_tfe.TFE_CancellationManagerStartCancel": [], "eager.cancellation.CancellationManager.get_cancelable_function": [], "eager.context": ["collections.namedtuple", "python.tf2.enabled", "eager.context._AtomicCounter.__init__", "util.tf_contextlib.contextmanager", "eager.monitoring.Counter", "util.tf_export.tf_export", "threading.Lock", "device.DeviceSpec.from_string", "contextlib.contextmanager"], "eager.context.enable_run_eager_op_as_function": [], "eager.context.run_eager_op_as_function_enabled": [], "eager.context._EagerTensorCache.__init__": ["collections.OrderedDict"], "eager.context._EagerTensorCache.put": ["<builtin>.len"], "eager.context._EagerTensorCache.get": [], "eager.context._EagerTensorCache.flush": [], "eager.context.FunctionCallOptions.__init__": [], "eager.context.FunctionCallOptions.executor_type": [], "eager.context.FunctionCallOptions.config_proto_serialized": ["protobuf.config_pb2.ConfigProto", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "eager.context._TensorCaches.__init__": ["<builtin>.super"], "eager.context._TensorCaches.ones_rank_cache": ["eager.context._EagerTensorCache.__init__"], "eager.context._TensorCaches.zeros_cache": ["eager.context._EagerTensorCache.__init__"], "eager.context._ContextSwitchStack.__init__": ["<builtin>.super", "eager.context._ContextSwitchStack.push"], "eager.context._ContextSwitchStack.push": [], "eager.context._ContextSwitchStack.pop": [], "eager.context.LogicalDeviceConfiguration.__new__": ["<builtin>.super"], "eager.context._AtomicCounter.__init__": ["threading.Lock"], "eager.context._AtomicCounter.increment_and_get": [], "eager.context._TensorCacheDeleter.__init__": [], "eager.context._TensorCacheDeleter.__del__": [], "eager.context.Context.__init__": ["eager.context.Context.executing_eagerly", "eager.context.run_eager_op_as_function_enabled", "eager.context._AtomicCounter.increment_and_get", "python.pywrap_tfe.EagerContextThreadLocalData", "eager.context._TensorCacheDeleter.__init__", "threading.Lock", "<builtin>.ValueError", "eager.context._TensorCaches.__init__", "framework.tfrt_utils.enabled", "eager.context._ContextSwitchStack.__init__"], "eager.context.Context.__init__.<lambda1>": [], "python.pywrap_tfe.EagerContextThreadLocalData": [], "eager.context.Context.executing_eagerly": [], "framework.tfrt_utils.enabled": [], "eager.context.Context._set_global_seed": ["numpy.array", "random.Random", "<builtin>.int", "<builtin>.hash", "python.pywrap_tfe.TFE_ContextClearCaches"], "random.Random": [], "python.pywrap_tfe.TFE_ContextClearCaches": [], "eager.context.Context._internal_operation_seed": [], "eager.context.Context._initialize_logical_devices": ["<builtin>.range", "python.pywrap_tfe.TF_DeviceListType", "python.pywrap_tfe.TF_DeleteDeviceList", "python.pywrap_tfe.TF_DeviceListName", "python.pywrap_tfe.TFE_ContextListDevices", "python.pywrap_tfe.TF_DeviceListCount", "framework.device.canonical_name", "device.DeviceSpec.from_string"], "python.pywrap_tfe.TFE_ContextListDevices": [], "python.pywrap_tfe.TF_DeviceListCount": [], "python.pywrap_tfe.TF_DeviceListName": [], "python.pywrap_tfe.TF_DeviceListType": [], "python.pywrap_tfe.TF_DeleteDeviceList": [], "eager.context.Context.ensure_initialized": ["python.pywrap_tfe.TFE_ContextOptionsSetDevicePlacementPolicy", "python.pywrap_tfe.TFE_ContextOptionsSetRunEagerOpAsFunction", "python.pywrap_tfe.TFE_ContextOptionsSetTfrtDistributedRuntime", "eager.context.Context._initialize_logical_devices", "python.pywrap_tfe.TFE_ContextOptionsSetMirroringPolicy", "python.pywrap_tfe.TFE_ContextSetServerDef", "python.pywrap_tfe.TFE_ContextOptionsSetTfrt", "python.pywrap_tfe.TFE_NewContextOptions", "python.pywrap_tfe.TFE_DeleteContextOptions", "python.pywrap_tfe.TFE_ContextOptionsSetAsync", "python.pywrap_tfe.TFE_NewContext", "python.pywrap_tfe.TFE_EnableCollectiveOps", "python.pywrap_tfe.TFE_ContextOptionsSetConfig"], "python.pywrap_tfe.TFE_NewContextOptions": [], "python.pywrap_tfe.TFE_ContextOptionsSetConfig": [], "python.pywrap_tfe.TFE_ContextOptionsSetDevicePlacementPolicy": [], "python.pywrap_tfe.TFE_ContextOptionsSetMirroringPolicy": [], "python.pywrap_tfe.TFE_ContextOptionsSetAsync": [], "python.pywrap_tfe.TFE_ContextOptionsSetTfrt": [], "python.pywrap_tfe.TFE_ContextOptionsSetTfrtDistributedRuntime": [], "python.pywrap_tfe.TFE_ContextOptionsSetRunEagerOpAsFunction": [], "python.pywrap_tfe.TFE_NewContext": [], "python.pywrap_tfe.TFE_DeleteContextOptions": [], "python.pywrap_tfe.TFE_ContextSetServerDef": [], "python.pywrap_tfe.TFE_EnableCollectiveOps": [], "eager.context.Context._clear_caches": ["eager.context.Context.ones_rank_cache", "python.pywrap_tfe.TFE_ClearScalarCache", "eager.context.Context.zeros_cache"], "eager.context.Context.ones_rank_cache": [], "eager.context.Context.zeros_cache": [], "python.pywrap_tfe.TFE_ClearScalarCache": [], "eager.context.Context.get_server_def": [], "eager.context.Context.set_server_def": ["eager.context.Context._initialize_logical_devices", "eager.context.Context._clear_caches", "python.pywrap_tfe.TFE_ContextSetServerDef", "<builtin>.ValueError"], "eager.context.Context.update_server_def": ["eager.context.Context._initialize_logical_devices", "eager.context.Context._clear_caches", "python.pywrap_tfe.TFE_ContextUpdateServerDef", "<builtin>.ValueError"], "python.pywrap_tfe.TFE_ContextUpdateServerDef": [], "eager.context.Context.check_alive": ["python.pywrap_tfe.TFE_ContextCheckAlive", "<builtin>.ValueError"], "python.pywrap_tfe.TFE_ContextCheckAlive": [], "eager.context.Context.sync_executors": ["python.pywrap_tfe.TFE_ContextSyncExecutors", "<builtin>.ValueError"], "python.pywrap_tfe.TFE_ContextSyncExecutors": [], "eager.context.Context.clear_executor_errors": ["<builtin>.ValueError", "python.pywrap_tfe.TFE_ContextClearExecutors"], "python.pywrap_tfe.TFE_ContextClearExecutors": [], "eager.context.Context.enable_coordination_service": ["absl.logging.warning"], "eager.context.Context.coordination_service": [], "eager.context.Context.set_config_key_value": ["python.pywrap_tfe.TFE_InsertConfigKeyValue", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_InsertConfigKeyValue": [], "eager.context.Context.get_config_key_value": ["python.pywrap_tfe.TFE_GetConfigKeyValue", "client.pywrap_tf_session.TF_GetBuffer", "eager.context.Context.ensure_initialized", "framework.c_api_util.tf_buffer"], "framework.c_api_util.tf_buffer": ["client.pywrap_tf_session.TF_NewBuffer", "client.pywrap_tf_session.TF_DeleteBuffer", "client.pywrap_tf_session.TF_NewBufferFromString", "util.compat.as_bytes"], "python.pywrap_tfe.TFE_GetConfigKeyValue": [], "eager.context.Context.delete_config_key_value": ["python.pywrap_tfe.TFE_DeleteConfigKeyValue", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_DeleteConfigKeyValue": [], "eager.context.Context.report_error_to_cluster": ["python.pywrap_tfe.TFE_ReportErrorToCluster", "<builtin>.ValueError"], "python.pywrap_tfe.TFE_ReportErrorToCluster": [], "eager.context.Context.clear_kernel_cache": ["python.pywrap_tfe.TFE_ContextClearCaches"], "eager.context.Context.enable_collective_ops": ["eager.context.Context._clear_caches", "eager.context.Context._initialize_logical_devices", "absl.logging.warning", "python.pywrap_tfe.TFE_EnableCollectiveOps", "<builtin>.ValueError"], "eager.context.Context.configure_collective_ops": ["<builtin>.RuntimeError", "<builtin>.ValueError"], "eager.context.Context.abort_collective_ops": ["python.pywrap_tfe.TFE_AbortCollectiveOps", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_AbortCollectiveOps": [], "eager.context.Context.check_collective_ops_peer_health": ["eager.context.Context.ensure_initialized", "python.pywrap_tfe.TFE_CollectiveOpsCheckPeerHealth"], "python.pywrap_tfe.TFE_CollectiveOpsCheckPeerHealth": [], "eager.context.Context._handle": ["<builtin>.AssertionError"], "eager.context.Context._devices": ["<builtin>.AssertionError"], "eager.context.Context.__str__": ["<builtin>.enumerate", "<builtin>.len"], "eager.context.Context": ["util.deprecation.deprecated", "util.tf_contextlib.contextmanager"], "eager.context.Context._mode": [], "eager.context.Context.scope_name": [], "eager.context.Context.device_name": [], "eager.context.Context.device_spec": [], "eager.context.Context._set_device": [], "eager.context.Context.device": ["framework.device.is_device_spec", "<builtin>.isinstance", "eager.context._EagerDeviceContext.__init__"], "framework.device.is_device_spec": ["<builtin>.isinstance"], "eager.context._EagerDeviceContext.__init__": [], "eager.context.Context.devices": [], "eager.context.Context.host_address_space": ["client.pywrap_tf_session.TF_GetBuffer", "python.pywrap_tfe.TFE_HostAddressSpace", "eager.context.Context.ensure_initialized", "framework.c_api_util.tf_buffer"], "python.pywrap_tfe.TFE_HostAddressSpace": [], "eager.context.Context.execution_mode": ["eager.context.Context.is_async", "<builtin>.ValueError", "python.pywrap_tfe.TFE_ContextSetExecutorForThread"], "eager.context.Context.is_async": [], "python.pywrap_tfe.TFE_ContextSetExecutorForThread": [], "eager.context.Context.executor": ["python.pywrap_tfe.TFE_ContextSetExecutorForThread", "eager.context.Context.ensure_initialized", "python.pywrap_tfe.TFE_ContextGetExecutorForThread"], "python.pywrap_tfe.TFE_ContextGetExecutorForThread": [], "eager.context.Context.config": ["eager.context.Context.executing_eagerly", "eager.context.Context._compute_gpu_options", "<builtin>.len", "eager.context.Context.config.rewriter_toggle", "eager.context.Context._initialize_physical_devices", "eager.context.Context.config.rewriter_bool", "protobuf.config_pb2.ConfigProto", "python.pywrap_tfe.TF_IsMlirBridgeEnabled"], "eager.context.Context._initialize_physical_devices": ["eager.context.Context._import_config", "<builtin>.enumerate", "<builtin>.list", "python.pywrap_tfe.TF_ListPhysicalDevices"], "python.pywrap_tfe.TF_IsMlirBridgeEnabled": [], "eager.context.Context.config.rewriter_toggle": ["<builtin>.setattr"], "eager.context.Context.config.rewriter_bool": ["<builtin>.setattr"], "eager.context.Context._compute_gpu_options": ["config_pb2.GPUOptions.Experimental", "protobuf.config_pb2.GPUOptions", "<builtin>.len", "<builtin>.set", "eager.context.Context.list_physical_devices", "GPUOptions.Experimental.VirtualDevices", "<builtin>.ValueError", "<builtin>.str"], "eager.context.Context.list_physical_devices": ["<builtin>.list", "eager.context.Context._initialize_physical_devices"], "GPUOptions.Experimental.VirtualDevices": [], "config_pb2.GPUOptions.Experimental": [], "eager.context.Context.function_call_options": ["eager.context.FunctionCallOptions.__init__"], "eager.context.Context.num_gpus": ["eager.context.Context.ensure_initialized"], "eager.context.Context.add_function": ["python.pywrap_tfe.TFE_ContextAddFunction", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_ContextAddFunction": [], "eager.context.Context.add_function_def": ["<builtin>.len", "eager.context.Context.ensure_initialized", "python.pywrap_tfe.TFE_ContextAddFunctionDef"], "python.pywrap_tfe.TFE_ContextAddFunctionDef": [], "eager.context.Context.get_function_def": ["framework.function_pb2.FunctionDef", "client.pywrap_tf_session.TF_GetBuffer", "python.pywrap_tfe.TFE_ContextGetFunctionDef", "framework.c_api_util.tf_buffer"], "python.pywrap_tfe.TFE_ContextGetFunctionDef": [], "framework.function_pb2.FunctionDef": [], "eager.context.Context.register_custom_device": ["python.pywrap_tfe.TFE_Py_RegisterCustomDevice", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_Py_RegisterCustomDevice": [], "eager.context.Context.pack_eager_tensors": ["python.pywrap_tfe.TFE_Py_PackEagerTensors", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_Py_PackEagerTensors": [], "eager.context.Context.list_function_names": ["python.pywrap_tfe.TFE_ContextListFunctionNames", "<builtin>.set", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_ContextListFunctionNames": [], "eager.context.Context.remove_function": ["python.pywrap_tfe.TFE_ContextRemoveFunction", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_ContextRemoveFunction": [], "eager.context.Context.has_function": ["python.pywrap_tfe.TFE_ContextHasFunction", "<builtin>.bool", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_ContextHasFunction": [], "eager.context.Context.add_op_callback": [], "eager.context.Context.remove_op_callback": ["<builtin>.KeyError"], "eager.context.Context.op_callbacks": [], "eager.context.Context.invoking_op_callbacks": [], "python.pywrap_tfe.TF_ListPhysicalDevices": [], "eager.context.Context._import_config": ["<builtin>.range", "<builtin>.len", "eager.context.Context.set_visible_devices", "<builtin>.int", "eager.context.Context.set_logical_device_configuration", "<builtin>.ValueError"], "eager.context.Context.reinitialize_physical_devices": ["eager.context.Context._initialize_physical_devices"], "eager.context.Context.get_device_details": ["<builtin>.RuntimeError", "python.pywrap_tfe.TF_GetDeviceDetails", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.int"], "python.pywrap_tfe.TF_GetDeviceDetails": [], "eager.context.Context.set_visible_devices": ["<builtin>.RuntimeError", "<builtin>.repr", "eager.context.Context._initialize_physical_devices", "<builtin>.isinstance", "<builtin>.ValueError"], "eager.context.Context.set_logical_device_configuration": ["<builtin>.RuntimeError", "eager.context.Context._initialize_physical_devices", "<builtin>.ValueError", "<builtin>.repr"], "eager.context.Context.list_logical_devices": ["<builtin>.list", "eager.context.Context.ensure_initialized"], "eager.context.Context.get_visible_devices": ["<builtin>.list", "eager.context.Context._initialize_physical_devices"], "eager.context.Context.get_memory_info": ["python.pywrap_tfe.TFE_GetMemoryInfo", "eager.context.Context._initialize_physical_devices", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_GetMemoryInfo": [], "eager.context.Context.reset_memory_stats": ["python.pywrap_tfe.TFE_ResetMemoryStats", "eager.context.Context._initialize_physical_devices", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_ResetMemoryStats": [], "eager.context.Context.get_memory_growth": ["eager.context.Context._initialize_physical_devices", "<builtin>.ValueError", "<builtin>.repr"], "eager.context.Context.set_memory_growth": ["<builtin>.RuntimeError", "eager.context.Context._initialize_physical_devices", "<builtin>.ValueError", "<builtin>.repr"], "eager.context.Context.get_logical_device_configuration": ["eager.context.Context._initialize_physical_devices", "<builtin>.ValueError", "<builtin>.repr"], "eager.context.Context.set_logical_cpu_devices": ["python.pywrap_tfe.TFE_SetLogicalCpuDevices", "eager.context.Context.ensure_initialized", "eager.context.Context._initialize_logical_devices", "<builtin>.len", "<builtin>.RuntimeError", "eager.context.Context.list_logical_devices"], "python.pywrap_tfe.TFE_SetLogicalCpuDevices": [], "eager.context.Context.get_compiler_ir": ["python.pywrap_tfe.TF_GetCompilerIr"], "python.pywrap_tfe.TF_GetCompilerIr": [], "eager.context.Context.enable_xla_devices": ["python.pywrap_tfe.TF_EnableXlaDevices"], "python.pywrap_tfe.TF_EnableXlaDevices": [], "eager.context.Context.enable_mlir_bridge": ["python.pywrap_tfe.TF_IsMlirBridgeEnabled", "python.pywrap_tfe.TF_EnableMlirBridge"], "eager.context.Context.enable_mlir_graph_optimization": [], "python.pywrap_tfe.TF_EnableMlirBridge": [], "eager.context.Context.optimizer_jit": [], "eager.context.Context.get_optimizer_experimental_options": ["eager.context.Context.get_optimizer_experimental_options.rewriter_toggle", "eager.context.Context.get_optimizer_experimental_options.rewriter_bool"], "eager.context.Context.get_optimizer_experimental_options.rewriter_toggle": ["<builtin>.getattr"], "eager.context.Context.get_optimizer_experimental_options.rewriter_bool": ["<builtin>.getattr"], "eager.context.Context.set_optimizer_experimental_options": [], "eager.context.Context.intra_op_parallelism_threads": ["<builtin>.RuntimeError"], "eager.context.Context.inter_op_parallelism_threads": ["<builtin>.RuntimeError"], "eager.context.Context.soft_device_placement": ["python.pywrap_tfe.TFE_ContextSetSoftDevicePlacement"], "python.pywrap_tfe.TFE_ContextSetSoftDevicePlacement": [], "eager.context.Context.log_device_placement": ["python.pywrap_tfe.TFE_ContextSetLogDevicePlacement"], "python.pywrap_tfe.TFE_ContextSetLogDevicePlacement": [], "eager.context.Context.device_policy": ["python.pywrap_tfe.TFE_ContextGetDevicePlacementPolicy", "python.pywrap_tfe.TFE_ContextSetThreadLocalDevicePlacementPolicy"], "python.pywrap_tfe.TFE_ContextSetThreadLocalDevicePlacementPolicy": [], "eager.context.Context.use_tfrt": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "eager.context.Context.use_tfrt_distributed_runtime": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "eager.context.Context.enable_run_metadata": ["python.pywrap_tfe.TFE_ContextEnableRunMetadata", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_ContextEnableRunMetadata": [], "eager.context.Context.disable_run_metadata": ["python.pywrap_tfe.TFE_ContextDisableRunMetadata"], "python.pywrap_tfe.TFE_ContextDisableRunMetadata": [], "eager.context.Context.enable_graph_collection": ["python.pywrap_tfe.TFE_ContextEnableGraphCollection", "eager.context.Context.ensure_initialized"], "python.pywrap_tfe.TFE_ContextEnableGraphCollection": [], "eager.context.Context.disable_graph_collection": ["python.pywrap_tfe.TFE_ContextDisableGraphCollection"], "python.pywrap_tfe.TFE_ContextDisableGraphCollection": [], "eager.context.Context.export_run_metadata": ["client.pywrap_tf_session.TF_GetBuffer", "util.compat.as_bytes", "framework.c_api_util.tf_buffer", "python.pywrap_tfe.TFE_ContextExportRunMetadata", "protobuf.config_pb2.RunMetadata"], "python.pywrap_tfe.TFE_ContextExportRunMetadata": [], "eager.context.Context.context_switches": [], "eager.context._EagerDeviceContext.__enter__": ["eager.context.Context._set_device", "copy.copy", "eager.context.Context.ensure_initialized", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "device.DeviceSpec.from_string"], "eager.context._EagerDeviceContext.__exit__": ["eager.context.Context._set_device", "<builtin>.RuntimeError"], "eager.context._set_context_locked": ["python.pywrap_tfe.TFE_Py_SetEagerContext"], "python.pywrap_tfe.TFE_Py_SetEagerContext": [], "eager.context._set_context": ["eager.context._set_context_locked"], "eager.context._create_context": ["eager.context._set_context_locked", "eager.context.Context.__init__"], "eager.context._reset_context": ["eager.context._create_context", "python.pywrap_tfe.TFE_ClearScalarCache", "gc.collect"], "gc.collect": [], "eager.context.context_safe": [], "eager.context.initialize_logical_devices": ["eager.context.context"], "eager.context.set_global_seed": ["eager.context.context"], "eager.context.global_seed": ["eager.context.context"], "eager.context.internal_operation_seed": ["eager.context.context"], "eager.context.executing_eagerly_v1": ["eager.context.executing_eagerly"], "eager.context.in_eager_mode": ["eager.context.executing_eagerly"], "eager.context.scope_name": ["eager.context.context"], "eager.context.device": ["eager.context.context", "eager.context.ensure_initialized"], "eager.context.get_config": ["eager.context.context"], "eager.context.set_soft_device_placement": ["eager.context.context"], "eager.context.get_executor": ["eager.context.context"], "eager.context.get_log_device_placement": ["eager.context.context"], "eager.context.set_log_device_placement": ["eager.context.context"], "eager.context.set_execution_mode": ["eager.context.context"], "eager.executor.new_executor": ["python.pywrap_tfe.TFE_NewExecutor", "eager.executor.Executor.__init__"], "eager.context.function_executor_type": ["copy.copy", "eager.context.context"], "eager.context.enable_run_metadata": ["eager.context.context"], "eager.context.disable_run_metadata": ["eager.context.context"], "eager.context.enable_graph_collection": ["eager.context.context"], "eager.context.disable_graph_collection": ["eager.context.context"], "eager.context.export_run_metadata": ["eager.context.context"], "eager.context.collect_graphs": ["eager.context.context"], "eager.context.set_server_def": ["eager.context.context"], "eager.context.update_server_def": ["eager.context.context"], "eager.context.check_alive": ["eager.context.context"], "eager.context.async_scope": ["os.environ.get", "eager.context.context", "<builtin>.str"], "eager.context.async_clear_error": ["eager.context.context"], "eager.context.add_function": ["eager.context.context"], "eager.context.remove_function": ["eager.context.context"], "eager.context.get_function_def": ["eager.context.context"], "eager.context._tmp_in_graph_mode": ["eager.context.executing_eagerly", "eager.context.context_safe"], "eager.core": ["python.pywrap_tfe.TFE_Py_RegisterExceptionClass", "python.pywrap_tfe.TFE_Py_RegisterFallbackExceptionClass"], "eager.core._status_to_exception": ["framework.errors.UnknownError", "framework.errors.exception_type_from_error_code"], "framework.errors.exception_type_from_error_code": [], "framework.errors.UnknownError": [], "eager.core._NotOkStatusException.__init__": ["<builtin>.super"], "eager.core._NotOkStatusException.__str__": ["eager.core._status_to_exception"], "python.pywrap_tfe.TFE_Py_RegisterExceptionClass": [], "python.pywrap_tfe.TFE_Py_RegisterFallbackExceptionClass": [], "eager.def_function": ["util.deprecation.deprecated_args", "eager.def_function._FrequentTracingDetectorManager.__init__", "util.tf_export.tf_export", "util.deprecation.deprecated", "eager.monitoring.Counter"], "eager.def_function._FrequentTracingDetector.__init__": [], "eager.def_function._FrequentTracingDetector.called_with_tracing": ["<builtin>.len", "platform.tf_logging.warning"], "eager.def_function._FrequentTracingDetector.called_without_tracing": [], "eager.def_function._FrequentTracingDetectorManager.__init__": ["threading.Lock", "weakref.WeakKeyDictionary"], "eager.def_function._FrequentTracingDetectorManager._get_detector": ["eager.def_function._FrequentTracingDetector.__init__"], "eager.def_function._FrequentTracingDetectorManager.called_without_tracing": ["eager.def_function._FrequentTracingDetectorManager._get_detector"], "eager.def_function._FrequentTracingDetectorManager.called_with_tracing": ["eager.def_function._FrequentTracingDetectorManager._get_detector"], "eager.def_function.UnliftedInitializerVariable.__init__": ["<builtin>.set", "eager.context.executing_eagerly", "resource_variable_ops.ResourceVariable.__init__", "framework.ops.name_scope", "<builtin>.isinstance", "framework.ops.get_default_graph", "<builtin>.ValueError", "<builtin>.type", "framework.ops.init_scope", "framework.ops.convert_to_tensor", "eager.lift_to_graph.lift_to_graph", "framework.ops.inside_function", "ops.control_flow_ops.cond", "framework.ops.colocate_with", "<builtin>.super", "ops.resource_variable_ops.assign_variable_op", "<builtin>.callable", "ops.resource_variable_ops.var_is_initialized_op", "resource_variable_ops.UninitializedVariable._maybe_initialize_trackable"], "resource_variable_ops.ResourceVariable.__init__": [], "resource_variable_ops.UninitializedVariable._maybe_initialize_trackable": [], "eager.lift_to_graph.lift_to_graph": ["<builtin>.next", "<builtin>.isinstance", "<builtin>.set", "eager.lift_to_graph._as_operation", "eager.lift_to_graph._copy_non_source", "ops.op_selector.map_subgraph", "<builtin>.reversed", "util.object_identity.ObjectIdentityDictionary", "eager.lift_to_graph._copy_source", "ops.op_selector.graph_inputs", "<builtin>.all", "util.object_identity.ObjectIdentitySet", "collections.defaultdict", "<builtin>.iter"], "ops.resource_variable_ops.var_is_initialized_op": [], "ops.resource_variable_ops.assign_variable_op": [], "eager.def_function.UnliftedInitializerVariable.__init__.assign_fn": ["ops.resource_variable_ops.assign_variable_op", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "framework.ops.colocate_with"], "eager.def_function.UnliftedInitializerVariable.__init__.not_assign_fn": ["framework.ops.convert_to_tensor"], "eager.def_function.experimental_run_functions_eagerly": ["eager.def_function.run_functions_eagerly"], "eager.def_function.experimental_functions_run_eagerly": ["eager.def_function.functions_run_eagerly"], "eager.def_function._evaluate_var_is_initialized": ["framework.ops.device", "ops.math_ops.reduce_all", "<builtin>.enumerate", "parallel_device.parallel_device.unpack", "ops.resource_variable_ops.var_is_initialized_op", "ops.array_ops.stack", "framework.ops.init_scope", "ops.math_ops.reduce_any", "<builtin>.NotImplementedError"], "eager.def_function.FunctionDeleter.__init__": [], "eager.def_function.FunctionDeleter.__del__": ["framework.func_graph.dismantle_func_graph"], "framework.func_graph.dismantle_func_graph": ["framework.ops.dismantle_graph"], "eager.def_function.OptionalXlaContext.__init__": ["framework.ops.get_default_graph", "ops.control_flow_util.GraphOrParentsInXlaContext", "ops.control_flow_ops.XLAControlFlowContext"], "ops.control_flow_ops.XLAControlFlowContext": [], "eager.def_function.OptionalXlaContext.__enter__": [], "eager.def_function.OptionalXlaContext.__exit__": [], "eager.def_function.Function.__init__": ["threading.Lock", "eager.def_function.Function._get_key_for_call_stats", "weakref.WeakKeyDictionary", "ops._tf_function_api_guage.get_cell", "function.FunctionSpec.from_function_and_signature"], "function.FunctionSpec.from_function_and_signature": [], "eager.def_function.Function._get_key_for_call_stats": ["<builtin>.hasattr"], "ops._tf_function_api_guage.get_cell": [], "eager.def_function.Function.__getstate__": [], "eager.def_function.Function.__setstate__": ["eager.def_function.Function._get_key_for_call_stats", "threading.Lock", "weakref.WeakKeyDictionary"], "eager.def_function.Function._defun_with_scope": ["util.tf_decorator.make_decorator", "eager.def_function.Function._defun", "weakref.ref"], "eager.def_function.Function._defun_with_scope.wrapped_fn": ["framework.ops.get_default_graph", "eager.def_function.OptionalXlaContext.__init__"], "eager.def_function.Function._defun": ["eager.function.defun_with_attributes", "eager.def_function.Function._create_implements_attribute", "<builtin>.bool"], "eager.def_function.Function._create_implements_attribute": ["framework.attr_value_pb2.AttrValue", "protobuf.text_format.Merge", "framework.attr_value_pb2.NameAttrList", "six.ensure_text", "<builtin>.isinstance"], "framework.attr_value_pb2.NameAttrList": [], "eager.def_function.Function._initialize": ["<builtin>.TypeError", "framework.func_graph.FuncGraph", "<builtin>.len", "eager.def_function.Function._defun_with_scope", "eager.def_function.FunctionDeleter.__init__"], "eager.def_function.Function._initialize.variable_capturing_scope": ["eager.def_function.UnliftedInitializerVariable.__init__", "weakref.ref"], "eager.def_function.Function._initialize.invalid_creator_scope": ["<builtin>.ValueError"], "eager.def_function.Function._clone": ["eager.def_function.Function.__init__"], "eager.def_function.Function._decorate": ["<builtin>.ValueError", "function.FunctionSpec.from_function_and_signature"], "eager.def_function.Function._get_tracing_count": ["eager.def_function.Function.experimental_get_tracing_count"], "eager.def_function.Function.experimental_get_tracing_count": [], "eager.def_function.Function._run_functions_eagerly": [], "eager.def_function.Function": ["util.traceback_utils.filter_traceback"], "util.traceback_utils.filter_traceback": ["util.tf_decorator.make_decorator"], "eager.def_function.Function.__call__": ["eager.def_function._FrequentTracingDetectorManager.called_without_tracing", "<builtin>.bool", "<builtin>.str", "eager.def_function.Function.experimental_get_tracing_count", "framework.ops.executing_eagerly_outside_functions", "eager.def_function.OptionalXlaContext.__init__", "eager.context.executing_eagerly", "framework.ops.get_default_graph", "<builtin>.int", "eager.def_function._FrequentTracingDetectorManager.called_with_tracing", "eager.def_function.Function._call", "ops.control_flow_util.GraphOrParentsInXlaContext", "profiler.trace.Trace"], "eager.def_function.Function._call": ["eager.def_function.Function._initialize_uninitialized_variables", "eager.def_function.Function._initialize", "<builtin>.ValueError", "eager.function.defun"], "eager.def_function.Function._initialize_uninitialized_variables": ["framework.ops.init_scope", "eager.function.defun", "eager.def_function._evaluate_var_is_initialized"], "eager.def_function.Function._call.fn_with_cond": ["<builtin>.ValueError", "ops.math_ops.logical_and", "ops.resource_variable_ops.var_is_initialized_op", "ops.control_flow_ops.cond", "functools.partial"], "eager.def_function.Function._call.fn_with_cond.<lambda1>": [], "eager.def_function.Function.experimental_get_compiler_ir": ["eager.def_function.Function.get_concrete_function", "<builtin>.ValueError", "eager.context.ensure_initialized"], "eager.def_function.Function.get_concrete_function": ["eager.def_function.Function._get_concrete_function_garbage_collected"], "eager.def_function.Function.experimental_get_compiler_ir.compiler_ir_generator": ["ops.random_ops.random_normal", "eager.context.context", "<builtin>.list"], "eager.def_function.Function.python_function": [], "eager.def_function.Function.input_signature": [], "eager.def_function.Function.function_spec": [], "eager.def_function.Function.pretty_printed_concrete_signatures": ["eager.def_function.Function._list_all_concrete_functions"], "eager.def_function.Function._list_all_concrete_functions": ["eager.def_function.Function.get_concrete_function"], "eager.def_function.Function._initialize_uninitialized_variables.initialize_variables": ["<builtin>.zip", "eager.lift_to_graph.lift_to_graph", "framework.ops.get_default_graph", "util.object_identity.ObjectIdentityDictionary", "framework.ops.init_scope"], "eager.def_function.Function.get_initialization_function": ["<builtin>.RuntimeError", "eager.def_function.Function._initialize", "eager.function.defun"], "eager.def_function.Function.get_initialization_function.initialize_variables": ["eager.lift_to_graph.lift_to_graph", "framework.ops.get_default_graph"], "eager.def_function.Function._list_all_concrete_functions_for_serialization": ["eager.def_function.Function.get_concrete_function", "util.nest.flatten", "<builtin>.any", "functools.partial", "platform.tf_logging.info", "<builtin>.isinstance", "eager.def_function.Function._list_all_concrete_functions"], "eager.def_function.Function._get_concrete_function_garbage_collected": ["eager.def_function.Function._initialize_uninitialized_variables", "eager.def_function.Function._initialize", "<builtin>.ValueError"], "eager.def_function.Function.__get__": ["eager.function.class_method_to_instance_method"], "eager.function.class_method_to_instance_method": ["types.MethodType", "util.tf_decorator.make_decorator", "weakref.ref", "<builtin>.hasattr", "eager.function.TfMethodTarget.__init__", "<builtin>.type"], "eager.function.validate_python_function": ["<builtin>.TypeError", "<builtin>.callable"], "eager.function.validate_signature": ["<builtin>.isinstance", "<builtin>.TypeError", "util.nest.flatten", "<builtin>.list", "<builtin>.any", "six.moves.map"], "eager.def_function.function.decorated": ["util.tf_decorator.make_decorator", "eager.def_function.Function.__init__", "util.deprecation.deprecated_argument_lookup"], "eager.execute": [], "eager.execute.quick_execute": ["eager.core._SymbolicException", "framework.ops._is_keras_symbolic_tensor", "python.pywrap_tfe.TFE_Py_Execute", "eager.core._status_to_exception"], "python.pywrap_tfe.TFE_Py_Execute": [], "framework.ops._is_keras_symbolic_tensor": ["<builtin>.hasattr", "<builtin>.getattr"], "eager.core._SymbolicException": [], "eager.execute.execute_with_cancellation": ["eager.core._SymbolicException", "framework.ops._is_keras_symbolic_tensor", "eager.core._status_to_exception", "python.pywrap_tfe.TFE_Py_ExecuteCancelable"], "python.pywrap_tfe.TFE_Py_ExecuteCancelable": [], "eager.execute.execute_with_callbacks": ["<builtin>.tuple", "eager.execute.quick_execute"], "eager.execute.must_record_gradient": [], "eager.execute.make_float": ["<builtin>.float", "<builtin>.repr", "<builtin>.isinstance", "<builtin>.TypeError"], "eager.execute.make_int": ["<builtin>.repr", "<builtin>.int", "<builtin>.isinstance", "<builtin>.TypeError"], "eager.execute.make_str": ["<builtin>.repr", "util.compat.as_bytes", "<builtin>.isinstance", "<builtin>.TypeError"], "eager.execute.make_bool": ["<builtin>.repr", "<builtin>.isinstance", "<builtin>.TypeError"], "eager.execute.make_type": ["framework.dtypes.as_dtype", "<builtin>.repr", "<builtin>.TypeError"], "eager.execute.make_shape": ["<builtin>.ValueError", "framework.tensor_shape.as_shape", "<builtin>.TypeError"], "eager.execute.make_tensor": ["<builtin>.isinstance", "<builtin>.TypeError", "protobuf.text_format.Merge", "framework.tensor_pb2.TensorProto", "<builtin>.repr"], "eager.execute.args_to_matching_eager": ["eager.core._SymbolicException", "<builtin>.isinstance", "framework.ops.convert_to_tensor", "framework.ops._is_keras_symbolic_tensor"], "eager.execute.convert_to_mixed_eager_tensors": ["framework.ops.convert_to_tensor"], "eager.execute.args_to_mixed_eager_tensors": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.range", "<builtin>.ValueError", "framework.ops.convert_to_tensor"], "eager.executor": [], "eager.executor.Executor.__init__": [], "eager.executor.Executor.__del__": ["python.pywrap_tfe.TFE_DeleteExecutor"], "python.pywrap_tfe.TFE_DeleteExecutor": [], "eager.executor.Executor.is_async": ["python.pywrap_tfe.TFE_ExecutorIsAsync"], "python.pywrap_tfe.TFE_ExecutorIsAsync": [], "eager.executor.Executor.handle": [], "eager.executor.Executor.wait": ["python.pywrap_tfe.TFE_ExecutorWaitForAllPendingNodes"], "python.pywrap_tfe.TFE_ExecutorWaitForAllPendingNodes": [], "eager.executor.Executor.clear_error": ["python.pywrap_tfe.TFE_ExecutorClearError"], "python.pywrap_tfe.TFE_ExecutorClearError": [], "python.pywrap_tfe.TFE_NewExecutor": [], "eager.forwardprop": ["eager.function.defun", "python.pywrap_tfe.TFE_Py_RegisterJVPFunction", "threading.Lock"], "eager.forwardprop._identity_jvp": ["ops.array_ops.identity"], "eager.forwardprop._read_variable_jvp": ["ops.array_ops.identity"], "eager.forwardprop._jvp_helper": ["eager.backprop.GradientTape", "<builtin>.len", "eager.execute.record_gradient", "<builtin>.zip", "eager.backprop_util.IsTrainable", "eager.forwardprop_util.push_forwardprop_state", "<builtin>.enumerate", "ops.array_ops.ones_like"], "eager.forwardprop_util.push_forwardprop_state": ["python.pywrap_tfe.TFE_Py_ForwardAccumulatorPopState", "python.pywrap_tfe.TFE_Py_ForwardAccumulatorPushState"], "eager.forwardprop._jvp_helper_wrapper": ["<builtin>.zip", "eager.forwardprop._jvp_helper", "<builtin>.ValueError", "functools.partial", "parallel_for.control_flow_ops.vectorized_map"], "eager.forwardprop._jvp_dispatch": [], "python.pywrap_tfe.TFE_Py_RegisterJVPFunction": [], "eager.forwardprop.ForwardAccumulator.__init__": ["python.pywrap_tfe.TFE_Py_ForwardAccumulatorNew", "<builtin>.set", "util.nest.flatten", "eager.forwardprop.ForwardAccumulator._watch", "<builtin>.id", "<builtin>.ValueError"], "python.pywrap_tfe.TFE_Py_ForwardAccumulatorNew": [], "eager.forwardprop.ForwardAccumulator._watch": ["util.nest.map_structure"], "eager.forwardprop.ForwardAccumulator.__enter__": ["eager.forwardprop.ForwardAccumulator._push_accumulator"], "eager.forwardprop.ForwardAccumulator._push_accumulator": ["<builtin>.ValueError", "python.pywrap_tfe.TFE_Py_ForwardAccumulatorSetAdd"], "eager.forwardprop.ForwardAccumulator.__exit__": ["eager.forwardprop.ForwardAccumulator._pop_accumulator"], "eager.forwardprop.ForwardAccumulator._pop_accumulator": ["<builtin>.ValueError", "python.pywrap_tfe.TFE_Py_ForwardAccumulatorSetRemove"], "python.pywrap_tfe.TFE_Py_ForwardAccumulatorSetAdd": [], "python.pywrap_tfe.TFE_Py_ForwardAccumulatorSetRemove": [], "eager.forwardprop.ForwardAccumulator._watch._watch": ["<builtin>.hasattr", "framework.ops.convert_to_tensor", "platform.tf_logging.log_first_n", "python.pywrap_tfe.TFE_Py_ForwardAccumulatorWatch"], "python.pywrap_tfe.TFE_Py_ForwardAccumulatorWatch": [], "eager.forwardprop.ForwardAccumulator.jvp": ["<builtin>.ValueError", "util.nest.map_structure", "ops.unconnected_gradients.UnconnectedGradients"], "ops.unconnected_gradients.UnconnectedGradients": [], "eager.forwardprop.ForwardAccumulator.jvp._fetch_jvp": ["ops.array_ops.zeros_like", "<builtin>.hasattr", "framework.ops.convert_to_tensor", "python.pywrap_tfe.TFE_Py_ForwardAccumulatorJVP"], "python.pywrap_tfe.TFE_Py_ForwardAccumulatorJVP": [], "eager.forwardprop.ForwardAccumulator._batch_accumulator": ["python.pywrap_tfe.TFE_Py_ForwardAccumulatorNew", "<builtin>.set", "util.nest.flatten", "<builtin>.super", "<builtin>.zip", "framework.tensor_shape.TensorShape", "<builtin>.id", "<builtin>.ValueError"], "eager.forwardprop_util": ["contextlib.contextmanager"], "eager.forwardprop_util.TangentInfo.__new__": ["<builtin>.super"], "eager.forwardprop_util.pack_tangents": ["python.pywrap_tfe.TFE_Py_PackJVPs"], "python.pywrap_tfe.TFE_Py_PackJVPs": [], "python.pywrap_tfe.TFE_Py_ForwardAccumulatorPushState": [], "python.pywrap_tfe.TFE_Py_ForwardAccumulatorPopState": [], "eager.function": ["util._pywrap_utils.RegisterType", "<builtin>.set", "<builtin>.globals", "<builtin>.object", "util.tf_export.tf_export", "eager.monitoring.Counter", "collections.namedtuple", "util.lazy_loader.LazyLoader"], "eager.function._make_input_signature_hashable": ["<builtin>.tuple", "eager.function._is_ndarray", "<builtin>.isinstance", "eager.function._as_ndarray", "<builtin>.hash", "<builtin>.hasattr", "<builtin>.type", "framework.tensor_spec.TensorSpec", "<builtin>.ValueError", "ops.resource_variable_ops.is_resource_variable", "eager.function.Function.flat_input_signature", "six.moves.map"], "eager.function.Function.flat_input_signature": [], "eager.function._is_ndarray": ["<builtin>.hasattr", "<builtin>.isinstance"], "eager.function._as_ndarray": [], "eager.function._type_spec_for": ["tensor_spec.TensorSpec.from_tensor", "<builtin>.isinstance"], "eager.function._is_type_subset": [], "eager.function._shape_relaxed_type_for_composite_tensor": ["<builtin>.isinstance"], "eager.function.common_shape": ["<builtin>.isinstance", "<builtin>.TypeError", "framework.tensor_shape.TensorShape", "<builtin>.zip", "framework.tensor_shape.dimension_value", "<builtin>.type", "<builtin>.RuntimeError"], "eager.function.is_same_structure": ["util.nest.assert_same_structure", "<builtin>.zip", "util.nest.flatten", "<builtin>.type", "<builtin>.any"], "eager.function._parse_func_attrs": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "util.compat.as_bytes", "framework.attr_value_pb2.AttrValue"], "eager.function._InterpolateFunctionError.__init__": [], "eager.function._InterpolateFunctionError.__enter__": [], "eager.function._InterpolateFunctionError.__exit__": ["util.compat.as_str", "util.compat.as_text", "<builtin>.isinstance", "<builtin>.len", "framework.error_interpolation.parse_message", "framework.error_interpolation.interpolate"], "framework.error_interpolation.parse_message": ["<builtin>.len", "re.match"], "eager.function.clear_function_callbacks": [], "eager.function._forward_name": ["framework.ops.uid"], "eager.function._backward_name": ["framework.ops.uid"], "eager.function._inference_name": ["framework.ops.uid"], "eager.function._enclosing_xla_context": ["framework.ops.get_default_graph", "<builtin>.getattr", "<builtin>.isinstance"], "eager.function._EagerDefinedFunctionDeleter.__init__": [], "eager.function._EagerDefinedFunctionDeleter.__del__": ["eager.context.remove_function"], "eager.function.FunctionAlreadyGarbageCollectedError.__init__": ["<builtin>.super"], "eager.function._EagerDefinedFunction.__init__": ["<builtin>.set", "client.pywrap_tf_session.TF_FunctionToFunctionDef", "framework.c_api_util.tf_buffer", "eager.context.executing_eagerly", "util.compat.as_bytes", "<builtin>.tuple", "framework.ops.init_scope", "framework.function_pb2.FunctionDef", "eager.context.add_function", "client.pywrap_tf_session.TF_FunctionSetAttrValueProto", "<builtin>.list", "util.compat.as_str", "framework.c_api_util.ScopedTFFunction", "client.pywrap_tf_session.TF_GraphToFunction_wrapper", "framework.ops.tensor_id", "<builtin>.len", "client.pywrap_tf_session.TF_GetBuffer", "eager.context.ensure_initialized", "<builtin>.all", "eager.function._EagerDefinedFunctionDeleter.__init__"], "client.pywrap_tf_session.TF_GraphToFunction_wrapper": [], "client.pywrap_tf_session.TF_FunctionSetAttrValueProto": [], "client.pywrap_tf_session.TF_FunctionToFunctionDef": [], "framework.c_api_util.ScopedTFFunction": [], "eager.function._EagerDefinedFunction.add_to_graph": ["eager.context.context", "eager.context.executing_eagerly"], "eager.function._EagerDefinedFunction.name": [], "eager.function._EagerDefinedFunction.stateful_ops": [], "eager.function._EagerDefinedFunction.call": ["ops.functional_ops.partitioned_call", "eager.execute.execute_with_cancellation", "<builtin>.len", "eager.function._InterpolateFunctionError.__init__", "util.function_utils.get_disabled_rewriter_config", "eager.tape.stop_recording", "<builtin>.ValueError", "eager.execute.execute", "ops.handle_data_util.copy_handle_data", "<builtin>.enumerate", "<builtin>.list", "framework.ops.control_dependencies", "eager.function.FunctionAlreadyGarbageCollectedError.__init__", "<builtin>.str"], "util.function_utils.get_disabled_rewriter_config": ["protobuf.config_pb2.ConfigProto"], "eager.execute.execute": [], "ops.functional_ops.partitioned_call": ["util.function_utils.get_disabled_rewriter_config", "util.compat.as_bytes", "framework.attr_value_pb2.NameAttrList", "framework.ops.get_default_graph", "<builtin>.hasattr", "<builtin>.tuple", "ops.gen_functional_ops.partitioned_call", "framework.ops.convert_to_tensor", "framework.attr_value_pb2.AttrValue", "eager.context.executing_eagerly", "framework.ops.set_int_list_attr", "attr_value_pb2.AttrValue.ListValue", "ops.functional_ops._set_read_only_resource_inputs_attr", "ops.gen_functional_ops.stateful_partitioned_call"], "eager.function._create_forward_backward_with_graph": ["eager.function.ConcreteFunction.__init__", "eager.function._EagerDefinedFunction.__init__", "eager.function._parse_func_attrs", "eager.function._forward_name", "<builtin>.dict"], "eager.function.ConcreteFunction.__init__": ["<builtin>.tuple", "eager.function.ConcreteFunctionGarbageCollector.__init__", "eager.function._DelayedRewriteGradientFunctions.forward", "eager.function.ConcreteFunction._set_function_spec", "eager.function._DelayedRewriteGradientFunctions.__init__", "eager.function._parse_func_attrs", "<builtin>.any"], "eager.function._DelayedRewriteGradientFunctions.__init__": ["eager.function._inference_name", "eager.function._EagerDefinedFunction.__init__", "<builtin>.len"], "eager.function._DelayedRewriteGradientFunctions.forward_backward": ["eager.function._DelayedRewriteGradientFunctions._construct_forward_backward"], "eager.function._DelayedRewriteGradientFunctions._construct_forward_backward": ["eager.function._create_forward_backward_with_graph", "<builtin>.isinstance", "eager.backprop_util.IsTrainable", "framework.func_graph.func_graph_from_py_func", "framework.func_graph.FuncGraph", "util.object_identity.ObjectIdentitySet", "eager.function._backward_name", "framework.tensor_spec.TensorSpec", "ops.default_gradient.shape_and_dtype"], "ops.default_gradient.shape_and_dtype": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.str", "framework.dtypes.as_dtype", "ops.resource_variable_ops.get_eager_safe_handle_data", "framework.tensor_shape.TensorShape"], "eager.function._DelayedRewriteGradientFunctions._construct_forward_backward._backprop_function": ["framework.ops.device", "ops.gradients_util._GradientsHelper"], "ops.gradients_util._GradientsHelper": ["util.object_identity.ObjectIdentitySet", "ops.gradients_util._StopOps", "six.moves.zip", "<builtin>.set", "framework.ops.convert_n_to_tensor_or_indexed_slices", "<builtin>.len", "ops.gradients_util._AggregatedGrads", "util.compat.as_bytes", "framework.ops._colocate_with_for_gradient", "<builtin>.any", "ops.gradients_util._Inputs", "<builtin>.enumerate", "framework.ops.get_default_graph", "<builtin>.list", "collections.deque", "ops.gradients_util._MaybeCompile", "framework.ops.get_gradient_function", "ops.gradients_util._UpdatePendingAndEnqueueReady", "ops.gradients_util._IsPartitionedCall", "ops.control_flow_ops.tuple", "ops.gradients_util._RaiseNoGradWrtInitialLoopValError", "<builtin>.RuntimeError", "ops.gradients_util._LogOpGradients", "<builtin>.ValueError", "ops.gradients_util._VerifyGeneratedGradients", "ops.gradients_util._DefaultGradYs", "ops.gradients_util._AsList", "ops.gradients_util._maybe_colocate_with", "eager.backprop_util.IsTrainable", "<builtin>.hasattr", "framework.ops.name_scope", "ops.gradients_util._IsFunction", "ops.default_gradient.supports_default_grad", "ops.resource_variable_ops.is_resource_variable", "ops.control_flow_state.ZerosLike", "ops.gradients_util._PendingCount", "framework.ops.internal_convert_n_to_tensor_or_indexed_slices", "framework.ops.device", "ops.gradients_util._SetGrad", "<builtin>.LookupError", "ops.unconnected_gradients.UnconnectedGradients", "<builtin>.getattr", "ops.gradients_util._GetGrad", "ops.control_flow_util.IsSwitch", "eager.context.executing_eagerly", "<builtin>.isinstance"], "framework.func_graph.func_graph_from_py_func": ["util.nest.pack_sequence_as", "framework.func_graph.FuncGraph.capture", "framework.func_graph.FuncGraph.__init__", "framework.func_graph.check_mutation", "framework.func_graph.FuncGraph.pop_capture", "framework.func_graph.flatten", "framework.func_graph._get_defun_inputs_from_args", "util.nest.map_structure", "<builtin>.isinstance", "framework.ops.NullContextmanager", "<builtin>.ValueError", "framework.auto_control_deps.AutomaticControlDependencies", "<builtin>.list", "<builtin>.len", "framework.func_graph.FuncGraph.as_default", "framework.func_graph._get_defun_inputs_from_kwargs", "util.tf_decorator.make_decorator", "ops.variable_scope.get_variable_scope", "util.nest.flatten", "util.tf_decorator.unwrap", "framework.func_graph.convert_structure_to_signature", "util.object_identity.ObjectIdentitySet", "util.tf_decorator.rewrap"], "util.object_identity.ObjectIdentitySet": [], "eager.function._DelayedRewriteGradientFunctions._rewrite_forward_and_call_backward": ["<builtin>.range", "eager.function._DelayedRewriteGradientFunctions.forward_backward", "framework.ops.tensor_id", "<builtin>.len", "eager.backprop_util.IsTrainable", "<builtin>.isinstance", "<builtin>.zip", "ops.handle_data_util.copy_handle_data", "framework.ops.convert_to_tensor", "ops.default_gradient.zeros_like", "<builtin>.dict"], "ops.default_gradient.zeros_like": ["ops.array_ops.zeros_like", "ops.array_ops.zeros", "ops.default_gradient.shape_and_dtype"], "eager.function._DelayedRewriteGradientFunctions.get_gradient_function": [], "eager.function._DelayedRewriteGradientFunctions.forward": ["framework.errors.InternalError"], "framework.errors.InternalError": [], "eager.function._DelayedRewriteGradientFunctions._backward": [], "eager.function._DelayedRewriteGradientFunctions._backward._backward_function": ["eager.function._DelayedRewriteGradientFunctions._rewrite_forward_and_call_backward"], "eager.function._DelayedRewriteGradientFunctions.record": ["eager.function._DelayedRewriteGradientFunctions._backward", "eager.tape.record_operation"], "eager.tape.record_operation": ["python.pywrap_tfe.TFE_Py_TapeSetRecordOperation"], "eager.function._TapeGradientFunctions.__init__": ["eager.backprop_util.IsTrainable", "<builtin>.len"], "eager.function._TapeGradientFunctions._build_functions_for_outputs": ["eager.backprop_util.IsTrainable", "framework.func_graph.FuncGraph", "util.nest.flatten", "ops.handle_data_util.copy_handle_data", "eager.function._create_forward_backward_with_graph", "<builtin>.isinstance", "eager.graph_only_ops.graph_placeholder", "util.object_identity.ObjectIdentitySet", "framework.ops.device", "ops.gradients_util._GradientsHelper", "eager.function._TapeGradientFunctions._shuffle_forward_outputs", "eager.function._TapeGradientFunctions._wrap_forward_function_with_jvps", "framework.errors.InternalError", "<builtin>.len", "eager.function._TapeGradientFunctions._wrap_backward_function_with_jvp_backprop", "eager.function._backward_name", "<builtin>.enumerate", "util.nest.map_structure", "<builtin>.id", "ops.default_gradient.shape_and_dtype"], "eager.graph_only_ops.graph_placeholder": ["<builtin>.tuple", "framework.ops.get_default_graph", "framework.attr_value_pb2.AttrValue", "framework.op_callbacks.should_invoke_op_callbacks", "framework.op_callbacks.invoke_op_callbacks", "<builtin>.isinstance", "framework.tensor_shape.TensorShape"], "eager.function._TapeGradientFunctions._build_functions_for_outputs.<lambda1>": ["framework.ops.convert_to_tensor"], "eager.function._TapeGradientFunctions._wrap_forward_function_with_jvps": ["framework.ops.get_default_graph", "framework.func_graph.FuncGraph", "eager.tape.record_operation", "<builtin>.zip", "ops.handle_data_util.copy_handle_data", "ops.array_ops.placeholder", "eager.forwardprop_util.push_forwardprop_state", "eager.function._TapeGradientFunctions._wrap_backward_function", "<builtin>.isinstance", "eager.graph_only_ops.graph_placeholder", "eager.function._forward_name", "eager.tape.record_operation_forwardprop_only", "framework.tensor_shape.TensorShape", "python.pywrap_tfe.TFE_Py_PackJVPs", "framework.errors.InternalError", "framework.ops.tensor_id", "<builtin>.len", "<builtin>.enumerate", "eager.context.context", "ops.default_gradient.shape_and_dtype"], "eager.function._TapeGradientFunctions._wrap_backward_function_with_jvp_backprop": ["eager.function._TapeGradientFunctions._wrap_backward_function", "<builtin>.len", "eager.backprop.aggregate_indexed_slices_gradients", "eager.backprop_util.IsTrainable", "eager.graph_only_ops.graph_placeholder", "<builtin>.isinstance", "eager.forwardprop_util.pack_tangents", "framework.func_graph.FuncGraph", "util.object_identity.ObjectIdentitySet", "<builtin>.zip", "framework.ops.device", "eager.function._backward_name", "ops.gradients_util._GradientsHelper", "ops.default_gradient.shape_and_dtype"], "eager.function._TapeGradientFunctions._shuffle_forward_outputs": ["util.nest.map_structure"], "eager.function._TapeGradientFunctions._wrap_forward_function_with_jvps.<lambda1>": [], "eager.function._TapeGradientFunctions._wrap_forward_function_with_jvps.<lambda2>": [], "eager.function._TapeGradientFunctions._wrap_forward_function_with_jvps.<lambda3>": [], "eager.function._TapeGradientFunctions._wrap_forward_function_with_jvps.<lambda4>": [], "eager.function._TapeGradientFunctions._wrap_backward_function": ["<builtin>.isinstance", "framework.ops.tensor_id", "<builtin>.len", "eager.backprop_util.IsTrainable", "<builtin>.zip", "<builtin>.enumerate", "ops.default_gradient.zeros_like", "framework.errors.InternalError", "<builtin>.dict", "<builtin>.any"], "eager.tape.record_operation_forwardprop_only": ["python.pywrap_tfe.TFE_Py_TapeSetRecordOperationForwardprop"], "eager.function._TapeGradientFunctions._shuffle_forward_outputs._index_map": ["<builtin>.len"], "eager.function._TapeGradientFunctions.forward": ["eager.function._FirstOrderTapeGradientFunctions._forward_and_backward_functions", "eager.function._HigherOrderTapeGradientFunctions._forward_and_backward_functions"], "eager.function._FirstOrderTapeGradientFunctions._forward_and_backward_functions": ["eager.function._TapeGradientFunctions._build_functions_for_outputs"], "eager.function._HigherOrderTapeGradientFunctions._forward_and_backward_functions": ["platform.tf_logging.warning", "<builtin>.len", "eager.backprop_util.IsTrainable", "eager.function._TapeGradientFunctions._build_functions_for_outputs", "<builtin>.list", "framework.errors.InternalError", "<builtin>.any"], "eager.function._TapeGradientFunctions._wrap_backward_function._backward_function_wrapper": ["ops.array_ops.zeros", "<builtin>.isinstance", "<builtin>.enumerate", "framework.ops.convert_to_tensor", "ops.default_gradient.shape_and_dtype"], "eager.function._TapeGradientFunctions.record": ["eager.tape.record_operation_forwardprop_only", "eager.tape.record_operation_backprop_only", "eager.function._TapeGradientFunctions._wrap_backward_function", "eager.tape.record_operation"], "eager.tape.record_operation_backprop_only": ["python.pywrap_tfe.TFE_Py_TapeSetRecordOperationBackprop"], "eager.function._FirstOrderTapeGradientFunctions.__init__": ["<builtin>.super"], "eager.function._ForwardBackwardCall.__init__": [], "eager.function._ForwardBackwardCall.forward": ["eager.function._TapeGradientFunctions.forward", "eager.function._DelayedRewriteGradientFunctions.forward"], "eager.function._ForwardBackwardCall.record": ["eager.function._DelayedRewriteGradientFunctions.record", "eager.function._TapeGradientFunctions.record", "<builtin>.isinstance"], "eager.function.ConcreteFunction._set_function_spec": ["eager.function.ConcreteFunction._initialize_function_spec"], "eager.function.ConcreteFunctionGarbageCollector.__init__": [], "eager.function.ConcreteFunction._initialize_function_spec": ["<builtin>.range", "<builtin>.sorted", "<builtin>.len", "util.tf_inspect.FullArgSpec", "eager.function.FunctionSpec.__init__", "<builtin>.list", "<builtin>.dict"], "util.tf_inspect.FullArgSpec": [], "eager.function.FunctionSpec.__init__": ["<builtin>.range", "<builtin>.tuple", "<builtin>.len", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.set", "util.nest.flatten", "<builtin>.type", "<builtin>.ValueError", "<builtin>.enumerate"], "eager.function.ConcreteFunction.variables": ["<builtin>.tuple"], "eager.function.ConcreteFunction.trainable_variables": ["<builtin>.tuple"], "eager.function.ConcreteFunction.__call__": ["eager.function.ConcreteFunction._call_impl"], "eager.function.ConcreteFunction._call_impl": ["profiler.trace.Trace", "eager.function.ConcreteFunction._call_with_flat_signature", "eager.function.ConcreteFunction._call_with_structured_signature"], "eager.function.ConcreteFunction._call_with_structured_signature": ["eager.function.ConcreteFunction._structured_signature_check_arg_types", "eager.function.ConcreteFunction._structured_signature_check_unexpected_args", "eager.function.ConcreteFunction._call_flat", "eager.function.ConcreteFunction._structured_signature_check_missing_args", "eager.function.FunctionSpec.canonicalize_function_inputs"], "eager.function.ConcreteFunction._call_with_flat_signature": ["util.compat.as_str", "<builtin>.sorted", "<builtin>.len", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.set", "eager.function.ConcreteFunction._call_flat", "eager.function.ConcreteFunction._flat_signature_summary", "<builtin>.type", "<builtin>.enumerate", "<builtin>.list", "<builtin>.dict"], "eager.function.ConcreteFunction._flat_signature_summary": ["<builtin>.range", "<builtin>.len"], "eager.function.ConcreteFunction._call_flat": ["ops.gradients_util.PossibleTapeGradientTypes", "eager.function._EagerDefinedFunction.call", "eager.function.ConcreteFunction._select_forward_and_backward_functions", "eager.function._ForwardBackwardCall.forward", "<builtin>.isinstance", "framework.ops.get_default_graph", "ops.resource_variable_ops.variable_accessed", "<builtin>.set", "framework.tensor_shape.TensorShape", "eager.function.ConcreteFunction._build_call_outputs", "eager.tape.could_possibly_record", "<builtin>.hasattr", "<builtin>.type", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.id", "eager.context.context", "eager.function._ForwardBackwardCall.record"], "eager.function.FunctionSpec.canonicalize_function_inputs": ["<builtin>.range", "<builtin>.tuple", "eager.function._convert_numpy_inputs", "<builtin>.sorted", "eager.function.FunctionSpec._validate_inputs", "eager.function.FunctionSpec._convert_variables_to_tensors", "<builtin>.len", "<builtin>.TypeError", "six.iterkeys", "six.iteritems", "<builtin>.set", "eager.function._deterministic_dict_values", "eager.function._convert_inputs_to_signature", "eager.function.FunctionSpec.signature_summary", "eager.function.FunctionSpec._convert_annotated_args_to_tensors"], "eager.function.ConcreteFunction._structured_signature_check_missing_args": ["eager.function._contains_type_spec", "<builtin>.sorted", "eager.function.ConcreteFunction._structured_signature_summary", "<builtin>.TypeError", "<builtin>.zip", "<builtin>.enumerate"], "eager.function.ConcreteFunction._structured_signature_check_unexpected_args": ["<builtin>.TypeError", "<builtin>.set", "eager.function.ConcreteFunction._structured_signature_summary", "<builtin>.len"], "eager.function.ConcreteFunction._structured_signature_check_arg_types": ["<builtin>.enumerate", "eager.function.ConcreteFunction._structured_signature_check_arg_type", "<builtin>.zip"], "eager.function._contains_type_spec": ["util.nest.flatten", "<builtin>.any", "<builtin>.isinstance"], "eager.function.ConcreteFunction._structured_signature_summary": ["<builtin>.range", "eager.function._contains_type_spec", "<builtin>.list", "<builtin>.len"], "eager.function.ConcreteFunction._structured_signature_check_arg_type": ["eager.function.ConcreteFunction._structured_signature_summary", "<builtin>.isinstance", "<builtin>.TypeError", "util.nest.assert_same_structure", "<builtin>.zip", "util.nest.flatten", "<builtin>.type", "platform.tf_logging.vlog", "<builtin>.bool", "eager.function._structure_summary"], "eager.function._structure_summary": ["eager.function._structure_summary.type_name", "util.nest.pack_sequence_as", "eager.function._Marker.__init__", "util.nest.flatten", "<builtin>.str"], "eager.tape.could_possibly_record": ["python.pywrap_tfe.TFE_Py_TapeSetIsEmpty"], "ops.resource_variable_ops.variable_accessed": ["eager.tape.variable_accessed", "<builtin>.hasattr", "framework.ops.get_default_graph"], "ops.gradients_util.PossibleTapeGradientTypes": ["python.pywrap_tfe.TFE_Py_TapeSetPossibleGradientTypes"], "eager.function.ConcreteFunction._build_call_outputs": ["util.nest.flatten", "ops.handle_data_util.copy_handle_data", "util.nest.pack_sequence_as", "<builtin>.enumerate"], "eager.function.ConcreteFunction._select_forward_and_backward_functions": ["eager.forwardprop_util.TangentInfo", "eager.function._ForwardBackwardCall.__init__", "eager.tape.should_record_backprop", "eager.forwardprop_util.pack_tangents", "eager.function._FirstOrderTapeGradientFunctions.__init__", "eager.function._TapeGradientFunctions.__init__"], "eager.function.ConcreteFunction._experimental_with_cancellation_manager": [], "eager.function.ConcreteFunction._experimental_with_cancellation_manager.cancellable_call": ["eager.function.ConcreteFunction._call_impl"], "eager.function.ConcreteFunction.name": ["eager.function._DelayedRewriteGradientFunctions.forward"], "eager.function.ConcreteFunction.graph": [], "eager.function.ConcreteFunction.inputs": [], "eager.function.ConcreteFunction.structured_input_signature": [], "eager.function.ConcreteFunction.outputs": [], "eager.function.ConcreteFunction.structured_outputs": [], "eager.function.ConcreteFunction.captured_inputs": ["util.nest.flatten"], "eager.function.ConcreteFunction.function_def": ["eager.function._DelayedRewriteGradientFunctions.forward"], "eager.function.ConcreteFunction.output_shapes": ["util.nest.map_structure", "framework.composite_tensor.replace_composites_with_components"], "eager.function.ConcreteFunction.output_shapes.<lambda1>": ["framework.tensor_shape.TensorShape", "<builtin>.getattr"], "framework.composite_tensor.replace_composites_with_components": ["<builtin>.isinstance", "util.nest.is_sequence", "util.nest.map_structure", "framework.composite_tensor.replace_composites_with_components"], "eager.function.ConcreteFunction.output_dtypes": ["util.nest.map_structure", "framework.composite_tensor.replace_composites_with_components"], "eager.function.ConcreteFunction.output_dtypes.<lambda1>": [], "eager.function.ConcreteFunction.add_to_graph": ["framework.ops.get_default_graph", "eager.function._DelayedRewriteGradientFunctions.forward", "eager.context.executing_eagerly", "eager.function._EagerDefinedFunction.add_to_graph"], "eager.function.ConcreteFunction.add_gradient_functions_to_graph": ["eager.function._DelayedRewriteGradientFunctions.forward_backward", "framework.ops.get_default_graph", "eager.function._DelayedRewriteGradientFunctions.forward", "eager.context.executing_eagerly", "eager.function._EagerDefinedFunction.add_to_graph"], "eager.function.ConcreteFunction._get_gradient_function": [], "eager.forwardprop_util.TangentInfo": [], "eager.tape.should_record_backprop": ["python.pywrap_tfe.TFE_Py_TapeSetShouldRecordBackprop"], "eager.function.ConcreteFunction._as_name_attr_list": ["framework.attr_value_pb2.NameAttrList"], "eager.function.ConcreteFunction.pretty_printed_signature": ["eager.function._contains_type_spec", "eager.function.ConcreteFunction.pretty_printed_signature.pretty_print_spec", "<builtin>.sorted", "eager.function.ConcreteFunction._structured_signature_summary", "<builtin>.len", "<builtin>.zip", "util.nest.map_structure", "<builtin>.list"], "eager.function.ConcreteFunction.pretty_printed_signature.pretty_print_spec": ["<builtin>.range", "eager.function.ConcreteFunction.pretty_printed_signature.pretty_print_spec", "<builtin>.len", "<builtin>.isinstance", "util.nest.pack_sequence_as", "eager.function._Marker.__init__", "<builtin>.zip", "util.nest.is_sequence", "util.nest.flatten", "pprint.pformat", "<builtin>.repr"], "eager.function._Marker.__init__": [], "eager.function.ConcreteFunction.pretty_printed_signature.spec_from_value": ["framework.type_spec.type_spec_from_value", "<builtin>.isinstance"], "eager.function.ConcreteFunction.__repr__": ["eager.function.ConcreteFunction._flat_signature_summary", "<builtin>.id", "eager.function.ConcreteFunction.pretty_printed_signature"], "eager.function.ConcreteFunction.__str__": ["eager.function.ConcreteFunction.__repr__", "eager.function.ConcreteFunction.pretty_printed_signature"], "eager.function._deterministic_dict_values": ["<builtin>.tuple", "<builtin>.sorted"], "eager.function.FunctionSpec.from_function_and_signature": ["<builtin>.tuple", "util.tf_decorator.unwrap", "<builtin>.isinstance", "<builtin>.len", "itertools.compress", "util.tf_inspect.FullArgSpec", "eager.function.FunctionSpec.__init__", "util.tf_inspect.isanytargetmethod", "<builtin>.zip", "<builtin>.getattr", "<builtin>.object", "util.tf_inspect.getfullargspec", "<builtin>.list"], "util.tf_inspect.isanytargetmethod": ["inspect.isfunction", "inspect.ismethod", "<builtin>.callable", "util.tf_decorator.unwrap", "<builtin>.isinstance"], "itertools.compress": [], "eager.function.FunctionSpec.fullargspec": [], "eager.function.FunctionSpec.is_method": [], "eager.function.FunctionSpec.args_to_indices": [], "eager.function.FunctionSpec.kwargs_to_include": [], "eager.function.FunctionSpec.input_signature": [], "eager.function.FunctionSpec.flat_input_signature": [], "eager.function.FunctionSpec.is_pure": [], "eager.function.FunctionSpec.jit_compile": [], "eager.function.FunctionSpec.arg_names": [], "eager.function.FunctionSpec.vararg_name": [], "eager.function.FunctionSpec.varkw_name": [], "eager.function.FunctionSpec.signature_summary": ["<builtin>.list"], "eager.function.FunctionSpec._to_tensor_or_tensor_spec": ["framework.ops.convert_to_tensor", "<builtin>.isinstance"], "eager.function.FunctionSpec._convert_variables_to_tensors": ["<builtin>.tuple", "eager.function.FunctionSpec._to_tensor_or_tensor_spec"], "eager.function.FunctionSpec._convert_annotated_args_to_tensors": ["<builtin>.tuple", "<builtin>.len", "<builtin>.enumerate", "<builtin>.list", "eager.function.FunctionSpec._to_tensor_or_tensor_spec"], "eager.function.FunctionSpec._validate_inputs": ["<builtin>.ValueError", "<builtin>.isinstance"], "six.iterkeys": [], "eager.function._convert_numpy_inputs": ["framework.constant_op.constant", "<builtin>.isinstance", "<builtin>.TypeError", "eager.function._as_ndarray", "util.nest.pack_sequence_as", "<builtin>.hasattr", "util.nest.flatten", "<builtin>.type", "<builtin>.enumerate"], "eager.function._convert_inputs_to_signature": ["<builtin>.len", "<builtin>.isinstance", "util.nest.pack_sequence_as", "framework.ops.convert_to_tensor", "eager.function._convert_inputs_to_signature.format_error_message", "<builtin>.zip", "util.nest.flatten", "<builtin>.ValueError", "util.nest.flatten_up_to", "util._pywrap_utils.IsTensor", "<builtin>.enumerate", "<builtin>.any"], "eager.function._convert_inputs_to_signature.format_error_message": ["<builtin>.str"], "eager.function.FunctionCache.__init__": ["collections.OrderedDict", "eager.function._FunctionGarbageCollector.__init__", "<builtin>.set"], "eager.function._FunctionGarbageCollector.__init__": [], "eager.function.FunctionCache.all_values": ["<builtin>.list", "<builtin>.set"], "eager.function.Function.__init__": ["threading.Lock", "eager.function.FunctionSpec.from_function_and_signature", "weakref.WeakKeyDictionary", "eager.function._make_input_signature_hashable", "eager.function.FunctionCache.__init__"], "eager.function.Function.__call__": ["eager.function.Function._maybe_define_function"], "eager.function.Function._maybe_define_function": ["eager.monitoring.MonitoredTimer", "<builtin>.TypeError", "profiler.trace.Trace", "eager.function.Function._cache_key", "<builtin>.hash", "eager.function.Function._cache_key_context", "platform.tf_logging.vlog", "eager.function.Function._create_graph_function", "eager.function.FunctionSpec.canonicalize_function_inputs", "eager.function.Function._define_function_with_shape_relaxation"], "eager.function.Function.python_function": [], "eager.function.Function.function_spec": [], "eager.function.Function.input_signature": [], "eager.function.Function._get_concrete_function_internal_garbage_collected": ["eager.function.Function._maybe_define_function"], "eager.function.Function._get_concrete_function_internal": ["eager.function.Function._get_concrete_function_internal_garbage_collected"], "eager.function.Function._get_concrete_function_garbage_collected": ["util.compat.as_str", "<builtin>.isinstance", "<builtin>.set", "util.object_identity.ObjectIdentitySet", "<builtin>.zip", "util.nest.flatten", "<builtin>.ValueError", "eager.function.Function._maybe_define_function", "eager.function.is_same_structure", "<builtin>.any"], "eager.function.Function.get_concrete_function": ["eager.function.Function._get_concrete_function_garbage_collected"], "eager.function.Function.__get__": ["eager.function.class_method_to_instance_method"], "eager.function.Function._cache_key": ["python.pywrap_tfe.TFE_Py_EncodeArg", "eager.function._make_input_signature_hashable"], "python.pywrap_tfe.TFE_Py_EncodeArg": [], "eager.function.Function._cache_key_context": ["<builtin>.tuple", "framework.device.merge_device", "framework.ops.init_scope", "framework.ops.get_default_graph", "framework.func_graph.device_stack_has_callable", "<builtin>.id", "eager.context.context", "saved_model.save_context.get_save_options", "eager.function._enclosing_xla_context", "saved_model.save_context.in_save_context"], "framework.device.merge_device": ["<builtin>.isinstance", "framework.device.MergeDevice.__init__"], "framework.func_graph.device_stack_has_callable": ["<builtin>.any", "<builtin>.callable"], "eager.function.Function._create_graph_function": ["eager.function.ConcreteFunction.__init__", "framework.func_graph.func_graph_from_py_func", "<builtin>.enumerate", "<builtin>.len"], "eager.function.Function._define_function_with_shape_relaxation": ["<builtin>.isinstance", "<builtin>.len", "util.nest.pack_sequence_as", "eager.function.Function._cache_key", "<builtin>.zip", "eager.function._is_type_subset", "util.nest.flatten", "<builtin>.RuntimeError", "<builtin>.all", "util.nest.map_structure", "eager.function.Function._create_graph_function", "<builtin>.any", "eager.function._type_spec_for"], "eager.monitoring.MonitoredTimer": [], "eager.function.register": ["<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance"], "eager.function.defun_with_attributes.decorated": ["util.tf_decorator.make_decorator", "eager.function.Function.__init__"], "eager.function.TfMethodTarget.__init__": ["weakref.ref"], "eager.function.TfMethodTarget.target": [], "eager.function.TfMethodTarget.target_class": ["util.tf_inspect.isclass"], "eager.function.TfMethodTarget.call": ["util.tf_inspect.ismethod", "six.get_unbound_function"], "six.get_unbound_function": [], "types.MethodType": [], "eager.function.class_method_to_instance_method.bound_method_wrapper": ["util.tf_inspect.ismethod", "six.get_unbound_function", "eager.function.Function.python_function"], "eager.function._FunctionGarbageCollector.__del__": ["util.memory.dismantle_ordered_dict"], "util.memory.dismantle_ordered_dict": [], "eager.function.ConcreteFunctionGarbageCollector.release": [], "eager.function.ConcreteFunctionGarbageCollector.__del__": ["framework.func_graph.dismantle_func_graph"], "eager.function._Marker.__repr__": ["<builtin>.str"], "eager.function._structure_summary.type_name": ["<builtin>.type", "<builtin>.isinstance"], "eager.gradient_input_output_exclusions": ["<builtin>.object", "argparse.ArgumentParser", "eager.gradient_input_output_exclusions.main"], "eager.gradient_input_output_exclusions._SubscriptUseTracker.__init__": ["<builtin>.set", "<builtin>.super"], "eager.gradient_input_output_exclusions._SubscriptUseTracker.visit_Attribute": ["pyct.anno.hasanno", "transformer.Base.generic_visit", "<builtin>.isinstance", "pyct.anno.getanno"], "eager.gradient_input_output_exclusions._SubscriptUseTracker.visit_Subscript": ["<builtin>.isinstance", "pyct.anno.hasanno", "transformer.Base.visit", "pyct.anno.getanno", "transformer.Base.generic_visit"], "eager.gradient_input_output_exclusions._FunctionCallsTracker.__init__": ["<builtin>.set", "<builtin>.super"], "eager.gradient_input_output_exclusions._FunctionCallsTracker.visit_Name": ["transformer.Base.generic_visit", "pyct.anno.setanno", "<builtin>.isinstance"], "eager.gradient_input_output_exclusions._FunctionCallsTracker.visit_Attribute": ["pyct.anno.setanno", "<builtin>.getattr", "<builtin>.hasattr", "pyct.anno.getanno", "transformer.Base.generic_visit"], "eager.gradient_input_output_exclusions._FunctionCallsTracker.visit_Call": ["transformer.Base.generic_visit", "pyct.anno.getanno"], "eager.gradient_input_output_exclusions._live_tensors": ["pyct.parser.parse_entity", "static_analysis.reaching_fndefs.resolve", "<builtin>.isinstance", "static_analysis.activity.resolve", "eager.gradient_input_output_exclusions._SubscriptUseTracker.__init__", "eager.gradient_input_output_exclusions._FunctionCallsTracker.__init__", "transformer.Base.visit", "eager.gradient_input_output_exclusions._live_tensors", "pyct.transformer.Context", "pyct.cfg.build", "pyct.qual_names.QN", "static_analysis.liveness.resolve", "pyct.anno.getanno", "<builtin>.set", "pyct.qual_names.resolve", "pyct.transformer.EntityInfo"], "eager.gradient_input_output_exclusions._get_num_inputs_outputs": ["eager.gradient_input_output_exclusions._get_num_inputs_outputs._count_args", "framework.op_def_registry.get"], "eager.gradient_input_output_exclusions._get_num_inputs_outputs._is_list_arg": [], "eager.gradient_input_output_exclusions._get_num_inputs_outputs._count_args": ["eager.gradient_input_output_exclusions._get_num_inputs_outputs._is_list_arg", "<builtin>.len"], "eager.gradient_input_output_exclusions.get_entries": ["<builtin>.len", "eager.gradient_input_output_exclusions._get_num_inputs_outputs", "<builtin>.str", "<builtin>.sorted", "eager.gradient_input_output_exclusions._live_tensors", "<builtin>.list", "<builtin>.range", "ops._gradient_registry.lookup", "<builtin>.set", "ops._gradient_registry.list"], "ops._gradient_registry.list": [], "eager.gradient_input_output_exclusions.get_function": ["<builtin>.sorted", "<builtin>.len"], "eager.gradient_input_output_exclusions.get_contents": ["eager.gradient_input_output_exclusions.get_function", "eager.gradient_input_output_exclusions.get_entries"], "eager.gradient_input_output_exclusions.main": ["eager.gradient_input_output_exclusions.get_contents", "<builtin>.open"], "eager.graph_only_ops": [], "framework.op_callbacks.should_invoke_op_callbacks": ["eager.context.context"], "framework.op_callbacks.invoke_op_callbacks": ["<builtin>.ValueError", "<builtin>.tuple", "<builtin>.isinstance", "<builtin>.len", "eager.context.context"], "eager.imperative_grad": ["collections.namedtuple"], "python.pywrap_tfe.TFE_Py_TapeGradient": [], "eager.lift_to_graph": ["util.tf_export.tf_export", "collections.namedtuple"], "eager.lift_to_graph._as_operation": ["<builtin>.isinstance"], "eager.lift_to_graph._constant_inputs": ["<builtin>.all", "eager.lift_to_graph._as_operation", "ops.op_selector.graph_inputs"], "ops.op_selector.graph_inputs": ["<builtin>.list"], "eager.lift_to_graph._copy_non_source": ["util.compat.as_str", "ops.array_ops.placeholder", "<builtin>.enumerate", "framework.ops.control_dependencies", "framework.ops.device"], "eager.lift_to_graph._copy_source": ["ops.array_ops.placeholder_with_default", "ops.array_ops.placeholder", "<builtin>.AssertionError", "ops.resource_variable_ops.get_resource_handle_data", "eager.lift_to_graph._constant_inputs", "eager.lift_to_graph._copy_non_source", "ops.resource_variable_ops._set_handle_shapes_and_types", "framework.ops.device"], "ops.resource_variable_ops.get_resource_handle_data": [], "ops.resource_variable_ops._set_handle_shapes_and_types": ["<builtin>.zip", "client.pywrap_tf_session.TF_GraphSetOutputHandleShapesAndTypes_wrapper", "<builtin>.len"], "ops.op_selector.map_subgraph": ["<builtin>.repr", "util.object_identity.ObjectIdentitySet", "ops.op_selector._as_operation", "ops.op_selector.graph_inputs", "ops.op_selector._path_from"], "eager.monitoring": ["collections.namedtuple"], "eager.monitoring.Metric.__init__": ["<builtin>.ValueError", "<builtin>.len"], "eager.monitoring.Metric.__del__": [], "eager.monitoring.Metric.get_cell": ["<builtin>.ValueError", "<builtin>.len"], "eager.monitoring.CounterCell.__init__": [], "eager.monitoring.CounterCell.increase_by": ["python.pywrap_tfe.TFE_MonitoringCounterCellIncrementBy"], "python.pywrap_tfe.TFE_MonitoringCounterCellIncrementBy": [], "eager.monitoring.CounterCell.value": ["python.pywrap_tfe.TFE_MonitoringCounterCellValue"], "python.pywrap_tfe.TFE_MonitoringCounterCellValue": [], "eager.monitoring.Counter.__init__": ["<builtin>.super", "<builtin>.len"], "eager.monitoring.Counter.get_cell": ["<builtin>.super", "eager.monitoring.CounterCell.__init__"], "eager.monitoring.IntGaugeCell.__init__": [], "eager.monitoring.IntGaugeCell.set": ["python.pywrap_tfe.TFE_MonitoringIntGaugeCellSet"], "python.pywrap_tfe.TFE_MonitoringIntGaugeCellSet": [], "eager.monitoring.IntGaugeCell.value": ["python.pywrap_tfe.TFE_MonitoringIntGaugeCellValue"], "python.pywrap_tfe.TFE_MonitoringIntGaugeCellValue": [], "eager.monitoring.IntGauge.__init__": ["<builtin>.super", "<builtin>.len"], "eager.monitoring.IntGauge.get_cell": ["<builtin>.super", "eager.monitoring.IntGaugeCell.__init__"], "eager.monitoring.StringGaugeCell.__init__": [], "eager.monitoring.StringGaugeCell.set": ["python.pywrap_tfe.TFE_MonitoringStringGaugeCellSet"], "python.pywrap_tfe.TFE_MonitoringStringGaugeCellSet": [], "eager.monitoring.StringGaugeCell.value": ["python.pywrap_tfe.TFE_MonitoringStringGaugeCellValue", "framework.c_api_util.tf_buffer", "client.pywrap_tf_session.TF_GetBuffer"], "python.pywrap_tfe.TFE_MonitoringStringGaugeCellValue": [], "eager.monitoring.StringGauge.__init__": ["<builtin>.super", "<builtin>.len"], "eager.monitoring.StringGauge.get_cell": ["<builtin>.super", "eager.monitoring.StringGaugeCell.__init__"], "eager.monitoring.BoolGaugeCell.__init__": [], "eager.monitoring.BoolGaugeCell.set": ["python.pywrap_tfe.TFE_MonitoringBoolGaugeCellSet"], "python.pywrap_tfe.TFE_MonitoringBoolGaugeCellSet": [], "eager.monitoring.BoolGaugeCell.value": ["python.pywrap_tfe.TFE_MonitoringBoolGaugeCellValue"], "python.pywrap_tfe.TFE_MonitoringBoolGaugeCellValue": [], "eager.monitoring.BoolGauge.__init__": ["<builtin>.super", "<builtin>.len"], "eager.monitoring.BoolGauge.get_cell": ["<builtin>.super", "eager.monitoring.BoolGaugeCell.__init__"], "eager.monitoring.SamplerCell.__init__": [], "eager.monitoring.SamplerCell.add": ["python.pywrap_tfe.TFE_MonitoringSamplerCellAdd"], "python.pywrap_tfe.TFE_MonitoringSamplerCellAdd": [], "eager.monitoring.SamplerCell.value": ["util.compat.as_bytes", "client.pywrap_tf_session.TF_GetBuffer", "framework.c_api_util.tf_buffer", "python.pywrap_tfe.TFE_MonitoringSamplerCellValue", "framework.summary_pb2.HistogramProto"], "python.pywrap_tfe.TFE_MonitoringSamplerCellValue": [], "framework.summary_pb2.HistogramProto": [], "eager.monitoring.Buckets.__init__": [], "eager.monitoring.Buckets.__del__": ["python.pywrap_tfe.TFE_MonitoringDeleteBuckets"], "python.pywrap_tfe.TFE_MonitoringDeleteBuckets": [], "eager.monitoring.ExponentialBuckets.__init__": ["<builtin>.super", "python.pywrap_tfe.TFE_MonitoringNewExponentialBuckets"], "python.pywrap_tfe.TFE_MonitoringNewExponentialBuckets": [], "eager.monitoring.Sampler.__init__": ["<builtin>.super", "<builtin>.len"], "eager.monitoring.Sampler.get_cell": ["<builtin>.super", "eager.monitoring.SamplerCell.__init__"], "eager.monitoring.MonitoredTimer.__init__": [], "eager.monitoring.MonitoredTimer.__enter__": ["time.time"], "eager.monitoring.MonitoredTimer.__exit__": ["<builtin>.int", "time.time"], "eager.monitoring.monitored_timer": [], "eager.monitoring.monitored_timer.actual_decorator": ["functools.wraps"], "eager.monitoring.monitored_timer.actual_decorator.wrapper": ["eager.monitoring.MonitoredTimer.__init__"], "eager.profiler": ["util.deprecation.deprecated", "threading.Lock"], "eager.profiler.start": ["internal._pywrap_profiler.ProfilerSession", "eager.context.ensure_initialized", "platform.tf_logging.warning"], "internal._pywrap_profiler.ProfilerSession": [], "eager.profiler.stop": ["eager.context.context"], "eager.profiler.maybe_create_event_file": ["platform.gfile.ListDirectory", "os.path.join", "client._pywrap_events_writer.EventsWriter", "util.compat.as_bytes"], "client._pywrap_events_writer.EventsWriter": [], "eager.profiler.save": ["datetime.datetime.now", "platform.gfile.MakeDirs", "os.path.join", "platform.gfile.Open", "eager.profiler.maybe_create_event_file"], "datetime.datetime.now": [], "eager.profiler.start_profiler_server": ["internal._pywrap_profiler.start_server", "eager.context.ensure_initialized"], "internal._pywrap_profiler.start_server": [], "eager.profiler.Profiler.__init__": [], "eager.profiler.Profiler.__enter__": ["eager.profiler.start"], "eager.profiler.Profiler.__exit__": ["eager.profiler.stop", "eager.profiler.save"], "eager.profiler_client": ["util.deprecation.deprecated"], "eager.profiler_client.start_tracing": ["internal._pywrap_profiler.trace"], "internal._pywrap_profiler.trace": [], "eager.profiler_client.monitor": ["internal._pywrap_profiler.monitor"], "internal._pywrap_profiler.monitor": [], "eager.remote": ["util.tf_export.tf_export"], "eager.remote.connect_to_remote_host": ["eager.remote._strip_prefix", "<builtin>.ValueError", "training.server_lib.ClusterSpec", "util.nest.flatten", "eager.remote.connect_to_cluster"], "eager.remote._strip_prefix": ["<builtin>.len"], "platform.remote_utils.get_default_communication_protocol": [], "python.pywrap_tfe.TF_PickUnusedPortOrDie": [], "platform.remote_utils.coordination_service_type": [], "eager.tape": ["contextlib.contextmanager", "util.lazy_loader.LazyLoader", "<builtin>.globals"], "eager.tape.Tape.__init__": [], "eager.tape.Tape.watched_variables": ["python.pywrap_tfe.TFE_Py_TapeWatchedVariables"], "python.pywrap_tfe.TFE_Py_TapeWatchedVariables": [], "python.pywrap_tfe.TFE_Py_TapeSetNew": [], "python.pywrap_tfe.TFE_Py_TapeSetAdd": [], "python.pywrap_tfe.TFE_Py_TapeWatch": [], "eager.tape.VariableWatcher.__init__": [], "eager.tape.VariableWatcher.__enter__": ["python.pywrap_tfe.TFE_Py_VariableWatcherNew"], "python.pywrap_tfe.TFE_Py_VariableWatcherNew": [], "eager.tape.VariableWatcher.__exit__": ["python.pywrap_tfe.TFE_Py_VariableWatcherRemove"], "python.pywrap_tfe.TFE_Py_VariableWatcherRemove": [], "eager.tape.VariableWatcher.watched_variables": ["python.pywrap_tfe.TFE_Py_VariableWatcherWatchedVariables"], "python.pywrap_tfe.TFE_Py_VariableWatcherWatchedVariables": [], "python.pywrap_tfe.TFE_Py_TapeWatchVariable": [], "python.pywrap_tfe.TFE_Py_VariableWatcherVariableAccessed": [], "python.pywrap_tfe.TFE_Py_TapeVariableAccessed": [], "eager.tape.variables_accessed": ["python.pywrap_tfe.TFE_Py_TapeVariableAccessed", "python.pywrap_tfe.TFE_Py_VariableWatcherVariableAccessed"], "python.pywrap_tfe.TFE_Py_TapeSetRemove": [], "python.pywrap_tfe.TFE_Py_TapeSetIsStopped": [], "python.pywrap_tfe.TFE_Py_TapeSetStopOnThread": [], "python.pywrap_tfe.TFE_Py_TapeSetRestartOnThread": [], "python.pywrap_tfe.TFE_Py_TapeSetShouldRecordBackprop": [], "python.pywrap_tfe.TFE_Py_TapeSetRecordOperation": [], "python.pywrap_tfe.TFE_Py_TapeSetRecordOperationBackprop": [], "python.pywrap_tfe.TFE_Py_TapeSetRecordOperationForwardprop": [], "eager.tape.delete_trace": ["python.pywrap_tfe.TFE_Py_TapeSetDeleteTrace"], "python.pywrap_tfe.TFE_Py_TapeSetDeleteTrace": [], "eager.wrap_function": ["util.tf_export.tf_export"], "eager.wrap_function.VariableHolder.__init__": ["tracking.data_structures.Mapping"], "tracking.data_structures.Mapping": [], "eager.wrap_function.VariableHolder.variables": [], "eager.wrap_function.VariableHolder.variable_creator_scope": ["framework.ops.name_from_scope_name", "framework.ops.add_to_collections", "<builtin>.list", "framework.ops.name_scope"], "eager.wrap_function.VariableHolder.__call__": ["eager.wrap_function.VariableHolder.call_with_variable_creator_scope", "eager.wrap_function.VariableHolder.call_with_variable_creator_scope.wrapped"], "eager.wrap_function.VariableHolder.call_with_variable_creator_scope": [], "eager.wrap_function.VariableHolder.call_with_variable_creator_scope.wrapped": ["ops.variable_scope.variable_creator_scope", "eager.wrap_function.function_from_graph_def._imports_graph_def"], "eager.wrap_function.function_from_graph_def._imports_graph_def": ["framework.importer.import_graph_def"], "eager.wrap_function._get_element_from_tensor_info": ["saved_model.nested_structure_coder.StructureCoder", "ConcreteFunction._func_graph.get_tensor_by_name", "protobuf.struct_pb2.StructuredValue", "<builtin>.ValueError", "ConcreteFunction._func_graph.as_graph_element", "framework.sparse_tensor.SparseTensor"], "ConcreteFunction._func_graph.as_graph_element": [], "ConcreteFunction._func_graph.get_tensor_by_name": [], "saved_model.nested_structure_coder.StructureCoder": [], "protobuf.struct_pb2.StructuredValue": [], "eager.wrap_function._lift_single_variable": ["ops.resource_variable_ops.UninitializedVariable", "weakref.ref"], "eager.wrap_function._lift_unlifted_variables": ["<builtin>.enumerate", "<builtin>.id", "eager.wrap_function._lift_single_variable", "eager.wrap_function._lift_unlifted_variables._should_lift_variable", "ops.resource_variable_ops.is_resource_variable", "platform.tf_logging.log_first_n", "framework.ops.get_collection_ref", "framework.ops.get_collection"], "eager.wrap_function._lift_unlifted_variables._should_lift_variable": ["<builtin>.id", "<builtin>.isinstance"], "eager.wrap_function.WrappedFunction.__init__": ["<builtin>.super", "eager.context.context", "eager.wrap_function._lift_unlifted_variables"], "eager.wrap_function.WrappedFunction._call_impl": ["<builtin>.enumerate", "<builtin>.super", "function.ConcreteFunction._call_flat", "<builtin>.NotImplementedError", "<builtin>.list", "<builtin>.isinstance", "framework.ops.convert_to_tensor"], "function.ConcreteFunction._call_flat": [], "eager.wrap_function.WrappedFunction.prune": ["<builtin>.id", "util.nest.map_structure", "ConcreteFunction._func_graph.as_default", "<builtin>.ValueError", "framework.tensor_shape.TensorShape", "framework.tensor_util.is_tf_type", "<builtin>.len", "graph._functions.values", "eager.wrap_function.WrappedFunction.__init__", "<builtin>.type", "<builtin>.isinstance", "framework.func_graph.FuncGraph", "ConcreteFunction.graph.as_graph_element", "util.nest.flatten", "eager.lift_to_graph.lift_to_graph"], "ConcreteFunction.graph.as_graph_element": [], "eager.wrap_function.WrappedFunction.prune._fetch_preprocessing_callback": ["framework.tensor_util.is_tf_type", "eager.wrap_function._get_element_from_tensor_info", "eager.wrap_function.WrappedFunction.prune._fetch_preprocessing_callback", "<builtin>.isinstance", "ConcreteFunction.graph.as_graph_element"], "ConcreteFunction._func_graph.as_default": [], "graph._functions.values": [], "eager.wrap_function.WrappedFunction.prune._structured_output_mapping": ["<builtin>.isinstance"], "eager.wrap_function._filter_returned_ops": [], "eager.wrap_function._filter_returned_ops.wrap_and_filter_returned_ops": ["util.nest.pack_sequence_as", "<builtin>.len", "<builtin>.isinstance", "<builtin>.range", "util.nest.flatten"], "eager.wrap_function.WrappedGraph.__init__": ["framework.func_graph.FuncGraph", "eager.wrap_function.VariableHolder.__init__", "eager.wrap_function.WrappedFunction.__init__"], "eager.wrap_function.WrappedGraph.functions": [], "eager.wrap_function.WrappedGraph.variables": [], "eager.wrap_function.WrappedGraph.wrap_function": ["eager.wrap_function.WrappedGraph._wrap_function"], "eager.wrap_function.WrappedGraph._wrap_function": ["util.nest.pack_sequence_as", "<builtin>.len", "eager.wrap_function.WrappedFunction.prune", "framework.func_graph.func_graph_from_py_func", "util.nest.flatten", "eager.wrap_function._filter_returned_ops"], "eager.wrap_function.wrap_function": ["eager.wrap_function.VariableHolder.__init__", "eager.wrap_function.WrappedFunction.__init__", "framework.func_graph.func_graph_from_py_func"], "estimator.estimator": ["<builtin>.dir"], "estimator.estimator_lib": ["<builtin>.dir"], "estimator.exporter": ["<builtin>.dir"], "estimator.gc": ["<builtin>.dir"], "estimator.keras": ["<builtin>.dir"], "estimator.model_fn": ["<builtin>.dir"], "estimator.run_config": ["<builtin>.dir"], "estimator.training": ["<builtin>.dir"], "estimator.util": ["<builtin>.dir"], "feature_column.feature_column": ["util.tf_export.tf_export"], "feature_column.feature_column._internal_input_layer": ["feature_column.feature_column._internal_input_layer._get_logits", "<builtin>.ValueError", "<builtin>.isinstance", "feature_column.feature_column._normalize_feature_columns", "<builtin>.list", "ops.variable_scope.variable_scope"], "feature_column.feature_column._normalize_feature_columns": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.ValueError", "<builtin>.type"], "feature_column.feature_column._internal_input_layer._get_logits": ["ops.array_ops.reshape", "feature_column.feature_column._verify_static_batch_size_equality", "ops.array_ops.shape", "<builtin>.sorted", "framework.ops.get_collection", "ops.variable_scope.get_variable_scope", "ops.array_ops.concat", "feature_column.feature_column._LazyBuilder.__init__", "ops.variable_scope.variable_scope"], "feature_column.feature_column._LazyBuilder.__init__": [], "feature_column.feature_column._internal_input_layer._get_logits.<lambda1>": [], "feature_column.feature_column._verify_static_batch_size_equality": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.range"], "feature_column.feature_column.input_layer": ["feature_column.feature_column._internal_input_layer"], "feature_column.feature_column.InputLayer.__init__": ["ops.template.make_template"], "ops.template.make_template": ["ops.template.make_template_internal"], "feature_column.feature_column.InputLayer.__call__": [], "feature_column.feature_column.InputLayer.name": [], "feature_column.feature_column.InputLayer.non_trainable_variables": [], "feature_column.feature_column.InputLayer.non_trainable_weights": [], "feature_column.feature_column.InputLayer.trainable_variables": [], "feature_column.feature_column.InputLayer.trainable_weights": [], "feature_column.feature_column.InputLayer.variables": [], "feature_column.feature_column.InputLayer.weights": [], "feature_column.feature_column.linear_model": ["feature_column.feature_column._strip_leading_slashes", "feature_column.feature_column._LinearModel.__init__", "ops.variable_scope.variable_scope", "feature_column.feature_column._LinearModel.cols_to_vars"], "feature_column.feature_column._strip_leading_slashes": [], "feature_column.feature_column._LinearModel.__init__": ["feature_column.feature_column._LinearModel._add_layers", "feature_column.feature_column._normalize_feature_columns", "feature_column.feature_column._strip_leading_slashes", "<builtin>.sorted", "<builtin>.list", "feature_column.feature_column._FCLinearWrapper.__init__", "<builtin>.super", "feature_column.feature_column._BiasLayer.__init__", "ops.variable_scope.variable_scope"], "feature_column.feature_column._LinearModel.cols_to_vars": [], "feature_column.feature_column._add_to_collections": ["<builtin>.isinstance", "<builtin>.list", "framework.ops.add_to_collection"], "feature_column.feature_column._FCLinearWrapper.__init__": ["<builtin>.super"], "feature_column.feature_column._FCLinearWrapper.build": ["<builtin>.isinstance", "base.Layer.add_variable", "feature_column.feature_column._add_to_collections", "ops.init_ops.zeros_initializer"], "feature_column.feature_column._FCLinearWrapper.call": ["feature_column.feature_column._create_weighted_sum"], "feature_column.feature_column._create_weighted_sum": ["<builtin>.isinstance", "feature_column.feature_column._create_dense_column_weighted_sum", "feature_column.feature_column._create_categorical_column_weighted_sum"], "feature_column.feature_column._BiasLayer.__init__": ["<builtin>.super"], "feature_column.feature_column._BiasLayer.build": ["base.Layer.add_variable", "feature_column.feature_column._add_to_collections", "ops.init_ops.zeros_initializer"], "feature_column.feature_column._BiasLayer.call": [], "feature_column.feature_column._get_expanded_variable_list": ["<builtin>.isinstance", "ops.resource_variable_ops.is_resource_variable", "<builtin>.list"], "feature_column.feature_column._LinearModel.__init__.<lambda1>": [], "feature_column.feature_column._LinearModel._add_layers": ["<builtin>.setattr"], "feature_column.feature_column._LinearModel.call": ["feature_column.feature_column._get_expanded_variable_list", "ops.math_ops.add_n", "feature_column.feature_column._verify_static_batch_size_equality", "<builtin>.ValueError", "ops.nn_ops.bias_add", "<builtin>.isinstance", "<builtin>.sorted", "framework.ops.get_collection", "ops.variable_scope.get_variable_scope", "feature_column.feature_column._LazyBuilder.__init__", "feature_column.feature_column._BiasLayer.__init__", "ops.variable_scope.variable_scope"], "feature_column.feature_column._LinearModel.call.<lambda1>": [], "feature_column.feature_column._transform_features": ["feature_column.feature_column._normalize_feature_columns", "<builtin>.sorted", "feature_column.feature_column._LazyBuilder.get", "framework.ops.name_scope", "feature_column.feature_column._LazyBuilder.__init__"], "feature_column.feature_column._transform_features.<lambda1>": [], "feature_column.feature_column._LazyBuilder.get": ["<builtin>.ValueError", "<builtin>.isinstance", "feature_column.feature_column._LazyBuilder._get_raw_feature_as_tensor", "platform.tf_logging.debug", "<builtin>.TypeError"], "feature_column.feature_column.make_parse_example_spec": ["<builtin>.isinstance", "six.iteritems", "<builtin>.ValueError"], "feature_column.feature_column._embedding_column": ["<builtin>.callable", "math.sqrt", "ops.init_ops.truncated_normal_initializer", "<builtin>.ValueError"], "ops.init_ops.truncated_normal_initializer": [], "feature_column.feature_column._embedding_column._creator": ["feature_column.feature_column._EmbeddingColumnLayer.__init__"], "feature_column.feature_column._EmbeddingColumnLayer.__init__": ["<builtin>.super"], "feature_column.feature_column._numeric_column": ["feature_column.utils.assert_key_is_string", "<builtin>.ValueError", "feature_column.utils.check_default_value", "<builtin>.callable", "feature_column.feature_column._check_shape", "<builtin>.TypeError"], "feature_column.feature_column._check_shape": ["<builtin>.ValueError", "<builtin>.tuple", "util.nest.is_sequence", "<builtin>.isinstance", "<builtin>.TypeError"], "feature_column.utils.check_default_value": ["feature_column.utils._as_tuple", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.getattr", "<builtin>.isinstance", "util.nest.flatten", "feature_column.utils._is_shape_and_default_value_compatible", "<builtin>.any", "<builtin>.callable", "util.nest.is_sequence", "<builtin>.all", "feature_column.utils._create_tuple"], "feature_column.utils.assert_key_is_string": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.type"], "feature_column.feature_column._bucketized_column": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.range", "<builtin>.len"], "feature_column.feature_column._categorical_column_with_hash_bucket": ["feature_column.utils.assert_key_is_string", "feature_column.utils.assert_string_or_int", "<builtin>.ValueError"], "feature_column.utils.assert_string_or_int": ["<builtin>.ValueError"], "feature_column.feature_column._categorical_column_with_vocabulary_file": ["feature_column.utils.assert_key_is_string", "feature_column.utils.assert_string_or_int", "<builtin>.ValueError", "platform.tf_logging.info", "platform.gfile.Exists", "<builtin>.sum", "platform.gfile.GFile"], "feature_column.feature_column._categorical_column_with_vocabulary_list": ["feature_column.utils.assert_key_is_string", "<builtin>.ValueError", "<builtin>.len", "<builtin>.tuple", "numpy.array", "framework.dtypes.as_dtype", "feature_column.utils.assert_string_or_int", "<builtin>.set"], "feature_column.feature_column._categorical_column_with_identity": ["feature_column.utils.assert_key_is_string", "<builtin>.ValueError"], "feature_column.feature_column._indicator_column": [], "feature_column.feature_column._weighted_categorical_column": ["<builtin>.ValueError"], "feature_column.feature_column._crossed_column": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.len", "<builtin>.ValueError"], "feature_column.feature_column._EmbeddingColumnLayer.set_weight_collections": [], "feature_column.feature_column._EmbeddingColumnLayer.build": ["base.Layer.add_variable", "feature_column.feature_column._add_to_collections", "eager.context.executing_eagerly"], "feature_column.feature_column._EmbeddingColumnLayer.call": [], "feature_column.feature_column._FeatureColumn": ["abc.abstractproperty", "abc.abstractmethod"], "feature_column.feature_column._FeatureColumn.name": [], "feature_column.feature_column._FeatureColumn.__lt__": ["<builtin>.str"], "feature_column.feature_column._FeatureColumn.__gt__": ["<builtin>.str"], "feature_column.feature_column._FeatureColumn._var_scope_name": [], "feature_column.feature_column._FeatureColumn._transform_feature": [], "feature_column.feature_column._FeatureColumn._parse_example_spec": [], "feature_column.feature_column._FeatureColumn._reset_config": [], "feature_column.feature_column._DenseColumn": ["abc.abstractproperty", "abc.abstractmethod"], "feature_column.feature_column._DenseColumn._variable_shape": [], "feature_column.feature_column._DenseColumn._get_dense_tensor": [], "feature_column.feature_column._create_categorical_column_weighted_sum": ["ops.variable_scope.get_variable", "ops.array_ops.shape", "ops.init_ops.zeros_initializer", "ops.embedding_ops.safe_embedding_lookup_sparse", "ops.sparse_ops.sparse_reshape"], "feature_column.feature_column._create_dense_column_weighted_sum": ["ops.math_ops.matmul", "ops.array_ops.reshape", "ops.variable_scope.get_variable", "ops.array_ops.shape", "ops.init_ops.zeros_initializer"], "ops.variable_scope.get_variable": ["ops.variable_scope.VariableScope.get_variable", "ops.variable_scope.get_variable_scope", "ops.variable_scope._get_default_variable_store"], "feature_column.feature_column._CategoricalColumn": ["abc.abstractproperty", "abc.abstractmethod", "collections.namedtuple"], "feature_column.feature_column._CategoricalColumn._num_buckets": [], "feature_column.feature_column._CategoricalColumn._get_sparse_tensors": [], "ops.embedding_ops.safe_embedding_lookup_sparse": ["ops.math_ops.cast", "ops.array_ops.tile", "framework.sparse_tensor.SparseTensor", "ops.array_ops.where", "ops.array_ops.reshape", "ops.array_ops.gather", "ops.array_ops.shape", "framework.tensor_shape.unknown_shape", "framework.ops.name_scope", "framework.tensor_shape.dimension_value", "ops.array_ops.stack", "framework.ops.convert_to_tensor", "ops.math_ops.reduce_prod", "<builtin>.list", "<builtin>.isinstance", "ops.array_ops.concat", "ops.array_ops.zeros_like", "<builtin>.len", "ops.array_ops.slice", "ops.sparse_ops.sparse_reshape", "ops.embedding_ops._prune_invalid_weights", "<builtin>.ValueError", "ops.embedding_ops.embedding_lookup_sparse", "ops.array_ops.size", "ops.sparse_ops.sparse_fill_empty_rows", "framework.tensor_shape.Dimension", "ops.embedding_ops._prune_invalid_ids"], "feature_column.feature_column._SequenceDenseColumn": ["abc.abstractmethod", "collections.namedtuple"], "feature_column.feature_column._SequenceDenseColumn._get_sequence_dense_tensor": [], "feature_column.feature_column._LazyBuilder._get_raw_feature_as_tensor": ["ops.math_ops.equal", "<builtin>.ValueError", "ops.control_flow_ops.cond", "ops.array_ops.rank", "ops.check_ops.assert_positive", "framework.ops.control_dependencies", "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "feature_column.feature_column._LazyBuilder._get_raw_feature_as_tensor.expand_dims"], "feature_column.feature_column._LazyBuilder._get_raw_feature_as_tensor.expand_dims": ["<builtin>.isinstance", "ops.array_ops.shape", "ops.array_ops.expand_dims", "ops.sparse_ops.sparse_reshape"], "feature_column.feature_column._LazyBuilder._get_raw_feature_as_tensor.<lambda1>": ["feature_column.feature_column._LazyBuilder._get_raw_feature_as_tensor.expand_dims"], "feature_column.feature_column._LazyBuilder._get_raw_feature_as_tensor.<lambda2>": [], "feature_column.feature_column._shape_offsets": ["<builtin>.reversed"], "feature_column.feature_column._to_sparse_input_and_drop_ignore_values": ["ops.math_ops.not_equal", "<builtin>.isinstance", "ops.array_ops.shape", "ops.math_ops.cast", "ops.array_ops.where", "ops.array_ops.gather_nd", "framework.sparse_tensor.SparseTensor", "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "framework.ops.name_scope"], "feature_column.feature_column._NumericColumn.name": [], "feature_column.feature_column._NumericColumn._parse_example_spec": ["ops.parsing_ops.FixedLenFeature"], "ops.parsing_ops.FixedLenFeature": [], "feature_column.feature_column._NumericColumn._transform_feature": ["<builtin>.isinstance", "ops.math_ops.cast", "<builtin>.ValueError"], "feature_column.feature_column._NumericColumn._variable_shape": ["framework.tensor_shape.TensorShape"], "feature_column.feature_column._NumericColumn._get_dense_tensor": [], "feature_column.feature_column._BucketizedColumn.name": [], "feature_column.feature_column._BucketizedColumn._parse_example_spec": [], "feature_column.feature_column._BucketizedColumn._transform_feature": ["ops.math_ops._bucketize"], "ops.math_ops._bucketize": ["ops.gen_math_ops.bucketize"], "feature_column.feature_column._BucketizedColumn._variable_shape": ["<builtin>.tuple", "framework.tensor_shape.TensorShape", "<builtin>.len"], "feature_column.feature_column._BucketizedColumn._get_dense_tensor": ["<builtin>.len", "ops.math_ops.cast", "ops.array_ops.one_hot"], "feature_column.feature_column._BucketizedColumn._num_buckets": ["<builtin>.len"], "feature_column.feature_column._BucketizedColumn._get_sparse_tensors": ["ops.array_ops.reshape", "ops.array_ops.shape", "ops.math_ops.cast", "ops.math_ops.range", "ops.array_ops.stack", "ops.array_ops.expand_dims", "framework.sparse_tensor.SparseTensor", "ops.array_ops.tile", "<builtin>.len", "ops.array_ops.transpose"], "feature_column.feature_column._EmbeddingColumn.__new__": ["<builtin>.super"], "feature_column.feature_column._EmbeddingColumn.name": ["<builtin>.hasattr"], "feature_column.feature_column._EmbeddingColumn._parse_example_spec": [], "feature_column.feature_column._EmbeddingColumn._transform_feature": [], "feature_column.feature_column._EmbeddingColumn._variable_shape": ["framework.tensor_shape.TensorShape", "<builtin>.hasattr"], "feature_column.feature_column._EmbeddingColumn._get_dense_tensor_internal": ["framework.tensor_shape.dimension_value", "<builtin>.isinstance", "ops.embedding_ops.safe_embedding_lookup_sparse", "training.checkpoint_utils.init_from_checkpoint", "ops.variable_scope.get_variable_scope", "ops.embedding_ops.embedding_lookup_sparse_v2"], "training.checkpoint_utils.init_from_checkpoint": ["distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.get_cross_replica_context", "training.checkpoint_utils.init_from_checkpoint.<lambda1>"], "feature_column.feature_column._EmbeddingColumn._get_dense_tensor": ["<builtin>.isinstance", "feature_column.feature_column._EmbeddingColumn._get_dense_tensor_internal", "<builtin>.ValueError", "<builtin>.type"], "feature_column.feature_column._EmbeddingColumn._get_sequence_dense_tensor": ["feature_column.utils.sequence_length_from_sparse_tensor", "<builtin>.ValueError", "<builtin>.isinstance", "feature_column.feature_column._EmbeddingColumn._get_dense_tensor_internal", "<builtin>.type"], "feature_column.utils.sequence_length_from_sparse_tensor": ["ops.math_ops.ceil", "framework.ops.name_scope", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.zeros", "ops.math_ops.segment_max", "ops.array_ops.ones_like", "ops.math_ops.cast"], "feature_column.feature_column._get_graph_for_variable": ["<builtin>.isinstance", "<builtin>.list"], "feature_column.feature_column._SharedEmbeddingColumn.name": ["<builtin>.hasattr"], "feature_column.feature_column._SharedEmbeddingColumn._var_scope_name": [], "feature_column.feature_column._SharedEmbeddingColumn._parse_example_spec": [], "feature_column.feature_column._SharedEmbeddingColumn._transform_feature": [], "feature_column.feature_column._SharedEmbeddingColumn._variable_shape": ["framework.tensor_shape.TensorShape", "<builtin>.hasattr"], "feature_column.feature_column._SharedEmbeddingColumn._get_dense_tensor_internal": ["ops.variable_scope.get_variable", "<builtin>.ValueError", "<builtin>.isinstance", "framework.tensor_shape.dimension_value", "framework.ops.get_collection", "training.checkpoint_utils.init_from_checkpoint", "ops.embedding_ops.safe_embedding_lookup_sparse", "ops.embedding_ops.embedding_lookup_sparse_v2", "framework.ops.name_scope", "<builtin>.len", "framework.ops.add_to_collection"], "feature_column.feature_column._SharedEmbeddingColumn._get_dense_tensor": ["<builtin>.isinstance", "feature_column.feature_column._SharedEmbeddingColumn._get_dense_tensor_internal", "<builtin>.ValueError", "<builtin>.type"], "feature_column.feature_column._SharedEmbeddingColumn._get_sequence_dense_tensor": ["feature_column.utils.sequence_length_from_sparse_tensor", "<builtin>.ValueError", "<builtin>.isinstance", "feature_column.feature_column._SharedEmbeddingColumn._get_dense_tensor_internal", "<builtin>.type"], "feature_column.feature_column._HashedCategoricalColumn.name": [], "feature_column.feature_column._HashedCategoricalColumn._parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "ops.parsing_ops.VarLenFeature": [], "feature_column.feature_column._HashedCategoricalColumn._transform_feature": ["ops.string_ops.as_string", "<builtin>.ValueError", "<builtin>.isinstance", "framework.sparse_tensor.SparseTensor", "feature_column.feature_column._to_sparse_input_and_drop_ignore_values", "ops.string_ops.string_to_hash_bucket_fast", "feature_column.utils.assert_string_or_int"], "feature_column.feature_column._HashedCategoricalColumn._num_buckets": [], "feature_column.feature_column._HashedCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column._VocabularyFileCategoricalColumn.name": [], "feature_column.feature_column._VocabularyFileCategoricalColumn._parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column._VocabularyFileCategoricalColumn._transform_feature": ["<builtin>.ValueError", "ops.math_ops.cast", "feature_column.feature_column._to_sparse_input_and_drop_ignore_values", "feature_column.utils.assert_string_or_int", "ops.lookup_ops.index_table_from_file"], "ops.lookup_ops.index_table_from_file": ["<builtin>.TypeError", "ops.lookup_ops.TextFileIdTableInitializer.__init__", "ops.lookup_ops.IdTableWithHashBuckets.__init__", "<builtin>.ValueError", "framework.tensor_util.constant_value", "ops.lookup_ops.StaticHashTable.__init__", "<builtin>.isinstance", "framework.ops.name_scope"], "feature_column.feature_column._VocabularyFileCategoricalColumn._num_buckets": [], "feature_column.feature_column._VocabularyFileCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column._VocabularyListCategoricalColumn.name": [], "feature_column.feature_column._VocabularyListCategoricalColumn._parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column._VocabularyListCategoricalColumn._transform_feature": ["<builtin>.ValueError", "<builtin>.tuple", "ops.math_ops.cast", "feature_column.feature_column._to_sparse_input_and_drop_ignore_values", "feature_column.utils.assert_string_or_int", "ops.lookup_ops.index_table_from_tensor"], "ops.lookup_ops.index_table_from_tensor": ["<builtin>.TypeError", "ops.lookup_ops.IdTableWithHashBuckets.__init__", "<builtin>.ValueError", "ops.math_ops.cast", "ops.lookup_ops.StaticHashTable.__init__", "framework.ops.name_scope", "ops.math_ops.range", "framework.ops.convert_to_tensor", "ops.lookup_ops.KeyValueTensorInitializer.__init__", "ops.array_ops.size"], "feature_column.feature_column._VocabularyListCategoricalColumn._num_buckets": ["<builtin>.len"], "feature_column.feature_column._VocabularyListCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column._IdentityCategoricalColumn.name": [], "feature_column.feature_column._IdentityCategoricalColumn._parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column._IdentityCategoricalColumn._transform_feature": ["ops.array_ops.fill", "<builtin>.ValueError", "ops.array_ops.shape", "ops.math_ops.cast", "ops.array_ops.where", "framework.sparse_tensor.SparseTensor", "feature_column.feature_column._to_sparse_input_and_drop_ignore_values", "ops.math_ops.logical_or"], "feature_column.feature_column._IdentityCategoricalColumn._num_buckets": [], "feature_column.feature_column._IdentityCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column._WeightedCategoricalColumn.name": [], "feature_column.feature_column._WeightedCategoricalColumn._parse_example_spec": ["ops.parsing_ops.VarLenFeature", "<builtin>.ValueError"], "feature_column.feature_column._WeightedCategoricalColumn._num_buckets": [], "feature_column.feature_column._WeightedCategoricalColumn._transform_feature": ["<builtin>.ValueError", "<builtin>.isinstance", "ops.math_ops.cast", "feature_column.feature_column._to_sparse_input_and_drop_ignore_values", "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor"], "feature_column.feature_column._WeightedCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column._CrossedColumn.name": ["<builtin>.isinstance", "<builtin>.sorted", "feature_column.feature_column._collect_leaf_level_keys"], "feature_column.feature_column._collect_leaf_level_keys": ["<builtin>.isinstance", "feature_column.feature_column._collect_leaf_level_keys"], "feature_column.feature_column._CrossedColumn._parse_example_spec": ["<builtin>.isinstance"], "feature_column.feature_column._CrossedColumn._transform_feature": ["<builtin>.isinstance", "ops.sparse_ops.sparse_cross_hashed", "<builtin>.ValueError", "feature_column.feature_column._collect_leaf_level_keys"], "ops.sparse_ops.sparse_cross_hashed": ["ops.sparse_ops._sparse_cross_internal"], "feature_column.feature_column._CrossedColumn._num_buckets": [], "feature_column.feature_column._CrossedColumn._get_sparse_tensors": [], "feature_column.feature_column._IndicatorColumn.name": [], "feature_column.feature_column._IndicatorColumn._transform_feature": ["<builtin>.int", "ops.sparse_ops.sparse_tensor_to_dense", "ops.sparse_ops.sparse_merge", "ops.array_ops.one_hot", "ops.sparse_ops.sparse_slice", "ops.math_ops.reduce_sum", "ops.array_ops.scatter_nd"], "ops.sparse_ops.sparse_merge": ["ops.sparse_ops.sparse_merge_impl"], "ops.sparse_ops.sparse_slice": ["ops.gen_sparse_ops.sparse_slice", "framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.sparse_ops._convert_to_sparse_tensor"], "feature_column.feature_column._IndicatorColumn._parse_example_spec": [], "feature_column.feature_column._IndicatorColumn._variable_shape": ["framework.tensor_shape.TensorShape"], "feature_column.feature_column._IndicatorColumn._get_dense_tensor": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.type"], "feature_column.feature_column._IndicatorColumn._get_sequence_dense_tensor": ["<builtin>.isinstance", "feature_column.utils.sequence_length_from_sparse_tensor", "<builtin>.ValueError", "<builtin>.type"], "feature_column.feature_column._SequenceCategoricalColumn.name": [], "feature_column.feature_column._SequenceCategoricalColumn._parse_example_spec": [], "feature_column.feature_column._SequenceCategoricalColumn._transform_feature": [], "feature_column.feature_column._SequenceCategoricalColumn._num_buckets": [], "feature_column.feature_column._SequenceCategoricalColumn._get_sparse_tensors": ["ops.math_ops.reduce_prod", "ops.array_ops.shape", "ops.sparse_ops.sparse_reshape"], "feature_column.feature_column_lib": [], "feature_column.feature_column_v2": ["util.tf_export.tf_export"], "feature_column.feature_column_v2.StateManager.create_variable": ["<builtin>.NotImplementedError"], "feature_column.feature_column_v2.StateManager.add_variable": ["<builtin>.NotImplementedError"], "feature_column.feature_column_v2.StateManager.get_variable": ["<builtin>.NotImplementedError"], "feature_column.feature_column_v2.StateManager.add_resource": ["<builtin>.NotImplementedError"], "feature_column.feature_column_v2.StateManager.has_resource": ["<builtin>.NotImplementedError"], "feature_column.feature_column_v2.StateManager.get_resource": ["<builtin>.NotImplementedError"], "feature_column.feature_column_v2._StateManagerImpl.__init__": ["<builtin>.hasattr", "tracking.data_structures.Mapping", "collections.defaultdict"], "feature_column.feature_column_v2._StateManagerImpl.__init__.<lambda1>": [], "feature_column.feature_column_v2._StateManagerImpl.__init__.<lambda2>": [], "feature_column.feature_column_v2._StateManagerImpl.create_variable": ["<builtin>.isinstance", "<builtin>.str", "tracking.base.no_manual_dependency_tracking_scope", "<builtin>.ValueError"], "tracking.base.no_manual_dependency_tracking_scope": ["<builtin>.getattr"], "feature_column.feature_column_v2._StateManagerImpl.get_variable": ["<builtin>.ValueError"], "feature_column.feature_column_v2._StateManagerImpl.add_resource": ["<builtin>.isinstance", "tracking.data_structures.Mapping"], "feature_column.feature_column_v2._StateManagerImpl.has_resource": [], "feature_column.feature_column_v2._StateManagerImpl.get_resource": ["<builtin>.ValueError"], "feature_column.feature_column_v2._transform_features_v2": ["feature_column.feature_column_v2._normalize_feature_columns", "feature_column.feature_column_v2.FeatureTransformationCache.__init__", "feature_column.feature_column_v2._sanitize_column_name_for_variable_scope", "framework.ops.name_scope", "feature_column.feature_column_v2.FeatureTransformationCache.get"], "feature_column.feature_column_v2._normalize_feature_columns": ["<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.list", "<builtin>.sorted"], "feature_column.feature_column_v2.FeatureTransformationCache.__init__": [], "feature_column.feature_column_v2._sanitize_column_name_for_variable_scope": ["re.compile"], "feature_column.feature_column_v2.FeatureTransformationCache.get": ["<builtin>.TypeError", "platform.tf_logging.debug", "<builtin>.ValueError", "<builtin>.isinstance", "feature_column.feature_column_v2.FeatureTransformationCache._get_raw_feature_as_tensor"], "feature_column.feature_column_v2.make_parse_example_spec_v2": ["<builtin>.isinstance", "six.iteritems", "<builtin>.ValueError"], "feature_column._DenseColumn.__init__": [], "feature_column._SequenceDenseColumn.__init__": [], "feature_column.feature_column_v2.shared_embedding_columns": ["eager.context.executing_eagerly", "math.sqrt", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.RuntimeError", "ops.init_ops.truncated_normal_initializer", "<builtin>.sorted", "feature_column.feature_column._SharedEmbeddingColumn"], "feature_column.feature_column_v2.shared_embedding_columns.<lambda1>": [], "feature_column.feature_column._SharedEmbeddingColumn": [], "feature_column.feature_column_v2.shared_embedding_columns_v2": ["eager.context.executing_eagerly", "feature_column.feature_column_v2.SharedEmbeddingColumnCreator.__init__", "math.sqrt", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.RuntimeError", "ops.init_ops.truncated_normal_initializer", "<builtin>.sorted"], "feature_column.feature_column_v2.shared_embedding_columns_v2.<lambda1>": [], "feature_column.feature_column_v2.SharedEmbeddingColumnCreator.__init__": [], "feature_column.feature_column_v2._check_shape": ["<builtin>.TypeError", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.isinstance", "util.nest.is_sequence"], "feature_column._CategoricalColumn.__init__": [], "feature_column.feature_column_v2.categorical_column_with_vocabulary_file": ["feature_column.feature_column_v2.categorical_column_with_vocabulary_file_v2"], "feature_column.feature_column_v2.categorical_column_with_vocabulary_file_v2": ["platform.tf_logging.info", "feature_column._CategoricalColumn.__init__", "eager.context.executing_eagerly", "feature_column.utils.assert_string_or_int", "<builtin>.ValueError", "feature_column.utils.assert_key_is_string", "<builtin>.isinstance", "platform.gfile.Exists", "ops.readers.TFRecordDataset", "platform.gfile.GFile", "<builtin>.sum"], "feature_column.feature_column_v2.categorical_column_with_vocabulary_file_v2.<lambda1>": [], "feature_column.feature_column_v2.FeatureColumn": ["abc.abstractproperty", "abc.abstractmethod"], "feature_column.feature_column_v2.FeatureColumn.name": [], "feature_column.feature_column_v2.FeatureColumn.__lt__": ["<builtin>.str"], "feature_column.feature_column_v2.FeatureColumn.__gt__": ["<builtin>.str"], "feature_column.feature_column_v2.FeatureColumn.transform_feature": [], "feature_column.feature_column_v2.FeatureColumn.parse_example_spec": [], "feature_column.feature_column_v2.FeatureColumn.create_state": [], "feature_column.feature_column_v2.FeatureColumn._is_v2_column": [], "feature_column.feature_column_v2.FeatureColumn.parents": [], "feature_column.feature_column_v2.FeatureColumn.get_config": ["feature_column.feature_column_v2.FeatureColumn._get_config"], "feature_column.feature_column_v2.FeatureColumn._get_config": ["<builtin>.NotImplementedError"], "feature_column.feature_column_v2.FeatureColumn.from_config": ["feature_column.feature_column_v2.FeatureColumn._from_config"], "feature_column.feature_column_v2.FeatureColumn._from_config": ["<builtin>.NotImplementedError"], "feature_column.feature_column_v2.DenseColumn": ["abc.abstractproperty", "abc.abstractmethod"], "feature_column.feature_column_v2.DenseColumn.variable_shape": [], "feature_column.feature_column_v2.DenseColumn.get_dense_tensor": [], "feature_column.feature_column_v2.is_feature_column_v2": ["<builtin>.isinstance"], "feature_column.feature_column_v2._create_weighted_sum": ["<builtin>.isinstance", "feature_column.feature_column_v2._create_categorical_column_weighted_sum", "feature_column.feature_column_v2._create_dense_column_weighted_sum"], "feature_column.feature_column_v2._create_categorical_column_weighted_sum": ["ops.array_ops.shape", "ops.embedding_ops.safe_embedding_lookup_sparse", "ops.sparse_ops.sparse_reshape"], "feature_column.feature_column_v2._create_dense_column_weighted_sum": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.math_ops.matmul"], "feature_column.feature_column_v2.CategoricalColumn": ["abc.abstractproperty", "abc.abstractmethod", "collections.namedtuple"], "feature_column.feature_column_v2.CategoricalColumn.num_buckets": [], "feature_column.feature_column_v2.CategoricalColumn.get_sparse_tensors": [], "feature_column.feature_column_v2.SequenceDenseColumn": ["abc.abstractmethod", "collections.namedtuple"], "feature_column.feature_column_v2.SequenceDenseColumn.get_sequence_dense_tensor": [], "feature_column.feature_column_v2.FeatureTransformationCache._get_raw_feature_as_tensor": ["ops.check_ops.assert_positive", "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "<builtin>.ValueError", "ops.math_ops.equal", "framework.ops.control_dependencies", "feature_column.feature_column_v2.FeatureTransformationCache._get_raw_feature_as_tensor.expand_dims", "ops.array_ops.rank", "ops.control_flow_ops.cond"], "feature_column.feature_column_v2.FeatureTransformationCache._get_raw_feature_as_tensor.expand_dims": ["ops.array_ops.shape", "<builtin>.isinstance", "ops.array_ops.expand_dims", "ops.sparse_ops.sparse_reshape"], "feature_column.feature_column_v2.FeatureTransformationCache._get_raw_feature_as_tensor.<lambda1>": ["feature_column.feature_column_v2.FeatureTransformationCache._get_raw_feature_as_tensor.expand_dims"], "feature_column.feature_column_v2.FeatureTransformationCache._get_raw_feature_as_tensor.<lambda2>": [], "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values": ["ops.array_ops.shape", "ops.array_ops.gather_nd", "framework.sparse_tensor.SparseTensor", "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "<builtin>.isinstance", "ops.math_ops.not_equal", "ops.array_ops.where_v2", "framework.ops.name_scope", "ops.math_ops.cast"], "feature_column.feature_column_v2._normalize_feature_columns.<lambda1>": [], "feature_column.feature_column_v2.NumericColumn._is_v2_column": [], "feature_column.feature_column_v2.NumericColumn.name": [], "feature_column.feature_column_v2.NumericColumn.parse_example_spec": ["ops.parsing_ops.FixedLenFeature"], "feature_column.feature_column_v2.NumericColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.NumericColumn._parse_example_spec": [], "feature_column.feature_column_v2.NumericColumn._transform_input_tensor": ["feature_column._DenseColumn.normalizer_fn", "<builtin>.isinstance", "ops.math_ops.cast", "<builtin>.ValueError"], "feature_column._DenseColumn.normalizer_fn": [], "feature_column.feature_column_v2.NumericColumn._transform_feature": ["feature_column.feature_column_v2.NumericColumn._transform_input_tensor"], "feature_column.feature_column_v2.NumericColumn.transform_feature": ["feature_column.feature_column_v2.NumericColumn._transform_input_tensor"], "feature_column.feature_column_v2.NumericColumn.variable_shape": ["framework.tensor_shape.TensorShape"], "feature_column.feature_column_v2.NumericColumn._variable_shape": [], "feature_column.feature_column_v2.NumericColumn.get_dense_tensor": [], "feature_column.feature_column_v2.NumericColumn._get_dense_tensor": [], "feature_column.feature_column_v2.NumericColumn.parents": [], "feature_column.feature_column_v2.NumericColumn.get_config": ["<builtin>.dict", "feature_column.serialization._serialize_keras_object", "<builtin>.zip"], "feature_column.serialization._serialize_keras_object": ["<builtin>.hasattr", "feature_column.serialization._serialize_keras_object", "<builtin>.ValueError", "util.tf_decorator.unwrap", "<builtin>.isinstance"], "feature_column.feature_column_v2.NumericColumn.from_config": ["feature_column._DenseColumn.__init__", "feature_column.serialization._deserialize_keras_object", "feature_column.feature_column_v2._check_config_keys", "framework.dtypes.as_dtype", "feature_column.feature_column_v2._standardize_and_copy_config"], "feature_column.feature_column_v2._check_config_keys": ["<builtin>.set", "<builtin>.ValueError"], "feature_column.feature_column_v2._standardize_and_copy_config": ["<builtin>.isinstance", "<builtin>.tuple"], "feature_column.serialization._deserialize_keras_object": ["<builtin>.hasattr", "<builtin>.dict", "<builtin>.list", "feature_column.serialization._class_and_config_for_serialized_keras_object", "util.tf_inspect.isclass", "<builtin>.ValueError", "util.tf_inspect.getfullargspec", "util.tf_inspect.isfunction", "<builtin>.isinstance"], "feature_column.feature_column_v2.BucketizedColumn._is_v2_column": ["<builtin>.isinstance"], "feature_column.feature_column_v2.BucketizedColumn.name": [], "feature_column.feature_column_v2.BucketizedColumn.parse_example_spec": [], "feature_column.feature_column_v2.BucketizedColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.BucketizedColumn._parse_example_spec": [], "feature_column.feature_column_v2.BucketizedColumn._transform_feature": ["ops.math_ops._bucketize"], "feature_column.feature_column_v2.BucketizedColumn.transform_feature": ["ops.math_ops._bucketize"], "feature_column.feature_column_v2.BucketizedColumn.variable_shape": ["framework.tensor_shape.TensorShape", "<builtin>.len", "<builtin>.tuple"], "feature_column.feature_column_v2.BucketizedColumn._variable_shape": [], "feature_column.feature_column_v2.BucketizedColumn._get_dense_tensor_for_input_tensor": ["ops.array_ops.one_hot", "<builtin>.len", "ops.math_ops.cast"], "feature_column.feature_column_v2.BucketizedColumn.get_dense_tensor": ["feature_column.feature_column_v2.BucketizedColumn._get_dense_tensor_for_input_tensor"], "feature_column.feature_column_v2.BucketizedColumn._get_dense_tensor": ["feature_column.feature_column_v2.BucketizedColumn._get_dense_tensor_for_input_tensor"], "feature_column.feature_column_v2.BucketizedColumn.num_buckets": ["<builtin>.len"], "feature_column.feature_column_v2.BucketizedColumn._num_buckets": [], "feature_column.feature_column_v2.BucketizedColumn._get_sparse_tensors_for_input_tensor": ["ops.array_ops.shape", "ops.array_ops.expand_dims", "ops.array_ops.reshape", "framework.sparse_tensor.SparseTensor", "ops.math_ops.range", "ops.array_ops.tile", "ops.array_ops.transpose", "ops.array_ops.stack", "<builtin>.len", "ops.math_ops.cast"], "feature_column.feature_column_v2.BucketizedColumn.get_sparse_tensors": ["feature_column.feature_column_v2.BucketizedColumn._get_sparse_tensors_for_input_tensor"], "feature_column.feature_column_v2.BucketizedColumn._get_sparse_tensors": ["feature_column.feature_column_v2.BucketizedColumn._get_sparse_tensors_for_input_tensor"], "feature_column.feature_column_v2.BucketizedColumn.parents": [], "feature_column.feature_column_v2.BucketizedColumn.get_config": ["<builtin>.dict", "<builtin>.zip", "feature_column.serialization.serialize_feature_column"], "feature_column.feature_column_v2.BucketizedColumn.from_config": ["feature_column._DenseColumn.__init__", "feature_column.feature_column_v2._standardize_and_copy_config", "feature_column.feature_column_v2._check_config_keys", "feature_column.serialization.deserialize_feature_column"], "feature_column.feature_column_v2.EmbeddingColumn.__new__": ["<builtin>.super"], "feature_column.feature_column_v2.EmbeddingColumn._is_v2_column": ["<builtin>.isinstance"], "feature_column.feature_column_v2.EmbeddingColumn.name": [], "feature_column.feature_column_v2.EmbeddingColumn.parse_example_spec": [], "feature_column.feature_column_v2.EmbeddingColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.EmbeddingColumn._parse_example_spec": [], "feature_column.feature_column_v2.EmbeddingColumn.transform_feature": [], "feature_column.feature_column_v2.EmbeddingColumn._transform_feature": [], "feature_column.feature_column_v2.EmbeddingColumn.variable_shape": ["framework.tensor_shape.TensorShape"], "feature_column.feature_column_v2.EmbeddingColumn._variable_shape": [], "feature_column.feature_column_v2.EmbeddingColumn.create_state": ["<builtin>.getattr"], "feature_column.feature_column_v2.EmbeddingColumn._get_dense_tensor_internal_helper": ["ops.embedding_ops.embedding_lookup_sparse_v2", "shared_embedding_column_creator.embedding_weights._get_variable_list", "ops.embedding_ops.safe_embedding_lookup_sparse", "<builtin>.isinstance", "training.checkpoint_utils.init_from_checkpoint", "framework.tensor_shape.dimension_value"], "shared_embedding_column_creator.embedding_weights._get_variable_list": [], "feature_column.feature_column_v2.EmbeddingColumn._get_dense_tensor_internal": ["feature_column.feature_column_v2.EmbeddingColumn._get_dense_tensor_internal_helper"], "feature_column.feature_column_v2.EmbeddingColumn._old_get_dense_tensor_internal": ["ops.variable_scope.get_variable", "feature_column.feature_column_v2.EmbeddingColumn._get_dense_tensor_internal_helper"], "feature_column.feature_column_v2.EmbeddingColumn.get_dense_tensor": ["feature_column.feature_column_v2.EmbeddingColumn._get_dense_tensor_internal", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "_DenseColumn.categorical_column.get_sparse_tensors"], "_DenseColumn.categorical_column.get_sparse_tensors": [], "feature_column.feature_column_v2.EmbeddingColumn._get_dense_tensor": ["_DenseColumn.categorical_column._get_sparse_tensors", "<builtin>.type", "feature_column.feature_column_v2.EmbeddingColumn._old_get_dense_tensor_internal", "<builtin>.ValueError", "<builtin>.isinstance"], "_DenseColumn.categorical_column._get_sparse_tensors": [], "feature_column.feature_column_v2.EmbeddingColumn.get_sequence_dense_tensor": ["feature_column.feature_column_v2.EmbeddingColumn._get_dense_tensor_internal", "feature_column.utils.sequence_length_from_sparse_tensor", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "_DenseColumn.categorical_column.get_sparse_tensors"], "feature_column.feature_column_v2.EmbeddingColumn._get_sequence_dense_tensor": ["_DenseColumn.categorical_column._get_sparse_tensors", "feature_column.utils.sequence_length_from_sparse_tensor", "<builtin>.type", "feature_column.feature_column_v2.EmbeddingColumn._old_get_dense_tensor_internal", "<builtin>.ValueError", "<builtin>.isinstance"], "feature_column.feature_column_v2.EmbeddingColumn.parents": [], "feature_column.feature_column_v2.EmbeddingColumn.get_config": ["<builtin>.dict", "feature_column.serialization._serialize_keras_object", "<builtin>.zip", "feature_column.serialization.serialize_feature_column"], "feature_column.feature_column_v2.EmbeddingColumn.from_config": ["feature_column._DenseColumn.__init__", "feature_column.serialization.deserialize_feature_column", "feature_column.serialization._deserialize_keras_object", "<builtin>.dict", "feature_column.feature_column_v2._check_config_keys", "feature_column.feature_column_v2._standardize_and_copy_config", "util.tf_inspect.getmembers"], "util.tf_inspect.getmembers": ["inspect.getmembers"], "feature_column.feature_column_v2._raise_shared_embedding_column_error": ["<builtin>.ValueError"], "feature_column.feature_column_v2.SharedEmbeddingColumnCreator.__call__": ["feature_column._DenseColumn.__init__"], "feature_column.feature_column_v2.SharedEmbeddingColumnCreator.embedding_weights": ["training.checkpoint_utils.init_from_checkpoint", "framework.ops.get_default_graph", "ops.variable_scope.get_variable", "<builtin>.isinstance"], "feature_column.feature_column_v2.SharedEmbeddingColumnCreator.dimension": [], "feature_column.feature_column_v2.SharedEmbeddingColumn.__new__": ["<builtin>.super"], "feature_column.feature_column_v2.SharedEmbeddingColumn._is_v2_column": [], "feature_column.feature_column_v2.SharedEmbeddingColumn.name": [], "feature_column.feature_column_v2.SharedEmbeddingColumn.parse_example_spec": [], "feature_column.feature_column_v2.SharedEmbeddingColumn._parse_example_spec": ["feature_column.feature_column_v2._raise_shared_embedding_column_error"], "feature_column.feature_column_v2.SharedEmbeddingColumn.transform_feature": [], "feature_column.feature_column_v2.SharedEmbeddingColumn._transform_feature": ["feature_column.feature_column_v2._raise_shared_embedding_column_error"], "feature_column.feature_column_v2.SharedEmbeddingColumn.variable_shape": ["framework.tensor_shape.TensorShape"], "feature_column.feature_column_v2.SharedEmbeddingColumn._variable_shape": ["feature_column.feature_column_v2._raise_shared_embedding_column_error"], "feature_column.feature_column_v2.SharedEmbeddingColumn._get_dense_tensor_internal": ["ops.embedding_ops.embedding_lookup_sparse_v2", "ops.embedding_ops.safe_embedding_lookup_sparse", "_DenseColumn.categorical_column.get_sparse_tensors", "framework.ops.name_scope", "framework.tensor_shape.dimension_value"], "feature_column.feature_column_v2.SharedEmbeddingColumn.get_dense_tensor": ["<builtin>.isinstance", "<builtin>.type", "feature_column.feature_column_v2.SharedEmbeddingColumn._get_dense_tensor_internal", "<builtin>.ValueError"], "feature_column.feature_column_v2.SharedEmbeddingColumn._get_dense_tensor": ["feature_column.feature_column_v2._raise_shared_embedding_column_error"], "feature_column.feature_column_v2.SharedEmbeddingColumn.get_sequence_dense_tensor": ["feature_column.utils.sequence_length_from_sparse_tensor", "<builtin>.type", "feature_column.feature_column_v2.SharedEmbeddingColumn._get_dense_tensor_internal", "<builtin>.ValueError", "<builtin>.isinstance", "_DenseColumn.categorical_column.get_sparse_tensors"], "feature_column.feature_column_v2.SharedEmbeddingColumn._get_sequence_dense_tensor": ["feature_column.feature_column_v2._raise_shared_embedding_column_error"], "feature_column.feature_column_v2.SharedEmbeddingColumn.parents": [], "feature_column.feature_column_v2.HashedCategoricalColumn._is_v2_column": [], "feature_column.feature_column_v2.HashedCategoricalColumn.name": [], "feature_column.feature_column_v2.HashedCategoricalColumn.parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_v2.HashedCategoricalColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.HashedCategoricalColumn._parse_example_spec": [], "feature_column.feature_column_v2.HashedCategoricalColumn._transform_input_tensor": ["ops.string_ops.string_to_hash_bucket_fast", "framework.sparse_tensor.SparseTensor", "feature_column.utils.assert_string_or_int", "<builtin>.ValueError", "ops.string_ops.as_string", "<builtin>.isinstance"], "feature_column.feature_column_v2.HashedCategoricalColumn.transform_feature": ["feature_column.feature_column_v2.HashedCategoricalColumn._transform_input_tensor", "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values"], "feature_column.feature_column_v2.HashedCategoricalColumn._transform_feature": ["feature_column.feature_column_v2.HashedCategoricalColumn._transform_input_tensor", "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values"], "feature_column.feature_column_v2.HashedCategoricalColumn.num_buckets": [], "feature_column.feature_column_v2.HashedCategoricalColumn._num_buckets": [], "feature_column.feature_column_v2.HashedCategoricalColumn.get_sparse_tensors": [], "feature_column.feature_column_v2.HashedCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column_v2.HashedCategoricalColumn.parents": [], "feature_column.feature_column_v2.HashedCategoricalColumn.get_config": ["<builtin>.dict", "<builtin>.zip"], "feature_column.feature_column_v2.HashedCategoricalColumn.from_config": ["framework.dtypes.as_dtype", "feature_column.feature_column_v2._standardize_and_copy_config", "feature_column.feature_column_v2._check_config_keys", "feature_column._CategoricalColumn.__init__"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.__new__": ["<builtin>.super"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._is_v2_column": [], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.name": [], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._parse_example_spec": [], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._make_table_from_tfrecord_gzip_file": ["ops.readers.TFRecordDataset", "ops.lookup_ops.index_table_from_dataset"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._make_table_from_tfrecord_gzip_file.key_dtype_fn": ["ops.string_ops.string_to_number"], "ops.string_ops.string_to_number": ["ops.gen_parsing_ops.string_to_number"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._make_table": ["framework.ops.init_scope", "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._make_table_from_tfrecord_gzip_file", "ops.lookup_ops.index_table_from_file"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._transform_input_tensor": ["feature_column.feature_column_v2.VocabularyFileCategoricalColumn._make_table", "feature_column.utils.assert_string_or_int", "ops.math_ops.cast", "<builtin>.ValueError"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.transform_feature": ["feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values", "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._transform_input_tensor"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._transform_feature": ["feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values", "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._transform_input_tensor"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.num_buckets": [], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._num_buckets": [], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.get_sparse_tensors": [], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.parents": [], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.get_config": ["<builtin>.dict", "<builtin>.zip"], "feature_column.feature_column_v2.VocabularyFileCategoricalColumn.from_config": ["framework.dtypes.as_dtype", "feature_column.feature_column_v2._standardize_and_copy_config", "feature_column.feature_column_v2._check_config_keys", "feature_column._CategoricalColumn.__init__"], "feature_column.feature_column_v2.VocabularyListCategoricalColumn._is_v2_column": [], "feature_column.feature_column_v2.VocabularyListCategoricalColumn.name": [], "feature_column.feature_column_v2.VocabularyListCategoricalColumn.parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_v2.VocabularyListCategoricalColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.VocabularyListCategoricalColumn._parse_example_spec": [], "feature_column.feature_column_v2.VocabularyListCategoricalColumn._transform_input_tensor": ["framework.ops.init_scope", "<builtin>.tuple", "ops.lookup_ops.index_table_from_tensor", "feature_column.utils.assert_string_or_int", "<builtin>.ValueError", "ops.math_ops.cast"], "feature_column.feature_column_v2.VocabularyListCategoricalColumn.transform_feature": ["feature_column.feature_column_v2.VocabularyListCategoricalColumn._transform_input_tensor", "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values"], "feature_column.feature_column_v2.VocabularyListCategoricalColumn._transform_feature": ["feature_column.feature_column_v2.VocabularyListCategoricalColumn._transform_input_tensor", "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values"], "feature_column.feature_column_v2.VocabularyListCategoricalColumn.num_buckets": ["<builtin>.len"], "feature_column.feature_column_v2.VocabularyListCategoricalColumn._num_buckets": [], "feature_column.feature_column_v2.VocabularyListCategoricalColumn.get_sparse_tensors": [], "feature_column.feature_column_v2.VocabularyListCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column_v2.VocabularyListCategoricalColumn.parents": [], "feature_column.feature_column_v2.VocabularyListCategoricalColumn.get_config": ["<builtin>.dict", "<builtin>.zip"], "feature_column.feature_column_v2.VocabularyListCategoricalColumn.from_config": ["framework.dtypes.as_dtype", "feature_column.feature_column_v2._standardize_and_copy_config", "feature_column.feature_column_v2._check_config_keys", "feature_column._CategoricalColumn.__init__"], "feature_column.feature_column_v2.IdentityCategoricalColumn._is_v2_column": [], "feature_column.feature_column_v2.IdentityCategoricalColumn.name": [], "feature_column.feature_column_v2.IdentityCategoricalColumn.parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.feature_column_v2.IdentityCategoricalColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.IdentityCategoricalColumn._parse_example_spec": [], "feature_column.feature_column_v2.IdentityCategoricalColumn._transform_input_tensor": ["ops.array_ops.shape", "framework.sparse_tensor.SparseTensor", "ops.array_ops.fill", "<builtin>.ValueError", "ops.array_ops.where_v2", "ops.math_ops.cast", "ops.math_ops.logical_or"], "feature_column.feature_column_v2.IdentityCategoricalColumn.transform_feature": ["feature_column.feature_column_v2.IdentityCategoricalColumn._transform_input_tensor", "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values"], "feature_column.feature_column_v2.IdentityCategoricalColumn._transform_feature": ["feature_column.feature_column_v2.IdentityCategoricalColumn._transform_input_tensor", "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values"], "feature_column.feature_column_v2.IdentityCategoricalColumn.num_buckets": [], "feature_column.feature_column_v2.IdentityCategoricalColumn._num_buckets": [], "feature_column.feature_column_v2.IdentityCategoricalColumn.get_sparse_tensors": [], "feature_column.feature_column_v2.IdentityCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column_v2.IdentityCategoricalColumn.parents": [], "feature_column.feature_column_v2.IdentityCategoricalColumn.get_config": ["<builtin>.dict", "<builtin>.zip"], "feature_column.feature_column_v2.IdentityCategoricalColumn.from_config": ["feature_column.feature_column_v2._standardize_and_copy_config", "feature_column.feature_column_v2._check_config_keys", "feature_column._CategoricalColumn.__init__"], "feature_column.feature_column_v2.WeightedCategoricalColumn._is_v2_column": ["<builtin>.isinstance"], "feature_column.feature_column_v2.WeightedCategoricalColumn.name": [], "feature_column.feature_column_v2.WeightedCategoricalColumn.parse_example_spec": ["ops.parsing_ops.VarLenFeature", "<builtin>.ValueError"], "feature_column.feature_column_v2.WeightedCategoricalColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.WeightedCategoricalColumn._parse_example_spec": ["ops.parsing_ops.VarLenFeature", "<builtin>.ValueError"], "feature_column.feature_column_v2.WeightedCategoricalColumn.num_buckets": [], "feature_column.feature_column_v2.WeightedCategoricalColumn._num_buckets": [], "feature_column.feature_column_v2.WeightedCategoricalColumn._transform_weight_tensor": ["framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "<builtin>.ValueError", "<builtin>.isinstance", "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values", "ops.math_ops.cast"], "feature_column.feature_column_v2.WeightedCategoricalColumn.transform_feature": ["feature_column.feature_column_v2.WeightedCategoricalColumn._transform_weight_tensor", "feature_column.feature_column_v2._to_sparse_input_and_drop_ignore_values"], "feature_column.feature_column_v2.WeightedCategoricalColumn._transform_feature": ["feature_column.feature_column_v2.WeightedCategoricalColumn._transform_weight_tensor"], "feature_column.feature_column_v2.WeightedCategoricalColumn.get_sparse_tensors": [], "feature_column.feature_column_v2.WeightedCategoricalColumn._get_sparse_tensors": [], "feature_column.feature_column_v2.WeightedCategoricalColumn.parents": [], "feature_column.feature_column_v2.WeightedCategoricalColumn.get_config": ["<builtin>.dict", "<builtin>.zip", "feature_column.serialization.serialize_feature_column"], "feature_column.feature_column_v2.WeightedCategoricalColumn.from_config": ["feature_column._CategoricalColumn.__init__", "feature_column.serialization.deserialize_feature_column", "feature_column.feature_column_v2._check_config_keys", "framework.dtypes.as_dtype", "feature_column.feature_column_v2._standardize_and_copy_config"], "feature_column.feature_column_v2.CrossedColumn._is_v2_column": ["<builtin>.isinstance", "feature_column.feature_column_v2._collect_leaf_level_keys"], "feature_column.feature_column_v2._collect_leaf_level_keys": ["<builtin>.isinstance", "feature_column.feature_column_v2._collect_leaf_level_keys"], "feature_column.feature_column_v2.CrossedColumn.name": ["<builtin>.isinstance", "feature_column.feature_column_v2._collect_leaf_level_keys", "<builtin>.sorted"], "feature_column.feature_column_v2.CrossedColumn.parse_example_spec": ["<builtin>.isinstance"], "feature_column.feature_column_v2.CrossedColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.CrossedColumn._parse_example_spec": [], "feature_column.feature_column_v2.CrossedColumn.transform_feature": ["<builtin>.isinstance", "ops.sparse_ops.sparse_cross_hashed", "feature_column.feature_column_v2._collect_leaf_level_keys", "<builtin>.ValueError"], "feature_column.feature_column_v2.CrossedColumn._transform_feature": ["<builtin>.isinstance", "ops.sparse_ops.sparse_cross_hashed", "feature_column.feature_column_v2._collect_leaf_level_keys", "<builtin>.ValueError"], "feature_column.feature_column_v2.CrossedColumn.num_buckets": [], "feature_column.feature_column_v2.CrossedColumn._num_buckets": [], "feature_column.feature_column_v2.CrossedColumn.get_sparse_tensors": [], "feature_column.feature_column_v2.CrossedColumn._get_sparse_tensors": [], "feature_column.feature_column_v2.CrossedColumn.parents": ["<builtin>.list"], "feature_column.feature_column_v2.CrossedColumn.get_config": ["<builtin>.dict", "<builtin>.zip", "feature_column.serialization.serialize_feature_column", "<builtin>.tuple"], "feature_column.feature_column_v2.CrossedColumn.from_config": ["feature_column._CategoricalColumn.__init__", "feature_column.serialization.deserialize_feature_column", "<builtin>.tuple", "feature_column.feature_column_v2._check_config_keys", "feature_column.feature_column_v2._standardize_and_copy_config"], "feature_column.feature_column_v2._prune_invalid_ids": ["ops.math_ops.logical_and", "ops.math_ops.greater_equal", "ops.array_ops.ones_like", "ops.sparse_ops.sparse_retain"], "ops.sparse_ops.sparse_retain": ["framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "ops.array_ops.identity", "ops.array_ops.gather", "ops.array_ops.where_v2", "ops.array_ops.reshape", "framework.tensor_shape.dimension_at_index", "ops.sparse_ops._convert_to_sparse_tensor"], "feature_column.feature_column_v2._prune_invalid_weights": ["ops.math_ops.greater", "ops.sparse_ops.sparse_retain"], "feature_column.feature_column_v2.IndicatorColumn._is_v2_column": ["<builtin>.isinstance"], "feature_column.feature_column_v2.IndicatorColumn.name": [], "feature_column.feature_column_v2.IndicatorColumn._transform_id_weight_pair": ["ops.sparse_ops.sparse_slice", "<builtin>.int", "ops.sparse_ops.sparse_tensor_to_dense", "ops.array_ops.one_hot", "ops.array_ops.scatter_nd", "ops.sparse_ops.sparse_merge", "ops.math_ops.reduce_sum"], "feature_column.feature_column_v2.IndicatorColumn.transform_feature": ["_DenseColumn.categorical_column.get_sparse_tensors", "feature_column.feature_column_v2.IndicatorColumn._transform_id_weight_pair"], "feature_column.feature_column_v2.IndicatorColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.IndicatorColumn._transform_feature": ["_DenseColumn.categorical_column._get_sparse_tensors", "feature_column.feature_column_v2.IndicatorColumn._transform_id_weight_pair"], "feature_column.feature_column_v2.IndicatorColumn.parse_example_spec": [], "feature_column.feature_column_v2.IndicatorColumn._parse_example_spec": [], "feature_column.feature_column_v2.IndicatorColumn.variable_shape": ["<builtin>.isinstance", "framework.tensor_shape.TensorShape"], "feature_column.feature_column_v2.IndicatorColumn._variable_shape": ["framework.tensor_shape.TensorShape"], "feature_column.feature_column_v2.IndicatorColumn.get_dense_tensor": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError"], "feature_column.feature_column_v2.IndicatorColumn._get_dense_tensor": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError"], "feature_column.feature_column_v2.IndicatorColumn.get_sequence_dense_tensor": ["feature_column.utils.sequence_length_from_sparse_tensor", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "_DenseColumn.categorical_column.get_sparse_tensors"], "feature_column.feature_column_v2.IndicatorColumn._get_sequence_dense_tensor": ["_DenseColumn.categorical_column._get_sparse_tensors", "feature_column.utils.sequence_length_from_sparse_tensor", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance"], "feature_column.feature_column_v2.IndicatorColumn.parents": [], "feature_column.feature_column_v2.IndicatorColumn.get_config": ["<builtin>.dict", "<builtin>.zip", "feature_column.serialization.serialize_feature_column"], "feature_column.feature_column_v2.IndicatorColumn.from_config": ["feature_column._DenseColumn.__init__", "feature_column.feature_column_v2._standardize_and_copy_config", "feature_column.feature_column_v2._check_config_keys", "feature_column.serialization.deserialize_feature_column"], "feature_column.feature_column_v2._verify_static_batch_size_equality": ["<builtin>.range", "framework.tensor_shape.Dimension", "<builtin>.ValueError", "<builtin>.len", "framework.tensor_shape.dimension_value"], "feature_column.feature_column_v2.SequenceCategoricalColumn._is_v2_column": ["<builtin>.isinstance"], "feature_column.feature_column_v2.SequenceCategoricalColumn.name": [], "feature_column.feature_column_v2.SequenceCategoricalColumn.parse_example_spec": [], "feature_column.feature_column_v2.SequenceCategoricalColumn": ["util.deprecation.deprecated"], "feature_column.feature_column_v2.SequenceCategoricalColumn._parse_example_spec": [], "feature_column.feature_column_v2.SequenceCategoricalColumn.transform_feature": ["_SequenceCategoricalColumn.categorical_column.transform_feature"], "_SequenceCategoricalColumn.categorical_column.transform_feature": [], "feature_column.feature_column_v2.SequenceCategoricalColumn._transform_feature": ["_SequenceCategoricalColumn.categorical_column._transform_feature"], "_SequenceCategoricalColumn.categorical_column._transform_feature": [], "feature_column.feature_column_v2.SequenceCategoricalColumn.num_buckets": [], "feature_column.feature_column_v2.SequenceCategoricalColumn._num_buckets": [], "feature_column.feature_column_v2.SequenceCategoricalColumn._get_sparse_tensors_helper": ["ops.array_ops.shape", "ops.math_ops.reduce_prod", "ops.sparse_ops.sparse_reshape"], "feature_column.feature_column_v2.SequenceCategoricalColumn.get_sparse_tensors": ["feature_column.feature_column_v2.SequenceCategoricalColumn._get_sparse_tensors_helper", "_SequenceCategoricalColumn.categorical_column.get_sparse_tensors"], "_SequenceCategoricalColumn.categorical_column.get_sparse_tensors": [], "feature_column.feature_column_v2.SequenceCategoricalColumn._get_sparse_tensors": ["feature_column.feature_column_v2.SequenceCategoricalColumn._get_sparse_tensors_helper", "_SequenceCategoricalColumn.categorical_column._get_sparse_tensors"], "_SequenceCategoricalColumn.categorical_column._get_sparse_tensors": [], "feature_column.feature_column_v2.SequenceCategoricalColumn.parents": [], "feature_column.feature_column_v2.SequenceCategoricalColumn.get_config": ["<builtin>.dict", "<builtin>.zip", "feature_column.serialization.serialize_feature_column"], "feature_column.feature_column_v2.SequenceCategoricalColumn.from_config": ["feature_column.feature_column_v2._standardize_and_copy_config", "feature_column.feature_column_v2._check_config_keys", "feature_column.serialization.deserialize_feature_column", "feature_column._SequenceCategoricalColumn.__init__"], "feature_column._SequenceCategoricalColumn.__init__": [], "feature_column.sequence_feature_column.concatenate_context_input": ["ops.array_ops.expand_dims", "ops.array_ops.shape", "ops.check_ops.assert_type", "ops.array_ops.concat", "ops.check_ops.assert_rank", "ops.array_ops.tile", "framework.ops.control_dependencies"], "ops.check_ops.assert_type": ["eager.context.executing_eagerly", "<builtin>.isinstance", "framework.ops.name_scope", "framework.dtypes.as_dtype", "<builtin>.hasattr", "ops.control_flow_ops.no_op", "<builtin>.TypeError", "framework.ops.convert_to_tensor"], "feature_column.sequence_feature_column.sequence_categorical_column_with_identity": ["feature_column.feature_column_v2.categorical_column_with_identity", "feature_column.feature_column_v2.SequenceCategoricalColumn"], "feature_column.sequence_feature_column.sequence_categorical_column_with_vocabulary_file": ["feature_column.feature_column_v2.categorical_column_with_vocabulary_file", "feature_column.feature_column_v2.SequenceCategoricalColumn"], "feature_column.sequence_feature_column.sequence_numeric_column": ["<builtin>.callable", "feature_column.feature_column_v2._check_shape", "<builtin>.TypeError", "<builtin>.ValueError", "feature_column_v2.SequenceDenseColumn.__init__"], "feature_column_v2.SequenceDenseColumn.__init__": [], "feature_column.sequence_feature_column.SequenceNumericColumn._is_v2_column": [], "feature_column.sequence_feature_column.SequenceNumericColumn.name": [], "feature_column.sequence_feature_column.SequenceNumericColumn.parse_example_spec": ["ops.parsing_ops.VarLenFeature"], "feature_column.sequence_feature_column.SequenceNumericColumn.transform_feature": ["feature_column_v2.SequenceDenseColumn.normalizer_fn"], "feature_column_v2.SequenceDenseColumn.normalizer_fn": [], "feature_column.sequence_feature_column.SequenceNumericColumn.variable_shape": ["framework.tensor_shape.TensorShape"], "feature_column.sequence_feature_column.SequenceNumericColumn.get_sequence_dense_tensor": ["ops.array_ops.shape", "feature_column_v2.SequenceDenseColumn.TensorSequenceLengthPair", "feature_column.utils.sequence_length_from_sparse_tensor", "ops.array_ops.concat", "ops.array_ops.reshape", "ops.sparse_ops.sparse_tensor_to_dense"], "feature_column_v2.SequenceDenseColumn.TensorSequenceLengthPair": [], "feature_column.sequence_feature_column.SequenceNumericColumn.parents": [], "feature_column.sequence_feature_column.SequenceNumericColumn.get_config": ["<builtin>.zip", "<builtin>.dict"], "feature_column.sequence_feature_column.SequenceNumericColumn.from_config": ["feature_column_v2.SequenceDenseColumn.__init__", "feature_column.feature_column_v2._standardize_and_copy_config", "framework.dtypes.as_dtype", "feature_column.feature_column_v2._check_config_keys"], "feature_column.serialization": ["util.tf_export.tf_export"], "feature_column.serialization._class_and_config_for_serialized_keras_object": ["<builtin>.ValueError", "<builtin>.str", "util.tf_inspect.isfunction", "feature_column.serialization._get_registered_object", "feature_column.serialization._deserialize_keras_object", "<builtin>.isinstance"], "feature_column.serialization._column_name_with_class_name": [], "feature_column.serialization.serialize_feature_columns": ["feature_column.serialization.serialize_feature_column"], "feature_column.serialization.deserialize_feature_columns": ["feature_column.serialization.deserialize_feature_column"], "feature_column.serialization._get_registered_object": [], "feature_column.utils": [], "ops.math_ops.segment_max": [], "feature_column.utils._create_tuple": ["<builtin>.tuple", "<builtin>.range", "feature_column.utils._create_tuple"], "feature_column.utils._is_shape_and_default_value_compatible": ["<builtin>.range", "feature_column.utils._is_shape_and_default_value_compatible", "<builtin>.bool", "<builtin>.len", "util.nest.is_sequence"], "feature_column.utils._as_tuple": ["<builtin>.tuple", "util.nest.is_sequence", "feature_column.utils._as_tuple"], "framework.auto_control_deps": ["<builtin>.set", "framework.registry.Registry"], "framework.auto_control_deps.op_is_stateful": [], "framework.auto_control_deps.collective_manager_ids_from_op": [], "framework.auto_control_deps.AutomaticControlDependencies.__init__": ["util.object_identity.ObjectIdentitySet", "<builtin>.set"], "framework.auto_control_deps.AutomaticControlDependencies.mark_as_return": ["ops.array_ops.identity", "<builtin>.isinstance", "framework.ops.IndexedSlices", "ops.tensor_array_ops.build_ta_with_new_flow", "framework.sparse_tensor.SparseTensor"], "ops.tensor_array_ops.build_ta_with_new_flow": ["ops.control_flow_util.EnableControlFlowV2", "ops.tensor_array_ops.TensorArray.__init__", "<builtin>.NotImplementedError", "framework.ops.get_default_graph", "<builtin>.isinstance", "eager.context.executing_eagerly"], "framework.auto_control_deps.AutomaticControlDependencies.__enter__": ["<builtin>.len", "framework.ops.get_default_graph", "eager.context.executing_eagerly"], "framework.auto_control_deps.AutomaticControlDependencies._process_switch": ["ops.control_flow_ops.merge", "framework.auto_control_deps.AutomaticControlDependencies._process_switch", "framework.ops.tensor_id"], "ops.control_flow_ops.merge": ["util.nest.assert_same_structure", "<builtin>.any", "framework.ops.name_scope", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.ValueError", "<builtin>.all", "ops.gen_control_flow_ops.ref_merge", "util.nest.pack_sequence_as", "util.nest.flatten", "ops.gen_control_flow_ops.merge", "<builtin>.type", "framework.ops.internal_convert_to_tensor_or_composite", "ops.math_ops._as_indexed_slices_list", "<builtin>.TypeError"], "framework.auto_control_deps.AutomaticControlDependencies.__exit__": ["<builtin>.list", "<builtin>.RuntimeError", "framework.ops.tensor_id", "util.nest.flatten", "eager.context.executing_eagerly", "framework.auto_control_deps.op_is_stateful", "framework.ops.get_default_graph", "framework.auto_control_deps._get_resource_inputs", "<builtin>.hasattr", "ops.control_flow_ops.no_op", "<builtin>.set", "ops.control_flow_util.IsInWhileLoop", "<builtin>.tuple", "framework.auto_control_deps.collective_manager_ids_from_op", "attr_value_pb2.AttrValue.ListValue", "framework.attr_value_pb2.AttrValue", "<builtin>.any", "collections.defaultdict", "<builtin>.enumerate", "framework.auto_control_deps.AutomaticControlDependencies._process_switch", "framework.op_def_registry.get"], "ops.control_flow_util.IsInWhileLoop": ["ops.control_flow_util.GetContainingWhileContext"], "framework.auto_control_deps._get_resource_inputs": ["framework.auto_control_deps_utils.get_read_write_resource_inputs"], "attr_value_pb2.AttrValue.ListValue": [], "framework.registry.Registry": [], "framework.auto_control_deps.automatic_control_dependencies": ["util.tf_decorator.make_decorator"], "framework.auto_control_deps.automatic_control_dependencies.wrapper": ["util.nest.flatten", "util.nest.pack_sequence_as", "framework.auto_control_deps.AutomaticControlDependencies.__init__"], "framework.auto_control_deps_utils": ["<builtin>.set"], "framework.auto_control_deps_utils.register_read_only_resource_op": [], "framework.auto_control_deps_utils.get_read_only_resource_input_indices_graph": ["util.object_identity.ObjectIdentitySet", "<builtin>.enumerate", "framework.auto_control_deps_utils._get_read_only_resource_input_indices_op"], "framework.auto_control_deps_utils._get_read_only_resource_input_indices_op": ["<builtin>.len", "<builtin>.enumerate"], "framework.auto_control_deps_utils._op_writes_to_resource": ["framework.auto_control_deps_utils._input_index"], "framework.auto_control_deps_utils._input_index": ["<builtin>.str", "<builtin>.enumerate", "<builtin>.ValueError"], "framework.combinations": ["functools.partial", "util.tf_export.tf_export", "test_combinations.TestCombination.__init__"], "framework.combinations.EagerGraphCombination.context_managers": ["eager.context.eager_mode", "eager.context.graph_mode", "framework.ops.Graph", "<builtin>.ValueError"], "framework.combinations.EagerGraphCombination.parameter_modifiers": ["framework.test_combinations.OptionalParameter"], "framework.combinations.TFVersionCombination.should_execute_combination": ["python.tf2.enabled"], "framework.combinations.TFVersionCombination.parameter_modifiers": ["framework.test_combinations.OptionalParameter"], "framework.common_shapes": [], "framework.common_shapes._broadcast_shape_helper": ["<builtin>.reversed", "framework.tensor_shape.Dimension", "six.moves.zip_longest", "<builtin>.list"], "six.moves.zip_longest": [], "framework.common_shapes.is_broadcast_compatible": ["framework.common_shapes._broadcast_shape_helper"], "framework.composite_tensor": ["util._pywrap_utils.RegisterType"], "framework.composite_tensor.CompositeTensor": ["abc.abstractproperty"], "framework.composite_tensor.CompositeTensor._type_spec": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.composite_tensor.CompositeTensor._shape_invariant_to_type_spec": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.composite_tensor.CompositeTensor._consumers": ["<builtin>.list", "util.nest.flatten", "<builtin>.getattr", "<builtin>.set"], "framework.config": ["util.deprecation.deprecated_endpoints", "util.deprecation.deprecated", "util.deprecation.deprecated_arg_values", "util.tf_export.tf_export"], "framework.config.tensor_float_32_execution_enabled": ["util._pywrap_tensor_float_32_execution.is_enabled"], "util._pywrap_tensor_float_32_execution.is_enabled": [], "framework.config.enable_tensor_float_32_execution": ["util._pywrap_tensor_float_32_execution.enable"], "util._pywrap_tensor_float_32_execution.enable": [], "framework.config.get_intra_op_parallelism_threads": ["eager.context.context"], "framework.config.set_intra_op_parallelism_threads": ["eager.context.context"], "framework.config.get_inter_op_parallelism_threads": ["eager.context.context"], "framework.config.set_inter_op_parallelism_threads": ["eager.context.context"], "framework.config.get_optimizer_jit": ["eager.context.context"], "util.deprecation.deprecated_arg_values": ["util.deprecation._validate_deprecation_args", "<builtin>.ValueError"], "framework.config.set_optimizer_jit": ["eager.context.context"], "framework.config.get_optimizer_experimental_options": ["eager.context.context"], "framework.config.set_optimizer_experimental_options": ["eager.context.context"], "framework.config.get_soft_device_placement": ["eager.context.context"], "framework.config.set_soft_device_placement": ["eager.context.context"], "framework.config.get_device_policy": ["eager.context.context", "framework.errors.InternalError"], "framework.config.set_device_policy": ["eager.context.context", "<builtin>.ValueError"], "framework.config.get_synchronous_execution": ["eager.context.context"], "framework.config.set_synchronous_execution": ["eager.context.context"], "util.deprecation.deprecated_endpoints": [], "framework.config.get_visible_devices": ["eager.context.context"], "framework.config.set_visible_devices": ["eager.context.context"], "framework.config.get_memory_info": ["eager.context.context"], "framework.config.reset_memory_stats": ["eager.context.context"], "framework.config.get_memory_usage": ["framework.config.get_memory_info"], "framework.config.get_memory_growth": ["eager.context.context"], "framework.config.set_memory_growth": ["eager.context.context"], "framework.config.get_logical_device_configuration": ["eager.context.context"], "framework.config.set_logical_device_configuration": ["eager.context.context"], "framework.config.enable_mlir_bridge": ["eager.context.context"], "framework.config.enable_mlir_graph_optimization": ["eager.context.context"], "framework.config.disable_mlir_bridge": ["eager.context.context"], "framework.config.disable_mlir_graph_optimization": ["eager.context.context"], "framework.config.enable_deterministic_ops": ["util._pywrap_determinism.enable"], "util._pywrap_determinism.enable": [], "framework.config.deterministic_ops_enabled": ["util._pywrap_determinism.is_enabled"], "util._pywrap_determinism.is_enabled": [], "framework.constant_op": ["framework.ops.register_tensor_conversion_function", "util.tf_export.tf_export"], "framework.constant_op._eager_reshape": ["eager.execute.execute", "eager.execute.args_to_matching_eager"], "framework.constant_op._eager_fill": ["framework.constant_op.convert_to_eager_tensor", "eager.execute.execute"], "framework.constant_op.convert_to_eager_tensor": ["framework.dtypes.as_dtype", "framework.ops.EagerTensor", "<builtin>.TypeError", "<builtin>.isinstance"], "framework.constant_op._eager_identity": ["eager.execute.execute"], "framework.constant_op._eager_const": ["eager.execute.execute"], "framework.ops.EagerTensor": [], "framework.constant_op.constant_v1": ["framework.constant_op._constant_impl"], "framework.constant_op._constant_impl": ["framework.op_callbacks.should_invoke_op_callbacks", "framework.attr_value_pb2.AttrValue", "framework.tensor_util.make_tensor_proto", "eager.context.context", "framework.constant_op._constant_eager_impl", "profiler.trace.Trace", "framework.ops.get_default_graph", "<builtin>.tuple", "framework.op_callbacks.invoke_op_callbacks"], "framework.constant_op._constant_eager_impl": ["framework.constant_op._eager_identity", "framework.tensor_shape.as_shape", "framework.constant_op._eager_reshape", "<builtin>.TypeError", "framework.constant_op._eager_fill", "framework.ops.device", "framework.constant_op.convert_to_eager_tensor", "<builtin>.tuple"], "framework.constant_op.is_constant": ["<builtin>.isinstance"], "framework.constant_op._constant_tensor_conversion_function": ["framework.constant_op.constant"], "framework.constant_op._tensor_shape_tensor_conversion_function": ["<builtin>.ValueError", "framework.constant_op.constant", "<builtin>.TypeError"], "framework.constant_op._dimension_tensor_conversion_function": ["<builtin>.ValueError", "framework.constant_op.constant", "<builtin>.TypeError"], "framework.convert_to_constants": ["<builtin>.set", "<builtin>.globals", "util.lazy_loader.LazyLoader"], "framework.convert_to_constants._TensorData.dtype_attr": ["framework.attr_value_pb2.AttrValue"], "framework.convert_to_constants._EndPoint.__str__": [], "framework.convert_to_constants._Edge.__str__": [], "framework.convert_to_constants._Convertible.__init__": [], "framework.convert_to_constants._Convertible.converted_self": ["<builtin>.NotImplementedError"], "framework.convert_to_constants._Convertible.convert_variable_to_constant": ["<builtin>.NotImplementedError"], "framework.convert_to_constants._Convertible.create_edges": ["<builtin>.NotImplementedError"], "framework.convert_to_constants._Convertible.add_outgoing_edge": [], "framework.convert_to_constants._Convertible.converted_enclosing_graph": [], "framework.convert_to_constants._Convertible.outgoing_edges": [], "framework.convert_to_constants._Function.__init__": ["<builtin>.super", "framework.convert_to_constants._Node.new"], "framework.convert_to_constants._Node.new": ["framework.convert_to_constants._Node.__init__", "framework.convert_to_constants._PartitionedCall.__init__", "framework.convert_to_constants._Case.__init__", "framework.convert_to_constants._If.__init__", "framework.convert_to_constants._While.__init__"], "framework.convert_to_constants._Function.__str__": [], "framework.convert_to_constants._Function.function": [], "framework.convert_to_constants._Function.nodes": [], "framework.convert_to_constants._Function.converted_self": [], "framework.convert_to_constants._Function.convert_variable_to_constant": ["framework.convert_to_constants._Function.converted_self"], "framework.convert_to_constants._Function.create_edges": [], "framework.convert_to_constants._Node.__init__": ["<builtin>.super"], "framework.convert_to_constants._Node.__str__": [], "framework.convert_to_constants._Case.__init__": ["<builtin>.super"], "framework.convert_to_constants._PartitionedCall.__init__": ["<builtin>.super"], "framework.convert_to_constants._If.__init__": ["<builtin>.super"], "framework.convert_to_constants._While.__init__": ["<builtin>.super"], "framework.convert_to_constants._Node.node": [], "framework.convert_to_constants._Node.container": [], "framework.convert_to_constants._Node.converted_self": [], "framework.convert_to_constants._Node.convert_variable_to_constant": [], "framework.convert_to_constants._Node.create_edges": ["<builtin>.enumerate", "framework.convert_to_constants._Node.resolve_input"], "framework.convert_to_constants._Node.resolve_input": ["<builtin>.len", "<builtin>.int"], "framework.convert_to_constants._Node.update_dtype": ["<builtin>.len", "<builtin>.ValueError"], "framework.convert_to_constants._Intermediate.convert_variable_to_constant": ["framework.convert_to_constants._Node.converted_self"], "framework.convert_to_constants._Merge.convert_variable_to_constant": ["<builtin>.super"], "framework.convert_to_constants._VarHandle.convert_variable_to_constant": ["framework.convert_to_constants._Node.converted_self", "framework.tensor_util.make_tensor_proto"], "framework.convert_to_constants._ResourceGather.convert_variable_to_constant": ["framework.convert_to_constants._Node.converted_self", "<builtin>.ValueError", "framework.tensor_util.make_tensor_proto", "numpy.array"], "framework.convert_to_constants._ResourceGatherNd.convert_variable_to_constant": ["framework.convert_to_constants._Node.converted_self"], "framework.convert_to_constants._ReadVariable.convert_variable_to_constant": ["<builtin>.isinstance", "framework.convert_to_constants._Node.converted_self", "<builtin>.len"], "framework.convert_to_constants._FunctionCaller.__init__": ["<builtin>.super"], "framework.convert_to_constants._FunctionCaller.converted_self": ["<builtin>.super"], "framework.convert_to_constants._FunctionCaller.convert_variable_to_constant": ["<builtin>.isinstance", "framework.convert_to_constants._FunctionCaller.converted_self"], "framework.convert_to_constants._FunctionCaller.create_edges": ["<builtin>.super", "<builtin>.len", "<builtin>.range", "framework.convert_to_constants._Convertible.add_outgoing_edge"], "framework.convert_to_constants._While.convert_variable_to_constant": ["<builtin>.super", "tensor_shape_pb2.TensorShapeProto.Dim", "framework.tensor_shape_pb2.TensorShapeProto", "framework.convert_to_constants._FunctionCaller.converted_self"], "tensor_shape_pb2.TensorShapeProto.Dim": [], "framework.tensor_shape_pb2.TensorShapeProto": [], "framework.convert_to_constants._GraphDef.__init__": ["<builtin>.super", "framework.convert_to_constants._Function.__init__", "framework.convert_to_constants._GraphDef.create_edges", "framework.convert_to_constants._Node.new"], "framework.convert_to_constants._GraphDef.create_edges": [], "framework.convert_to_constants._GraphDef.graph_def": [], "framework.convert_to_constants._GraphDef.nodes": [], "framework.convert_to_constants._GraphDef.functions": [], "framework.convert_to_constants._GraphDef.converted_function_names": ["<builtin>.len", "framework.ops.uid", "<builtin>.sorted", "<builtin>.int"], "framework.convert_to_constants._GraphDef.rename_function": [], "framework.convert_to_constants._GraphDef.converted_self": ["framework.convert_to_constants._GraphDef.__init__", "framework.graph_pb2.GraphDef"], "framework.convert_to_constants._ConverterData.__init__": ["framework.convert_to_constants._ConverterData._build_node_defs_list"], "framework.convert_to_constants._ConverterData._build_node_defs_list": [], "framework.convert_to_constants._ConverterData.graph_def": [], "framework.convert_to_constants._ConverterData.node_defs": [], "framework.convert_to_constants._ConverterData.tensor_data": [], "framework.convert_to_constants._ConverterData._should_convert": [], "framework.convert_to_constants._FunctionConverterData.__init__": ["framework.convert_to_constants._run_inline_graph_optimization", "framework.convert_to_constants._FunctionConverterData._build_tensor_data", "<builtin>.super"], "framework.convert_to_constants._run_inline_graph_optimization": ["framework.variable_pb2.VariableDef", "framework.convert_to_constants.disable_lower_using_switch_merge", "grappler.tf_optimizer.OptimizeGraph", "protobuf.meta_graph_pb2.CollectionDef", "training.saver.export_meta_graph", "protobuf.config_pb2.ConfigProto"], "framework.convert_to_constants._FunctionConverterData._build_tensor_data": ["framework.dtypes.as_dtype", "framework.convert_to_constants._FunctionConverterDataInEager._eval", "platform.tf_logging.vlog", "numpy.array", "ops.array_ops.identity", "framework.convert_to_constants._FunctionConverterData._eval", "framework.convert_to_constants._FunctionConverterDataInGraph._eval", "<builtin>.enumerate", "framework.convert_to_constants._ConverterData._should_convert"], "framework.convert_to_constants._FunctionConverterData._eval": ["framework.errors.UnimplementedError"], "framework.errors.UnimplementedError": [], "framework.convert_to_constants._FunctionConverterDataInGraph._eval": [], "framework.convert_to_constants._FunctionConverterDataInEager._eval": [], "framework.convert_to_constants._FunctionConverterDataInGraph.__init__": ["framework.ops.get_default_graph", "<builtin>.super", "ops.variables.global_variables_initializer"], "ops.variables.global_variables_initializer": ["ops.control_flow_ops.no_op", "ops.variables.variables_initializer", "ops.variables.global_variables", "eager.context.executing_eagerly"], "framework.convert_to_constants._SessionConverterData.__init__": ["<builtin>.super", "framework.graph_util.extract_sub_graph", "<builtin>.zip", "framework.convert_to_constants._ConverterData._should_convert"], "framework.graph_util.extract_sub_graph": [], "framework.convert_to_constants.disable_lower_using_switch_merge.disable_control_flow_lowering": [], "framework.variable_pb2.VariableDef": [], "framework.convert_to_constants._construct_concrete_function": ["util.object_identity.ObjectIdentitySet", "eager.context.context"], "framework.convert_to_constants._replace_variables_by_constants": ["framework.convert_to_constants._GraphDef.__init__", "framework.convert_to_constants._GraphDef.converted_self"], "framework.convert_to_constants.convert_var_to_const_function_in_v1": ["<builtin>.RuntimeError", "framework.convert_to_constants._construct_concrete_function", "framework.convert_to_constants._replace_variables_by_constants", "framework.ops.get_default_session", "framework.convert_to_constants._FunctionConverterDataInGraph.__init__"], "framework.ops.get_default_session": ["framework.ops._DefaultStack.get_default", "framework.ops._DefaultGraphStack.get_default"], "framework.convert_to_constants.convert_variables_to_constants_from_session_graph": ["framework.dtypes.as_dtype", "framework.convert_to_constants._replace_variables_by_constants", "<builtin>.zip", "framework.convert_to_constants._SessionConverterData.__init__"], "framework.c_api_util": ["util.tf_contextlib.contextmanager"], "framework.c_api_util.ScopedTFStatus.__init__": ["client.pywrap_tf_session.TF_NewStatus"], "client.pywrap_tf_session.TF_NewStatus": [], "framework.c_api_util.ScopedTFStatus.__del__": ["client.pywrap_tf_session.TF_DeleteStatus"], "client.pywrap_tf_session.TF_DeleteStatus": [], "framework.c_api_util.ScopedTFGraph.__init__": ["client.pywrap_tf_session.TF_NewGraph"], "client.pywrap_tf_session.TF_NewGraph": [], "framework.c_api_util.ScopedTFGraph.__del__": ["client.pywrap_tf_session.TF_DeleteGraph"], "client.pywrap_tf_session.TF_DeleteGraph": [], "framework.c_api_util.ScopedTFImportGraphDefOptions.__init__": ["client.pywrap_tf_session.TF_NewImportGraphDefOptions"], "client.pywrap_tf_session.TF_NewImportGraphDefOptions": [], "framework.c_api_util.ScopedTFImportGraphDefOptions.__del__": ["client.pywrap_tf_session.TF_DeleteImportGraphDefOptions"], "client.pywrap_tf_session.TF_DeleteImportGraphDefOptions": [], "framework.c_api_util.ScopedTFImportGraphDefResults.__init__": [], "framework.c_api_util.ScopedTFImportGraphDefResults.__del__": ["client.pywrap_tf_session.TF_DeleteImportGraphDefResults"], "client.pywrap_tf_session.TF_DeleteImportGraphDefResults": [], "framework.c_api_util.ScopedTFFunction.__init__": [], "framework.c_api_util.ScopedTFFunction.has_been_garbage_collected": [], "framework.c_api_util.ScopedTFFunction.__del__": ["client.pywrap_tf_session.TF_DeleteFunction"], "client.pywrap_tf_session.TF_DeleteFunction": [], "framework.c_api_util.ScopedTFBuffer.__init__": ["client.pywrap_tf_session.TF_NewBufferFromString", "util.compat.as_bytes"], "framework.c_api_util.ScopedTFBuffer.__del__": ["client.pywrap_tf_session.TF_DeleteBuffer"], "framework.c_api_util.ApiDefMap.__init__": ["framework.op_def_pb2.OpList", "client.pywrap_tf_session.TF_GetBuffer", "client.pywrap_tf_session.TF_GetAllOpList", "client.pywrap_tf_session.TF_NewApiDefMap", "client.pywrap_tf_session.TF_DeleteBuffer"], "framework.op_def_pb2.OpList": [], "client.pywrap_tf_session.TF_GetAllOpList": [], "client.pywrap_tf_session.TF_NewApiDefMap": [], "framework.c_api_util.ApiDefMap.__del__": ["client.pywrap_tf_session.TF_DeleteApiDefMap"], "client.pywrap_tf_session.TF_DeleteApiDefMap": [], "framework.c_api_util.ApiDefMap.put_api_def": ["client.pywrap_tf_session.TF_ApiDefMapPut", "<builtin>.len"], "client.pywrap_tf_session.TF_ApiDefMapPut": [], "framework.c_api_util.ApiDefMap.get_api_def": ["<builtin>.len", "client.pywrap_tf_session.TF_GetBuffer", "client.pywrap_tf_session.TF_ApiDefMapGet", "framework.api_def_pb2.ApiDef", "client.pywrap_tf_session.TF_DeleteBuffer"], "framework.api_def_pb2.ApiDef": [], "client.pywrap_tf_session.TF_ApiDefMapGet": [], "framework.c_api_util.ApiDefMap.get_op_def": ["<builtin>.ValueError"], "framework.c_api_util.ApiDefMap.op_names": [], "framework.c_api_util.tf_output": ["client.pywrap_tf_session.TF_Output"], "client.pywrap_tf_session.TF_Output": [], "framework.c_api_util.tf_operations": ["client.pywrap_tf_session.TF_GraphNextOperation"], "client.pywrap_tf_session.TF_GraphNextOperation": [], "framework.c_api_util.new_tf_operations": ["framework.c_api_util.tf_operations"], "framework.device": ["python.tf2.enabled", "threading.RLock"], "framework.device.check_valid": ["device_spec.DeviceSpecV2.from_string", "device_spec.DeviceSpecV1.from_string"], "device_spec.DeviceSpecV1.from_string": [], "framework.device.MergeDevice.__init__": ["device_spec.DeviceSpecV2.from_string", "<builtin>.isinstance", "device_spec.DeviceSpecV1.from_string"], "framework.device.MergeDevice.__call__": ["device_spec.DeviceSpecV2.from_string", "device_spec.DeviceSpecV1.from_string"], "framework.device.MergeDevice.shortcut_string_merge": ["framework.device.MergeDevice.__call__"], "framework.device.MergeDevice.__repr__": ["<builtin>.super"], "framework.device.MergeDevice.is_null_merge": ["<builtin>.bool"], "framework.device_spec": ["<builtin>.frozenset"], "framework.device_spec._as_str_or_none": ["<builtin>.str"], "framework.device_spec._as_int_or_none": ["<builtin>.int"], "framework.device_spec._as_device_str_or_none": ["framework.device_spec._as_str_or_none"], "framework.device_spec.DeviceSpecV2.__init__": ["framework.device_spec._as_int_or_none", "framework.device_spec.DeviceSpecV2.to_string", "framework.device_spec._as_device_str_or_none", "<builtin>.hash", "framework.device_spec._as_str_or_none", "framework.device_spec.DeviceSpecV2._components_to_string"], "framework.device_spec.DeviceSpecV2._components_to_string": ["<builtin>.str"], "framework.device_spec.DeviceSpecV2.to_string": [], "framework.device_spec.DeviceSpecV2.from_string": ["framework.device_spec.DeviceSpecV2._string_to_components", "framework.device_spec.DeviceSpecV2.__init__"], "framework.device_spec.DeviceSpecV2._string_to_components": ["framework.device_spec.DeviceSpecV2._get_valid_device_types", "<builtin>.len", "<builtin>.int", "<builtin>.ValueError"], "framework.device_spec.DeviceSpecV2.parse_from_string": ["framework.device_spec.DeviceSpecV2.from_string"], "framework.device_spec.DeviceSpecV2.make_merged_spec": ["framework.device_spec.DeviceSpecV2._get_combined_properties"], "framework.device_spec.DeviceSpecV2._get_combined_properties": [], "framework.device_spec.DeviceSpecV2.replace": ["<builtin>.dict"], "framework.device_spec.DeviceSpecV2.job": [], "framework.device_spec.DeviceSpecV2.replica": [], "framework.device_spec.DeviceSpecV2.task": [], "framework.device_spec.DeviceSpecV2.device_type": [], "framework.device_spec.DeviceSpecV2.device_index": [], "framework.device_spec.DeviceSpecV2._get_valid_device_types": ["<builtin>.set", "python.pywrap_tfe.TF_ListPluggablePhysicalDevices"], "python.pywrap_tfe.TF_ListPluggablePhysicalDevices": [], "framework.device_spec.DeviceSpecV2.__eq__": ["framework.device_spec.DeviceSpecV2.to_string", "<builtin>.isinstance"], "framework.device_spec.DeviceSpecV2.__hash__": [], "framework.device_spec.DeviceSpecV1.job": ["framework.device_spec._as_str_or_none"], "framework.device_spec.DeviceSpecV1.replica": ["framework.device_spec._as_int_or_none"], "framework.device_spec.DeviceSpecV1.task": ["framework.device_spec._as_int_or_none"], "framework.device_spec.DeviceSpecV1.device_type": ["framework.device_spec._as_device_str_or_none"], "framework.device_spec.DeviceSpecV1.device_index": ["framework.device_spec._as_int_or_none"], "framework.device_spec.DeviceSpecV1.__hash__": ["framework.device_spec.DeviceSpecV1.to_string", "<builtin>.hash"], "framework.device_spec.DeviceSpecV1.to_string": ["framework.device_spec.DeviceSpecV2._components_to_string"], "framework.device_spec.DeviceSpecV1.parse_from_string": ["framework.device_spec.DeviceSpecV2._string_to_components"], "framework.device_spec.DeviceSpecV1.merge_from": ["framework.device_spec.DeviceSpecV2._get_combined_properties"], "framework.dtypes": ["numpy.dtype", "_dtypes.DType.__init__", "util.tf_export.tf_export", "types.doc_typealias.document", "<builtin>.frozenset", "<builtin>.len", "<builtin>.next", "core._pywrap_bfloat16.TF_bfloat16_type", "<builtin>.set", "<builtin>.sum"], "core._pywrap_bfloat16.TF_bfloat16_type": [], "framework.dtypes.DType._is_ref_dtype": [], "framework.dtypes.DType._as_ref": [], "framework.dtypes.DType.base_dtype": [], "framework.dtypes.DType.real_dtype": [], "framework.dtypes.DType.as_numpy_dtype": [], "framework.dtypes.DType.min": ["<builtin>.TypeError", "numpy.finfo", "numpy.iinfo"], "framework.dtypes.DType.max": ["<builtin>.TypeError", "numpy.finfo", "numpy.iinfo"], "framework.dtypes.DType.limits": [], "framework.dtypes.DType.is_compatible_with": ["framework.dtypes.as_dtype"], "framework.dtypes.DType.__eq__": ["framework.dtypes.as_dtype", "<builtin>.type"], "framework.dtypes.DType.__ne__": ["framework.dtypes.DType.__eq__"], "framework.dtypes.DType.__reduce__": [], "_dtypes.DType.__init__": [], "types.doc_typealias.document": ["<builtin>.id"], "framework.errors": [], "framework.errors_impl": ["util.tf_export.tf_export", "python._pywrap_py_exception_registry.PyExceptionRegistry_Init"], "framework.errors_impl.OpError.__init__": ["<builtin>.super"], "framework.errors_impl.OpError.__reduce__": ["<builtin>.getattr", "util.tf_inspect.getargspec", "<builtin>.tuple"], "framework.errors_impl.OpError.message": [], "framework.errors_impl.OpError.op": [], "framework.errors_impl.OpError.error_code": [], "framework.errors_impl.OpError.node_def": [], "framework.errors_impl.OpError.experimental_payloads": [], "framework.errors_impl.OpError.__str__": ["traceback.format_list", "<builtin>.zip"], "framework.errors_impl.CancelledError.__init__": ["<builtin>.super"], "framework.errors_impl.UnknownError.__init__": ["<builtin>.super"], "framework.errors_impl.InvalidArgumentError.__init__": ["<builtin>.super"], "framework.errors_impl.DeadlineExceededError.__init__": ["<builtin>.super"], "framework.errors_impl.NotFoundError.__init__": ["<builtin>.super"], "framework.errors_impl.AlreadyExistsError.__init__": ["<builtin>.super"], "framework.errors_impl.PermissionDeniedError.__init__": ["<builtin>.super"], "framework.errors_impl.UnauthenticatedError.__init__": ["<builtin>.super"], "framework.errors_impl.ResourceExhaustedError.__init__": ["<builtin>.super"], "framework.errors_impl.FailedPreconditionError.__init__": ["<builtin>.super"], "framework.errors_impl.AbortedError.__init__": ["<builtin>.super"], "framework.errors_impl.OutOfRangeError.__init__": ["<builtin>.super"], "framework.errors_impl.UnimplementedError.__init__": ["<builtin>.super"], "framework.errors_impl.InternalError.__init__": ["<builtin>.super"], "framework.errors_impl.UnavailableError.__init__": ["<builtin>.super"], "framework.errors_impl.DataLossError.__init__": ["<builtin>.super"], "python._pywrap_py_exception_registry.PyExceptionRegistry_Init": [], "framework.errors_impl.exception_type_from_error_code": [], "framework.errors_impl.error_code_from_exception_type": ["warnings.warn", "framework.errors_impl.UnknownError.__init__"], "framework.errors_impl._make_specific_exception": ["warnings.warn", "framework.errors_impl.UnknownError.__init__", "framework.errors_impl.exception_type_from_error_code"], "framework.errors_impl.raise_exception_on_not_ok_status.__enter__": ["framework.c_api_util.ScopedTFStatus"], "framework.c_api_util.ScopedTFStatus": [], "framework.errors_impl.raise_exception_on_not_ok_status.__exit__": ["framework.errors_impl.UnknownError.__init__", "util.compat.as_text", "client.pywrap_tf_session.TF_GetCode", "client.pywrap_tf_session.TF_Message", "framework.errors_impl._make_specific_exception"], "client.pywrap_tf_session.TF_GetCode": [], "client.pywrap_tf_session.TF_Message": [], "framework.error_interpolation": ["site.getusersitepackages", "collections.namedtuple", "site.getsitepackages", "re.compile", "os.path.join", "os.path.dirname"], "site.getsitepackages": [], "site.getusersitepackages": [], "framework.error_interpolation._compute_device_summary_from_list": [], "framework.error_interpolation._compute_device_assignment_summary_from_op": ["framework.error_interpolation._compute_device_summary_from_list"], "framework.error_interpolation._compute_colocation_summary_from_dict": [], "framework.error_interpolation._compute_colocation_summary_from_op": ["framework.error_interpolation._compute_colocation_summary_from_dict"], "framework.error_interpolation._is_framework_filename": [], "framework.error_interpolation._find_index_of_defining_frame": ["framework.error_interpolation._is_framework_filename", "<builtin>.len", "<builtin>.reversed", "<builtin>.enumerate"], "framework.error_interpolation._compute_useful_frames": ["framework.error_interpolation._find_index_of_defining_frame", "<builtin>.len", "<builtin>.max", "<builtin>.min"], "framework.error_interpolation._compute_field_dict": ["traceback.format_list", "framework.error_interpolation._compute_device_assignment_summary_from_op", "framework.error_interpolation._compute_colocation_summary_from_op"], "framework.error_interpolation._get_input_ops_for_op": ["<builtin>.enumerate"], "framework.error_interpolation._build_error_message": ["framework.error_interpolation._compute_field_dict", "<builtin>.set"], "framework.extension_type": [], "framework.extension_type._create_object_from_type_and_dict": [], "framework.extension_type.ExtensionTypeMetaclass.__init__": ["framework.extension_type._add_extension_type_constructor", "framework.extension_type._check_field_annotations", "<builtin>.super", "framework.extension_type._add_type_spec"], "framework.extension_type._check_field_annotations": ["<builtin>.isinstance", "<builtin>.getattr", "ABCMeta.__dict__.items", "<builtin>.callable", "<builtin>.ValueError", "extension_type_field.ExtensionTypeField.is_reserved_name"], "framework.extension_type._add_extension_type_constructor": ["framework.extension_type._build_extension_type_constructor", "framework.extension_type._wrap_user_constructor"], "framework.extension_type._add_type_spec": ["<builtin>.type", "<builtin>.setattr", "framework.extension_type._build_spec_constructor", "framework.type_spec.register"], "framework.extension_type.ExtensionType.__init__": ["<builtin>.type", "<builtin>.AssertionError"], "framework.extension_type.ExtensionType._tf_extension_type_fields": ["typing.get_type_hints", "<builtin>.getattr", "framework.extension_type_field.ExtensionTypeField", "<builtin>.reversed", "<builtin>.tuple"], "typing.get_type_hints": [], "framework.extension_type_field.ExtensionTypeField": ["framework.extension_type_field.Sentinel.__init__"], "framework.extension_type.ExtensionType._tf_extension_type_has_field": ["<builtin>.any", "framework.extension_type.ExtensionType._tf_extension_type_fields"], "framework.extension_type.ExtensionType._tf_extension_type_convert_fields": ["framework.extension_type_field.convert_fields", "framework.extension_type.ExtensionType._tf_extension_type_fields"], "framework.extension_type_field.convert_fields": ["framework.extension_type_field._convert_fields"], "framework.extension_type.ExtensionType.__repr__": ["<builtin>.getattr", "<builtin>.type", "framework.extension_type.ExtensionType._tf_extension_type_fields"], "framework.extension_type.ExtensionType.__setattr__": ["framework.extension_type.ExtensionType._tf_extension_type_has_field", "<builtin>.AttributeError", "<builtin>.hasattr"], "framework.extension_type.ExtensionType.__delattr__": ["framework.extension_type.ExtensionType._tf_extension_type_has_field", "<builtin>.AttributeError", "<builtin>.hasattr"], "framework.extension_type.ExtensionType.__getattr__": ["framework.extension_type.unpack", "<builtin>.type", "<builtin>.AttributeError", "<builtin>.getattr"], "framework.extension_type.unpack": ["framework.extension_type.is_packed", "ops.composite_tensor_ops.composite_tensor_from_variant"], "framework.extension_type.ExtensionType.__eq__": ["ops.array_ops.shape", "<builtin>.zip", "<builtin>.len", "<builtin>.type", "ops.gen_math_ops.equal", "ops.math_ops.reduce_all", "ops.array_ops.stack", "util.nest.flatten"], "framework.extension_type.ExtensionType.__ne__": ["framework.extension_type.ExtensionType.__eq__", "<builtin>.isinstance", "ops.math_ops.logical_not"], "framework.extension_type.ExtensionType.__validate__": [], "framework.extension_type.ExtensionType._type_spec": ["framework.extension_type.is_packed", "CompositeTensor.Spec.from_value"], "framework.extension_type.is_packed": ["<builtin>.ValueError", "<builtin>.isinstance"], "CompositeTensor.Spec.from_value": [], "framework.extension_type.pack": ["ops.composite_tensor_ops.composite_tensor_to_variants", "framework.extension_type.is_packed", "<builtin>.type", "framework.extension_type._create_object_from_type_and_dict", "<builtin>.ValueError"], "ops.composite_tensor_ops.composite_tensor_to_variants": ["<builtin>.isinstance", "<builtin>.ValueError", "saved_model.nested_structure_coder.StructureCoder", "ops.gen_composite_tensor_ops.CompositeTensorVariantFromComponents", "<builtin>.TypeError", "util.nest.flatten", "protobuf.composite_tensor_variant_pb2.CompositeTensorVariantMetadata"], "ops.composite_tensor_ops.composite_tensor_from_variant": ["util.nest.pack_sequence_as", "<builtin>.isinstance", "saved_model.nested_structure_coder.StructureCoder", "<builtin>.TypeError", "ops.gen_composite_tensor_ops.CompositeTensorVariantToComponents", "util.nest.flatten", "protobuf.composite_tensor_variant_pb2.CompositeTensorVariantMetadata"], "framework.extension_type.ExtensionTypeSpec._serialize": ["framework.extension_type.ExtensionTypeSpec._tf_extension_type_fields", "framework.extension_type._change_nested_mappings_to", "<builtin>.tuple"], "framework.extension_type.ExtensionTypeSpec._tf_extension_type_fields": ["TypeSpec.value_type._tf_extension_type_fields"], "framework.extension_type._change_nested_mappings_to": ["<builtin>.tuple", "framework.extension_type._change_nested_mappings_to", "<builtin>.isinstance", "framework.immutable_dict.ImmutableDict"], "framework.extension_type.ExtensionTypeSpec._deserialize": ["framework.extension_type._create_object_from_type_and_dict", "framework.extension_type._change_nested_mappings_to"], "framework.extension_type.ExtensionTypeSpec._to_components": ["util.nest.flatten", "<builtin>.isinstance", "<builtin>.tuple"], "framework.extension_type.ExtensionTypeSpec._from_components": ["util.nest.pack_sequence_as", "<builtin>.dict", "<builtin>.isinstance", "<builtin>.next", "<builtin>.zip", "TypeSpec.__dict__.keys", "framework.extension_type._create_object_from_type_and_dict", "<builtin>.iter", "<builtin>.ValueError", "<builtin>.list", "util.nest.flatten", "TypeSpec.__dict__.values", "<builtin>.tuple"], "TypeSpec.__dict__.values": [], "TypeSpec.__dict__.keys": [], "framework.extension_type.ExtensionTypeSpec._component_specs": ["framework.tensor_spec.TensorSpec", "util.nest.map_structure", "TypeSpec.__dict__.values", "<builtin>.tuple"], "framework.extension_type.ExtensionTypeSpec._component_specs.push_if_type_spec": ["<builtin>.isinstance"], "framework.extension_type.ExtensionTypeSpec.from_value": ["<builtin>.getattr", "util.nest.map_structure", "framework.extension_type._create_object_from_type_and_dict"], "framework.extension_type.ExtensionTypeSpec.__setattr__": ["<builtin>.AttributeError", "framework.extension_type.ExtensionTypeSpec._tf_extension_type_has_field", "<builtin>.hasattr"], "framework.extension_type.ExtensionTypeSpec._tf_extension_type_has_field": ["framework.extension_type.ExtensionTypeSpec._tf_extension_type_fields", "<builtin>.any"], "framework.extension_type.ExtensionTypeSpec.__delattr__": ["<builtin>.AttributeError", "framework.extension_type.ExtensionTypeSpec._tf_extension_type_has_field", "<builtin>.hasattr"], "framework.extension_type.ExtensionTypeSpec.__validate__": [], "TypeSpec.value_type._tf_extension_type_fields": [], "framework.extension_type.ExtensionTypeSpec._tf_extension_type_convert_fields": ["framework.extension_type.ExtensionTypeSpec._tf_extension_type_fields", "framework.extension_type_field.convert_fields_for_spec"], "framework.extension_type_field.convert_fields_for_spec": ["framework.extension_type_field._convert_fields"], "framework.extension_type.ExtensionTypeSpec.__repr__": ["<builtin>.type", "framework.extension_type.ExtensionTypeSpec._serialize"], "framework.extension_type.ExtensionTypeSpec._tf_extension_type_with_packed": ["<builtin>.type", "framework.extension_type._create_object_from_type_and_dict"], "framework.extension_type._replace_tensor_with_spec": ["framework.tensor_spec.TensorSpec", "<builtin>.hasattr", "<builtin>.isinstance"], "framework.immutable_dict.ImmutableDict": [], "extension_type_field.ExtensionTypeField.is_reserved_name": [], "ABCMeta.__dict__.items": [], "framework.extension_type._wrap_user_constructor": ["util.tf_decorator.make_decorator"], "framework.extension_type._build_extension_type_constructor": ["util.tf_inspect.Parameter", "util.tf_inspect.Signature", "<builtin>.ValueError", "abc.ABCMeta._tf_extension_type_fields"], "framework.extension_type._wrap_user_constructor.wrapped_init": ["framework.extension_type._build_extension_type_constructor.__init__"], "framework.extension_type._build_extension_type_constructor.__init__": [], "abc.ABCMeta._tf_extension_type_fields": [], "util.tf_inspect.Parameter": [], "util.tf_inspect.Signature": [], "framework.extension_type._build_spec_constructor": ["util.tf_inspect.Signature", "util.tf_inspect.Parameter"], "framework.extension_type._build_spec_constructor.__init__": [], "framework.extension_type.AnonymousExtensionType.__init__": ["CompositeTensor.__dict__.update", "framework.extension_type._convert_anonymous_fields", "framework.extension_type.AnonymousExtensionType._tf_extension_type_convert_fields", "<builtin>.super", "<builtin>.ValueError", "extension_type_field.ExtensionTypeField.is_reserved_name"], "framework.extension_type._convert_anonymous_fields": ["<builtin>.isinstance", "framework.extension_type._convert_anonymous_fields", "framework.immutable_dict.ImmutableDict", "<builtin>.type", "<builtin>.ValueError", "<builtin>.tuple"], "CompositeTensor.__dict__.update": [], "framework.extension_type.AnonymousExtensionType._tf_extension_type_convert_fields": ["extension_type_field.ExtensionTypeField.is_reserved_name", "CompositeTensor.__dict__.update", "CompositeTensor.__dict__.items", "framework.extension_type._convert_anonymous_fields"], "framework.extension_type.AnonymousExtensionType._tf_extension_type_fields": ["framework.extension_type_field.ExtensionTypeField", "extension_type_field.ExtensionTypeField.is_reserved_name"], "framework.extension_type.AnonymousExtensionType.__setattr__": ["<builtin>.AttributeError"], "framework.extension_type.AnonymousExtensionType.__delattr__": ["<builtin>.AttributeError"], "CompositeTensor.__dict__.items": [], "framework.extension_type.AnonymousExtensionType.__repr__": ["extension_type_field.ExtensionTypeField.is_reserved_name", "CompositeTensor.__dict__.items"], "framework.extension_type.AnonymousExtensionType._type_spec": ["framework.extension_type.ExtensionTypeSpec.from_value"], "framework.extension_type.AnonymousExtensionTypeSpec.__init__": ["framework.extension_type._convert_anonymous_fields", "<builtin>.super", "TypeSpec.__dict__.update", "<builtin>.ValueError", "extension_type_field.ExtensionTypeField.is_reserved_name"], "TypeSpec.__dict__.update": [], "framework.extension_type.AnonymousExtensionTypeSpec._serialize": ["<builtin>.tuple", "framework.extension_type._change_nested_mappings_to", "extension_type_field.ExtensionTypeField.is_reserved_name", "TypeSpec.__dict__.items"], "TypeSpec.__dict__.items": [], "framework.extension_type.AnonymousExtensionTypeSpec.__setattr__": ["<builtin>.AttributeError"], "framework.extension_type.AnonymousExtensionTypeSpec.__delattr__": ["<builtin>.AttributeError"], "framework.extension_type.reinterpret": ["<builtin>.isinstance", "<builtin>.issubclass", "framework.extension_type._create_object_from_type_and_dict", "<builtin>.ValueError", "extension_type_field.ExtensionTypeField.is_reserved_name"], "framework.extension_type_field": ["<builtin>.hasattr", "<builtin>.type"], "framework.extension_type_field.Sentinel.__init__": [], "framework.extension_type_field.Sentinel.__repr__": [], "framework.extension_type_field.ExtensionTypeField.__new__": ["framework.extension_type_field._convert_value", "<builtin>.super", "<builtin>.TypeError", "framework.extension_type_field.validate_field_value_type"], "framework.extension_type_field.validate_field_value_type": ["framework.extension_type_field.is_forward_ref", "<builtin>.len", "framework.extension_type_field.is_generic_mapping", "<builtin>.issubclass", "<builtin>.TypeError", "<builtin>.isinstance", "framework.extension_type_field.<lambda1>", "typing.get_args", "framework.extension_type_field.is_generic_tuple", "framework.extension_type_field.validate_field_value_type", "framework.extension_type_field.is_generic_union"], "framework.extension_type_field._convert_value": ["framework.extension_type_field._convert_tuple", "framework.extension_type_field._convert_union", "framework.extension_type_field._convert_tensor_spec", "<builtin>.issubclass", "framework.extension_type_field._convert_type_spec", "<builtin>.TypeError", "<builtin>.isinstance", "framework.extension_type_field._convert_composite_tensor", "framework.extension_type_field._convert_mapping", "framework.extension_type_field._convert_tensor", "framework.extension_type_field.is_generic_tuple", "framework.extension_type_field.is_generic_union", "framework.extension_type_field.is_generic_mapping"], "framework.extension_type_field.ExtensionTypeField.is_reserved_name": [], "framework.extension_type_field.is_forward_ref": ["<builtin>.hasattr", "<builtin>.isinstance"], "framework.extension_type_field.is_generic_tuple": ["<builtin>.getattr"], "framework.extension_type_field.is_generic_union": ["<builtin>.getattr"], "framework.extension_type_field.<lambda1>": [], "typing.get_args": [], "framework.extension_type_field.is_generic_mapping": ["<builtin>.getattr"], "framework.extension_type_field._convert_fields": ["framework.extension_type_field._report_field_mismatches", "framework.extension_type_field._convert_value", "<builtin>.len"], "framework.extension_type_field._report_field_mismatches": ["<builtin>.set", "<builtin>.ValueError"], "framework.extension_type_field._convert_tensor": ["framework.ops.convert_to_tensor", "<builtin>.TypeError", "<builtin>.isinstance"], "framework.extension_type_field._convert_tensor_spec": ["framework.ops.convert_to_tensor", "<builtin>.TypeError", "<builtin>.isinstance"], "framework.extension_type_field._convert_type_spec": ["<builtin>.TypeError", "<builtin>.isinstance"], "framework.extension_type_field._convert_composite_tensor": ["<builtin>.issubclass", "<builtin>.TypeError", "<builtin>.isinstance"], "framework.extension_type_field._convert_tuple": ["<builtin>.zip", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.tuple", "framework.extension_type_field.<lambda1>", "typing.get_args", "framework.extension_type_field._convert_value", "<builtin>.enumerate", "<builtin>.len"], "framework.extension_type_field._convert_mapping": ["framework.immutable_dict.ImmutableDict", "<builtin>.TypeError", "<builtin>.isinstance", "framework.extension_type_field.<lambda1>", "framework.extension_type_field._convert_value", "typing.get_args"], "framework.extension_type_field._convert_union": ["framework.extension_type_field._convert_value", "<builtin>.TypeError", "framework.extension_type_field.<lambda1>", "typing.get_args"], "framework.framework_lib": [], "framework.function": [], "framework.function.Defun.__init__": [], "framework.function.Defun.__call__": ["util.tf_inspect.ismethod", "<builtin>.callable", "<builtin>.len", "util.tf_inspect.getargspec", "<builtin>.ValueError", "framework.function._DefinedFunction.__init__", "framework.function._OverloadedFunction.__init__"], "framework.function._DefinedFunction.__init__": ["framework.ops.get_default_graph", "<builtin>.set", "<builtin>.range", "<builtin>.len", "<builtin>.isinstance"], "framework.function._OverloadedFunction.__init__": ["<builtin>.isinstance"], "framework.function._DefinedFunctionDeleter.__init__": [], "framework.function._DefinedFunctionDeleter.__del__": ["eager.context.remove_function"], "framework.function._DefinedFunction.name": ["framework.function._DefinedFunction._create_definition_if_needed"], "framework.function._DefinedFunction._create_definition_if_needed": ["framework.function._DefinedFunction._create_definition_if_needed_impl", "eager.context.graph_mode"], "framework.function._DefinedFunction.definition": ["framework.ops.init_scope", "framework.function._DefinedFunction._create_definition_if_needed", "util.compat.as_bytes", "eager.context.executing_eagerly", "client.pywrap_tf_session.TF_FunctionToFunctionDef", "eager.context.add_function", "client.pywrap_tf_session.TF_GetBuffer", "framework.c_api_util.tf_buffer", "framework.function_pb2.FunctionDef", "framework.function._DefinedFunctionDeleter.__init__"], "framework.function._DefinedFunction._signature": ["framework.function._DefinedFunction._create_definition_if_needed"], "framework.function._DefinedFunction.set_grad_func": ["<builtin>.isinstance"], "framework.function._DefinedFunction.grad_func_name": [], "framework.function._DefinedFunction.python_grad_func": [], "framework.function._DefinedFunction.declared_input_types": [], "framework.function._DefinedFunction.captured_inputs": ["framework.function._DefinedFunction._create_definition_if_needed"], "framework.function._DefinedFunction.stateful_ops": ["framework.function._DefinedFunction._create_definition_if_needed"], "framework.function._DefinedFunction._create_definition_if_needed_impl": ["framework.function._DefinedFunction._create_hash_str", "framework.function._parse_kwargs_as_attrs", "util.function_utils.get_func_name", "framework.ops.get_default_graph", "util.compat.as_bytes", "framework.c_api_util.ScopedTFFunction", "client.pywrap_tf_session.TF_GraphToFunction_wrapper", "util.compat.as_str", "ops.Graph.get_operations", "framework.function.func_graph_from_py_func", "framework.graph_to_function_def.graph_to_function_def", "framework.function._DefinedFunction._set_c_attrs"], "framework.function.func_graph_from_py_func": ["<builtin>.zip", "ops.array_ops.placeholder", "util.function_utils.get_func_name", "<builtin>.len", "framework.ops.device", "framework.function._FuncGraph.capture", "<builtin>.ValueError", "ops.variable_scope.variable_scope", "<builtin>.isinstance", "<builtin>.any", "framework.ops.convert_to_tensor", "ops.Graph.as_default", "framework.function._FuncGraph.__init__"], "util.function_utils.get_func_name": ["util.tf_inspect.ismethod", "<builtin>.callable", "util.tf_decorator.unwrap", "<builtin>.str", "util.tf_inspect.isfunction", "six.get_method_self", "<builtin>.type", "six.get_method_function", "<builtin>.ValueError"], "framework.function._parse_kwargs_as_attrs": ["framework.function._get_experimental_kwarg_as_attr", "<builtin>.list", "framework.ops.get_default_graph", "framework.function._get_kwarg_as_str_attr", "framework.attr_value_pb2.AttrValue", "<builtin>.ValueError", "<builtin>.bool"], "ops.Graph.get_operations": [], "framework.graph_to_function_def.graph_to_function_def": ["<builtin>.len", "<builtin>.ValueError", "framework.graph_to_function_def._is_in_placeholders", "<builtin>.zip", "<builtin>.set", "framework.graph_to_function_def._tensor_to_argdef", "framework.graph_to_function_def._create_input_dict", "framework.errors_impl.InvalidArgumentError", "<builtin>.enumerate", "framework.function_pb2.FunctionDef", "framework.graph_to_function_def._add_op_node"], "framework.function._DefinedFunction._create_hash_str": ["<builtin>.sorted", "framework.function._DefinedFunction._create_hash_str.update_num", "<builtin>.len", "framework.function._DefinedFunction._create_hash_str.update_str", "hashlib.sha1", "framework.function._DefinedFunction._create_hash_str.update_strs"], "framework.function._DefinedFunction._set_c_attrs": ["client.pywrap_tf_session.TF_FunctionSetAttrValueProto", "util.compat.as_str"], "framework.function._DefinedFunction._create_hash_str.update_num": ["util.compat.as_bytes"], "framework.function._DefinedFunction._create_hash_str.update_str": ["util.compat.as_bytes", "framework.function._DefinedFunction._create_hash_str.update_num", "<builtin>.len"], "framework.function._DefinedFunction._create_hash_str.update_strs": ["framework.function._DefinedFunction._create_hash_str.update_str", "framework.function._DefinedFunction._create_hash_str.update_num", "<builtin>.len"], "framework.function._DefinedFunction._create_hash_str.<lambda1>": [], "framework.function._DefinedFunction.add_to_graph": ["eager.context.executing_eagerly", "eager.context.context", "framework.function._DefinedFunction._create_definition_if_needed", "Graph._functions.values"], "Graph._functions.values": [], "framework.function._DefinedFunction.__call__": ["framework.function._DefinedFunction.add_to_graph", "<builtin>.zip", "framework.function._call", "framework.ops.get_default_graph", "<builtin>.len", "<builtin>.isinstance", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "<builtin>.setattr"], "framework.function._call": ["framework.function._parse_kwargs_as_attrs", "<builtin>.list", "framework.dtypes.DType", "framework.ops.get_default_graph", "<builtin>.len", "<builtin>.tuple", "<builtin>.ValueError"], "framework.function._OverloadedFunction.instantiate": ["framework.dtypes.DType", "framework.function._type_list_to_str", "framework.function._DefinedFunction.__init__"], "framework.function._type_list_to_str": ["<builtin>.ValueError", "<builtin>.any"], "framework.function._OverloadedFunction.__call__": ["<builtin>.type", "<builtin>.enumerate", "<builtin>.list", "framework.function._OverloadedFunction.instantiate", "<builtin>.isinstance", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "framework.function._DefinedFunction.__init__"], "framework.function._FuncGraph.__init__": ["framework.ops.get_default_graph", "<builtin>.super", "ops.variable_scope.get_variable_scope"], "framework.function._FuncGraph.outer_graph": [], "framework.function._FuncGraph": ["util.tf_contextlib.contextmanager"], "framework.function._FuncGraph.container": ["framework.ops.get_default_graph", "framework.ops.init_scope"], "framework.function._FuncGraph.getvar": ["<builtin>.isinstance", "ops.variable_scope._get_default_variable_store"], "framework.function._FuncGraph._create_op_internal": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.enumerate", "framework.function._FuncGraph.capture"], "framework.function._FuncGraph.capture": ["framework.function._FuncGraph._add_tensor_and_parents", "framework.function._FuncGraph._capture_tensor_as_extra_input"], "framework.function._FuncGraph._add_tensor_and_parents": ["framework.function._FuncGraph._add_op_and_parents"], "framework.function._FuncGraph._capture_tensor_as_extra_input": ["ops.array_ops.placeholder", "util.compat.as_bytes", "ops.array_ops.guarantee_const", "client.pywrap_tf_session.GetHandleShapeAndType", "<builtin>.isinstance", "client.pywrap_tf_session.SetHandleShapeAndType", "framework.ops.control_dependencies", "framework.function._is_guaranteed_const"], "framework.function._FuncGraph.captures": [], "client.pywrap_tf_session.GetHandleShapeAndType": [], "client.pywrap_tf_session.SetHandleShapeAndType": [], "framework.function._is_guaranteed_const": ["framework.function._is_guaranteed_const.all_inputs_const", "<builtin>.set", "framework.function._is_guaranteed_const.Work.__init__", "<builtin>.isinstance", "framework.function._is_guaranteed_const.<lambda1>"], "ops.array_ops.guarantee_const": ["ops.gen_array_ops.guarantee_const"], "framework.function._FuncGraph._add_op_and_parents": ["framework.function._FuncGraph._create_op_internal", "framework.graph_to_function_def._get_op_def", "<builtin>.zip", "framework.function._FuncGraph._add_tensor_and_parents", "<builtin>.ValueError"], "framework.graph_to_function_def._get_op_def": ["framework.op_def_registry.get"], "ops.Graph.as_default": [], "framework.function._is_guaranteed_const.Work.__init__": [], "framework.function._is_guaranteed_const.<lambda1>": [], "framework.function._is_guaranteed_const.all_inputs_const": ["<builtin>.all"], "framework.function._from_definition": ["client.pywrap_tf_session.TF_FunctionImportFunctionDef", "framework.c_api_util.ScopedTFFunction", "framework.dtypes.as_dtype", "<builtin>.tuple", "framework.function._DefinedFunction.__init__"], "client.pywrap_tf_session.TF_FunctionImportFunctionDef": [], "framework.function.from_library": ["<builtin>.ValueError", "collections.defaultdict", "framework.function._from_definition"], "framework.function.from_library.<lambda1>": [], "framework.function._get_experimental_kwarg_as_attr": ["<builtin>.type", "util.compat.as_bytes", "<builtin>.isinstance", "framework.attr_value_pb2.AttrValue", "<builtin>.ValueError"], "framework.function._get_kwarg_as_str_attr": ["<builtin>.type", "util.compat.as_bytes", "<builtin>.isinstance", "framework.attr_value_pb2.AttrValue", "<builtin>.ValueError"], "framework.function.get_extra_vars": ["framework.ops.get_default_graph", "<builtin>.isinstance"], "framework.function.get_extra_inputs": ["framework.ops.get_default_graph", "<builtin>.isinstance"], "framework.function.get_extra_args": ["framework.ops.get_default_graph", "<builtin>.isinstance"], "framework.function.function_def_from_tf_function": ["util.compat.as_bytes", "client.pywrap_tf_session.TF_FunctionToFunctionDef", "client.pywrap_tf_session.TF_GetBuffer", "framework.c_api_util.tf_buffer", "framework.function_pb2.FunctionDef"], "framework.function_def_to_graph": [], "framework.function_def_to_graph.function_def_to_graph": ["framework.function_def_to_graph.function_def_to_graph_def", "framework.ops.tensor_id", "<builtin>.enumerate", "framework.function_def_to_graph._set_handle_data", "framework.importer.import_graph_def_for_function", "<builtin>.zip", "<builtin>.len", "framework.func_graph.FuncGraph"], "framework.function_def_to_graph.function_def_to_graph_def": ["<builtin>.ValueError", "<builtin>.hasattr", "framework.function_def_to_graph._get_num_args", "framework.graph_pb2.GraphDef", "<builtin>.isinstance", "<builtin>.enumerate", "framework.ops.get_default_graph", "framework.function_def_to_graph.is_function", "framework.versions_pb2.VersionDef", "framework.function_pb2.GradientDef", "<builtin>.len", "<builtin>.set", "<builtin>.range"], "framework.importer.import_graph_def_for_function": ["framework.importer._import_graph_def_internal"], "framework.function_def_to_graph._set_handle_data": ["cpp_shape_inference_pb2.CppShapeInferenceResult.HandleShapeAndType", "ops.resource_variable_ops._set_handle_shapes_and_types", "cpp_shape_inference_pb2.CppShapeInferenceResult.HandleData", "itertools.chain", "<builtin>.zip"], "framework.function_def_to_graph.is_function": ["<builtin>.hasattr", "eager.context.executing_eagerly", "eager.context.context", "framework.ops.get_default_graph"], "framework.versions_pb2.VersionDef": [], "framework.function_pb2.GradientDef": [], "framework.function_def_to_graph._get_num_args": ["<builtin>.ValueError", "<builtin>.len"], "cpp_shape_inference_pb2.CppShapeInferenceResult.HandleShapeAndType": [], "framework.func_graph": [], "framework.func_graph.convert_structure_to_signature.encode_arg": ["framework.tensor_spec.TensorSpec", "util.compat.as_str", "<builtin>.str", "ops.resource_variable_ops.VariableSpec", "<builtin>.isinstance", "<builtin>.type"], "util.nest.flatten_with_tuple_paths": ["util.nest.flatten", "<builtin>.list", "<builtin>.zip", "util.nest.yield_flat_paths"], "framework.func_graph.FuncGraph.__init__": ["eager.context.executing_eagerly", "weakref.ref", "<builtin>.super", "<builtin>.set", "<builtin>.isinstance", "eager.context.global_seed", "collections.OrderedDict", "util.object_identity.ObjectIdentityWeakSet", "util.object_identity.ObjectIdentitySet", "framework.ops.get_default_graph"], "util.object_identity.ObjectIdentityWeakSet": [], "framework.func_graph.FuncGraph.__str__": ["<builtin>.id"], "framework.func_graph.FuncGraph.watch_variable": ["<builtin>.isinstance"], "framework.func_graph.FuncGraph.capture_call_time_value": ["util.nest.map_structure", "<builtin>.object"], "framework.func_graph.FuncGraph.capture_call_time_value.convert_to_placeholder": ["<builtin>.type", "<builtin>.TypeError", "ops.array_ops.placeholder", "<builtin>.isinstance"], "framework.func_graph.FuncGraph.capture_call_time_value.wrapped_closure": ["util.nest.map_structure", "util.nest.flatten", "util.nest.assert_same_structure"], "framework.func_graph.FuncGraph.capture_call_time_value.wrapped_closure.<lambda1>": [], "framework.func_graph.FuncGraph.control_dependencies": ["framework.ops._as_graph_element", "<builtin>.super", "<builtin>.isinstance", "<builtin>.hasattr", "<builtin>.getattr"], "framework.ops._as_graph_element": ["<builtin>.callable", "<builtin>.getattr"], "framework.func_graph.FuncGraph.as_default": ["framework.func_graph.FuncGraph.as_default.inner_cm", "<builtin>.super", "util.tf_contextlib.contextmanager"], "framework.func_graph.FuncGraph.as_default.inner_cm": ["eager.context.executing_eagerly", "framework.func_graph.device_stack_has_callable", "<builtin>.list", "framework.ops.get_default_graph", "framework.ops.executing_eagerly_outside_functions"], "framework.func_graph.FuncGraph.outer_graph": ["weakref.ref"], "framework.func_graph.FuncGraph.output_types": [], "framework.func_graph.FuncGraph.output_shapes": [], "framework.func_graph.FuncGraph.trainable_variables": ["<builtin>.tuple"], "framework.func_graph.FuncGraph.variables": ["weakref.ref", "framework.func_graph.FuncGraph.variables.deref", "<builtin>.tuple"], "framework.func_graph.FuncGraph.variables.deref": ["<builtin>.AssertionError"], "framework.func_graph.FuncGraph._capture_by_value": ["eager.context.executing_eagerly", "eager.execute.execute", "<builtin>.id", "framework.func_graph.FuncGraph.capture", "eager.context.context", "framework.ops.get_default_graph", "util.compat.as_bytes", "<builtin>.dict", "<builtin>.int", "framework.ops.init_scope"], "framework.func_graph.FuncGraph.capture": ["numpy.prod", "framework.func_graph.FuncGraph.capture_eager_tensor", "framework.func_graph.FuncGraph._capture_helper", "<builtin>.str", "framework.errors.InaccessibleTensorError", "<builtin>.isinstance", "framework.ops.uid"], "framework.func_graph.FuncGraph._create_op_internal": ["framework.func_graph.FuncGraph._capture_by_value", "<builtin>.super", "framework.func_graph.FuncGraph.capture", "<builtin>.hasattr", "framework.ops.get_default_graph"], "framework.func_graph.FuncGraph.capture_eager_tensor": ["framework.func_graph.FuncGraph.add_capture", "<builtin>.id", "framework.func_graph.FuncGraph._capture_helper", "ops.Graph.device", "framework.ops.control_dependencies", "framework.tensor_util.constant_value", "framework.constant_op.constant", "eager.tape.record_operation"], "framework.func_graph.FuncGraph._capture_helper": ["framework.func_graph.FuncGraph.add_capture", "framework.attr_value_pb2.AttrValue", "<builtin>.id", "framework.func_graph._create_substitute_placeholder", "<builtin>.isinstance", "util.compat.as_bytes", "eager.tape.record_operation"], "framework.func_graph._create_substitute_placeholder": ["framework.ops.control_dependencies", "ops.handle_data_util.copy_handle_data", "eager.graph_only_ops.graph_placeholder"], "framework.func_graph.FuncGraph.add_capture": ["<builtin>.id"], "framework.func_graph.FuncGraph._capture_helper.<lambda1>": [], "framework.func_graph.FuncGraph._capture_helper.<lambda2>": [], "framework.func_graph.FuncGraph.captures": [], "framework.func_graph.FuncGraph.replace_capture": ["<builtin>.id"], "framework.func_graph.FuncGraph.reset_captures": ["collections.OrderedDict", "<builtin>.id"], "framework.func_graph.FuncGraph.pop_capture": ["<builtin>.id"], "framework.func_graph.FuncGraph.clear_captures": ["util.memory.dismantle_ordered_dict"], "framework.func_graph.FuncGraph.capture_distributed_variable": ["eager.tape.record_operation", "<builtin>.id"], "framework.func_graph.FuncGraph.capture_distributed_variable.<lambda1>": [], "framework.func_graph.FuncGraph.capture_distributed_variable.<lambda2>": [], "ops.Graph.device": [], "framework.func_graph.FuncGraph.capture_eager_tensor.<lambda1>": [], "framework.func_graph.FuncGraph.capture_eager_tensor.<lambda2>": [], "framework.func_graph.FuncGraph.captured": ["<builtin>.id"], "framework.func_graph.FuncGraph.external_captures": [], "framework.func_graph.FuncGraph.internal_captures": [], "framework.func_graph.FuncGraph.deferred_external_captures": [], "framework.func_graph.FuncGraph.deferred_internal_captures": [], "framework.func_graph.FuncGraph.variable_captures": ["<builtin>.id"], "framework.func_graph.FuncGraph.mark_as_unsaveable": ["<builtin>.isinstance"], "framework.func_graph.FuncGraph.saveable": [], "framework.func_graph.FuncGraph.saving_errors": [], "framework.func_graph.FuncGraph._add_scope_exit_callback": ["<builtin>.RuntimeError", "<builtin>.TypeError", "<builtin>.callable"], "framework.func_graph._get_defun_inputs_from_args": ["framework.func_graph._get_defun_inputs"], "framework.func_graph._get_defun_inputs_from_kwargs": ["<builtin>.sorted", "<builtin>.zip", "framework.func_graph._get_defun_inputs"], "framework.func_graph.func_graph_from_py_func.convert": ["ops.array_ops.identity", "<builtin>.TypeError", "framework.ops.convert_to_tensor_or_composite", "<builtin>.str", "<builtin>.isinstance", "framework.ops.control_dependencies", "<builtin>.type"], "framework.func_graph.func_graph_from_py_func.autograph_handler": ["python.autograph.ConversionOptions", "python.autograph.converted_call", "<builtin>.hasattr"], "python.autograph.ConversionOptions": [], "python.autograph.converted_call": [], "framework.func_graph.check_mutation": ["util.nest.flatten", "<builtin>.getattr", "<builtin>.zip", "<builtin>.ValueError", "util.nest.assert_same_structure"], "framework.func_graph.flatten": ["util.nest.flatten", "<builtin>.isinstance"], "framework.func_graph.maybe_captured": ["framework.func_graph.maybe_captured", "<builtin>.isinstance"], "framework.func_graph.pack_sequence_as": ["util.nest.pack_sequence_as", "<builtin>.list", "ops.tensor_array_ops.build_ta_with_new_flow", "util.nest.flatten", "<builtin>.isinstance", "<builtin>.len", "<builtin>.range", "<builtin>.ValueError"], "framework.func_graph._get_defun_inputs": ["<builtin>.next", "util.nest.pack_sequence_as", "framework.attr_value_pb2.AttrValue", "util.compat.as_bytes", "eager.graph_only_ops.graph_placeholder", "<builtin>.RuntimeError", "util.nest.map_structure", "util.nest.flatten", "<builtin>.isinstance", "<builtin>.len", "<builtin>.zip", "ops.handle_data_util.copy_handle_data", "framework.ops.get_default_graph", "itertools.repeat", "<builtin>.iter", "ops.resource_variable_ops.BaseResourceVariable"], "framework.func_graph._get_composite_tensor_spec": ["<builtin>.isinstance"], "itertools.repeat": [], "ops.resource_variable_ops.BaseResourceVariable": ["util.deprecation.deprecated", "contextlib.contextmanager"], "framework.ops.dismantle_graph": ["util.memory.dismantle_ordered_dict"], "framework.func_graph.override_func_graph_name_scope": [], "framework.gpu_util": ["collections.namedtuple", "re.compile"], "framework.gpu_util.compute_capability_from_device_desc": ["<builtin>.int"], "framework.graph_building_benchmark": ["platform.test.main"], "framework.graph_building_benchmark.run_benchmark": ["framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkAddBatchedMatrices.bench", "time.time", "framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkMatMul.bench", "<builtin>.range", "framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkAddScalars.bench"], "framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkAddScalars.bench": ["ops.gen_math_ops.add"], "framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkMatMul.bench": ["ops.gen_math_ops.mat_mul"], "framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkAddBatchedMatrices.bench": ["ops.gen_math_ops.add"], "framework.graph_building_benchmark.SingleOpBenchmarks._run_and_report": ["framework.graph_building_benchmark.run_benchmark", "<builtin>.float", "test.Benchmark.report_benchmark"], "framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkAddScalars": ["framework.graph_building_benchmark.SingleOpBenchmarks._run_and_report", "ops.array_ops.placeholder", "eager.context.execution_mode"], "ops.gen_math_ops.add": [], "framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkAddBatchedMatrices": ["framework.graph_building_benchmark.SingleOpBenchmarks._run_and_report", "ops.array_ops.placeholder", "eager.context.execution_mode"], "framework.graph_building_benchmark.SingleOpBenchmarks.benchmarkMatMul": ["framework.graph_building_benchmark.SingleOpBenchmarks._run_and_report", "ops.array_ops.placeholder", "eager.context.execution_mode"], "framework.graph_io": ["util.tf_export.tf_export"], "framework.graph_io.write_graph": ["io.file_io.recursive_create_dir", "io.file_io.atomic_write_string_to_file", "os.path.join", "<builtin>.isinstance", "protobuf.text_format.MessageToString"], "protobuf.text_format.MessageToString": [], "framework.graph_to_function_def": [], "framework.graph_to_function_def._make_argname_from_tensor_name": ["re.sub"], "framework.graph_to_function_def._tensor_to_argdef": ["framework.graph_to_function_def._make_argname_from_tensor_name", "op_def_pb2.OpDef.ArgDef"], "op_def_pb2.OpDef.ArgDef": [], "framework.graph_to_function_def._is_in_placeholders": ["<builtin>.any"], "framework.graph_to_function_def._get_node_def": [], "framework.graph_to_function_def._create_input_dict": ["<builtin>.dict", "<builtin>.len", "framework.graph_to_function_def._is_in_placeholders", "framework.graph_to_function_def._get_node_def", "framework.graph_to_function_def._get_op_def", "<builtin>.range"], "framework.graph_to_function_def._add_op_node": ["<builtin>.range", "<builtin>.len"], "framework.errors_impl.InvalidArgumentError": [], "framework.graph_util": [], "framework.graph_util_impl": ["util.tf_export.tf_export", "<builtin>.globals", "util.deprecation.deprecated", "util.lazy_loader.LazyLoader"], "framework.graph_util_impl._is_variable_op": [], "framework.graph_util_impl.must_run_on_cpu": ["<builtin>.isinstance", "framework.graph_util_impl._is_variable_op"], "framework.graph_util_impl._node_name": [], "framework.graph_util_impl._get_colocated_node_name": [], "framework.graph_util_impl._assert_nodes_are_present": [], "framework.graph_util_impl.extract_sub_graph": ["framework.graph_util_impl._extract_graph_summary", "<builtin>.sorted", "framework.graph_pb2.GraphDef", "<builtin>.isinstance", "framework.graph_util_impl._bfs_for_reachable_nodes", "<builtin>.list", "framework.graph_util_impl._assert_nodes_are_present", "<builtin>.TypeError"], "framework.graph_util_impl.extract_sub_graph.<lambda1>": [], "framework.graph_util_impl.tensor_shape_from_node_def_name": [], "framework.graph_util_impl.convert_variables_to_constants": [], "framework.graph_util_impl.remove_training_nodes": ["<builtin>.set", "framework.graph_pb2.GraphDef", "re.sub", "framework.node_def_pb2.NodeDef"], "framework.graph_util_impl.graph_defs_equal": ["<builtin>.isinstance", "framework._proto_comparators.ProtoComparisonOptions", "framework._proto_comparators.EqualsGraphDef", "<builtin>.TypeError"], "framework._proto_comparators.ProtoComparisonOptions": [], "framework._proto_comparators.EqualsGraphDef": [], "framework.immutable_dict": [], "framework.immutable_dict.ImmutableDict.__init__": ["<builtin>.dict"], "framework.immutable_dict.ImmutableDict.__getitem__": [], "framework.immutable_dict.ImmutableDict.__contains__": [], "framework.immutable_dict.ImmutableDict.__iter__": ["<builtin>.iter"], "framework.immutable_dict.ImmutableDict.__len__": ["<builtin>.len"], "framework.immutable_dict.ImmutableDict.__repr__": [], "framework.importer": ["util.tf_export.tf_export", "util.deprecation.deprecated_args", "contextlib.contextmanager"], "framework.importer._IsControlInput": [], "framework.importer._ParseTensorName": ["<builtin>.int", "<builtin>.ValueError", "<builtin>.len"], "framework.importer._MaybeDevice": ["framework.ops.device"], "framework.importer._ProcessGraphDefParam": ["<builtin>.TypeError", "framework.op_def_registry.get", "framework.graph_pb2.GraphDef", "<builtin>.isinstance", "framework.importer._SetDefaultAttrValues"], "framework.importer._SetDefaultAttrValues": [], "framework.importer._ProcessInputMapParam": ["<builtin>.all", "<builtin>.isinstance", "<builtin>.TypeError"], "framework.importer._ProcessReturnElementsParam": ["<builtin>.TypeError", "<builtin>.tuple", "util.compat.as_str", "<builtin>.all", "<builtin>.isinstance"], "framework.importer._FindAttrInOpDef": [], "framework.importer._RemoveDefaultAttrs": ["framework.op_def_registry.get", "<builtin>.list", "framework.importer._FindAttrInOpDef"], "framework.importer._ConvertInputMapValues": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "<builtin>.all", "<builtin>.isinstance", "<builtin>.ValueError"], "framework.importer._PopulateTFImportGraphDefOptions": ["client.pywrap_tf_session.TF_ImportGraphDefOptionsSetUniquifyNames", "client.pywrap_tf_session.TF_ImportGraphDefOptionsSetValidateColocationConstraints", "client.pywrap_tf_session.TF_ImportGraphDefOptionsAddReturnOutput", "client.pywrap_tf_session.TF_ImportGraphDefOptionsAddInputMapping", "client.pywrap_tf_session.TF_ImportGraphDefOptionsAddReturnOperation", "client.pywrap_tf_session.TF_ImportGraphDefOptionsSetPrefix", "client.pywrap_tf_session.TF_ImportGraphDefOptionsRemapControlDependency", "util.compat.as_str", "framework.importer._ParseTensorName"], "client.pywrap_tf_session.TF_ImportGraphDefOptionsSetPrefix": [], "client.pywrap_tf_session.TF_ImportGraphDefOptionsSetUniquifyNames": [], "client.pywrap_tf_session.TF_ImportGraphDefOptionsRemapControlDependency": [], "client.pywrap_tf_session.TF_ImportGraphDefOptionsAddInputMapping": [], "client.pywrap_tf_session.TF_ImportGraphDefOptionsAddReturnOutput": [], "client.pywrap_tf_session.TF_ImportGraphDefOptionsAddReturnOperation": [], "client.pywrap_tf_session.TF_ImportGraphDefOptionsSetValidateColocationConstraints": [], "framework.importer._ProcessNewOps": ["ops.control_flow_util.EnableControlFlowV2", "device.DeviceSpec.from_string", "python.tf2.enabled", "framework.importer._MaybeDevice", "<builtin>.ValueError", "framework.importer._GetColocationNames"], "framework.importer._GetColocationNames": ["util.compat.as_str", "<builtin>.len"], "framework.importer._GatherReturnElements": ["client.pywrap_tf_session.TF_ImportGraphDefResultsReturnOperations", "client.pywrap_tf_session.TF_ImportGraphDefResultsReturnOutputs"], "client.pywrap_tf_session.TF_ImportGraphDefResultsReturnOutputs": [], "client.pywrap_tf_session.TF_ImportGraphDefResultsReturnOperations": [], "framework.importer._import_graph_def_internal": ["framework.c_api_util.ScopedTFImportGraphDefOptions", "framework.importer._ProcessGraphDefParam", "<builtin>.str", "framework.importer._ConvertInputMapValues", "framework.importer._PopulateTFImportGraphDefOptions", "framework.importer._ProcessNewOps", "framework.ops.get_default_graph", "framework.importer._ProcessReturnElementsParam", "util.compat.as_str", "client.pywrap_tf_session.TF_ImportGraphDefResultsMissingUnusedInputMappings_wrapper", "framework.function.from_library", "framework.c_api_util.ScopedTFImportGraphDefResults", "framework.importer._ProcessInputMapParam", "framework.ops.name_scope", "client.pywrap_tf_session.TF_GraphImportGraphDefWithResults", "framework.importer._GatherReturnElements", "framework.c_api_util.tf_buffer", "<builtin>.ValueError", "framework.importer._RemoveDefaultAttrs"], "framework.c_api_util.ScopedTFImportGraphDefOptions": [], "client.pywrap_tf_session.TF_GraphImportGraphDefWithResults": [], "framework.c_api_util.ScopedTFImportGraphDefResults": [], "client.pywrap_tf_session.TF_ImportGraphDefResultsMissingUnusedInputMappings_wrapper": [], "framework.indexed_slices": ["util.tf_export.tf_export", "<builtin>.globals", "collections.namedtuple", "framework.tensor_conversion_registry.register_tensor_conversion_function", "util.lazy_loader.LazyLoader"], "framework.indexed_slices.IndexedSlices.__init__": [], "framework.indexed_slices.IndexedSlices.values": [], "framework.indexed_slices.IndexedSlices.indices": [], "framework.indexed_slices.IndexedSlices.dense_shape": [], "framework.indexed_slices.IndexedSlices.shape": ["framework.tensor_shape.TensorShape"], "framework.indexed_slices.IndexedSlices.name": [], "framework.indexed_slices.IndexedSlices.device": [], "framework.indexed_slices.IndexedSlices.op": [], "framework.indexed_slices.IndexedSlices.dtype": [], "framework.indexed_slices.IndexedSlices.graph": [], "framework.indexed_slices.IndexedSlices.__str__": [], "framework.indexed_slices.IndexedSlices.__neg__": ["framework.indexed_slices.IndexedSlices.__init__"], "framework.indexed_slices.IndexedSlices._type_spec": ["framework.indexed_slices.IndexedSlicesSpec.__init__", "framework.tensor_shape.TensorShape"], "framework.indexed_slices.IndexedSlicesSpec.__init__": ["framework.dtypes.as_dtype", "framework.tensor_shape.as_shape"], "framework.indexed_slices.IndexedSlices._shape_invariant_to_type_spec": ["framework.indexed_slices.IndexedSlicesSpec.__init__", "framework.tensor_shape.TensorShape"], "framework.indexed_slices.IndexedSlices.consumers": ["internal.NativeObject._consumers"], "internal.NativeObject._consumers": [], "framework.indexed_slices.IndexedSlicesSpec.<lambda1>": [], "framework.indexed_slices.IndexedSlicesSpec": ["<builtin>.property"], "framework.indexed_slices.IndexedSlicesSpec._serialize": [], "framework.indexed_slices.IndexedSlicesSpec._component_specs": ["<builtin>.tuple"], "framework.indexed_slices.IndexedSlicesSpec._to_components": [], "framework.indexed_slices.IndexedSlicesSpec._from_components": ["<builtin>.isinstance", "framework.indexed_slices.IndexedSlices.__init__", "<builtin>.all", "<builtin>.len", "python.tf2.enabled"], "framework.indexed_slices.convert_to_tensor_or_indexed_slices": ["framework.indexed_slices.internal_convert_to_tensor_or_indexed_slices"], "framework.indexed_slices.internal_convert_to_tensor_or_indexed_slices": ["<builtin>.isinstance", "<builtin>.ValueError", "eager.context.executing_eagerly", "framework.dtypes.as_dtype", "<builtin>.str"], "framework.indexed_slices.internal_convert_n_to_tensor_or_indexed_slices": ["<builtin>.isinstance", "framework.indexed_slices.internal_convert_to_tensor_or_indexed_slices", "<builtin>.enumerate", "<builtin>.TypeError"], "framework.indexed_slices.convert_n_to_tensor_or_indexed_slices": ["framework.indexed_slices.internal_convert_n_to_tensor_or_indexed_slices"], "framework.indexed_slices._indexed_slices_to_tensor": ["<builtin>.ValueError", "numpy.prod", "warnings.warn", "eager.context.executing_eagerly", "<builtin>.str"], "framework.tensor_conversion_registry.register_tensor_conversion_function": ["<builtin>.any", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.issubclass", "<builtin>.TypeError"], "framework.kernels": [], "framework.kernels.get_all_registered_kernels": ["util.compat.as_bytes", "client.pywrap_tf_session.TF_GetBuffer", "client.pywrap_tf_session.TF_GetAllRegisteredKernels", "framework.kernel_def_pb2.KernelList"], "client.pywrap_tf_session.TF_GetAllRegisteredKernels": [], "framework.kernel_def_pb2.KernelList": [], "client.pywrap_tf_session.TF_GetRegisteredKernelsForOp": [], "framework.load_library": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "client.pywrap_tf_session.TF_LoadLibrary": [], "client.pywrap_tf_session.TF_GetOpList": [], "framework._pywrap_python_op_gen.GetPythonWrappers": [], "client.pywrap_tf_session.TF_DeleteLibraryHandle": [], "framework.load_library.load_file_system_library": ["client.pywrap_tf_session.TF_LoadLibrary"], "framework.load_library._is_shared_object": ["platform.system"], "framework.load_library.load_library": ["os.listdir", "client.pywrap_tf_session.TF_LoadLibrary", "<builtin>.OSError", "os.path.isdir", "framework.load_library._is_shared_object", "os.path.exists", "os.path.join"], "<builtin>.OSError": [], "framework.load_library.load_pluggable_device_library": ["eager.context.context", "os.listdir", "client.pywrap_tf_session.TF_LoadPluggableDeviceLibrary", "<builtin>.OSError", "os.path.isdir", "framework.load_library._is_shared_object", "os.path.exists", "os.path.join"], "client.pywrap_tf_session.TF_LoadPluggableDeviceLibrary": [], "framework.load_library.register_filesystem_plugin": ["client.pywrap_tf_session.TF_RegisterFilesystemPlugin", "<builtin>.OSError", "os.path.exists"], "client.pywrap_tf_session.TF_RegisterFilesystemPlugin": [], "framework.memory_checker": [], "framework.memory_checker._get_test_name_best_effort": ["util.tf_inspect.stack"], "util.tf_inspect.stack": ["inspect.stack"], "framework.memory_checker.MemoryChecker": ["profiler.traceme.traceme_wrapper"], "profiler.traceme.traceme_wrapper": ["<builtin>.getattr"], "framework.memory_checker.MemoryChecker.__enter__": ["profiler.traceme.TraceMe", "framework.python_memory_checker._PythonMemoryChecker", "framework.memory_checker._get_test_name_best_effort", "platform.cpp_memory_checker._CppMemoryChecker"], "profiler.traceme.TraceMe": [], "framework.python_memory_checker._PythonMemoryChecker": ["profiler.traceme.traceme_wrapper"], "platform.cpp_memory_checker._CppMemoryChecker": [], "framework.memory_checker.MemoryChecker.__exit__": [], "framework.memory_checker.MemoryChecker.record_snapshot": [], "framework.memory_checker.MemoryChecker.report": [], "framework.memory_checker.MemoryChecker.assert_no_leak_if_all_possibly_except_one": [], "framework.memory_checker.MemoryChecker.assert_no_new_python_objects": [], "framework.meta_graph": [], "framework.meta_graph._node_def": ["util.compat.as_str", "util.compat.as_bytes", "six.iteritems", "framework.attr_value_pb2.AttrValue", "attr_value_pb2.AttrValue.ListValue", "copy.deepcopy", "framework.ops.strip_name_scope", "re.sub", "<builtin>.enumerate"], "framework.ops.strip_name_scope": ["platform.tf_logging.warning", "re.sub", "util.compat.as_str"], "framework.meta_graph._read_file": ["protobuf.text_format.Merge", "io.file_io.file_exists", "<builtin>.IOError", "framework.graph_pb2.GraphDef", "io.file_io.FileIO", "<builtin>.str"], "framework.meta_graph.ops_used_by_graph_def": ["framework.meta_graph.ops_used_by_graph_def.process_node", "<builtin>.set"], "framework.meta_graph.ops_used_by_graph_def.mark_op_as_used": [], "framework.meta_graph.ops_used_by_graph_def.process_node": ["framework.meta_graph.ops_used_by_graph_def.mark_op_as_used"], "framework.meta_graph.stripped_op_list_for_graph": ["<builtin>.sorted", "framework.meta_graph.ops_used_by_graph_def", "framework.op_def_pb2.OpList", "framework.op_def_registry.get"], "framework.meta_graph._get_kind_name": ["<builtin>.isinstance"], "framework.meta_graph._op_name": ["<builtin>.ValueError"], "framework.meta_graph._get_scope": ["<builtin>.ValueError"], "framework.meta_graph._find_extraneous_saver_nodes": ["framework.meta_graph._get_scope", "<builtin>.set", "framework.meta_graph._op_name"], "framework.meta_graph._should_include_node": ["<builtin>.isinstance"], "framework.meta_graph.add_collection_def": ["<builtin>.type", "platform.tf_logging.warning", "<builtin>.TypeError", "framework.meta_graph._should_include_node", "framework.ops.get_default_graph", "util.compat.as_bytes", "<builtin>.isinstance", "framework.meta_graph._get_kind_name", "framework.ops.get_to_proto_function", "framework.ops.strip_name_scope", "<builtin>.str", "<builtin>.getattr", "framework.ops.get_collection_proto_type"], "framework.ops.get_to_proto_function": [], "framework.meta_graph._is_default_attr_value": ["client.pywrap_tf_session.EqualAttrValueWrapper"], "client.pywrap_tf_session.EqualAttrValueWrapper": [], "framework.meta_graph.strip_graph_default_valued_attrs": ["framework.meta_graph.strip_graph_default_valued_attrs._strip_node_default_valued_attrs"], "framework.meta_graph.strip_graph_default_valued_attrs._strip_node_default_valued_attrs": ["framework.meta_graph._is_default_attr_value", "<builtin>.set", "framework.op_def_registry.get"], "framework.meta_graph.create_meta_graph_def": ["<builtin>.type", "protobuf.meta_graph_pb2.MetaGraphDef", "<builtin>.TypeError", "framework.ops.get_default_graph", "framework.meta_graph.strip_graph_default_valued_attrs", "<builtin>.isinstance", "meta_graph_pb2.MetaGraphDef.MetaInfoDef", "<builtin>.len", "framework.meta_graph.add_collection_def", "framework.meta_graph.stripped_op_list_for_graph", "framework.ops.get_from_proto_function"], "meta_graph_pb2.MetaGraphDef.MetaInfoDef": [], "framework.meta_graph.read_meta_graph_file": ["protobuf.meta_graph_pb2.MetaGraphDef", "protobuf.text_format.Merge", "io.file_io.file_exists", "<builtin>.IOError", "io.file_io.FileIO", "<builtin>.str"], "framework.meta_graph.import_scoped_meta_graph": ["framework.meta_graph.import_scoped_meta_graph_with_return_elements"], "framework.meta_graph.import_scoped_meta_graph_with_return_elements": ["platform.tf_logging.error", "framework.ops.strip_name_scope", "framework.meta_graph.read_meta_graph_file", "<builtin>.getattr", "distutils.version.LooseVersion", "platform.tf_logging.warning", "<builtin>.int", "framework.importer.import_graph_def", "framework.ops.get_from_proto_function", "eager.context.executing_eagerly", "framework.meta_graph.<lambda2>", "util.compat.as_str", "<builtin>.isinstance", "framework.ops.prepend_name_scope", "framework.ops.get_collection_proto_type", "<builtin>.ValueError", "framework.meta_graph.<lambda1>", "framework.ops.get_default_graph", "<builtin>.sorted"], "framework.meta_graph.<lambda2>": [], "framework.meta_graph.<lambda1>": [], "framework.meta_graph.export_scoped_meta_graph": ["framework.meta_graph._should_include_node", "framework.ops.get_default_graph", "framework.meta_graph.create_meta_graph_def", "framework.ops.prepend_name_scope", "<builtin>.sorted", "framework.error_interpolation.create_graph_debug_info_def", "framework.graph_pb2.GraphDef", "framework.meta_graph._find_extraneous_saver_nodes", "framework.graph_io.write_graph", "framework.meta_graph._node_def", "framework.ops.strip_name_scope", "eager.context.executing_eagerly", "<builtin>.ValueError"], "framework.meta_graph.copy_scoped_meta_graph": ["framework.meta_graph.export_scoped_meta_graph", "framework.ops.get_default_graph", "framework.meta_graph.import_scoped_meta_graph", "<builtin>.ValueError"], "framework.ops": ["framework.ops._DefaultGraphStack.__init__", "eager.monitoring.BoolGauge", "util.traceback_utils.filter_traceback", "util.deprecation.deprecated", "util.dispatch.add_dispatch_support", "profiler.trace.trace_wrapper", "python.pywrap_tfe.TFE_Py_InitEagerTensor", "re.compile", "<builtin>.globals", "util.lazy_loader.LazyLoader", "util.deprecation.deprecated_endpoints", "util.tf_contextlib.contextmanager", "framework.ops._DefaultStack.__init__", "util.tf_export.tf_export", "framework.registry.Registry"], "framework.ops._UserDeviceSpec.__init__": ["<builtin>.str", "util.function_utils.get_func_code", "framework.device.merge_device", "<builtin>.callable", "util.function_utils.get_func_name", "<builtin>.isinstance"], "util.function_utils.get_func_code": ["util.tf_inspect.ismethod", "<builtin>.callable", "util.tf_decorator.unwrap", "util.tf_inspect.isfunction", "<builtin>.type", "<builtin>.ValueError", "six.get_function_code"], "framework.ops._UserDeviceSpec.string_merge": ["framework.ops._device_string", "util.compat.as_str"], "framework.ops.NullContextmanager.__init__": [], "framework.ops.NullContextmanager.__enter__": [], "framework.ops.NullContextmanager.__exit__": [], "framework.ops._override_helper": ["<builtin>.setattr", "<builtin>.ValueError"], "framework.ops.is_dense_tensor_like": ["<builtin>.isinstance"], "python.pywrap_tfe.TFE_Py_UID": [], "framework.ops.numpy_text": ["framework.ops._EagerTensorBase._numpy", "<builtin>.repr", "<builtin>.str"], "framework.ops._EagerTensorBase._numpy": ["framework.ops._EagerTensorBase._numpy_internal", "eager.core._status_to_exception"], "framework.ops.Tensor": ["python.tf2.enabled", "util.deprecation.deprecated"], "framework.ops.Tensor.__init__": ["framework.ops.uid", "<builtin>.isinstance", "<builtin>.TypeError", "framework.dtypes.as_dtype"], "framework.ops.Tensor.__getattr__": ["<builtin>.AttributeError", "internal.NativeObject.__getattribute__", "<builtin>.type"], "internal.NativeObject.__getattribute__": [], "framework.ops.Tensor._create_with_tf_output": ["framework.ops.Tensor.__init__"], "framework.ops.Tensor.op": [], "framework.ops.Tensor.dtype": [], "framework.ops.Tensor.graph": [], "framework.ops.Tensor.name": ["<builtin>.ValueError"], "framework.ops.Tensor.device": [], "framework.ops.Tensor.shape": ["framework.ops.Tensor._c_api_shape"], "framework.ops.Tensor._c_api_shape": ["client.pywrap_tf_session.TF_GraphGetTensorShapeHelper", "framework.ops.Tensor._as_tf_output", "framework.tensor_shape.unknown_shape", "framework.tensor_shape.TensorShape"], "framework.ops.Tensor._as_tf_output": ["framework.c_api_util.tf_output"], "client.pywrap_tf_session.TF_GraphGetTensorShapeHelper": [], "framework.ops.Tensor._shape": ["platform.tf_logging.warning", "<builtin>.ValueError"], "framework.ops.Tensor._disallow_when_autograph_disabled": ["framework.errors.OperatorNotAllowedInGraphError"], "framework.errors.OperatorNotAllowedInGraphError": [], "framework.ops.Tensor._disallow_when_autograph_enabled": ["framework.errors.OperatorNotAllowedInGraphError"], "framework.ops.Tensor._disallow_in_graph_mode": ["framework.errors.OperatorNotAllowedInGraphError"], "framework.ops.Tensor._disallow_bool_casting": ["framework.ops.Tensor._disallow_in_graph_mode", "framework.ops.Tensor._disallow_when_autograph_disabled", "framework.ops.Tensor._disallow_when_autograph_enabled"], "framework.ops.Tensor._disallow_iteration": ["framework.ops.Tensor._disallow_in_graph_mode", "framework.ops.Tensor._disallow_when_autograph_disabled", "framework.ops.Tensor._disallow_when_autograph_enabled"], "framework.ops.Tensor.__iter__": ["eager.context.executing_eagerly", "framework.ops._TensorIterator.__init__", "framework.ops.Tensor._shape_tuple", "framework.ops.Tensor._disallow_iteration", "<builtin>.TypeError"], "framework.ops.Tensor._shape_tuple": ["framework.ops.Tensor._shape_as_list", "<builtin>.tuple"], "framework.ops._TensorIterator.__init__": [], "framework.ops.Tensor._shape_as_list": [], "framework.ops.Tensor._rank": [], "framework.ops.Tensor.get_shape": [], "framework.ops.Tensor.set_shape": ["framework.tensor_shape.TensorShape", "client.pywrap_tf_session.TF_GraphSetTensorShape_wrapper", "framework.ops.Tensor._as_tf_output", "<builtin>.isinstance", "<builtin>.ValueError"], "client.pywrap_tf_session.TF_GraphSetTensorShape_wrapper": [], "framework.ops.Tensor.value_index": [], "framework.ops.Tensor.consumers": ["client.pywrap_tf_session.TF_OperationOutputConsumers_wrapper", "framework.ops.Tensor._as_tf_output"], "client.pywrap_tf_session.TF_OperationOutputConsumers_wrapper": [], "framework.ops.Tensor._as_node_def_input": ["<builtin>.ValueError"], "framework.ops.Tensor.__str__": ["framework.ops.Tensor.get_shape"], "framework.ops.Tensor.__repr__": ["framework.ops.Tensor.get_shape"], "framework.ops.Tensor.__hash__": ["framework.ops.executing_eagerly_outside_functions", "<builtin>.id", "<builtin>.getattr", "<builtin>.TypeError"], "framework.ops.Tensor.__copy__": ["NativeObject.__class__.__new__", "Tensor.__class__.__new__"], "NativeObject.__class__.__new__": [], "Tensor.__class__.__new__": [], "framework.ops.Tensor.__array__": ["<builtin>.NotImplementedError"], "framework.ops.Tensor.__len__": ["<builtin>.TypeError"], "framework.ops.Tensor._override_operator": ["framework.ops._override_helper"], "framework.ops.Tensor.__bool__": ["framework.ops.Tensor._disallow_bool_casting"], "framework.ops.Tensor.__nonzero__": ["framework.ops.Tensor._disallow_bool_casting"], "framework.ops.Tensor.eval": ["framework.ops._eval_using_default_session"], "framework.ops._eval_using_default_session": ["<builtin>.ValueError", "framework.ops.get_default_session"], "framework.ops.Tensor.experimental_ref": ["framework.ops.Tensor.ref"], "framework.ops.Tensor.ref": ["util.object_identity.Reference"], "framework.ops._EagerTensorBase.__complex__": ["framework.ops._EagerTensorBase._numpy", "<builtin>.complex"], "framework.ops._EagerTensorBase.__int__": ["framework.ops._EagerTensorBase._numpy", "<builtin>.int"], "framework.ops._EagerTensorBase.__long__": ["framework.ops._EagerTensorBase._numpy"], "framework.ops._EagerTensorBase.__float__": ["framework.ops._EagerTensorBase._numpy", "<builtin>.float"], "framework.ops._EagerTensorBase.__index__": ["framework.ops._EagerTensorBase._numpy"], "framework.ops._EagerTensorBase.__bool__": ["framework.ops._EagerTensorBase._numpy", "<builtin>.bool"], "framework.ops._EagerTensorBase.__format__": ["framework.ops._EagerTensorBase._numpy", "internal.NativeObject._summarize_value", "internal.NativeObject._prefer_custom_summarizer"], "internal.NativeObject._prefer_custom_summarizer": [], "internal.NativeObject._summarize_value": [], "framework.ops._EagerTensorBase.__reduce__": ["framework.ops._EagerTensorBase._numpy"], "framework.ops._EagerTensorBase.__copy__": [], "framework.ops._EagerTensorBase.__deepcopy__": [], "framework.ops._EagerTensorBase.__str__": ["framework.ops.numpy_text", "internal.NativeObject._summarize_value", "internal.NativeObject._prefer_custom_summarizer"], "framework.ops._EagerTensorBase.__repr__": ["framework.ops.numpy_text", "internal.NativeObject._summarize_value", "internal.NativeObject._prefer_custom_summarizer"], "framework.ops._EagerTensorBase.__len__": ["framework.ops._EagerTensorBase._shape_tuple", "eager.core._status_to_exception", "<builtin>.TypeError"], "framework.ops._EagerTensorBase._shape_tuple": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase.__array__": ["framework.ops._EagerTensorBase._numpy"], "framework.ops._EagerTensorBase._numpy_internal": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase.dtype": ["framework.ops._EagerTensorBase._datatype_enum"], "framework.ops._EagerTensorBase._datatype_enum": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase.numpy": ["framework.ops._EagerTensorBase._numpy", "<builtin>.isinstance"], "framework.ops._EagerTensorBase.backing_device": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase._rank": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase._num_elements": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase._copy_to_device": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase._override_operator": ["<builtin>.setattr"], "framework.ops._EagerTensorBase._copy_nograd": ["eager.context.context", "framework.ops._EagerTensorBase._copy_to_device", "eager.core._status_to_exception"], "framework.ops._EagerTensorBase._copy": ["framework.ops._EagerTensorBase._copy_nograd", "eager.tape.record_operation", "eager.context.executing_eagerly"], "framework.ops._EagerTensorBase._copy.grad_fun": ["<builtin>.hasattr"], "framework.ops._EagerTensorBase.shape": ["framework.tensor_shape.TensorShape", "framework.ops._EagerTensorBase._shape_tuple", "eager.core._status_to_exception"], "framework.ops._EagerTensorBase.get_shape": [], "framework.ops._EagerTensorBase._shape_as_list": ["framework.ops._EagerTensorBase._shape_tuple", "<builtin>.list"], "framework.ops._EagerTensorBase.ndim": [], "framework.ops._EagerTensorBase": ["util.deprecation.deprecated"], "framework.ops._EagerTensorBase.cpu": ["eager.context.context", "framework.ops._EagerTensorBase._copy"], "framework.ops._EagerTensorBase.gpu": ["<builtin>.str", "eager.context.context", "framework.ops._EagerTensorBase._copy"], "framework.ops._EagerTensorBase.set_shape": ["<builtin>.ValueError"], "framework.ops._EagerTensorBase.op": ["<builtin>.AttributeError"], "framework.ops._EagerTensorBase.graph": ["<builtin>.AttributeError"], "framework.ops._EagerTensorBase.name": ["<builtin>.AttributeError"], "framework.ops._EagerTensorBase.value_index": ["<builtin>.AttributeError"], "framework.ops._EagerTensorBase.consumers": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase._add_consumer": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase._as_node_def_input": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase._as_tf_output": ["<builtin>.NotImplementedError"], "framework.ops._EagerTensorBase.eval": ["<builtin>.NotImplementedError"], "python.pywrap_tfe.TFE_Py_InitEagerTensor": [], "framework.ops.convert_to_tensor_v1_with_dispatch": ["framework.ops.convert_to_tensor_v1"], "framework.ops.convert_to_tensor_v1": ["framework.ops.convert_to_tensor_v2", "util.deprecation.deprecated_argument_lookup"], "framework.ops._error_prefix": [], "framework.ops.pack_eager_tensors.grad_fun": ["<builtin>.ValueError"], "profiler.trace.trace_wrapper": [], "framework.tensor_conversion_registry.get": ["<builtin>.issubclass", "<builtin>.sorted"], "framework.ops.internal_convert_n_to_tensor": ["eager.context.context", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "<builtin>.enumerate", "<builtin>.isinstance"], "framework.ops.internal_convert_to_tensor_or_composite": ["<builtin>.getattr", "framework.dtypes.as_dtype", "<builtin>.str", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "<builtin>.ValueError"], "framework.ops.internal_convert_n_to_tensor_or_composite": ["<builtin>.enumerate", "<builtin>.isinstance", "framework.ops.internal_convert_to_tensor_or_composite", "<builtin>.TypeError"], "framework.ops.convert_n_to_tensor_or_composite": ["framework.ops.internal_convert_n_to_tensor_or_composite"], "framework.ops._NodeDef": ["framework.node_def_pb2.NodeDef", "util.compat.as_bytes", "six.iteritems"], "framework.ops.Graph._get_op_def": ["client.pywrap_tf_session.TF_GetBuffer", "framework.op_def_pb2.OpDef", "framework.c_api_util.tf_buffer", "client.pywrap_tf_session.TF_GraphGetOpDef", "util.compat.as_bytes"], "framework.ops._reconstruct_sequence_inputs": ["<builtin>.len"], "client.pywrap_tf_session.TF_NewOperation": [], "client.pywrap_tf_session.TF_SetDevice": [], "client.pywrap_tf_session.TF_AddInputList": [], "client.pywrap_tf_session.TF_AddInput": [], "client.pywrap_tf_session.TF_AddControlInput": [], "client.pywrap_tf_session.TF_SetAttrValueProto": [], "client.pywrap_tf_session.TF_FinishOperation": [], "framework.ops.Operation.__init__": ["<builtin>.all", "framework.ops.Graph._get_op_def", "framework.ops.Graph._add_op", "framework.ops.Operation._control_flow_post_processing", "framework.c_api_util.tf_output", "client.pywrap_tf_session.TF_OperationOutputType", "<builtin>.TypeError", "util.tf_stack.extract_stack_for_node", "<builtin>.range", "client.pywrap_tf_session.TF_OperationNumOutputs", "framework.ops._create_c_op", "framework.ops.Tensor._create_with_tf_output", "<builtin>.zip", "<builtin>.isinstance", "client.pywrap_tf_session.TF_OperationOpType", "framework.ops.Operation.type", "util.compat.as_str", "<builtin>.ValueError"], "framework.ops.Operation.type": ["client.pywrap_tf_session.TF_OperationOpType"], "client.pywrap_tf_session.TF_OperationOpType": [], "util.tf_stack.extract_stack_for_node": ["util._tf_stack.extract_stack_for_node", "threading.get_ident", "thread.get_ident"], "client.pywrap_tf_session.TF_OperationNumOutputs": [], "client.pywrap_tf_session.TF_OperationOutputType": [], "framework.ops.Graph._add_op": ["framework.ops.Graph._check_not_finalized", "<builtin>.max"], "framework.ops.Operation._control_flow_post_processing": ["ops.control_flow_util.CheckInputFromValidContext"], "ops.control_flow_util.CheckInputFromValidContext": ["ops.control_flow_util.IsSwitch", "ops.control_flow_util.GetContainingWhileContext", "ops.control_flow_util.IsContainingContext", "traceback.format_list", "ops.control_flow_util.GetOutputContext", "platform.tf_logging.info", "<builtin>.ValueError", "ops.control_flow_util.IsLoopEnter"], "framework.ops.Operation.colocation_groups": ["util.compat.as_bytes", "framework.ops.Operation.get_attr"], "framework.ops.Operation.get_attr": ["<builtin>.getattr", "<builtin>.list", "framework.dtypes.as_dtype", "<builtin>.str", "client.pywrap_tf_session.TF_GetBuffer", "framework.c_api_util.tf_buffer", "client.pywrap_tf_session.TF_OperationGetAttrValueProto", "framework.attr_value_pb2.AttrValue", "<builtin>.ValueError"], "framework.ops.Operation.values": ["<builtin>.tuple"], "framework.ops.Operation._get_control_flow_context": [], "framework.ops.Operation._set_control_flow_context": [], "framework.ops.Operation.name": ["client.pywrap_tf_session.TF_OperationName"], "client.pywrap_tf_session.TF_OperationName": [], "framework.ops.Operation._id": [], "framework.ops.Operation.device": ["client.pywrap_tf_session.TF_OperationDevice"], "client.pywrap_tf_session.TF_OperationDevice": [], "framework.ops.Operation._device_assignments": [], "framework.ops.Operation._colocation_dict": [], "framework.ops.Operation._output_types": ["six.moves.xrange", "client.pywrap_tf_session.TF_OperationOutputType", "client.pywrap_tf_session.TF_OperationNumOutputs", "<builtin>.int", "framework.ops.Operation._tf_output"], "framework.ops.Operation._tf_output": ["client.pywrap_tf_session.TF_Output"], "framework.ops.Operation._tf_input": ["client.pywrap_tf_session.TF_Input"], "client.pywrap_tf_session.TF_Input": [], "framework.ops.Operation._set_device": ["framework.ops._device_string", "framework.ops.Operation._set_device_from_string", "util.compat.as_str"], "framework.ops.Operation._set_device_from_string": ["client.pywrap_tf_session.SetRequestedDevice"], "client.pywrap_tf_session.SetRequestedDevice": [], "framework.ops.Operation._update_input": ["framework.ops.Operation._tf_input", "<builtin>.TypeError", "framework.ops._assert_same_graph", "client.pywrap_tf_session.UpdateEdge", "<builtin>.isinstance"], "framework.ops._assert_same_graph": ["<builtin>.getattr", "<builtin>.ValueError"], "client.pywrap_tf_session.UpdateEdge": [], "framework.ops.Operation._add_while_inputs": ["framework.ops._assert_same_graph", "<builtin>.isinstance", "<builtin>.TypeError", "client.pywrap_tf_session.AddWhileInputHack"], "client.pywrap_tf_session.AddWhileInputHack": [], "framework.ops.Operation._add_control_inputs": ["<builtin>.isinstance", "client.pywrap_tf_session.AddControlInput", "<builtin>.TypeError"], "client.pywrap_tf_session.AddControlInput": [], "framework.ops.Operation._add_control_input": ["<builtin>.isinstance", "client.pywrap_tf_session.AddControlInput", "<builtin>.TypeError"], "framework.ops.Operation._remove_all_control_inputs": ["client.pywrap_tf_session.RemoveAllControlInputs"], "client.pywrap_tf_session.RemoveAllControlInputs": [], "framework.ops.Operation._add_outputs": ["<builtin>.range", "framework.ops.Tensor.set_shape", "framework.ops.Tensor.__init__", "<builtin>.len"], "framework.ops.Operation.__str__": ["<builtin>.str"], "framework.ops.Operation.__repr__": [], "framework.ops.Operation.__tf_tensor__": ["<builtin>.TypeError"], "framework.ops.Operation.outputs": [], "framework.ops.Operation.inputs": ["<builtin>.tuple", "six.moves.map", "client.pywrap_tf_session.GetOperationInputs"], "client.pywrap_tf_session.GetOperationInputs": [], "framework.ops.Operation._input_types": ["client.pywrap_tf_session.TF_OperationNumInputs", "six.moves.xrange", "framework.ops.Operation._tf_input", "client.pywrap_tf_session.TF_OperationInputType", "framework.dtypes.as_dtype"], "client.pywrap_tf_session.TF_OperationNumInputs": [], "client.pywrap_tf_session.TF_OperationInputType": [], "framework.ops.Operation.control_inputs": ["client.pywrap_tf_session.TF_OperationGetControlInputs_wrapper", "client.pywrap_tf_session.TF_OperationName"], "client.pywrap_tf_session.TF_OperationGetControlInputs_wrapper": [], "framework.ops.Operation._control_outputs": ["client.pywrap_tf_session.TF_OperationGetControlOutputs_wrapper", "client.pywrap_tf_session.TF_OperationName"], "client.pywrap_tf_session.TF_OperationGetControlOutputs_wrapper": [], "framework.ops.Operation.graph": [], "framework.ops.Operation.node_def": ["framework.node_def_pb2.NodeDef", "client.pywrap_tf_session.TF_GetBuffer", "framework.c_api_util.tf_buffer", "client.pywrap_tf_session.TF_OperationToNodeDef", "util.compat.as_bytes"], "client.pywrap_tf_session.TF_OperationToNodeDef": [], "framework.ops.Operation.op_def": ["framework.ops.Graph._get_op_def"], "framework.ops.Operation.traceback": [], "framework.ops.Operation._set_attr": ["client.pywrap_tf_session.TF_DeleteBuffer", "client.pywrap_tf_session.TF_NewBufferFromString", "framework.ops.Operation._set_attr_with_buf", "util.compat.as_bytes"], "framework.ops.Operation._set_attr_with_buf": ["client.pywrap_tf_session.SetAttr"], "client.pywrap_tf_session.SetAttr": [], "framework.ops.Operation._set_func_attr": ["framework.attr_value_pb2.AttrValue", "framework.ops.Operation._set_attr", "framework.attr_value_pb2.NameAttrList"], "framework.ops.Operation._set_func_list_attr": ["attr_value_pb2.AttrValue.ListValue", "framework.attr_value_pb2.AttrValue", "framework.ops.Operation._set_attr", "framework.attr_value_pb2.NameAttrList"], "framework.ops.Operation._set_type_list_attr": ["attr_value_pb2.AttrValue.ListValue", "<builtin>.isinstance", "framework.attr_value_pb2.AttrValue", "framework.ops.Operation._set_attr"], "framework.ops.Operation._set_shape_list_attr": ["attr_value_pb2.AttrValue.ListValue", "framework.attr_value_pb2.AttrValue", "framework.ops.Operation._set_attr"], "framework.ops.Operation._clear_attr": ["client.pywrap_tf_session.ClearAttr"], "client.pywrap_tf_session.ClearAttr": [], "client.pywrap_tf_session.TF_OperationGetAttrValueProto": [], "framework.ops.Operation._get_attr_type": ["client.pywrap_tf_session.TF_OperationGetAttrType", "<builtin>.ValueError"], "client.pywrap_tf_session.TF_OperationGetAttrType": [], "framework.ops.Operation._get_attr_bool": ["client.pywrap_tf_session.TF_OperationGetAttrBool", "<builtin>.ValueError"], "client.pywrap_tf_session.TF_OperationGetAttrBool": [], "framework.ops.Operation._get_attr_int": ["client.pywrap_tf_session.TF_OperationGetAttrInt", "<builtin>.ValueError"], "client.pywrap_tf_session.TF_OperationGetAttrInt": [], "framework.ops.Operation.run": ["framework.ops._run_using_default_session"], "framework.ops._run_using_default_session": ["<builtin>.ValueError", "framework.ops.get_default_session"], "framework.ops.RegisterGradient.__init__": ["<builtin>.isinstance", "<builtin>.TypeError"], "framework.ops.RegisterGradient.__call__": [], "framework.ops.get_gradient_function": [], "framework.ops.set_shape_and_handle_data_for_outputs": [], "framework.ops.OpStats.__init__": [], "framework.ops.OpStats.statistic_type": [], "framework.ops.OpStats.value": [], "framework.ops.OpStats.__iadd__": ["<builtin>.ValueError"], "framework.ops.RegisterStatistics.__init__": ["<builtin>.isinstance", "<builtin>.TypeError"], "framework.ops.RegisterStatistics.__call__": [], "framework.ops.get_stats_for_node_def": ["framework.ops.OpStats.__init__"], "framework.ops.Graph._resource_creator_scope": ["copy.deepcopy", "<builtin>.isinstance", "<builtin>.RuntimeError"], "framework.ops.Graph.__init__": ["framework.versions_pb2.VersionDef", "threading.local", "util.object_identity.ObjectIdentitySet", "<builtin>.set", "threading.RLock", "python.tf2.enabled", "client.pywrap_tf_session.SetRequireShapeInferenceFns", "framework.traceable_stack.TraceableStack", "framework.ops.Graph.switch_to_thread_local", "framework.c_api_util.ScopedTFGraph", "framework.ops.uid", "util.lock_util.GroupLock"], "util.lock_util.GroupLock": [], "framework.traceable_stack.TraceableStack": [], "framework.c_api_util.ScopedTFGraph": [], "client.pywrap_tf_session.SetRequireShapeInferenceFns": [], "framework.ops.Graph.switch_to_thread_local": [], "framework.ops.Graph._variable_creator_scope": ["<builtin>.RuntimeError", "<builtin>.list"], "framework.ops.Graph._variable_creator_scope.<lambda1>": [], "framework.ops.Graph._resource_creator_stack": ["<builtin>.hasattr"], "framework.ops.Graph._variable_creator_stack": ["<builtin>.hasattr"], "framework.ops.Graph._check_not_finalized": ["<builtin>.RuntimeError"], "framework.ops.Graph._c_graph": [], "framework.ops.Graph.version": [], "framework.ops.Graph.graph_def_versions": ["framework.versions_pb2.VersionDef", "client.pywrap_tf_session.TF_GetBuffer", "client.pywrap_tf_session.TF_GraphVersions", "framework.c_api_util.tf_buffer", "util.compat.as_bytes"], "client.pywrap_tf_session.TF_GraphVersions": [], "framework.ops.Graph.seed": [], "framework.ops.Graph.finalized": [], "framework.ops.Graph.finalize": [], "framework.ops.Graph._unsafe_unfinalize": [], "framework.ops.Graph._get_control_flow_context": [], "framework.ops.Graph._set_control_flow_context": [], "framework.ops.Graph._copy_functions_to_graph_def": ["framework.function_pb2.GradientDef", "<builtin>.ValueError"], "framework.ops.Graph._as_graph_def": ["framework.graph_pb2.GraphDef", "<builtin>.len", "client.pywrap_tf_session.TF_GetBuffer", "framework.c_api_util.tf_buffer", "client.pywrap_tf_session.TF_GraphToGraphDef", "<builtin>.zip", "framework.ops._copy_handle_data_to_arg_def", "util.compat.as_bytes"], "client.pywrap_tf_session.TF_GraphToGraphDef": [], "framework.ops._copy_handle_data_to_arg_def": ["framework.ops.get_resource_handle_data"], "framework.ops.Graph.as_graph_def": ["framework.ops.Graph._as_graph_def"], "framework.ops.Graph._is_function": ["util.compat.as_str"], "framework.ops.Graph._get_function": ["util.compat.as_str"], "framework.ops.Graph._add_function": ["client.pywrap_tf_session.TF_GraphCopyFunction", "framework.ops.Graph._check_not_finalized", "util.compat.as_str", "<builtin>.ValueError"], "client.pywrap_tf_session.TF_GraphCopyFunction": [], "framework.ops.Graph.building_function": [], "framework.ops.Graph.create_op": ["<builtin>.enumerate", "framework.ops.Graph._create_op_internal", "<builtin>.isinstance", "<builtin>.TypeError"], "framework.ops.Graph._create_op_internal": ["framework.ops._NodeDef", "framework.ops.Graph._mutation_lock", "framework.ops.Operation.__init__", "framework.ops.name_from_scope_name", "framework.ops.Graph._check_not_finalized", "<builtin>.set", "framework.ops.Graph._create_op_helper", "framework.ops.Graph._control_dependencies_for_inputs", "framework.ops.Graph.unique_name"], "framework.ops.Graph.unique_name": [], "framework.ops.Graph._control_dependencies_for_inputs": [], "framework.ops.Graph._mutation_lock": [], "framework.ops.Graph._create_op_helper": ["<builtin>.sorted", "framework.ops.Operation.get_attr", "attr_value_pb2.AttrValue.ListValue", "framework.ops.Operation._set_attr", "framework.attr_value_pb2.AttrValue", "<builtin>.TypeError", "<builtin>.type", "<builtin>.set", "<builtin>.callable", "framework.ops.Graph._snapshot_colocation_stack_metadata", "framework.ops.Graph._apply_device_functions", "<builtin>.isinstance", "framework.ops.Operation._set_device", "util.compat.as_bytes", "framework.ops.Graph._record_op_seen_by_control_dependencies"], "framework.ops.Graph._create_op_from_tf_operation": ["framework.ops.Graph._create_op_helper", "framework.ops.Graph._check_not_finalized", "framework.ops.Operation.__init__"], "framework.ops.Graph._record_op_seen_by_control_dependencies": [], "framework.ops.Graph._apply_device_functions": ["framework.ops.Graph._snapshot_device_function_stack_metadata", "framework.ops.Operation._set_device_from_string"], "framework.ops.Graph._snapshot_colocation_stack_metadata": [], "framework.ops.Graph._add_new_tf_operations": ["framework.c_api_util.new_tf_operations", "framework.ops.Graph._control_dependencies_for_inputs", "framework.ops.Graph._check_not_finalized", "framework.ops.Graph._create_op_from_tf_operation"], "framework.ops.Graph.as_graph_element": ["framework.ops.Graph._as_graph_element_locked"], "framework.ops.Graph._as_graph_element_locked": ["framework.ops._as_graph_element", "<builtin>.repr", "<builtin>.len", "<builtin>.KeyError", "<builtin>.TypeError", "<builtin>.type", "<builtin>.int", "<builtin>.isinstance", "util.compat.as_str", "<builtin>.ValueError"], "framework.ops.Graph.get_operations": ["<builtin>.list"], "framework.ops.Graph.get_operation_by_name": ["framework.ops.Graph.as_graph_element", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "framework.ops.Graph._get_operation_by_name_unsafe": [], "framework.ops.Graph._get_operation_by_tf_operation": ["framework.ops.Graph._get_operation_by_name_unsafe", "client.pywrap_tf_session.TF_OperationName"], "framework.ops.Graph.get_tensor_by_name": ["framework.ops.Graph.as_graph_element", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "framework.ops.Graph._get_tensor_by_tf_output": ["framework.ops.Graph._get_operation_by_tf_operation"], "framework.ops.Graph._last_id": [], "client.pywrap_tf_session.TF_GraphGetOpDef": [], "framework.op_def_pb2.OpDef": [], "framework.ops.Graph.as_default": ["framework.ops._DefaultGraphStack.get_controller"], "framework.ops._DefaultGraphStack.get_controller": ["<builtin>.super", "eager.context.context", "eager.context.graph_mode"], "framework.ops.Graph.collections": ["<builtin>.list"], "framework.ops.Graph.add_to_collection": ["framework.ops.Graph._check_not_finalized"], "framework.ops.Graph.add_to_collections": ["framework.ops.Graph.add_to_collection", "<builtin>.isinstance", "<builtin>.set"], "framework.ops.Graph.get_collection_ref": [], "framework.ops.Graph.get_collection": ["re.compile", "<builtin>.list"], "framework.ops.Graph.get_all_collection_keys": ["<builtin>.isinstance"], "framework.ops.Graph.clear_collection": ["framework.ops.Graph._check_not_finalized"], "framework.ops.Graph._original_op": [], "framework.ops.Graph._name_stack": ["<builtin>.hasattr"], "framework.ops.Graph.name_scope": ["framework.ops.name_from_scope_name", "framework.ops.Graph.unique_name", "<builtin>.isinstance", "util.compat.as_str", "<builtin>.ValueError"], "framework.ops.Graph.get_name_scope": [], "framework.ops.Graph._colocate_with_for_gradient": ["framework.ops.Graph.colocate_with", "framework.ops._get_enclosing_context"], "framework.ops.Graph.colocate_with": ["framework.traceable_stack.TraceableStack", "framework.ops._op_to_colocate_with", "<builtin>.ValueError"], "framework.ops._get_enclosing_context": ["<builtin>.hasattr", "framework.ops._get_enclosing_context"], "framework.ops._op_to_colocate_with": ["<builtin>.hasattr", "<builtin>.isinstance", "framework.indexed_slices.internal_convert_to_tensor_or_indexed_slices"], "framework.ops.Graph._add_device_to_stack": ["framework.ops._UserDeviceSpec.__init__"], "framework.ops.Graph.device": ["framework.ops.Graph._add_device_to_stack", "<builtin>.RuntimeError"], "framework.ops.Graph._snapshot_device_function_stack_metadata": [], "framework.ops.Graph.container": [], "framework.ops.Graph._ControlDependenciesController.__init__": ["<builtin>.set"], "framework.ops.Graph._ControlDependenciesController.__enter__": ["framework.ops.Graph._set_control_flow_context", "framework.ops.Graph._get_control_flow_context", "framework.ops.Graph._push_control_dependencies_controller"], "framework.ops.Graph._push_control_dependencies_controller": [], "framework.ops.Graph._ControlDependenciesController.__exit__": ["framework.ops.Graph._set_control_flow_context", "framework.ops.Graph._pop_control_dependencies_controller"], "framework.ops.Graph._pop_control_dependencies_controller": [], "framework.ops.Graph._ControlDependenciesController.control_inputs": [], "framework.ops.Graph._ControlDependenciesController.add_op": ["<builtin>.isinstance"], "framework.ops.Graph._ControlDependenciesController.op_in_group": ["<builtin>.isinstance"], "framework.ops.Graph._current_control_dependencies": ["<builtin>.set"], "framework.ops.Graph.control_dependencies": ["<builtin>.hasattr", "framework.ops.Graph.as_graph_element", "framework.ops.Graph._ControlDependenciesController.__init__", "framework.ops.Graph._current_control_dependencies", "<builtin>.TypeError", "<builtin>.isinstance"], "framework.ops.Graph._attr_scope": ["<builtin>.callable", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "framework.ops.Graph._kernel_label_map": ["<builtin>.isinstance", "<builtin>.TypeError"], "framework.ops.Graph._override_gradient_function": [], "framework.ops.Graph.gradient_override_map": ["<builtin>.isinstance", "<builtin>.TypeError"], "framework.ops.Graph.prevent_feeding": [], "framework.ops.Graph.is_feedable": [], "framework.ops.Graph.prevent_fetching": [], "framework.ops.Graph.is_fetchable": ["<builtin>.isinstance"], "framework.ops.Graph._device_function_stack": ["<builtin>.hasattr"], "framework.ops.Graph._device_functions_outer_to_inner": ["<builtin>.reversed", "<builtin>.list"], "framework.ops.Graph._colocation_stack": ["<builtin>.hasattr"], "framework.ops.Graph._control_dependencies_stack": ["<builtin>.hasattr"], "framework.ops.Graph._distribution_strategy_stack": ["<builtin>.hasattr"], "framework.ops.Graph._global_distribute_strategy_scope": ["<builtin>.hasattr"], "framework.ops.Graph._session_run_lock": [], "framework.ops.device.combined": ["<builtin>.callable", "framework.ops.Graph.device", "framework.ops.get_default_graph", "eager.context.device"], "framework.ops.container": ["framework.ops.Graph.container", "framework.ops.get_default_graph"], "framework.ops._colocate_with_for_gradient": ["<builtin>.hasattr", "framework.ops.Graph.device", "eager.context.executing_eagerly", "framework.ops.Graph._colocate_with_for_gradient", "framework.ops.NullContextmanager.__init__", "framework.indexed_slices.internal_convert_to_tensor_or_indexed_slices", "framework.ops.get_default_graph", "<builtin>.isinstance", "framework.ops.device", "<builtin>.ValueError"], "framework.ops._DefaultStack.__init__": ["<builtin>.super"], "framework.ops._DefaultStack.get_default": [], "framework.ops._DefaultStack.reset": [], "framework.ops._DefaultStack.is_cleared": [], "framework.ops._DefaultStack.enforce_nesting": [], "framework.ops._DefaultStack": ["util.tf_contextlib.contextmanager"], "framework.ops._DefaultStack.get_controller": ["<builtin>.AssertionError", "<builtin>.type"], "framework.ops._DefaultGraphStack.get_default": ["framework.ops.Graph.__init__"], "framework.ops._DefaultGraphStack.__init__": ["<builtin>.super"], "framework.ops._DefaultGraphStack._GetGlobalDefaultGraph": ["framework.ops.Graph.__init__"], "framework.ops._DefaultGraphStack.reset": ["<builtin>.super"], "framework.ops._DefaultGraphStack": ["util.tf_contextlib.contextmanager"], "framework.ops._get_outer_context_and_inner_device_stack": ["<builtin>.reversed", "eager.context.context", "framework.ops.get_default_graph", "<builtin>.RuntimeError", "framework.ops._DefaultGraphStack._GetGlobalDefaultGraph"], "framework.ops.enable_eager_execution_internal": ["eager.context.Context", "<builtin>.TypeError", "<builtin>.type", "eager.context._set_context_locked", "<builtin>.isinstance", "<builtin>.ValueError"], "framework.ops.eager_run": ["framework.ops.enable_eager_execution", "absl.app.run"], "framework.ops.reset_default_graph": ["framework.ops._DefaultGraphStack.reset", "<builtin>.AssertionError", "framework.ops._DefaultStack.is_cleared"], "framework.ops._get_graph_from_inputs": ["framework.ops._as_graph_element", "<builtin>.getattr", "<builtin>.tuple", "<builtin>.TypeError", "<builtin>.type", "framework.ops._assert_same_graph", "framework.ops.get_default_graph", "<builtin>.isinstance", "<builtin>.ValueError"], "framework.ops.GraphKeys": ["util.deprecation.deprecated", "util.decorator_utils.classproperty"], "util.decorator_utils.classproperty": [], "framework.ops.GraphKeys.VARIABLES": [], "framework.ops.get_all_collection_keys": ["framework.ops.Graph.get_all_collection_keys", "framework.ops.get_default_graph"], "framework.ops.internal_name_scope_v1.__init__": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "framework.ops.name_scope_v2.__init__": ["<builtin>.isinstance", "<builtin>.ValueError"], "framework.ops.internal_name_scope_v1.name": [], "framework.ops.internal_name_scope_v1.__enter__": ["framework.ops.Graph.as_default", "framework.ops._get_graph_from_inputs", "sys.exc_info", "framework.ops.get_default_graph", "framework.ops.Graph.name_scope", "<builtin>.ValueError"], "framework.ops.internal_name_scope_v1.__exit__": [], "framework.ops.name_scope_v1.name": [], "framework.ops.name_scope_v1.__init__": ["framework.ops.name_scope"], "framework.ops.name_scope_v1.__enter__": ["framework.ops.internal_name_scope_v1.__enter__", "framework.ops.NullContextmanager.__enter__", "framework.ops.name_scope_v2.__enter__"], "framework.ops.name_scope_v2.__enter__": ["framework.ops.Graph.name_scope", "eager.context.context", "framework.ops.get_default_graph"], "framework.ops.name_scope_v1.__exit__": ["framework.ops.internal_name_scope_v1.__exit__", "framework.ops.name_scope_v2.__exit__", "framework.ops.NullContextmanager.__exit__"], "framework.ops.name_scope_v2.__exit__": [], "framework.ops.get_current_name_scope": ["eager.context.context", "framework.ops.Graph.get_name_scope", "framework.ops.get_default_graph"], "framework.ops.name_scope_v2.name": [], "framework.ops.name_scope_v2.__enter__._restore_name_scope": [], "framework.ops.name_scope_v2.__getstate__": [], "framework.ops.name_scope_v2.__setstate__": [], "framework.ops.op_scope": ["platform.tf_logging.warn", "framework.ops.name_scope"], "framework.ops.register_proto_function": ["<builtin>.callable", "<builtin>.TypeError"], "framework.ops._op_to_colocate_with.<lambda1>": [], "framework.ops.to_raw_op": ["util.tf_export.kwarg_only", "types.FunctionType"], "util.tf_export.kwarg_only": ["util.tf_decorator.make_decorator", "util.tf_inspect.getargspec"], "framework.ops.raise_from_not_ok_status": ["eager.core._status_to_exception"], "framework.ops.add_exit_callback_to_default_func_graph": ["framework.ops.get_default_graph", "<builtin>.RuntimeError"], "framework.ops._TensorIterator.__iter__": [], "framework.ops._TensorIterator.__next__": [], "framework.ops.set_int_list_attr": ["attr_value_pb2.AttrValue.ListValue", "framework.attr_value_pb2.AttrValue"], "framework.ops.get_resource_handle_data": ["CppShapeInferenceResult.HandleData.FromString", "client.pywrap_tf_session.GetHandleShapeAndType", "util.compat.as_bytes", "<builtin>.type"], "CppShapeInferenceResult.HandleData.FromString": [], "framework.op_callbacks": [], "framework.op_callbacks.clear_op_callbacks": ["framework.op_callbacks.remove_op_callback", "eager.context.context"], "framework.op_def_library": ["util.tf_contextlib.contextmanager", "util._pywrap_utils.RegisterPyObject"], "framework.op_def_library._Attr": ["<builtin>.TypeError"], "framework.op_def_library._AttrValue": ["<builtin>.TypeError"], "framework.op_def_library._SatisfiesTypeConstraint": ["framework.dtypes.as_dtype", "<builtin>.TypeError"], "framework.op_def_library._SatisfiesLengthConstraint": ["<builtin>.ValueError"], "framework.op_def_library._SatisfiesAllowedStringsConstraint": ["util.compat.as_text", "<builtin>.map", "<builtin>.ValueError"], "framework.op_def_library._SatisfiesIntMinimumConstraint": ["<builtin>.ValueError"], "framework.op_def_library._IsListParameter": [], "framework.op_def_library._NumTypeFields": [], "framework.op_def_library._IsListValue": ["<builtin>.isinstance"], "framework.op_def_library._Flatten": ["framework.op_def_library._IsListValue"], "framework.op_def_library._Restructure": ["<builtin>.len", "<builtin>.tuple"], "framework.op_def_library._MakeFloat": ["<builtin>.float", "<builtin>.repr", "<builtin>.isinstance", "<builtin>.TypeError"], "framework.op_def_library._MakeInt": ["<builtin>.repr", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.int"], "framework.op_def_library._MakeStr": ["util.compat.as_bytes", "<builtin>.repr", "<builtin>.isinstance", "<builtin>.TypeError"], "framework.op_def_library._MakeBool": ["<builtin>.repr", "<builtin>.isinstance", "<builtin>.TypeError"], "framework.op_def_library._MakeType": ["framework.dtypes.as_dtype", "<builtin>.repr", "<builtin>.TypeError"], "framework.op_def_library._MakeShape": ["<builtin>.TypeError", "platform.tf_logging.warning", "<builtin>.isinstance", "<builtin>.str", "<builtin>.ValueError", "framework.tensor_shape.as_shape"], "framework.op_def_library._MakeTensor": ["<builtin>.repr", "<builtin>.isinstance", "<builtin>.TypeError"], "framework.op_def_library._MakeFunc": ["<builtin>.TypeError", "framework.attr_value_pb2.NameAttrList", "<builtin>.isinstance", "framework.ops.get_default_graph", "<builtin>.hasattr"], "framework.op_def_library._MaybeColocateWith": ["framework.op_def_library._MaybeColocateWith", "framework.ops.colocate_with"], "framework.op_def_library.apply_op": ["framework.op_def_library._apply_op_helper", "framework.ops.convert_n_to_tensor", "<builtin>.isinstance", "framework.op_def_library._Restructure"], "framework.op_def_library._apply_op_helper": ["framework.op_def_library._Flatten", "framework.op_def_library._IsListParameter", "framework.op_def_library._IsListValue", "<builtin>.sorted", "<builtin>.TypeError", "framework.op_def_library.value_to_attr_value", "framework.op_def_library._MaybeColocateWith", "<builtin>.ValueError", "framework.op_def_registry.get", "framework.op_def_library._Attr", "<builtin>.isinstance", "framework.op_def_library._SatisfiesIntMinimumConstraint", "<builtin>.any", "<builtin>.all", "framework.ops.convert_to_tensor", "framework.op_callbacks.should_invoke_op_callbacks", "framework.ops._get_graph_from_inputs", "framework.dtypes.as_dtype", "framework.ops.internal_convert_n_to_tensor", "framework.op_callbacks.invoke_op_callbacks", "<builtin>.len", "<builtin>.zip", "framework.op_def_library._SatisfiesTypeConstraint", "framework.op_def_library._SatisfiesLengthConstraint", "<builtin>.NotImplementedError", "framework.op_def_library._SatisfiesAllowedStringsConstraint", "<builtin>.RuntimeError", "framework.op_def_library._AttrValue", "framework.ops.name_scope", "<builtin>.repr", "<builtin>.type", "<builtin>.tuple", "<builtin>.set", "framework.attr_value_pb2.AttrValue"], "framework.op_def_library.value_to_attr_value": ["framework.op_def_library._IsListValue", "<builtin>.TypeError", "framework.op_def_library._MakeFloat", "framework.op_def_library._MakeTensor", "framework.op_def_library._MakeFunc", "framework.op_def_library._MakeInt", "framework.op_def_library._MakeStr", "framework.op_def_library._MakeShape", "framework.op_def_library._MakeBool", "framework.op_def_library._MakeType", "framework.attr_value_pb2.AttrValue"], "util._pywrap_utils.RegisterPyObject": [], "framework.op_def_registry": ["threading.Lock"], "framework._op_def_registry.get": [], "framework.op_def_registry.sync": [], "framework.python_memory_checker": [], "framework.python_memory_checker._get_typename": ["<builtin>.getattr", "<builtin>.type"], "framework.python_memory_checker._create_python_object_snapshot": ["gc.collect", "collections.defaultdict", "framework.python_memory_checker._get_typename", "<builtin>.id", "gc.get_objects"], "gc.get_objects": [], "framework.python_memory_checker._snapshot_diff": ["<builtin>.len", "collections.Counter"], "framework.python_memory_checker._PythonMemoryChecker.__init__": [], "framework.python_memory_checker._PythonMemoryChecker.record_snapshot": ["framework._python_memory_checker_helper.mark_stack_trace_and_call"], "framework.python_memory_checker._PythonMemoryChecker.record_snapshot.<lambda1>": ["framework.python_memory_checker._create_python_object_snapshot"], "framework._python_memory_checker_helper.mark_stack_trace_and_call": [], "framework.python_memory_checker._PythonMemoryChecker.report": [], "framework.python_memory_checker._PythonMemoryChecker.assert_no_leak_if_all_possibly_except_one": ["framework.python_memory_checker._PythonMemoryChecker._snapshot_diff", "<builtin>.AssertionError", "collections.Counter", "<builtin>.range", "<builtin>.len"], "framework.python_memory_checker._PythonMemoryChecker._snapshot_diff": ["framework.python_memory_checker._PythonMemoryChecker._get_internal_object_ids", "framework.python_memory_checker._PythonMemoryChecker._snapshot_diff"], "framework.python_memory_checker._PythonMemoryChecker.assert_no_new_objects": ["framework.python_memory_checker._PythonMemoryChecker._snapshot_diff", "collections.Counter", "<builtin>.min", "platform.tf_logging.warning", "<builtin>.AssertionError", "<builtin>.max", "copy.deepcopy"], "framework.python_memory_checker._PythonMemoryChecker._get_internal_object_ids": ["<builtin>.set", "<builtin>.id"], "framework.random_seed": ["weakref.WeakKeyDictionary", "util.tf_export.tf_export", "util.deprecation.deprecated_endpoints"], "framework.random_seed._truncate_seed": [], "framework.registry": [], "framework.registry.Registry.__init__": [], "framework.registry.Registry.register": ["<builtin>.len", "traceback.extract_stack", "<builtin>.min", "platform.tf_logging.vlog", "<builtin>.KeyError"], "framework.registry.Registry.list": [], "framework.registry.Registry.lookup": ["<builtin>.LookupError", "util.compat.as_str"], "framework.smart_cond": ["util.tf_export.tf_export"], "client.pywrap_tf_session.TF_TryEvaluateConstant_wrapper": [], "framework.smart_cond.smart_case": ["ops.control_flow_ops._case_helper"], "ops.control_flow_ops._case_helper": ["<builtin>.zip", "framework.ops.name_scope", "<builtin>.list", "framework.ops.control_dependencies", "functools.partial", "ops.control_flow_ops._assert_at_most_n_true", "ops.control_flow_ops._case_verify_and_canonicalize_args", "<builtin>.reversed", "ops.control_flow_ops._case_create_default_action"], "framework.sparse_tensor": ["util.tf_export.tf_export", "collections.namedtuple", "util._pywrap_utils.RegisterType", "framework.type_spec.register_type_spec_from_value_converter"], "framework.sparse_tensor.SparseTensor.from_value": ["framework.sparse_tensor.is_sparse", "framework.sparse_tensor.SparseTensor.__init__", "<builtin>.TypeError"], "framework.sparse_tensor.SparseTensor.__init__": ["framework.tensor_util.constant_value_as_shape", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "framework.sparse_tensor.SparseTensor.get_shape": [], "framework.sparse_tensor.SparseTensor.indices": [], "framework.sparse_tensor.SparseTensor.values": [], "framework.sparse_tensor.SparseTensor.with_values": ["framework.sparse_tensor.SparseTensor.__init__"], "framework.sparse_tensor.SparseTensor.op": [], "framework.sparse_tensor.SparseTensor.dtype": [], "framework.sparse_tensor.SparseTensor.dense_shape": [], "framework.sparse_tensor.SparseTensor.shape": [], "framework.sparse_tensor.SparseTensor.graph": [], "framework.sparse_tensor.SparseTensor.__str__": [], "framework.sparse_tensor.SparseTensor.eval": ["framework.ops._eval_using_default_session"], "framework.sparse_tensor.SparseTensor._override_operator": ["framework.ops._override_helper"], "framework.sparse_tensor.SparseTensor._type_spec": ["framework.sparse_tensor.SparseTensorSpec.__init__"], "framework.sparse_tensor.SparseTensorSpec.__init__": ["framework.dtypes.as_dtype", "framework.tensor_shape.as_shape"], "framework.sparse_tensor.SparseTensor._shape_invariant_to_type_spec": ["<builtin>.ValueError", "framework.tensor_shape.unknown_shape", "framework.sparse_tensor.SparseTensorSpec.__init__", "framework.tensor_shape.dimension_value"], "framework.sparse_tensor.SparseTensor.consumers": ["internal.NativeObject._consumers"], "framework.sparse_tensor.SparseTensorSpec.<lambda1>": [], "framework.sparse_tensor.SparseTensorSpec._serialize": [], "framework.sparse_tensor.SparseTensorSpec.dtype": [], "framework.sparse_tensor.SparseTensorSpec.shape": [], "framework.sparse_tensor.SparseTensorSpec._component_specs": ["framework.tensor_spec.TensorSpec"], "framework.sparse_tensor.SparseTensorSpec._to_components": ["<builtin>.isinstance", "framework.sparse_tensor.SparseTensor.from_value"], "framework.sparse_tensor.SparseTensorSpec._from_components": ["<builtin>.all", "python.tf2.enabled", "<builtin>.isinstance", "framework.sparse_tensor.SparseTensor.__init__"], "framework.sparse_tensor.SparseTensorSpec._flat_tensor_specs": ["framework.tensor_spec.TensorSpec"], "framework.sparse_tensor.SparseTensorSpec._to_tensor_list": ["ops.gen_sparse_ops.serialize_sparse", "framework.sparse_tensor.SparseTensor.from_value"], "framework.sparse_tensor.SparseTensorSpec._to_batched_tensor_list": ["framework.tensor_util.constant_value_as_shape", "<builtin>.ValueError", "ops.gen_sparse_ops.serialize_many_sparse"], "ops.gen_sparse_ops.serialize_many_sparse": [], "framework.sparse_tensor.SparseTensorSpec._from_compatible_tensor_list": ["framework.constant_op.constant", "ops.gen_sparse_ops.deserialize_sparse", "ops.array_ops.stack", "<builtin>.any", "framework.ops.convert_to_tensor", "framework.sparse_tensor.SparseTensor.__init__", "ops.array_ops.unstack", "<builtin>.enumerate"], "ops.gen_sparse_ops.deserialize_sparse": [], "framework.sparse_tensor.SparseTensorSpec._batch": ["framework.tensor_shape.TensorShape", "framework.sparse_tensor.SparseTensorSpec.__init__"], "framework.sparse_tensor.SparseTensorSpec._unbatch": ["<builtin>.ValueError", "framework.sparse_tensor.SparseTensorSpec.__init__"], "framework.sparse_tensor.SparseTensorSpec._to_legacy_output_types": [], "framework.sparse_tensor.SparseTensorSpec._to_legacy_output_shapes": [], "framework.sparse_tensor.SparseTensorSpec._to_legacy_output_classes": [], "framework.sparse_tensor.SparseTensorSpec.from_value": ["<builtin>.TypeError", "framework.sparse_tensor.SparseTensor.from_value", "framework.sparse_tensor.SparseTensorSpec.__init__", "framework.sparse_tensor.SparseTensorSpec.from_value", "<builtin>.isinstance"], "framework.subscribe": ["contextlib.contextmanager"], "framework.subscribe._recursive_apply": ["framework.subscribe._recursive_apply", "<builtin>.dict", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.type", "<builtin>.list", "<builtin>.tuple", "framework.subscribe.subscribe.<lambda1>"], "framework.subscribe.subscribe.<lambda1>": ["framework.subscribe._scoped_subscribe"], "framework.subscribe._ControlOutputCache.__init__": [], "framework.subscribe._ControlOutputCache.calc_control_outputs": ["<builtin>.set"], "framework.subscribe._ControlOutputCache.get_control_outputs": ["framework.subscribe._ControlOutputCache.calc_control_outputs"], "framework.subscribe._subscribe_new": ["ops.array_ops.identity", "framework.ops.name_scope", "framework.subscribe._ControlOutputCache.get_control_outputs", "<builtin>.list", "framework.ops.control_dependencies"], "framework.subscribe._subscribe_extend": ["<builtin>.len", "<builtin>.isinstance", "framework.ops.name_scope"], "framework.subscribe._is_subscribed_identity": ["<builtin>.len", "re.match"], "framework.subscribe._subscribe": ["framework.subscribe._is_subscribed_identity", "<builtin>.len", "framework.subscribe._subscribe_extend", "platform.tf_logging.debug", "framework.subscribe._subscribe_new"], "framework.subscribe._preserve_control_flow_context": [], "framework.subscribe._scoped_subscribe": ["framework.ops.device", "framework.subscribe._subscribe", "framework.subscribe._preserve_control_flow_context"], "framework.subscribe.subscribe": ["framework.subscribe._recursive_apply", "framework.subscribe._ControlOutputCache.__init__", "<builtin>.hasattr"], "framework.tensor_conversion_registry": ["<builtin>.globals", "threading.Lock", "util.lazy_loader.LazyLoader", "collections.defaultdict", "util.tf_export.tf_export"], "framework.tensor_conversion_registry._default_conversion_function": [], "framework.tensor_shape": ["eager.monitoring.BoolGauge", "util.tf_export.tf_export"], "framework.tensor_shape.Dimension.__init__": ["<builtin>.int", "framework.tensor_shape.Dimension.__index__", "<builtin>.type", "six.raise_from", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "framework.tensor_shape.Dimension.__index__": [], "framework.tensor_shape.Dimension.__repr__": ["<builtin>.repr"], "framework.tensor_shape.Dimension.__str__": ["<builtin>.str"], "framework.tensor_shape.Dimension.__eq__": ["framework.tensor_shape.as_dimension"], "framework.tensor_shape.as_dimension": ["framework.tensor_shape.Dimension.__init__", "<builtin>.isinstance"], "framework.tensor_shape.Dimension.__ne__": ["framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__bool__": ["<builtin>.bool"], "framework.tensor_shape.Dimension.__int__": [], "framework.tensor_shape.Dimension.__long__": [], "framework.tensor_shape.Dimension.value": [], "framework.tensor_shape.Dimension.is_compatible_with": ["framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.assert_is_compatible_with": ["framework.tensor_shape.Dimension.is_compatible_with", "<builtin>.ValueError"], "framework.tensor_shape.Dimension.merge_with": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension", "framework.tensor_shape.Dimension.assert_is_compatible_with"], "framework.tensor_shape.Dimension.__add__": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__radd__": [], "framework.tensor_shape.Dimension.__sub__": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__rsub__": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__mul__": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__rmul__": [], "framework.tensor_shape.Dimension.__floordiv__": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__rfloordiv__": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__div__": [], "framework.tensor_shape.Dimension.__rdiv__": ["<builtin>.TypeError", "<builtin>.type"], "framework.tensor_shape.Dimension.__truediv__": ["<builtin>.TypeError", "<builtin>.type"], "framework.tensor_shape.Dimension.__rtruediv__": ["<builtin>.TypeError", "<builtin>.type"], "framework.tensor_shape.Dimension.__mod__": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__rmod__": ["framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__lt__": ["framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__le__": ["framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__gt__": ["framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__ge__": ["framework.tensor_shape.as_dimension"], "framework.tensor_shape.Dimension.__reduce__": [], "framework.tensor_shape.TensorShape.__init__": ["<builtin>.iter", "framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.as_dimension", "six.raise_from", "<builtin>.isinstance", "<builtin>.TypeError"], "framework.tensor_shape.TensorShape._v2_behavior": ["python.tf2.enabled"], "framework.tensor_shape.TensorShape.__repr__": [], "framework.tensor_shape.TensorShape.__str__": ["<builtin>.str"], "framework.tensor_shape.TensorShape.rank": ["<builtin>.len"], "framework.tensor_shape.TensorShape.dims": [], "framework.tensor_shape.TensorShape.ndims": [], "framework.tensor_shape.TensorShape.__len__": ["<builtin>.len", "<builtin>.ValueError"], "framework.tensor_shape.TensorShape.__bool__": [], "framework.tensor_shape.TensorShape.__iter__": ["<builtin>.iter", "<builtin>.ValueError"], "framework.tensor_shape.TensorShape.__getitem__": ["framework.tensor_shape.Dimension.__init__", "framework.tensor_shape.unknown_shape", "<builtin>.isinstance", "<builtin>.ValueError", "framework.tensor_shape.TensorShape.__init__"], "framework.tensor_shape.TensorShape.num_elements": ["framework.tensor_shape.TensorShape.as_list", "functools.reduce", "framework.tensor_shape.TensorShape.is_fully_defined"], "framework.tensor_shape.TensorShape.is_fully_defined": ["<builtin>.all"], "framework.tensor_shape.TensorShape.as_list": ["<builtin>.ValueError"], "framework.tensor_shape.TensorShape.merge_with": ["framework.tensor_shape.TensorShape.assert_same_rank", "<builtin>.zip", "<builtin>.ValueError", "framework.tensor_shape.as_shape", "framework.tensor_shape.TensorShape.__init__"], "framework.tensor_shape.TensorShape.assert_same_rank": ["<builtin>.ValueError", "framework.tensor_shape.as_shape"], "framework.tensor_shape.TensorShape.__add__": ["framework.tensor_shape.TensorShape.concatenate"], "framework.tensor_shape.TensorShape.concatenate": ["framework.tensor_shape.TensorShape.__init__", "framework.tensor_shape.unknown_shape", "framework.tensor_shape.as_shape"], "framework.tensor_shape.TensorShape.__radd__": ["framework.tensor_shape.TensorShape.__init__", "<builtin>.isinstance", "framework.tensor_shape.TensorShape.concatenate"], "framework.tensor_shape.TensorShape.assert_has_rank": ["<builtin>.ValueError"], "framework.tensor_shape.TensorShape.with_rank": ["framework.tensor_shape.unknown_shape", "framework.tensor_shape.TensorShape.merge_with", "<builtin>.ValueError"], "framework.tensor_shape.TensorShape.with_rank_at_least": ["<builtin>.ValueError"], "framework.tensor_shape.TensorShape.with_rank_at_most": ["<builtin>.ValueError"], "framework.tensor_shape.TensorShape.is_compatible_with": ["<builtin>.zip", "framework.tensor_shape.as_shape"], "framework.tensor_shape.TensorShape.assert_is_compatible_with": ["<builtin>.ValueError", "framework.tensor_shape.TensorShape.is_compatible_with"], "framework.tensor_shape.TensorShape.most_specific_compatible_shape": ["framework.tensor_shape.TensorShape.__init__", "framework.tensor_shape.unknown_shape", "<builtin>.zip", "framework.tensor_shape.as_shape"], "framework.tensor_shape.TensorShape.assert_is_fully_defined": ["<builtin>.ValueError", "framework.tensor_shape.TensorShape.is_fully_defined"], "framework.tensor_shape.TensorShape.as_proto": ["tensor_shape_pb2.TensorShapeProto.Dim", "framework.tensor_shape_pb2.TensorShapeProto"], "framework.tensor_shape.TensorShape.__eq__": ["framework.tensor_shape.as_shape"], "framework.tensor_shape.TensorShape.__ne__": ["<builtin>.ValueError", "framework.tensor_shape.as_shape"], "framework.tensor_shape.TensorShape.__reduce__": [], "framework.tensor_shape.TensorShape.__concat__": ["framework.tensor_shape.TensorShape.concatenate"], "framework.tensor_spec": ["framework.type_spec.register_type_spec_from_value_converter", "util._pywrap_utils.RegisterType"], "framework.tensor_spec.DenseSpec.<lambda1>": [], "framework.tensor_spec.DenseSpec": ["<builtin>.property"], "framework.tensor_spec.DenseSpec.__init__": ["framework.tensor_shape.TensorShape", "<builtin>.tuple", "framework.dtypes.as_dtype"], "framework.tensor_spec.DenseSpec.shape": [], "framework.tensor_spec.DenseSpec.dtype": [], "framework.tensor_spec.DenseSpec.name": [], "framework.tensor_spec.DenseSpec.is_compatible_with": ["<builtin>.isinstance"], "framework.tensor_spec.DenseSpec.__repr__": ["<builtin>.type", "<builtin>.repr"], "framework.tensor_spec.DenseSpec.__hash__": ["<builtin>.hash"], "framework.tensor_spec.DenseSpec.__eq__": ["<builtin>.type"], "framework.tensor_spec.DenseSpec.__ne__": [], "framework.tensor_spec.DenseSpec.most_specific_compatible_type": ["<builtin>.ValueError", "<builtin>.type"], "framework.tensor_spec.DenseSpec._serialize": [], "framework.tensor_spec.DenseSpec._to_legacy_output_types": [], "framework.tensor_spec.DenseSpec._to_legacy_output_shapes": [], "framework.tensor_spec.DenseSpec._to_legacy_output_classes": [], "framework.tensor_spec.TensorSpec.is_compatible_with": ["<builtin>.super"], "framework.tensor_spec.TensorSpec.from_spec": ["framework.tensor_spec.DenseSpec.__init__"], "framework.tensor_spec.TensorSpec.from_tensor": ["framework.tensor_spec.DenseSpec.__init__", "<builtin>.ValueError", "<builtin>.isinstance"], "framework.tensor_spec.TensorSpec.value_type": [], "framework.tensor_spec.TensorSpec._to_components": ["<builtin>.ValueError", "framework.ops.convert_to_tensor"], "framework.tensor_spec.TensorSpec._from_components": [], "framework.tensor_spec.TensorSpec._from_compatible_tensor_list": ["<builtin>.len"], "framework.tensor_spec.TensorSpec._to_batchable_tensor_list": ["framework.tensor_spec.TensorSpec._to_components", "<builtin>.ValueError"], "framework.tensor_spec.TensorSpec._batch": ["framework.tensor_shape.TensorShape", "framework.tensor_spec.DenseSpec.__init__"], "framework.tensor_spec.TensorSpec._unbatch": ["framework.tensor_spec.DenseSpec.__init__", "<builtin>.ValueError"], "framework.tensor_spec.BoundedTensorSpec.__init__": ["<builtin>.super", "numpy.shape", "framework.common_shapes.broadcast_shape", "numpy.array", "<builtin>.ValueError", "framework.tensor_shape.TensorShape"], "framework.tensor_spec.BoundedTensorSpec.from_spec": ["<builtin>.getattr", "framework.tensor_spec.BoundedTensorSpec.__init__", "framework.dtypes.as_dtype"], "framework.tensor_spec.BoundedTensorSpec.minimum": [], "framework.tensor_spec.BoundedTensorSpec.maximum": [], "framework.tensor_spec.BoundedTensorSpec.__repr__": ["<builtin>.repr"], "framework.tensor_spec.BoundedTensorSpec.__eq__": ["numpy.allclose", "<builtin>.super"], "framework.tensor_spec.BoundedTensorSpec.__hash__": ["<builtin>.hash"], "framework.tensor_spec.BoundedTensorSpec.__reduce__": [], "framework.tensor_spec.BoundedTensorSpec._serialize": [], "framework.tensor_spec.<lambda1>": ["framework.tensor_spec.DenseSpec.__init__"], "framework.tensor_spec.<lambda2>": ["framework.tensor_spec.DenseSpec.__init__"], "framework.tensor_util": ["util.tf_export.tf_export", "<builtin>.frozenset", "framework.tensor_util._generate_isinstance_check"], "framework.tensor_util.ExtractBitsFromFloat16": ["numpy.asarray"], "framework.tensor_util.SlowAppendFloat16ArrayToTensorProto": ["framework.tensor_util.ExtractBitsFromFloat16"], "framework.tensor_util._MediumAppendFloat16ArrayToTensorProto": ["framework.fast_tensor_util.AppendFloat16ArrayToTensorProto", "numpy.asarray"], "framework.fast_tensor_util.AppendFloat16ArrayToTensorProto": [], "framework.tensor_util.ExtractBitsFromBFloat16": ["numpy.asarray"], "framework.tensor_util.SlowAppendBFloat16ArrayToTensorProto": ["framework.tensor_util.ExtractBitsFromBFloat16"], "framework.tensor_util.FastAppendBFloat16ArrayToTensorProto": ["framework.fast_tensor_util.AppendBFloat16ArrayToTensorProto", "numpy.asarray"], "framework.fast_tensor_util.AppendBFloat16ArrayToTensorProto": [], "framework.tensor_util.SlowAppendFloat32ArrayToTensorProto": [], "framework.tensor_util.SlowAppendFloat64ArrayToTensorProto": [], "framework.tensor_util.SlowAppendIntArrayToTensorProto": [], "framework.tensor_util.SlowAppendInt64ArrayToTensorProto": [], "framework.tensor_util.SlowAppendQIntArrayToTensorProto": [], "framework.tensor_util.SlowAppendUInt32ArrayToTensorProto": [], "framework.tensor_util.SlowAppendUInt64ArrayToTensorProto": [], "framework.tensor_util.SlowAppendComplex64ArrayToTensorProto": [], "framework.tensor_util.SlowAppendComplex128ArrayToTensorProto": [], "framework.tensor_util.SlowAppendObjectArrayToTensorProto": ["util.compat.as_bytes"], "framework.tensor_util.SlowAppendBoolArrayToTensorProto": [], "framework.tensor_util.GetFromNumpyDTypeDict": ["six.iteritems"], "framework.tensor_util.GetNumpyAppendFn": ["framework.tensor_util.GetFromNumpyDTypeDict"], "framework.tensor_util._GetDenseDimensions": ["<builtin>.len", "framework.tensor_util._GetDenseDimensions", "<builtin>.isinstance"], "framework.tensor_util._FlattenToStrings": ["framework.tensor_util._FlattenToStrings", "<builtin>.isinstance"], "framework.tensor_util._check_failed": ["<builtin>.ValueError"], "framework.tensor_util._check_quantized": ["framework.tensor_util._generate_isinstance_check.inner", "framework.tensor_util._check_quantized", "framework.tensor_util._check_failed", "<builtin>.isinstance"], "framework.tensor_util._generate_isinstance_check.inner": ["<builtin>.issubclass", "framework.tensor_util._check_failed", "util.nest.flatten", "<builtin>.isinstance"], "framework.tensor_util._generate_isinstance_check": [], "framework.tensor_util._check_not_tensor": ["framework.tensor_util._check_failed", "util.nest.flatten", "<builtin>.isinstance"], "framework.tensor_util._AssertCompatible": ["<builtin>.type", "<builtin>.TypeError", "framework.tensor_util._check_not_tensor", "framework.tensor_util._generate_isinstance_check.inner", "<builtin>.repr", "framework.tensor_util._check_quantized"], "framework.tensor_util._is_array_like": ["<builtin>.callable", "<builtin>.getattr", "<builtin>.memoryview", "<builtin>.isinstance"], "<builtin>.memoryview": [], "framework.fast_tensor_util.AppendObjectArrayToTensorProto": [], "numpy.fromiter": [], "framework.tensor_util.ShapeEquals": ["<builtin>.all", "<builtin>.zip", "<builtin>.TypeError", "<builtin>.isinstance"], "framework.tensor_util._ConstantValue": ["<builtin>.type", "numpy.ndarray", "<builtin>.TypeError", "numpy.arange", "framework.dtypes.as_dtype", "numpy.full", "numpy.not_equal", "numpy.array", "framework.tensor_util.constant_value", "numpy.split", "numpy.concatenate", "<builtin>.isinstance", "numpy.prod", "numpy.equal", "framework.tensor_util.MakeNdarray"], "numpy.ndarray": [], "numpy.full": [], "numpy.equal": [], "numpy.not_equal": [], "framework.tensor_util.shape_tensor": ["<builtin>.tuple", "<builtin>.map", "<builtin>.isinstance", "framework.ops.convert_to_tensor"], "framework.tensor_util.maybe_set_static_shape": ["framework.tensor_util.shape_tensor", "framework.tensor_util.is_tf_type", "eager.context.executing_eagerly", "framework.ops.get_default_graph", "framework.tensor_util.constant_value_as_shape"], "framework.tfrt_utils": [], "framework.traceable_stack": [], "framework.traceable_stack.TraceableObject.__init__": [], "framework.traceable_stack.TraceableObject.set_filename_and_line_from_caller": ["inspect.currentframe", "<builtin>.range"], "framework.traceable_stack.TraceableObject.copy_metadata": [], "framework.traceable_stack.TraceableStack.__init__": [], "framework.traceable_stack.TraceableStack.push_obj": ["framework.traceable_stack.TraceableObject.__init__", "framework.traceable_stack.TraceableObject.set_filename_and_line_from_caller"], "framework.traceable_stack.TraceableStack.pop_obj": [], "framework.traceable_stack.TraceableStack.peek_top_obj": [], "framework.traceable_stack.TraceableStack.peek_objs": ["<builtin>.reversed"], "framework.traceable_stack.TraceableStack.peek_traceable_objs": ["<builtin>.reversed"], "framework.traceable_stack.TraceableStack.__len__": ["<builtin>.len"], "framework.traceable_stack.TraceableStack.copy": ["framework.traceable_stack.TraceableStack.__init__"], "framework.type_spec": ["re.compile", "util._pywrap_utils.RegisterType", "util.lazy_loader.LazyLoader", "util.tf_export.tf_export", "<builtin>.globals"], "framework.type_spec.TypeSpec": ["abc.abstractproperty", "abc.abstractmethod"], "framework.type_spec.TypeSpec.value_type": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.TypeSpec.is_compatible_with": ["framework.type_spec.TypeSpec._serialize", "framework.type_spec.TypeSpec.__is_compatible", "<builtin>.type", "framework.type_spec.type_spec_from_value", "<builtin>.isinstance"], "framework.type_spec.TypeSpec._serialize": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.TypeSpec.__is_compatible": ["<builtin>.all", "<builtin>.sorted", "framework.type_spec.TypeSpec.__same_types", "<builtin>.zip", "<builtin>.isinstance", "framework.type_spec.TypeSpec.__is_compatible", "<builtin>.len"], "framework.type_spec.TypeSpec.most_specific_compatible_type": ["framework.type_spec.TypeSpec._deserialize", "framework.type_spec.TypeSpec.__most_specific_compatible_type_serialization", "framework.type_spec.TypeSpec._serialize", "<builtin>.type", "<builtin>.ValueError"], "framework.type_spec.TypeSpec.__most_specific_compatible_type_serialization": ["<builtin>.sorted", "framework.type_spec.TypeSpec.__most_specific_compatible_type_serialization", "<builtin>.zip", "<builtin>.AssertionError", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "util.nest.is_namedtuple", "framework.type_spec.TypeSpec.__same_types", "<builtin>.tuple", "<builtin>.len", "collections.OrderedDict"], "framework.type_spec.TypeSpec._deserialize": [], "framework.type_spec.TypeSpec._with_tensor_ranks_only": ["framework.type_spec.TypeSpec._serialize", "util.nest.map_structure", "framework.type_spec.TypeSpec._deserialize"], "framework.type_spec.TypeSpec._with_tensor_ranks_only.relax": ["<builtin>.isinstance", "framework.tensor_shape.TensorShape"], "framework.type_spec.TypeSpec._to_components": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.TypeSpec._from_components": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.TypeSpec._component_specs": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.TypeSpec._to_tensor_list": ["framework.type_spec.TypeSpec._to_components", "util.nest.flatten"], "framework.type_spec.TypeSpec._from_tensor_list": ["framework.type_spec.TypeSpec._from_compatible_tensor_list", "framework.type_spec.TypeSpec.__check_tensor_list"], "framework.type_spec.TypeSpec.__check_tensor_list": ["<builtin>.zip", "<builtin>.enumerate", "framework.type_spec.type_spec_from_value", "<builtin>.ValueError", "<builtin>.len"], "framework.type_spec.TypeSpec._from_compatible_tensor_list": ["framework.type_spec.TypeSpec._from_components", "util.nest.pack_sequence_as"], "framework.type_spec.TypeSpec._flat_tensor_specs": ["util.nest.flatten"], "framework.type_spec.TypeSpec.__eq__": ["framework.type_spec.TypeSpec.__get_cmp_key", "<builtin>.type"], "framework.type_spec.TypeSpec.__get_cmp_key": ["framework.type_spec.TypeSpec.__make_cmp_key", "framework.type_spec.TypeSpec._serialize", "<builtin>.type"], "framework.type_spec.TypeSpec.__ne__": [], "framework.type_spec.TypeSpec.__hash__": ["framework.type_spec.TypeSpec.__get_cmp_key", "<builtin>.hash"], "framework.type_spec.TypeSpec.__reduce__": ["framework.type_spec.TypeSpec._serialize", "<builtin>.type"], "framework.type_spec.TypeSpec.__repr__": ["framework.type_spec.TypeSpec._serialize", "<builtin>.type"], "framework.type_spec.TypeSpec._to_legacy_output_types": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.TypeSpec._to_legacy_output_shapes": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.TypeSpec._to_legacy_output_classes": [], "framework.type_spec.TypeSpec.__make_cmp_key": ["<builtin>.sorted", "framework.type_spec.TypeSpec.__nested_list_to_tuple", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "framework.type_spec.TypeSpec.__make_cmp_key", "<builtin>.tuple"], "framework.type_spec.TypeSpec.__nested_list_to_tuple": ["<builtin>.isinstance", "framework.type_spec.TypeSpec.__nested_list_to_tuple", "<builtin>.tuple"], "framework.type_spec.TypeSpec.__same_types": ["util.nest.is_namedtuple", "util.nest.same_namedtuples", "<builtin>.type"], "util.nest.is_namedtuple": ["util._pywrap_utils.IsNamedtuple"], "util.nest.same_namedtuples": [], "framework.type_spec.BatchableTypeSpec": ["abc.abstractmethod"], "framework.type_spec.BatchableTypeSpec._batch": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.BatchableTypeSpec._unbatch": ["<builtin>.NotImplementedError", "<builtin>.type"], "framework.type_spec.BatchableTypeSpec._to_batched_tensor_list": ["<builtin>.any", "<builtin>.ValueError", "framework.type_spec.TypeSpec._to_tensor_list"], "framework.type_spec.register.decorator_fn": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.issubclass"], "framework.type_spec.get_name": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.issubclass"], "framework.type_spec.lookup": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "framework.versions": ["util.tf_export.tf_export"], "grappler.cluster": ["contextlib.contextmanager"], "grappler.cluster.Cluster.__init__": [], "grappler.cluster.Cluster.Shutdown": [], "grappler.cluster.Cluster.__del__": ["grappler.cluster.Cluster.Shutdown"], "grappler.cluster.Cluster.tf_cluster": [], "grappler.cluster.Cluster.ListDevices": ["device_properties_pb2.NamedDevice.FromString"], "device_properties_pb2.NamedDevice.FromString": [], "grappler.cluster.Cluster.ListAvailableOps": [], "grappler.cluster.Cluster.GetSupportedDevices": [], "grappler.cluster.Cluster.EstimatePerformance": [], "grappler.cluster.Cluster.MeasureCosts": ["step_stats_pb2.StepStats.FromString", "op_performance_data_pb2.OpPerformance.FromString"], "op_performance_data_pb2.OpPerformance.FromString": [], "step_stats_pb2.StepStats.FromString": [], "grappler.cluster.Cluster.DeterminePeakMemoryUsage": [], "grappler.cluster.Provision": ["grappler.cluster.Cluster.__init__", "grappler.cluster.Cluster.Shutdown"], "grappler.cost_analyzer": [], "grappler.cost_analyzer.GenerateCostReport": ["grappler._pywrap_cost_analyzer.GenerateCostReport", "grappler.cluster.Cluster"], "grappler.cluster.Cluster": [], "grappler._pywrap_cost_analyzer.GenerateCostReport": [], "grappler.cost_analyzer.GenerateMemoryReport": ["<builtin>.str", "grappler.item.Item", "grappler.cluster.Cluster"], "grappler.item.Item": [], "grappler.cost_analyzer_tool": ["absl.app.run", "argparse.ArgumentParser"], "grappler.cost_analyzer_tool.get_metagraph": ["protobuf.meta_graph_pb2.CollectionDef", "platform.gfile.GFile", "framework.importer.import_graph_def", "protobuf.meta_graph_pb2.MetaGraphDef", "framework.graph_pb2.GraphDef", "protobuf.saved_model_pb2.SavedModel", "framework.ops.get_default_graph", "protobuf.text_format.Merge", "training.saver.export_meta_graph", "<builtin>.ValueError"], "protobuf.saved_model_pb2.SavedModel": [], "grappler.cost_analyzer_tool.main": ["<builtin>.print", "protobuf.config_pb2.ConfigProto", "grappler.cost_analyzer.GenerateCostReport", "grappler.tf_optimizer.OptimizeGraph", "protobuf.text_format.Merge", "grappler.cost_analyzer.GenerateMemoryReport", "grappler.cost_analyzer_tool.get_metagraph"], "grappler.graph_analyzer": ["absl.app.run", "argparse.ArgumentParser"], "grappler.graph_analyzer.main": ["grappler._pywrap_graph_analyzer.GraphAnalyzer"], "grappler._pywrap_graph_analyzer.GraphAnalyzer": [], "grappler.item": [], "grappler.item.Item.__init__": ["grappler.item.Item._BuildTFItem", "protobuf.meta_graph_pb2.MetaGraphDef"], "grappler.item.Item._BuildTFItem": [], "grappler.item.Item.IdentifyImportantOps": [], "grappler.item.Item.GetOpProperties": ["OpInfo.TensorProperties.FromString"], "OpInfo.TensorProperties.FromString": [], "grappler.item.Item.GetColocationGroups": [], "grappler.item.Item.metagraph": [], "grappler.item.Item.tf_item": ["grappler.item.Item._BuildTFItem"], "grappler.model_analyzer": [], "grappler.model_analyzer.GenerateModelReport": ["grappler._pywrap_model_analyzer.GenerateModelReport"], "grappler._pywrap_model_analyzer.GenerateModelReport": [], "grappler.tf_optimizer": [], "grappler._pywrap_tf_optimizer.TF_OptimizeGraph": [], "keras.activations": ["util.tf_export.keras_export", "util.dispatch.add_dispatch_support"], "keras.activations.softmax": ["<builtin>.ValueError", "ops.math_ops.reduce_max", "ops.nn.softmax", "ops.math_ops.exp", "<builtin>.isinstance", "ops.math_ops.reduce_sum"], "keras.activations.elu": ["keras.backend.elu"], "keras.activations.selu": ["ops.nn.selu"], "ops.nn.selu": [], "keras.activations.softplus": ["ops.math_ops.softplus"], "ops.math_ops.softplus": ["ops.gen_nn_ops.softplus"], "keras.activations.softsign": ["ops.nn.softsign"], "ops.nn.softsign": [], "keras.activations.swish": ["ops.nn.swish"], "ops.nn.swish": [], "keras.activations.relu": ["keras.backend.relu"], "keras.activations.gelu": ["ops.nn.gelu"], "ops.nn.gelu": [], "keras.activations.tanh": ["ops.nn.tanh"], "keras.activations.sigmoid": ["ops.nn.sigmoid"], "keras.activations.exponential": ["ops.math_ops.exp"], "keras.activations.hard_sigmoid": ["keras.backend.hard_sigmoid"], "keras.backend.hard_sigmoid": ["keras.backend._constant_to_tensor", "ops.clip_ops.clip_by_value", "ops.math_ops.add", "ops.math_ops.multiply"], "keras.activations.linear": [], "keras.backend": ["utils.tf_contextlib.contextmanager", "util.tf_export.keras_export", "tracking.util.register_session_provider", "<builtin>.open", "threading.local", "keras.backend_config.set_image_data_format", "docs.doc_controls.do_not_generate_docs", "json.load", "keras.backend.ContextValueCache.__init__", "os.path.expanduser", "keras.backend_config.image_data_format", "keras.backend_config.floatx", "keras.backend_config.set_epsilon", "util.keras_deps.register_get_session_function", "keras.backend_config.epsilon", "os.path.exists", "keras.backend_config.set_floatx", "util.dispatch.add_dispatch_support", "<builtin>.set", "weakref.WeakKeyDictionary", "<builtin>.isinstance", "keras.backend._DummyEagerGraph.__init__", "os.environ.get", "os.makedirs", "json.dumps", "util.keras_deps.register_clear_session_function", "os.path.join"], "keras.backend._DummyEagerGraph.__init__": ["<builtin>.super"], "keras.backend_config.floatx": [], "keras.backend.reset_uids": [], "keras.backend.clear_session": ["keras.backend.reset_uids", "keras.backend.get_graph", "weakref.WeakKeyDictionary.pop", "eager.context.executing_eagerly", "weakref.WeakKeyDictionary.clear", "keras.backend.ContextValueCache.setdefault", "framework.ops.reset_default_graph", "eager.context.context"], "weakref.WeakKeyDictionary.clear": [], "keras.backend.ContextValueCache.setdefault": ["keras.backend._default_learning_phase", "keras.backend.ContextValueCache._key", "utils.object_identity.ObjectIdentityWeakSet", "weakref.WeakKeyDictionary.setdefault"], "weakref.WeakKeyDictionary.pop": [], "util.keras_deps.register_clear_session_function": [], "keras.backend.manual_variable_initialization": [], "keras.backend._mark_func_graph_as_unsaveable": ["keras.backend.is_placeholder"], "keras.backend._default_learning_phase": ["eager.context.executing_eagerly", "ops.array_ops.placeholder_with_default", "keras.backend.name_scope"], "keras.backend.set_learning_phase": ["warnings.warn", "keras.backend.deprecated_internal_set_learning_phase"], "keras.backend.deprecated_internal_set_learning_phase": ["framework.ops.init_scope", "keras.backend.get_graph", "<builtin>.ValueError", "eager.context.executing_eagerly"], "keras.backend.deprecated_internal_learning_phase_scope": ["keras.backend.get_graph", "<builtin>.ValueError", "framework.ops.init_scope", "eager.context.executing_eagerly", "weakref.WeakKeyDictionary.get", "keras.backend.deprecated_internal_set_learning_phase"], "weakref.WeakKeyDictionary.get": [], "keras.backend._as_graph_element": ["<builtin>.getattr", "<builtin>.callable"], "keras.backend._assert_same_graph": ["<builtin>.ValueError", "<builtin>.getattr"], "keras.backend.get_default_session_config": ["eager.context.get_config", "os.environ.get", "platform.tf_logging.warning"], "util.keras_deps.register_get_session_function": [], "tracking.util.register_session_provider": [], "keras.backend.get_default_graph_uid_map": ["framework.ops.get_default_graph", "collections.defaultdict"], "keras.backend._TfDeviceCaptureOp.__init__": [], "keras.backend._TfDeviceCaptureOp._set_device": ["<builtin>.isinstance"], "keras.backend._TfDeviceCaptureOp._set_device_from_string": [], "keras.backend._get_current_tf_device": ["keras.backend.get_graph", "python.tf2.enabled", "device_spec.DeviceSpecV2.from_string", "device_spec.DeviceSpecV1.from_string", "keras.backend._TfDeviceCaptureOp.__init__"], "keras.backend._is_current_explicit_device": ["<builtin>.ValueError", "keras.backend._get_current_tf_device"], "keras.backend._get_available_gpus": ["framework.ops.executing_eagerly_outside_functions", "framework.config.list_logical_devices", "keras.backend.get_session"], "keras.backend._has_nchw_support": ["<builtin>.bool", "keras.backend._is_current_explicit_device", "keras.backend._get_available_gpus"], "keras.backend._constant_to_tensor": ["framework.constant_op.constant"], "keras.backend._to_tensor": ["framework.ops.convert_to_tensor_v2_with_dispatch"], "keras.backend.to_dense": ["ops.sparse_ops.sparse_tensor_to_dense", "keras.backend.is_sparse"], "keras.backend.track_tf_optimizer": ["eager.context.executing_eagerly"], "ops.variables.variables_initializer": ["ops.control_flow_ops.no_op", "ops.control_flow_ops.group", "eager.context.executing_eagerly"], "keras.backend.placeholder.tensor_spec_to_placeholder": ["ops.array_ops.placeholder"], "keras.backend.dtype_numpy": ["framework.dtypes.as_dtype"], "keras.backend.ones": ["framework.dtypes.as_dtype", "framework.ops.init_scope", "keras.backend_config.floatx", "ops.array_ops.ones", "keras.backend.all", "keras.backend.variable"], "keras.backend.eye": ["framework.dtypes.as_dtype", "keras.backend.variable", "keras.backend_config.floatx", "ops.linalg_ops.eye"], "keras.backend.ones_like": ["ops.array_ops.ones_like"], "keras.backend.identity": ["ops.array_ops.identity"], "keras.backend.random_uniform_variable": ["framework.dtypes.as_dtype", "keras.backend_config.floatx", "ops.init_ops.random_uniform_initializer", "numpy.random.randint", "keras.backend.variable"], "keras.backend.random_normal_variable": ["framework.dtypes.as_dtype", "ops.init_ops.random_normal_initializer", "keras.backend_config.floatx", "numpy.random.randint", "keras.backend.variable"], "keras.backend.count_params": ["numpy.prod"], "keras.backend.update_add": ["ops.state_ops.assign_add"], "ops.state_ops.assign_add": ["ops.gen_state_ops.assign_add"], "keras.backend.update_sub": ["ops.state_ops.assign_sub"], "keras.backend.moving_average_update": ["python.tf2.enabled", "ops.math_ops.cast", "training.moving_averages.assign_moving_average"], "training.moving_averages.assign_moving_average": ["distribute.distribution_strategy_context.get_cross_replica_context", "framework.ops.name_scope", "distribute.distribution_strategy_context.get_replica_context", "training.moving_averages.assign_moving_average.update", "ops.math_ops.cast", "framework.ops.convert_to_tensor"], "ops.sparse_ops.sparse_tensor_dense_matmul": ["ops.sparse_ops.sparse_tensor_dense_matmul", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.array_ops.transpose", "<builtin>.isinstance", "ops.gen_sparse_ops.sparse_tensor_dense_mat_mul", "ops.sparse_ops._convert_to_sparse_tensor"], "keras.backend.gather": ["ops.array_ops.gather"], "keras.backend.min": ["ops.math_ops.reduce_min"], "keras.backend.prod": ["ops.math_ops.reduce_prod"], "keras.backend.cumsum": ["ops.math_ops.cumsum"], "keras.backend.cumprod": ["ops.math_ops.cumprod"], "keras.backend.var": ["ops.math_ops.reduce_variance", "keras.backend_config.floatx", "ops.math_ops.cast"], "keras.backend.std": ["ops.math_ops.reduce_std", "keras.backend_config.floatx", "ops.math_ops.cast"], "keras.backend.argmin": ["ops.math_ops.argmin"], "keras.backend.square": ["ops.math_ops.square"], "keras.backend.abs": ["ops.math_ops.abs"], "keras.backend.sqrt": ["keras.backend._constant_to_tensor", "ops.math_ops.maximum", "ops.math_ops.sqrt"], "keras.backend.exp": ["ops.math_ops.exp"], "keras.backend.log": ["ops.math_ops.log"], "keras.backend.logsumexp": ["ops.math_ops.reduce_logsumexp"], "keras.backend.round": ["ops.math_ops.round"], "keras.backend.sign": ["ops.math_ops.sign"], "keras.backend.pow": ["ops.math_ops.pow"], "keras.backend.clip": ["<builtin>.isinstance", "ops.clip_ops.clip_by_value"], "keras.backend.equal": ["ops.math_ops.equal"], "keras.backend.not_equal": ["ops.math_ops.not_equal"], "keras.backend.greater": ["ops.math_ops.greater"], "keras.backend.greater_equal": ["ops.math_ops.greater_equal"], "keras.backend.less": ["ops.math_ops.less"], "keras.backend.less_equal": ["ops.math_ops.less_equal"], "keras.backend.maximum": ["ops.math_ops.maximum"], "keras.backend.minimum": ["ops.math_ops.minimum"], "keras.backend.sin": ["ops.math_ops.sin"], "keras.backend.cos": ["ops.math_ops.cos"], "keras.backend._regular_normalize_batch_in_training": ["ops.nn.batch_normalization", "ops.nn.moments"], "keras.backend._broadcast_normalize_batch_in_training": ["ops.array_ops.shape", "ops.array_ops.stack", "ops.array_ops.reshape", "<builtin>.range", "ops.nn.batch_normalization", "ops.nn.moments", "keras.backend.ndim"], "keras.backend._fused_normalize_batch_in_training": ["ops.nn.fused_batch_norm", "<builtin>.list", "framework.constant_op.constant"], "keras.backend.normalize_batch_in_training": ["keras.backend._has_nchw_support", "<builtin>.range", "keras.backend._broadcast_normalize_batch_in_training", "<builtin>.list", "keras.backend._regular_normalize_batch_in_training", "<builtin>.sorted", "keras.backend.ndim", "keras.backend._fused_normalize_batch_in_training"], "keras.backend.batch_normalization": ["keras.backend._has_nchw_support", "ops.array_ops.reshape", "ops.nn.batch_normalization", "keras.backend.zeros_like", "keras.backend.ones_like", "ops.nn.fused_batch_norm", "keras.backend.ndim"], "keras.backend.permute_dimensions": ["ops.array_ops.transpose"], "keras.backend.arange": ["ops.math_ops.range", "keras.backend.cast"], "keras.backend.tile": ["<builtin>.isinstance", "ops.array_ops.tile"], "keras.backend.batch_flatten": ["keras.backend.shape", "ops.array_ops.stack", "keras.backend.prod", "ops.array_ops.reshape"], "keras.backend.expand_dims": ["ops.array_ops.expand_dims"], "keras.backend.squeeze": ["ops.array_ops.squeeze"], "keras.backend_config.image_data_format": [], "keras.backend.one_hot": ["ops.array_ops.one_hot"], "keras.backend.print_tensor": ["keras.backend.get_graph", "<builtin>.hasattr", "framework.ops.control_dependencies", "ops.logging_ops.print_v2", "<builtin>.isinstance", "ops.array_ops.identity"], "ops.logging_ops.print_v2": ["<builtin>.isinstance", "collections.OrderedDict", "pprint.pformat", "util.nest.flatten", "<builtin>.ValueError", "ops.logging_ops._generate_placeholder_string", "ops.gen_logging_ops.print_v2", "util.nest.pack_sequence_as", "util.nest.map_structure", "ops.string_ops.string_format", "ops.logging_ops._is_filepath", "framework.tensor_util.is_tf_type", "<builtin>.sorted", "<builtin>.len", "<builtin>.str"], "keras.backend.GraphExecutionFunction.__init__": ["<builtin>.ValueError", "<builtin>.TypeError", "framework.ops.control_dependencies", "<builtin>.isinstance", "ops.array_ops.identity", "ops.state_ops.assign", "util.nest.flatten", "keras.backend.cast_variables_to_tensor", "ops.control_flow_ops.group"], "keras.backend.cast_variables_to_tensor": ["util.nest.map_structure"], "keras.backend.GraphExecutionFunction._make_callable": ["<builtin>.zip", "<builtin>.list", "protobuf.config_pb2.CallableOptions", "keras.backend._as_graph_element", "ops.math_ops.cast", "<builtin>.sorted"], "keras.backend.GraphExecutionFunction._call_fetch_callbacks": ["<builtin>.zip"], "keras.backend.GraphExecutionFunction._eval_if_composite": ["utils.tf_utils.is_extension_type"], "keras.backend.GraphExecutionFunction.__call__": ["framework.dtypes.as_dtype", "numpy.asarray", "util.nest.map_structure", "<builtin>.zip", "keras.backend.GraphExecutionFunction._call_fetch_callbacks", "util.nest.pack_sequence_as", "util.nest.flatten", "keras.backend.GraphExecutionFunction._make_callable", "framework.tensor_util.is_tf_type", "<builtin>.len", "keras.backend.get_session", "<builtin>.sorted"], "keras.backend.function.func": ["utils.tf_utils.sync_to_numpy_or_python_type"], "keras.backend.gradients": ["ops.gradients.gradients"], "keras.backend.stop_gradient": ["ops.array_ops.stop_gradient", "<builtin>.isinstance", "<builtin>.map"], "keras.backend.rnn.swap_batch_timestep": ["<builtin>.range", "<builtin>.list", "ops.array_ops.transpose", "<builtin>.len"], "keras.backend.rnn._expand_mask": ["<builtin>.ValueError", "<builtin>.range", "util.nest.is_nested", "ops.array_ops.expand_dims", "ops.array_ops.tile", "<builtin>.len"], "keras.backend.rnn._process_single_input_t": ["ops.array_ops.unstack"], "keras.backend.rnn._get_input_tensor": ["util.nest.pack_sequence_as"], "keras.backend.rnn.<dict1>.<lambda1>": [], "keras.backend.rnn.masking_fn": ["ops.math_ops.greater", "ops.math_ops.less"], "keras.backend.rnn.compute_masked_output": ["<builtin>.zip", "<builtin>.tuple", "ops.array_ops.where_v2", "keras.backend.rnn._expand_mask", "<builtin>.len", "ops.array_ops.where"], "keras.backend.rnn._step": ["<builtin>.zip", "keras.backend.rnn.compute_masked_output", "<builtin>.isinstance", "<builtin>.tuple", "util.nest.flatten", "keras.backend.rnn.masking_fn", "util.nest.pack_sequence_as"], "keras.backend.rnn.set_shape": ["<builtin>.isinstance"], "keras.backend.switch": ["<builtin>.str", "<builtin>.ValueError", "ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.reshape", "ops.array_ops.where_v2", "<builtin>.callable", "ops.array_ops.ones_like", "ops.control_flow_ops.cond", "ops.array_ops.tile", "ops.math_ops.cast", "keras.backend.ndim"], "keras.backend.switch.then_expression_fn": [], "keras.backend.switch.else_expression_fn": [], "keras.backend.in_test_phase": ["keras.backend.in_train_phase"], "ops.nn.leaky_relu": [], "ops.nn.relu": [], "ops.nn.relu6": [], "ops.nn.elu": [], "keras.backend.softplus": ["ops.math_ops.softplus"], "keras.backend.softsign": ["ops.nn.softsign"], "keras.backend.categorical_crossentropy": ["keras.backend._constant_to_tensor", "keras.backend_config.epsilon", "<builtin>.hasattr", "ops.nn.softmax_cross_entropy_with_logits_v2", "warnings.warn", "<builtin>.isinstance", "ops.math_ops.reduce_sum", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.clip_ops.clip_by_value", "ops.math_ops.log", "<builtin>.len"], "keras.backend.sparse_categorical_crossentropy": ["keras.backend._constant_to_tensor", "<builtin>.hasattr", "keras.backend._is_symbolic_tensor", "ops.math_ops.log", "keras.backend.get_graph", "<builtin>.len", "keras.backend_config.epsilon", "<builtin>.ValueError", "itertools.chain", "warnings.warn", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.cast", "keras.backend.flatten", "ops.array_ops.shape_v2", "keras.backend.any", "ops.nn.sparse_softmax_cross_entropy_with_logits_v2", "ops.array_ops.reshape", "<builtin>.range", "<builtin>.isinstance", "ops.clip_ops.clip_by_value", "<builtin>.list", "ops.array_ops.transpose"], "keras.backend._is_symbolic_tensor": ["<builtin>.isinstance", "framework.tensor_util.is_tf_type"], "ops.nn.sparse_softmax_cross_entropy_with_logits_v2": [], "keras.backend.binary_crossentropy": ["keras.backend._constant_to_tensor", "keras.backend_config.epsilon", "<builtin>.hasattr", "<builtin>.isinstance", "warnings.warn", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.clip_ops.clip_by_value", "ops.math_ops.log", "<builtin>.len", "ops.nn.sigmoid_cross_entropy_with_logits"], "keras.backend.sigmoid": ["ops.nn.sigmoid"], "keras.backend.tanh": ["ops.nn.tanh"], "ops.nn.dropout_v2": [], "keras.backend.l2_normalize": ["ops.nn.l2_normalize"], "keras.backend.in_top_k": ["ops.nn.in_top_k"], "ops.nn.in_top_k": [], "keras.backend._preprocess_conv1d_input": ["keras.backend._has_nchw_support", "ops.array_ops.transpose"], "keras.backend._preprocess_conv2d_input": ["keras.backend._has_nchw_support", "ops.array_ops.transpose"], "keras.backend._preprocess_conv3d_input": ["keras.backend._has_nchw_support", "ops.array_ops.transpose"], "keras.backend._preprocess_padding": ["<builtin>.str", "<builtin>.ValueError"], "keras.backend.conv1d": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "keras.backend.temporal_padding", "keras.backend._preprocess_conv1d_input", "ops.nn.convolution", "ops.array_ops.transpose", "keras.backend._preprocess_padding"], "ops.nn.convolution": [], "ops.nn.conv2d_transpose": [], "ops.nn.atrous_conv2d_transpose": [], "keras.backend.separable_conv1d": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "<builtin>.isinstance", "ops.array_ops.squeeze", "<builtin>.tuple", "keras.backend._preprocess_conv1d_input", "ops.nn.separable_conv2d", "ops.array_ops.transpose", "ops.array_ops.expand_dims", "keras.backend._preprocess_padding"], "keras.backend.separable_conv2d": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "<builtin>.isinstance", "keras.backend._preprocess_conv2d_input", "<builtin>.tuple", "ops.nn.separable_conv2d", "ops.array_ops.transpose", "keras.backend._preprocess_padding", "<builtin>.len"], "ops.nn.depthwise_conv2d": [], "keras.backend.conv3d": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "keras.backend._preprocess_conv3d_input", "ops.nn.convolution", "ops.array_ops.transpose", "keras.backend._preprocess_padding"], "keras.backend.conv3d_transpose": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "ops.array_ops.shape", "ops.array_ops.stack", "<builtin>.isinstance", "keras.backend._preprocess_conv3d_input", "<builtin>.tuple", "ops.array_ops.transpose", "<builtin>.list", "keras.backend._preprocess_padding", "ops.nn.conv3d_transpose"], "keras.backend.pool2d": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "ops.nn.max_pool", "keras.backend._preprocess_conv2d_input", "ops.nn.avg_pool", "ops.array_ops.transpose", "keras.backend._preprocess_padding", "<builtin>.len"], "ops.nn.max_pool": [], "ops.nn.avg_pool": [], "keras.backend.pool3d": ["<builtin>.str", "<builtin>.ValueError", "keras.backend_config.image_data_format", "ops.nn.max_pool3d", "keras.backend._preprocess_conv3d_input", "ops.array_ops.transpose", "ops.nn.avg_pool3d", "keras.backend._preprocess_padding"], "ops.nn.max_pool3d": [], "ops.nn.avg_pool3d": [], "keras.backend.local_conv1d": ["keras.backend.local_conv"], "keras.backend.local_conv2d": ["keras.backend.local_conv"], "keras.backend.random_binomial": ["keras.backend.random_bernoulli", "warnings.warn"], "keras.backend.random_bernoulli": ["ops.array_ops.where_v2", "keras.backend_config.floatx", "ops.array_ops.zeros", "ops.array_ops.ones", "ops.random_ops.random_uniform", "numpy.random.randint"], "keras.backend.truncated_normal": ["numpy.random.randint", "keras.backend_config.floatx", "ops.random_ops.truncated_normal"], "keras.backend.ctc_label_dense_to_sparse": ["keras.backend.reverse", "ops.array_ops.shape", "keras.backend.concatenate", "ops.array_ops.stack", "ops.array_ops.fill", "ops.array_ops.reshape", "framework.sparse_tensor.SparseTensor", "ops.math_ops.range", "ops.array_ops.boolean_mask", "ops.functional_ops.scan", "ops.array_ops.gather_nd", "ops.array_ops.tile", "ops.array_ops.transpose", "ops.math_ops.cast"], "keras.backend.ctc_label_dense_to_sparse.range_less_than": ["ops.array_ops.shape", "ops.array_ops.fill", "ops.math_ops.range", "ops.array_ops.expand_dims"], "ops.functional_ops.scan": ["ops.functional_ops.scan.<lambda1>", "ops.control_flow_ops.while_loop", "<builtin>.TypeError", "ops.functional_ops.scan.<lambda2>", "framework.tensor_shape.Dimension", "framework.ops.convert_to_tensor", "framework.tensor_shape.TensorShape", "framework.ops.name_scope", "<builtin>.callable", "eager.context.executing_eagerly", "util.nest.is_sequence", "ops.variable_scope.get_variable_scope", "framework.tensor_shape.dimension_value", "ops.array_ops.shape", "ops.tensor_array_ops.TensorArray", "<builtin>.zip", "ops.functional_ops.scan.input_pack"], "keras.backend.ctc_batch_cost": ["keras.backend_config.epsilon", "ops.array_ops.squeeze", "ops.array_ops.expand_dims", "ops.math_ops.log", "ops.ctc_ops.ctc_loss", "keras.backend.ctc_label_dense_to_sparse", "ops.array_ops.transpose", "ops.math_ops.cast"], "ops.ctc_ops.ctc_loss": ["ops.ctc_ops._ctc_loss_impl"], "keras.backend.ctc_decode": ["keras.backend_config.epsilon", "ops.ctc_ops.ctc_greedy_decoder", "framework.sparse_tensor.SparseTensor", "ops.ctc_ops.ctc_beam_search_decoder", "keras.backend.shape", "ops.math_ops.log", "ops.sparse_ops.sparse_tensor_to_dense", "ops.array_ops.transpose", "ops.math_ops.cast"], "ops.ctc_ops.ctc_greedy_decoder": ["ops.gen_ctc_ops.ctc_greedy_decoder", "framework.sparse_tensor.SparseTensor"], "ops.ctc_ops.ctc_beam_search_decoder": ["ops.gen_ctc_ops.ctc_beam_search_decoder", "<builtin>.zip", "framework.sparse_tensor.SparseTensor"], "keras.backend.map_fn": ["ops.map_fn.map_fn"], "keras.backend.foldl": ["ops.functional_ops.foldl"], "ops.functional_ops.foldl": ["util.nest.map_structure", "ops.control_flow_ops.while_loop", "<builtin>.TypeError", "util.nest.flatten", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "<builtin>.callable", "eager.context.executing_eagerly", "ops.variable_scope.get_variable_scope", "ops.array_ops.shape", "framework.tensor_shape.dimension_value", "framework.constant_op.constant"], "keras.backend.foldr": ["ops.functional_ops.foldr"], "ops.functional_ops.foldr": ["util.nest.map_structure", "ops.control_flow_ops.while_loop", "<builtin>.TypeError", "util.nest.flatten", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "<builtin>.callable", "eager.context.executing_eagerly", "ops.variable_scope.get_variable_scope", "ops.array_ops.shape", "framework.tensor_shape.dimension_value"], "keras.backend_config.set_floatx": ["<builtin>.str", "<builtin>.ValueError"], "keras.backend_config.set_epsilon": [], "keras.backend_config.set_image_data_format": ["<builtin>.str", "<builtin>.ValueError"], "keras.backend.configure_and_create_distributed_session._create_session": ["distribute.distribute_coordinator_utils.get_current_worker_context", "client.session.Session", "keras.backend.set_session", "keras.backend.get_default_session_config", "<builtin>.getattr", "keras.backend.is_tpu_strategy"], "keras.backend._is_tpu_strategy_class": ["keras.backend._is_tpu_strategy_class.<lambda1>", "<builtin>.map", "keras.backend.any"], "keras.backend._is_tpu_strategy_class.<lambda1>": [], "keras.backend.cast_variables_to_tensor._cast_variables_to_tensor": ["<builtin>.isinstance", "ops.array_ops.identity"], "keras.backend.convert_inputs_if_ragged._convert_ragged_input": ["<builtin>.isinstance"], "keras.backend.ContextValueCache.__init__": ["weakref.WeakKeyDictionary.__init__"], "weakref.WeakKeyDictionary.__init__": [], "keras.backend.ContextValueCache._key": ["framework.ops.get_default_graph", "eager.context.executing_eagerly"], "keras.backend.ContextValueCache._get_parent_graph": ["<builtin>.isinstance", "framework.ops.executing_eagerly_outside_functions"], "keras.backend.ContextValueCache._get_recursive": ["<builtin>.isinstance", "keras.backend.ContextValueCache._get_recursive", "weakref.WeakKeyDictionary.get", "keras.backend.ContextValueCache._get_parent_graph"], "keras.backend.ContextValueCache.__getitem__": ["keras.backend._default_learning_phase", "keras.backend.ContextValueCache._key", "utils.object_identity.ObjectIdentityWeakSet", "keras.backend.ContextValueCache._get_recursive"], "utils.object_identity.ObjectIdentityWeakSet": [], "weakref.WeakKeyDictionary.setdefault": [], "keras.backend_config": ["util.tf_export.keras_export", "util.dispatch.add_dispatch_support"], "keras.callbacks": [], "keras.callbacks.History.__init__": ["<builtin>.super"], "keras.callbacks.BaseLogger.__init__": ["<builtin>.super", "<builtin>.set"], "keras.callbacks.ProgbarLogger.__init__": ["<builtin>.super", "<builtin>.ValueError", "<builtin>.set", "<builtin>.str"], "keras.callbacks.CallbackList.__init__": ["keras.callbacks.CallbackList._add_default_callbacks", "util.nest.flatten", "keras.callbacks.CallbackList.set_params", "keras.callbacks.CallbackList._disallow_batch_hooks_in_ps_strategy", "keras.callbacks.CallbackList.set_model", "<builtin>.getattr", "<builtin>.all", "<builtin>.globals", "<builtin>.any"], "keras.callbacks.CallbackList.set_model": [], "keras.callbacks.CallbackList.__iter__": ["<builtin>.iter"], "keras.callbacks.CallbackList.set_params": [], "keras.callbacks._is_generator_like": ["<builtin>.isinstance", "<builtin>.hasattr"], "keras.callbacks.CallbackList._add_default_callbacks": ["<builtin>.isinstance", "keras.callbacks.ProgbarLogger.__init__", "keras.callbacks.History.__init__"], "keras.callbacks.CallbackList._disallow_batch_hooks_in_ps_strategy": ["distribute.distribution_strategy_context.get_strategy", "<builtin>.ValueError", "<builtin>.getattr"], "keras.callbacks.CallbackList._process_logs": ["utils.tf_utils.sync_to_numpy_or_python_type"], "keras.callbacks.CallbackList.append": [], "keras.callbacks.CallbackList._call_batch_hook": ["<builtin>.ValueError", "keras.callbacks.CallbackList._call_batch_begin_hook", "keras.callbacks.CallbackList._call_batch_end_hook"], "keras.callbacks.CallbackList._call_batch_begin_hook": ["keras.callbacks.CallbackList._call_batch_hook_helper", "time.time"], "keras.callbacks.CallbackList._call_batch_end_hook": ["platform.tf_logging.warning", "<builtin>.sum", "keras.callbacks.CallbackList._call_batch_hook_helper", "<builtin>.len", "time.time"], "keras.callbacks.CallbackList._call_batch_hook_helper": ["<builtin>.getattr", "keras.callbacks.CallbackList._process_logs", "time.time"], "keras.callbacks.CallbackList._call_begin_hook": ["keras.callbacks.CallbackList.on_test_begin", "keras.callbacks.CallbackList.on_predict_begin", "keras.callbacks.CallbackList.on_train_begin"], "keras.callbacks.CallbackList.on_train_begin": ["keras.callbacks.CallbackList._process_logs"], "keras.callbacks.CallbackList.on_test_begin": ["keras.callbacks.CallbackList._process_logs"], "keras.callbacks.CallbackList.on_predict_begin": ["keras.callbacks.CallbackList._process_logs"], "keras.callbacks.CallbackList._call_end_hook": ["keras.callbacks.CallbackList.on_predict_end", "keras.callbacks.CallbackList.on_train_end", "keras.callbacks.CallbackList.on_test_end"], "keras.callbacks.CallbackList.on_train_end": ["keras.callbacks.CallbackList._process_logs"], "keras.callbacks.CallbackList.on_test_end": ["keras.callbacks.CallbackList._process_logs"], "keras.callbacks.CallbackList.on_predict_end": ["keras.callbacks.CallbackList._process_logs"], "keras.callbacks.CallbackList.on_batch_begin": ["keras.callbacks.CallbackList._call_batch_hook"], "keras.callbacks.CallbackList.on_batch_end": ["keras.callbacks.CallbackList._call_batch_hook"], "keras.callbacks.CallbackList.on_epoch_begin": ["keras.callbacks.CallbackList._process_logs"], "keras.callbacks.CallbackList.on_epoch_end": ["keras.callbacks.CallbackList._process_logs"], "keras.callbacks.CallbackList.on_train_batch_begin": ["keras.callbacks.CallbackList._call_batch_hook"], "keras.callbacks.CallbackList.on_train_batch_end": ["keras.callbacks.CallbackList._call_batch_hook"], "keras.callbacks.CallbackList.on_test_batch_begin": ["keras.callbacks.CallbackList._call_batch_hook"], "keras.callbacks.CallbackList.on_test_batch_end": ["keras.callbacks.CallbackList._call_batch_hook"], "keras.callbacks.CallbackList.on_predict_batch_begin": ["keras.callbacks.CallbackList._call_batch_hook"], "keras.callbacks.CallbackList.on_predict_batch_end": ["keras.callbacks.CallbackList._call_batch_hook"], "keras.callbacks.Callback.__init__": [], "keras.callbacks.Callback.set_params": [], "keras.callbacks.Callback.set_model": [], "keras.callbacks.Callback": ["utils.generic_utils.default", "docs.doc_controls.for_subclass_implementers"], "keras.callbacks.Callback.on_batch_begin": [], "keras.callbacks.Callback.on_batch_end": [], "keras.callbacks.Callback.on_epoch_begin": [], "keras.callbacks.Callback.on_epoch_end": [], "keras.callbacks.Callback.on_train_batch_begin": ["keras.callbacks.LambdaCallback.__init__.<lambda3>"], "keras.callbacks.LambdaCallback.__init__.<lambda3>": [], "keras.callbacks.Callback.on_train_batch_end": ["keras.callbacks.BaseLogger.on_batch_end", "keras.callbacks.LambdaCallback.__init__.<lambda4>"], "keras.callbacks.BaseLogger.on_batch_end": [], "keras.callbacks.LambdaCallback.__init__.<lambda4>": [], "keras.callbacks.Callback.on_test_batch_begin": [], "keras.callbacks.Callback.on_test_batch_end": [], "keras.callbacks.Callback.on_predict_batch_begin": [], "keras.callbacks.Callback.on_predict_batch_end": [], "keras.callbacks.Callback.on_train_begin": [], "keras.callbacks.Callback.on_train_end": [], "keras.callbacks.Callback.on_test_begin": [], "keras.callbacks.Callback.on_test_end": [], "keras.callbacks.Callback.on_predict_begin": [], "keras.callbacks.Callback.on_predict_end": [], "keras.callbacks.Callback._implements_train_batch_hooks": ["utils.generic_utils.is_default"], "keras.callbacks.Callback._implements_test_batch_hooks": ["utils.generic_utils.is_default"], "keras.callbacks.Callback._implements_predict_batch_hooks": ["utils.generic_utils.is_default"], "keras.callbacks.BaseLogger.on_epoch_begin": [], "keras.callbacks.BaseLogger.on_epoch_end": [], "keras.callbacks.TerminateOnNaN.__init__": ["<builtin>.super"], "keras.callbacks.TerminateOnNaN.on_batch_end": ["numpy.isnan", "utils.tf_utils.sync_to_numpy_or_python_type", "<builtin>.print", "numpy.isinf"], "keras.callbacks.ProgbarLogger.set_params": [], "keras.callbacks.ProgbarLogger.on_train_begin": [], "keras.callbacks.ProgbarLogger.on_test_begin": ["keras.callbacks.ProgbarLogger._reset_progbar", "keras.callbacks.ProgbarLogger._maybe_init_progbar"], "keras.callbacks.ProgbarLogger._reset_progbar": [], "keras.callbacks.ProgbarLogger._maybe_init_progbar": ["utils.generic_utils.Progbar", "<builtin>.set"], "keras.callbacks.ProgbarLogger.on_predict_begin": ["keras.callbacks.ProgbarLogger._reset_progbar", "keras.callbacks.ProgbarLogger._maybe_init_progbar"], "keras.callbacks.ProgbarLogger.on_epoch_begin": ["keras.callbacks.ProgbarLogger._reset_progbar", "keras.callbacks.ProgbarLogger._maybe_init_progbar", "<builtin>.print"], "keras.callbacks.ProgbarLogger.on_train_batch_end": ["keras.callbacks.ProgbarLogger._batch_update_progbar"], "keras.callbacks.ProgbarLogger._batch_update_progbar": ["keras.callbacks.ProgbarLogger._maybe_init_progbar", "utils.tf_utils.sync_to_numpy_or_python_type", "copy.copy", "<builtin>.list"], "keras.callbacks.ProgbarLogger.on_test_batch_end": ["keras.callbacks.ProgbarLogger._batch_update_progbar"], "keras.callbacks.ProgbarLogger.on_predict_batch_end": ["keras.callbacks.ProgbarLogger._batch_update_progbar"], "keras.callbacks.ProgbarLogger.on_epoch_end": ["keras.callbacks.ProgbarLogger._finalize_progbar"], "keras.callbacks.ProgbarLogger._finalize_progbar": ["<builtin>.list", "utils.tf_utils.sync_to_numpy_or_python_type"], "keras.callbacks.ProgbarLogger.on_test_end": ["keras.callbacks.ProgbarLogger._finalize_progbar"], "keras.callbacks.ProgbarLogger.on_predict_end": ["keras.callbacks.ProgbarLogger._finalize_progbar"], "keras.callbacks.ProgbarLogger._implements_train_batch_hooks": [], "keras.callbacks.ProgbarLogger._implements_test_batch_hooks": [], "keras.callbacks.ProgbarLogger._implements_predict_batch_hooks": [], "keras.callbacks.History.on_train_begin": [], "keras.callbacks.History.on_epoch_end": [], "keras.callbacks.ModelCheckpoint.__init__": ["platform.tf_logging.warning", "<builtin>.super", "<builtin>.ValueError", "utils.io_utils.path_to_string", "<builtin>.TypeError", "saving.checkpoint_options.CheckpointOptions", "<builtin>.isinstance", "saved_model.save_options.SaveOptions"], "saving.checkpoint_options.CheckpointOptions": [], "keras.callbacks.ModelCheckpoint.on_train_begin": ["keras.callbacks.ModelCheckpoint._get_most_recently_modified_file_matching_pattern", "<builtin>.ValueError", "keras.callbacks.ModelCheckpoint._checkpoint_exists"], "keras.callbacks.ModelCheckpoint._get_most_recently_modified_file_matching_pattern": ["os.path.basename", "os.path.getmtime", "re.sub", "os.path.dirname", "os.listdir", "re.match", "os.path.join", "io.file_io.file_exists_v2", "training.checkpoint_management.latest_checkpoint"], "keras.callbacks.ModelCheckpoint._checkpoint_exists": ["io.file_io.file_exists_v2"], "keras.callbacks.ModelCheckpoint._implements_train_batch_hooks": [], "keras.callbacks.ModelCheckpoint.on_train_batch_end": ["keras.callbacks.ModelCheckpoint._should_save_on_batch", "keras.callbacks.ModelCheckpoint._save_model"], "keras.callbacks.ModelCheckpoint._should_save_on_batch": [], "keras.callbacks.ModelCheckpoint._save_model": ["platform.tf_logging.warning", "keras.callbacks.ModelCheckpoint._maybe_remove_file", "<builtin>.print", "numpy.less", "<builtin>.IOError", "<builtin>.isinstance", "utils.tf_utils.sync_to_numpy_or_python_type", "numpy.greater", "keras.callbacks.ModelCheckpoint._get_file_path", "<builtin>.str"], "keras.callbacks.ModelCheckpoint.on_epoch_begin": [], "keras.callbacks.ModelCheckpoint.on_epoch_end": ["keras.callbacks.ModelCheckpoint._save_model"], "keras.callbacks.ModelCheckpoint._get_file_path": ["<builtin>.KeyError", "distribute.distributed_file_utils.write_filepath"], "keras.callbacks.ModelCheckpoint._maybe_remove_file": ["distribute.distributed_file_utils.remove_temp_dir_with_filepath"], "os.path.getmtime": [], "keras.callbacks.BackupAndRestore.__init__": ["<builtin>.super", "<builtin>.ValueError", "eager.context.executing_eagerly", "framework.ops.inside_function"], "keras.callbacks.BackupAndRestore.on_train_begin": ["<builtin>.isinstance", "distribute.worker_training_state.WorkerTrainingState", "<builtin>.type", "<builtin>.NotImplementedError"], "distribute.worker_training_state.WorkerTrainingState": [], "keras.callbacks.BackupAndRestore.on_train_end": [], "keras.callbacks.BackupAndRestore.on_epoch_end": [], "keras.callbacks.EarlyStopping.__init__": ["<builtin>.super", "<builtin>.abs", "platform.tf_logging.warning"], "keras.callbacks.EarlyStopping.on_train_begin": [], "keras.callbacks.EarlyStopping.on_epoch_end": ["keras.callbacks.EarlyStopping._is_improvement", "<builtin>.print", "keras.callbacks.EarlyStopping.get_monitor_value"], "keras.callbacks.EarlyStopping.get_monitor_value": ["<builtin>.list", "platform.tf_logging.warning"], "keras.callbacks.EarlyStopping._is_improvement": ["numpy.greater", "numpy.less"], "keras.callbacks.EarlyStopping.on_train_end": ["<builtin>.print"], "keras.callbacks.RemoteMonitor.__init__": ["<builtin>.super"], "keras.callbacks.RemoteMonitor.on_epoch_end": ["platform.tf_logging.warning", "<builtin>.ImportError", "json.dumps", "requests.post", "<builtin>.isinstance", "<builtin>.str"], "requests.post": [], "keras.callbacks.LearningRateScheduler.__init__": ["<builtin>.super"], "keras.callbacks.LearningRateScheduler.on_epoch_begin": ["<builtin>.ValueError", "<builtin>.hasattr", "<builtin>.print", "<builtin>.float", "keras.backend.set_value", "<builtin>.isinstance", "keras.backend.get_value"], "keras.callbacks.LearningRateScheduler.on_epoch_end": ["keras.backend.get_value"], "keras.callbacks.keras_model_summary": ["platform.tf_logging.warning", "framework.ops.device", "ops.summary_ops_v2.write", "framework.summary_pb2.SummaryMetadata", "ops.summary_ops_v2.summary_scope", "framework.constant_op.constant"], "framework.summary_pb2.SummaryMetadata": [], "ops.summary_ops_v2.summary_scope": ["framework.ops.name_scope", "framework.ops.get_name_scope"], "ops.summary_ops_v2.write": ["eager.context.executing_eagerly", "<builtin>.hasattr", "ops.summary_ops_v2.get_step", "framework.smart_cond.smart_cond", "ops.summary_ops_v2.should_record_summaries", "framework.constant_op.constant", "framework.ops.name_scope", "framework.ops.add_to_collection"], "keras.callbacks.TensorBoard.__init__": ["<builtin>.super", "keras.callbacks.TensorBoard._init_profile_batch", "keras.callbacks.TensorBoard._validate_kwargs", "utils.io_utils.path_to_string"], "keras.callbacks.TensorBoard._validate_kwargs": ["platform.tf_logging.warning", "<builtin>.ValueError", "<builtin>.set", "<builtin>.str"], "keras.callbacks.TensorBoard._init_profile_batch": ["keras.callbacks.TensorBoard._stop_profiler", "<builtin>.ValueError", "util.nest.map_structure", "<builtin>.len", "<builtin>.isinstance", "keras.callbacks.TensorBoard._start_profiler", "<builtin>.str"], "keras.callbacks.TensorBoard.set_model": ["keras.callbacks.TensorBoard._get_log_write_dir", "os.path.join", "keras.callbacks.TensorBoard._configure_embeddings", "keras.callbacks.TensorBoard._write_keras_model_summary"], "keras.callbacks.TensorBoard._get_log_write_dir": ["distribute.distributed_file_utils.write_dirpath"], "keras.callbacks.TensorBoard._write_keras_model_summary": ["ops.summary_ops_v2.record_if", "keras.callbacks.keras_model_summary"], "keras.callbacks.TensorBoard._configure_embeddings": ["platform.gfile.Open", "protobuf.text_format.MessageToString", "<builtin>.ValueError", "<builtin>.isinstance", "os.path.join", "<builtin>.str", "protobuf.projector_config_pb2.ProjectorConfig"], "keras.callbacks.TensorBoard._train_writer": ["ops.summary_ops_v2.create_file_writer_v2"], "ops.summary_ops_v2.create_file_writer_v2": ["eager.context.executing_eagerly", "ops.summary_ops_v2._TrackableResourceSummaryWriter.__init__", "ops.summary_ops_v2._check_create_file_writer_args", "ops.summary_ops_v2._ResourceSummaryWriter.__init__", "framework.ops.inside_function", "<builtin>.ValueError", "framework.ops.convert_to_tensor", "framework.constant_op.constant", "framework.ops.name_scope", "framework.ops.init_scope", "framework.ops.device", "functools.partial"], "keras.callbacks.TensorBoard._val_writer": ["ops.summary_ops_v2.create_file_writer_v2"], "keras.callbacks.TensorBoard._delete_tmp_write_dir": ["distribute.distributed_file_utils.remove_temp_dirpath"], "keras.callbacks.TensorBoard._write_keras_model_train_graph": ["ops.summary_ops_v2.record_if", "<builtin>.hasattr", "ops.summary_ops_v2.graph"], "ops.summary_ops_v2.record_if": [], "ops.summary_ops_v2.graph": ["eager.context.executing_eagerly", "<builtin>.isinstance", "ops.summary_ops_v2._serialize_graph", "<builtin>.ValueError", "framework.ops.convert_to_tensor", "ops.gen_summary_ops.write_graph_summary", "ops.summary_ops_v2.should_record_summaries", "framework.constant_op.constant", "framework.ops.device"], "protobuf.projector_config_pb2.ProjectorConfig": [], "keras.callbacks.TensorBoard._push_writer": ["ops.summary_ops_v2.record_if"], "keras.callbacks.TensorBoard._push_writer.<lambda1>": ["ops.math_ops.equal"], "keras.callbacks.TensorBoard._pop_writer": ["sys.exc_info"], "keras.callbacks.TensorBoard._close_writers": [], "keras.callbacks.TensorBoard._start_profiler": ["platform.tf_logging.error", "profiler.profiler_v2.start"], "keras.callbacks.TensorBoard._stop_profiler": ["platform.tf_logging.error", "profiler.profiler_v2.stop"], "keras.callbacks.TensorBoard.on_train_begin": ["keras.callbacks.TensorBoard._push_writer"], "keras.callbacks.TensorBoard.on_train_end": ["keras.callbacks.TensorBoard._close_writers", "keras.callbacks.TensorBoard._delete_tmp_write_dir", "keras.callbacks.TensorBoard._pop_writer", "keras.callbacks.TensorBoard._stop_trace"], "keras.callbacks.TensorBoard._stop_trace": ["ops.summary_ops_v2.record_if", "keras.callbacks.TensorBoard._stop_profiler", "ops.summary_ops_v2.trace_export"], "keras.callbacks.TensorBoard.on_test_begin": ["keras.callbacks.TensorBoard._push_writer"], "keras.callbacks.TensorBoard.on_test_end": ["ops.summary_ops_v2.record_if", "<builtin>.hasattr", "keras.callbacks.TensorBoard._pop_writer", "ops.summary_ops_v2.scalar"], "keras.callbacks.TensorBoard._implements_train_batch_hooks": [], "keras.callbacks.TensorBoard.on_train_batch_begin": ["keras.callbacks.TensorBoard._start_trace", "time.time"], "keras.callbacks.TensorBoard._start_trace": ["keras.callbacks.TensorBoard._start_profiler", "ops.summary_ops_v2.trace_on"], "keras.callbacks.TensorBoard.on_train_batch_end": ["keras.callbacks.TensorBoard._write_keras_model_train_graph", "ops.summary_ops_v2.scalar", "keras.callbacks.TensorBoard._stop_trace", "time.time"], "keras.callbacks.TensorBoard.on_epoch_begin": [], "keras.callbacks.TensorBoard.on_epoch_end": ["keras.callbacks.TensorBoard._log_epoch_metrics", "keras.callbacks.TensorBoard._log_embeddings", "keras.callbacks.TensorBoard._log_weights"], "keras.callbacks.TensorBoard._log_epoch_metrics": ["ops.summary_ops_v2.record_if", "keras.callbacks.TensorBoard._compute_steps_per_second", "keras.callbacks.TensorBoard._collect_learning_rate", "ops.summary_ops_v2.scalar"], "keras.callbacks.TensorBoard._log_weights": ["ops.summary_ops_v2.record_if", "keras.callbacks.TensorBoard._log_weight_as_image", "ops.summary_ops_v2.histogram"], "keras.callbacks.TensorBoard._log_embeddings": ["os.path.join"], "ops.summary_ops_v2.trace_on": ["eager.context.executing_eagerly", "eager.profiler.start", "platform.tf_logging.warn", "framework.ops.inside_function", "eager.context.context"], "ops.summary_ops_v2.trace_export": ["eager.context.executing_eagerly", "ops.summary_ops_v2.trace_off", "eager.profiler.save", "platform.tf_logging.warn", "framework.ops.inside_function", "eager.profiler.stop", "<builtin>.ValueError", "eager.context.context", "ops.summary_ops_v2.run_metadata_graphs", "ops.summary_ops_v2.run_metadata"], "keras.callbacks.TensorBoard._collect_learning_rate": ["<builtin>.isinstance", "<builtin>.getattr"], "keras.callbacks.TensorBoard._compute_steps_per_second": [], "ops.summary_ops_v2.histogram": ["ops.summary_ops_v2.summary_writer_function"], "keras.callbacks.TensorBoard._log_weight_as_image": ["keras.backend.int_shape", "ops.summary_ops_v2.image", "keras.backend.image_data_format", "ops.array_ops.transpose", "<builtin>.len", "ops.array_ops.squeeze", "ops.array_ops.reshape"], "ops.summary_ops_v2.image": ["ops.summary_ops_v2.summary_writer_function"], "profiler.profiler_v2.start": ["framework.errors.AlreadyExistsError", "internal._pywrap_profiler.ProfilerSession", "<builtin>.dict", "platform.tf_logging.warning"], "profiler.profiler_v2.stop": ["framework.errors.UnavailableError"], "keras.callbacks.ReduceLROnPlateau.__init__": ["<builtin>.super", "<builtin>.ValueError", "platform.tf_logging.warning", "keras.callbacks.ReduceLROnPlateau._reset"], "keras.callbacks.ReduceLROnPlateau._reset": ["platform.tf_logging.warning"], "keras.callbacks.ReduceLROnPlateau._reset.<lambda1>": ["numpy.less"], "keras.callbacks.ReduceLROnPlateau._reset.<lambda2>": ["numpy.greater"], "keras.callbacks.ReduceLROnPlateau.on_train_begin": ["keras.callbacks.ReduceLROnPlateau._reset"], "keras.callbacks.ReduceLROnPlateau.on_epoch_end": ["keras.callbacks.ReduceLROnPlateau._reset.<lambda2>", "platform.tf_logging.warning", "numpy.float32", "keras.callbacks.ReduceLROnPlateau._reset.<lambda1>", "<builtin>.print", "<builtin>.list", "<builtin>.max", "keras.backend.set_value", "keras.backend.get_value", "keras.callbacks.ReduceLROnPlateau.in_cooldown"], "keras.callbacks.ReduceLROnPlateau.in_cooldown": [], "keras.callbacks.CSVLogger.__init__": ["<builtin>.super", "utils.io_utils.path_to_string"], "keras.callbacks.CSVLogger.on_train_begin": ["platform.gfile.GFile", "<builtin>.len", "<builtin>.bool", "io.file_io.file_exists_v2"], "keras.callbacks.CSVLogger.on_epoch_end": ["keras.callbacks.CSVLogger.on_epoch_end.handle_value", "collections.OrderedDict", "<builtin>.dict", "csv.DictWriter", "<builtin>.sorted"], "keras.callbacks.CSVLogger.on_epoch_end.handle_value": ["<builtin>.isinstance", "<builtin>.map"], "keras.callbacks.CSVLogger.on_train_end": [], "keras.callbacks.LambdaCallback.__init__": ["<builtin>.super"], "keras.callbacks.LambdaCallback.__init__.<lambda1>": [], "keras.callbacks.LambdaCallback.__init__.<lambda2>": [], "keras.callbacks.LambdaCallback.__init__.<lambda5>": [], "keras.callbacks.LambdaCallback.__init__.<lambda6>": [], "keras.callbacks_v1": [], "keras.callbacks_v1.TensorBoard.__init__": ["eager.context.executing_eagerly", "platform.tf_logging.warning", "<builtin>.UserWarning", "callbacks.Callback.__init__"], "callbacks.Callback.__init__": [], "keras.callbacks_v1.TensorBoard._init_writer": ["eager.context.executing_eagerly", "ops.summary_ops_v2.create_file_writer_v2", "ops.summary_ops_v2.graph", "summary.summary.FileWriter", "keras.backend.get_graph"], "summary.summary.FileWriter": [], "keras.callbacks_v1.TensorBoard._make_histogram_ops": ["keras.backend.int_shape", "<builtin>.isinstance", "ops.array_ops.transpose", "<builtin>.hasattr", "ops.array_ops.reshape", "<builtin>.enumerate", "keras.backend.image_data_format", "keras.callbacks_v1.TensorBoard._make_histogram_ops.is_indexed_slices", "ops.array_ops.squeeze", "<builtin>.len", "summary.summary.image", "summary.summary.histogram"], "summary.summary.histogram": ["distribute.summary_op_util.skip_summary", "framework.constant_op.constant", "ops.summary_op_util.summary_scope", "ops.gen_logging_ops.histogram_summary", "ops.summary_op_util.collect"], "summary.summary.image": ["ops.gen_logging_ops.image_summary", "distribute.summary_op_util.skip_summary", "framework.constant_op.constant", "ops.summary_op_util.summary_scope", "ops.summary_op_util.collect"], "keras.callbacks_v1.TensorBoard._make_histogram_ops.is_indexed_slices": ["<builtin>.type"], "keras.callbacks_v1.TensorBoard.set_model": ["engine.training_utils_v1.standardize_input_data", "ops.variables.Variable", "<builtin>.isinstance", "eager.context.executing_eagerly", "summary.summary.merge_all", "<builtin>.type", "ops.array_ops.reshape", "ops.array_ops.placeholder", "ops.state_ops.assign", "<builtin>.ImportError", "numpy.prod", "ops.array_ops.zeros", "plugins.projector.ProjectorConfig", "<builtin>.list", "plugins.projector.visualize_embeddings", "keras.callbacks_v1.TensorBoard._init_writer", "<builtin>.int", "keras.callbacks_v1.TensorBoard._make_histogram_ops"], "summary.summary.merge_all": ["summary.summary.merge", "eager.context.executing_eagerly", "framework.ops.get_collection", "<builtin>.RuntimeError"], "plugins.projector.ProjectorConfig": [], "plugins.projector.visualize_embeddings": [], "keras.callbacks_v1.TensorBoard._fetch_callback": [], "keras.callbacks_v1.TensorBoard._write_custom_summaries": ["ops.summary_ops_v2.record_if", "<builtin>.isinstance", "eager.context.executing_eagerly", "summary.summary.Summary", "ops.summary_ops_v2.scalar"], "summary.summary.Summary": [], "keras.callbacks_v1.TensorBoard.on_train_batch_begin": ["keras.callbacks_v1.TensorBoard._start_profiler"], "keras.callbacks_v1.TensorBoard._start_profiler": ["platform.tf_logging.error", "profiler.profiler_v2.start"], "keras.callbacks_v1.TensorBoard.on_train_batch_end": ["keras.callbacks_v1.TensorBoard.on_batch_end"], "keras.callbacks_v1.TensorBoard.on_batch_end": ["keras.callbacks_v1.TensorBoard._write_custom_summaries", "keras.callbacks_v1.TensorBoard._stop_profiler"], "keras.callbacks_v1.TensorBoard.on_test_begin": [], "keras.callbacks_v1.TensorBoard.on_test_end": [], "keras.callbacks_v1.TensorBoard._stop_profiler": ["profiler.profiler_v2.stop", "platform.tf_logging.error"], "keras.callbacks_v1.TensorBoard.on_train_begin": [], "keras.callbacks_v1.TensorBoard.on_epoch_begin": [], "keras.callbacks_v1.TensorBoard.on_epoch_end": ["os.path.join", "keras.callbacks_v1.TensorBoard._write_custom_summaries", "<builtin>.isinstance", "<builtin>.min", "<builtin>.slice", "<builtin>.enumerate", "keras.backend.learning_phase", "keras.backend.get_session", "<builtin>.ValueError"], "keras.callbacks_v1.TensorBoard.on_train_end": ["keras.callbacks_v1.TensorBoard._stop_profiler"], "keras.combinations": ["functools.partial", "test_combinations.TestCombination.__init__"], "keras.combinations.keras_mode_combinations": ["framework.combinations.combine", "python.tf2.enabled"], "framework.combinations.combine": [], "keras.combinations.keras_model_type_combinations": ["framework.combinations.combine"], "keras.combinations.KerasModeCombination.context_managers": ["keras.testing_utils.run_eagerly_scope"], "keras.testing_utils.run_eagerly_scope": [], "keras.combinations.KerasModeCombination.parameter_modifiers": ["framework.test_combinations.OptionalParameter"], "keras.combinations.KerasModelTypeCombination.context_managers": ["keras.testing_utils.model_type_scope"], "keras.testing_utils.model_type_scope": [], "keras.combinations.KerasModelTypeCombination.parameter_modifiers": ["framework.test_combinations.OptionalParameter"], "keras.constraints": ["util.tf_export.keras_export"], "keras.constraints.Constraint.__call__": [], "keras.constraints.Constraint.get_config": [], "keras.constraints.MaxNorm.__init__": [], "keras.constraints.MaxNorm": ["docs.doc_controls.do_not_generate_docs"], "keras.constraints.MaxNorm.__call__": ["ops.math_ops.square", "ops.math_ops.reduce_sum", "keras.backend.clip", "keras.backend.sqrt", "keras.backend.epsilon"], "keras.constraints.MaxNorm.get_config": [], "keras.constraints.NonNeg.__call__": ["ops.math_ops.greater_equal", "keras.backend.floatx", "ops.math_ops.cast"], "keras.constraints.UnitNorm.__init__": [], "keras.constraints.UnitNorm": ["docs.doc_controls.do_not_generate_docs"], "keras.constraints.UnitNorm.__call__": ["keras.backend.sqrt", "keras.backend.epsilon", "ops.math_ops.reduce_sum", "ops.math_ops.square"], "keras.constraints.UnitNorm.get_config": [], "keras.constraints.MinMaxNorm.__init__": [], "keras.constraints.MinMaxNorm": ["docs.doc_controls.do_not_generate_docs"], "keras.constraints.MinMaxNorm.__call__": ["ops.math_ops.square", "ops.math_ops.reduce_sum", "keras.backend.clip", "keras.backend.sqrt", "keras.backend.epsilon"], "keras.constraints.MinMaxNorm.get_config": [], "keras.constraints.RadialConstraint": ["docs.doc_controls.do_not_generate_docs"], "keras.constraints.RadialConstraint.__call__": ["keras.backend.reshape", "<builtin>.ValueError", "keras.backend.stack", "ops.array_ops.unstack", "keras.backend.map_fn"], "keras.constraints.RadialConstraint._kernel_constraint": ["ops.math_ops.floormod", "keras.backend.shape", "keras.backend.switch", "framework.tensor_shape.TensorShape", "keras.backend.constant", "ops.control_flow_ops.while_loop", "keras.backend.cast"], "keras.constraints.RadialConstraint._kernel_constraint.<lambda1>": [], "keras.constraints.RadialConstraint._kernel_constraint.<lambda2>": ["keras.backend.zeros"], "keras.constraints.RadialConstraint._kernel_constraint.<lambda3>": ["keras.backend.constant"], "keras.constraints.RadialConstraint._kernel_constraint.<lambda4>": ["keras.backend.constant"], "keras.constraints.RadialConstraint._kernel_constraint.<lambda5>": ["keras.backend.less"], "keras.constraints.RadialConstraint._kernel_constraint.body_fn": ["ops.array_ops.pad"], "keras.constraints.deserialize": ["<builtin>.globals", "utils.generic_utils.deserialize_keras_object"], "keras.keras_parameterized": [], "keras.keras_parameterized.TestCase.tearDown": ["<builtin>.super", "keras.backend.clear_session"], "keras.keras_parameterized.run_with_all_saved_model_formats": ["util.nest.flatten", "keras.keras_parameterized._test_or_class_decorator"], "keras.keras_parameterized.run_with_all_saved_model_formats.single_method_decorator": ["functools.wraps", "testing.parameterized.named_parameters"], "testing.parameterized.named_parameters": [], "keras.keras_parameterized.run_with_all_saved_model_formats.single_method_decorator.decorated": ["keras.keras_parameterized._test_tf_saved_model_format", "keras.keras_parameterized._test_tf_saved_model_format_no_traces", "keras.keras_parameterized._test_h5_saved_model_format", "<builtin>.ValueError"], "keras.keras_parameterized._test_h5_saved_model_format": ["keras.testing_utils.saved_model_format_scope"], "keras.keras_parameterized._test_tf_saved_model_format": ["keras.testing_utils.saved_model_format_scope"], "keras.keras_parameterized._test_tf_saved_model_format_no_traces": ["keras.testing_utils.saved_model_format_scope"], "keras.keras_parameterized._test_or_class_decorator": ["keras.keras_parameterized._test_or_class_decorator._decorate_test_or_class"], "keras.testing_utils.saved_model_format_scope": [], "keras.keras_parameterized.run_with_all_weight_formats": ["keras.keras_parameterized.run_with_all_saved_model_formats"], "keras.keras_parameterized.run_with_all_model_types": ["util.nest.flatten", "keras.keras_parameterized._test_or_class_decorator"], "keras.keras_parameterized.run_with_all_model_types.single_method_decorator": ["functools.wraps", "testing.parameterized.named_parameters"], "keras.keras_parameterized.run_with_all_model_types.single_method_decorator.decorated": ["keras.keras_parameterized._test_subclass_model_type", "keras.keras_parameterized._test_sequential_model_type", "keras.keras_parameterized._test_functional_model_type", "<builtin>.ValueError"], "keras.keras_parameterized._test_functional_model_type": ["keras.testing_utils.model_type_scope"], "keras.keras_parameterized._test_subclass_model_type": ["keras.testing_utils.model_type_scope"], "keras.keras_parameterized._test_sequential_model_type": ["keras.testing_utils.model_type_scope"], "keras.keras_parameterized.run_all_keras_modes": ["python.tf2.enabled", "<builtin>.ValueError", "keras.keras_parameterized._test_or_class_decorator"], "keras.keras_parameterized.run_all_keras_modes.single_method_decorator": ["functools.wraps", "testing.parameterized.named_parameters"], "keras.keras_parameterized.run_all_keras_modes.single_method_decorator.decorated": ["keras.keras_parameterized._v1_session_test", "keras.keras_parameterized._v2_function_test", "<builtin>.ValueError", "keras.keras_parameterized._v2_eager_test"], "keras.keras_parameterized._v1_session_test": ["framework.ops.get_default_graph", "keras.testing_utils.run_eagerly_scope"], "keras.keras_parameterized._v2_eager_test": ["eager.context.eager_mode", "keras.testing_utils.run_eagerly_scope"], "keras.keras_parameterized._v2_function_test": ["eager.context.eager_mode", "keras.testing_utils.run_eagerly_scope"], "keras.keras_parameterized._test_or_class_decorator._decorate_test_or_class": ["keras.keras_parameterized.run_with_all_model_types.single_method_decorator", "<builtin>.setattr", "<builtin>.callable", "keras.keras_parameterized.run_all_keras_modes.single_method_decorator", "itertools.chain.from_iterable", "<builtin>.isinstance", "keras.keras_parameterized.run_with_all_saved_model_formats.single_method_decorator", "<builtin>.type"], "keras.losses": ["util.dispatch.add_dispatch_support", "util.dispatch.dispatch_for_types", "util.tf_export.keras_export"], "keras.losses.Loss.__init__": ["keras.losses.Loss._set_name_scope", "losses_utils.ReductionV2.validate"], "losses_utils.ReductionV2.validate": [], "keras.losses.Loss._set_name_scope": [], "keras.losses.Loss.__call__": ["eager.context.executing_eagerly", "core.ag_ctx.control_status_ctx", "keras.losses.Loss.call", "impl.api.tf_convert", "keras.losses.Loss._get_reduction", "utils.losses_utils.compute_weighted_loss", "utils.tf_utils.graph_context_for_symbolic_tensors", "keras.backend.name_scope"], "keras.losses.Loss.call": ["<builtin>.NotImplementedError"], "keras.losses.Loss._get_reduction": ["<builtin>.ValueError", "distribute.distribution_strategy_context.has_strategy"], "keras.losses.Loss.from_config": ["keras.losses.Loss.__init__"], "keras.losses.Loss.get_config": [], "keras.losses.Loss": ["docs.doc_controls.for_subclass_implementers", "abc.abstractmethod"], "keras.losses.LossFunctionWrapper.__init__": ["<builtin>.super"], "keras.losses.LossFunctionWrapper.call": ["core.ag_ctx.control_status_ctx", "utils.losses_utils.squeeze_or_expand_dimensions", "framework.tensor_util.is_tf_type", "impl.api.tf_convert"], "keras.losses.LossFunctionWrapper.get_config": ["<builtin>.dict", "utils.tf_utils.is_tensor_or_variable", "keras.backend.eval", "<builtin>.super", "<builtin>.list"], "keras.losses.MeanSquaredError.__init__": ["<builtin>.super"], "keras.losses.MeanAbsoluteError.__init__": ["<builtin>.super"], "keras.losses.MeanAbsolutePercentageError.__init__": ["<builtin>.super"], "keras.losses.MeanSquaredLogarithmicError.__init__": ["<builtin>.super"], "keras.losses.BinaryCrossentropy.__init__": ["<builtin>.super"], "keras.losses.CategoricalCrossentropy.__init__": ["<builtin>.super"], "keras.losses.SparseCategoricalCrossentropy.__init__": ["<builtin>.super"], "keras.losses.Hinge.__init__": ["<builtin>.super"], "keras.losses.SquaredHinge.__init__": ["<builtin>.super"], "keras.losses.CategoricalHinge.__init__": ["<builtin>.super"], "keras.losses.Poisson.__init__": ["<builtin>.super"], "keras.losses.LogCosh.__init__": ["<builtin>.super"], "keras.losses.KLDivergence.__init__": ["<builtin>.super"], "keras.losses.Huber.__init__": ["<builtin>.super"], "keras.losses.mean_squared_error": ["ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.squared_difference", "keras.backend.mean"], "keras.losses._ragged_tensor_apply_loss": ["<builtin>.len", "<builtin>.isinstance", "ragged.ragged_map_ops.map_fn", "keras.losses.mean_squared_error", "ragged.ragged_util.assert_splits_match", "framework.tensor_spec.TensorSpec", "ragged.ragged_tensor.RaggedTensorSpec", "keras.losses.mean_absolute_error", "keras.losses.mean_squared_logarithmic_error", "functools.partial", "keras.losses.mean_absolute_percentage_error", "framework.ops.control_dependencies"], "keras.losses._ragged_tensor_apply_loss.rt_is_equiv_dense": ["ops.math_ops.equal", "ops.math_ops.cast", "ops.math_ops.reduce_all", "keras.backend.floatx", "ops.math_ops.reduce_variance", "framework.constant_op.constant"], "keras.losses._ragged_tensor_apply_loss._convert_to_dense": ["<builtin>.isinstance", "<builtin>.tuple"], "keras.losses._ragged_tensor_apply_loss._call_loss": ["<builtin>.isinstance", "keras.losses.mean_squared_error", "keras.losses.mean_absolute_error", "keras.losses.mean_squared_logarithmic_error", "ragged_tensor.RaggedTensor.from_tensor", "keras.losses.mean_absolute_percentage_error"], "keras.losses.mean_absolute_error": ["ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.abs", "keras.backend.mean"], "keras.losses.mean_squared_logarithmic_error": ["keras.backend.epsilon", "ops.math_ops.squared_difference", "keras.backend.maximum", "ops.math_ops.cast", "ops.math_ops.log", "keras.backend.mean", "framework.ops.convert_to_tensor_v2_with_dispatch"], "keras.losses.mean_absolute_percentage_error": ["keras.backend.epsilon", "keras.backend.maximum", "ops.math_ops.cast", "keras.backend.mean", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.abs"], "keras.losses._ragged_tensor_apply_loss._wrapper": ["<builtin>.isinstance", "keras.losses._ragged_tensor_apply_loss.rt_is_equiv_dense", "keras.losses.mean_squared_error", "keras.losses.mean_absolute_error", "ops.control_flow_ops.cond", "keras.losses.mean_squared_logarithmic_error", "keras.losses.mean_absolute_percentage_error"], "keras.losses._ragged_tensor_apply_loss._wrapper.<lambda1>": ["keras.losses._ragged_tensor_apply_loss._convert_to_dense", "keras.losses._ragged_tensor_apply_loss._call_loss"], "keras.losses._ragged_tensor_apply_loss._wrapper.<lambda2>": ["keras.losses._ragged_tensor_apply_loss._call_loss"], "keras.losses._ragged_tensor_mse": ["keras.losses._ragged_tensor_apply_loss"], "keras.losses._ragged_tensor_mae": ["keras.losses._ragged_tensor_apply_loss"], "keras.losses._ragged_tensor_mape": ["keras.losses._ragged_tensor_apply_loss"], "keras.losses._ragged_tensor_msle": ["keras.losses._ragged_tensor_apply_loss"], "keras.losses._maybe_convert_labels": ["ops.math_ops.equal", "ops.math_ops.reduce_all", "framework.smart_cond.smart_cond", "ops.math_ops.logical_or"], "keras.losses._maybe_convert_labels._convert_binary_labels": [], "keras.losses._maybe_convert_labels.<lambda1>": [], "keras.losses.squared_hinge": ["ops.math_ops.cast", "keras.backend.mean", "ops.math_ops.maximum", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.square", "keras.losses._maybe_convert_labels"], "keras.losses.hinge": ["ops.math_ops.cast", "keras.backend.mean", "ops.math_ops.maximum", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.losses._maybe_convert_labels"], "keras.losses.categorical_hinge": ["ops.math_ops.reduce_max", "ops.math_ops.cast", "ops.math_ops.maximum", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.reduce_sum"], "keras.losses.huber": ["ops.math_ops.subtract", "ops.math_ops.cast", "ops.array_ops.where_v2", "keras.backend.mean", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.square", "keras.backend.floatx", "ops.math_ops.abs"], "keras.losses.log_cosh": ["keras.losses.log_cosh._logcosh", "ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.mean"], "keras.losses.log_cosh._logcosh": ["ops.math_ops.cast", "ops.math_ops.log", "ops.math_ops.softplus"], "keras.losses.categorical_crossentropy": ["ops.math_ops.cast", "framework.smart_cond.smart_cond", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.categorical_crossentropy", "keras.backend.floatx"], "keras.losses.categorical_crossentropy._smooth_labels": ["ops.math_ops.cast", "ops.array_ops.shape"], "keras.losses.categorical_crossentropy.<lambda1>": [], "keras.losses._ragged_tensor_categorical_crossentropy": ["functools.partial", "keras.losses._ragged_tensor_apply_loss"], "keras.losses.sparse_categorical_crossentropy": ["ops.math_ops.cast", "keras.backend.sparse_categorical_crossentropy", "framework.ops.convert_to_tensor_v2_with_dispatch"], "keras.losses._ragged_tensor_sparse_categorical_crossentropy": ["functools.partial", "keras.losses._ragged_tensor_apply_loss"], "keras.losses.binary_crossentropy": ["ops.math_ops.cast", "keras.backend.mean", "keras.backend.binary_crossentropy", "framework.smart_cond.smart_cond", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.floatx"], "keras.losses.binary_crossentropy._smooth_labels": [], "keras.losses.binary_crossentropy.<lambda1>": [], "keras.losses._ragged_tensor_binary_crossentropy": ["functools.partial", "keras.losses._ragged_tensor_apply_loss"], "keras.losses.kl_divergence": ["keras.backend.epsilon", "ops.math_ops.cast", "ops.math_ops.log", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.clip", "ops.math_ops.reduce_sum"], "keras.losses.poisson": ["keras.backend.epsilon", "ops.math_ops.cast", "ops.math_ops.log", "keras.backend.mean", "framework.ops.convert_to_tensor_v2_with_dispatch"], "keras.losses.cosine_similarity": ["ops.nn.l2_normalize", "ops.math_ops.reduce_sum"], "keras.losses.CosineSimilarity.__init__": ["<builtin>.super"], "keras.losses.serialize": ["utils.generic_utils.serialize_keras_object"], "keras.metrics": ["util.tf_export.keras_export", "util.dispatch.add_dispatch_support"], "keras.metrics.Metric.__init__": ["engine.base_layer_utils.v2_dtype_behavior_enabled", "framework.dtypes.as_dtype", "<builtin>.super", "keras.backend.floatx"], "keras.metrics.Metric.__new__": ["utils.metrics_utils.update_state_wrapper", "engine.base_layer_utils.is_in_eager_or_tf_function", "types.MethodType", "<builtin>.super", "<builtin>.isinstance", "utils.metrics_utils.result_wrapper", "keras.metrics.is_built_in", "eager.def_function.function"], "keras.metrics.is_built_in": [], "keras.metrics.Metric.__new__.update_state_fn": ["impl.api.tf_convert", "core.ag_ctx.control_status_ctx"], "keras.metrics.Metric.__new__.result_fn": ["impl.api.tf_convert", "core.ag_ctx.control_status_ctx"], "keras.metrics.Metric.__call__": ["distribute.distributed_training_utils.call_replica_local_fn"], "keras.metrics.Metric.__call__.replica_local_fn": ["keras.metrics.Metric.update_state", "<builtin>.any", "<builtin>.isinstance", "keras.metrics.MeanMetricWrapper.update_state", "framework.ops.control_dependencies", "util.nest.flatten", "keras.metrics.Metric.result"], "keras.metrics.Metric.update_state": ["<builtin>.NotImplementedError"], "keras.metrics.MeanMetricWrapper.update_state": ["utils.metrics_utils.ragged_assert_compatible_and_get_flat_values", "core.ag_ctx.control_status_ctx", "impl.api.tf_convert", "utils.losses_utils.squeeze_or_expand_dimensions", "<builtin>.super", "ops.math_ops.cast"], "keras.metrics.Metric.result": ["<builtin>.NotImplementedError"], "keras.metrics.Metric.dtype": [], "keras.metrics.Metric.get_config": [], "keras.metrics.Metric.reset_state": ["keras.backend.batch_set_value", "utils.generic_utils.is_default", "keras.metrics.Metric.reset_states", "warnings.warn"], "keras.metrics.Metric.reset_states": ["keras.metrics.Metric.reset_state"], "keras.metrics.Metric": ["docs.doc_controls.do_not_generate_docs", "utils.generic_utils.default", "docs.doc_controls.for_subclass_implementers", "abc.abstractmethod"], "keras.metrics.Metric.add_weight": ["<builtin>.super", "keras.backend.is_tpu_strategy", "distribute.distribution_strategy_context.has_strategy", "distribute.distribution_strategy_context.get_strategy", "framework.ops.init_scope"], "keras.metrics.Metric.trainable_weights": ["base_layer.Layer._dedup_weights"], "keras.metrics.Metric.non_trainable_weights": ["base_layer.Layer._dedup_weights"], "keras.metrics.Metric._trackable_saved_model_saver": ["saved_model.metric_serialization.MetricSavedModelSaver"], "saved_model.metric_serialization.MetricSavedModelSaver": [], "keras.metrics.Reduce.__init__": ["<builtin>.super", "keras.metrics.Metric.add_weight"], "keras.metrics.Reduce.update_state": ["utils.metrics_utils.ragged_assert_compatible_and_get_flat_values", "<builtin>.list", "<builtin>.NotImplementedError", "ops.weights_broadcast_ops.broadcast_weights", "ops.array_ops.size", "ops.math_ops.reduce_sum", "<builtin>.range", "ops.math_ops.reduce_mean", "utils.losses_utils.squeeze_or_expand_dimensions", "<builtin>.isinstance", "<builtin>.RuntimeError", "ops.math_ops.cast", "framework.ops.control_dependencies", "keras.backend.ndim", "ops.math_ops.multiply"], "keras.metrics.Reduce.result": ["ops.array_ops.identity", "ops.math_ops.div_no_nan", "<builtin>.NotImplementedError"], "keras.metrics.Sum.__init__": ["<builtin>.super"], "keras.metrics.Mean.__init__": ["<builtin>.super"], "keras.metrics.MeanRelativeError.__init__": ["ops.math_ops.cast", "<builtin>.super"], "keras.metrics.MeanRelativeError.update_state": ["utils.losses_utils.remove_squeezable_dimensions", "utils.metrics_utils.ragged_assert_compatible_and_get_flat_values", "ops.math_ops.abs", "utils.losses_utils.squeeze_or_expand_dimensions", "<builtin>.super", "ops.math_ops.cast", "ops.math_ops.div_no_nan"], "keras.metrics.MeanRelativeError.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super", "utils.tf_utils.is_tensor_or_variable", "keras.backend.eval"], "keras.metrics.MeanMetricWrapper.__init__": ["<builtin>.super"], "keras.metrics.MeanMetricWrapper.get_config": ["<builtin>.list", "<builtin>.type", "<builtin>.dict", "<builtin>.super", "utils.tf_utils.is_tensor_or_variable", "keras.backend.eval"], "keras.metrics.MeanMetricWrapper.from_config": ["keras.metrics.get", "<builtin>.super", "keras.metrics.MeanMetricWrapper.__init__"], "keras.metrics.Accuracy.__init__": ["<builtin>.super"], "keras.metrics.BinaryAccuracy.__init__": ["<builtin>.super"], "keras.metrics.CategoricalAccuracy.__init__": ["<builtin>.super"], "keras.metrics.SparseCategoricalAccuracy.__init__": ["<builtin>.super"], "keras.metrics.TopKCategoricalAccuracy.__init__": ["<builtin>.super"], "keras.metrics.SparseTopKCategoricalAccuracy.__init__": ["<builtin>.super"], "keras.metrics._ConfusionMatrixConditionCount.__init__": ["utils.metrics_utils.parse_init_thresholds", "<builtin>.len", "<builtin>.super", "utils.metrics_utils.is_evenly_distributed_thresholds", "keras.metrics.Metric.add_weight"], "keras.metrics._ConfusionMatrixConditionCount.update_state": ["utils.metrics_utils.update_confusion_matrix_variables"], "keras.metrics._ConfusionMatrixConditionCount.result": ["framework.ops.convert_to_tensor_v2_with_dispatch", "<builtin>.len"], "keras.metrics._ConfusionMatrixConditionCount.reset_state": ["keras.backend.batch_set_value", "utils.generic_utils.to_list", "numpy.zeros", "<builtin>.len"], "keras.metrics._ConfusionMatrixConditionCount.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.FalsePositives.__init__": ["<builtin>.super"], "keras.metrics.FalseNegatives.__init__": ["<builtin>.super"], "keras.metrics.TrueNegatives.__init__": ["<builtin>.super"], "keras.metrics.TruePositives.__init__": ["<builtin>.super"], "keras.metrics.Precision.__init__": ["utils.metrics_utils.parse_init_thresholds", "<builtin>.len", "<builtin>.super", "utils.metrics_utils.is_evenly_distributed_thresholds", "keras.metrics.Metric.add_weight"], "keras.metrics.Precision.update_state": ["utils.metrics_utils.update_confusion_matrix_variables"], "keras.metrics.Precision.result": ["ops.math_ops.div_no_nan", "<builtin>.len"], "keras.metrics.Precision.reset_state": ["keras.backend.batch_set_value", "utils.generic_utils.to_list", "numpy.zeros", "<builtin>.len"], "keras.metrics.Precision.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.Recall.__init__": ["utils.metrics_utils.parse_init_thresholds", "<builtin>.len", "<builtin>.super", "utils.metrics_utils.is_evenly_distributed_thresholds", "keras.metrics.Metric.add_weight"], "keras.metrics.Recall.update_state": ["utils.metrics_utils.update_confusion_matrix_variables"], "keras.metrics.Recall.result": ["ops.math_ops.div_no_nan", "<builtin>.len"], "keras.metrics.Recall.reset_state": ["keras.backend.batch_set_value", "utils.generic_utils.to_list", "numpy.zeros", "<builtin>.len"], "keras.metrics.Recall.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.SensitivitySpecificityBase.__init__": ["<builtin>.range", "<builtin>.super", "keras.metrics.Metric.add_weight", "<builtin>.ValueError"], "keras.metrics.SensitivitySpecificityBase.update_state": ["utils.metrics_utils.update_confusion_matrix_variables"], "keras.metrics.SensitivitySpecificityBase.reset_state": ["keras.backend.batch_set_value", "numpy.zeros", "<builtin>.len"], "keras.metrics.SensitivitySpecificityBase.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.SensitivitySpecificityBase._find_max_under_constraint": ["ops.array_ops.where_v2", "ops.array_ops.gather", "ops.math_ops.greater", "ops.math_ops.reduce_max", "ops.math_ops.greater_equal", "ops.array_ops.size"], "keras.metrics.SensitivityAtSpecificity.__init__": ["<builtin>.super", "<builtin>.ValueError"], "keras.metrics.SensitivityAtSpecificity.result": ["keras.metrics.SensitivitySpecificityBase._find_max_under_constraint", "ops.math_ops.div_no_nan"], "keras.metrics.SensitivityAtSpecificity.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.SpecificityAtSensitivity.__init__": ["<builtin>.super", "<builtin>.ValueError"], "keras.metrics.SpecificityAtSensitivity.result": ["keras.metrics.SensitivitySpecificityBase._find_max_under_constraint", "ops.math_ops.div_no_nan"], "keras.metrics.SpecificityAtSensitivity.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.PrecisionAtRecall.__init__": ["<builtin>.super", "<builtin>.ValueError"], "keras.metrics.PrecisionAtRecall.result": ["keras.metrics.SensitivitySpecificityBase._find_max_under_constraint", "ops.math_ops.div_no_nan"], "keras.metrics.PrecisionAtRecall.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.RecallAtPrecision.__init__": ["<builtin>.super", "<builtin>.ValueError"], "keras.metrics.RecallAtPrecision.result": ["keras.metrics.SensitivitySpecificityBase._find_max_under_constraint", "ops.math_ops.div_no_nan"], "keras.metrics.RecallAtPrecision.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.AUC.__init__": ["framework.ops.control_dependencies", "<builtin>.list", "numpy.array", "framework.tensor_shape.TensorShape", "<builtin>.range", "<builtin>.len", "keras.backend.epsilon", "metrics_utils.AUCCurve.from_str", "metrics_utils.AUCSummationMethod.from_str", "<builtin>.super", "<builtin>.isinstance", "ops.check_ops.assert_non_negative", "<builtin>.ValueError", "keras.metrics.AUC._build", "utils.metrics_utils.is_evenly_distributed_thresholds", "<builtin>.sorted", "framework.constant_op.constant"], "metrics_utils.AUCCurve.from_str": [], "metrics_utils.AUCSummationMethod.from_str": [], "keras.metrics.AUC._build": ["eager.context.executing_eagerly", "framework.tensor_shape.TensorShape", "framework.tensor_shape.Dimension", "<builtin>.ValueError", "keras.backend._initialize_variables", "keras.backend._get_session", "framework.ops.init_scope", "keras.metrics.Metric.add_weight"], "keras.metrics.AUC.thresholds": ["<builtin>.list"], "keras.metrics.AUC.update_state": ["keras.activations.sigmoid", "utils.metrics_utils.update_confusion_matrix_variables", "framework.tensor_shape.TensorShape", "keras.metrics.AUC._build", "framework.ops.control_dependencies"], "keras.metrics.AUC.interpolate_pr_auc": ["ops.math_ops.logical_and", "ops.array_ops.where", "ops.math_ops.reduce_sum", "ops.math_ops.reduce_mean", "ops.math_ops.maximum", "ops.array_ops.ones_like", "ops.math_ops.div_no_nan", "ops.math_ops.multiply", "ops.math_ops.log"], "keras.metrics.AUC.result": ["ops.math_ops.minimum", "keras.metrics.AUC.interpolate_pr_auc", "ops.math_ops.reduce_sum", "ops.math_ops.reduce_mean", "ops.math_ops.maximum", "ops.math_ops.div_no_nan", "ops.math_ops.multiply"], "keras.metrics.AUC.reset_state": ["keras.backend.batch_set_value", "numpy.zeros"], "keras.metrics.AUC.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super", "utils.tf_utils.is_tensor_or_variable", "keras.backend.eval"], "keras.metrics.CosineSimilarity.__init__": ["<builtin>.super"], "keras.metrics.MeanAbsoluteError.__init__": ["<builtin>.super"], "keras.metrics.MeanAbsolutePercentageError.__init__": ["<builtin>.super"], "keras.metrics.MeanSquaredError.__init__": ["<builtin>.super"], "keras.metrics.MeanSquaredLogarithmicError.__init__": ["<builtin>.super"], "keras.metrics.Hinge.__init__": ["<builtin>.super"], "keras.metrics.SquaredHinge.__init__": ["<builtin>.super"], "keras.metrics.CategoricalHinge.__init__": ["<builtin>.super"], "keras.metrics.RootMeanSquaredError.__init__": ["<builtin>.super"], "keras.metrics.RootMeanSquaredError.update_state": ["ops.math_ops.cast", "utils.losses_utils.squeeze_or_expand_dimensions", "ops.math_ops.squared_difference", "<builtin>.super"], "keras.metrics.RootMeanSquaredError.result": ["ops.math_ops.div_no_nan", "ops.math_ops.sqrt"], "keras.metrics.LogCoshError.__init__": ["<builtin>.super"], "keras.metrics.Poisson.__init__": ["<builtin>.super"], "keras.metrics.KLDivergence.__init__": ["<builtin>.super"], "keras.metrics.MeanIoU.__init__": ["<builtin>.super", "keras.metrics.Metric.add_weight"], "keras.metrics.MeanIoU.update_state": ["ops.math_ops.cast", "ops.confusion_matrix.confusion_matrix", "ops.array_ops.reshape"], "ops.confusion_matrix.confusion_matrix": ["ops.check_ops.assert_less", "ops.array_ops.stack", "ops.check_ops.assert_non_negative", "ops.math_ops.maximum", "ops.confusion_matrix.remove_squeezable_dimensions", "ops.math_ops.cast", "ops.array_ops.scatter_nd", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.math_ops.reduce_max", "ops.array_ops.ones_like", "ops.control_flow_ops.with_dependencies"], "keras.metrics.MeanIoU.result": ["ops.math_ops.reduce_sum", "ops.math_ops.not_equal", "ops.array_ops.tensor_diag_part", "ops.math_ops.cast", "ops.math_ops.div_no_nan"], "keras.metrics.MeanIoU.reset_state": ["keras.backend.set_value", "numpy.zeros"], "keras.metrics.MeanIoU.get_config": ["<builtin>.list", "<builtin>.super", "<builtin>.dict"], "keras.metrics.MeanTensor.__init__": ["keras.metrics.MeanTensor._build", "<builtin>.super"], "keras.metrics.MeanTensor._build": ["eager.context.executing_eagerly", "framework.tensor_shape.TensorShape", "keras.backend._initialize_variables", "keras.backend._get_session", "framework.ops.init_scope", "keras.metrics.Metric.add_weight"], "keras.metrics.MeanTensor.total": [], "keras.metrics.MeanTensor.count": [], "keras.metrics.MeanTensor.update_state": ["framework.ops.control_dependencies", "<builtin>.list", "ops.weights_broadcast_ops.broadcast_weights", "keras.metrics.MeanTensor._build", "<builtin>.range", "ops.math_ops.reduce_mean", "utils.losses_utils.squeeze_or_expand_dimensions", "<builtin>.ValueError", "ops.math_ops.cast", "ops.array_ops.ones_like", "keras.backend.ndim", "ops.math_ops.multiply"], "keras.metrics.MeanTensor.result": ["ops.math_ops.div_no_nan", "<builtin>.ValueError"], "keras.metrics.MeanTensor.reset_state": ["keras.backend.batch_set_value", "numpy.zeros"], "keras.metrics.BinaryCrossentropy.__init__": ["<builtin>.super"], "keras.metrics.CategoricalCrossentropy.__init__": ["<builtin>.super"], "keras.metrics.SparseCategoricalCrossentropy.__init__": ["<builtin>.super"], "keras.metrics.SumOverBatchSize.__init__": ["<builtin>.super"], "keras.metrics.SumOverBatchSizeMetricWrapper.__init__": ["<builtin>.super"], "keras.metrics.SumOverBatchSizeMetricWrapper.update_state": ["core.ag_ctx.control_status_ctx", "impl.api.tf_convert", "utils.losses_utils.squeeze_or_expand_dimensions", "<builtin>.super", "ops.math_ops.cast"], "keras.metrics.SumOverBatchSizeMetricWrapper.get_config": ["<builtin>.list", "<builtin>.dict", "<builtin>.super", "utils.tf_utils.is_tensor_or_variable", "keras.backend.eval"], "keras.metrics.accuracy": ["ops.math_ops.cast", "utils.metrics_utils.ragged_assert_compatible_and_get_flat_values", "keras.backend.floatx", "ops.math_ops.equal"], "keras.metrics.binary_accuracy": ["ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch", "ops.math_ops.equal", "keras.backend.mean"], "keras.metrics.categorical_accuracy": ["ops.math_ops.argmax", "ops.math_ops.cast", "keras.backend.floatx", "ops.math_ops.equal"], "keras.metrics.sparse_categorical_accuracy": ["keras.backend.dtype", "ops.math_ops.equal", "keras.backend.floatx", "ops.math_ops.argmax", "<builtin>.len", "ops.array_ops.squeeze", "ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch", "keras.backend.int_shape"], "keras.metrics.top_k_categorical_accuracy": ["ops.math_ops.argmax", "ops.math_ops.cast", "ops.nn.in_top_k", "keras.backend.floatx"], "keras.metrics.sparse_top_k_categorical_accuracy": ["keras.backend.floatx", "ops.array_ops.reshape", "ops.nn.in_top_k", "ops.math_ops.cast", "framework.ops.convert_to_tensor_v2_with_dispatch"], "keras.metrics.cosine_proximity": ["ops.math_ops.reduce_sum", "ops.nn.l2_normalize"], "keras.metrics.serialize": ["utils.generic_utils.serialize_keras_object"], "keras.models": ["util.tf_export.keras_export"], "keras.models.share_weights": [], "keras.models._clone_layer": [], "keras.models._insert_ancillary_layers": ["<builtin>.list", "<builtin>.isinstance"], "keras.models._insert_ancillary_layers.<lambda1>": [], "keras.models._make_new_nodes": ["keras.models._clone_layer", "<builtin>.zip", "util.nest.map_structure", "<builtin>.list", "<builtin>.set", "<builtin>.all", "<builtin>.isinstance", "util.nest.flatten"], "keras.models._make_new_nodes.<lambda1>": [], "keras.models._make_new_nodes.<lambda2>": [], "keras.models._clone_layers_and_model_config": ["engine.functional.get_network_config"], "keras.models._clone_layers_and_model_config._copy_layer": ["keras.models._clone_layer", "engine.input_layer.InputLayer"], "engine.input_layer.InputLayer": [], "keras.models._remove_ancillary_layers": [], "utils.generic_utils.DisableSharedObjectScope": [], "keras.models._in_place_subclassed_model_reset": ["<builtin>.ValueError", "<builtin>.dir", "<builtin>.getattr", "framework.ops.executing_eagerly_outside_functions", "<builtin>.hasattr", "<builtin>.setattr", "keras.models._reset_build_compile_trackers", "<builtin>.list", "<builtin>.all", "<builtin>.isinstance", "utils.version_utils.swap_class"], "keras.models._reset_build_compile_trackers": ["framework.ops.executing_eagerly_outside_functions"], "keras.models.in_place_subclassed_model_state_restoration": ["<builtin>.setattr", "keras.models._reset_build_compile_trackers", "<builtin>.isinstance", "<builtin>.hasattr"], "keras.models.clone_and_build_model": ["platform.tf_logging.warning", "<builtin>.ValueError", "<builtin>.zip", "framework.ops.executing_eagerly_outside_functions", "keras.optimizer_v1.TFOptimizer", "keras.metrics.clone_metrics", "<builtin>.len", "keras.models._in_place_subclassed_model_reset", "utils.generic_utils.CustomObjectScope", "keras.backend.placeholder", "keras.backend.track_tf_optimizer", "<builtin>.isinstance", "keras.models.clone_model"], "keras.models.clone_and_build_model.<lambda1>": [], "keras.optimizer_v1.TFOptimizer": [], "keras.optimizers": ["util.tf_export.keras_export"], "keras.optimizer_v1": [], "keras.optimizer_v1.Optimizer.__init__": ["<builtin>.TypeError", "<builtin>.str", "<builtin>.ValueError"], "keras.optimizer_v1.Optimizer._create_all_weights": [], "keras.optimizer_v1.Optimizer.get_updates": [], "keras.optimizer_v1.Optimizer.get_gradients": ["<builtin>.ValueError", "ops.clip_ops.clip_by_value", "ops.clip_ops.clip_by_norm", "<builtin>.any", "<builtin>.hasattr", "keras.backend.gradients"], "keras.optimizer_v1.Optimizer.set_weights": ["<builtin>.ValueError", "<builtin>.zip", "keras.backend.batch_get_value", "keras.backend.batch_set_value", "<builtin>.len", "<builtin>.str"], "keras.optimizer_v1.Optimizer.get_weights": ["keras.backend.batch_get_value"], "keras.optimizer_v1.Optimizer.get_config": ["<builtin>.hasattr"], "keras.optimizer_v1.Optimizer.from_config": ["keras.optimizer_v1.Optimizer.__init__"], "keras.optimizer_v1.SGD.__init__": ["keras.backend.name_scope", "keras.backend.variable", "<builtin>.super"], "keras.optimizer_v1.SGD._create_all_weights": ["keras.backend.zeros", "keras.backend.int_shape"], "keras.optimizer_v1.SGD.get_updates": ["keras.backend.dtype", "<builtin>.getattr", "ops.state_ops.assign_add", "keras.optimizer_v1.Optimizer.get_gradients", "ops.state_ops.assign", "<builtin>.zip", "ops.math_ops.cast", "keras.optimizer_v1.SGD._create_all_weights"], "keras.optimizer_v1.SGD.get_config": ["<builtin>.super", "keras.backend.get_value", "<builtin>.float", "<builtin>.list", "<builtin>.dict"], "keras.optimizer_v1.RMSprop.__init__": ["keras.backend.epsilon", "keras.backend.name_scope", "keras.backend.variable", "<builtin>.super"], "keras.optimizer_v1.RMSprop._create_all_weights": ["keras.backend.zeros", "keras.backend.dtype", "keras.backend.int_shape"], "keras.optimizer_v1.RMSprop.get_updates": ["keras.backend.dtype", "ops.math_ops.square", "ops.state_ops.assign_add", "<builtin>.getattr", "keras.optimizer_v1.Optimizer.get_gradients", "ops.state_ops.assign", "keras.backend.sqrt", "<builtin>.zip", "ops.math_ops.cast", "keras.optimizer_v1.RMSprop._create_all_weights"], "keras.optimizer_v1.RMSprop.get_config": ["<builtin>.super", "keras.backend.get_value", "<builtin>.float", "<builtin>.list", "<builtin>.dict"], "keras.optimizer_v1.Adagrad.__init__": ["keras.backend.epsilon", "keras.backend.name_scope", "keras.backend.variable", "<builtin>.super"], "keras.optimizer_v1.Adagrad._create_all_weights": ["keras.backend.zeros", "keras.backend.int_shape"], "keras.optimizer_v1.Adagrad.get_updates": ["keras.backend.dtype", "ops.math_ops.square", "ops.state_ops.assign_add", "<builtin>.getattr", "keras.optimizer_v1.Optimizer.get_gradients", "ops.state_ops.assign", "keras.backend.sqrt", "keras.optimizer_v1.Adagrad._create_all_weights", "<builtin>.zip", "ops.math_ops.cast"], "keras.optimizer_v1.Adagrad.get_config": ["<builtin>.super", "keras.backend.get_value", "<builtin>.float", "<builtin>.list", "<builtin>.dict"], "keras.optimizer_v1.Adadelta.__init__": ["keras.backend.epsilon", "keras.backend.name_scope", "keras.backend.variable", "<builtin>.super"], "keras.optimizer_v1.Adadelta._create_all_weights": ["keras.backend.zeros", "keras.backend.int_shape"], "keras.optimizer_v1.Adadelta.get_updates": ["keras.backend.dtype", "ops.math_ops.square", "ops.state_ops.assign_add", "<builtin>.getattr", "keras.optimizer_v1.Optimizer.get_gradients", "ops.state_ops.assign", "keras.backend.sqrt", "<builtin>.zip", "ops.math_ops.cast", "keras.optimizer_v1.Adadelta._create_all_weights"], "keras.optimizer_v1.Adadelta.get_config": ["<builtin>.super", "keras.backend.get_value", "<builtin>.float", "<builtin>.list", "<builtin>.dict"], "keras.optimizer_v1.Adam.__init__": ["keras.backend.epsilon", "keras.backend.name_scope", "keras.backend.variable", "<builtin>.super"], "keras.optimizer_v1.Adam._create_all_weights": ["keras.backend.zeros", "keras.backend.dtype", "keras.backend.int_shape"], "keras.optimizer_v1.Adam.get_updates": ["keras.backend.dtype", "framework.ops.control_dependencies", "ops.math_ops.square", "ops.state_ops.assign_add", "ops.math_ops.pow", "<builtin>.getattr", "ops.math_ops.maximum", "keras.optimizer_v1.Optimizer.get_gradients", "keras.backend.sqrt", "ops.state_ops.assign", "keras.optimizer_v1.Adam._create_all_weights", "<builtin>.zip", "ops.math_ops.cast", "keras.backend.floatx"], "keras.optimizer_v1.Adam.get_config": ["<builtin>.super", "keras.backend.get_value", "<builtin>.float", "<builtin>.list", "<builtin>.dict"], "keras.optimizer_v1.Adamax.__init__": ["keras.backend.epsilon", "keras.backend.name_scope", "keras.backend.variable", "<builtin>.super"], "keras.optimizer_v1.Adamax._create_all_weights": ["keras.backend.zeros", "keras.backend.int_shape"], "keras.optimizer_v1.Adamax.get_updates": ["keras.backend.dtype", "framework.ops.control_dependencies", "<builtin>.getattr", "ops.state_ops.assign_add", "ops.math_ops.pow", "ops.math_ops.maximum", "keras.optimizer_v1.Optimizer.get_gradients", "ops.state_ops.assign", "<builtin>.zip", "keras.optimizer_v1.Adamax._create_all_weights", "ops.math_ops.cast", "keras.backend.floatx", "ops.math_ops.abs"], "keras.optimizer_v1.Adamax.get_config": ["<builtin>.super", "keras.backend.get_value", "<builtin>.float", "<builtin>.list", "<builtin>.dict"], "keras.optimizer_v1.Nadam.__init__": ["keras.backend.epsilon", "keras.backend.name_scope", "keras.backend.variable", "<builtin>.super"], "keras.optimizer_v1.Nadam._create_all_weights": ["keras.backend.zeros", "keras.backend.int_shape"], "keras.optimizer_v1.Nadam.get_updates": ["framework.ops.control_dependencies", "keras.optimizer_v1.Nadam._create_all_weights", "ops.math_ops.square", "ops.state_ops.assign_add", "keras.backend.cast_to_floatx", "ops.math_ops.pow", "<builtin>.getattr", "keras.optimizer_v1.Optimizer.get_gradients", "ops.state_ops.assign", "keras.backend.sqrt", "<builtin>.zip", "ops.math_ops.cast", "keras.backend.floatx"], "keras.optimizer_v1.Nadam.get_config": ["<builtin>.super", "keras.backend.get_value", "<builtin>.float", "<builtin>.list", "<builtin>.dict"], "keras.optimizer_v1.TFOptimizer.__init__": ["base.Trackable._track_trackable", "keras.backend.name_scope", "keras.backend.variable"], "keras.optimizer_v1.TFOptimizer._clip_gradients": [], "keras.optimizer_v1.TFOptimizer.minimize": ["<builtin>.ValueError", "eager.backprop.GradientTape", "<builtin>.callable", "util.nest.flatten", "<builtin>.zip", "keras.optimizer_v1.TFOptimizer.apply_gradients", "<builtin>.list"], "keras.optimizer_v1.TFOptimizer.apply_gradients": [], "keras.optimizer_v1.TFOptimizer.get_grads": [], "keras.optimizer_v1.TFOptimizer.get_updates": ["training.training_util.get_global_step", "ops.state_ops.assign_add", "distribute.distribution_strategy_context.has_strategy"], "training.training_util.get_global_step": ["<builtin>.len", "framework.ops.get_default_graph", "platform.tf_logging.error", "training.training_util.assert_global_step"], "keras.optimizer_v1.TFOptimizer.weights": [], "keras.optimizer_v1.TFOptimizer.get_config": [], "keras.optimizer_v1.TFOptimizer.from_config": [], "keras.regularizers": ["util.tf_export.keras_export"], "keras.regularizers._check_penalty_number": ["<builtin>.isinstance", "<builtin>.ValueError", "math.isinf", "math.isnan"], "math.isinf": [], "math.isnan": [], "keras.regularizers._none_to_default": [], "keras.regularizers.Regularizer.__call__": [], "keras.regularizers.Regularizer.from_config": [], "keras.regularizers.Regularizer.get_config": ["<builtin>.str", "<builtin>.NotImplementedError"], "keras.regularizers.L1L2.__init__": ["keras.regularizers._check_penalty_number", "keras.backend.cast_to_floatx"], "keras.regularizers.L1L2.__call__": ["ops.math_ops.square", "ops.math_ops.abs", "keras.backend.constant", "ops.math_ops.reduce_sum"], "keras.regularizers.L1L2.get_config": ["<builtin>.float"], "keras.regularizers.L1.__init__": ["keras.regularizers._check_penalty_number", "<builtin>.TypeError", "keras.backend.cast_to_floatx"], "keras.regularizers.L1.__call__": ["ops.math_ops.abs", "ops.math_ops.reduce_sum"], "keras.regularizers.L1.get_config": ["<builtin>.float"], "keras.regularizers.L2.__init__": ["keras.regularizers._check_penalty_number", "<builtin>.TypeError", "keras.backend.cast_to_floatx"], "keras.regularizers.L2.__call__": ["ops.math_ops.square", "ops.math_ops.reduce_sum"], "keras.regularizers.L2.get_config": ["<builtin>.float"], "keras.regularizers.l1_l2": ["keras.regularizers.L1L2.__init__"], "keras.regularizers.deserialize": ["<builtin>.globals", "utils.generic_utils.deserialize_keras_object", "keras.regularizers.L1L2.__init__"], "layers.base": [], "layers.layers": [], "layers.normalization": [], "layers.utils": [], "layers.utils.convert_data_format": ["<builtin>.ValueError"], "layers.utils.normalize_tuple": ["<builtin>.ValueError", "<builtin>.int", "<builtin>.isinstance", "<builtin>.str", "<builtin>.type", "<builtin>.tuple", "<builtin>.len"], "layers.utils.normalize_data_format": ["<builtin>.ValueError", "<builtin>.str"], "layers.utils.normalize_padding": ["<builtin>.ValueError", "<builtin>.str"], "layers.utils.conv_output_length": [], "layers.utils.conv_input_length": [], "layers.utils.deconv_output_length": ["<builtin>.max"], "layers.utils.smart_cond": ["ops.control_flow_ops.cond", "<builtin>.isinstance", "framework.smart_cond.smart_cond"], "layers.utils.constant_value": ["<builtin>.isinstance", "framework.smart_cond.smart_constant_value"], "metrics_wrapper.metrics_wrapper": [], "module.module": ["re.compile"], "module.module.Module": ["<builtin>.frozenset"], "module.module.Module.__init__": ["python.tf2.enabled", "framework.ops.name_scope_v2", "module.module.camel_to_snake", "<builtin>.type", "<builtin>.ValueError", "module.module.valid_identifier", "framework.ops.name_scope"], "module.module.camel_to_snake": [], "module.module.valid_identifier": ["<builtin>.bool"], "module.module.Module.name": [], "module.module.Module.name_scope": ["python.tf2.enabled", "framework.ops.name_scope"], "module.module.Module.variables": ["<builtin>.tuple", "module.module.Module._flatten"], "module.module.Module._flatten": ["module.module._flatten_module"], "module.module.Module.trainable_variables": ["<builtin>.tuple", "module.module.Module._flatten"], "module.module.Module.non_trainable_variables": ["<builtin>.tuple", "module.module.Module._flatten"], "module.module.Module.submodules": ["<builtin>.tuple", "module.module.Module._flatten"], "module.module.Module._flatten.<lambda1>": [], "module.module._flatten_module": ["module.module._is_module", "<builtin>.ValueError", "<builtin>.vars", "<builtin>.set", "module.module._flatten_module", "six.raise_from", "<builtin>.sorted", "util.nest.flatten_with_tuple_paths", "module.module.Module._flatten.<lambda1>", "<builtin>.id"], "module.module.Module.with_name_scope": ["util.tf_decorator.make_decorator"], "module.module.Module.with_name_scope.method_with_name_scope": [], "module.module._is_variable": ["<builtin>.isinstance"], "module.module._is_trainable_variable": ["<builtin>.getattr", "module.module._is_variable"], "module.module._is_non_trainable_variable": ["<builtin>.getattr", "module.module._is_variable"], "module.module._is_module": ["<builtin>.isinstance"], "ops.accumulate_n_benchmark": ["platform.test.main"], "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNTemplate": ["ops.gen_state_ops.destroy_temporary_variable", "ops.gen_state_ops.temporary_variable", "framework.ops.control_dependencies", "ops.state_ops.assign", "ops.state_ops.assign_add"], "ops.gen_state_ops.temporary_variable": [], "ops.gen_state_ops.destroy_temporary_variable": [], "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNInitializedWithFirst": ["ops.array_ops.zeros_like", "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNTemplate"], "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNInitializedWithMerge": ["framework.tensor_shape.TensorShape", "ops.array_ops.zeros_like", "ops.gen_control_flow_ops.merge", "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNTemplate"], "ops.gen_control_flow_ops.merge": [], "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNInitializedWithShape": ["ops.array_ops.zeros", "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNTemplate"], "ops.accumulate_n_benchmark.AccumulateNBenchmark._GenerateUnorderedInputs": ["ops.random_ops.random_uniform", "six.moves.xrange", "random.shuffle"], "ops.accumulate_n_benchmark.AccumulateNBenchmark._GenerateReplicatedInputs": ["ops.accumulate_n_benchmark.AccumulateNBenchmark._GenerateUnorderedInputs"], "ops.accumulate_n_benchmark.AccumulateNBenchmark._GenerateOrderedInputs": ["ops.math_ops.tanh", "framework.ops.control_dependencies", "ops.data_flow_ops.FIFOQueue", "six.moves.xrange", "ops.accumulate_n_benchmark.AccumulateNBenchmark._GenerateUnorderedInputs"], "ops.data_flow_ops.FIFOQueue": [], "ops.accumulate_n_benchmark.AccumulateNBenchmark._GenerateReversedInputs": ["ops.accumulate_n_benchmark.AccumulateNBenchmark._GenerateOrderedInputs"], "ops.accumulate_n_benchmark.AccumulateNBenchmark._SetupAndRunBenchmark": ["ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNInitializedWithFirst", "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNInitializedWithMerge", "<builtin>.print", "time.time", "ops.accumulate_n_benchmark.AccumulateNBenchmark._AccumulateNInitializedWithShape", "six.moves.xrange", "client.session.Session", "ops.math_ops.add_n"], "ops.accumulate_n_benchmark.AccumulateNBenchmark._RunBenchmark": ["ops.accumulate_n_benchmark.AccumulateNBenchmark._SetupAndRunBenchmark", "framework.ops.Graph"], "ops.accumulate_n_benchmark.AccumulateNBenchmark.benchmarkAccumulateN": ["<builtin>.print", "ops.accumulate_n_benchmark.AccumulateNBenchmark._RunBenchmark"], "ops.array_grad": ["framework.ops.NotDifferentiable", "framework.ops.RegisterGradient"], "ops.array_grad._PackGrad": ["ops.array_ops.unstack"], "ops.array_grad._UnpackGrad": ["ops.array_ops.stack"], "ops.array_grad._ConcatGradHelper": ["<builtin>.ValueError", "ops.array_ops.stack", "ops.array_grad._ConcatGradHelper._ExtractInputShapes", "ops.array_ops.slice", "ops.array_grad._ConcatGradHelper._CreateDenseMaskAndBegin", "framework.ops.IndexedSlices", "framework.tensor_util.constant_value", "ops.math_ops.logical_and", "framework.constant_op.constant", "<builtin>.TypeError", "ops.math_ops.add", "eager.context.executing_eagerly", "<builtin>.type", "ops.array_ops.concat", "ops.control_flow_util.GetOutputContext", "ops.math_ops.cast", "<builtin>.isinstance", "<builtin>.len", "python.pywrap_tfe.TFE_Py_TensorShapeSlice", "<builtin>.zip", "ops.gen_array_ops.concat_offset", "ops.array_ops.gather", "ops.array_ops.where", "ops.array_ops.split", "ops.array_ops.rank", "ops.array_ops.squeeze", "ops.array_ops.shape", "framework.constant_op.is_constant"], "ops.array_grad._ConcatGradHelper._CreateDenseMaskAndBegin": ["ops.array_ops.shape", "ops.array_ops.zeros", "ops.array_ops.expand_dims", "ops.array_ops.concat"], "ops.array_grad._ConcatGradHelper._ExtractInputShapes": ["ops.array_ops.shape", "<builtin>.isinstance", "eager.context.executing_eagerly", "ops.array_ops.shape_n"], "ops.array_ops.shape_n": ["ops.gen_array_ops.shape_n"], "python.pywrap_tfe.TFE_Py_TensorShapeSlice": [], "ops.control_flow_util.GetOutputContext": ["ops.control_flow_util.IsLoopExit"], "ops.gen_array_ops.concat_offset": [], "ops.array_grad._ConcatGrad": ["ops.array_grad._ConcatGradHelper", "<builtin>.len"], "ops.array_grad._ConcatGradV2": ["ops.array_grad._ConcatGradHelper"], "ops.array_grad._SliceGrad": ["ops.control_flow_util.GraphOrParentsInXlaContext", "ops.array_ops.stack", "ops.array_ops.concat", "ops.array_ops.rank", "ops.gen_xla_ops.xla_dynamic_update_slice", "ops.array_ops.pad", "framework.ops.get_default_graph", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.zeros_like"], "ops.gen_xla_ops.xla_dynamic_update_slice": [], "ops.array_grad._StridedSliceGrad": ["ops.array_ops.shape", "ops.array_ops.strided_slice_grad", "framework.tensor_util.constant_value"], "ops.array_grad._StridedSliceGradGrad": ["ops.array_ops.strided_slice"], "ops.array_grad._TensorStridedSliceUpdateGrad": ["ops.array_grad._TensorStridedSliceUpdateGrad.Apply", "ops.array_ops.zeros_like"], "ops.array_grad._TensorStridedSliceUpdateGrad.Apply": ["ops.array_ops.tensor_strided_slice_update", "ops.array_ops.strided_slice"], "ops.array_grad._SplitGrad": ["<builtin>.list", "ops.array_ops.concat"], "ops.array_grad._SplitVGrad": ["<builtin>.len", "<builtin>.list", "ops.array_ops.concat"], "ops.array_grad._DiagGrad": ["ops.array_ops.diag_part"], "ops.array_ops.diag_part": [], "ops.array_grad._DiagPartGrad": ["ops.array_ops.diag"], "ops.array_ops.diag": [], "ops.array_grad._MatrixDiagGrad": ["ops.array_ops.matrix_diag_part"], "ops.array_grad._MatrixDiagV2Grad": ["ops.array_ops.matrix_diag_part"], "ops.array_grad._MatrixDiagV3Grad": ["ops.array_ops.matrix_diag_part"], "ops.array_grad._MatrixDiagPartGrad": ["ops.array_ops.matrix_set_diag", "ops.array_ops.matrix_diag", "ops.array_ops.zeros_like"], "ops.array_grad._MatrixDiagPartV2Grad": ["ops.array_ops.matrix_set_diag", "ops.array_ops.matrix_diag", "ops.array_ops.zeros_like"], "ops.array_grad._MatrixDiagPartV3Grad": ["ops.array_ops.matrix_set_diag", "ops.array_ops.matrix_diag", "ops.array_ops.zeros_like"], "ops.array_grad._MatrixSetDiagGrad": ["ops.math_ops.reduce_min", "ops.array_ops.matrix_set_diag", "framework.ops.colocate_with", "ops.array_ops.concat", "ops.array_ops.matrix_diag_part", "ops.array_ops.rank", "ops.array_ops.slice", "ops.array_ops.shape", "ops.array_ops.zeros", "<builtin>.min"], "ops.array_grad._MatrixSetDiagGradV2": ["ops.array_ops.matrix_set_diag", "ops.math_ops.greater", "ops.math_ops.minimum", "ops.math_ops.less", "ops.control_flow_ops.cond", "ops.array_ops.concat", "ops.array_ops.matrix_diag_part", "ops.array_ops.shape", "ops.array_ops.zeros", "ops.array_ops.reshape", "ops.math_ops.equal"], "ops.array_grad._MatrixSetDiagGradV2.<lambda1>": [], "ops.array_grad._MatrixSetDiagGradV2.<lambda2>": [], "ops.array_grad._MatrixSetDiagGradV2.<lambda3>": [], "ops.array_grad._MatrixSetDiagGradV2.<lambda4>": [], "ops.array_grad._MatrixSetDiagGradV2.<lambda5>": ["framework.ops.convert_to_tensor"], "ops.array_grad._MatrixSetDiagGradV2.<lambda6>": ["framework.ops.convert_to_tensor"], "ops.array_grad._MatrixSetDiagGradV3": ["ops.array_ops.matrix_set_diag", "ops.math_ops.greater", "ops.math_ops.minimum", "ops.math_ops.less", "ops.control_flow_ops.cond", "ops.array_ops.concat", "ops.array_ops.matrix_diag_part", "ops.array_ops.shape", "ops.array_ops.zeros", "ops.array_ops.reshape", "ops.math_ops.equal"], "ops.array_grad._MatrixSetDiagGradV3.<lambda1>": [], "ops.array_grad._MatrixSetDiagGradV3.<lambda2>": [], "ops.array_grad._MatrixSetDiagGradV3.<lambda3>": [], "ops.array_grad._MatrixSetDiagGradV3.<lambda4>": [], "ops.array_grad._MatrixSetDiagGradV3.<lambda5>": ["framework.ops.convert_to_tensor"], "ops.array_grad._MatrixSetDiagGradV3.<lambda6>": ["framework.ops.convert_to_tensor"], "ops.array_grad._MatrixBandPartGrad": ["ops.array_ops.matrix_band_part"], "ops.array_grad._FillGrad": ["ops.math_ops.reduce_sum"], "ops.array_grad._PreventGradientGrad": ["<builtin>.LookupError"], "ops.array_grad._IndexedSlicesToTensorNoWarning": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.str", "ops.math_ops.unsorted_segment_sum"], "ops.array_grad._GatherGrad": ["framework.ops.colocate_with", "ops.array_grad._IndexedSlicesToTensorNoWarning", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.expand_dims", "framework.ops.IndexedSlices", "ops.array_ops.size"], "ops.array_grad._GetBatchIndices": ["ops.array_ops.ones", "<builtin>.range", "ops.array_ops.stack", "ops.math_ops.range", "ops.math_ops.cast", "ops.array_ops.reshape", "ops.array_ops.zeros"], "ops.array_grad._BatchGatherGrad": ["ops.gen_math_ops.prod", "ops.math_ops.unsorted_segment_sum", "ops.array_grad._IndexedSlicesToTensorNoWarning", "ops.array_grad._GetBatchIndices", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.expand_dims", "ops.array_ops.size"], "ops.gen_math_ops.prod": [], "ops.array_grad._GatherV2Grad": ["<builtin>.int", "eager.context.executing_eagerly", "ops.array_ops.transpose", "framework.ops.colocate_with", "framework.tensor_util.constant_value", "ops.array_ops.identity", "framework.ops.device", "ops.array_grad._IndexedSlicesToTensorNoWarning", "ops.array_ops.concat", "ops.array_ops.gather", "ops.array_grad._BatchGatherGrad", "ops.math_ops.range", "ops.math_ops.cast", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.expand_dims", "framework.ops.IndexedSlices", "ops.array_ops.size"], "ops.array_grad._GatherNdGrad": ["ops.array_ops.scatter_nd", "ops.array_ops.shape", "ops.array_ops.squeeze", "framework.ops.IndexedSlices"], "ops.array_grad._ResourceGatherNdGrad": ["ops.array_ops.scatter_nd", "ops.gen_resource_variable_ops.variable_shape", "ops.array_ops.squeeze", "framework.ops.IndexedSlices"], "ops.gen_resource_variable_ops.variable_shape": [], "ops.array_grad._CheckNumericsGrad": ["ops.array_ops.check_numerics"], "ops.array_ops.check_numerics": [], "ops.array_grad._CheckNumericsV2Grad": ["ops.array_ops.check_numerics_v2"], "ops.array_grad._IdGrad": [], "ops.array_grad._EagerConstGrad": ["<builtin>.AssertionError"], "ops.array_grad._RefIdGrad": [], "ops.array_grad._IdNGrad": [], "ops.array_grad._ReshapeGrad": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_grad._IndexedSlicesToTensorNoWarning"], "ops.array_grad._ReshapeToInput": ["ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_grad._IndexedSlicesToTensorNoWarning"], "ops.array_grad._ExpandDimsGrad": ["ops.array_grad._ReshapeToInput"], "ops.array_grad._SqueezeGrad": ["ops.array_grad._ReshapeToInput"], "ops.array_grad._TransposeGrad": ["ops.array_ops.invert_permutation", "ops.array_ops.transpose"], "ops.array_ops.invert_permutation": [], "ops.array_grad._ConjugateTransposeGrad": ["ops.array_ops.invert_permutation", "ops.array_ops.transpose"], "ops.array_grad._TileGrad": ["ops.math_ops.reduce_sum", "ops.math_ops.mod", "eager.context.executing_eagerly", "ops.array_ops.transpose", "ops.math_ops.unsorted_segment_sum", "ops.array_ops.stack", "ops.array_ops.concat", "ops.math_ops.range", "ops.math_ops.cast", "ops.array_ops.shape", "<builtin>.isinstance", "ops.array_ops.reshape", "ops.array_ops.size"], "ops.array_grad._PadGrad": ["<builtin>.len", "ops.array_ops.stack", "ops.array_ops.rank", "ops.array_ops.slice", "ops.array_ops.shape", "ops.array_ops.reshape"], "ops.array_grad._ReverseSequenceGrad": ["ops.array_ops.reverse_sequence"], "ops.array_ops.reverse_sequence": ["ops.gen_array_ops.reverse_sequence", "util.deprecation.deprecated_argument_lookup"], "ops.array_grad._ReverseGrad": ["ops.gen_array_ops.reverse"], "ops.gen_array_ops.reverse": [], "ops.array_grad._ReverseV2Grad": ["ops.array_ops.reverse_v2"], "ops.array_ops.reverse_v2": [], "ops.array_grad._SpaceToBatchGrad": ["ops.array_ops.batch_to_space"], "ops.array_ops.batch_to_space": ["numpy.array", "util.deprecation.deprecated_argument_lookup"], "ops.array_grad._SpaceToBatchNDGrad": ["ops.array_ops.batch_to_space_nd"], "ops.array_ops.batch_to_space_nd": [], "ops.array_grad._BatchToSpaceGrad": ["ops.array_ops.space_to_batch"], "ops.array_ops.space_to_batch": ["numpy.array", "util.deprecation.deprecated_argument_lookup"], "ops.array_grad._BatchToSpaceNDGrad": ["ops.array_ops.space_to_batch_nd"], "ops.array_ops.space_to_batch_nd": [], "ops.array_grad._SpaceToDepthGrad": ["<builtin>.ValueError", "ops.array_ops.depth_to_space"], "ops.array_ops.depth_to_space": ["ops.gen_array_ops.depth_to_space"], "ops.array_grad._DepthToSpaceGrad": ["<builtin>.ValueError", "ops.array_ops.space_to_depth"], "ops.array_ops.space_to_depth": ["ops.gen_array_ops.space_to_depth"], "ops.array_grad._MirrorPadGrad": ["ops.gen_array_ops.mirror_pad_grad"], "ops.array_grad._MirrorPadGradGrad": ["ops.gen_array_ops.mirror_pad"], "ops.array_grad._QuantizeAndDequantizeGrad": [], "ops.array_grad._QuantizeAndDequantizeV2Grad": [], "ops.array_grad._QuantizeAndDequantizeV3Grad": [], "ops.array_grad._ExtractImagePatchesGrad": ["ops.array_ops.ones", "framework.sparse_tensor.SparseTensor", "ops.array_ops.transpose", "ops.array_grad._IndexedSlicesToTensorNoWarning", "ops.array_ops.concat", "ops.sparse_ops.sparse_slice", "ops.gen_array_ops.extract_image_patches", "ops.math_ops.range", "ops.array_ops.shape", "ops.sparse_ops.sparse_tensor_dense_matmul", "ops.array_ops.reshape", "ops.array_ops.expand_dims"], "ops.gen_array_ops.extract_image_patches": [], "ops.array_grad._ExtractVolumePatchesGrad": ["ops.array_ops.ones", "framework.sparse_tensor.SparseTensor", "ops.array_ops.transpose", "ops.array_grad._IndexedSlicesToTensorNoWarning", "ops.array_ops.concat", "ops.sparse_ops.sparse_slice", "ops.math_ops.range", "ops.gen_array_ops.extract_volume_patches", "ops.array_ops.shape", "ops.sparse_ops.sparse_tensor_dense_matmul", "ops.array_ops.reshape", "ops.array_ops.expand_dims"], "ops.gen_array_ops.extract_volume_patches": [], "ops.array_grad._ScatterNdGrad": ["ops.array_ops.gather_nd"], "ops.array_grad._TensorScatterUpdateGrad": ["ops.array_ops.tensor_scatter_update", "ops.array_ops.gather_nd", "ops.array_ops.zeros_like", "ops.array_ops.identity"], "ops.array_grad._TensorScatterAddGrad": ["ops.array_ops.gather_nd", "ops.array_ops.identity"], "ops.array_grad._TensorScatterMinOrMaxGrad": ["ops.array_ops.scatter_nd", "ops.array_ops.gather_nd", "ops.math_ops.cast", "ops.array_ops.shape", "ops.math_ops.equal"], "ops.array_grad._TensorScatterMaxGrad": ["ops.array_grad._TensorScatterMinOrMaxGrad"], "ops.array_grad._TensorScatterMinGrad": ["ops.array_grad._TensorScatterMinOrMaxGrad"], "ops.array_grad._TensorScatterSubGrad": ["ops.array_ops.gather_nd", "ops.array_ops.identity"], "ops.array_grad._ScatterNdNonAliasingAddGrad": ["ops.array_ops.gather_nd"], "ops.array_grad._BroadcastToGrad": ["ops.math_ops.reduce_sum", "framework.tensor_shape.TensorShape", "client.pywrap_tf_session.TF_TryEvaluateConstant_wrapper", "ops.gen_array_ops.broadcast_gradient_args", "framework.constant_op.constant", "ops.array_ops.shape", "<builtin>.isinstance", "ops.array_ops.reshape"], "ops.gen_array_ops.broadcast_gradient_args": [], "ops.array_ops": ["framework.ops.RegisterGradient", "util.dispatch.add_dispatch_support", "ops.Tensor._override_operator", "ops.array_ops._tag_zeros_tensor", "util.tf_export.tf_export", "util.deprecation.deprecated", "framework.ops.register_tensor_conversion_function", "util.deprecation.deprecated_endpoints", "util.deprecation.deprecated_args", "<builtin>.set"], "ops.gen_array_ops.reshape": [], "ops.gen_array_ops.fill": [], "ops.gen_array_ops.expand_dims": [], "ops.array_ops.listdiff": ["ops.gen_array_ops.list_diff"], "ops.gen_array_ops.list_diff": [], "ops.array_ops.setdiff1d": ["ops.gen_array_ops.list_diff"], "ops.gen_array_ops.broadcast_args": [], "ops.array_ops.shape_internal": ["eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "ops.gen_math_ops.cast", "framework.constant_op.constant", "<builtin>.isinstance", "framework.ops.name_scope", "ops.gen_array_ops.shape"], "ops.gen_math_ops.cast": [], "ops.gen_array_ops.shape": [], "ops.gen_array_ops.shape_n": [], "ops.array_ops.size_internal": ["eager.context.executing_eagerly", "ops.gen_math_ops.prod", "framework.ops.convert_to_tensor", "ops.gen_math_ops.cast", "framework.constant_op.constant", "<builtin>.isinstance", "numpy.prod", "ops.gen_array_ops.size", "<builtin>.hasattr", "framework.ops.name_scope", "<builtin>.any"], "ops.gen_array_ops.size": [], "ops.array_ops.rank_internal": ["ops.gen_array_ops.rank", "framework.constant_op.constant", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "ops.gen_array_ops.size", "framework.ops.name_scope"], "ops.gen_array_ops.rank": [], "ops.array_ops._check_index": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.getattr", "framework.dtypes.as_dtype", "<builtin>.len"], "ops.array_ops._is_undefined_dimension": ["<builtin>.isinstance"], "ops.array_ops._slice_helper": ["ops.array_ops._is_undefined_dimension", "ops.array_ops.strided_slice", "framework.ops.convert_to_tensor", "ops.gen_math_ops.cast", "framework.constant_op.constant", "<builtin>.isinstance", "ops.array_ops.boolean_mask", "ops.array_ops._check_index", "framework.ops.name_scope", "ops.array_ops.stack"], "ops.gen_array_ops._slice": [], "ops.gen_array_ops.strided_slice": [], "ops.array_ops.strided_slice.assign": [], "ops.array_ops._SliceHelperVar": ["ops.array_ops._slice_helper"], "ops.Tensor._override_operator": [], "ops.array_ops.parallel_stack": ["eager.context.executing_eagerly", "ops.array_ops.expand_dims", "framework.ops.convert_to_tensor", "<builtin>.RuntimeError", "ops.gen_array_ops.parallel_concat", "framework.tensor_shape.TensorShape", "framework.ops.name_scope", "<builtin>.len"], "ops.gen_array_ops.parallel_concat": [], "ops.gen_array_ops.pack": [], "ops.array_ops._autopacking_helper": ["eager.context.executing_eagerly", "<builtin>.all", "framework.constant_op.constant", "<builtin>.str", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.TypeError", "ops.gen_array_ops.pack", "ops.array_ops._autopacking_helper", "framework.ops.name_scope"], "ops.array_ops._get_dtype_from_nested_lists": ["ops.array_ops._get_dtype_from_nested_lists", "<builtin>.isinstance"], "ops.array_ops._cast_nested_seqs_to_dtype": [], "ops.array_ops._cast_nested_seqs_to_dtype._maybe_cast": ["<builtin>.isinstance", "ops.gen_math_ops.cast"], "ops.array_ops._should_not_autopack": ["<builtin>.type", "util.nest.flatten", "<builtin>.all"], "ops.array_ops._autopacking_conversion_function": ["ops.array_ops._get_dtype_from_nested_lists", "ops.array_ops._should_not_autopack", "ops.array_ops._cast_nested_seqs_to_dtype", "util.nest.map_structure", "ops.array_ops._autopacking_helper"], "ops.gen_array_ops.unpack": [], "ops.gen_array_ops.concat_v2": [], "ops.array_ops.boolean_mask._apply_mask_1d": ["ops.array_ops.gather", "ops.array_ops.where_v2", "ops.array_ops.squeeze"], "ops.array_ops.boolean_mask_v2": ["ops.array_ops.boolean_mask"], "ops.array_ops.sparse_mask": ["ops.gen_array_ops.list_diff", "ops.array_ops.gather", "framework.ops.name_scope", "framework.ops.IndexedSlices"], "ops.gen_array_ops.unique": [], "ops.array_ops.unique_with_counts": ["ops.gen_array_ops.unique_with_counts"], "ops.gen_array_ops.unique_with_counts": [], "ops.gen_array_ops.split": [], "ops.gen_array_ops.split_v": [], "ops.gen_array_ops.transpose": [], "ops.gen_array_ops.conjugate_transpose": [], "ops.gen_math_ops._range": [], "ops.gen_array_ops.matrix_diag_part_v3": [], "ops.gen_array_ops.diag_part": [], "ops.gen_array_ops.matrix_set_diag_v3": [], "ops.array_ops._constant_if_small": ["framework.constant_op.constant", "numpy.prod"], "ops.array_ops._tag_zeros_tensor": ["util.tf_decorator.make_decorator"], "ops.array_ops._tag_zeros_tensor.wrapped": ["ops.array_ops.zeros_like_impl", "ops.array_ops.zeros"], "ops.array_ops.zeros_like_impl": ["eager.context.executing_eagerly", "ops.array_ops.shape_internal", "framework.ops.convert_to_tensor", "ops.gen_array_ops.zeros_like", "ops.array_ops.zeros", "framework.tensor_util.is_tf_type", "framework.ops.name_scope"], "ops.array_ops.zeros_like_v2": ["ops.array_ops.zeros_like_impl"], "ops.gen_array_ops.zeros_like": [], "ops.array_ops.ones_like_impl": ["ops.array_ops.shape_internal", "eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "ops.array_ops.ones", "framework.ops.name_scope"], "ops.gen_array_ops.placeholder": [], "ops.gen_array_ops.placeholder_with_default": [], "ops.array_ops.pad_v2": ["ops.array_ops.pad"], "ops.gen_array_ops.pad": [], "ops.gen_array_ops.pad_v2": [], "ops.array_ops._get_paddings_constant": ["ops.array_ops._get_paddings_constant", "framework.tensor_util.constant_value", "<builtin>.isinstance"], "ops.array_ops._compute_size_of_strided_dim": ["ops.array_ops._compute_size_of_strided_dim.canonical"], "ops.array_ops._compute_size_of_strided_dim.canonical": ["<builtin>.max", "<builtin>.min"], "ops.array_ops._TileGradShape": ["framework.tensor_util.constant_value_as_shape", "framework.tensor_shape.unknown_shape", "<builtin>.zip", "framework.tensor_shape.TensorShape"], "ops.array_ops.edit_distance": ["<builtin>.TypeError", "ops.gen_array_ops.edit_distance", "<builtin>.isinstance"], "ops.gen_array_ops.edit_distance": [], "ops.array_ops._FakeQuantWithMinMaxArgsGradient": [], "ops.array_ops._FakeQuantWithMinMaxVarsGradient": [], "ops.array_ops._FakeQuantWithMinMaxVarsPerChannelGradient": [], "ops.array_ops._QuantizeAndDequantizeV4Grad": [], "ops.array_ops._QuantizeAndDequantizeV4GradGrad": ["ops.array_ops._QuantizeAndDequantizeV4Grad"], "ops.array_ops.space_to_batch_v2": [], "ops.gen_array_ops.space_to_depth": [], "ops.array_ops.space_to_depth_v2": ["ops.gen_array_ops.space_to_depth"], "ops.gen_array_ops.depth_to_space": [], "ops.array_ops.depth_to_space_v2": ["ops.gen_array_ops.depth_to_space"], "ops.array_ops.batch_to_space_v2": ["numpy.array", "<builtin>.isinstance"], "ops.gen_array_ops.one_hot": [], "ops.array_ops._all_dimensions": ["framework.constant_op.constant", "numpy.arange", "<builtin>.isinstance", "ops.array_ops.rank", "ops.gen_math_ops._range"], "ops.gen_math_ops._max": [], "ops.gen_array_ops.squeeze": [], "ops.gen_array_ops.where": [], "ops.gen_math_ops.select": [], "ops.gen_math_ops.select_v2": [], "ops.gen_array_ops.reverse_sequence": [], "ops.gen_array_ops.gather_v2": [], "ops.array_ops._batch_gather": ["framework.ops.convert_to_tensor", "ops.array_ops.shape", "ops.array_ops.transpose", "ops.array_ops.reshape", "<builtin>.isinstance", "ops.array_ops._batch_gather", "ops.array_ops.concat", "<builtin>.list", "ops.array_ops.stack", "ops.gen_math_ops.cast", "<builtin>.range", "ops.array_ops.rank", "ops.gen_math_ops._range", "ops.gen_math_ops.prod", "ops.array_ops.gather", "<builtin>.ValueError", "<builtin>.TypeError", "ops.array_ops.ones", "ops.array_ops.zeros"], "ops.gen_array_ops.gather_nd": [], "ops.array_ops.batch_gather_nd": ["framework.ops.convert_to_tensor", "ops.array_ops.shape", "ops.array_ops.transpose", "ops.array_ops.reshape", "<builtin>.isinstance", "ops.array_ops.meshgrid", "ops.array_ops.concat", "ops.array_ops.expand_dims", "framework.ops.name_scope", "ops.array_ops.stack", "ops.array_ops.unstack", "ops.gen_array_ops.gather_nd", "ops.gen_math_ops.cast", "ops.array_ops.rank", "ops.gen_math_ops._range", "ops.gen_math_ops.prod", "<builtin>.ValueError", "ops.array_ops.squeeze", "<builtin>.TypeError", "ops.array_ops.ones"], "ops.array_ops.gather_nd_v2": ["ops.array_ops.gather_nd"], "ops.array_ops.quantize_v2": ["ops.gen_array_ops.quantize_v2", "<builtin>.ValueError"], "ops.gen_array_ops.quantize_v2": [], "ops.array_ops.quantize": ["ops.array_ops.quantize_v2"], "ops.array_ops.dequantize": ["ops.gen_array_ops.dequantize", "<builtin>.ValueError"], "ops.gen_array_ops.dequantize": [], "ops.array_ops.quantize_and_dequantize": ["<builtin>.ValueError", "ops.gen_array_ops.quantize_and_dequantize_v2"], "ops.gen_array_ops.quantize_and_dequantize_v2": [], "ops.array_ops.quantize_and_dequantize_v2": ["ops.gen_array_ops.quantize_and_dequantize_v4", "<builtin>.ValueError"], "ops.gen_array_ops.quantize_and_dequantize_v4": [], "ops.gen_array_ops.upper_bound": [], "ops.gen_array_ops.lower_bound": [], "ops.array_ops.extract_image_patches_v2": ["ops.gen_array_ops.extract_image_patches"], "ops.array_ops.extract_image_patches": ["ops.gen_array_ops.extract_image_patches", "util.deprecation.deprecated_argument_lookup"], "ops.array_ops.fingerprint": ["ops.gen_array_ops.fingerprint"], "ops.gen_array_ops.fingerprint": [], "ops.array_ops.convert_to_int_tensor": ["<builtin>.TypeError", "ops.gen_math_ops.cast", "framework.ops.convert_to_tensor"], "ops.array_ops._with_nonzero_rank": ["ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.rank", "ops.array_ops.stack"], "ops.array_ops.tile_one_dimension": ["ops.array_ops.concat", "ops.array_ops.rank", "ops.array_ops.ones"], "ops.gen_math_ops._sum": [], "ops.gen_array_ops.guarantee_const": [], "ops.audio_microfrontend_op": ["framework.ops.NotDifferentiable", "platform.resource_loader.get_path_to_datafile", "framework.load_library.load_op_library", "util.tf_export.tf_export"], "ops.gen_audio_microfrontend_op.audio_microfrontend": [], "ops.batch_norm_benchmark": ["platform.test.main", "argparse.ArgumentParser"], "ops.batch_norm_benchmark.batch_norm_op": ["ops.gen_nn_ops._batch_norm_with_global_normalization", "framework.ops.get_default_graph", "framework.test_util.set_producer_version"], "framework.test_util.set_producer_version": [], "ops.gen_nn_ops._batch_norm_with_global_normalization": [], "ops.batch_norm_benchmark.batch_norm_py": ["ops.nn_impl.batch_normalization"], "ops.nn_impl.batch_normalization": ["framework.ops.name_scope", "ops.math_ops.rsqrt", "ops.math_ops.cast"], "ops.batch_norm_benchmark.batch_norm_slow": ["ops.math_ops.rsqrt"], "ops.batch_norm_benchmark.build_graph": ["ops.array_ops.ones", "ops.batch_norm_benchmark.batch_norm_op", "framework.constant_op.constant", "ops.variables.trainable_variables", "ops.nn_impl.moments", "ops.random_ops.truncated_normal", "ops.array_ops.zeros", "ops.gradients_impl.gradients", "ops.variables.Variable", "ops.batch_norm_benchmark.batch_norm_py", "<builtin>.len", "<builtin>.range", "ops.batch_norm_benchmark.batch_norm_slow", "framework.ops.device"], "ops.nn_impl.moments": ["ops.math_ops.cast", "ops.math_ops.squared_difference", "framework.ops.name_scope", "ops.array_ops.stop_gradient", "util.deprecation.deprecated_argument_lookup", "ops.array_ops.squeeze", "ops.math_ops.reduce_mean"], "ops.batch_norm_benchmark.print_difference": ["<builtin>.print"], "ops.batch_norm_benchmark.BatchNormBenchmark._run_graph": ["<builtin>.str", "ops.batch_norm_benchmark.build_graph", "<builtin>.print", "<builtin>.len", "ops.variables.global_variables_initializer", "<builtin>.range", "test.Benchmark.report_benchmark", "framework.ops.Graph", "client.session.Session", "time.time"], "ops.batch_norm_benchmark.BatchNormBenchmark.benchmark_batch_norm": ["ops.batch_norm_benchmark.print_difference", "ops.batch_norm_benchmark.BatchNormBenchmark._run_graph", "<builtin>.print"], "ops.batch_norm_benchmark.<lambda1>": [], "ops.batch_ops": ["util.tf_export.tf_export"], "ops.batch_ops.batch_function": [], "ops.batch_ops.batch_function.decorator": [], "ops.batch_ops.batch_function.decorator.decorated": ["ops.gen_batch_ops.batch_function", "<builtin>.str", "util.nest.pack_sequence_as", "eager.function.defun", "framework.ops.name_scope", "framework.tensor_spec.TensorSpec", "<builtin>.isinstance", "<builtin>.repr", "<builtin>.enumerate", "<builtin>.list", "<builtin>.ValueError"], "ops.batch_ops.batch_function.decorator.decorated.computation": [], "ops.gen_batch_ops.batch_function": [], "ops.bincount_ops": ["util.tf_export.tf_export", "util.deprecation.deprecated_endpoints"], "ops.gen_math_ops.minimum": [], "ops.gen_math_ops.unsorted_segment_sum": [], "ops.gen_math_ops.bincount": [], "ops.bincount_ops.validate_sparse_weights": ["ops.array_ops.identity", "<builtin>.isinstance", "framework.ops.control_dependencies", "<builtin>.ValueError", "ops.array_ops.constant", "ops.check_ops.assert_equal"], "ops.bincount_ops.validate_ragged_weights": ["ops.array_ops.identity", "<builtin>.isinstance", "framework.ops.control_dependencies", "<builtin>.ValueError", "ops.array_ops.constant", "ops.check_ops.assert_equal"], "ops.gen_math_ops.sparse_bincount": [], "ops.gen_math_ops.ragged_bincount": [], "ops.bincount_ops.validate_dense_weights": ["<builtin>.ValueError", "ops.array_ops.constant", "<builtin>.isinstance"], "ops.gen_math_ops.dense_bincount": [], "ops.bincount_ops.bincount_v1": ["ops.bincount_ops.bincount"], "ops.gen_count_ops.sparse_count_sparse_output": [], "ops.gen_count_ops.ragged_count_sparse_output": [], "ops.gen_count_ops.dense_count_sparse_output": [], "ops.bitwise_ops": ["framework.ops.NotDifferentiable"], "ops.boosted_trees_ops": [], "ops.boosted_trees_ops.PruningMode": ["<builtin>.range"], "ops.boosted_trees_ops.PruningMode.from_str": ["<builtin>.sorted", "<builtin>.ValueError"], "ops.boosted_trees_ops.QuantileAccumulatorSaveable.__init__": ["ops.boosted_trees_ops.QuantileAccumulatorSaveable.__init__.make_save_spec", "<builtin>.range", "<builtin>.super", "<builtin>.str", "ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_get_bucket_boundaries"], "ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_get_bucket_boundaries": [], "ops.boosted_trees_ops.QuantileAccumulatorSaveable.__init__.make_save_spec": ["saver.BaseSaverBuilder.SaveSpec"], "ops.boosted_trees_ops.QuantileAccumulatorSaveable.restore": ["ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_deserialize", "framework.ops.control_dependencies"], "ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_deserialize": [], "ops.boosted_trees_ops.QuantileAccumulator.__init__": ["framework.ops.add_to_collection", "<builtin>.super", "ops.boosted_trees_ops.QuantileAccumulator._initialize", "framework.ops.name_scope", "ops.resources.register_resource", "ops.boosted_trees_ops.QuantileAccumulatorSaveable.__init__", "ops.boosted_trees_ops.QuantileAccumulator.is_initialized", "ops.boosted_trees_ops.QuantileAccumulator._create_resource"], "ops.boosted_trees_ops.QuantileAccumulator._create_resource": ["ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_handle_op"], "ops.boosted_trees_ops.QuantileAccumulator._initialize": ["ops.gen_boosted_trees_ops.boosted_trees_create_quantile_stream_resource"], "ops.boosted_trees_ops.QuantileAccumulator.is_initialized": ["ops.gen_boosted_trees_ops.is_boosted_trees_quantile_stream_resource_initialized"], "ops.resources.register_resource": ["framework.ops.add_to_collection"], "ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_handle_op": [], "ops.gen_boosted_trees_ops.boosted_trees_create_quantile_stream_resource": [], "ops.boosted_trees_ops.QuantileAccumulator.initializer": ["ops.boosted_trees_ops.QuantileAccumulator._initialize"], "ops.gen_boosted_trees_ops.is_boosted_trees_quantile_stream_resource_initialized": [], "ops.boosted_trees_ops.QuantileAccumulator.saveable": [], "ops.boosted_trees_ops.QuantileAccumulator._gather_saveables_for_checkpoint": [], "ops.boosted_trees_ops.QuantileAccumulator.add_summaries": ["ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_add_summaries", "ops.gen_boosted_trees_ops.boosted_trees_make_quantile_summaries"], "ops.gen_boosted_trees_ops.boosted_trees_make_quantile_summaries": [], "ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_add_summaries": [], "ops.boosted_trees_ops.QuantileAccumulator.flush": ["ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_flush"], "ops.gen_boosted_trees_ops.boosted_trees_quantile_stream_resource_flush": [], "ops.boosted_trees_ops.QuantileAccumulator.get_bucket_boundaries": ["ops.boosted_trees_ops.QuantileAccumulator.get_bucket_boundaries"], "ops.boosted_trees_ops._TreeEnsembleSavable.__init__": ["<builtin>.super", "ops.gen_boosted_trees_ops.boosted_trees_serialize_ensemble", "saver.BaseSaverBuilder.SaveSpec"], "ops.gen_boosted_trees_ops.boosted_trees_serialize_ensemble": [], "ops.boosted_trees_ops._TreeEnsembleSavable.restore": ["ops.gen_boosted_trees_ops.boosted_trees_deserialize_ensemble", "framework.ops.control_dependencies"], "ops.gen_boosted_trees_ops.boosted_trees_deserialize_ensemble": [], "ops.boosted_trees_ops.TreeEnsemble.__init__": ["framework.ops.add_to_collection", "ops.boosted_trees_ops.TreeEnsemble.is_initialized", "ops.boosted_trees_ops.TreeEnsemble._initialize", "framework.ops.name_scope", "ops.resources.register_resource", "ops.boosted_trees_ops.TreeEnsemble._create_resource", "ops.boosted_trees_ops._TreeEnsembleSavable.__init__"], "ops.boosted_trees_ops.TreeEnsemble._create_resource": ["ops.gen_boosted_trees_ops.boosted_trees_ensemble_resource_handle_op"], "ops.boosted_trees_ops.TreeEnsemble._initialize": ["ops.gen_boosted_trees_ops.boosted_trees_create_ensemble"], "ops.boosted_trees_ops.TreeEnsemble.is_initialized": ["ops.gen_boosted_trees_ops.is_boosted_trees_ensemble_initialized"], "ops.gen_boosted_trees_ops.boosted_trees_ensemble_resource_handle_op": [], "ops.gen_boosted_trees_ops.boosted_trees_create_ensemble": [], "ops.boosted_trees_ops.TreeEnsemble.initializer": ["ops.boosted_trees_ops.TreeEnsemble._initialize"], "ops.gen_boosted_trees_ops.is_boosted_trees_ensemble_initialized": [], "ops.boosted_trees_ops.TreeEnsemble._gather_saveables_for_checkpoint": [], "ops.boosted_trees_ops.TreeEnsemble.get_stamp_token": ["ops.gen_boosted_trees_ops.boosted_trees_get_ensemble_states"], "ops.gen_boosted_trees_ops.boosted_trees_get_ensemble_states": [], "ops.boosted_trees_ops.TreeEnsemble.get_states": ["ops.gen_boosted_trees_ops.boosted_trees_get_ensemble_states", "ops.array_ops.identity"], "ops.boosted_trees_ops.TreeEnsemble.serialize": ["ops.gen_boosted_trees_ops.boosted_trees_serialize_ensemble"], "ops.boosted_trees_ops.TreeEnsemble.deserialize": ["ops.gen_boosted_trees_ops.boosted_trees_deserialize_ensemble"], "ops.candidate_sampling_ops": ["util.deprecation.deprecated_endpoints", "util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ops.candidate_sampling_ops.uniform_candidate_sampler": ["ops.gen_candidate_sampling_ops.uniform_candidate_sampler", "framework.random_seed.get_seed"], "ops.gen_candidate_sampling_ops.uniform_candidate_sampler": [], "ops.candidate_sampling_ops.log_uniform_candidate_sampler": ["framework.random_seed.get_seed", "ops.gen_candidate_sampling_ops.log_uniform_candidate_sampler"], "ops.gen_candidate_sampling_ops.log_uniform_candidate_sampler": [], "ops.candidate_sampling_ops.learned_unigram_candidate_sampler": ["framework.random_seed.get_seed", "ops.gen_candidate_sampling_ops.learned_unigram_candidate_sampler"], "ops.gen_candidate_sampling_ops.learned_unigram_candidate_sampler": [], "ops.candidate_sampling_ops.fixed_unigram_candidate_sampler": ["framework.random_seed.get_seed", "ops.gen_candidate_sampling_ops.fixed_unigram_candidate_sampler"], "ops.gen_candidate_sampling_ops.fixed_unigram_candidate_sampler": [], "ops.candidate_sampling_ops.all_candidate_sampler": ["framework.random_seed.get_seed", "ops.gen_candidate_sampling_ops.all_candidate_sampler"], "ops.gen_candidate_sampling_ops.all_candidate_sampler": [], "ops.candidate_sampling_ops.compute_accidental_hits": ["framework.random_seed.get_seed", "ops.gen_candidate_sampling_ops.compute_accidental_hits"], "ops.gen_candidate_sampling_ops.compute_accidental_hits": [], "ops.check_ops": ["util.dispatch.add_dispatch_support", "ops.check_ops._unary_assert_doc._decorator", "collections.namedtuple", "framework.ops.RegisterGradient", "ops.check_ops._binary_assert_doc", "<builtin>.frozenset", "ops.check_ops._binary_assert_doc._decorator", "ops.check_ops._unary_assert_doc", "util.deprecation.deprecated_endpoints", "util.tf_export.tf_export"], "ops.check_ops._maybe_constant_value_string": ["<builtin>.isinstance", "framework.tensor_util.constant_value", "<builtin>.str"], "ops.check_ops._assert_static": ["framework.errors.InvalidArgumentError", "ops.check_ops._maybe_constant_value_string"], "ops.check_ops._shape_and_dtype_str": [], "ops.check_ops._unary_assert_doc": [], "ops.check_ops._unary_assert_doc._decorator": [], "ops.check_ops._binary_assert_doc": [], "ops.check_ops._binary_assert_doc._decorator": [], "ops.check_ops._make_assert_msg_data": ["ops.array_ops.where", "<builtin>.min", "ops.array_ops.boolean_mask", "ops.math_ops.logical_not"], "ops.check_ops._pretty_print": ["numpy.isscalar", "<builtin>.isinstance", "<builtin>.len", "<builtin>.str"], "ops.check_ops._binary_assert": ["ops.math_ops.greater", "numpy.all", "framework.ops.name_scope", "ops.math_ops.less_equal", "ops.check_ops._make_assert_msg_data", "numpy.less", "ops.check_ops._pretty_print", "ops.math_ops.less", "numpy.less_equal", "framework.ops.convert_to_tensor", "eager.context.executing_eagerly", "numpy.greater_equal", "numpy.greater", "numpy.equal", "ops.control_flow_ops.Assert", "ops.check_ops._assert_static", "framework.tensor_util.constant_value", "numpy.not_equal", "ops.math_ops.equal", "ops.math_ops.reduce_all", "ops.math_ops.greater_equal", "ops.math_ops.not_equal", "framework.errors.InvalidArgumentError", "<builtin>.list"], "numpy.less_equal": [], "numpy.greater_equal": [], "ops.check_ops.assert_negative_v2": ["ops.check_ops.assert_negative"], "ops.check_ops.assert_negative": ["eager.context.executing_eagerly", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.check_ops.assert_less", "ops.check_ops._shape_and_dtype_str"], "ops.check_ops.assert_positive_v2": ["ops.check_ops.assert_positive"], "ops.check_ops.assert_non_negative_v2": ["ops.check_ops.assert_non_negative"], "ops.check_ops.assert_non_positive_v2": ["ops.check_ops.assert_non_positive"], "ops.check_ops.assert_non_positive": ["eager.context.executing_eagerly", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.check_ops.assert_less_equal", "ops.check_ops._shape_and_dtype_str"], "ops.check_ops.assert_equal_v2": ["ops.check_ops.assert_equal"], "ops.check_ops.assert_none_equal_v2": ["ops.check_ops.assert_none_equal"], "ops.check_ops.assert_none_equal": ["ops.check_ops._binary_assert"], "ops.check_ops.assert_near_v2": ["ops.check_ops.assert_near"], "ops.check_ops.assert_less_v2": ["ops.check_ops.assert_less"], "ops.check_ops.assert_less_equal_v2": ["ops.check_ops.assert_less_equal"], "ops.check_ops.assert_greater_v2": ["ops.check_ops.assert_greater"], "ops.check_ops.assert_greater": ["ops.check_ops._binary_assert"], "ops.check_ops.assert_greater_equal_v2": ["ops.check_ops.assert_greater_equal"], "ops.check_ops._assert_rank_condition": ["ops.math_ops.equal", "ops.check_ops.assert_rank.<lambda1>", "ops.array_ops.rank", "ops.check_ops.assert_rank", "ops.control_flow_ops.with_dependencies", "ops.math_ops.greater_equal", "<builtin>.ValueError", "ops.check_ops.assert_type", "ops.control_flow_ops.no_op", "ops.control_flow_ops.Assert", "ops.check_ops.assert_rank_at_least.<lambda1>", "framework.tensor_util.constant_value"], "ops.check_ops.assert_rank_at_least.<lambda1>": [], "ops.check_ops.assert_rank.<lambda1>": [], "ops.check_ops.assert_rank_at_least_v2": ["ops.check_ops.assert_rank_at_least"], "ops.check_ops._static_rank_in": [], "ops.check_ops._dynamic_rank_in": ["framework.ops.convert_to_tensor", "<builtin>.len", "ops.math_ops.equal", "ops.math_ops.logical_or"], "ops.check_ops._assert_ranks_condition": ["<builtin>.any", "ops.check_ops.assert_rank", "ops.array_ops.rank", "ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "ops.check_ops.assert_type", "ops.check_ops._static_rank_in", "ops.control_flow_ops.no_op", "ops.control_flow_ops.Assert", "<builtin>.tuple", "ops.check_ops._dynamic_rank_in", "framework.tensor_util.constant_value", "<builtin>.zip"], "ops.check_ops.assert_rank_in_v2": ["ops.check_ops.assert_rank_in"], "ops.check_ops.assert_rank_in": ["eager.context.executing_eagerly", "<builtin>.isinstance", "framework.ops.name_scope", "<builtin>.ValueError", "ops.check_ops._assert_ranks_condition", "framework.ops.convert_to_tensor", "<builtin>.tuple", "<builtin>.list"], "ops.check_ops.assert_integer_v2": ["ops.check_ops.assert_integer"], "ops.check_ops.assert_type_v2": ["ops.check_ops.assert_type"], "ops.check_ops._dimension_sizes": ["ops.math_ops.equal", "ops.array_ops.shape", "ops.array_ops.rank", "<builtin>.int", "<builtin>.enumerate", "ops.control_flow_ops.cond"], "ops.check_ops._dimension_sizes.<lambda1>": ["ops.array_ops.constant"], "ops.check_ops._dimension_sizes.<lambda2>": [], "ops.check_ops._symbolic_dimension_sizes": ["<builtin>.tuple"], "ops.check_ops._has_known_value": ["<builtin>.int"], "ops.check_ops._is_symbol_for_any_size": [], "ops.check_ops.assert_shapes_v2": ["ops.check_ops.assert_shapes"], "ops.check_ops.assert_shapes": ["<builtin>.isinstance", "framework.ops.control_dependencies", "framework.ops.name_scope", "ops.control_flow_ops.group", "ops.check_ops.assert_shapes.tensor_name", "<builtin>.tuple", "ops.check_ops.assert_rank_in", "ops.check_ops._has_known_value", "ops.check_ops._symbolic_dimension_sizes", "ops.check_ops._is_symbol_for_any_size", "<builtin>.ValueError", "<builtin>.int", "ops.check_ops.assert_rank_at_least", "<builtin>.enumerate", "framework.ops.convert_to_tensor", "<builtin>.len", "eager.context.executing_eagerly", "ops.check_ops.assert_rank", "ops.control_flow_ops.Assert", "ops.math_ops.equal", "ops.array_ops.shape", "<builtin>.hasattr", "ops.check_ops._dimension_sizes"], "ops.check_ops.assert_shapes.tensor_name": ["<builtin>.isinstance", "ops.check_ops._shape_and_dtype_str"], "ops.check_ops._get_diff_for_monotonic_comparison": ["ops.array_ops.shape", "<builtin>.TypeError", "ops.array_ops.size", "ops.array_ops.reshape", "ops.control_flow_ops.cond", "ops.check_ops.is_numeric_tensor", "ops.math_ops.less"], "ops.check_ops.is_numeric_tensor": ["<builtin>.isinstance"], "ops.check_ops._get_diff_for_monotonic_comparison.<lambda1>": ["framework.ops.convert_to_tensor"], "ops.check_ops._get_diff_for_monotonic_comparison.<lambda2>": ["ops.array_ops.strided_slice"], "ops.check_ops.is_non_decreasing": ["ops.math_ops.reduce_all", "framework.ops.name_scope", "ops.check_ops._get_diff_for_monotonic_comparison", "framework.ops.convert_to_tensor", "ops.math_ops.less_equal"], "ops.check_ops.is_strictly_increasing": ["ops.math_ops.reduce_all", "framework.ops.name_scope", "ops.check_ops._get_diff_for_monotonic_comparison", "framework.ops.convert_to_tensor", "ops.math_ops.less"], "ops.check_ops._assert_same_base_type": ["<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.str"], "ops.check_ops.assert_scalar_v2": ["ops.check_ops.assert_scalar"], "ops.check_ops.assert_scalar": ["framework.ops.convert_to_tensor", "<builtin>.ValueError", "eager.context.executing_eagerly", "framework.ops.name_scope"], "ops.check_ops.ensure_shape": ["<builtin>.isinstance", "ops.array_ops.ensure_shape", "framework.tensor_shape.TensorShape"], "ops.array_ops.ensure_shape": [], "ops.check_ops._ensure_shape_grad": [], "ops.clip_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export", "util.deprecation.deprecated", "util.deprecation.deprecated_endpoints"], "ops.clip_ops._clip_by_value_grad": ["ops.array_ops.reshape", "ops.array_ops.where", "ops.array_ops.shape", "ops.math_ops.logical_or", "ops.array_ops.zeros", "ops.math_ops.reduce_sum", "ops.math_ops.less", "ops.math_ops.greater", "ops.gen_array_ops.broadcast_gradient_args"], "ops.clip_ops.global_norm": ["<builtin>.isinstance", "<builtin>.TypeError", "ops.math_ops.sqrt", "ops.math_ops.reduce_sum", "framework.constant_op.constant", "<builtin>.list", "framework.ops.colocate_with", "framework.ops.convert_to_tensor", "ops.gen_nn_ops.l2_loss", "<builtin>.enumerate", "framework.ops.name_scope", "ops.array_ops.stack"], "ops.gen_nn_ops.l2_loss": [], "ops.clip_ops.clip_by_average_norm": ["ops.array_ops.size", "ops.array_ops.identity", "ops.array_ops.rank", "ops.math_ops.reduce_sum", "ops.math_ops.cast", "framework.constant_op.constant", "framework.ops.convert_to_tensor", "ops.math_ops.range", "ops.math_ops.minimum", "ops.math_ops.rsqrt", "framework.ops.name_scope"], "ops.clustering_ops": [], "ops.clustering_ops.KMeans.__init__": ["<builtin>.ValueError", "<builtin>.int", "<builtin>.isinstance", "framework.random_seed.get_seed"], "ops.clustering_ops.KMeans._distance_graph": ["<builtin>.str", "ops.clustering_ops.KMeans._compute_cosine_distance", "ops.clustering_ops.KMeans._compute_euclidean_distance", "<builtin>.isinstance"], "ops.clustering_ops.KMeans._compute_euclidean_distance": ["ops.math_ops.reduce_sum", "ops.math_ops.matmul", "ops.math_ops.square", "framework.ops.colocate_with", "ops.array_ops.transpose"], "ops.clustering_ops.KMeans._compute_cosine_distance": ["framework.ops.colocate_with", "ops.math_ops.matmul", "ops.nn_impl.l2_normalize"], "ops.nn_impl.l2_normalize": ["ops.math_ops.reduce_sum", "ops.math_ops.real", "ops.math_ops.square", "ops.math_ops.multiply", "ops.math_ops.imag", "framework.ops.name_scope", "ops.math_ops.maximum", "ops.math_ops.rsqrt", "ops.math_ops.complex", "util.deprecation.deprecated_argument_lookup", "framework.ops.convert_to_tensor"], "ops.clustering_ops.KMeans._infer_graph": ["<builtin>.zip", "ops.array_ops.squeeze", "ops.clustering_ops.KMeans._distance_graph", "framework.ops.colocate_with", "ops.gen_clustering_ops.nearest_neighbors", "<builtin>.isinstance", "ops.clustering_ops.KMeans._clusters_l2_normalized", "ops.nn_impl.l2_normalize"], "ops.clustering_ops.KMeans._clusters_l2_normalized": [], "ops.gen_clustering_ops.nearest_neighbors": [], "ops.clustering_ops.KMeans._create_variables": ["ops.array_ops.ones", "ops.array_ops.zeros", "ops.array_ops.placeholder_with_default", "ops.variable_scope.variable"], "ops.clustering_ops.KMeans._l2_normalize_data": ["framework.ops.colocate_with", "ops.nn_impl.l2_normalize"], "ops.clustering_ops.KMeans.training_graph": ["ops.clustering_ops.KMeans._mini_batch_training_op", "framework.ops.convert_to_tensor", "framework.ops.control_dependencies", "ops.clustering_ops.KMeans._full_batch_training_op", "ops.clustering_ops._InitializeClustersOpFactory.op", "ops.clustering_ops._InitializeClustersOpFactory.__init__", "ops.clustering_ops.KMeans._create_variables", "<builtin>.callable", "ops.array_ops.shape", "ops.clustering_ops.KMeans._l2_normalize_data", "ops.clustering_ops.KMeans._mini_batch_sync_updates_op", "<builtin>.isinstance", "ops.clustering_ops.KMeans._clusters_l2_normalized", "ops.clustering_ops.KMeans._infer_graph", "ops.nn_impl.l2_normalize"], "ops.clustering_ops._InitializeClustersOpFactory.__init__": ["ops.array_ops.shape", "ops.math_ops.add_n"], "ops.clustering_ops._InitializeClustersOpFactory.op": ["ops.control_flow_ops.cond", "ops.math_ops.equal"], "ops.clustering_ops.KMeans._mini_batch_sync_updates_op": ["framework.ops.colocate_with", "ops.control_flow_ops.cond", "ops.control_flow_ops.no_op"], "ops.clustering_ops.KMeans._mini_batch_training_op": ["<builtin>.zip", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.state_ops.scatter_add", "ops.array_ops.rank", "ops.array_ops.ones", "ops.control_flow_ops.group", "ops.array_ops.unique", "ops.math_ops.reciprocal", "ops.array_ops.gather", "ops.math_ops.unsorted_segment_sum", "framework.ops.colocate_with", "ops.array_ops.size", "ops.math_ops.cast", "ops.array_ops.ones_like"], "ops.clustering_ops.KMeans._full_batch_training_op": ["<builtin>.zip", "ops.array_ops.reshape", "ops.array_ops.ones", "framework.constant_op.constant", "ops.math_ops.add_n", "ops.state_ops.assign", "ops.array_ops.shape", "ops.math_ops.unsorted_segment_sum", "framework.ops.colocate_with", "ops.clustering_ops.KMeans._clusters_l2_normalized", "ops.math_ops.cast", "ops.nn_impl.l2_normalize"], "ops.clustering_ops.KMeans._mini_batch_sync_updates_op._f": ["framework.ops.control_dependencies", "ops.array_ops.identity", "ops.state_ops.assign", "ops.array_ops.zeros_like", "framework.ops.colocate_with", "ops.nn_impl.l2_normalize"], "ops.clustering_ops.KMeans._mini_batch_sync_updates_op.<lambda1>": ["ops.state_ops.assign_sub"], "ops.state_ops.scatter_add": ["framework.ops.convert_to_tensor", "ops.gen_state_ops.scatter_add", "ops.gen_resource_variable_ops.resource_scatter_add"], "ops.clustering_ops._InitializeClustersOpFactory._random": ["ops.array_ops.reshape", "ops.embedding_ops.embedding_lookup", "ops.random_ops.random_uniform", "ops.math_ops.cast"], "ops.clustering_ops._InitializeClustersOpFactory._kmeans_plus_plus": ["ops.gen_clustering_ops.kmeans_plus_plus_initialization", "ops.math_ops.cast", "ops.nn_impl.l2_normalize"], "ops.gen_clustering_ops.kmeans_plus_plus_initialization": [], "ops.clustering_ops._InitializeClustersOpFactory._kmc2_multiple_centers": ["ops.control_flow_ops.while_loop", "ops.array_ops.shape", "ops.math_ops.minimum", "ops.math_ops.cast", "ops.math_ops.maximum"], "ops.clustering_ops._InitializeClustersOpFactory._kmc2_multiple_centers._cond": ["ops.math_ops.less"], "ops.clustering_ops._InitializeClustersOpFactory._kmc2_multiple_centers._body": ["ops.state_ops.assign", "ops.control_flow_ops.cond", "ops.array_ops.shape", "ops.math_ops.equal"], "ops.clustering_ops._InitializeClustersOpFactory._kmc2_multiple_centers._body._sample_random": ["ops.array_ops.reshape", "ops.nn_impl.l2_normalize"], "ops.clustering_ops._InitializeClustersOpFactory._kmc2_multiple_centers._body._sample_kmc2_chain": ["ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.squeeze", "ops.gen_clustering_ops.nearest_neighbors", "ops.gen_clustering_ops.kmc2_chain_initialization", "ops.nn_impl.l2_normalize"], "ops.gen_clustering_ops.kmc2_chain_initialization": [], "ops.clustering_ops._InitializeClustersOpFactory._greedy_batch_sampler": ["ops.control_flow_ops.cond"], "ops.clustering_ops._InitializeClustersOpFactory._greedy_batch_sampler.<lambda1>": ["ops.array_ops.concat"], "ops.clustering_ops._InitializeClustersOpFactory._single_batch_sampler": ["ops.check_ops.assert_greater_equal", "framework.ops.control_dependencies", "ops.clustering_ops._InitializeClustersOpFactory._kmeans_plus_plus"], "ops.clustering_ops._InitializeClustersOpFactory._choose_initial_centers": ["framework.ops.control_dependencies", "ops.check_ops.assert_equal", "ops.clustering_ops._InitializeClustersOpFactory._greedy_batch_sampler", "<builtin>.callable", "ops.array_ops.shape", "<builtin>.isinstance", "ops.clustering_ops._InitializeClustersOpFactory._single_batch_sampler"], "ops.clustering_ops._InitializeClustersOpFactory._add_new_centers": ["ops.math_ops.equal", "ops.clustering_ops._InitializeClustersOpFactory._choose_initial_centers", "ops.state_ops.assign", "ops.control_flow_ops.cond", "ops.array_ops.shape", "ops.nn_impl.l2_normalize"], "ops.clustering_ops._InitializeClustersOpFactory._add_new_centers.<lambda1>": [], "ops.clustering_ops._InitializeClustersOpFactory._add_new_centers.<lambda2>": ["ops.array_ops.concat"], "ops.clustering_ops._InitializeClustersOpFactory._initialize": ["framework.ops.control_dependencies", "ops.clustering_ops._InitializeClustersOpFactory._kmc2_multiple_centers", "ops.math_ops.equal", "ops.control_flow_ops.cond", "ops.check_ops.assert_positive", "ops.clustering_ops._InitializeClustersOpFactory._add_new_centers"], "ops.clustering_ops._InitializeClustersOpFactory._initialize.<lambda1>": ["ops.state_ops.assign"], "ops.clustering_ops._InitializeClustersOpFactory.op.<lambda1>": ["ops.check_ops.assert_equal"], "ops.collective_ops_benchmark": ["platform.test.main"], "ops.collective_ops_benchmark.CollectiveOpBenchmark.benchmark_collective": ["ops.collective_ops.all_reduce", "protobuf.config_pb2.CallableOptions", "time.time", "client.session.Session", "framework.ops.device", "<builtin>.len", "protobuf.config_pb2.ConfigProto", "numpy.prod", "framework.constant_op.constant", "numpy.median", "test.Benchmark.report_benchmark", "<builtin>.range", "numpy.multiply"], "numpy.multiply": [], "ops.collective_ops.all_reduce": ["ops.gen_collective_ops.collective_reduce", "<builtin>.ValueError"], "ops.collective_ops": [], "ops.gen_collective_ops.collective_reduce": [], "ops.gen_collective_ops.collective_reduce_v2": [], "ops.collective_ops.all_gather": ["ops.gen_collective_ops.collective_gather", "<builtin>.ValueError"], "ops.gen_collective_ops.collective_gather": [], "ops.gen_collective_ops.collective_gather_v2": [], "ops.gen_collective_ops.collective_bcast_send": [], "ops.collective_ops.broadcast_send_v2": ["ops.gen_collective_ops.collective_bcast_send_v2"], "ops.gen_collective_ops.collective_bcast_send_v2": [], "ops.gen_collective_ops.collective_bcast_recv": [], "ops.collective_ops.broadcast_recv_v2": ["ops.gen_collective_ops.collective_bcast_recv_v2"], "ops.gen_collective_ops.collective_bcast_recv_v2": [], "ops.composite_tensor_ops": ["framework.ops.RegisterGradient"], "protobuf.composite_tensor_variant_pb2.CompositeTensorVariantMetadata": [], "ops.gen_composite_tensor_ops.CompositeTensorVariantFromComponents": [], "ops.gen_composite_tensor_ops.CompositeTensorVariantToComponents": [], "ops.composite_tensor_ops._composite_tensor_to_variants_grad": ["ops.gen_composite_tensor_ops.CompositeTensorVariantToComponents"], "ops.composite_tensor_ops._composite_tensor_from_variant_grad": ["<builtin>.len", "<builtin>.range", "ops.gen_composite_tensor_ops.CompositeTensorVariantFromComponents"], "ops.concat_benchmark": ["platform.test.main"], "ops.concat_benchmark.build_graph": ["<builtin>.range", "<builtin>.list", "itertools.chain.from_iterable", "framework.ops.device", "<builtin>.max", "ops.array_ops.zeros", "ops.array_ops.concat", "ops.control_flow_ops.group", "ops.gradients_impl.gradients", "random.randint"], "ops.concat_benchmark.ConcatBenchmark._run_graph": ["<builtin>.print", "framework.ops.Graph", "client.session.Session", "protobuf.config_pb2.OptimizerOptions", "protobuf.config_pb2.GraphOptions", "<builtin>.str", "ops.variables.global_variables_initializer", "protobuf.config_pb2.ConfigProto", "test.Benchmark.report_benchmark", "ops.concat_benchmark.build_graph", "time.time", "<builtin>.range"], "protobuf.config_pb2.OptimizerOptions": [], "ops.concat_benchmark.ConcatBenchmark.benchmark_concat": ["<builtin>.print", "<builtin>.zip", "<builtin>.len", "ops.concat_benchmark.ConcatBenchmark._run_graph"], "ops.cond_v2": ["framework.ops.RegisterGradient"], "ops.cond_v2.cond_v2": ["framework.ops.name_scope", "<builtin>.TypeError", "ops.control_flow_util_v2.unique_fn_name", "framework.ops.convert_to_tensor", "ops.array_ops.squeeze_v2", "ops.control_flow_util_v2.CondBranchFuncGraph", "framework.ops.get_default_graph", "framework.func_graph.func_graph_from_py_func", "ops.cond_v2._build_cond", "ops.cond_v2.verify_captures", "framework.tensor_util.is_tf_type", "<builtin>.isinstance"], "ops.control_flow_util_v2.unique_fn_name": ["framework.ops.uid"], "ops.control_flow_util_v2.CondBranchFuncGraph": [], "ops.cond_v2.verify_captures": ["<builtin>.range", "<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance"], "ops.cond_v2._build_cond": ["ops.cond_v2._pack_sequence_as", "ops.cond_v2._wrap_intermediates", "framework.ops.control_dependencies", "ops.array_ops.identity", "ops.cond_v2._check_same_outputs", "ops.cond_v2._make_intermediates_match", "ops.cond_v2._make_indexed_slices_indices_types_match", "ops.cond_v2._get_intermediates", "<builtin>.list", "ops.control_flow_util_v2.run_as_function_for_tape_gradients", "ops.control_flow_util_v2.output_all_intermediates", "ops.cond_v2._make_inputs_match"], "ops.cond_v2._IfGrad": ["ops.control_flow_util_v2.unique_grad_fn_name", "ops.cond_v2._resolve_grad_inputs", "ops.control_flow_util.GraphOrParentsInXlaContext", "ops.cond_v2.get_func_graphs", "framework.ops.get_default_graph", "ops.cond_v2._make_intermediates_match", "ops.cond_v2._create_grad_func", "ops.cond_v2._check_same_outputs", "ops.control_flow_util_v2.create_new_tf_function", "ops.cond_v2._build_cond", "ops.cond_v2._create_zeros_for_none_grads", "ops.cond_v2._make_output_composite_tensors_match", "ops.cond_v2._make_intermediates_match_xla"], "ops.cond_v2.get_func_graphs": ["<builtin>.ValueError", "ops.cond_v2.get_func_graphs._get_func_graph_for_branch", "<builtin>.enumerate"], "ops.control_flow_util_v2.unique_grad_fn_name": ["framework.ops.uid"], "ops.cond_v2._create_grad_func": ["framework.func_graph.func_graph_from_py_func", "ops.cond_v2._CondGradFuncGraph.__init__"], "ops.cond_v2._create_zeros_for_none_grads": ["<builtin>.any", "<builtin>.zip", "framework.func_graph.flatten", "<builtin>.set", "<builtin>.enumerate", "<builtin>.len", "ops.default_gradient.zeros_like"], "ops.cond_v2._make_intermediates_match_xla": ["ops.cond_v2._create_fakeparams", "<builtin>.len", "<builtin>.sum", "<builtin>.enumerate"], "ops.cond_v2._make_intermediates_match": ["ops.cond_v2._create_none_optionals", "<builtin>.len", "<builtin>.max", "<builtin>.enumerate"], "ops.cond_v2._check_same_outputs": ["<builtin>.zip", "<builtin>.range", "util.nest.assert_same_structure", "<builtin>.ValueError", "<builtin>.len", "ops.cond_v2._check_same_outputs.error", "<builtin>.str"], "ops.control_flow_util_v2.create_new_tf_function": ["eager.function._EagerDefinedFunction"], "ops.cond_v2._resolve_grad_inputs": ["<builtin>.enumerate"], "ops.cond_v2._make_output_composite_tensors_match": ["ops.math_ops._as_indexed_slices", "<builtin>.type", "<builtin>.any", "<builtin>.TypeError", "<builtin>.zip", "framework.func_graph.flatten", "<builtin>.set", "<builtin>.list", "<builtin>.enumerate", "<builtin>.len", "<builtin>.isinstance"], "ops.cond_v2._make_indexed_slices_indices_types_match": ["ops.cond_v2._pack_sequence_as", "<builtin>.TypeError", "<builtin>.any", "ops.math_ops.cast", "<builtin>.zip", "<builtin>.set", "util.nest.is_sequence_or_composite", "<builtin>.enumerate", "util.nest.flatten", "<builtin>.len", "<builtin>.ValueError", "<builtin>.str", "<builtin>.isinstance"], "ops.cond_v2._make_inputs_match": ["ops.cond_v2._create_dummy_input", "<builtin>.zip", "<builtin>.set", "framework.ops.tensor_id", "<builtin>.dict", "<builtin>.len"], "ops.control_flow_util_v2.output_all_intermediates": ["ops.control_flow_util.GraphOrParentsInXlaContext", "ops.control_flow_util_v2._is_building_keras_layer", "distribute.distribution_strategy_context.get_strategy", "eager.context.context", "framework.ops.get_default_graph", "ops.control_flow_util_v2._is_tpu_strategy", "ops.control_flow_util_v2.in_defun"], "ops.cond_v2._get_intermediates": [], "ops.cond_v2._wrap_intermediates": ["ops.gen_dataset_ops.optional_from_value"], "ops.cond_v2._build_cond._make_op": ["ops.control_flow_util_v2.get_op_and_outputs", "ops.control_flow_util_v2.create_new_tf_function", "ops.cond_v2._copy_handle_data", "framework.ops.get_default_graph", "ops.gen_functional_ops._if", "ops.cond_v2._get_output_shapes", "ops.gen_functional_ops.stateless_if", "ops.control_flow_util_v2.maybe_set_lowering_attr", "ops.cond_v2._set_read_only_resource_inputs_attr", "ops.control_flow_util_v2.maybe_propagate_compile_time_consts_in_xla"], "ops.cond_v2._get_output_shapes": ["<builtin>.zip"], "ops.gen_functional_ops._if": [], "ops.gen_functional_ops.stateless_if": [], "ops.control_flow_util_v2.get_op_and_outputs": ["<builtin>.isinstance"], "ops.cond_v2._copy_handle_data": ["<builtin>.len", "ops.handle_data_util.get_resource_handle_data", "<builtin>.zip"], "ops.control_flow_util_v2.maybe_set_lowering_attr": ["ops.control_flow_util.GraphOrParentsInXlaContext", "framework.attr_value_pb2.AttrValue", "eager.context.context"], "ops.control_flow_util_v2.maybe_propagate_compile_time_consts_in_xla": ["ops.control_flow_util.GraphOrParentsInXlaContext", "framework.attr_value_pb2.AttrValue"], "ops.cond_v2._set_read_only_resource_inputs_attr": ["<builtin>.range", "<builtin>.set", "framework.ops.set_int_list_attr", "<builtin>.len", "framework.auto_control_deps_utils.get_read_only_resource_input_indices_graph", "<builtin>.sorted"], "ops.control_flow_util_v2.run_as_function_for_tape_gradients": ["<builtin>.dict", "eager.function.defun_with_attributes", "ops.gradients_util.PossibleTapeGradientTypes", "framework.ops.get_default_graph"], "ops.cond_v2._pack_sequence_as": ["util.nest.flatten", "framework.func_graph.pack_sequence_as"], "ops.cond_v2.get_func_graphs._get_func_graph_for_branch": ["ops.handle_data_util.copy_handle_data", "<builtin>.getattr", "ops.control_flow_util_v2.get_func_graph", "<builtin>.zip"], "ops.control_flow_util_v2.get_func_graph": ["framework.function_def_to_graph.function_def_to_graph", "<builtin>.KeyError", "<builtin>.hasattr"], "ops.cond_v2._grad_fn": ["<builtin>.len", "eager.backprop_util.IsTrainable", "<builtin>.zip", "ops.gradients_util._GradientsHelper"], "ops.cond_v2._create_grad_func.<lambda1>": ["ops.cond_v2._grad_fn"], "ops.cond_v2._CondGradFuncGraph.__init__": ["<builtin>.super", "collections.OrderedDict", "framework.ops.get_default_graph"], "ops.cond_v2._create_none_optionals": ["ops.gen_dataset_ops.optional_none", "<builtin>.range"], "ops.cond_v2._create_fakeparams": ["ops.gen_functional_ops.fake_param"], "ops.cond_v2._create_dummy_input": ["ops.array_ops.placeholder"], "ops.math_ops._as_indexed_slices": ["ops.math_ops.range", "<builtin>.TypeError", "ops.array_ops.shape_internal", "<builtin>.type", "framework.ops.IndexedSlices", "<builtin>.isinstance"], "util.nest.is_sequence_or_composite": [], "ops.gen_functional_ops.fake_param": [], "ops.cond_v2._check_same_outputs.error": ["<builtin>.TypeError"], "ops.cond_v2._CondGradFuncGraph.wrapped_intermediates": ["<builtin>.list"], "ops.cond_v2._CondGradFuncGraph.xla_intermediates": [], "ops.cond_v2._CondGradFuncGraph._capture_helper": ["ops.gen_dataset_ops.optional_get_value", "<builtin>.any", "ops.control_flow_util.GraphOrParentsInXlaContext", "framework.tensor_util.constant_value", "framework.constant_op.is_constant", "framework.ops.get_default_graph", "framework.ops.tensor_id", "ops.control_flow_util_v2.resource_input_index", "framework.constant_op.constant", "<builtin>.all", "<builtin>.super"], "ops.control_flow_util_v2.resource_input_index": ["<builtin>.len", "<builtin>.int", "<builtin>.AssertionError", "ops.control_flow_util_v2.resource_input_index._extract_input_index", "<builtin>.ValueError"], "ops.cond_v2.indexed_case": ["framework.ops.name_scope", "<builtin>.TypeError", "ops.control_flow_util_v2.unique_fn_name", "framework.ops.convert_to_tensor", "<builtin>.zip", "ops.control_flow_util_v2.CondBranchFuncGraph", "<builtin>.range", "framework.ops.get_default_graph", "framework.func_graph.func_graph_from_py_func", "<builtin>.len", "ops.cond_v2._build_case", "ops.cond_v2.verify_captures", "<builtin>.isinstance"], "ops.cond_v2._build_case": ["ops.cond_v2._pack_sequence_as", "framework.ops.control_dependencies", "ops.array_ops.identity", "ops.cond_v2._check_same_outputs", "ops.cond_v2._make_indexed_slices_indices_types_match", "<builtin>.list", "framework.auto_control_deps.op_is_stateful", "ops.control_flow_util_v2.run_as_function_for_tape_gradients", "<builtin>.sum", "ops.cond_v2._make_inputs_match"], "ops.cond_v2._CaseGrad": ["ops.control_flow_util_v2.unique_grad_fn_name", "ops.cond_v2._resolve_grad_inputs", "<builtin>.any", "ops.control_flow_util.GraphOrParentsInXlaContext", "<builtin>.zip", "ops.cond_v2.get_func_graphs", "framework.ops.get_default_graph", "ops.cond_v2._make_intermediates_match", "ops.cond_v2._create_grad_func", "ops.cond_v2._check_same_outputs", "ops.control_flow_util_v2.create_new_tf_function", "ops.cond_v2._create_zeros_for_none_grads", "ops.cond_v2._build_case", "ops.cond_v2._make_output_composite_tensors_match", "ops.cond_v2._make_intermediates_match_xla"], "ops.cond_v2._build_case._make_op": ["ops.control_flow_util_v2.get_op_and_outputs", "ops.control_flow_util_v2.create_new_tf_function", "ops.cond_v2._copy_handle_data", "ops.gen_functional_ops.case", "framework.ops.get_default_graph", "ops.cond_v2._get_output_shapes", "<builtin>.enumerate", "ops.control_flow_util_v2.maybe_set_lowering_attr", "ops.gen_functional_ops.stateless_case", "<builtin>.setattr", "ops.cond_v2._set_read_only_resource_inputs_attr", "ops.control_flow_util_v2.maybe_propagate_compile_time_consts_in_xla"], "ops.gen_functional_ops.case": [], "ops.gen_functional_ops.stateless_case": [], "ops.confusion_matrix": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export", "util.deprecation.deprecated_endpoints"], "ops.confusion_matrix.remove_squeezable_dimensions.<lambda1>": ["ops.array_ops.squeeze"], "ops.confusion_matrix.remove_squeezable_dimensions.<lambda2>": [], "ops.confusion_matrix.remove_squeezable_dimensions.<lambda3>": ["ops.array_ops.squeeze"], "ops.confusion_matrix.remove_squeezable_dimensions.<lambda4>": [], "ops.confusion_matrix.confusion_matrix_v1": ["ops.confusion_matrix.confusion_matrix"], "ops.control_flow_grad": ["framework.ops.RegisterGradient"], "ops.control_flow_grad._SwitchGrad": ["ops.control_flow_ops._AddNextAndBackEdge", "framework.ops.get_default_graph", "<builtin>.isinstance"], "ops.control_flow_ops._AddNextAndBackEdge": ["<builtin>.isinstance", "ops.control_flow_ops._EnforceShapeInvariant", "ops.math_ops._as_indexed_slices", "ops.control_flow_ops._NextIteration", "util.nest.map_structure", "<builtin>.type", "framework.ops.convert_to_tensor", "<builtin>.TypeError"], "ops.control_flow_grad._MergeGrad": ["ops.control_flow_ops._SwitchRefOrTensor", "six.moves.xrange", "ops.math_ops.equal", "ops.control_flow_util.GetOutputContext", "framework.ops.get_default_graph", "<builtin>.isinstance", "<builtin>.len"], "ops.control_flow_ops._SwitchRefOrTensor": ["framework.ops.convert_to_tensor_or_composite", "ops.control_flow_ops.switch", "<builtin>.isinstance", "framework.ops.colocate_with"], "ops.control_flow_grad._RefMergeGrad": ["ops.control_flow_grad._MergeGrad"], "ops.control_flow_grad._ExitGrad": ["ops.control_flow_ops._Enter", "<builtin>.type", "<builtin>.TypeError", "framework.ops.get_default_graph", "<builtin>.isinstance"], "ops.control_flow_ops._Enter": ["<builtin>.isinstance", "util.nest.map_structure", "<builtin>.type", "ops.gen_control_flow_ops.ref_enter", "ops.gen_control_flow_ops.enter", "framework.ops.internal_convert_to_tensor_or_composite", "<builtin>.TypeError"], "ops.control_flow_grad._NextIterationGrad": [], "ops.control_flow_grad._RefNextIterationGrad": ["ops.control_flow_grad._NextIterationGrad"], "ops.control_flow_grad._EnterGrad": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.exit", "framework.ops.get_default_graph", "<builtin>.isinstance"], "ops.control_flow_grad._RefEnterGrad": ["ops.control_flow_grad._EnterGrad"], "ops.control_flow_grad._LoopCondGrad": [], "ops.control_flow_ops_benchmark": ["framework.ops.enable_eager_execution", "platform.test.main"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._create_cond": ["ops.control_flow_ops.cond", "ops.math_ops.not_equal"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._create_cond.branch_fn": ["<builtin>.sum", "<builtin>.range", "ops.random_ops.random_normal"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._create_cond.<lambda1>": [], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._benchmark_defun": ["time.time", "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._benchmark_defun.cond_fn", "<builtin>.range", "eager.function.defun", "test.Benchmark.report_benchmark"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._benchmark_defun.cond_fn": ["ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._create_cond"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._benchmark_graph": ["time.time", "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._create_cond", "<builtin>.range", "client.session.Session", "ops.array_ops.placeholder", "test.Benchmark.report_benchmark", "eager.context.graph_mode", "framework.ops.Graph"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark.benchmark_cond_v1_defun": ["ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._benchmark_defun"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark.benchmark_cond_v2_defun": ["ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._benchmark_defun"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark.benchmark_cond_v1_graph": ["ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._benchmark_graph"], "ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark.benchmark_cond_v2_graph": ["ops.control_flow_ops_benchmark.CondWithManyIntermediatesBenchmark._benchmark_graph"], "ops.control_flow_ops": ["util.deprecation.deprecated_arg_values", "util.lazy_loader.LazyLoader", "<builtin>.globals", "util.tf_should_use.should_use_result", "util.deprecation.deprecated_args", "util.dispatch.add_dispatch_support", "framework.ops.register_proto_function", "util.tf_export.tf_export"], "ops.control_flow_ops._summarize_eager": ["ops.array_ops.size", "<builtin>.str", "ops.gen_math_ops.not_equal", "<builtin>.len"], "util.tf_should_use.should_use_result": ["util.tf_should_use.should_use_result.decorated"], "ops.gen_logging_ops._assert": [], "ops.control_flow_ops.Assert.true_assert": ["ops.gen_logging_ops._assert"], "ops.control_flow_ops._Identity": ["<builtin>.isinstance", "ops.array_ops.identity", "util.nest.map_structure", "<builtin>.type", "ops.gen_array_ops.ref_identity", "framework.ops.internal_convert_to_tensor_or_composite", "<builtin>.TypeError"], "ops.gen_array_ops.ref_identity": [], "ops.control_flow_ops._NextIteration": ["<builtin>.isinstance", "<builtin>.type", "util.nest.map_structure", "framework.ops.internal_convert_to_tensor_or_composite", "<builtin>.TypeError"], "ops.gen_control_flow_ops.ref_enter": [], "ops.gen_control_flow_ops.enter": [], "ops.control_flow_ops._Enter.enter_component": ["ops.control_flow_ops._Enter"], "ops.control_flow_ops.exit": ["<builtin>.isinstance", "ops.gen_control_flow_ops.ref_exit", "util.nest.map_structure", "<builtin>.type", "ops.gen_control_flow_ops._exit", "framework.ops.internal_convert_to_tensor_or_composite", "<builtin>.TypeError"], "ops.gen_control_flow_ops.ref_exit": [], "ops.gen_control_flow_ops._exit": [], "ops.control_flow_ops.switch": ["<builtin>.TypeError", "<builtin>.zip", "<builtin>.isinstance", "framework.ops.name_scope", "util.nest.pack_sequence_as", "util.nest.flatten", "<builtin>.type", "framework.ops.convert_to_tensor", "framework.ops.internal_convert_to_tensor_or_composite", "ops.gen_control_flow_ops.switch"], "ops.gen_control_flow_ops.switch": [], "ops.gen_control_flow_ops.ref_merge": [], "ops.control_flow_ops._convert_tensorarray_to_flow": ["<builtin>.isinstance"], "ops.control_flow_ops._convert_flows_to_tensorarrays": ["<builtin>.zip", "<builtin>.isinstance", "<builtin>.ValueError", "ops.tensor_array_ops.build_ta_with_new_flow", "<builtin>.len"], "ops.control_flow_ops._ShapeLessThanOrEqual": ["<builtin>.zip"], "ops.control_flow_ops._get_shape_invariant": ["util.nest.flatten", "<builtin>.isinstance", "ops.control_flow_ops._shape_invariant_to_type_spec", "<builtin>.TypeError"], "ops.control_flow_ops._shape_invariant_to_type_spec": ["<builtin>.isinstance", "framework.type_spec.type_spec_from_value", "<builtin>.type", "framework.tensor_spec.TensorSpec", "<builtin>.TypeError"], "ops.control_flow_ops._SetShapeInvariants": ["<builtin>.zip", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.all", "ops.control_flow_ops._ShapeLessThanOrEqual", "util.nest.flatten", "<builtin>.type", "<builtin>.TypeError"], "ops.control_flow_ops._EnforceShapeInvariant": ["<builtin>.isinstance", "<builtin>.ValueError", "ops.control_flow_ops._ShapeLessThanOrEqual", "<builtin>.type", "ops.control_flow_util.IsLoopEnter", "<builtin>.TypeError"], "ops.control_flow_util.IsLoopEnter": [], "ops.control_flow_ops._AddNextAndBackEdge.update_component": [], "ops.control_flow_ops.ControlFlowContext.__init__": ["framework.ops.get_default_graph", "<builtin>.set", "ops.control_flow_ops.ControlFlowContext._init_values_from_proto"], "ops.control_flow_ops.ControlFlowContext._init_values_from_proto": ["framework.ops.get_default_graph", "<builtin>.isinstance", "framework.ops.prepend_name_scope", "<builtin>.set"], "ops.control_flow_ops.ControlFlowContext.name": [], "ops.control_flow_ops.ControlFlowContext.outer_context": [], "ops.control_flow_ops.ControlFlowContext.grad_state": ["<builtin>.NotImplementedError"], "ops.control_flow_ops.ControlFlowContext.back_prop": ["<builtin>.NotImplementedError"], "ops.control_flow_ops.ControlFlowContext": ["abc.abstractmethod"], "ops.control_flow_ops.ControlFlowContext.to_control_flow_context_def": ["<builtin>.NotImplementedError"], "ops.control_flow_ops.ControlFlowContext._to_values_def": ["protobuf.control_flow_pb2.ValuesDef", "<builtin>.sorted", "framework.ops.strip_name_scope"], "protobuf.control_flow_pb2.ValuesDef": [], "ops.control_flow_ops.ControlFlowContext.AddName": [], "ops.control_flow_ops.ControlFlowContext.Enter": ["framework.ops.get_default_graph"], "ops.control_flow_ops.ControlFlowContext.Exit": ["framework.ops.get_default_graph"], "ops.control_flow_ops.ControlFlowContext.EnterGradientColocation": [], "ops.control_flow_ops.ControlFlowContext.ExitGradientColocation": [], "ops.control_flow_ops.ControlFlowContext.ExitResult": ["util.nest.map_structure"], "ops.control_flow_ops.ControlFlowContext.ExitResult.fn": [], "ops.control_flow_ops.ControlFlowContext.GetWhileContext": [], "ops.control_flow_ops.ControlFlowContext._RemoveExternalControlEdges": ["<builtin>.list", "ops.control_flow_util.GetOutputContext", "<builtin>.len", "ops.control_flow_ops.WhileContext.GetWhileContext", "ops.control_flow_ops.ControlFlowContext.GetWhileContext", "<builtin>.set"], "ops.control_flow_ops.WhileContext.GetWhileContext": [], "ops.control_flow_ops.ControlFlowContext.AddInnerOp": [], "ops.control_flow_ops.ControlFlowContext.GetControlPivot": [], "ops.control_flow_ops.ControlFlowContext.IsWhileContext": [], "ops.control_flow_ops.ControlFlowContext.IsCondContext": [], "ops.control_flow_ops.ControlFlowContext.IsXLAContext": [], "ops.control_flow_ops.ControlFlowContext.__str__": [], "ops.control_flow_ops.CondContext.__init__": ["framework.ops.get_default_graph", "ops.control_flow_ops.CondContext._init_from_proto", "ops.control_flow_ops.ControlFlowContext.__init__"], "ops.control_flow_ops.CondContext._init_from_proto": ["framework.ops.get_default_graph", "<builtin>.isinstance", "framework.ops.prepend_name_scope", "<builtin>.super"], "ops.control_flow_ops.CondContext.pred": [], "ops.control_flow_ops.CondContext.pivot": [], "ops.control_flow_ops.CondContext.branch": [], "ops.control_flow_ops.CondContext.grad_state": ["ops.control_flow_ops.WhileContext.GetWhileContext", "ops.control_flow_ops.ControlFlowContext.GetWhileContext"], "ops.control_flow_ops.CondContext.back_prop": ["ops.control_flow_ops.WhileContext.GetWhileContext", "ops.control_flow_ops.ControlFlowContext.GetWhileContext"], "ops.control_flow_ops.CondContext.GetControlPivot": [], "ops.control_flow_ops.CondContext.to_proto": ["<builtin>.super", "framework.ops.strip_name_scope", "protobuf.control_flow_pb2.CondContextDef"], "protobuf.control_flow_pb2.CondContextDef": [], "ops.control_flow_ops.CondContext.from_proto": ["ops.control_flow_ops.ControlFlowContext.Exit", "ops.control_flow_ops.from_control_flow_context_def", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.control_flow_ops.CondContext.__init__"], "ops.control_flow_ops.from_control_flow_context_def": ["ops.control_flow_ops.WhileContext.from_proto", "ops.control_flow_ops.CondContext.from_proto", "<builtin>.NotImplementedError"], "ops.control_flow_ops.CondContext.to_control_flow_context_def": ["ops.control_flow_ops.CondContext.to_proto"], "ops.control_flow_ops.CondContext.AddValue": ["ops.control_flow_ops._SwitchRefOrTensor", "framework.ops.control_dependencies"], "ops.control_flow_ops.CondContext.AddOp": ["ops.control_flow_ops.CondContext._AddOpInternal"], "ops.control_flow_ops.CondContext._AddOpInternal": ["<builtin>.any", "<builtin>.range", "ops.control_flow_ops.CondContext.AddValue", "<builtin>.len", "ops.control_flow_util.OpInContext", "ops.control_flow_util.IsLoopExit", "ops.control_flow_ops.ControlFlowContext._RemoveExternalControlEdges"], "ops.control_flow_util.OpInContext": ["ops.control_flow_util.IsContainingContext"], "ops.control_flow_util.IsLoopExit": [], "ops.control_flow_ops.CondContext._ProcessOutputTensor": ["ops.control_flow_ops._SwitchRefOrTensor"], "ops.control_flow_ops.CondContext._BuildCondTensor": ["<builtin>.isinstance", "ops.control_flow_ops.CondContext._ProcessOutputTensor", "ops.control_flow_ops.with_dependencies", "util.nest.map_structure", "framework.ops.convert_to_tensor"], "ops.control_flow_ops.CondContext.BuildCondBranch": ["<builtin>.isinstance", "framework.ops.get_collection", "ops.control_flow_ops.Assert.true_assert", "framework.ops.control_dependencies", "framework.ops.get_collection_ref", "<builtin>.len", "util.nest.map_structure"], "ops.control_flow_ops.CondContext.IsCondContext": [], "ops.control_flow_ops._UnpackIfSingleton": ["<builtin>.isinstance", "<builtin>.len"], "ops.control_flow_ops._eager_cond_implementation": ["platform.tf_logging.warning", "<builtin>.isinstance", "framework.ops.name_scope", "ops.control_flow_ops._eager_cond_implementation._parallel_device_cond_wrapper", "ops.control_flow_ops.Assert.true_assert", "framework.tensor_util.constant_value", "ops.control_flow_ops._UnpackIfSingleton", "framework.ops.convert_to_tensor", "<builtin>.TypeError"], "ops.control_flow_ops._eager_cond_implementation._parallel_device_cond_wrapper": [], "ops.control_flow_ops._cast_indexed_slice_indices": ["ops.math_ops.cast", "<builtin>.isinstance"], "ops.control_flow_ops.cond_for_tf_v2": ["ops.control_flow_ops.cond"], "ops.control_flow_ops._resource_safe_shape": ["framework.tensor_shape.TensorShape", "ops.array_ops.shape_internal"], "ops.control_flow_ops.WhileContext.__init__": ["ops.control_flow_ops.WhileContext._init_from_args", "ops.control_flow_ops.WhileContext._init_from_proto", "ops.control_flow_ops.ControlFlowContext.__init__"], "ops.control_flow_ops.WhileContext._init_from_proto": ["util.compat.as_bytes", "<builtin>.super", "<builtin>.isinstance", "framework.attr_value_pb2.AttrValue", "framework.ops.get_default_graph", "ops.control_flow_util.IsLoopEnter", "framework.ops.prepend_name_scope"], "ops.control_flow_ops.WhileContext._init_from_args": ["framework.ops.get_default_graph", "<builtin>.ValueError", "<builtin>.isinstance"], "ops.control_flow_ops.WhileContext.maximum_iterations": [], "ops.control_flow_ops.WhileContext.parallel_iterations": [], "ops.control_flow_ops.WhileContext.back_prop": [], "ops.control_flow_ops.WhileContext.swap_memory": [], "ops.control_flow_ops.WhileContext.pivot": [], "ops.control_flow_ops.WhileContext.loop_enters": [], "ops.control_flow_ops.WhileContext.loop_exits": [], "ops.control_flow_ops.WhileContext.grad_state": [], "ops.control_flow_ops.WhileContext.to_proto": ["protobuf.control_flow_pb2.WhileContextDef", "<builtin>.super", "framework.ops.strip_name_scope"], "protobuf.control_flow_pb2.WhileContextDef": [], "ops.control_flow_ops.WhileContext.to_control_flow_context_def": ["ops.control_flow_ops.WhileContext.to_proto"], "ops.control_flow_ops.WhileContext.from_proto": ["ops.control_flow_ops.WhileContext.__init__", "ops.control_flow_ops.from_control_flow_context_def", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.control_flow_ops.ControlFlowContext.Exit"], "ops.control_flow_ops.WhileContext.GetControlPivot": [], "ops.control_flow_ops.WhileContext.AddValue": ["framework.ops.control_dependencies", "ops.control_flow_util.GetWhileContext", "framework.ops.get_default_graph", "ops.control_flow_ops.WhileContext._FixControlInputsAndContext", "ops.control_flow_util.IsLoopExit", "ops.control_flow_ops._Enter"], "ops.control_flow_util.GetWhileContext": [], "ops.control_flow_ops.WhileContext._FixControlInputsAndContext": ["<builtin>.isinstance", "ops.control_flow_util.GetOutputContext", "framework.ops.get_default_graph", "<builtin>.type", "<builtin>.TypeError"], "ops.control_flow_ops.WhileContext.AddOp": ["framework.ops.get_default_graph", "ops.control_flow_util.GetWhileContext", "ops.control_flow_util.IsInXLAContext", "ops.control_flow_ops.WhileContext._AddOpInternal"], "ops.control_flow_util.IsInXLAContext": ["ops.control_flow_util.GetContainingXLAContext"], "ops.control_flow_ops.WhileContext._AddOpInternal": ["ops.control_flow_ops.ControlFlowContext.Exit", "<builtin>.range", "framework.ops.control_dependencies", "ops.array_ops.identity", "ops.control_flow_ops.WhileContext.GetControlPivot", "<builtin>.len", "ops.control_flow_ops.WhileContext.AddValue", "ops.control_flow_ops.WhileContext._MaybeAddControlDependency", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.control_flow_util.IsLoopExit", "ops.control_flow_ops.ControlFlowContext._RemoveExternalControlEdges"], "ops.control_flow_ops.WhileContext._MaybeAddControlDependency": ["ops.control_flow_ops.WhileContext.GetControlPivot", "ops.control_flow_ops.WhileContext._MaybeAddControlDependency._IsOpFree"], "ops.control_flow_ops.WhileContext._MaybeAddControlDependency._IsOpFree": ["ops.control_flow_util.IsLoopConstantEnter"], "ops.control_flow_util.IsLoopConstantEnter": ["ops.control_flow_util.IsLoopEnter"], "ops.control_flow_ops.WhileContext.AddForwardLoopCounter": ["framework.constant_op.constant", "ops.control_flow_ops.ControlFlowContext.Exit", "ops.control_flow_ops.exit", "ops.control_flow_ops.ControlFlowContext.ExitResult", "ops.math_ops.add", "ops.control_flow_ops._NextIteration", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.control_flow_ops.merge", "ops.control_flow_ops.switch", "ops.control_flow_ops._Enter", "ops.control_flow_ops.ControlFlowContext.AddName"], "ops.control_flow_ops.WhileContext.AddBackpropLoopCounter": ["framework.constant_op.constant", "ops.control_flow_ops.ControlFlowContext.Exit", "ops.control_flow_ops.exit", "ops.control_flow_ops.ControlFlowContext.ExitResult", "ops.array_ops.identity", "ops.control_flow_ops._NextIteration", "framework.ops.get_default_graph", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.math_ops.greater_equal", "ops.control_flow_ops.merge", "ops.control_flow_ops.switch", "ops.math_ops.subtract", "ops.control_flow_ops._Enter", "ops.control_flow_ops.ControlFlowContext.AddName"], "ops.control_flow_ops.WhileContext.AddBackpropAccumulator": ["framework.constant_op.constant", "<builtin>.isinstance", "ops.control_flow_ops.ControlFlowContext.Exit", "ops.control_flow_ops.exit", "ops.control_flow_ops.ControlFlowContext.ExitResult", "ops.math_ops.add", "ops.control_flow_ops._NextIteration", "ops.array_ops.shape_internal", "ops.array_ops.zeros", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.control_flow_ops.merge", "ops.control_flow_ops.switch", "ops.control_flow_ops._Enter", "ops.control_flow_ops.ControlFlowContext.AddName"], "ops.control_flow_ops.WhileContext.AddBackpropIndexedSlicesAccumulator": ["framework.constant_op.constant", "ops.control_flow_ops.ControlFlowContext.Exit", "ops.control_flow_ops.exit", "framework.tensor_shape.TensorShape", "ops.array_ops.shape_internal", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.control_flow_ops.ControlFlowContext.AddName", "framework.tensor_shape.Dimension", "ops.control_flow_ops._resource_safe_shape", "ops.array_ops.zeros", "ops.control_flow_ops.merge", "ops.control_flow_ops.switch", "ops.control_flow_ops._Enter", "<builtin>.zip", "framework.ops.IndexedSlices", "ops.control_flow_ops.ControlFlowContext.ExitResult", "ops.array_ops.zeros_like", "ops.math_ops.maximum", "ops.control_flow_ops._NextIteration", "ops.array_ops.concat"], "ops.control_flow_ops.WhileContext._InitializeValues": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.set", "<builtin>.TypeError"], "ops.control_flow_ops.WhileContext._BuildLoop": ["ops.control_flow_ops.exit", "framework.ops.get_collection_ref", "<builtin>.ValueError", "util.nest.pack_sequence_as", "<builtin>.len", "ops.control_flow_ops._Identity", "ops.control_flow_ops._AddNextAndBackEdge", "ops.control_flow_ops._convert_flows_to_tensorarrays", "<builtin>.list", "util.nest.is_sequence_or_composite", "framework.ops.convert_n_to_tensor_or_composite", "ops.control_flow_ops._SetShapeInvariants", "ops.control_flow_util.IsLoopConstantEnter", "ops.control_flow_ops.while_loop.<lambda3>", "ops.control_flow_ops.while_loop.<lambda2>", "framework.ops.convert_to_tensor", "util.nest.assert_same_structure", "framework.ops.control_dependencies", "util.nest.flatten", "ops.control_flow_ops._SwitchRefOrTensor", "ops.control_flow_ops.while_loop.<lambda1>", "ops.control_flow_ops.WhileContext._FixControlInputsAndContext", "ops.control_flow_ops.merge", "ops.control_flow_ops._Enter", "<builtin>.zip", "framework.ops.get_collection", "ops.control_flow_ops.ControlFlowContext.ExitResult", "util.nest.map_structure", "ops.control_flow_ops.WhileContext._InitializeValues", "ops.control_flow_ops.while_loop.<lambda4>"], "ops.control_flow_ops.while_loop.<lambda1>": ["ops.control_flow_ops.while_loop.<lambda1>", "ops.control_flow_ops.while_loop.<lambda3>", "ops.math_ops.logical_and"], "ops.control_flow_ops.while_loop.<lambda3>": ["ops.control_flow_ops.while_loop.<lambda1>", "ops.control_flow_ops.while_loop.<lambda3>", "ops.math_ops.logical_and"], "ops.control_flow_ops.while_loop.<lambda4>": ["ops.control_flow_ops.while_loop.<lambda4>", "ops.control_flow_ops.while_loop.<lambda2>"], "ops.control_flow_ops.while_loop.<lambda2>": ["ops.control_flow_ops.while_loop.<lambda4>", "ops.control_flow_ops.while_loop.<lambda2>"], "ops.control_flow_ops.WhileContext._BuildLoop.map_fn": ["<builtin>.isinstance", "ops.array_ops.identity"], "ops.control_flow_ops.WhileContext.BuildLoop": ["ops.control_flow_ops.ControlFlowContext.Exit", "framework.ops.convert_n_to_tensor_or_composite", "util.nest.pack_sequence_as", "ops.control_flow_ops.WhileContext._BuildLoop", "<builtin>.len", "util.nest.flatten", "util.nest.map_structure", "framework.ops.get_default_graph", "ops.control_flow_ops.ControlFlowContext.Enter", "ops.control_flow_ops._convert_flows_to_tensorarrays"], "ops.control_flow_ops.WhileContext.IsWhileContext": [], "ops.control_flow_ops.while_loop_v2": ["ops.control_flow_ops.while_loop"], "ops.control_flow_ops.while_loop.convert": ["framework.ops.convert_to_tensor", "<builtin>.isinstance"], "ops.control_flow_ops._AsTensorList": ["framework.ops.convert_to_tensor_or_composite", "<builtin>.isinstance", "framework.ops.IndexedSlices", "ops.array_ops.identity", "ops.control_flow_ops.with_dependencies"], "ops.control_flow_ops._CheckResults": ["<builtin>.zip", "<builtin>.len"], "ops.control_flow_ops._GroupControlDeps": ["framework.ops.device", "framework.ops.control_dependencies"], "ops.control_flow_ops.group.device_key": [], "ops.control_flow_ops.tuple_v2": ["ops.control_flow_ops.tuple"], "ops.control_flow_ops.tuple": ["<builtin>.isinstance", "framework.ops.name_scope", "<builtin>.sorted", "framework.ops.control_dependencies", "ops.control_flow_ops.group", "<builtin>.ValueError", "ops.control_flow_ops.with_dependencies", "eager.context.executing_eagerly", "<builtin>.type", "framework.ops.convert_to_tensor", "framework.tensor_util.is_tf_type", "<builtin>.set", "<builtin>.TypeError"], "ops.control_flow_ops.tuple.<lambda1>": [], "ops.control_flow_ops._assert_at_most_n_true": ["ops.math_ops.cast", "framework.constant_op.constant", "ops.math_ops.less_equal", "<builtin>.getattr", "<builtin>.len", "ops.array_ops.stack", "ops.control_flow_ops.Assert", "ops.math_ops.reduce_sum"], "ops.control_flow_ops._case_create_default_action": ["<builtin>.len"], "ops.control_flow_ops._case_create_default_action.default_action": ["ops.array_ops.stack", "ops.control_flow_ops._assert_at_most_n_true", "ops.control_flow_ops.Assert", "framework.ops.control_dependencies"], "ops.control_flow_ops._case_verify_and_canonicalize_args": ["<builtin>.zip", "<builtin>.isinstance", "<builtin>.sorted", "platform.tf_logging.warn", "<builtin>.list", "<builtin>.callable", "<builtin>.ValueError", "<builtin>.len", "<builtin>.type", "eager.context.executing_eagerly", "<builtin>.TypeError"], "ops.control_flow_ops._case_verify_and_canonicalize_args.<lambda1>": [], "ops.control_flow_ops._indexed_case_verify_and_canonicalize_args": ["<builtin>.isinstance", "<builtin>.sorted", "<builtin>.callable", "<builtin>.enumerate", "<builtin>.list", "<builtin>.ValueError", "<builtin>.all", "<builtin>.max", "<builtin>.len", "<builtin>.type", "<builtin>.min", "<builtin>.map", "<builtin>.set", "<builtin>.TypeError"], "ops.control_flow_ops._indexed_case_helper": ["ops.math_ops.less", "framework.ops.name_scope", "<builtin>.len", "ops.array_ops.where", "ops.control_flow_ops._indexed_case_verify_and_canonicalize_args", "eager.context.executing_eagerly", "<builtin>.hasattr", "<builtin>.int", "ops.math_ops.greater_equal"], "ops.control_flow_ops.case_v2": ["ops.control_flow_ops._case_helper"], "ops.control_flow_ops.switch_case": ["ops.control_flow_ops._indexed_case_helper"], "ops.gen_functional_ops.device_index": [], "ops.control_flow_ops.XLAControlFlowContext.__init__": ["<builtin>.super"], "ops.control_flow_ops.XLAControlFlowContext.to_control_flow_context_def": ["<builtin>.super"], "ops.control_flow_ops.XLAControlFlowContext.IsXLAContext": [], "ops.control_flow_ops.XLAControlFlowContext.AddOp": [], "ops.control_flow_ops.XLAControlFlowContext.AddValue": [], "ops.control_flow_ops.XLAControlFlowContext.RequiresUniqueFunctionRetracing": [], "ops.control_flow_state": [], "ops.control_flow_state._GetMaxSizeFromNestedMaximumIterations": ["framework.ops.get_default_graph", "framework.constant_op.constant", "framework.tensor_util.constant_value", "<builtin>.ValueError", "ops.control_flow_util.IsContainingContext", "ops.control_flow_util.GetContainingWhileContext"], "ops.control_flow_util.IsContainingContext": [], "ops.control_flow_util.GetContainingWhileContext": [], "ops.control_flow_state._GradLoopState.__init__": ["<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.list", "<builtin>.len", "ops.control_flow_ops.WhileContext"], "ops.control_flow_ops.WhileContext": [], "ops.control_flow_state._GradLoopState.outer_grad_state": [], "ops.control_flow_state._GradLoopState.forward_context": [], "ops.control_flow_state._GradLoopState.forward_index": [], "ops.control_flow_state._GradLoopState.forward_sync": ["ops.control_flow_ops.control_trigger", "framework.ops.control_dependencies"], "ops.control_flow_ops.control_trigger": [], "ops.control_flow_state._GradLoopState.grad_context": [], "ops.control_flow_state._GradLoopState.grad_index": [], "ops.control_flow_state._GradLoopState.grad_sync": ["ops.control_flow_ops.control_trigger", "framework.ops.control_dependencies"], "ops.control_flow_state._GradLoopState.history_map": [], "ops.control_flow_state._GradLoopState.switch_map": [], "ops.control_flow_state._GradLoopState.unused_exits": [], "ops.control_flow_state._GradLoopState.deferred_exits": [], "ops.control_flow_state._GradLoopState.forward_loop_exits": [], "ops.control_flow_state._GradLoopState.pending_exits_count": [], "ops.control_flow_state._GradLoopState.AddForwardAccumulator": ["framework.ops.colocate_with", "ops.control_flow_util.IsInXLAContext", "ops.gen_data_flow_ops.stack_push_v2", "framework.ops.control_dependencies", "framework.ops.get_default_graph", "ops.control_flow_state._GetMaxSizeFromNestedMaximumIterations", "framework.constant_op.constant", "ops.gen_data_flow_ops.stack_v2", "<builtin>.isinstance", "<builtin>.TypeError", "ops.control_flow_util.GetOutputContext"], "ops.gen_data_flow_ops.stack_v2": [], "ops.gen_data_flow_ops.stack_push_v2": [], "ops.control_flow_state._GradLoopState.AddBackpropAccumulatedValue": ["ops.control_flow_ops._SwitchRefOrTensor", "<builtin>.isinstance", "framework.ops.control_dependencies", "ops.gen_data_flow_ops.stack_pop_v2"], "ops.gen_data_flow_ops.stack_pop_v2": [], "ops.control_flow_state._GradLoopState.GetRealValue": ["ops.control_flow_util.GetLoopConstantEnter", "ops.control_flow_state._GradLoopState.AddForwardAccumulator", "framework.constant_op.constant", "framework.tensor_util.constant_value", "ops.control_flow_state._GradLoopState.AddBackpropAccumulatedValue", "framework.constant_op.is_constant"], "ops.control_flow_util.GetLoopConstantEnter": ["ops.control_flow_util.IsLoopConstantEnter"], "ops.control_flow_state._ControlFlowState.__init__": [], "ops.control_flow_state._ControlFlowState.GetGradState": ["ops.control_flow_util.GetWhileContext", "ops.control_flow_util.IsLoopExit"], "ops.control_flow_state._ControlFlowState.ProcessUnusedLoopExits": [], "ops.control_flow_state._ControlFlowState.EnterGradWhileContext": ["ops.control_flow_state._ControlFlowState.GetGradState"], "ops.control_flow_state._ControlFlowState.ExitGradWhileContext": ["ops.control_flow_state._ControlFlowState.GetGradState"], "ops.control_flow_state._ControlFlowState.AddWhileContext": ["ops.control_flow_state._GradLoopState.__init__", "ops.control_flow_util.GetWhileContext"], "ops.control_flow_state._ControlFlowState.ZerosLikeForExit": ["ops.array_ops.shape_internal", "ops.array_ops.zeros_like", "ops.array_ops.zeros"], "ops.control_flow_state._ControlFlowState.ZerosLikeV1WhileLoop": ["framework.ops.convert_to_tensor", "ops.control_flow_ops._SwitchRefOrTensor", "ops.control_flow_util.GetWhileContext", "ops.default_gradient.get_zeros_dtype", "ops.array_ops.zeros_like", "framework.constant_op.constant", "ops.resource_variable_ops.variable_shape", "ops.array_ops.shape_internal", "ops.array_ops.zeros", "ops.control_flow_util.IsLoopSwitch", "ops.control_flow_state.ZerosLike", "ops.control_flow_util.IsSwitch"], "ops.control_flow_util.IsLoopSwitch": ["ops.control_flow_util.IsSwitch", "ops.control_flow_util.IsCondSwitch"], "ops.control_flow_util.IsSwitch": [], "ops.control_flow_state.ZerosLike": ["ops.control_flow_state._ZerosLikeV1", "ops.control_flow_util.IsSwitch", "ops.control_flow_state._ZerosLikeV2"], "ops.resource_variable_ops.variable_shape": ["<builtin>.any", "ops.resource_variable_ops.get_eager_safe_handle_data", "ops.gen_resource_variable_ops.variable_shape", "framework.constant_op.constant"], "ops.default_gradient.get_zeros_dtype": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.str", "ops.resource_variable_ops.get_eager_safe_handle_data"], "ops.control_flow_state._ControlFlowState.PostProcessing": ["ops.array_ops.shape_internal", "framework.constant_op.constant", "ops.array_ops.zeros", "ops.control_flow_ops._NextIteration"], "ops.control_flow_state.MaybeCreateControlFlowState": ["framework.ops.colocate_with", "ops.control_flow_state._ControlFlowState.__init__", "ops.control_flow_state._ControlFlowState.AddWhileContext", "ops.control_flow_util.IsLoopExit"], "ops.control_flow_state._ZerosLikeV1": ["framework.ops.control_dependencies", "ops.default_gradient.get_zeros_dtype", "ops.array_ops.zeros_like", "ops.control_flow_ops.switch", "ops.array_ops.shape_internal", "ops.gen_resource_variable_ops.variable_shape", "ops.array_ops.zeros", "ops.array_ops.identity"], "ops.control_flow_state._ZerosLikeV2": ["ops.default_gradient.get_zeros_dtype", "ops.array_ops.zeros_like", "framework.constant_op.constant", "ops.array_ops.shape_internal", "ops.gen_resource_variable_ops.variable_shape", "<builtin>.isinstance", "ops.array_ops.zeros"], "ops.control_flow_util": ["os.getenv", "python.tf2.enabled"], "ops.control_flow_util.enable_control_flow_v2": [], "ops.control_flow_util.GetContainingXLAContext": [], "ops.control_flow_util.InXlaContext": ["ops.control_flow_util.GetContainingXLAContext"], "ops.control_flow_util.IsInCond": ["ops.control_flow_util.GetContainingCondContext"], "ops.control_flow_util.GetContainingCondContext": [], "ops.control_flow_util.IsMerge": [], "ops.control_flow_util.IsCondSwitch": ["ops.control_flow_util.IsSwitch", "ops.control_flow_util.IsLoopEnter"], "ops.control_flow_util.IsCondMerge": ["ops.control_flow_util.GetOutputContext", "ops.control_flow_util.IsMerge"], "ops.control_flow_util.IsLoopMerge": ["ops.control_flow_util.IsMerge", "ops.control_flow_util.IsCondMerge"], "ops.control_flow_util.TensorInContext": ["ops.control_flow_util.OpInContext"], "ops.control_flow_util_v2": ["util.tf_contextlib.contextmanager"], "ops.control_flow_util_v2.in_defun": ["<builtin>.isinstance", "eager.context.executing_eagerly", "framework.ops.get_default_graph"], "ops.control_flow_util_v2.in_while_loop_defun": ["<builtin>.isinstance", "eager.context.executing_eagerly"], "eager.function._EagerDefinedFunction": [], "ops.control_flow_util_v2.resource_input_index._extract_input_index": ["ops.control_flow_util_v2.resource_input_index"], "ops.control_flow_util_v2.clear_control_inputs": ["framework.ops.control_dependencies", "framework.ops.get_default_graph"], "ops.control_flow_util_v2._is_tpu_strategy": [], "ops.control_flow_util_v2._is_building_keras_layer": ["util.keras_deps.get_call_context_function"], "ops.control_flow_util_v2.graph_wrapped_for_higher_order_tape_gradients": ["<builtin>.getattr"], "ops.control_flow_v2_func_graphs": [], "ops.control_flow_v2_func_graphs.ControlFlowFuncGraph.__init__": ["framework.func_graph.override_func_graph_name_scope", "outer_graph._device_function_stack.copy", "framework.ops.executing_eagerly_outside_functions", "<builtin>.super", "FuncGraph.outer_graph.get_name_scope"], "outer_graph._device_function_stack.copy": [], "FuncGraph.outer_graph.get_name_scope": [], "ops.control_flow_v2_toggles": ["util.tf_export.tf_export"], "ops._control_flow_api_gauge.get_cell": [], "ops.control_flow_v2_toggles.control_flow_v2_enabled": ["ops.control_flow_util.EnableControlFlowV2", "framework.ops.get_default_graph"], "ops.control_flow_v2_toggles.output_all_intermediates": [], "ops.conv2d_benchmark": ["platform.flags.DEFINE_boolean", "platform.test.main"], "platform.flags.DEFINE_boolean": [], "ops.conv2d_benchmark.build_graph": ["ops.nn_ops.conv2d", "framework.ops.device", "ops.variables.VariableV1", "ops.random_ops.truncated_normal", "<builtin>.range", "framework.ops.control_dependencies", "ops.control_flow_ops.group"], "ops.nn_ops.conv2d": ["util.deprecation.deprecated_argument_lookup", "functools.partial", "<builtin>.getattr", "ops.nn_ops.squeeze_batch_dims", "ops.nn_ops._get_sequence", "<builtin>.len", "ops.gen_nn_ops.conv2d", "ops.nn_ops.convert_padding"], "ops.conv2d_benchmark.Conv2DBenchmark._run_graph": ["test.Benchmark.report_benchmark", "time.time", "client.session.Session", "ops.variables.global_variables_initializer", "protobuf.config_pb2.ConfigProto", "framework.ops.Graph", "<builtin>.str", "<builtin>.print", "ops.conv2d_benchmark.build_graph"], "ops.conv2d_benchmark.Conv2DBenchmark.benchmark_conv2d": ["<builtin>.ValueError", "<builtin>.str", "itertools.product", "<builtin>.list", "<builtin>.range", "<builtin>.print", "ops.conv2d_benchmark.Conv2DBenchmark._run_graph"], "ops.critical_section_ops": ["threading.local", "contextlib.contextmanager"], "ops.critical_section_ops._identity": ["<builtin>.isinstance", "ops.control_flow_ops.group", "ops.array_ops.identity", "eager.context.executing_eagerly"], "ops.critical_section_ops._get_device_or_colocation": ["ops.critical_section_ops._get_colocation"], "ops.critical_section_ops._get_colocation": [], "ops.critical_section_ops._get_critical_section_stack": [], "ops.critical_section_ops._push_critical_section_stack": ["<builtin>.RuntimeError", "<builtin>.ValueError", "ops.critical_section_ops._get_critical_section_stack"], "ops.critical_section_ops.CriticalSection.__init__": ["ops.critical_section_ops.CriticalSection._init_from_args", "<builtin>.ValueError", "eager.context.ensure_initialized"], "ops.critical_section_ops.CriticalSection._init_from_args": ["ops.critical_section_ops._get_device_or_colocation", "framework.ops.add_to_collections", "framework.ops.name_scope", "ops.gen_resource_variable_ops.mutex_v2", "eager.context.executing_eagerly", "framework.ops.init_scope", "framework.ops.get_default_graph", "<builtin>.id"], "ops.gen_resource_variable_ops.mutex_v2": [], "ops.critical_section_ops.CriticalSection.name": [], "ops.critical_section_ops.CriticalSection.execute": ["util.object_identity.ObjectIdentitySet", "ops.critical_section_ops.CriticalSection._add_control_dependencies_to_lock", "util.nest.map_structure", "util.nest.pack_sequence_as", "framework.ops.get_default_graph", "framework.ops.add_to_collections", "ops.critical_section_ops._identity", "ops.gen_resource_variable_ops.mutex_lock", "ops.gen_resource_variable_ops.consume_mutex_lock", "<builtin>.set", "ops.control_flow_ops.tuple", "<builtin>.list", "framework.ops.control_dependencies", "framework.ops.colocate_with", "ops.critical_section_ops.CriticalSection._is_self_handle", "ops.critical_section_ops.CriticalSection._check_multiple_access_to_resources", "ops.critical_section_ops._push_critical_section_stack", "framework.ops.name_scope", "eager.context.executing_eagerly", "util.nest.flatten", "<builtin>.ValueError", "<builtin>.any"], "ops.gen_resource_variable_ops.mutex_lock": [], "ops.critical_section_ops.CriticalSection._add_control_dependencies_to_lock": ["ops.control_flow_ops.group", "<builtin>.dict", "<builtin>.set"], "ops.critical_section_ops.CriticalSection._is_self_handle": ["<builtin>.isinstance", "ops.critical_section_ops._get_colocation"], "ops.critical_section_ops.CriticalSection._check_multiple_access_to_resources": ["framework.ops.get_collection", "<builtin>.ValueError", "ops.critical_section_ops.CriticalSection._is_self_handle", "<builtin>.list"], "ops.gen_resource_variable_ops.consume_mutex_lock": [], "ops.ctc_ops": ["util.dispatch.add_dispatch_support", "framework.ops.NotDifferentiable", "util.tf_export.tf_export", "framework.ops.RegisterGradient"], "ops.ctc_ops._get_context_device_type": ["eager.context.context", "device.DeviceSpec.from_string"], "ops.ctc_ops._generate_defun_backend": ["eager.function.defun_with_attributes"], "ops.ctc_ops._ctc_loss_impl": ["ops.array_ops.transpose", "util.deprecation.deprecated_argument_lookup", "<builtin>.TypeError", "ops.gen_ctc_ops.ctc_loss", "<builtin>.isinstance", "ops.gen_ctc_ops.ctc_loss_v2"], "ops.gen_ctc_ops.ctc_loss": [], "ops.gen_ctc_ops.ctc_loss_v2": [], "ops.ctc_ops._CTCLossGradImpl": ["ops.nn_grad._BroadcastMul", "ops.array_ops.prevent_gradient"], "ops.array_ops.prevent_gradient": [], "ops.nn_grad._BroadcastMul": ["ops.array_ops.expand_dims"], "ops.ctc_ops._CTCLossGrad": ["ops.ctc_ops._CTCLossGradImpl"], "ops.ctc_ops._CTCLossV2Grad": ["ops.ctc_ops._CTCLossGradImpl"], "ops.gen_ctc_ops.ctc_greedy_decoder": [], "ops.gen_ctc_ops.ctc_beam_search_decoder": [], "ops.ctc_ops.ctc_beam_search_decoder_v2": ["ops.ctc_ops.ctc_beam_search_decoder"], "ops.ctc_ops._ctc_state_trans": ["ops.math_ops.equal", "framework.ops.convert_to_tensor", "ops.linalg_ops.eye", "ops.array_ops.zeros_like", "ops.array_ops.tile", "ops.array_ops.expand_dims", "ops.math_ops.range", "ops.ctc_ops._get_dim", "ops.array_ops.concat", "framework.ops.name_scope", "ops.math_ops.cast", "ops.array_ops.ones", "ops.array_ops.scatter_nd", "ops.array_ops.stack"], "ops.ctc_ops._get_dim": ["ops.array_ops.shape", "framework.tensor_shape.dimension_value"], "ops.ctc_ops.ctc_state_log_probs": ["ops.array_ops.transpose", "ops.array_ops.reshape", "ops.array_ops.zeros", "ops.math_ops.log", "ops.array_ops.one_hot", "ops.ctc_ops._get_dim", "ops.math_ops.cast", "ops.array_ops.ones"], "ops.ctc_ops._ilabel_to_state": ["ops.math_ops.reduce_sum", "ops.math_ops.log", "ops.array_ops.one_hot", "ops.array_ops.tile", "ops.array_ops.expand_dims", "ops.ctc_ops._get_dim", "ops.array_ops.concat", "ops.array_ops.pad"], "ops.ctc_ops._state_to_olabel": ["ops.math_ops.reduce_logsumexp", "ops.math_ops.log", "ops.array_ops.one_hot", "ops.array_ops.expand_dims", "ops.ctc_ops._get_dim", "ops.array_ops.concat"], "ops.ctc_ops._state_to_olabel_unique": ["ops.array_ops.transpose", "ops.array_ops.reshape", "ops.math_ops.reduce_logsumexp", "ops.ctc_ops._sum_states", "ops.array_ops.shape", "ops.math_ops.log", "ops.array_ops.ones_like", "ops.array_ops.expand_dims", "ops.array_ops.where", "ops.math_ops.range", "ops.ctc_ops._get_dim", "ops.array_ops.concat", "ops.array_ops.fill", "ops.array_ops.scatter_nd"], "ops.ctc_ops._sum_states": ["ops.math_ops.reduce_logsumexp", "framework.ops.convert_to_tensor", "ops.math_ops.log", "ops.array_ops.one_hot", "ops.array_ops.expand_dims", "ops.ctc_ops._get_dim", "framework.ops.name_scope"], "ops.ctc_ops.ctc_loss_and_grad": ["ops.array_ops.transpose", "ops.ctc_ops._state_to_olabel_unique", "ops.math_ops.exp", "ops.nn_ops.log_softmax", "ops.math_ops.log", "ops.ctc_ops._forward_backward_log", "ops.ctc_ops._ilabel_to_state", "ops.ctc_ops._state_to_olabel", "ops.ctc_ops.ctc_state_log_probs", "ops.ctc_ops._ctc_state_trans", "ops.array_ops.expand_dims", "ops.ctc_ops._get_dim", "ops.array_ops.sequence_mask"], "ops.ctc_ops._forward_backward_log": ["ops.array_ops.transpose", "ops.math_ops.reduce_logsumexp", "ops.array_ops.zeros", "ops.math_ops.log", "ops.array_ops.expand_dims", "ops.ctc_ops._get_dim", "ops.array_ops.sequence_mask", "ops.ctc_ops._scan", "<builtin>.ValueError"], "ops.ctc_ops._ctc_loss_grad": ["ops.array_ops.reshape", "<builtin>.len"], "ops.ctc_ops._ctc_loss_op_standard": ["ops.array_ops.where", "ops.ctc_ops._ctc_loss_impl", "ops.array_ops.concat", "framework.sparse_tensor.SparseTensor"], "ops.ctc_ops._ctc_loss_op_cudnn": ["ops.array_ops.where", "ops.ctc_ops._ctc_loss_impl", "ops.array_ops.concat", "framework.sparse_tensor.SparseTensor"], "ops.ctc_ops._ctc_loss_shape": [], "ops.ctc_ops.ctc_loss_v2": ["ops.array_ops.where", "ops.ctc_ops._get_dim", "ops.array_ops.concat", "ops.ctc_ops.ctc_loss_dense", "<builtin>.isinstance", "ops.ctc_ops.ctc_loss", "framework.sparse_tensor.SparseTensor", "<builtin>.ValueError"], "ops.ctc_ops.ctc_loss_dense": ["ops.array_ops.transpose", "framework.ops.convert_to_tensor", "ops.math_ops.reduce_max", "ops.array_ops.zeros_like", "ops.array_ops.where", "ops.ctc_ops._get_dim", "ops.array_ops.concat", "ops.array_ops.sequence_mask", "framework.ops.name_scope", "ops.ctc_ops.ctc_loss_dense.compute_ctc_loss"], "ops.ctc_ops.ctc_loss_v3": ["<builtin>.str", "ops.ctc_ops._ctc_loss_op_cudnn", "uuid.uuid4", "ops.ctc_ops._ctc_loss_op_standard", "ops.ctc_ops._generate_defun_backend", "ops.ctc_ops._get_context_device_type", "eager.context.executing_eagerly", "ops.ctc_ops._get_dim", "eager.context.num_gpus", "eager.function.register", "<builtin>.isinstance", "ops.ctc_ops.ctc_loss_dense", "<builtin>.ValueError"], "ops.ctc_ops.ctc_loss_dense.compute_ctc_loss": ["ops.ctc_ops.ctc_loss_and_grad", "<builtin>.dict"], "ops.ctc_ops.ctc_loss_dense.compute_ctc_loss.grad": ["ops.array_ops.reshape", "<builtin>.len"], "ops.ctc_ops.collapse_repeated": ["ops.math_ops.cast", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.array_ops.boolean_mask", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "ops.array_ops.ones_like", "ops.math_ops.reduce_max", "ops.array_ops.expand_dims", "ops.math_ops.not_equal", "ops.ctc_ops._get_dim", "ops.array_ops.concat", "ops.array_ops.sequence_mask", "framework.ops.name_scope", "ops.math_ops.logical_and", "ops.math_ops.range", "ops.array_ops.scatter_nd"], "ops.ctc_ops.dense_labels_to_sparse": ["ops.array_ops.reshape", "ops.array_ops.boolean_mask", "ops.array_ops.shape", "ops.math_ops.reduce_max", "ops.array_ops.expand_dims", "ops.array_ops.sequence_mask", "ops.math_ops.range", "ops.math_ops.cast", "ops.sparse_ops.sparse_reshape", "framework.sparse_tensor.SparseTensor"], "ops.ctc_ops.ctc_unique_labels": ["ops.map_fn.map_fn", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "ops.ctc_ops.ctc_unique_labels._unique": ["ops.math_ops.cast", "ops.array_ops.unique", "ops.ctc_ops._get_dim", "ops.array_ops.pad"], "ops.ctc_ops._forward_backward_log._forward": ["ops.array_ops.expand_dims", "ops.math_ops.reduce_logsumexp"], "ops.ctc_ops._scan": ["framework.ops.convert_to_tensor", "ops.array_ops.shape", "<builtin>.len", "ops.ctc_ops._scan.cond", "ops.functional_ops.While", "ops.inplace_ops.empty", "<builtin>.enumerate", "ops.ctc_ops._scan.body", "framework.constant_op.constant", "eager.context.executing_eagerly", "ops.array_ops.concat", "framework.function.Defun", "ops.inplace_ops.alias_inplace_add", "util.nest.flatten", "ops.ctc_ops._scan.<lambda2>"], "ops.ctc_ops._forward_backward_log._backward": ["ops.array_ops.expand_dims", "ops.math_ops.reduce_logsumexp", "ops.array_ops.squeeze"], "ops.ctc_ops._scan.<lambda1>": ["util.nest.pack_sequence_as"], "ops.ctc_ops._scan.<lambda2>": ["util.nest.pack_sequence_as"], "ops.ctc_ops._scan.cond": [], "ops.ctc_ops._scan.body": ["ops.inplace_ops.alias_inplace_update", "ops.array_ops.gather", "<builtin>.zip", "ops.ctc_ops._forward_backward_log._forward", "ops.ctc_ops._scan.<lambda1>", "ops.ctc_ops._forward_backward_log._backward", "util.nest.flatten", "ops.ctc_ops._scan.<lambda2>"], "ops.inplace_ops.alias_inplace_update": ["ops.inplace_ops._inplace_helper"], "ops.inplace_ops.empty": [], "ops.inplace_ops.alias_inplace_add": ["ops.inplace_ops._inplace_helper"], "ops.functional_ops.While": ["<builtin>.list", "framework.function.Defun", "<builtin>.len", "ops.functional_ops._GetInputDtypes", "framework.attr_value_pb2.AttrValue", "ops.gen_functional_ops._while", "<builtin>.ValueError", "ops.functional_ops._LoopBodyCaptureWrapper"], "ops.cudnn_rnn_grad": ["framework.ops.RegisterGradient"], "ops.cudnn_rnn_grad._cudnn_rnn_backward": ["<builtin>.ValueError", "ops.gen_cudnn_rnn_ops.cudnn_rnn_backprop"], "ops.gen_cudnn_rnn_ops.cudnn_rnn_backprop": [], "ops.cudnn_rnn_grad._cudnn_rnn_backward_v2": ["ops.gen_cudnn_rnn_ops.cudnn_rnn_backprop_v2", "<builtin>.ValueError"], "ops.gen_cudnn_rnn_ops.cudnn_rnn_backprop_v2": [], "ops.cudnn_rnn_grad._cudnn_rnn_backwardv3": ["<builtin>.ValueError", "ops.gen_cudnn_rnn_ops.cudnn_rnn_backprop_v3"], "ops.gen_cudnn_rnn_ops.cudnn_rnn_backprop_v3": [], "ops.custom_gradient": ["util.tf_export.tf_export"], "ops.custom_gradient.custom_gradient": ["ops.custom_gradient.custom_gradient.decorated", "util.tf_decorator.make_decorator", "ops.custom_gradient.Bind.decorator"], "ops.custom_gradient.custom_gradient.<lambda1>": ["ops.custom_gradient.custom_gradient"], "ops.custom_gradient.Bind.decorator": [], "ops.custom_gradient.custom_gradient.decorated": ["ops.custom_gradient._eager_mode_decorator", "ops.custom_gradient._graph_mode_decorator", "eager.context.executing_eagerly"], "ops.custom_gradient._eager_mode_decorator": ["framework.ops.convert_to_tensor", "<builtin>.all", "util.tf_inspect.getfullargspec", "ops.custom_gradient.recompute_grad.inner", "<builtin>.TypeError", "ops.custom_gradient.recompute_grad.inner.grad_wrapper.inner_recompute_grad", "util.nest.pack_sequence_as", "ops.custom_gradient.grad_pass_through._grad_pass_through_op", "util.nest.flatten", "eager.tape.VariableWatcher", "ops.gen_array_ops.identity", "<builtin>.len", "<builtin>.set", "<builtin>.list", "eager.tape.record_operation"], "ops.custom_gradient._graph_mode_decorator": ["<builtin>.getattr", "util.nest.pack_sequence_as", "util.nest.flatten", "framework.ops.RegisterGradient", "eager.tape.VariableWatcher", "ops.custom_gradient._get_dependent_variables", "framework.ops.convert_to_tensor", "<builtin>.enumerate", "ops.variable_scope.get_variable_scope", "ops.custom_gradient.recompute_grad.inner", "util.tf_inspect.getfullargspec", "ops.array_ops.identity_n", "<builtin>.ValueError", "ops.custom_gradient.generate_name", "<builtin>.zip", "ops.resource_variable_ops.is_resource_variable", "platform.tf_logging.warn", "framework.ops.get_default_graph", "util.nest.map_structure", "<builtin>.len", "<builtin>.set", "eager.tape.record_operation", "<builtin>.TypeError", "<builtin>.frozenset", "ops.custom_gradient.recompute_grad.inner.grad_wrapper.inner_recompute_grad", "ops.custom_gradient.grad_pass_through._grad_pass_through_op", "<builtin>.hasattr", "<builtin>.sorted", "ops.handle_data_util.copy_handle_data"], "ops.custom_gradient.Bind.decorator.<lambda1>": ["ops.custom_gradient.Bind.__init__"], "ops.custom_gradient.Bind.__init__": [], "ops.custom_gradient.Bind.__get__": ["util.tf_decorator.make_decorator", "ops.custom_gradient.Bind.__init__"], "ops.custom_gradient.Bind.__call__": [], "ops.custom_gradient.get_variable_by_name": ["<builtin>.ValueError", "<builtin>.filter", "framework.ops.get_collection", "<builtin>.len", "<builtin>.list"], "ops.custom_gradient.get_variable_by_name._filter_fn": [], "ops.custom_gradient._get_dependent_variables": ["util.nest.map_structure", "ops.op_selector.get_backward_walk_ops", "ops.custom_gradient.get_variable_by_name"], "ops.op_selector.get_backward_walk_ops": ["ops.op_selector._get_inputs", "util.object_identity.ObjectIdentitySet", "ops.op_selector.get_backward_walk_ops.is_within", "<builtin>.list", "ops.op_selector.is_iterable", "ops.op_selector.make_list_of_op", "ops.op_selector.get_generating_ops", "ops.op_selector.make_list_of_t", "<builtin>.set", "ops.op_selector.concatenate_unique", "<builtin>.isinstance"], "ops.custom_gradient.generate_name": ["framework.ops.uid"], "eager.tape.VariableWatcher": [], "ops.custom_gradient.recompute_grad.inner": ["eager.tape.stop_recording", "ops.variable_scope.get_variable_scope"], "ops.custom_gradient.recompute_grad.inner.grad_wrapper.inner_recompute_grad": ["<builtin>.float", "ops.math_ops.cast", "ops.math_ops.reduce_max", "util.nest.map_structure", "ops.variable_scope.variable_scope", "<builtin>.len", "eager.backprop.GradientTape", "eager.context.executing_eagerly", "<builtin>.list", "ops.array_ops.reshape", "ops.array_ops.where_v2"], "ops.custom_gradient.grad_pass_through._grad_pass_through_op": [], "ops.custom_gradient._graph_mode_decorator.<lambda1>": [], "ops.custom_gradient._graph_mode_decorator.tape_grad_fn": ["<builtin>.ValueError", "<builtin>.len", "util.nest.flatten"], "ops.custom_gradient._graph_mode_decorator.internal_grad_fn": ["ops.custom_gradient._graph_mode_decorator.tape_grad_fn"], "ops.custom_gradient._eager_mode_decorator.actual_grad_fn": ["<builtin>.ValueError", "<builtin>.len", "util.nest.flatten"], "ops.custom_gradient.recompute_grad": ["ops.custom_gradient.custom_gradient"], "ops.custom_gradient.recompute_grad.inner.grad_wrapper": ["ops.custom_gradient.recompute_grad.inner.grad_wrapper.inner_recompute_grad", "ops.custom_gradient.custom_gradient"], "ops.custom_gradient.recompute_grad.inner.grad_wrapper.inner_recompute_grad.<lambda1>": ["ops.math_ops.cast"], "ops.custom_gradient.recompute_grad.inner.grad_wrapper.inner_recompute_grad.transpose": ["<builtin>.NotImplementedError"], "ops.custom_gradient.grad_pass_through": ["ops.custom_gradient.custom_gradient", "util.tf_decorator.make_decorator"], "ops.custom_gradient.grad_pass_through._grad_pass_through_op.grad": ["<builtin>.len"], "ops.data_flow_grad": ["framework.ops.NotDifferentiable", "framework.ops.RegisterGradient"], "ops.data_flow_grad._DynamicPartitionGrads": ["ops.math_ops.reduce_prod", "ops.array_ops.shape", "ops.data_flow_ops.dynamic_partition", "ops.math_ops.range", "ops.data_flow_ops.parallel_dynamic_stitch", "ops.array_ops.reshape"], "ops.data_flow_ops.parallel_dynamic_stitch": [], "ops.data_flow_grad._DynamicStitchGrads": ["ops.array_ops.shape", "<builtin>.isinstance", "ops.data_flow_grad._DynamicStitchGrads.AsInt32", "<builtin>.len", "ops.math_ops.unsorted_segment_sum", "six.moves.xrange", "ops.array_ops.gather"], "ops.data_flow_grad._DynamicStitchGrads.AsInt32": ["ops.math_ops.cast"], "ops.data_flow_ops": [], "ops.data_flow_ops._as_type_list": ["<builtin>.list", "<builtin>.isinstance"], "ops.data_flow_ops._as_shape_list": ["framework.tensor_shape.as_shape", "<builtin>.isinstance", "<builtin>.any", "<builtin>.ValueError", "<builtin>.all", "<builtin>.TypeError"], "ops.data_flow_ops._as_name_list": ["<builtin>.list", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.len"], "ops.data_flow_ops._shape_common": ["framework.tensor_shape.unknown_shape", "framework.tensor_shape.TensorShape", "<builtin>.zip"], "ops.data_flow_ops.QueueBase.__init__": ["ops.resource_variable_ops.EagerResourceDeleter", "<builtin>.isinstance", "<builtin>.ValueError", "eager.context.context", "framework.tensor_shape.unknown_shape", "framework.tensor_shape.TensorShape", "<builtin>.len"], "ops.data_flow_ops.QueueBase.from_list": ["ops.array_ops.gather", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.all", "ops.array_ops.stack", "<builtin>.TypeError", "six.moves.reduce", "ops.data_flow_ops.QueueBase.__init__"], "six.moves.reduce": [], "ops.data_flow_ops.QueueBase.queue_ref": [], "ops.data_flow_ops.QueueBase.name": ["eager.context.executing_eagerly"], "ops.data_flow_ops.QueueBase.dtypes": [], "ops.data_flow_ops.QueueBase.shapes": [], "ops.data_flow_ops.QueueBase.names": [], "ops.data_flow_ops.QueueBase._check_enqueue_dtypes": ["framework.ops.convert_to_tensor", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.sorted"], "ops.data_flow_ops.QueueBase._scope_vals": ["<builtin>.isinstance"], "ops.data_flow_ops.QueueBase.enqueue": ["ops.gen_data_flow_ops.queue_enqueue", "ops.data_flow_ops.QueueBase._check_enqueue_dtypes", "ops.data_flow_ops.QueueBase._scope_vals", "ops.gen_data_flow_ops.queue_enqueue_v2", "<builtin>.zip", "framework.ops.name_scope"], "ops.gen_data_flow_ops.queue_enqueue_v2": [], "ops.gen_data_flow_ops.queue_enqueue": [], "ops.data_flow_ops.QueueBase.enqueue_many": ["ops.gen_data_flow_ops.queue_enqueue_many_v2", "ops.data_flow_ops.QueueBase._check_enqueue_dtypes", "ops.data_flow_ops.QueueBase._scope_vals", "<builtin>.zip", "framework.tensor_shape.dimension_value", "framework.ops.name_scope", "framework.tensor_shape.Dimension"], "ops.gen_data_flow_ops.queue_enqueue_many_v2": [], "ops.data_flow_ops.QueueBase._dequeue_return_value": ["<builtin>.enumerate", "<builtin>.len"], "ops.data_flow_ops.QueueBase.dequeue": ["ops.gen_data_flow_ops.queue_dequeue", "eager.context.executing_eagerly", "<builtin>.zip", "ops.gen_data_flow_ops.queue_dequeue_v2", "ops.data_flow_ops.QueueBase._dequeue_return_value"], "ops.gen_data_flow_ops.queue_dequeue_v2": [], "ops.gen_data_flow_ops.queue_dequeue": [], "ops.data_flow_ops.QueueBase.dequeue_many": ["framework.tensor_shape.TensorShape", "ops.data_flow_ops.QueueBase._dequeue_return_value", "eager.context.executing_eagerly", "<builtin>.zip", "framework.tensor_util.constant_value", "framework.tensor_shape.Dimension", "ops.gen_data_flow_ops.queue_dequeue_many_v2"], "ops.gen_data_flow_ops.queue_dequeue_many_v2": [], "ops.data_flow_ops.QueueBase.dequeue_up_to": ["ops.gen_data_flow_ops.queue_dequeue_up_to_v2", "ops.data_flow_ops.QueueBase._dequeue_return_value", "eager.context.executing_eagerly", "<builtin>.zip", "framework.tensor_shape.TensorShape"], "ops.gen_data_flow_ops.queue_dequeue_up_to_v2": [], "ops.data_flow_ops.QueueBase.close": ["ops.gen_data_flow_ops.queue_close", "ops.gen_data_flow_ops.queue_close_v2"], "ops.gen_data_flow_ops.queue_close_v2": [], "ops.gen_data_flow_ops.queue_close": [], "ops.data_flow_ops.QueueBase.is_closed": ["ops.gen_data_flow_ops.queue_is_closed_", "ops.gen_data_flow_ops.queue_is_closed_v2"], "ops.gen_data_flow_ops.queue_is_closed_v2": [], "ops.gen_data_flow_ops.queue_is_closed_": [], "ops.data_flow_ops.QueueBase.size": ["ops.gen_data_flow_ops.queue_size_v2", "ops.gen_data_flow_ops.queue_size"], "ops.gen_data_flow_ops.queue_size_v2": [], "ops.gen_data_flow_ops.queue_size": [], "ops.data_flow_ops._shared_name": ["eager.context.executing_eagerly", "framework.ops.uid", "<builtin>.str"], "ops.data_flow_ops.RandomShuffleQueue.__init__": ["ops.data_flow_ops._as_shape_list", "<builtin>.str", "ops.data_flow_ops._as_name_list", "<builtin>.int", "hashlib.md5", "<builtin>.super", "ops.data_flow_ops._as_type_list", "framework.random_seed.get_seed", "ops.data_flow_ops._shared_name", "ops.gen_data_flow_ops.random_shuffle_queue_v2"], "ops.gen_data_flow_ops.random_shuffle_queue_v2": [], "ops.data_flow_ops.FIFOQueue.__init__": ["ops.data_flow_ops._as_shape_list", "ops.data_flow_ops._as_name_list", "framework.ops.device", "framework.ops.init_scope", "<builtin>.super", "ops.data_flow_ops._as_type_list", "ops.gen_data_flow_ops.fifo_queue_v2", "ops.data_flow_ops._shared_name"], "ops.gen_data_flow_ops.fifo_queue_v2": [], "ops.data_flow_ops.GPUCompatibleFIFOQueue.__init__": ["ops.data_flow_ops._as_shape_list", "ops.data_flow_ops._as_name_list", "framework.ops.init_scope", "<builtin>.super", "ops.data_flow_ops._as_type_list", "ops.gen_data_flow_ops.fifo_queue_v2", "ops.data_flow_ops._shared_name"], "ops.data_flow_ops.GPUCompatibleFIFOQueue.enqueue_many": ["<builtin>.NotImplementedError"], "ops.data_flow_ops.GPUCompatibleFIFOQueue.dequeue_many": ["<builtin>.NotImplementedError"], "ops.data_flow_ops.PaddingFIFOQueue.__init__": ["ops.data_flow_ops._as_shape_list", "ops.gen_data_flow_ops.padding_fifo_queue_v2", "ops.data_flow_ops._as_name_list", "<builtin>.ValueError", "<builtin>.super", "ops.data_flow_ops._as_type_list", "ops.data_flow_ops._shared_name", "<builtin>.len"], "ops.gen_data_flow_ops.padding_fifo_queue_v2": [], "ops.data_flow_ops.PriorityQueue.__init__": ["ops.data_flow_ops._as_shape_list", "ops.gen_data_flow_ops.priority_queue_v2", "<builtin>.super", "ops.data_flow_ops._as_type_list", "ops.data_flow_ops._shared_name"], "ops.gen_data_flow_ops.priority_queue_v2": [], "ops.data_flow_ops.Barrier.__init__": ["ops.data_flow_ops._as_shape_list", "ops.gen_data_flow_ops.barrier", "eager.context.executing_eagerly", "<builtin>.enumerate", "<builtin>.ValueError", "ops.data_flow_ops._as_type_list", "eager.context.context", "framework.tensor_shape.unknown_shape", "framework.tensor_shape.TensorShape"], "ops.gen_data_flow_ops.barrier": [], "ops.data_flow_ops.Barrier.barrier_ref": [], "ops.data_flow_ops.Barrier.name": ["eager.context.executing_eagerly"], "ops.data_flow_ops.Barrier.insert_many": ["ops.gen_data_flow_ops.barrier_insert_many"], "ops.gen_data_flow_ops.barrier_insert_many": [], "ops.data_flow_ops.Barrier.take_many": ["ops.gen_data_flow_ops.barrier_take_many", "eager.context.executing_eagerly", "<builtin>.zip", "framework.tensor_util.constant_value", "framework.tensor_shape.Dimension", "framework.tensor_shape.TensorShape"], "ops.gen_data_flow_ops.barrier_take_many": [], "ops.data_flow_ops.Barrier.close": ["ops.gen_data_flow_ops.barrier_close"], "ops.gen_data_flow_ops.barrier_close": [], "ops.data_flow_ops.Barrier.ready_size": ["ops.gen_data_flow_ops.barrier_ready_size"], "ops.gen_data_flow_ops.barrier_ready_size": [], "ops.data_flow_ops.Barrier.incomplete_size": ["ops.gen_data_flow_ops.barrier_incomplete_size"], "ops.gen_data_flow_ops.barrier_incomplete_size": [], "ops.data_flow_ops.ConditionalAccumulatorBase.__init__": ["eager.context.executing_eagerly", "framework.tensor_shape.unknown_shape", "framework.tensor_shape.TensorShape", "eager.context.context"], "ops.data_flow_ops.ConditionalAccumulatorBase.accumulator_ref": [], "ops.data_flow_ops.ConditionalAccumulatorBase.name": [], "ops.data_flow_ops.ConditionalAccumulatorBase.dtype": [], "ops.data_flow_ops.ConditionalAccumulatorBase.num_accumulated": ["ops.gen_data_flow_ops.resource_accumulator_num_accumulated"], "ops.gen_data_flow_ops.resource_accumulator_num_accumulated": [], "ops.data_flow_ops.ConditionalAccumulatorBase.set_global_step": ["framework.ops.convert_to_tensor", "ops.math_ops.cast", "ops.gen_data_flow_ops.resource_accumulator_set_global_step"], "ops.gen_data_flow_ops.resource_accumulator_set_global_step": [], "ops.data_flow_ops.ConditionalAccumulator.__init__": ["ops.resource_variable_ops.EagerResourceDeleter", "eager.context.executing_eagerly", "<builtin>.super", "eager.context.context", "ops.gen_data_flow_ops.resource_conditional_accumulator"], "ops.gen_data_flow_ops.resource_conditional_accumulator": [], "ops.data_flow_ops.ConditionalAccumulator.apply_grad": ["framework.ops.convert_to_tensor", "ops.math_ops.cast", "ops.gen_data_flow_ops.resource_accumulator_apply_gradient"], "ops.gen_data_flow_ops.resource_accumulator_apply_gradient": [], "ops.data_flow_ops.ConditionalAccumulator.take_grad": ["ops.gen_data_flow_ops.resource_accumulator_take_gradient"], "ops.gen_data_flow_ops.resource_accumulator_take_gradient": [], "ops.data_flow_ops.SparseConditionalAccumulator.__init__": ["ops.gen_data_flow_ops.sparse_conditional_accumulator", "<builtin>.super"], "ops.gen_data_flow_ops.sparse_conditional_accumulator": [], "ops.data_flow_ops.SparseConditionalAccumulator.apply_indexed_slices_grad": ["ops.data_flow_ops.SparseConditionalAccumulator.apply_grad"], "ops.data_flow_ops.SparseConditionalAccumulator.apply_grad": ["framework.ops.convert_to_tensor", "ops.gen_data_flow_ops.sparse_accumulator_apply_gradient", "ops.math_ops.cast"], "ops.gen_data_flow_ops.sparse_accumulator_apply_gradient": [], "ops.data_flow_ops.SparseConditionalAccumulator.take_grad": ["ops.gen_data_flow_ops.sparse_accumulator_take_gradient"], "ops.gen_data_flow_ops.sparse_accumulator_take_gradient": [], "ops.data_flow_ops.SparseConditionalAccumulator.take_indexed_slices_grad": ["framework.ops.IndexedSlices", "ops.gen_data_flow_ops.sparse_accumulator_take_gradient"], "ops.data_flow_ops.SparseConditionalAccumulator.num_accumulated": ["ops.gen_data_flow_ops.accumulator_num_accumulated"], "ops.gen_data_flow_ops.accumulator_num_accumulated": [], "ops.data_flow_ops.SparseConditionalAccumulator.set_global_step": ["framework.ops.convert_to_tensor", "ops.math_ops.cast", "ops.gen_data_flow_ops.accumulator_set_global_step"], "ops.gen_data_flow_ops.accumulator_set_global_step": [], "ops.data_flow_ops.BaseStagingArea": ["threading.Lock"], "ops.data_flow_ops.BaseStagingArea.__init__": ["<builtin>.isinstance", "framework.ops.get_default_graph", "<builtin>.ValueError", "framework.ops.name_scope", "ops.control_flow_ops.no_op", "framework.tensor_shape.unknown_shape", "framework.tensor_shape.TensorShape", "<builtin>.len"], "ops.data_flow_ops.BaseStagingArea.name": [], "ops.data_flow_ops.BaseStagingArea.dtypes": [], "ops.data_flow_ops.BaseStagingArea.shapes": [], "ops.data_flow_ops.BaseStagingArea.names": [], "ops.data_flow_ops.BaseStagingArea.capacity": [], "ops.data_flow_ops.BaseStagingArea.memory_limit": [], "ops.data_flow_ops.BaseStagingArea._check_put_dtypes": ["<builtin>.set", "<builtin>.str", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.zip", "<builtin>.ValueError", "<builtin>.sorted", "<builtin>.len"], "ops.data_flow_ops.BaseStagingArea._create_device_transfers": ["ops.array_ops.identity", "ops.control_flow_ops.no_op", "<builtin>.isinstance"], "ops.data_flow_ops.BaseStagingArea._get_return_value": ["ops.data_flow_ops.BaseStagingArea._create_device_transfers", "<builtin>.zip"], "ops.data_flow_ops.BaseStagingArea._scope_vals": ["<builtin>.isinstance"], "ops.data_flow_ops.StagingArea.__init__": ["<builtin>.super"], "ops.data_flow_ops.StagingArea.put": ["<builtin>.list", "ops.gen_data_flow_ops.stage", "framework.ops.colocate_with", "<builtin>.isinstance", "ops.data_flow_ops.BaseStagingArea._scope_vals", "framework.ops.name_scope", "six.moves.range", "ops.data_flow_ops.BaseStagingArea._check_put_dtypes", "<builtin>.len"], "ops.gen_data_flow_ops.stage": [], "ops.data_flow_ops.StagingArea.__internal_get": ["ops.data_flow_ops.StagingArea.peek.<lambda1>", "<builtin>.list", "framework.ops.colocate_with", "ops.data_flow_ops.BaseStagingArea._get_return_value", "six.moves.range", "ops.data_flow_ops.StagingArea.get.<lambda1>", "<builtin>.len"], "ops.data_flow_ops.StagingArea.peek.<lambda1>": ["ops.gen_data_flow_ops.stage_peek"], "ops.data_flow_ops.StagingArea.get.<lambda1>": ["ops.gen_data_flow_ops.unstage"], "ops.data_flow_ops.StagingArea.get": ["ops.data_flow_ops.StagingArea.__internal_get"], "ops.gen_data_flow_ops.unstage": [], "ops.data_flow_ops.StagingArea.peek": ["ops.data_flow_ops.StagingArea.__internal_get"], "ops.gen_data_flow_ops.stage_peek": [], "ops.data_flow_ops.StagingArea.size": ["ops.gen_data_flow_ops.stage_size"], "ops.gen_data_flow_ops.stage_size": [], "ops.data_flow_ops.StagingArea.clear": ["ops.gen_data_flow_ops.stage_clear"], "ops.gen_data_flow_ops.stage_clear": [], "ops.data_flow_ops.MapStagingArea.__init__": ["<builtin>.super"], "ops.data_flow_ops.MapStagingArea.put": ["framework.ops.colocate_with", "ops.data_flow_ops.BaseStagingArea._scope_vals", "framework.ops.name_scope", "ops.gen_data_flow_ops.map_stage", "ops.data_flow_ops.BaseStagingArea._check_put_dtypes", "ops.gen_data_flow_ops.ordered_map_stage"], "ops.gen_data_flow_ops.ordered_map_stage": [], "ops.gen_data_flow_ops.map_stage": [], "ops.data_flow_ops.MapStagingArea._get_indices_and_dtypes": ["<builtin>.list", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.all", "six.moves.range", "<builtin>.TypeError", "<builtin>.len"], "ops.data_flow_ops.MapStagingArea.peek": ["framework.ops.colocate_with", "ops.data_flow_ops.BaseStagingArea._get_return_value", "ops.data_flow_ops.MapStagingArea._get_indices_and_dtypes", "ops.gen_data_flow_ops.map_peek", "ops.gen_data_flow_ops.ordered_map_peek"], "ops.gen_data_flow_ops.ordered_map_peek": [], "ops.gen_data_flow_ops.map_peek": [], "ops.data_flow_ops.MapStagingArea.get": ["ops.data_flow_ops.MapStagingArea._popitem", "ops.data_flow_ops.MapStagingArea._pop"], "ops.data_flow_ops.MapStagingArea._popitem": ["ops.data_flow_ops.BaseStagingArea._create_device_transfers", "framework.ops.colocate_with", "ops.gen_data_flow_ops.map_unstage_no_key", "ops.data_flow_ops.BaseStagingArea._get_return_value", "ops.data_flow_ops.MapStagingArea._get_indices_and_dtypes", "ops.gen_data_flow_ops.ordered_map_unstage_no_key"], "ops.data_flow_ops.MapStagingArea._pop": ["ops.gen_data_flow_ops.ordered_map_unstage", "framework.ops.colocate_with", "ops.data_flow_ops.BaseStagingArea._get_return_value", "ops.data_flow_ops.MapStagingArea._get_indices_and_dtypes", "ops.gen_data_flow_ops.map_unstage"], "ops.gen_data_flow_ops.ordered_map_unstage": [], "ops.gen_data_flow_ops.map_unstage": [], "ops.gen_data_flow_ops.ordered_map_unstage_no_key": [], "ops.gen_data_flow_ops.map_unstage_no_key": [], "ops.data_flow_ops.MapStagingArea.size": ["ops.gen_data_flow_ops.ordered_map_size", "ops.gen_data_flow_ops.map_size"], "ops.gen_data_flow_ops.ordered_map_size": [], "ops.gen_data_flow_ops.map_size": [], "ops.data_flow_ops.MapStagingArea.incomplete_size": ["ops.gen_data_flow_ops.map_incomplete_size", "ops.gen_data_flow_ops.ordered_map_incomplete_size"], "ops.gen_data_flow_ops.map_incomplete_size": [], "ops.gen_data_flow_ops.ordered_map_incomplete_size": [], "ops.data_flow_ops.MapStagingArea.clear": ["ops.gen_data_flow_ops.ordered_map_clear", "ops.gen_data_flow_ops.map_clear"], "ops.gen_data_flow_ops.ordered_map_clear": [], "ops.gen_data_flow_ops.map_clear": [], "ops.data_flow_ops.RecordInput.__init__": [], "ops.data_flow_ops.RecordInput.get_yield_op": ["<builtin>.enumerate", "ops.gen_data_flow_ops.record_input", "framework.ops.name_scope", "python_io.TFRecordOptions.get_compression_type_string", "six.moves.range", "ops.array_ops.reshape", "io.python_io.TFRecordOptions", "ops.array_ops.split"], "io.python_io.TFRecordOptions": [], "python_io.TFRecordOptions.get_compression_type_string": [], "ops.gen_data_flow_ops.record_input": [], "ops.default_gradient": [], "ops.default_gradient.ones_like": ["ops.array_ops.ones", "ops.array_ops.ones_like", "ops.default_gradient.shape_and_dtype"], "ops.default_gradient.supports_default_grad": ["<builtin>.len", "ops.resource_variable_ops.get_eager_safe_handle_data"], "ops.embedding_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export"], "ops.embedding_ops._clip": ["ops.embedding_ops._clip._rank", "<builtin>.range", "ops.clip_ops.clip_by_norm", "ops.math_ops.range", "<builtin>.list"], "ops.embedding_ops._clip._rank": ["ops.array_ops.rank", "framework.ops.convert_to_tensor"], "ops.embedding_ops._colocate_with": ["<builtin>.hasattr", "framework.ops.colocate_with", "framework.ops.get_default_graph", "framework.ops.inside_function"], "ops.embedding_ops._embedding_lookup_and_transform": ["ops.math_ops.cast", "<builtin>.any", "ops.embedding_ops._clip", "ops.array_ops.where", "ops.array_ops.reshape", "ops.array_ops.gather", "ops.array_ops.shape", "ops.embedding_ops._colocate_with", "framework.ops.name_scope", "framework.tensor_shape.dimension_value", "ops.array_ops.stack", "ops.math_ops.maximum", "ops.math_ops.reduce_sum", "ops.data_flow_ops.dynamic_partition", "framework.ops.convert_to_tensor", "<builtin>.list", "<builtin>.isinstance", "ops.data_flow_ops.parallel_dynamic_stitch", "ops.array_ops.concat", "<builtin>.len", "ops.array_ops.identity", "<builtin>.ValueError", "framework.ops.convert_n_to_tensor_or_indexed_slices", "ops.math_ops.range", "ops.array_ops.size", "framework.constant_op.constant", "framework.tensor_shape.Dimension", "framework.ops.device_v2", "six.moves.xrange"], "framework.ops.convert_n_to_tensor_or_indexed_slices": [], "ops.embedding_ops.embedding_lookup_ragged": ["<builtin>.isinstance", "framework.ops.name_scope", "<builtin>.ValueError", "<builtin>.str", "ragged.ragged_functional_ops.map_flat_values"], "ops.embedding_ops.embedding_lookup_sparse": ["ops.math_ops.cast", "ops.embedding_ops.embedding_lookup", "ops.math_ops.sqrt", "ops.math_ops.sparse_segment_sum", "ops.array_ops.reshape", "ops.array_ops.gather", "ops.array_ops.shape", "framework.ops.name_scope", "ops.math_ops.pow", "<builtin>.list", "<builtin>.isinstance", "ops.array_ops.concat", "ops.array_ops.expand_dims", "ops.math_ops.sparse_segment_mean", "<builtin>.TypeError", "ops.math_ops.sparse_segment_sqrt_n", "<builtin>.ValueError", "ops.math_ops.segment_sum", "ops.math_ops.div_no_nan", "ops.array_ops.unique", "<builtin>.range", "ops.array_ops.rank", "ops.array_ops.ones"], "ops.math_ops.segment_sum": [], "ops.math_ops.sparse_segment_sum": ["ops.gen_math_ops.sparse_segment_sum", "ops.gen_math_ops.sparse_segment_sum_with_num_segments"], "ops.math_ops.sparse_segment_mean": ["ops.gen_math_ops.sparse_segment_mean_with_num_segments", "ops.gen_math_ops.sparse_segment_mean"], "ops.math_ops.sparse_segment_sqrt_n": ["ops.gen_math_ops.sparse_segment_sqrt_n_with_num_segments", "ops.gen_math_ops.sparse_segment_sqrt_n"], "ops.embedding_ops.safe_embedding_lookup_sparse_v2": ["ops.embedding_ops.safe_embedding_lookup_sparse"], "ops.embedding_ops._prune_invalid_ids": ["ops.sparse_ops.sparse_retain", "ops.array_ops.ones_like", "ops.math_ops.logical_and", "ops.math_ops.greater_equal"], "ops.embedding_ops._prune_invalid_weights": ["ops.math_ops.greater", "ops.sparse_ops.sparse_retain"], "ops.functional_ops": ["util.deprecation.deprecated_arg_values", "util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ops.functional_ops.foldl.create_ta": ["ops.tensor_array_ops.TensorArray"], "ops.functional_ops.foldl.<lambda1>": [], "ops.functional_ops.foldl.<lambda2>": [], "ops.functional_ops.foldl.compute": ["util.nest.map_structure"], "ops.functional_ops.foldl.compute.<lambda1>": [], "ops.functional_ops.foldl.<lambda3>": [], "ops.functional_ops.foldl_v2": ["ops.functional_ops.foldl"], "ops.functional_ops.foldr.create_ta": ["ops.tensor_array_ops.TensorArray"], "ops.functional_ops.foldr.<lambda1>": [], "ops.functional_ops.foldr.<lambda2>": [], "ops.functional_ops.foldr.compute": ["util.nest.map_structure"], "ops.functional_ops.foldr.compute.<lambda1>": [], "ops.functional_ops.foldr.<lambda3>": [], "ops.functional_ops.foldr_v2": ["ops.functional_ops.foldr"], "ops.functional_ops.scan.<lambda1>": ["util.nest.flatten"], "ops.functional_ops.scan.input_pack": ["util.nest.pack_sequence_as"], "ops.functional_ops.scan.<lambda2>": ["util.nest.flatten"], "ops.functional_ops.scan.output_pack": ["util.nest.pack_sequence_as"], "ops.functional_ops.scan.<lambda3>": [], "ops.functional_ops.scan.compute": ["ops.functional_ops.scan.<lambda1>", "ops.functional_ops.scan.<lambda2>", "<builtin>.zip", "ops.functional_ops.scan.input_pack", "util.nest.assert_same_structure"], "ops.functional_ops.scan.<lambda4>": [], "ops.functional_ops.scan.<lambda5>": [], "ops.functional_ops.scan_v2": ["ops.functional_ops.scan"], "ops.functional_ops.If": ["ops.gen_functional_ops._if", "<builtin>.isinstance", "util.nest.flatten", "util.nest.assert_same_structure", "util.nest.pack_sequence_as"], "ops.functional_ops.Gradient": ["ops.gen_functional_ops.symbolic_gradient"], "ops.gen_functional_ops.symbolic_gradient": [], "ops.functional_ops._GetInputDtypes": ["<builtin>.isinstance", "<builtin>.len"], "ops.functional_ops._LoopBodyCaptureWrapper": ["framework.function.Defun", "ops.functional_ops._GetInputDtypes"], "ops.functional_ops._LoopBodyCaptureWrapper.Wrapper": ["ops.functional_ops._ForUsingWhile.WhileBody", "<builtin>.isinstance", "<builtin>.tuple", "framework.function.get_extra_args", "<builtin>.type"], "ops.functional_ops._ForUsingWhile.WhileBody": ["<builtin>.isinstance", "<builtin>.tuple"], "ops.functional_ops.While.CondWrapper": ["<builtin>.len", "ops.functional_ops._ForUsingWhile.WhileCond"], "ops.functional_ops._ForUsingWhile.WhileCond": [], "ops.gen_functional_ops._while": [], "ops.functional_ops._ForUsingWhile": ["ops.math_ops.cast", "<builtin>.list", "framework.function.Defun", "<builtin>.len", "ops.functional_ops.While", "ops.math_ops.abs"], "ops.functional_ops.For": ["ops.functional_ops._ForUsingWhile", "<builtin>.len", "framework.attr_value_pb2.AttrValue", "ops.gen_functional_ops._for", "ops.functional_ops._LoopBodyCaptureWrapper"], "ops.gen_functional_ops._for": [], "ops.gen_functional_ops.stateful_partitioned_call": [], "ops.gen_functional_ops.partitioned_call": [], "ops.functional_ops._set_read_only_resource_inputs_attr": ["framework.auto_control_deps_utils.get_read_only_resource_input_indices_graph", "framework.ops.set_int_list_attr"], "ops.gradients": [], "ops.gradients_impl": ["util.tf_export.tf_export"], "ops.gradients_impl.gradients_v2": ["framework.ops.get_default_graph", "ops.gradients_util._GradientsHelper"], "ops.gradients_impl._hessian_vector_product": ["ops.array_ops.stop_gradient", "<builtin>.ValueError", "<builtin>.zip", "ops.math_ops.multiply", "ops.gradients_impl.gradients", "<builtin>.len"], "ops.gradients_impl.hessians": ["ops.array_ops.shape", "<builtin>.zip", "ops.gradients_util._AsList", "ops.array_ops.size", "ops.control_flow_ops.while_loop", "ops.gradients_impl.gradients", "ops.array_ops.concat", "ops.tensor_array_ops.TensorArray", "ops.array_ops.constant", "ops.array_ops.reshape"], "ops.gradients_util._AsList": ["<builtin>.isinstance"], "ops.gradients_impl.hessians.<lambda1>": [], "ops.gradients_impl.hessians.<lambda2>": ["ops.gradients_impl.gradients"], "ops.gradients_impl.HessiansV2": ["ops.gradients_impl.hessians"], "ops.gradients_util": ["contextlib.contextmanager"], "ops.gradients_util._MarkReachedOps": ["collections.deque", "ops.gradients_util._IsBackpropagatable", "ops.gradients_util._Consumers"], "ops.gradients_util._IsBackpropagatable": ["framework.dtypes.as_dtype", "eager.backprop_util.IsTrainable"], "ops.gradients_util._Consumers": ["ops.gradients_util._Consumers", "ops.gradients_util._Captures"], "ops.gradients_util._PendingCount": ["ops.control_flow_state.MaybeCreateControlFlowState", "ops.gradients_util._MarkReachedOps", "ops.gradients_util._NonEagerInputs", "collections.deque", "<builtin>.set", "collections.defaultdict"], "ops.gradients_util._NonEagerInputs": ["ops.gradients_util._Inputs", "<builtin>.isinstance"], "ops.gradients_util._DefaultGradYs": ["<builtin>.TypeError", "<builtin>.enumerate", "ops.gradients_util._maybe_colocate_with", "ops.array_ops.identity", "six.moves.zip", "ops.array_ops.ones", "framework.ops.convert_n_to_tensor_or_indexed_slices", "<builtin>.len", "ops.array_ops.shape", "framework.dtypes.as_dtype", "<builtin>.ValueError", "<builtin>.isinstance", "framework.ops.IndexedSlices"], "ops.gradients_util._maybe_colocate_with": ["framework.ops._colocate_with_for_gradient"], "ops.gradients_util._VerifyGeneratedGradients": ["<builtin>.len", "<builtin>.ValueError"], "ops.gradients_util._StopOps": ["<builtin>.set", "ops.gradients_util._NonEagerInputs"], "ops.gradients_util._IsPartitionedCall": [], "ops.gradients_util._SymGrad": ["ops.gradients_util._IsPartitionedCall", "ops.default_gradient.get_zeros_dtype", "ops.functional_ops.symbolic_gradient", "framework.attr_value_pb2.NameAttrList"], "ops.functional_ops.symbolic_gradient": [], "ops.gradients_util._MaybeCompile": ["ops.gradients_util._GradientsHelper.<lambda1>", "framework.ops.get_default_graph", "framework.attr_value_pb2.AttrValue", "ops.gradients_util._GradientsHelper.<lambda2>"], "ops.gradients_util._GradientsHelper.<lambda1>": [], "ops.gradients_util._GradientsHelper.<lambda2>": ["ops.gradients_util._SymGrad"], "ops.gradients_util._RaiseNoGradWrtInitialLoopValError": ["collections.deque", "<builtin>.ValueError", "<builtin>.set", "ops.gradients_util._NonEagerInputs"], "ops.gradients_util._IsFunction": ["<builtin>.isinstance"], "ops.gradients_util._Captures": ["<builtin>.isinstance"], "ops.gradients_util._MaybeCaptured": ["ops.gradients_util._Captures", "ops.gradients_util._MaybeCaptured", "<builtin>.isinstance", "ops.gradients_util._IsFunction"], "ops.gradients_util._Inputs": ["ops.gradients_util._MaybeCaptured", "ops.gradients_util._IsFunction"], "framework.ops.internal_convert_n_to_tensor_or_indexed_slices": [], "ops.gradients_util._SetGrad": ["six.moves.xrange", "ops.control_flow_util.IsLoopSwitch", "<builtin>.len", "<builtin>.isinstance"], "ops.gradients_util._AggregatedGrads": ["platform.tf_logging.vlog", "<builtin>.TypeError", "<builtin>.enumerate", "eager.backprop.aggregate_indexed_slices_gradients", "<builtin>.all", "<builtin>.isinstance", "framework.ops.name_scope", "ops.gradients_util._MultiDeviceAddN", "ops.gradients_util._GetGrads", "<builtin>.len", "ops.gradients_util._AccumulatorShape", "ops.math_ops.add_n", "<builtin>.ValueError", "ops.control_flow_util.IsLoopSwitch"], "ops.gradients_util._LogOpGradients": ["platform.tf_logging.vlog", "ops.gradients_util._LogOpGradients._FilterGrad"], "ops.gradients_util._UpdatePendingAndEnqueueReady": ["ops.gradients_util._NonEagerInputs", "ops.control_flow_util.IsLoopExit", "ops.gradients_util._HasAnyNotNoneGrads", "ops.control_flow_util.IsLoopSwitch", "eager.backprop_util.IsTrainable", "ops.gradients_util._SetGrad"], "ops.gradients_util._GetGrad": ["ops.gradients_util._ZerosLike", "<builtin>.ValueError", "<builtin>.isinstance"], "ops.gradients_util._HasAnyNotNoneGrads": ["ops.gradients_util._GetGrads", "<builtin>.isinstance", "<builtin>.any"], "ops.gradients_util._GetGrads": ["six.moves.xrange", "<builtin>.len"], "ops.gradients_util._ZerosLike": ["ops.default_gradient.get_zeros_dtype", "ops.array_ops.zeros_like", "ops.array_ops.zeros", "ops.resource_variable_ops.variable_shape"], "ops.gradients_util._AccumulatorShape": ["framework.tensor_shape.unknown_shape", "<builtin>.isinstance"], "ops.gradients_util._LogOpGradients._FilterGrad": ["<builtin>.bool", "<builtin>.isinstance"], "ops.gradients_util._MultiDeviceAddN": ["<builtin>.sorted", "ops.math_ops.add_n", "framework.ops._colocate_with_for_gradient", "collections.defaultdict"], "ops.gradients_util._MultiDeviceAddN.<lambda1>": [], "ops.gradients_util._MultiDeviceAddN.DeviceKey": [], "python.pywrap_tfe.TFE_Py_TapeSetPossibleGradientTypes": [], "ops.gradient_checker": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "ops.gradient_checker._product": ["<builtin>.isinstance"], "ops.gradient_checker._extra_feeds": [], "ops.gradient_checker._compute_theoretical_jacobian": ["numpy.any", "<builtin>.ValueError", "framework.ops.get_default_session", "ops.gradient_checker._extra_feeds", "<builtin>.str", "numpy.zeros", "<builtin>.isinstance", "platform.tf_logging.vlog", "<builtin>.tuple", "<builtin>.range", "ops.gradient_checker._product", "<builtin>.zip"], "ops.gradient_checker._compute_numeric_jacobian": ["ops.math_ops.cast", "numpy.zeros", "numpy.asarray", "platform.tf_logging.vlog", "ops.gradient_checker._extra_feeds", "<builtin>.range", "ops.gradient_checker._product"], "ops.gradient_checker._compute_dx_and_dy": ["<builtin>.len", "ops.array_ops.identity", "framework.constant_op.constant", "ops.gradients.gradients"], "ops.gradient_checker._compute_gradient": ["numpy.random.random_sample", "ops.gradient_checker._compute_theoretical_jacobian", "ops.gradient_checker._compute_numeric_jacobian", "<builtin>.list", "framework.dtypes.as_dtype"], "numpy.random.random_sample": [], "ops.gradient_checker._compute_gradient_list": ["ops.gradient_checker._compute_dx_and_dy", "ops.gradient_checker._compute_gradient", "<builtin>.len", "<builtin>.isinstance", "<builtin>.zip"], "ops.gradient_checker.compute_gradient": ["<builtin>.isinstance", "ops.gradient_checker._compute_dx_and_dy", "ops.gradient_checker._compute_gradient", "ops.gradient_checker._compute_gradient_list"], "ops.gradient_checker._compute_error": ["<builtin>.isinstance", "numpy.fabs", "numpy.maximum"], "numpy.fabs": [], "numpy.maximum": [], "ops.gradient_checker.compute_gradient_error": ["ops.gradient_checker.compute_gradient", "ops.gradient_checker._compute_error"], "ops.gradient_checker_v2": ["util.tf_export.tf_export"], "ops.gradient_checker_v2._product": ["<builtin>.isinstance"], "ops.gradient_checker_v2._eval_indexed_slices": ["eager.context.executing_eagerly", "framework.ops.IndexedSlicesValue", "<builtin>.isinstance"], "ops.gradient_checker_v2._to_numpy": ["<builtin>.zip", "framework.ops.get_default_session", "numpy.zeros", "<builtin>.isinstance", "<builtin>.len"], "ops.gradient_checker_v2._prepare": ["eager.context.executing_eagerly", "ops.gradient_checker_v2._compute_theoretical_jacobian.<lambda1>", "ops.gradient_checker_v2._prepare.decorated_eager", "<builtin>.zip", "ops.array_ops.placeholder", "framework.ops.get_default_session", "ops.gradient_checker_v2._prepare.decorated_graph"], "ops.gradient_checker_v2._prepare.decorated_eager": ["ops.gradient_checker_v2._prepare.decorated_eager", "<builtin>.map", "ops.gradient_checker_v2._prepare.decorated_graph", "ops.gradient_checker_v2._compute_theoretical_jacobian.<lambda1>"], "ops.gradient_checker_v2._compute_theoretical_jacobian.<lambda1>": [], "ops.gradient_checker_v2._prepare.decorated_graph": ["ops.gradient_checker_v2._to_numpy", "<builtin>.dict", "<builtin>.zip"], "ops.gradient_checker_v2._compute_theoretical_jacobian": ["numpy.any", "ops.gradient_checker_v2._eval_indexed_slices", "platform.tf_logging.vlog", "ops.gradient_checker_v2._prepare.decorated_eager", "ops.gradient_checker_v2._prepare.decorated_graph", "<builtin>.zip", "<builtin>.ValueError", "numpy.zeros", "eager.backprop.gradients_function", "<builtin>.isinstance", "ops.gradient_checker_v2._prepare", "ops.gradient_checker_v2._to_numpy", "<builtin>.tuple", "ops.gradient_checker_v2._product", "<builtin>.range"], "ops.gradient_checker_v2._compute_numeric_jacobian": ["numpy.asarray", "platform.tf_logging.vlog", "ops.gradient_checker_v2._prepare.decorated_eager", "numpy.zeros", "ops.gradient_checker_v2._prepare", "ops.gradient_checker_v2._to_numpy", "ops.gradient_checker_v2._prepare.decorated_graph", "ops.gradient_checker_v2._product", "<builtin>.range"], "ops.gradient_checker_v2._compute_gradient": ["ops.gradient_checker_v2._compute_theoretical_jacobian", "ops.gradient_checker_v2._compute_numeric_jacobian", "ops.gradient_checker_v2._product"], "ops.gradient_checker_v2._compute_gradient_list": ["framework.dtypes.as_dtype", "framework.ops.convert_to_tensor", "ops.gradient_checker_v2._prepare.decorated_eager", "ops.gradient_checker_v2._compute_gradient", "<builtin>.zip", "<builtin>.tuple", "ops.gradient_checker_v2._prepare", "<builtin>.len", "ops.gradient_checker_v2._prepare.decorated_graph", "<builtin>.range"], "ops.gradient_checker_v2.compute_gradient": ["<builtin>.ValueError", "ops.gradient_checker_v2._compute_gradient_list", "<builtin>.type", "<builtin>.isinstance"], "ops.gradient_checker_v2.max_error": ["numpy.maximum", "<builtin>.zip", "numpy.fabs"], "ops.handle_data_util": [], "ops.handle_data_util.set_handle_data": ["<builtin>.isinstance", "client.pywrap_tf_session.SetHandleShapeAndType"], "ops.histogram_ops": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ops.histogram_ops.histogram_fixed_width_bins": ["ops.array_ops.reshape", "ops.math_ops.cast", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.math_ops.truediv", "ops.math_ops.floor", "ops.clip_ops.clip_by_value"], "ops.histogram_ops.histogram_fixed_width": ["ops.gen_math_ops._histogram_fixed_width", "framework.ops.name_scope"], "ops.gen_math_ops._histogram_fixed_width": [], "ops.image_grad": ["framework.ops.RegisterGradient"], "ops.image_grad._ResizeNearestNeighborGrad": ["ops.gen_image_ops.resize_nearest_neighbor_grad", "ops.array_ops.shape"], "ops.gen_image_ops.resize_nearest_neighbor_grad": [], "ops.image_grad._ResizeBilinearGrad": ["ops.gen_image_ops.resize_bilinear_grad"], "ops.gen_image_ops.resize_bilinear_grad": [], "ops.image_grad._ScaleAndTranslateGrad": ["ops.gen_image_ops.scale_and_translate_grad"], "ops.gen_image_ops.scale_and_translate_grad": [], "ops.image_grad._ResizeBicubicGrad": ["ops.gen_image_ops.resize_bicubic_grad"], "ops.gen_image_ops.resize_bicubic_grad": [], "ops.image_grad._CropAndResizeGrad": ["ops.gen_image_ops.crop_and_resize_grad_image", "ops.array_ops.shape", "ops.gen_image_ops.crop_and_resize_grad_boxes"], "ops.gen_image_ops.crop_and_resize_grad_image": [], "ops.gen_image_ops.crop_and_resize_grad_boxes": [], "ops.image_grad._CustomReciprocal": ["ops.math_ops.div_no_nan"], "ops.image_grad._RGBToHSVGrad": ["ops.math_ops.add", "ops.image_grad._CustomReciprocal", "ops.array_ops.stack", "ops.math_ops.square", "ops.math_ops.cast"], "ops.image_ops": ["<builtin>.frozenset", "framework.ops.RegisterGradient"], "ops.image_ops.flat_transforms_to_matrices": ["ops.array_ops.reshape", "framework.ops.convert_to_tensor", "ops.array_ops.concat", "<builtin>.ValueError", "ops.array_ops.shape", "framework.ops.name_scope", "framework.constant_op.constant"], "ops.image_ops.matrices_to_flat_transforms": ["ops.array_ops.reshape", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "framework.ops.name_scope", "framework.constant_op.constant"], "ops.image_ops._image_projective_transform_grad": ["<builtin>.len", "ops.linalg_ops.matrix_inverse", "framework.ops.convert_to_tensor", "ops.gen_image_ops.image_projective_transform_v2", "<builtin>.TypeError", "ops.image_ops.flat_transforms_to_matrices", "ops.image_ops.matrices_to_flat_transforms", "ops.array_ops.shape"], "ops.linalg_ops.matrix_inverse": [], "ops.gen_image_ops.image_projective_transform_v2": [], "ops.image_ops._image_projective_transform_v3_grad": ["<builtin>.len", "ops.linalg_ops.matrix_inverse", "framework.ops.convert_to_tensor", "<builtin>.TypeError", "ops.image_ops.flat_transforms_to_matrices", "ops.image_ops.matrices_to_flat_transforms", "ops.array_ops.shape", "ops.gen_image_ops.image_projective_transform_v3"], "ops.gen_image_ops.image_projective_transform_v3": [], "ops.image_ops_impl": ["util.deprecation.deprecated", "util.dispatch.add_dispatch_support", "util.deprecation.deprecated_args", "framework.ops.NotDifferentiable", "eager.def_function.function", "util.tf_export.tf_export"], "ops.image_ops_impl._assert": ["ops.image_ops_impl._is_tensor", "ops.control_flow_ops.Assert"], "ops.image_ops_impl._is_tensor": ["<builtin>.isinstance"], "ops.image_ops_impl._ImageDimensions": ["ops.array_ops.shape", "<builtin>.zip", "ops.array_ops.unstack"], "ops.image_ops_impl._Check3DImage": ["ops.array_ops.shape", "<builtin>.ValueError", "<builtin>.any", "ops.check_ops.assert_positive"], "ops.image_ops_impl._Assert3DImage": ["ops.control_flow_ops.with_dependencies", "ops.image_ops_impl._Check3DImage"], "ops.image_ops_impl._AssertAtLeast3DImage": ["ops.control_flow_ops.with_dependencies", "ops.image_ops_impl._CheckAtLeast3DImage"], "ops.image_ops_impl._CheckAtLeast3DImage": ["ops.array_ops.rank", "ops.array_ops.shape", "ops.check_ops.assert_greater_equal", "<builtin>.any", "<builtin>.ValueError", "ops.check_ops.assert_positive"], "ops.image_ops_impl._AssertGrayscaleImage": ["ops.control_flow_ops.with_dependencies", "ops.image_ops_impl._CheckGrayscaleImage"], "ops.image_ops_impl._CheckGrayscaleImage": ["ops.array_ops.rank", "ops.array_ops.shape", "ops.check_ops.assert_greater_equal", "ops.check_ops.assert_equal", "<builtin>.ValueError"], "ops.image_ops_impl.fix_image_flip_shape": ["framework.tensor_shape.unknown_shape"], "ops.image_ops_impl.random_flip_up_down": ["ops.image_ops_impl._random_flip", "functools.partial"], "ops.image_ops_impl._random_flip": ["ops.array_ops.rank", "framework.ops.convert_to_tensor", "ops.control_flow_ops.cond", "ops.math_ops.equal", "ops.image_ops_impl._random_flip.f_rank4", "ops.image_ops_impl._random_flip.f_rank3", "framework.ops.name_scope", "ops.image_ops_impl._AssertAtLeast3DImage", "<builtin>.ValueError"], "ops.image_ops_impl.random_flip_left_right": ["ops.image_ops_impl._random_flip", "functools.partial"], "ops.image_ops_impl.stateless_random_flip_left_right": ["ops.image_ops_impl._random_flip", "functools.partial"], "ops.image_ops_impl.stateless_random_flip_up_down": ["ops.image_ops_impl._random_flip", "functools.partial"], "ops.image_ops_impl._random_flip.f_rank3": ["ops.control_flow_ops.cond", "ops.image_ops_impl.fix_image_flip_shape", "ops.math_ops.less"], "ops.image_ops_impl._random_flip.f_rank3.<lambda1>": ["ops.array_ops.reverse"], "ops.image_ops_impl._random_flip.f_rank3.<lambda2>": [], "ops.image_ops_impl._random_flip.f_rank4": ["ops.math_ops.cast", "ops.array_ops.reshape", "ops.array_ops.shape", "ops.array_ops.reverse", "ops.math_ops.round"], "ops.image_ops_impl.flip_left_right": ["ops.image_ops_impl._flip"], "ops.image_ops_impl._flip": ["ops.array_ops.rank", "ops.image_ops_impl._flip.f_rank3", "framework.ops.convert_to_tensor", "ops.control_flow_ops.cond", "ops.math_ops.equal", "ops.image_ops_impl._flip.f_rank4", "framework.ops.name_scope", "ops.image_ops_impl._AssertAtLeast3DImage", "<builtin>.ValueError"], "ops.image_ops_impl.flip_up_down": ["ops.image_ops_impl._flip"], "ops.image_ops_impl._flip.f_rank3": ["ops.image_ops_impl.fix_image_flip_shape", "ops.array_ops.reverse"], "ops.image_ops_impl._flip.f_rank4": ["ops.array_ops.reverse"], "ops.image_ops_impl.rot90": ["ops.array_ops.rank", "ops.image_ops_impl._rot90_4D", "ops.image_ops_impl._rot90_3D", "framework.ops.convert_to_tensor", "ops.control_flow_ops.cond", "ops.math_ops.mod", "ops.math_ops.equal", "framework.ops.name_scope", "ops.image_ops_impl._AssertAtLeast3DImage", "<builtin>.ValueError"], "ops.image_ops_impl.rot90.f_rank3": ["ops.image_ops_impl._rot90_3D"], "ops.image_ops_impl._rot90_3D": ["ops.math_ops.equal", "ops.control_flow_ops.case"], "ops.image_ops_impl.rot90.f_rank4": ["ops.image_ops_impl._rot90_4D"], "ops.image_ops_impl._rot90_4D": ["ops.math_ops.equal", "ops.control_flow_ops.case"], "ops.image_ops_impl._rot90_3D._rot90": ["ops.array_ops.reverse_v2", "ops.array_ops.transpose"], "ops.image_ops_impl._rot90_3D._rot180": ["ops.array_ops.reverse_v2"], "ops.image_ops_impl._rot90_3D._rot270": ["ops.array_ops.reverse_v2", "ops.array_ops.transpose"], "ops.image_ops_impl._rot90_3D.<lambda1>": [], "ops.image_ops_impl._rot90_4D._rot90": ["ops.array_ops.reverse_v2", "ops.array_ops.transpose"], "ops.image_ops_impl._rot90_4D._rot180": ["ops.array_ops.reverse_v2"], "ops.image_ops_impl._rot90_4D._rot270": ["ops.array_ops.reverse_v2", "ops.array_ops.transpose"], "ops.image_ops_impl._rot90_4D.<lambda1>": [], "ops.image_ops_impl.transpose": ["ops.array_ops.rank", "framework.ops.convert_to_tensor", "ops.control_flow_ops.cond", "<builtin>.ValueError", "ops.math_ops.equal", "framework.ops.name_scope", "ops.image_ops_impl._AssertAtLeast3DImage", "ops.array_ops.transpose"], "ops.image_ops_impl.transpose.f_rank3": ["ops.array_ops.transpose"], "ops.image_ops_impl.transpose.f_rank4": ["ops.array_ops.transpose"], "ops.image_ops_impl.central_crop": ["ops.array_ops.slice", "<builtin>.float", "ops.math_ops.logical_or", "ops.image_ops_impl.central_crop._get_dim", "ops.math_ops.cast", "framework.ops.convert_to_tensor", "ops.array_ops.stack", "ops.control_flow_ops.with_dependencies", "<builtin>.int", "framework.tensor_util.constant_value", "ops.image_ops_impl._assert", "framework.ops.name_scope", "ops.image_ops_impl._AssertAtLeast3DImage", "<builtin>.ValueError"], "ops.image_ops_impl.central_crop._get_dim": ["ops.array_ops.shape"], "ops.image_ops_impl.pad_to_bounding_box": ["ops.array_ops.expand_dims", "ops.array_ops.squeeze", "ops.array_ops.pad", "ops.image_ops_impl._ImageDimensions", "framework.ops.convert_to_tensor", "ops.array_ops.stack", "ops.array_ops.reshape", "ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "ops.image_ops_impl._is_tensor", "ops.image_ops_impl._assert", "framework.ops.name_scope", "ops.image_ops_impl._CheckAtLeast3DImage"], "ops.image_ops_impl.crop_to_bounding_box": ["ops.array_ops.expand_dims", "ops.array_ops.slice", "ops.array_ops.squeeze", "ops.image_ops_impl._ImageDimensions", "framework.ops.convert_to_tensor", "ops.array_ops.stack", "ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "ops.array_ops.shape", "ops.image_ops_impl._is_tensor", "ops.image_ops_impl._assert", "framework.ops.name_scope", "ops.image_ops_impl._CheckAtLeast3DImage"], "ops.image_ops_impl.resize_image_with_crop_or_pad": ["ops.array_ops.expand_dims", "ops.array_ops.squeeze", "ops.image_ops_impl.crop_to_bounding_box", "ops.image_ops_impl._ImageDimensions", "framework.ops.convert_to_tensor", "ops.image_ops_impl.resize_image_with_crop_or_pad.max_", "ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "ops.image_ops_impl.resize_image_with_crop_or_pad.min_", "ops.image_ops_impl.resize_image_with_crop_or_pad.equal_", "ops.image_ops_impl._is_tensor", "ops.image_ops_impl.pad_to_bounding_box", "ops.image_ops_impl._assert", "framework.ops.name_scope", "ops.image_ops_impl._CheckAtLeast3DImage"], "ops.image_ops_impl.resize_image_with_crop_or_pad.max_": ["ops.image_ops_impl._is_tensor", "ops.math_ops.maximum", "<builtin>.max"], "ops.image_ops_impl.resize_image_with_crop_or_pad.min_": ["ops.image_ops_impl._is_tensor", "ops.math_ops.minimum", "<builtin>.min"], "ops.image_ops_impl.resize_image_with_crop_or_pad.equal_": ["ops.image_ops_impl._is_tensor", "ops.math_ops.equal"], "ops.image_ops_impl._resize_images_common": ["ops.array_ops.expand_dims", "framework.tensor_util.constant_value_as_shape", "ops.math_ops.minimum", "framework.tensor_shape.dimension_at_index", "ops.array_ops.squeeze", "ops.math_ops.round", "ops.image_ops_impl._ImageDimensions", "ops.math_ops.cast", "framework.ops.convert_to_tensor", "<builtin>.all", "ops.image_ops_impl.resize_images.resize_fn", "ops.image_ops_impl.resize_images_v2.resize_fn", "framework.ops.name_scope", "<builtin>.ValueError"], "ops.image_ops_impl.resize_images.resize_fn": ["ops.gen_image_ops.resize_bilinear", "ops.gen_image_ops.resize_bicubic", "ops.gen_image_ops.resize_area", "<builtin>.ValueError", "ops.gen_image_ops.resize_nearest_neighbor"], "ops.image_ops_impl.resize_images_v2.resize_fn": ["ops.image_ops_impl.resize_images_v2.resize_fn.resize_with_scale_and_translate", "ops.gen_image_ops.resize_bilinear", "ops.gen_image_ops.resize_bicubic", "ops.gen_image_ops.resize_area", "<builtin>.ValueError", "ops.gen_image_ops.resize_nearest_neighbor"], "ops.image_ops_impl.resize_images": ["ops.image_ops_impl._resize_images_common"], "ops.gen_image_ops.resize_bilinear": [], "ops.gen_image_ops.resize_nearest_neighbor": [], "ops.gen_image_ops.resize_bicubic": [], "ops.gen_image_ops.resize_area": [], "ops.image_ops_impl.resize_images_v2.resize_fn.resize_with_scale_and_translate": ["ops.math_ops.cast", "ops.array_ops.shape", "ops.array_ops.zeros", "ops.gen_image_ops.scale_and_translate"], "ops.gen_image_ops.scale_and_translate": [], "ops.image_ops_impl._resize_image_with_pad_common": ["ops.array_ops.expand_dims", "ops.array_ops.squeeze", "ops.image_ops_impl._ImageDimensions", "ops.math_ops.cast", "ops.image_ops_impl.resize_image_with_pad_v1._resize_fn", "framework.ops.convert_to_tensor", "ops.image_ops_impl.resize_image_with_pad_v2._resize_fn", "ops.control_flow_ops.with_dependencies", "<builtin>.ValueError", "ops.math_ops.floor", "ops.image_ops_impl.pad_to_bounding_box", "ops.image_ops_impl._resize_image_with_pad_common.max_", "ops.image_ops_impl._assert", "framework.ops.name_scope", "ops.image_ops_impl._CheckAtLeast3DImage"], "ops.image_ops_impl._resize_image_with_pad_common.max_": ["ops.image_ops_impl._is_tensor", "ops.math_ops.maximum", "<builtin>.max"], "ops.image_ops_impl.resize_image_with_pad_v1._resize_fn": ["ops.image_ops_impl.resize_images"], "ops.image_ops_impl.resize_image_with_pad_v2._resize_fn": ["ops.image_ops_impl.resize_images_v2"], "ops.image_ops_impl.resize_image_with_pad_v1": ["ops.image_ops_impl._resize_image_with_pad_common"], "ops.image_ops_impl.resize_image_with_pad_v2": ["ops.image_ops_impl._resize_image_with_pad_common"], "ops.image_ops_impl.per_image_standardization": ["ops.math_ops.rsqrt", "ops.math_ops.cast", "ops.math_ops.reduce_std", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "ops.math_ops.divide", "ops.math_ops.reduce_prod", "ops.math_ops.maximum", "ops.math_ops.reduce_mean", "framework.ops.name_scope", "ops.image_ops_impl._AssertAtLeast3DImage"], "ops.image_ops_impl.random_brightness": ["ops.random_ops.random_uniform", "ops.image_ops_impl.adjust_brightness", "<builtin>.ValueError"], "ops.image_ops_impl.adjust_brightness": ["ops.image_ops_impl.convert_image_dtype", "ops.math_ops.cast", "framework.ops.convert_to_tensor", "ops.math_ops.add", "framework.ops.name_scope"], "ops.image_ops_impl.stateless_random_brightness": ["ops.image_ops_impl.adjust_brightness", "<builtin>.ValueError", "ops.stateless_random_ops.stateless_random_uniform"], "ops.image_ops_impl.random_contrast": ["ops.image_ops_impl.adjust_contrast", "ops.random_ops.random_uniform", "<builtin>.ValueError"], "ops.image_ops_impl.adjust_contrast": ["ops.gen_image_ops.adjust_contrastv2", "ops.image_ops_impl.convert_image_dtype", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.image_ops_impl.stateless_random_contrast": ["ops.image_ops_impl.adjust_contrast", "<builtin>.ValueError", "ops.stateless_random_ops.stateless_random_uniform"], "ops.image_ops_impl.convert_image_dtype": ["ops.array_ops.identity", "framework.dtypes.as_dtype", "ops.math_ops.cast", "framework.ops.convert_to_tensor", "ops.math_ops.multiply", "ops.math_ops.floordiv", "framework.ops.name_scope", "ops.math_ops.saturate_cast", "<builtin>.AttributeError"], "ops.image_ops_impl.adjust_gamma": ["ops.image_ops_impl.convert_image_dtype", "framework.ops.convert_to_tensor", "ops.control_flow_ops.with_dependencies", "ops.image_ops_impl._assert", "framework.ops.name_scope"], "ops.math_ops.saturate_cast": ["ops.math_ops.cast", "ops.gen_math_ops.maximum", "ops.gen_math_ops.minimum", "framework.ops.name_scope", "framework.dtypes.as_dtype", "framework.ops.convert_to_tensor"], "ops.image_ops_impl.rgb_to_grayscale": ["ops.array_ops.expand_dims", "ops.image_ops_impl.convert_image_dtype", "framework.ops.convert_to_tensor", "ops.math_ops.tensordot", "framework.ops.name_scope"], "ops.image_ops_impl.grayscale_to_rgb": ["ops.array_ops.expand_dims", "ops.array_ops.tile", "ops.array_ops.rank", "framework.ops.convert_to_tensor", "ops.image_ops_impl._AssertGrayscaleImage", "ops.array_ops.concat", "ops.array_ops.ones", "framework.ops.name_scope"], "ops.image_ops_impl.random_hue": ["ops.image_ops_impl.adjust_hue", "ops.random_ops.random_uniform", "<builtin>.ValueError"], "ops.image_ops_impl.adjust_hue": ["ops.gen_image_ops.adjust_hue", "ops.image_ops_impl.convert_image_dtype", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.image_ops_impl.stateless_random_hue": ["ops.image_ops_impl.adjust_hue", "<builtin>.ValueError", "ops.stateless_random_ops.stateless_random_uniform"], "ops.image_ops_impl.random_jpeg_quality": ["ops.random_ops.random_uniform", "<builtin>.ValueError", "ops.image_ops_impl.adjust_jpeg_quality"], "ops.image_ops_impl.adjust_jpeg_quality": ["ops.image_ops_impl.convert_image_dtype", "framework.ops.convert_to_tensor", "ops.gen_image_ops.decode_jpeg", "ops.image_ops_impl._is_tensor", "framework.ops.name_scope", "ops.gen_image_ops.encode_jpeg_variable_quality"], "ops.image_ops_impl.stateless_random_jpeg_quality": ["ops.image_ops_impl.adjust_jpeg_quality", "<builtin>.ValueError", "ops.stateless_random_ops.stateless_random_uniform"], "ops.gen_image_ops.encode_jpeg_variable_quality": [], "ops.gen_image_ops.decode_jpeg": [], "ops.image_ops_impl.random_saturation": ["ops.image_ops_impl.adjust_saturation", "ops.random_ops.random_uniform", "<builtin>.ValueError"], "ops.image_ops_impl.adjust_saturation": ["ops.image_ops_impl.convert_image_dtype", "framework.ops.name_scope", "ops.gen_image_ops.adjust_saturation", "framework.ops.convert_to_tensor"], "ops.image_ops_impl.stateless_random_saturation": ["ops.image_ops_impl.adjust_saturation", "<builtin>.ValueError", "ops.stateless_random_ops.stateless_random_uniform"], "ops.image_ops_impl.is_jpeg": ["ops.math_ops.equal", "framework.ops.name_scope", "ops.string_ops.substr"], "ops.image_ops_impl._is_png": ["ops.math_ops.equal", "framework.ops.name_scope", "ops.string_ops.substr"], "ops.image_ops_impl.encode_png": ["framework.ops.convert_to_tensor", "ops.gen_image_ops.encode_png"], "ops.gen_image_ops.encode_png": [], "ops.image_ops_impl.decode_image": ["ops.image_ops_impl.convert_image_dtype", "framework.ops.name_scope", "ops.gen_image_ops.decode_image"], "ops.gen_image_ops.decode_image": [], "ops.image_ops_impl.total_variation": ["framework.ops.name_scope", "ops.math_ops.abs", "<builtin>.ValueError", "ops.math_ops.reduce_sum"], "ops.image_ops_impl.sample_distorted_bounding_box_v2": ["ops.gen_image_ops.sample_distorted_bounding_box_v2", "framework.ops.name_scope", "framework.random_seed.get_seed"], "ops.gen_image_ops.sample_distorted_bounding_box_v2": [], "ops.image_ops_impl.stateless_sample_distorted_bounding_box": ["framework.ops.name_scope", "ops.gen_image_ops.stateless_sample_distorted_bounding_box"], "ops.gen_image_ops.stateless_sample_distorted_bounding_box": [], "ops.image_ops_impl.sample_distorted_bounding_box": ["ops.gen_image_ops.sample_distorted_bounding_box_v2", "framework.ops.name_scope"], "ops.image_ops_impl.non_max_suppression": ["ops.gen_image_ops.non_max_suppression_v3", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.gen_image_ops.non_max_suppression_v3": [], "ops.image_ops_impl.non_max_suppression_with_scores": ["ops.gen_image_ops.non_max_suppression_v5", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.gen_image_ops.non_max_suppression_v5": [], "ops.image_ops_impl.non_max_suppression_with_overlaps": ["ops.gen_image_ops.non_max_suppression_with_overlaps", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.gen_image_ops.non_max_suppression_with_overlaps": [], "ops.image_ops_impl.rgb_to_yiq": ["ops.math_ops.tensordot", "framework.ops.convert_to_tensor"], "ops.image_ops_impl.yiq_to_rgb": ["ops.math_ops.tensordot", "framework.ops.convert_to_tensor"], "ops.image_ops_impl.rgb_to_yuv": ["ops.math_ops.tensordot", "framework.ops.convert_to_tensor"], "ops.image_ops_impl.yuv_to_rgb": ["ops.math_ops.tensordot", "framework.ops.convert_to_tensor"], "ops.image_ops_impl._verify_compatible_image_shapes": ["<builtin>.reversed", "ops.math_ops.reduce_all", "<builtin>.zip", "ops.array_ops.shape_n", "ops.array_ops.size", "ops.math_ops.equal", "ops.control_flow_ops.Assert", "ops.math_ops.greater_equal", "<builtin>.ValueError"], "ops.image_ops_impl.psnr": ["ops.array_ops.identity", "ops.math_ops.squared_difference", "ops.math_ops.cast", "ops.image_ops_impl.convert_image_dtype", "ops.image_ops_impl._verify_compatible_image_shapes", "framework.ops.control_dependencies", "ops.math_ops.log", "numpy.log", "ops.math_ops.reduce_mean", "ops.math_ops.subtract", "framework.ops.name_scope", "numpy.float32"], "ops.image_ops_impl._ssim_helper": ["ops.math_ops.square", "ops.image_ops_impl._ssim_per_channel.reducer"], "ops.image_ops_impl._ssim_per_channel.reducer": ["ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.reshape", "ops.nn.depthwise_conv2d"], "ops.image_ops_impl._fspecial_gauss": ["ops.nn_ops.softmax", "ops.math_ops.range", "ops.math_ops.cast", "framework.ops.convert_to_tensor", "ops.array_ops.reshape", "ops.math_ops.square"], "ops.image_ops_impl._ssim_per_channel": ["ops.array_ops.identity", "ops.array_ops.tile", "ops.math_ops.reduce_all", "ops.image_ops_impl._ssim_helper", "ops.array_ops.shape_n", "ops.math_ops.reduce_mean", "framework.ops.control_dependencies", "ops.control_flow_ops.Assert", "framework.constant_op.constant", "ops.math_ops.greater_equal", "ops.image_ops_impl._fspecial_gauss"], "ops.image_ops_impl.ssim": ["ops.image_ops_impl._ssim_per_channel", "ops.array_ops.identity", "ops.math_ops.cast", "ops.image_ops_impl.convert_image_dtype", "framework.ops.convert_to_tensor", "ops.image_ops_impl._verify_compatible_image_shapes", "framework.ops.control_dependencies", "ops.math_ops.reduce_mean", "framework.ops.name_scope"], "ops.image_ops_impl.ssim_multiscale": ["<builtin>.len", "ops.image_ops_impl.convert_image_dtype", "ops.array_ops.shape_n", "ops.control_flow_ops.cond", "framework.ops.control_dependencies", "ops.math_ops.not_equal", "framework.ops.name_scope", "ops.math_ops.reduce_any", "ops.nn_ops.avg_pool", "ops.math_ops.cast", "<builtin>.zip", "ops.image_ops_impl._verify_compatible_image_shapes", "ops.array_ops.stack", "ops.math_ops.reduce_mean", "ops.nn_ops.relu", "ops.image_ops_impl._ssim_per_channel", "ops.array_ops.reshape", "ops.array_ops.concat", "<builtin>.range", "ops.array_ops.identity", "framework.ops.convert_to_tensor", "ops.math_ops.pow", "ops.math_ops.reduce_prod", "framework.constant_op.constant"], "ops.image_ops_impl.ssim_multiscale.do_pad": ["ops.array_ops.expand_dims", "ops.array_ops.pad"], "ops.image_ops_impl.ssim_multiscale.<lambda1>": ["ops.image_ops_impl.ssim_multiscale.do_pad"], "ops.image_ops_impl.ssim_multiscale.<lambda2>": [], "ops.nn_ops.avg_pool": ["ops.gen_nn_ops.avg_pool", "util.deprecation.deprecated_argument_lookup", "framework.ops.name_scope", "ops.nn_ops._get_sequence"], "ops.image_ops_impl.image_gradients": ["ops.array_ops.unstack", "ops.array_ops.stack", "ops.array_ops.reshape", "ops.array_ops.shape", "ops.array_ops.concat", "ops.array_ops.zeros", "<builtin>.ValueError"], "ops.image_ops_impl.sobel_edges": ["ops.array_ops.tile", "<builtin>.len", "numpy.asarray", "ops.array_ops.pad", "ops.array_ops.reshape", "ops.array_ops.shape", "numpy.expand_dims", "ops.array_ops.concat", "ops.nn.depthwise_conv2d", "framework.constant_op.constant", "numpy.transpose"], "ops.image_ops_impl.resize_bicubic": ["ops.gen_image_ops.resize_bicubic"], "ops.image_ops_impl.resize_bilinear": ["ops.gen_image_ops.resize_bilinear"], "ops.image_ops_impl.resize_nearest_neighbor": ["ops.gen_image_ops.resize_nearest_neighbor"], "ops.image_ops_impl.crop_and_resize_v2": ["ops.gen_image_ops.crop_and_resize"], "ops.gen_image_ops.crop_and_resize": [], "ops.image_ops_impl.crop_and_resize_v1": ["ops.gen_image_ops.crop_and_resize", "util.deprecation.deprecated_argument_lookup"], "ops.image_ops_impl.extract_glimpse": ["ops.gen_image_ops.extract_glimpse"], "ops.gen_image_ops.extract_glimpse": [], "ops.image_ops_impl.extract_glimpse_v2": ["ops.gen_image_ops.extract_glimpse_v2"], "ops.gen_image_ops.extract_glimpse_v2": [], "ops.image_ops_impl.combined_non_max_suppression": ["framework.ops.name_scope", "ops.gen_image_ops.combined_non_max_suppression", "framework.ops.convert_to_tensor"], "ops.gen_image_ops.combined_non_max_suppression": [], "ops.image_ops_impl._bbox_overlap": ["ops.math_ops.minimum", "ops.array_ops.split", "ops.math_ops.maximum", "framework.ops.name_scope", "ops.array_ops.transpose"], "ops.image_ops_impl._self_suppression": ["ops.math_ops.reduce_any", "ops.math_ops.cast", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.array_ops.shape", "ops.math_ops.reduce_max"], "ops.image_ops_impl._cross_suppression": ["ops.array_ops.expand_dims", "ops.array_ops.slice", "ops.image_ops_impl._bbox_overlap", "ops.math_ops.reduce_all", "ops.math_ops.cast", "ops.array_ops.shape"], "ops.image_ops_impl._suppression_loop_body": ["ops.array_ops.expand_dims", "ops.array_ops.slice", "ops.array_ops.tile", "ops.math_ops.reduce_any", "ops.image_ops_impl._bbox_overlap", "ops.math_ops.range", "ops.math_ops.cast", "ops.control_flow_ops.while_loop", "ops.array_ops.reshape", "ops.math_ops.reduce_sum", "ops.array_ops.shape", "ops.math_ops.equal", "framework.constant_op.constant", "ops.math_ops.logical_and", "framework.ops.name_scope"], "ops.image_ops_impl._suppression_loop_body.cross_suppression_func": ["ops.image_ops_impl._cross_suppression"], "ops.image_ops_impl._suppression_loop_body.<lambda1>": [], "ops.image_ops_impl._suppression_loop_body.<lambda2>": [], "ops.image_ops_impl.non_max_suppression_padded": ["ops.array_ops.expand_dims", "ops.image_ops_impl.non_max_suppression_padded_v2", "ops.array_ops.reshape", "ops.array_ops.shape", "ops.array_ops.concat", "framework.ops.name_scope", "<builtin>.ValueError"], "ops.image_ops_impl.non_max_suppression_padded_v2": ["ops.array_ops.expand_dims", "<builtin>.float", "ops.math_ops.reduce_all", "ops.control_flow_ops.cond", "ops.array_ops.where", "ops.array_ops.zeros", "framework.ops.name_scope", "ops.math_ops.reduce_any", "ops.math_ops.cast", "ops.control_flow_ops.while_loop", "ops.math_ops.ceil", "framework.tensor_shape.TensorShape", "ops.image_ops_impl.non_max_suppression_padded_v2._sort_scores_and_boxes", "ops.array_ops.reshape", "ops.array_ops.shape", "ops.math_ops.less_equal", "ops.array_ops.concat", "ops.nn_ops.top_k", "ops.array_ops.split", "ops.math_ops.maximum", "ops.math_ops.minimum", "ops.array_ops.gather", "ops.array_ops.pad", "ops.math_ops.range", "framework.constant_op.constant", "ops.array_ops.zeros_like"], "ops.image_ops_impl.non_max_suppression_padded_v2._sort_scores_and_boxes": ["ops.array_ops.expand_dims", "ops.array_ops.gather", "ops.math_ops.range", "ops.sort_ops.argsort", "ops.array_ops.reshape", "ops.array_ops.shape", "framework.ops.name_scope"], "ops.image_ops_impl.non_max_suppression_padded_v2.<lambda1>": [], "ops.image_ops_impl.non_max_suppression_padded_v2.<lambda2>": [], "ops.image_ops_impl.non_max_suppression_padded_v2.<lambda3>": [], "ops.image_ops_impl.non_max_suppression_padded_v2.<lambda4>": [], "ops.image_ops_impl.non_max_suppression_padded_v2._loop_cond": ["ops.math_ops.reduce_min", "ops.math_ops.logical_and"], "ops.image_ops_impl.non_max_suppression_padded_v2.suppression_loop_body": ["ops.image_ops_impl._suppression_loop_body"], "ops.image_ops_impl.non_max_suppression_padded_v1": ["framework.ops.name_scope", "ops.gen_image_ops.non_max_suppression_v4", "framework.ops.convert_to_tensor"], "ops.gen_image_ops.non_max_suppression_v4": [], "ops.image_ops_impl.draw_bounding_boxes_v2": ["ops.gen_image_ops.draw_bounding_boxes", "ops.gen_image_ops.draw_bounding_boxes_v2"], "ops.gen_image_ops.draw_bounding_boxes": [], "ops.gen_image_ops.draw_bounding_boxes_v2": [], "ops.image_ops_impl.draw_bounding_boxes": ["ops.image_ops_impl.draw_bounding_boxes_v2"], "ops.image_ops_impl.generate_bounding_box_proposals": ["ops.gen_image_ops.generate_bounding_box_proposals"], "ops.gen_image_ops.generate_bounding_box_proposals": [], "ops.initializers_ns": [], "ops.init_ops": ["util.tf_export.tf_export"], "ops.init_ops.Initializer.__call__": [], "ops.init_ops.Initializer.get_config": [], "ops.init_ops.Initializer.from_config": [], "ops.init_ops.Zeros": ["util.deprecation.deprecated_args"], "ops.init_ops.Zeros.__init__": ["framework.dtypes.as_dtype"], "ops.init_ops.Zeros.__call__": ["ops.array_ops.zeros"], "ops.init_ops.Zeros.get_config": [], "ops.init_ops.Ones": ["util.deprecation.deprecated_args"], "ops.init_ops.Ones.__init__": ["framework.dtypes.as_dtype"], "ops.init_ops.Ones.__call__": ["ops.array_ops.ones"], "ops.init_ops.Ones.get_config": [], "ops.init_ops.Constant": ["util.deprecation.deprecated_args"], "ops.init_ops.Constant.__init__": ["<builtin>.isinstance", "<builtin>.type", "numpy.isscalar", "framework.dtypes.as_dtype", "<builtin>.TypeError"], "ops.init_ops.Constant.__call__": ["framework.constant_op.constant_v1"], "ops.init_ops.Constant.get_config": [], "ops.init_ops.RandomUniform": ["util.deprecation.deprecated_args"], "ops.init_ops.RandomUniform.__init__": ["framework.dtypes.as_dtype"], "ops.init_ops.RandomUniform.__call__": ["ops.random_ops.random_uniform"], "ops.init_ops.RandomUniform.get_config": [], "ops.init_ops.RandomNormal": ["util.deprecation.deprecated_args"], "ops.init_ops.RandomNormal.__init__": ["framework.dtypes.as_dtype", "ops.init_ops._assert_float_dtype"], "ops.init_ops._assert_float_dtype": ["<builtin>.ValueError"], "ops.init_ops.RandomNormal.__call__": ["ops.random_ops.random_normal"], "ops.init_ops.RandomNormal.get_config": [], "ops.init_ops.TruncatedNormal": ["util.deprecation.deprecated_args"], "ops.init_ops.TruncatedNormal.__init__": ["framework.dtypes.as_dtype", "ops.init_ops._assert_float_dtype"], "ops.init_ops.TruncatedNormal.__call__": ["ops.random_ops.truncated_normal"], "ops.init_ops.TruncatedNormal.get_config": [], "ops.init_ops.UniformUnitScaling": ["util.deprecation.deprecated", "util.deprecation.deprecated_args"], "ops.init_ops.UniformUnitScaling.__init__": ["framework.dtypes.as_dtype", "ops.init_ops._assert_float_dtype"], "ops.init_ops.UniformUnitScaling.__call__": ["<builtin>.max", "math.sqrt", "ops.random_ops.random_uniform", "<builtin>.float"], "ops.init_ops.UniformUnitScaling.get_config": [], "ops.init_ops.VarianceScaling": ["util.deprecation.deprecated_arg_values", "util.deprecation.deprecated_args"], "ops.init_ops.VarianceScaling.__init__": ["framework.dtypes.as_dtype", "ops.init_ops._assert_float_dtype", "<builtin>.ValueError"], "ops.init_ops.VarianceScaling.__call__": ["ops.random_ops.random_uniform", "ops.init_ops._compute_fans", "<builtin>.max", "math.sqrt", "ops.random_ops.truncated_normal", "ops.random_ops.random_normal"], "ops.init_ops._compute_fans": ["<builtin>.int", "<builtin>.len"], "ops.init_ops.VarianceScaling.get_config": [], "ops.init_ops.Orthogonal": ["util.deprecation.deprecated_args"], "ops.init_ops.Orthogonal.__init__": ["framework.dtypes.as_dtype", "ops.init_ops._assert_float_dtype"], "ops.init_ops.Orthogonal.__call__": ["ops.array_ops.reshape", "ops.array_ops.matrix_transpose", "<builtin>.len", "ops.math_ops.sign", "ops.array_ops.diag_part", "<builtin>.ValueError", "<builtin>.int", "ops.gen_linalg_ops.qr", "ops.random_ops.random_normal"], "ops.init_ops.Orthogonal.get_config": [], "ops.init_ops.ConvolutionDeltaOrthogonal.__init__": ["framework.dtypes.as_dtype", "ops.init_ops._assert_float_dtype"], "ops.init_ops.ConvolutionDeltaOrthogonal.__call__": ["<builtin>.len", "ops.array_ops.scatter_nd", "ops.math_ops.sign", "ops.array_ops.diag_part", "ops.array_ops.expand_dims", "ops.math_ops.cast", "<builtin>.ValueError", "ops.gen_linalg_ops.qr", "ops.random_ops.random_normal"], "ops.init_ops.ConvolutionDeltaOrthogonal.get_config": [], "ops.init_ops.ConvolutionOrthogonal.__init__": ["framework.dtypes.as_dtype", "ops.init_ops._assert_float_dtype"], "ops.init_ops.ConvolutionOrthogonal.__call__": [], "ops.init_ops.ConvolutionOrthogonal.get_config": [], "ops.init_ops.ConvolutionOrthogonal._orthogonal_matrix": ["ops.array_ops.diag_part", "ops.math_ops.sign", "ops.gen_linalg_ops.qr", "ops.random_ops.random_normal"], "ops.init_ops.ConvolutionOrthogonal._symmetric_projection": ["ops.array_ops.matrix_transpose", "ops.math_ops.multiply", "ops.math_ops.matmul", "ops.math_ops.cast", "ops.init_ops.ConvolutionOrthogonal._orthogonal_matrix", "ops.random_ops.random_normal"], "ops.init_ops.ConvolutionOrthogonal2D.__call__": ["<builtin>.len", "ops.init_ops.ConvolutionOrthogonal2D._orthogonal_kernel", "ops.math_ops.cast", "<builtin>.ValueError"], "ops.init_ops.ConvolutionOrthogonal2D._orthogonal_kernel": ["ops.init_ops.ConvolutionOrthogonal._symmetric_projection", "ops.init_ops.ConvolutionOrthogonal2D._dict_to_tensor", "ops.math_ops.matmul", "ops.array_ops.expand_dims", "<builtin>.ValueError", "<builtin>.range", "ops.init_ops.ConvolutionOrthogonal2D._block_orth", "ops.init_ops.ConvolutionOrthogonal._orthogonal_matrix", "ops.init_ops.ConvolutionOrthogonal2D._matrix_conv"], "ops.init_ops.ConvolutionOrthogonal2D._dict_to_tensor": ["<builtin>.range", "ops.array_ops.stack"], "ops.init_ops.ConvolutionOrthogonal2D._block_orth": ["ops.linalg_ops_impl.eye", "ops.math_ops.matmul", "<builtin>.ValueError"], "ops.linalg_ops_impl.eye": ["ops.array_ops.ones", "<builtin>.isinstance", "ops.array_ops.matrix_diag", "ops.math_ops.minimum", "ops.array_ops.zeros", "ops.array_ops.matrix_set_diag", "ops.array_ops.concat", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "<builtin>.list", "framework.ops.name_scope", "numpy.minimum"], "ops.init_ops.ConvolutionOrthogonal2D._matrix_conv": ["<builtin>.len", "ops.array_ops.zeros", "ops.math_ops.matmul", "numpy.sqrt", "<builtin>.min", "<builtin>.ValueError", "<builtin>.range", "<builtin>.int"], "ops.init_ops.ConvolutionOrthogonal1D.__call__": ["<builtin>.len", "ops.init_ops.ConvolutionOrthogonal1D._orthogonal_kernel", "ops.math_ops.cast", "<builtin>.ValueError"], "ops.init_ops.ConvolutionOrthogonal1D._orthogonal_kernel": ["ops.init_ops.ConvolutionOrthogonal._symmetric_projection", "ops.init_ops.ConvolutionOrthogonal1D._dict_to_tensor", "ops.init_ops.ConvolutionOrthogonal1D._matrix_conv", "ops.math_ops.matmul", "ops.array_ops.expand_dims", "ops.init_ops.ConvolutionOrthogonal1D._block_orth", "<builtin>.ValueError", "<builtin>.range", "ops.init_ops.ConvolutionOrthogonal._orthogonal_matrix"], "ops.init_ops.ConvolutionOrthogonal1D._dict_to_tensor": ["<builtin>.range", "ops.array_ops.stack"], "ops.init_ops.ConvolutionOrthogonal1D._block_orth": ["ops.linalg_ops_impl.eye"], "ops.init_ops.ConvolutionOrthogonal1D._matrix_conv": ["<builtin>.len", "ops.array_ops.zeros", "ops.math_ops.matmul", "<builtin>.min", "<builtin>.ValueError", "<builtin>.range"], "ops.init_ops.ConvolutionOrthogonal3D.__call__": ["ops.init_ops.ConvolutionOrthogonal3D._orthogonal_kernel", "<builtin>.len", "ops.math_ops.cast", "<builtin>.ValueError"], "ops.init_ops.ConvolutionOrthogonal3D._orthogonal_kernel": ["ops.init_ops.ConvolutionOrthogonal._symmetric_projection", "ops.init_ops.ConvolutionOrthogonal3D._matrix_conv", "ops.math_ops.matmul", "ops.init_ops.ConvolutionOrthogonal3D._dict_to_tensor", "ops.array_ops.expand_dims", "<builtin>.ValueError", "<builtin>.range", "ops.init_ops.ConvolutionOrthogonal._orthogonal_matrix", "ops.init_ops.ConvolutionOrthogonal3D._block_orth"], "ops.init_ops.ConvolutionOrthogonal3D._dict_to_tensor": ["<builtin>.range", "ops.array_ops.stack"], "ops.init_ops.ConvolutionOrthogonal3D._block_orth": ["ops.linalg_ops_impl.eye", "ops.init_ops.ConvolutionOrthogonal3D._block_orth.matmul", "ops.init_ops.ConvolutionOrthogonal3D._block_orth.cast", "<builtin>.ValueError"], "ops.init_ops.ConvolutionOrthogonal3D._block_orth.matmul": ["ops.math_ops.matmul"], "ops.init_ops.ConvolutionOrthogonal3D._block_orth.cast": [], "ops.init_ops.ConvolutionOrthogonal3D._matrix_conv": ["<builtin>.ValueError", "<builtin>.len", "ops.array_ops.zeros", "ops.math_ops.matmul", "<builtin>.min", "numpy.cbrt", "<builtin>.range", "<builtin>.int"], "numpy.cbrt": [], "ops.init_ops.Identity": ["util.deprecation.deprecated_args"], "ops.init_ops.Identity.__init__": ["framework.dtypes.as_dtype", "ops.init_ops._assert_float_dtype"], "ops.init_ops.Identity.__call__": ["<builtin>.isinstance", "<builtin>.len", "ops.array_ops.slice", "ops.linalg_ops_impl.eye", "<builtin>.ValueError"], "ops.init_ops.Identity.get_config": [], "ops.init_ops.GlorotUniform": ["util.deprecation.deprecated_args"], "ops.init_ops.GlorotUniform.__init__": ["<builtin>.super"], "ops.init_ops.GlorotUniform.get_config": [], "ops.init_ops.GlorotNormal": ["util.deprecation.deprecated_args"], "ops.init_ops.GlorotNormal.__init__": ["<builtin>.super"], "ops.init_ops.GlorotNormal.get_config": [], "ops.init_ops.lecun_normal": ["ops.init_ops.VarianceScaling.__init__"], "ops.init_ops.lecun_uniform": ["ops.init_ops.VarianceScaling.__init__"], "ops.init_ops.he_normal": ["ops.init_ops.VarianceScaling.__init__"], "ops.init_ops.he_uniform": ["ops.init_ops.VarianceScaling.__init__"], "ops.init_ops_v2": [], "ops.init_ops_v2.Initializer.__call__": [], "ops.init_ops_v2.Initializer.get_config": [], "ops.init_ops_v2.Initializer.from_config": [], "ops.init_ops_v2.Initializer._validate_kwargs": ["<builtin>.TypeError", "<builtin>.ValueError"], "ops.init_ops_v2.Zeros.__call__": ["ops.array_ops.zeros", "framework.dtypes.as_dtype", "<builtin>.ValueError", "ops.init_ops_v2.Initializer._validate_kwargs"], "ops.init_ops_v2.Ones.__call__": ["framework.dtypes.as_dtype", "<builtin>.ValueError", "ops.array_ops.ones", "ops.init_ops_v2.Initializer._validate_kwargs"], "ops.init_ops_v2.Constant.__init__": ["<builtin>.TypeError", "<builtin>.isinstance", "numpy.isscalar", "<builtin>.type"], "ops.init_ops_v2.Constant.__call__": ["framework.constant_op.constant", "framework.dtypes.as_dtype", "ops.init_ops_v2.Initializer._validate_kwargs"], "ops.init_ops_v2.Constant.get_config": [], "ops.init_ops_v2.RandomUniform.__init__": ["ops.init_ops_v2._RandomGenerator.__init__"], "ops.init_ops_v2._RandomGenerator.__init__": ["<builtin>.super"], "ops.init_ops_v2.RandomUniform.__call__": ["ops.init_ops_v2._RandomGenerator.random_uniform", "framework.dtypes.as_dtype", "<builtin>.ValueError", "ops.init_ops_v2.Initializer._validate_kwargs"], "ops.init_ops_v2._RandomGenerator.random_uniform": ["ops.stateless_random_ops.stateless_random_uniform", "ops.random_ops.random_uniform"], "ops.init_ops_v2.RandomUniform.get_config": [], "ops.init_ops_v2.RandomNormal.__init__": ["ops.init_ops_v2._RandomGenerator.__init__"], "ops.init_ops_v2.RandomNormal.__call__": ["ops.init_ops_v2._RandomGenerator.random_normal", "ops.init_ops_v2._assert_float_dtype", "ops.init_ops_v2.Initializer._validate_kwargs"], "ops.init_ops_v2._assert_float_dtype": ["framework.dtypes.as_dtype", "<builtin>.ValueError"], "ops.init_ops_v2._RandomGenerator.random_normal": ["ops.random_ops.random_normal", "ops.stateless_random_ops.stateless_random_normal"], "ops.init_ops_v2.RandomNormal.get_config": [], "ops.init_ops_v2.TruncatedNormal.__init__": ["ops.init_ops_v2._RandomGenerator.__init__"], "ops.init_ops_v2.TruncatedNormal.__call__": ["ops.init_ops_v2._assert_float_dtype", "ops.init_ops_v2._RandomGenerator.truncated_normal", "ops.init_ops_v2.Initializer._validate_kwargs"], "ops.init_ops_v2._RandomGenerator.truncated_normal": ["ops.stateless_random_ops.stateless_truncated_normal", "ops.random_ops.truncated_normal"], "ops.init_ops_v2.TruncatedNormal.get_config": [], "ops.init_ops_v2.VarianceScaling.__init__": ["<builtin>.ValueError", "ops.init_ops_v2._RandomGenerator.__init__"], "ops.init_ops_v2.VarianceScaling.__call__": ["ops.init_ops_v2._RandomGenerator.random_uniform", "<builtin>.max", "ops.init_ops._compute_fans", "math.sqrt", "ops.init_ops_v2._RandomGenerator.random_normal", "ops.init_ops_v2._RandomGenerator.truncated_normal", "ops.init_ops_v2.Initializer._validate_kwargs", "ops.init_ops_v2._assert_float_dtype"], "ops.init_ops_v2.VarianceScaling.get_config": [], "ops.init_ops_v2.Orthogonal.__init__": ["ops.init_ops_v2._RandomGenerator.__init__"], "ops.init_ops_v2.Orthogonal.__call__": ["<builtin>.len", "ops.array_ops.diag_part", "<builtin>.max", "ops.array_ops.matrix_transpose", "ops.gen_linalg_ops.qr", "ops.init_ops_v2._RandomGenerator.random_normal", "<builtin>.min", "ops.math_ops.sign", "ops.array_ops.reshape", "ops.init_ops_v2.Initializer._validate_kwargs", "<builtin>.ValueError", "ops.init_ops_v2._assert_float_dtype"], "ops.init_ops_v2.Orthogonal.get_config": [], "ops.init_ops_v2.Identity.__init__": [], "ops.init_ops_v2.Identity.__call__": ["<builtin>.len", "ops.linalg_ops_impl.eye", "ops.init_ops_v2.Initializer._validate_kwargs", "<builtin>.ValueError", "ops.init_ops_v2._assert_float_dtype"], "ops.init_ops_v2.Identity.get_config": [], "ops.init_ops_v2.GlorotUniform.__init__": ["<builtin>.super"], "ops.init_ops_v2.GlorotUniform.get_config": [], "ops.init_ops_v2.GlorotNormal.__init__": ["<builtin>.super"], "ops.init_ops_v2.GlorotNormal.get_config": [], "ops.init_ops_v2.lecun_normal": ["ops.init_ops_v2.VarianceScaling.__init__"], "ops.init_ops_v2.lecun_uniform": ["ops.init_ops_v2.VarianceScaling.__init__"], "ops.init_ops_v2.he_normal": ["ops.init_ops_v2.VarianceScaling.__init__"], "ops.init_ops_v2.he_uniform": ["ops.init_ops_v2.VarianceScaling.__init__"], "ops.inplace_ops": ["util.deprecation.deprecated"], "ops.inplace_ops._inplace_helper": ["ops.array_ops.expand_dims", "ops.array_ops.shape", "framework.ops.convert_to_tensor", "ops.gen_array_ops.inplace_add", "ops.gen_array_ops.inplace_update", "ops.math_ops.cast", "ops.gen_array_ops.inplace_sub", "ops.array_ops.reshape"], "ops.gen_array_ops.inplace_sub": [], "ops.gen_array_ops.inplace_add": [], "ops.gen_array_ops.inplace_update": [], "ops.inplace_ops.alias_inplace_sub": ["ops.inplace_ops._inplace_helper"], "ops.inplace_ops.empty_like": ["ops.array_ops.shape", "ops.gen_array_ops.empty", "framework.ops.convert_to_tensor"], "ops.gen_array_ops.empty": [], "ops.inplace_ops.inplace_update": ["ops.gen_array_ops.deep_copy", "ops.inplace_ops.alias_inplace_update"], "ops.gen_array_ops.deep_copy": [], "ops.inplace_ops.inplace_add": ["ops.gen_array_ops.deep_copy", "ops.inplace_ops.alias_inplace_add"], "ops.inplace_ops.inplace_sub": ["ops.inplace_ops.alias_inplace_sub", "ops.gen_array_ops.deep_copy"], "ops.io_ops": ["util.dispatch.add_dispatch_list", "util.tf_export.tf_export", "framework.ops.NotDifferentiable"], "ops.io_ops._save": ["ops.gen_io_ops.save_slices", "ops.gen_io_ops.save"], "ops.gen_io_ops.save": [], "ops.gen_io_ops.save_slices": [], "ops.io_ops._restore_slice": ["ops.gen_io_ops.restore_slice", "framework.dtypes.as_dtype"], "ops.gen_io_ops.restore_slice": [], "util.dispatch.add_dispatch_list": ["<builtin>.setattr", "<builtin>.hasattr", "<builtin>.AssertionError"], "ops.gen_io_ops.read_file": [], "ops.io_ops.serialize_tensor": ["ops.gen_parsing_ops.serialize_tensor"], "ops.gen_parsing_ops.serialize_tensor": [], "ops.io_ops.ReaderBase.__init__": ["eager.context.executing_eagerly", "<builtin>.RuntimeError"], "ops.io_ops.ReaderBase.reader_ref": [], "ops.io_ops.ReaderBase.read": ["ops.gen_io_ops.reader_read_v2", "ops.gen_data_flow_ops.fake_queue", "ops.gen_io_ops.reader_read", "<builtin>.isinstance"], "ops.gen_io_ops.reader_read_v2": [], "ops.gen_data_flow_ops.fake_queue": [], "ops.gen_io_ops.reader_read": [], "ops.io_ops.ReaderBase.read_up_to": ["ops.gen_io_ops.reader_read_up_to_v2", "ops.gen_data_flow_ops.fake_queue", "ops.gen_io_ops.reader_read_up_to", "<builtin>.isinstance"], "ops.gen_io_ops.reader_read_up_to_v2": [], "ops.gen_io_ops.reader_read_up_to": [], "ops.io_ops.ReaderBase.num_records_produced": ["ops.gen_io_ops.reader_num_records_produced", "ops.gen_io_ops.reader_num_records_produced_v2"], "ops.gen_io_ops.reader_num_records_produced_v2": [], "ops.gen_io_ops.reader_num_records_produced": [], "ops.io_ops.ReaderBase.num_work_units_completed": ["ops.gen_io_ops.reader_num_work_units_completed_v2", "ops.gen_io_ops.reader_num_work_units_completed"], "ops.gen_io_ops.reader_num_work_units_completed_v2": [], "ops.gen_io_ops.reader_num_work_units_completed": [], "ops.io_ops.ReaderBase.serialize_state": ["ops.gen_io_ops.reader_serialize_state_v2", "ops.gen_io_ops.reader_serialize_state"], "ops.gen_io_ops.reader_serialize_state_v2": [], "ops.gen_io_ops.reader_serialize_state": [], "ops.io_ops.ReaderBase.restore_state": ["ops.gen_io_ops.reader_restore_state_v2", "ops.gen_io_ops.reader_restore_state"], "ops.gen_io_ops.reader_restore_state_v2": [], "ops.gen_io_ops.reader_restore_state": [], "ops.io_ops.ReaderBase.supports_serialize": [], "ops.io_ops.ReaderBase.reset": ["ops.gen_io_ops.reader_reset_v2", "ops.gen_io_ops.reader_reset"], "ops.gen_io_ops.reader_reset_v2": [], "ops.gen_io_ops.reader_reset": [], "ops.io_ops.WholeFileReader": ["util.deprecation.deprecated"], "ops.io_ops.WholeFileReader.__init__": ["ops.gen_io_ops.whole_file_reader_v2", "<builtin>.super"], "ops.gen_io_ops.whole_file_reader_v2": [], "ops.io_ops.TextLineReader": ["util.deprecation.deprecated"], "ops.io_ops.TextLineReader.__init__": ["ops.gen_io_ops.text_line_reader_v2", "<builtin>.super"], "ops.gen_io_ops.text_line_reader_v2": [], "ops.io_ops.FixedLengthRecordReader": ["util.deprecation.deprecated"], "ops.io_ops.FixedLengthRecordReader.__init__": ["ops.gen_io_ops.fixed_length_record_reader_v2", "<builtin>.super"], "ops.gen_io_ops.fixed_length_record_reader_v2": [], "ops.io_ops.TFRecordReader": ["util.deprecation.deprecated"], "ops.io_ops.TFRecordReader.__init__": ["python_io.TFRecordOptions.get_compression_type_string", "<builtin>.super", "ops.gen_io_ops.tf_record_reader_v2"], "ops.gen_io_ops.tf_record_reader_v2": [], "ops.io_ops.LMDBReader": ["util.deprecation.deprecated"], "ops.io_ops.LMDBReader.__init__": ["ops.gen_io_ops.lmdb_reader", "<builtin>.super"], "ops.gen_io_ops.lmdb_reader": [], "ops.io_ops.IdentityReader": ["util.deprecation.deprecated"], "ops.io_ops.IdentityReader.__init__": ["ops.gen_io_ops.identity_reader_v2", "<builtin>.super"], "ops.gen_io_ops.identity_reader_v2": [], "ops.linalg_grad": ["framework.ops.RegisterGradient"], "ops.linalg_grad._MatrixInverseGrad": ["ops.math_ops.matmul"], "ops.linalg_grad._EinsumGrad": ["<builtin>.isinstance", "ops.gen_linalg_ops.einsum", "ops.array_ops.broadcast_gradient_args", "ops.math_ops.reduce_sum", "ops.linalg_grad._EinsumGrad._GetGradReduced", "ops.array_ops.reshape", "ops.math_ops.conj", "ops.linalg_grad._EinsumGrad._GetGradWrt", "ops.linalg_grad._EinsumGrad._GetBcastSubshape", "<builtin>.set", "ops.array_ops.shape", "<builtin>.len"], "ops.linalg_grad._EinsumGrad._GetAxisFromLabel": ["<builtin>.len"], "ops.linalg_grad._EinsumGrad._GetBcastSubshape": ["<builtin>.len"], "ops.linalg_grad._EinsumGrad._GetReducedSubscripts": ["<builtin>.list", "ops.array_ops.stack", "ops.linalg_grad._EinsumGrad._GetAxisFromLabel"], "ops.linalg_grad._EinsumGrad._GetGradReduced": ["ops.array_ops.concat", "ops.gen_linalg_ops.einsum", "ops.array_ops.broadcast_to", "ops.array_ops.reshape", "framework.ops.convert_to_tensor", "ops.math_ops.reduced_shape", "ops.linalg_grad._EinsumGrad._GetReducedSubscripts", "ops.array_ops.ones", "<builtin>.set", "ops.array_ops.shape", "<builtin>.len"], "ops.math_ops.reduced_shape": ["ops.math_ops.range", "ops.array_ops.ones", "ops.array_ops.shape", "ops.gen_data_flow_ops.dynamic_stitch", "ops.array_ops.size", "ops.math_ops.cast", "framework.tensor_util.constant_value", "numpy.array"], "ops.gen_linalg_ops.einsum": [], "ops.linalg_grad._EinsumGrad._GetGradWrt": ["ops.gen_linalg_ops.einsum", "<builtin>.set", "ops.linalg_grad._EinsumGrad._GetGradReduced"], "ops.array_ops.broadcast_gradient_args": [], "ops.linalg_grad._MatrixDeterminantGrad": ["ops.linalg_ops.matrix_inverse", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.reshape"], "ops.linalg_grad._MatrixSquareRootGrad": ["ops.math_ops.add", "ops.array_ops.concat", "ops.array_ops.tile", "ops.array_ops.reshape", "ops.linalg_ops.matrix_solve", "ops.math_ops.subtract", "ops.math_ops.reduce_prod", "ops.linalg_grad._MatrixSquareRootGrad._KroneckerProduct", "ops.array_ops.slice", "ops.array_ops.size", "ops.linalg_ops.eye", "ops.array_ops.shape", "ops.array_ops.matrix_transpose"], "ops.linalg_grad._MatrixSquareRootGrad._KroneckerProduct": ["ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.math_ops.subtract", "ops.array_ops.slice", "ops.array_ops.size"], "ops.linalg_grad._LogMatrixDeterminantGrad": ["ops.linalg_ops.matrix_inverse", "ops.array_ops.concat", "ops.array_ops.shape", "ops.array_ops.reshape"], "ops.linalg_grad._CholeskyGrad": ["ops.array_ops.matrix_band_part", "ops.math_ops.matmul", "ops.linalg_ops.matrix_triangular_solve", "linalg.linalg_impl.adjoint", "ops.linalg_ops.eye", "ops.array_ops.shape", "ops.array_ops.matrix_diag_part", "ops.array_ops.matrix_set_diag"], "ops.linalg_grad._QrGrad": ["ops.math_ops.matmul", "ops.linalg_grad._QrGrad._QrGradSquareAndDeepMatrices", "<builtin>.NotImplementedError", "ops.array_ops.concat"], "ops.linalg_grad._QrGrad._TriangularSolve": ["ops.linalg_ops.matrix_triangular_solve", "linalg.linalg_impl.adjoint"], "ops.linalg_grad._QrGrad._QrGradSquareAndDeepMatrices": ["ops.math_ops.real", "ops.array_ops.matrix_band_part", "ops.math_ops.matmul", "ops.math_ops.cast", "ops.array_ops.zeros_like", "ops.linalg_grad._QrGrad._TriangularSolve", "linalg.linalg_impl.set_diag", "linalg.linalg_impl.diag_part", "linalg.linalg_impl.adjoint"], "linalg.linalg_impl.diag_part": [], "linalg.linalg_impl.set_diag": [], "ops.linalg_grad._MatrixSolveGrad": ["ops.math_ops.matmul", "ops.linalg_ops.matrix_solve"], "ops.linalg_grad._MatrixSolveLsGrad": ["ops.linalg_grad._MatrixSolveLsGrad._Underdetermined", "ops.control_flow_ops.cond", "ops.linalg_grad._MatrixSolveLsGrad._Overdetermined", "ops.array_ops.shape", "<builtin>.ValueError"], "ops.linalg_grad._MatrixSolveLsGrad._Overdetermined": ["ops.math_ops.matmul", "ops.math_ops.cast", "ops.linalg_ops.cholesky_solve", "ops.linalg_ops._RegularizedGramianCholesky", "ops.array_ops.matrix_transpose"], "ops.linalg_ops._RegularizedGramianCholesky": ["ops.array_ops.shape", "ops.math_ops.matmul", "<builtin>.isinstance", "ops.linalg_ops.eye", "ops.gen_linalg_ops.cholesky"], "ops.linalg_grad._MatrixSolveLsGrad._Underdetermined": ["ops.math_ops.matmul", "ops.math_ops.cast", "ops.linalg_ops.cholesky_solve", "ops.linalg_ops._RegularizedGramianCholesky"], "ops.linalg_grad._MatrixSolveLsGrad.<lambda1>": ["ops.linalg_grad._MatrixSolveLsGrad._Overdetermined"], "ops.linalg_grad._MatrixSolveLsGrad.<lambda2>": ["ops.linalg_grad._MatrixSolveLsGrad._Underdetermined"], "ops.linalg_grad._BandedTriangularSolveGrad": ["ops.array_ops.broadcast_gradient_args", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.math_ops.matmul", "ops.array_ops.shape", "ops.linalg_ops.banded_triangular_solve", "ops.array_ops.matrix_diag_part"], "ops.linalg_ops.banded_triangular_solve": [], "ops.linalg_grad._MatrixTriangularSolveGrad": ["ops.array_ops.broadcast_gradient_args", "ops.array_ops.matrix_band_part", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.math_ops.matmul", "ops.linalg_ops.matrix_triangular_solve", "ops.array_ops.shape"], "ops.linalg_grad._SafeReciprocal": ["ops.math_ops.reciprocal"], "ops.linalg_grad._EigGrad": ["ops.math_ops.real", "ops.linalg_grad._SafeReciprocal", "ops.math_ops.matmul", "ops.array_ops.matrix_diag", "ops.linalg_ops.matrix_solve", "ops.math_ops.cast", "ops.array_ops.zeros_like", "ops.math_ops.conj", "ops.linalg_ops.eig", "linalg.linalg_impl.adjoint", "framework.ops.control_dependencies", "ops.array_ops.expand_dims", "ops.array_ops.matrix_diag_part", "ops.array_ops.matrix_set_diag"], "ops.linalg_ops.eig": ["ops.gen_linalg_ops.eig"], "ops.linalg_grad._SelfAdjointEigV2Grad": ["ops.array_ops.matrix_band_part", "ops.linalg_grad._SafeReciprocal", "ops.array_ops.matrix_diag", "ops.math_ops.matmul", "ops.array_ops.zeros_like", "ops.linalg_ops.self_adjoint_eig", "linalg.linalg_impl.adjoint", "framework.ops.control_dependencies", "ops.array_ops.expand_dims", "ops.array_ops.matrix_diag_part", "ops.array_ops.matrix_set_diag"], "ops.linalg_ops.self_adjoint_eig": ["ops.gen_linalg_ops.self_adjoint_eig_v2"], "ops.linalg_grad._SvdGrad": ["ops.array_ops.expand_dims", "linalg.linalg_impl.eye", "ops.linalg_grad._SafeReciprocal", "ops.array_ops.matrix_diag", "ops.math_ops.matmul", "ops.math_ops.cast", "ops.array_ops.zeros_like", "<builtin>.NotImplementedError", "ops.array_ops.matrix_transpose", "ops.linalg_ops.svd", "framework.ops.control_dependencies", "ops.math_ops.square", "linalg.linalg_impl.adjoint", "<builtin>.abs", "ops.array_ops.shape", "ops.array_ops.matrix_set_diag"], "linalg.linalg_impl.eye": [], "ops.linalg_grad._LeftShift": ["ops.array_ops.concat", "ops.array_ops.rank", "ops.array_ops.pad", "ops.array_ops.zeros", "ops.array_ops.constant"], "ops.linalg_grad._RightShift": ["ops.array_ops.concat", "ops.array_ops.rank", "ops.array_ops.pad", "ops.array_ops.zeros", "ops.array_ops.constant"], "ops.linalg_grad._TridiagonalMatMulGrad": ["ops.linalg_grad._LeftShift", "ops.linalg_grad._RightShift", "ops.math_ops.reduce_sum", "ops.math_ops.conj", "ops.array_ops.expand_dims", "ops.array_ops.matrix_transpose"], "ops.linalg_grad._TridiagonalSolveGrad": ["ops.linalg_grad._TransposeTridiagonalMatrix", "ops.linalg_ops.tridiagonal_solve", "ops.linalg_grad._MatmulExtractingThreeDiagonals"], "ops.linalg_grad._TransposeTridiagonalMatrix": ["ops.array_ops.concat", "ops.array_ops.stack", "ops.array_ops.rank", "<builtin>.list", "ops.array_ops.pad", "ops.array_ops.zeros", "ops.array_ops.constant"], "ops.linalg_ops.tridiagonal_solve": [], "ops.linalg_grad._MatmulExtractingThreeDiagonals": ["ops.array_ops.concat", "ops.array_ops.stack", "ops.array_ops.rank", "ops.math_ops.reduce_sum", "<builtin>.list", "ops.array_ops.pad", "ops.array_ops.zeros", "ops.array_ops.constant"], "ops.linalg_ops": ["util.deprecation.deprecated_args", "util.deprecation.deprecated_endpoints", "util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ops.gen_linalg_ops.cholesky": [], "ops.gen_linalg_ops.matrix_triangular_solve": [], "ops.linalg_ops.matrix_solve_ls": ["ops.linalg_ops.matrix_solve_ls._composite_impl", "framework.ops.convert_to_tensor", "<builtin>.NotImplementedError", "ops.linalg_ops.matrix_solve_ls._use_composite_impl", "ops.gen_linalg_ops.matrix_solve_ls"], "ops.linalg_ops.matrix_solve_ls._use_composite_impl": ["numpy.min"], "ops.linalg_ops.matrix_solve_ls._overdetermined": ["ops.linalg_ops.cholesky_solve", "ops.linalg_ops._RegularizedGramianCholesky", "ops.math_ops.matmul"], "ops.linalg_ops.matrix_solve_ls._underdetermined": ["ops.linalg_ops.cholesky_solve", "ops.linalg_ops._RegularizedGramianCholesky", "ops.math_ops.matmul"], "ops.linalg_ops.matrix_solve_ls._composite_impl": ["ops.array_ops.shape", "ops.control_flow_ops.cond", "framework.ops.name_scope", "ops.linalg_ops.matrix_solve_ls._overdetermined", "ops.linalg_ops.matrix_solve_ls._underdetermined"], "ops.linalg_ops.matrix_solve_ls._composite_impl.<lambda1>": ["ops.linalg_ops.matrix_solve_ls._overdetermined"], "ops.linalg_ops.matrix_solve_ls._composite_impl.<lambda2>": ["ops.linalg_ops.matrix_solve_ls._underdetermined"], "ops.gen_linalg_ops.matrix_solve_ls": [], "ops.gen_linalg_ops.eig": [], "ops.linalg_ops.eigvals": ["ops.gen_linalg_ops.eig"], "ops.gen_linalg_ops.svd": [], "ops.linalg_ops.norm_v2": ["ops.linalg_ops.norm"], "numpy.isreal": [], "ops.linalg_ops.norm.<lambda1>": ["ops.control_flow_ops.cond"], "ops.linalg_ops.norm.<lambda1>.<lambda1>": [], "ops.linalg_ops.norm.<lambda1>.<lambda2>": [], "ops.linalg_ops.norm.<lambda2>": ["ops.math_ops.equal", "ops.array_ops.squeeze", "ops.array_ops.where_v2", "ops.math_ops.cast"], "ops.linalg_ops_impl": [], "numpy.minimum": [], "ops.list_ops": ["<builtin>.globals", "util.lazy_loader.LazyLoader", "framework.ops.RegisterGradient", "framework.ops.NotDifferentiable"], "ops.list_ops._build_element_shape": ["ops.list_ops._build_element_shape.convert", "framework.ops.convert_to_tensor", "<builtin>.isinstance"], "ops.gen_list_ops.empty_tensor_list": [], "ops.list_ops._set_handle_data": ["framework.tensor_shape.TensorShape", "cpp_shape_inference_pb2.CppShapeInferenceResult.HandleShapeAndType", "<builtin>.isinstance", "framework.tensor_util.is_tf_type", "framework.full_type_pb2.FullTypeDef", "cpp_shape_inference_pb2.CppShapeInferenceResult.HandleData"], "framework.full_type_pb2.FullTypeDef": [], "ops.gen_list_ops.tensor_list_reserve": [], "ops.gen_list_ops.tensor_list_from_tensor": [], "ops.gen_list_ops.tensor_list_get_item": [], "ops.gen_list_ops.tensor_list_gather": [], "ops.gen_list_ops.tensor_list_scatter_into_existing_list": [], "ops.gen_list_ops.tensor_list_scatter_v2": [], "ops.gen_list_ops.tensor_list_stack": [], "ops.list_ops.tensor_list_concat": ["framework.ops.convert_to_tensor", "ops.gen_list_ops.tensor_list_concat_v2", "ops.list_ops._build_element_shape"], "ops.list_ops.tensor_list_split": ["ops.gen_list_ops.tensor_list_split", "ops.list_ops._build_element_shape"], "ops.gen_list_ops.tensor_list_split": [], "ops.gen_list_ops.tensor_list_length": [], "ops.list_ops.tensor_list_set_item.<lambda1>": ["ops.gen_list_ops.tensor_list_resize"], "ops.gen_list_ops.tensor_list_resize": [], "ops.list_ops.tensor_list_set_item.<lambda2>": [], "ops.gen_list_ops.tensor_list_set_item": [], "ops.list_ops._PushBackGrad": ["ops.array_ops.shape", "ops.gen_list_ops.tensor_list_pop_back"], "ops.list_ops._PopBackGrad": ["ops.array_ops.zeros_like", "ops.list_ops.empty_tensor_list", "ops.gen_list_ops.tensor_list_push_back", "ops.gen_list_ops.tensor_list_element_shape"], "ops.gen_list_ops.tensor_list_element_shape": [], "ops.gen_list_ops.tensor_list_push_back": [], "ops.list_ops._TensorListStackGrad": ["ops.list_ops.tensor_list_from_tensor"], "ops.list_ops._TensorListConcatGrad": ["ops.list_ops.tensor_list_split", "ops.gen_list_ops.tensor_list_element_shape"], "ops.list_ops._TensorListSplitGrad": ["ops.array_ops.shape", "ops.gen_list_ops.tensor_list_concat_v2", "ops.array_ops.slice", "ops.array_ops.concat"], "ops.list_ops._TensorListFromTensorGrad": ["ops.array_ops.shape", "ops.list_ops.empty_tensor_list", "ops.array_ops.slice", "ops.gen_list_ops.tensor_list_element_shape", "ops.gen_list_ops.tensor_list_stack"], "ops.list_ops._TensorListGetItemGrad": ["ops.gen_list_ops.tensor_list_length", "ops.gen_list_ops.tensor_list_reserve", "ops.gen_list_ops.tensor_list_set_item", "ops.gen_list_ops.tensor_list_element_shape"], "ops.list_ops._TensorListSetItemGrad": ["ops.array_ops.shape", "ops.array_ops.zeros_like", "ops.list_ops.tensor_list_get_item", "ops.gen_list_ops.tensor_list_set_item"], "ops.list_ops._TensorListResizeGrad": ["ops.gen_list_ops.tensor_list_length", "ops.gen_list_ops.tensor_list_resize"], "ops.list_ops._TensorListGatherGrad": ["ops.gen_list_ops.tensor_list_length", "ops.list_ops.tensor_list_scatter", "ops.list_ops.tensor_list_reserve", "ops.gen_list_ops.tensor_list_element_shape"], "ops.list_ops._TensorListScatterGrad": ["ops.array_ops.shape", "ops.array_ops.slice", "ops.gen_list_ops.tensor_list_gather"], "ops.list_ops._TensorListScatterIntoExistingListGrad": ["ops.array_ops.shape", "ops.array_ops.slice", "ops.list_ops.tensor_list_scatter", "ops.array_ops.zeros_like", "ops.gen_list_ops.tensor_list_gather"], "ops.list_ops._build_element_shape.convert": ["<builtin>.isinstance"], "ops.logging_ops": ["util.tf_export.tf_export", "python.pywrap_tfe.TFE_Py_EnableInteractivePythonLogging", "util.dispatch.add_dispatch_support", "framework.ops.RegisterGradient", "util.deprecation.deprecated", "framework.ops.NotDifferentiable"], "python.pywrap_tfe.TFE_Py_EnableInteractivePythonLogging": [], "ops.gen_logging_ops._print": [], "ops.logging_ops._generate_placeholder_string": ["random.Random", "<builtin>.str"], "ops.logging_ops._is_filepath": ["<builtin>.isinstance"], "ops.logging_ops.print_v2.<lambda1>": ["framework.tensor_util.is_tf_type"], "ops.gen_logging_ops.print_v2": [], "ops.logging_ops._PrintGrad": ["<builtin>.len", "<builtin>.list"], "ops.logging_ops._Collect": ["framework.ops.add_to_collection"], "ops.logging_ops.histogram_summary": ["framework.ops.name_scope", "ops.gen_logging_ops.histogram_summary", "ops.logging_ops._Collect"], "ops.gen_logging_ops.histogram_summary": [], "ops.logging_ops.image_summary": ["ops.gen_logging_ops.image_summary", "framework.ops.name_scope", "ops.logging_ops._Collect"], "ops.gen_logging_ops.image_summary": [], "ops.logging_ops.audio_summary": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.gen_logging_ops.audio_summary_v2", "ops.logging_ops._Collect"], "ops.gen_logging_ops.audio_summary_v2": [], "ops.logging_ops.merge_summary": ["framework.ops.name_scope", "ops.logging_ops._Collect", "ops.gen_logging_ops.merge_summary"], "ops.gen_logging_ops.merge_summary": [], "ops.logging_ops.merge_all_summaries": ["framework.ops.get_collection", "ops.logging_ops.merge_summary"], "ops.logging_ops.get_summary_op": ["framework.ops.get_collection", "ops.logging_ops.merge_all_summaries", "framework.ops.add_to_collection"], "ops.logging_ops.scalar_summary": ["framework.ops.name_scope", "ops.logging_ops._Collect", "ops.gen_logging_ops.scalar_summary"], "ops.gen_logging_ops.scalar_summary": [], "ops.lookup_ops.initialize_all_tables": ["ops.lookup_ops.tables_initializer"], "ops.lookup_ops.tables_initializer": ["framework.ops.get_collection", "ops.control_flow_ops.group", "ops.control_flow_ops.no_op"], "ops.lookup_ops.LookupInterface.__init__": ["<builtin>.super", "framework.dtypes.as_dtype"], "ops.lookup_ops.LookupInterface._create_resource": [], "ops.lookup_ops.LookupInterface.key_dtype": [], "ops.lookup_ops.LookupInterface.value_dtype": [], "ops.lookup_ops.LookupInterface.name": [], "ops.lookup_ops.LookupInterface.size": [], "ops.lookup_ops.LookupInterface.lookup": [], "ops.lookup_ops.LookupInterface.__getitem__": ["ops.lookup_ops.IdTableWithHashBuckets.lookup", "ops.lookup_ops.LookupInterface.lookup"], "ops.lookup_ops.IdTableWithHashBuckets.lookup": ["ops.lookup_ops.InitializableLookupTableBase.lookup", "ops.lookup_ops.IdTableWithHashBuckets.lookup", "<builtin>.TypeError", "ops.string_ops.string_to_hash_bucket_fast", "ops.math_ops.not_equal", "ops.string_ops.string_to_hash_bucket", "ops.math_ops.cast", "framework.sparse_tensor.SparseTensor", "ops.lookup_ops.IdTableWithHashBuckets._get_string_to_hash_bucket_fn", "ops.array_ops.where_v2", "<builtin>.isinstance", "ops.math_ops.add", "framework.ops.name_scope", "ops.lookup_ops._as_string", "ops.lookup_ops.IdTableWithHashBuckets.size", "ops.lookup_ops.InitializableLookupTableBase.size"], "ops.lookup_ops.InitializableLookupTableBase.__init__": ["ops.lookup_ops.IdTableWithHashBuckets._create_resource", "ops.lookup_ops.LookupInterface._create_resource", "framework.tensor_shape.TensorShape", "eager.context.executing_eagerly", "tracking.TrackableResource._track_trackable", "<builtin>.isinstance", "ops.lookup_ops.InitializableLookupTableBase._initialize", "framework.ops.init_scope", "<builtin>.super", "framework.ops.convert_to_tensor", "framework.ops.get_default_graph"], "ops.lookup_ops.IdTableWithHashBuckets._create_resource": ["ops.lookup_ops.IdTableWithHashBuckets._create_resource", "ops.lookup_ops.StaticHashTable._create_resource"], "ops.lookup_ops.InitializableLookupTableBase._initialize": [], "ops.lookup_ops.InitializableLookupTableBase.default_value": [], "ops.lookup_ops.InitializableLookupTableBase.size": ["ops.gen_lookup_ops.lookup_table_size_v2", "framework.ops.name_scope"], "ops.gen_lookup_ops.lookup_table_size_v2": [], "ops.lookup_ops.InitializableLookupTableBase.lookup": ["<builtin>.TypeError", "framework.sparse_tensor.SparseTensor", "ops.gen_lookup_ops.lookup_table_find_v2", "<builtin>.isinstance", "framework.ops.name_scope"], "ops.gen_lookup_ops.lookup_table_find_v2": [], "ops.lookup_ops.InitializableLookupTableBaseV1.initializer": [], "ops.lookup_ops.StaticHashTable.__init__": ["<builtin>.super", "uuid.uuid4", "<builtin>.str"], "ops.lookup_ops.StaticHashTable._create_resource": ["eager.context.executing_eagerly", "ops.gen_lookup_ops.hash_table_v2"], "ops.gen_lookup_ops.hash_table_v2": [], "ops.lookup_ops.StaticHashTable.name": [], "ops.lookup_ops.StaticHashTable.export": ["ops.gen_lookup_ops.lookup_table_export_v2", "framework.ops.name_scope"], "ops.gen_lookup_ops.lookup_table_export_v2": [], "ops.lookup_ops.StaticHashTableV1.initializer": [], "ops.lookup_ops.HashTable.init": [], "ops.lookup_ops.TableInitializerBase.__init__": ["framework.dtypes.as_dtype"], "ops.lookup_ops.TableInitializerBase.key_dtype": [], "ops.lookup_ops.TableInitializerBase.value_dtype": [], "ops.lookup_ops.TableInitializerBase.initialize": [], "ops.lookup_ops.TableInitializerBase._shared_name": ["eager.context.executing_eagerly", "framework.ops.uid", "<builtin>.str"], "ops.lookup_ops.KeyValueTensorInitializer.__init__": ["framework.ops.uid", "eager.context.executing_eagerly", "<builtin>.str", "framework.ops.init_scope", "<builtin>.super", "framework.ops.convert_to_tensor", "framework.ops.get_default_graph"], "ops.lookup_ops.KeyValueTensorInitializer.initialize": ["ops.gen_lookup_ops.lookup_table_import_v2", "framework.ops.add_to_collection", "framework.ops.name_scope", "ops.lookup_ops.check_table_dtypes"], "ops.gen_lookup_ops.lookup_table_import_v2": [], "ops.lookup_ops.TextFileInitializer.__init__": ["<builtin>.ValueError", "tracking.tracking.Asset", "framework.dtypes.as_dtype", "<builtin>.isinstance", "<builtin>.super", "base.Trackable._track_trackable"], "ops.lookup_ops.TextFileInitializer.initialize": ["eager.context.executing_eagerly", "framework.constant_op.is_constant", "ops.lookup_ops.check_table_dtypes", "framework.ops.add_to_collection", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.gen_lookup_ops.initialize_table_from_text_file_v2"], "ops.gen_lookup_ops.initialize_table_from_text_file_v2": [], "ops.lookup_ops.TextFileInitializer._shared_name": [], "ops.lookup_ops.TextFileStringTableInitializer.__init__": ["<builtin>.super"], "ops.lookup_ops.TextFileIdTableInitializer.__init__": ["<builtin>.super"], "ops.lookup_ops.StrongHashSpec.__new__": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance", "<builtin>.super"], "ops.lookup_ops._as_string": ["ops.string_ops.as_string"], "ops.lookup_ops.IdTableWithHashBuckets.__init__": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.type", "<builtin>.isinstance", "<builtin>.super"], "ops.lookup_ops.IdTableWithHashBuckets._initialize": ["ops.lookup_ops.InitializableLookupTableBase._initialize", "ops.lookup_ops.IdTableWithHashBuckets._initialize", "framework.ops.name_scope", "ops.control_flow_ops.no_op"], "ops.lookup_ops.IdTableWithHashBuckets.initializer": ["framework.ops.name_scope", "ops.control_flow_ops.no_op"], "ops.lookup_ops.IdTableWithHashBuckets.init": [], "ops.lookup_ops.IdTableWithHashBuckets.resource_handle": [], "ops.lookup_ops.IdTableWithHashBuckets.name": [], "ops.lookup_ops.IdTableWithHashBuckets.size": ["framework.ops.convert_to_tensor", "ops.lookup_ops.IdTableWithHashBuckets.size", "framework.ops.name_scope", "ops.lookup_ops.InitializableLookupTableBase.size"], "ops.lookup_ops.IdTableWithHashBuckets._get_string_to_hash_bucket_fn": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.type", "<builtin>.isinstance", "functools.partial"], "ops.lookup_ops.StaticVocabularyTable.__init__": ["<builtin>.TypeError", "<builtin>.ValueError", "ops.lookup_ops.StaticHashTable.__init__", "tracking.TrackableResource._track_trackable", "<builtin>.isinstance", "<builtin>.super"], "ops.lookup_ops.StaticVocabularyTable._create_resource": ["ops.lookup_ops.StaticHashTable._create_resource"], "ops.lookup_ops.StaticVocabularyTable._initialize": ["ops.lookup_ops.InitializableLookupTableBase._initialize", "framework.ops.name_scope", "ops.control_flow_ops.no_op"], "ops.lookup_ops.StaticVocabularyTable.resource_handle": [], "ops.lookup_ops.StaticVocabularyTable.name": [], "ops.lookup_ops.StaticVocabularyTable.size": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.lookup_ops.InitializableLookupTableBase.size"], "ops.lookup_ops.StaticVocabularyTable.lookup": ["ops.lookup_ops.InitializableLookupTableBase.lookup", "<builtin>.TypeError", "ops.string_ops.string_to_hash_bucket_fast", "ops.math_ops.not_equal", "framework.sparse_tensor.SparseTensor", "ops.math_ops.cast", "ops.array_ops.where_v2", "<builtin>.isinstance", "ops.math_ops.add", "framework.ops.name_scope", "ops.lookup_ops._as_string", "ops.lookup_ops.InitializableLookupTableBase.size"], "ops.lookup_ops.StaticVocabularyTableV1.initializer": ["framework.ops.name_scope", "ops.control_flow_ops.no_op"], "ops.lookup_ops.index_to_string_table_from_file": ["<builtin>.ValueError", "ops.lookup_ops.StaticHashTable.__init__", "<builtin>.isinstance", "framework.ops.name_scope", "ops.lookup_ops.TextFileStringTableInitializer.__init__"], "ops.lookup_ops.index_to_string_table_from_tensor": ["<builtin>.ValueError", "ops.math_ops.cast", "ops.lookup_ops.StaticHashTable.__init__", "framework.ops.name_scope", "ops.math_ops.range", "framework.ops.convert_to_tensor", "ops.lookup_ops.KeyValueTensorInitializer.__init__", "ops.array_ops.size"], "ops.lookup_ops.MutableHashTable.__init__": ["ops.lookup_ops.MutableHashTable._create_resource", "framework.ops.uid", "ops.lookup_ops.MutableHashTable._Saveable.__init__", "eager.context.executing_eagerly", "framework.ops.add_to_collection", "<builtin>.super", "framework.ops.convert_to_tensor"], "ops.lookup_ops.MutableHashTable._create_resource": ["eager.context.executing_eagerly", "ops.gen_lookup_ops.mutable_hash_table_of_tensors_v2", "ops.gen_lookup_ops.mutable_hash_table_v2"], "ops.lookup_ops.MutableHashTable._Saveable.__init__": ["<builtin>.super", "ops.lookup_ops.MutableHashTable.export", "saver.BaseSaverBuilder.SaveSpec"], "ops.gen_lookup_ops.mutable_hash_table_v2": [], "ops.gen_lookup_ops.mutable_hash_table_of_tensors_v2": [], "ops.lookup_ops.MutableHashTable.name": [], "ops.lookup_ops.MutableHashTable.size": ["ops.gen_lookup_ops.lookup_table_size_v2", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.lookup_ops.MutableHashTable.remove": ["<builtin>.TypeError", "framework.ops.name_scope", "ops.gen_lookup_ops.lookup_table_remove_v2"], "ops.gen_lookup_ops.lookup_table_remove_v2": [], "ops.lookup_ops.MutableHashTable.lookup": ["framework.ops.convert_to_tensor", "ops.gen_lookup_ops.lookup_table_find_v2", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.lookup_ops.MutableHashTable.insert": ["ops.gen_lookup_ops.lookup_table_insert_v2", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.gen_lookup_ops.lookup_table_insert_v2": [], "ops.lookup_ops.MutableHashTable.export": ["ops.gen_lookup_ops.lookup_table_export_v2", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.lookup_ops.MutableHashTable._gather_saveables_for_checkpoint": ["functools.partial"], "ops.lookup_ops.MutableHashTable._Saveable.restore": ["ops.gen_lookup_ops.lookup_table_import_v2", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.lookup_ops.DenseHashTable.__init__": ["framework.ops.uid", "ops.lookup_ops.DenseHashTable._Saveable.__init__", "ops.lookup_ops.DenseHashTable._create_resource", "eager.context.executing_eagerly", "framework.ops.add_to_collection", "<builtin>.super", "framework.ops.convert_to_tensor"], "ops.lookup_ops.DenseHashTable._create_resource": ["framework.ops.convert_to_tensor", "eager.context.executing_eagerly", "ops.gen_lookup_ops.mutable_dense_hash_table_v2"], "ops.lookup_ops.DenseHashTable._Saveable.__init__": ["<builtin>.super", "saver.BaseSaverBuilder.SaveSpec", "ops.lookup_ops.DenseHashTable.export"], "ops.gen_lookup_ops.mutable_dense_hash_table_v2": [], "ops.lookup_ops.DenseHashTable.name": [], "ops.lookup_ops.DenseHashTable.size": ["ops.gen_lookup_ops.lookup_table_size_v2", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.lookup_ops.DenseHashTable.lookup": ["framework.ops.convert_to_tensor", "ops.gen_lookup_ops.lookup_table_find_v2", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.lookup_ops.DenseHashTable.insert_or_assign": ["ops.gen_lookup_ops.lookup_table_insert_v2", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.lookup_ops.DenseHashTable.insert": ["ops.lookup_ops.DenseHashTable.insert_or_assign"], "ops.lookup_ops.DenseHashTable.erase": ["<builtin>.TypeError", "framework.ops.name_scope", "ops.gen_lookup_ops.lookup_table_remove_v2"], "ops.lookup_ops.DenseHashTable.remove": ["ops.lookup_ops.DenseHashTable.erase"], "ops.lookup_ops.DenseHashTable.export": ["ops.gen_lookup_ops.lookup_table_export_v2", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.lookup_ops.DenseHashTable._gather_saveables_for_checkpoint": ["functools.partial"], "ops.lookup_ops.DenseHashTable._Saveable.restore": ["ops.gen_lookup_ops.lookup_table_import_v2", "framework.ops.name_scope", "framework.ops.colocate_with"], "ops.manip_grad": ["framework.ops.RegisterGradient"], "ops.manip_grad._RollGrad": ["ops.manip_ops.roll"], "ops.manip_ops": ["util.dispatch.add_dispatch_support", "util.deprecation.deprecated_endpoints", "util.tf_export.tf_export"], "ops.gen_manip_ops.roll": [], "ops.map_fn": ["util.deprecation.deprecated_args", "util.tf_export.tf_export", "util.deprecation.deprecated_arg_values", "re.sub"], "ops.map_fn.map_fn.<lambda1>": ["util.nest.pack_sequence_as"], "ops.map_fn._most_general_compatible_type": ["ragged.ragged_tensor.RaggedTensorSpec", "framework.tensor_spec.TensorSpec", "framework.sparse_tensor.SparseTensorSpec", "<builtin>.isinstance"], "ops.map_fn._dtype_to_spec": ["framework.tensor_spec.TensorSpec", "<builtin>.isinstance"], "ops.map_fn.map_fn.<lambda2>": ["util.nest.pack_sequence_as"], "ops.map_fn.map_fn.<lambda3>": [], "ops.map_fn._elems_flat_to_batchable": ["<builtin>.TypeError", "framework.type_spec.type_spec_from_value", "<builtin>.isinstance"], "ops.map_fn._result_flat_signature_to_batchable_tensor_spec": ["<builtin>.TypeError", "<builtin>.isinstance"], "ops.map_fn.map_fn.compute": ["<builtin>.zip", "ops.map_fn._elems_value_batchable_to_flat", "impl.api.tf_convert", "ops.map_fn._result_value_flat_to_batchable", "core.ag_ctx.control_status_ctx", "ops.map_fn.map_fn.<lambda1>", "util.nest.flatten", "util.nest.assert_same_structure"], "ops.map_fn._elems_value_batchable_to_flat": ["<builtin>.len"], "ops.map_fn._result_value_flat_to_batchable": ["<builtin>.isinstance", "<builtin>.ValueError", "framework.type_spec.type_spec_from_value", "<builtin>.zip"], "ops.map_fn.map_fn.<lambda4>": [], "ops.map_fn._result_batchable_to_flat": ["<builtin>.len"], "ops.map_fn.map_fn_v2": ["ops.map_fn.map_fn"], "ops.map_ops": ["framework.ops.NotDifferentiable", "framework.ops.RegisterGradient"], "ops.map_ops.empty_tensor_map": ["ops.gen_map_ops.empty_tensor_map"], "ops.gen_map_ops.empty_tensor_map": [], "ops.map_ops.tensor_map_size": ["ops.gen_map_ops.tensor_map_size"], "ops.gen_map_ops.tensor_map_size": [], "ops.map_ops.tensor_map_insert": ["ops.gen_map_ops.tensor_map_insert"], "ops.gen_map_ops.tensor_map_insert": [], "ops.map_ops.tensor_map_lookup": ["ops.gen_map_ops.tensor_map_lookup"], "ops.gen_map_ops.tensor_map_lookup": [], "ops.map_ops.tensor_map_erase": ["ops.gen_map_ops.tensor_map_erase"], "ops.gen_map_ops.tensor_map_erase": [], "ops.map_ops.tensor_map_has_key": ["ops.gen_map_ops.tensor_map_has_key"], "ops.gen_map_ops.tensor_map_has_key": [], "ops.map_ops.tensor_map_stack_keys": ["ops.gen_map_ops.tensor_map_stack_keys"], "ops.gen_map_ops.tensor_map_stack_keys": [], "ops.map_ops.LookupGrad": ["ops.map_ops.tensor_map_insert", "ops.map_ops.empty_tensor_map"], "ops.map_ops.InsertGrad": ["ops.control_flow_ops.cond", "ops.map_ops.tensor_map_has_key"], "ops.map_ops.InsertGrad.<lambda1>": ["ops.map_ops.tensor_map_erase", "ops.map_ops.tensor_map_lookup"], "ops.map_ops.InsertGrad.<lambda2>": ["ops.array_ops.zeros_like"], "ops.map_ops.EraseGrad": [], "ops.math_grad": ["framework.ops.NotDifferentiable", "framework.ops.RegisterGradient"], "ops.math_grad._safe_shape_div": ["ops.math_ops.maximum"], "ops.math_grad._ArgMaxGrad": [], "ops.math_grad._ArgMinGrad": [], "ops.math_grad._EuclideanNormGrad": ["ops.math_ops.truediv", "ops.array_ops.reshape", "ops.math_ops.reduced_shape", "ops.array_ops.shape"], "ops.math_grad.SmartBroadcastGradientArgs": ["ops.array_ops.broadcast_gradient_args", "<builtin>.isinstance", "<builtin>.tuple", "ops.gen_array_ops.broadcast_gradient_args", "eager.context.executing_eagerly", "client.pywrap_tf_session.TF_TryEvaluateConstant_wrapper", "ops.array_ops.shape_internal", "framework.ops.get_default_graph", "ops.array_ops.shape"], "ops.math_grad._IsScalar": [], "ops.math_grad._SumGrad": ["ops.math_ops.reduced_shape", "<builtin>.len", "<builtin>.tuple", "ops.array_ops.reshape", "ops.math_grad._safe_shape_div", "eager.context.executing_eagerly", "numpy.array_equal", "framework.ops.colocate_with", "framework.tensor_util.constant_value", "numpy.arange", "ops.math_grad._SumGrad.EvaluateAsTuple", "ops.array_ops.tile", "framework.constant_op.constant", "eager.context.context", "framework.ops.get_default_graph", "ops.array_ops.shape"], "ops.math_grad._SumGrad.EvaluateAsTuple": ["<builtin>.tuple", "client.pywrap_tf_session.TF_TryEvaluateConstant_wrapper", "framework.tensor_util.is_tf_type"], "ops.math_grad._MinOrMaxGrad": ["ops.math_ops.reduced_shape", "ops.array_ops.reshape", "ops.math_ops.cast", "ops.array_ops.shape", "ops.math_ops.divide", "ops.math_ops.reduce_sum", "ops.math_ops.equal"], "ops.math_grad._MaxGrad": ["ops.math_grad._MinOrMaxGrad"], "ops.math_grad._MinGrad": ["ops.math_grad._MinOrMaxGrad"], "ops.math_grad._MeanGrad": ["ops.math_ops.reduce_prod", "ops.math_grad._safe_shape_div", "ops.math_ops.cast", "ops.math_grad._SumGrad", "numpy.prod", "ops.math_ops.truediv", "<builtin>.max", "framework.constant_op.constant", "ops.array_ops.shape"], "ops.math_grad._ProdGrad": ["ops.math_ops.reduced_shape", "ops.math_ops.conj", "ops.math_ops.reduce_prod", "ops.array_ops.invert_permutation", "framework.ops.device", "ops.array_ops.reshape", "ops.array_ops.broadcast_to", "ops.math_ops.cast", "ops.math_ops.range", "ops.array_ops.rank", "ops.array_ops.gather", "ops.array_ops.transpose", "ops.math_ops.cumprod", "ops.gen_array_ops.list_diff", "ops.array_ops.concat", "ops.array_ops.shape"], "ops.math_grad._SegmentSumGrad": ["ops.array_ops.gather"], "ops.math_grad._SegmentMeanGrad": ["ops.math_ops.segment_sum", "ops.array_ops.rank", "ops.array_ops.gather", "ops.array_ops.expand_dims", "ops.math_ops.divide", "ops.array_ops.ones", "ops.array_ops.concat", "ops.array_ops.shape"], "ops.math_grad._SparseSegmentSumGrad": ["ops.array_ops.shape", "compat.compat.forward_compatible", "ops.array_ops.gather", "ops.math_ops.unsorted_segment_sum", "ops.math_ops.sparse_segment_sum_grad"], "ops.math_ops.sparse_segment_sum_grad": [], "ops.math_grad._SparseSegmentSumWithNumSegmentsGrad": ["ops.array_ops.shape", "compat.compat.forward_compatible", "ops.array_ops.gather", "ops.math_ops.unsorted_segment_sum", "ops.math_ops.sparse_segment_sum_grad"], "ops.math_grad._SparseSegmentMeanGrad": ["ops.math_ops.sparse_segment_mean_grad", "ops.array_ops.shape"], "ops.math_ops.sparse_segment_mean_grad": [], "ops.math_grad._SparseSegmentMeanWithNumSegmentsGrad": ["ops.math_ops.sparse_segment_mean_grad", "ops.array_ops.shape"], "ops.math_grad._SparseSegmentSqrtNGrad": ["ops.math_ops.sparse_segment_sqrt_n_grad", "ops.array_ops.shape"], "ops.math_ops.sparse_segment_sqrt_n_grad": [], "ops.math_grad._SparseSegmentSqrtNWithNumSegmentsGrad": ["ops.math_ops.sparse_segment_sqrt_n_grad", "ops.array_ops.shape"], "ops.math_grad._SegmentMinOrMaxGrad": ["ops.math_ops.cast", "ops.math_ops.segment_sum", "ops.array_ops.where_v2", "ops.array_ops.gather", "ops.array_ops.zeros_like", "ops.math_ops.divide", "ops.math_ops.equal"], "ops.math_grad._SegmentMinGrad": ["ops.math_grad._SegmentMinOrMaxGrad"], "ops.math_grad._SegmentMaxGrad": ["ops.math_grad._SegmentMinOrMaxGrad"], "ops.math_grad._SegmentProdGrad": ["ops.array_ops.ones_like", "ops.math_ops.cast", "ops.math_ops.greater", "ops.array_ops.where_v2", "ops.array_ops.gather", "ops.array_ops.zeros_like", "ops.gen_math_ops.segment_prod", "ops.gen_math_ops.segment_sum", "ops.math_ops.equal"], "ops.gen_math_ops.segment_sum": [], "ops.gen_math_ops.segment_prod": [], "ops.math_grad._GatherDropNegatives": ["ops.math_ops.maximum", "ops.array_ops.ones_like", "ops.array_ops.reshape", "ops.array_ops.rank", "ops.array_ops.where_v2", "ops.array_ops.gather", "ops.math_ops.greater_equal", "ops.array_ops.zeros_like", "ops.array_ops.ones", "ops.array_ops.concat", "ops.array_ops.shape"], "ops.math_grad._UnsortedSegmentMinOrMaxGrad": ["ops.math_grad._GatherDropNegatives", "ops.math_ops.logical_and", "ops.math_ops.cast", "ops.array_ops.where_v2", "ops.math_ops.divide", "ops.math_ops.unsorted_segment_sum", "ops.array_ops.zeros_like", "ops.math_ops.equal"], "ops.math_grad._UnsortedSegmentSumGrad": ["ops.math_grad._GatherDropNegatives"], "ops.math_grad._UnsortedSegmentMaxGrad": ["ops.math_grad._UnsortedSegmentMinOrMaxGrad"], "ops.math_grad._UnsortedSegmentMinGrad": ["ops.math_grad._UnsortedSegmentMinOrMaxGrad"], "ops.math_grad._UnsortedSegmentProdGrad": ["ops.gen_math_ops.unsorted_segment_sum", "ops.math_ops.maximum", "ops.array_ops.ones_like", "ops.math_grad._GatherDropNegatives", "ops.math_ops.cast", "ops.gen_math_ops.unsorted_segment_prod", "ops.math_ops.greater", "ops.array_ops.where_v2", "ops.array_ops.gather", "ops.array_ops.zeros_like", "ops.math_ops.equal"], "ops.gen_math_ops.unsorted_segment_prod": [], "ops.math_grad._AbsGrad": ["ops.math_ops.sign"], "ops.math_grad._NegGrad": [], "ops.math_grad._InvGrad": ["ops.gen_math_ops.reciprocal_grad"], "ops.gen_math_ops.reciprocal_grad": [], "ops.math_grad._ReciprocalGrad": ["ops.gen_math_ops.reciprocal_grad"], "ops.math_grad._InvGradGrad": ["ops.gen_math_ops.reciprocal_grad", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._ReciprocalGradGrad": ["ops.gen_math_ops.reciprocal_grad", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._SquareGrad": ["ops.math_ops.multiply", "framework.constant_op.constant", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._SqrtGrad": ["ops.gen_math_ops.sqrt_grad"], "ops.gen_math_ops.sqrt_grad": [], "ops.math_grad._SqrtGradGrad": ["ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._RsqrtGrad": ["ops.gen_math_ops.rsqrt_grad"], "ops.gen_math_ops.rsqrt_grad": [], "ops.math_grad._RsqrtGradGrad": ["ops.gen_math_ops.rsqrt_grad", "ops.math_ops.conj", "ops.math_ops.square", "framework.ops.control_dependencies"], "ops.math_grad._ExpGrad": ["ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._Expm1Grad": ["ops.math_ops.exp", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._LogGrad": ["ops.math_ops.conj", "ops.math_ops.reciprocal", "framework.ops.control_dependencies"], "ops.math_grad._Log1pGrad": ["ops.math_ops.conj", "ops.math_ops.reciprocal", "framework.ops.control_dependencies"], "ops.math_grad._XLogyGrad": ["framework.ops.control_dependencies", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.math_ops.cast", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.not_equal", "ops.gen_math_ops.xlogy", "ops.gen_math_ops.xdivy", "ops.array_ops.shape"], "ops.gen_math_ops.xlogy": [], "ops.gen_math_ops.xdivy": [], "ops.math_grad._XLog1pyGrad": ["framework.ops.control_dependencies", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.math_ops.cast", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.not_equal", "ops.gen_math_ops.xlog1py", "ops.gen_math_ops.xdivy", "ops.array_ops.shape"], "ops.gen_math_ops.xlog1py": [], "ops.math_grad._XDivyGrad": ["framework.ops.control_dependencies", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.math_ops.cast", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.negative", "ops.math_ops.not_equal", "ops.gen_math_ops.xdivy", "ops.array_ops.shape"], "ops.math_grad._SinhGrad": ["ops.math_ops.cosh", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._CoshGrad": ["ops.math_ops.sinh", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._TanhGrad": ["ops.math_ops.conj", "ops.gen_math_ops.tanh_grad", "framework.ops.control_dependencies"], "ops.math_grad._AsinhGrad": ["ops.math_ops.cosh", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._AcoshGrad": ["ops.math_ops.sinh", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._AtanhGrad": ["ops.math_ops.conj", "framework.ops.control_dependencies", "ops.math_ops.reciprocal", "framework.constant_op.constant", "ops.math_ops.subtract", "ops.math_ops.square"], "ops.math_grad._TanhGradGrad": ["ops.math_ops.conj", "ops.gen_math_ops.tanh_grad", "framework.ops.control_dependencies"], "ops.math_grad._ErfGrad": ["ops.math_ops.conj", "framework.ops.control_dependencies", "numpy.sqrt", "ops.math_ops.exp", "framework.constant_op.constant", "ops.math_ops.square"], "ops.math_grad._ErfcGrad": ["ops.math_ops.conj", "framework.ops.control_dependencies", "numpy.sqrt", "ops.math_ops.exp", "framework.constant_op.constant", "ops.math_ops.square"], "ops.math_grad._ErfinvGrad": ["framework.ops.control_dependencies", "numpy.sqrt", "ops.math_ops.exp", "framework.constant_op.constant", "ops.math_ops.square"], "ops.math_grad._NdtriGrad": ["framework.ops.control_dependencies", "numpy.sqrt", "ops.math_ops.exp", "framework.constant_op.constant", "ops.math_ops.square"], "ops.math_grad._LgammaGrad": ["ops.math_ops.digamma", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._DigammaGrad": ["ops.math_ops.polygamma", "ops.math_ops.conj", "framework.ops.control_dependencies", "ops.array_ops.constant"], "ops.math_ops.polygamma": [], "ops.math_grad._DawsnGrad": ["framework.ops.control_dependencies"], "ops.math_grad._ExpintGrad": ["ops.math_ops.exp", "framework.ops.control_dependencies"], "ops.math_grad._FresnelCosGrad": ["ops.math_ops.cos", "ops.math_ops.square", "framework.ops.control_dependencies"], "ops.math_grad._FresnelSinGrad": ["ops.math_ops.sin", "ops.math_ops.square", "framework.ops.control_dependencies"], "ops.math_grad._SpenceGrad": ["ops.array_ops.ones_like", "framework.ops.control_dependencies", "ops.array_ops.where", "ops.math_ops.log", "ops.math_ops.equal"], "ops.math_grad._BesselI0Grad": ["ops.special_math_ops.bessel_i1", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_i1": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_i1"], "ops.math_grad._BesselI0eGrad": ["ops.special_math_ops.bessel_i1e", "ops.math_ops.sign", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_i1e": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_i1e"], "ops.math_grad._BesselI1Grad": ["framework.ops.control_dependencies", "ops.math_ops.div", "ops.math_ops.cast", "ops.array_ops.where_v2", "ops.special_math_ops.bessel_i0", "ops.math_ops.equal"], "ops.special_math_ops.bessel_i0": ["ops.gen_special_math_ops.bessel_i0", "framework.ops.name_scope"], "ops.math_grad._BesselI1eGrad": ["ops.math_ops.sign", "framework.ops.control_dependencies", "ops.math_ops.cast", "ops.array_ops.where_v2", "ops.math_ops.reciprocal", "ops.special_math_ops.bessel_i0e", "ops.math_ops.equal"], "ops.math_grad._BesselK0Grad": ["ops.special_math_ops.bessel_k1", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_k1": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_k1"], "ops.math_grad._BesselK0eGrad": ["ops.special_math_ops.bessel_k1e", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_k1e": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_k1e"], "ops.math_grad._BesselK1Grad": ["ops.math_ops.div", "ops.special_math_ops.bessel_k0", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_k0": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_k0"], "ops.math_grad._BesselK1eGrad": ["ops.special_math_ops.bessel_k0e", "ops.math_ops.reciprocal", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_k0e": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_k0e"], "ops.math_grad._BesselJ0Grad": ["ops.special_math_ops.bessel_j1", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_j1": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_j1"], "ops.math_grad._BesselJ1Grad": ["framework.ops.control_dependencies", "ops.math_ops.div", "ops.math_ops.cast", "ops.array_ops.where_v2", "ops.special_math_ops.bessel_j0", "ops.math_ops.equal"], "ops.special_math_ops.bessel_j0": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_j0"], "ops.math_grad._BesselY0Grad": ["ops.special_math_ops.bessel_y1", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_y1": ["ops.gen_special_math_ops.bessel_y1", "framework.ops.name_scope"], "ops.math_grad._BesselY1Grad": ["ops.math_ops.div", "ops.special_math_ops.bessel_y0", "framework.ops.control_dependencies"], "ops.special_math_ops.bessel_y0": ["framework.ops.name_scope", "ops.gen_special_math_ops.bessel_y0"], "ops.math_grad._IgammaGrad": ["framework.ops.control_dependencies", "ops.array_ops.reshape", "ops.math_ops.lgamma", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.log", "ops.gen_math_ops.igamma_grad_a", "ops.math_ops.exp", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.gen_math_ops.igamma_grad_a": [], "ops.math_grad._IgammacGrad": ["ops.math_grad._IgammaGrad"], "ops.math_grad._BetaincGrad": ["ops.math_ops.xlog1py", "ops.gen_math_ops.lgamma", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.xlogy", "ops.math_ops.exp", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.gen_math_ops.lgamma": [], "ops.math_ops.xlog1py": ["framework.ops.name_scope", "ops.gen_math_ops.xlog1py"], "ops.math_grad._ZetaGrad": ["ops.math_ops.conj", "framework.ops.control_dependencies", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.zeta", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_ops.zeta": [], "ops.math_grad._PolygammaGrad": ["ops.math_ops.conj", "framework.ops.control_dependencies", "ops.math_ops.polygamma", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_grad._SigmoidGrad": ["ops.gen_math_ops.sigmoid_grad", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.gen_math_ops.sigmoid_grad": [], "ops.math_grad._SigmoidGradGrad": ["ops.gen_math_ops.sigmoid_grad", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._SignGrad": ["ops.array_ops.zeros_like"], "ops.math_grad._SinGrad": ["ops.math_ops.conj", "ops.math_ops.cos", "framework.ops.control_dependencies"], "ops.math_grad._CosGrad": ["ops.math_ops.sin", "ops.math_ops.conj", "framework.ops.control_dependencies"], "ops.math_grad._TanGrad": ["ops.math_ops.conj", "ops.math_ops.cos", "framework.ops.control_dependencies", "ops.math_ops.reciprocal", "ops.math_ops.square"], "ops.math_grad._AsinGrad": ["ops.math_ops.sqrt", "ops.math_ops.conj", "framework.ops.control_dependencies", "ops.math_ops.reciprocal", "framework.constant_op.constant", "ops.math_ops.subtract", "ops.math_ops.square"], "ops.math_grad._AcosGrad": ["ops.math_ops.sqrt", "ops.math_ops.conj", "framework.ops.control_dependencies", "ops.math_ops.reciprocal", "framework.constant_op.constant", "ops.math_ops.subtract", "ops.math_ops.square"], "ops.math_grad._AtanGrad": ["ops.math_ops.conj", "framework.ops.control_dependencies", "ops.math_ops.reciprocal", "ops.math_ops.add", "framework.constant_op.constant", "ops.math_ops.square"], "ops.math_grad._Atan2Grad": ["ops.math_ops.square", "framework.ops.control_dependencies"], "ops.math_grad._AddNGrad": ["<builtin>.len"], "ops.math_grad._ShapesFullySpecifiedAndEqual": [], "ops.math_grad._AddGrad": ["ops.math_ops.reduce_sum", "<builtin>.isinstance", "ops.math_grad._ShapesFullySpecifiedAndEqual", "ops.array_ops.reshape", "ops.math_grad._IsScalar", "ops.math_grad.SmartBroadcastGradientArgs"], "ops.math_grad._SubGrad": ["ops.math_ops.reduce_sum", "<builtin>.isinstance", "ops.math_grad._ShapesFullySpecifiedAndEqual", "ops.array_ops.reshape", "ops.math_grad._IsScalar", "ops.math_grad.SmartBroadcastGradientArgs"], "ops.math_grad._MulGrad": ["ops.math_ops.conj", "<builtin>.isinstance", "ops.math_ops.reduce_sum", "ops.math_grad._ShapesFullySpecifiedAndEqual", "ops.array_ops.reshape", "ops.gen_math_ops.mul", "ops.math_grad._IsScalar", "ops.math_grad.SmartBroadcastGradientArgs"], "ops.gen_math_ops.mul": [], "ops.math_grad._MulNoNanGrad": ["ops.gen_math_ops.mul_no_nan", "<builtin>.isinstance", "ops.math_grad._ShapesFullySpecifiedAndEqual", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.gen_math_ops.mul_no_nan": [], "ops.math_grad._DivGrad": ["ops.math_ops.conj", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.divide", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_grad._FloorDivGrad": [], "ops.math_grad._FloorModGrad": ["ops.math_ops.conj", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.floor_div", "ops.math_ops.negative", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_ops.floor_div": [], "ops.math_grad._TruncateDivGrad": [], "ops.math_grad._RealDivGrad": ["ops.math_ops.conj", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.realdiv", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_ops.realdiv": [], "ops.math_grad._DivNoNanGrad": ["ops.math_ops.conj", "ops.math_ops.div_no_nan", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_grad._PowGrad": ["ops.math_ops.conj", "ops.array_ops.ones_like", "ops.math_ops.pow", "ops.array_ops.reshape", "ops.array_ops.where", "ops.math_ops.not_equal", "ops.math_ops.log", "ops.array_ops.zeros_like", "ops.math_grad._IsScalar", "ops.math_grad.SmartBroadcastGradientArgs", "ops.math_ops.reduce_sum"], "ops.math_grad._MaximumMinimumGradInputOnly": ["ops.array_ops.where_v2", "ops.math_ops.greater_equal", "ops.math_ops.less_equal", "ops.array_ops.zeros_like"], "ops.math_grad._MaximumMinimumGrad": ["ops.array_ops.reshape", "ops.math_grad._MaximumMinimumGradInputOnly", "ops.gen_array_ops.broadcast_gradient_args", "ops.array_ops.where_v2", "ops.math_ops.greater_equal", "ops.array_ops.zeros_like", "ops.math_grad._IsScalar", "ops.math_ops.less_equal", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_grad._MaximumGrad": ["ops.math_grad._MaximumMinimumGrad"], "ops.math_grad._MinimumGrad": ["ops.math_grad._MaximumMinimumGrad"], "ops.math_grad._SquaredDifferenceGrad": ["<builtin>.isinstance", "framework.ops.control_dependencies", "ops.math_grad._ShapesFullySpecifiedAndEqual", "ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.math_ops.scalar_mul", "ops.math_grad.SmartBroadcastGradientArgs"], "ops.math_grad._SelectGrad": ["ops.array_ops.where", "ops.array_ops.zeros_like"], "ops.math_grad._SelectGradV2": ["ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.array_ops.where_v2", "ops.array_ops.zeros", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_grad._MatMulGradAgainstFirstOnly": ["ops.gen_math_ops.mat_mul", "ops.math_ops.conj"], "ops.math_grad._MatMulGradAgainstSecondOnly": ["ops.gen_math_ops.mat_mul", "ops.math_ops.conj"], "ops.math_grad._MatMulGrad": ["ops.gen_math_ops.mat_mul", "ops.math_grad._MatMulGradAgainstFirstOnly", "ops.math_ops.conj", "ops.math_grad._MatMulGradAgainstSecondOnly"], "ops.math_grad._SparseMatMulGrad": ["ops.math_grad._SparseMatMulGrad._SparseMatMul", "eager.context.executing_eagerly"], "ops.math_grad._SparseMatMulGrad._SparseMatMul": ["ops.array_ops.transpose", "ops.math_ops.matmul", "ops.math_ops.cast"], "ops.math_grad._FloorGrad": [], "ops.math_grad._CeilGrad": [], "ops.math_grad._RoundGrad": [], "ops.math_grad._RintGrad": [], "ops.math_grad._BatchMatMul": ["ops.math_ops.matmul"], "ops.math_grad._BatchMatMulV2": ["ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.matmul", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_grad._ComplexGrad": ["ops.math_ops.imag", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.math_ops.real", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_grad._RealGrad": ["ops.math_ops.complex", "framework.constant_op.constant"], "ops.math_grad._ImagGrad": ["ops.math_ops.complex", "framework.constant_op.constant"], "ops.math_grad._AngleGrad": ["framework.ops.control_dependencies", "ops.math_ops.imag", "ops.math_ops.real", "ops.math_ops.complex", "ops.math_ops.reciprocal", "framework.constant_op.constant"], "ops.math_grad._ConjGrad": ["ops.math_ops.conj"], "ops.math_grad._ComplexAbsGrad": ["ops.math_ops.complex", "ops.math_ops.div_no_nan", "ops.array_ops.zeros_like"], "ops.math_grad._CastGrad": ["ops.math_ops.cast"], "ops.math_grad._CrossGrad": ["ops.math_ops.cross"], "ops.math_grad._CumsumGrad": ["ops.math_ops.cumsum"], "ops.math_grad._CumprodGrad": ["ops.math_ops.cumprod", "ops.math_ops.div_no_nan", "ops.math_ops.cumsum"], "ops.math_grad._CumulativeLogsumexpGrad": ["ops.math_ops.cumulative_logsumexp", "ops.math_ops.less", "ops.math_ops.greater", "ops.array_ops.where_v2", "ops.math_ops.log", "ops.math_ops.exp"], "ops.math_ops.cumulative_logsumexp": ["framework.ops.name_scope", "ops.gen_math_ops.cumulative_logsumexp", "framework.ops.convert_to_tensor"], "ops.math_grad._NextAfterGrad": ["framework.ops.control_dependencies", "ops.array_ops.reshape", "ops.gen_array_ops.broadcast_gradient_args", "ops.array_ops.ones", "ops.array_ops.zeros", "ops.math_ops.reduce_sum", "ops.array_ops.shape"], "ops.math_ops": ["util.dispatch.add_dispatch_support", "ops.Tensor._override_operator", "ops.math_ops._promote_dtypes_decorator", "util.deprecation.deprecated", "framework.ops.RegisterGradient", "arg_min.__doc__.replace", "util.deprecation.deprecated_endpoints", "util.lazy_loader.LazyLoader", "arg_max.__doc__.replace", "ops.math_ops._set_doc", "<builtin>.globals", "ops.math_ops._set_doc._decorator", "ops.math_ops._OverrideBinaryOperatorHelper", "framework.ops.register_tensor_conversion_function", "framework.ops.RegisterStatistics", "util.deprecation.deprecated_args", "util.tf_export.tf_export"], "ops.math_ops.linspace_nd": ["ops.array_ops.broadcast_dynamic_shape", "ops.array_ops.broadcast_to", "ops.gen_math_ops.equal", "ops.math_ops.range", "framework.ops.name_scope", "ops.array_ops.shape", "ops.array_ops.zeros_like", "ops.array_ops.expand_dims", "ops.array_ops.slice", "ops.array_ops.where_v2", "ops.gen_math_ops.maximum", "ops.array_ops.concat", "ops.array_ops.convert_to_int_tensor", "ops.math_ops.cast", "ops.array_ops.reshape", "framework.ops.convert_to_tensor"], "ops.math_ops._set_doc": [], "ops.math_ops._set_doc._decorator": [], "arg_max.__doc__.replace": [], "ops.math_ops.argmax_v2": ["ops.gen_math_ops.arg_max"], "ops.gen_math_ops.arg_max": [], "arg_min.__doc__.replace": [], "ops.math_ops.argmin_v2": ["ops.gen_math_ops.arg_min"], "ops.gen_math_ops.arg_min": [], "ops.gen_math_ops.complex_abs": [], "ops.gen_math_ops._abs": [], "ops.gen_math_ops.bucketize": [], "ops.math_ops.DivideDelegateWithName.__init__": [], "ops.math_ops.DivideDelegateWithName.__truediv__": ["ops.math_ops._truediv_python3"], "ops.math_ops._truediv_python3": ["framework.ops.name_scope", "<builtin>.TypeError", "ops.gen_math_ops.real_div", "<builtin>.repr", "ops.math_ops.cast", "framework.ops.convert_to_tensor"], "ops.math_ops.DivideDelegateWithName.__floordiv__": ["ops.math_ops.floordiv"], "ops.math_ops.DivideDelegateWithName.__div__": ["ops.math_ops._div_python2"], "ops.math_ops._div_python2": ["<builtin>.TypeError", "ops.gen_math_ops.floor_div", "ops.gen_math_ops.real_div", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.math_ops._mul": ["ops.gen_math_ops.mul"], "ops.gen_math_ops.sub": [], "ops.math_ops._sub": ["ops.gen_math_ops.sub"], "ops.math_ops._neg": ["ops.gen_math_ops.neg"], "ops.gen_math_ops.neg": [], "ops.gen_nn_ops.softplus": [], "ops.math_ops.scalar_mul_v2": ["framework.ops.name_scope", "ops.math_ops.scalar_mul"], "ops.gen_math_ops._pow": [], "ops.gen_math_ops._complex": [], "ops.gen_math_ops.div_no_nan": [], "ops.gen_math_ops.sign": [], "ops.gen_math_ops.real": [], "ops.gen_math_ops.imag": [], "ops.gen_math_ops.angle": [], "ops.gen_math_ops.round": [], "ops.math_ops.to_float": ["ops.math_ops.cast"], "ops.math_ops.to_double": ["ops.math_ops.cast"], "ops.math_ops.to_int32": ["ops.math_ops.cast"], "ops.math_ops.to_int64": ["ops.math_ops.cast"], "ops.math_ops.to_bfloat16": ["ops.math_ops.cast"], "ops.math_ops.to_complex64": ["ops.math_ops.cast"], "ops.math_ops.to_complex128": ["ops.math_ops.cast"], "ops.math_ops._maybe_get_dtype": ["<builtin>.isinstance", "<builtin>.ValueError"], "ops.math_ops.maybe_promote_tensors": ["util.nest.flatten", "ops.math_ops._maybe_get_dtype", "framework.ops.convert_to_tensor", "ops.math_ops.maybe_promote_tensors._promote_or_cast"], "ops.math_ops.maybe_promote_tensors._promote_or_cast": ["<builtin>.isinstance", "ops.math_ops.cast", "framework.ops.convert_to_tensor"], "ops.math_ops._OverrideBinaryOperatorHelper": ["sparse_tensor.SparseTensor._override_operator", "util.traceback_utils.filter_traceback"], "ops.math_ops._OverrideBinaryOperatorHelper.binary_op_wrapper": ["ops.math_ops.div", "ops.math_ops.matmul_wrapper", "ops.gen_math_ops.floor_mod", "ops.math_ops.floordiv", "ops.math_ops.truediv", "ops.math_ops.xor_", "<builtin>.getattr", "<builtin>.type", "ops.math_ops.and_", "ops.math_ops._add_dispatch", "framework.ops.name_scope", "<builtin>.hasattr", "ops.math_ops.subtract", "ops.math_ops._mul_dispatch", "ops.math_ops.maybe_promote_tensors", "ops.math_ops.pow", "ops.gen_sparse_ops.sparse_dense_cwise_div", "ops.math_ops.or_", "ops.gen_sparse_ops.sparse_dense_cwise_mul", "ops.math_ops._sparse_dense_truediv"], "ops.math_ops._mul_dispatch": ["<builtin>.isinstance", "framework.sparse_tensor.SparseTensor", "ops.math_ops.multiply", "ops.gen_sparse_ops.sparse_dense_cwise_mul"], "ops.gen_sparse_ops.sparse_dense_cwise_div": [], "ops.math_ops.xor_": ["ops.gen_bitwise_ops.bitwise_xor", "ops.math_ops.logical_xor"], "ops.math_ops.or_": ["ops.gen_bitwise_ops.bitwise_or", "ops.gen_math_ops.logical_or"], "ops.math_ops.and_": ["ops.gen_math_ops.logical_and", "ops.gen_bitwise_ops.bitwise_and"], "ops.gen_sparse_ops.sparse_dense_cwise_mul": [], "ops.math_ops._add_dispatch": ["<builtin>.isinstance", "ops.gen_math_ops.add", "ops.gen_math_ops.add_v2", "framework.ops.convert_to_tensor"], "ops.math_ops.matmul_wrapper": ["ops.math_ops.matmul"], "ops.math_ops._sparse_dense_truediv": ["framework.ops.name_scope", "<builtin>.TypeError", "ops.gen_sparse_ops.sparse_dense_cwise_div", "<builtin>.repr", "ops.math_ops.cast", "framework.ops.convert_to_tensor"], "ops.gen_math_ops.floor_mod": [], "ops.math_ops._OverrideBinaryOperatorHelper.binary_op_wrapper_sparse": ["ops.math_ops.floordiv", "ops.math_ops.truediv", "ops.math_ops.subtract", "ops.math_ops._mul_dispatch", "ops.math_ops.pow", "ops.gen_sparse_ops.sparse_dense_cwise_div", "framework.sparse_tensor.SparseTensor", "ops.math_ops.xor_", "ops.math_ops.div", "ops.math_ops.or_", "ops.math_ops.and_", "ops.gen_sparse_ops.sparse_dense_cwise_mul", "ops.math_ops._add_dispatch", "ops.math_ops.matmul_wrapper", "framework.ops.name_scope", "ops.math_ops._sparse_dense_truediv", "framework.ops.convert_to_tensor", "ops.gen_math_ops.floor_mod"], "ops.math_ops._OverrideBinaryOperatorHelper.r_binary_op_wrapper": ["ops.math_ops.floordiv", "ops.math_ops.truediv", "ops.math_ops.subtract", "ops.math_ops._mul_dispatch", "ops.math_ops.maybe_promote_tensors", "ops.math_ops.pow", "ops.gen_sparse_ops.sparse_dense_cwise_div", "ops.math_ops.xor_", "ops.math_ops.div", "ops.math_ops.or_", "ops.math_ops.and_", "ops.gen_sparse_ops.sparse_dense_cwise_mul", "ops.math_ops._add_dispatch", "ops.math_ops.matmul_wrapper", "framework.ops.name_scope", "ops.math_ops._sparse_dense_truediv", "ops.gen_math_ops.floor_mod"], "sparse_tensor.SparseTensor._override_operator": [], "ops.gen_math_ops.real_div": [], "ops.gen_math_ops.floor_div": [], "ops.math_ops.multiply_no_nan": ["<builtin>.TypeError", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.gen_math_ops.mul_no_nan"], "ops.gen_math_ops.add_v2": [], "ops.gen_math_ops.logical_or": [], "ops.gen_math_ops.logical_and": [], "ops.gen_bitwise_ops.bitwise_and": [], "ops.gen_bitwise_ops.bitwise_or": [], "ops.gen_bitwise_ops.bitwise_xor": [], "ops.math_ops.invert_": ["ops.gen_math_ops.logical_not", "ops.gen_bitwise_ops.invert"], "ops.gen_bitwise_ops.invert": [], "ops.math_ops._promote_dtypes_decorator": ["util.tf_decorator.make_decorator"], "ops.math_ops._promote_dtypes_decorator.wrapper": ["ops.math_ops.maybe_promote_tensors", "ops.gen_math_ops.less_equal", "ops.gen_math_ops.greater_equal", "ops.gen_math_ops.less", "ops.gen_math_ops.greater"], "ops.gen_math_ops.greater": [], "ops.gen_math_ops.less_equal": [], "ops.gen_math_ops.less": [], "ops.gen_math_ops.greater_equal": [], "ops.math_ops.tensor_equals": ["framework.ops.executing_eagerly_outside_functions", "<builtin>.getattr", "ops.math_ops.maybe_promote_tensors", "ops.gen_math_ops.equal"], "ops.math_ops.tensor_not_equals": ["framework.ops.executing_eagerly_outside_functions", "ops.gen_math_ops.not_equal", "ops.math_ops.maybe_promote_tensors"], "ops.math_ops._range_tensor_conversion_function": ["ops.math_ops.range"], "ops.math_ops._ReductionDims": ["numpy.arange", "ops.math_ops.range", "ops.array_ops.rank", "framework.constant_op.constant", "<builtin>.isinstance"], "ops.math_ops._has_fully_defined_shape": ["<builtin>.isinstance"], "ops.math_ops._may_reduce_to_scalar": ["ops.math_ops._has_fully_defined_shape"], "ops.math_ops.reduce_sum_v1": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.reduce_sum"], "ops.math_ops.reduce_sum_with_dims": ["ops.gen_math_ops._sum", "ops.math_ops._may_reduce_to_scalar", "<builtin>.bool"], "ops.math_ops.reduce_euclidean_norm": ["ops.math_ops._ReductionDims", "ops.gen_math_ops.euclidean_norm", "ops.math_ops._may_reduce_to_scalar", "<builtin>.bool"], "ops.gen_math_ops.euclidean_norm": [], "ops.math_ops.reduce_mean_v1": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.reduce_mean"], "ops.gen_math_ops.mean": [], "ops.gen_math_ops.conj": [], "ops.gen_math_ops.square": [], "ops.gen_math_ops.sqrt": [], "ops.math_ops.reduce_prod_v1": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.reduce_prod"], "ops.math_ops.reduce_min_v1": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.reduce_min"], "ops.gen_math_ops._min": [], "ops.math_ops.reduce_max_v1": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.reduce_max"], "ops.math_ops.reduce_max_with_dims": ["ops.gen_math_ops._max", "ops.math_ops._may_reduce_to_scalar", "<builtin>.bool"], "ops.math_ops.reduce_all_v1": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.reduce_all"], "ops.gen_math_ops._all": [], "ops.math_ops.reduce_any_v1": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.reduce_any"], "ops.gen_math_ops._any": [], "ops.math_ops.reduce_logsumexp_v1": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops.reduce_logsumexp"], "ops.gen_math_ops.is_finite": [], "ops.gen_math_ops.exp": [], "ops.gen_math_ops.log": [], "ops.gen_math_ops.batch_mat_mul_v3": [], "ops.gen_math_ops.batch_mat_mul_v2": [], "ops.math_ops._calc_mat_mul_flops": ["<builtin>.int", "numpy.prod", "framework.ops.OpStats", "framework.graph_util.tensor_shape_from_node_def_name"], "ops.math_ops._calc_batch_mat_mul_flops": ["<builtin>.int", "numpy.prod", "framework.ops.OpStats", "framework.graph_util.tensor_shape_from_node_def_name"], "ops.math_ops.accumulate_n": ["framework.ops.convert_n_to_tensor_or_indexed_slices", "ops.array_ops.identity", "<builtin>.TypeError", "framework.tensor_shape.as_shape", "ops.math_ops.accumulate_n._input_error", "framework.tensor_shape.unknown_shape", "<builtin>.isinstance", "ops.math_ops.add_n", "<builtin>.len", "<builtin>.all"], "ops.math_ops.accumulate_n._input_error": ["<builtin>.ValueError"], "ops.math_ops._accumulate_n_grad": ["<builtin>.len"], "ops.gen_math_ops.sigmoid": [], "ops.math_ops.log_sigmoid": ["framework.ops.name_scope", "ops.gen_math_ops.neg", "framework.ops.convert_to_tensor", "ops.gen_nn_ops.softplus"], "ops.gen_math_ops.cumsum": [], "ops.gen_math_ops.cumprod": [], "ops.gen_math_ops.cumulative_logsumexp": [], "ops.gen_data_flow_ops.dynamic_stitch": [], "ops.math_ops._unsorted_segment_N": ["ops.array_ops.ones", "ops.gen_math_ops.unsorted_segment_sum", "ops.array_ops.rank", "ops.array_ops.shape_internal", "ops.gen_math_ops.maximum", "ops.array_ops.concat", "ops.array_ops.reshape", "framework.ops.convert_to_tensor"], "ops.math_ops.unsorted_segment_mean": ["ops.gen_math_ops.unsorted_segment_sum", "ops.math_ops._unsorted_segment_N", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.math_ops.unsorted_segment_sqrt_n": ["ops.gen_math_ops.sqrt", "ops.gen_math_ops.unsorted_segment_sum", "ops.math_ops._unsorted_segment_N", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.gen_math_ops.sparse_segment_sum_with_num_segments": [], "ops.gen_math_ops.sparse_segment_sum": [], "ops.math_ops.sparse_segment_sum_v2": ["ops.math_ops.sparse_segment_sum"], "ops.gen_math_ops.sparse_segment_mean_with_num_segments": [], "ops.gen_math_ops.sparse_segment_mean": [], "ops.math_ops.sparse_segment_mean_v2": ["ops.math_ops.sparse_segment_mean"], "ops.gen_math_ops.sparse_segment_sqrt_n_with_num_segments": [], "ops.gen_math_ops.sparse_segment_sqrt_n": [], "ops.math_ops.sparse_segment_sqrt_n_v2": ["ops.math_ops.sparse_segment_sqrt_n"], "ops.math_ops.tensordot._tensordot_reshape": ["<builtin>.int", "ops.array_ops.rank", "ops.array_ops.transpose", "ops.array_ops.concat", "<builtin>.list", "ops.gen_array_ops.list_diff", "numpy.arange", "numpy.prod", "<builtin>.len", "ops.math_ops.range", "ops.array_ops.shape", "ops.math_ops.reduce_prod", "six.moves.xrange", "ops.array_ops.stack", "framework.ops.convert_to_tensor", "ops.array_ops.where", "ops.array_ops.gather", "<builtin>.isinstance", "ops.array_ops.reshape"], "ops.math_ops.tensordot._tensordot_axes": ["ops.math_ops.range", "<builtin>.ValueError", "ops.array_ops.rank", "six.moves.xrange", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "framework.ops.convert_to_tensor"], "ops.math_ops.reciprocal_no_nan": ["ops.gen_math_ops.div_no_nan", "framework.ops.name_scope", "framework.constant_op.constant", "framework.ops.convert_to_tensor"], "ops.math_ops.erfinv": ["framework.ops.name_scope", "ops.gen_math_ops.erfinv"], "ops.gen_math_ops.erfinv": [], "ops.math_ops.ndtri": ["framework.ops.name_scope", "ops.gen_math_ops.ndtri"], "ops.gen_math_ops.ndtri": [], "ops.math_ops.erfcinv": ["numpy.sqrt", "framework.ops.name_scope", "ops.math_ops.ndtri", "framework.ops.convert_to_tensor"], "ops.gen_math_ops.ceil": [], "ops.math_ops.sobol_sample": ["ops.gen_math_ops.sobol_sample", "framework.ops.name_scope"], "ops.gen_math_ops.sobol_sample": [], "ops.gen_math_ops.rsqrt": [], "ops.gen_math_ops.acos": [], "ops.gen_math_ops.floor": [], "ops.matmul_benchmark": ["platform.test.main"], "ops.matmul_benchmark.build_graph": ["ops.control_flow_ops.group", "ops.random_ops.random_uniform", "ops.math_ops.matmul", "framework.ops.device", "ops.variables.VariableV1"], "ops.matmul_benchmark.MatmulBenchmark.run_graph": ["test.Benchmark.report_benchmark", "time.time", "framework.ops.Graph", "ops.variables.global_variables_initializer", "<builtin>.print", "<builtin>.str", "ops.matmul_benchmark.build_graph", "client.session.Session", "<builtin>.range"], "ops.matmul_benchmark.MatmulBenchmark.run_test_gpu": ["platform.test.gpu_device_name", "ops.matmul_benchmark.MatmulBenchmark.run_graph"], "platform.test.gpu_device_name": [], "ops.matmul_benchmark.MatmulBenchmark.test_round": ["itertools.product", "ops.matmul_benchmark.MatmulBenchmark.run_test_gpu"], "ops.matmul_benchmark.MatmulBenchmark.benchmark_matmul": ["ops.matmul_benchmark.MatmulBenchmark.test_round"], "ops.metrics": [], "ops.metrics_impl": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "ops.metrics_impl.metric_variable": ["ops.variable_scope.variable"], "ops.metrics_impl.metric_variable.<lambda1>": ["ops.array_ops.zeros"], "ops.metrics_impl._remove_squeezable_dimensions": ["ops.control_flow_ops.cond", "framework.ops.convert_to_tensor", "ops.math_ops.equal", "ops.array_ops.expand_dims", "ops.confusion_matrix.remove_squeezable_dimensions", "ops.array_ops.rank", "ops.array_ops.squeeze"], "ops.metrics_impl._remove_squeezable_dimensions._maybe_expand_weights": ["ops.control_flow_ops.cond", "ops.math_ops.equal"], "ops.metrics_impl._remove_squeezable_dimensions._maybe_expand_weights.<lambda1>": ["ops.array_ops.expand_dims"], "ops.metrics_impl._remove_squeezable_dimensions._maybe_expand_weights.<lambda2>": [], "ops.metrics_impl._remove_squeezable_dimensions.<lambda1>": [], "ops.metrics_impl._remove_squeezable_dimensions.<lambda2>": ["ops.array_ops.squeeze"], "ops.metrics_impl._remove_squeezable_dimensions._maybe_adjust_weights": ["ops.control_flow_ops.cond", "ops.math_ops.equal"], "ops.metrics_impl._remove_squeezable_dimensions.<lambda3>": [], "ops.metrics_impl._maybe_expand_labels": ["framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "ops.array_ops.size", "ops.control_flow_ops.cond", "ops.math_ops.equal", "<builtin>.ValueError", "ops.array_ops.expand_dims", "framework.ops.name_scope", "ops.array_ops.rank", "<builtin>.isinstance"], "ops.metrics_impl._maybe_expand_labels.<lambda1>": ["ops.sparse_ops.sparse_reshape", "ops.array_ops.concat"], "ops.metrics_impl._maybe_expand_labels.<lambda2>": [], "ops.metrics_impl._maybe_expand_labels.<lambda3>": ["ops.array_ops.expand_dims"], "ops.metrics_impl._maybe_expand_labels.<lambda4>": [], "ops.metrics_impl._safe_scalar_div": ["ops.math_ops.div_no_nan"], "ops.metrics_impl._streaming_confusion_matrix": ["ops.metrics_impl.metric_variable", "ops.array_ops.reshape", "ops.math_ops.cast", "ops.confusion_matrix.confusion_matrix", "ops.state_ops.assign_add"], "ops.metrics_impl._aggregate_across_replicas": ["distribute.distribution_strategy_context.get_replica_context"], "ops.metrics_impl._aggregate_across_replicas.fn": ["ops.metrics_impl.sensitivity_at_specificity.sensitivity_across_replicas", "ops.metrics_impl.auc.compute_auc_value", "ops.metrics_impl.recall.once_across_replicas", "ops.metrics_impl.recall_at_thresholds.recall_across_replicas", "ops.metrics_impl.recall_at_top_k.compute_recall", "ops.metrics_impl.root_mean_squared_error.<lambda1>", "ops.metrics_impl._streaming_sparse_average_precision_at_top_k.precision_across_replicas", "ops.metrics_impl.precision_at_top_k.precision_across_replicas", "ops.metrics_impl.mean_per_class_accuracy.compute_mean_accuracy", "ops.metrics_impl.mean_iou.compute_mean_iou", "<builtin>.hasattr", "ops.metrics_impl.specificity_at_sensitivity.specificity_across_replicas", "ops.metrics_impl.precision_at_thresholds.precision_across_replicas", "framework.ops.add_to_collections", "ops.metrics_impl.mean_tensor.<lambda1>", "ops.metrics_impl.precision.once_across_replicas", "ops.metrics_impl._aggregate_variable.<lambda1>", "framework.ops.control_dependencies", "ops.metrics_impl.mean.compute_mean"], "ops.metrics_impl.precision_at_thresholds.precision_across_replicas": ["ops.metrics_impl.precision_at_thresholds.compute_precision"], "ops.metrics_impl.sensitivity_at_specificity.sensitivity_across_replicas": ["ops.metrics_impl.sensitivity_at_specificity.compute_sensitivity_at_specificity"], "ops.metrics_impl.mean_per_class_accuracy.compute_mean_accuracy": ["ops.math_ops.maximum", "ops.math_ops.div_no_nan", "ops.math_ops.reduce_mean"], "ops.metrics_impl.auc.compute_auc_value": ["ops.metrics_impl.auc.compute_auc"], "ops.metrics_impl.recall.once_across_replicas": ["ops.metrics_impl.recall.compute_recall"], "ops.metrics_impl.mean.compute_mean": ["ops.math_ops.maximum", "ops.math_ops.div_no_nan"], "ops.metrics_impl.recall_at_thresholds.recall_across_replicas": ["ops.metrics_impl.recall_at_thresholds.compute_recall"], "ops.metrics_impl.mean_iou.compute_mean_iou": ["ops.math_ops.cast", "ops.math_ops.greater", "ops.array_ops.diag_part", "ops.array_ops.where", "ops.math_ops.not_equal", "ops.math_ops.reduce_sum", "ops.array_ops.ones_like", "ops.math_ops.divide"], "ops.metrics_impl.recall_at_top_k.compute_recall": ["ops.math_ops.add", "ops.math_ops.divide"], "ops.metrics_impl.root_mean_squared_error.<lambda1>": ["ops.math_ops.sqrt"], "ops.metrics_impl.mean_tensor.<lambda1>": ["ops.math_ops.maximum", "ops.math_ops.div_no_nan"], "ops.metrics_impl._streaming_sparse_average_precision_at_top_k.precision_across_replicas": ["ops.metrics_impl._safe_scalar_div"], "ops.metrics_impl.specificity_at_sensitivity.specificity_across_replicas": ["ops.metrics_impl.specificity_at_sensitivity.compute_specificity_at_sensitivity"], "ops.metrics_impl.precision_at_top_k.precision_across_replicas": ["ops.math_ops.add", "ops.math_ops.divide"], "ops.metrics_impl.precision.once_across_replicas": ["ops.metrics_impl.precision.compute_precision"], "ops.metrics_impl._aggregate_variable.<lambda1>": [], "ops.metrics_impl.mean": ["ops.metrics_impl.metric_variable", "ops.array_ops.size", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.metrics_impl._remove_squeezable_dimensions", "ops.math_ops.reduce_sum", "framework.ops.control_dependencies", "ops.weights_broadcast_ops.broadcast_weights", "ops.math_ops.div_no_nan", "framework.ops.add_to_collections", "ops.metrics_impl._aggregate_across_replicas", "ops.math_ops.maximum", "eager.context.executing_eagerly", "ops.state_ops.assign_add", "ops.math_ops.multiply", "ops.variable_scope.variable_scope"], "ops.metrics_impl.accuracy": ["<builtin>.RuntimeError", "ops.math_ops.cast", "ops.metrics_impl._remove_squeezable_dimensions", "ops.math_ops.equal", "ops.metrics_impl.mean", "eager.context.executing_eagerly"], "ops.metrics_impl._confusion_matrix_at_thresholds": ["ops.metrics_impl.metric_variable", "ops.array_ops.reshape", "ops.metrics_impl._remove_squeezable_dimensions", "ops.weights_broadcast_ops.broadcast_weights", "<builtin>.len", "ops.array_ops.tile", "ops.math_ops.reduce_sum", "ops.math_ops.logical_and", "ops.array_ops.transpose", "<builtin>.ValueError", "ops.math_ops.greater", "ops.array_ops.shape", "ops.state_ops.assign_add", "ops.check_ops.assert_less_equal", "ops.math_ops.cast", "framework.ops.control_dependencies", "ops.array_ops.stack", "ops.array_ops.constant", "ops.check_ops.assert_greater_equal", "ops.array_ops.expand_dims", "ops.math_ops.logical_not"], "ops.metrics_impl._aggregate_variable": ["ops.metrics_impl._aggregate_across_replicas"], "ops.metrics_impl.auc": ["<builtin>.RuntimeError", "<builtin>.range", "<builtin>.ValueError", "ops.metrics_impl.auc.compute_auc", "framework.ops.add_to_collections", "<builtin>.len", "ops.metrics_impl._confusion_matrix_at_thresholds", "<builtin>.sorted", "ops.metrics_impl._aggregate_across_replicas", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope"], "ops.metrics_impl.auc.interpolate_pr_auc": ["ops.math_ops.div_no_nan", "ops.array_ops.where", "ops.math_ops.maximum", "ops.math_ops.log", "ops.math_ops.multiply", "ops.math_ops.reduce_sum", "ops.array_ops.ones_like", "ops.math_ops.logical_and"], "ops.metrics_impl.auc.compute_auc": ["ops.math_ops.minimum", "<builtin>.ValueError", "ops.metrics_impl.auc.interpolate_pr_auc", "platform.tf_logging.warning", "ops.math_ops.maximum", "ops.math_ops.multiply", "ops.math_ops.reduce_sum", "ops.math_ops.divide"], "ops.metrics_impl.mean_absolute_error": ["<builtin>.RuntimeError", "ops.metrics_impl._remove_squeezable_dimensions", "ops.metrics_impl.mean", "ops.math_ops.abs", "eager.context.executing_eagerly"], "ops.metrics_impl.mean_cosine_distance": ["<builtin>.RuntimeError", "ops.metrics_impl._remove_squeezable_dimensions", "framework.ops.add_to_collections", "ops.math_ops.subtract", "ops.metrics_impl.mean", "eager.context.executing_eagerly", "ops.math_ops.multiply", "ops.math_ops.reduce_sum"], "ops.metrics_impl.mean_per_class_accuracy": ["ops.metrics_impl.metric_variable", "ops.array_ops.size", "ops.state_ops.scatter_add", "ops.array_ops.reshape", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.math_ops.equal", "ops.math_ops.div_no_nan", "framework.ops.add_to_collections", "ops.metrics_impl._aggregate_across_replicas", "ops.math_ops.maximum", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.array_ops.ones"], "ops.metrics_impl.mean_iou": ["ops.metrics_impl._streaming_confusion_matrix", "ops.variable_scope.variable_scope", "<builtin>.RuntimeError", "framework.ops.add_to_collections", "eager.context.executing_eagerly", "ops.metrics_impl._aggregate_across_replicas"], "ops.metrics_impl.mean_relative_error": ["<builtin>.RuntimeError", "ops.metrics_impl._remove_squeezable_dimensions", "ops.math_ops.equal", "ops.math_ops.divide", "ops.array_ops.where", "ops.confusion_matrix.remove_squeezable_dimensions", "ops.metrics_impl.mean", "ops.math_ops.abs", "eager.context.executing_eagerly", "ops.array_ops.zeros_like"], "ops.metrics_impl.mean_squared_error": ["ops.math_ops.squared_difference", "<builtin>.RuntimeError", "ops.metrics_impl._remove_squeezable_dimensions", "ops.metrics_impl.mean", "eager.context.executing_eagerly"], "ops.metrics_impl.mean_tensor": ["ops.metrics_impl.metric_variable", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.metrics_impl._remove_squeezable_dimensions", "framework.ops.control_dependencies", "ops.math_ops.div_no_nan", "ops.weights_broadcast_ops.broadcast_weights", "framework.ops.add_to_collections", "ops.metrics_impl._aggregate_across_replicas", "ops.math_ops.maximum", "eager.context.executing_eagerly", "ops.state_ops.assign_add", "ops.math_ops.multiply", "ops.variable_scope.variable_scope", "ops.array_ops.ones_like"], "ops.metrics_impl.percentage_below": ["<builtin>.RuntimeError", "ops.math_ops.cast", "ops.math_ops.less", "ops.metrics_impl.mean", "eager.context.executing_eagerly"], "ops.metrics_impl._count_condition": ["ops.metrics_impl.metric_variable", "ops.check_ops.assert_type", "ops.math_ops.reduce_sum", "ops.math_ops.cast", "framework.ops.control_dependencies", "framework.ops.add_to_collections", "ops.check_ops.assert_rank_in", "ops.state_ops.assign_add", "ops.math_ops.multiply", "ops.array_ops.rank", "ops.metrics_impl._aggregate_variable"], "ops.metrics_impl.false_negatives": ["ops.metrics_impl._remove_squeezable_dimensions", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.math_ops.equal", "ops.metrics_impl._count_condition", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.math_ops.logical_and"], "ops.metrics_impl.false_negatives_at_thresholds": ["<builtin>.RuntimeError", "framework.ops.add_to_collections", "ops.metrics_impl._confusion_matrix_at_thresholds", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.metrics_impl._aggregate_variable"], "ops.metrics_impl.false_positives": ["ops.metrics_impl._remove_squeezable_dimensions", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.math_ops.equal", "ops.metrics_impl._count_condition", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.math_ops.logical_and"], "ops.metrics_impl.false_positives_at_thresholds": ["<builtin>.RuntimeError", "framework.ops.add_to_collections", "ops.metrics_impl._confusion_matrix_at_thresholds", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.metrics_impl._aggregate_variable"], "ops.metrics_impl.true_negatives": ["ops.metrics_impl._remove_squeezable_dimensions", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.math_ops.equal", "ops.metrics_impl._count_condition", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.math_ops.logical_and"], "ops.metrics_impl.true_negatives_at_thresholds": ["<builtin>.RuntimeError", "framework.ops.add_to_collections", "ops.metrics_impl._confusion_matrix_at_thresholds", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.metrics_impl._aggregate_variable"], "ops.metrics_impl.true_positives": ["ops.metrics_impl._remove_squeezable_dimensions", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.math_ops.equal", "ops.metrics_impl._count_condition", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.math_ops.logical_and"], "ops.metrics_impl.true_positives_at_thresholds": ["<builtin>.RuntimeError", "framework.ops.add_to_collections", "ops.metrics_impl._confusion_matrix_at_thresholds", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.metrics_impl._aggregate_variable"], "ops.metrics_impl.precision": ["ops.metrics_impl._remove_squeezable_dimensions", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.metrics_impl.true_positives", "ops.metrics_impl.false_positives", "framework.ops.add_to_collections", "ops.metrics_impl._aggregate_across_replicas", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope", "ops.metrics_impl.precision.compute_precision"], "ops.metrics_impl.precision.compute_precision": ["ops.math_ops.divide", "ops.array_ops.where", "ops.math_ops.greater"], "ops.metrics_impl.precision_at_thresholds": ["ops.variable_scope.variable_scope", "<builtin>.RuntimeError", "framework.ops.add_to_collections", "ops.metrics_impl._confusion_matrix_at_thresholds", "eager.context.executing_eagerly", "ops.metrics_impl._aggregate_across_replicas", "ops.metrics_impl.precision_at_thresholds.compute_precision"], "ops.metrics_impl.precision_at_thresholds.compute_precision": ["ops.math_ops.divide"], "ops.metrics_impl.recall": ["ops.metrics_impl.recall.compute_recall", "ops.metrics_impl._remove_squeezable_dimensions", "<builtin>.RuntimeError", "ops.math_ops.cast", "ops.metrics_impl.true_positives", "framework.ops.add_to_collections", "ops.metrics_impl.false_negatives", "ops.metrics_impl._aggregate_across_replicas", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope"], "ops.metrics_impl.recall.compute_recall": ["ops.math_ops.divide", "ops.array_ops.where", "ops.math_ops.greater"], "ops.metrics_impl._at_k_name": [], "ops.metrics_impl._select_class_id": ["framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "ops.array_ops.size", "ops.array_ops.reshape", "ops.math_ops.cast", "ops.math_ops.equal", "ops.array_ops.fill", "ops.sparse_ops.sparse_retain", "ops.array_ops.shape", "framework.sparse_tensor.SparseTensor", "ops.sets.set_intersection", "ops.math_ops.reduced_shape", "<builtin>.isinstance"], "ops.sets.set_intersection": [], "ops.metrics_impl._maybe_select_class_id": ["ops.metrics_impl._select_class_id"], "ops.metrics_impl._sparse_true_positive_at_k": ["ops.math_ops.cast", "framework.ops.control_dependencies", "ops.weights_broadcast_ops.assert_broadcastable", "ops.metrics_impl._maybe_select_class_id", "framework.ops.name_scope", "ops.sets.set_intersection", "ops.sets.set_size", "ops.math_ops.multiply"], "ops.sets.set_size": [], "ops.metrics_impl._streaming_sparse_true_positive_at_k": ["ops.metrics_impl.metric_variable", "ops.math_ops.cast", "ops.metrics_impl._sparse_true_positive_at_k", "framework.ops.name_scope", "ops.state_ops.assign_add", "ops.math_ops.reduce_sum", "ops.metrics_impl._at_k_name"], "ops.metrics_impl._sparse_false_negative_at_k": ["ops.math_ops.cast", "framework.ops.control_dependencies", "ops.weights_broadcast_ops.assert_broadcastable", "ops.metrics_impl._maybe_select_class_id", "ops.sets.set_difference", "framework.ops.name_scope", "ops.sets.set_size", "ops.math_ops.multiply"], "ops.sets.set_difference": [], "ops.metrics_impl._streaming_sparse_false_negative_at_k": ["ops.metrics_impl.metric_variable", "ops.math_ops.cast", "ops.metrics_impl._sparse_false_negative_at_k", "framework.ops.name_scope", "ops.state_ops.assign_add", "ops.math_ops.reduce_sum", "ops.metrics_impl._at_k_name"], "ops.metrics_impl.recall_at_k": ["ops.nn.top_k", "<builtin>.RuntimeError", "ops.metrics_impl.recall_at_top_k", "framework.ops.name_scope", "eager.context.executing_eagerly", "ops.metrics_impl._at_k_name"], "ops.nn.top_k": [], "ops.metrics_impl.recall_at_top_k": ["ops.math_ops.cast", "ops.metrics_impl._streaming_sparse_false_negative_at_k", "framework.ops.add_to_collections", "ops.metrics_impl._aggregate_across_replicas", "ops.math_ops.divide", "framework.ops.name_scope", "ops.math_ops.add", "ops.metrics_impl._streaming_sparse_true_positive_at_k", "ops.metrics_impl._maybe_expand_labels", "ops.metrics_impl._at_k_name"], "ops.metrics_impl.recall_at_thresholds": ["ops.variable_scope.variable_scope", "<builtin>.RuntimeError", "framework.ops.add_to_collections", "ops.metrics_impl.recall_at_thresholds.compute_recall", "ops.metrics_impl._confusion_matrix_at_thresholds", "eager.context.executing_eagerly", "ops.metrics_impl._aggregate_across_replicas"], "ops.metrics_impl.recall_at_thresholds.compute_recall": ["ops.math_ops.divide"], "ops.metrics_impl.root_mean_squared_error": ["ops.math_ops.sqrt", "<builtin>.RuntimeError", "ops.metrics_impl._remove_squeezable_dimensions", "framework.ops.add_to_collections", "ops.metrics_impl.mean_squared_error", "eager.context.executing_eagerly", "ops.metrics_impl._aggregate_across_replicas"], "ops.metrics_impl.sensitivity_at_specificity": ["ops.metrics_impl.sensitivity_at_specificity.compute_sensitivity_at_specificity", "<builtin>.RuntimeError", "<builtin>.range", "<builtin>.ValueError", "framework.ops.add_to_collections", "ops.metrics_impl._confusion_matrix_at_thresholds", "ops.metrics_impl._aggregate_across_replicas", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope"], "ops.metrics_impl.sensitivity_at_specificity.compute_sensitivity_at_specificity": ["ops.math_ops.argmin", "ops.math_ops.cast", "ops.math_ops.divide", "ops.math_ops.abs"], "ops.metrics_impl._expand_and_tile": ["framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "ops.array_ops.size", "ops.array_ops.reshape", "ops.array_ops.concat", "<builtin>.ValueError", "ops.array_ops.shape", "ops.array_ops.expand_dims", "ops.array_ops.slice", "ops.array_ops.tile", "framework.ops.name_scope", "ops.sparse_ops.sparse_reshape", "ops.sparse_ops.sparse_concat", "ops.array_ops.ones_like", "<builtin>.isinstance"], "ops.metrics_impl._num_relevant": ["framework.sparse_tensor.convert_to_tensor_or_sparse_tensor", "ops.array_ops.where_v2", "ops.math_ops.minimum", "<builtin>.ValueError", "ops.math_ops.greater_equal", "framework.ops.name_scope", "ops.sets.set_size", "ops.math_ops.reduce_sum", "ops.array_ops.ones_like", "ops.array_ops.zeros_like", "<builtin>.isinstance"], "ops.metrics_impl._sparse_average_precision_at_top_k": ["ops.math_ops.cast", "ops.metrics_impl._num_relevant", "<builtin>.ValueError", "ops.metrics_impl._expand_and_tile", "ops.metrics_impl._sparse_true_positive_at_k", "ops.array_ops.expand_dims", "ops.math_ops.divide", "framework.ops.name_scope", "ops.math_ops.cumsum", "ops.math_ops.multiply", "ops.math_ops.reduce_sum", "ops.array_ops.ones_like", "ops.metrics_impl._maybe_expand_labels"], "ops.metrics_impl._streaming_sparse_average_precision_at_top_k": ["ops.metrics_impl.metric_variable", "ops.array_ops.size", "ops.metrics_impl._sparse_average_precision_at_top_k", "ops.math_ops.cast", "ops.weights_broadcast_ops.broadcast_weights", "ops.metrics_impl._safe_scalar_div", "framework.ops.add_to_collections", "ops.metrics_impl._aggregate_across_replicas", "framework.ops.name_scope", "ops.state_ops.assign_add", "ops.math_ops.multiply", "ops.math_ops.reduce_sum"], "ops.metrics_impl._clean_out_of_range_indices": ["ops.metrics_impl._clean_out_of_range_indices._labels_is_sparse", "ops.control_flow_ops.cond", "ops.math_ops.greater_equal", "ops.math_ops.reduce_max"], "ops.metrics_impl._clean_out_of_range_indices._labels_is_sparse": ["<builtin>.isinstance"], "ops.metrics_impl._clean_out_of_range_indices._clean_out_of_range": ["ops.array_ops.where_v2", "ops.math_ops.greater_equal", "ops.array_ops.ones_like"], "ops.metrics_impl._clean_out_of_range_indices._clean_labels_out_of_range": ["ops.metrics_impl._clean_out_of_range_indices._clean_out_of_range", "ops.metrics_impl._clean_out_of_range_indices._labels_is_sparse", "<builtin>.type"], "ops.metrics_impl._clean_out_of_range_indices.<lambda1>": [], "ops.metrics_impl.sparse_average_precision_at_k": ["ops.metrics_impl.average_precision_at_k"], "ops.metrics_impl.average_precision_at_k": ["ops.nn.top_k", "<builtin>.RuntimeError", "ops.math_ops.cast", "<builtin>.ValueError", "ops.array_ops.shape", "framework.ops.name_scope", "eager.context.executing_eagerly", "ops.metrics_impl._clean_out_of_range_indices", "ops.metrics_impl._streaming_sparse_average_precision_at_top_k", "ops.metrics_impl._at_k_name"], "ops.metrics_impl._sparse_false_positive_at_k": ["ops.math_ops.cast", "framework.ops.control_dependencies", "ops.weights_broadcast_ops.assert_broadcastable", "ops.metrics_impl._maybe_select_class_id", "ops.sets.set_difference", "framework.ops.name_scope", "ops.sets.set_size", "ops.math_ops.multiply"], "ops.metrics_impl._streaming_sparse_false_positive_at_k": ["ops.metrics_impl.metric_variable", "ops.metrics_impl._sparse_false_positive_at_k", "ops.math_ops.cast", "framework.ops.name_scope", "ops.state_ops.assign_add", "ops.math_ops.reduce_sum", "ops.metrics_impl._at_k_name"], "ops.metrics_impl.precision_at_top_k": ["<builtin>.RuntimeError", "ops.math_ops.cast", "ops.metrics_impl._streaming_sparse_false_positive_at_k", "framework.ops.add_to_collections", "ops.metrics_impl._aggregate_across_replicas", "ops.math_ops.divide", "framework.ops.name_scope", "eager.context.executing_eagerly", "ops.math_ops.add", "ops.metrics_impl._streaming_sparse_true_positive_at_k", "ops.metrics_impl._maybe_expand_labels", "ops.metrics_impl._at_k_name"], "ops.metrics_impl.sparse_precision_at_k": ["ops.metrics_impl.precision_at_k"], "ops.metrics_impl.precision_at_k": ["ops.nn.top_k", "<builtin>.RuntimeError", "ops.metrics_impl.precision_at_top_k", "framework.ops.name_scope", "eager.context.executing_eagerly", "ops.metrics_impl._at_k_name"], "ops.metrics_impl.specificity_at_sensitivity": ["<builtin>.RuntimeError", "<builtin>.range", "ops.metrics_impl.specificity_at_sensitivity.compute_specificity_at_sensitivity", "<builtin>.ValueError", "framework.ops.add_to_collections", "ops.metrics_impl._confusion_matrix_at_thresholds", "ops.metrics_impl._aggregate_across_replicas", "eager.context.executing_eagerly", "ops.variable_scope.variable_scope"], "ops.metrics_impl.specificity_at_sensitivity.compute_specificity_at_sensitivity": ["ops.math_ops.cast", "ops.math_ops.equal", "ops.math_ops.cumsum", "ops.math_ops.abs", "ops.math_ops.argmax", "ops.math_ops.reduce_min", "ops.math_ops.divide"], "ops.nccl_ops": ["framework.ops.RegisterGradient", "threading.Lock"], "ops.nccl_ops._apply_all_reduce": ["eager.def_function.function", "ops.nccl_ops._get_shared_name", "ops.nccl_ops._apply_all_reduce._all_reduce", "<builtin>.ValueError", "eager.context.executing_eagerly"], "ops.nccl_ops._all_sum_grad": ["ops.nccl_ops._check_device", "ops.gen_nccl_ops.nccl_all_reduce", "framework.ops.device", "<builtin>.LookupError"], "ops.nccl_ops._check_device": ["framework.device.canonical_name", "<builtin>.ValueError"], "ops.gen_nccl_ops.nccl_all_reduce": [], "ops.nccl_ops.all_prod": ["ops.nccl_ops._apply_all_reduce"], "ops.nccl_ops.all_min": ["ops.nccl_ops._apply_all_reduce"], "ops.nccl_ops.all_max": ["ops.nccl_ops._apply_all_reduce"], "ops.nccl_ops.reduce_sum": ["ops.nccl_ops._apply_reduce"], "ops.nccl_ops._apply_reduce": ["<builtin>.next", "ops.gen_nccl_ops.nccl_reduce", "<builtin>.ValueError", "ops.nccl_ops._check_device"], "ops.nccl_ops._reduce_sum_grad": ["<builtin>.len", "ops.nccl_ops._check_device", "ops.gen_nccl_ops.nccl_broadcast", "framework.ops.device", "<builtin>.LookupError"], "ops.gen_nccl_ops.nccl_broadcast": [], "ops.nccl_ops._broadcast_grad": ["ops.gen_nccl_ops.nccl_reduce", "framework.ops.device", "ops.nccl_ops._check_device"], "ops.gen_nccl_ops.nccl_reduce": [], "ops.nccl_ops._get_shared_name": [], "ops.nccl_ops._apply_all_reduce._all_reduce": ["ops.gen_nccl_ops.nccl_all_reduce", "<builtin>.len", "framework.ops.device", "ops.nccl_ops._check_device"], "ops.nn": [], "ops.nn_grad": ["framework.ops.RegisterGradient"], "ops.nn_grad._Conv2DBackpropInputGrad": ["ops.array_ops.shape", "ops.gen_nn_ops.conv2d_backprop_filter", "ops.gen_nn_ops.conv2d"], "ops.gen_nn_ops.conv2d_backprop_filter": [], "ops.gen_nn_ops.conv2d": [], "ops.nn_grad._Conv2DBackpropFilterGrad": ["ops.array_ops.shape", "ops.gen_nn_ops.conv2d_backprop_input", "ops.gen_nn_ops.conv2d"], "ops.gen_nn_ops.conv2d_backprop_input": [], "ops.nn_grad._DepthwiseConv2dNativeBackpropInputGrad": ["ops.array_ops.shape", "ops.gen_nn_ops.depthwise_conv2d_native", "ops.gen_nn_ops.depthwise_conv2d_native_backprop_filter"], "ops.gen_nn_ops.depthwise_conv2d_native_backprop_filter": [], "ops.gen_nn_ops.depthwise_conv2d_native": [], "ops.nn_grad._DepthwiseConv2dNativeBackpropFilterGrad": ["ops.array_ops.shape", "ops.gen_nn_ops.depthwise_conv2d_native", "ops.gen_nn_ops.depthwise_conv2d_native_backprop_input"], "ops.gen_nn_ops.depthwise_conv2d_native_backprop_input": [], "ops.nn_grad._Conv3DGrad": ["ops.array_ops.shape", "ops.nn_ops.conv3d_backprop_input_v2", "ops.nn_ops.conv3d_backprop_filter_v2"], "ops.nn_ops.conv3d_backprop_input_v2": [], "ops.nn_ops.conv3d_backprop_filter_v2": [], "ops.nn_grad._Conv3DBackpropInputGrad": ["ops.nn_ops.conv3d", "ops.array_ops.shape", "ops.nn_ops.conv3d_backprop_filter_v2"], "ops.nn_ops.conv3d": [], "ops.nn_grad._Conv3DBackpropFilterGrad": ["ops.nn_ops.conv3d", "ops.array_ops.shape", "ops.nn_ops.conv3d_backprop_input_v2"], "ops.nn_grad._AvgPool3DGrad": ["ops.array_ops.shape", "ops.gen_nn_ops.avg_pool3d_grad"], "ops.gen_nn_ops.avg_pool3d_grad": [], "ops.nn_grad._AvgPool3DGradGrad": ["ops.array_ops.stop_gradient", "ops.gen_nn_ops.avg_pool3d"], "ops.gen_nn_ops.avg_pool3d": [], "ops.nn_grad._MaxPool3DGrad": ["ops.gen_nn_ops.max_pool3d_grad"], "ops.gen_nn_ops.max_pool3d_grad": [], "ops.nn_grad._MaxPool3DGradGrad": ["ops.array_ops.zeros_like", "ops.gen_nn_ops.max_pool3d_grad_grad"], "ops.gen_nn_ops.max_pool3d_grad_grad": [], "ops.nn_grad._MaxPool3DGradGradGrad": ["ops.array_ops.zeros_like", "ops.gen_nn_ops.max_pool3d_grad"], "ops.nn_grad._SoftmaxGrad": ["ops.math_ops.reduce_sum"], "ops.nn_grad._LogSoftmaxGrad": ["ops.math_ops.exp", "ops.math_ops.reduce_sum"], "ops.nn_grad._BiasAddGrad": ["ops.gen_nn_ops.bias_add_grad"], "ops.gen_nn_ops.bias_add_grad": [], "ops.nn_grad._BiasAddGradGrad": ["ops.array_ops.ones_like", "ops.array_ops.shape", "ops.array_ops.tile", "ops.array_ops.reshape", "ops.array_ops.concat"], "ops.nn_grad._BiasAddGradV1": ["ops.array_ops.rank", "ops.math_ops.range", "ops.math_ops.reduce_sum"], "ops.nn_grad._ReluGrad": ["ops.gen_nn_ops.relu_grad"], "ops.nn_grad._EluGradGrad": ["ops.gen_nn_ops.elu_grad", "ops.array_ops.zeros_like", "ops.array_ops.where"], "ops.gen_nn_ops.elu_grad": [], "ops.nn_grad._SeluGradGrad": ["ops.array_ops.zeros_like", "ops.gen_nn_ops.selu_grad", "ops.array_ops.where"], "ops.gen_nn_ops.selu_grad": [], "ops.nn_grad._Relu6Grad": ["ops.gen_nn_ops.relu6_grad"], "ops.nn_grad._Relu6GradGrad": ["ops.gen_nn_ops.relu6_grad", "ops.array_ops.zeros_like"], "ops.nn_grad._LeakyReluGrad": ["ops.gen_nn_ops.leaky_relu_grad"], "ops.gen_nn_ops.leaky_relu_grad": [], "ops.nn_grad._LeakyReluGradGrad": ["ops.array_ops.zeros_like", "ops.gen_nn_ops.leaky_relu_grad"], "ops.nn_grad._EluGrad": ["ops.gen_nn_ops.elu_grad"], "ops.nn_grad._SeluGrad": ["ops.gen_nn_ops.selu_grad"], "ops.nn_grad._SoftplusGrad": ["ops.math_ops.sigmoid"], "ops.nn_grad._SoftplusGradGrad": ["ops.math_ops.exp", "ops.gen_nn_ops.softplus_grad", "framework.ops.control_dependencies"], "ops.gen_nn_ops.softplus_grad": [], "ops.nn_grad._SoftsignGrad": ["ops.gen_nn_ops.softsign_grad"], "ops.gen_nn_ops.softsign_grad": [], "ops.nn_grad._ReluGradGrad": ["ops.array_ops.zeros_like", "ops.gen_nn_ops.relu_grad"], "ops.nn_grad._SoftmaxCrossEntropyWithLogitsGrad": ["<builtin>.getattr", "ops.nn_grad._BroadcastMul", "ops.nn_ops.softmax", "ops.array_ops.squeeze", "ops.math_ops.matmul", "ops.array_ops.expand_dims", "ops.nn_ops.log_softmax"], "ops.nn_grad._SparseSoftmaxCrossEntropyWithLogitsGrad": ["<builtin>.getattr", "ops.nn_grad._BroadcastMul", "ops.nn_ops.softmax", "ops.array_ops.squeeze", "ops.math_ops.matmul", "ops.array_ops.expand_dims"], "ops.nn_grad._Conv2DGrad": ["ops.gen_nn_ops.conv2d_backprop_filter", "ops.gen_nn_ops.conv2d_backprop_input", "ops.array_ops.shape_n"], "ops.nn_grad._DepthwiseConv2dNativeGrad": ["ops.array_ops.shape", "ops.gen_nn_ops.depthwise_conv2d_native_backprop_input", "ops.gen_nn_ops.depthwise_conv2d_native_backprop_filter"], "ops.nn_grad._Dilation2DGrad": ["ops.nn_ops.dilation2d_backprop_input", "ops.nn_ops.dilation2d_backprop_filter"], "ops.nn_ops.dilation2d_backprop_input": [], "ops.nn_ops.dilation2d_backprop_filter": [], "ops.nn_grad._LRNGrad": ["ops.gen_nn_ops.lrn_grad"], "ops.gen_nn_ops.lrn_grad": [], "ops.nn_grad._AvgPoolGrad": ["ops.array_ops.shape", "ops.gen_nn_ops.avg_pool_grad"], "ops.gen_nn_ops.avg_pool_grad": [], "ops.nn_grad._AvgPoolGradGrad": ["ops.array_ops.stop_gradient", "ops.gen_nn_ops.avg_pool"], "ops.gen_nn_ops.avg_pool": [], "ops.nn_grad._MaxPoolGrad": ["ops.gen_nn_ops.max_pool_grad"], "ops.gen_nn_ops.max_pool_grad": [], "ops.nn_grad._MaxPoolGradV2": ["ops.gen_nn_ops.max_pool_grad_v2"], "ops.gen_nn_ops.max_pool_grad_v2": [], "ops.nn_grad._MaxPoolGradWithArgmax": ["ops.gen_nn_ops.max_pool_grad_with_argmax"], "ops.gen_nn_ops.max_pool_grad_with_argmax": [], "ops.nn_grad._MaxPoolGradGrad": ["ops.gen_nn_ops.max_pool_grad_grad", "ops.array_ops.zeros_like"], "ops.gen_nn_ops.max_pool_grad_grad": [], "ops.nn_grad._MaxPoolGradGradV2": ["ops.array_ops.zeros_like", "ops.gen_nn_ops.max_pool_grad_grad_v2"], "ops.gen_nn_ops.max_pool_grad_grad_v2": [], "ops.nn_grad._MaxPoolGradGradGrad": ["ops.gen_nn_ops.max_pool_grad", "ops.array_ops.zeros_like"], "ops.nn_grad._FractionalMaxPoolGrad": ["ops.gen_nn_ops.fractional_max_pool_grad"], "ops.gen_nn_ops.fractional_max_pool_grad": [], "ops.nn_grad._FractionalAvgPoolGrad": ["ops.gen_nn_ops.fractional_avg_pool_grad"], "ops.gen_nn_ops.fractional_avg_pool_grad": [], "ops.nn_grad._BatchNormWithGlobalNormalizationGrad": ["ops.gen_nn_ops.batch_norm_with_global_normalization_grad"], "ops.gen_nn_ops.batch_norm_with_global_normalization_grad": [], "ops.nn_grad._BaseFusedBatchNormGrad": ["ops.gen_nn_ops.fused_batch_norm_grad_v3", "ops.gen_nn_ops.fused_batch_norm_grad", "ops.array_ops.transpose", "ops.gen_nn_ops.fused_batch_norm_grad_v2"], "ops.gen_nn_ops.fused_batch_norm_grad_v3": [], "ops.gen_nn_ops.fused_batch_norm_grad": [], "ops.gen_nn_ops.fused_batch_norm_grad_v2": [], "ops.nn_grad._FusedBatchNormGrad": ["ops.nn_grad._BaseFusedBatchNormGrad"], "ops.nn_grad._FusedBatchNormV2Grad": ["ops.nn_grad._BaseFusedBatchNormGrad"], "ops.nn_grad._FusedBatchNormV3Grad": ["ops.nn_grad._BaseFusedBatchNormGrad"], "ops.nn_grad._BatchNormGrad": ["ops.math_ops.cast", "ops.math_ops.reduce_mean", "ops.math_ops.reciprocal", "ops.math_ops.reduce_sum", "ops.math_ops.squared_difference", "ops.array_ops.squeeze", "ops.math_ops.rsqrt", "ops.array_ops.reshape", "ops.array_ops.stop_gradient", "ops.array_ops.size"], "ops.nn_grad._FusedBatchNormGradGrad": ["ops.nn_grad._BatchNormGrad", "eager.backprop.GradientTape"], "ops.nn_grad._FusedBatchNormGradGradV2": ["ops.nn_grad._FusedBatchNormGradGrad"], "ops.nn_grad._FusedBatchNormGradGradV3": ["ops.nn_grad._FusedBatchNormGradGrad"], "ops.nn_grad._L2LossGrad": [], "ops.nn_grad._TopKGrad": ["ops.math_ops.cast", "ops.array_ops.shape", "ops.array_ops.zeros", "ops.array_ops.stack", "ops.math_ops.range", "ops.array_ops.expand_dims", "ops.array_ops.reshape", "ops.array_ops.size", "ops.math_ops.reduce_prod", "ops.array_ops.scatter_nd", "ops.array_ops.gather"], "ops.nn_grad._NthElementGrad": ["ops.math_ops.cast", "ops.math_ops.reduce_sum", "ops.array_ops.expand_dims", "ops.math_ops.divide", "ops.math_ops.equal"], "ops.nn_grad._MeanAggregator": ["ops.math_ops.unsorted_segment_mean", "ops.math_ops.reduce_max", "<builtin>.zip", "ops.array_ops.stack", "ops.array_ops.split", "ops.array_ops.reshape", "ops.array_ops.gather"], "ops.nn_grad._IsotonicRegressionGrad": ["ops.nn_grad._MeanAggregator"], "ops.nn_impl": ["util.deprecation.deprecated_args", "util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ops.nn_impl.log_poisson_loss": ["ops.array_ops.ones_like", "ops.math_ops.log", "ops.array_ops.zeros_like", "ops.array_ops.where", "framework.constant_op.constant", "framework.ops.name_scope", "ops.math_ops.logical_and", "ops.math_ops.exp", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "ops.nn_impl.sigmoid_cross_entropy_with_logits": ["ops.array_ops.zeros_like", "ops.array_ops.where", "ops.math_ops.log1p", "framework.ops.name_scope", "ops.nn_ops._ensure_xent_args", "ops.math_ops.add", "ops.math_ops.exp", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "ops.nn_ops._ensure_xent_args": ["<builtin>.ValueError"], "ops.nn_impl.sigmoid_cross_entropy_with_logits_v2": ["ops.nn_impl.sigmoid_cross_entropy_with_logits"], "ops.nn_impl.weighted_cross_entropy_with_logits_v2": ["ops.math_ops.abs", "ops.math_ops.log1p", "ops.nn_ops.relu", "framework.ops.name_scope", "ops.math_ops.add", "ops.math_ops.exp", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "ops.nn_impl.weighted_cross_entropy_with_logits": ["ops.nn_impl.weighted_cross_entropy_with_logits_v2", "util.deprecation.deprecated_argument_lookup"], "ops.nn_impl.compute_average_loss": ["ops.math_ops.reduce_sum", "losses.util.scale_losses_by_sample_weight", "distribute.distribution_strategy_context.has_strategy", "distribute.distribution_strategy_context.get_strategy", "ops.array_ops.shape_v2", "losses.util.check_per_example_loss_rank", "ops.math_ops.cast", "<builtin>.RuntimeError", "framework.ops.convert_to_tensor", "distribute.distribution_strategy_context.in_cross_replica_context"], "ops.nn_impl.scale_regularization_loss": ["ops.math_ops.reduce_sum", "distribute.distribution_strategy_context.has_strategy", "distribute.distribution_strategy_context.get_strategy", "<builtin>.RuntimeError", "distribute.distribution_strategy_context.in_cross_replica_context"], "ops.nn_impl.relu_layer": ["ops.nn_ops.bias_add", "ops.nn_ops.relu", "ops.math_ops.matmul", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.nn_impl.swish": ["ops.math_ops.sigmoid", "framework.ops.convert_to_tensor"], "ops.nn_impl.swish.grad": ["ops.math_ops.sigmoid", "framework.ops.control_dependencies"], "ops.nn_impl.normalize": ["framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.math_ops.cast", "ops.linalg_ops.norm"], "ops.nn_impl._count_nonzero": ["ops.math_ops.reduce_sum", "ops.math_ops.cast", "ops.array_ops.zeros", "framework.ops.name_scope", "ops.math_ops.not_equal"], "ops.nn_impl.zero_fraction": ["ops.array_ops.identity", "ops.control_flow_ops.cond", "ops.math_ops.cast", "framework.ops.name_scope", "ops.array_ops.size", "framework.ops.convert_to_tensor"], "ops.nn_impl.zero_fraction.<lambda1>": ["ops.nn_impl._count_nonzero", "ops.math_ops.cast"], "ops.nn_impl.zero_fraction.<lambda2>": ["ops.nn_impl._count_nonzero"], "ops.nn_impl.depthwise_conv2d": ["ops.nn_ops.with_space_to_batch", "ops.nn_ops.depthwise_conv2d_native", "ops.array_ops.shape", "framework.ops.name_scope", "util.deprecation.deprecated_argument_lookup", "framework.ops.convert_to_tensor", "platform.device_context.enclosing_tpu_context"], "platform.device_context.enclosing_tpu_context": [], "ops.nn_ops.depthwise_conv2d_native": ["ops.nn_ops.convert_padding", "ops.gen_nn_ops.depthwise_conv2d_native"], "ops.nn_impl.depthwise_conv2d.op": ["ops.nn_ops.depthwise_conv2d_native"], "ops.nn_ops.with_space_to_batch": ["framework.ops.convert_to_tensor", "ops.nn_ops._WithSpaceToBatch.__init__"], "ops.nn_impl.depthwise_conv2d_v2": ["ops.nn_impl.depthwise_conv2d"], "ops.nn_impl.separable_conv2d": ["ops.nn_ops.with_space_to_batch", "ops.array_ops.shape", "framework.ops.name_scope", "util.deprecation.deprecated_argument_lookup", "framework.ops.convert_to_tensor", "ops.nn_ops.conv2d"], "ops.nn_impl.separable_conv2d.op": ["ops.nn_ops.depthwise_conv2d_native"], "ops.nn_impl.separable_conv2d_v2": ["ops.nn_impl.separable_conv2d"], "ops.nn_impl.sufficient_statistics": ["ops.math_ops.reduce_sum", "ops.array_ops.gather", "ops.math_ops.square", "<builtin>.set", "<builtin>.list", "framework.constant_op.constant", "ops.math_ops.subtract", "ops.math_ops.cast", "ops.math_ops.squared_difference", "ops.array_ops.shape", "framework.ops.name_scope", "util.deprecation.deprecated_argument_lookup", "<builtin>.all", "framework.ops.convert_to_tensor", "ops.math_ops.reduce_prod", "ops.array_ops.rank"], "ops.nn_impl.sufficient_statistics_v2": ["ops.nn_impl.sufficient_statistics"], "ops.nn_impl.normalize_moments": ["ops.math_ops.square", "ops.math_ops.multiply", "ops.math_ops.subtract", "framework.ops.name_scope", "ops.math_ops.add", "ops.math_ops.reciprocal"], "ops.nn_impl.weighted_moments": ["ops.math_ops.reduce_sum", "ops.array_ops.zeros_like", "ops.math_ops.multiply", "ops.math_ops.cast", "ops.math_ops.squared_difference", "framework.ops.name_scope", "util.deprecation.deprecated_argument_lookup", "ops.array_ops.squeeze", "framework.ops.convert_to_tensor", "ops.math_ops.reciprocal"], "ops.nn_impl.weighted_moments_v2": ["ops.nn_impl.weighted_moments"], "ops.nn_impl.fused_batch_norm": ["framework.constant_op.constant", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "ops.gen_nn_ops.fused_batch_norm_v3"], "ops.gen_nn_ops.fused_batch_norm_v3": [], "ops.nn_impl.batch_norm_with_global_normalization": ["ops.nn_impl.batch_normalization", "util.deprecation.deprecated_argument_lookup"], "ops.nn_impl.batch_norm_with_global_normalization_v2": ["ops.nn_impl.batch_norm_with_global_normalization"], "ops.nn_impl._sum_rows": ["ops.array_ops.stack", "ops.array_ops.reshape", "ops.math_ops.matmul", "ops.array_ops.shape", "ops.array_ops.ones"], "ops.nn_impl._compute_sampled_logits": ["ops.embedding_ops.embedding_lookup", "<builtin>.list", "ops.math_ops.cast", "framework.ops.name_scope", "ops.candidate_sampling_ops.log_uniform_candidate_sampler", "ops.array_ops.ones_like", "ops.math_ops.log", "ops.nn_impl._sum_rows", "ops.array_ops.reshape", "ops.array_ops.slice", "ops.gen_sparse_ops.sparse_to_dense", "ops.array_ops.expand_dims", "ops.array_ops.zeros_like", "ops.math_ops.multiply", "ops.array_ops.stack", "<builtin>.isinstance", "ops.array_ops.concat", "ops.array_ops.shape", "ops.math_ops.matmul", "ops.array_ops.stop_gradient", "ops.candidate_sampling_ops.compute_accidental_hits"], "ops.gen_sparse_ops.sparse_to_dense": [], "ops.nn_impl.nce_loss_v2": ["ops.nn_impl.nce_loss"], "ops.nn_impl.nce_loss": ["ops.nn_impl._sum_rows", "ops.nn_impl._compute_sampled_logits", "ops.nn_impl.sigmoid_cross_entropy_with_logits"], "ops.nn_impl.sampled_softmax_loss_v2": ["ops.nn_impl.sampled_softmax_loss"], "ops.nn_impl.sampled_softmax_loss": ["ops.nn_ops.softmax_cross_entropy_with_logits_v2", "ops.array_ops.stop_gradient", "ops.nn_impl._compute_sampled_logits"], "ops.nn_ops.softmax_cross_entropy_with_logits_v2": ["ops.nn_ops.softmax_cross_entropy_with_logits_v2_helper"], "ops.nn_ops": ["framework.ops.RegisterStatistics", "util.deprecation.deprecated_endpoints", "util.deprecation.deprecated_arg_values", "<builtin>.frozenset", "util.dispatch.add_dispatch_support", "util.deprecation.deprecated", "util.deprecation.deprecated_args", "util.deprecation.rewrite_argument_docstring", "util.tf_export.tf_export"], "ops.nn_ops._get_sequence": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.list", "<builtin>.len"], "ops.nn_ops._non_atrous_convolution": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.nn_ops._NonAtrousConvolution.__init__"], "ops.nn_ops._NonAtrousConvolution.__init__": ["<builtin>.ValueError", "<builtin>.list", "<builtin>.len", "dtypes.int64.with_rank"], "dtypes.int64.with_rank": [], "ops.nn_ops._NonAtrousConvolution._conv1d": ["ops.nn_ops.conv1d"], "ops.nn_ops.conv1d": ["util.deprecation.deprecated_argument_lookup", "functools.partial", "<builtin>.ValueError", "ops.nn_ops.squeeze_batch_dims", "ops.array_ops.expand_dims", "framework.ops.name_scope", "ops.nn_ops._get_sequence", "ops.array_ops.squeeze", "ops.gen_nn_ops.conv2d"], "ops.nn_ops._NonAtrousConvolution.__call__": ["ops.nn_ops._conv3d_expanded_batch", "ops.nn_ops._NonAtrousConvolution._conv1d", "ops.nn_ops.conv2d"], "ops.nn_ops._conv3d_expanded_batch": ["functools.partial", "ops.gen_nn_ops.conv3d", "<builtin>.getattr", "ops.nn_ops.squeeze_batch_dims", "<builtin>.len"], "ops.nn_ops.squeeze_batch_dims": ["<builtin>.isinstance", "ops.array_ops.concat", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "framework.ops.name_scope", "ops.array_ops.reshape"], "ops.nn_ops.dilation2d_v2": ["<builtin>.ValueError", "ops.gen_nn_ops.dilation2d"], "ops.gen_nn_ops.dilation2d": [], "ops.nn_ops.dilation2d_v1": ["util.deprecation.deprecated_argument_lookup", "ops.gen_nn_ops.dilation2d"], "ops.nn_ops.with_space_to_batch.build_op": [], "ops.nn_ops.with_space_to_batch.build_op.<lambda1>": ["ops.nn_ops.pool.op"], "ops.nn_ops.pool.op": ["ops.array_ops.squeeze", "ops.array_ops.expand_dims"], "ops.nn_ops._WithSpaceToBatch.__init__": ["numpy.zeros", "int64.shape.is_fully_defined", "ops.nn_ops.Convolution._build_op", "<builtin>.ValueError", "ops.nn_ops._with_space_to_batch_base_paddings", "numpy.array", "<builtin>.set", "numpy.all", "ops.nn_ops.convert_padding", "ops.nn_ops.with_space_to_batch.build_op", "framework.ops.convert_to_tensor", "<builtin>.range", "<builtin>.list", "numpy.any", "<builtin>.any", "<builtin>.sorted", "framework.tensor_util.constant_value", "<builtin>.int"], "int64.shape.is_fully_defined": [], "ops.nn_ops.Convolution._build_op": ["ops.nn_ops._NonAtrousConvolution.__init__"], "ops.nn_ops.convert_padding": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.len", "<builtin>.enumerate"], "ops.nn_ops._with_space_to_batch_base_paddings": ["<builtin>.range", "ops.array_ops.stack"], "ops.nn_ops._WithSpaceToBatch._with_space_to_batch_call": ["ops.array_ops.space_to_batch_nd", "ops.nn_ops._with_space_to_batch_base_paddings", "ops.nn_ops._with_space_to_batch_adjust", "ops.array_ops.shape", "ops.array_ops.batch_to_space_nd", "ops.array_ops.stack", "ops.array_ops.required_space_to_batch_paddings"], "ops.nn_ops._with_space_to_batch_adjust": ["ops.array_ops.concat", "<builtin>.len", "dtypes.int64.get_shape", "framework.tensor_util.constant_value", "numpy.concatenate", "numpy.full"], "ops.nn_ops._WithSpaceToBatch.__call__": ["ops.nn_ops._WithSpaceToBatch._with_space_to_batch_call"], "dtypes.int64.get_shape": [], "ops.nn_ops._get_strides_and_dilation_rate": ["<builtin>.ValueError", "numpy.array", "<builtin>.len", "numpy.any"], "ops.nn_ops.convolution": ["util.deprecation.deprecated_argument_lookup", "ops.nn_ops.convolution_internal"], "ops.nn_ops.convolution_internal": ["ops.nn_ops._conv3d_expanded_batch", "framework.tensor_util.is_tf_type", "ops.nn_ops.Convolution.__init__", "<builtin>.isinstance", "<builtin>.ValueError", "ops.nn_ops._conv2d_expanded_batch", "platform.device_context.enclosing_tpu_context", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.nn_ops._get_sequence", "<builtin>.any", "framework.tensor_shape.as_shape", "ops.nn_ops.conv1d"], "ops.nn_ops.convolution_v2": ["ops.nn_ops.convolution_internal"], "util.deprecation.rewrite_argument_docstring": [], "ops.nn_ops._conv2d_expanded_batch": ["functools.partial", "ops.gen_nn_ops.conv2d", "ops.nn_ops.squeeze_batch_dims"], "ops.nn_ops.Convolution.__init__": ["ops.nn_ops._WithSpaceToBatch.__init__", "<builtin>.ValueError", "<builtin>.range", "ops.nn_ops._get_strides_and_dilation_rate", "framework.tensor_shape.dimension_at_index", "framework.tensor_shape.as_shape"], "ops.nn_ops.Convolution.__call__": ["ops.nn_ops.convolution_internal", "platform.device_context.enclosing_tpu_context", "ops.nn_ops._WithSpaceToBatch.__init__"], "ops.nn_ops.pool": ["util.deprecation.deprecated_argument_lookup", "ops.nn_ops.with_space_to_batch", "<builtin>.ValueError", "<builtin>.dict", "framework.ops.convert_to_tensor", "<builtin>.range", "framework.ops.name_scope", "<builtin>.len", "numpy.any", "ops.nn_ops._get_strides_and_dilation_rate", "<builtin>.list"], "ops.nn_ops.pool_v2": ["ops.nn_ops.pool"], "ops.nn_ops.atrous_conv2d": ["ops.nn_ops.convolution", "numpy.broadcast_to"], "numpy.broadcast_to": [], "ops.nn_ops.conv1d_v2": ["ops.nn_ops.conv1d"], "ops.nn_ops.conv2d_v2": ["ops.nn_ops.conv2d"], "ops.nn_ops.conv2d_backprop_input": ["ops.gen_nn_ops.conv2d_backprop_input", "util.deprecation.deprecated_argument_lookup", "ops.nn_ops.convert_padding"], "ops.nn_ops.conv2d_transpose": ["util.deprecation.deprecated_argument_lookup", "framework.ops.name_scope", "ops.nn_ops.conv2d_transpose_v2"], "ops.nn_ops.conv2d_transpose_v2": ["ops.gen_nn_ops.conv2d_backprop_input", "framework.ops.name_scope", "ops.nn_ops.convert_padding", "ops.nn_ops._get_sequence"], "ops.nn_ops.atrous_conv2d_transpose": ["<builtin>.isinstance", "<builtin>.ValueError", "ops.nn_ops.conv2d_transpose", "ops.gen_nn_ops.conv2d_backprop_input", "ops.array_ops.batch_to_space", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "framework.ops.name_scope", "<builtin>.list", "ops.array_ops.space_to_batch", "framework.tensor_shape.TensorShape"], "ops.nn_ops.depthwise_conv2d_native_backprop_input": ["ops.nn_ops.convert_padding", "ops.gen_nn_ops.depthwise_conv2d_native_backprop_input"], "ops.nn_ops.depthwise_conv2d_native_backprop_filter": ["ops.gen_nn_ops.depthwise_conv2d_native_backprop_filter", "ops.nn_ops.convert_padding"], "ops.gen_nn_ops.conv3d": [], "ops.nn_ops.conv3d_v2": ["ops.nn_ops._conv3d_expanded_batch"], "ops.nn_ops.conv3d_v1": ["util.deprecation.deprecated_argument_lookup", "ops.gen_nn_ops.conv3d"], "ops.nn_ops.conv3d_transpose": ["util.deprecation.deprecated_argument_lookup", "ops.nn_ops.conv3d_transpose_v2"], "ops.nn_ops.conv3d_transpose_v2": ["ops.gen_nn_ops.conv3d_backprop_input_v2", "framework.ops.name_scope", "ops.nn_ops._get_sequence"], "ops.gen_nn_ops.conv3d_backprop_input_v2": [], "ops.nn_ops.conv_transpose": ["framework.tensor_util.is_tf_type", "<builtin>.isinstance", "<builtin>.ValueError", "framework.ops.name_scope", "<builtin>.len"], "ops.gen_nn_ops.bias_add": [], "ops.nn_ops.bias_add_v1": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.gen_nn_ops.bias_add_v1"], "ops.gen_nn_ops.bias_add_v1": [], "ops.nn_ops.crelu": ["framework.ops.convert_to_tensor", "ops.array_ops.concat", "framework.ops.name_scope", "ops.gen_nn_ops.relu"], "ops.gen_nn_ops.relu": [], "ops.nn_ops.crelu_v2": ["ops.nn_ops.crelu"], "ops.nn_ops.relu6": ["framework.ops.convert_to_tensor", "ops.gen_nn_ops.relu6", "framework.ops.name_scope"], "ops.gen_nn_ops.relu6": [], "ops.nn_ops.leaky_relu": ["ops.math_ops.cast", "<builtin>.isinstance", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.gen_nn_ops.leaky_relu"], "ops.nn_ops.gelu": ["ops.math_ops.cast", "ops.math_ops.pow", "ops.math_ops.erf", "ops.math_ops.tanh", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "ops.nn_ops._flatten_outer_dims": ["ops.array_ops.slice", "ops.array_ops.concat", "eager.context.executing_eagerly", "ops.math_ops.subtract", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.array_ops.rank"], "ops.nn_ops._wrap_2d_function": ["ops.nn_ops._wrap_2d_function.fix_output", "ops.nn_ops.isotonic_regression.compute_on_matrix", "ops.gen_nn_ops.softmax", "<builtin>.isinstance", "ops.math_ops.less", "ops.gen_nn_ops.log_softmax", "ops.nn_ops._wrap_2d_function._swap_axis", "<builtin>.tuple", "framework.ops.convert_to_tensor", "ops.math_ops.subtract", "ops.array_ops.where", "framework.tensor_util.constant_value", "ops.array_ops.rank", "framework.errors_impl.InvalidArgumentError"], "ops.nn_ops._wrap_2d_function._swap_axis": ["ops.array_ops.concat", "ops.math_ops.range", "ops.array_ops.transpose"], "ops.nn_ops.isotonic_regression.compute_on_matrix": ["functools.partial"], "ops.gen_nn_ops.softmax": [], "ops.gen_nn_ops.log_softmax": [], "ops.nn_ops._wrap_2d_function.fix_output": ["ops.math_ops.subtract", "ops.nn_ops._wrap_2d_function._swap_axis"], "ops.nn_ops.softmax_v2": ["ops.nn_ops._wrap_2d_function"], "ops.nn_ops.log_softmax_v2": ["ops.nn_ops._wrap_2d_function"], "ops.nn_ops.softmax_cross_entropy_with_logits_v2_helper": ["ops.nn_ops._flatten_outer_dims", "ops.math_ops.cast", "util.deprecation.deprecated_argument_lookup", "ops.array_ops.reshape", "ops.array_ops.slice", "eager.context.executing_eagerly", "ops.nn_ops.log_softmax_v2", "framework.ops.convert_to_tensor", "ops.math_ops.subtract", "ops.array_ops.shape", "framework.ops.name_scope", "ops.gen_nn_ops.softmax_cross_entropy_with_logits", "ops.nn_ops.softmax_cross_entropy_with_logits_v2_helper._move_dim_to_end", "framework.config.deterministic_ops_enabled", "ops.math_ops.reduce_sum", "ops.array_ops.rank"], "ops.nn_ops.softmax_cross_entropy_with_logits_v2_helper._move_dim_to_end": ["ops.array_ops.concat", "ops.math_ops.range", "ops.array_ops.transpose"], "ops.gen_nn_ops.softmax_cross_entropy_with_logits": [], "ops.nn_ops.softmax_cross_entropy_with_logits": ["util.deprecation.deprecated_argument_lookup", "ops.array_ops.stop_gradient", "ops.nn_ops.softmax_cross_entropy_with_logits_v2", "framework.ops.name_scope", "ops.nn_ops._ensure_xent_args"], "ops.gen_nn_ops.sparse_softmax_cross_entropy_with_logits": [], "ops.nn_ops.sparse_softmax_cross_entropy_with_logits_v2": ["ops.nn_ops.sparse_softmax_cross_entropy_with_logits"], "ops.nn_ops.avg_pool_v2": ["<builtin>.ValueError", "ops.nn_ops._get_sequence", "<builtin>.len"], "ops.nn_ops.avg_pool2d": ["ops.gen_nn_ops.avg_pool", "framework.ops.name_scope", "ops.nn_ops._get_sequence"], "ops.nn_ops.avg_pool1d": ["ops.array_ops.expand_dims_v2", "ops.gen_nn_ops.avg_pool", "framework.ops.name_scope", "ops.nn_ops._get_sequence", "ops.array_ops.squeeze"], "ops.nn_ops.avg_pool3d": ["ops.gen_nn_ops.avg_pool3d", "framework.ops.name_scope", "ops.nn_ops._get_sequence"], "ops.nn_ops.max_pool_v2": ["<builtin>.isinstance", "<builtin>.ValueError", "ops.nn_ops._get_sequence", "<builtin>.len"], "ops.nn_ops.max_pool": ["util.deprecation.deprecated_argument_lookup", "ops.gen_nn_ops.max_pool", "<builtin>.isinstance", "<builtin>.ValueError", "numpy.isscalar", "framework.ops.name_scope", "ops.nn_ops._get_sequence", "<builtin>.any", "ops.nn_ops.convert_padding"], "ops.gen_nn_ops.max_pool": [], "ops.nn_ops.max_pool1d": ["ops.gen_nn_ops.max_pool", "ops.array_ops.expand_dims_v2", "<builtin>.isinstance", "<builtin>.ValueError", "framework.ops.name_scope", "ops.nn_ops._get_sequence", "ops.array_ops.squeeze", "ops.nn_ops.convert_padding"], "ops.nn_ops.max_pool2d": ["ops.gen_nn_ops.max_pool", "<builtin>.isinstance", "<builtin>.ValueError", "framework.ops.name_scope", "ops.nn_ops._get_sequence", "ops.nn_ops.convert_padding"], "ops.nn_ops.max_pool3d": ["framework.ops.name_scope", "ops.gen_nn_ops.max_pool3d", "ops.nn_ops._get_sequence"], "ops.gen_nn_ops.max_pool3d": [], "ops.nn_ops.max_pool_with_argmax_v2": ["<builtin>.ValueError", "ops.nn_ops._get_sequence", "ops.gen_nn_ops.max_pool_with_argmax"], "ops.gen_nn_ops.max_pool_with_argmax": [], "ops.nn_ops.max_pool_with_argmax_v1": ["<builtin>.ValueError", "util.deprecation.deprecated_argument_lookup", "ops.gen_nn_ops.max_pool_with_argmax"], "ops.nn_ops._calc_conv3d_flops": ["numpy.prod", "framework.graph_util.tensor_shape_from_node_def_name", "<builtin>.int", "framework.ops.OpStats"], "ops.nn_ops._calc_conv_flops": ["numpy.prod", "framework.graph_util.tensor_shape_from_node_def_name", "<builtin>.int", "framework.ops.OpStats"], "ops.nn_ops._calc_depthwise_conv_flops": ["numpy.prod", "framework.graph_util.tensor_shape_from_node_def_name", "<builtin>.int", "framework.ops.OpStats"], "ops.nn_ops._calc_bias_add_flops": ["numpy.prod", "framework.graph_util.tensor_shape_from_node_def_name", "framework.ops.OpStats"], "ops.nn_ops.xw_plus_b": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.nn_ops.bias_add", "ops.math_ops.matmul"], "ops.nn_ops.xw_plus_b_v1": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.nn_ops.bias_add_v1", "ops.math_ops.matmul"], "ops.nn_ops._get_noise_shape": ["framework.tensor_shape.TensorShape", "<builtin>.enumerate", "ops.array_ops.shape", "<builtin>.len", "framework.tensor_shape.as_shape"], "ops.nn_ops.dropout_v2.dummy_rng_step": ["framework.random_seed.get_seed"], "ops.nn_ops._dropout": ["ops.gen_math_ops.sub", "ops.nn_ops._get_noise_shape", "framework.tensor_util.is_tf_type", "<builtin>.isinstance", "<builtin>.ValueError", "ops.nn_ops.dropout_v2.dummy_rng_step", "eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "framework.constant_op.constant", "framework.ops.name_scope", "ops.gen_math_ops.cast", "ops.gen_math_ops.real_div", "ops.nn_ops.stateless_dropout.dummy_rng_step", "ops.gen_math_ops.mul"], "ops.nn_ops.stateless_dropout": ["functools.partial", "ops.nn_ops._dropout"], "ops.nn_ops.stateless_dropout.dummy_rng_step": [], "ops.gen_nn_ops.top_kv2": [], "ops.nn_ops.nth_element": ["ops.gen_nn_ops.nth_element"], "ops.gen_nn_ops.nth_element": [], "ops.nn_ops.fractional_max_pool": ["ops.gen_nn_ops.fractional_max_pool"], "ops.gen_nn_ops.fractional_max_pool": [], "ops.nn_ops.fractional_max_pool_v2": ["framework.random_seed.get_seed", "<builtin>.isinstance", "<builtin>.ValueError", "ops.gen_nn_ops.fractional_max_pool", "ops.nn_ops._get_sequence"], "ops.nn_ops.fractional_avg_pool": ["ops.gen_nn_ops.fractional_avg_pool"], "ops.gen_nn_ops.fractional_avg_pool": [], "ops.nn_ops.fractional_avg_pool_v2": ["ops.gen_nn_ops.fractional_avg_pool", "framework.random_seed.get_seed"], "ops.nn_ops._calc_dilation2d_flops": ["numpy.prod", "framework.graph_util.tensor_shape_from_node_def_name", "<builtin>.int", "framework.ops.OpStats"], "ops.nn_ops.erosion2d": ["ops.math_ops.negative", "framework.ops.name_scope", "ops.gen_nn_ops.dilation2d", "ops.array_ops.reverse_v2"], "ops.nn_ops.erosion2d_v2": ["<builtin>.ValueError", "ops.math_ops.negative", "framework.ops.name_scope", "ops.gen_nn_ops.dilation2d", "ops.array_ops.reverse_v2"], "ops.nn_ops.in_top_k": ["framework.ops.name_scope", "ops.gen_nn_ops.in_top_kv2"], "ops.gen_nn_ops.in_top_kv2": [], "ops.nn_ops.in_top_k_v2": ["ops.nn_ops.in_top_k"], "ops.nn_ops.isotonic_regression": ["framework.ops.convert_to_tensor", "ops.nn_ops._wrap_2d_function"], "ops.numerics": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support", "util.deprecation.deprecated_endpoints"], "ops.numerics.verify_tensor_all_finite": ["ops.numerics.verify_tensor_all_finite_v2", "util.deprecation.deprecated_argument_lookup"], "ops.numerics.verify_tensor_all_finite_v2": ["framework.ops.colocate_with", "ops.array_ops.check_numerics", "ops.control_flow_ops.with_dependencies", "framework.ops.convert_to_tensor", "framework.ops.name_scope"], "ops.numerics.add_check_numerics_ops": ["ops.array_ops.check_numerics", "framework.ops.get_default_graph", "ops.control_flow_ops.group", "<builtin>.RuntimeError", "eager.context.executing_eagerly", "<builtin>.ValueError", "framework.ops.control_dependencies", "<builtin>.str"], "ops.optional_grad": ["framework.ops.RegisterGradient"], "ops.optional_grad._OptionalFromValueGrad": ["ops.gen_dataset_ops.optional_get_value"], "ops.optional_grad._OptionalGetValueGrad": ["ops.gen_dataset_ops.optional_from_value"], "ops.op_selector": [], "ops.op_selector.is_differentiable": ["ops._gradient_registry.lookup"], "ops.op_selector.is_iterable": ["<builtin>.iter", "<builtin>.isinstance"], "ops.op_selector.concatenate_unique": ["<builtin>.set"], "ops.op_selector.get_tensors": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.op_selector.get_unique_graph": ["ops.op_selector.is_iterable", "<builtin>.type", "<builtin>.str", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.op_selector.check_graphs": ["<builtin>.ValueError", "<builtin>.enumerate"], "ops.op_selector.make_list_of_t": ["ops.op_selector.get_tensors", "ops.op_selector.is_iterable", "ops.op_selector.get_unique_graph", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.op_selector.get_generating_ops": ["ops.op_selector.make_list_of_t"], "ops.op_selector.get_consuming_ops": ["ops.op_selector.make_list_of_t"], "ops.op_selector.make_list_of_op": ["ops.op_selector.get_unique_graph", "ops.op_selector.is_iterable", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.op_selector._get_inputs": ["ops.op_selector.is_differentiable"], "ops.op_selector.get_backward_walk_ops.is_within": [], "ops.op_selector._as_operation": ["<builtin>.isinstance"], "ops.op_selector._path_from": ["ops.op_selector._as_operation", "<builtin>.reversed", "<builtin>.set", "ops.op_selector.graph_inputs", "<builtin>.isinstance"], "ops.parsing_config": [], "ops.parsing_config.RaggedFeature": ["collections.namedtuple"], "ops.parsing_config.RaggedFeature.__new__": ["framework.dtypes.as_dtype", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.super", "<builtin>.ValueError"], "ops.parsing_config.SparseFeature.__new__": ["<builtin>.super"], "ops.parsing_config.FixedLenFeature.__new__": ["<builtin>.super"], "ops.parsing_config.FixedLenSequenceFeature.__new__": ["<builtin>.super"], "ops.parsing_config._ParseOpParams.__init__": ["<builtin>.len", "framework.tensor_shape.as_shape", "ops.parsing_config._ParseOpParams._validate", "framework.dtypes.as_dtype", "collections.OrderedDict"], "ops.parsing_config._ParseOpParams._validate": ["<builtin>.len", "<builtin>.set", "<builtin>.ValueError"], "ops.parsing_config._ParseOpParams.from_features": ["<builtin>.type", "<builtin>.isinstance", "ops.parsing_config._ParseOpParams.__init__", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.sorted"], "ops.parsing_config._ParseOpParams.dense_shapes_as_proto": [], "ops.parsing_config._ParseOpParams.num_features": ["<builtin>.len"], "ops.parsing_config._ParseOpParams.dense_defaults_vec": ["<builtin>.zip", "ops.parsing_config._ParseOpParams._make_dense_default"], "ops.parsing_config._ParseOpParams._make_dense_default": ["framework.ops.convert_to_tensor", "<builtin>.isinstance", "framework.constant_op.constant", "re.sub", "ops.array_ops.reshape"], "ops.parsing_config._ParseOpParams._add_feature": ["ops.parsing_config._ParseOpParams._add_fixed_len_feature", "ops.parsing_config._ParseOpParams._add_fixed_len_sequence_feature", "<builtin>.isinstance", "ops.parsing_config._ParseOpParams._add_varlen_feature", "ops.parsing_config._ParseOpParams._add_sparse_feature", "<builtin>.ValueError", "ops.parsing_config._ParseOpParams._add_ragged_feature"], "ops.parsing_config._ParseOpParams._add_varlen_feature": ["ops.parsing_config._ParseOpParams._add_sparse_key", "<builtin>.ValueError"], "ops.parsing_config._ParseOpParams._add_sparse_feature": ["<builtin>.len", "platform.tf_logging.warning", "<builtin>.isinstance", "<builtin>.ValueError", "ops.parsing_config._ParseOpParams._add_sparse_key", "<builtin>.sorted"], "ops.parsing_config._ParseOpParams._add_fixed_len_feature": ["<builtin>.str", "framework.tensor_shape.as_shape", "<builtin>.ValueError"], "ops.parsing_config._ParseOpParams._add_fixed_len_sequence_feature": ["framework.tensor_shape.as_shape", "<builtin>.ValueError"], "ops.parsing_config._ParseOpParams._add_ragged_feature": ["<builtin>.isinstance", "ops.parsing_config._ParseOpParams._add_ragged_key"], "ops.parsing_config._ParseOpParams._add_sparse_key": ["<builtin>.ValueError"], "ops.parsing_config._ParseOpParams._add_ragged_key": ["<builtin>.ValueError"], "ops.parsing_config._construct_tensors_for_composite_features": ["ragged_tensor.RaggedTensor.from_row_splits", "ops.parsing_config._add_batched_ragged_partition", "ops.parsing_config._add_ragged_partition", "ops.sparse_ops.sparse_merge", "<builtin>.isinstance", "<builtin>.dict", "<builtin>.sorted", "<builtin>.set", "<builtin>.reversed"], "ops.parsing_config._add_batched_ragged_partition": ["ops.math_ops.cast", "ops.math_ops.cumsum", "ragged_tensor.RaggedTensor.from_uniform_row_length", "framework.ops.control_dependencies", "ragged_tensor.RaggedTensor.from_value_rowids", "ops.math_ops.maximum", "ops.array_ops.repeat", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "ops.array_ops.concat", "ragged_tensor.RaggedTensor.from_row_starts", "<builtin>.ValueError", "ragged_tensor.RaggedTensor.from_row_splits", "ragged_tensor.RaggedTensor.from_row_lengths", "<builtin>.isinstance", "ragged_tensor.RaggedTensor.from_row_limits", "ops.array_ops.reshape", "ragged.ragged_math_ops.reduce_max", "ops.check_ops.assert_equal"], "ops.parsing_config._add_ragged_partition": ["framework.ops.convert_to_tensor", "ragged_tensor.RaggedTensor.from_row_splits", "ops.array_ops.shape", "ragged_tensor.RaggedTensor.from_row_lengths", "ragged_tensor.RaggedTensor.from_value_rowids", "<builtin>.isinstance", "ops.math_ops.cast", "ops.array_ops.concat", "ragged_tensor.RaggedTensor.from_row_limits", "ops.array_ops.reshape", "ragged_tensor.RaggedTensor.from_row_starts", "<builtin>.ValueError", "ragged_tensor.RaggedTensor.from_uniform_row_length"], "ragged_tensor.RaggedTensor.from_row_limits": [], "ops.parsing_config._build_ragged_tensors": ["ragged_tensor.RaggedTensor.from_row_splits", "<builtin>.zip"], "ops.parsing_config.FixedLenSequenceFeature": [], "ops.parsing_ops.parse_example_v2": ["ops.parsing_config._construct_tensors_for_composite_features", "ops.parsing_ops._parse_example_raw", "ops.parsing_ops._prepend_none_dimension", "<builtin>.ValueError", "parsing_config._ParseOpParams.from_features"], "parsing_config._ParseOpParams.from_features": [], "ops.parsing_ops._parse_example_raw": ["framework.sparse_tensor.SparseTensor", "<builtin>.zip", "ops.parsing_config._build_ragged_tensors", "<builtin>.dict", "<builtin>.len", "framework.ops.name_scope", "ops.gen_parsing_ops.parse_example_v2", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "ops.parsing_ops.parse_example": ["ops.parsing_ops.parse_example_v2"], "ops.parsing_ops.parse_single_example": ["ops.parsing_ops.parse_single_example_v2"], "ops.parsing_ops.parse_single_example_v2": ["ops.parsing_ops._assert_scalar", "ops.parsing_ops.parse_example_v2", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "ops.parsing_ops._assert_scalar": ["ops.array_ops.rank", "ops.control_flow_ops.Assert", "ops.control_flow_ops.with_dependencies", "ops.math_ops.equal", "<builtin>.ValueError"], "ops.parsing_ops.parse_sequence_example": ["ops.parsing_config._construct_tensors_for_composite_features", "ops.parsing_ops._parse_sequence_example_raw", "framework.ops.name_scope", "<builtin>.ValueError", "parsing_config._ParseOpParams.from_features"], "ops.parsing_ops._parse_sequence_example_raw": ["framework.sparse_tensor.SparseTensor", "ops.parsing_config._build_ragged_tensors", "<builtin>.dict", "ops.gen_parsing_ops.parse_sequence_example_v2", "<builtin>.len", "framework.ops.name_scope", "<builtin>.zip", "framework.ops.convert_to_tensor", "<builtin>.ValueError"], "ops.gen_parsing_ops.parse_sequence_example_v2": [], "ops.parsing_ops.parse_single_sequence_example": ["ops.parsing_ops._parse_single_sequence_example_raw", "ops.parsing_config._construct_tensors_for_composite_features", "framework.ops.name_scope", "<builtin>.ValueError", "parsing_config._ParseOpParams.from_features"], "ops.parsing_ops._parse_single_sequence_example_raw": ["framework.ops.name_scope", "ops.parsing_ops._assert_scalar", "framework.ops.convert_to_tensor", "ops.parsing_ops._parse_sequence_example_raw"], "ops.parsing_ops.decode_raw": ["ops.gen_parsing_ops.decode_raw", "ops.gen_parsing_ops.decode_padded_raw"], "ops.gen_parsing_ops.decode_padded_raw": [], "ops.gen_parsing_ops.decode_raw": [], "ops.parsing_ops.decode_raw_v1": ["ops.gen_parsing_ops.decode_raw", "util.deprecation.deprecated_argument_lookup", "<builtin>.ValueError"], "ops.parsing_ops.decode_csv_v2": ["<builtin>.range", "<builtin>.any", "ops.gen_parsing_ops.decode_csv", "<builtin>.len", "<builtin>.ValueError"], "ops.gen_parsing_ops.decode_csv": [], "ops.parsing_ops.decode_json_example": ["ops.gen_parsing_ops.decode_json_example"], "ops.gen_parsing_ops.decode_json_example": [], "ops.partitioned_variables": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "ops.partitioned_variables.variable_axis_size_partitioner._partitioner": ["<builtin>.int", "<builtin>.max", "<builtin>.min", "<builtin>.ValueError", "math.ceil", "<builtin>.isinstance", "math.floor"], "ops.partitioned_variables.min_max_variable_partitioner._partitioner": ["<builtin>.int", "<builtin>.len", "<builtin>.max", "<builtin>.min", "<builtin>.ValueError", "math.ceil"], "ops.partitioned_variables.fixed_size_partitioner._partitioner": ["<builtin>.len", "<builtin>.min"], "ops.partitioned_variables.create_partitioned_variables": ["ops.variable_scope._get_partitioned_variable", "<builtin>.len", "<builtin>.ValueError", "ops.variable_scope.variable_scope", "<builtin>.list"], "ops.partitioned_variables.create_partitioned_variables.<lambda1>": [], "ops.variable_scope._get_partitioned_variable": ["ops.variable_scope.VariableScope._get_partitioned_variable", "ops.variable_scope.get_variable_scope", "ops.variable_scope._get_default_variable_store", "<builtin>.ValueError"], "ops.proto_ops": ["framework.ops.NotDifferentiable"], "ops.random_grad": ["framework.ops.RegisterGradient"], "ops.random_grad.add_leading_unit_dimensions": ["ops.array_ops.ones", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.array_ops.shape"], "ops.random_grad._RandomGammaGrad": ["ops.array_ops.shape", "framework.ops.control_dependencies", "ops.random_grad.add_leading_unit_dimensions", "ops.math_ops.range", "ops.math_ops.reduce_sum", "ops.gen_random_ops.random_gamma_grad"], "ops.gen_random_ops.random_gamma_grad": [], "ops.random_grad._StatelessRandomGammaV2Grad": ["ops.array_ops.shape", "framework.ops.control_dependencies", "ops.random_grad.add_leading_unit_dimensions", "ops.array_ops.rank", "ops.math_ops.range", "ops.math_ops.reduce_sum", "ops.gen_random_ops.random_gamma_grad"], "ops.random_grad._Ndtr": ["framework.constant_op.constant", "ops.array_ops.where", "ops.math_ops.erfc", "ops.math_ops.abs", "numpy.sqrt", "ops.math_ops.erf"], "ops.random_grad._StatelessParameterizedTruncatedNormalGrad": ["ops.array_ops.ones_like", "ops.array_ops.broadcast_dynamic_shape", "ops.array_ops.shape", "ops.math_ops.log1p", "ops.gen_array_ops.broadcast_gradient_args", "framework.ops.control_dependencies", "ops.array_ops.reshape", "ops.array_ops.size", "ops.math_ops.exp", "ops.random_grad._Ndtr", "ops.math_ops.range", "ops.math_ops.log", "ops.math_ops.reduce_sum", "numpy.finfo", "ops.clip_ops.clip_by_value"], "ops.gen_random_ops.random_standard_normal": [], "ops.random_ops.parameterized_truncated_normal": ["framework.ops.convert_to_tensor", "framework.ops.name_scope", "framework.tensor_util.shape_tensor", "framework.random_seed.get_seed", "framework.tensor_util.maybe_set_static_shape", "ops.gen_random_ops.parameterized_truncated_normal"], "ops.gen_random_ops.parameterized_truncated_normal": [], "ops.gen_random_ops.truncated_normal": [], "ops.gen_random_ops.random_uniform_int": [], "ops.gen_random_ops.random_uniform": [], "ops.gen_random_ops.random_shuffle": [], "ops.random_ops.stateless_random_crop": ["ops.stateless_random_ops.stateless_random_uniform", "framework.ops.convert_to_tensor", "ops.math_ops.reduce_all", "ops.control_flow_ops.with_dependencies", "framework.ops.name_scope", "ops.array_ops.shape", "ops.control_flow_ops.Assert", "ops.array_ops.slice"], "ops.random_ops.multinomial_categorical_impl": ["framework.random_seed.get_seed", "ops.gen_random_ops.multinomial", "framework.ops.convert_to_tensor"], "ops.random_ops.categorical": ["framework.ops.name_scope", "ops.random_ops.multinomial_categorical_impl"], "ops.random_ops._maybe_set_static_shape_helper": ["eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "framework.ops.get_default_graph", "framework.tensor_util.shape_tensor", "framework.tensor_util.constant_value_as_shape"], "ops.gen_random_ops.random_gamma": [], "ops.random_ops.random_poisson_v2": ["ops.random_ops._maybe_set_static_shape_helper", "framework.ops.convert_to_tensor", "ops.gen_random_ops.random_poisson_v2", "framework.ops.name_scope", "framework.random_seed.get_seed"], "ops.gen_random_ops.random_poisson_v2": [], "ops.resources": ["util.tf_should_use.should_use_result", "collections.namedtuple"], "ops.resources.shared_resources": ["framework.ops.get_collection"], "ops.resources.local_resources": ["framework.ops.get_collection"], "ops.resources.report_uninitialized_resources": ["ops.resources.shared_resources", "os.environ.get", "ops.math_ops.logical_not", "framework.ops.name_scope", "ops.array_ops.constant", "ops.resources.local_resources", "ops.array_ops.stack", "ops.array_ops.boolean_mask", "framework.ops.device"], "ops.resources.initialize_resources": ["ops.control_flow_ops.no_op", "ops.control_flow_ops.group"], "ops.resource_variable_ops": ["framework.ops.register_proto_function", "contextlib.contextmanager", "util.tf_export.tf_export", "framework.auto_control_deps_utils.register_read_only_resource_op", "framework.ops.NotDifferentiable", "util._pywrap_utils.RegisterType", "framework.ops.register_tensor_conversion_function", "framework.ops.RegisterGradient"], "client.pywrap_tf_session.TF_GraphSetOutputHandleShapesAndTypes_wrapper": [], "ops.resource_variable_ops._combine_handle_data": ["ops.resource_variable_ops.get_eager_safe_handle_data", "<builtin>.RuntimeError", "<builtin>.len"], "ops.resource_variable_ops._variable_handle_from_shape_and_dtype": ["framework.tensor_shape.as_shape", "cpp_shape_inference_pb2.CppShapeInferenceResult.HandleData", "ops.resource_variable_ops._set_handle_shapes_and_types", "ops.gen_resource_variable_ops.var_handle_op", "framework.ops.get_default_graph", "framework.errors.InternalError", "cpp_shape_inference_pb2.CppShapeInferenceResult.HandleShapeAndType", "<builtin>.RuntimeError", "framework.dtypes.as_dtype", "ops.resource_variable_ops.get_eager_safe_handle_data", "eager.context.shared_name", "<builtin>.len", "ops.resource_variable_ops._combine_handle_data"], "ops.gen_resource_variable_ops.var_handle_op": [], "ops.resource_variable_ops.eager_safe_variable_handle": ["ops.resource_variable_ops._variable_handle_from_shape_and_dtype"], "ops.resource_variable_ops._handle_graph": ["<builtin>.isinstance", "framework.ops.has_default_graph", "eager.context.executing_eagerly"], "ops.resource_variable_ops.EagerResourceDeleter.__init__": ["<builtin>.isinstance", "<builtin>.ValueError", "eager.context.context"], "ops.resource_variable_ops.EagerResourceDeleter.__del__": ["<builtin>.isinstance", "framework.ops.device", "ops.gen_resource_variable_ops.destroy_resource_op", "eager.context.eager_mode"], "ops.resource_variable_ops.shape_safe_assign_variable_handle": ["framework.ops.convert_to_tensor", "ops.resource_variable_ops._handle_graph", "ops.gen_resource_variable_ops.assign_variable_op"], "ops.resource_variable_ops._maybe_set_handle_data": ["cpp_shape_inference_pb2.CppShapeInferenceResult.HandleData", "ops.resource_variable_ops.get_eager_safe_handle_data", "<builtin>.len"], "ops.resource_variable_ops.BaseResourceVariable.__init__": ["ops.resource_variable_ops.EagerResourceDeleter.__init__", "framework.tensor_shape.as_shape", "framework.ops.get_default_graph", "ops.variables.validate_synchronization_aggregation_trainable", "eager.context.executing_eagerly", "framework.ops.init_scope", "framework.dtypes.as_dtype"], "ops.variables.validate_synchronization_aggregation_trainable": ["enum.Enum.__init__", "<builtin>.ValueError", "<builtin>.isinstance"], "ops.resource_variable_ops.BaseResourceVariable.__repr__": ["framework.ops.numpy_text", "variables.VariableV1.get_shape", "ops.resource_variable_ops._UnreadVariable.read_value", "ops.resource_variable_ops.BaseResourceVariable.read_value", "eager.context.executing_eagerly"], "ops.resource_variable_ops._UnreadVariable.read_value": ["ops.resource_variable_ops._UnreadVariable._read_variable_op"], "ops.resource_variable_ops.BaseResourceVariable.read_value": ["framework.ops.name_scope", "ops.array_ops.identity", "ops.resource_variable_ops.BaseResourceVariable._read_variable_op", "ops.resource_variable_ops._UnreadVariable._read_variable_op"], "variables.VariableV1.get_shape": [], "ops.resource_variable_ops.BaseResourceVariable._assign_dependencies": ["framework.ops.control_dependencies"], "ops.resource_variable_ops.BaseResourceVariable.__array__": ["ops.resource_variable_ops.BaseResourceVariable.numpy", "numpy.asarray"], "ops.resource_variable_ops.BaseResourceVariable.numpy": ["<builtin>.NotImplementedError", "ops.resource_variable_ops._UnreadVariable.read_value", "ops.resource_variable_ops.BaseResourceVariable.read_value", "eager.context.executing_eagerly"], "ops.resource_variable_ops.BaseResourceVariable.__nonzero__": ["ops.resource_variable_ops.BaseResourceVariable.__bool__"], "ops.resource_variable_ops.BaseResourceVariable.__bool__": ["<builtin>.bool", "ops.resource_variable_ops._UnreadVariable.read_value", "ops.resource_variable_ops.BaseResourceVariable.read_value"], "ops.resource_variable_ops.BaseResourceVariable.__copy__": [], "ops.resource_variable_ops.BaseResourceVariable.__deepcopy__": ["ops.resource_variable_ops.ResourceVariable.__init__", "ops.resource_variable_ops._UnreadVariable.read_value", "ops.resource_variable_ops.BaseResourceVariable.read_value", "eager.context.executing_eagerly", "<builtin>.NotImplementedError"], "ops.resource_variable_ops.ResourceVariable.__init__": ["ops.resource_variable_ops.ResourceVariable._init_from_proto", "<builtin>.ValueError", "ops.resource_variable_ops.ResourceVariable._init_from_args", "eager.context.executing_eagerly"], "ops.resource_variable_ops.BaseResourceVariable.dtype": [], "ops.resource_variable_ops.BaseResourceVariable.device": [], "ops.resource_variable_ops.BaseResourceVariable.graph": [], "ops.resource_variable_ops.BaseResourceVariable.name": [], "ops.resource_variable_ops.BaseResourceVariable.shape": [], "ops.resource_variable_ops.BaseResourceVariable.set_shape": [], "ops.resource_variable_ops.BaseResourceVariable._shape_as_list": [], "ops.resource_variable_ops.BaseResourceVariable._shape_tuple": ["<builtin>.tuple", "ops.resource_variable_ops.BaseResourceVariable._shape_as_list"], "ops.resource_variable_ops.BaseResourceVariable.create": ["<builtin>.RuntimeError"], "ops.resource_variable_ops.BaseResourceVariable.handle": [], "ops.resource_variable_ops.BaseResourceVariable.value": ["ops.resource_variable_ops.BaseResourceVariable._read_variable_op", "ops.resource_variable_ops._UnreadVariable._read_variable_op", "framework.ops.colocate_with"], "ops.resource_variable_ops.BaseResourceVariable._read_variable_op": ["ops.resource_variable_ops.BaseResourceVariable._read_variable_op.read_and_set_handle", "eager.tape.record_operation", "framework.ops.colocate_with", "ops.resource_variable_ops.variable_accessed", "framework.ops.device", "eager.context.executing_eagerly", "<builtin>.getattr"], "ops.resource_variable_ops._UnreadVariable._read_variable_op": ["ops.resource_variable_ops._maybe_set_handle_data", "framework.ops.control_dependencies", "ops.gen_resource_variable_ops.read_variable_op"], "ops.resource_variable_ops.BaseResourceVariable._as_graph_element": [], "ops.resource_variable_ops.BaseResourceVariable.initializer": [], "ops.resource_variable_ops.BaseResourceVariable.initial_value": ["<builtin>.RuntimeError", "eager.context.executing_eagerly"], "ops.resource_variable_ops.BaseResourceVariable.constraint": [], "ops.resource_variable_ops.BaseResourceVariable.op": [], "ops.resource_variable_ops.BaseResourceVariable.trainable": [], "ops.resource_variable_ops.BaseResourceVariable.synchronization": [], "ops.resource_variable_ops.BaseResourceVariable.aggregation": [], "ops.resource_variable_ops.BaseResourceVariable.eval": ["<builtin>.RuntimeError", "eager.context.executing_eagerly"], "ops.resource_variable_ops.BaseResourceVariable.count_up_to": ["ops.gen_state_ops.resource_count_up_to"], "ops.gen_state_ops.resource_count_up_to": [], "ops.resource_variable_ops.BaseResourceVariable._map_resources": ["ops.resource_variable_ops.copy_to_graph_uninitialized", "framework.ops.device"], "ops.resource_variable_ops.copy_to_graph_uninitialized": ["variables.VariableV1._maybe_initialize_trackable", "ops.resource_variable_ops.UninitializedVariable.__init__"], "ops.resource_variable_ops.BaseResourceVariable._read_variable_op.read_and_set_handle": ["ops.resource_variable_ops._maybe_set_handle_data", "ops.gen_resource_variable_ops.read_variable_op"], "ops.resource_variable_ops.BaseResourceVariable._read_variable_op.<lambda1>": [], "ops.resource_variable_ops.BaseResourceVariable._read_variable_op.<lambda2>": [], "ops.resource_variable_ops.BaseResourceVariable.sparse_read": ["cpp_shape_inference_pb2.CppShapeInferenceResult.HandleData", "ops.gen_resource_variable_ops.resource_gather", "ops.resource_variable_ops.variable_accessed", "ops.array_ops.identity", "framework.ops.name_scope", "ops.resource_variable_ops.get_eager_safe_handle_data", "<builtin>.len"], "ops.gen_resource_variable_ops.resource_gather": [], "ops.resource_variable_ops.BaseResourceVariable.gather_nd": ["framework.ops.name_scope", "ops.resource_variable_ops.variable_accessed", "ops.array_ops.identity", "ops.gen_resource_variable_ops.resource_gather_nd"], "ops.gen_resource_variable_ops.resource_gather_nd": [], "ops.resource_variable_ops.BaseResourceVariable.to_proto": ["framework.variable_pb2.VariableDef", "framework.ops.strip_name_scope", "<builtin>.RuntimeError", "eager.context.executing_eagerly"], "ops.resource_variable_ops.BaseResourceVariable.from_proto": ["ops.resource_variable_ops.ResourceVariable.__init__", "<builtin>.RuntimeError", "eager.context.executing_eagerly"], "ops.resource_variable_ops.BaseResourceVariable.is_initialized": ["ops.gen_resource_variable_ops.var_is_initialized_op"], "ops.gen_resource_variable_ops.var_is_initialized_op": [], "ops.resource_variable_ops.BaseResourceVariable.assign_sub": ["ops.resource_variable_ops.BaseResourceVariable._lazy_read", "ops.gen_resource_variable_ops.assign_sub_variable_op", "ops.resource_variable_ops.BaseResourceVariable._assign_dependencies", "framework.ops.convert_to_tensor", "ops.resource_variable_ops._handle_graph"], "ops.resource_variable_ops.BaseResourceVariable._lazy_read": ["ops.resource_variable_ops.variable_accessed", "ops.resource_variable_ops._UnreadVariable.__init__"], "ops.resource_variable_ops.BaseResourceVariable.assign_add": ["ops.resource_variable_ops.BaseResourceVariable._lazy_read", "ops.gen_resource_variable_ops.assign_add_variable_op", "ops.resource_variable_ops.BaseResourceVariable._assign_dependencies", "framework.ops.convert_to_tensor", "ops.resource_variable_ops._handle_graph"], "ops.resource_variable_ops._UnreadVariable.__init__": ["<builtin>.isinstance", "framework.ops.inside_function", "ops.gen_resource_variable_ops.read_variable_op", "ops.resource_variable_ops._maybe_set_handle_data", "eager.context.executing_eagerly", "framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops.BaseResourceVariable.assign": ["ops.resource_variable_ops.BaseResourceVariable._lazy_read", "framework.ops.convert_to_tensor", "<builtin>.str", "<builtin>.ValueError", "ops.resource_variable_ops._handle_graph", "ops.gen_resource_variable_ops.assign_variable_op"], "ops.resource_variable_ops.BaseResourceVariable.__reduce__": ["ops.resource_variable_ops.BaseResourceVariable.numpy", "functools.partial"], "ops.resource_variable_ops.BaseResourceVariable.scatter_sub": ["<builtin>.isinstance", "ops.gen_resource_variable_ops.resource_scatter_sub", "ops.resource_variable_ops.BaseResourceVariable._lazy_read", "<builtin>.TypeError", "framework.ops.convert_to_tensor"], "ops.resource_variable_ops.BaseResourceVariable.scatter_add": ["<builtin>.isinstance", "ops.resource_variable_ops.BaseResourceVariable._lazy_read", "<builtin>.TypeError", "ops.gen_resource_variable_ops.resource_scatter_add", "framework.ops.convert_to_tensor"], "ops.resource_variable_ops.BaseResourceVariable.scatter_max": ["<builtin>.isinstance", "ops.resource_variable_ops.BaseResourceVariable._lazy_read", "ops.gen_resource_variable_ops.resource_scatter_max", "<builtin>.TypeError", "framework.ops.convert_to_tensor"], "ops.resource_variable_ops.BaseResourceVariable.scatter_min": ["<builtin>.isinstance", "ops.resource_variable_ops.BaseResourceVariable._lazy_read", "ops.gen_resource_variable_ops.resource_scatter_min", "<builtin>.TypeError", "framework.ops.convert_to_tensor"], "ops.resource_variable_ops.BaseResourceVariable.scatter_mul": ["<builtin>.isinstance", "ops.resource_variable_ops.BaseResourceVariable._lazy_read", "ops.gen_resource_variable_ops.resource_scatter_mul", "<builtin>.TypeError", "framework.ops.convert_to_tensor"], "ops.resource_variable_ops.BaseResourceVariable.scatter_div": ["ops.gen_resource_variable_ops.resource_scatter_div", "<builtin>.isinstance", "ops.resource_variable_ops.BaseResourceVariable._lazy_read", "<builtin>.TypeError", "framework.ops.convert_to_tensor"], "ops.resource_variable_ops.BaseResourceVariable.scatter_update": ["<builtin>.isinstance", "ops.resource_variable_ops.BaseResourceVariable._lazy_read", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "ops.gen_resource_variable_ops.resource_scatter_update"], "ops.resource_variable_ops.BaseResourceVariable.batch_scatter_update": ["ops.state_ops.batch_scatter_update", "<builtin>.isinstance", "ops.resource_variable_ops.BaseResourceVariable._lazy_read", "<builtin>.TypeError"], "ops.state_ops.batch_scatter_update": ["ops.array_ops.shape", "framework.ops.name_scope", "<builtin>.ValueError", "<builtin>.range", "framework.ops.convert_to_tensor", "ops.gen_math_ops._range", "ops.array_ops.expand_dims", "ops.state_ops.scatter_nd_update", "ops.array_ops.ones_like", "ops.array_ops.reshape", "ops.gen_math_ops.cast", "ops.array_ops.concat"], "ops.resource_variable_ops.BaseResourceVariable.scatter_nd_sub": ["ops.gen_state_ops.resource_scatter_nd_sub", "framework.ops.convert_to_tensor", "ops.resource_variable_ops.BaseResourceVariable._lazy_read"], "ops.gen_state_ops.resource_scatter_nd_sub": [], "ops.resource_variable_ops.BaseResourceVariable.scatter_nd_add": ["framework.ops.convert_to_tensor", "ops.gen_state_ops.resource_scatter_nd_add", "ops.resource_variable_ops.BaseResourceVariable._lazy_read"], "ops.gen_state_ops.resource_scatter_nd_add": [], "ops.resource_variable_ops.BaseResourceVariable.scatter_nd_update": ["ops.resource_variable_ops.BaseResourceVariable._lazy_read", "framework.ops.convert_to_tensor", "ops.gen_state_ops.resource_scatter_nd_update"], "ops.gen_state_ops.resource_scatter_nd_update": [], "ops.resource_variable_ops.BaseResourceVariable.scatter_nd_max": ["ops.gen_state_ops.resource_scatter_nd_max", "framework.ops.convert_to_tensor", "ops.resource_variable_ops.BaseResourceVariable._lazy_read"], "ops.gen_state_ops.resource_scatter_nd_max": [], "ops.resource_variable_ops.BaseResourceVariable.scatter_nd_min": ["ops.gen_state_ops.resource_scatter_nd_min", "framework.ops.convert_to_tensor", "ops.resource_variable_ops.BaseResourceVariable._lazy_read"], "ops.gen_state_ops.resource_scatter_nd_min": [], "ops.resource_variable_ops.BaseResourceVariable._write_object_proto": ["ops.resource_variable_ops.write_object_proto_for_resource_variable"], "ops.resource_variable_ops.BaseResourceVariable._strided_slice_assign": ["ops.resource_variable_ops.BaseResourceVariable._lazy_read", "ops.resource_variable_ops.BaseResourceVariable._assign_dependencies", "framework.ops.convert_to_tensor", "ops.gen_array_ops.resource_strided_slice_assign", "ops.resource_variable_ops._handle_graph"], "ops.gen_array_ops.resource_strided_slice_assign": [], "ops.resource_variable_ops.BaseResourceVariable.__complex__": ["ops.resource_variable_ops._UnreadVariable.value", "ops.resource_variable_ops.BaseResourceVariable.value", "<builtin>.complex"], "ops.resource_variable_ops._UnreadVariable.value": ["ops.resource_variable_ops._UnreadVariable._read_variable_op"], "ops.resource_variable_ops.BaseResourceVariable.__int__": ["ops.resource_variable_ops._UnreadVariable.value", "ops.resource_variable_ops.BaseResourceVariable.value", "<builtin>.int"], "ops.resource_variable_ops.BaseResourceVariable.__long__": ["ops.resource_variable_ops._UnreadVariable.value", "ops.resource_variable_ops.BaseResourceVariable.value"], "ops.resource_variable_ops.BaseResourceVariable.__float__": ["ops.resource_variable_ops._UnreadVariable.value", "<builtin>.float", "ops.resource_variable_ops.BaseResourceVariable.value"], "ops.resource_variable_ops.BaseResourceVariable._dense_var_to_tensor": ["ops.resource_variable_ops._UnreadVariable.value", "ops.resource_variable_ops._UnreadVariable.read_value", "ops.resource_variable_ops.BaseResourceVariable.value", "ops.resource_variable_ops.BaseResourceVariable.read_value", "<builtin>.ValueError"], "ops.resource_variable_ops.BaseResourceVariable.__iadd__": ["<builtin>.RuntimeError"], "ops.resource_variable_ops.BaseResourceVariable.__isub__": ["<builtin>.RuntimeError"], "ops.resource_variable_ops.BaseResourceVariable.__imul__": ["<builtin>.RuntimeError"], "ops.resource_variable_ops.BaseResourceVariable.__idiv__": ["<builtin>.RuntimeError"], "ops.resource_variable_ops.BaseResourceVariable.__itruediv__": ["<builtin>.RuntimeError"], "ops.resource_variable_ops.BaseResourceVariable.__irealdiv__": ["<builtin>.RuntimeError"], "ops.resource_variable_ops.BaseResourceVariable.__ipow__": ["<builtin>.RuntimeError"], "ops.resource_variable_ops.ResourceVariable._init_from_proto": ["framework.tensor_shape.TensorShape", "<builtin>.isinstance", "variables.Variable.SaveSliceInfo", "framework.ops.get_default_graph", "framework.ops.prepend_name_scope", "<builtin>.hasattr", "ops.variables.validate_synchronization_aggregation_trainable", "eager.context.executing_eagerly", "<builtin>.ValueError", "framework.dtypes.as_dtype"], "ops.resource_variable_ops.ResourceVariable._init_from_args": ["<builtin>.isinstance", "<builtin>.list", "attr_value_pb2.AttrValue.ListValue", "ops.variables.validate_synchronization_aggregation_trainable", "framework.ops.name_from_scope_name", "framework.ops.init_scope", "ops.gen_resource_variable_ops.assign_variable_op", "framework.ops.uid", "framework.attr_value_pb2.AttrValue", "ops.gen_resource_variable_ops.var_is_initialized_op", "framework.ops.colocate_with", "<builtin>.hasattr", "util.compat.as_bytes", "framework.ops.convert_to_tensor", "weakref.ref", "<builtin>.type", "framework.ops.add_to_collections", "framework.ops.get_default_graph", "ops.resource_variable_ops.eager_safe_variable_handle", "<builtin>.callable", "variables.VariableV1._maybe_initialize_trackable", "framework.ops.device", "eager.context.executing_eagerly", "<builtin>.super", "ops.array_ops.identity", "ops.variables._try_guard_against_uninitialized_dependencies", "ops.gen_resource_variable_ops.read_variable_op", "ops.resource_variable_ops._maybe_set_handle_data", "framework.ops.name_scope", "<builtin>.ValueError"], "variables.VariableV1._maybe_initialize_trackable": [], "ops.variables._try_guard_against_uninitialized_dependencies": ["ops.variables._safe_initial_value_from_tensor", "<builtin>.TypeError", "ops.variables._has_cycle", "<builtin>.isinstance"], "ops.resource_variable_ops.UninitializedVariable.__init__": ["framework.ops.uid", "framework.ops.name_from_scope_name", "ops.resource_variable_ops._variable_handle_from_shape_and_dtype", "framework.ops.add_to_collection", "framework.ops.device", "ops.gen_resource_variable_ops.read_variable_op", "ops.resource_variable_ops._maybe_set_handle_data", "eager.context.executing_eagerly", "framework.ops.name_scope", "framework.ops.init_scope", "<builtin>.super"], "ops.resource_variable_ops._dense_var_to_tensor": [], "ops.resource_variable_ops._UnreadVariable.name": [], "ops.resource_variable_ops._UnreadVariable.assign_sub": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.assign_add": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.assign": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_sub": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_add": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_max": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_min": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_mul": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_div": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_update": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.batch_scatter_update": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_nd_sub": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_nd_add": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_nd_update": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_nd_max": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.scatter_nd_min": ["framework.ops.control_dependencies", "<builtin>.super"], "ops.resource_variable_ops._UnreadVariable.op": [], "ops.resource_variable_ops._ReadGrad": [], "ops.resource_variable_ops._GatherGrad": ["ops.array_ops.expand_dims", "framework.ops.IndexedSlices", "ops.array_ops.concat", "ops.resource_variable_ops.variable_shape", "ops.array_ops.size", "ops.array_ops.reshape"], "ops.resource_variable_ops._to_proto_fn": [], "variables.Variable.from_proto": [], "ops.resource_variable_ops.VariableSpec.<lambda1>": [], "ops.resource_variable_ops.VariableSpec.__init__": ["<builtin>.super"], "ops.resource_variable_ops.VariableSpec._to_components": [], "ops.resource_variable_ops.VariableSpec._from_components": [], "ops.resource_variable_ops.VariableSpec._from_compatible_tensor_list": ["<builtin>.len"], "ops.rnn_cell": [], "ops.rnn_cell_impl": [], "ops.rnn_cell_wrapper_impl": [], "ops.rnn": ["util.tf_export.tf_export", "util.dispatch.add_dispatch_support", "util.deprecation.deprecated"], "ops.rnn._transpose_batch_time": ["ops.array_ops.rank", "ops.math_ops.range", "ops.array_ops.concat", "framework.tensor_shape.TensorShape", "ops.array_ops.transpose"], "ops.rnn._best_effort_input_batch_size": ["ops.array_ops.shape", "<builtin>.ValueError"], "ops.rnn._infer_state_dtype": ["<builtin>.all", "<builtin>.ValueError", "util.nest.flatten", "util.nest.is_sequence"], "ops.rnn._maybe_tensor_shape_from_tensor": ["<builtin>.isinstance", "framework.tensor_shape.as_shape", "framework.tensor_util.constant_value"], "ops.rnn._should_cache": ["ops.control_flow_util.GetContainingWhileContext", "eager.context.executing_eagerly", "ops.control_flow_util_v2.in_while_loop_defun", "framework.ops.get_default_graph"], "ops.rnn._rnn_step": ["ops.rnn._rnn_step._copy_some_through", "<builtin>.zip", "ops.rnn.static_rnn.<lambda1>", "<builtin>.ValueError", "util.nest.pack_sequence_as", "<builtin>.len", "ops.rnn._dynamic_rnn_loop._time_step.<lambda1>", "util.nest.flatten", "ops.control_flow_ops.cond", "util.nest.assert_same_structure", "<builtin>.isinstance"], "ops.rnn._rnn_step._copy_one_through": ["framework.ops.colocate_with", "ops.array_ops.where", "<builtin>.isinstance"], "ops.rnn._rnn_step._copy_some_through": ["<builtin>.zip", "ops.rnn._rnn_step._copy_one_through"], "ops.rnn._rnn_step._maybe_copy_some_through": ["ops.rnn.static_rnn.<lambda1>", "util.nest.flatten", "ops.rnn._dynamic_rnn_loop._time_step.<lambda1>", "ops.control_flow_ops.cond", "util.nest.assert_same_structure"], "ops.rnn.static_rnn.<lambda1>": [], "ops.rnn._dynamic_rnn_loop._time_step.<lambda1>": [], "ops.rnn._rnn_step._maybe_copy_some_through.<lambda1>": [], "ops.rnn._rnn_step._maybe_copy_some_through.<lambda2>": ["ops.rnn._rnn_step._copy_some_through"], "ops.rnn._rnn_step.<lambda1>": [], "ops.rnn._reverse_seq": ["<builtin>.list", "ops.array_ops.stack", "<builtin>.reversed", "<builtin>.zip", "util.nest.pack_sequence_as", "<builtin>.tuple", "framework.tensor_shape.unknown_shape", "<builtin>.len", "util.nest.flatten", "<builtin>.range", "ops.array_ops.reverse_sequence", "ops.array_ops.unstack"], "ops.rnn.bidirectional_dynamic_rnn": ["ops.rnn_cell_impl.assert_like_rnncell", "util.nest.map_structure", "ops.rnn.bidirectional_dynamic_rnn._reverse", "ops.rnn.dynamic_rnn", "ops.variable_scope.variable_scope"], "ops.rnn_cell_impl.assert_like_rnncell": [], "ops.rnn.dynamic_rnn": ["framework.ops.convert_to_tensor", "ops.array_ops.identity", "ops.rnn._transpose_batch_time", "ops.math_ops.cast", "ops.rnn_cell_impl.assert_like_rnncell", "ops.rnn._dynamic_rnn_loop", "util.nest.pack_sequence_as", "<builtin>.tuple", "<builtin>.ValueError", "eager.context.executing_eagerly", "util.nest.flatten", "ops.rnn._best_effort_input_batch_size", "util.nest.map_structure", "<builtin>.getattr", "ops.rnn.dynamic_rnn._assert_has_shape", "ops.rnn._should_cache", "framework.ops.control_dependencies", "ops.variable_scope.variable_scope"], "ops.rnn.bidirectional_dynamic_rnn._reverse": ["ops.array_ops.reverse", "ops.array_ops.reverse_sequence"], "ops.rnn.bidirectional_dynamic_rnn._map_reverse": ["ops.rnn.bidirectional_dynamic_rnn._reverse"], "ops.rnn.dynamic_rnn.<lambda1>": [], "ops.rnn.dynamic_rnn._assert_has_shape": ["ops.control_flow_ops.Assert", "ops.array_ops.stack", "ops.math_ops.equal", "ops.array_ops.shape", "ops.math_ops.reduce_all"], "ops.rnn._dynamic_rnn_loop": ["util.nest.map_structure_up_to", "<builtin>.range", "ops.array_ops.shape", "<builtin>.zip", "<builtin>.len", "ops.math_ops.reduce_min", "ops.rnn._maybe_tensor_shape_from_tensor", "eager.context.executing_eagerly", "ops.math_ops.minimum", "ops.control_flow_ops.while_loop", "ops.math_ops.reduce_max", "ops.rnn._dynamic_rnn_loop._create_ta", "<builtin>.tuple", "framework.ops.name_scope", "framework.tensor_shape.TensorShape", "<builtin>.isinstance", "ops.rnn_cell_impl._concat", "util.nest.pack_sequence_as", "<builtin>.ValueError", "<builtin>.enumerate", "ops.rnn._best_effort_input_batch_size", "util.nest.flatten", "ops.rnn._dynamic_rnn_loop._create_zero_arrays", "ops.array_ops.constant", "ops.math_ops.maximum", "ops.rnn._infer_state_dtype"], "ops.rnn._dynamic_rnn_loop._create_zero_arrays": ["ops.rnn_cell_impl._concat", "ops.rnn._infer_state_dtype", "ops.array_ops.stack", "ops.array_ops.zeros"], "ops.rnn_cell_impl._concat": [], "ops.rnn._dynamic_rnn_loop._create_ta": ["ops.tensor_array_ops.TensorArray"], "ops.rnn._dynamic_rnn_loop._time_step": ["ops.rnn._rnn_step", "<builtin>.zip", "util.nest.pack_sequence_as", "<builtin>.tuple", "ops.rnn._dynamic_rnn_loop._time_step.<lambda1>", "util.nest.flatten"], "ops.rnn._dynamic_rnn_loop.<lambda1>": [], "ops.rnn._dynamic_rnn_loop.<lambda2>": ["ops.array_ops.stack"], "ops.rnn.raw_rnn": ["ops.array_ops.shape", "framework.tensor_shape.dimension_at_index", "<builtin>.callable", "<builtin>.TypeError", "ops.rnn_cell_impl.assert_like_rnncell", "<builtin>.zip", "<builtin>.len", "ops.rnn._maybe_tensor_shape_from_tensor", "util.nest.assert_same_structure", "ops.array_ops.zeros", "ops.control_flow_ops.while_loop", "framework.tensor_shape.TensorShape", "framework.constant_op.constant", "ops.variable_scope.variable_scope", "ops.tensor_array_ops.TensorArray", "framework.ops.convert_to_tensor", "ops.rnn_cell_impl._concat", "util.nest.pack_sequence_as", "<builtin>.enumerate", "util.nest.flatten", "framework.tensor_shape.dimension_value", "ops.rnn._should_cache"], "ops.rnn.raw_rnn.<lambda1>": [], "ops.rnn.raw_rnn.condition": ["ops.math_ops.reduce_all", "ops.math_ops.logical_not"], "ops.rnn.raw_rnn.body": ["ops.math_ops.logical_or", "ops.rnn.raw_rnn.body._copy_some_through", "util.nest.assert_same_structure", "util.nest.map_structure"], "ops.rnn.raw_rnn.body._copy_some_through": ["util.nest.map_structure"], "ops.rnn.raw_rnn.body._copy_some_through.copy_fn": ["framework.ops.colocate_with", "ops.array_ops.where", "<builtin>.isinstance"], "ops.rnn.raw_rnn.body.<lambda1>": [], "ops.rnn.static_rnn": ["ops.array_ops.shape", "framework.tensor_shape.dimension_at_index", "<builtin>.TypeError", "ops.rnn._rnn_step", "ops.math_ops.cast", "util.nest.is_sequence", "ops.rnn_cell_impl.assert_like_rnncell", "ops.rnn.static_rnn.<lambda1>", "ops.math_ops.reduce_min", "ops.rnn.static_rnn._create_zero_output", "ops.math_ops.reduce_max", "<builtin>.tuple", "ops.variable_scope.variable_scope", "framework.ops.convert_to_tensor", "util.nest.pack_sequence_as", "<builtin>.ValueError", "<builtin>.enumerate", "util.nest.flatten", "<builtin>.getattr", "framework.tensor_shape.dimension_value", "ops.rnn._should_cache"], "ops.rnn.static_rnn._create_zero_output": ["ops.array_ops.stack", "ops.rnn_cell_impl._concat", "framework.tensor_shape.dimension_value", "framework.tensor_shape.TensorShape", "ops.array_ops.zeros", "ops.rnn._infer_state_dtype"], "ops.rnn.static_rnn.<lambda2>": [], "ops.rnn.static_state_saving_rnn": ["ops.array_ops.identity", "<builtin>.str", "util.nest.is_sequence", "<builtin>.zip", "util.nest.pack_sequence_as", "<builtin>.ValueError", "<builtin>.len", "util.nest.flatten", "ops.rnn.static_rnn", "framework.ops.control_dependencies"], "ops.rnn.static_bidirectional_rnn": ["<builtin>.TypeError", "util.nest.is_sequence", "ops.rnn_cell_impl.assert_like_rnncell", "<builtin>.zip", "util.nest.pack_sequence_as", "<builtin>.ValueError", "<builtin>.tuple", "util.nest.flatten", "ops.array_ops.concat", "ops.rnn.static_rnn", "ops.rnn._reverse_seq", "ops.variable_scope.variable_scope"], "ops.rnn_grad": ["framework.ops.RegisterGradient"], "ops.rnn_grad._block_lstm_grad": ["ops.gen_rnn_ops.block_lstm_grad"], "ops.gen_rnn_ops.block_lstm_grad": [], "ops.script_ops": ["framework.ops.RegisterGradient", "ops.script_ops.FuncRegistry.__init__", "core._pywrap_py_func.initialize_py_trampoline", "util.lazy_loader.LazyLoader", "util.dispatch.add_dispatch_support", "<builtin>.globals", "util.deprecation.deprecated", "framework.ops.NotDifferentiable", "util.tf_export.tf_export"], "ops.script_ops._maybe_copy_to_context_device": [], "ops.script_ops.EagerFunc.__init__": [], "ops.script_ops.EagerFunc._convert": ["framework.constant_op.constant", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "<builtin>.RuntimeError"], "ops.script_ops.EagerFunc.__call__": ["<builtin>.zip", "util.nest.flatten", "ops.script_ops._maybe_copy_to_context_device", "eager.context.eager_mode", "<builtin>.isinstance", "util.compat.as_bytes", "ops.script_ops.EagerFunc._convert", "framework.ops.device", "eager.backprop.GradientTape", "ops.script_ops.EagerFunc.__init__", "ops.script_ops._EagerPyFuncGrad.eagerly_executed_grad"], "ops.script_ops._EagerPyFuncGrad.eagerly_executed_grad": ["util.compat.as_bytes"], "ops.script_ops.FuncRegistry.__init__": ["weakref.WeakValueDictionary", "threading.Lock"], "ops.script_ops.FuncRegistry._ctx": ["eager.context.ensure_initialized", "eager.context.context"], "ops.script_ops.FuncRegistry.insert": ["ops.script_ops.FuncRegistry._next_unique_token"], "ops.script_ops.FuncRegistry._next_unique_token": [], "ops.script_ops.FuncRegistry.remove": [], "ops.script_ops.FuncRegistry._convert": ["numpy.vectorize", "numpy.asarray"], "ops.script_ops.FuncRegistry._convert.<lambda1>": [], "numpy.vectorize": [], "ops.script_ops.FuncRegistry.__call__": ["<builtin>.ValueError", "ops.script_ops.FuncRegistry._convert", "<builtin>.isinstance"], "ops.script_ops.FuncRegistry.size": ["<builtin>.len"], "core._pywrap_py_func.initialize_py_trampoline": [], "ops.script_ops._internal_py_func": ["eager.context.is_async", "<builtin>.isinstance", "<builtin>.hasattr", "framework.ops.get_default_graph", "<builtin>.callable", "ops.script_ops.FuncRegistry.insert", "<builtin>.ValueError", "ops.gen_script_ops.py_func_stateless", "util.tf_inspect.isfunction", "ops.gen_script_ops.py_func", "<builtin>.type", "ops.script_ops.EagerFunc.__init__", "ops.gen_script_ops.eager_py_func"], "ops.gen_script_ops.eager_py_func": [], "ops.gen_script_ops.py_func": [], "ops.gen_script_ops.py_func_stateless": [], "ops.script_ops._EagerPyFuncGrad": ["framework.ops.control_dependencies", "ops.script_ops._internal_py_func"], "ops.script_ops.py_func_common": ["framework.ops.executing_eagerly_outside_functions", "util.nest.flatten", "eager.context.context", "eager.context.executing_eagerly", "numpy.array", "framework.ops.device", "framework.ops.convert_to_tensor", "ops.script_ops._internal_py_func", "<builtin>.len"], "ops.sdca_ops": ["framework.ops.NotDifferentiable"], "ops.session_ops": ["util.tf_export.tf_export"], "ops.session_ops.encode_resource_handle": ["<builtin>.bytearray", "numpy.asarray"], "ops.session_ops.TensorHandle.__init__": ["util.compat.as_str_any"], "ops.session_ops.TensorHandle.__del__": [], "ops.session_ops.TensorHandle.__str__": [], "ops.session_ops.TensorHandle._get_resource_handle": ["framework.resource_handle_pb2.ResourceHandleProto"], "framework.resource_handle_pb2.ResourceHandleProto": [], "ops.session_ops.TensorHandle.to_numpy_array": ["ops.session_ops.TensorHandle._get_resource_handle", "ops.session_ops.encode_resource_handle"], "ops.session_ops.TensorHandle.handle": [], "ops.session_ops.TensorHandle.eval": ["ops.session_ops._get_handle_reader", "<builtin>.TypeError"], "ops.session_ops._get_handle_reader": ["ops.array_ops.placeholder", "ops.session_ops.TensorHandle._get_device_name", "ops.gen_data_flow_ops.get_session_tensor", "ops.session_ops.TensorHandle._get_reader_key", "ops.session_ops._register_handle_feeder"], "ops.session_ops.TensorHandle.delete": ["<builtin>.TypeError", "ops.session_ops._get_handle_deleter"], "ops.session_ops.TensorHandle.get_raw_handle": [], "ops.session_ops.TensorHandle._get_device_name": ["util.compat.as_str_any", "framework.device.canonical_name"], "ops.session_ops.TensorHandle._get_reader_key": ["<builtin>.str"], "ops.session_ops.TensorHandle._get_mover_key": ["ops.session_ops.TensorHandle._get_reader_key"], "ops.session_ops.get_session_handle": ["<builtin>.isinstance", "framework.ops.colocate_with", "<builtin>.TypeError", "ops.gen_data_flow_ops.get_session_handle"], "ops.gen_data_flow_ops.get_session_handle": [], "ops.session_ops.get_session_tensor": ["ops.array_ops.placeholder", "framework.ops.device", "ops.session_ops.TensorHandle._get_device_name", "ops.gen_data_flow_ops.get_session_tensor", "ops.session_ops._register_handle_feeder"], "ops.session_ops._register_handle_feeder": [], "ops.gen_data_flow_ops.get_session_tensor": [], "ops.session_ops.delete_session_tensor": ["framework.ops.device", "ops.session_ops.TensorHandle._get_device_name", "ops.gen_data_flow_ops.delete_session_tensor", "ops.array_ops.placeholder"], "ops.gen_data_flow_ops.delete_session_tensor": [], "ops.session_ops._get_handle_feeder": [], "ops.sets": [], "ops.sets_impl": ["util.tf_export.tf_export", "framework.ops.NotDifferentiable", "util.dispatch.add_dispatch_support", "<builtin>.frozenset"], "ops.sets_impl.set_size": ["ops.gen_set_ops.set_size", "<builtin>.isinstance", "<builtin>.TypeError", "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor"], "ops.gen_set_ops.set_size": [], "ops.sets_impl._convert_to_tensors_or_sparse_tensors": ["<builtin>.isinstance", "<builtin>.TypeError", "framework.sparse_tensor.convert_to_tensor_or_sparse_tensor"], "ops.sets_impl._set_operation": ["ops.gen_set_ops.dense_to_dense_set_operation", "<builtin>.ValueError", "<builtin>.isinstance", "ops.gen_set_ops.sparse_to_sparse_set_operation", "ops.gen_set_ops.dense_to_sparse_set_operation", "framework.sparse_tensor.SparseTensor"], "ops.gen_set_ops.sparse_to_sparse_set_operation": [], "ops.gen_set_ops.dense_to_sparse_set_operation": [], "ops.gen_set_ops.dense_to_dense_set_operation": [], "ops.sets_impl.set_intersection": ["ops.sets_impl._set_operation", "ops.sets_impl._convert_to_tensors_or_sparse_tensors"], "ops.sets_impl.set_difference": ["ops.sets_impl._set_operation", "ops.sets_impl._convert_to_tensors_or_sparse_tensors"], "ops.sets_impl.set_union": ["ops.sets_impl._set_operation", "ops.sets_impl._convert_to_tensors_or_sparse_tensors"], "ops.sort_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export"], "ops.sort_ops._sort_or_argsort": ["<builtin>.ValueError", "framework.ops.convert_to_tensor", "<builtin>.int", "framework.tensor_util.constant_value", "<builtin>.sorted"], "ops.sort_ops._descending_sort": ["ops.array_ops.shape", "framework.constant_op.constant", "ops.array_ops.rank", "ops.math_ops.range", "ops.array_ops.transpose", "numpy.arange", "ops.array_ops.tensor_scatter_update", "ops.nn_ops.top_k"], "ops.sort_ops._ascending_sort": ["ops.sort_ops._descending_sort"], "ops.sparse_grad": ["framework.ops.NotDifferentiable", "framework.ops.RegisterGradient"], "ops.sparse_grad._SparseReorderGrad": ["ops.array_ops.invert_permutation", "ops.array_ops.gather", "ops.math_ops.range", "framework.sparse_tensor.SparseTensor", "ops.sparse_ops.sparse_reorder", "ops.array_ops.shape"], "ops.sparse_ops.sparse_reorder": ["ops.gen_sparse_ops.sparse_reorder", "ops.array_ops.identity", "ops.sparse_ops._convert_to_sparse_tensor", "framework.sparse_tensor.SparseTensor"], "ops.sparse_grad._SparseAddGrad": ["ops.gen_sparse_ops.sparse_add_grad"], "ops.gen_sparse_ops.sparse_add_grad": [], "ops.sparse_grad._SparseTensorDenseAddGrad": ["ops.array_ops.gather_nd"], "ops.sparse_grad._SparseReduceSumGrad": ["ops.math_ops.cast", "ops.array_ops.reshape", "ops.array_ops.gather_nd", "ops.math_ops.reduced_shape"], "ops.sparse_grad._SparseSliceGrad": ["ops.gen_sparse_ops.sparse_slice_grad"], "ops.gen_sparse_ops.sparse_slice_grad": [], "ops.sparse_grad._SparseTensorDenseMatMulGrad": ["ops.array_ops.squeeze", "ops.array_ops.gather", "ops.array_ops.expand_dims", "ops.array_ops.transpose", "ops.gen_sparse_ops.sparse_tensor_dense_mat_mul", "ops.array_ops.matrix_transpose", "ops.math_ops.matmul", "<builtin>.TypeError"], "ops.gen_sparse_ops.sparse_tensor_dense_mat_mul": [], "ops.sparse_grad._SparseDenseCwiseAddGrad": ["<builtin>.NotImplementedError"], "ops.sparse_grad._SparseDenseCwiseMulOrDivGrad": ["ops.array_ops.size", "ops.sparse_ops.sparse_add", "ops.array_ops.expand_dims", "ops.array_ops.concat", "ops.array_ops.zeros_like", "ops.array_ops.gather_nd", "ops.array_ops.slice", "ops.array_ops.ones", "ops.math_ops.cast", "ops.math_ops.square", "framework.sparse_tensor.SparseTensor", "ops.array_ops.shape"], "ops.sparse_ops.sparse_add": ["util.deprecation.deprecated_argument_lookup", "ops.sparse_ops.sparse_add_v2"], "ops.sparse_grad._SparseDenseCwiseMulGrad": ["ops.sparse_grad._SparseDenseCwiseMulOrDivGrad"], "ops.sparse_grad._SparseDenseCwiseDivGrad": ["ops.sparse_grad._SparseDenseCwiseMulOrDivGrad"], "ops.sparse_grad._SparseSoftmaxGrad": ["ops.sparse_ops.sparse_reduce_sum", "framework.sparse_tensor.SparseTensor", "ops.sparse_ops.sparse_dense_cwise_add"], "ops.sparse_ops.sparse_reduce_sum": ["ops.gen_sparse_ops.sparse_reduce_sum", "util.deprecation.deprecated_argument_lookup", "ops.math_ops._ReductionDims"], "ops.sparse_ops.sparse_dense_cwise_add": ["framework.sparse_tensor.SparseTensor", "ops.gen_sparse_ops.sparse_dense_cwise_add"], "ops.sparse_grad._SparseSparseMaximumGrad": ["<builtin>.NotImplementedError"], "ops.sparse_grad._SparseSparseMinimumGrad": ["<builtin>.NotImplementedError"], "ops.sparse_grad._SparseFillEmptyRowsGrad": ["ops.gen_sparse_ops.sparse_fill_empty_rows_grad"], "ops.gen_sparse_ops.sparse_fill_empty_rows_grad": [], "ops.sparse_grad._SparseToDenseGrad": ["ops.math_ops.reduce_sum", "ops.array_ops.zeros_like", "ops.array_ops.gather_nd"], "ops.sparse_ops": ["util.dispatch.add_dispatch_support", "dispatch.OpDispatcher.register", "util.deprecation.deprecated_args", "util.deprecation.deprecated_endpoints", "util.tf_export.tf_export", "ops.sparse_ops._UnaryMapValueDispatcher.__init__", "util.deprecation.deprecated"], "ops.sparse_ops._convert_to_sparse_tensor": ["sparse_tensor.SparseTensor.from_value", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.sparse_ops._convert_to_sparse_tensors": ["<builtin>.TypeError", "ops.sparse_ops._convert_to_sparse_tensor", "<builtin>.isinstance"], "ops.sparse_ops._make_int64_tensor": ["<builtin>.TypeError", "ops.math_ops.cast", "<builtin>.isinstance", "framework.ops.convert_to_tensor"], "ops.sparse_ops.from_dense": ["framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "framework.ops.name_scope", "ops.array_ops.zeros_like", "ops.array_ops.gather_nd", "ops.math_ops.not_equal", "ops.array_ops.where_v2"], "ops.sparse_ops.sparse_eye": ["ops.math_ops.range", "ops.array_ops.stack", "ops.array_ops.ones", "framework.sparse_tensor.SparseTensor", "framework.ops.name_scope", "ops.math_ops.minimum", "ops.sparse_ops._make_int64_tensor"], "ops.gen_sparse_ops.sparse_concat": [], "ops.sparse_ops.sparse_add_v2": ["ops.array_ops.broadcast_static_shape", "ops.gen_sparse_ops.sparse_add", "framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "<builtin>.any", "ops.gen_sparse_ops.sparse_tensor_dense_add", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.all", "ops.sparse_ops._convert_to_sparse_tensor"], "ops.gen_sparse_ops.sparse_add": [], "ops.gen_sparse_ops.sparse_tensor_dense_add": [], "ops.sparse_ops._sparse_cross_internal_v2": ["<builtin>.range", "ops.math_ops.cast", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.all", "<builtin>.len"], "ops.gen_sparse_ops.sparse_cross_v2": [], "ops.sparse_ops._sparse_cross_internal": ["<builtin>.range", "framework.sparse_tensor.SparseTensor", "ops.math_ops.cast", "ops.gen_sparse_ops.sparse_cross", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.all", "<builtin>.len"], "ops.gen_sparse_ops.sparse_cross": [], "ops.gen_sparse_ops.sparse_dense_cwise_add": [], "ops.gen_sparse_ops.sparse_reorder": [], "ops.gen_sparse_ops.sparse_reshape": [], "ops.sparse_ops.KeywordRequired.__repr__": [], "ops.sparse_ops.sparse_split": ["ops.gen_sparse_ops.sparse_split", "<builtin>.ValueError", "<builtin>.range", "framework.sparse_tensor.SparseTensor", "<builtin>.isinstance", "util.deprecation.deprecated_argument_lookup", "ops.sparse_ops._convert_to_sparse_tensor"], "ops.gen_sparse_ops.sparse_split": [], "ops.sparse_ops.sparse_split_v2": ["ops.sparse_ops.sparse_split"], "ops.gen_sparse_ops.sparse_slice": [], "ops.sparse_ops.sparse_reduce_max_v2": ["ops.gen_sparse_ops.sparse_reduce_max_sparse", "ops.gen_sparse_ops.sparse_reduce_max", "ops.math_ops._ReductionDims", "framework.sparse_tensor.SparseTensor"], "ops.gen_sparse_ops.sparse_reduce_max_sparse": [], "ops.gen_sparse_ops.sparse_reduce_max": [], "ops.sparse_ops.sparse_reduce_max": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops._ReductionDims", "ops.gen_sparse_ops.sparse_reduce_max"], "ops.sparse_ops.sparse_reduce_max_sparse": ["ops.gen_sparse_ops.sparse_reduce_max_sparse", "util.deprecation.deprecated_argument_lookup", "ops.math_ops._ReductionDims", "framework.sparse_tensor.SparseTensor"], "ops.sparse_ops.sparse_reduce_sum_v2": ["ops.gen_sparse_ops.sparse_reduce_sum", "ops.math_ops._ReductionDims", "ops.gen_sparse_ops.sparse_reduce_sum_sparse", "framework.sparse_tensor.SparseTensor"], "ops.gen_sparse_ops.sparse_reduce_sum_sparse": [], "ops.gen_sparse_ops.sparse_reduce_sum": [], "ops.sparse_ops.sparse_reduce_sum_sparse": ["util.deprecation.deprecated_argument_lookup", "ops.math_ops._ReductionDims", "ops.gen_sparse_ops.sparse_reduce_sum_sparse", "framework.sparse_tensor.SparseTensor"], "ops.sparse_ops.sparse_to_indicator": ["framework.sparse_tensor.SparseTensor", "ops.array_ops.shape", "ops.array_ops.expand_dims", "framework.ops.name_scope", "ops.sparse_ops.sparse_merge_impl", "ops.sparse_ops.sparse_tensor_to_dense", "ops.array_ops.fill", "ops.sparse_ops._convert_to_sparse_tensor"], "ops.sparse_ops.sparse_merge_impl": ["ops.array_ops.concat", "<builtin>.ValueError", "framework.sparse_tensor.SparseTensor", "framework.ops.name_scope", "ops.array_ops.expand_dims", "<builtin>.isinstance", "ops.sparse_ops.sparse_reorder", "<builtin>.TypeError", "ops.math_ops.cast", "<builtin>.len", "<builtin>.type", "ops.sparse_ops._convert_to_sparse_tensor"], "ops.sparse_ops.sparse_reset_shape": ["ops.math_ops.add", "<builtin>.ValueError", "ops.check_ops.assert_equal", "numpy.all", "ops.check_ops.assert_less_equal", "framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "ops.array_ops.shape", "ops.array_ops.identity", "ops.math_ops.reduce_max", "ops.math_ops.maximum", "ops.array_ops.ones_like", "ops.control_flow_ops.with_dependencies", "ops.array_ops.constant", "ops.math_ops.cast", "numpy.array", "ops.sparse_ops._convert_to_sparse_tensor", "framework.tensor_util.constant_value"], "ops.gen_sparse_ops.sparse_fill_empty_rows": [], "ops.sparse_ops.serialize_sparse_v2": ["ops.gen_sparse_ops.serialize_sparse", "ops.sparse_ops._convert_to_sparse_tensor"], "ops.sparse_ops.serialize_many_sparse_v2": ["ops.sparse_ops._convert_to_sparse_tensor", "ops.gen_sparse_ops.serialize_many_sparse"], "ops.sparse_ops.deserialize_many_sparse": ["ops.gen_sparse_ops.deserialize_many_sparse", "framework.sparse_tensor.SparseTensor"], "ops.gen_sparse_ops.deserialize_many_sparse": [], "ops.sparse_ops.sparse_softmax": ["ops.gen_sparse_ops.sparse_softmax", "framework.ops.name_scope", "framework.sparse_tensor.SparseTensor"], "ops.gen_sparse_ops.sparse_softmax": [], "ops.sparse_ops.sparse_maximum": ["ops.gen_sparse_ops.sparse_sparse_maximum", "framework.ops.name_scope", "framework.sparse_tensor.SparseTensor"], "ops.gen_sparse_ops.sparse_sparse_maximum": [], "ops.sparse_ops.sparse_minimum": ["framework.sparse_tensor.SparseTensor", "framework.ops.name_scope", "ops.gen_sparse_ops.sparse_sparse_minimum"], "ops.gen_sparse_ops.sparse_sparse_minimum": [], "ops.sparse_ops.sparse_transpose": ["ops.math_ops.range", "<builtin>.enumerate", "framework.sparse_tensor.SparseTensor", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.array_ops.transpose", "ops.sparse_ops.sparse_reorder", "numpy.arange", "ops.array_ops.gather", "ops.array_ops.rank", "<builtin>.list", "framework.tensor_util.constant_value"], "ops.sparse_ops.map_values": ["<builtin>.ValueError", "framework.sparse_tensor.SparseTensor", "ops.sparse_ops._assert_sparse_compatible", "ops.sparse_ops._replace_sparse_with_values", "framework.ops.control_dependencies"], "ops.sparse_ops._replace_sparse_with_values": ["util.nest.flatten", "util.nest.pack_sequence_as", "<builtin>.isinstance"], "ops.sparse_ops._assert_sparse_compatible": ["ops.check_ops.assert_equal"], "ops.sparse_ops._add_sparse_to_tensors_map": ["ops.sparse_ops._convert_to_sparse_tensor", "ops.gen_sparse_ops.add_sparse_to_tensors_map"], "ops.gen_sparse_ops.add_sparse_to_tensors_map": [], "ops.sparse_ops._add_many_sparse_to_tensors_map": ["ops.sparse_ops._convert_to_sparse_tensor", "ops.gen_sparse_ops.add_many_sparse_to_tensors_map"], "ops.gen_sparse_ops.add_many_sparse_to_tensors_map": [], "ops.sparse_ops._take_many_sparse_from_tensors_map": ["framework.sparse_tensor.SparseTensor", "<builtin>.isinstance", "<builtin>.TypeError", "ops.gen_sparse_ops.take_many_sparse_from_tensors_map", "framework.ops.colocate_with"], "ops.gen_sparse_ops.take_many_sparse_from_tensors_map": [], "ops.sparse_ops._UnaryMapValueDispatcher.__init__": ["util.tf_inspect.getfullargspec", "util.tf_export.get_canonical_name_for_symbol"], "ops.sparse_ops._UnaryMapValueDispatcher.handle": ["framework.sparse_tensor.SparseTensor", "<builtin>.isinstance"], "ops.special_math_ops": ["functools.lru_cache", "framework.ops.RegisterGradient", "util.deprecation.deprecated_endpoints", "util.tf_export.tf_export", "util.dispatch.add_dispatch_support"], "ops.special_math_ops.dawsn": ["framework.ops.name_scope", "ops.gen_special_math_ops.dawsn"], "ops.gen_special_math_ops.dawsn": [], "ops.special_math_ops.expint": ["framework.ops.name_scope", "ops.gen_special_math_ops.expint"], "ops.gen_special_math_ops.expint": [], "ops.special_math_ops.fresnel_cos": ["framework.ops.name_scope", "ops.gen_special_math_ops.fresnel_cos"], "ops.gen_special_math_ops.fresnel_cos": [], "ops.special_math_ops.fresnel_sin": ["ops.gen_special_math_ops.fresnel_sin", "framework.ops.name_scope"], "ops.gen_special_math_ops.fresnel_sin": [], "ops.special_math_ops.spence": ["framework.ops.name_scope", "ops.gen_special_math_ops.spence"], "ops.gen_special_math_ops.spence": [], "ops.gen_special_math_ops.bessel_i0": [], "ops.gen_special_math_ops.bessel_i0e": [], "ops.gen_special_math_ops.bessel_i1": [], "ops.gen_special_math_ops.bessel_i1e": [], "ops.gen_special_math_ops.bessel_k0": [], "ops.gen_special_math_ops.bessel_k0e": [], "ops.gen_special_math_ops.bessel_k1": [], "ops.gen_special_math_ops.bessel_k1e": [], "ops.gen_special_math_ops.bessel_j0": [], "ops.gen_special_math_ops.bessel_j1": [], "ops.gen_special_math_ops.bessel_y0": [], "ops.gen_special_math_ops.bessel_y1": [], "ops.special_math_ops._einsum_grad": ["ops.gen_xla_ops.xla_einsum", "<builtin>.isinstance"], "ops.gen_xla_ops.xla_einsum": [], "ops.special_math_ops._enclosing_tpu_context": ["framework.ops.get_default_graph", "<builtin>.isinstance"], "ops.special_math_ops._einsum_v2": ["ops.gen_linalg_ops.einsum", "framework.ops.name_scope", "<builtin>.TypeError", "ops.special_math_ops._einsum_v2_parse_and_resolve_equation", "<builtin>.isinstance", "<builtin>.len", "<builtin>.list", "ops.special_math_ops._get_opt_einsum_contract_path", "<builtin>.map", "collections.namedtuple", "<builtin>.tuple"], "ops.special_math_ops._einsum_v1": ["framework.ops.name_scope", "ops.gen_xla_ops.xla_einsum", "<builtin>.len", "ops.special_math_ops._exponential_space_einsum_v1", "ops.special_math_ops._enclosing_tpu_context", "platform.tf_logging.warn", "<builtin>.set", "<builtin>.format", "<builtin>.TypeError", "<builtin>.ValueError", "ops.math_ops.trace", "ops.special_math_ops._einsum_v1_parse_and_resolve_equation", "ops.math_ops.reduce_sum", "ops.special_math_ops._transpose_if_necessary", "<builtin>.list", "<builtin>.sorted", "ops.special_math_ops._einsum_v1_reduction", "<builtin>.enumerate", "<builtin>.sum", "six.moves.xrange"], "ops.special_math_ops._einsum_v1_parse_and_resolve_equation": ["<builtin>.len", "<builtin>.set", "<builtin>.any", "<builtin>.sorted", "<builtin>.ValueError", "re.match", "<builtin>.enumerate"], "ops.special_math_ops._exponential_space_einsum_v1": ["ops.math_ops.reduce_sum", "ops.array_ops.reshape", "ops.array_ops.transpose", "<builtin>.isinstance", "<builtin>.len", "<builtin>.set", "<builtin>.list", "<builtin>.sorted", "<builtin>.zip", "<builtin>.ValueError", "<builtin>.enumerate", "ops.special_math_ops._einsum_v1_parse_and_resolve_equation"], "ops.special_math_ops._einsum_v1_reduction": ["ops.special_math_ops._reshape_if_necessary", "ops.special_math_ops._transpose_if_necessary", "ops.math_ops.multiply", "ops.special_math_ops._total_size", "<builtin>.len", "<builtin>.set", "<builtin>.sorted", "ops.array_ops.expand_dims", "<builtin>.all", "ops.math_ops.matmul", "ops.special_math_ops._get_shape", "<builtin>.ValueError", "<builtin>.enumerate"], "ops.special_math_ops._transpose_if_necessary": ["<builtin>.len", "ops.array_ops.transpose", "<builtin>.list", "<builtin>.range"], "ops.special_math_ops._einsum_v1_reduction.sort_key": [], "ops.special_math_ops._einsum_v1_reduction.<lambda1>": ["ops.special_math_ops._einsum_v1_reduction.sort_key"], "ops.special_math_ops._get_shape": ["<builtin>.enumerate", "ops.array_ops.shape"], "ops.special_math_ops._total_size": [], "ops.special_math_ops._reshape_if_necessary": ["ops.array_ops.reshape", "<builtin>.isinstance", "<builtin>.len", "<builtin>.all", "<builtin>.zip", "<builtin>.tuple"], "ops.special_math_ops._einsum_v2_parse_and_resolve_equation": ["<builtin>.len", "<builtin>.set", "<builtin>.list", "<builtin>.sorted", "collections.defaultdict", "<builtin>.filter", "numpy.prod", "<builtin>.ValueError", "re.match", "<builtin>.enumerate", "<builtin>.zip", "collections.Counter", "<builtin>.max"], "ops.special_math_ops._get_opt_einsum_contract_path": ["opt_einsum.contract_path", "<builtin>.tuple"], "opt_einsum.contract_path": [], "functools.lru_cache": [], "ops.special_math_ops._einsum_v2_parse_and_resolve_equation.<lambda1>": [], "ops.split_benchmark": ["platform.test.main"], "ops.split_benchmark.build_graph": ["framework.ops.device", "<builtin>.range", "ops.array_ops.split", "ops.array_ops.zeros", "ops.control_flow_ops.group"], "ops.split_benchmark.SplitBenchmark._run_graph": ["<builtin>.range", "numpy.random.randint", "ops.split_benchmark.build_graph", "protobuf.config_pb2.OptimizerOptions", "numpy.sum", "framework.ops.Graph", "protobuf.config_pb2.GraphOptions", "<builtin>.max", "client.session.Session", "platform.tf_logging.set_verbosity", "ops.variables.global_variables_initializer", "protobuf.config_pb2.ConfigProto", "platform.benchmark.TensorFlowBenchmark"], "platform.tf_logging.set_verbosity": ["platform.tf_logging.get_logger"], "platform.benchmark.TensorFlowBenchmark": [], "ops.split_benchmark.SplitBenchmark.benchmark_split": ["<builtin>.print", "ops.split_benchmark.SplitBenchmark._run_graph"], "ops.standard_ops": ["platform.system"], "ops.stateful_random_ops": ["util.tf_export.tf_export"], "ops.stateful_random_ops.non_deterministic_ints": ["ops.gen_stateful_random_ops.non_deterministic_ints"], "ops.gen_stateful_random_ops.non_deterministic_ints": [], "ops.stateful_random_ops._uint_to_int": ["<builtin>.isinstance"], "ops.stateful_random_ops._make_1d_state": ["ops.math_ops.cast", "ops.math_ops.maximum", "<builtin>.isinstance", "ops.array_ops.shape", "ops.array_ops.zeros", "ops.array_ops.reshape", "<builtin>.range", "ops.array_ops.concat", "util.nest.map_structure"], "ops.stateful_random_ops._get_counter_size": ["<builtin>.ValueError"], "ops.stateful_random_ops._get_state_size": ["<builtin>.ValueError"], "ops.stateful_random_ops._check_state_shape": ["eager.context.executing_eagerly", "<builtin>.isinstance"], "ops.stateful_random_ops._make_state_from_seed": ["ops.stateful_random_ops._make_1d_state", "ops.stateful_random_ops._get_state_size"], "ops.stateful_random_ops.create_rng_state": ["ops.stateless_random_ops.convert_alg_to_int", "ops.stateful_random_ops._make_state_from_seed"], "ops.stateless_random_ops.convert_alg_to_int": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance"], "ops.stateful_random_ops._shape_tensor": ["framework.ops.convert_to_tensor", "<builtin>.isinstance"], "ops.stateful_random_ops._convert_to_state_tensor": ["util.nest.map_structure", "ops.math_ops.cast"], "ops.stateful_random_ops.get_replica_id": ["distribute.distribution_strategy_context.get_replica_context"], "ops.stateful_random_ops.Generator.from_state": ["ops.stateful_random_ops.Generator.__init__"], "ops.stateful_random_ops.Generator.__init__": ["ops.stateful_random_ops.Generator._create_variable", "<builtin>.isinstance", "distribute.distribution_strategy_context.has_strategy", "distribute.distribution_strategy_context.get_strategy", "ops.stateful_random_ops._check_state_shape", "ops.stateless_random_ops.convert_alg_to_int", "ops.stateful_random_ops._convert_to_state_tensor"], "ops.stateful_random_ops.Generator.from_seed": ["ops.stateful_random_ops.create_rng_state", "ops.stateless_random_ops.convert_alg_to_int", "ops.stateful_random_ops.Generator.__init__"], "ops.stateful_random_ops.Generator.from_non_deterministic_state": ["ops.stateful_random_ops._get_state_size", "ops.stateful_random_ops.Generator.__init__", "<builtin>.RuntimeError", "framework.config.deterministic_ops_enabled", "ops.stateless_random_ops.convert_alg_to_int", "ops.stateful_random_ops.non_deterministic_ints"], "ops.stateful_random_ops.Generator.from_key_counter": ["ops.stateful_random_ops._get_state_size", "ops.stateful_random_ops.Generator.__init__", "ops.array_ops.reshape", "ops.array_ops.concat", "ops.stateless_random_ops.convert_alg_to_int", "ops.stateful_random_ops._convert_to_state_tensor"], "ops.stateful_random_ops.Generator._create_variable": ["ops.variables.Variable", "<builtin>.isinstance", "<builtin>.ValueError"], "ops.stateful_random_ops.Generator.reset": ["ops.stateful_random_ops._convert_to_state_tensor"], "ops.stateful_random_ops.Generator.reset_from_seed": ["ops.stateful_random_ops.create_rng_state"], "ops.stateful_random_ops.Generator.reset_from_key_counter": ["ops.array_ops.concat", "ops.array_ops.reshape", "ops.stateful_random_ops._get_state_size", "ops.stateful_random_ops._convert_to_state_tensor"], "ops.stateful_random_ops.Generator.state": [], "ops.stateful_random_ops.Generator.algorithm": [], "ops.stateful_random_ops.Generator._standard_normal": ["ops.stateful_random_ops.Generator._prepare_key_counter", "ops.gen_stateless_random_ops_v2.stateless_random_normal_v2"], "ops.stateful_random_ops.Generator._prepare_key_counter": ["ops.stateful_random_ops.Generator.skip", "ops.array_ops.bitcast", "ops.stateful_random_ops.Generator._preprocess_key", "ops.stateful_random_ops._get_counter_size", "ops.math_ops.reduce_prod"], "ops.gen_stateless_random_ops_v2.stateless_random_normal_v2": [], "ops.stateful_random_ops.Generator.key": ["<builtin>.ValueError"], "ops.stateful_random_ops.Generator._skip_single_var": ["ops.gen_stateful_random_ops.rng_read_and_skip", "ops.math_ops.cast"], "ops.gen_stateful_random_ops.rng_read_and_skip": [], "ops.stateful_random_ops.Generator.skip": ["distribute.values_util.mark_as_unsaveable", "distribute.distribution_strategy_context.enter_or_assert_strategy", "distribute.values_util.is_saving_non_distributed", "distribute.distribution_strategy_context.get_strategy", "ops.stateful_random_ops.Generator.skip.update_fn", "<builtin>.type", "distribute.distribution_strategy_context.in_cross_replica_context"], "ops.stateful_random_ops.Generator.skip.update_fn": ["ops.stateful_random_ops.Generator._skip_single_var"], "ops.stateful_random_ops.Generator._preprocess_key": ["ops.math_ops.cast", "distribute.distribution_strategy_context.enter_or_assert_strategy", "ops.stateful_random_ops.get_replica_id", "ops.array_ops.stack", "ops.gen_stateless_random_ops_v2.stateless_random_uniform_full_int_v2"], "ops.gen_stateless_random_ops_v2.stateless_random_uniform_full_int_v2": [], "ops.array_ops.bitcast": [], "ops.stateful_random_ops.Generator.normal": ["ops.stateful_random_ops.Generator._standard_normal", "ops.stateful_random_ops._shape_tensor", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.math_ops.add"], "ops.stateful_random_ops.Generator._truncated_normal": ["ops.stateful_random_ops.Generator._prepare_key_counter", "ops.gen_stateless_random_ops_v2.stateless_truncated_normal_v2"], "ops.gen_stateless_random_ops_v2.stateless_truncated_normal_v2": [], "ops.stateful_random_ops.Generator.truncated_normal": ["ops.stateful_random_ops._shape_tensor", "framework.ops.name_scope", "ops.math_ops.add", "framework.ops.convert_to_tensor", "ops.stateful_random_ops.Generator._truncated_normal"], "ops.stateful_random_ops.Generator._uniform": ["ops.stateful_random_ops.Generator._prepare_key_counter", "ops.gen_stateless_random_ops_v2.stateless_random_uniform_v2"], "ops.gen_stateless_random_ops_v2.stateless_random_uniform_v2": [], "ops.stateful_random_ops.Generator._uniform_full_int": ["ops.stateful_random_ops.Generator._prepare_key_counter", "ops.gen_stateless_random_ops_v2.stateless_random_uniform_full_int_v2"], "ops.stateful_random_ops.Generator.uniform": ["ops.stateful_random_ops._shape_tensor", "ops.stateful_random_ops.Generator._prepare_key_counter", "<builtin>.ValueError", "ops.stateful_random_ops.Generator._uniform_full_int", "framework.ops.name_scope", "ops.gen_stateless_random_ops_v2.stateless_random_uniform_int_v2", "ops.stateful_random_ops.Generator._uniform", "framework.dtypes.as_dtype", "framework.ops.convert_to_tensor", "ops.math_ops.add"], "ops.gen_stateless_random_ops_v2.stateless_random_uniform_int_v2": [], "ops.stateful_random_ops.Generator.uniform_full_int": ["ops.stateful_random_ops.Generator._uniform_full_int", "framework.dtypes.as_dtype", "ops.stateful_random_ops._shape_tensor", "framework.ops.name_scope"], "ops.stateful_random_ops.Generator.binomial": ["ops.stateful_random_ops._shape_tensor", "ops.gen_stateful_random_ops.stateful_random_binomial", "framework.ops.name_scope", "framework.dtypes.as_dtype", "framework.ops.convert_to_tensor"], "ops.gen_stateful_random_ops.stateful_random_binomial": [], "ops.stateful_random_ops.Generator._make_int64_keys": ["ops.stateful_random_ops.Generator.uniform_full_int"], "ops.stateful_random_ops.Generator.make_seeds": ["ops.array_ops.zeros_like", "ops.array_ops.stack", "ops.stateful_random_ops.Generator._make_int64_keys", "<builtin>.ValueError"], "ops.stateful_random_ops.Generator.split": ["<builtin>.ValueError", "ops.stateful_random_ops.Generator._make_int64_keys", "ops.array_ops.unstack", "ops.stateful_random_ops.Generator.__init__", "ops.stateful_random_ops.Generator.split._key_to_state"], "ops.stateful_random_ops.Generator.split._key_to_state": ["ops.stateful_random_ops._get_state_size"], "ops.stateful_random_ops.get_global_generator": ["<builtin>.RuntimeError", "framework.config.deterministic_ops_enabled", "framework.ops.init_scope", "ops.stateful_random_ops.Generator.from_non_deterministic_state"], "ops.stateful_random_ops.set_global_generator": [], "ops.stateless_random_ops": ["util.dispatch.add_dispatch_support", "util.deprecation.deprecated", "framework.ops.NotDifferentiable", "util.tf_export.tf_export"], "ops.stateless_random_ops._resolve_alg": ["ops.gen_stateless_random_ops_v2.stateless_random_get_alg"], "ops.gen_stateless_random_ops_v2.stateless_random_get_alg": [], "ops.stateless_random_ops._get_key_counter": ["ops.gen_stateless_random_ops_v2.stateless_random_get_key_counter", "ops.stateless_random_ops.uint32s_to_uint64", "ops.array_ops.reshape", "<builtin>.ValueError", "ops.array_ops.zeros", "ops.stateless_random_ops._philox_scramble_seed", "ops.math_ops.cast"], "ops.gen_stateless_random_ops_v2.stateless_random_get_key_counter": [], "ops.stateless_random_ops._philox_scramble_seed": ["ops.array_ops.stack", "ops.stateless_random_ops.uint32s_to_uint64", "ops.gen_stateless_random_ops_v2.stateless_random_uniform_full_int_v2", "ops.array_ops.reshape", "framework.constant_op.constant", "ops.math_ops.cast"], "ops.stateless_random_ops.uint32s_to_uint64": ["ops.math_ops.cast", "ops.bitwise_ops.left_shift", "ops.bitwise_ops.bitwise_or", "framework.constant_op.constant"], "ops.stateless_random_ops._get_key_counter_alg": ["ops.stateless_random_ops.convert_alg_to_int", "compat.compat.forward_compatible", "ops.stateless_random_ops._resolve_alg", "ops.stateless_random_ops._get_key_counter"], "ops.bitwise_ops.left_shift": [], "ops.stateless_random_ops.split": ["ops.stateless_random_ops.stateless_random_uniform", "framework.ops.convert_to_tensor"], "ops.stateless_random_ops.fold_in": ["ops.stateless_random_ops.stateless_random_uniform", "ops.array_ops.stack", "framework.ops.convert_to_tensor"], "ops.stateless_random_ops.stateless_random_binomial": ["ops.gen_stateless_random_ops.stateless_random_binomial", "framework.tensor_util.shape_tensor", "framework.ops.name_scope", "framework.tensor_util.maybe_set_static_shape", "framework.ops.convert_to_tensor"], "ops.gen_stateless_random_ops.stateless_random_binomial": [], "ops.stateless_random_ops.stateless_random_gamma": ["ops.array_ops.shape", "ops.array_ops.broadcast_dynamic_shape", "ops.math_ops.maximum", "numpy.finfo", "ops.array_ops.broadcast_to", "framework.tensor_util.shape_tensor", "framework.ops.name_scope", "framework.tensor_util.maybe_set_static_shape", "ops.gen_stateless_random_ops.stateless_random_gamma_v2", "framework.ops.convert_to_tensor"], "ops.gen_stateless_random_ops.stateless_random_gamma_v2": [], "ops.stateless_random_ops.stateless_random_poisson": ["framework.ops.name_scope", "ops.gen_stateless_random_ops.stateless_random_poisson", "framework.tensor_util.maybe_set_static_shape", "framework.tensor_util.shape_tensor"], "ops.gen_stateless_random_ops.stateless_random_poisson": [], "ops.stateless_random_ops.stateless_multinomial": ["framework.ops.name_scope", "ops.stateless_random_ops.stateless_multinomial_categorical_impl"], "ops.stateless_random_ops.stateless_multinomial_categorical_impl": ["ops.gen_stateless_random_ops.stateless_multinomial", "framework.ops.convert_to_tensor"], "ops.stateless_random_ops.stateless_categorical": ["framework.ops.name_scope", "ops.stateless_random_ops.stateless_multinomial_categorical_impl"], "ops.stateless_random_ops.stateless_parameterized_truncated_normal": ["framework.tensor_util.shape_tensor", "framework.ops.name_scope", "framework.tensor_util.maybe_set_static_shape", "ops.gen_stateless_random_ops.stateless_parameterized_truncated_normal", "framework.ops.convert_to_tensor"], "ops.gen_stateless_random_ops.stateless_parameterized_truncated_normal": [], "ops.state_grad": ["framework.ops.NotDifferentiable"], "ops.state_ops": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "ops.state_ops.variable_op": ["framework.tensor_shape.unknown_shape", "ops.gen_state_ops.variable"], "ops.gen_state_ops.variable": [], "ops.state_ops.variable_op_v2": ["ops.gen_state_ops.variable_v2"], "ops.gen_state_ops.variable_v2": [], "ops.state_ops.init_variable": ["framework.ops.name_scope", "framework.ops.convert_to_tensor", "framework.ops.colocate_with", "ops.gen_state_ops.assign", "<builtin>.callable"], "ops.gen_state_ops.assign": [], "ops.state_ops.is_variable_initialized": ["ops.gen_state_ops.is_variable_initialized"], "ops.gen_state_ops.is_variable_initialized": [], "ops.gen_state_ops.assign_sub": [], "ops.gen_state_ops.assign_add": [], "ops.state_ops.count_up_to": ["ops.gen_state_ops.resource_count_up_to", "ops.gen_state_ops.count_up_to"], "ops.gen_state_ops.count_up_to": [], "ops.state_ops.scatter_update": ["framework.ops.convert_to_tensor", "ops.gen_resource_variable_ops.resource_scatter_update", "ops.gen_state_ops.scatter_update"], "ops.gen_state_ops.scatter_update": [], "ops.state_ops.scatter_nd_update": ["framework.ops.convert_to_tensor", "ops.gen_state_ops.resource_scatter_nd_update", "ops.gen_state_ops.scatter_nd_update"], "ops.gen_state_ops.scatter_nd_update": [], "ops.gen_state_ops.scatter_add": [], "ops.state_ops.scatter_nd_add": ["framework.ops.convert_to_tensor", "ops.gen_state_ops.scatter_nd_add", "ops.gen_state_ops.resource_scatter_nd_add"], "ops.gen_state_ops.scatter_nd_add": [], "ops.state_ops.scatter_sub": ["framework.ops.convert_to_tensor", "ops.gen_resource_variable_ops.resource_scatter_sub", "ops.gen_state_ops.scatter_sub"], "ops.gen_state_ops.scatter_sub": [], "ops.state_ops.scatter_nd_sub": ["framework.ops.convert_to_tensor", "ops.gen_state_ops.scatter_nd_sub", "ops.gen_state_ops.resource_scatter_nd_sub"], "ops.gen_state_ops.scatter_nd_sub": [], "ops.state_ops.scatter_mul": ["framework.ops.convert_to_tensor", "ops.gen_resource_variable_ops.resource_scatter_mul", "ops.gen_state_ops.scatter_mul"], "ops.gen_state_ops.scatter_mul": [], "ops.state_ops.scatter_div": ["framework.ops.convert_to_tensor", "ops.gen_state_ops.scatter_div", "ops.gen_resource_variable_ops.resource_scatter_div"], "ops.gen_state_ops.scatter_div": [], "ops.state_ops.scatter_max": ["ops.gen_state_ops.scatter_max", "ops.gen_resource_variable_ops.resource_scatter_max", "framework.ops.convert_to_tensor"], "ops.gen_state_ops.scatter_max": [], "ops.state_ops.scatter_min": ["framework.ops.convert_to_tensor", "ops.gen_state_ops.scatter_min", "ops.gen_resource_variable_ops.resource_scatter_min"], "ops.gen_state_ops.scatter_min": [], "ops.string_ops": ["util.dispatch.add_dispatch_support", "util.tf_export.tf_export", "util.deprecation.deprecated_endpoints", "util.deprecation.deprecated", "framework.ops.NotDifferentiable", "util.deprecation.deprecated_args"], "ops.string_ops.regex_full_match": ["ops.gen_string_ops.regex_full_match", "ops.gen_string_ops.static_regex_full_match", "<builtin>.isinstance"], "ops.gen_string_ops.static_regex_full_match": [], "ops.gen_string_ops.regex_full_match": [], "ops.gen_string_ops.static_regex_replace": [], "ops.gen_string_ops.regex_replace": [], "ops.gen_string_ops.string_format": [], "ops.gen_string_ops.string_split_v2": [], "ops.string_ops._reduce_join_reduction_dims": ["numpy.arange", "ops.math_ops.range", "ops.array_ops.rank", "framework.constant_op.constant"], "ops.string_ops.reduce_join_v2": ["ops.gen_string_ops.reduce_join", "framework.ops.convert_to_tensor", "framework.ops.name_scope", "ops.string_ops._reduce_join_reduction_dims"], "ops.gen_string_ops.reduce_join": [], "ops.string_ops.string_length": ["ops.gen_string_ops.string_length"], "ops.gen_string_ops.string_length": [], "ops.string_ops.string_length_v2": ["ops.gen_string_ops.string_length"], "ops.string_ops.substr_deprecated": ["ops.string_ops.substr"], "ops.string_ops.substr_v2": ["ops.gen_string_ops.substr"], "ops.string_ops.string_to_number_v1": ["ops.gen_parsing_ops.string_to_number", "util.deprecation.deprecated_argument_lookup"], "ops.gen_string_ops.string_to_hash_bucket": [], "ops.string_ops.string_to_hash_bucket_v1": ["ops.gen_string_ops.string_to_hash_bucket", "util.deprecation.deprecated_argument_lookup"], "ops.summary_ops_v2": ["ops.summary_ops_v2._SummaryState.__init__", "util.tf_export.tf_export", "threading.Lock", "util.tf_contextlib.contextmanager", "util.deprecation.deprecated", "re.compile", "collections.namedtuple"], "ops.summary_ops_v2._SummaryState.__init__": ["<builtin>.super"], "ops.summary_ops_v2._SummaryContextManager.__init__": [], "ops.summary_ops_v2._SummaryContextManager.__enter__": [], "ops.summary_ops_v2._SummaryContextManager.__exit__": ["ops.summary_ops_v2.SummaryWriter.flush", "ops.summary_ops_v2._ResourceSummaryWriter.flush", "ops.summary_ops_v2._NoopSummaryWriter.flush", "ops.summary_ops_v2._LegacyResourceSummaryWriter.flush"], "ops.summary_ops_v2.SummaryWriter.flush": ["<builtin>.NotImplementedError"], "ops.summary_ops_v2._ResourceSummaryWriter.flush": ["eager.context.executing_eagerly", "framework.ops.device", "ops.gen_summary_ops.flush_summary_writer"], "ops.summary_ops_v2._NoopSummaryWriter.flush": [], "ops.summary_ops_v2._LegacyResourceSummaryWriter.flush": ["framework.ops.device", "ops.gen_summary_ops.flush_summary_writer"], "ops.summary_ops_v2._should_record_summaries_internal": ["<builtin>.callable", "ops.math_ops.logical_and", "ops.summary_ops_v2._should_record_summaries_internal.<lambda1>", "framework.tensor_util.constant_value", "framework.constant_op.constant"], "ops.summary_ops_v2._should_record_summaries_internal.<lambda1>": ["ops.summary_ops_v2.record_summaries_every_n_global_steps.<lambda1>", "<builtin>.callable"], "ops.summary_ops_v2.record_summaries_every_n_global_steps.<lambda1>": ["ops.math_ops.equal"], "ops.summary_ops_v2.should_record_summaries": ["ops.summary_ops_v2._should_record_summaries_internal"], "ops.summary_ops_v2._legacy_contrib_should_record_summaries": ["ops.summary_ops_v2._should_record_summaries_internal"], "ops.summary_ops_v2.record_summaries_every_n_global_steps": ["eager.context.executing_eagerly", "ops.summary_ops_v2.record_if", "training.training_util.get_or_create_global_step", "ops.summary_ops_v2.record_summaries_every_n_global_steps.<lambda1>", "framework.ops.device"], "training.training_util.get_or_create_global_step": ["training.training_util.get_global_step", "framework.ops.get_default_graph", "training.training_util.create_global_step"], "ops.summary_ops_v2.always_record_summaries": ["ops.summary_ops_v2.record_if"], "ops.summary_ops_v2.never_record_summaries": ["ops.summary_ops_v2.record_if"], "ops.summary_ops_v2.get_step": [], "ops.summary_ops_v2.set_step": [], "ops.summary_ops_v2.SummaryWriter.set_as_default": ["ops.summary_ops_v2._ResourceSummaryWriter.as_default", "ops.summary_ops_v2.SummaryWriter.as_default", "ops.summary_ops_v2._SummaryContextManager.__enter__", "ops.summary_ops_v2._NoopSummaryWriter.as_default"], "ops.summary_ops_v2._ResourceSummaryWriter.as_default": ["<builtin>.super", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "ops.summary_ops_v2._NoopSummaryWriter.as_default": [], "ops.summary_ops_v2.SummaryWriter.as_default": ["ops.summary_ops_v2._SummaryContextManager.__init__"], "ops.summary_ops_v2.SummaryWriter.init": ["<builtin>.NotImplementedError"], "ops.summary_ops_v2.SummaryWriter.close": ["<builtin>.NotImplementedError"], "ops.summary_ops_v2._ResourceSummaryWriter.__init__": ["eager.context.executing_eagerly", "ops.summary_ops_v2._TrackableResourceSummaryWriter.__init__", "ops.summary_ops_v2.create_file_writer_v2.create_fn", "ops.summary_ops_v2._ResourceSummaryWriter._set_up_resource_deleter", "ops.summary_ops_v2._TrackableResourceSummaryWriter._set_up_resource_deleter", "framework.ops.add_to_collection"], "ops.summary_ops_v2.create_file_writer_v2.create_fn": ["framework.ops.name_from_scope_name", "eager.context.executing_eagerly", "eager.context.shared_name", "ops.gen_summary_ops.summary_writer"], "ops.summary_ops_v2._TrackableResourceSummaryWriter.__init__": ["ops.summary_ops_v2._ResourceSummaryWriter.__init__", "tracking.TrackableResource.__init__"], "ops.summary_ops_v2._TrackableResourceSummaryWriter._set_up_resource_deleter": [], "ops.summary_ops_v2._ResourceSummaryWriter._set_up_resource_deleter": ["ops.resource_variable_ops.EagerResourceDeleter"], "ops.summary_ops_v2._ResourceSummaryWriter.set_as_default": ["<builtin>.super", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "ops.summary_ops_v2._ResourceSummaryWriter.init": ["eager.context.executing_eagerly", "<builtin>.RuntimeError"], "ops.gen_summary_ops.flush_summary_writer": [], "ops.summary_ops_v2._ResourceSummaryWriter.close": ["eager.context.executing_eagerly", "ops.summary_ops_v2._ResourceSummaryWriter.flush", "framework.ops.control_dependencies", "ops.gen_summary_ops.close_summary_writer", "framework.ops.device"], "ops.gen_summary_ops.close_summary_writer": [], "tracking.TrackableResource.__init__": [], "ops.summary_ops_v2._TrackableResourceSummaryWriter.__init__.<lambda1>": [], "ops.summary_ops_v2._TrackableResourceSummaryWriter._create_resource": ["ops.summary_ops_v2.create_file_writer_v2.create_fn"], "ops.summary_ops_v2._TrackableResourceSummaryWriter._initialize": [], "ops.summary_ops_v2._TrackableResourceSummaryWriter._destroy_resource": ["ops.gen_resource_variable_ops.destroy_resource_op"], "ops.summary_ops_v2._LegacyResourceSummaryWriter.__init__": ["eager.context.executing_eagerly", "ops.summary_ops_v2._LegacyResourceSummaryWriter.init", "ops.resource_variable_ops.EagerResourceDeleter", "framework.ops.add_to_collection"], "ops.summary_ops_v2._LegacyResourceSummaryWriter.init": [], "ops.summary_ops_v2._LegacyResourceSummaryWriter.close": ["framework.ops.control_dependencies", "ops.gen_summary_ops.close_summary_writer", "framework.ops.device", "ops.summary_ops_v2._LegacyResourceSummaryWriter.flush"], "ops.summary_ops_v2._NoopSummaryWriter.set_as_default": [], "ops.summary_ops_v2._NoopSummaryWriter": ["util.tf_contextlib.contextmanager"], "ops.summary_ops_v2._NoopSummaryWriter.init": [], "ops.summary_ops_v2._NoopSummaryWriter.close": [], "ops.summary_ops_v2.initialize": ["ops.summary_ops_v2.graph_v1", "eager.context.executing_eagerly", "ops.summary_ops_v2.summary_writer_initializer_op", "ops.summary_ops_v2._serialize_graph", "<builtin>.ValueError", "<builtin>.RuntimeError", "ops.array_ops.placeholder", "framework.ops.get_default_session"], "ops.summary_ops_v2.summary_writer_initializer_op": ["eager.context.executing_eagerly", "framework.ops.get_collection", "<builtin>.RuntimeError"], "ops.summary_ops_v2._serialize_graph": ["<builtin>.isinstance"], "ops.summary_ops_v2.graph_v1": ["eager.context.executing_eagerly", "<builtin>.isinstance", "ops.summary_ops_v2._serialize_graph", "ops.summary_ops_v2._choose_step", "ops.array_ops.identity", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "ops.gen_summary_ops.write_graph_summary", "<builtin>.type", "ops.control_flow_ops.no_op", "framework.ops.device"], "ops.summary_ops_v2._check_create_file_writer_args": ["<builtin>.isinstance", "<builtin>.ValueError", "framework.tensor_util.is_tf_type"], "ops.gen_summary_ops.summary_writer": [], "ops.summary_ops_v2.create_file_writer": ["ops.summary_ops_v2._LegacyResourceSummaryWriter.__init__", "ops.gen_summary_ops.summary_writer", "framework.constant_op.constant", "<builtin>.str", "framework.ops.device", "functools.partial"], "ops.summary_ops_v2.create_noop_writer": [], "ops.summary_ops_v2._cleanse_string": ["<builtin>.isinstance", "<builtin>.ValueError", "framework.ops.convert_to_tensor"], "ops.summary_ops_v2._nothing": ["framework.constant_op.constant"], "ops.summary_ops_v2.all_v2_summary_ops": ["eager.context.executing_eagerly", "framework.ops.get_collection"], "ops.summary_ops_v2.write.record": ["<builtin>.callable", "framework.ops.control_dependencies", "ops.array_ops.identity", "<builtin>.ValueError", "framework.constant_op.constant", "framework.ops.device", "ops.gen_summary_ops.write_summary"], "ops.gen_summary_ops.write_summary": [], "ops.summary_ops_v2.write_raw_pb": ["eager.context.executing_eagerly", "<builtin>.ValueError", "ops.summary_ops_v2.get_step", "framework.smart_cond.smart_cond", "ops.summary_ops_v2.should_record_summaries", "framework.constant_op.constant", "framework.ops.name_scope", "framework.ops.device", "framework.ops.add_to_collection"], "ops.summary_ops_v2.write_raw_pb.record": ["framework.ops.control_dependencies", "ops.array_ops.identity", "ops.gen_summary_ops.write_raw_proto_summary", "framework.constant_op.constant", "framework.ops.device"], "ops.gen_summary_ops.write_raw_proto_summary": [], "ops.summary_ops_v2.summary_writer_function": ["eager.context.executing_eagerly", "ops.summary_ops_v2._legacy_contrib_should_record_summaries", "framework.smart_cond.smart_cond", "ops.control_flow_ops.no_op", "framework.ops.device", "framework.ops.add_to_collection", "framework.ops.get_name_scope"], "ops.summary_ops_v2.summary_writer_function.record": ["ops.summary_ops_v2.audio.function", "ops.summary_ops_v2.generic.function", "framework.ops.control_dependencies", "ops.summary_ops_v2.scalar.function", "ops.summary_ops_v2.image.function", "ops.summary_op_util.summary_scope", "framework.constant_op.constant", "framework.ops.name_scope", "ops.summary_ops_v2.histogram.function"], "ops.summary_op_util.summary_scope": ["framework.ops.name_scope", "ops.summary_op_util.clean_tag"], "ops.summary_ops_v2.audio.function": ["ops.array_ops.identity", "ops.summary_ops_v2._choose_step", "ops.gen_summary_ops.write_audio_summary"], "ops.summary_ops_v2.generic.function": ["<builtin>.hasattr", "ops.summary_ops_v2._choose_step", "ops.array_ops.identity", "framework.constant_op.constant", "ops.gen_summary_ops.write_summary"], "ops.summary_ops_v2.scalar.function": ["ops.array_ops.identity", "ops.summary_ops_v2._choose_step", "ops.gen_summary_ops.write_scalar_summary"], "ops.summary_ops_v2.histogram.function": ["ops.array_ops.identity", "ops.summary_ops_v2._choose_step", "ops.gen_summary_ops.write_histogram_summary"], "ops.summary_ops_v2.image.function": ["framework.constant_op.constant", "ops.summary_ops_v2._choose_step", "ops.gen_summary_ops.write_image_summary", "ops.array_ops.identity"], "ops.summary_ops_v2.generic": ["ops.summary_ops_v2.summary_writer_function"], "ops.summary_ops_v2._choose_step": ["<builtin>.isinstance", "framework.ops.convert_to_tensor", "training.training_util.get_or_create_global_step"], "ops.gen_summary_ops.write_scalar_summary": [], "ops.gen_summary_ops.write_histogram_summary": [], "ops.gen_summary_ops.write_image_summary": [], "ops.summary_ops_v2.audio": ["ops.summary_ops_v2.summary_writer_function"], "ops.gen_summary_ops.write_audio_summary": [], "ops.gen_summary_ops.write_graph_summary": [], "ops.summary_ops_v2.import_event": ["ops.gen_summary_ops.import_event"], "ops.gen_summary_ops.import_event": [], "ops.summary_ops_v2.flush": ["ops.summary_ops_v2.SummaryWriter.flush", "<builtin>.isinstance", "ops.summary_ops_v2._ResourceSummaryWriter.flush", "ops.gen_summary_ops.flush_summary_writer", "ops.summary_ops_v2._NoopSummaryWriter.flush", "ops.summary_ops_v2._LegacyResourceSummaryWriter.flush", "ops.control_flow_ops.no_op", "framework.ops.device"], "ops.summary_ops_v2.eval_dir": ["os.path.join"], "ops.summary_ops_v2.create_summary_file_writer": ["platform.tf_logging.warning", "ops.summary_ops_v2.create_file_writer"], "ops.summary_ops_v2.run_metadata": ["ops.summary_ops_v2.write", "framework.summary_pb2.SummaryMetadata", "framework.constant_op.constant", "ops.summary_ops_v2.summary_scope", "framework.ops.device"], "ops.summary_ops_v2.run_metadata_graphs": ["ops.summary_ops_v2.write", "protobuf.config_pb2.RunMetadata", "framework.summary_pb2.SummaryMetadata", "framework.constant_op.constant", "ops.summary_ops_v2.summary_scope", "framework.ops.device"], "ops.summary_ops_v2.trace_off": ["eager.context.context", "eager.profiler.stop"], "ops.summary_op_util": ["re.compile", "contextlib.contextmanager"], "ops.summary_op_util.collect": ["framework.ops.add_to_collection"], "ops.summary_op_util.clean_tag": ["platform.tf_logging.info"], "ops.template": ["util.tf_export.tf_export"], "ops.template.make_template_internal": ["util.tf_decorator.make_decorator", "ops.template.EagerTemplate.__init__", "ops.template.Template.__init__", "eager.context.executing_eagerly", "functools.partial", "<builtin>.ValueError"], "ops.template.EagerTemplate.__init__": ["<builtin>.type", "<builtin>.super", "ops.template._EagerTemplateVariableStore.__init__", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "ops.template.Template.__init__": ["eager.function.defun", "traceback.format_stack", "<builtin>.ValueError"], "ops.template._skip_common_stack_elements": ["<builtin>.enumerate", "<builtin>.zip"], "ops.template.Template._call_func": ["platform.tf_logging.info", "tracking.util.capture_dependencies", "ops.template._skip_common_stack_elements", "<builtin>.tuple", "framework.ops.get_collection_ref", "traceback.format_stack", "<builtin>.len", "<builtin>.ValueError"], "tracking.util.capture_dependencies": ["ops.variable_scope.variable_creator_scope"], "ops.template.Template.__call__": ["ops.template.Template._call_func", "ops.template.EagerTemplate._call_func"], "ops.template.EagerTemplate._call_func": ["platform.tf_logging.info", "ops.template._EagerTemplateVariableStore.variables", "tracking.util.capture_dependencies", "ops.template._skip_common_stack_elements", "<builtin>.list", "ops.template._EagerTemplateVariableStore.trainable_variables", "<builtin>.tuple", "util.object_identity.ObjectIdentitySet", "traceback.format_stack", "<builtin>.len", "<builtin>.ValueError"], "ops.template.Template.name": [], "ops.template.Template.func": [], "ops.template.Template.variable_scope": [], "ops.template.Template.variable_scope_name": [], "ops.template.Template.variables": [], "ops.template.Template.trainable_variables": ["framework.ops.get_collection"], "ops.template.Template.non_trainable_variables": ["<builtin>.set"], "ops.template.Template.global_variables": ["framework.ops.get_collection"], "ops.template.Template.local_variables": ["framework.ops.get_collection"], "ops.template.Template.weights": [], "ops.template.Template.trainable_weights": [], "ops.template.Template.non_trainable_weights": [], "ops.template.Template": ["util.deprecation.deprecated"], "ops.template.Template.var_scope": [], "ops.template._EagerTemplateVariableStore.__init__": ["ops.variable_scope.EagerVariableStore", "ops.variable_scope._get_default_variable_store"], "ops.variable_scope.EagerVariableStore": [], "ops.template._EagerTemplateVariableStore.set_variable_scope_name": [], "ops.template._EagerTemplateVariableStore": ["util.tf_contextlib.contextmanager"], "ops.template._EagerTemplateVariableStore.as_default": ["ops.variable_scope._get_default_variable_store", "<builtin>.RuntimeError", "ops.variable_scope.get_variable_scope_store"], "ops.variable_scope.get_variable_scope_store": ["framework.ops.get_collection", "framework.ops.add_to_collection", "ops.variable_scope._VariableScopeStore.__init__"], "ops.template._EagerTemplateVariableStore._variables_in_scope": ["<builtin>.RuntimeError"], "ops.template._EagerTemplateVariableStore.variables": ["ops.template._EagerTemplateVariableStore._variables_in_scope"], "ops.template._EagerTemplateVariableStore.trainable_variables": ["ops.template._EagerTemplateVariableStore._variables_in_scope"], "ops.template._EagerTemplateVariableStore.non_trainable_variables": ["ops.template._EagerTemplateVariableStore._variables_in_scope"], "ops.template.EagerTemplate.__call__": ["ops.variable_scope.variable_scope", "ops.template._EagerTemplateVariableStore.set_variable_scope_name", "ops.template.EagerTemplate._call_func", "ops.template._EagerTemplateVariableStore.as_default"], "ops.template.EagerTemplate.variables": ["ops.template._EagerTemplateVariableStore.variables"], "ops.template.EagerTemplate.trainable_variables": ["ops.template._EagerTemplateVariableStore.trainable_variables"], "ops.template.EagerTemplate.non_trainable_variables": ["ops.template._EagerTemplateVariableStore.non_trainable_variables"], "ops.template.EagerTemplate.global_variables": [], "ops.template.EagerTemplate.local_variables": [], "ops.tensor_array_grad": ["framework.ops.RegisterGradient", "framework.ops.NotDifferentiable"], "ops.tensor_array_grad._GetGradSource": ["<builtin>.ValueError", "<builtin>.enumerate"], "ops.tensor_array_grad._TensorArrayReadGrad": ["ops.tensor_array_ops.TensorArray", "ops.tensor_array_grad._GetGradSource"], "ops.tensor_array_grad._TensorArrayWriteGrad": ["ops.tensor_array_ops.TensorArray", "framework.ops.control_dependencies", "ops.array_ops.identity", "ops.tensor_array_grad._GetGradSource"], "ops.tensor_array_grad._TensorArrayGatherGrad": ["ops.tensor_array_ops.TensorArray", "ops.tensor_array_grad._GetGradSource"], "ops.tensor_array_grad._TensorArrayScatterGrad": ["ops.tensor_array_ops.TensorArray", "framework.ops.control_dependencies", "ops.array_ops.identity", "ops.tensor_array_grad._GetGradSource"], "ops.tensor_array_grad._TensorArrayConcatGrad": ["ops.tensor_array_ops.TensorArray", "ops.tensor_array_grad._GetGradSource"], "ops.tensor_array_grad._TensorArraySplitGrad": ["ops.tensor_array_ops.TensorArray", "framework.ops.control_dependencies", "ops.array_ops.identity", "ops.tensor_array_grad._GetGradSource"], "ops.tensor_array_ops": ["framework.type_spec.register_type_spec_from_value_converter"], "ops.tensor_array_ops._GraphTensorArray.__init__": ["framework.tensor_shape.as_shape", "<builtin>.TypeError", "ops.tensor_array_ops._GraphTensorArray.__init__.create", "framework.dtypes.as_dtype", "framework.ops.name_scope", "framework.ops.colocate_with", "<builtin>.type", "framework.ops.device", "<builtin>.isinstance", "<builtin>.ValueError"], "ops.tensor_array_ops._GraphTensorArray.__init__.create": ["ops.gen_data_flow_ops.tensor_array_v3"], "ops.gen_data_flow_ops.tensor_array_v3": [], "ops.tensor_array_ops._GraphTensorArray.flow": [], "ops.tensor_array_ops._GraphTensorArray.dtype": [], "ops.tensor_array_ops._GraphTensorArray.handle": [], "ops.tensor_array_ops._GraphTensorArray.element_shape": [], "ops.tensor_array_ops._GraphTensorArray._check_element_shape": ["<builtin>.ValueError"], "ops.tensor_array_ops._GraphTensorArray": ["contextlib.contextmanager", "util.tf_should_use.should_use_result"], "ops.tensor_array_ops._GraphTensorArray._maybe_colocate_with": ["framework.ops.colocate_with"], "ops.tensor_array_ops._GraphTensorArray.identity": ["ops.array_ops.identity", "ops.tensor_array_ops.build_ta_with_new_flow"], "ops.tensor_array_ops._GraphTensorArray.grad": ["ops.tensor_array_ops.TensorArray.__init__", "framework.ops.colocate_with", "framework.ops.name_scope", "ops.gen_data_flow_ops.tensor_array_grad_v3", "ops.array_ops.identity", "framework.ops.control_dependencies"], "ops.gen_data_flow_ops.tensor_array_grad_v3": [], "ops.tensor_array_ops.TensorArray.__init__": ["weakref.ref", "ops.control_flow_util.EnableControlFlowV2", "ops.tensor_array_ops._EagerTensorArray.__init__", "ops.tensor_array_ops._GraphTensorArray.__init__", "framework.ops.get_default_graph", "eager.context.executing_eagerly", "ops.tensor_array_ops._GraphTensorArrayV2.__init__"], "ops.tensor_array_ops._GraphTensorArray.read": ["ops.gen_data_flow_ops.tensor_array_read_v3"], "ops.gen_data_flow_ops.tensor_array_read_v3": [], "ops.tensor_array_ops._GraphTensorArray.write": ["ops.tensor_array_ops._GraphTensorArray._maybe_colocate_with", "ops.gen_data_flow_ops.tensor_array_write_v3", "ops.tensor_array_ops._check_dtypes", "ops.tensor_array_ops.build_ta_with_new_flow", "framework.ops.name_scope", "framework.ops.convert_to_tensor", "ops.tensor_array_ops._GraphTensorArray._check_element_shape"], "ops.tensor_array_ops._check_dtypes": ["<builtin>.str", "traceback.format_stack", "platform.tf_logging.error"], "ops.gen_data_flow_ops.tensor_array_write_v3": [], "ops.tensor_array_ops._GraphTensorArray.stack": ["ops.math_ops.range", "ops.tensor_array_ops._GraphTensorArray.gather", "framework.ops.name_scope", "framework.ops.colocate_with", "ops.tensor_array_ops._GraphTensorArray.size"], "ops.tensor_array_ops._GraphTensorArray.size": ["ops.gen_data_flow_ops.tensor_array_size_v3", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._GraphTensorArray.gather": ["framework.tensor_shape.unknown_shape", "ops.gen_data_flow_ops.tensor_array_gather_v3"], "ops.gen_data_flow_ops.tensor_array_gather_v3": [], "ops.tensor_array_ops._GraphTensorArray.concat": ["ops.gen_data_flow_ops.tensor_array_concat_v3"], "ops.gen_data_flow_ops.tensor_array_concat_v3": [], "ops.tensor_array_ops._GraphTensorArray.unstack": ["ops.tensor_array_ops._GraphTensorArray.scatter", "ops.array_ops.shape", "ops.math_ops.range", "framework.ops.name_scope"], "ops.tensor_array_ops._GraphTensorArray.scatter": ["ops.gen_data_flow_ops.tensor_array_scatter_v3", "ops.tensor_array_ops._GraphTensorArray._maybe_colocate_with", "ops.tensor_array_ops._check_dtypes", "ops.tensor_array_ops.build_ta_with_new_flow", "framework.ops.name_scope", "eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "ops.tensor_array_ops._GraphTensorArray._check_element_shape"], "ops.gen_data_flow_ops.tensor_array_scatter_v3": [], "ops.tensor_array_ops._GraphTensorArray.split": ["ops.gen_data_flow_ops.tensor_array_split_v3", "framework.tensor_util.constant_value", "ops.tensor_array_ops._GraphTensorArray._maybe_colocate_with", "framework.tensor_shape.TensorShape", "ops.tensor_array_ops.build_ta_with_new_flow", "ops.tensor_array_ops._GraphTensorArray._check_element_shape", "framework.ops.name_scope", "eager.context.executing_eagerly", "ops.math_ops.cast", "framework.ops.convert_to_tensor"], "ops.gen_data_flow_ops.tensor_array_split_v3": [], "ops.gen_data_flow_ops.tensor_array_size_v3": [], "ops.tensor_array_ops._GraphTensorArray.close": ["ops.gen_data_flow_ops.tensor_array_close_v3"], "ops.gen_data_flow_ops.tensor_array_close_v3": [], "ops.tensor_array_ops._GraphTensorArrayV2.__init__": ["framework.tensor_shape.as_shape", "<builtin>.TypeError", "framework.dtypes.as_dtype", "framework.ops.name_scope", "<builtin>.isinstance", "<builtin>.ValueError", "ops.list_ops.tensor_list_reserve"], "ops.tensor_array_ops._GraphTensorArrayV2.flow": [], "ops.tensor_array_ops._GraphTensorArrayV2.dtype": [], "ops.tensor_array_ops._GraphTensorArrayV2.element_shape": [], "ops.tensor_array_ops._GraphTensorArrayV2.handle": [], "ops.tensor_array_ops._GraphTensorArrayV2._check_element_shape": ["<builtin>.ValueError"], "ops.tensor_array_ops._GraphTensorArrayV2.identity": ["ops.array_ops.identity", "ops.tensor_array_ops.build_ta_with_new_flow"], "ops.tensor_array_ops._GraphTensorArrayV2.grad": ["<builtin>.NotImplementedError"], "ops.tensor_array_ops._GraphTensorArrayV2.read": ["ops.list_ops.tensor_list_get_item", "framework.ops.name_scope"], "ops.tensor_array_ops._GraphTensorArrayV2.write": ["ops.list_ops.tensor_list_set_item", "ops.tensor_array_ops._GraphTensorArrayV2._check_element_shape", "ops.tensor_array_ops._check_dtypes", "ops.tensor_array_ops.build_ta_with_new_flow", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._GraphTensorArrayV2.stack": ["framework.tensor_util.constant_value", "ops.list_ops.tensor_list_stack", "framework.ops.name_scope"], "ops.tensor_array_ops._GraphTensorArrayV2.gather": ["ops.list_ops.tensor_list_gather"], "ops.tensor_array_ops._GraphTensorArrayV2.concat": ["ops.list_ops.tensor_list_concat"], "ops.tensor_array_ops._GraphTensorArrayV2": ["util.tf_should_use.should_use_result"], "ops.tensor_array_ops._GraphTensorArrayV2.unstack": ["ops.tensor_array_ops._GraphTensorArrayV2._check_element_shape", "ops.tensor_array_ops._check_dtypes", "ops.tensor_array_ops.build_ta_with_new_flow", "framework.ops.name_scope", "ops.list_ops.tensor_list_from_tensor", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._GraphTensorArrayV2.scatter": ["ops.tensor_array_ops._GraphTensorArrayV2._check_element_shape", "ops.list_ops.tensor_list_scatter", "ops.tensor_array_ops._check_dtypes", "ops.tensor_array_ops.build_ta_with_new_flow", "framework.ops.name_scope", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._GraphTensorArrayV2.split": ["ops.tensor_array_ops._GraphTensorArrayV2._check_element_shape", "framework.tensor_util.constant_value", "framework.tensor_shape.TensorShape", "ops.tensor_array_ops._check_dtypes", "ops.tensor_array_ops.build_ta_with_new_flow", "framework.ops.name_scope", "ops.list_ops.tensor_list_split", "eager.context.executing_eagerly", "ops.math_ops.cast", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._GraphTensorArrayV2.size": ["ops.list_ops.tensor_list_length", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._GraphTensorArrayV2.close": ["ops.gen_control_flow_ops.no_op"], "ops.gen_control_flow_ops.no_op": [], "ops.tensor_array_ops._EagerTensorArray.__init__": ["framework.tensor_shape.as_shape", "framework.dtypes.as_dtype", "<builtin>.isinstance", "<builtin>.range", "<builtin>.ValueError", "framework.constant_op.constant"], "ops.tensor_array_ops._EagerTensorArray.flow": [], "ops.tensor_array_ops._EagerTensorArray.dtype": [], "ops.tensor_array_ops._EagerTensorArray.handle": [], "ops.tensor_array_ops._EagerTensorArray.element_shape": [], "ops.tensor_array_ops._EagerTensorArray.identity": [], "ops.tensor_array_ops._EagerTensorArray.grad": ["<builtin>.NotImplementedError"], "ops.tensor_array_ops._EagerTensorArray.read": ["framework.errors_impl.OutOfRangeError", "ops.tensor_array_ops._EagerTensorArray._maybe_zero", "framework.errors_impl.InvalidArgumentError", "<builtin>.len", "<builtin>.isinstance"], "framework.errors_impl.OutOfRangeError": [], "ops.tensor_array_ops._EagerTensorArray._maybe_zero": ["ops.array_ops.zeros"], "ops.tensor_array_ops._EagerTensorArray._write": ["framework.errors_impl.OutOfRangeError", "framework.errors_impl.InvalidArgumentError", "<builtin>.len", "<builtin>.isinstance", "<builtin>.range", "<builtin>.ValueError", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._EagerTensorArray.write": ["ops.tensor_array_ops._EagerTensorArray._write"], "ops.tensor_array_ops._EagerTensorArray.stack": ["ops.tensor_array_ops._EagerTensorArray._maybe_zero", "<builtin>.len", "numpy.ndarray", "<builtin>.range", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._EagerTensorArray.gather": ["ops.tensor_array_ops._EagerTensorArray._maybe_zero", "ops.array_ops.stack", "<builtin>.isinstance"], "ops.tensor_array_ops._EagerTensorArray.concat": ["ops.array_ops.concat", "ops.tensor_array_ops._EagerTensorArray._maybe_zero", "framework.errors_impl.InvalidArgumentError", "<builtin>.len", "<builtin>.range"], "ops.tensor_array_ops._EagerTensorArray.unstack": ["<builtin>.ValueError", "ops.array_ops.unstack", "<builtin>.len"], "ops.tensor_array_ops._EagerTensorArray.scatter": ["<builtin>.zip", "ops.tensor_array_ops._EagerTensorArray._write", "ops.array_ops.unstack", "<builtin>.isinstance"], "ops.tensor_array_ops._EagerTensorArray.split": ["framework.errors_impl.InvalidArgumentError", "ops.tensor_array_ops._check_dtypes", "<builtin>.len", "ops.math_ops.reduce_sum", "ops.array_ops.split", "framework.ops.convert_to_tensor"], "ops.tensor_array_ops._EagerTensorArray.size": ["framework.constant_op.constant", "<builtin>.len"], "ops.tensor_array_ops._EagerTensorArray.close": [], "ops.tensor_array_ops.TensorArray.flow": [], "ops.tensor_array_ops.TensorArray.dtype": [], "ops.tensor_array_ops.TensorArray.handle": [], "ops.tensor_array_ops.TensorArray.element_shape": [], "ops.tensor_array_ops.TensorArray.dynamic_size": [], "ops.tensor_array_ops.TensorArray._infer_shape": [], "ops.tensor_array_ops.TensorArray.identity": [], "ops.tensor_array_ops.TensorArray.grad": [], "ops.tensor_array_ops.TensorArray.read": [], "ops.tensor_array_ops.TensorArray.write": [], "ops.tensor_array_ops.TensorArray.stack": [], "ops.tensor_array_ops.TensorArray.gather": [], "ops.tensor_array_ops.TensorArray.concat": [], "ops.tensor_array_ops.TensorArray.unstack": [], "ops.tensor_array_ops.TensorArray.scatter": [], "ops.tensor_array_ops.TensorArray.split": [], "ops.tensor_array_ops.TensorArray.size": [], "ops.tensor_array_ops.TensorArray.close": [], "ops.tensor_array_ops.TensorArraySpec.<lambda1>": [], "ops.tensor_array_ops.TensorArraySpec.__init__": ["framework.tensor_shape.as_shape", "framework.dtypes.as_dtype"], "ops.tensor_array_ops.TensorArraySpec.is_compatible_with": ["framework.type_spec.type_spec_from_value", "<builtin>.isinstance"], "ops.tensor_array_ops.TensorArraySpec.most_specific_compatible_type": ["<builtin>.ValueError", "ops.tensor_array_ops.TensorArraySpec.is_compatible_with", "ops.tensor_array_ops.TensorArraySpec.__init__"], "ops.tensor_array_ops.TensorArraySpec._serialize": [], "ops.tensor_array_ops.TensorArraySpec._component_specs": ["framework.tensor_spec.TensorSpec"], "ops.tensor_array_ops.TensorArraySpec._to_components": ["<builtin>.TypeError", "framework.ops.name_scope", "<builtin>.type", "<builtin>.isinstance", "ops.list_ops.tensor_list_from_tensor"], "ops.tensor_array_ops.TensorArraySpec._from_components": ["ops.tensor_array_ops.TensorArray.__init__"], "ops.tensor_array_ops.TensorArraySpec.from_value": ["<builtin>.type", "<builtin>.TypeError", "ops.tensor_array_ops.TensorArraySpec.__init__", "<builtin>.isinstance"], "ops.tensor_array_ops.TensorArraySpec._to_legacy_output_types": [], "ops.tensor_array_ops.TensorArraySpec._to_legacy_output_shapes": ["framework.tensor_shape.TensorShape"], "ops.tensor_array_ops.TensorArraySpec._to_legacy_output_classes": [], "ops.transpose_benchmark": ["platform.test.main"], "ops.transpose_benchmark.build_graph": ["framework.ops.device", "ops.control_flow_ops.group", "numpy.prod", "numpy.arange", "framework.ops.control_dependencies", "framework.constant_op.constant", "ops.array_ops.transpose", "<builtin>.range"], "ops.transpose_benchmark.TransposeBenchmark._run_graph": ["framework.ops.Graph", "ops.variables.global_variables_initializer", "test.Benchmark.report_benchmark", "<builtin>.str", "client.session.Session", "numpy.prod", "time.time", "<builtin>.print", "ops.transpose_benchmark.build_graph", "numpy.array"], "ops.transpose_benchmark.TransposeBenchmark.benchmark_transpose": ["ops.transpose_benchmark.TransposeBenchmark._run_graph", "<builtin>.zip", "<builtin>.print"], "ops.unconnected_gradients": [], "ops.variables": ["util.tf_export.tf_export", "ops.variables.Variable._OverloadAllOperators", "framework.ops.register_tensor_conversion_function", "util._pywrap_utils.RegisterType", "util.deprecation.deprecated", "util.tf_should_use.should_use_result", "<builtin>.range"], "ops.variables.default_variable_creator": ["<builtin>.NotImplementedError"], "ops.variables.default_variable_creator_v2": ["<builtin>.NotImplementedError"], "ops.variables._make_getter": [], "ops.variables._make_getter.getter": [], "ops.variables.VariableAggregationV2.__hash__": ["<builtin>.hash"], "ops.variables.VariableAggregationV2.__eq__": ["<builtin>.int", "<builtin>.isinstance"], "ops.variables.VariableAggregation.__hash__": ["<builtin>.hash"], "ops.variables.VariableMetaclass._variable_v1_call": ["ops.variables.VariableMetaclass._variable_v1_call.<lambda1>", "ops.variables._make_getter", "framework.ops.get_default_graph", "ops.variables._make_getter.getter"], "ops.variables.VariableMetaclass._variable_v1_call.<lambda1>": ["ops.variables.default_variable_creator"], "ops.variables.VariableMetaclass._variable_v2_call": ["ops.variables._make_getter", "ops.variables.VariableMetaclass._variable_v2_call.<lambda1>", "framework.ops.get_default_graph", "ops.variables._make_getter.getter"], "ops.variables.VariableMetaclass._variable_v2_call.<lambda1>": ["ops.variables.default_variable_creator_v2"], "ops.variables.VariableMetaclass": ["util.traceback_utils.filter_traceback"], "ops.variables.VariableMetaclass.__call__": ["ops.variables.VariableMetaclass._variable_v1_call", "<builtin>.super", "ops.variables.VariableMetaclass._variable_v2_call"], "ops.variables.Variable.__init__": [], "ops.variables.Variable.__repr__": [], "ops.variables.Variable.value": [], "ops.variables.Variable.read_value": [], "ops.variables.Variable.set_shape": [], "ops.variables.Variable.trainable": [], "ops.variables.Variable.synchronization": [], "ops.variables.Variable.aggregation": [], "ops.variables.Variable.eval": [], "ops.variables.Variable.initialized_value": ["ops.control_flow_ops.cond", "framework.ops.init_scope", "ops.variables.is_variable_initialized"], "ops.variables.Variable.initialized_value.<lambda1>": [], "ops.variables.Variable.initial_value": [], "ops.variables.Variable.constraint": [], "ops.variables.Variable.assign": [], "ops.variables.Variable.assign_add": [], "ops.variables.Variable.assign_sub": [], "ops.variables.Variable.scatter_sub": [], "ops.variables.Variable.scatter_add": [], "ops.variables.Variable.scatter_max": [], "ops.variables.Variable.scatter_min": [], "ops.variables.Variable.scatter_mul": [], "ops.variables.Variable.scatter_div": [], "ops.variables.Variable.scatter_update": [], "ops.variables.Variable.batch_scatter_update": [], "ops.variables.Variable.scatter_nd_sub": [], "ops.variables.Variable.scatter_nd_add": [], "ops.variables.Variable.scatter_nd_update": [], "ops.variables.Variable.sparse_read": [], "ops.variables.Variable.gather_nd": [], "ops.variables.Variable.count_up_to": [], "ops.variables.Variable.load": ["ops.variables.RefVariable.assign", "framework.ops.get_default_session", "<builtin>.ValueError", "eager.context.executing_eagerly", "ops.variables.Variable.assign"], "ops.variables.RefVariable.assign": ["ops.state_ops.assign"], "ops.variables.Variable._TensorConversionFunction": ["<builtin>.ValueError"], "ops.variables.Variable._OverloadAllOperators": ["<builtin>.setattr", "ops.variables.Variable._OverloadOperator"], "ops.variables.Variable._OverloadOperator": ["functools.update_wrapper", "<builtin>.getattr", "<builtin>.setattr"], "ops.variables.Variable._OverloadOperator._run_op": [], "ops.variables.Variable.__hash__": ["<builtin>.TypeError", "framework.ops.executing_eagerly_outside_functions", "<builtin>.id"], "ops.variables.Variable.__eq__": ["ops.gen_math_ops.equal", "framework.ops.executing_eagerly_outside_functions"], "ops.variables.Variable.__ne__": ["framework.ops.executing_eagerly_outside_functions", "ops.gen_math_ops.not_equal"], "ops.variables.Variable.__iter__": ["<builtin>.TypeError"], "ops.variables.Variable.name": [], "ops.variables.Variable._shared_name": [], "ops.variables.Variable.initializer": [], "ops.variables.Variable.device": [], "ops.variables.Variable.dtype": [], "ops.variables.Variable.op": [], "ops.variables.Variable.graph": [], "ops.variables.Variable.shape": [], "ops.variables.Variable.get_shape": [], "ops.variables.Variable._gather_saveables_for_checkpoint": [], "ops.variables.Variable.to_proto": [], "ops.variables.Variable.from_proto": ["ops.variables.RefVariable.__init__"], "ops.variables.RefVariable.__init__": ["ops.variables.RefVariable._init_from_args", "ops.variables.RefVariable._init_from_proto", "<builtin>.ValueError"], "ops.variables.Variable._set_save_slice_info": [], "ops.variables.Variable._get_save_slice_info": [], "ops.variables.Variable.experimental_ref": ["ops.variables.Variable.ref"], "ops.variables.Variable.ref": ["util.object_identity.Reference"], "ops.variables.Variable.SaveSliceInfo.__init__": ["framework.ops.prepend_name_scope", "<builtin>.isinstance"], "ops.variables.Variable.SaveSliceInfo.spec": ["<builtin>.zip"], "ops.variables.Variable.SaveSliceInfo.to_proto": ["framework.variable_pb2.SaveSliceInfoDef", "framework.ops.strip_name_scope"], "framework.variable_pb2.SaveSliceInfoDef": [], "ops.variables.VariableV1.__init__": [], "ops.variables.RefVariable._init_from_proto": ["framework.ops.prepend_name_scope", "<builtin>.hasattr", "ops.variables.validate_synchronization_aggregation_trainable", "<builtin>.isinstance", "framework.ops.get_default_graph", "ops.variables.Variable.SaveSliceInfo.__init__"], "ops.variables.RefVariable._init_from_args": ["<builtin>.callable", "framework.ops.name_from_scope_name", "ops.variables.validate_synchronization_aggregation_trainable", "<builtin>.isinstance", "ops.state_ops.assign", "framework.ops.convert_to_tensor", "framework.tensor_shape.unknown_shape", "util.compat.as_bytes", "<builtin>.type", "ops.variables._try_guard_against_uninitialized_dependencies", "<builtin>.ValueError", "eager.context.executing_eagerly", "<builtin>.RuntimeError", "framework.ops.get_default_graph", "framework.ops.name_scope", "core.Tensor._maybe_initialize_trackable", "attr_value_pb2.AttrValue.ListValue", "ops.array_ops.identity", "<builtin>.list", "framework.ops.init_scope", "framework.ops.add_to_collections", "framework.ops.device", "framework.ops.colocate_with", "framework.attr_value_pb2.AttrValue", "ops.state_ops.variable_op_v2"], "ops.variables.RefVariable.__repr__": ["ops.variables.Variable.get_shape", "framework.ops.numpy_text", "ops.variables.RefVariable.read_value", "eager.context.executing_eagerly"], "ops.variables.RefVariable.read_value": ["ops.array_ops.identity"], "core.Tensor._maybe_initialize_trackable": [], "ops.variables.RefVariable._as_graph_element": [], "ops.variables.RefVariable.value": [], "ops.variables.RefVariable._ref": [], "ops.variables.RefVariable.set_shape": ["ops.variables.RefVariable._ref", "ops.variables.RefVariable.value"], "ops.variables.RefVariable.trainable": [], "ops.variables.RefVariable.synchronization": [], "ops.variables.RefVariable.aggregation": [], "ops.variables.RefVariable.eval": [], "ops.variables.RefVariable.initial_value": [], "ops.variables.RefVariable.constraint": [], "ops.variables.RefVariable.assign_add": ["ops.state_ops.assign_add"], "ops.variables.RefVariable.assign_sub": ["ops.state_ops.assign_sub"], "ops.variables.RefVariable.scatter_sub": ["<builtin>.TypeError", "ops.gen_state_ops.scatter_sub", "<builtin>.isinstance"], "ops.variables.RefVariable.scatter_add": ["<builtin>.TypeError", "ops.gen_state_ops.scatter_add", "<builtin>.isinstance"], "ops.variables.RefVariable.scatter_max": ["<builtin>.TypeError", "ops.gen_state_ops.scatter_max", "<builtin>.isinstance"], "ops.variables.RefVariable.scatter_min": ["<builtin>.TypeError", "ops.gen_state_ops.scatter_min", "<builtin>.isinstance"], "ops.variables.RefVariable.scatter_mul": ["<builtin>.TypeError", "ops.gen_state_ops.scatter_mul", "<builtin>.isinstance"], "ops.variables.RefVariable.scatter_div": ["<builtin>.TypeError", "ops.gen_state_ops.scatter_div", "<builtin>.isinstance"], "ops.variables.RefVariable.scatter_update": ["<builtin>.TypeError", "ops.gen_state_ops.scatter_update", "<builtin>.isinstance"], "ops.variables.RefVariable.batch_scatter_update": ["ops.state_ops.batch_scatter_update"], "ops.variables.RefVariable.scatter_nd_sub": ["ops.gen_state_ops.scatter_nd_sub"], "ops.variables.RefVariable.scatter_nd_add": ["ops.gen_state_ops.scatter_nd_add"], "ops.variables.RefVariable.scatter_nd_update": ["ops.gen_state_ops.scatter_nd_update"], "ops.variables.RefVariable.scatter_nd_max": ["ops.gen_state_ops.scatter_nd_max"], "ops.gen_state_ops.scatter_nd_max": [], "ops.variables.RefVariable.scatter_nd_min": ["ops.gen_state_ops.scatter_nd_min"], "ops.gen_state_ops.scatter_nd_min": [], "ops.variables.RefVariable._strided_slice_assign": ["ops.gen_array_ops.strided_slice_assign", "ops.variables.RefVariable._ref"], "ops.gen_array_ops.strided_slice_assign": [], "ops.variables.RefVariable": ["util.deprecation.deprecated"], "ops.variables.RefVariable.count_up_to": ["ops.state_ops.count_up_to"], "ops.variables.RefVariable._TensorConversionFunction": ["<builtin>.ValueError"], "ops.variables.RefVariable.name": [], "ops.variables.RefVariable.initializer": [], "ops.variables.RefVariable.device": [], "ops.variables.RefVariable.dtype": [], "ops.variables.RefVariable.op": [], "ops.variables.RefVariable.graph": [], "ops.variables.RefVariable._distribute_strategy": [], "ops.variables.RefVariable.shape": [], "ops.variables.RefVariable.to_proto": ["framework.variable_pb2.VariableDef", "ops.variables.Variable.SaveSliceInfo.to_proto", "framework.ops.strip_name_scope"], "ops.variables.RefVariable.__iadd__": ["platform.tf_logging.log_first_n"], "ops.variables.RefVariable.__isub__": ["platform.tf_logging.log_first_n"], "ops.variables.RefVariable.__imul__": ["platform.tf_logging.log_first_n"], "ops.variables.RefVariable.__idiv__": ["platform.tf_logging.log_first_n"], "ops.variables.RefVariable.__itruediv__": ["platform.tf_logging.log_first_n"], "ops.variables.RefVariable.__irealdiv__": ["platform.tf_logging.log_first_n"], "ops.variables.RefVariable.__ipow__": ["platform.tf_logging.log_first_n"], "ops.variables._has_cycle": ["ops.variables._has_cycle", "itertools.chain"], "ops.variables._safe_initial_value_from_tensor": ["ops.variables._safe_initial_value_from_op"], "ops.variables._safe_initial_value_from_op": ["ops.variables._safe_initial_value_from_tensor", "ops.variables._find_initialized_value_for_variable"], "ops.variables._find_initialized_value_for_variable": [], "ops.variables.PartitionedVariable.__init__": ["<builtin>.sorted", "<builtin>.str", "<builtin>.all", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.len"], "ops.variables.PartitionedVariable.__init__.<lambda1>": [], "ops.variables.PartitionedVariable.__iter__": ["<builtin>.iter"], "ops.variables.PartitionedVariable.__len__": ["ops.variables.PartitionedVariable._partition_axes", "<builtin>.len", "<builtin>.ValueError"], "ops.variables.PartitionedVariable._partition_axes": ["<builtin>.enumerate", "<builtin>.all"], "ops.variables.PartitionedVariable._concat": ["<builtin>.str", "framework.ops.name_scope", "ops.array_ops.concat", "ops.variables.PartitionedVariable._partition_axes", "ops.array_ops.identity", "<builtin>.len", "<builtin>.NotImplementedError"], "ops.variables.PartitionedVariable.as_tensor": ["framework.ops.control_dependencies", "ops.variables.PartitionedVariable._concat"], "ops.variables.PartitionedVariable._TensorConversionFunction": ["<builtin>.NotImplementedError", "<builtin>.ValueError"], "ops.variables.PartitionedVariable.name": [], "ops.variables.PartitionedVariable.dtype": [], "ops.variables.PartitionedVariable.shape": ["ops.variables.PartitionedVariable.get_shape"], "ops.variables.PartitionedVariable.get_shape": [], "ops.variables.PartitionedVariable._distribute_strategy": [], "ops.variables.PartitionedVariable._get_variable_list": [], "ops.variables.PartitionedVariable._get_partitions": [], "ops.variables.PartitionedVariable._apply_assign_fn": ["<builtin>.str", "<builtin>.enumerate", "ops.variables.PartitionedVariable.assign.<lambda1>", "framework.tensor_shape.dimension_value", "<builtin>.isinstance", "ops.variables.PartitionedVariable.assign_sub.<lambda1>", "ops.array_ops.split", "ops.variables.PartitionedVariable._partition_axes", "<builtin>.len", "ops.variables.PartitionedVariable.assign_add.<lambda1>", "<builtin>.NotImplementedError"], "ops.variables.PartitionedVariable.assign_sub.<lambda1>": [], "ops.variables.PartitionedVariable.assign_add.<lambda1>": [], "ops.variables.PartitionedVariable.assign.<lambda1>": [], "ops.variables.PartitionedVariable.assign": ["ops.variables.PartitionedVariable._apply_assign_fn"], "ops.variables.PartitionedVariable.assign_add": ["ops.variables.PartitionedVariable._apply_assign_fn"], "ops.variables.PartitionedVariable.assign_sub": ["ops.variables.PartitionedVariable._apply_assign_fn"], "ops.variables.all_variables": ["ops.variables.global_variables"], "ops.variables._all_saveable_objects": ["framework.ops.get_collection"], "ops.variables.local_variables": ["framework.ops.get_collection"], "ops.variables.model_variables": ["framework.ops.get_collection"], "ops.variables.moving_average_variables": ["framework.ops.get_collection"], "ops.variables.initialize_variables": ["ops.variables.variables_initializer"], "ops.variables.initialize_all_variables": ["ops.variables.global_variables_initializer"], "ops.variables.initialize_local_variables": ["ops.variables.local_variables_initializer"], "ops.variables.assert_variables_initialized": ["ops.array_ops.rank_internal", "ops.variables.local_variables", "ops.variables.global_variables", "framework.ops.colocate_with", "<builtin>.len", "framework.ops.get_default_graph", "ops.array_ops.stack"], "ops.variables.report_uninitialized_variables": ["ops.array_ops.boolean_mask", "os.environ.get", "ops.variables.local_variables", "framework.ops.name_scope", "framework.ops.device", "ops.variables.global_variables", "ops.array_ops.constant", "ops.math_ops.logical_not", "framework.ops.get_default_graph", "ops.state_ops.is_variable_initialized", "ops.array_ops.stack"], "ops.variable_scope": ["python.tf2.enabled", "ops.variable_scope._make_master_property", "framework.ops.register_tensor_conversion_function", "util.deprecation.deprecated", "ops.variable_scope._make_master_method", "util.tf_export.tf_export", "<builtin>.setattr", "ops.variable_scope._make_op_method", "util.tf_contextlib.contextmanager", "eager.monitoring.BoolGauge", "client.session.register_session_run_conversion_functions"], "ops.variable_scope._PartitionInfo.__init__": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.type", "six.moves.zip", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.variable_scope._PartitionInfo.full_shape": [], "ops.variable_scope._PartitionInfo.var_offset": [], "ops.variable_scope._PartitionInfo.single_offset": ["ops.variable_scope._PartitionInfo.single_slice_dim"], "ops.variable_scope._PartitionInfo.single_slice_dim": ["<builtin>.ValueError", "six.moves.xrange", "<builtin>.len", "<builtin>.type", "<builtin>.TypeError", "<builtin>.isinstance"], "ops.variable_scope.resource_variables_enabled": [], "ops.variable_scope._needs_no_arguments": ["<builtin>.len", "util.tf_inspect.getargspec", "util.tf_inspect.isfunction", "<builtin>.isinstance"], "ops.variable_scope._VariableStore.__init__": [], "ops.variable_scope._VariableStore.get_variable": ["ops.variable_scope.VariableScope.custom_getter", "<builtin>.ValueError", "<builtin>.callable", "<builtin>.RuntimeError", "framework.ops.init_scope", "ops.variable_scope._VariableStore.get_variable._true_getter", "util.function_utils.fn_args", "ops.variables.validate_synchronization_aggregation_trainable", "ops.variable_scope._maybe_wrap_custom_getter.wrapped_custom_getter", "eager.context.executing_eagerly", "util.function_utils.has_kwargs"], "ops.variable_scope._VariableStore.get_variable._true_getter": ["framework.ops.name_scope", "<builtin>.ValueError", "<builtin>.callable", "ops.variable_scope._VariableStore._get_partitioned_variable", "ops.variable_scope._VariableStore._get_single_variable", "<builtin>.isinstance"], "ops.variable_scope._VariableStore._get_partitioned_variable": ["variables.Variable.SaveSliceInfo", "ops.variable_scope._call_partitioner", "framework.ops.name_scope", "<builtin>.ValueError", "ops.variable_scope._VariableStore._get_default_initializer", "<builtin>.callable", "eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "ops.variable_scope._iter_slices", "framework.tensor_shape.as_shape", "ops.variable_scope._PartitionInfo.__init__", "<builtin>.enumerate", "ops.variable_scope._get_slice_dim_and_num_slices", "ops.array_ops.slice", "ops.variables.PartitionedVariable", "ops.variable_scope._VariableStore._get_single_variable", "<builtin>.isinstance"], "ops.variable_scope._VariableStore._get_single_variable": ["util.tf_inspect.isclass", "<builtin>.ValueError", "platform.tf_logging.vlog", "framework.ops.init_scope", "ops.variable_scope._LazyEvalTensor.__init__", "framework.tensor_shape.as_shape", "ops.variable_scope.VariableScope.regularizer", "traceback.format_list", "ops.variable_scope.VariableScope.initializer", "functools.partial", "<builtin>.callable", "util.tf_inspect.getargspec", "framework.ops.add_to_collection", "framework.ops.add_to_collections", "ops.variable_scope._VariableStore._get_default_initializer", "ops.variable_scope._needs_no_arguments", "ops.variables.VariableV1", "<builtin>.format", "eager.context.executing_eagerly", "framework.dtypes.as_dtype", "<builtin>.isinstance"], "util.function_utils.fn_args": ["<builtin>.tuple", "util.function_utils._is_bound_method", "<builtin>.isinstance", "util.tf_inspect.getfullargspec", "util.function_utils.fn_args", "<builtin>.len", "util.function_utils._is_callable_object"], "util.function_utils.has_kwargs": ["<builtin>.TypeError", "<builtin>.callable", "<builtin>.isinstance", "<builtin>.type", "util.tf_inspect.getfullargspec", "util.function_utils._is_callable_object"], "ops.variable_scope._maybe_wrap_custom_getter.wrapped_custom_getter": ["functools.partial"], "ops.variable_scope.VariableScope.custom_getter": [], "ops.variable_scope._call_partitioner": ["<builtin>.any", "ops.variable_scope.VariableScope.partitioner", "<builtin>.ValueError", "<builtin>.len", "<builtin>.sum", "<builtin>.isinstance"], "ops.variable_scope._get_slice_dim_and_num_slices": ["<builtin>.enumerate"], "ops.variable_scope._iter_slices": ["<builtin>.len", "<builtin>.bool", "six.moves.xrange"], "ops.variable_scope._VariableStore._get_default_initializer": ["<builtin>.ValueError", "ops.init_ops.zeros_initializer", "ops.init_ops.glorot_uniform_initializer"], "ops.variables.PartitionedVariable": [], "ops.variable_scope.VariableScope.initializer": [], "ops.variable_scope._VariableStore._get_single_variable.make_regularizer_op": ["framework.ops.colocate_with", "ops.variable_scope.VariableScope.regularizer", "framework.ops.name_scope"], "ops.variable_scope.VariableScope.regularizer": [], "ops.variable_scope._LazyEvalTensor.__init__": ["ops.variable_scope._VariableStore._get_single_variable.make_regularizer_op"], "ops.variable_scope._LazyEvalTensor._as_tensor": ["ops.variable_scope._VariableStore._get_single_variable.make_regularizer_op"], "ops.variable_scope._make_master_property": [], "ops.variable_scope._make_master_property.prop": ["<builtin>.getattr"], "ops.variable_scope._make_master_method": [], "ops.variable_scope._make_master_method.method": ["<builtin>.getattr", "ops.variable_scope._make_master_property.prop"], "ops.variable_scope._make_op_method": [], "ops.variable_scope._make_op_method.method": ["<builtin>.getattr", "ops.variable_scope._make_master_method.method"], "ops.variable_scope.<lambda1>": [], "ops.variable_scope.<lambda2>": [], "ops.variable_scope.<lambda2>.<lambda1>": [], "ops.variable_scope.no_regularizer": [], "ops.variable_scope.VariableScope.__init__": ["eager.context.executing_eagerly", "<builtin>.NotImplementedError"], "ops.variable_scope.VariableScope.name": [], "ops.variable_scope.VariableScope.original_name_scope": [], "ops.variable_scope.VariableScope.reuse": [], "ops.variable_scope.VariableScope.dtype": [], "ops.variable_scope.VariableScope.use_resource": [], "ops.variable_scope.VariableScope.caching_device": [], "ops.variable_scope.VariableScope.partitioner": [], "ops.variable_scope.VariableScope.constraint": [], "ops.variable_scope.VariableScope.reuse_variables": [], "ops.variable_scope.VariableScope.set_initializer": [], "ops.variable_scope.VariableScope.set_dtype": [], "ops.variable_scope.VariableScope.set_use_resource": ["eager.context.executing_eagerly", "<builtin>.ValueError"], "ops.variable_scope.VariableScope.set_regularizer": [], "ops.variable_scope.VariableScope.set_caching_device": ["eager.context.executing_eagerly", "<builtin>.NotImplementedError"], "ops.variable_scope.VariableScope.set_partitioner": [], "ops.variable_scope.VariableScope.set_custom_getter": [], "ops.variable_scope.VariableScope.get_collection": ["framework.ops.get_collection"], "ops.variable_scope.VariableScope.trainable_variables": ["ops.variable_scope.VariableScope.get_collection"], "ops.variable_scope.VariableScope.global_variables": ["ops.variable_scope.VariableScope.get_collection"], "ops.variable_scope.VariableScope.local_variables": ["ops.variable_scope.VariableScope.get_collection"], "ops.variable_scope.VariableScope.get_variable": ["framework.ops.name_scope", "<builtin>.ValueError", "<builtin>.callable", "framework.ops.convert_to_tensor", "ops.variable_scope._VariableStore.get_variable", "eager.context.executing_eagerly"], "ops.variable_scope.VariableScope._get_partitioned_variable": ["ops.variable_scope._VariableStore._get_partitioned_variable", "framework.ops.name_scope", "<builtin>.ValueError"], "ops.variable_scope._VariableScopeStore.__init__": ["ops.variable_scope.VariableScope.__init__", "<builtin>.super"], "ops.variable_scope._VariableScopeStore.open_variable_scope": [], "ops.variable_scope._VariableScopeStore.close_variable_subscopes": ["<builtin>.list"], "ops.variable_scope._VariableScopeStore.variable_scope_count": [], "ops.variable_scope.EagerVariableStore.__init__": ["ops.variable_scope._VariableStore.__init__", "<builtin>.ValueError"], "ops.variable_scope.EagerVariableStore.as_default": ["ops.variable_scope.with_variable_store"], "ops.variable_scope.EagerVariableStore.variables": ["<builtin>.sorted"], "ops.variable_scope.EagerVariableStore.variables.<lambda1>": [], "ops.variable_scope.EagerVariableStore.trainable_variables": ["<builtin>.sorted"], "ops.variable_scope.EagerVariableStore.trainable_variables.<lambda1>": [], "ops.variable_scope.EagerVariableStore.non_trainable_variables": ["<builtin>.sorted"], "ops.variable_scope.EagerVariableStore.non_trainable_variables.<lambda1>": [], "ops.variable_scope.EagerVariableStore.copy": ["six.iteritems", "ops.variable_scope.EagerVariableStore.__init__", "ops.resource_variable_ops.ResourceVariable"], "ops.variable_scope.get_local_variable": ["ops.variable_scope.get_variable"], "ops.variable_scope._pure_variable_scope.__init__": ["ops.variable_scope.get_variable_scope_store", "ops.variable_scope.VariableScope.set_regularizer", "ops.variable_scope._maybe_wrap_custom_getter", "ops.variable_scope.VariableScope.set_dtype", "ops.variable_scope.VariableScope.set_custom_getter", "ops.variable_scope._get_default_variable_store", "ops.variable_scope.VariableScope.__init__", "ops.variable_scope.VariableScope.set_partitioner", "ops.variable_scope.VariableScope.set_caching_device", "ops.variable_scope.VariableScope.set_use_resource", "ops.variable_scope.VariableScope.set_initializer", "<builtin>.isinstance"], "ops.variable_scope._maybe_wrap_custom_getter": [], "ops.variable_scope._pure_variable_scope.__enter__": ["ops.variable_scope.VariableScope.set_regularizer", "ops.variable_scope._maybe_wrap_custom_getter", "ops.variable_scope.VariableScope.set_dtype", "ops.variable_scope.VariableScope.set_custom_getter", "ops.variable_scope.VariableScope.__init__", "copy.copy", "ops.variable_scope.VariableScope.set_partitioner", "ops.variable_scope.VariableScope.set_caching_device", "ops.variable_scope.VariableScope.set_use_resource", "ops.variable_scope.VariableScope.set_initializer", "ops.variable_scope._VariableScopeStore.open_variable_scope", "<builtin>.isinstance"], "ops.variable_scope._pure_variable_scope.__exit__": ["<builtin>.RuntimeError", "ops.variable_scope._VariableScopeStore.close_variable_subscopes", "<builtin>.isinstance"], "ops.variable_scope._get_unique_variable_scope": ["ops.variable_scope.get_variable_scope_store", "ops.variable_scope._VariableScopeStore.variable_scope_count", "ops.variable_scope.get_variable_scope"], "ops.variable_scope.variable_scope.__init__": ["<builtin>.ValueError", "framework.ops._get_graph_from_inputs", "<builtin>.TypeError", "eager.context.executing_eagerly", "<builtin>.isinstance"], "ops.variable_scope.variable_scope.__enter__": ["sys.exc_info", "ops.variable_scope._pure_variable_scope.__enter__", "ops.variable_scope.variable_scope._enter_scope_uncached", "framework.ops.get_default_graph"], "ops.variable_scope.variable_scope._enter_scope_uncached": ["framework.ops.get_name_scope", "framework.ops.name_scope", "<builtin>.ValueError", "ops.variable_scope._get_unique_variable_scope", "ops.variable_scope._pure_variable_scope.__init__", "sys.exc_info", "<builtin>.TypeError", "ops.variable_scope._pure_variable_scope.__enter__", "ops.variable_scope._pure_variable_scope.__exit__", "<builtin>.isinstance"], "ops.variable_scope.variable_scope.__exit__": ["ops.variable_scope._pure_variable_scope.__exit__"], "ops.variable_scope.variable_op_scope": ["ops.variable_scope.variable_scope.__init__", "platform.tf_logging.warn"], "ops.variable_scope.default_variable_creator": ["eager.context.executing_eagerly", "ops.variable_scope.get_variable_scope", "ops.variables.RefVariable", "ops.resource_variable_ops.ResourceVariable"], "ops.variable_scope.default_variable_creator_v2": ["ops.resource_variable_ops.ResourceVariable"], "ops.variable_scope._make_getter": [], "ops.variable_scope._make_getter.<lambda1>": [], "ops.variable_scope.variable_creator_scope_v1": ["framework.ops.get_default_graph"], "ops.weights_broadcast_ops": ["util.tf_export.tf_export"], "ops.weights_broadcast_ops._has_valid_dims": ["ops.sets.set_difference", "ops.array_ops.expand_dims", "ops.array_ops.concat", "ops.array_ops.size", "ops.math_ops.equal", "ops.array_ops.ones_like", "framework.ops.name_scope"], "ops.weights_broadcast_ops._has_valid_nonscalar_shape": ["ops.math_ops.equal", "ops.control_flow_ops.cond", "framework.ops.name_scope"], "ops.weights_broadcast_ops._has_valid_nonscalar_shape.<lambda1>": ["ops.weights_broadcast_ops._has_valid_dims"], "ops.weights_broadcast_ops._has_valid_nonscalar_shape.<lambda2>": [], "ops.weights_broadcast_ops.assert_broadcastable.<lambda1>": [], "ops.weights_broadcast_ops.assert_broadcastable.<lambda2>": ["ops.weights_broadcast_ops._has_valid_nonscalar_shape"], "ops.while_v2": ["framework.ops.RegisterGradient", "collections.namedtuple"], "ops.while_v2.while_loop": ["framework.func_graph.func_graph_from_py_func", "ops.while_v2._duplicate_body_captures_in_cond", "framework.ops.name_scope", "ops.control_flow_util_v2.unique_fn_name", "ops.control_flow_util_v2.output_all_intermediates", "ops.while_v2._tensor_array_to_flow", "ops.array_ops.stop_gradient", "framework.ops.get_default_graph", "ops.while_v2._check_num_inputs_outputs", "framework.tensor_shape.TensorShape", "framework.constant_op.constant", "<builtin>.len", "ops.while_v2._build_maximum_iterations_loop_var", "tensor_spec.TensorSpec.from_tensor", "util.nest.flatten", "ops.while_v2._get_intermediates", "<builtin>.slice", "ops.control_flow_util_v2.WhileCondFuncGraph", "<builtin>.tuple", "ops.while_v2._pack_sequence_as", "<builtin>.list", "util.nest.assert_same_structure", "ops.while_v2._build_while_op", "util.nest.map_structure", "ops.list_ops.tensor_list_push_back", "ops.array_ops.identity", "ops.control_flow_util_v2.WhileBodyFuncGraph", "ops.while_v2._check_inputs_outputs_types_match", "<builtin>.any", "ops.list_ops.empty_tensor_list", "framework.ops.control_dependencies", "ops.while_v2._check_shapes_compat"], "ops.while_v2._tensor_array_to_flow": ["util.nest.map_structure"], "ops.while_v2._build_maximum_iterations_loop_var": ["framework.ops.convert_to_tensor"], "ops.while_v2.while_loop.wrapped_cond": ["framework.tensor_util.is_tf_type", "ops.array_ops.squeeze_v2", "ops.while_v2._pack_sequence_as", "ops.math_ops.logical_and"], "ops.while_v2._pack_sequence_as": ["<builtin>.zip", "util.nest.pack_sequence_as", "util.nest.flatten", "ops.while_v2._pack_sequence_as.flow_to_tensor_array"], "ops.control_flow_util_v2.WhileCondFuncGraph": [], "ops.while_v2.while_loop.wrapped_body": ["framework.ops.get_default_graph", "ops.while_v2._pack_sequence_as", "<builtin>.list", "util.nest.flatten", "ops.while_v2._copy_handle_data", "util.nest.assert_same_structure", "util.nest.is_sequence_or_composite", "ops.while_v2._tensor_array_to_flow"], "ops.while_v2._copy_handle_data": ["ops.handle_data_util.copy_handle_data", "<builtin>.zip"], "ops.control_flow_util_v2.WhileBodyFuncGraph": [], "ops.while_v2._duplicate_body_captures_in_cond": ["client.pywrap_tf_session.TF_CreatePlaceholders", "<builtin>.id", "ops.Tensor._create_with_tf_output", "ops.while_v2._OperationWithOutputs.__init__", "ops.while_v2._build_cond_placeholders_name_prefix", "util.compat.as_str", "<builtin>.zip"], "ops.while_v2._check_shapes_compat": ["ops.control_flow_ops._ShapeLessThanOrEqual", "<builtin>.ValueError", "<builtin>.zip"], "ops.while_v2._get_intermediates": ["<builtin>.dict", "ops.while_v2._get_accumulator"], "ops.while_v2._check_num_inputs_outputs": ["<builtin>.len"], "ops.while_v2._check_inputs_outputs_types_match": ["<builtin>.zip", "<builtin>.TypeError"], "ops.while_v2._build_while_op": ["ops.control_flow_util_v2.run_as_function_for_tape_gradients"], "ops.while_v2._WhileGrad": ["<builtin>.AssertionError", "ops.while_v2._get_structured_grad_output", "framework.func_graph.func_graph_from_py_func", "ops.control_flow_util_v2.unique_grad_fn_name", "ops.while_v2._check_num_inputs_outputs", "ops.array_ops.identity", "ops.while_v2._get_graph", "ops.while_v2._create_grad_func", "<builtin>.len", "ops.while_v2._preprocess_grad", "ops.while_v2._copy_handle_data", "framework.attr_value_pb2.AttrValue", "ops.control_flow_util_v2.WhileCondFuncGraph", "ops.while_v2._build_while_op", "ops.while_v2._resolve_grad_captures", "ops.control_flow_util_v2.create_new_tf_function", "<builtin>.zip", "ops.while_v2_indexed_slices_rewriter.rewrite_grad_indexed_slices"], "ops.while_v2._get_graph": ["framework.tensor_shape.TensorShape", "<builtin>.getattr", "ops.control_flow_util_v2.get_func_graph"], "ops.while_v2._preprocess_grad": ["ops.while_v2._is_trainable", "ops.default_gradient.supports_default_grad", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "ops.while_v2._zeros_like"], "ops.while_v2._create_grad_func": ["<builtin>.ValueError", "framework.func_graph.func_graph_from_py_func", "<builtin>.list", "ops.while_v2._WhileBodyGradFuncGraph.__init__", "framework.constant_op.constant", "<builtin>.len", "util.object_identity.ObjectIdentitySet", "framework.ops.tensor_id", "<builtin>.str"], "ops.while_v2._resolve_grad_captures": ["<builtin>.enumerate"], "ops.while_v2_indexed_slices_rewriter.rewrite_grad_indexed_slices": ["<builtin>.zip", "ops.while_v2_indexed_slices_rewriter._rewrite_input_as_indexed_slices", "<builtin>.isinstance", "ops.while_v2_indexed_slices_rewriter._rewrite_output_as_tensor"], "ops.while_v2._WhileGrad.grad_cond": [], "ops.while_v2._get_structured_grad_output": ["framework.ops.IndexedSlices", "<builtin>.isinstance"], "ops.while_v2._build_while_op._make_op": ["ops.control_flow_util_v2.get_op_and_outputs", "framework.ops.get_default_graph", "ops.while_v2._set_read_only_resource_inputs_attr", "ops.control_flow_util_v2.maybe_set_lowering_attr", "ops.gen_functional_ops.stateless_while", "ops.while_v2._copy_handle_data", "framework.attr_value_pb2.AttrValue", "ops.gen_functional_ops._while", "ops.control_flow_util_v2.create_new_tf_function", "ops.control_flow_util_v2.maybe_propagate_compile_time_consts_in_xla"], "ops.gen_functional_ops.stateless_while": [], "ops.while_v2._set_read_only_resource_inputs_attr": ["framework.ops.set_int_list_attr", "<builtin>.set", "framework.auto_control_deps_utils.get_read_only_resource_input_indices_graph", "<builtin>.len", "<builtin>.range", "<builtin>.sorted"], "ops.while_v2._get_accumulator": ["ops.while_v2._get_accumulator.get_func_graph_output", "<builtin>.isinstance", "<builtin>.enumerate"], "ops.while_v2._is_trainable": ["eager.backprop_util.IsTrainable"], "ops.while_v2._zeros_like": ["ops.default_gradient.get_zeros_dtype", "ops.gen_resource_variable_ops.variable_shape", "ops.array_ops.zeros_like", "ops.array_ops.zeros"], "ops.while_v2._create_grad_func.<lambda1>": ["ops.while_v2._grad_fn"], "ops.while_v2._grad_fn": ["<builtin>.all", "ops.gradients_util._GradientsHelper"], "ops.while_v2._WhileBodyGradFuncGraph.__init__": ["<builtin>.super"], "ops.while_v2._get_accumulator.get_func_graph_output": ["<builtin>.any"], "ops.while_v2._WhileBodyGradFuncGraph.while_op_needs_rewrite": [], "ops.while_v2._WhileBodyGradFuncGraph._create_op_internal": ["ops.control_flow_util_v2.graph_wrapped_for_higher_order_tape_gradients", "ops.control_flow_util.GraphOrParentsInXlaContext", "<builtin>.all", "ops.control_flow_util_v2.output_all_intermediates", "ops.while_v2._get_accumulator", "<builtin>.super", "ops.while_v2._WhileBodyGradFuncGraph._move_op_to_forward_graph"], "ops.while_v2._WhileBodyGradFuncGraph._move_op_to_forward_graph": ["framework.ops.name_from_scope_name", "ops.while_v2._WhileBodyGradFuncGraph._get_optimized_reduction_ops_cache_key", "<builtin>.hasattr"], "ops.while_v2._WhileBodyGradFuncGraph._get_optimized_reduction_ops_cache_key": ["<builtin>.sorted", "<builtin>.map", "<builtin>.tuple"], "ops.while_v2._WhileBodyGradFuncGraph._get_optimized_reduction_ops_cache_key.<lambda1>": [], "ops.while_v2._WhileBodyGradFuncGraph._capture_helper": ["framework.constant_op.is_constant", "ops.while_v2._is_loop_invariant", "framework.tensor_util.constant_value", "ops.list_ops.tensor_list_push_back", "ops.while_v2._build_accumulator_name", "framework.constant_op.constant", "control_flow_util_v2.WhileBodyFuncGraph.captured", "framework.ops.tensor_id", "ops.list_ops.tensor_list_pop_back", "ops.while_v2._WhileBodyGradFuncGraph._resource_capture_helper", "ops.list_ops.empty_tensor_list", "ops.control_flow_util_v2.clear_control_inputs", "ops.while_v2._get_accumulator", "<builtin>.super"], "control_flow_util_v2.WhileBodyFuncGraph.captured": [], "ops.while_v2._is_loop_invariant": ["<builtin>.any"], "ops.while_v2._WhileBodyGradFuncGraph._resource_capture_helper": ["<builtin>.AssertionError", "framework.ops.tensor_id", "ops.control_flow_util_v2.resource_input_index", "control_flow_util_v2.WhileBodyFuncGraph.capture"], "ops.while_v2._build_accumulator_name": [], "control_flow_util_v2.WhileBodyFuncGraph.capture": [], "ops.while_v2._build_cond_placeholders_name_prefix": [], "client.pywrap_tf_session.TF_CreatePlaceholders": [], "ops.while_v2._OperationWithOutputs.__init__": [], "ops.Tensor._create_with_tf_output": [], "ops.while_v2._graph_name": ["<builtin>.isinstance"], "ops.while_v2._pack_sequence_as.flow_to_tensor_array": ["ops.tensor_array_ops.build_ta_with_new_flow", "<builtin>.isinstance"], "ops.while_v2._tensor_array_to_flow.f": ["<builtin>.isinstance"], "ops.while_v2_indexed_slices_rewriter": [], "ops.while_v2_indexed_slices_rewriter._rewrite_input_as_indexed_slices": ["ops.while_v2_indexed_slices_rewriter._flatten", "ops.while_v2_indexed_slices_rewriter._create_grad_indexed_slices_init", "framework.ops.IndexedSlices", "ops.while_v2_indexed_slices_rewriter._rewrite_grad_indexed_slices_output", "ops.while_v2_indexed_slices_rewriter._update_indexed_slices_param"], "ops.while_v2_indexed_slices_rewriter._rewrite_output_as_tensor": ["framework.func_graph.flatten", "framework.ops.convert_to_tensor_v2", "ops.while_v2_indexed_slices_rewriter._get_tensor_index_in_iterable"], "ops.while_v2_indexed_slices_rewriter._get_tensor_index_in_iterable": ["<builtin>.enumerate", "<builtin>.ValueError"], "ops.while_v2_indexed_slices_rewriter._create_grad_indexed_slices_init": ["ops.gen_resource_variable_ops.variable_shape", "framework.tensor_shape.TensorShape", "ops.array_ops.concat", "framework.constant_op.constant", "<builtin>.isinstance", "ops.array_ops.zeros", "framework.ops.IndexedSlices", "ops.array_ops.shape"], "ops.while_v2_indexed_slices_rewriter._flatten": ["util.nest.flatten"], "ops.while_v2_indexed_slices_rewriter._rewrite_grad_indexed_slices_output": ["ops.while_v2_indexed_slices_rewriter._rewrite_grad_indexed_slices_output.rewrite", "framework.ops.IndexedSlices"], "ops.while_v2_indexed_slices_rewriter._update_indexed_slices_param": ["framework.func_graph.flatten", "ops.while_v2_indexed_slices_rewriter._flatten", "ops.while_v2_indexed_slices_rewriter._get_tensor_index_in_iterable"], "ops.while_v2_indexed_slices_rewriter._rewrite_grad_indexed_slices_output.rewrite": ["ops.array_ops.concat"], "optimize.calibrator": ["util.lazy_loader.LazyLoader", "<builtin>.globals"], "optimize.calibrator.Calibrator.__init__": ["<builtin>.ValueError"], "optimize.calibrator.Calibrator.calibrate_and_quantize": ["<builtin>.list", "numpy.dtype"], "optimize.calibrator.Calibrator.calibrate_and_quantize_single": ["<builtin>.list", "numpy.dtype"], "optimize.calibrator.Calibrator.calibrate": ["<builtin>.list"], "platform.analytics": [], "platform.analytics.track_usage": [], "platform.app": ["util.tf_export.tf_export"], "platform.app._parse_flags_tolerate_undef": ["platform.flags.FLAGS"], "platform.flags.FLAGS": [], "platform.app.run": ["absl.app.run"], "platform.benchmark": ["<builtin>.set", "util.tf_export.tf_export"], "platform.benchmark._rename_function": ["six.get_function_code", "types.FunctionType", "types.CodeType"], "types.CodeType": [], "platform.benchmark._global_report_benchmark": ["<builtin>.print", "platform.gfile.Exists", "platform.gfile.GFile", "<builtin>.IOError", "platform.tf_logging.info", "os.environ.get", "<builtin>.str", "<builtin>.TypeError", "util.test_log_pb2.BenchmarkEntries", "<builtin>.isinstance"], "util.test_log_pb2.BenchmarkEntries": [], "platform.benchmark._BenchmarkRegistrar.__new__": [], "platform.benchmark.ParameterizedBenchmark.__new__": ["<builtin>.Exception", "<builtin>.super", "platform.benchmark.ParameterizedBenchmark.__new__.create_benchmark_function", "platform.benchmark._rename_function"], "platform.benchmark.ParameterizedBenchmark.__new__.create_benchmark_function": [], "platform.benchmark.ParameterizedBenchmark.__new__.create_benchmark_function.<lambda1>": [], "platform.benchmark.Benchmark.is_abstract": ["<builtin>.len"], "platform.benchmark.Benchmark._get_name": ["<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "util.tf_inspect.stack"], "platform.benchmark.Benchmark.report_benchmark": ["platform.benchmark._global_report_benchmark", "platform.benchmark.Benchmark._get_name"], "platform.benchmark.benchmark_config": ["protobuf.config_pb2.ConfigProto"], "platform.benchmark.TensorFlowBenchmark.__init__": ["<builtin>.super"], "platform.benchmark.TensorFlowBenchmark.is_abstract": ["<builtin>.len"], "platform.benchmark.TensorFlowBenchmark.run_op_benchmark": ["protobuf.config_pb2.RunMetadata", "<builtin>.range", "protobuf.config_pb2.RunOptions", "client.timeline.Timeline", "platform.benchmark.TensorFlowBenchmark.run_op_benchmark._median", "time.time", "platform.benchmark.TensorFlowBenchmark.run_op_benchmark._mean_and_stdev", "platform.benchmark.Benchmark.report_benchmark"], "client.timeline.Timeline": [], "platform.benchmark.TensorFlowBenchmark.run_op_benchmark._median": ["<builtin>.len", "<builtin>.sorted"], "platform.benchmark.TensorFlowBenchmark.run_op_benchmark._mean_and_stdev": ["<builtin>.len", "math.sqrt", "<builtin>.sum"], "platform.benchmark.TensorFlowBenchmark.evaluate": ["framework.ops.get_default_session"], "platform.benchmark._run_benchmarks": ["<builtin>.ValueError", "<builtin>.getattr", "<builtin>.list", "<builtin>.callable", "<builtin>.dir", "re.search"], "platform.benchmark.benchmarks_main": ["absl.app.run", "sys.argv.remove"], "sys.argv.remove": [], "platform.benchmark.benchmarks_main.<lambda1>": ["platform.benchmark._run_benchmarks"], "platform.control_imports": [], "platform.device_context": [], "platform.flags": ["platform.flags._FlagValuesWrapper.__init__", "platform.flags._wrap_define_function"], "platform.flags._wrap_define_function": ["util.tf_decorator.make_decorator"], "platform.flags._wrap_define_function.wrapper": ["logging.warning", "six.iteritems"], "platform.flags._FlagValuesWrapper.__init__": [], "platform.flags._FlagValuesWrapper.__getattribute__": ["<builtin>.super"], "platform.flags._FlagValuesWrapper.__getattr__": [], "platform.flags._FlagValuesWrapper.__setattr__": [], "platform.flags._FlagValuesWrapper.__delattr__": [], "platform.flags._FlagValuesWrapper.__dir__": [], "platform.flags._FlagValuesWrapper.__getitem__": [], "platform.flags._FlagValuesWrapper.__setitem__": [], "platform.flags._FlagValuesWrapper.__len__": [], "platform.flags._FlagValuesWrapper.__iter__": [], "platform.flags._FlagValuesWrapper.__str__": [], "platform.flags._FlagValuesWrapper.__call__": [], "platform.gfile": [], "platform.gfile.GFile.__init__": ["<builtin>.super"], "platform.gfile.FastGFile": ["util.deprecation.deprecated"], "platform.gfile.FastGFile.__init__": ["<builtin>.super"], "platform.parameterized": ["<builtin>.ImportError"], "platform.remote_utils": [], "platform.remote_utils.is_remote_path": [], "platform.remote_utils.get_appendable_file_encoding": [], "platform.resource_loader": ["util.tf_export.tf_export"], "platform.resource_loader.load_resource": ["<builtin>.open", "platform.resource_loader.get_path_to_datafile"], "platform.resource_loader.get_data_files_path": ["os.path.dirname", "sys._getframe", "util.tf_inspect.getfile"], "sys._getframe": [], "util.tf_inspect.getfile": ["util.tf_decorator.unwrap", "<builtin>.hasattr", "inspect.getfile"], "platform.resource_loader.get_root_dir_with_all_resources": ["platform.resource_loader.get_data_files_path", "os.path.dirname", "os.path.basename", "<builtin>.len"], "runfiles.runfiles.Create": [], "platform.resource_loader.readahead_file_path": [], "platform.self_check": ["<builtin>.ImportError"], "platform.self_check.preload_check": ["<builtin>.ImportError", "ctypes.WinDLL"], "ctypes.WinDLL": [], "platform.sysconfig": ["util.tf_export.tf_export"], "platform.sysconfig.get_include": ["os.path.dirname", "os.path.join"], "platform.sysconfig.get_lib": ["os.path.dirname", "os.path.join"], "platform.sysconfig.get_compile_flags": ["client.pywrap_tf_session.get_eigen_max_align_bytes", "platform.sysconfig.get_include"], "client.pywrap_tf_session.get_eigen_max_align_bytes": [], "platform.sysconfig.get_link_flags": ["platform.system", "versions.VERSION.split", "platform.sysconfig.get_lib"], "versions.VERSION.split": [], "platform.tf_logging": ["threading.Lock", "util.tf_export.tf_export"], "platform.tf_logging._get_caller": ["sys._getframe"], "platform.tf_logging._logger_find_caller": ["platform.tf_logging._get_caller", "traceback.format_stack"], "platform.tf_logging.get_logger": ["logging.getLogger", "logging.Formatter", "logging.StreamHandler"], "logging.getLogger": [], "logging.StreamHandler": [], "logging.Formatter": [], "platform.tf_logging.log": ["platform.tf_logging.get_logger"], "platform.tf_logging.fatal": ["platform.tf_logging.get_logger"], "platform.tf_logging.TaskLevelStatusMessage": ["platform.tf_logging.error"], "platform.tf_logging.flush": ["<builtin>.NotImplementedError"], "platform.tf_logging._GetNextLogCountPerToken": [], "platform.tf_logging.log_every_n": ["platform.tf_logging._GetNextLogCountPerToken", "platform.tf_logging.log_if", "platform.tf_logging._GetFileAndLine"], "platform.tf_logging._GetFileAndLine": ["platform.tf_logging._get_caller"], "platform.tf_logging.google2_log_prefix": ["platform.tf_logging._get_thread_id", "platform.tf_logging._GetFileAndLine", "time.time", "<builtin>.int", "time.localtime", "os.path.basename"], "time.localtime": [], "platform.tf_logging._get_thread_id": ["moves._thread.get_ident"], "platform.tf_logging.get_verbosity": ["platform.tf_logging.get_logger"], "moves._thread.get_ident": [], "profiler.model_analyzer": ["util.tf_export.tf_export"], "profiler.model_analyzer._graph_string": [], "profiler.model_analyzer._build_options": ["profiler.tfprof_options_pb2.OptionsProto"], "profiler.tfprof_options_pb2.OptionsProto": [], "profiler.model_analyzer._build_advisor_options": ["profiler.tfprof_options_pb2.AdvisorOptionsProto", "six.iteritems", "tfprof_options_pb2.AdvisorOptionsProto.CheckerOption"], "profiler.tfprof_options_pb2.AdvisorOptionsProto": [], "tfprof_options_pb2.AdvisorOptionsProto.CheckerOption": [], "profiler.model_analyzer.Profiler.__init__": ["profiler.tfprof_logger.merge_default_with_oplog", "framework.ops.get_default_graph", "eager.context.executing_eagerly", "profiler.model_analyzer._graph_string", "util._pywrap_tfprof.NewProfiler"], "util._pywrap_tfprof.NewProfiler": [], "profiler.model_analyzer.Profiler.__del__": ["util._pywrap_tfprof.DeleteProfiler"], "util._pywrap_tfprof.DeleteProfiler": [], "profiler.model_analyzer.Profiler.add_step": ["profiler.tfprof_logger.merge_default_with_oplog", "util._pywrap_tfprof.AddStep", "profiler.model_analyzer._graph_string"], "util._pywrap_tfprof.AddStep": [], "profiler.model_analyzer.Profiler.profile_python": ["profiler.tfprof_output_pb2.MultiGraphNodeProto", "profiler.model_analyzer._build_options", "sys.stderr.write", "util._pywrap_tfprof.Profile"], "profiler.tfprof_output_pb2.MultiGraphNodeProto": [], "util._pywrap_tfprof.Profile": [], "profiler.model_analyzer.Profiler.profile_operations": ["profiler.tfprof_output_pb2.MultiGraphNodeProto", "profiler.model_analyzer._build_options", "sys.stderr.write", "util._pywrap_tfprof.Profile"], "profiler.model_analyzer.Profiler.profile_name_scope": ["profiler.tfprof_output_pb2.GraphNodeProto", "profiler.model_analyzer._build_options", "sys.stderr.write", "util._pywrap_tfprof.Profile"], "profiler.tfprof_output_pb2.GraphNodeProto": [], "profiler.model_analyzer.Profiler.profile_graph": ["profiler.tfprof_output_pb2.GraphNodeProto", "profiler.model_analyzer._build_options", "sys.stderr.write", "util._pywrap_tfprof.Profile"], "profiler.model_analyzer.Profiler.advise": ["profiler.model_analyzer._build_advisor_options", "util._pywrap_tfprof.Profile", "profiler.tfprof_output_pb2.AdviceProto"], "profiler.tfprof_output_pb2.AdviceProto": [], "profiler.model_analyzer.Profiler.serialize_to_string": ["util._pywrap_tfprof.SerializeToString"], "util._pywrap_tfprof.SerializeToString": [], "profiler.model_analyzer.Profiler._write_profile": ["util._pywrap_tfprof.WriteProfile"], "util._pywrap_tfprof.WriteProfile": [], "profiler.model_analyzer.profile": ["profiler.tfprof_logger.merge_default_with_oplog", "option_builder.ProfileOptionBuilder.trainable_variables_parameter", "profiler.tfprof_output_pb2.MultiGraphNodeProto", "framework.ops.get_default_graph", "util._pywrap_tfprof.PrintModelAnalysis", "framework.errors.InvalidArgumentError", "eager.context.executing_eagerly", "sys.stderr.write", "profiler.model_analyzer._graph_string", "profiler.tfprof_output_pb2.GraphNodeProto", "profiler.model_analyzer._build_options"], "option_builder.ProfileOptionBuilder.trainable_variables_parameter": [], "util._pywrap_tfprof.PrintModelAnalysis": [], "profiler.model_analyzer.advise": ["profiler.tfprof_logger.merge_default_with_oplog", "profiler.model_analyzer._build_advisor_options", "framework.ops.get_default_graph", "util._pywrap_tfprof.PrintModelAnalysis", "eager.context.executing_eagerly", "profiler.tfprof_output_pb2.AdviceProto", "profiler.model_analyzer._graph_string"], "profiler.option_builder": [], "profiler.option_builder.ProfileOptionBuilder.__init__": ["copy.deepcopy"], "profiler.option_builder.ProfileOptionBuilder.trainable_variables_parameter": [], "profiler.option_builder.ProfileOptionBuilder.float_operation": [], "profiler.option_builder.ProfileOptionBuilder.time_and_memory": [], "profiler.option_builder.ProfileOptionBuilder.build": ["copy.deepcopy"], "profiler.option_builder.ProfileOptionBuilder.with_max_depth": [], "profiler.option_builder.ProfileOptionBuilder.with_min_memory": [], "profiler.option_builder.ProfileOptionBuilder.with_min_execution_time": [], "profiler.option_builder.ProfileOptionBuilder.with_min_parameters": [], "profiler.option_builder.ProfileOptionBuilder.with_min_occurrence": [], "profiler.option_builder.ProfileOptionBuilder.with_min_float_operations": [], "profiler.option_builder.ProfileOptionBuilder.with_accounted_types": ["copy.copy"], "profiler.option_builder.ProfileOptionBuilder.with_node_names": ["copy.copy"], "profiler.option_builder.ProfileOptionBuilder.account_displayed_op_only": [], "profiler.option_builder.ProfileOptionBuilder.with_empty_output": [], "profiler.option_builder.ProfileOptionBuilder.with_stdout_output": [], "profiler.option_builder.ProfileOptionBuilder.with_file_output": [], "profiler.option_builder.ProfileOptionBuilder.with_timeline_output": [], "profiler.option_builder.ProfileOptionBuilder.with_pprof_output": [], "profiler.option_builder.ProfileOptionBuilder.order_by": [], "profiler.option_builder.ProfileOptionBuilder.select": ["copy.copy"], "profiler.option_builder.ProfileOptionBuilder.with_step": [], "profiler.pprof_profiler": ["collections.namedtuple"], "profiler.pprof_profiler.StringTable.__init__": [], "profiler.pprof_profiler.StringTable.index_of": ["<builtin>.len"], "profiler.pprof_profiler.StringTable.next_index": ["<builtin>.len"], "profiler.pprof_profiler.StringTable.string_table": [], "profiler.pprof_profiler.Functions.__init__": [], "profiler.pprof_profiler.Functions.index_of": ["proto.profile_pb2.Function", "<builtin>.len", "profiler.pprof_profiler.StringTable.index_of"], "proto.profile_pb2.Function": [], "profiler.pprof_profiler.Functions.function_protos": [], "profiler.pprof_profiler.Locations.__init__": [], "profiler.pprof_profiler.Locations.index_of": ["proto.profile_pb2.Location", "<builtin>.len", "profiler.pprof_profiler.Functions.index_of"], "proto.profile_pb2.Location": [], "profiler.pprof_profiler.Locations.location_protos": [], "profiler.pprof_profiler.Samples.__init__": [], "profiler.pprof_profiler.Samples.add": ["proto.profile_pb2.Sample", "profiler.pprof_profiler.StringTable.index_of"], "proto.profile_pb2.Sample": [], "profiler.pprof_profiler.Samples.get_sample_protos": [], "profiler.pprof_profiler.PprofProfiler.__init__": ["profiler.pprof_profiler.Functions.__init__", "profiler.pprof_profiler.StringTable.__init__", "profiler.pprof_profiler.Locations.__init__"], "profiler.pprof_profiler.PprofProfiler.profile": ["profiler.pprof_profiler.PprofProfiler._get_pprof_proto", "profiler.pprof_profiler.PprofProfiler._get_profile_data_generator.profile_data_generator", "profiler.pprof_profiler.PprofProfiler._get_profile_data_generator", "<builtin>.enumerate", "<builtin>.len", "<builtin>.print", "profiler.pprof_profiler.StringTable.next_index"], "profiler.pprof_profiler.PprofProfiler._get_profile_data_generator": ["collections.defaultdict"], "profiler.pprof_profiler.PprofProfiler._get_profile_data_generator.profile_data_generator": [], "profiler.pprof_profiler.PprofProfiler._get_pprof_proto": ["profiler.pprof_profiler.Samples.add", "profiler.pprof_profiler.Locations.index_of", "profiler.pprof_profiler.Samples.get_sample_protos", "<builtin>.reversed", "<builtin>.len", "profiler.pprof_profiler.Samples.__init__", "profiler.pprof_profiler.StringTable.string_table", "profiler.pprof_profiler.Functions.function_protos", "profiler.pprof_profiler.StringTable.index_of", "proto.profile_pb2.Profile", "<builtin>.range", "profiler.pprof_profiler.Locations.location_protos"], "proto.profile_pb2.Profile": [], "profiler.pprof_profiler.get_profiles": ["profiler.pprof_profiler.PprofProfiler.__init__", "profiler.pprof_profiler.PprofProfiler.profile"], "profiler.pprof_profiler.profile": ["os.makedirs", "os.path.join", "string.maketrans", "profiler.pprof_profiler.get_profiles", "<builtin>.str", "time.strftime", "os.path.isdir", "gzip.open", "<builtin>.print"], "time.strftime": [], "string.maketrans": [], "profiler.profiler": ["util.tf_export.tf_export"], "profiler.profiler_client": ["util.tf_export.tf_export"], "profiler.profiler_client.trace": ["<builtin>.dict", "internal._pywrap_profiler.trace", "framework.errors.InvalidArgumentError", "profiler.profiler_client._strip_addresses"], "profiler.profiler_client._strip_addresses": ["profiler.profiler_client._strip_prefix"], "profiler.profiler_client.monitor": ["profiler.profiler_client._strip_prefix", "internal._pywrap_profiler.monitor"], "profiler.profiler_client._strip_prefix": ["<builtin>.len"], "profiler.profiler_v2": ["threading.Lock", "util.tf_export.tf_export"], "profiler.profiler_v2.ProfilerOptions.__new__": ["<builtin>.super"], "framework.errors.AlreadyExistsError": [], "framework.errors.UnavailableError": [], "profiler.profiler_v2.warmup": ["profiler.profiler_v2.stop", "profiler.profiler_v2.start"], "profiler.profiler_v2.start_server": ["internal._pywrap_profiler.start_server"], "profiler.profiler_v2.Profile.__init__": [], "profiler.profiler_v2.Profile.__enter__": ["profiler.profiler_v2.start"], "profiler.profiler_v2.Profile.__exit__": ["profiler.profiler_v2.stop"], "profiler.profile_context": [], "profiler.profile_context._profiled_init": [], "profiler.profile_context._profiled_run": ["sys.stderr.write", "protobuf.config_pb2.RunOptions", "protobuf.config_pb2.RunMetadata", "<builtin>.ValueError"], "profiler.profile_context.ProfileContext.__init__": ["<builtin>.set", "<builtin>.len", "threading.Lock", "random.Random", "<builtin>.ValueError"], "profiler.profile_context.ProfileContext.get_profiles": ["<builtin>.ValueError"], "profiler.profile_context.ProfileContext.add_auto_profiling": ["<builtin>.set"], "profiler.profile_context.ProfileContext.profiler": ["framework.ops.get_default_graph", "profiler.model_analyzer.Profiler"], "profiler.model_analyzer.Profiler": [], "profiler.profile_context.ProfileContext.trace_next_step": [], "profiler.profile_context.ProfileContext.dump_next_step": [], "profiler.profile_context.ProfileContext._is_fast_path": [], "profiler.profile_context.ProfileContext._should_trace": ["sys.stderr.write", "<builtin>.sorted", "session._FetchMapper.for_fetch"], "session._FetchMapper.for_fetch": [], "profiler.profile_context.ProfileContext._maybe_dump": ["sys.stderr.write", "util.compat.as_bytes", "os.path.join", "platform.gfile.MakeDirs"], "profiler.profile_context.ProfileContext._dump_file": ["platform.gfile.MakeDirs", "os.path.join", "platform.gfile.Open"], "profiler.profile_context.ProfileContext": ["contextlib.contextmanager"], "profiler.profile_context.ProfileContext._new_step": [], "profiler.profile_context.ProfileContext._profile_candidates": [], "profiler.profile_context.ProfileContext.__enter__": ["<builtin>.getattr", "framework.errors.InternalError", "<builtin>.setattr"], "profiler.profile_context.ProfileContext.__exit__": ["<builtin>.setattr", "util._pywrap_tfprof.DeleteProfiler"], "profiler.tfprof_logger": ["util.tf_export.tf_export"], "profiler.tfprof_logger._fill_missing_graph_shape": ["sys.stderr.write", "<builtin>.len", "<builtin>.enumerate", "framework.tensor_shape.TensorShape"], "profiler.tfprof_logger._str_id": ["<builtin>.len"], "profiler.tfprof_logger._get_logged_ops": ["profiler.tfprof_log_pb2.OpLogEntry", "profiler.tfprof_logger._str_id", "framework.ops.get_stats_for_node_def", "profiler.tfprof_logger._fill_missing_graph_shape", "<builtin>.len", "sys.stderr.write", "<builtin>.int"], "profiler.tfprof_log_pb2.OpLogEntry": [], "profiler.tfprof_log_pb2.OpLogProto": [], "profiler.tfprof_logger.write_op_log": ["profiler.tfprof_logger.merge_default_with_oplog", "framework.ops.get_default_graph", "platform.gfile.Open", "eager.context.executing_eagerly", "os.path.join"], "profiler.traceme": [], "profiler.traceme.traceme_wrapper.wrapper": ["profiler.trace.Trace"], "profiler.trace": [], "profiler.trace.Trace.__init__": ["internal._pywrap_traceme.TraceMe"], "internal._pywrap_traceme.TraceMe": [], "profiler.trace.Trace.__enter__": [], "profiler.trace.Trace.set_metadata": [], "profiler.trace.Trace.__exit__": [], "profiler.trace.trace_wrapper.inner_wrapper": ["functools.wraps"], "profiler.trace.trace_wrapper.inner_wrapper.wrapped": ["profiler.trace.Trace.__init__"], "saved_model.builder": [], "saved_model.builder_impl": [], "saved_model.builder_impl._SavedModelBuilder.__init__": ["protobuf.saved_model_pb2.SavedModel", "io.file_io.file_exists", "io.file_io.recursive_create_dir", "io.file_io.list_directory", "<builtin>.AssertionError"], "saved_model.builder_impl._SavedModelBuilder._save_and_write_assets": ["saved_model.builder_impl.copy_assets_to_destination_dir", "saved_model.builder_impl._maybe_save_assets", "functools.partial", "platform.tf_logging.info"], "saved_model.builder_impl._maybe_save_assets": ["saved_model.builder_impl.get_asset_filename_to_add", "<builtin>.ValueError", "saved_model.builder_impl._asset_path_from_tensor", "platform.tf_logging.info", "saved_model.builder_impl._add_asset_to_collection"], "saved_model.builder_impl.copy_assets_to_destination_dir": ["util.compat.as_bytes", "io.file_io.copy", "io.file_io.file_exists", "os.path.join", "platform.tf_logging.info", "saved_model.utils_impl.get_or_create_assets_dir", "util.compat.as_text"], "saved_model.builder_impl._SavedModelBuilder._tag_and_add_meta_graph": [], "saved_model.builder_impl._SavedModelBuilder._validate_tensor_info": ["<builtin>.AssertionError", "saved_model.builder_impl._SavedModelBuilder._validate_tensor_info"], "saved_model.builder_impl._SavedModelBuilder._validate_signature_def_map": ["<builtin>.KeyError", "saved_model.builder_impl._SavedModelBuilder._validate_tensor_info"], "saved_model.builder_impl._SavedModelBuilder._maybe_create_saver": ["ops.variables._all_saveable_objects", "training.saver.Saver"], "saved_model.builder_impl._SavedModelBuilder.add_meta_graph": ["saved_model.builder_impl._SavedModelBuilder._validate_signature_def_map", "saved_model.builder_impl._SavedModelBuilder._save_and_write_assets", "<builtin>.AssertionError", "saved_model.builder_impl._add_op_to_signature_def_map", "saved_model.builder_impl._SavedModelBuilder._maybe_create_saver", "saved_model.builder_impl._SavedModelBuilder._tag_and_add_meta_graph"], "saved_model.builder_impl._add_op_to_signature_def_map": ["saved_model.signature_def_utils.op_signature_def"], "saved_model.builder_impl._SavedModelBuilder.add_meta_graph_and_variables": ["saved_model.utils_impl.get_or_create_variables_dir", "saved_model.utils_impl.get_variables_path", "saved_model.builder_impl._SavedModelBuilder._validate_signature_def_map", "saved_model.builder_impl._SavedModelBuilder._save_and_write_assets", "<builtin>.AssertionError", "saved_model.builder_impl._add_op_to_signature_def_map", "saved_model.builder_impl._SavedModelBuilder._maybe_create_saver", "saved_model.builder_impl._SavedModelBuilder._tag_and_add_meta_graph"], "saved_model.utils_impl.get_or_create_variables_dir": ["saved_model.utils_impl.get_variables_dir", "io.file_io.recursive_create_dir"], "saved_model.utils_impl.get_variables_path": ["saved_model.utils_impl.get_variables_dir", "os.path.join", "util.compat.as_text"], "saved_model.builder_impl._SavedModelBuilder.save": ["pywrap_saved_model.metrics.IncrementWrite", "pywrap_saved_model.metrics.IncrementWriteApi", "util.compat.as_bytes", "io.file_io.file_exists", "io.file_io.recursive_create_dir", "os.path.join", "<builtin>.str", "io.file_io.write_string_to_file", "platform.tf_logging.info", "util.compat.as_text"], "pywrap_saved_model.metrics.IncrementWriteApi": [], "pywrap_saved_model.metrics.IncrementWrite": [], "saved_model.builder_impl.SavedModelBuilder.__init__": ["<builtin>.super"], "saved_model.builder_impl.SavedModelBuilder._add_collections": ["saved_model.builder_impl.SavedModelBuilder._maybe_add_main_op", "saved_model.builder_impl.SavedModelBuilder._save_and_write_assets", "saved_model.builder_impl.SavedModelBuilder._add_train_op"], "saved_model.builder_impl.SavedModelBuilder._save_and_write_assets": ["saved_model.builder_impl.copy_assets_to_destination_dir", "saved_model.builder_impl._maybe_save_assets", "platform.tf_logging.info"], "saved_model.builder_impl.SavedModelBuilder._maybe_add_main_op": ["<builtin>.TypeError", "<builtin>.isinstance", "framework.ops.add_to_collection", "framework.ops.get_collection", "<builtin>.ValueError"], "saved_model.builder_impl.SavedModelBuilder._add_train_op": ["<builtin>.TypeError", "<builtin>.isinstance", "framework.ops.add_to_collection"], "saved_model.builder_impl.SavedModelBuilder": ["util.deprecation.deprecated_args"], "saved_model.builder_impl.SavedModelBuilder.add_meta_graph": ["saved_model.builder_impl.SavedModelBuilder._add_collections", "saved_model.builder_impl._SavedModelBuilder._validate_signature_def_map", "<builtin>.AssertionError", "saved_model.builder_impl._SavedModelBuilder._maybe_create_saver", "saved_model.builder_impl._SavedModelBuilder._tag_and_add_meta_graph"], "saved_model.builder_impl.SavedModelBuilder.add_meta_graph_and_variables": ["saved_model.utils_impl.get_or_create_variables_dir", "saved_model.utils_impl.get_variables_path", "saved_model.builder_impl.SavedModelBuilder._add_collections", "saved_model.builder_impl._SavedModelBuilder._validate_signature_def_map", "<builtin>.AssertionError", "saved_model.builder_impl._SavedModelBuilder._maybe_create_saver", "saved_model.builder_impl._SavedModelBuilder._tag_and_add_meta_graph"], "saved_model.builder_impl._asset_path_from_tensor": ["<builtin>.TypeError", "<builtin>.len", "<builtin>.isinstance"], "saved_model.builder_impl.get_asset_filename_to_add": ["io.file_io.filecmp", "saved_model.builder_impl._get_unique_asset_filename", "os.path.basename"], "saved_model.builder_impl._add_asset_to_collection": ["protobuf.any_pb2.Any", "protobuf.meta_graph_pb2.AssetFileDef", "framework.ops.add_to_collection"], "saved_model.builder_impl._get_unique_asset_filename": ["util.compat.as_bytes"], "saved_model.builder_impl._add_asset_to_metagraph": [], "saved_model.utils_impl.get_or_create_assets_dir": ["saved_model.utils_impl.get_assets_dir", "io.file_io.recursive_create_dir"], "protobuf.meta_graph_pb2.AssetFileDef": [], "protobuf.any_pb2.Any": [], "saved_model.signature_def_utils.op_signature_def": [], "saved_model.constants": ["util.tf_export.tf_export"], "saved_model.function_deserialization": [], "saved_model.function_deserialization._is_tensor": ["<builtin>.isinstance"], "saved_model.function_deserialization._call_concrete_function": ["<builtin>.zip", "util.nest.flatten", "util.nest.flatten_up_to", "<builtin>.isinstance", "framework.ops.convert_to_tensor"], "saved_model.function_deserialization._try_convert_to_tensor_spec": ["framework.func_graph.FuncGraph", "framework.tensor_spec.TensorSpec", "framework.ops.convert_to_tensor"], "saved_model.function_deserialization._concrete_function_callable_with": ["<builtin>.zip", "util.nest.flatten", "util.nest.flatten_up_to", "<builtin>.id", "<builtin>.isinstance", "saved_model.function_deserialization._is_tensor", "saved_model.function_deserialization._try_convert_to_tensor_spec"], "saved_model.function_deserialization._deserialize_function_spec_as_nonmethod": ["<builtin>.NotImplementedError", "eager.function.FunctionSpec", "util.tf_inspect.FullArgSpec"], "eager.function.FunctionSpec": [], "saved_model.function_deserialization.setup_bare_concrete_function": ["saved_model.function_deserialization._deserialize_function_spec_as_nonmethod", "saved_model.nested_structure_coder.StructureCoder"], "saved_model.function_deserialization.RestoredFunction.__init__": ["<builtin>.super"], "saved_model.function_deserialization.RestoredFunction._run_functions_eagerly": [], "saved_model.function_deserialization.RestoredFunction._list_all_concrete_functions_for_serialization": [], "saved_model.function_deserialization.RestoredFunction._defun_with_scope": ["<builtin>.super"], "saved_model.function_deserialization.recreate_function": ["saved_model.function_deserialization.RestoredFunction.__init__", "saved_model.function_deserialization._deserialize_function_spec_as_nonmethod", "saved_model.nested_structure_coder.StructureCoder", "util.tf_decorator.make_decorator"], "saved_model.function_deserialization.recreate_function.restored_function_body": ["saved_model.function_deserialization._call_concrete_function", "saved_model.function_deserialization.recreate_function.restored_function_body._pretty_format_positional", "<builtin>.ValueError", "<builtin>.enumerate", "saved_model.function_deserialization._concrete_function_callable_with", "<builtin>.len"], "saved_model.function_deserialization.recreate_function.restored_function_body._pretty_format_positional": ["<builtin>.str", "<builtin>.len"], "saved_model.function_deserialization.load_function_def_library": ["framework.function_def_to_graph.function_def_to_graph", "eager.function.ConcreteFunction", "framework.ops.executing_eagerly_outside_functions", "saved_model.function_deserialization._gen_gradient_func", "ops.custom_gradient.generate_name", "framework.ops.Graph", "<builtin>.set", "saved_model.function_deserialization._list_function_deps", "saved_model.function_deserialization._sort_function_defs", "util.compat.as_bytes", "saved_model.function_deserialization._fix_fdef", "saved_model.function_deserialization._restore_gradient_functions", "framework.ops.get_default_graph", "framework.ops.RegisterGradient", "framework.ops.uid", "<builtin>.any"], "saved_model.function_deserialization._list_function_deps": ["saved_model.function_deserialization._get_gradient_op_type", "<builtin>.set"], "saved_model.function_deserialization._sort_function_defs": ["<builtin>.sorted", "collections.defaultdict", "<builtin>.ValueError", "<builtin>.set", "<builtin>.len"], "saved_model.function_deserialization._fix_fdef": ["absl.logging.warning", "saved_model.function_deserialization._get_gradient_op_type", "framework.function_pb2.FunctionDef", "saved_model.function_deserialization.fix_node_def", "util.compat.as_bytes", "saved_model.function_deserialization._clean_function_name"], "saved_model.function_deserialization._restore_gradient_functions": ["<builtin>.len", "util.compat.as_bytes"], "eager.function.ConcreteFunction": [], "saved_model.function_deserialization._gen_gradient_func": [], "saved_model.function_deserialization._gen_gradient_func.gradient_func": ["ops.default_gradient.zeros_like", "<builtin>.zip"], "saved_model.function_deserialization._sort_function_defs.<lambda1>": [], "saved_model.function_deserialization._get_gradient_op_type": [], "saved_model.function_deserialization.fix_node_def": ["<builtin>.next", "framework.ops.uid", "util.compat.as_bytes", "framework.op_def_registry.get"], "saved_model.function_deserialization._clean_function_name": ["re.search"], "saved_model.function_serialization": [], "saved_model.function_serialization._serialize_function_spec": ["<builtin>.NotImplementedError", "protobuf.saved_object_graph_pb2.FunctionSpec"], "protobuf.saved_object_graph_pb2.FunctionSpec": [], "saved_model.function_serialization.serialize_concrete_function": ["framework.func_graph.convert_structure_to_signature", "protobuf.saved_object_graph_pb2.SavedConcreteFunction", "<builtin>.KeyError"], "protobuf.saved_object_graph_pb2.SavedConcreteFunction": [], "saved_model.function_serialization.serialize_bare_concrete_function": ["util.compat.as_text", "saved_model.function_serialization._serialize_function_spec", "saved_model.nested_structure_coder.StructureCoder", "protobuf.saved_object_graph_pb2.SavedBareConcreteFunction"], "protobuf.saved_object_graph_pb2.SavedBareConcreteFunction": [], "saved_model.function_serialization.serialize_function": ["protobuf.saved_object_graph_pb2.SavedFunction", "util.compat.as_text", "saved_model.function_serialization._serialize_function_spec", "saved_model.nested_structure_coder.StructureCoder"], "protobuf.saved_object_graph_pb2.SavedFunction": [], "saved_model.function_serialization.wrap_cached_variables": ["framework.func_graph.func_graph_from_py_func", "util.nest.flatten", "<builtin>.getattr", "<builtin>.id", "framework.func_graph.FuncGraph", "eager.function.ConcreteFunction", "<builtin>.tuple"], "saved_model.function_serialization.wrap_cached_variables.wrap_function": [], "saved_model.loader": [], "saved_model.loader_impl": ["util.deprecation.deprecated_endpoints", "util.deprecation.deprecated", "util.tf_export.tf_export"], "saved_model.loader_impl.parse_saved_model": ["os.path.join", "io.file_io.FileIO", "<builtin>.str", "protobuf.text_format.Merge", "util.compat.path_to_str", "util.compat.as_bytes", "io.file_io.file_exists", "protobuf.saved_model_pb2.SavedModel", "<builtin>.IOError"], "saved_model.utils_impl.get_debug_dir": ["os.path.join", "util.compat.as_text"], "saved_model.loader_impl.get_asset_tensors": ["util.compat.as_bytes", "protobuf.meta_graph_pb2.AssetFileDef", "os.path.join"], "saved_model.loader_impl._get_main_op_tensor": ["framework.ops.get_collection", "<builtin>.len", "<builtin>.RuntimeError"], "saved_model.loader_impl._get_op_from_collection": ["saved_model.loader_impl._get_main_op_tensor"], "saved_model.loader_impl._get_op_from_signature_def": ["saved_model.signature_def_utils.load_op_from_signature_def"], "saved_model.signature_def_utils.load_op_from_signature_def": [], "saved_model.loader_impl.get_init_op": ["saved_model.loader_impl._get_op_from_collection", "saved_model.loader_impl._get_op_from_signature_def"], "saved_model.loader_impl.get_train_op": ["saved_model.loader_impl._get_op_from_collection", "saved_model.loader_impl._get_op_from_signature_def"], "saved_model.loader_impl.maybe_saved_model_directory": ["io.file_io.file_exists", "os.path.join"], "saved_model.loader_impl.load": ["saved_model.loader_impl.SavedModelLoader.__init__", "saved_model.loader_impl.SavedModelLoader.load"], "saved_model.loader_impl.SavedModelLoader.__init__": ["saved_model.utils_impl.get_variables_path", "saved_model.loader_impl.parse_saved_model"], "saved_model.loader_impl.SavedModelLoader.load": ["saved_model.loader_impl.SavedModelLoader.run_init_ops", "saved_model.loader_impl.SavedModelLoader.load_graph", "pywrap_saved_model.metrics.IncrementRead", "saved_model.loader_impl.parse_saved_model", "pywrap_saved_model.metrics.IncrementReadApi", "saved_model.loader_impl.SavedModelLoader.restore_variables", "<builtin>.len", "saved_model.loader_impl.SavedModelLoader.get_meta_graph_def_from_tags"], "saved_model.loader_impl.SavedModelLoader.export_dir": [], "saved_model.loader_impl.SavedModelLoader.variables_path": [], "saved_model.loader_impl.SavedModelLoader.saved_model": [], "saved_model.loader_impl.SavedModelLoader.get_meta_graph_def_from_tags": ["<builtin>.str", "<builtin>.RuntimeError", "<builtin>.set"], "saved_model.loader_impl.SavedModelLoader.load_graph": ["saved_model.loader_impl.SavedModelLoader.get_meta_graph_def_from_tags", "training.saver._import_meta_graph_with_return_elements"], "training.saver._import_meta_graph_with_return_elements": ["<builtin>.RuntimeError", "training.saver._create_saver_from_imported_meta_graph", "<builtin>.isinstance", "framework.meta_graph.read_meta_graph_file", "eager.context.executing_eagerly", "framework.meta_graph.import_scoped_meta_graph_with_return_elements"], "saved_model.loader_impl.SavedModelLoader.restore_variables": ["ops.variables._all_saveable_objects", "platform.tf_logging.info", "<builtin>.isinstance", "<builtin>.ValueError"], "saved_model.loader_impl.SavedModelLoader.run_init_ops": ["saved_model.loader_impl.get_asset_tensors", "saved_model.loader_impl.get_init_op", "saved_model.loader_impl.SavedModelLoader.get_meta_graph_def_from_tags"], "pywrap_saved_model.metrics.IncrementReadApi": [], "pywrap_saved_model.metrics.IncrementRead": [], "saved_model.load": ["util.tf_export.tf_export", "CommonEndpoints.all_functions.union", "utils.generic_utils.LazyLoader", "<builtin>.globals"], "saved_model.load._unused_handle": ["ops.control_flow_ops.Assert", "ops.array_ops.placeholder_with_default", "ops.array_ops.placeholder", "framework.ops.control_dependencies"], "saved_model.load._WrapperFunction.__init__": ["<builtin>.vars", "ConcreteFunction.__dict__.update"], "ConcreteFunction.__dict__.update": [], "saved_model.load._WrapperFunction._call_flat": ["distribute.distribution_strategy_context.get_replica_context", "<builtin>.list", "<builtin>.map", "<builtin>.super", "distribute.values_util.is_saving_non_distributed"], "saved_model.load._WrapperFunction._call_flat.get_handle": ["distribute.distribute_utils.is_distributed_variable"], "saved_model.load._WrapperFunction._call_flat.get_unused_handle": ["distribute.distribute_utils.is_distributed_variable", "saved_model.load._unused_handle"], "saved_model.load.Loader.__init__": ["saved_model.load.Loader._retrieve_all_filtered_nodes", "saved_model.load.Loader._load_all", "saved_model.function_deserialization.load_function_def_library", "saved_model.load.Loader._restore_checkpoint", "saved_model.load.Loader._convert_node_paths_to_ints", "<builtin>.isinstance", "framework.ops.add_to_collection", "eager.context.executing_eagerly"], "saved_model.load.Loader._convert_node_paths_to_ints": ["saved_model.load.Loader._find_node_child", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.enumerate"], "saved_model.load.Loader._retrieve_all_filtered_nodes": ["<builtin>.TypeError", "<builtin>.set", "<builtin>.list", "<builtin>.isinstance"], "saved_model.load.Loader._load_all": ["saved_model.load.Loader._setup_functions_captures", "saved_model.load.Loader._load_edges", "saved_model.load.Loader._create_saveable_object_factories", "saved_model.load.Loader._load_nodes", "saved_model.load.Loader._setup_functions_structures"], "saved_model.load.Loader._restore_checkpoint": ["<builtin>.len", "tracking.util.TrackableSaver", "saved_model.load.Loader.get", "saved_model.utils_impl.get_variables_path", "tracking.base.CheckpointPosition", "ops.control_flow_ops.group", "tracking.graph_view.ObjectGraphView", "framework.ops.device", "ops.resource_variable_ops.is_resource_variable", "<builtin>.isinstance", "framework.ops.add_to_collection", "eager.context.executing_eagerly", "framework.constant_op.constant", "<builtin>.NotImplementedError", "<builtin>.dict"], "saved_model.load.Loader._find_node_child": ["<builtin>.ValueError"], "saved_model.load.Loader._retrieve_all_filtered_nodes.<lambda1>": [], "saved_model.load.Loader._load_nodes": ["<builtin>.len", "saved_model.load.Loader._recreate_base_user_object", "saved_model.load.Loader._iter_all_nodes", "<builtin>.set", "saved_model.load.Loader._initialize_loaded_nodes", "saved_model.load.Loader._recreate", "<builtin>.range"], "saved_model.load.Loader._load_edges": ["saved_model.load.Loader._recreate_base_user_object", "saved_model.load.Loader._iter_all_nodes", "saved_model.load.Loader.get", "saved_model.load.Loader._add_object_graph_edges", "<builtin>.setattr", "<builtin>.getattr", "<builtin>.hasattr"], "saved_model.load.Loader._setup_functions_structures": ["<builtin>.sorted", "saved_model.nested_structure_coder.StructureCoder"], "saved_model.load.Loader._setup_functions_captures": ["<builtin>.len", "<builtin>.zip", "<builtin>.sorted", "saved_model.load.Loader._get_tensor_from_node", "ops.resource_variable_ops.is_resource_variable", "distribute.distribute_utils.is_distributed_variable", "ops.handle_data_util.copy_handle_data"], "saved_model.load.Loader._create_saveable_object_factories": ["saved_model.load.Loader._iter_all_nodes", "saving.saveable_object_util.restored_saved_object_factory", "saved_model.load.Loader.get"], "saved_model.load.Loader._iter_all_nodes": ["<builtin>.enumerate"], "saved_model.load.Loader.get": ["<builtin>.isinstance"], "saving.saveable_object_util.restored_saved_object_factory": ["functools.partial"], "saved_model.load.Loader._add_object_graph_edges": ["<builtin>.callable", "<builtin>.setattr", "<builtin>.type"], "saved_model.load.Loader._recreate_base_user_object": ["tracking.AutoTrackable.__init__"], "saved_model.load.Loader._get_tensor_from_node": ["framework.ops.init_scope", "<builtin>.ValueError", "ops.resource_variable_ops.is_resource_variable", "distribute.distribute_utils.is_distributed_variable", "<builtin>.isinstance", "framework.tensor_util.is_tf_type"], "saved_model.load.Loader._initialize_loaded_nodes": [], "saved_model.load.Loader._recreate": ["functools.partial", "<builtin>.list", "<builtin>.ValueError"], "tracking.base.CheckpointPosition": [], "saved_model.load.Loader.adjust_debug_info_func_names": ["protobuf.graph_debug_info_pb2.GraphDebugInfo"], "saved_model.load.Loader._recreate.<dict1>.<lambda1>": [], "saved_model.load.Loader._recreate.<lambda1>": ["saved_model.load.Loader._recreate_user_object"], "saved_model.load.Loader._recreate_user_object": ["saved_model.load.Loader._recreate_base_user_object", "saved_model.revived_types.deserialize"], "saved_model.load.Loader._recreate.<dict1>.<lambda2>": [], "saved_model.load.Loader._recreate.<lambda2>": ["saved_model.load.Loader._recreate_asset"], "saved_model.load.Loader._recreate_asset": ["os.path.join", "eager.context.executing_eagerly", "tracking.tracking.Asset", "framework.ops.add_to_collection", "saved_model.utils_impl.get_assets_dir"], "saved_model.load.Loader._recreate.<dict1>.<lambda3>": [], "saved_model.load.Loader._recreate.<lambda3>": ["saved_model.load.Loader._recreate_function"], "saved_model.load.Loader._recreate_function": ["saved_model.function_deserialization.recreate_function"], "saved_model.load.Loader._recreate.<dict1>.<lambda4>": [], "saved_model.load.Loader._recreate.<lambda4>": ["saved_model.load.Loader._recreate_variable"], "saved_model.load.Loader._recreate_variable": ["ops.variables.Variable", "framework.ops.get_default_graph", "ops.variables.validate_synchronization_aggregation_trainable"], "saved_model.load.Loader._recreate.<dict1>.<lambda5>": [], "saved_model.load.Loader._recreate.<lambda5>": ["saved_model.load.Loader._recreate_constant"], "saved_model.load.Loader._recreate_constant": ["framework.tensor_util.MakeNdarray", "framework.constant_op.constant", "framework.dtypes.as_dtype", "framework.ops.device"], "saved_model.load.Loader._recreate.<dict1>.<lambda6>": [], "saved_model.load.Loader._recreate.<lambda6>": ["saved_model.load.Loader._recreate_resource"], "saved_model.load.Loader._recreate_resource": ["saved_model.load._RestoredResource.__init__"], "saved_model.revived_types.deserialize": [], "tracking.AutoTrackable.__init__": [], "saved_model.utils_impl.get_assets_dir": ["os.path.join", "util.compat.as_text"], "saved_model.load.Loader._recreate_bare_concrete_function": ["saved_model.function_deserialization.setup_bare_concrete_function"], "saved_model.load.Loader._recreate_variable.uninitialized_variable_creator": ["ops.resource_variable_ops.UninitializedVariable"], "saved_model.load.Loader._get_tensor_from_fn": [], "saved_model.load._RestoredResource.__init__": ["<builtin>.super"], "saved_model.load._RestoredResource._create_resource": ["<builtin>.RuntimeError"], "saved_model.load._RestoredResource._initialize": ["<builtin>.RuntimeError"], "saved_model.load._RestoredResource._destroy_resource": ["<builtin>.RuntimeError"], "saved_model.load._RestoredResource._list_functions_for_serialization": [], "saved_model.load._call_attribute": [], "saved_model.load._setattr_and_track": ["<builtin>.isinstance", "<builtin>.setattr"], "saved_model.load.load_partial": ["saved_model.load.load_internal"], "saved_model.load.load_internal": ["<builtin>.len", "util.nest.flatten", "<builtin>.set", "saved_model.loader_impl.parse_saved_model_with_debug_info", "framework.ops.init_scope", "saved_model.load_options.LoadOptions", "<builtin>.FileNotFoundError", "saving.checkpoint_options.CheckpointOptions", "pywrap_saved_model.metrics.IncrementReadApi", "saved_model.utils_impl.swap_function_tensor_content", "<builtin>.ValueError", "<builtin>.str", "saved_model.load_v1_in_v2.load", "<builtin>.isinstance", "saved_model.load.Loader.__init__", "pywrap_saved_model.metrics.IncrementRead"], "saved_model.load_options.LoadOptions": [], "saved_model.utils_impl.swap_function_tensor_content": ["saved_model.utils_impl.byte_swap_tensor_content"], "<builtin>.FileNotFoundError": [], "saved_model.load_v1_in_v2.load": ["pywrap_saved_model.metrics.IncrementReadApi", "pywrap_saved_model.metrics.IncrementRead", "loader_impl.SavedModelLoader.__init__", "saved_model.load_v1_in_v2._EagerSavedModelLoader.load"], "saved_model.load_options": [], "saved_model.load_options.LoadOptions.__init__": [], "saved_model.load_v1_in_v2": [], "saved_model.load_v1_in_v2._Initializer.__init__": ["<builtin>.super"], "saved_model.load_v1_in_v2._Initializer._create_resource": ["ops.array_ops.placeholder"], "saved_model.load_v1_in_v2._Initializer._initialize": [], "saved_model.load_v1_in_v2._EagerSavedModelLoader.get_meta_graph_def_from_tags": ["<builtin>.super", "<builtin>.len", "<builtin>.ValueError"], "saved_model.load_v1_in_v2._EagerSavedModelLoader.load_graph": ["training.saver._import_meta_graph_with_return_elements"], "saved_model.load_v1_in_v2._EagerSavedModelLoader._extract_saver_restore": [], "saved_model.load_v1_in_v2._EagerSavedModelLoader.restore_variables": ["platform.tf_logging.warning", "framework.ops.add_to_collection", "framework.constant_op.constant", "framework.ops.executing_eagerly_outside_functions"], "saved_model.load_v1_in_v2._EagerSavedModelLoader._extract_signatures": ["<builtin>.isinstance", "framework.func_graph.convert_structure_to_signature", "<builtin>.range", "util.nest.flatten", "<builtin>.dict", "<builtin>.sorted", "eager.wrap_function._get_element_from_tensor_info", "<builtin>.len", "<builtin>.zip"], "saved_model.load_v1_in_v2._EagerSavedModelLoader._extract_signatures.<lambda1>": [], "saved_model.load_v1_in_v2._EagerSavedModelLoader.load": ["tracking.tracking.Asset", "saved_model.load_v1_in_v2._EagerSavedModelLoader._extract_saver_restore", "saved_model.load_v1_in_v2._EagerSavedModelLoader.restore_variables", "functools.partial", "framework.ops.uid", "saved_model.load_v1_in_v2._Initializer._initialize", "saved_model.function_deserialization.fix_node_def", "saved_model.load_v1_in_v2._Initializer.__init__", "saved_model.load_v1_in_v2._EagerSavedModelLoader._extract_signatures", "saved_model.function_deserialization.load_function_def_library", "saved_model.signature_serialization.create_signature_map", "<builtin>.list", "saved_model.loader_impl.get_asset_tensors", "eager.wrap_function.wrap_function", "saved_model.loader_impl.get_init_op", "framework.constant_op.constant", "eager.context.executing_eagerly", "framework.ops.add_to_collection", "monitored_session.Scaffold.default_local_init_op", "framework.ops.init_scope", "tracking.tracking.AutoTrackable", "saved_model.load_v1_in_v2._EagerSavedModelLoader.get_meta_graph_def_from_tags"], "monitored_session.Scaffold.default_local_init_op": [], "tracking.tracking.AutoTrackable": [], "saved_model.load_v1_in_v2._EagerSavedModelLoader.load.<lambda1>": ["framework.constant_op.constant"], "saved_model.signature_serialization.create_signature_map": ["saved_model.signature_serialization._SignatureMap.__init__", "<builtin>.isinstance", "saved_model.signature_serialization._SignatureMap._add_signature", "<builtin>.len"], "loader_impl.SavedModelLoader.__init__": [], "saved_model.main_op": [], "saved_model.main_op_impl": ["util.deprecation.deprecated", "util.tf_export.tf_export"], "saved_model.main_op_impl.main_op": ["ops.control_flow_ops.group", "ops.lookup_ops.tables_initializer", "ops.variables.global_variables_initializer", "ops.variables.local_variables_initializer"], "saved_model.main_op_impl.main_op_with_restore": ["saved_model.main_op_impl.main_op", "ops.control_flow_ops.group", "framework.ops.control_dependencies"], "saved_model.method_name_updater": [], "saved_model.method_name_updater.MethodNameUpdater.__init__": ["saved_model.loader_impl.parse_saved_model"], "saved_model.method_name_updater.MethodNameUpdater.replace_method_name": ["<builtin>.str", "<builtin>.ValueError", "<builtin>.set", "<builtin>.isinstance"], "saved_model.method_name_updater.MethodNameUpdater.save": ["<builtin>.str", "util.compat.as_text", "util.compat.as_bytes", "io.file_io.file_exists", "os.path.join", "platform.tf_logging.info", "io.file_io.write_string_to_file"], "saved_model.nested_structure_coder": ["saved_model.nested_structure_coder.StructureCoder.register_codec"], "saved_model.nested_structure_coder.StructureCoder.register_codec": [], "saved_model.nested_structure_coder.StructureCoder._get_encoders": [], "saved_model.nested_structure_coder.StructureCoder._get_decoders": [], "saved_model.nested_structure_coder.StructureCoder._map_structure": ["<builtin>.str", "<builtin>.type", "functools.partial"], "saved_model.nested_structure_coder.StructureCoder.encode_structure": ["saved_model.nested_structure_coder.StructureCoder._map_structure", "saved_model.nested_structure_coder.StructureCoder._get_encoders"], "saved_model.nested_structure_coder.StructureCoder.can_encode": ["saved_model.nested_structure_coder.StructureCoder.encode_structure"], "saved_model.nested_structure_coder.StructureCoder.decode_proto": ["saved_model.nested_structure_coder.StructureCoder._map_structure", "saved_model.nested_structure_coder.StructureCoder._get_decoders"], "saved_model.nested_structure_coder._ListCodec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._ListCodec.do_encode": ["protobuf.struct_pb2.ListValue", "protobuf.struct_pb2.StructuredValue"], "protobuf.struct_pb2.ListValue": [], "saved_model.nested_structure_coder._ListCodec.can_decode": [], "saved_model.nested_structure_coder._ListCodec.do_decode": [], "saved_model.nested_structure_coder._is_tuple": ["saved_model.nested_structure_coder._is_named_tuple", "<builtin>.isinstance"], "saved_model.nested_structure_coder._is_named_tuple": ["<builtin>.all", "<builtin>.isinstance", "<builtin>.hasattr"], "saved_model.nested_structure_coder._TupleCodec.can_encode": ["saved_model.nested_structure_coder._is_tuple"], "saved_model.nested_structure_coder._TupleCodec.do_encode": ["protobuf.struct_pb2.TupleValue", "protobuf.struct_pb2.StructuredValue"], "protobuf.struct_pb2.TupleValue": [], "saved_model.nested_structure_coder._TupleCodec.can_decode": [], "saved_model.nested_structure_coder._TupleCodec.do_decode": ["<builtin>.tuple"], "saved_model.nested_structure_coder._DictCodec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._DictCodec.do_encode": ["protobuf.struct_pb2.DictValue", "protobuf.struct_pb2.StructuredValue"], "protobuf.struct_pb2.DictValue": [], "saved_model.nested_structure_coder._DictCodec.can_decode": [], "saved_model.nested_structure_coder._DictCodec.do_decode": [], "saved_model.nested_structure_coder._NamedTupleCodec.can_encode": ["saved_model.nested_structure_coder._is_named_tuple"], "saved_model.nested_structure_coder._NamedTupleCodec.do_encode": ["protobuf.struct_pb2.NamedTupleValue", "protobuf.struct_pb2.StructuredValue"], "protobuf.struct_pb2.NamedTupleValue": [], "saved_model.nested_structure_coder._NamedTupleCodec.can_decode": [], "saved_model.nested_structure_coder._NamedTupleCodec.do_decode": ["<builtin>.dict", "collections.namedtuple"], "saved_model.nested_structure_coder._Float64Codec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._Float64Codec.do_encode": ["protobuf.struct_pb2.StructuredValue"], "saved_model.nested_structure_coder._Float64Codec.can_decode": [], "saved_model.nested_structure_coder._Float64Codec.do_decode": [], "saved_model.nested_structure_coder._Int64Codec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._Int64Codec.do_encode": ["protobuf.struct_pb2.StructuredValue"], "saved_model.nested_structure_coder._Int64Codec.can_decode": [], "saved_model.nested_structure_coder._Int64Codec.do_decode": ["<builtin>.int"], "saved_model.nested_structure_coder._StringCodec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._StringCodec.do_encode": ["protobuf.struct_pb2.StructuredValue"], "saved_model.nested_structure_coder._StringCodec.can_decode": [], "saved_model.nested_structure_coder._StringCodec.do_decode": ["util.compat.as_str"], "saved_model.nested_structure_coder._NoneCodec.can_encode": [], "saved_model.nested_structure_coder._NoneCodec.do_encode": ["protobuf.struct_pb2.NoneValue", "protobuf.struct_pb2.StructuredValue"], "protobuf.struct_pb2.NoneValue": [], "saved_model.nested_structure_coder._NoneCodec.can_decode": [], "saved_model.nested_structure_coder._NoneCodec.do_decode": [], "saved_model.nested_structure_coder._BoolCodec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._BoolCodec.do_encode": ["protobuf.struct_pb2.StructuredValue"], "saved_model.nested_structure_coder._BoolCodec.can_decode": [], "saved_model.nested_structure_coder._BoolCodec.do_decode": [], "saved_model.nested_structure_coder._TensorShapeCodec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._TensorShapeCodec.do_encode": ["protobuf.struct_pb2.StructuredValue"], "saved_model.nested_structure_coder._TensorShapeCodec.can_decode": [], "saved_model.nested_structure_coder._TensorShapeCodec.do_decode": ["framework.tensor_shape.TensorShape"], "saved_model.nested_structure_coder._TensorTypeCodec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._TensorTypeCodec.do_encode": ["protobuf.struct_pb2.StructuredValue"], "saved_model.nested_structure_coder._TensorTypeCodec.can_decode": [], "saved_model.nested_structure_coder._TensorTypeCodec.do_decode": ["framework.dtypes.DType"], "saved_model.nested_structure_coder._TensorSpecCodec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._TensorSpecCodec.do_encode": ["protobuf.struct_pb2.TensorSpecProto", "protobuf.struct_pb2.StructuredValue"], "protobuf.struct_pb2.TensorSpecProto": [], "saved_model.nested_structure_coder._TensorSpecCodec.can_decode": [], "saved_model.nested_structure_coder._TensorSpecCodec.do_decode": ["framework.tensor_spec.TensorSpec", "protobuf.struct_pb2.StructuredValue"], "saved_model.nested_structure_coder._BoundedTensorSpecCodec.can_encode": ["<builtin>.isinstance"], "saved_model.nested_structure_coder._BoundedTensorSpecCodec.do_encode": ["protobuf.struct_pb2.BoundedTensorSpecProto", "framework.tensor_util.make_tensor_proto", "protobuf.struct_pb2.StructuredValue"], "protobuf.struct_pb2.BoundedTensorSpecProto": [], "saved_model.nested_structure_coder._BoundedTensorSpecCodec.can_decode": [], "saved_model.nested_structure_coder._BoundedTensorSpecCodec.do_decode": ["framework.tensor_spec.BoundedTensorSpec", "framework.tensor_util.MakeNdarray", "protobuf.struct_pb2.StructuredValue"], "framework.tensor_spec.BoundedTensorSpec": [], "saved_model.nested_structure_coder._TypeSpecCodec": ["<builtin>.dict"], "saved_model.nested_structure_coder._TypeSpecCodec.can_encode": ["<builtin>.isinstance", "<builtin>.type", "framework.type_spec.get_name"], "saved_model.nested_structure_coder._TypeSpecCodec.do_encode": ["framework.type_spec.get_name", "<builtin>.isinstance", "protobuf.struct_pb2.StructuredValue", "warnings.warn", "<builtin>.type", "protobuf.struct_pb2.TypeSpecProto"], "protobuf.struct_pb2.TypeSpecProto": [], "saved_model.nested_structure_coder._TypeSpecCodec.can_decode": [], "saved_model.nested_structure_coder._TypeSpecCodec.do_decode": ["<builtin>.ValueError", "warnings.warn", "framework.type_spec.lookup", "extension_type.AnonymousExtensionTypeSpec._deserialize"], "extension_type.AnonymousExtensionTypeSpec._deserialize": [], "saved_model.revived_types": ["util.tf_export.tf_export"], "saved_model.revived_types.VersionedTypeRegistration.__init__": [], "saved_model.revived_types.VersionedTypeRegistration.to_proto": ["framework.versions_pb2.VersionDef", "protobuf.saved_object_graph_pb2.SavedUserObject"], "protobuf.saved_object_graph_pb2.SavedUserObject": [], "saved_model.revived_types.VersionedTypeRegistration.from_proto": [], "saved_model.revived_types.VersionedTypeRegistration.should_load": [], "saved_model.revived_types.register_revived_type.<lambda1>": [], "saved_model.revived_types.serialize": [], "saved_model.revived_types.registered_identifiers": [], "saved_model.revived_types.get_setter": [], "saved_model.saved_model": [], "saved_model.save": ["util.tf_export.tf_export", "<builtin>.frozenset", "collections.namedtuple", "<builtin>.globals", "utils.generic_utils.LazyLoader"], "saved_model.save._AugmentedGraphView.__init__": ["util.object_identity.ObjectIdentityWeakKeyDictionary", "util.object_identity.ObjectIdentityDictionary", "eager.context.executing_eagerly", "framework.ops.inside_function", "<builtin>.super"], "util.object_identity.ObjectIdentityWeakKeyDictionary": [], "saved_model.save._AugmentedGraphView.add_object": [], "saved_model.save._AugmentedGraphView.list_dependencies": ["saved_model.save._AugmentedGraphView.list_extra_dependencies", "<builtin>.set", "tracking.base.TrackableReference", "<builtin>.ValueError", "<builtin>.list", "<builtin>.super"], "saved_model.save._AugmentedGraphView.list_extra_dependencies": [], "saved_model.save._AugmentedGraphView.list_functions": [], "saved_model.save._SaveableView.__init__": ["util.compat.as_text", "util.object_identity.ObjectIdentityDictionary", "saved_model.save._SaveableView._initialize_nodes_and_concrete_functions", "saved_model.save._SaveableView._trace_all_concrete_functions", "graph_view.ObjectGraphView.objects_ids_and_slot_variables_and_paths"], "saved_model.save._SaveableView._trace_all_concrete_functions": ["saved_model.save._AugmentedGraphView.list_functions", "<builtin>.isinstance", "graph_view.ObjectGraphView.list_objects"], "graph_view.ObjectGraphView.objects_ids_and_slot_variables_and_paths": [], "saved_model.save._SaveableView._initialize_nodes_and_concrete_functions": ["saving.saveable_object_util.trace_save_restore_functions", "saved_model.save._AugmentedGraphView.list_functions", "<builtin>.set", "<builtin>.len", "saved_model.save._SaveableView._add_function_to_graph", "util.object_identity.ObjectIdentityDictionary", "<builtin>.list", "ops.resource_variable_ops.is_resource_variable", "<builtin>.min", "absl.logging.warning"], "saved_model.save._SaveableView._add_function_to_graph": ["<builtin>.isinstance", "<builtin>.len"], "saving.saveable_object_util.trace_save_restore_functions": ["saving.saveable_object_util._trace_save_and_restore_function", "<builtin>.callable", "<builtin>.isinstance", "platform.tf_logging.debug", "saving.saveable_object_util.is_factory_for_restored_saveable_object"], "saved_model.save._SaveableView.concrete_and_gradient_functions": [], "graph_view.ObjectGraphView.list_objects": [], "saved_model.save._SaveableView.root": [], "saved_model.save._SaveableView.fill_object_graph_proto": ["saved_model.save._AugmentedGraphView.list_dependencies", "<builtin>.isinstance", "<builtin>.enumerate", "saved_model.save._AugmentedGraphView.list_functions"], "saved_model.save._SaveableView.map_resources": ["framework.tensor_util.constant_value", "util.object_identity.ObjectIdentityDictionary", "<builtin>.hasattr", "eager.context.executing_eagerly", "framework.tensor_util.is_tf_type", "util.compat.as_text", "framework.constant_op.constant", "<builtin>.enumerate", "<builtin>.ValueError", "saved_model.function_serialization.wrap_cached_variables", "numpy.prod", "numpy.all", "saved_model.save._SaveableView.add_capture_and_node", "<builtin>.isinstance", "saved_model.save._process_asset"], "saved_model.save._process_asset": ["framework.tensor_util.constant_value", "saved_model.builder_impl.get_asset_filename_to_add", "ops.array_ops.placeholder", "<builtin>.len", "protobuf.meta_graph_pb2.AssetFileDef", "ops.resource_variable_ops.ResourceVariable", "<builtin>.str"], "saved_model.save._SaveableView.add_capture_and_node": ["<builtin>.len"], "saved_model.save._tensor_dict_to_tensorinfo": ["saved_model.utils_impl.build_tensor_info_internal"], "saved_model.utils_impl.build_tensor_info_internal": ["saved_model.utils_impl._build_composite_tensor_info_internal", "<builtin>.isinstance", "protobuf.meta_graph_pb2.TensorInfo", "framework.dtypes.as_dtype"], "saved_model.save._map_captures_to_created_tensors": ["gc.get_referrers", "<builtin>.isinstance", "<builtin>.repr", "<builtin>.AssertionError"], "gc.get_referrers": [], "saved_model.save._to_safe_name_scope": ["re.sub", "re.match"], "saved_model.save._map_function_arguments_to_created_inputs": ["saved_model.save._to_safe_name_scope", "util.compat.as_str_any", "ops.array_ops.placeholder", "<builtin>.ValueError"], "saved_model.save._call_function_with_mapped_captures": ["saved_model.save._map_captures_to_created_tensors"], "saved_model.save._generate_signatures": ["saved_model.save._call_function_with_mapped_captures", "<builtin>.len", "saved_model.signature_def_utils.build_signature_def", "<builtin>.sorted", "saved_model.save._tensor_dict_to_tensorinfo", "saved_model.save._map_function_arguments_to_created_inputs"], "saved_model.save._trace_resource_initializers": ["eager.def_function.function", "<builtin>.isinstance", "saved_model.save._trace_resource_initializers._wrap_obj_initializer"], "saved_model.save._trace_resource_initializers._wrap_initializer": ["framework.constant_op.constant"], "saved_model.save._trace_resource_initializers._wrap_obj_initializer": [], "saved_model.save._trace_resource_initializers._wrap_obj_initializer.<lambda1>": ["saved_model.save._trace_resource_initializers._wrap_initializer"], "saved_model.save._iterate_op_types": ["<builtin>.isinstance", "<builtin>.ValueError"], "saved_model.save._get_outer_most_capture": ["<builtin>.isinstance"], "saved_model.save._trace_gradient_functions": ["framework.function_pb2.RegisteredGradient", "<builtin>.set", "<builtin>.hasattr", "saved_model.save._iterate_op_types", "<builtin>.ValueError", "eager.def_function.function", "ops.gradient_registry.lookup", "saved_model.save._get_outer_most_capture", "saved_model.save._SaveableView.add_capture_and_node", "<builtin>.list", "<builtin>.isinstance"], "ops.gradient_registry.lookup": [], "framework.function_pb2.RegisteredGradient": [], "saved_model.save._fill_meta_graph_def": ["saved_model.save._call_function_with_mapped_captures", "saved_model.save._generate_signatures", "framework.meta_graph.strip_graph_default_valued_attrs", "saved_model.utils_impl.swap_function_tensor_content", "ops.control_flow_ops.no_op", "saved_model.signature_def_utils.op_signature_def", "framework.meta_graph.stripped_op_list_for_graph", "saved_model.save._verify_ops", "framework.ops.Graph", "saved_model.save._trace_resource_initializers", "graph_view.ObjectGraphView.frozen_saveable_objects", "saved_model.save._SaveableView.map_resources", "saved_model.save._trace_gradient_functions", "functools.partial", "framework.ops.control_dependencies", "saving.functional_saver.MultiDeviceSaver"], "graph_view.ObjectGraphView.frozen_saveable_objects": [], "saving.functional_saver.MultiDeviceSaver": ["framework.tensor_spec.TensorSpec", "eager.def_function.function"], "saved_model.save._verify_ops": ["<builtin>.set", "framework.meta_graph.ops_used_by_graph_def", "<builtin>.ValueError"], "saved_model.save._serialize_object_graph": ["<builtin>.zip", "saved_model.function_serialization.serialize_concrete_function", "util.compat.as_text", "protobuf.saved_object_graph_pb2.SavedObjectGraph", "saved_model.save._SaveableView.fill_object_graph_proto", "saved_model.nested_structure_coder.StructureCoder", "saved_model.save._write_object_proto"], "protobuf.saved_object_graph_pb2.SavedObjectGraph": [], "saved_model.save._write_object_proto": ["saved_model.revived_types.serialize", "framework.versions_pb2.VersionDef", "saved_model.function_serialization.serialize_bare_concrete_function", "saved_model.save_context.get_save_options", "protobuf.saved_object_graph_pb2.SavedUserObject", "ops.resource_variable_ops.is_resource_variable", "saved_model.function_serialization.serialize_function", "<builtin>.isinstance"], "saved_model.save._export_debug_info": ["os.path.join", "io.file_io.atomic_write_string_to_file", "framework.error_interpolation.create_graph_debug_info_def", "saved_model.utils_impl.get_or_create_debug_dir", "<builtin>.isinstance"], "saved_model.utils_impl.get_or_create_debug_dir": ["io.file_io.recursive_create_dir", "saved_model.utils_impl.get_debug_dir"], "saved_model.save.save_and_return_nodes": ["util.compat.as_str", "saved_model.save_options.SaveOptions", "saved_model.pywrap_saved_model.Save", "os.path.join", "io.file_io.atomic_write_string_to_file", "eager.context.executing_eagerly", "saved_model.utils_impl.get_variables_path", "saved_model.save._build_meta_graph", "saved_model.save._export_debug_info", "eager.context.async_wait", "protobuf.saved_model_pb2.SavedModel", "framework.ops.dismantle_graph", "saved_model.utils_impl.get_or_create_variables_dir", "<builtin>.FileNotFoundError", "saved_model.builder_impl.copy_assets_to_destination_dir", "saving.checkpoint_options.CheckpointOptions"], "saved_model.save._build_meta_graph": ["saved_model.save_context.save_context", "saved_model.save._build_meta_graph_impl"], "saved_model.pywrap_saved_model.Save": [], "saved_model.save.export_meta_graph": ["saved_model.save_options.SaveOptions", "io.file_io.atomic_write_string_to_file", "saved_model.save._export_debug_info", "saved_model.save._build_meta_graph", "os.path.dirname", "framework.ops.dismantle_graph"], "saved_model.save._build_meta_graph_impl": ["saved_model.signature_serialization.find_function_to_export", "saved_model.save._AugmentedGraphView.__init__", "protobuf.meta_graph_pb2.MetaGraphDef", "<builtin>.AssertionError", "tracking.util.TrackableSaver", "saved_model.save._fill_meta_graph_def", "saved_model.signature_serialization.canonicalize_signatures", "<builtin>.type", "saved_model.signature_serialization.validate_saveable_view", "framework.ops.inside_function", "<builtin>.ValueError", "saved_model.save._serialize_object_graph", "saved_model.save._SaveableView.__init__", "saved_model.signature_serialization.create_signature_map", "<builtin>.isinstance", "saved_model.save._AugmentedGraphView.add_object"], "saved_model.signature_serialization.find_function_to_export": ["saved_model.signature_serialization._valid_signature", "saved_model.signature_serialization._get_signature", "<builtin>.len"], "saved_model.signature_serialization.canonicalize_signatures": ["tensor_spec.TensorSpec.from_tensor", "framework.tensor_spec.TensorSpec", "<builtin>.ValueError", "<builtin>.filter", "<builtin>.isinstance", "absl.logging.warning", "<builtin>.len", "saved_model.signature_serialization._get_signature", "util.nest.flatten", "saved_model.function_serialization.wrap_cached_variables", "util.compat.as_str", "<builtin>.zip", "saved_model.signature_serialization._validate_inputs", "saved_model.signature_serialization._get_signature_name_changes"], "saved_model.signature_serialization.validate_saveable_view": ["<builtin>.isinstance", "<builtin>.ValueError"], "saved_model.save_context.save_context": ["<builtin>.ValueError", "saved_model.save_context.SaveContext.enter_save_context", "saved_model.save_context.SaveContext.exit_save_context", "saved_model.save_context.in_save_context"], "saved_model.save_context": ["saved_model.save_context.SaveContext.__init__", "contextlib.contextmanager"], "saved_model.save_context.SaveContext.__init__": ["<builtin>.super"], "saved_model.save_context.SaveContext.options": ["<builtin>.ValueError", "saved_model.save_context.SaveContext.in_save_context"], "saved_model.save_context.SaveContext.in_save_context": [], "saved_model.save_context.SaveContext.enter_save_context": [], "saved_model.save_context.SaveContext.exit_save_context": [], "saved_model.save_options": [], "saved_model.save_options.VariablePolicy._save_variable_devices": [], "saved_model.save_options.VariablePolicy._expand_distributed_variables": [], "saved_model.save_options.VariablePolicy.from_obj": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.ValueError"], "saved_model.save_options.SaveOptions.__init__": ["saved_model.save_options.VariablePolicy.from_obj", "saved_model.save_options._validate_namespace_whitelist", "<builtin>.dict"], "saved_model.save_options._validate_namespace_whitelist": ["<builtin>.TypeError", "<builtin>.type", "util.compat.as_str", "<builtin>.isinstance", "<builtin>.ValueError"], "saved_model.signature_constants": ["util.tf_export.tf_export"], "saved_model.signature_def_utils": [], "saved_model.signature_def_utils_impl": ["util.deprecation.deprecated_endpoints", "util.tf_export.tf_export"], "saved_model.signature_def_utils_impl.build_signature_def": ["protobuf.meta_graph_pb2.SignatureDef"], "saved_model.signature_def_utils_impl.regression_signature_def": ["<builtin>.ValueError", "saved_model.utils_impl.build_tensor_info", "saved_model.signature_def_utils_impl.build_signature_def", "<builtin>.isinstance"], "saved_model.utils_impl.build_tensor_info": ["saved_model.utils_impl.build_tensor_info_internal", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "saved_model.signature_def_utils_impl.classification_signature_def": ["<builtin>.ValueError", "saved_model.utils_impl.build_tensor_info", "saved_model.signature_def_utils_impl.build_signature_def", "<builtin>.isinstance"], "saved_model.signature_def_utils_impl.predict_signature_def": ["<builtin>.ValueError", "saved_model.utils_impl.build_tensor_info", "saved_model.signature_def_utils_impl.build_signature_def"], "saved_model.signature_def_utils_impl.supervised_train_signature_def": ["saved_model.signature_def_utils_impl._supervised_signature_def"], "saved_model.signature_def_utils_impl._supervised_signature_def": ["<builtin>.ValueError", "saved_model.utils_impl.build_tensor_info", "saved_model.signature_def_utils_impl.build_signature_def"], "saved_model.signature_def_utils_impl.supervised_eval_signature_def": ["saved_model.signature_def_utils_impl._supervised_signature_def"], "saved_model.signature_def_utils_impl.is_valid_signature": ["saved_model.signature_def_utils_impl._is_valid_classification_signature", "saved_model.signature_def_utils_impl._is_valid_predict_signature", "saved_model.signature_def_utils_impl._is_valid_regression_signature"], "saved_model.signature_def_utils_impl._is_valid_classification_signature": ["<builtin>.set"], "saved_model.signature_def_utils_impl._is_valid_regression_signature": ["<builtin>.set"], "saved_model.signature_def_utils_impl._is_valid_predict_signature": [], "saved_model.signature_def_utils_impl.op_signature_def": ["saved_model.signature_def_utils_impl.build_signature_def", "saved_model.utils_impl.build_tensor_info_from_op"], "saved_model.utils_impl.build_tensor_info_from_op": ["framework.tensor_shape.unknown_shape", "protobuf.meta_graph_pb2.TensorInfo", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "saved_model.signature_def_utils_impl.load_op_from_signature_def": ["framework.errors.NotFoundError", "saved_model.utils_impl.get_element_from_tensor_info"], "saved_model.utils_impl.get_element_from_tensor_info": ["framework.ops.get_default_graph", "framework.ops.prepend_name_scope"], "saved_model.signature_serialization": ["saved_model.revived_types.register_revived_type", "saved_model.revived_types.VersionedTypeRegistration"], "saved_model.signature_serialization._get_signature": ["<builtin>.isinstance"], "saved_model.signature_serialization._valid_signature": ["saved_model.signature_serialization._normalize_outputs", "saved_model.signature_serialization._validate_inputs"], "saved_model.signature_serialization._validate_inputs": ["<builtin>.isinstance", "<builtin>.any", "<builtin>.ValueError", "util.nest.flatten"], "saved_model.signature_serialization._normalize_outputs": ["<builtin>.enumerate", "<builtin>.hasattr", "<builtin>.ValueError", "<builtin>.isinstance", "util.compat.as_str_any"], "saved_model.signature_serialization._get_signature_name_changes": ["util.compat.as_str", "<builtin>.zip"], "saved_model.signature_serialization.canonicalize_signatures.signature_wrapper": ["saved_model.signature_serialization._normalize_outputs"], "saved_model.signature_serialization.canonicalize_signatures.<lambda1>": ["<builtin>.isinstance"], "saved_model.signature_serialization._SignatureMap.__init__": [], "saved_model.signature_serialization._SignatureMap._add_signature": [], "saved_model.signature_serialization._SignatureMap.__getitem__": [], "saved_model.signature_serialization._SignatureMap.__iter__": ["<builtin>.iter"], "saved_model.signature_serialization._SignatureMap.__len__": ["<builtin>.len"], "saved_model.signature_serialization._SignatureMap.__repr__": [], "saved_model.signature_serialization._SignatureMap._list_functions_for_serialization": ["collections_abc.Mapping.items", "<builtin>.isinstance"], "collections_abc.Mapping.items": [], "saved_model.signature_serialization.<lambda1>": ["saved_model.signature_serialization._SignatureMap.__init__", "<builtin>.isinstance"], "saved_model.signature_serialization.<list1>.<lambda1>": [], "saved_model.simple_save": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "saved_model.simple_save.simple_save": ["framework.ops.get_collection", "saved_model.builder.SavedModelBuilder", "saved_model.signature_def_utils.predict_signature_def"], "saved_model.signature_def_utils.predict_signature_def": [], "saved_model.tag_constants": ["util.tf_export.tf_export"], "saved_model.utils": ["utils.tf_contextlib.contextmanager", "<builtin>.globals", "saved_model.utils.SaveOptionsContext.__init__", "utils.generic_utils.LazyLoader"], "saved_model.utils_impl": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "saved_model.utils_impl._build_composite_tensor_info_internal": ["saved_model.utils_impl.build_tensor_info_internal", "util.nest.flatten", "saved_model.nested_structure_coder.StructureCoder", "protobuf.meta_graph_pb2.TensorInfo"], "protobuf.meta_graph_pb2.TensorInfo": [], "saved_model.utils_impl.get_tensor_from_tensor_info": ["framework.ops.get_default_graph", "saved_model.nested_structure_coder.StructureCoder", "util.nest.pack_sequence_as", "<builtin>.ValueError", "framework.sparse_tensor.SparseTensor", "saved_model.utils_impl.get_tensor_from_tensor_info._get_tensor", "protobuf.struct_pb2.StructuredValue"], "saved_model.utils_impl.get_tensor_from_tensor_info._get_tensor": ["framework.ops.prepend_name_scope"], "saved_model.utils_impl.get_variables_dir": ["os.path.join", "util.compat.as_text"], "saved_model.utils_impl.get_saved_model_pbtxt_path": ["util.compat.as_bytes", "util.compat.path_to_str", "os.path.join"], "saved_model.utils_impl.get_saved_model_pb_path": ["util.compat.as_bytes", "util.compat.path_to_str", "os.path.join"], "saved_model.utils_impl.byte_swap_tensor_content": ["<builtin>.int", "<builtin>.range", "<builtin>.len"], "summary.plugin_asset": [], "summary.plugin_asset.get_plugin_asset": ["<builtin>.isinstance", "<builtin>.len", "framework.ops.get_default_graph", "<builtin>.ValueError"], "summary.plugin_asset.get_all_plugin_assets": ["<builtin>.len", "framework.ops.get_default_graph", "<builtin>.ValueError"], "summary.plugin_asset.PluginAsset": ["abc.abstractmethod"], "summary.plugin_asset.PluginAsset.assets": ["<builtin>.NotImplementedError"], "summary.summary": ["util.tf_export.tf_export"], "summary.summary.scalar": ["distribute.summary_op_util.skip_summary", "framework.constant_op.constant", "ops.summary_op_util.summary_scope", "ops.gen_logging_ops.scalar_summary", "ops.summary_op_util.collect"], "summary.summary.audio": ["distribute.summary_op_util.skip_summary", "ops.gen_logging_ops.audio_summary_v2", "framework.constant_op.constant", "ops.summary_op_util.summary_scope", "framework.ops.convert_to_tensor", "ops.summary_op_util.collect"], "summary.summary.text": ["summary_pb2.SummaryMetadata.PluginData", "summary.summary.tensor_summary", "framework.summary_pb2.SummaryMetadata", "<builtin>.ValueError"], "summary_pb2.SummaryMetadata.PluginData": [], "summary.summary.tensor_summary": ["distribute.summary_op_util.skip_summary", "ops.gen_logging_ops.tensor_summary_v2", "framework.constant_op.constant", "ops.summary_op_util.summary_scope", "framework.summary_pb2.SummaryMetadata", "ops.summary_op_util.collect"], "ops.gen_logging_ops.tensor_summary_v2": [], "summary.summary.merge": ["distribute.summary_op_util.skip_summary", "framework.ops.name_scope", "ops.gen_logging_ops.merge_summary", "framework.constant_op.constant", "eager.context.executing_eagerly", "ops.summary_op_util.clean_tag", "ops.summary_op_util.collect", "<builtin>.RuntimeError"], "summary.summary.get_summary_description": ["framework.summary_pb2.SummaryDescription", "util.compat.as_str_any", "<builtin>.ValueError", "protobuf.json_format.Parse"], "framework.summary_pb2.SummaryDescription": [], "protobuf.json_format.Parse": [], "summary.summary_iterator": ["util.tf_export.tf_export"], "summary.summary_iterator._SummaryIterator.__init__": ["io.tf_record.tf_record_iterator"], "summary.summary_iterator._SummaryIterator.__iter__": [], "summary.summary_iterator._SummaryIterator.__next__": ["event_pb2.Event.FromString", "summary.summary_iterator._SummaryIterator.__next__"], "event_pb2.Event.FromString": [], "summary.summary_iterator.summary_iterator": ["summary.summary_iterator._SummaryIterator.__init__"], "tools.freeze_graph": ["tools.freeze_graph.run_main"], "tools.freeze_graph._has_no_variables": [], "tools.freeze_graph.freeze_graph_with_def_protos": ["training.saver.Saver", "saved_model.loader.load", "re.search", "training.checkpoint_management.checkpoint_exists", "framework.importer.import_graph_def", "framework.graph_util.convert_variables_to_constants", "training.saver.import_meta_graph", "client.session.Session", "platform.gfile.GFile", "training.py_checkpoint_reader.NewCheckpointReader", "<builtin>.ValueError", "tools.freeze_graph._has_no_variables", "<builtin>.any"], "training.checkpoint_management.checkpoint_exists": ["training.checkpoint_management.checkpoint_exists_internal"], "training.saver.import_meta_graph": ["training.saver._import_meta_graph_with_return_elements"], "tools.freeze_graph._parse_input_graph_proto": ["protobuf.text_format.Merge", "framework.graph_pb2.GraphDef", "platform.gfile.Exists", "platform.gfile.GFile", "<builtin>.IOError"], "tools.freeze_graph._parse_input_meta_graph_proto": ["protobuf.text_format.Merge", "platform.gfile.Exists", "platform.gfile.GFile", "<builtin>.print", "protobuf.meta_graph_pb2.MetaGraphDef", "<builtin>.IOError"], "tools.freeze_graph._parse_input_saver_proto": ["protobuf.text_format.Merge", "platform.gfile.Exists", "platform.gfile.GFile", "protobuf.saver_pb2.SaverDef", "<builtin>.IOError"], "protobuf.saver_pb2.SaverDef": [], "tools.freeze_graph.freeze_graph": ["tools.freeze_graph.freeze_graph_with_def_protos", "tools.freeze_graph._parse_input_graph_proto", "tools.freeze_graph._parse_input_saver_proto", "tools.saved_model_utils.get_meta_graph_def", "tools.freeze_graph._parse_input_meta_graph_proto"], "tools.saved_model_utils.get_meta_graph_def": ["tools.saved_model_utils.read_saved_model", "<builtin>.set", "<builtin>.RuntimeError"], "tools.freeze_graph.main": ["<builtin>.ValueError", "tools.freeze_graph.freeze_graph"], "tools.freeze_graph.run_main": ["argparse.ArgumentParser", "absl.app.run"], "tools.freeze_graph.run_main.<lambda1>": [], "tools.freeze_graph.run_main.<lambda2>": ["tools.freeze_graph.main"], "tools.import_pb_to_tensorboard": ["argparse.ArgumentParser", "absl.app.run"], "tools.import_pb_to_tensorboard.import_to_tensorboard": ["framework.ops.Graph", "framework.importer.import_graph_def", "client.session.Session", "summary.summary.FileWriter", "tools.saved_model_utils.get_meta_graph_def", "<builtin>.print"], "tools.import_pb_to_tensorboard.main": ["tools.import_pb_to_tensorboard.import_to_tensorboard"], "tools.import_pb_to_tensorboard.<lambda1>": [], "tools.inspect_checkpoint": ["absl.app.run", "argparse.ArgumentParser"], "tools.inspect_checkpoint._count_total_params": ["numpy.sum", "re.compile", "numpy.prod", "<builtin>.print"], "tools.inspect_checkpoint.print_tensors_in_checkpoint_file": ["training.py_checkpoint_reader.NewCheckpointReader", "tools.inspect_checkpoint._count_total_params", "<builtin>.any", "<builtin>.sorted", "<builtin>.str", "<builtin>.print"], "tools.inspect_checkpoint.parse_numpy_printoption": ["numpy.set_printoptions", "numpy.get_printoptions", "platform.flags.BooleanParser", "argparse.ArgumentTypeError", "<builtin>.len", "<builtin>.type"], "numpy.get_printoptions": [], "platform.flags.BooleanParser": [], "tools.inspect_checkpoint.main": ["tools.inspect_checkpoint.print_tensors_in_checkpoint_file", "sys.exit", "<builtin>.print"], "tools.inspect_checkpoint.<lambda1>": [], "tools.make_aot_compile_models": ["absl.flags.DEFINE_string", "absl.app.run", "absl.flags.mark_flag_as_required"], "tools.make_aot_compile_models.create_large_matmul_savedmodel": ["os.path.join", "eager.def_function.function", "tracking.tracking.AutoTrackable", "saved_model.save.save", "<builtin>.open", "ops.array_ops.zeros"], "tools.make_aot_compile_models.create_large_matmul_savedmodel.<lambda1>": ["ops.math_ops.matmul"], "tools.make_aot_compile_models.create_small_matmul_savedmodel": ["os.path.join", "eager.def_function.function", "tracking.tracking.AutoTrackable", "saved_model.save.save", "<builtin>.open", "ops.array_ops.zeros"], "tools.make_aot_compile_models.create_small_matmul_savedmodel.<lambda1>": ["ops.math_ops.matmul"], "tools.make_aot_compile_models.main": ["tools.make_aot_compile_models.create_small_matmul_savedmodel", "tools.make_aot_compile_models.create_large_matmul_savedmodel"], "tools.module_util": [], "tools.module_util.get_parent_dir": ["os.path.dirname", "os.path.abspath", "os.path.join"], "tools.module_util.get_parent_dir_for_name": ["os.path.dirname", "os.path.join", "importlib.util.find_spec", "imp.find_module"], "imp.find_module": [], "importlib.util.find_spec": [], "tools.optimize_for_inference": ["tools.optimize_for_inference.parse_args", "absl.app.run"], "tools.optimize_for_inference.main": ["framework.graph_pb2.GraphDef", "platform.gfile.Exists", "tools.optimize_for_inference._parse_placeholder_types", "os.path.dirname", "platform.gfile.GFile", "framework.graph_io.write_graph", "platform.gfile.Open", "tools.optimize_for_inference_lib.optimize_for_inference", "os.path.basename", "<builtin>.print", "protobuf.text_format.Merge"], "tools.optimize_for_inference._parse_placeholder_types": ["<builtin>.int", "<builtin>.len"], "tools.optimize_for_inference_lib.optimize_for_inference": ["tools.optimize_for_inference_lib.fold_batch_norms", "framework.graph_util.remove_training_nodes", "tools.optimize_for_inference_lib.fuse_resize_and_conv", "tools.optimize_for_inference_lib.ensure_graph_is_valid", "tools.strip_unused_lib.strip_unused"], "tools.optimize_for_inference.parse_args": ["<builtin>.str", "argparse.ArgumentParser"], "tools.optimize_for_inference.parse_args.<lambda1>": [], "tools.optimize_for_inference_lib": [], "tools.optimize_for_inference_lib.ensure_graph_is_valid": ["tools.optimize_for_inference_lib.node_name_from_input", "<builtin>.ValueError"], "tools.strip_unused_lib.strip_unused": ["framework.node_def_pb2.NodeDef", "framework.graph_pb2.GraphDef", "<builtin>.isinstance", "<builtin>.ValueError", "framework.attr_value_pb2.AttrValue", "framework.graph_util.extract_sub_graph", "<builtin>.KeyError"], "framework.graph_util.remove_training_nodes": [], "tools.optimize_for_inference_lib.fold_batch_norms": ["platform.tf_logging.warning", "tools.optimize_for_inference_lib.values_from_const", "framework.node_def_pb2.NodeDef", "<builtin>.ValueError", "tools.optimize_for_inference_lib.scale_after_normalization", "numpy.nditer", "framework.attr_value_pb2.AttrValue", "numpy.vectorize", "<builtin>.str", "framework.tensor_util.make_tensor_proto", "framework.graph_pb2.GraphDef", "<builtin>.enumerate", "numpy.copy", "tools.optimize_for_inference_lib.node_from_map"], "tools.optimize_for_inference_lib.fuse_resize_and_conv": ["tools.optimize_for_inference_lib.node_name_from_input", "collections.defaultdict", "framework.node_def_pb2.NodeDef", "<builtin>.ValueError", "framework.tensor_util.make_tensor_proto", "framework.attr_value_pb2.AttrValue", "framework.graph_pb2.GraphDef", "tools.optimize_for_inference_lib.node_from_map"], "tools.optimize_for_inference_lib.node_name_from_input": ["re.search"], "tools.optimize_for_inference_lib.node_from_map": ["tools.optimize_for_inference_lib.node_name_from_input", "<builtin>.ValueError"], "tools.optimize_for_inference_lib.values_from_const": ["<builtin>.ValueError", "framework.tensor_util.MakeNdarray"], "tools.optimize_for_inference_lib.scale_after_normalization": [], "numpy.copy": [], "numpy.nditer": [], "tools.print_selective_registration_header": ["absl.app.run", "argparse.ArgumentParser"], "tools.print_selective_registration_header.main": ["tools.selective_registration_header_lib.get_header", "<builtin>.print"], "tools.selective_registration_header_lib.get_header": ["tools.selective_registration_header_lib.get_header_from_ops_and_kernels", "<builtin>.print", "tools.selective_registration_header_lib.get_ops_and_kernels"], "tools.print_selective_registration_header.<lambda1>": [], "tools.saved_model_aot_compile": ["<builtin>.ImportError", "<builtin>.str"], "tools.saved_model_aot_compile._shlex_quote": ["shlex.quote", "pipes.quote"], "pipes.quote": [], "shlex.quote": [], "tools.saved_model_aot_compile._sysconfig_module": ["platform.sysconfig.get_include"], "tools.saved_model_aot_compile._parse_tensor_name": ["<builtin>.int"], "tools.saved_model_aot_compile._xla_makefile_string": ["tools.saved_model_aot_compile._sysconfig_module", "tools.saved_model_aot_compile._shlex_quote", "os.path.realpath", "os.path.split", "platform.tf_logging.error", "platform.sysconfig.get_include", "os.readlink", "os.path.join", "os.path.islink", "platform.test.test_src_dir_path", "os.path.dirname", "os.path.exists"], "os.path.islink": [], "os.readlink": [], "os.path.realpath": [], "platform.test.test_src_dir_path": [], "tools.saved_model_aot_compile._get_variable_nodes_from_graph_def": ["collections.defaultdict", "<builtin>.list", "<builtin>.set", "<builtin>.dict"], "tools.saved_model_aot_compile._get_variable_nodes_from_graph_def.<lambda1>": [], "tools.saved_model_aot_compile._prune_removed_feed_nodes": ["<builtin>.set", "platform.tf_logging.warn", "protobuf.meta_graph_pb2.SignatureDef", "tools.saved_model_aot_compile._parse_tensor_name"], "tools.saved_model_aot_compile.aot_compile_cpu_meta_graph_def": ["<builtin>.list", "io.file_io.FileIO", "framework.ops.Graph", "tools.saved_model_aot_compile._optimize_graph", "os.environ.get", "tools.saved_model_aot_compile._prune_removed_feed_nodes", "<builtin>.ValueError", "platform.test.get_temp_dir", "platform.tf_logging.info", "tools.saved_model_aot_compile._replace_input_placeholders_with_default_values", "framework.graph_util.convert_variables_to_constants", "<builtin>.set", "tools.saved_model_aot_compile._signature_to_tf2xla_config", "re.sub", "training.saver.import_meta_graph", "platform.tf_logging.get_verbosity", "os.path.dirname", "client.session.Session", "tools.saved_model_aot_compile._parse_tensor_name", "python._pywrap_tfcompile.Compile", "io.file_io.recursive_create_dir", "tools.saved_model_aot_compile._shlex_quote", "tools.saved_model_aot_compile._xla_makefile_string", "os.path.join", "<builtin>.str", "tools.saved_model_aot_compile._get_variable_nodes_from_graph_def"], "tools.saved_model_aot_compile._replace_input_placeholders_with_default_values": ["<builtin>.list", "<builtin>.set", "<builtin>.RuntimeError", "framework.ops.Graph", "<builtin>.ValueError", "framework.tensor_shape.TensorShape", "<builtin>.dict", "platform.tf_logging.info", "tools.saved_model_aot_compile._parse_tensor_name", "ops.array_ops.zeros"], "tools.saved_model_aot_compile._optimize_graph": ["<builtin>.list", "protobuf.config_pb2.ConfigProto", "grappler.tf_optimizer.OptimizeGraph", "copy.deepcopy", "protobuf.meta_graph_pb2.CollectionDef"], "tools.saved_model_aot_compile._signature_to_tf2xla_config": ["<builtin>.int", "tf2xla.tf2xla_pb2.Fetch", "tf2xla.tf2xla_pb2.Feed", "tf2xla.tf2xla_pb2.TensorId", "tf2xla.tf2xla_pb2.Config", "tools.saved_model_aot_compile._parse_tensor_name", "tf2xla.tf2xla_pb2.Variable"], "python._pywrap_tfcompile.Compile": [], "tf2xla.tf2xla_pb2.Config": [], "tf2xla.tf2xla_pb2.TensorId": [], "tf2xla.tf2xla_pb2.Feed": [], "tf2xla.tf2xla_pb2.Fetch": [], "tf2xla.tf2xla_pb2.Variable": [], "tools.saved_model_cli": ["sys.exit", "tools.saved_model_cli.main", "<builtin>.set"], "tools.saved_model_cli._show_tag_sets": ["tools.saved_model_utils.get_saved_model_tag_sets", "<builtin>.sorted", "<builtin>.print"], "tools.saved_model_utils.get_saved_model_tag_sets": ["tools.saved_model_utils.read_saved_model", "<builtin>.list"], "tools.saved_model_cli._show_signature_def_map_keys": ["<builtin>.sorted", "<builtin>.print", "tools.saved_model_cli.get_signature_def_map"], "tools.saved_model_cli.get_signature_def_map": ["tools.saved_model_utils.get_meta_graph_def"], "tools.saved_model_cli._get_inputs_tensor_info_from_meta_graph_def": ["<builtin>.ValueError"], "tools.saved_model_cli._get_outputs_tensor_info_from_meta_graph_def": [], "tools.saved_model_cli._show_inputs_outputs": ["tools.saved_model_utils.get_meta_graph_def", "tools.saved_model_cli._get_inputs_tensor_info_from_meta_graph_def", "tools.saved_model_cli._show_inputs_outputs.in_print", "<builtin>.sorted", "tools.saved_model_cli._get_outputs_tensor_info_from_meta_graph_def", "tools.saved_model_cli._print_tensor_info"], "tools.saved_model_cli._show_inputs_outputs.in_print": ["<builtin>.print"], "tools.saved_model_cli._print_tensor_info": ["<builtin>.str", "tools.saved_model_cli._print_tensor_info.in_print", "types_pb2.DataType.items"], "tools.saved_model_cli._show_defined_functions": ["<builtin>.enumerate", "saved_model.load.load", "tools.saved_model_utils.read_saved_model", "saved_model.save._AugmentedGraphView", "tools.saved_model_cli._print_args", "<builtin>.isinstance", "<builtin>.sorted", "framework.ops.Graph", "<builtin>.print"], "tools.saved_model_utils.read_saved_model": ["protobuf.text_format.Merge", "<builtin>.IOError", "io.file_io.file_exists", "io.file_io.FileIO", "<builtin>.str", "os.path.join", "util.compat.as_bytes", "protobuf.saved_model_pb2.SavedModel"], "saved_model.save._AugmentedGraphView": [], "tools.saved_model_cli._show_defined_functions.<lambda1>": [], "tools.saved_model_cli._show_defined_functions.<lambda2>": [], "tools.saved_model_cli._print_args": ["<builtin>.repr", "tools.saved_model_cli._print_args._maybe_add_quotes", "tools.saved_model_cli._print_args.in_print", "<builtin>.str", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.print", "<builtin>.type"], "tools.saved_model_cli._print_args._maybe_add_quotes": ["<builtin>.str", "<builtin>.isinstance"], "tools.saved_model_cli._print_args.in_print": ["<builtin>.print"], "tools.saved_model_cli._print_tensor_info.in_print": ["<builtin>.print"], "types_pb2.DataType.items": [], "tools.saved_model_cli._show_all": ["tools.saved_model_utils.get_saved_model_tag_sets", "tools.saved_model_cli.get_signature_def_map", "tools.saved_model_cli._show_inputs_outputs", "tools.saved_model_cli._show_defined_functions", "<builtin>.sorted", "<builtin>.print"], "tools.saved_model_cli.get_meta_graph_def": ["tools.saved_model_utils.get_meta_graph_def"], "tools.saved_model_cli.scan_meta_graph_def": ["<builtin>.print", "framework.meta_graph.ops_used_by_graph_def", "<builtin>.set"], "tools.saved_model_cli.run_saved_model_with_feed_dict": ["wrappers.local_cli_wrapper.LocalCLIDebugWrapperSession", "tpu.tpu.initialize_system", "<builtin>.ValueError", "<builtin>.enumerate", "numpy.save", "saved_model.loader.load", "os.makedirs", "client.session.Session", "tools.saved_model_utils.get_meta_graph_def", "os.path.join", "os.path.exists", "<builtin>.RuntimeError", "tools.saved_model_cli._get_inputs_tensor_info_from_meta_graph_def", "os.path.isdir", "<builtin>.sorted", "framework.ops.Graph", "tools.saved_model_cli._get_outputs_tensor_info_from_meta_graph_def", "<builtin>.print"], "tpu.tpu.initialize_system": ["framework.ops.control_dependencies", "ops.tpu_ops.configure_distributed_tpu", "framework.ops.device", "tpu.tpu._tpu_system_device_name", "ops.tpu_ops.configure_tpu_embedding", "ops.array_ops.identity"], "tools.saved_model_cli.preprocess_inputs_arg_string": ["re.match", "<builtin>.RuntimeError", "<builtin>.filter"], "tools.saved_model_cli.preprocess_input_exprs_arg_string": ["<builtin>.eval", "<builtin>.RuntimeError", "<builtin>.filter"], "tools.saved_model_cli.preprocess_input_examples_arg_string": ["<builtin>.ValueError", "tools.saved_model_cli.preprocess_input_exprs_arg_string", "tools.saved_model_cli._create_example_string", "<builtin>.isinstance", "<builtin>.type"], "tools.saved_model_cli._create_example_string": ["<builtin>.type", "<builtin>.ValueError", "<builtin>.isinstance", "example.example_pb2.Example"], "example.example_pb2.Example": [], "tools.saved_model_cli.load_inputs_from_input_arg_string": ["platform.tf_logging.warn", "tools.saved_model_cli.preprocess_input_exprs_arg_string", "<builtin>.RuntimeError", "numpy.load", "io.file_io.FileIO", "<builtin>.isinstance", "tools.saved_model_cli.preprocess_input_examples_arg_string", "<builtin>.len", "tools.saved_model_cli.preprocess_inputs_arg_string"], "tools.saved_model_cli.show": ["tools.saved_model_cli._show_inputs_outputs", "tools.saved_model_cli._show_tag_sets", "tools.saved_model_cli._show_all", "tools.saved_model_cli._show_signature_def_map_keys"], "tools.saved_model_cli.run": ["<builtin>.AttributeError", "tools.saved_model_cli.load_inputs_from_input_arg_string", "tools.saved_model_cli.run_saved_model_with_feed_dict"], "tools.saved_model_cli.scan": ["tools.saved_model_utils.read_saved_model", "tools.saved_model_utils.get_meta_graph_def", "tools.saved_model_cli.scan_meta_graph_def"], "tools.saved_model_cli.convert_with_tensorrt": ["tensorrt.trt_convert.TrtGraphConverterV2", "tensorrt.trt_convert.create_inference_graph", "trt_convert.DEFAULT_TRT_CONVERSION_PARAMS._replace", "<builtin>.RuntimeError"], "trt_convert.DEFAULT_TRT_CONVERSION_PARAMS._replace": [], "tensorrt.trt_convert.TrtGraphConverterV2": [], "tools.saved_model_cli.aot_compile_cpu": ["tools.saved_model_aot_compile.aot_compile_cpu_meta_graph_def", "os.path.join", "tools.saved_model_utils.get_meta_graph_def"], "tools.saved_model_cli.add_show_subparser": [], "tools.saved_model_cli.add_run_subparser": [], "tools.saved_model_cli.add_scan_subparser": [], "tools.saved_model_cli.add_convert_subparser": [], "tools.saved_model_cli.add_aot_compile_cpu_subparser": [], "tools.saved_model_cli.create_parser": ["tools.saved_model_cli.add_run_subparser", "argparse.ArgumentParser", "tools.saved_model_cli.add_show_subparser", "tools.saved_model_cli.add_convert_subparser", "tools.saved_model_cli.add_scan_subparser", "tools.saved_model_cli.add_aot_compile_cpu_subparser"], "tools.saved_model_cli.main": ["platform.tf_logging.set_verbosity", "tools.saved_model_cli.create_parser", "<builtin>.hasattr"], "tools.saved_model_utils": [], "tools.selective_registration_header_lib": ["<builtin>.frozenset", "<builtin>.len"], "tools.selective_registration_header_lib._get_ops_from_ops_list": ["json.loads", "platform.gfile.GFile", "<builtin>.Exception", "<builtin>.set"], "tools.selective_registration_header_lib._get_ops_from_graphdef": ["util._pywrap_kernel_registry.TryFindKernelClass", "<builtin>.str", "<builtin>.print", "<builtin>.set"], "util._pywrap_kernel_registry.TryFindKernelClass": [], "tools.selective_registration_header_lib.get_ops_and_kernels": ["protobuf.text_format.Parse", "<builtin>.list", "framework.graph_pb2.GraphDef", "platform.gfile.GFile", "tools.selective_registration_header_lib._get_ops_from_ops_list", "<builtin>.set", "<builtin>.sorted", "graph_pb2.GraphDef.FromString", "platform.tf_logging.info", "tools.selective_registration_header_lib._get_ops_from_graphdef"], "protobuf.text_format.Parse": [], "tools.selective_registration_header_lib.get_header_from_ops_and_kernels": ["tools.selective_registration_header_lib.get_header_from_ops_and_kernels.append", "<builtin>.sorted", "os.path.split", "<builtin>.set"], "tools.selective_registration_header_lib.get_header_from_ops_and_kernels.append": [], "tools.strip_unused": ["absl.app.run", "argparse.ArgumentParser"], "tools.strip_unused.main": ["tools.strip_unused_lib.strip_unused_from_files"], "tools.strip_unused_lib.strip_unused_from_files": ["platform.gfile.GFile", "<builtin>.print", "framework.graph_pb2.GraphDef", "protobuf.text_format.MessageToString", "tools.strip_unused_lib.strip_unused", "<builtin>.len", "platform.gfile.Exists", "protobuf.text_format.Merge"], "tools.strip_unused.<lambda1>": [], "tools.strip_unused_lib": [], "tpu.api": [], "tpu.async_checkpoint": [], "tpu.async_checkpoint.AsyncCheckpointSaverHook.__init__": ["<builtin>.len", "training.basic_session_run_hooks.SecondOrStepTimer", "os.path.join", "platform.tf_logging.info", "<builtin>.ValueError"], "training.basic_session_run_hooks.SecondOrStepTimer": [], "tpu.async_checkpoint.AsyncCheckpointSaverHook._set_steps_per_run": [], "tpu.async_checkpoint.AsyncCheckpointSaverHook.begin": ["training.training_util._get_or_create_global_step_read", "<builtin>.RuntimeError", "summary_io.SummaryWriterCache.get"], "summary_io.SummaryWriterCache.get": [], "training.training_util._get_or_create_global_step_read": ["training.training_util._get_global_step_read", "framework.ops.add_to_collection", "<builtin>.isinstance", "training.training_util.get_global_step", "framework.ops.get_default_graph"], "tpu.async_checkpoint.AsyncCheckpointSaverHook.after_create_session": ["framework.meta_graph.create_meta_graph_def", "tpu.async_checkpoint.AsyncCheckpointSaverHook._get_saver", "tpu.async_checkpoint.AsyncCheckpointSaverHook._save", "framework.ops.get_default_graph", "threading.Thread"], "tpu.async_checkpoint.AsyncCheckpointSaverHook.after_create_session._write_graph_fn": ["framework.ops.get_default_graph", "training.training_util.write_graph"], "training.training_util.write_graph": [], "tpu.async_checkpoint.AsyncCheckpointSaverHook._get_saver": ["<builtin>.len", "<builtin>.RuntimeError", "framework.ops.get_collection"], "tpu.async_checkpoint.AsyncCheckpointSaverHook._save": ["tpu.async_checkpoint.AsyncCheckpointSaverHook._save._save_fn", "threading.Thread", "platform.tf_logging.info"], "tpu.async_checkpoint.AsyncCheckpointSaverHook.before_run": ["training.session_run_hook.SessionRunArgs"], "tpu.async_checkpoint.AsyncCheckpointSaverHook.after_run": ["platform.tf_logging.info", "tpu.async_checkpoint.AsyncCheckpointSaverHook._save"], "tpu.async_checkpoint.AsyncCheckpointSaverHook.end": ["platform.tf_logging.info", "tpu.async_checkpoint.AsyncCheckpointSaverHook._save"], "tpu.async_checkpoint.AsyncCheckpointSaverHook._save._save_fn": ["platform.tf_logging.info", "util.event_pb2.SessionLog", "time.time", "tpu.async_checkpoint.AsyncCheckpointSaverHook._get_saver"], "util.event_pb2.SessionLog": [], "tpu.bfloat16": ["util.tf_contextlib.contextmanager", "util.tf_export.tf_export"], "tpu.bfloat16._get_custom_getter": [], "tpu.bfloat16._get_custom_getter.inner_custom_getter": ["ops.math_ops.cast"], "tpu.bfloat16.bfloat16_scope": ["ops.variable_scope.variable_scope", "tpu.bfloat16._get_custom_getter"], "tpu.datasets": [], "tpu.datasets._TextLineDataset": ["ops.readers.TextLineDataset"], "tpu.datasets._TFRecordDataset": ["ops.readers.TFRecordDataset"], "tpu.datasets.StreamingFilesDataset": ["framework.ops.device", "dataset_ops.Dataset.range", "ops.interleave_ops.parallel_interleave", "<builtin>.type", "<builtin>.ValueError", "<builtin>.list", "<builtin>.callable", "dataset_ops.Dataset.list_files", "framework.function.Defun", "<builtin>.isinstance", "ops.dataset_ops.make_one_shot_iterator"], "tpu.datasets.StreamingFilesDataset.LoadingFunc": ["ops.dataset_ops.get_legacy_output_types", "iterator_ops.Iterator.from_string_handle", "ops.dataset_ops.get_legacy_output_shapes"], "tpu.datasets.StreamingFilesDataset.MapFn": ["<builtin>.ValueError", "ops.dataset_ops.get_legacy_output_types", "ops.functional_ops.remote_call", "<builtin>.len", "<builtin>.isinstance"], "tpu.device_assignment": [], "tpu.device_assignment._compute_task_and_cores_to_replicas": ["<builtin>.sorted", "<builtin>.set", "six.moves.xrange"], "tpu.device_assignment.DeviceAssignment.__init__": ["numpy.asarray", "<builtin>.isinstance", "<builtin>.type", "tpu.device_assignment._compute_task_and_cores_to_replicas", "<builtin>.ValueError"], "tpu.device_assignment.DeviceAssignment.topology": [], "tpu.device_assignment.DeviceAssignment.num_cores_per_replica": [], "tpu.device_assignment.DeviceAssignment.num_replicas": [], "tpu.device_assignment.DeviceAssignment.core_assignment": [], "tpu.device_assignment.DeviceAssignment.coordinates": ["<builtin>.tuple"], "tpu.device_assignment.DeviceAssignment.lookup_replicas": ["<builtin>.ValueError"], "tpu.device_assignment.DeviceAssignment.tpu_ordinal": ["tpu.device_assignment.DeviceAssignment.coordinates"], "tpu.device_assignment.DeviceAssignment.host_device": ["tpu.device_assignment.DeviceAssignment.coordinates"], "tpu.device_assignment.DeviceAssignment.tpu_device": ["tpu.device_assignment.DeviceAssignment.coordinates"], "tpu.device_assignment.DeviceAssignment.build": ["tpu.device_assignment.device_assignment"], "tpu.device_assignment.device_assignment": ["numpy.asarray", "<builtin>.isinstance", "<builtin>.any", "math.ceil", "<builtin>.sorted", "numpy.arange", "<builtin>.min", "numpy.concatenate", "numpy.prod", "numpy.meshgrid", "tpu.device_assignment.device_assignment.ceil_of_ratio", "<builtin>.int", "tpu.topology.Topology", "<builtin>.enumerate", "numpy.array", "<builtin>.len", "tpu.device_assignment.DeviceAssignment.__init__", "<builtin>.range", "tpu.device_assignment._ring_3d", "six.moves.xrange", "<builtin>.type", "numpy.full", "<builtin>.ValueError"], "tpu.device_assignment._open_ring_2d": ["<builtin>.range"], "tpu.device_assignment._ring_3d": ["platform.tf_logging.warning", "<builtin>.reversed", "tpu.device_assignment._open_ring_2d", "<builtin>.range"], "tpu.topology.Topology": [], "tpu.device_assignment.device_assignment.ceil_of_ratio": [], "numpy.meshgrid": [], "tpu.error_handling": [], "tpu.feature_column": [], "tpu.feature_column.embedding_column": ["tpu.feature_column._TPUEmbeddingColumn.__init__", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.type", "ops.init_ops.truncated_normal_initializer", "math.sqrt", "<builtin>.TypeError"], "tpu.feature_column.embedding_column._creator": ["feature_column.feature_column._EmbeddingColumnLayer"], "feature_column.feature_column._EmbeddingColumnLayer": [], "tpu.feature_column._TPUEmbeddingColumn.__init__": ["tpu.feature_column._TPUBaseEmbeddingColumn.__init__"], "tpu.feature_column.shared_embedding_columns": ["<builtin>.sorted", "<builtin>.ValueError", "tpu.feature_column._TPUSharedEmbeddingColumn.__init__", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.callable", "<builtin>.type", "ops.init_ops.truncated_normal_initializer", "math.sqrt", "<builtin>.len", "<builtin>.TypeError"], "tpu.feature_column.shared_embedding_columns.<lambda1>": [], "tpu.feature_column._TPUSharedEmbeddingColumn.__init__": ["tpu.feature_column._TPUBaseEmbeddingColumn.__init__"], "tpu.feature_column._TPUBaseEmbeddingColumn.__init__": ["<builtin>.ValueError", "tpu.feature_column._TPUBaseEmbeddingColumn.is_sequence_column"], "tpu.feature_column._TPUBaseEmbeddingColumn.is_sequence_column": ["<builtin>.isinstance"], "tpu.feature_column._TPUBaseEmbeddingColumn.get_combiner": ["<builtin>.NotImplementedError"], "tpu.feature_column._TPUBaseEmbeddingColumn.get_embedding_table_size": ["<builtin>.NotImplementedError"], "tpu.feature_column._TPUBaseEmbeddingColumn.get_feature_key_name": ["<builtin>.NotImplementedError"], "tpu.feature_column._TPUBaseEmbeddingColumn.get_weight_key_name": ["<builtin>.NotImplementedError"], "tpu.feature_column._TPUBaseEmbeddingColumn.get_embedding_var_name": ["<builtin>.NotImplementedError"], "tpu.feature_column._TPUBaseEmbeddingColumn.get_initializer": ["<builtin>.NotImplementedError"], "tpu.feature_column._TPUBaseEmbeddingColumn.is_categorical_column_weighted": ["<builtin>.NotImplementedError"], "tpu.feature_column._TPUBaseEmbeddingColumn.get_max_sequence_length": [], "tpu.feature_column._TPUBaseEmbeddingColumn.get_learning_rate_fn": [], "tpu.feature_column._TPUBaseEmbeddingColumn.get_sequence_length_feature_key_name": ["tpu.feature_column._TPUBaseEmbeddingColumn.get_feature_key_name", "tpu.feature_column._TPUEmbeddingColumn.get_feature_key_name", "tpu.feature_column._TPUSharedEmbeddingColumn.get_feature_key_name", "tpu.feature_column.get_sequence_length_feature_key_name_from_feature_key_name"], "tpu.feature_column._TPUEmbeddingColumn.get_feature_key_name": ["tpu.feature_column._TPUEmbeddingColumn.is_categorical_column_weighted"], "tpu.feature_column._TPUSharedEmbeddingColumn.get_feature_key_name": ["tpu.feature_column._TPUSharedEmbeddingColumn.is_categorical_column_weighted"], "tpu.feature_column.get_sequence_length_feature_key_name_from_feature_key_name": [], "tpu.feature_column._TPUEmbeddingColumn.__new__": ["feature_column._EmbeddingColumn.__new__"], "feature_column._EmbeddingColumn.__new__": [], "tpu.feature_column._TPUEmbeddingColumn.get_combiner": [], "tpu.feature_column._TPUEmbeddingColumn.get_embedding_table_size": [], "tpu.feature_column._TPUEmbeddingColumn.is_categorical_column_weighted": ["<builtin>.isinstance"], "tpu.feature_column._TPUEmbeddingColumn.get_weight_key_name": ["tpu.feature_column._TPUEmbeddingColumn.is_categorical_column_weighted"], "tpu.feature_column._TPUEmbeddingColumn.get_embedding_var_name": [], "tpu.feature_column._TPUEmbeddingColumn.get_initializer": [], "tpu.feature_column._TPUEmbeddingColumn._get_dense_tensor": ["tpu.feature_column._record_variable_scope_and_name", "tpu.tpu.under_tpu_inference_context", "feature_column._EmbeddingColumn._get_dense_tensor", "tpu.feature_column._is_running_on_cpu", "tpu.feature_column._TPUEmbeddingColumn.get_feature_key_name", "tpu.feature_column._TPUEmbeddingColumn.get_embedding_var_name", "tpu.tpu.outside_compilation"], "tpu.tpu.under_tpu_inference_context": ["framework.ops.get_default_graph", "<builtin>.isinstance"], "tpu.feature_column._TPUEmbeddingColumn._get_dense_tensor.host_computation": ["feature_column._EmbeddingColumn._get_dense_tensor"], "feature_column._EmbeddingColumn._get_dense_tensor": [], "tpu.tpu.outside_compilation": ["tpu.tpu.OutsideCompilationV2Context.__init__", "<builtin>.NotImplementedError", "control_flow_ops.ControlFlowContext.Exit", "<builtin>.str", "<builtin>.isinstance", "framework.ops.get_default_graph", "absl.logging.warning", "control_flow_ops.ControlFlowContext.Enter", "tpu.tpu._enclosing_tpu_context_and_graph"], "tpu.feature_column._is_running_on_cpu": ["tpu.tpu_function.get_tpu_context"], "tpu.feature_column._record_variable_scope_and_name": ["ops.variable_scope.get_variable_scope", "framework.ops.get_default_graph", "<builtin>.ValueError"], "tpu.feature_column._TPUEmbeddingColumn._get_sequence_dense_tensor": ["tpu.feature_column._record_variable_scope_and_name", "tpu.tpu.under_tpu_inference_context", "feature_column._SequenceDenseColumn.TensorSequenceLengthPair", "feature_column._EmbeddingColumn._get_sequence_dense_tensor", "tpu.feature_column._is_running_on_cpu", "ops.array_ops.squeeze", "tpu.feature_column._TPUEmbeddingColumn.get_feature_key_name", "tpu.feature_column._TPUEmbeddingColumn.get_embedding_var_name", "tpu.feature_column._TPUBaseEmbeddingColumn.get_sequence_length_feature_key_name", "tpu.tpu.outside_compilation"], "tpu.feature_column._TPUEmbeddingColumn._get_sequence_dense_tensor.host_computation": ["feature_column._EmbeddingColumn._get_sequence_dense_tensor"], "feature_column._EmbeddingColumn._get_sequence_dense_tensor": [], "feature_column._SequenceDenseColumn.TensorSequenceLengthPair": [], "tpu.feature_column._TPUSharedEmbeddingColumn.__new__": ["feature_column._SharedEmbeddingColumn.__new__"], "feature_column._SharedEmbeddingColumn.__new__": [], "tpu.feature_column._TPUSharedEmbeddingColumn.get_combiner": [], "tpu.feature_column._TPUSharedEmbeddingColumn.get_embedding_table_size": [], "tpu.feature_column._TPUSharedEmbeddingColumn.is_categorical_column_weighted": ["<builtin>.isinstance"], "tpu.feature_column._TPUSharedEmbeddingColumn.get_weight_key_name": ["tpu.feature_column._TPUSharedEmbeddingColumn.is_categorical_column_weighted"], "tpu.feature_column._TPUSharedEmbeddingColumn.get_embedding_var_name": [], "tpu.feature_column._TPUSharedEmbeddingColumn.get_initializer": [], "tpu.feature_column._TPUSharedEmbeddingColumn._get_dense_tensor": ["tpu.feature_column._record_variable_scope_and_name", "feature_column._SharedEmbeddingColumn._get_dense_tensor", "tpu.tpu.under_tpu_inference_context", "tpu.feature_column._TPUSharedEmbeddingColumn.get_embedding_var_name", "tpu.feature_column._is_running_on_cpu", "tpu.feature_column._TPUSharedEmbeddingColumn.get_feature_key_name", "tpu.tpu.outside_compilation"], "tpu.feature_column._TPUSharedEmbeddingColumn._get_dense_tensor.host_computation": ["feature_column._SharedEmbeddingColumn._get_dense_tensor"], "feature_column._SharedEmbeddingColumn._get_dense_tensor": [], "tpu.feature_column._TPUSharedEmbeddingColumn._get_sequence_dense_tensor": ["tpu.feature_column._record_variable_scope_and_name", "tpu.tpu.under_tpu_inference_context", "tpu.feature_column._TPUSharedEmbeddingColumn.get_embedding_var_name", "feature_column._SequenceDenseColumn.TensorSequenceLengthPair", "tpu.feature_column._is_running_on_cpu", "tpu.feature_column._TPUSharedEmbeddingColumn.get_feature_key_name", "tpu.tpu.outside_compilation", "tpu.feature_column._TPUBaseEmbeddingColumn.get_sequence_length_feature_key_name", "feature_column._SharedEmbeddingColumn._get_sequence_dense_tensor"], "tpu.feature_column._TPUSharedEmbeddingColumn._get_sequence_dense_tensor.host_computation": ["feature_column._SharedEmbeddingColumn._get_sequence_dense_tensor"], "feature_column._SharedEmbeddingColumn._get_sequence_dense_tensor": [], "tpu.tpu_function.get_tpu_context": [], "tpu.feature_column.split_sequence_columns": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError"], "tpu.feature_column_v2": ["util.tf_export.tf_export"], "tpu.feature_column_v2.embedding_column_v2": ["<builtin>.callable", "ops.init_ops.truncated_normal_initializer", "<builtin>.len", "<builtin>.isinstance", "<builtin>.type", "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.__init__", "<builtin>.ValueError", "math.sqrt", "<builtin>.TypeError", "tpu.feature_column_v2._TPUEmbeddingColumnV2.__init__"], "tpu.feature_column_v2._TPUEmbeddingColumnV2.__init__": ["feature_column._TPUBaseEmbeddingColumn.__init__"], "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.__init__": ["tpu.feature_column_v2._TPUEmbeddingColumnV2.__init__"], "tpu.feature_column_v2.shared_embedding_columns_v2": ["<builtin>.callable", "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__init__", "ops.init_ops.truncated_normal_initializer", "<builtin>.len", "<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2.__init__", "<builtin>.zip", "<builtin>.sorted", "math.sqrt", "<builtin>.TypeError", "feature_column.feature_column_lib.SharedEmbeddingColumnCreator"], "tpu.feature_column_v2.shared_embedding_columns_v2.<lambda1>": [], "feature_column.feature_column_lib.SharedEmbeddingColumnCreator": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__init__": ["feature_column._TPUBaseEmbeddingColumn.__init__"], "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2.__init__": ["tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__init__"], "tpu.feature_column_v2._TPUEmbeddingColumnV2.__new__": ["feature_column_lib.EmbeddingColumn.__new__"], "feature_column_lib.EmbeddingColumn.__new__": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.__getnewargs__": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.__deepcopy__": ["copy.deepcopy", "tpu.feature_column_v2._TPUEmbeddingColumnV2.__getnewargs__", "tpu.feature_column_v2._TPUEmbeddingColumnV2.__init__"], "feature_column._TPUBaseEmbeddingColumn.__init__": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_combiner": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_embedding_table_size": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_feature_key_name": ["tpu.feature_column_v2._TPUEmbeddingColumnV2.is_categorical_column_weighted"], "tpu.feature_column_v2._TPUEmbeddingColumnV2.is_categorical_column_weighted": ["<builtin>.isinstance"], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_weight_key_name": ["tpu.feature_column_v2._TPUEmbeddingColumnV2.is_categorical_column_weighted"], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_embedding_var_name": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_initializer": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2._get_dense_tensor": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_feature_key_name", "feature_column_lib.EmbeddingColumn._get_dense_tensor", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_embedding_var_name", "tpu.tpu.outside_compilation", "tpu.tpu.under_tpu_inference_context", "tpu.feature_column._record_variable_scope_and_name"], "tpu.feature_column_v2._TPUEmbeddingColumnV2._get_dense_tensor.host_computation": ["feature_column_lib.EmbeddingColumn._get_dense_tensor"], "feature_column_lib.EmbeddingColumn._get_dense_tensor": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.create_state": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_embedding_var_name", "tpu.feature_column._record_variable_scope_and_name", "feature_column_lib.EmbeddingColumn.create_state"], "feature_column_lib.EmbeddingColumn.create_state": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_dense_tensor": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_feature_key_name", "feature_column_lib.EmbeddingColumn.get_dense_tensor", "tpu.tpu.outside_compilation", "tpu.tpu.under_tpu_inference_context"], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_dense_tensor.host_computation": ["feature_column_lib.EmbeddingColumn.get_dense_tensor"], "feature_column_lib.EmbeddingColumn.get_dense_tensor": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2._get_sequence_dense_tensor": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_feature_key_name", "ops.array_ops.squeeze", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_embedding_var_name", "feature_column_lib.SequenceDenseColumn.TensorSequenceLengthPair", "tpu.tpu.outside_compilation", "tpu.tpu.under_tpu_inference_context", "feature_column._TPUBaseEmbeddingColumn.get_sequence_length_feature_key_name", "tpu.feature_column._record_variable_scope_and_name", "feature_column_lib.EmbeddingColumn._get_sequence_dense_tensor", "feature_column_lib.EmbeddingColumn.get_sequence_length_feature_key_name"], "tpu.feature_column_v2._TPUEmbeddingColumnV2._get_sequence_dense_tensor.host_computation": ["feature_column_lib.EmbeddingColumn._get_sequence_dense_tensor"], "feature_column_lib.EmbeddingColumn._get_sequence_dense_tensor": [], "feature_column_lib.EmbeddingColumn.get_sequence_length_feature_key_name": [], "feature_column._TPUBaseEmbeddingColumn.get_sequence_length_feature_key_name": [], "feature_column_lib.SequenceDenseColumn.TensorSequenceLengthPair": [], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_sequence_dense_tensor": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_feature_key_name", "ops.array_ops.squeeze", "feature_column_lib.SequenceDenseColumn.TensorSequenceLengthPair", "tpu.tpu.outside_compilation", "tpu.tpu.under_tpu_inference_context", "feature_column._TPUBaseEmbeddingColumn.get_sequence_length_feature_key_name", "feature_column_lib.EmbeddingColumn.get_sequence_dense_tensor"], "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_sequence_dense_tensor.host_computation": ["feature_column_lib.EmbeddingColumn.get_sequence_dense_tensor"], "feature_column_lib.EmbeddingColumn.get_sequence_dense_tensor": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__new__": ["feature_column_lib.SharedEmbeddingColumn.__new__"], "feature_column_lib.SharedEmbeddingColumn.__new__": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__getnewargs__": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__deepcopy__": ["copy.deepcopy", "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__init__", "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__getnewargs__"], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_combiner": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_embedding_table_size": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_feature_key_name": ["tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.is_categorical_column_weighted"], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.is_categorical_column_weighted": ["<builtin>.isinstance"], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_weight_key_name": ["tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.is_categorical_column_weighted"], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_embedding_var_name": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_initializer": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2._get_dense_tensor_internal": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_embedding_var_name", "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_feature_key_name", "feature_column_lib.SharedEmbeddingColumn._get_dense_tensor_internal", "tpu.tpu.outside_compilation", "tpu.tpu.under_tpu_inference_context", "tpu.feature_column._record_variable_scope_and_name"], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2._get_dense_tensor_internal.host_computation": ["feature_column_lib.SharedEmbeddingColumn._get_dense_tensor_internal"], "feature_column_lib.SharedEmbeddingColumn._get_dense_tensor_internal": [], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_sequence_dense_tensor": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2._get_dense_tensor_internal", "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2._get_dense_tensor_internal", "feature_column_lib.SharedEmbeddingColumn.get_sequence_dense_tensor", "feature_column_lib.SequenceDenseColumn.TensorSequenceLengthPair", "tpu.tpu.outside_compilation", "tpu.tpu.under_tpu_inference_context", "feature_column._TPUBaseEmbeddingColumn.get_sequence_length_feature_key_name", "ops.array_ops.squeeze"], "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_sequence_dense_tensor.host_computation": ["feature_column_lib.SharedEmbeddingColumn.get_sequence_dense_tensor"], "feature_column_lib.SharedEmbeddingColumn.get_sequence_dense_tensor": [], "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2._get_dense_tensor_internal": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._check_invalid_cases", "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.get_combiner", "tpu.tpu.outside_compilation", "tpu.tpu.under_tpu_inference_context", "tpu.feature_column_v2.sparse_embedding_aggregate_slice", "<builtin>.super"], "tpu.feature_column_v2.split_sequence_columns_v2": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError"], "tpu.feature_column_v2.sparse_embedding_aggregate_slice": ["ops.math_ops.reduce_sum", "ops.math_ops.maximum", "ops.array_ops.reshape", "<builtin>.ValueError", "framework.ops.name_scope", "ops.embedding_ops.embedding_lookup", "shared_embedding_column_creator.embedding_weights.get_shape"], "shared_embedding_column_creator.embedding_weights.get_shape": [], "tpu.feature_column_v2.pad_sparse_embedding_lookup_indices": ["ops.math_ops.cast", "ops.array_ops.scatter_nd", "ops.array_ops.ones_like", "ops.sparse_ops.sparse_slice"], "tpu.feature_column_v2._check_invalid_cases": ["tpu.tpu.under_tpu_inference_context", "<builtin>.ValueError"], "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.__new__": ["tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.__new__", "tpu.feature_column_v2._TPUEmbeddingColumnV2.__new__"], "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.__deepcopy__": ["tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.__init__", "copy.deepcopy", "tpu.feature_column_v2._TPUEmbeddingColumnV2.__getnewargs__"], "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.create_state": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._check_invalid_cases", "<builtin>.super", "feature_column_lib.EmbeddingColumn.create_state"], "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.get_dense_tensor": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._check_invalid_cases", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_combiner", "tpu.tpu.outside_compilation", "tpu.tpu.under_tpu_inference_context", "tpu.feature_column_v2.sparse_embedding_aggregate_slice", "<builtin>.super"], "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2.get_dense_tensor.host_computation": ["tpu.feature_column_v2.pad_sparse_embedding_lookup_indices"], "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2._get_dense_tensor": ["tpu.feature_column._is_running_on_cpu", "tpu.feature_column_v2._check_invalid_cases", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_combiner", "tpu.feature_column_v2._TPUEmbeddingColumnV2.get_feature_key_name", "ops.variable_scope.get_variable", "tpu.tpu.under_tpu_inference_context", "tpu.tpu.outside_compilation", "tpu.feature_column_v2.sparse_embedding_aggregate_slice", "<builtin>.super"], "tpu.feature_column_v2._TPUDeviceSpecificEmbeddingColumnV2._get_dense_tensor.host_computation": ["tpu.feature_column_v2.pad_sparse_embedding_lookup_indices"], "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2.__new__": ["tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__new__", "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2.__new__"], "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2.__deepcopy__": ["copy.deepcopy", "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2.__init__", "tpu.feature_column_v2._TPUSharedEmbeddingColumnV2.__getnewargs__"], "tpu.feature_column_v2._TPUSharedDeviceSpecificEmbeddingColumnV2._get_dense_tensor_internal.host_computation": ["tpu.feature_column_v2.pad_sparse_embedding_lookup_indices"], "tpu.functional": [], "tpu.preempted_hook": [], "tpu.preempted_hook.CloudTPUPreemptedHook.__init__": [], "tpu.preempted_hook.CloudTPUPreemptedHook.after_create_session": ["threading.Thread.start", "cluster_resolver.tpu_cluster_resolver.is_running_in_gce", "tpu.preempted_hook._TPUPollingThread.__init__"], "cluster_resolver.tpu_cluster_resolver.is_running_in_gce": [], "tpu.preempted_hook._TPUPollingThread.__init__": ["<builtin>.super", "logging.getLogger"], "tpu.preempted_hook.CloudTPUPreemptedHook.end": ["tpu.preempted_hook._TPUPollingThread.stop"], "tpu.preempted_hook._TPUPollingThread.stop": ["threading.Thread.join"], "threading.Thread.join": [], "tpu.preempted_hook._TPUPollingThread.run": ["os._exit", "time.sleep", "platform.tf_logging.warning", "cluster_resolver.tpu_cluster_resolver.is_running_in_gce"], "tpu.session_support": [], "tpu.session_support.CoordinatorResetError.__init__": ["errors.AbortedError.__init__"], "errors.AbortedError.__init__": [], "tpu.session_support._clone_session": ["client.session.Session"], "tpu.session_support.WorkerHeartbeatManager.__init__": [], "tpu.session_support.WorkerHeartbeatManager.from_devices": ["ops.array_ops.placeholder", "ops.tpu_ops.worker_heartbeat", "platform.tf_logging.info", "platform.tf_logging.error", "tpu.session_support.WorkerHeartbeatManager.__init__", "framework.ops.device"], "ops.tpu_ops.worker_heartbeat": [], "tpu.session_support.WorkerHeartbeatManager.num_workers": ["<builtin>.len"], "tpu.session_support.WorkerHeartbeatManager.configure": ["protobuf.text_format.MessageToString", "platform.tf_logging.info"], "tpu.session_support.WorkerHeartbeatManager.ping": ["platform.tf_logging.debug", "protobuf.config_pb2.RunOptions", "event_pb2.WorkerHeartbeatResponse.FromString", "util.event_pb2.WorkerHeartbeatRequest"], "util.event_pb2.WorkerHeartbeatRequest": [], "event_pb2.WorkerHeartbeatResponse.FromString": [], "tpu.session_support.WorkerHeartbeatManager.lame_workers": ["tpu.session_support.WorkerHeartbeatManager.ping", "<builtin>.zip", "tpu.session_support.WorkerHeartbeatManager.__init__"], "tpu.session_support.WorkerHeartbeatManager.__repr__": [], "tpu.session_support.WorkerHeartbeatManager.shutdown": ["time.sleep", "util.event_pb2.WatchdogConfig", "platform.tf_logging.info", "tpu.session_support.WorkerHeartbeatManager.configure", "util.event_pb2.WorkerHeartbeatRequest", "util.event_pb2.RequestedExitCode"], "util.event_pb2.WatchdogConfig": [], "util.event_pb2.RequestedExitCode": [], "tpu.session_support.all_worker_devices": [], "tpu.session_support.WatchdogManager.__init__": ["threading.Thread.__init__"], "threading.Thread.__init__": [], "tpu.session_support.WatchdogManager._reset_manager": ["util.event_pb2.WatchdogConfig", "util.event_pb2.WorkerHeartbeatRequest", "tpu.session_support.WorkerHeartbeatManager.configure", "framework.ops.Graph", "client.session.Session", "tpu.session_support.all_worker_devices", "tpu.session_support.WorkerHeartbeatManager.from_devices"], "tpu.session_support.WatchdogManager.configure_and_run": ["threading.Thread.start", "tpu.session_support.WatchdogManager._reset_manager", "platform.tf_logging.info"], "tpu.session_support.WatchdogManager.stop": ["threading.Thread.join", "tpu.session_support.WatchdogManager._reset_manager", "platform.tf_logging.info"], "tpu.session_support.WatchdogManager.__enter__": ["tpu.session_support.WatchdogManager.configure_and_run"], "tpu.session_support.WatchdogManager.__exit__": ["tpu.session_support.WatchdogManager.stop"], "tpu.session_support.WatchdogManager.run": ["tpu.session_support.WorkerHeartbeatManager.ping", "tpu.session_support.WatchdogManager._reset_manager", "time.sleep", "platform.tf_logging.debug"], "tpu.session_support.start_worker_watchdog": ["<builtin>.min", "tpu.session_support.WatchdogManager.configure_and_run", "tpu.session_support.WatchdogManager.__init__"], "tpu.session_support.stop_worker_watchdog": [], "tpu.session_support.GracefulShutdownHook.__init__": ["framework.ops.Graph"], "tpu.session_support.GracefulShutdownHook.after_create_session": ["<builtin>.ValueError", "tpu.session_support._clone_session", "tpu.session_support.WorkerHeartbeatManager.num_workers", "platform.tf_logging.info", "util.event_pb2.WorkerHeartbeatRequest", "tpu.session_support.WorkerHeartbeatManager.configure", "training.training_util.get_global_step", "tpu.session_support.all_worker_devices", "platform.tf_logging.warn", "tpu.session_support.GracefulShutdownHook.saver", "tpu.session_support.WorkerHeartbeatManager.from_devices"], "tpu.session_support.GracefulShutdownHook.saver": ["framework.ops.get_collection", "<builtin>.len", "platform.tf_logging.error", "<builtin>.isinstance"], "tpu.session_support.GracefulShutdownHook.after_run": ["tpu.session_support.GracefulShutdownHook.saver", "training.training_util.get_global_step", "tpu.session_support.WorkerHeartbeatManager.lame_workers", "platform.tf_logging.info"], "tpu.session_support.ResetComputation.__init__": [], "tpu.session_support.ResetComputation.__call__": ["platform.tf_logging.info", "tpu.session_support.CoordinatorResetError.__init__"], "tpu.session_support.ShutdownLameWorkers.__init__": [], "tpu.session_support.ShutdownLameWorkers.__call__": [], "tpu.session_support.ShutdownAllWorkers.__init__": [], "tpu.session_support.ShutdownAllWorkers.__call__": [], "tpu.tensor_tracer": [], "tpu.tensor_tracer.set_parameters": [], "tpu.tensor_tracer.op_priority": [], "tpu.tensor_tracer.read_tensor_tracer_event_file": ["numpy.frombuffer", "<builtin>.len", "<builtin>.ValueError", "summary.summary_iterator.summary_iterator", "framework.dtypes.DType"], "tpu.tensor_tracer.trace_tensor": [], "tpu.tensor_tracer.keras_layer_tracepoint": ["framework.tensor_util.is_tf_type", "tpu.tensor_tracer.trace_tensor"], "tpu.tensor_tracer.TensorTracer": ["<builtin>.set"], "tpu.tensor_tracer.TensorTracer.is_enabled": ["tpu.tensor_tracer_flags.TTParameters"], "tpu.tensor_tracer_flags.TTParameters": [], "tpu.tensor_tracer.TensorTracer.check_device_type": ["<builtin>.ValueError"], "tpu.tensor_tracer.TensorTracer.check_trace_mode": ["<builtin>.ValueError"], "tpu.tensor_tracer.TensorTracer.loop_cond_op": [], "tpu.tensor_tracer.TensorTracer.while_loop_op": ["ops.control_flow_util.IsLoopSwitch", "ops.control_flow_util.IsLoopEnter", "ops.control_flow_util.IsLoopMerge", "tpu.tensor_tracer.TensorTracer.loop_cond_op", "ops.control_flow_util.IsLoopExit"], "tpu.tensor_tracer.TensorTracer.control_flow_op": ["ops.control_flow_util.IsSwitch", "ops.control_flow_util.IsMerge"], "tpu.tensor_tracer.TensorTracer.unsafe_op": [], "tpu.tensor_tracer.TensorTracer.device_mismatch": [], "tpu.tensor_tracer.TensorTracer.unsafe_scalar_trace": [], "tpu.tensor_tracer.TensorTracer._is_interesting_op": ["tpu.tensor_tracer.op_priority"], "tpu.tensor_tracer.TensorTracer.reason": [], "tpu.tensor_tracer.TensorTracer.__init__": ["<builtin>.set", "tpu.tensor_tracer_report.TensorTracerConfig"], "tpu.tensor_tracer_report.TensorTracerConfig": [], "tpu.tensor_tracer.TensorTracer.report_proto": ["<builtin>.ValueError"], "tpu.tensor_tracer.TensorTracer.report_proto_path": [], "tpu.tensor_tracer.TensorTracer._get_all_cache_variables": [], "tpu.tensor_tracer.TensorTracer._create_or_get_tensor_values_cache": ["<builtin>.int", "framework.ops.get_default_graph", "ops.variable_scope.get_variable", "tpu.tensor_tracer.TensorTracer._create_or_get_tensor_values_cache._escape_namescopes", "ops.init_ops.constant_initializer", "<builtin>.ValueError"], "tpu.tensor_tracer.TensorTracer._create_or_get_tensor_values_cache._escape_namescopes": [], "tpu.tensor_tracer.TensorTracer._add_replica_id_to_graph": ["ops.tpu_ops.tpu_replicated_input", "framework.ops.control_dependencies", "<builtin>.range", "<builtin>.list"], "tpu.tensor_tracer.TensorTracer._inside_op_range": [], "tpu.tensor_tracer.TensorTracer._is_user_included_op": [], "tpu.tensor_tracer.TensorTracer._is_user_excluded_op": [], "tpu.tensor_tracer.TensorTracer._signature_types": ["<builtin>.set"], "tpu.tensor_tracer.TensorTracer._num_signature_dimensions": ["tpu.tensor_tracer.TensorTracer._signature_types", "<builtin>.len"], "tpu.tensor_tracer.TensorTracer._use_temp_cache": ["tpu.tensor_tracer.TensorTracer._use_tensor_buffer", "tpu.tensor_tracer.TensorTracer._use_tensor_values_cache"], "tpu.tensor_tracer.TensorTracer._use_tensor_buffer": [], "tpu.tensor_tracer.TensorTracer._use_tensor_values_cache": [], "tpu.tensor_tracer.TensorTracer._merge_tensor_signatures": ["ops.array_ops.stack", "tpu.tensor_tracer.TensorTracer._signature_types", "<builtin>.ValueError", "<builtin>.sorted", "tpu.tensor_tracer.TensorTracer._num_signature_dimensions"], "tpu.tensor_tracer.TensorTracer._merge_tensor_signatures.<lambda1>": [], "tpu.tensor_tracer.TensorTracer._save_tensor_value_to_tmp_cache": ["tpu.tensor_tracer.TensorTracer._merge_tensor_signatures", "ops.array_ops.reshape", "tpu.tensor_tracer.TensorTracer._num_signature_dimensions"], "tpu.tensor_tracer.TensorTracer._save_tensor_value_to_cache_op": ["tpu.tensor_tracer.TensorTracer._merge_tensor_signatures", "tpu.tensor_tracer.TensorTracer._create_or_get_tensor_values_cache", "ops.state_ops.scatter_update", "framework.constant_op.constant", "ops.array_ops.reshape", "tpu.tensor_tracer.TensorTracer._num_signature_dimensions"], "tpu.tensor_tracer.TensorTracer._snapshot_tensor": ["ops.state_ops.assign", "tpu.tensor_tracer.TensorTracer._create_or_get_tensor_values_cache"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor": ["<builtin>.RuntimeError", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._detect_nan_inf", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_max_abs", "ops.math_ops.cast", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_max", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_norm", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_size", "<builtin>.sorted", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_min", "tpu.tensor_tracer.TensorTracer._signature_types", "<builtin>.ValueError", "ops.array_ops.reshape", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_mean_and_variance"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._detect_nan_inf": ["ops.gen_math_ops.logical_or", "framework.constant_op.constant", "ops.gen_math_ops.is_inf", "ops.control_flow_ops.cond", "ops.math_ops.reduce_any", "ops.gen_math_ops.is_nan"], "ops.gen_math_ops.is_nan": [], "ops.gen_math_ops.is_inf": [], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._detect_nan_inf.<lambda1>": ["framework.constant_op.constant"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._detect_nan_inf.<lambda2>": ["framework.constant_op.constant"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._compute_signature": ["ops.array_ops.size", "ops.math_ops.reduce_max", "ops.math_ops.cast", "ops.math_ops.reduce_min", "ops.linalg_ops.norm", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_max_abs.<lambda1>", "ops.array_ops.reshape"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_max_abs.<lambda1>": ["ops.math_ops.reduce_max", "ops.math_ops.abs"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_size": ["ops.math_ops.cast", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._compute_signature"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_max": ["tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._compute_signature"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_min": ["tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._compute_signature"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_norm": ["tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._compute_signature"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_mean_and_variance": ["ops.array_ops.reshape", "ops.nn_impl.moments", "ops.math_ops.cast"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._show_max_abs": ["tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor._compute_signature"], "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor.<lambda1>": [], "tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun": ["<builtin>.RuntimeError"], "tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun._print_tensor": ["ops.array_ops.shape", "ops.logging_ops.print_v2", "tpu.tensor_tracer.TensorTracer._get_outfile_suffix", "os.path.join", "<builtin>.ValueError"], "tpu.tensor_tracer.TensorTracer._get_outfile_suffix": ["platform.remote_utils.is_remote_path", "platform.remote_utils.get_appendable_file_encoding"], "tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun._show_part_tensor": ["tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun._print_tensor"], "tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun._show_full_tensor": ["tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun._print_tensor"], "tpu.tensor_tracer.TensorTracer._is_in_control_flow": ["ops.control_flow_util.IsInCond"], "tpu.tensor_tracer.TensorTracer._is_in_outmost_while_loop": ["tpu.tensor_tracer.TensorTracer._get_op_control_flow_context", "ops.control_flow_util.GetContainingWhileContext"], "tpu.tensor_tracer.TensorTracer._get_op_control_flow_context": ["ops.control_flow_util.IsLoopExit"], "tpu.tensor_tracer.TensorTracer._should_trace_in_control_flow": ["tpu.tensor_tracer.TensorTracer._use_tensor_buffer", "tpu.tensor_tracer.TensorTracer._use_tensor_values_cache", "tpu.tensor_tracer.TensorTracer._use_temp_cache"], "tpu.tensor_tracer.TensorTracer._skip_op": ["tpu.tensor_tracer.TensorTracer.reason", "tpu.tensor_tracer.TensorTracer.unsafe_op", "tpu.tensor_tracer.TensorTracer._should_trace_in_control_flow", "tpu.tensor_tracer.TensorTracer._is_user_included_op", "tpu.tensor_tracer.TensorTracer._is_in_control_flow", "tpu.tensor_tracer.TensorTracer._is_interesting_op", "tpu.tensor_tracer.TensorTracer._is_user_excluded_op", "tpu.tensor_tracer.TensorTracer._is_in_outmost_while_loop", "tpu.tensor_tracer.TensorTracer._inside_op_range", "tpu.tensor_tracer.TensorTracer.device_mismatch", "tpu.tensor_tracer.TensorTracer.control_flow_op", "tpu.tensor_tracer.TensorTracer.while_loop_op"], "tpu.tensor_tracer.TensorTracer._skip_tensor": ["tpu.tensor_tracer.TensorTracer.reason", "tpu.tensor_tracer.TensorTracer._is_user_included_op", "tpu.tensor_tracer.TensorTracer.unsafe_scalar_trace", "tpu.tensor_tracer.TensorTracer._is_user_excluded_op", "<builtin>.set", "<builtin>.len", "tpu.tensor_tracer.TensorTracer.while_loop_op"], "tpu.tensor_tracer.TensorTracer._filter_execution_path_operations": ["<builtin>.list", "<builtin>.isinstance", "<builtin>.set", "tpu.tensor_tracer.TensorTracer.loop_cond_op", "<builtin>.RuntimeError"], "tpu.tensor_tracer.TensorTracer._determine_and_instrument_traced_tensors": ["<builtin>.range", "<builtin>.set", "<builtin>.len", "tpu.tensor_tracer.TensorTracer._skip_op", "<builtin>.enumerate", "tpu.tensor_tracer.TensorTracer._skip_tensor"], "tpu.tensor_tracer.TensorTracer._check_trace_files": ["platform.gfile.Exists", "io.file_io.recursive_create_dir", "<builtin>.RuntimeError"], "tpu.tensor_tracer.TensorTracer._create_temp_cache": ["framework.constant_op.constant", "<builtin>.range"], "tpu.tensor_tracer.TensorTracer._determine_trace_and_create_report": ["tpu.tensor_tracer.TensorTracer._use_tensor_values_cache", "tpu.tensor_tracer.TensorTracer._check_trace_files", "tpu.tensor_tracer.TensorTracer._create_or_get_tensor_values_cache", "tpu.tensor_tracer.TensorTracer._determine_and_instrument_traced_tensors", "<builtin>.len", "tpu.tensor_tracer_report.sort_tensors_and_ops", "tpu.tensor_tracer_report.TensorTraceOrder", "os.path.join", "tpu.tensor_tracer_report.report_proto_path", "tpu.tensor_tracer_report.TTReportHandle", "tpu.tensor_tracer.TensorTracer._signature_types", "tpu.tensor_tracer.TensorTracer._create_temp_cache", "platform.tf_logging.info", "tpu.tensor_tracer.TensorTracer._use_temp_cache", "tpu.tensor_tracer.TensorTracer._num_signature_dimensions"], "tpu.tensor_tracer_report.sort_tensors_and_ops": ["tpu.tensor_tracer_report.topological_sort", "collections.namedtuple", "<builtin>.enumerate"], "tpu.tensor_tracer_report.TTReportHandle": [], "tpu.tensor_tracer_report.TensorTraceOrder": [], "tpu.tensor_tracer_report.report_proto_path": ["os.path.join"], "tpu.tensor_tracer.TensorTracer._create_host_call": [], "tpu.tensor_tracer.TensorTracer._inspect_summary_cache": ["ops.gen_math_ops.logical_or", "ops.math_ops.reduce_sum", "ops.math_ops.greater", "ops.logging_ops.print_v2", "ops.gen_math_ops.is_inf", "<builtin>.sorted", "ops.control_flow_ops.cond", "ops.math_ops.reduce_any", "ops.gen_math_ops.is_nan"], "tpu.tensor_tracer.TensorTracer._inspect_summary_cache._inspect_tensor": ["ops.math_ops.greater", "ops.control_flow_ops.cond"], "tpu.tensor_tracer.TensorTracer._inspect_summary_cache._inspect_tensor.<lambda1>": [], "tpu.tensor_tracer.TensorTracer._inspect_summary_cache._inspect_tensor.<lambda2>": [], "tpu.tensor_tracer.TensorTracer._inspect_summary_cache.<lambda1>": [], "tpu.tensor_tracer.TensorTracer._inspect_summary_cache.<lambda2>": [], "tpu.tensor_tracer.TensorTracer._inspect_summary_cache.<lambda3>": [], "tpu.tensor_tracer.TensorTracer._generate_flush_cache_op": ["tpu.tensor_tracer.TensorTracer.merge_caches_on_tpu", "tpu.tensor_tracer.TensorTracer._create_or_get_tensor_values_cache", "tpu.tpu.outside_compilation", "framework.constant_op.constant", "ops.state_ops.assign", "tpu.tensor_tracer.TensorTracer.aggregate_global_cache", "framework.ops.control_dependencies", "ops.array_ops.identity", "training.training_util.get_or_create_global_step", "tpu.tensor_tracer.TensorTracer._use_temp_cache", "tpu.tensor_tracer.TensorTracer._generate_flush_cache_op._flush_fun"], "tpu.tensor_tracer.TensorTracer._generate_flush_cache_op._flush_fun": ["tpu.tensor_tracer.TensorTracer._generate_flush_cache_op._flush_fun._eq", "ops.control_flow_ops.case", "tpu.tensor_tracer.TensorTracer._generate_flush_cache_op._flush_fun._f", "<builtin>.range"], "tpu.tensor_tracer.TensorTracer._generate_flush_cache_op._flush_fun._f": [], "tpu.tensor_tracer.TensorTracer._generate_flush_cache_op._flush_fun._f._print_cache": ["<builtin>.range", "tpu.tensor_tracer.TensorTracer._get_outfile_suffix", "ops.logging_ops.print_v2", "framework.constant_op.constant", "os.path.join", "framework.ops.control_dependencies", "<builtin>.ValueError", "tpu.tensor_tracer.TensorTracer._inspect_summary_cache", "tpu.tensor_tracer.TensorTracer._num_signature_dimensions"], "tpu.tensor_tracer.TensorTracer._generate_flush_cache_op._flush_fun._eq": ["ops.math_ops.equal"], "tpu.tensor_tracer.TensorTracer.merge_caches_on_tpu": ["ops.tpu_ops.all_to_all", "ops.array_ops.broadcast_to"], "tpu.tensor_tracer.TensorTracer.aggregate_global_cache": ["ops.array_ops.stack", "ops.array_ops.expand_dims", "ops.array_ops.transpose", "tpu.tensor_tracer.TensorTracer._signature_types", "operator.itemgetter", "<builtin>.sorted", "<builtin>.RuntimeError"], "tpu.tensor_tracer.TensorTracer._flush_tensor_values_cache": ["tpu.tensor_tracer.TensorTracer._generate_flush_cache_op", "framework.ops.control_dependencies", "ops.control_flow_ops.tuple"], "tpu.tensor_tracer.TensorTracer._process_tensor_fetches": ["<builtin>.isinstance", "<builtin>.RuntimeError"], "tpu.tensor_tracer.TensorTracer._process_op_fetches": ["platform.tf_logging.warning", "<builtin>.isinstance"], "tpu.tensor_tracer.TensorTracer._convert_fetches_to_input_format": ["<builtin>.tuple", "<builtin>.isinstance", "<builtin>.len", "<builtin>.RuntimeError"], "tpu.tensor_tracer.TensorTracer._prepare_host_call_fn": ["framework.ops.control_dependencies", "tpu.tensor_tracer.TensorTracer._get_all_cache_variables", "training.training_util.get_or_create_global_step", "<builtin>.ValueError", "ops.array_ops.reshape"], "tpu.tensor_tracer.TensorTracer._prepare_host_call_fn._write_cache": ["summary_pb2.SummaryMetadata.PluginData", "framework.ops.get_default_graph", "ops.summary_ops_v2.create_file_writer_v2", "ops.string_ops.string_join", "tpu.tensor_tracer.TensorTracer.aggregate_global_cache", "framework.summary_pb2.SummaryMetadata", "framework.ops.control_dependencies", "ops.control_flow_ops.group", "ops.summary_ops_v2.write"], "tpu.tensor_tracer.TensorTracer.host_call_deps_and_fn": [], "tpu.tensor_tracer.TensorTracer.get_traced_op_names": [], "tpu.tensor_tracer.TensorTracer._trace_execution": ["tpu.tensor_tracer.TensorTracer._process_op_fetches", "<builtin>.set", "tpu.tensor_tracer.TensorTracer._save_tensor_value_to_tmp_cache", "tpu.tensor_tracer.TensorTracer.aggregate_global_cache", "six.next", "tpu.tensor_tracer.TensorTracer._prepare_host_call_fn", "tpu.tensor_tracer.TensorTracer._flush_tensor_values_cache", "tpu.tensor_tracer.TensorTracer._get_op_control_flow_context", "tpu.tensor_tracer.TensorTracer._create_host_call", "tpu.tensor_tracer.TensorTracer._snapshot_tensor", "tpu.tensor_tracer.TensorTracer._filter_execution_path_operations", "tpu.tensor_tracer.TensorTracer._determine_trace_and_create_report", "tpu.tensor_tracer.TensorTracer._process_tensor_fetches", "ops.control_flow_ops.tuple", "tpu.tensor_tracer.TensorTracer._use_tensor_buffer", "tpu.tensor_tracer.TensorTracer._convert_fetches_to_input_format", "<builtin>.list", "<builtin>.range", "tpu.tensor_tracer.TensorTracer.check_trace_mode", "tpu.tensor_tracer.TensorTracer._trace_execution._cast_unsupported_dtypes", "tpu.tensor_tracer.TensorTracer._preprocess_traced_tensor", "<builtin>.ValueError", "<builtin>.RuntimeError", "ops.array_ops.stack", "tpu.tensor_tracer.TensorTracer._use_tensor_values_cache", "tpu.tensor_tracer.TensorTracer.merge_caches_on_tpu", "tpu.tpu.outside_compilation", "<builtin>.len", "platform.analytics.track_usage", "six.itervalues", "tpu.tensor_tracer.TensorTracer._save_tensor_value_to_cache_op", "tpu.tensor_tracer.TensorTracer._trace_execution.tpu_wrap_trace_fn", "tpu.tensor_tracer.TensorTracer._use_temp_cache", "tpu.tensor_tracer.TensorTracer.check_device_type"], "tpu.tensor_tracer.TensorTracer._trace_execution._cast_unsupported_dtypes": ["ops.math_ops.cast"], "tpu.tensor_tracer.TensorTracer._trace_execution.<lambda1>": [], "tpu.tensor_tracer.TensorTracer._trace_execution.tpu_wrap_trace_fn": ["tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun._show_part_tensor", "tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun._show_full_tensor", "tpu.tensor_tracer.TensorTracer._make_tensor_trace_fun", "tpu.tpu.outside_compilation"], "six.next": [], "tpu.tensor_tracer.TensorTracer._trace_execution.write_if_core_0": ["ops.math_ops.equal", "ops.control_flow_ops.cond"], "tpu.tensor_tracer.TensorTracer._trace_execution.write_if_core_0.<lambda1>": [], "tpu.tensor_tracer.TensorTracer.trace_tpu": ["tpu.tensor_tracer.TensorTracer._trace_execution", "tpu.tensor_tracer.TensorTracer._add_replica_id_to_graph", "platform.tf_logging.warning", "<builtin>.isinstance", "tpu.tensor_tracer_flags.TTParameters", "framework.graph_io.write_graph"], "tpu.tensor_tracer.TensorTracer.trace_cpu": ["tpu.tensor_tracer.TensorTracer._trace_execution", "platform.tf_logging.warning", "<builtin>.isinstance", "tpu.tensor_tracer_flags.TTParameters", "framework.graph_io.write_graph"], "tpu.tensor_tracer_flags": ["re.compile"], "tpu.tensor_tracer_flags.TTParameters.__init__": ["tpu.tensor_tracer_flags.TTParameters._flag_value_to_re_list", "tpu.tensor_tracer_flags.TTParameters._validate_flag_names", "tpu.tensor_tracer_flags.TTParameters._get_summary_mode", "tpu.tensor_tracer_flags.TTParameters._get_summary_signatures", "tpu.tensor_tracer_flags.TTParameters.is_flag_on", "tpu.tensor_tracer_flags.TTParameters._check_flag_errors", "tpu.tensor_tracer_flags.TTParameters._get_flag_int_value", "tpu.tensor_tracer_flags.TTParameters._get_op_range", "tpu.tensor_tracer_flags.TTParameters.get_flag_value", "tpu.tensor_tracer_flags.TTParameters._get_trace_dir", "tpu.tensor_tracer_flags.TTParameters._get_trace_mode", "tpu.tensor_tracer_flags.TTParameters._get_submode", "tpu.tensor_tracer_flags.TTParameters._get_report_filepath"], "tpu.tensor_tracer_flags.TTParameters._validate_flag_names": ["<builtin>.ValueError", "tpu.tensor_tracer_flags.TTParameters.match_next_flag", "os.environ.get"], "tpu.tensor_tracer_flags.TTParameters._get_trace_mode": ["<builtin>.ValueError", "tpu.tensor_tracer_flags.TTParameters.get_flag_value"], "tpu.tensor_tracer_flags.TTParameters._get_submode": ["<builtin>.ValueError", "tpu.tensor_tracer_flags.TTParameters.get_flag_value"], "tpu.tensor_tracer_flags.TTParameters._get_trace_dir": ["<builtin>.ValueError", "tpu.tensor_tracer_flags.TTParameters.use_test_undeclared_outputs_dir", "tpu.tensor_tracer_flags.TTParameters.get_flag_value", "os.environ.get"], "tpu.tensor_tracer_flags.TTParameters._get_report_filepath": ["os.path.join", "os.path.isabs", "<builtin>.ValueError", "tpu.tensor_tracer_flags.TTParameters.use_test_undeclared_outputs_dir", "tpu.tensor_tracer_flags.TTParameters.get_flag_value", "os.environ.get"], "tpu.tensor_tracer_flags.TTParameters._get_op_range": ["tpu.tensor_tracer_flags.TTParameters.get_flag_value", "<builtin>.int"], "tpu.tensor_tracer_flags.TTParameters._flag_value_to_re_list": ["re.compile", "tpu.tensor_tracer_flags.TTParameters.get_flag_value"], "tpu.tensor_tracer_flags.TTParameters.is_flag_on": ["tpu.tensor_tracer_flags.TTParameters.get_flag_value"], "tpu.tensor_tracer_flags.TTParameters.get_flag_value": ["tpu.tensor_tracer_flags.TTParameters.match_next_flag", "<builtin>.RuntimeError", "os.environ.get"], "tpu.tensor_tracer_flags.TTParameters._get_flag_int_value": ["platform.tf_logging.warning", "tpu.tensor_tracer_flags.TTParameters.get_flag_value", "<builtin>.int"], "tpu.tensor_tracer_flags.TTParameters._get_summary_signatures": ["<builtin>.enumerate", "tpu.tensor_tracer_flags.TTParameters._flag_value_as_list", "tpu.tensor_tracer_flags.TTParameters._supported_signatures", "platform.tf_logging.warning"], "tpu.tensor_tracer_flags.TTParameters._get_summary_mode": ["<builtin>.ValueError", "tpu.tensor_tracer_flags.TTParameters.get_flag_value"], "tpu.tensor_tracer_flags.TTParameters._check_flag_errors": ["<builtin>.ValueError"], "tpu.tensor_tracer_flags.TTParameters.use_test_undeclared_outputs_dir": ["tpu.tensor_tracer_flags.TTParameters.is_flag_on"], "os.path.isabs": [], "tpu.tensor_tracer_flags.TTParameters.is_brief_mode": [], "tpu.tensor_tracer_flags.TTParameters.match_next_flag": [], "tpu.tensor_tracer_flags.TTParameters._supported_signatures": [], "tpu.tensor_tracer_flags.TTParameters._flag_value_as_list": ["tpu.tensor_tracer_flags.TTParameters.get_flag_value"], "tpu.tensor_tracer_flags.TTParameters.get_signature_to_agg_fn_map": [], "tpu.tensor_tracer_flags.TTParameters.get_signature_to_agg_fn_map.<dict1>.<lambda1>": [], "tpu.tensor_tracer_flags.TTParameters.get_signature_to_agg_fn_map.<lambda1>": ["ops.math_ops.reduce_max", "ops.math_ops.abs"], "tpu.tensor_tracer_flags.TTParameters._flag_value_as_int_list": ["platform.tf_logging.warning", "tpu.tensor_tracer_flags.TTParameters.get_flag_value", "<builtin>.int"], "tpu.tensor_tracer_flags.TTParameters.is_enabled": ["tpu.tensor_tracer_flags.TTParameters.is_flag_on", "platform.tf_logging.debug", "os.environ.get"], "tpu.tensor_tracer_report": [], "tpu.tensor_tracer_report.topological_sort": ["<builtin>.list", "<builtin>.set", "<builtin>.len", "tpu.tensor_tracer_report.topological_sort._is_loop_edge", "tpu.tensor_tracer_report.topological_sort._in_op_degree", "<builtin>.ValueError"], "tpu.tensor_tracer_report.topological_sort._is_loop_edge": [], "tpu.tensor_tracer_report.topological_sort._in_op_degree": ["tpu.tensor_tracer_report.topological_sort._is_loop_edge"], "tpu.tensor_tracer_report.topological_sort.<lambda1>": [], "tpu.tensor_tracer_report.topological_sort.<lambda2>": [], "tpu.tensor_tracer_report.TensorTracerConfig.__init__": [], "tpu.tensor_tracer_report.TensorTraceOrder.__init__": ["tpu.tensor_tracer_report.TensorTraceOrder._create_tensor_maps"], "tpu.tensor_tracer_report.TensorTraceOrder._create_tensor_maps": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.RuntimeError"], "tpu.tensor_tracer_report.OpenReportFile.__init__": ["platform.gfile.Open"], "tpu.tensor_tracer_report.OpenReportFile.__enter__": [], "tpu.tensor_tracer_report.OpenReportFile.__exit__": [], "tpu.tensor_tracer_report.proto_fingerprint": ["hashlib.sha256"], "tpu.tensor_tracer_report.TTReportHandle.__init__": [], "tpu.tensor_tracer_report.TTReportHandle.instrument": [], "tpu.tensor_tracer_report.TTReportHandle.instrument_op": ["tpu.tensor_tracer_report.TTReportHandle.instrument"], "tpu.tensor_tracer_report.TTReportHandle.instrument_tensor": ["tpu.tensor_tracer_report.TTReportHandle.instrument"], "tpu.tensor_tracer_report.TTReportHandle.create_report_proto": ["platform.tf_logging.info", "tpu.tensor_tracer_pb2.TensorTracerReport", "<builtin>.sorted", "tensor_tracer_pb2.TensorTracerReport.TracedTensorDef", "tpu.tensor_tracer_report.proto_fingerprint"], "tpu.tensor_tracer_pb2.TensorTracerReport": [], "tpu.tensor_tracer_report.TTReportHandle.create_report_proto.<lambda1>": [], "tensor_tracer_pb2.TensorTracerReport.TracedTensorDef": [], "tpu.tensor_tracer_report.TTReportHandle.write_report_proto": ["tpu.tensor_tracer_report.report_proto_path", "platform.gfile.GFile", "platform.gfile.MakeDirs"], "tpu.tensor_tracer_report.TTReportHandle.create_report": ["tpu.tensor_tracer_report.TTReportHandle._write_config_section", "tpu.tensor_tracer_report.TTReportHandle._write_op_list_section", "tpu.tensor_tracer_report.TTReportHandle._write_reason_section", "tpu.tensor_tracer_report.OpenReportFile.__init__", "tpu.tensor_tracer_report.TTReportHandle._write_trace_points", "tpu.tensor_tracer_report.TTReportHandle._write_cache_index_map_section", "tpu.tensor_tracer_report.TTReportHandle._write_tensor_list_section", "tpu.tensor_tracer_report.TTReportHandle._write_graph_section"], "tpu.tensor_tracer_report.TTReportHandle._write_config_section": ["tpu.tensor_tracer_report.TTReportHandle._write_report"], "tpu.tensor_tracer_report.TTReportHandle._write_op_list_section": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.range", "tpu.tensor_tracer_report.TTReportHandle._write_report"], "tpu.tensor_tracer_report.TTReportHandle._write_tensor_list_section": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.range", "tpu.tensor_tracer_report.TTReportHandle._write_report"], "tpu.tensor_tracer_report.TTReportHandle._write_trace_points": ["tpu.tensor_tracer_report.TTReportHandle._write_report"], "tpu.tensor_tracer_report.TTReportHandle._write_cache_index_map_section": ["<builtin>.len", "<builtin>.range", "tpu.tensor_tracer_report.TTReportHandle._write_report"], "tpu.tensor_tracer_report.TTReportHandle._write_reason_section": ["<builtin>.sorted", "tpu.tensor_tracer_report.TTReportHandle._write_report"], "tpu.tensor_tracer_report.TTReportHandle._write_graph_section": ["<builtin>.len", "<builtin>.list", "<builtin>.range", "tpu.tensor_tracer_report.TTReportHandle._write_report"], "tpu.tensor_tracer_report.TTReportHandle._write_report": ["platform.tf_logging.info"], "tpu.tensor_tracer_report.TTReportHandle._write_tensor_list_section.<lambda1>": [], "tpu.topology": [], "tpu.topology._tpu_device_name": [], "tpu.topology._tpu_host_device_name": [], "tpu.topology.Topology.__init__": ["numpy.argwhere", "tpu.topology.Topology._invert_topology", "tpu.topology.Topology._parse_topology", "<builtin>.any", "<builtin>.len", "<builtin>.ValueError", "numpy.asarray"], "tpu.topology.Topology._parse_topology": ["numpy.array", "<builtin>.any", "tpu.topology_pb2.TopologyProto", "<builtin>.len", "<builtin>.ValueError"], "tpu.topology.Topology._invert_topology": ["numpy.full", "<builtin>.list", "six.moves.xrange"], "tpu.topology_pb2.TopologyProto": [], "tpu.topology.Topology.mesh_shape": [], "tpu.topology.Topology.mesh_rank": ["<builtin>.len"], "tpu.topology.Topology.device_coordinates": [], "tpu.topology.Topology.missing_devices": [], "tpu.topology.Topology.task_ordinal_at_coordinates": ["<builtin>.tuple"], "tpu.topology.Topology.tpu_device_ordinal_at_coordinates": ["<builtin>.tuple"], "tpu.topology.Topology.cpu_device_name_at_coordinates": ["<builtin>.tuple", "tpu.topology._tpu_host_device_name"], "tpu.topology.Topology.tpu_device_name_at_coordinates": ["tpu.topology._tpu_device_name", "<builtin>.tuple"], "tpu.topology.Topology.num_tasks": [], "tpu.topology.Topology.num_tpus_per_task": [], "tpu.topology.Topology.serialized": ["<builtin>.list", "tpu.topology_pb2.TopologyProto"], "tpu.tpu": ["<builtin>.set", "util.tf_export.tf_export", "framework.ops.NotDifferentiable", "framework.auto_control_deps.register_acd_resource_resolver"], "tpu.tpu._tpu_system_device_name": [], "ops.tpu_ops.configure_distributed_tpu": [], "ops.tpu_ops.configure_tpu_embedding": [], "tpu.tpu.initialize_system_for_tpu_embedding": ["tpu.tpu._tpu_system_device_name", "ops.tpu_ops.configure_tpu_embedding", "framework.ops.device"], "tpu.tpu.shutdown_system": ["ops.tpu_ops.shutdown_distributed_tpu", "tpu.tpu._tpu_system_device_name", "framework.ops.device"], "ops.tpu_ops.shutdown_distributed_tpu": [], "tpu.tpu._enclosing_tpu_context_and_graph": ["<builtin>.getattr", "<builtin>.ValueError", "framework.ops.get_default_graph", "<builtin>.isinstance"], "tpu.tpu.is_tpu_strategy": ["<builtin>.map", "tpu.tpu.is_tpu_strategy.<lambda1>", "<builtin>.any"], "tpu.tpu.is_tpu_strategy.<lambda1>": [], "tpu.tpu._enclosing_tpu_device_assignment": ["distribute.distribution_strategy_context.get_strategy", "distribute.distribution_strategy_context.has_strategy", "tpu.tpu.is_tpu_strategy"], "tpu.tpu.tpu_replicated_input_resolver": ["<builtin>.bool", "tpu.tpu.tpu_replicated_input_resolver.replace_with_unreplicated_resources"], "tpu.tpu.tpu_replicated_input_resolver.replace_with_unreplicated_resources": [], "tpu.tpu.TPUReplicateContext.__init__": ["framework.attr_value_pb2.AttrValue", "util.compat.as_bytes", "framework.c_api_util.ScopedTFBuffer", "<builtin>.super"], "framework.c_api_util.ScopedTFBuffer": [], "tpu.tpu.TPUReplicateContext.get_replicated_var_handle": ["distribute.device_util.canonicalize", "tpu.tpu._enclosing_tpu_device_assignment", "<builtin>.isinstance", "<builtin>.range", "ops.tpu_ops.tpu_replicated_input", "device.DeviceSpec.from_string", "tpu.tpu._enclosing_tpu_context_and_graph"], "tpu.tpu.TPUReplicateContext.report_unsupported_operations": ["absl.logging.warning", "<builtin>.len"], "tpu.tpu.TPUReplicateContext.EnterGradientColocation": ["<builtin>.NotImplementedError", "tpu.tpu.OutsideCompilationV2Context.__init__", "tpu.tpu.TPUReplicateContext._EnterOutsideCompilationScope", "framework.ops.get_default_graph", "control_flow_ops.ControlFlowContext.Enter"], "tpu.tpu.OutsideCompilationV2Context.__init__": ["control_flow_ops.ControlFlowContext.__init__"], "control_flow_ops.ControlFlowContext.Enter": [], "tpu.tpu.TPUReplicateContext._EnterOutsideCompilationScope": ["<builtin>.NotImplementedError", "<builtin>.str", "framework.ops.get_default_graph", "tpu.tpu.TPUReplicateContext._EnterOutsideCompilationScope.FakeOp.__init__", "device.DeviceSpec.from_string"], "tpu.tpu.TPUReplicateContext.ExitGradientColocation": ["framework.errors.InternalError", "framework.ops.get_default_graph", "control_flow_ops.ControlFlowContext.Exit", "tpu.tpu.TPUReplicateContext._ExitOutsideCompilationScope"], "control_flow_ops.ControlFlowContext.Exit": [], "tpu.tpu.TPUReplicateContext._ExitOutsideCompilationScope": ["<builtin>.ValueError", "framework.ops.get_default_graph"], "tpu.tpu.TPUReplicateContext._EnterOutsideCompilationScope.FakeOp.__init__": [], "tpu.tpu.TPUReplicateContext._EnterOutsideCompilationScope.FakeOp.type": [], "tpu.tpu.TPUReplicateContext._EnterOutsideCompilationScope.FakeOp.device": [], "tpu.tpu.TPUReplicateContext._EnterOutsideCompilationScope.FakeOp._set_device": ["<builtin>.isinstance"], "tpu.tpu.TPUReplicateContext._EnterOutsideCompilationScope.FakeOp._set_device_from_string": [], "tpu.tpu.TPUReplicateContext.Enter": ["framework.ops.get_default_graph", "<builtin>.super"], "tpu.tpu.TPUReplicateContext.HostComputeCore": [], "tpu.tpu.TPUReplicateContext._RemoveExternalControlEdges": [], "tpu.tpu.TPUReplicateContext.AddOp": ["tpu.tpu.TPUReplicateContext._RemoveExternalControlEdges", "absl.logging.error", "<builtin>.NotImplementedError", "<builtin>.ValueError", "tpu.tpu.TPUReplicateContext.GetControlPivot", "six.moves.xrange", "framework.ops.control_dependencies", "XLAControlFlowContext._outer_context.AddInnerOp", "<builtin>.any", "framework.attr_value_pb2.AttrValue", "<builtin>.len", "control_flow_ops.XLAControlFlowContext.Exit", "util.compat.as_bytes", "_outer_context._values.update", "tpu.tpu.TPUReplicateContext.AddValue", "ops.array_ops.identity", "XLAControlFlowContext._values.update", "tpu.tpu.TPUReplicateContext.Enter"], "tpu.tpu.TPUReplicateContext.GetControlPivot": [], "tpu.tpu.TPUReplicateContext.AddValue": ["XLAControlFlowContext._external_values.get", "XLAControlFlowContext._values.add", "XLAControlFlowContext._outer_context.AddValue"], "tpu.tpu.TPUReplicateContext.AddInnerOp": ["XLAControlFlowContext._outer_context.AddInnerOp", "tpu.tpu.TPUReplicateContext.AddOp"], "tpu.tpu.TPUReplicateContext.grad_state": [], "tpu.tpu.TPUReplicateContext.back_prop": ["control_flow_ops.XLAControlFlowContext.GetWhileContext"], "tpu.tpu.TPUReplicateContext.RequiresUniqueFunctionRetracing": [], "control_flow_ops.ControlFlowContext.__init__": [], "tpu.tpu.OutsideCompilationV2Context.AddOp": ["ControlFlowContext._outer_context.AddOp", "framework.attr_value_pb2.AttrValue", "util.compat.as_bytes"], "ControlFlowContext._outer_context.AddOp": [], "tpu.tpu.OutsideCompilationV2Context.AddInnerOp": ["framework.attr_value_pb2.AttrValue", "ControlFlowContext._outer_context.AddInnerOp", "util.compat.as_bytes"], "ControlFlowContext._outer_context.AddInnerOp": [], "tpu.tpu.OutsideCompilationV2Context.to_control_flow_context_def": [], "tpu.tpu.XLAOptions.__new__": ["<builtin>.super"], "tpu.tpu.split_compile_and_replicate": ["<builtin>.ValueError", "xla.xla.check_function_argument_count", "ops.variable_scope.get_variable_scope", "tensor_tracer.TensorTracer.is_enabled", "ops.tpu_ops.tpu_replicate_metadata", "<builtin>.len", "<builtin>.TypeError", "tpu.tensor_tracer.TensorTracer", "util.nest.flatten", "tpu.tpu._pad_all_input", "ops.array_ops.identity", "ops.tpu_ops.tpu_replicated_input", "util.nest.map_structure", "<builtin>.enumerate", "absl.logging.info", "<builtin>.getattr", "util.nest.pack_sequence_as", "<builtin>.range", "tpu.tpu._postprocess_non_flat_outputs", "framework.config.get_soft_device_placement", "control_flow_ops.XLAControlFlowContext.Exit", "tpu.tpu.TPUReplicateContext.HostComputeCore", "<builtin>.type", "six.moves.xrange", "framework.ops.convert_to_tensor", "framework.ops.control_dependencies", "<builtin>.zip", "xla.xla.is_flat", "Any.TensorTracer.is_enabled", "typing.Any.TensorTracer", "ops.control_flow_ops.no_op", "framework.attr_value_pb2.AttrValue", "ops.tpu_ops.tpu_replicated_output", "tpu.tpu.rewrite_for_inference.wrapped_computation", "<builtin>.isinstance", "tpu.tpu_function.tpu_shard_context", "ops.control_flow_ops.group", "framework.constant_op.constant", "util.compat.as_bytes", "tpu.tpu.TPUReplicateContext.__init__", "control_flow_ops.XLAControlFlowContext.ExitResult", "<builtin>.any", "framework.tensor_shape.TensorShape", "python.xla.set_dynamic_dimension_size", "util.nest.assert_same_structure", "tpu.tpu._postprocess_flat_outputs", "ops.tpu_ops.tpu_compilation_result", "framework.ops.get_default_graph", "tpu.tpu.TPUReplicateContext.report_unsupported_operations", "tpu.tpu._flatten_and_filter_composite", "tpu.tpu.TPUReplicateContext.Enter"], "tpu.tpu._ceil_to_pow_of_n": ["ops.math_ops.log", "ops.math_ops.ceil", "ops.math_ops.pow", "ops.math_ops.cast"], "tpu.tpu._pad_all_input": ["tpu.tpu._ceil_to_pow_of_n", "ops.array_ops.stack", "framework.attr_value_pb2.AttrValue", "ops.math_ops.reduce_max", "ops.array_ops.shape", "<builtin>.len", "<builtin>.any", "tpu.dynamic_padding_pb2.PaddingMap", "ops.array_ops.constant", "numpy.full_like", "<builtin>.range", "<builtin>.max", "ops.math_ops.cast", "ops.math_ops.maximum", "ops.control_flow_ops.cond", "<builtin>.enumerate", "ops.array_ops.pad"], "numpy.full_like": [], "tpu.dynamic_padding_pb2.PaddingMap": [], "tpu.tpu._pad_all_input.<lambda1>": ["ops.array_ops.pad"], "tpu.tpu._pad_all_input.<lambda2>": [], "tpu.tpu._flatten_and_filter_composite": ["<builtin>.len", "<builtin>.isinstance", "util.nest.flatten"], "tpu.tpu.split_compile_and_replicate.<lambda1>": ["tpu.tpu._flatten_and_filter_composite"], "ops.tpu_ops.tpu_replicate_metadata": [], "tpu.tpu_function.tpu_shard_context": ["tpu.tpu_function.TpuContext.set_number_of_shards", "<builtin>.NotImplementedError"], "python.xla.set_dynamic_dimension_size": [], "tpu.tpu.split_compile_and_replicate.custom_getter": ["absl.logging.warning"], "tpu.tpu.rewrite_for_inference.wrapped_computation": ["tpu.tpu._TPUInferenceContext.__init__", "framework.ops.get_default_graph", "control_flow_ops.XLAControlFlowContext.Exit", "control_flow_ops.XLAControlFlowContext.Enter", "ops.variable_scope.get_variable_scope"], "tpu.tpu._postprocess_flat_outputs": ["<builtin>.ValueError", "framework.ops.device", "tpu.tpu._postprocess_flat_outputs.<lambda1>", "ops.control_flow_ops.no_op", "framework.attr_value_pb2.AttrValue", "<builtin>.len", "<builtin>.isinstance", "tpu.tpu_name_util.core", "util.nest.flatten", "<builtin>.tuple", "ops.array_ops.identity"], "tpu.tpu._postprocess_non_flat_outputs": ["<builtin>.ValueError", "framework.ops.convert_to_tensor", "framework.ops.device", "framework.attr_value_pb2.AttrValue", "<builtin>.isinstance", "tpu.tpu_name_util.core", "util.nest.flatten", "ops.array_ops.identity", "<builtin>.enumerate"], "tensor_tracer.TensorTracer.is_enabled": [], "Any.TensorTracer.is_enabled": [], "typing.Any.TensorTracer": [], "ops.tpu_ops.tpu_compilation_result": [], "tpu.tpu._postprocess_flat_outputs.<lambda1>": ["framework.ops.convert_to_tensor"], "tpu.tpu_name_util.core": [], "tpu.tpu.split_compile_and_shard": ["<builtin>.ValueError", "framework.ops.convert_to_tensor", "<builtin>.zip", "ops.array_ops.stack", "ops.array_ops.concat", "<builtin>.len", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.list", "ops.array_ops.split", "tpu.tpu.split_compile_and_replicate", "<builtin>.type"], "tpu.tpu.shard": ["tpu.tpu.split_compile_and_shard"], "tpu.tpu.batch_parallel": ["tpu.tpu.shard"], "tpu.tpu.rewrite": ["tpu.tpu.replicate"], "tpu.tpu._TPUInferenceContext.__init__": ["<builtin>.super"], "tpu.tpu._TPUInferenceContext.AddOp": ["tpu.tpu._TPUInferenceContext._AddOpInternal"], "tpu.tpu._TPUInferenceContext._AddOpInternal": ["XLAControlFlowContext._outer_context.AddInnerOp", "<builtin>.NotImplementedError"], "tpu.tpu._TPUInferenceContext.AddValue": ["XLAControlFlowContext._outer_context.AddValue"], "tpu.tpu._TPUInferenceContext.AddInnerOp": ["tpu.tpu._TPUInferenceContext._AddOpInternal"], "tpu.tpu._TPUInferenceContext.grad_state": [], "tpu.tpu.validate_inference_rewrite_for_variables": ["<builtin>.any", "<builtin>.RuntimeError"], "tpu.tpu.rewrite_for_inference": ["tpu.tpu.rewrite"], "tpu.tpu.rewrite_for_inference.guarantee_const_getter": ["ops.array_ops.guarantee_const", "framework.ops.control_dependencies"], "tpu.tpu.rewrite_for_inference.wrapped_computation.<lambda1>": [], "tpu.tpu.prune_unconnected_ops_from_xla": ["absl.logging.info", "<builtin>.isinstance"], "tpu.tpu_config": [], "tpu.tpu_context": [], "tpu.tpu_embedding": ["collections.namedtuple"], "tpu.tpu_embedding.TableConfig.__new__": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.callable", "ops.init_ops.truncated_normal_initializer", "math.sqrt", "<builtin>.ValueError", "<builtin>.type"], "tpu.tpu_embedding.FeatureConfig.__new__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding.EnqueueData.__new__": ["<builtin>.super"], "tpu.tpu_embedding.EnqueueData.from_sparse_tensor": [], "tpu.tpu_embedding.RaggedEnqueueData.__new__": ["<builtin>.super"], "tpu.tpu_embedding.RaggedEnqueueData.from_ragged_tensor": [], "tpu.tpu_embedding.get_enqueue_datas_list_from_sparse_tensors_list": ["six.iteritems", "collections.OrderedDict", "tpu.tpu_embedding.EnqueueData.from_sparse_tensor"], "tpu.tpu_embedding.get_enqueue_datas_list_from_ragged_tensors_list": ["six.iteritems", "collections.OrderedDict", "tpu.tpu_embedding.RaggedEnqueueData.from_ragged_tensor"], "tpu.tpu_embedding._OptimizationParameters.__init__": ["<builtin>.ValueError"], "tpu.tpu_embedding.AdagradParameters.__init__": ["<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding.ProximalAdagradParameters.__init__": ["<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding.AdamParameters.__init__": ["<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding.FtrlParameters.__init__": ["<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding.ProximalYogiParameters.__init__": ["<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding.MomentumParameters.__init__": ["<builtin>.super"], "tpu.tpu_embedding.RMSPropParameters.__init__": ["<builtin>.super"], "tpu.tpu_embedding.StochasticGradientDescentParameters.__init__": ["<builtin>.super"], "tpu.tpu_embedding.FrequencyEstimatorParameters.__init__": ["<builtin>.super"], "tpu.tpu_embedding.TPUEmbedding.__init__": ["tpu.tpu_embedding.TPUEmbedding._create_config_proto", "tpu.tpu_embedding._create_table_to_features_and_num_features_dicts", "<builtin>.set", "tpu.tpu_system_metadata.master_job", "<builtin>.list", "tpu.tpu_embedding._validate_table_to_config_dict", "<builtin>.range", "tpu.tpu_embedding._validate_optimization_parameters", "tpu.tpu_embedding.StochasticGradientDescentParameters.__init__", "tpu.tpu_embedding.TPUEmbedding._get_optimizer_handler_by_table", "<builtin>.enumerate", "tpu.tpu_system_metadata._query_tpu_system_metadata", "tpu.tpu_embedding._validate_batch_size", "<builtin>.ValueError", "tpu.tpu_embedding._create_ordered_dict", "<builtin>.str", "tpu.tpu_embedding._validate_feature_to_config_dict", "tpu.tpu_embedding._create_combiners"], "tpu.tpu_embedding._validate_table_to_config_dict": ["six.iteritems", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "tpu.tpu_embedding._create_ordered_dict": ["<builtin>.sorted", "collections.OrderedDict"], "tpu.tpu_embedding._validate_feature_to_config_dict": ["<builtin>.set", "<builtin>.ValueError"], "tpu.tpu_embedding._create_table_to_features_and_num_features_dicts": ["six.iteritems", "collections.OrderedDict", "<builtin>.sorted"], "tpu.tpu_embedding._create_combiners": ["<builtin>.len"], "tpu.tpu_system_metadata.master_job": ["<builtin>.len", "<builtin>.ValueError", "<builtin>.set"], "tpu.tpu_embedding._validate_batch_size": ["<builtin>.ValueError"], "tpu.tpu_embedding._validate_optimization_parameters": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "tpu.tpu_embedding.TPUEmbedding._get_optimizer_handler_by_table": ["tpu.tpu_embedding._get_optimization_handler"], "tpu.tpu_embedding.TPUEmbedding._create_config_proto": ["<builtin>.len", "tpu.tpu_embedding_configuration_pb2.TPUEmbeddingConfiguration", "<builtin>.max"], "tpu.tpu_embedding.TPUEmbedding.hosts": ["copy.copy"], "tpu.tpu_embedding.TPUEmbedding.num_cores_per_host": [], "tpu.tpu_embedding.TPUEmbedding.num_cores": [], "tpu.tpu_embedding.TPUEmbedding.batch_size_per_core": [], "tpu.tpu_embedding.TPUEmbedding.config_proto": [], "tpu.tpu_embedding.TPUEmbedding.table_to_config_dict": ["copy.copy"], "tpu.tpu_embedding.TPUEmbedding.feature_to_config_dict": ["copy.copy"], "tpu.tpu_embedding.TPUEmbedding.table_to_features_dict": ["copy.copy"], "tpu.tpu_embedding.TPUEmbedding.optimization_parameters": [], "tpu.tpu_embedding_configuration_pb2.TPUEmbeddingConfiguration": [], "tpu.tpu_embedding.TPUEmbedding.create_variables_and_ops": ["tpu.tpu_embedding._create_device_fn", "<builtin>.enumerate", "framework.ops.device", "tpu.tpu_embedding._create_partitioned_variables", "eager.context.executing_eagerly"], "tpu.tpu_embedding._create_device_fn": [], "tpu.tpu_embedding._create_partitioned_variables": ["ops.variable_scope.get_variable", "<builtin>.min", "<builtin>.list", "<builtin>.range", "ops.partitioned_variables.fixed_size_partitioner"], "tpu.tpu_embedding.TPUEmbedding.create_variables_and_ops.load_ops": [], "tpu.tpu_embedding.TPUEmbedding.create_variables_and_ops.retrieve_ops": [], "tpu.tpu_embedding.TPUEmbedding.generate_enqueue_ops": ["<builtin>.enumerate", "tpu.tpu_embedding.TPUEmbedding._generate_enqueue_op", "tpu.tpu_embedding.TPUEmbedding._validate_generate_enqueue_ops_enqueue_datas_list"], "tpu.tpu_embedding.TPUEmbedding._validate_generate_enqueue_ops_enqueue_datas_list": ["<builtin>.set", "<builtin>.enumerate", "<builtin>.isinstance", "platform.tf_logging.warn", "tpu.tpu_embedding.TPUEmbedding._validate_generate_enqueue_ops_enqueue_datas_list._check_agreement", "<builtin>.ValueError", "six.iteritems"], "tpu.tpu_embedding.TPUEmbedding._generate_enqueue_op": ["framework.ops.colocate_with", "<builtin>.list", "ops.tpu_ops.enqueue_tpu_embedding_sparse_tensor_batch", "tpu.tpu_embedding.TPUEmbedding._format_for_tpu_embedding_sparse_tensor_batch", "ops.tpu_ops.enqueue_tpu_embedding_ragged_tensor_batch", "tpu.tpu_embedding.TPUEmbedding._format_for_tpu_embedding_ragged_tensor_batch"], "tpu.tpu_embedding.TPUEmbedding._validate_generate_enqueue_ops_enqueue_datas_list._check_agreement": ["<builtin>.ValueError"], "tpu.tpu_embedding.TPUEmbedding._format_for_tpu_embedding_ragged_tensor_batch": ["ops.array_ops.zeros", "<builtin>.enumerate"], "ops.tpu_ops.enqueue_tpu_embedding_ragged_tensor_batch": ["ops.gen_tpu_ops.enqueue_tpu_embedding_ragged_tensor_batch"], "tpu.tpu_embedding.TPUEmbedding._format_for_tpu_embedding_sparse_tensor_batch": ["ops.array_ops.zeros", "<builtin>.enumerate"], "ops.tpu_ops.enqueue_tpu_embedding_sparse_tensor_batch": ["ops.gen_tpu_ops.enqueue_tpu_embedding_sparse_tensor_batch"], "tpu.tpu_embedding.TPUEmbedding.get_activations": ["ops.tpu_ops.recv_tpu_embedding_activations", "ops.array_ops.reshape", "<builtin>.enumerate", "<builtin>.len", "collections.OrderedDict"], "ops.tpu_ops.recv_tpu_embedding_activations": [], "tpu.tpu_embedding.TPUEmbedding.generate_send_gradients_op": ["<builtin>.RuntimeError", "ops.array_ops.shape", "ops.array_ops.reshape", "ops.math_ops.cast", "ops.array_ops.expand_dims", "<builtin>.ValueError", "ops.tpu_ops.send_tpu_embedding_gradients", "ops.array_ops.concat"], "ops.tpu_ops.send_tpu_embedding_gradients": ["ops.gen_tpu_ops.send_tpu_embedding_gradients"], "tpu.tpu_embedding._get_optimization_handler": ["<builtin>.NotImplementedError", "tpu.tpu_embedding._OptimizerHandler.__init__", "<builtin>.isinstance"], "tpu.tpu_embedding._OptimizerHandler.__init__": [], "tpu.tpu_embedding._OptimizerHandler.get_optimization_parameters": [], "tpu.tpu_embedding._OptimizerHandler.set_optimization_parameters": ["<builtin>.NotImplementedError"], "tpu.tpu_embedding._OptimizerHandler.get_default_slot_variable_names": ["<builtin>.NotImplementedError"], "tpu.tpu_embedding._OptimizerHandler.create_variables_and_ops": ["<builtin>.NotImplementedError"], "tpu.tpu_embedding._AdagradHandler.set_optimization_parameters": [], "tpu.tpu_embedding._AdagradHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._AdagradHandler.create_variables_and_ops": ["ops.init_ops.constant_initializer", "tpu.tpu_embedding._create_partitioned_variables"], "tpu.tpu_embedding._AdagradHandler.create_variables_and_ops.load_ops_fn": ["ops.tpu_ops.load_tpu_embedding_adagrad_parameters", "<builtin>.range", "<builtin>.zip", "framework.ops.colocate_with"], "ops.tpu_ops.load_tpu_embedding_adagrad_parameters": [], "tpu.tpu_embedding._AdagradHandler.create_variables_and_ops.retrieve_ops_fn": ["framework.ops.colocate_with", "<builtin>.range", "ops.control_flow_ops.group", "<builtin>.zip", "ops.state_ops.assign", "ops.tpu_ops.retrieve_tpu_embedding_adagrad_parameters"], "ops.tpu_ops.retrieve_tpu_embedding_adagrad_parameters": [], "tpu.tpu_embedding._ProximalAdagradHandler.set_optimization_parameters": [], "tpu.tpu_embedding._ProximalAdagradHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._ProximalAdagradHandler.create_variables_and_ops": ["ops.init_ops.constant_initializer", "tpu.tpu_embedding._create_partitioned_variables"], "tpu.tpu_embedding._ProximalAdagradHandler.create_variables_and_ops.load_ops_fn": ["ops.tpu_ops.load_tpu_embedding_proximal_adagrad_parameters", "<builtin>.range", "<builtin>.zip", "framework.ops.colocate_with"], "ops.tpu_ops.load_tpu_embedding_proximal_adagrad_parameters": [], "tpu.tpu_embedding._ProximalAdagradHandler.create_variables_and_ops.retrieve_ops_fn": ["ops.tpu_ops.retrieve_tpu_embedding_proximal_adagrad_parameters", "framework.ops.colocate_with", "<builtin>.range", "ops.control_flow_ops.group", "<builtin>.zip", "ops.state_ops.assign"], "ops.tpu_ops.retrieve_tpu_embedding_proximal_adagrad_parameters": [], "tpu.tpu_embedding._AdamHandler.set_optimization_parameters": [], "tpu.tpu_embedding._AdamHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._AdamHandler.create_variables_and_ops": ["tpu.tpu_embedding._create_partitioned_variables", "ops.init_ops.zeros_initializer"], "tpu.tpu_embedding._AdamHandler.create_variables_and_ops.load_ops_fn": ["<builtin>.range", "<builtin>.zip", "framework.ops.colocate_with", "ops.tpu_ops.load_tpu_embedding_adam_parameters"], "ops.tpu_ops.load_tpu_embedding_adam_parameters": [], "tpu.tpu_embedding._AdamHandler.create_variables_and_ops.retrieve_ops_fn": ["ops.tpu_ops.retrieve_tpu_embedding_adam_parameters", "framework.ops.colocate_with", "<builtin>.range", "ops.control_flow_ops.group", "<builtin>.zip", "ops.state_ops.assign"], "ops.tpu_ops.retrieve_tpu_embedding_adam_parameters": [], "tpu.tpu_embedding._FtrlHandler.set_optimization_parameters": [], "tpu.tpu_embedding._FtrlHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._FtrlHandler.create_variables_and_ops": ["ops.init_ops.constant_initializer", "tpu.tpu_embedding._create_partitioned_variables"], "tpu.tpu_embedding._FtrlHandler.create_variables_and_ops.load_ops_fn": ["<builtin>.range", "<builtin>.zip", "framework.ops.colocate_with", "ops.tpu_ops.load_tpu_embedding_ftrl_parameters"], "ops.tpu_ops.load_tpu_embedding_ftrl_parameters": [], "tpu.tpu_embedding._FtrlHandler.create_variables_and_ops.retrieve_ops_fn": ["framework.ops.colocate_with", "<builtin>.range", "ops.control_flow_ops.group", "<builtin>.zip", "ops.state_ops.assign", "ops.tpu_ops.retrieve_tpu_embedding_ftrl_parameters"], "ops.tpu_ops.retrieve_tpu_embedding_ftrl_parameters": [], "tpu.tpu_embedding._ProximalYogiHandler.set_optimization_parameters": [], "tpu.tpu_embedding._ProximalYogiHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._ProximalYogiHandler.create_variables_and_ops": ["ops.init_ops.constant_initializer", "tpu.tpu_embedding._create_partitioned_variables", "ops.init_ops.zeros_initializer"], "tpu.tpu_embedding._ProximalYogiHandler.create_variables_and_ops.load_ops_fn": ["<builtin>.range", "<builtin>.zip", "framework.ops.colocate_with", "ops.tpu_ops.load_tpu_embedding_proximal_yogi_parameters"], "ops.tpu_ops.load_tpu_embedding_proximal_yogi_parameters": [], "tpu.tpu_embedding._ProximalYogiHandler.create_variables_and_ops.retrieve_ops_fn": ["framework.ops.colocate_with", "<builtin>.range", "ops.control_flow_ops.group", "<builtin>.zip", "ops.state_ops.assign", "ops.tpu_ops.retrieve_tpu_embedding_proximal_yogi_parameters"], "ops.tpu_ops.retrieve_tpu_embedding_proximal_yogi_parameters": [], "tpu.tpu_embedding._MomentumHandler.set_optimization_parameters": [], "tpu.tpu_embedding._MomentumHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._MomentumHandler.create_variables_and_ops": ["tpu.tpu_embedding._create_partitioned_variables", "ops.init_ops.zeros_initializer"], "tpu.tpu_embedding._MomentumHandler.create_variables_and_ops.load_ops_fn": ["ops.tpu_ops.load_tpu_embedding_momentum_parameters", "<builtin>.range", "<builtin>.zip", "framework.ops.colocate_with"], "ops.tpu_ops.load_tpu_embedding_momentum_parameters": [], "tpu.tpu_embedding._MomentumHandler.create_variables_and_ops.retrieve_ops_fn": ["framework.ops.colocate_with", "<builtin>.range", "ops.control_flow_ops.group", "ops.tpu_ops.retrieve_tpu_embedding_momentum_parameters", "<builtin>.zip", "ops.state_ops.assign"], "ops.tpu_ops.retrieve_tpu_embedding_momentum_parameters": [], "tpu.tpu_embedding._RMSPropHandler.set_optimization_parameters": [], "tpu.tpu_embedding._RMSPropHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._RMSPropHandler.create_variables_and_ops": ["tpu.tpu_embedding._create_partitioned_variables", "ops.init_ops.zeros_initializer"], "tpu.tpu_embedding._RMSPropHandler.create_variables_and_ops.load_ops_fn": ["ops.tpu_ops.load_tpu_embedding_rms_prop_parameters", "<builtin>.range", "<builtin>.zip", "framework.ops.colocate_with"], "ops.tpu_ops.load_tpu_embedding_rms_prop_parameters": [], "tpu.tpu_embedding._RMSPropHandler.create_variables_and_ops.retrieve_ops_fn": ["framework.ops.colocate_with", "<builtin>.range", "ops.tpu_ops.retrieve_tpu_embedding_rms_prop_parameters", "ops.control_flow_ops.group", "<builtin>.zip", "ops.state_ops.assign"], "ops.tpu_ops.retrieve_tpu_embedding_rms_prop_parameters": [], "tpu.tpu_embedding._FrequencyEstimatorHandler.set_optimization_parameters": [], "tpu.tpu_embedding._FrequencyEstimatorHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._FrequencyEstimatorHandler.create_variables_and_ops": ["tpu.tpu_embedding._create_partitioned_variables", "ops.init_ops.zeros_initializer", "<builtin>.ValueError"], "tpu.tpu_embedding._FrequencyEstimatorHandler.create_variables_and_ops.load_ops_fn": ["ops.tpu_ops.load_tpu_embedding_frequency_estimator_parameters", "<builtin>.range", "<builtin>.zip", "framework.ops.colocate_with"], "ops.tpu_ops.load_tpu_embedding_frequency_estimator_parameters": [], "tpu.tpu_embedding._FrequencyEstimatorHandler.create_variables_and_ops.retrieve_ops_fn": ["framework.ops.colocate_with", "ops.tpu_ops.retrieve_tpu_embedding_frequency_estimator_parameters", "<builtin>.range", "ops.control_flow_ops.group", "<builtin>.zip", "ops.state_ops.assign"], "ops.tpu_ops.retrieve_tpu_embedding_frequency_estimator_parameters": [], "tpu.tpu_embedding._StochasticGradientDescentHandler.set_optimization_parameters": [], "tpu.tpu_embedding._StochasticGradientDescentHandler.get_default_slot_variable_names": [], "tpu.tpu_embedding._StochasticGradientDescentHandler.create_variables_and_ops": [], "tpu.tpu_embedding._StochasticGradientDescentHandler.create_variables_and_ops.load_ops_fn": ["ops.tpu_ops.load_tpu_embedding_stochastic_gradient_descent_parameters", "<builtin>.enumerate", "framework.ops.colocate_with"], "ops.tpu_ops.load_tpu_embedding_stochastic_gradient_descent_parameters": [], "tpu.tpu_embedding._StochasticGradientDescentHandler.create_variables_and_ops.retrieve_ops_fn": ["framework.ops.colocate_with", "<builtin>.enumerate", "ops.control_flow_ops.group", "ops.state_ops.assign", "ops.tpu_ops.retrieve_tpu_embedding_stochastic_gradient_descent_parameters"], "ops.tpu_ops.retrieve_tpu_embedding_stochastic_gradient_descent_parameters": [], "tpu.tpu_embedding._create_device_fn.device_fn": ["platform.tf_logging.debug", "<builtin>.RuntimeError", "<builtin>.int", "re.match"], "tpu.tpu_embedding_gradient": [], "tpu.tpu_embedding_gradient.get_gradients_through_compute_gradients": ["<builtin>.zip", "collections.OrderedDict"], "tpu.tpu_embedding_gradient.create_dummy_table_variables": ["<builtin>.RuntimeError", "<builtin>.range", "<builtin>.len", "<builtin>.enumerate", "framework.ops.get_default_graph", "ops.variable_scope.get_variable", "ops.variables.variables_initializer", "collections.OrderedDict"], "tpu.tpu_embedding_gradient.hook_dummy_table_variables_to_activations": ["<builtin>.list", "collections.OrderedDict", "ops.tpu_ops.tpu_embedding_activations"], "ops.tpu_ops.tpu_embedding_activations": [], "tpu.tpu_embedding_gradient.get_gradients_through_dummy_table_variables": ["<builtin>.zip", "platform.tf_logging.warn", "<builtin>.any", "<builtin>.enumerate", "framework.ops.get_default_graph", "collections.OrderedDict", "ops.array_ops.zeros"], "tpu.tpu_embedding_v2": ["util.tf_export.tf_export"], "tpu.tpu_embedding_v2.TPUShardedVariable._in_graph_mode": [], "tpu.tpu_embedding_v2.TPUShardedVariable._unique_id": [], "tpu.tpu_embedding_v2.TPUShardedVariable._distribute_strategy": [], "tpu.tpu_embedding_v2.TPUShardedVariable._shared_name": [], "tpu.tpu_embedding_v2._add_key_attr": ["framework.attr_value_pb2.AttrValue", "util.compat.as_bytes"], "tpu.tpu_embedding_v2.TPUEmbedding.__init__": ["<builtin>.enumerate", "<builtin>.list", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.callable", "distribute.distribution_strategy_context.get_strategy", "tpu.tpu_embedding_v2.get_list_of_hosts", "util.nest.flatten"], "tpu.tpu_embedding_v2.get_list_of_hosts": ["<builtin>.len", "distribute.device_util.get_host_for_device"], "tpu.tpu_embedding_v2.TPUEmbedding.build": ["tpu.tpu_embedding_v2_utils.log_tpu_embedding_configuration", "absl.logging.info", "<builtin>.ValueError", "tpu.tpu_embedding_v2.TPUEmbedding.build.load_config", "tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots", "tpu.tpu_embedding_v2.TPUEmbedding._load_variables", "tpu.tpu_embedding_v2.TPUEmbedding._create_config_proto"], "tpu.tpu_embedding_v2.TPUEmbedding._create_config_proto": ["<builtin>.enumerate", "tpu.tpu_embedding_configuration_pb2.TPUEmbeddingConfiguration", "<builtin>.callable", "util.nest.flatten", "<builtin>.max"], "tpu.tpu_embedding_v2_utils.log_tpu_embedding_configuration": ["absl.logging.info", "<builtin>.str"], "tpu.tpu_embedding_v2.TPUEmbedding.build.load_config": ["tpu.tpu.initialize_system_for_tpu_embedding"], "tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots": ["tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots.create_variables", "ops.variable_scope.variable_creator_scope", "tpu.tpu_embedding_v2.make_sharded_variable_creator"], "tpu.tpu_embedding_v2.TPUEmbedding._load_variables": ["saved_model.save_context.in_save_context", "tpu.tpu_embedding_v2._load_variables_impl", "eager.context.executing_eagerly"], "tpu.tpu_embedding_v2.TPUEmbedding._maybe_build": ["tpu.tpu_embedding_v2.TPUEmbedding.build", "framework.ops.init_scope"], "tpu.tpu_embedding_v2.TPUEmbedding.embedding_tables": ["<builtin>.RuntimeError", "saved_model.save_context.in_save_context", "tpu.tpu_embedding_v2.TPUEmbedding._maybe_build"], "tpu.tpu_embedding_v2.TPUEmbedding._compute_per_table_gradients": ["absl.logging.warn", "<builtin>.type", "<builtin>.isinstance", "ops.array_ops.zeros", "util.nest.flatten_with_joined_string_paths", "<builtin>.ValueError", "util.nest.assert_same_structure", "ops.array_ops.expand_dims", "util.nest.flatten", "<builtin>.zip", "<builtin>.len"], "absl.logging.warn": [], "tpu.tpu_embedding_v2.TPUEmbedding.apply_gradients": ["tpu.tpu_embedding_v2.TPUEmbedding._compute_per_table_gradients", "<builtin>.RuntimeError", "tpu.tpu_embedding_v2._add_key_attr", "ops.array_ops.reshape", "ops.tpu_ops.send_tpu_embedding_gradients", "ops.math_ops.cast", "ops.array_ops.concat"], "tpu.tpu_embedding_v2.TPUEmbedding.dequeue": ["<builtin>.RuntimeError", "tpu.tpu_embedding_v2._add_key_attr", "ops.tpu_ops.recv_tpu_embedding_activations", "util.nest.flatten", "<builtin>.zip", "ops.array_ops.reshape", "util.nest.pack_sequence_as", "<builtin>.len"], "tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots.create_variables": ["tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots.create_variables.variable_creator"], "tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots.create_variables.getter": ["functools.partial", "ops.variables.Variable"], "tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots.create_variables.variable_creator": ["tracking.AutoTrackable._add_variable_with_custom_getter"], "tracking.AutoTrackable._add_variable_with_custom_getter": [], "tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots.create_variables.slot_creator": ["tpu.tpu_embedding_v2.TPUEmbedding._create_variables_and_slots.create_variables.variable_creator"], "tpu.tpu_embedding_v2.make_sharded_variable_creator": [], "tpu.tpu_embedding_v2._load_variables_impl": ["<builtin>.enumerate", "framework.ops.device", "tpu.tpu_embedding_v2._load_variables_impl.select_fn", "util.nest.map_structure", "<builtin>.len"], "tpu.tpu_embedding_v2.TPUEmbedding._retrieve_variables": ["saved_model.save_context.in_save_context", "tpu.tpu_embedding_v2._retrieve_variables_impl", "eager.context.executing_eagerly"], "tpu.tpu_embedding_v2._retrieve_variables_impl": ["<builtin>.enumerate", "framework.ops.device", "<builtin>.isinstance", "<builtin>.len"], "tpu.tpu_embedding_v2.TPUEmbedding._gather_saveables_for_checkpoint": [], "tpu.tpu_embedding_v2.TPUEmbedding._gather_saveables_for_checkpoint.factory": ["tpu.tpu_embedding_v2.TPUEmbeddingSaveable.__init__"], "tpu.tpu_embedding_v2.TPUEmbeddingSaveable.__init__": ["<builtin>.super"], "tpu.tpu_embedding_v2.TPUEmbedding._add_data_for_tensor": ["<builtin>.ValueError", "ops.math_ops.cast"], "tpu.tpu_embedding_v2.TPUEmbedding._add_data_for_sparse_tensor": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "ops.math_ops.cast"], "tpu.tpu_embedding_v2.TPUEmbedding._add_data_for_ragged_tensor": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "ops.math_ops.cast"], "tpu.tpu_embedding_v2.TPUEmbedding._generate_enqueue_op": ["<builtin>.enumerate", "<builtin>.type", "<builtin>.isinstance", "ops.array_ops.zeros", "<builtin>.ValueError", "tpu.tpu_embedding_v2.TPUEmbedding._add_data_for_tensor", "ops.tpu_ops.enqueue_tpu_embedding_ragged_tensor_batch", "ops.tpu_ops.enqueue_tpu_embedding_sparse_tensor_batch", "<builtin>.zip", "tpu.tpu_embedding_v2.TPUEmbedding._add_data_for_sparse_tensor", "tpu.tpu_embedding_v2.TPUEmbedding._add_data_for_ragged_tensor"], "tpu.tpu_embedding_v2.TPUEmbedding._raise_error_for_incorrect_control_flow_context": ["<builtin>.RuntimeError", "<builtin>.getattr", "framework.ops.get_default_graph", "<builtin>.isinstance"], "tpu.tpu_embedding_v2.TPUEmbedding._raise_error_for_non_direct_inputs": ["<builtin>.ValueError", "util.nest.flatten_with_joined_string_paths"], "tpu.tpu_embedding_v2.TPUEmbedding._raise_error_for_inputs_not_on_cpu": ["util.nest.flatten", "<builtin>.zip", "tpu.tpu_embedding_v2.TPUEmbedding._raise_error_for_inputs_not_on_cpu.check_device", "util.nest.is_sequence_or_composite"], "tpu.tpu_embedding_v2.TPUEmbedding._raise_error_for_inputs_not_on_cpu.check_device": ["<builtin>.ValueError", "device.DeviceSpec.from_string"], "tpu.tpu_embedding_v2.TPUEmbedding.enqueue": ["tpu.tpu_embedding_v2.TPUEmbedding._get_batch_size", "tpu.tpu_embedding_v2.TPUEmbedding._raise_error_for_non_direct_inputs", "util.nest.assert_same_structure", "tpu.tpu_embedding_v2._add_key_attr", "tpu.tpu_embedding_v2.TPUEmbedding._raise_error_for_incorrect_control_flow_context", "<builtin>.zip", "tpu.tpu_embedding_v2.TPUEmbedding._raise_error_for_inputs_not_on_cpu", "distribute.device_util.get_host_for_device", "framework.ops.get_default_graph", "tpu.tpu_embedding_v2.TPUEmbedding._maybe_build", "device.DeviceSpec.from_string", "distribute.distribute_utils.select_replica", "framework.ops.device", "tpu.tpu_embedding_v2.TPUEmbedding._generate_enqueue_op", "<builtin>.ValueError", "<builtin>.RuntimeError", "<builtin>.range", "tpu.tpu.outside_compilation", "<builtin>.len", "util.nest.flatten_with_joined_string_paths", "util.nest.flatten"], "tpu.tpu_embedding_v2.TPUEmbedding._get_batch_size": ["distribute.distribute_utils.select_replica", "<builtin>.ValueError", "<builtin>.range", "util.nest.flatten_with_joined_string_paths"], "tpu.tpu_embedding_v2.TPUEmbedding.enqueue.generate_enqueue_ops": ["framework.constant_op.constant", "tpu.tpu_embedding_v2.TPUEmbedding._generate_enqueue_op", "tpu.tpu_embedding_v2._add_key_attr", "framework.ops.get_default_graph", "ops.array_ops.where_v2"], "tpu.tpu_embedding_v2._load_variables_impl.select_fn": [], "tpu.tpu_embedding_v2._load_variables_impl.select_fn.select_or_zeros": ["ops.array_ops.zeros_like", "<builtin>.len"], "tpu.tpu_embedding_v2.TPUEmbeddingSaveable.before_save": ["tpu.tpu_embedding_v2.TPUEmbedding._retrieve_variables"], "tpu.tpu_embedding_v2.TPUEmbeddingSaveable.after_restore": ["tpu.tpu_embedding_v2.TPUEmbedding._load_variables"], "tpu.tpu_embedding_v2._ragged_embedding_lookup_with_reduce": ["ops.array_ops.ones_like", "ops.math_ops.sqrt", "ops.math_ops.reduce_sum", "ops.array_ops.expand_dims", "ops.embedding_ops.embedding_lookup_ragged"], "tpu.tpu_embedding_v2.cpu_embedding_lookup": ["<builtin>.isinstance", "util.nest.assert_same_structure", "<builtin>.zip", "ops.array_ops.scatter_nd", "util.nest.pack_sequence_as", "ops.array_ops.shape", "ops.array_ops.stack", "ops.embedding_ops.embedding_lookup_v2", "<builtin>.ValueError", "ops.sparse_ops.sparse_slice", "ops.math_ops.cast", "tpu.tpu_embedding_v2._ragged_embedding_lookup_with_reduce", "<builtin>.len", "<builtin>.type", "ops.embedding_ops.safe_embedding_lookup_sparse_v2", "util.nest.flatten_with_joined_string_paths", "ops.embedding_ops.embedding_lookup_sparse_v2", "util.nest.flatten", "ops.array_ops.gather"], "tpu.tpu_embedding_v2.extract_variable_info": ["<builtin>.callable", "<builtin>.isinstance", "<builtin>.ValueError"], "tpu.tpu_embedding_v2.make_sharded_variable_creator.sharded_variable_creator": ["tpu.tpu_embedding_v2.extract_variable_info", "util.tf_inspect.getargspec", "framework.ops.device", "<builtin>.enumerate", "sharded_variable.ShardedVariableMixin.__init__", "functools.partial", "tracking.base.ShardInfo", "<builtin>.len"], "sharded_variable.ShardedVariableMixin.__init__": [], "tpu.tpu_embedding_v2_utils": ["typing.TypeVar"], "typing.TypeVar": [], "tpu.tpu_embedding_v2_utils._Optimizer.__init__": ["<builtin>.isinstance", "<builtin>.callable", "<builtin>.ValueError"], "tpu.tpu_embedding_v2_utils._Optimizer": ["abc.abstractmethod"], "tpu.tpu_embedding_v2_utils._Optimizer._slot_names": [], "tpu.tpu_embedding_v2_utils._Optimizer._slot_initializers": [], "tpu.tpu_embedding_v2_utils._Optimizer._set_optimization_parameters": [], "tpu.tpu_embedding_v2_utils._Optimizer._load": [], "tpu.tpu_embedding_v2_utils._Optimizer._retrieve": [], "tpu.tpu_embedding_v2_utils._Optimizer._create_slots": ["<builtin>.zip", "tpu.tpu_embedding_v2_utils._Optimizer._slot_names", "tpu.tpu_embedding_v2_utils._Optimizer._slot_initializers"], "tpu.tpu_embedding_v2_utils.SGD.__init__": ["<builtin>.super"], "tpu.tpu_embedding_v2_utils.SGD._slot_names": [], "tpu.tpu_embedding_v2_utils.SGD._slot_initializers": [], "tpu.tpu_embedding_v2_utils.SGD._set_optimization_parameters": ["<builtin>.super"], "tpu.tpu_embedding_v2_utils.SGD._load": [], "tpu.tpu_embedding_v2_utils.SGD._retrieve": [], "tpu.tpu_embedding_v2_utils.Adagrad.__init__": ["<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding_v2_utils.Adagrad._slot_names": [], "tpu.tpu_embedding_v2_utils.Adagrad._slot_initializers": ["ops.init_ops_v2.Constant"], "ops.init_ops_v2.Constant": [], "tpu.tpu_embedding_v2_utils.Adagrad._set_optimization_parameters": ["<builtin>.super"], "tpu.tpu_embedding_v2_utils.Adagrad._load": [], "tpu.tpu_embedding_v2_utils.Adagrad._retrieve": [], "tpu.tpu_embedding_v2_utils.FTRL.__init__": ["<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding_v2_utils.FTRL._slot_names": [], "tpu.tpu_embedding_v2_utils.FTRL._slot_initializers": ["ops.init_ops_v2.Constant"], "tpu.tpu_embedding_v2_utils.FTRL._set_optimization_parameters": ["<builtin>.super"], "tpu.tpu_embedding_v2_utils.FTRL._load": [], "tpu.tpu_embedding_v2_utils.FTRL._retrieve": [], "tpu.tpu_embedding_v2_utils.Adam.__init__": ["<builtin>.super", "<builtin>.ValueError"], "tpu.tpu_embedding_v2_utils.Adam._slot_names": [], "tpu.tpu_embedding_v2_utils.Adam._slot_initializers": ["ops.init_ops_v2.Constant"], "tpu.tpu_embedding_v2_utils.Adam._set_optimization_parameters": ["<builtin>.super"], "tpu.tpu_embedding_v2_utils.Adam._load": [], "tpu.tpu_embedding_v2_utils.Adam._retrieve": [], "tpu.tpu_embedding_v2_utils.TableConfig.__init__": ["ops.init_ops_v2.TruncatedNormal", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.ValueError", "math.sqrt"], "ops.init_ops_v2.TruncatedNormal": [], "tpu.tpu_embedding_v2_utils.TableConfig.__repr__": ["math.isclose", "math.sqrt", "<builtin>.isinstance", "typing.cast"], "typing.cast": [], "math.isclose": [], "tpu.tpu_embedding_v2_utils.FeatureConfig.__init__": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError"], "tpu.tpu_embedding_v2_utils.FeatureConfig.__repr__": [], "tpu.tpu_estimator": [], "tpu.tpu_feed": [], "tpu.tpu_feed.partition_or_replicate_on_host": ["numpy.divmod", "<builtin>.zip", "itertools.repeat", "<builtin>.len", "util.nest.flatten", "<builtin>.enumerate", "ops.array_ops.split", "numpy.array", "<builtin>.int"], "numpy.divmod": [], "tpu.tpu_feed._tag_sharding_attribute_for_dequeued_tensor": ["numpy.arange", "xla_sharding.xla_sharding.assign_device", "xla_sharding.xla_sharding.tile", "numpy.prod", "xla_sharding.xla_sharding.replicate"], "tpu.tpu_feed.tag_sharding_attribute_for_dequeued_tensors": ["util.nest.map_structure_up_to", "util.nest.assert_shallow_structure"], "tpu.tpu_feed.InfeedQueue.__init__": ["tpu.tpu_feed.InfeedQueue.set_tuple_types", "<builtin>.len", "tpu.tpu_feed.InfeedQueue.set_shard_dimensions", "tpu.tpu_feed.InfeedQueue.set_tuple_shapes", "six.moves.xrange", "<builtin>.ValueError", "tpu.tpu_feed.InfeedQueue._validate", "tpu.tpu_sharding.ShardingPolicy"], "tpu.tpu_sharding.ShardingPolicy": [], "tpu.tpu_feed.InfeedQueue.set_tuple_types": ["<builtin>.str", "<builtin>.TypeError", "<builtin>.zip", "<builtin>.len", "<builtin>.ValueError", "framework.dtypes.as_dtype"], "tpu.tpu_feed.InfeedQueue.set_tuple_shapes": ["<builtin>.str", "framework.tensor_shape.as_shape", "<builtin>.TypeError", "<builtin>.zip", "<builtin>.len", "<builtin>.ValueError", "tpu.tpu_feed.InfeedQueue._validate"], "tpu.tpu_feed.InfeedQueue.set_shard_dimensions": ["<builtin>.str", "<builtin>.zip", "<builtin>.len", "<builtin>.ValueError", "tpu.tpu_feed.InfeedQueue._validate"], "tpu.tpu_feed.InfeedQueue._validate": ["<builtin>.zip"], "tpu.tpu_feed.InfeedQueue.number_of_tuple_elements": ["<builtin>.len"], "tpu.tpu_feed.InfeedQueue.tuple_types": [], "tpu.tpu_feed.InfeedQueue.tuple_shapes": [], "tpu.tpu_feed.InfeedQueue.sharding_policies": [], "tpu.tpu_feed.InfeedQueue.shard_dimensions": [], "tpu.tpu_feed.InfeedQueue.number_of_shards": [], "tpu.tpu_feed.InfeedQueue.set_number_of_shards": ["tpu.tpu_feed.InfeedQueue._validate"], "tpu.tpu_feed.InfeedQueue.set_configuration_from_input_tensors": ["<builtin>.str", "tpu.tpu_feed.InfeedQueue.set_tuple_types", "<builtin>.len", "tpu.tpu_feed.InfeedQueue.set_tuple_shapes", "<builtin>.ValueError"], "tpu.tpu_feed.InfeedQueue.set_configuration_from_sharded_input_tensors": ["<builtin>.str", "tpu.tpu_feed.InfeedQueue.set_tuple_types", "<builtin>.TypeError", "<builtin>.zip", "<builtin>.len", "tpu.tpu_feed.InfeedQueue.set_tuple_shapes", "six.moves.xrange", "<builtin>.ValueError", "tpu.tpu_feed.InfeedQueue.set_number_of_shards"], "tpu.tpu_feed.InfeedQueue.freeze": ["<builtin>.ValueError", "tpu.tpu_feed.InfeedQueue._validate"], "tpu.tpu_feed.InfeedQueue.generate_dequeue_op": ["<builtin>.zip", "tpu.tpu_feed.InfeedQueue.freeze", "ops.tpu_ops.infeed_dequeue_tuple", "tpu.tpu_name_util.core", "<builtin>.ValueError", "tpu.tpu_feed.tag_sharding_attribute_for_dequeued_tensors", "framework.ops.device"], "ops.tpu_ops.infeed_dequeue_tuple": ["<builtin>.TypeError", "ops.gen_tpu_ops.infeed_dequeue_tuple", "<builtin>.list"], "tpu.tpu_feed.InfeedQueue._generate_enqueue_op": ["<builtin>.str", "six.moves.xrange", "ops.tpu_ops.infeed_enqueue_tuple", "<builtin>.ValueError", "framework.ops.colocate_with", "framework.ops.device"], "ops.tpu_ops.infeed_enqueue_tuple": [], "tpu.tpu_feed.InfeedQueue.generate_enqueue_ops": ["tpu.tpu_feed.InfeedQueue.set_configuration_from_sharded_input_tensors", "<builtin>.zip", "tpu.tpu_feed.InfeedQueue._generate_enqueue_op", "tpu.tpu_feed.InfeedQueue.freeze", "six.moves.xrange", "<builtin>.ValueError", "tpu.tpu_feed.InfeedQueue.generate_enqueue_ops.<lambda1>"], "tpu.tpu_feed.InfeedQueue.generate_enqueue_ops.<lambda1>": [], "tpu.tpu_feed.InfeedQueue._default_placement_function": [], "tpu.tpu_feed.InfeedQueue._default_ordinal_function": [], "tpu.tpu_feed.InfeedQueue.split_inputs_and_generate_enqueue_ops": ["<builtin>.zip", "tpu.tpu_feed.InfeedQueue.set_configuration_from_input_tensors", "tpu.tpu_feed.InfeedQueue._default_placement_function", "tpu.tpu_feed.InfeedQueue.freeze", "tpu.tpu_feed.InfeedQueue._generate_enqueue_op", "tpu.tpu_feed.InfeedQueue.split_inputs_and_generate_enqueue_ops.split_fn", "six.moves.xrange", "tpu.tpu_feed.InfeedQueue.split_inputs_and_generate_enqueue_ops._ordinal_function_from_map", "<builtin>.ValueError", "tpu.tpu_feed.InfeedQueue._default_ordinal_function", "tpu.tpu_feed.InfeedQueue.split_inputs_and_generate_enqueue_ops._placement_function_from_map"], "tpu.tpu_feed.InfeedQueue.split_inputs_and_generate_enqueue_ops._placement_function_from_map": [], "tpu.tpu_feed.InfeedQueue.split_inputs_and_generate_enqueue_ops._ordinal_function_from_map": [], "tpu.tpu_feed.InfeedQueue.split_inputs_and_generate_enqueue_ops.split_fn": ["framework.ops.colocate_with", "ops.array_ops.split"], "tpu.tpu_feed._PartitionedInfeedQueue.__init__": ["<builtin>.super"], "tpu.tpu_feed._PartitionedInfeedQueue.generate_dequeue_op": ["<builtin>.zip", "tpu.tpu_feed.InfeedQueue.freeze", "ops.tpu_ops.infeed_dequeue_tuple", "tpu.tpu_name_util.core", "<builtin>.ValueError", "tpu.tpu_feed.tag_sharding_attribute_for_dequeued_tensors", "framework.ops.device"], "tpu.tpu_feed._PartitionedInfeedQueue.generate_enqueue_ops": ["<builtin>.next", "tpu.tpu_feed.InfeedQueue.set_configuration_from_sharded_input_tensors", "<builtin>.zip", "<builtin>.len", "six.moves.xrange", "<builtin>.range", "ops.tpu_ops.infeed_enqueue_tuple", "tpu.tpu_feed._PartitionedInfeedQueue._check_dims_and_partition_or_replicate_on_host", "util.nest.flatten_up_to", "<builtin>.iter", "framework.ops.device"], "tpu.tpu_feed._PartitionedInfeedQueue._check_dims_and_partition_or_replicate_on_host": ["tpu.tpu_feed._PartitionedInfeedQueue._check_input_partition_dims", "tpu.tpu_feed.partition_or_replicate_on_host"], "tpu.tpu_feed._PartitionedInfeedQueue._check_input_partition_dims": ["numpy.array", "<builtin>.ValueError"], "tpu.tpu_function": ["tpu.tpu_function.TpuContext.__init__", "contextlib.contextmanager"], "tpu.tpu_function.TpuContext.__init__": [], "tpu.tpu_function.TpuContext.number_of_shards": [], "tpu.tpu_function.TpuContext.set_number_of_shards": [], "tpu.tpu_function.on_device_training_loop": ["<builtin>.setattr"], "tpu.tpu_name_util": ["util.tf_export.tf_export"], "tpu.tpu_optimizer": [], "tpu.tpu_optimizer.CrossShardOptimizer.__init__": ["<builtin>.ValueError", "<builtin>.super", "<builtin>.TypeError", "<builtin>.isinstance"], "tpu.tpu_optimizer.CrossShardOptimizer._verify_and_get_subgroup_size": ["<builtin>.ValueError", "<builtin>.all", "<builtin>.set", "<builtin>.len", "<builtin>.isinstance", "<builtin>.range"], "tpu.tpu_optimizer.CrossShardOptimizer.compute_gradients": ["tpu.tpu_optimizer.CrossShardOptimizer._verify_and_get_subgroup_size", "platform.tf_logging.warning", "tpu.tpu_function.get_tpu_context"], "tpu.tpu_optimizer.CrossShardOptimizer.apply_gradients": ["framework.ops.colocate_with", "ops.tpu_ops.cross_replica_sum"], "tpu.tpu_optimizer.CrossShardOptimizer.get_slot": [], "tpu.tpu_optimizer.CrossShardOptimizer.get_slot_names": [], "tpu.tpu_optimizer.CrossShardOptimizer.variables": [], "tpu.tpu_sharding": [], "tpu.tpu_sharding.ShardingPolicy.__init__": [], "tpu.tpu_sharding.ShardingPolicy.__str__": [], "tpu.tpu_sharding.ShardingPolicy._fill_default_values": ["framework.tensor_shape.as_dimension"], "tpu.tpu_sharding.ShardingPolicy.freeze": ["tpu.tpu_sharding.ShardingPolicy._fill_default_values"], "tpu.tpu_sharding.ShardingPolicy.number_of_shards": [], "tpu.tpu_sharding.ShardingPolicy.set_number_of_shards": ["<builtin>.ValueError"], "tpu.tpu_sharding.ShardingPolicy.number_of_partitions": [], "tpu.tpu_sharding.ShardingPolicy.set_number_of_partitions": ["<builtin>.ValueError"], "tpu.tpu_sharding.ShardingPolicy.shard_dimension": [], "tpu.tpu_sharding.ShardingPolicy.set_shard_dimension": ["framework.tensor_shape.as_dimension", "<builtin>.ValueError"], "tpu.tpu_sharding.ShardingPolicy.merge": ["tpu.tpu_sharding.ShardingPolicy.set_number_of_shards", "tpu.tpu_sharding.ShardingPolicy.set_shard_dimension"], "tpu.tpu_sharding.ShardingPolicy.get_unpartitioned_shape": ["framework.tensor_shape.as_shape", "<builtin>.ValueError"], "tpu.tpu_sharding.ShardingPolicy.get_sharded_shape": ["framework.tensor_shape.as_shape", "framework.tensor_shape.TensorShape", "<builtin>.ValueError"], "tpu.tpu_sharding.ShardingPolicy._unshard_shape": ["framework.tensor_shape.as_shape", "framework.tensor_shape.TensorShape", "<builtin>.ValueError"], "tpu.tpu_sharding.ShardingPolicy.get_unsharded_shape": ["<builtin>.ValueError", "six.moves.xrange", "tpu.tpu_sharding.ShardingPolicy._unshard_shape", "tpu.tpu_sharding.ShardingPolicy._fill_default_values", "<builtin>.len"], "tpu.tpu_strategy_util": ["util.tf_export.tf_export"], "tpu.tpu_strategy_util.initialize_tpu_system._tpu_init_fn": ["tpu.tpu.initialize_system"], "tpu.tpu_strategy_util.get_initialized_tpu_systems": [], "tpu.tpu_strategy_util.shutdown_tpu_system": ["tpu.tpu.shutdown_system", "cluster_resolver.tpu_cluster_resolver.TPUClusterResolver", "platform.tf_logging.warning", "<builtin>.isinstance", "framework.ops.executing_eagerly_outside_functions", "<builtin>.RuntimeError", "tpu.tpu_strategy_util.shutdown_tpu_system._tpu_shutdown_fn", "device.DeviceSpec.from_string", "framework.ops.device", "tpu.tpu._tpu_system_device_name", "protobuf.config_pb2.ConfigProto", "framework.ops.Graph", "platform.tf_logging.info", "eager.function.defun", "eager.context.context", "eager.context.executing_eagerly", "client.session.Session", "util.compat.as_text"], "tpu.tpu_strategy_util.shutdown_tpu_system._tpu_shutdown_fn": ["tpu.tpu.shutdown_system"], "tpu.tpu_system_metadata": [], "tpu.tpu_system_metadata.TPUSystemMetadata.__new__": ["<builtin>.super"], "tpu.tpu_system_metadata.get_session_config_with_timeout": ["protobuf.config_pb2.ConfigProto"], "tpu.tpu_system_metadata._obtain_topology": ["tpu.tpu_system_metadata.get_session_config_with_timeout", "framework.ops.Graph", "platform.tf_logging.info", "client.session.Session", "tpu.tpu.initialize_system", "<builtin>.ValueError"], "tpu.tpu_system_metadata._query_tpu_system_metadata._sort_key": ["device.DeviceSpec.from_string"], "tpu.training_loop": [], "tpu.training_loop.while_loop": ["ops.array_ops.constant", "<builtin>.TypeError", "ops.control_flow_ops.while_loop", "framework.ops.convert_to_tensor", "<builtin>.str", "xla.xla.check_function_argument_count", "<builtin>.len"], "tpu.training_loop.while_loop.condition_wrapper": ["tpu.training_loop.repeat.cond"], "tpu.training_loop.repeat.cond": [], "tpu.training_loop.while_loop.body_wrapper": ["ops.array_ops.constant", "<builtin>.TypeError", "framework.ops.get_default_graph", "tpu.tensor_tracer.TensorTracer", "ops.control_flow_ops.tuple", "<builtin>.list", "framework.ops.convert_to_tensor", "tpu.tpu_function.get_tpu_context", "tpu.training_loop.repeat.body_wrapper", "tensor_tracer.TensorTracer.is_enabled", "<builtin>.isinstance", "<builtin>.ValueError"], "tpu.training_loop.repeat.body_wrapper": ["tpu.training_loop.repeat._convert_to_list"], "tpu.training_loop.repeat._convert_to_list": ["<builtin>.isinstance", "<builtin>.list"], "tpu.util": [], "tpu._tpu_estimator_embedding": [], "training.adadelta": [], "training.adadelta.AdadeltaOptimizer.__init__": ["<builtin>.super"], "training.adadelta.AdadeltaOptimizer._create_slots": ["optimizer.Optimizer._zeros_slot"], "optimizer.Optimizer._zeros_slot": [], "training.adadelta.AdadeltaOptimizer._prepare": ["framework.ops.convert_to_tensor", "optimizer.Optimizer._call_if_callable"], "optimizer.Optimizer._call_if_callable": [], "training.adadelta.AdadeltaOptimizer._apply_dense": ["optimizer.Optimizer.get_slot", "ops.math_ops.cast", "training.training_ops.apply_adadelta"], "optimizer.Optimizer.get_slot": [], "training.training_ops.apply_adadelta": [], "training.adadelta.AdadeltaOptimizer._resource_apply_dense": ["optimizer.Optimizer.get_slot", "ops.math_ops.cast", "training.training_ops.resource_apply_adadelta"], "training.training_ops.resource_apply_adadelta": [], "training.adadelta.AdadeltaOptimizer._apply_sparse": ["optimizer.Optimizer.get_slot", "ops.math_ops.cast", "training.training_ops.sparse_apply_adadelta"], "training.training_ops.sparse_apply_adadelta": [], "training.adadelta.AdadeltaOptimizer._resource_apply_sparse": ["training.training_ops.resource_sparse_apply_adadelta", "optimizer.Optimizer.get_slot", "ops.math_ops.cast"], "training.training_ops.resource_sparse_apply_adadelta": [], "training.adagrad": [], "training.adagrad.AdagradOptimizer.__init__": ["<builtin>.super", "<builtin>.ValueError"], "training.adagrad.AdagradOptimizer._create_slots": ["training.adagrad.AdagradOptimizer._init_constant_op", "optimizer.Optimizer._get_or_make_slot_with_initializer", "ops.init_ops.constant_initializer"], "training.adagrad.AdagradOptimizer._init_constant_op": [], "optimizer.Optimizer._get_or_make_slot_with_initializer": [], "training.adagrad.AdagradOptimizer._init_constant_op.init": ["ops.math_ops.cast", "ops.gen_array_ops.fill", "ops.array_ops.shape"], "training.adagrad.AdagradOptimizer._prepare": ["framework.ops.convert_to_tensor", "optimizer.Optimizer._call_if_callable"], "training.adagrad.AdagradOptimizer._apply_dense": ["optimizer.Optimizer.get_slot", "training.training_ops.apply_adagrad", "ops.math_ops.cast"], "training.training_ops.apply_adagrad": [], "training.adagrad.AdagradOptimizer._resource_apply_dense": ["optimizer.Optimizer.get_slot", "ops.math_ops.cast", "training.training_ops.resource_apply_adagrad"], "training.training_ops.resource_apply_adagrad": [], "training.adagrad.AdagradOptimizer._apply_sparse": ["optimizer.Optimizer.get_slot", "training.training_ops.sparse_apply_adagrad", "ops.math_ops.cast"], "training.training_ops.sparse_apply_adagrad": [], "training.adagrad.AdagradOptimizer._resource_apply_sparse": ["optimizer.Optimizer.get_slot", "training.training_ops.resource_sparse_apply_adagrad", "ops.math_ops.cast"], "training.training_ops.resource_sparse_apply_adagrad": [], "training.adagrad_da": [], "training.adagrad_da.AdagradDAOptimizer.__init__": ["<builtin>.super", "<builtin>.ValueError"], "training.adagrad_da.AdagradDAOptimizer._create_slots": ["framework.ops.colocate_with", "framework.constant_op.constant", "optimizer.Optimizer._get_or_make_slot"], "optimizer.Optimizer._get_or_make_slot": [], "training.adagrad_da.AdagradDAOptimizer._prepare": ["framework.ops.colocate_with", "framework.ops.convert_to_tensor", "ops.array_ops.identity"], "training.adagrad_da.AdagradDAOptimizer._apply_dense": ["training.training_ops.apply_adagrad_da", "ops.math_ops.cast", "framework.ops.device", "optimizer.Optimizer.get_slot", "ops.array_ops.identity"], "training.training_ops.apply_adagrad_da": [], "training.adagrad_da.AdagradDAOptimizer._resource_apply_dense": ["training.training_ops.resource_apply_adagrad_da", "ops.math_ops.cast", "framework.ops.device", "optimizer.Optimizer.get_slot", "ops.array_ops.identity"], "training.training_ops.resource_apply_adagrad_da": [], "training.adagrad_da.AdagradDAOptimizer._apply_sparse": ["training.training_ops.sparse_apply_adagrad_da", "ops.math_ops.cast", "framework.ops.device", "optimizer.Optimizer.get_slot", "ops.array_ops.identity"], "training.training_ops.sparse_apply_adagrad_da": [], "training.adagrad_da.AdagradDAOptimizer._resource_apply_sparse": ["ops.math_ops.cast", "training.training_ops.resource_sparse_apply_adagrad_da", "framework.ops.device", "optimizer.Optimizer.get_slot", "ops.array_ops.identity"], "training.training_ops.resource_sparse_apply_adagrad_da": [], "training.adam": [], "training.adam.AdamOptimizer.__init__": ["<builtin>.super"], "training.adam.AdamOptimizer._get_beta_accumulators": ["framework.ops.get_default_graph", "eager.context.executing_eagerly", "optimizer.Optimizer._get_non_slot_variable", "framework.ops.init_scope"], "optimizer.Optimizer._get_non_slot_variable": [], "training.adam.AdamOptimizer._create_slots": ["optimizer.Optimizer._zeros_slot", "optimizer.Optimizer._create_non_slot_variable", "<builtin>.min"], "training.adam.AdamOptimizer._create_slots.<lambda1>": [], "optimizer.Optimizer._create_non_slot_variable": [], "training.adam.AdamOptimizer._prepare": ["optimizer.Optimizer._call_if_callable", "framework.ops.convert_to_tensor"], "training.adam.AdamOptimizer._apply_dense": ["training.adam.AdamOptimizer._get_beta_accumulators", "training.training_ops.apply_adam", "ops.math_ops.cast", "optimizer.Optimizer.get_slot"], "training.training_ops.apply_adam": [], "training.adam.AdamOptimizer._resource_apply_dense": ["training.adam.AdamOptimizer._get_beta_accumulators", "training.training_ops.resource_apply_adam", "ops.math_ops.cast", "optimizer.Optimizer.get_slot"], "training.training_ops.resource_apply_adam": [], "training.adam.AdamOptimizer._apply_sparse_shared": ["ops.math_ops.cast", "optimizer.Optimizer.get_slot", "training.adam.AdamOptimizer._resource_scatter_add", "ops.state_ops.assign", "framework.ops.control_dependencies", "ops.state_ops.assign_sub", "training.adam.AdamOptimizer._get_beta_accumulators", "ops.control_flow_ops.group", "ops.math_ops.sqrt"], "training.adam.AdamOptimizer._resource_scatter_add": ["framework.ops.control_dependencies", "ops.resource_variable_ops.resource_scatter_add"], "training.adam.AdamOptimizer._apply_sparse": ["training.adam.AdamOptimizer._apply_sparse_shared"], "training.adam.AdamOptimizer._apply_sparse.<lambda1>": ["ops.state_ops.scatter_add"], "ops.resource_variable_ops.resource_scatter_add": [], "training.adam.AdamOptimizer._resource_apply_sparse": ["training.adam.AdamOptimizer._apply_sparse_shared"], "training.adam.AdamOptimizer._finish": ["training.adam.AdamOptimizer._get_beta_accumulators", "framework.ops.control_dependencies", "framework.ops.colocate_with", "ops.control_flow_ops.group"], "training.basic_loops": ["util.tf_export.tf_export"], "training.basic_loops.basic_train_loop": [], "training.basic_session_run_hooks": [], "training.basic_session_run_hooks._HookTimer.__init__": [], "training.basic_session_run_hooks._HookTimer.reset": [], "training.basic_session_run_hooks._HookTimer.should_trigger_for_step": [], "training.basic_session_run_hooks._HookTimer.update_last_triggered_step": [], "training.basic_session_run_hooks._HookTimer.last_triggered_step": [], "training.basic_session_run_hooks.SecondOrStepTimer.__init__": ["training.basic_session_run_hooks.SecondOrStepTimer.reset", "<builtin>.ValueError", "<builtin>.super"], "training.basic_session_run_hooks.SecondOrStepTimer.reset": [], "training.basic_session_run_hooks.SecondOrStepTimer.should_trigger_for_step": ["time.time"], "training.basic_session_run_hooks.SecondOrStepTimer.update_last_triggered_step": ["time.time"], "training.basic_session_run_hooks.SecondOrStepTimer.last_triggered_step": [], "training.basic_session_run_hooks.NeverTriggerTimer.should_trigger_for_step": [], "training.basic_session_run_hooks.NeverTriggerTimer.update_last_triggered_step": [], "training.basic_session_run_hooks.NeverTriggerTimer.last_triggered_step": [], "training.basic_session_run_hooks.LoggingTensorHook.__init__": ["<builtin>.sorted", "<builtin>.ValueError", "training.basic_session_run_hooks.SecondOrStepTimer.__init__", "training.basic_session_run_hooks._HookTimer.__init__", "<builtin>.isinstance"], "training.basic_session_run_hooks.LoggingTensorHook.begin": ["training.basic_session_run_hooks._as_graph_element"], "training.basic_session_run_hooks._as_graph_element": ["framework.ops.get_default_graph", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.hasattr"], "training.basic_session_run_hooks.LoggingTensorHook.before_run": ["training.session_run_hook.SessionRunArgs"], "training.basic_session_run_hooks.LoggingTensorHook._log_tensors": ["platform.tf_logging.info", "numpy.set_printoptions", "numpy.get_printoptions"], "training.basic_session_run_hooks.LoggingTensorHook.after_run": ["training.basic_session_run_hooks.LoggingTensorHook._log_tensors"], "training.basic_session_run_hooks.LoggingTensorHook.end": ["training.basic_session_run_hooks.LoggingTensorHook._log_tensors"], "training.basic_session_run_hooks.get_or_create_steps_per_run_variable": ["ops.init_ops.ones_initializer", "<builtin>.RuntimeError", "framework.ops.get_default_graph", "ops.variable_scope.get_variable", "ops.variable_scope.variable_scope", "<builtin>.len"], "training.basic_session_run_hooks._MultiStepStopAtStepHook.__init__": ["<builtin>.ValueError"], "training.basic_session_run_hooks._MultiStepStopAtStepHook.begin": ["<builtin>.RuntimeError", "training.training_util.get_global_step", "training.basic_session_run_hooks.get_or_create_steps_per_run_variable"], "training.basic_session_run_hooks._MultiStepStopAtStepHook._update_steps_per_run_variable": ["<builtin>.min"], "training.basic_session_run_hooks._MultiStepStopAtStepHook.after_create_session": ["training.basic_session_run_hooks._MultiStepStopAtStepHook._update_steps_per_run_variable"], "training.basic_session_run_hooks._MultiStepStopAtStepHook.after_run": ["training.basic_session_run_hooks._MultiStepStopAtStepHook._update_steps_per_run_variable"], "training.basic_session_run_hooks.StopAtStepHook.__init__": ["<builtin>.ValueError"], "training.basic_session_run_hooks.StopAtStepHook.begin": ["training.training_util._get_or_create_global_step_read", "<builtin>.RuntimeError"], "training.basic_session_run_hooks.StopAtStepHook.after_create_session": [], "training.basic_session_run_hooks.StopAtStepHook.before_run": ["training.session_run_hook.SessionRunArgs"], "training.basic_session_run_hooks.StopAtStepHook.after_run": [], "training.basic_session_run_hooks.CheckpointSaverListener.begin": [], "training.basic_session_run_hooks.CheckpointSaverListener.before_save": [], "training.basic_session_run_hooks.CheckpointSaverListener.after_save": [], "training.basic_session_run_hooks.CheckpointSaverListener.end": [], "training.basic_session_run_hooks.CheckpointSaverHook.__init__": ["platform.tf_logging.info", "<builtin>.ValueError", "os.path.join", "training.basic_session_run_hooks.SecondOrStepTimer.__init__"], "training.basic_session_run_hooks.CheckpointSaverHook._set_steps_per_run": [], "training.basic_session_run_hooks.CheckpointSaverHook.begin": ["training.training_util._get_or_create_global_step_read", "summary_io.SummaryWriterCache.get", "<builtin>.RuntimeError"], "training.basic_session_run_hooks.CheckpointSaverHook.after_create_session": ["training.basic_session_run_hooks.CheckpointSaverHook._get_saver", "training.training_util.write_graph", "framework.meta_graph.create_meta_graph_def", "framework.ops.get_default_graph", "training.basic_session_run_hooks.CheckpointSaverHook._save", "training.basic_session_run_hooks.SecondOrStepTimer.update_last_triggered_step"], "training.basic_session_run_hooks.CheckpointSaverHook._get_saver": ["framework.ops.get_collection", "<builtin>.RuntimeError", "<builtin>.len"], "training.basic_session_run_hooks.CheckpointSaverHook._save": ["platform.tf_logging.info", "util.event_pb2.SessionLog", "training.basic_session_run_hooks.CheckpointSaverHook._get_saver"], "training.basic_session_run_hooks.CheckpointSaverHook.before_run": ["training.session_run_hook.SessionRunArgs"], "training.basic_session_run_hooks.CheckpointSaverHook.after_run": ["training.basic_session_run_hooks.SecondOrStepTimer.should_trigger_for_step", "training.basic_session_run_hooks.CheckpointSaverHook._save", "training.basic_session_run_hooks.SecondOrStepTimer.update_last_triggered_step"], "training.basic_session_run_hooks.CheckpointSaverHook.end": ["training.basic_session_run_hooks.SecondOrStepTimer.last_triggered_step", "training.basic_session_run_hooks.CheckpointSaverHook._save"], "training.basic_session_run_hooks.StepCounterHook.__init__": ["<builtin>.ValueError", "training.basic_session_run_hooks.SecondOrStepTimer.__init__"], "training.basic_session_run_hooks.StepCounterHook._set_steps_per_run": [], "training.basic_session_run_hooks.StepCounterHook.begin": ["training.training_util._get_or_create_global_step_read", "summary_io.SummaryWriterCache.get", "<builtin>.RuntimeError", "training.training_util.get_global_step"], "training.basic_session_run_hooks.StepCounterHook.before_run": ["training.session_run_hook.SessionRunArgs"], "training.basic_session_run_hooks.StepCounterHook._log_and_record": ["platform.tf_logging.info", "framework.summary_pb2.Summary", "summary_pb2.Summary.Value"], "summary_pb2.Summary.Value": [], "framework.summary_pb2.Summary": [], "training.basic_session_run_hooks.StepCounterHook.after_run": ["training.basic_session_run_hooks.SecondOrStepTimer.should_trigger_for_step", "platform.tf_logging.log_first_n", "training.basic_session_run_hooks.StepCounterHook._log_and_record", "training.basic_session_run_hooks.SecondOrStepTimer.update_last_triggered_step"], "training.basic_session_run_hooks.NanLossDuringTrainingError.__str__": [], "training.basic_session_run_hooks.NanTensorHook.__init__": [], "training.basic_session_run_hooks.NanTensorHook.before_run": ["training.session_run_hook.SessionRunArgs"], "training.basic_session_run_hooks.NanTensorHook.after_run": ["platform.tf_logging.error", "platform.tf_logging.warning", "numpy.isnan"], "training.basic_session_run_hooks.SummarySaverHook.__init__": ["<builtin>.ValueError", "training.basic_session_run_hooks.SecondOrStepTimer.__init__"], "training.basic_session_run_hooks.SummarySaverHook.begin": ["training.training_util._get_or_create_global_step_read", "summary_io.SummaryWriterCache.get", "<builtin>.RuntimeError"], "training.basic_session_run_hooks.SummarySaverHook.before_run": ["training.basic_session_run_hooks.SecondOrStepTimer.should_trigger_for_step", "training.basic_session_run_hooks.SummarySaverHook._get_summary_op", "training.session_run_hook.SessionRunArgs"], "training.basic_session_run_hooks.SummarySaverHook._get_summary_op": ["<builtin>.isinstance"], "training.basic_session_run_hooks.SummarySaverHook.after_run": ["util.event_pb2.SessionLog", "training.basic_session_run_hooks.SecondOrStepTimer.update_last_triggered_step"], "training.basic_session_run_hooks.SummarySaverHook.end": [], "training.basic_session_run_hooks.GlobalStepWaiterHook.__init__": [], "training.basic_session_run_hooks.GlobalStepWaiterHook.begin": ["training.training_util._get_or_create_global_step_read", "<builtin>.RuntimeError"], "training.basic_session_run_hooks.GlobalStepWaiterHook.before_run": ["platform.tf_logging.info", "time.sleep"], "training.basic_session_run_hooks.FinalOpsHook.__init__": [], "training.basic_session_run_hooks.FinalOpsHook.final_ops_values": [], "training.basic_session_run_hooks.FinalOpsHook.end": ["platform.tf_logging.warning"], "training.basic_session_run_hooks.FeedFnHook.__init__": [], "training.basic_session_run_hooks.FeedFnHook.before_run": ["training.session_run_hook.SessionRunArgs"], "training.basic_session_run_hooks.ProfilerHook.__init__": ["os.path.join", "summary_io.SummaryWriterCache.get", "training.basic_session_run_hooks.SecondOrStepTimer.__init__"], "training.basic_session_run_hooks.ProfilerHook.begin": ["training.training_util._get_or_create_global_step_read", "<builtin>.RuntimeError"], "training.basic_session_run_hooks.ProfilerHook.before_run": ["training.basic_session_run_hooks.SecondOrStepTimer.should_trigger_for_step", "training.session_run_hook.SessionRunArgs", "protobuf.config_pb2.RunOptions"], "training.basic_session_run_hooks.ProfilerHook.after_run": ["training.basic_session_run_hooks.ProfilerHook._save", "training.basic_session_run_hooks.SecondOrStepTimer.update_last_triggered_step"], "training.basic_session_run_hooks.ProfilerHook._save": ["platform.tf_logging.info", "client.timeline.Timeline", "platform.gfile.Open"], "training.checkpoint_management": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "training.checkpoint_management._evaluate": ["eager.context.executing_eagerly", "framework.ops.get_default_session"], "training.checkpoint_management._GetCheckpointFilename": [], "training.checkpoint_management.generate_checkpoint_state_proto": ["training.checkpoint_state_pb2.CheckpointState", "<builtin>.ValueError", "<builtin>.len", "platform.tf_logging.info", "<builtin>.enumerate"], "training.checkpoint_state_pb2.CheckpointState": [], "training.checkpoint_management.update_checkpoint_state": ["training.checkpoint_management.update_checkpoint_state_internal"], "training.checkpoint_management.get_checkpoint_state": ["training.checkpoint_state_pb2.CheckpointState", "io.file_io.file_exists", "<builtin>.ValueError", "<builtin>.enumerate", "protobuf.text_format.Merge", "<builtin>.type", "platform.tf_logging.warning", "training.checkpoint_management._GetCheckpointFilename", "io.file_io.read_file_to_string"], "training.checkpoint_management._prefix_to_checkpoint_path": [], "training.checkpoint_management.checkpoint_exists_internal": ["io.file_io.get_matching_files", "training.checkpoint_management._prefix_to_checkpoint_path"], "training.checkpoint_management.get_checkpoint_mtimes": ["training.checkpoint_management.get_checkpoint_mtimes.match_maybe_append", "training.checkpoint_management._prefix_to_checkpoint_path"], "training.checkpoint_management.get_checkpoint_mtimes.match_maybe_append": ["io.file_io.get_matching_files", "io.file_io.stat"], "training.checkpoint_management.remove_checkpoint": ["training.checkpoint_management._delete_file_if_exists", "training.checkpoint_management.meta_graph_filename"], "training.checkpoint_management.meta_graph_filename": ["re.sub"], "training.checkpoint_management._delete_file_if_exists": ["platform.tf_logging.warning", "io.file_io.get_matching_files", "io.file_io.delete_file"], "training.checkpoint_management.CheckpointManager.__init__": ["<builtin>.zip", "<builtin>.ValueError", "<builtin>.len", "platform.tf_logging.warning", "time.time", "<builtin>.min", "collections.OrderedDict", "training.checkpoint_management.get_checkpoint_state"], "training.checkpoint_management.CheckpointManager.directory": [], "training.checkpoint_management.CheckpointManager.checkpoint_interval": [], "training.checkpoint_management.CheckpointManager.latest_checkpoint": [], "training.checkpoint_management.CheckpointManager.checkpoints": ["<builtin>.list"], "training.checkpoint_management.CheckpointManager._sweep": ["training.checkpoint_management._delete_file_if_exists", "<builtin>.len"], "training.checkpoint_management.CheckpointManager._record_state": ["<builtin>.zip", "training.checkpoint_management.update_checkpoint_state_internal"], "training.checkpoint_management.CheckpointManager._prefix": [], "training.checkpoint_management.CheckpointManager.checkpoint": [], "training.checkpoint_management.CheckpointManager.save": ["framework.ops.get_default_session", "ops.variable_scope.variable_creator_scope", "training.checkpoint_management._evaluate", "training.training_util.global_step", "<builtin>.isinstance", "training.checkpoint_management.CheckpointManager._record_state", "time.time", "eager.context.executing_eagerly", "training.checkpoint_management.CheckpointManager._sweep"], "training.checkpoint_management.CheckpointManager.save._initializing_creator": [], "training.training_util.global_step": ["eager.context.executing_eagerly", "<builtin>.int"], "training.checkpoint_management.CheckpointManager.restore_or_initialize": ["training.checkpoint_management._evaluate"], "training.checkpoint_ops": ["framework.ops.NotDifferentiable"], "training.checkpoint_ops._load_and_remap_matrix": ["ops.array_ops.concat", "ops.gen_checkpoint_ops.generate_vocab_remapping", "ops.math_ops.range", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "<builtin>.bool", "ops.gen_checkpoint_ops.load_and_remap_matrix"], "ops.gen_checkpoint_ops.generate_vocab_remapping": [], "ops.gen_checkpoint_ops.load_and_remap_matrix": [], "training.checkpoint_ops._load_and_remap_matrix_initializer": ["<builtin>.type", "ops.init_ops.zeros_initializer", "<builtin>.callable", "<builtin>.TypeError"], "training.checkpoint_ops._load_and_remap_matrix_initializer._initializer": ["training.checkpoint_ops._load_and_remap_matrix", "<builtin>.max", "<builtin>.len", "<builtin>.min", "<builtin>.ValueError", "<builtin>.TypeError"], "training.checkpoint_ops._load_embedding_initializer": ["ops.init_ops.truncated_normal_initializer", "math.sqrt", "training.checkpoint_ops._load_and_remap_matrix_initializer"], "training.checkpoint_utils": ["util.tf_export.tf_export"], "training.checkpoint_utils._get_checkpoint_filename": ["platform.gfile.IsDirectory", "training.checkpoint_management.latest_checkpoint"], "training.checkpoint_utils.load_variable": ["training.checkpoint_utils.load_checkpoint"], "training.checkpoint_utils.list_variables": ["<builtin>.sorted", "training.checkpoint_utils.load_checkpoint"], "training.checkpoint_utils.wait_for_new_checkpoint": ["training.checkpoint_management.latest_checkpoint", "platform.tf_logging.info", "time.time", "time.sleep"], "training.checkpoint_utils.init_from_checkpoint.<lambda1>": ["training.checkpoint_utils._init_from_checkpoint"], "training.checkpoint_utils._init_from_checkpoint": ["<builtin>.ValueError", "platform.tf_logging.debug", "training.checkpoint_utils._is_variable", "<builtin>.str", "<builtin>.sorted", "training.checkpoint_utils._collect_partitioned_variable", "<builtin>.isinstance", "<builtin>.set", "training.checkpoint_utils.load_checkpoint", "six.iteritems", "ops.variable_scope._get_default_variable_store", "training.checkpoint_utils._get_checkpoint_filename", "training.checkpoint_utils._set_variable_or_list_initializer", "<builtin>.len", "<builtin>.all"], "training.checkpoint_utils._init_from_checkpoint.<lambda1>": [], "training.checkpoint_utils._is_variable": ["ops.resource_variable_ops.is_resource_variable", "<builtin>.isinstance"], "training.checkpoint_utils._collect_partitioned_variable": [], "training.checkpoint_utils._set_variable_or_list_initializer": ["<builtin>.ValueError", "training.checkpoint_utils._set_checkpoint_initializer", "<builtin>.isinstance"], "training.checkpoint_utils._set_checkpoint_initializer": ["saving.saveable_object_util.saveable_objects_for_op", "ops.io_ops.restore_v2", "framework.ops.device", "saving.saveable_object_util.op_list_to_dict", "<builtin>.len"], "ops.io_ops.restore_v2": [], "saving.saveable_object_util.op_list_to_dict": ["<builtin>.callable", "<builtin>.TypeError", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "<builtin>.list", "saving.saveable_object_util.op_list_to_dict", "util.nest.flatten", "saving.saveable_object_util._tensor_comes_from_variable", "<builtin>.ValueError", "<builtin>.type", "<builtin>.getattr", "<builtin>.sorted"], "saving.saveable_object_util.saveable_objects_for_op": ["<builtin>.callable", "<builtin>.TypeError", "eager.context.executing_eagerly", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "saving.saveable_object_util.ResourceVariableSaveable.__init__", "saveable_object.SaveableObject._gather_saveables_for_checkpoint", "saving.saveable_object_util.saveable_objects_for_op", "<builtin>.list", "SaveableObject._graph_element._gather_saveables_for_checkpoint", "saving.saveable_object_util._tensor_comes_from_variable", "saving.saveable_object_util.ReferenceVariableSaveable.__init__", "<builtin>.ValueError", "<builtin>.type"], "training.coordinator": [], "training.coordinator.Coordinator.__init__": ["<builtin>.tuple", "threading.Event", "threading.Lock", "<builtin>.set"], "training.coordinator.Coordinator._filter_exception": ["<builtin>.isinstance"], "training.coordinator.Coordinator.request_stop": ["six.reraise", "<builtin>.isinstance", "platform.tf_logging.info", "sys.exc_info", "<builtin>.len", "<builtin>.type", "training.coordinator.Coordinator._filter_exception", "<builtin>.ValueError", "util.compat.as_str_any"], "training.coordinator.Coordinator.clear_stop": [], "training.coordinator.Coordinator.should_stop": [], "training.coordinator.Coordinator.stop_on_exception": ["training.coordinator.Coordinator.request_stop", "sys.exc_info"], "training.coordinator.Coordinator.wait_for_stop": [], "training.coordinator.Coordinator.register_thread": [], "training.coordinator.Coordinator.join": ["six.reraise", "platform.tf_logging.info", "<builtin>.set", "<builtin>.min", "<builtin>.RuntimeError", "time.sleep", "<builtin>.max", "<builtin>.any", "training.coordinator.Coordinator.wait_for_stop", "<builtin>.list"], "training.coordinator.Coordinator.joined": [], "training.coordinator.Coordinator.raise_requested_exception": ["six.reraise"], "training.coordinator.LooperThread.__init__": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.super"], "training.coordinator.LooperThread.loop": ["training.coordinator.LooperThread.__init__", "threading.Thread.start"], "training.coordinator.LooperThread.run": ["time.time", "training.coordinator.LooperThread.run_loop", "training.coordinator.LooperThread.start_loop", "training.coordinator.LooperThread.stop_loop"], "training.coordinator.LooperThread.start_loop": [], "training.coordinator.LooperThread.run_loop": [], "training.coordinator.LooperThread.stop_loop": [], "training.device_setter": ["util.tf_export.tf_export"], "training.device_setter._RoundRobinStrategy.__init__": [], "training.device_setter._RoundRobinStrategy.__call__": [], "training.device_setter._ReplicaDeviceChooser.__init__": [], "training.device_setter._ReplicaDeviceChooser.device_function": ["device.DeviceSpec.from_string", "training.device_setter._RoundRobinStrategy.__init__", "<builtin>.isinstance"], "six.callable": [], "training.distribute": [], "training.distribution_strategy_context": [], "training.evaluation": [], "training.evaluation._get_or_create_eval_step": ["ops.variable_scope.get_variable", "<builtin>.len", "ops.init_ops.zeros_initializer", "<builtin>.ValueError", "framework.ops.get_default_graph"], "training.evaluation._get_latest_eval_step_value": ["<builtin>.list", "ops.array_ops.identity", "training.evaluation._get_or_create_eval_step", "<builtin>.isinstance", "framework.ops.control_dependencies"], "training.evaluation._MultiStepStopAfterNEvalsHook.__init__": [], "training.evaluation._MultiStepStopAfterNEvalsHook._set_evals_completed_tensor": [], "training.evaluation._MultiStepStopAfterNEvalsHook.begin": ["training.basic_session_run_hooks.get_or_create_steps_per_run_variable"], "training.evaluation._MultiStepStopAfterNEvalsHook.after_create_session": ["<builtin>.min"], "training.evaluation._MultiStepStopAfterNEvalsHook.before_run": ["training.session_run_hook.SessionRunArgs"], "training.evaluation._MultiStepStopAfterNEvalsHook.after_run": ["platform.tf_logging.info", "<builtin>.min"], "training.evaluation._StopAfterNEvalsHook.__init__": ["math.floor"], "training.evaluation._StopAfterNEvalsHook._set_evals_completed_tensor": [], "training.evaluation._StopAfterNEvalsHook.before_run": ["training.session_run_hook.SessionRunArgs"], "training.evaluation._StopAfterNEvalsHook.after_run": ["platform.tf_logging.info"], "training.evaluation._evaluate_once": ["ops.math_ops.cast", "ops.state_ops.assign_add", "training.evaluation._get_latest_eval_step_value", "time.strftime", "<builtin>.list", "training.monitored_session.ChiefSessionCreator", "training.basic_session_run_hooks.FinalOpsHook", "platform.tf_logging.info", "training.monitored_session.MonitoredSession", "training.evaluation._get_or_create_eval_step", "time.localtime", "time.time", "<builtin>.any", "<builtin>.isinstance", "training.basic_session_run_hooks.get_or_create_steps_per_run_variable"], "training.basic_session_run_hooks.FinalOpsHook": [], "training.monitored_session.MonitoredSession": [], "training.ftrl": [], "training.ftrl.FtrlOptimizer.__init__": ["<builtin>.ValueError", "<builtin>.super"], "training.ftrl.FtrlOptimizer._create_slots": ["optimizer.Optimizer._get_or_make_slot_with_initializer", "optimizer.Optimizer._zeros_slot"], "training.ftrl.FtrlOptimizer._create_slots._accum_initializer": ["ops.array_ops.ones"], "training.ftrl.FtrlOptimizer._prepare": ["framework.ops.convert_to_tensor", "ops.math_ops.maximum"], "training.ftrl.FtrlOptimizer._apply_dense": ["optimizer.Optimizer.get_slot", "training.training_ops.apply_ftrl_v2", "ops.math_ops.cast", "training.training_ops.apply_ftrl"], "training.training_ops.apply_ftrl": [], "training.training_ops.apply_ftrl_v2": [], "training.ftrl.FtrlOptimizer._resource_apply_dense": ["optimizer.Optimizer.get_slot", "training.training_ops.resource_apply_ftrl", "ops.math_ops.cast", "training.training_ops.resource_apply_ftrl_v2"], "training.training_ops.resource_apply_ftrl": [], "training.training_ops.resource_apply_ftrl_v2": [], "training.ftrl.FtrlOptimizer._apply_sparse": ["optimizer.Optimizer.get_slot", "training.training_ops.sparse_apply_ftrl", "ops.math_ops.cast", "training.training_ops.sparse_apply_ftrl_v2"], "training.training_ops.sparse_apply_ftrl": [], "training.training_ops.sparse_apply_ftrl_v2": [], "training.ftrl.FtrlOptimizer._resource_apply_sparse": ["optimizer.Optimizer.get_slot", "training.training_ops.resource_sparse_apply_ftrl", "ops.math_ops.cast", "training.training_ops.resource_sparse_apply_ftrl_v2"], "training.training_ops.resource_sparse_apply_ftrl": [], "training.training_ops.resource_sparse_apply_ftrl_v2": [], "training.gen_training_ops": [], "training.gradient_descent": [], "training.gradient_descent.GradientDescentOptimizer.__init__": ["<builtin>.super"], "training.gradient_descent.GradientDescentOptimizer._apply_dense": ["training.training_ops.apply_gradient_descent", "ops.math_ops.cast"], "training.training_ops.apply_gradient_descent": [], "training.gradient_descent.GradientDescentOptimizer._resource_apply_dense": ["training.training_ops.resource_apply_gradient_descent", "ops.math_ops.cast"], "training.training_ops.resource_apply_gradient_descent": [], "training.gradient_descent.GradientDescentOptimizer._resource_apply_sparse_duplicate_indices": ["ops.resource_variable_ops.resource_scatter_add"], "training.gradient_descent.GradientDescentOptimizer._apply_sparse_duplicate_indices": ["ops.math_ops.cast", "framework.ops.IndexedSlices"], "training.gradient_descent.GradientDescentOptimizer._prepare": ["optimizer.Optimizer._call_if_callable", "framework.ops.convert_to_tensor"], "training.input": ["util.deprecation.deprecated_endpoints", "util.tf_export.tf_export", "util.deprecation.deprecated"], "training.input.match_filenames_once": ["framework.ops.name_scope", "ops.io_ops.matching_files", "ops.variable_scope.variable"], "ops.io_ops.matching_files": [], "training.input.limit_epochs": ["ops.array_ops.identity", "framework.ops.control_dependencies", "<builtin>.ValueError", "framework.ops.name_scope", "framework.constant_op.constant", "ops.variable_scope.variable"], "training.input.input_producer": ["summary.summary.scalar", "training.queue_runner.add_queue_runner", "ops.data_flow_ops.FIFOQueue", "training.queue_runner.QueueRunner", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "training.input.limit_epochs", "ops.math_ops.cast", "ops.random_ops.random_shuffle", "framework.ops.name_scope", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "training.queue_runner.QueueRunner": [], "training.queue_runner.add_queue_runner": [], "training.input.string_input_producer": ["ops.array_ops.identity", "ops.control_flow_ops.Assert", "framework.ops.control_dependencies", "<builtin>.isinstance", "framework.ops.convert_to_tensor", "<builtin>.ValueError", "ops.array_ops.size", "framework.ops.name_scope", "training.input.input_producer", "ops.math_ops.greater"], "training.input.range_input_producer": ["ops.math_ops.range", "framework.ops.name_scope", "training.input.input_producer"], "training.input.slice_input_producer": ["training.input.range_input_producer", "framework.ops.convert_n_to_tensor_or_indexed_slices", "<builtin>.ValueError", "ops.array_ops.gather", "framework.ops.name_scope", "ops.array_ops.shape"], "training.input._flatten": [], "training.input._SparseMetaData.__init__": ["framework.tensor_shape.as_dimension"], "training.input._SparseMetaData.__eq__": [], "training.input._SparseMetaData.__ne__": ["training.input._SparseMetaData.__eq__"], "training.input._SparseMetaData.__str__": [], "training.input._SparseMetaData.merge_with": ["<builtin>.ValueError"], "training.input._SparseMetaData.map_op": [], "training.input._SparseMetaData.sparse": [], "training.input._SparseMetaData.rank": [], "training.input._as_tensor_list": ["<builtin>.isinstance", "<builtin>.sorted"], "training.input._as_tensor_list_list": ["<builtin>.isinstance", "<builtin>.set", "training.input._as_tensor_list", "<builtin>.ValueError"], "training.input._as_original_type": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.enumerate", "<builtin>.sorted"], "training.input._store_sparse_tensors": ["ops.array_ops.expand_dims", "<builtin>.zip", "training.input._store_sparse_tensors._maybe_store", "training.input._store_sparse_tensors._sparse_op", "<builtin>.len", "training.input._store_sparse_tensors._sparse_meta_data"], "training.input._store_sparse_tensors._sparse_meta_data": ["<builtin>.isinstance", "training.input._SparseMetaData.__init__"], "training.input._store_sparse_tensors._maybe_store": ["training.input._store_sparse_tensors._maybe_store._sparse_values_to_keep", "training.input._store_sparse_tensors._maybe_store._maybe_store_many_sparse", "<builtin>.isinstance", "ops.sparse_ops.sparse_retain", "training.input._store_sparse_tensors._maybe_store.<lambda1>", "training.input._store_sparse_tensors._maybe_store._maybe_store_sparse"], "training.input._store_sparse_tensors._maybe_store._maybe_store_sparse": ["layers.utils.smart_cond"], "training.input._store_sparse_tensors._maybe_store._maybe_store_sparse.<lambda1>": ["ops.sparse_ops._add_sparse_to_tensors_map"], "training.input._store_sparse_tensors._maybe_store._maybe_store_sparse.<lambda2>": ["framework.constant_op.constant"], "training.input._store_sparse_tensors._maybe_store._maybe_store_many_sparse": ["layers.utils.smart_cond"], "training.input._store_sparse_tensors._maybe_store._maybe_store_many_sparse.<lambda1>": ["ops.sparse_ops._add_many_sparse_to_tensors_map"], "training.input._store_sparse_tensors._maybe_store._maybe_store_many_sparse.<lambda2>": ["ops.array_ops.ones", "ops.array_ops.shape"], "training.input._store_sparse_tensors._maybe_store._sparse_values_to_keep": ["ops.array_ops.gather"], "training.input._store_sparse_tensors._maybe_store.<lambda1>": ["ops.sparse_ops._add_many_sparse_to_tensors_map"], "training.input._store_sparse_tensors._sparse_op": [], "training.input._store_sparse_tensors_join": ["training.input._store_sparse_tensors", "<builtin>.ValueError", "<builtin>.zip"], "training.input._restore_sparse_tensors": ["<builtin>.zip", "<builtin>.any", "framework.sparse_tensor.SparseTensor", "<builtin>.isinstance", "ops.sparse_ops._take_many_sparse_from_tensors_map", "training.input._restore_sparse_tensors.<lambda1>", "framework.tensor_shape.dimension_value", "ops.array_ops.squeeze"], "training.input._restore_sparse_tensors.<lambda1>": ["ops.control_flow_ops.with_dependencies"], "training.input._validate": ["framework.ops.convert_n_to_tensor_or_indexed_slices", "<builtin>.ValueError"], "training.input._validate_join": ["framework.ops.convert_n_to_tensor_or_indexed_slices", "<builtin>.ValueError"], "training.input._validate_keep_input": ["framework.ops.convert_to_tensor", "<builtin>.ValueError"], "training.input._dtypes": ["<builtin>.TypeError"], "training.input._merge_shapes": ["framework.tensor_shape.as_shape"], "training.input._shapes": ["<builtin>.len", "<builtin>.ValueError", "training.input._merge_shapes", "six.moves.xrange"], "training.input._select_which_to_enqueue": ["ops.data_flow_ops.dynamic_partition", "ops.math_ops.cast"], "training.input._enqueue_join": ["training.input._select_which_to_enqueue", "layers.utils.smart_cond", "training.queue_runner.QueueRunner", "training.queue_runner.add_queue_runner"], "training.input._enqueue_join.<lambda1>": [], "training.input._enqueue": ["training.input._select_which_to_enqueue", "layers.utils.smart_cond", "training.queue_runner.QueueRunner", "training.queue_runner.add_queue_runner"], "training.input._enqueue.<list2>.<lambda1>": [], "training.input._which_queue": [], "training.input._batch": ["training.input._store_sparse_tensors", "training.input._shapes", "training.input._enqueue", "training.input._dtypes", "training.input._validate", "training.input._which_queue", "training.input._as_tensor_list", "training.input._as_original_type", "<builtin>.ValueError", "training.input._restore_sparse_tensors", "ops.math_ops.cast", "training.input._validate_keep_input", "<builtin>.list", "framework.ops.name_scope", "eager.context.executing_eagerly", "summary.summary.scalar"], "training.input._batch_join": ["training.input._flatten", "training.input._shapes", "training.input._dtypes", "training.input._store_sparse_tensors_join", "training.input._as_tensor_list_list", "training.input._which_queue", "training.input._as_original_type", "<builtin>.ValueError", "training.input._restore_sparse_tensors", "training.input._validate_join", "ops.math_ops.cast", "training.input._enqueue_join", "training.input._validate_keep_input", "framework.ops.name_scope", "eager.context.executing_eagerly", "summary.summary.scalar"], "training.input._shuffle_batch": ["training.input._store_sparse_tensors", "training.input._shapes", "training.input._enqueue", "training.input._dtypes", "ops.data_flow_ops.RandomShuffleQueue", "ops.math_ops.maximum", "training.input._validate", "training.input._as_tensor_list", "training.input._as_original_type", "<builtin>.ValueError", "training.input._restore_sparse_tensors", "ops.math_ops.cast", "training.input._validate_keep_input", "<builtin>.list", "framework.ops.name_scope", "eager.context.executing_eagerly", "summary.summary.scalar"], "ops.data_flow_ops.RandomShuffleQueue": [], "training.input._shuffle_batch_join": ["training.input._flatten", "training.input._shapes", "training.input._dtypes", "training.input._store_sparse_tensors_join", "ops.data_flow_ops.RandomShuffleQueue", "training.input._as_tensor_list_list", "ops.math_ops.maximum", "training.input._as_original_type", "<builtin>.ValueError", "training.input._restore_sparse_tensors", "training.input._validate_join", "ops.math_ops.cast", "training.input._enqueue_join", "training.input._validate_keep_input", "framework.ops.name_scope", "eager.context.executing_eagerly", "summary.summary.scalar"], "training.input.batch": ["training.input._batch"], "training.input.maybe_batch": ["training.input._batch"], "training.input.batch_join": ["training.input._batch_join"], "training.input.maybe_batch_join": ["training.input._batch_join"], "training.input.shuffle_batch": ["training.input._shuffle_batch"], "training.input.maybe_shuffle_batch": ["training.input._shuffle_batch"], "training.input.shuffle_batch_join": ["training.input._shuffle_batch_join"], "training.input.maybe_shuffle_batch_join": ["training.input._shuffle_batch_join"], "training.learning_rate_decay": [], "training.momentum": [], "training.momentum.MomentumOptimizer.__init__": ["<builtin>.super"], "training.momentum.MomentumOptimizer._create_slots": ["optimizer.Optimizer._zeros_slot"], "training.momentum.MomentumOptimizer._prepare": ["<builtin>.callable", "framework.ops.convert_to_tensor"], "training.momentum.MomentumOptimizer._apply_dense": ["ops.math_ops.cast", "training.training_ops.apply_momentum", "optimizer.Optimizer.get_slot"], "training.training_ops.apply_momentum": [], "training.momentum.MomentumOptimizer._resource_apply_dense": ["ops.math_ops.cast", "optimizer.Optimizer.get_slot", "training.training_ops.resource_apply_momentum"], "training.training_ops.resource_apply_momentum": [], "training.momentum.MomentumOptimizer._apply_sparse": ["ops.math_ops.cast", "optimizer.Optimizer.get_slot", "training.training_ops.sparse_apply_momentum"], "training.training_ops.sparse_apply_momentum": [], "training.momentum.MomentumOptimizer._resource_apply_sparse": ["ops.math_ops.cast", "optimizer.Optimizer.get_slot", "training.training_ops.resource_sparse_apply_momentum"], "training.training_ops.resource_sparse_apply_momentum": [], "training.monitored_session": ["util.tf_export.tf_export", "<builtin>.object"], "training.monitored_session.Scaffold.__init__": ["training.monitored_session.Scaffold.__init__.<lambda1>", "<builtin>.TypeError", "<builtin>.isinstance"], "training.monitored_session.Scaffold.__init__.<lambda1>": [], "training.monitored_session.Scaffold.__init__.<lambda2>": [], "training.monitored_session.Scaffold.finalize": ["framework.ops.get_default_graph", "<builtin>.isinstance", "training.monitored_session.Scaffold.get_or_default", "tracking.graph_view.ObjectGraphView", "training.saver._get_saver_or_default", "training.saver.Saver", "platform.tf_logging.info"], "training.monitored_session.Scaffold.finalize.default_init_op": ["framework.ops.get_collection", "ops.control_flow_ops.group", "ops.resources.shared_resources", "ops.variables.global_variables_initializer", "ops.resources.initialize_resources"], "training.monitored_session.Scaffold.get_or_default": ["framework.ops.get_collection", "framework.ops.add_to_collection", "training.monitored_session.Scaffold.finalize.default_ready_for_local_init_op", "training.monitored_session.Scaffold.default_local_init_op", "<builtin>.len", "<builtin>.RuntimeError", "training.monitored_session.Scaffold.finalize.default_ready_op", "summary.summary.merge_all", "training.monitored_session.Scaffold.finalize.default_init_op"], "training.monitored_session.Scaffold.finalize.default_ready_op": ["ops.resources.report_uninitialized_resources", "ops.variables.report_uninitialized_variables", "ops.array_ops.concat"], "training.monitored_session.Scaffold.finalize.default_ready_for_local_init_op": ["ops.resources.report_uninitialized_resources", "ops.array_ops.concat", "ops.resources.shared_resources", "ops.variables.report_uninitialized_variables", "ops.variables.global_variables"], "training.saver._get_saver_or_default": ["training.saver.Saver.__init__", "<builtin>.RuntimeError", "<builtin>.len", "framework.ops.add_to_collection", "framework.ops.get_collection"], "training.monitored_session.Scaffold.init_fn": [], "training.monitored_session.Scaffold.init_op": [], "training.monitored_session.Scaffold.ready_op": [], "training.monitored_session.Scaffold.ready_for_local_init_op": [], "training.monitored_session.Scaffold.local_init_op": [], "training.monitored_session.Scaffold.local_init_feed_dict": [], "training.monitored_session.Scaffold.summary_op": [], "training.monitored_session.Scaffold.saver": [], "training.monitored_session.Scaffold.init_feed_dict": [], "training.monitored_session.Scaffold.default_local_init_op": ["ops.control_flow_ops.group", "ops.resources.local_resources", "ops.lookup_ops.tables_initializer", "ops.variables.local_variables_initializer", "ops.resources.initialize_resources"], "training.monitored_session._create_monitored_session_with_worker_context": ["<builtin>.type", "os.path.join", "training.monitored_session.MonitoredSession.__init__", "training.basic_session_run_hooks.SummarySaverHook", "platform.tf_logging.warning", "training.basic_session_run_hooks.CheckpointSaverHook", "training.basic_session_run_hooks.StepCounterHook", "platform.tf_logging.info"], "training.basic_session_run_hooks.StepCounterHook": [], "training.basic_session_run_hooks.SummarySaverHook": [], "training.monitored_session.MonitoredSession.__init__": ["<builtin>.super"], "training.monitored_session.MonitoredTrainingSession": ["distribute.distribute_coordinator_context.get_current_worker_context", "training.monitored_session.ChiefSessionCreator.__init__", "training.monitored_session.Scaffold.__init__", "training.monitored_session.WorkerSessionCreator.__init__", "training.monitored_session.MonitoredSession.__init__", "training.basic_session_run_hooks.SummarySaverHook", "training.monitored_session._create_monitored_session_with_worker_context", "training.basic_session_run_hooks.CheckpointSaverHook", "training.basic_session_run_hooks.StepCounterHook"], "training.monitored_session.WorkerSessionCreator.__init__": ["training.monitored_session.Scaffold.__init__"], "training.monitored_session.ChiefSessionCreator.__init__": ["training.monitored_session.Scaffold.__init__"], "training.monitored_session.SessionCreator": ["abc.abstractmethod"], "training.monitored_session.SessionCreator.create_session": ["<builtin>.NotImplementedError"], "training.monitored_session.ChiefSessionCreator._get_session_manager": ["training.session_manager.SessionManager", "framework.ops.get_default_graph"], "training.session_manager.SessionManager": [], "training.monitored_session.ChiefSessionCreator.create_session": ["training.monitored_session.ChiefSessionCreator._get_session_manager"], "training.monitored_session.WorkerSessionCreator._get_session_manager": ["training.session_manager.SessionManager", "framework.ops.get_default_graph"], "training.monitored_session.WorkerSessionCreator.create_session": ["training.monitored_session.WorkerSessionCreator._get_session_manager"], "training.monitored_session._MonitoredSession.__init__": ["framework.ops.get_default_graph", "distribute.distribute_coordinator_context.get_current_worker_context", "training.monitored_session.ChiefSessionCreator.__init__", "training.monitored_session._RecoverableSession.__init__", "training.monitored_session._MonitoredSession._CoordinatedSessionCreator.__init__", "training.monitored_session._MonitoredSession._CoordinatedSessionCreator.create_session"], "training.monitored_session._MonitoredSession._CoordinatedSessionCreator.__init__": [], "training.monitored_session._RecoverableSession.__init__": ["training.monitored_session._WrappedSession.__init__", "training.monitored_session._RecoverableSession._create_session"], "training.monitored_session._MonitoredSession._CoordinatedSessionCreator.create_session": ["framework.ops.get_collection", "training.monitored_session._CoordinatedSession.__init__", "training.queue_runner.start_queue_runners", "training.coordinator.Coordinator", "training.monitored_session._HookedSession.__init__"], "training.monitored_session._MonitoredSession.graph": ["training.monitored_session._MonitoredSession._tf_sess"], "training.monitored_session._MonitoredSession._tf_sess": [], "training.monitored_session._MonitoredSession.run": ["training.monitored_session._CoordinatedSession.run", "training.monitored_session._RecoverableSession.run"], "training.monitored_session._CoordinatedSession.run": ["training.monitored_session._RecoverableSession.run", "training.monitored_session._HookedSession.run", "training.monitored_session._CoordinatedSession.run", "sys.exc_info", "six.reraise"], "training.monitored_session._RecoverableSession.run": ["training.monitored_session._CoordinatedSession.close", "training.monitored_session._CoordinatedSession.run", "training.monitored_session._WrappedSession.close", "training.monitored_session._RecoverableSession._create_session", "platform.tf_logging.info"], "training.monitored_session._MonitoredSession.run_step_fn": ["util.function_utils.fn_args", "training.monitored_session._RecoverableSession.run_step_fn", "training.monitored_session._WrappedSession.run_step_fn", "training.monitored_session._MonitoredSession._tf_sess", "<builtin>.ValueError"], "training.monitored_session._WrappedSession.run_step_fn": ["training.monitored_session._MonitoredSession.StepContext.__init__"], "training.monitored_session._RecoverableSession.run_step_fn": ["training.monitored_session._CoordinatedSession.close", "training.monitored_session._RecoverableSession.run_step_fn", "training.monitored_session._WrappedSession.close", "training.monitored_session._RecoverableSession._create_session", "training.monitored_session._WrappedSession.run_step_fn", "platform.tf_logging.info"], "training.monitored_session._MonitoredSession.StepContext.__init__": [], "training.monitored_session._MonitoredSession.StepContext.session": [], "training.monitored_session._MonitoredSession.StepContext.run_with_hooks": ["training.monitored_session._CoordinatedSession.run"], "training.monitored_session._MonitoredSession.StepContext.request_stop": ["<builtin>.StopIteration"], "training.monitored_session._MonitoredSession.should_stop": ["training.monitored_session._WrappedSession.should_stop"], "training.monitored_session._WrappedSession.should_stop": ["training.monitored_session._RecoverableSession._check_stop", "training.monitored_session._WrappedSession.should_stop", "training.monitored_session._HookedSession._check_stop", "training.monitored_session._CoordinatedSession._check_stop", "training.monitored_session._WrappedSession._check_stop"], "training.monitored_session._MonitoredSession.close": ["training.monitored_session._MonitoredSession._close_internal"], "training.monitored_session._MonitoredSession._close_internal": ["<builtin>.RuntimeError", "training.monitored_session._WrappedSession.close", "framework.ops.get_default_graph", "training.monitored_session._CoordinatedSession.close"], "training.monitored_session._MonitoredSession.__enter__": [], "training.monitored_session._MonitoredSession.__exit__": ["training.monitored_session._MonitoredSession._close_internal"], "training.queue_runner.start_queue_runners": [], "training.monitored_session._HookedSession.__init__": ["training.monitored_session._WrappedSession.__init__"], "training.monitored_session._CoordinatedSession.__init__": ["training.monitored_session._WrappedSession.__init__"], "training.monitored_session._WrappedSession.close": ["platform.tf_logging.error", "training.monitored_session._WrappedSession.close", "training.monitored_session._CoordinatedSession.close"], "training.monitored_session._CoordinatedSession.close": ["training.monitored_session._WrappedSession.close", "training.monitored_session._CoordinatedSession.close"], "training.monitored_session._MonitoredSession._is_closed": [], "training.monitored_session.SingularMonitoredSession.__init__": ["<builtin>.super", "training.monitored_session.ChiefSessionCreator.__init__"], "training.monitored_session.SingularMonitoredSession.raw_session": ["training.monitored_session._MonitoredSession._tf_sess"], "training.monitored_session._WrappedSession.__init__": ["<builtin>.isinstance"], "training.monitored_session._WrappedSession.graph": [], "training.monitored_session._WrappedSession.sess_str": [], "training.monitored_session._WrappedSession._check_stop": [], "training.monitored_session._RecoverableSession._check_stop": ["training.monitored_session._CoordinatedSession.close", "training.monitored_session._WrappedSession.close", "training.monitored_session._CoordinatedSession._check_stop", "training.monitored_session._RecoverableSession._create_session", "platform.tf_logging.info"], "training.monitored_session._CoordinatedSession._check_stop": [], "training.monitored_session._HookedSession._check_stop": [], "training.monitored_session._WrappedSession.run": ["training.monitored_session._CoordinatedSession.run", "training.monitored_session._RecoverableSession.run", "training.monitored_session._HookedSession.run"], "training.monitored_session._HookedSession.run": ["training.monitored_session._HookedSession._call_hook_before_run", "training.monitored_session._WrappedSession.run", "training.monitored_session._WrappedSession.should_stop", "training.session_run_hook.SessionRunArgs", "protobuf.config_pb2.RunOptions", "training.session_run_hook.SessionRunValues", "training.monitored_session._RecoverableSession.run", "training.monitored_session._HookedSession.run", "training.session_run_hook.SessionRunContext", "protobuf.config_pb2.RunMetadata", "<builtin>.RuntimeError", "training.monitored_session._CoordinatedSession.run"], "training.monitored_session._RecoverableSession._create_session": ["training.monitored_session._MonitoredSession._CoordinatedSessionCreator.create_session", "platform.tf_logging.info"], "training.session_run_hook.SessionRunContext": [], "training.monitored_session._HookedSession._call_hook_before_run": ["training.monitored_session._HookedSession._merge_run_options", "training.monitored_session._HookedSession._raise_if_feeds_intersects"], "training.session_run_hook.SessionRunValues": [], "training.monitored_session._HookedSession._raise_if_feeds_intersects": ["<builtin>.str", "<builtin>.list", "<builtin>.RuntimeError", "<builtin>.set"], "training.monitored_session._HookedSession._merge_run_options": ["<builtin>.max"], "training.moving_averages": ["util.tf_export.tf_export"], "training.moving_averages.assign_moving_average.update_fn": ["ops.state_ops.assign_sub"], "training.moving_averages.assign_moving_average.update": ["training.moving_averages._update", "training.moving_averages._zero_debias"], "training.moving_averages._zero_debias": ["<builtin>.len", "training.moving_averages._zero_debias._maybe_get_unique", "training.moving_averages._update", "framework.ops.init_scope", "ops.variable_scope.get_variable", "ops.variable_scope.variable_scope", "ops.init_ops.zeros_initializer"], "training.moving_averages._update": ["distribute.distribution_strategy_context.in_cross_replica_context", "training.moving_averages._zero_debias.update_fn", "training.moving_averages.assign_moving_average.update_fn", "distribute.distribute_lib.get_update_replica_id"], "training.moving_averages.assign_moving_average.merge_fn": ["training.moving_averages.assign_moving_average.update"], "training.moving_averages.weighted_moving_average": ["ops.math_ops.truediv", "training.moving_averages.assign_moving_average", "ops.math_ops.divide", "ops.variable_scope.get_variable", "ops.variable_scope.variable_scope", "ops.init_ops.zeros_initializer"], "training.moving_averages._zero_debias.update_fn": ["framework.ops.get_name_scope", "ops.state_ops.assign", "ops.math_ops.pow", "ops.state_ops.assign_sub"], "training.moving_averages._zero_debias._maybe_get_unique": ["ops.variable_scope.get_variable_scope"], "training.moving_averages.ExponentialMovingAverage.__init__": [], "training.moving_averages.ExponentialMovingAverage.name": [], "training.moving_averages.ExponentialMovingAverage.apply": ["framework.ops.name_scope", "training.moving_averages.assign_moving_average", "<builtin>.TypeError", "<builtin>.isinstance", "framework.ops.device", "ops.control_flow_ops.group", "training.slot_creator.create_zeros_slot", "ops.math_ops.cast", "framework.ops.init_scope", "framework.ops.add_to_collection", "<builtin>.set", "ops.math_ops.minimum", "training.slot_creator.create_slot", "framework.ops.convert_to_tensor", "ops.variables.trainable_variables"], "training.slot_creator.create_slot": ["distribute.distribution_strategy_context.get_strategy", "training.slot_creator._create_slot_var", "ops.variable_scope.variable_scope", "<builtin>.isinstance"], "training.slot_creator.create_zeros_slot": ["ops.array_ops.shape", "ops.array_ops.zeros", "ops.init_ops.zeros_initializer", "training.slot_creator.create_slot_with_initializer", "training.slot_creator.create_slot", "<builtin>.isinstance"], "training.moving_averages.ExponentialMovingAverage.average": [], "training.moving_averages.ExponentialMovingAverage.average_name": ["<builtin>.len", "framework.ops.get_default_graph"], "training.moving_averages.ExponentialMovingAverage.variables_to_restore": ["<builtin>.set", "<builtin>.list", "ops.variables.moving_average_variables", "training.moving_averages.ExponentialMovingAverage.average_name", "ops.variables.global_variables", "ops.variables.trainable_variables"], "training.optimizer": [], "training.optimizer.get_filtered_grad_fn.filtered_grad_fn": ["training.optimizer.Optimizer.apply_gradients.<lambda1>"], "training.optimizer.Optimizer.apply_gradients.<lambda1>": [], "training.optimizer._deduplicate_indexed_slices": ["ops.array_ops.shape", "ops.math_ops.unsorted_segment_sum", "ops.array_ops.unique"], "training.optimizer._var_key": ["distribute.distribute_utils.is_distributed_variable", "<builtin>.hasattr", "framework.ops.executing_eagerly_outside_functions"], "training.optimizer._OptimizableVariable": ["abc.abstractmethod"], "training.optimizer._OptimizableVariable.target": ["<builtin>.NotImplementedError"], "training.optimizer._OptimizableVariable.update_op": ["<builtin>.NotImplementedError"], "training.optimizer._RefVariableProcessor.__init__": [], "training.optimizer._RefVariableProcessor.__str__": [], "training.optimizer._RefVariableProcessor.target": [], "training.optimizer._RefVariableProcessor.update_op": ["training.optimizer.Optimizer._apply_dense", "<builtin>.RuntimeError", "<builtin>.isinstance", "training.optimizer.Optimizer._apply_sparse_duplicate_indices", "framework.ops.control_dependencies"], "training.optimizer.Optimizer._apply_dense": ["<builtin>.NotImplementedError"], "training.optimizer.Optimizer._apply_sparse_duplicate_indices": ["training.optimizer._deduplicate_indexed_slices", "framework.ops.IndexedSlices", "training.optimizer.Optimizer._apply_sparse"], "training.optimizer._DenseReadResourceVariableProcessor.__init__": [], "training.optimizer._DenseReadResourceVariableProcessor.target": [], "training.optimizer._DenseReadResourceVariableProcessor.update_op": ["framework.ops.control_dependencies"], "training.optimizer._DenseResourceVariableProcessor.__init__": [], "training.optimizer._DenseResourceVariableProcessor.target": [], "training.optimizer._DenseResourceVariableProcessor.update_op": ["<builtin>.RuntimeError", "training.optimizer.Optimizer._resource_apply_dense", "<builtin>.isinstance", "training.optimizer.Optimizer._resource_apply_sparse_duplicate_indices", "framework.ops.control_dependencies"], "training.optimizer.Optimizer._resource_apply_sparse_duplicate_indices": ["training.optimizer._deduplicate_indexed_slices", "training.optimizer.Optimizer._resource_apply_sparse"], "training.optimizer.Optimizer._resource_apply_dense": ["<builtin>.NotImplementedError"], "training.optimizer._TensorProcessor.__init__": [], "training.optimizer._TensorProcessor.target": [], "training.optimizer._TensorProcessor.update_op": ["<builtin>.NotImplementedError"], "training.optimizer._get_processor": ["<builtin>.isinstance", "eager.context.executing_eagerly", "training.optimizer._DenseResourceVariableProcessor.__init__", "training.optimizer._TensorProcessor.__init__", "training.optimizer._RefVariableProcessor.__init__", "ops.resource_variable_ops.is_resource_variable", "<builtin>.NotImplementedError"], "training.optimizer.Optimizer.__init__": ["<builtin>.ValueError"], "training.optimizer.Optimizer.get_name": [], "training.optimizer.Optimizer.minimize": ["training.optimizer.Optimizer.compute_gradients", "<builtin>.ValueError", "training.optimizer.Optimizer.apply_gradients", "<builtin>.str"], "training.optimizer.Optimizer.compute_gradients": ["<builtin>.RuntimeError", "util.nest.flatten", "training.optimizer._get_processor", "<builtin>.callable", "ops.gradients.gradients", "<builtin>.zip", "eager.context.executing_eagerly", "ops.control_flow_ops.tuple", "<builtin>.list", "eager.backprop.GradientTape", "training.optimizer.Optimizer._scale_loss", "<builtin>.ValueError", "framework.ops.get_collection", "framework.ops.control_dependencies", "training.optimizer.Optimizer._assert_valid_dtypes"], "training.optimizer.Optimizer.apply_gradients": ["training.optimizer.get_filtered_grad_fn", "<builtin>.ValueError", "training.optimizer.get_filtered_grad_fn.filtered_grad_fn", "ops.resource_variable_ops.assign_add_variable_op", "framework.ops.control_dependencies", "framework.ops.colocate_with", "distribute.distribution_strategy_context.has_strategy", "training.optimizer._get_processor", "training.optimizer.Optimizer._prepare", "framework.ops.convert_to_tensor", "<builtin>.isinstance", "training.optimizer.Optimizer._finish", "<builtin>.RuntimeError", "<builtin>.TypeError", "distribute.distribution_strategy_context.get_replica_context", "framework.ops.name_scope", "<builtin>.tuple", "framework.ops.get_collection_ref", "distribute.distribution_strategy_context.in_cross_replica_context", "ops.resource_variable_ops.is_resource_variable", "training.optimizer.Optimizer._create_slots", "ops.state_ops.assign_add", "eager.context.executing_eagerly", "framework.ops.init_scope", "<builtin>.str", "framework.ops.convert_to_tensor_or_indexed_slices"], "training.optimizer.Optimizer._scale_loss": ["distribute.distribution_strategy_context.get_strategy", "framework.ops.get_default_graph", "distribute.distribute_lib.get_loss_reduction"], "training.optimizer.Optimizer._assert_valid_dtypes": ["<builtin>.ValueError", "training.optimizer.Optimizer._valid_dtypes"], "framework.ops.convert_to_tensor_or_indexed_slices": [], "training.optimizer.Optimizer._create_slots": [], "training.optimizer.Optimizer._prepare": [], "training.optimizer.Optimizer._finish": ["ops.control_flow_ops.group"], "ops.resource_variable_ops.assign_add_variable_op": [], "training.optimizer.Optimizer._distributed_apply": ["framework.ops.name_scope", "training.optimizer.Optimizer._prepare", "training.optimizer.Optimizer._create_slots", "<builtin>.isinstance", "<builtin>.zip", "eager.context.executing_eagerly", "framework.ops.init_scope", "framework.ops.get_collection_ref", "framework.ops.control_dependencies"], "training.optimizer.Optimizer._distributed_apply.update": ["<builtin>.TypeError", "training.optimizer._DenseResourceVariableProcessor.update_op", "framework.ops.name_scope", "training.optimizer._get_processor", "<builtin>.isinstance", "eager.context.executing_eagerly", "training.optimizer._RefVariableProcessor.update_op", "training.optimizer._TensorProcessor.update_op", "ops.resource_variable_ops.is_resource_variable", "framework.ops.convert_to_tensor_or_indexed_slices"], "training.optimizer.Optimizer._distributed_apply.finish": [], "training.optimizer.Optimizer.get_slot": ["training.optimizer._var_key", "distribute.distribute_utils.is_distributed_variable"], "training.optimizer.Optimizer.get_slot_names": ["<builtin>.sorted"], "training.optimizer.Optimizer.variables": ["training.optimizer.Optimizer._non_slot_variables", "framework.ops.get_default_graph", "<builtin>.sorted", "training.optimizer.Optimizer.variables._from_current_graph"], "training.optimizer.Optimizer.variables._from_current_graph": [], "training.optimizer.Optimizer._non_slot_variables": [], "training.optimizer.Optimizer.variables.<lambda1>": [], "training.optimizer.Optimizer._create_non_slot_variable": ["base.Trackable._preload_simple_restoration", "ops.variable_scope.variable", "eager.context.executing_eagerly", "distribute.distribution_strategy_context.get_strategy", "base.Trackable._maybe_initialize_trackable", "ops.resource_variable_ops.is_resource_variable", "base.Trackable._handle_deferred_dependencies"], "base.Trackable._maybe_initialize_trackable": [], "base.Trackable._preload_simple_restoration": [], "training.optimizer.Optimizer._checkpoint_dependencies": ["<builtin>.super", "tracking.base.TrackableReference", "framework.ops.get_default_graph", "<builtin>.sorted"], "training.optimizer.Optimizer._checkpoint_dependencies.<lambda1>": [], "training.optimizer.Optimizer._lookup_dependency": ["framework.ops.get_default_graph", "eager.context.executing_eagerly", "<builtin>.super", "training.optimizer.Optimizer._get_non_slot_variable"], "training.optimizer.Optimizer._get_non_slot_variable": ["<builtin>.hasattr"], "training.optimizer.Optimizer._valid_dtypes": ["<builtin>.set"], "training.optimizer.Optimizer._resource_apply_sparse": ["<builtin>.NotImplementedError"], "training.optimizer.Optimizer._apply_sparse": ["<builtin>.NotImplementedError"], "training.optimizer.Optimizer._slot_dict": [], "training.optimizer.Optimizer._get_or_make_slot": ["training.optimizer.Optimizer._slot_dict", "training.optimizer._var_key", "training.slot_creator.create_slot", "training.optimizer.Optimizer._restore_slot_variable"], "training.optimizer.Optimizer._restore_slot_variable": ["training.optimizer._var_key"], "training.optimizer.Optimizer._get_or_make_slot_with_initializer": ["training.optimizer.Optimizer._slot_dict", "training.optimizer._var_key", "training.slot_creator.create_slot_with_initializer", "training.optimizer.Optimizer._restore_slot_variable"], "training.slot_creator.create_slot_with_initializer": ["distribute.distribution_strategy_context.get_strategy", "training.slot_creator._create_slot_var", "ops.variable_scope.variable_scope", "<builtin>.isinstance"], "training.optimizer.Optimizer._zeros_slot": ["training.optimizer.Optimizer._slot_dict", "training.slot_creator.create_zeros_slot", "training.optimizer._var_key", "training.optimizer.Optimizer._restore_slot_variable"], "training.optimizer.Optimizer._restore_slot_variable.<lambda1>": [], "training.optimizer.Optimizer._create_or_restore_slot_variable": ["training.optimizer.Optimizer._get_or_make_slot_with_initializer", "tracking.base.CheckpointInitialValueCallable", "training.optimizer._var_key", "eager.context.executing_eagerly", "training.optimizer.Optimizer._slot_dict", "framework.ops.get_default_graph"], "training.optimizer.Optimizer._call_if_callable": ["<builtin>.callable"], "training.proximal_adagrad": [], "training.proximal_adagrad.ProximalAdagradOptimizer.__init__": ["<builtin>.super", "<builtin>.ValueError"], "training.proximal_adagrad.ProximalAdagradOptimizer._create_slots": ["framework.constant_op.constant", "framework.ops.colocate_with", "optimizer.Optimizer._get_or_make_slot"], "training.proximal_adagrad.ProximalAdagradOptimizer._prepare": ["framework.ops.convert_to_tensor"], "training.proximal_adagrad.ProximalAdagradOptimizer._apply_dense": ["training.training_ops.apply_proximal_adagrad", "optimizer.Optimizer.get_slot"], "training.training_ops.apply_proximal_adagrad": [], "training.proximal_adagrad.ProximalAdagradOptimizer._resource_apply_dense": ["training.training_ops.resource_apply_proximal_adagrad", "optimizer.Optimizer.get_slot"], "training.training_ops.resource_apply_proximal_adagrad": [], "training.proximal_adagrad.ProximalAdagradOptimizer._apply_sparse": ["training.training_ops.sparse_apply_proximal_adagrad", "optimizer.Optimizer.get_slot"], "training.training_ops.sparse_apply_proximal_adagrad": [], "training.proximal_adagrad.ProximalAdagradOptimizer._resource_apply_sparse": ["ops.math_ops.cast", "optimizer.Optimizer.get_slot", "training.training_ops.resource_sparse_apply_proximal_adagrad"], "training.training_ops.resource_sparse_apply_proximal_adagrad": [], "training.proximal_gradient_descent": [], "training.proximal_gradient_descent.ProximalGradientDescentOptimizer.__init__": ["<builtin>.super"], "training.proximal_gradient_descent.ProximalGradientDescentOptimizer._apply_dense": ["training.training_ops.apply_proximal_gradient_descent"], "training.training_ops.apply_proximal_gradient_descent": [], "training.proximal_gradient_descent.ProximalGradientDescentOptimizer._resource_apply_dense": ["training.training_ops.resource_apply_proximal_gradient_descent"], "training.training_ops.resource_apply_proximal_gradient_descent": [], "training.proximal_gradient_descent.ProximalGradientDescentOptimizer._apply_sparse": ["training.training_ops.sparse_apply_proximal_gradient_descent"], "training.training_ops.sparse_apply_proximal_gradient_descent": [], "training.proximal_gradient_descent.ProximalGradientDescentOptimizer._resource_apply_sparse": ["training.training_ops.resource_sparse_apply_proximal_gradient_descent", "ops.math_ops.cast"], "training.training_ops.resource_sparse_apply_proximal_gradient_descent": [], "training.proximal_gradient_descent.ProximalGradientDescentOptimizer._prepare": ["framework.ops.convert_to_tensor"], "training.py_checkpoint_reader": ["util.tf_export.tf_export"], "training.py_checkpoint_reader.error_translator": ["framework.errors_impl.UnimplementedError", "framework.errors_impl.DataLossError", "<builtin>.str", "framework.errors_impl.InvalidArgumentError", "framework.errors_impl.OpError", "framework.errors_impl.NotFoundError", "framework.errors_impl.InternalError"], "framework.errors_impl.NotFoundError": [], "framework.errors_impl.UnimplementedError": [], "framework.errors_impl.DataLossError": [], "framework.errors_impl.InternalError": [], "framework.errors_impl.OpError": [], "training.py_checkpoint_reader.get_variable_to_dtype_map": ["framework.dtypes.DType"], "training.py_checkpoint_reader.has_tensor": ["util.compat.as_bytes"], "training.py_checkpoint_reader.get_tensor": ["training.py_checkpoint_reader.error_translator", "_pywrap_checkpoint_reader.CheckpointReader.CheckpointReader_GetTensor", "util.compat.as_bytes"], "_pywrap_checkpoint_reader.CheckpointReader.CheckpointReader_GetTensor": [], "util._pywrap_checkpoint_reader.CheckpointReader": [], "training.quantize_training": ["util.tf_export.tf_export", "util.deprecation.deprecated"], "training.quantize_training.do_quantize_training_on_graphdef": ["python._pywrap_quantize_training.DoQuantizeTrainingOnGraphDefHelper", "framework.graph_pb2.GraphDef"], "python._pywrap_quantize_training.DoQuantizeTrainingOnGraphDefHelper": [], "training.queue_runner": [], "training.queue_runner_impl": ["util.tf_export.tf_export", "framework.ops.register_proto_function", "util.deprecation.deprecated"], "training.queue_runner_impl.QueueRunner": ["util.deprecation.deprecated"], "training.queue_runner_impl.QueueRunner.__init__": ["weakref.WeakKeyDictionary", "training.queue_runner_impl.QueueRunner._init_from_args", "eager.context.executing_eagerly", "threading.Lock", "<builtin>.ValueError", "<builtin>.RuntimeError", "training.queue_runner_impl.QueueRunner._init_from_proto"], "training.queue_runner_impl.QueueRunner._init_from_proto": ["<builtin>.tuple", "framework.ops.prepend_name_scope", "framework.ops.get_default_graph", "framework.errors.exception_type_from_error_code", "<builtin>.isinstance"], "training.queue_runner_impl.QueueRunner._init_from_args": ["<builtin>.all", "<builtin>.issubclass", "<builtin>.ValueError", "<builtin>.tuple", "<builtin>.TypeError", "<builtin>.isinstance"], "training.queue_runner_impl.QueueRunner.queue": [], "training.queue_runner_impl.QueueRunner.enqueue_ops": [], "training.queue_runner_impl.QueueRunner.close_op": [], "training.queue_runner_impl.QueueRunner.cancel_op": [], "training.queue_runner_impl.QueueRunner.queue_closed_exception_types": [], "training.queue_runner_impl.QueueRunner.exceptions_raised": [], "training.queue_runner_impl.QueueRunner.name": [], "training.queue_runner_impl.QueueRunner._run": ["<builtin>.str", "platform.tf_logging.error", "platform.tf_logging.vlog"], "training.queue_runner_impl.QueueRunner._close_on_stop": ["<builtin>.str", "platform.tf_logging.vlog"], "training.queue_runner_impl.QueueRunner.create_threads": ["threading.Thread", "<builtin>.len"], "training.queue_runner_impl.QueueRunner.to_proto": ["framework.ops.strip_name_scope", "framework.errors.error_code_from_exception_type", "protobuf.queue_runner_pb2.QueueRunnerDef"], "protobuf.queue_runner_pb2.QueueRunnerDef": [], "framework.errors.error_code_from_exception_type": [], "training.queue_runner_impl.QueueRunner.from_proto": ["training.queue_runner_impl.QueueRunner.__init__"], "training.queue_runner_impl.add_queue_runner": ["framework.ops.add_to_collection"], "training.queue_runner_impl.start_queue_runners": ["framework.ops.get_collection", "platform.tf_logging.warning", "eager.context.executing_eagerly", "<builtin>.ValueError", "<builtin>.RuntimeError", "<builtin>.TypeError", "framework.ops.get_default_session", "<builtin>.isinstance"], "training.rmsprop": [], "training.rmsprop.RMSPropOptimizer.__init__": ["<builtin>.super"], "training.rmsprop.RMSPropOptimizer._create_slots": ["optimizer.Optimizer._get_or_make_slot_with_initializer", "ops.init_ops.ones_initializer", "ops.array_ops.ones_like", "optimizer.Optimizer._zeros_slot"], "training.rmsprop.RMSPropOptimizer._prepare": ["framework.ops.convert_to_tensor", "optimizer.Optimizer._call_if_callable"], "training.rmsprop.RMSPropOptimizer._apply_dense": ["training.training_ops.apply_rms_prop", "optimizer.Optimizer.get_slot", "ops.math_ops.cast", "training.training_ops.apply_centered_rms_prop"], "training.training_ops.apply_centered_rms_prop": [], "training.training_ops.apply_rms_prop": [], "training.rmsprop.RMSPropOptimizer._resource_apply_dense": ["training.training_ops.resource_apply_rms_prop", "optimizer.Optimizer.get_slot", "training.training_ops.resource_apply_centered_rms_prop", "ops.math_ops.cast"], "training.training_ops.resource_apply_centered_rms_prop": [], "training.training_ops.resource_apply_rms_prop": [], "training.rmsprop.RMSPropOptimizer._apply_sparse": ["optimizer.Optimizer.get_slot", "training.training_ops.sparse_apply_centered_rms_prop", "ops.math_ops.cast", "training.training_ops.sparse_apply_rms_prop"], "training.training_ops.sparse_apply_centered_rms_prop": [], "training.training_ops.sparse_apply_rms_prop": [], "training.rmsprop.RMSPropOptimizer._resource_apply_sparse": ["training.training_ops.resource_sparse_apply_rms_prop", "optimizer.Optimizer.get_slot", "training.training_ops.resource_sparse_apply_centered_rms_prop", "ops.math_ops.cast"], "training.training_ops.resource_sparse_apply_centered_rms_prop": [], "training.training_ops.resource_sparse_apply_rms_prop": [], "training.saver": ["util.tf_export.tf_export", "framework.ops.register_proto_function", "threading.Lock"], "training.saver._get_duration_microseconds": ["<builtin>.round"], "training.saver.BaseSaverBuilder.__init__": [], "training.saver.BaseSaverBuilder.save_op": ["<builtin>.RuntimeError", "ops.io_ops.save_v2", "ops.io_ops._save"], "ops.io_ops.save_v2": [], "training.saver.BaseSaverBuilder.bulk_restore": ["training.saver.BaseSaverBuilder.restore_op", "saving.saveable_object_util.set_cpu0", "framework.ops.device"], "saving.saveable_object_util.set_cpu0": ["device.DeviceSpec.from_string"], "training.saver.BaseSaverBuilder.restore_op": ["ops.io_ops.restore_v2"], "training.saver.BaseSaverBuilder.sharded_filename": ["ops.gen_io_ops.sharded_filename"], "ops.gen_io_ops.sharded_filename": [], "training.saver.BaseSaverBuilder._AddSaveOps": ["training.saver.BaseSaverBuilder.save_op", "ops.control_flow_ops.with_dependencies"], "training.saver.BaseSaverBuilder._AddShardedSaveOpsForV2": ["training.saver.BaseSaverBuilder._AddSaveOps", "ops.gen_io_ops.merge_v2_checkpoints", "<builtin>.enumerate", "framework.constant_op.constant", "ops.string_ops.regex_full_match", "<builtin>.len", "ops.string_ops.string_join", "saving.saveable_object_util.set_cpu0", "framework.ops.control_dependencies", "framework.ops.device", "training.saver.BaseSaverBuilder.sharded_filename", "ops.array_ops.identity", "ops.array_ops.where"], "ops.gen_io_ops.merge_v2_checkpoints": [], "training.saver.BaseSaverBuilder._AddShardedSaveOps": ["training.saver.BaseSaverBuilder._AddSaveOps", "ops.gen_io_ops.sharded_filespec", "<builtin>.enumerate", "framework.constant_op.constant", "<builtin>.len", "framework.ops.control_dependencies", "framework.ops.device", "training.saver.BaseSaverBuilder.sharded_filename", "training.saver.BaseSaverBuilder._AddShardedSaveOpsForV2"], "ops.gen_io_ops.sharded_filespec": [], "training.saver.BaseSaverBuilder._AddRestoreOps": ["training.saver.BulkSaverBuilder.bulk_restore", "ops.control_flow_ops.group", "training.saver.BaseSaverBuilder.bulk_restore", "<builtin>.len", "ops.array_ops.shape"], "training.saver.BulkSaverBuilder.bulk_restore": ["<builtin>.zip", "ops.io_ops.restore_v2", "framework.ops.device"], "training.saver.BaseSaverBuilder._AddShardedRestoreOps": ["training.saver.BaseSaverBuilder._AddRestoreOps", "ops.control_flow_ops.group", "<builtin>.enumerate", "framework.ops.device"], "training.saver.BaseSaverBuilder._GroupByDevices": ["<builtin>.sorted", "<builtin>.set", "framework.device.canonical_name", "<builtin>.len", "<builtin>.ValueError", "collections.defaultdict"], "training.saver.BaseSaverBuilder._GroupByDevices.<lambda1>": [], "training.saver.BaseSaverBuilder._GroupByDevices.<lambda2>": [], "training.saver.BaseSaverBuilder.build": ["training.saver.BaseSaverBuilder._build_internal"], "training.saver.BaseSaverBuilder._build_internal": ["training.saver.BaseSaverBuilder._GroupByDevices", "training.saver.BaseSaverBuilder._AddSaveOps", "training.saver.BaseSaverBuilder._AddRestoreOps", "training.saver.BaseSaverBuilder._AddShardedSaveOps", "framework.ops.get_default_graph", "protobuf.saver_pb2.SaverDef", "<builtin>.isinstance", "saving.saveable_object_util.validate_and_slice_inputs", "ops.array_ops.placeholder_with_default", "<builtin>.ValueError", "training.saver.BaseSaverBuilder._AddShardedRestoreOps", "eager.context.executing_eagerly", "framework.ops.name_scope"], "saving.saveable_object_util.validate_and_slice_inputs": ["util.object_identity.ObjectIdentitySet", "<builtin>.isinstance", "saving.saveable_object_util.saveable_objects_for_op", "saving.saveable_object_util.op_list_to_dict", "saving.saveable_object_util._add_saveable", "<builtin>.sorted"], "training.saver.Saver.__init__": ["training.saver.Saver.build", "platform.tf_logging.warning", "<builtin>.RuntimeError", "time.time", "training.saver.Saver._check_saver_def", "<builtin>.ValueError", "eager.context.executing_eagerly"], "training.saver.Saver.build": ["training.saver.Saver._build", "eager.context.executing_eagerly", "<builtin>.RuntimeError"], "training.saver.Saver._check_saver_def": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.str", "eager.context.executing_eagerly"], "training.saver.Saver._build": ["training.saver.BaseSaverBuilder.__init__", "ops.variables._all_saveable_objects", "training.saver.BaseSaverBuilder._build_internal", "framework.ops.prepend_name_scope", "time.time", "training.saver.Saver._check_saver_def", "<builtin>.ValueError", "eager.context.executing_eagerly"], "training.saver.Saver._build_eager": ["training.saver.Saver._build"], "training.saver.Saver._CheckpointFilename": [], "training.saver.Saver._RecordLastCheckpoint": ["training.saver.Saver._CheckpointFilename", "time.time", "<builtin>.len"], "training.saver.Saver._MaybeDeleteOldCheckpoints": ["training.saver.Saver._CheckpointFilename", "platform.tf_logging.warning", "<builtin>.str", "training.checkpoint_management.remove_checkpoint"], "training.saver.Saver.as_saver_def": [], "training.saver.Saver.to_proto": ["framework.ops.strip_name_scope", "protobuf.saver_pb2.SaverDef"], "training.saver.Saver.from_proto": ["training.saver.Saver.__init__"], "training.saver.Saver.last_checkpoints": ["training.saver.Saver._CheckpointFilename", "<builtin>.list"], "training.saver.Saver.set_last_checkpoints": ["<builtin>.isinstance"], "training.saver.Saver.set_last_checkpoints_with_time": ["<builtin>.isinstance"], "training.saver.Saver.recover_last_checkpoints": ["training.saver.Saver.set_last_checkpoints_with_time", "training.checkpoint_management.get_checkpoint_mtimes"], "training.saver.Saver.save": ["pywrap_saved_model.metrics.AddTrainingTimeSaved", "platform.tf_logging.warning", "pywrap_saved_model.metrics.AddCheckpointWriteDuration", "util.compat.as_str", "platform.gfile.IsDirectory", "training.saver.Saver._RecordLastCheckpoint", "training.saver.Saver._build_eager", "<builtin>.TypeError", "training.saver.Saver._MaybeDeleteOldCheckpoints", "training.saver._get_duration_microseconds", "training.saver.Saver.export_meta_graph", "training.training_util.global_step", "<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.ValueError", "eager.context.executing_eagerly", "training.checkpoint_management.meta_graph_filename", "time.time", "training.checkpoint_management.update_checkpoint_state_internal"], "pywrap_saved_model.metrics.AddCheckpointWriteDuration": [], "pywrap_saved_model.metrics.AddTrainingTimeSaved": [], "training.saver.Saver.export_meta_graph": ["training.saver.Saver.export_meta_graph", "framework.ops.get_default_graph"], "training.saver.Saver.restore": ["training.saver._wrap_restore_error_with_msg", "training.saver.object_graph_key_mapping", "platform.tf_logging.info", "training.saver._get_duration_microseconds", "pywrap_saved_model.metrics.AddCheckpointReadDuration", "training.saver.saver_from_object_based_checkpoint", "platform.tf_logging.warning", "training.saver.Saver._build_eager", "time.time", "util.compat.as_text", "training.saver.Saver.restore", "<builtin>.ValueError", "training.checkpoint_management.checkpoint_exists_internal", "eager.context.executing_eagerly"], "training.saver.object_graph_key_mapping": ["protobuf.trackable_object_graph_pb2.TrackableObjectGraph", "training.py_checkpoint_reader.NewCheckpointReader"], "training.saver._wrap_restore_error_with_msg": [], "training.saver.saver_from_object_based_checkpoint": ["<builtin>.sorted", "<builtin>.set", "training.saver.object_graph_key_mapping", "training.saver.BaseSaverBuilder.__init__", "training.saver.Saver.__init__", "framework.errors.NotFoundError", "ops.variables._all_saveable_objects", "<builtin>.len", "saving.saveable_object_util.validate_and_slice_inputs", "<builtin>.ValueError"], "pywrap_saved_model.metrics.AddCheckpointReadDuration": [], "training.saver.Saver._add_collection_def": ["framework.meta_graph.add_collection_def"], "training.saver._create_saver_from_imported_meta_graph": ["<builtin>.list", "training.saver.Saver.__init__", "platform.tf_logging.info", "ops.variables._all_saveable_objects", "<builtin>.len"], "protobuf.trackable_object_graph_pb2.TrackableObjectGraph": [], "training.server_lib": [], "training.server_lib._make_server_def": ["<builtin>.isinstance", "training.server_lib.ClusterSpec.as_cluster_def", "<builtin>.TypeError", "<builtin>.ValueError", "training.server_lib.ClusterSpec.task_indices", "protobuf.tensorflow_server_pb2.ServerDef", "<builtin>.len", "training.server_lib.ClusterSpec.__init__"], "training.server_lib.ClusterSpec.__init__": ["<builtin>.isinstance", "protobuf.cluster_pb2.ClusterDef", "<builtin>.TypeError", "training.server_lib.ClusterSpec._make_cluster_def", "<builtin>.int", "<builtin>.enumerate"], "training.server_lib.ClusterSpec.task_indices": ["<builtin>.sorted", "<builtin>.list", "<builtin>.ValueError"], "training.server_lib.ClusterSpec.as_cluster_def": [], "training.server_lib.Server.__init__": ["client.pywrap_tf_session.TF_NewServer", "training.server_lib.Server.start", "training.server_lib._make_server_def"], "client.pywrap_tf_session.TF_NewServer": [], "training.server_lib.Server.start": ["client.pywrap_tf_session.TF_ServerStart"], "training.server_lib.Server.__del__": ["client.pywrap_tf_session.TF_ServerStop"], "client.pywrap_tf_session.TF_ServerStop": [], "client.pywrap_tf_session.TF_ServerStart": [], "training.server_lib.Server.join": ["client.pywrap_tf_session.TF_ServerJoin"], "client.pywrap_tf_session.TF_ServerJoin": [], "training.server_lib.Server.server_def": [], "training.server_lib.Server.target": ["client.pywrap_tf_session.TF_ServerTarget"], "client.pywrap_tf_session.TF_ServerTarget": [], "training.server_lib.Server.create_local_server": ["training.server_lib.Server.__init__"], "training.server_lib.ClusterSpec._make_cluster_def": ["<builtin>.sorted", "protobuf.cluster_pb2.ClusterDef", "util.compat.as_bytes", "<builtin>.TypeError"], "protobuf.cluster_pb2.ClusterDef": [], "training.server_lib.ClusterSpec.__bool__": ["<builtin>.bool"], "training.server_lib.ClusterSpec.__eq__": [], "training.server_lib.ClusterSpec.__ne__": [], "training.server_lib.ClusterSpec.__repr__": ["<builtin>.repr", "<builtin>.sorted", "training.server_lib.ClusterSpec.as_dict"], "training.server_lib.ClusterSpec.as_dict": ["training.server_lib.ClusterSpec.task_address", "training.server_lib.ClusterSpec.job_tasks", "<builtin>.max", "training.server_lib.ClusterSpec.task_indices", "<builtin>.len"], "training.server_lib.ClusterSpec.job_tasks": ["<builtin>.max", "<builtin>.range", "<builtin>.ValueError"], "training.server_lib.ClusterSpec.task_address": ["<builtin>.ValueError"], "training.server_lib.ClusterSpec.jobs": ["<builtin>.list"], "training.server_lib.ClusterSpec.num_tasks": ["<builtin>.ValueError", "<builtin>.len"], "training.server_lib.ClusterDeviceFilters.__init__": [], "training.server_lib.ClusterDeviceFilters.set_device_filters": ["<builtin>.all", "<builtin>.isinstance"], "training.server_lib.ClusterDeviceFilters._as_cluster_device_filters": ["training.server_lib.ClusterDeviceFilters._make_cluster_device_filters"], "training.server_lib.ClusterDeviceFilters._make_cluster_device_filters": ["<builtin>.sorted", "<builtin>.TypeError", "util.compat.as_bytes", "protobuf.device_filters_pb2.ClusterDeviceFilters"], "protobuf.device_filters_pb2.ClusterDeviceFilters": [], "training.session_manager": [], "training.session_manager._maybe_name": ["<builtin>.hasattr", "<builtin>.type"], "training.session_manager._restore_checkpoint_and_maybe_run_saved_model_initializers": ["framework.ops.get_collection"], "training.session_manager.SessionManager.__init__": ["framework.ops.get_default_graph", "<builtin>.ValueError"], "training.session_manager.SessionManager._restore_checkpoint": ["time.sleep", "client.session.Session", "distribute.distribution_strategy_context.get_strategy", "training.session_manager._restore_checkpoint_and_maybe_run_saved_model_initializers", "platform.tf_logging.info", "<builtin>.ValueError", "<builtin>.hasattr", "training.checkpoint_management.get_checkpoint_state"], "training.session_manager.SessionManager.prepare_session": ["training.session_manager.SessionManager._restore_checkpoint", "training.session_manager.SessionManager._try_run_local_init_op", "training.session_manager.SessionManager._model_ready", "<builtin>.RuntimeError", "training.session_manager._maybe_name"], "training.session_manager.SessionManager._try_run_local_init_op": ["training.session_manager.SessionManager._model_ready_for_local_init", "platform.tf_logging.info"], "training.session_manager.SessionManager._model_ready": ["training.session_manager._ready"], "training.session_manager.SessionManager.recover_session": ["training.session_manager.SessionManager._restore_checkpoint", "training.session_manager.SessionManager._model_ready", "training.session_manager.SessionManager._try_run_local_init_op", "platform.tf_logging.info"], "training.session_manager.SessionManager.wait_for_session": ["time.sleep", "client.session.Session", "training.session_manager.SessionManager._try_run_local_init_op", "training.session_manager.SessionManager._safe_close", "training.session_manager.SessionManager._model_ready", "platform.tf_logging.info", "<builtin>.float", "training.session_manager._CountDownTimer.__init__", "training.session_manager._CountDownTimer.secs_remaining", "framework.errors.DeadlineExceededError"], "training.session_manager._CountDownTimer.__init__": ["time.time"], "training.session_manager.SessionManager._safe_close": [], "training.session_manager._CountDownTimer.secs_remaining": ["<builtin>.max", "time.time"], "framework.errors.DeadlineExceededError": [], "training.session_manager._ready": ["platform.tf_logging.warning", "<builtin>.str"], "training.session_manager.SessionManager._model_ready_for_local_init": ["training.session_manager._ready"], "training.session_run_hook": [], "training.session_run_hook.SessionRunHook.begin": [], "training.session_run_hook.SessionRunHook.after_create_session": [], "training.session_run_hook.SessionRunHook.before_run": [], "training.session_run_hook.SessionRunHook.after_run": [], "training.session_run_hook.SessionRunHook.end": [], "training.session_run_hook.SessionRunArgs.__new__": ["<builtin>.super"], "training.session_run_hook.SessionRunContext.__init__": [], "training.session_run_hook.SessionRunContext.original_args": [], "training.session_run_hook.SessionRunContext.session": [], "training.session_run_hook.SessionRunContext.stop_requested": [], "training.session_run_hook.SessionRunContext.request_stop": [], "training.slot_creator": [], "training.slot_creator._create_slot_var": ["ops.variable_scope.get_variable_scope", "xla_sharding.xla_sharding.copy_sharding", "ops.resource_variable_ops.is_resource_variable", "<builtin>.len", "ops.variable_scope.get_variable", "variables.Variable.SaveSliceInfo", "<builtin>.callable", "<builtin>.isinstance"], "training.summary_io": [], "training.summary_io.SummaryWriter": ["util.deprecation.deprecated"], "training.summary_io.SummaryWriter.__init__": ["<builtin>.super"], "training.supervisor": ["<builtin>.setattr"], "training.supervisor.Supervisor": ["contextlib.contextmanager", "util.deprecation.deprecated"], "training.supervisor.Supervisor.__init__": ["<builtin>.RuntimeError", "summary.summary.FileWriter", "training.supervisor.Supervisor._init_saver", "training.supervisor.Supervisor._init_ready_op", "eager.context.executing_eagerly", "framework.ops.get_default_graph", "training.coordinator.Coordinator", "training.supervisor.Supervisor._init_session_manager", "training.supervisor.Supervisor._init_summary_op", "training.supervisor.Supervisor._init_global_step", "training.supervisor.Supervisor._init_local_init_op", "framework.meta_graph.create_meta_graph_def", "training.supervisor.Supervisor._init_init_op", "os.path.join", "training.supervisor.Supervisor._verify_setup"], "training.supervisor.Supervisor._init_ready_op": ["ops.variables.report_uninitialized_variables", "framework.ops.add_to_collection", "training.supervisor.Supervisor._get_first_op_from_collection"], "training.supervisor.Supervisor._init_init_op": ["framework.ops.add_to_collection", "ops.variables.global_variables_initializer", "training.supervisor.Supervisor._get_first_op_from_collection"], "training.supervisor.Supervisor._init_local_init_op": ["ops.control_flow_ops.group", "ops.variables.local_variables_initializer", "ops.lookup_ops.tables_initializer", "framework.ops.add_to_collection", "training.supervisor.Supervisor._get_first_op_from_collection"], "training.supervisor.Supervisor._init_saver": ["ops.variables.global_variables", "training.saver.Saver", "framework.ops.add_to_collection", "training.supervisor.Supervisor._get_first_op_from_collection"], "training.supervisor.Supervisor._init_summary_op": ["framework.ops.add_to_collection", "summary.summary.merge_all", "training.supervisor.Supervisor._get_first_op_from_collection"], "training.supervisor.Supervisor._init_global_step": ["training.supervisor.Supervisor._default_global_step_tensor", "framework.ops.add_to_collection", "training.supervisor.Supervisor._get_first_op_from_collection"], "training.supervisor.Supervisor._init_session_manager": ["training.session_manager.SessionManager"], "training.supervisor.Supervisor._verify_setup": ["<builtin>.ValueError"], "training.supervisor.Supervisor._get_first_op_from_collection": ["platform.tf_logging.info", "framework.ops.get_collection", "<builtin>.len"], "training.supervisor.Supervisor._default_global_step_tensor": ["platform.tf_logging.warning", "framework.ops.get_default_graph"], "training.supervisor.Supervisor.is_chief": [], "training.supervisor.Supervisor.session_manager": [], "training.supervisor.Supervisor.coord": [], "training.supervisor.Supervisor.init_op": [], "training.supervisor.Supervisor.init_feed_dict": [], "training.supervisor.Supervisor.ready_op": [], "training.supervisor.Supervisor.ready_for_local_init_op": [], "training.supervisor.Supervisor.summary_writer": [], "training.supervisor.Supervisor.summary_op": [], "training.supervisor.Supervisor.save_summaries_secs": [], "training.supervisor.Supervisor.global_step": [], "training.supervisor.Supervisor.saver": [], "training.supervisor.Supervisor.save_model_secs": [], "training.supervisor.Supervisor.save_path": [], "training.supervisor.Supervisor._write_graph": ["training.training_util.write_graph"], "training.supervisor.Supervisor.start_standard_services": ["<builtin>.RuntimeError", "training.supervisor.SVStepCounterThread.__init__", "util.event_pb2.SessionLog", "training.supervisor.SVTimerCheckpointThread.__init__", "training.supervisor.SVSummaryThread.__init__", "platform.tf_logging.warning", "training.training_util.global_step"], "training.supervisor.SVSummaryThread.__init__": ["<builtin>.super"], "training.supervisor.SVStepCounterThread.__init__": ["<builtin>.super"], "training.supervisor.SVTimerCheckpointThread.__init__": ["<builtin>.super"], "training.supervisor.Supervisor.prepare_or_wait_for_session": ["training.supervisor.Supervisor.start_standard_services", "platform.tf_logging.info", "training.supervisor.Supervisor.start_queue_runners", "training.supervisor.Supervisor._write_graph"], "training.supervisor.Supervisor.start_queue_runners": ["<builtin>.RuntimeError", "eager.context.executing_eagerly"], "training.supervisor.Supervisor.loop": ["training.coordinator.LooperThread"], "training.coordinator.LooperThread": [], "training.supervisor.Supervisor.stop": ["util.event_pb2.SessionLog"], "training.supervisor.Supervisor.request_stop": [], "training.supervisor.Supervisor.should_stop": [], "training.supervisor.Supervisor.stop_on_exception": [], "training.supervisor.Supervisor.wait_for_stop": [], "training.supervisor.Supervisor.summary_computed": ["<builtin>.RuntimeError", "training.training_util.global_step"], "training.supervisor.Supervisor.managed_session": ["training.supervisor.Supervisor.prepare_or_wait_for_session", "training.supervisor.Supervisor.stop", "training.supervisor.Supervisor.request_stop"], "training.supervisor.SVSummaryThread.run_loop": ["platform.tf_logging.info"], "training.supervisor.SVStepCounterThread.start_loop": ["time.time", "training.training_util.global_step"], "training.supervisor.SVStepCounterThread.run_loop": ["framework.summary_pb2.Summary", "<builtin>.float", "time.time", "summary_pb2.Summary.Value", "training.training_util.global_step", "platform.tf_logging.log_first_n"], "training.supervisor.SVTimerCheckpointThread.run_loop": ["platform.tf_logging.info", "training.training_util.global_step", "util.event_pb2.SessionLog"], "training.sync_replicas_optimizer": [], "training.sync_replicas_optimizer.SyncReplicasOptimizer": ["util.deprecation.deprecated"], "training.sync_replicas_optimizer.SyncReplicasOptimizer.__init__": ["platform.tf_logging.info", "<builtin>.max", "<builtin>.super"], "training.sync_replicas_optimizer.SyncReplicasOptimizer.compute_gradients": [], "training.sync_replicas_optimizer.SyncReplicasOptimizer.apply_gradients": ["ops.data_flow_ops.SparseConditionalAccumulator", "ops.variable_scope.variable", "<builtin>.isinstance", "ops.control_flow_ops.group", "ops.data_flow_ops.ConditionalAccumulator", "framework.ops.control_dependencies", "<builtin>.ValueError", "ops.control_flow_ops.no_op", "ops.state_ops.assign", "framework.ops.device", "framework.ops.name_scope", "ops.array_ops.fill", "ops.data_flow_ops.FIFOQueue", "<builtin>.zip", "distribute.distribution_strategy_context.get_strategy", "training.queue_runner.QueueRunner"], "ops.data_flow_ops.ConditionalAccumulator": [], "ops.data_flow_ops.SparseConditionalAccumulator": [], "training.sync_replicas_optimizer.SyncReplicasOptimizer.get_chief_queue_runner": ["<builtin>.ValueError"], "training.sync_replicas_optimizer.SyncReplicasOptimizer.get_slot": [], "training.sync_replicas_optimizer.SyncReplicasOptimizer.variables": [], "training.sync_replicas_optimizer.SyncReplicasOptimizer.get_slot_names": [], "training.sync_replicas_optimizer.SyncReplicasOptimizer.get_init_tokens_op": ["ops.array_ops.fill", "ops.control_flow_ops.no_op", "<builtin>.ValueError", "framework.ops.device", "framework.ops.name_scope"], "training.sync_replicas_optimizer.SyncReplicasOptimizer.make_session_run_hook": ["training.sync_replicas_optimizer._SyncReplicasOptimizerHook.__init__"], "training.sync_replicas_optimizer._SyncReplicasOptimizerHook.__init__": [], "training.sync_replicas_optimizer._SyncReplicasOptimizerHook.begin": ["training.sync_replicas_optimizer.SyncReplicasOptimizer.get_init_tokens_op", "training.sync_replicas_optimizer.SyncReplicasOptimizer.get_chief_queue_runner", "<builtin>.ValueError"], "training.sync_replicas_optimizer._SyncReplicasOptimizerHook.after_create_session": ["training.session_manager._ready", "<builtin>.RuntimeError"], "training.training": ["util.tf_export.tf_export"], "training.training_ops": [], "training.training_util": ["util.tf_export.tf_export"], "training.training_util.assert_global_step": ["ops.resource_variable_ops.is_resource_variable", "<builtin>.TypeError", "<builtin>.isinstance"], "training.training_util.create_global_step": ["ops.init_ops.zeros_initializer", "framework.ops.device", "ops.variable_scope.get_variable", "eager.context.executing_eagerly", "<builtin>.ValueError", "training.training_util.get_global_step", "framework.ops.get_default_graph"], "training.training_util._get_global_step_read": ["<builtin>.len", "<builtin>.RuntimeError", "framework.ops.get_default_graph"], "training.training_util._increment_global_step": ["<builtin>.ValueError", "training.training_util._get_or_create_global_step_read", "ops.state_ops.assign_add", "training.training_util.get_global_step", "framework.ops.control_dependencies", "framework.ops.get_default_graph"], "training.warm_starting_util": ["util.tf_export.tf_export"], "training.warm_starting_util.VocabInfo.__new__": ["<builtin>.super", "<builtin>.ValueError"], "training.warm_starting_util._infer_var_name": ["<builtin>.list", "<builtin>.len", "<builtin>.TypeError", "saving.saveable_object_util.op_list_to_dict"], "training.warm_starting_util._get_var_info": ["<builtin>.all", "training.warm_starting_util._infer_var_name", "<builtin>.isinstance", "<builtin>.type", "training.checkpoint_utils._is_variable", "<builtin>.TypeError"], "training.warm_starting_util._warm_start_var_with_vocab": ["<builtin>.all", "<builtin>.isinstance", "training.warm_starting_util._infer_var_name", "training.checkpoint_utils._get_checkpoint_filename", "<builtin>.sum", "framework.ops.convert_to_tensor", "training.checkpoint_ops._load_and_remap_matrix_initializer", "ops.state_ops.assign", "<builtin>.ValueError", "<builtin>.type", "ops.variable_scope._PartitionInfo", "training.checkpoint_utils._is_variable", "<builtin>.TypeError"], "ops.variable_scope._PartitionInfo": [], "training.warm_starting_util._get_grouped_variables": ["<builtin>.all", "<builtin>.isinstance", "training.warm_starting_util._infer_var_name", "framework.ops.get_collection", "<builtin>.type", "<builtin>.ValueError", "platform.tf_logging.info", "training.checkpoint_utils._is_variable"], "training.warm_starting_util._get_object_checkpoint_renames": ["<builtin>.set", "training.saver.object_graph_key_mapping", "<builtin>.ValueError", "training.checkpoint_utils._get_checkpoint_filename"], "training.warm_starting_util.warm_start": ["training.warm_starting_util._warm_start_var_with_vocab", "training.warm_starting_util._get_grouped_variables", "platform.tf_logging.debug", "training.checkpoint_utils.init_from_checkpoint", "<builtin>.set", "<builtin>.ValueError", "six.iteritems", "training.warm_starting_util._get_var_info", "platform.tf_logging.info", "training.warm_starting_util._get_object_checkpoint_renames", "<builtin>.len"], "types.core": ["textwrap.dedent", "types.doc_typealias.document", "util.tf_export.tf_export"], "types.core.Tensor.dtype": [], "types.core.Tensor.shape": [], "types.core.Value.numpy": [], "types.core.Callable.__call__": [], "types.core.GenericFunction.get_concrete_function": [], "types.core.GenericFunction.experimental_get_compiler_ir": [], "types.core.TensorProtocol.__tf_tensor__": [], "types.distribute": [], "types.distribute.Iterable.__iter__": [], "types.distribute.Iterable.reduce": [], "types.distribute.Iterator.get_next": [], "types.distribute.Iterator.__next__": [], "types.distribute.Iterator.__iter__": [], "types.doc_typealias": [], "types.internal": [], "user_ops.user_ops": ["util.tf_export.tf_export"], "user_ops.user_ops.my_fact": ["ops.gen_user_ops.fact"], "ops.gen_user_ops.fact": [], "util.all_util": ["re.compile"], "util.all_util.make_all": ["util.tf_inspect.getmembers", "<builtin>.set", "<builtin>.list"], "util.all_util.reveal_undocumented": ["<builtin>.setattr", "<builtin>.LookupError"], "util.compat": ["util.tf_export.tf_export"], "util.compat_internal": [], "util.compat_internal.path_to_str": ["util.compat.as_str_any", "<builtin>.hasattr"], "util.decorator_utils": [], "util.decorator_utils.get_qualified_name": ["<builtin>.hasattr"], "util.decorator_utils._normalize_docstring": ["<builtin>.min", "<builtin>.len"], "util.decorator_utils.add_notice_to_docstring": ["<builtin>.ValueError", "util.decorator_utils._normalize_docstring", "<builtin>.len"], "util.decorator_utils.validate_callable": ["<builtin>.hasattr", "<builtin>.ValueError"], "util.decorator_utils.classproperty.__init__": [], "util.decorator_utils.classproperty.__get__": [], "util.decorator_utils._CachedClassProperty.__init__": [], "util.decorator_utils._CachedClassProperty.__get__": [], "util.decorator_utils._CachedClassProperty.__set__": ["<builtin>.AttributeError"], "util.decorator_utils._CachedClassProperty.__delete__": ["<builtin>.AttributeError"], "util.decorator_utils.cached_classproperty": ["util.decorator_utils._CachedClassProperty.__init__"], "util.deprecation": ["collections.namedtuple", "util.tf_contextlib.contextmanager", "util.deprecation.HiddenTfApiAttribute.__init__"], "util.deprecation._add_deprecated_function_notice_to_docstring": ["util.decorator_utils.add_notice_to_docstring"], "util.deprecation._add_deprecated_arg_notice_to_docstring": ["util.decorator_utils.add_notice_to_docstring", "<builtin>.sorted"], "util.deprecation._add_deprecated_arg_value_notice_to_docstring": ["util.decorator_utils.add_notice_to_docstring", "<builtin>.sorted"], "util.deprecation._validate_deprecation_args": ["re.match", "<builtin>.ValueError"], "util.deprecation._call_location": ["inspect.currentframe"], "util.deprecation._safe_eq": [], "util.deprecation._wrap_decorator": [], "util.deprecation._wrap_decorator.wrapper": ["util.tf_decorator.make_decorator"], "util.deprecation.deprecated_alias": ["util.tf_decorator.make_decorator", "util.deprecation._add_deprecated_function_notice_to_docstring", "functools.wraps", "util.decorator_utils.validate_callable", "util.tf_inspect.isclass"], "util.deprecation.deprecated_alias._NewClass": ["util.deprecation._wrap_decorator", "util.deprecation._wrap_decorator.wrapper", "util.deprecation._call_location", "util.decorator_utils.add_notice_to_docstring"], "util.deprecation.deprecated_alias._NewClass.__init__": ["platform.tf_logging.warning", "<builtin>.hasattr", "util.deprecation._call_location", "<builtin>.super"], "util.deprecation.deprecated_alias.new_func": ["platform.tf_logging.warning", "util.deprecation._call_location"], "util.deprecation.deprecated_endpoints.deprecated_wrapper": [], "util.deprecation.deprecated.deprecated_wrapper": ["util.tf_decorator.make_decorator", "util.deprecation._add_deprecated_function_notice_to_docstring", "functools.wraps", "<builtin>.isinstance", "<builtin>.setattr", "util.decorator_utils.validate_callable", "docs.doc_controls.set_deprecated"], "util.deprecation.deprecated.deprecated_wrapper.new_func": ["platform.tf_logging.warning", "util.deprecation._call_location", "util.decorator_utils.get_qualified_name"], "docs.doc_controls.set_deprecated": ["<builtin>.setattr"], "util.deprecation.deprecated_args._get_arg_names_to_ok_vals": ["<builtin>.isinstance"], "util.deprecation.deprecated_args._get_deprecated_positional_arguments": ["<builtin>.enumerate", "<builtin>.iter"], "util.deprecation.deprecated_args.deprecated_wrapper": ["util.deprecation._add_deprecated_arg_notice_to_docstring", "util.tf_decorator.make_decorator", "<builtin>.sorted", "util.deprecation.deprecated_args._get_deprecated_positional_arguments", "functools.wraps", "<builtin>.len", "util.tf_inspect.getfullargspec", "<builtin>.ValueError", "util.decorator_utils.validate_callable"], "util.deprecation.deprecated_args.deprecated_wrapper._same_value": ["<builtin>.isinstance"], "util.deprecation.deprecated_args.deprecated_wrapper.new_func": ["util.deprecation.deprecated_args.deprecated_wrapper._same_value", "util.is_in_graph_mode.IS_IN_GRAPH_MODE", "<builtin>.len", "util.decorator_utils.get_qualified_name", "platform.tf_logging.warning", "<builtin>.iter", "util.tf_inspect.getcallargs", "util.deprecation._call_location"], "util.is_in_graph_mode.IS_IN_GRAPH_MODE": [], "util.deprecation.deprecated_arg_values.deprecated_wrapper": ["util.deprecation._add_deprecated_arg_value_notice_to_docstring", "util.decorator_utils.validate_callable", "util.tf_decorator.make_decorator", "functools.wraps"], "util.deprecation.deprecated_arg_values.deprecated_wrapper.new_func": ["util.decorator_utils.get_qualified_name", "platform.tf_logging.warning", "util.tf_inspect.getcallargs", "util.deprecation._call_location", "util.deprecation._safe_eq"], "util.deprecation.HiddenTfApiAttribute.__init__": ["<builtin>.super"], "util.deprecation.HiddenTfApiAttribute.__init__.raise_error": ["<builtin>.AttributeError"], "util.deprecation_wrapper": [], "util.dispatch": ["util.tf_export.tf_export"], "util.dispatch.OpDispatcher": ["<builtin>.object"], "util.dispatch.OpDispatcher.handle": [], "util.dispatch.OpDispatcher.register": ["<builtin>.getattr", "<builtin>.hasattr", "<builtin>.AssertionError"], "util.dispatch.GlobalOpDispatcher.handle": [], "util.dispatch.GlobalOpDispatcher.register": [], "util.dispatch.dispatch": ["<builtin>.getattr"], "util.dispatch._TypeBasedDispatcher.__init__": [], "util.dispatch._TypeBasedDispatcher._handles": ["itertools.chain", "<builtin>.any", "<builtin>.isinstance"], "util.dispatch._TypeBasedDispatcher.handle": ["util.dispatch._TypeBasedDispatcher._handles"], "util.dispatch.dispatch_for_types.decorator": ["util.dispatch._TypeBasedDispatcher.__init__", "util.dispatch.OpDispatcher.register", "util.tf_inspect.getargspec", "<builtin>.AssertionError"], "util.dispatch.add_dispatch_support.op_dispatch_handler": ["util.dispatch.dispatch"], "util.example_parser_configuration": [], "util.example_parser_configuration.extract_example_parser_configuration": ["util.example_parser_configuration._extract_from_parse_example_v2", "util.example_parser_configuration._extract_from_parse_example", "<builtin>.ValueError"], "util.example_parser_configuration._extract_from_parse_example": ["framework.tensor_shape.TensorShape", "<builtin>.range", "example.example_parser_configuration_pb2.ExampleParserConfiguration", "framework.tensor_util.make_tensor_proto", "<builtin>.len", "<builtin>.ValueError"], "util.example_parser_configuration._extract_from_parse_example_v2": ["framework.tensor_shape.TensorShape", "<builtin>.range", "example.example_parser_configuration_pb2.ExampleParserConfiguration", "framework.tensor_util.make_tensor_proto", "<builtin>.len", "<builtin>.ValueError"], "example.example_parser_configuration_pb2.ExampleParserConfiguration": [], "util.function_utils": [], "util.function_utils._is_bound_method": ["util.tf_inspect.ismethod", "util.tf_decorator.unwrap"], "util.function_utils._is_callable_object": ["util.tf_inspect.ismethod", "<builtin>.hasattr"], "six.get_method_self": [], "six.get_method_function": [], "util.future_api": ["<builtin>.delattr"], "util.is_in_graph_mode": [], "util.is_in_graph_mode.<lambda1>": [], "util.keras_deps": ["util.tf_export.tf_export"], "util.keyword_args": [], "util.keyword_args.keyword_args_only": ["functools.wraps", "util.decorator_utils.validate_callable"], "util.keyword_args.keyword_args_only.new_func": ["<builtin>.ValueError"], "util.lazy_loader": [], "util.lazy_loader.LazyLoader.__init__": ["<builtin>.super"], "util.lazy_loader.LazyLoader._load": ["ModuleType.__dict__.update", "platform.tf_logging.warning", "importlib.import_module"], "util.lazy_loader.LazyLoader.__getattr__": ["util.lazy_loader.LazyLoader._load", "<builtin>.getattr"], "util.lazy_loader.LazyLoader.__dir__": ["util.lazy_loader.LazyLoader._load", "<builtin>.dir"], "util.lock_util": [], "util.lock_util.GroupLock.__init__": ["threading.Condition", "threading.Lock", "<builtin>.ValueError"], "util.lock_util.GroupLock.group": ["util.lock_util.GroupLock._Context.__init__", "util.lock_util.GroupLock._validate_group_id"], "util.lock_util.GroupLock._validate_group_id": ["<builtin>.ValueError"], "util.lock_util.GroupLock._Context.__init__": [], "util.lock_util.GroupLock.acquire": ["util.lock_util.GroupLock._validate_group_id", "util.lock_util.GroupLock._another_group_active"], "util.lock_util.GroupLock._another_group_active": ["<builtin>.any", "<builtin>.enumerate"], "util.lock_util.GroupLock.release": ["util.lock_util.GroupLock._validate_group_id"], "util.lock_util.GroupLock._Context.__enter__": ["util.lock_util.GroupLock.acquire"], "util.lock_util.GroupLock._Context.__exit__": ["util.lock_util.GroupLock.release"], "util.memory": [], "util.module_wrapper": ["util.fast_module_type.get_fast_module_type_class", "eager.monitoring.BoolGauge"], "util.fast_module_type.get_fast_module_type_class": [], "util.module_wrapper.get_rename_v2": [], "util.module_wrapper._call_location": ["util.tf_inspect.currentframe", "<builtin>.range"], "util.module_wrapper.contains_deprecation_decorator": ["<builtin>.any"], "util.module_wrapper.has_deprecation_decorator": ["util.tf_inspect.isclass", "util.tf_decorator.unwrap", "<builtin>.hasattr", "util.tf_inspect.isfunction", "util.module_wrapper.contains_deprecation_decorator"], "util.module_wrapper.TFModuleWrapper.__init__": ["<builtin>.list", "<builtin>.super", "<builtin>.set", "<builtin>.hasattr", "<builtin>.dir"], "util.module_wrapper.TFModuleWrapper._tfmw_add_deprecation_warning": ["util.module_wrapper.get_rename_v2", "platform.tf_logging.warning", "util.module_wrapper.has_deprecation_decorator", "util.module_wrapper._call_location"], "util.module_wrapper.TFModuleWrapper._tfmw_import_module": ["<builtin>.getattr", "importlib.import_module", "<builtin>.setattr"], "util.module_wrapper.TFModuleWrapper._getattribute": ["util.module_wrapper.TFModuleWrapper._tfmw_add_deprecation_warning", "<builtin>.setattr", "util.module_wrapper.TFModuleWrapper._tfmw_import_module"], "util.module_wrapper.TFModuleWrapper._getattr": ["<builtin>.getattr", "util.module_wrapper.TFModuleWrapper._tfmw_add_deprecation_warning", "util.module_wrapper.TFModuleWrapper._tfmw_import_module"], "util.module_wrapper.TFModuleWrapper.__setattr__": ["<builtin>.super", "<builtin>.setattr"], "util.module_wrapper.TFModuleWrapper.__dir__": ["<builtin>.set", "<builtin>.dir", "<builtin>.list"], "util.module_wrapper.TFModuleWrapper.__delattr__": ["<builtin>.super", "<builtin>.delattr"], "util.module_wrapper.TFModuleWrapper.__repr__": [], "util.module_wrapper.TFModuleWrapper.__reduce__": [], "util._pywrap_utils.IsNamedtuple": [], "util._pywrap_utils.IsAttrs": [], "util._pywrap_utils.IsMapping": [], "util._pywrap_utils.IsMutableMapping": [], "util._pywrap_utils.IsMappingView": [], "util._pywrap_utils.IsCompositeTensor": [], "util._pywrap_utils.IsTypeSpec": [], "util.nest._yield_sorted_items": ["util.nest._sorted", "util._pywrap_utils.IsAttrs", "util.nest._get_attrs_items", "<builtin>.isinstance", "util.nest.is_namedtuple", "util._pywrap_utils.IsTypeSpec", "<builtin>.getattr", "<builtin>.type", "util._pywrap_utils.IsCompositeTensor", "<builtin>.enumerate"], "util._pywrap_utils.IsSequence": [], "util._pywrap_utils.Flatten": [], "util.nest._DotString.__str__": [], "util.nest._DotString.__repr__": [], "util._pywrap_utils.AssertSameStructure": [], "util.nest.assert_same_structure.<lambda1>": [], "util.nest.assert_same_structure.<lambda2>": [], "util._pywrap_nest.FlattenDictItems": [], "util.nest.list_to_tuple.sequence_fn": ["<builtin>.tuple", "<builtin>.isinstance", "util.nest._sequence_like"], "util.nest._pack_sequence_as": ["util.nest.flatten", "util.nest._packed_nest_with_indices", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.type", "<builtin>.len", "util.nest._pack_sequence_as.truncate", "util.nest.list_to_tuple.sequence_fn"], "util.nest._pack_sequence_as.truncate": ["<builtin>.str"], "util.nest.map_structure_with_paths": ["util.nest.map_structure_with_tuple_paths_up_to"], "util.nest.map_structure_with_paths.wrapper_func": ["<builtin>.str"], "util.nest.map_structure_with_tuple_paths_up_to": ["util.nest.flatten_up_to", "util.nest.map_structure_with_paths.wrapper_func", "util.nest.pack_sequence_as", "<builtin>.zip", "<builtin>.ValueError", "util.nest.assert_shallow_structure", "util.nest.map_structure_up_to.<lambda1>", "util.nest._yield_flat_up_to"], "util.nest.map_structure_with_tuple_paths": ["util.nest.map_structure_with_tuple_paths_up_to"], "util._pywrap_utils.SameNamedtuples": [], "util.nest.flatten_with_tuple_paths_up_to": ["util.nest.assert_shallow_structure", "util.nest._yield_flat_up_to", "<builtin>.list"], "util.nest.map_structure_up_to.<lambda1>": [], "util.nest.flatten_with_joined_string_paths.stringify_and_join": ["<builtin>.str"], "util.object_identity": [], "util.object_identity._ObjectIdentityWrapper.__init__": [], "util.object_identity._ObjectIdentityWrapper.unwrapped": [], "util.object_identity._ObjectIdentityWrapper._assert_type": ["<builtin>.isinstance", "<builtin>.TypeError"], "util.object_identity._ObjectIdentityWrapper.__lt__": ["<builtin>.id", "util.object_identity._ObjectIdentityWrapper._assert_type"], "util.object_identity._ObjectIdentityWrapper.__gt__": ["<builtin>.id", "util.object_identity._ObjectIdentityWrapper._assert_type"], "util.object_identity._ObjectIdentityWrapper.__eq__": ["util.object_identity._ObjectIdentityWrapper._assert_type"], "util.object_identity._ObjectIdentityWrapper.__ne__": ["util.object_identity._ObjectIdentityWrapper.__eq__"], "util.object_identity._ObjectIdentityWrapper.__hash__": ["<builtin>.id"], "util.object_identity._ObjectIdentityWrapper.__repr__": ["<builtin>.type"], "util.object_identity._WeakObjectIdentityWrapper.__init__": ["<builtin>.super", "weakref.ref"], "util.object_identity._WeakObjectIdentityWrapper.unwrapped": [], "util.object_identity.Reference.deref": [], "util.object_identity.ObjectIdentityDictionary.__init__": [], "util.object_identity.ObjectIdentityDictionary._wrap_key": ["util.object_identity._ObjectIdentityWrapper.__init__"], "util.object_identity.ObjectIdentityDictionary.__getitem__": ["util.object_identity.ObjectIdentityDictionary._wrap_key"], "util.object_identity.ObjectIdentityDictionary.__setitem__": ["util.object_identity.ObjectIdentityDictionary._wrap_key"], "util.object_identity.ObjectIdentityDictionary.__delitem__": ["util.object_identity.ObjectIdentityDictionary._wrap_key"], "util.object_identity.ObjectIdentityDictionary.__len__": ["<builtin>.len"], "util.object_identity.ObjectIdentityDictionary.__iter__": [], "util.object_identity.ObjectIdentityDictionary.__repr__": ["<builtin>.repr"], "util.object_identity.ObjectIdentityWeakKeyDictionary._wrap_key": ["util.object_identity._WeakObjectIdentityWrapper.__init__"], "util.object_identity.ObjectIdentityWeakKeyDictionary.__len__": ["<builtin>.list", "<builtin>.len"], "util.object_identity.ObjectIdentityWeakKeyDictionary.__iter__": [], "util.object_identity.ObjectIdentitySet.__init__": ["<builtin>.list", "<builtin>.set", "util.object_identity.ObjectIdentitySet._wrap_key"], "util.object_identity.ObjectIdentitySet._wrap_key": ["util.object_identity._ObjectIdentityWrapper.__init__"], "util.object_identity.ObjectIdentitySet._from_storage": ["util.object_identity.ObjectIdentitySet.__init__"], "util.object_identity.ObjectIdentitySet.__contains__": ["util.object_identity.ObjectIdentitySet._wrap_key"], "util.object_identity.ObjectIdentitySet.discard": ["util.object_identity.ObjectIdentitySet._wrap_key"], "util.object_identity.ObjectIdentitySet.add": ["util.object_identity.ObjectIdentitySet._wrap_key"], "util.object_identity.ObjectIdentitySet.update": ["util.object_identity.ObjectIdentitySet._wrap_key"], "util.object_identity.ObjectIdentitySet.clear": [], "util.object_identity.ObjectIdentitySet.intersection": ["util.object_identity.ObjectIdentitySet._wrap_key"], "util.object_identity.ObjectIdentitySet.difference": ["util.object_identity.ObjectIdentitySet._from_storage", "util.object_identity.ObjectIdentitySet._wrap_key"], "util.object_identity.ObjectIdentitySet.__len__": ["<builtin>.len"], "util.object_identity.ObjectIdentitySet.__iter__": ["<builtin>.list"], "util.object_identity.ObjectIdentityWeakSet._wrap_key": ["util.object_identity._WeakObjectIdentityWrapper.__init__"], "util.object_identity.ObjectIdentityWeakSet.__len__": ["<builtin>.len"], "util.object_identity.ObjectIdentityWeakSet.__iter__": ["<builtin>.list", "util.object_identity.ObjectIdentitySet.discard"], "util.serialization": [], "util.serialization.get_json_type": ["<builtin>.isinstance", "<builtin>.dict", "<builtin>.type", "<builtin>.callable", "<builtin>.hasattr", "<builtin>.TypeError"], "util.tf_contextlib": [], "util.tf_decorator": [], "util.tf_decorator.TFDecorator.__init__": ["<builtin>.hasattr"], "util.tf_decorator._has_tf_decorator_attr": ["<builtin>.getattr", "<builtin>.isinstance", "<builtin>.hasattr"], "util.tf_decorator.TFDecorator.__get__": [], "util.tf_decorator.TFDecorator.__call__": [], "util.tf_decorator.TFDecorator.decorated_target": [], "util.tf_decorator.TFDecorator.decorator_name": [], "util.tf_decorator.TFDecorator.decorator_doc": [], "util.tf_decorator.TFDecorator.decorator_argspec": [], "util.tf_export": ["functools.partial", "<builtin>.dict", "collections.namedtuple"], "util.tf_export.get_canonical_name": ["<builtin>.next"], "util.tf_export.api_export.__init__": ["util.tf_export.api_export._validate_symbol_names", "<builtin>.ValueError"], "util.tf_export.api_export._validate_symbol_names": ["<builtin>.all", "<builtin>.set", "<builtin>.any"], "util.tf_export.api_export.__call__": ["util.tf_export.api_export.set_attr", "util.tf_decorator.unwrap", "<builtin>.delattr"], "util.tf_export.api_export.set_attr": ["<builtin>.getattr", "<builtin>.setattr"], "util.tf_export.api_export.export_constant": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.setattr"], "util.tf_export.kwarg_only.wrapper": ["<builtin>.TypeError"], "util.tf_inspect": ["collections.namedtuple", "<builtin>.hasattr"], "util.tf_inspect._convert_maybe_argspec_to_fullargspec": ["inspect.FullArgSpec", "<builtin>.isinstance"], "util.tf_inspect._getargspec": ["util.tf_inspect.getfullargspec", "inspect.ArgSpec"], "util.tf_inspect._getfullargspec": ["util.tf_inspect.getargspec", "util.tf_inspect._convert_maybe_argspec_to_fullargspec"], "util.tf_inspect._get_argspec_for_partial": ["six.iteritems", "util.tf_inspect.getargspec", "<builtin>.next", "inspect.ArgSpec", "<builtin>.ValueError", "<builtin>.len", "<builtin>.tuple", "<builtin>.enumerate", "<builtin>.object"], "util.tf_inspect.getframeinfo": ["inspect.getframeinfo"], "util.tf_inspect.isbuiltin": ["inspect.isbuiltin", "util.tf_decorator.unwrap"], "util.tf_inspect.isframe": ["util.tf_decorator.unwrap", "inspect.isframe"], "util.tf_inspect.isgenerator": ["inspect.isgenerator", "util.tf_decorator.unwrap"], "util.tf_should_use": [], "util.tf_should_use._TFShouldUseHelper.__init__": ["framework.ops.add_exit_callback_to_default_func_graph", "framework.ops.inside_function", "eager.context.executing_eagerly"], "util.tf_should_use._TFShouldUseHelper.__init__.<lambda1>": ["util.tf_should_use._TFShouldUseHelper._check_sated"], "util.tf_should_use._TFShouldUseHelper._check_sated": ["platform.tf_logging.error", "traceback.format_stack", "util.tf_should_use._TFShouldUseHelper.sate", "<builtin>.RuntimeError"], "util.tf_should_use._TFShouldUseHelper.sate": [], "util.tf_should_use._TFShouldUseHelper.__del__": ["util.tf_should_use._TFShouldUseHelper._check_sated"], "util.tf_should_use._new__init__": [], "util.tf_should_use._new__setattr__": ["<builtin>.setattr"], "util.tf_should_use._new__getattribute__": ["<builtin>.getattr"], "util.tf_should_use._new_mark_used": [], "util.tf_should_use._get_wrapper": ["<builtin>.type", "<builtin>.dict", "copy.deepcopy", "<builtin>.getattr", "types.new_class"], "util.tf_should_use._get_wrapper.set_body": [], "types.new_class": [], "util.tf_should_use._add_should_use_warning": ["framework.ops.inside_function", "<builtin>.type", "<builtin>.isinstance", "util.tf_should_use._get_wrapper", "util.tf_should_use._TFShouldUseHelper.__init__", "<builtin>.repr", "sys.exc_info", "<builtin>.ValueError", "eager.context.executing_eagerly"], "util.tf_should_use.should_use_result.decorated": ["<builtin>.len", "util.tf_decorator.make_decorator"], "util.tf_should_use.should_use_result.decorated.wrapped": ["util.tf_should_use._add_should_use_warning"], "util.tf_stack": ["<builtin>.frozenset", "collections.defaultdict"], "util.tf_stack.<lambda1>": ["util.tf_stack.StackTraceMapper.__init__"], "util.tf_stack.StackTraceMapper.__init__": ["util._tf_stack.PyBindSourceMap"], "util.tf_stack.<lambda2>": ["util.tf_stack.StackTraceFilter.__init__"], "util.tf_stack.StackTraceFilter.__init__": ["util._tf_stack.PyBindFileSet"], "util.tf_stack.StackTraceTransform.__enter__": ["threading.get_ident", "thread.get_ident", "util.tf_stack.StackTraceTransform.update"], "threading.get_ident": [], "thread.get_ident": [], "util.tf_stack.StackTraceTransform.update": ["<builtin>.NotImplementedError"], "util.tf_stack.StackTraceTransform.__exit__": [], "util._tf_stack.PyBindSourceMap": [], "util.tf_stack.StackTraceMapper.update": ["util.tf_stack.SentinelMapper.get_effective_source_map", "util.tf_stack.StackTraceMapper.get_effective_source_map", "<builtin>.tuple"], "util.tf_stack.SentinelMapper.get_effective_source_map": [], "util.tf_stack.StackTraceMapper.get_effective_source_map": ["<builtin>.NotImplementedError"], "util._tf_stack.PyBindFileSet": [], "util.tf_stack.StackTraceFilter.update": ["<builtin>.set", "util.tf_stack.StackTraceFilter.get_filtered_filenames", "util.tf_stack.SentinelFilter.get_filtered_filenames"], "util.tf_stack.StackTraceFilter.get_filtered_filenames": ["<builtin>.NotImplementedError"], "util.tf_stack.SentinelFilter.get_filtered_filenames": [], "util.tf_stack.CurrentModuleFilter.__init__": ["inspect.currentframe", "<builtin>.super", "inspect.getsourcefile"], "util.tf_stack.CurrentModuleFilter.get_filtered_filenames": ["<builtin>.frozenset"], "util._tf_stack.extract_stack": [], "util._tf_stack.extract_stack_for_node": [], "util.traceback_utils": ["os.path.join", "util.tf_export.tf_export", "os.path.abspath", "threading.local"], "util.traceback_utils.enable_traceback_filtering": ["<builtin>.RuntimeError"], "util.traceback_utils.disable_traceback_filtering": [], "util.traceback_utils._process_traceback_frames": ["traceback.walk_tb", "<builtin>.list", "<builtin>.reversed", "util.traceback_utils.include_frame", "types.TracebackType"], "traceback.walk_tb": [], "types.TracebackType": [], "util.traceback_utils.filter_traceback.error_handler": ["util.traceback_utils._process_traceback_frames", "util.traceback_utils.is_traceback_filtering_enabled"], "model_utils.export_output": [], "model_utils.export_output.ExportOutput": ["abc.abstractmethod"], "model_utils.export_output.ExportOutput.as_signature_def": [], "model_utils.export_output.ExportOutput._check_output_key": ["<builtin>.isinstance", "<builtin>.ValueError"], "model_utils.export_output.ExportOutput._wrap_and_check_outputs": ["model_utils.export_output.ExportOutput._check_output_key", "<builtin>.isinstance", "<builtin>.ValueError"], "model_utils.export_output.ClassificationOutput.__init__": ["<builtin>.isinstance", "framework.dtypes.as_dtype", "<builtin>.ValueError"], "model_utils.export_output.ClassificationOutput.scores": [], "model_utils.export_output.ClassificationOutput.classes": [], "model_utils.export_output.ClassificationOutput.as_signature_def": ["<builtin>.len", "framework.dtypes.as_dtype", "saved_model.signature_def_utils.classification_signature_def", "<builtin>.ValueError"], "saved_model.signature_def_utils.classification_signature_def": [], "model_utils.export_output.RegressionOutput.__init__": ["<builtin>.isinstance", "<builtin>.ValueError"], "model_utils.export_output.RegressionOutput.value": [], "model_utils.export_output.RegressionOutput.as_signature_def": ["<builtin>.len", "saved_model.signature_def_utils.regression_signature_def", "framework.dtypes.as_dtype", "<builtin>.ValueError"], "saved_model.signature_def_utils.regression_signature_def": [], "model_utils.export_output.PredictOutput.__init__": ["model_utils.export_output.ExportOutput._wrap_and_check_outputs"], "model_utils.export_output.PredictOutput.outputs": [], "model_utils.export_output.PredictOutput.as_signature_def": ["saved_model.signature_def_utils.predict_signature_def"], "model_utils.export_output._SupervisedOutput.__init__": ["model_utils.export_output._SupervisedOutput._prefix_output_keys", "model_utils.export_output.ExportOutput._wrap_and_check_outputs", "model_utils.export_output._SupervisedOutput._wrap_and_check_metrics"], "model_utils.export_output._SupervisedOutput._prefix_output_keys": ["model_utils.export_output._SupervisedOutput._prefix_key"], "model_utils.export_output._SupervisedOutput._wrap_and_check_metrics": ["framework.constant_op.constant", "framework.tensor_util.is_tf_type", "<builtin>.len", "framework.ops.control_dependencies", "model_utils.export_output.ExportOutput._check_output_key", "model_utils.export_output._SupervisedOutput._prefix_key", "<builtin>.ValueError", "<builtin>.isinstance"], "model_utils.export_output._SupervisedOutput._prefix_key": [], "model_utils.export_output._SupervisedOutput.loss": [], "model_utils.export_output._SupervisedOutput.predictions": [], "model_utils.export_output._SupervisedOutput.metrics": [], "model_utils.export_output._SupervisedOutput": ["abc.abstractmethod"], "model_utils.export_output._SupervisedOutput._get_signature_def_fn": [], "model_utils.export_output._SupervisedOutput.as_signature_def": ["model_utils.export_output._SupervisedOutput._get_signature_def_fn"], "model_utils.export_output.TrainOutput._get_signature_def_fn": [], "model_utils.export_output.EvalOutput._get_signature_def_fn": [], "model_utils.export_utils": ["model_utils.mode_keys.ModeKeyMap"], "model_utils.mode_keys.ModeKeyMap": [], "model_utils.export_utils.build_all_signature_defs": ["<builtin>.type", "saved_model.signature_def_utils.is_valid_signature", "model_utils.export_utils._log_signature_report", "<builtin>.str", "<builtin>.isinstance", "<builtin>.ValueError"], "model_utils.export_utils._log_signature_report": ["platform.tf_logging.warn", "collections.defaultdict", "platform.tf_logging.info"], "saved_model.signature_def_utils.is_valid_signature": [], "model_utils.export_utils.get_timestamped_export_dir": ["platform.tf_logging.warn", "time.sleep", "util.compat.as_str", "os.path.join", "<builtin>.str", "util.compat.as_bytes", "<builtin>.int", "platform.gfile.Exists", "<builtin>.RuntimeError", "time.time"], "model_utils.export_utils.get_temp_export_dir": ["os.path.join", "<builtin>.str", "util.compat.as_bytes", "<builtin>.isinstance", "os.path.split"], "model_utils.export_utils.export_outputs_for_mode": ["<builtin>.list", "model_utils.mode_keys.is_train", "model_utils.mode_keys.is_predict", "model_utils.export_output.TrainOutput", "model_utils.export_utils.get_export_outputs", "<builtin>.ValueError", "model_utils.export_output.EvalOutput"], "model_utils.mode_keys.is_predict": [], "model_utils.export_utils.get_export_outputs": ["model_utils.export_utils._maybe_add_default_serving_output", "model_utils.export_output.PredictOutput", "<builtin>.TypeError", "<builtin>.isinstance"], "model_utils.mode_keys.is_train": [], "model_utils.export_output.TrainOutput": [], "model_utils.export_output.EvalOutput": [], "model_utils.export_output.PredictOutput": [], "model_utils.export_utils._maybe_add_default_serving_output": ["<builtin>.ValueError", "<builtin>.len"], "model_utils.mode_keys": [], "model_utils.mode_keys.is_eval": [], "model_utils.mode_keys.ModeKeyMap.__init__": ["model_utils.mode_keys.ModeKeyMap._get_internal_key", "<builtin>.ValueError"], "model_utils.mode_keys.ModeKeyMap._get_internal_key": ["model_utils.mode_keys.is_eval", "model_utils.mode_keys.is_train", "<builtin>.ValueError", "model_utils.mode_keys.is_predict"], "model_utils.mode_keys.ModeKeyMap.__getitem__": ["model_utils.mode_keys.ModeKeyMap._get_internal_key"], "model_utils.mode_keys.ModeKeyMap.__iter__": ["<builtin>.iter"], "model_utils.mode_keys.ModeKeyMap.__len__": ["<builtin>.len"], "saved_model.base_serialization": [], "saved_model.base_serialization.SavedModelSaver.__init__": [], "saved_model.base_serialization.SavedModelSaver": ["abc.abstractmethod", "abc.abstractproperty"], "saved_model.base_serialization.SavedModelSaver.object_identifier": [], "saved_model.base_serialization.SavedModelSaver.tracking_metadata": ["saved_model.json_utils.Encoder"], "saved_model.json_utils.Encoder": [], "saved_model.base_serialization.SavedModelSaver.list_extra_dependencies_for_serialization": ["saved_model.utils.should_save_traces", "saved_model.base_serialization.SavedModelSaver.objects_to_serialize"], "saved_model.utils.should_save_traces": [], "saved_model.base_serialization.SavedModelSaver.objects_to_serialize": [], "saved_model.base_serialization.SavedModelSaver.list_functions_for_serialization": ["saved_model.base_serialization.SavedModelSaver.functions_to_serialize", "saved_model.utils.should_save_traces", "tracking.AutoTrackable._list_functions_for_serialization"], "saved_model.base_serialization.SavedModelSaver.functions_to_serialize": [], "tracking.AutoTrackable._list_functions_for_serialization": [], "saved_model.base_serialization.SavedModelSaver.python_properties": [], "saved_model.json_utils": [], "saved_model.json_utils.Encoder.default": ["saved_model.json_utils.get_json_type", "<builtin>.isinstance"], "saved_model.json_utils.get_json_type": ["<builtin>.dict", "<builtin>.type", "<builtin>.hasattr", "framework.type_spec.get_name", "<builtin>.callable", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.TypeError"], "saved_model.json_utils.Encoder.encode": ["saved_model.json_utils._encode_tuple", "<builtin>.super"], "saved_model.json_utils._encode_tuple": ["saved_model.json_utils._encode_tuple", "<builtin>.isinstance", "<builtin>.tuple"], "saved_model.json_utils._decode_helper": ["<builtin>.tuple", "saved_model.json_utils._decode_helper", "<builtin>.isinstance", "framework.tensor_shape.TensorShape", "framework.type_spec.lookup"], "saved_model.layer_serialization": [], "saved_model.layer_serialization.LayerSavedModelSaver.object_identifier": [], "saved_model.layer_serialization.LayerSavedModelSaver.python_properties": ["saved_model.layer_serialization.LayerSavedModelSaver._python_properties_internal"], "saved_model.layer_serialization.LayerSavedModelSaver._python_properties_internal": ["<builtin>.dict", "utils.generic_utils.serialize_keras_object", "util.nest.map_structure", "<builtin>.getattr", "<builtin>.hasattr", "saved_model.layer_serialization.get_serialized", "mixed_precision.policy.serialize"], "saved_model.layer_serialization.get_serialized": ["utils.generic_utils.skip_failed_serialization", "utils.generic_utils.serialize_keras_object"], "saved_model.layer_serialization.LayerSavedModelSaver._python_properties_internal.<lambda1>": ["utils.generic_utils.serialize_keras_object"], "saved_model.layer_serialization.LayerSavedModelSaver.objects_to_serialize": ["saved_model.layer_serialization.LayerSavedModelSaver._get_serialized_attributes"], "saved_model.layer_serialization.LayerSavedModelSaver._get_serialized_attributes": ["serialized_attributes.SerializedAttributes.new", "saved_model.save_impl.should_skip_serialization", "saved_model.layer_serialization.LayerSavedModelSaver._get_serialized_attributes_internal"], "saved_model.layer_serialization.LayerSavedModelSaver.functions_to_serialize": ["saved_model.layer_serialization.LayerSavedModelSaver._get_serialized_attributes"], "serialized_attributes.SerializedAttributes.new": [], "saved_model.save_impl.should_skip_serialization": ["platform.tf_logging.warning", "<builtin>.isinstance"], "saved_model.layer_serialization.LayerSavedModelSaver._get_serialized_attributes_internal": ["saved_model.save_impl.wrap_layer_objects", "saved_model.save_impl.wrap_layer_functions"], "saved_model.save_impl.wrap_layer_objects": ["saved_model.utils.list_all_layers", "<builtin>.dict", "tracking.data_structures.wrap_or_unwrap", "<builtin>.len", "saved_model.save_impl._wrap_unconditional_loss"], "saved_model.save_impl.wrap_layer_functions": ["saved_model.save_impl.LayerCallCollection.add_function", "saved_model.save_impl._restore_child_layer_functions", "<builtin>.isinstance", "saved_model.save_impl._extract_outputs_from_fn", "saved_model.save_impl.LayerCallCollection.trace_with_input_signature", "saved_model.save_impl._wrap_call_and_conditional_losses", "engine.base_layer_utils.call_context", "saved_model.save_impl._append_activity_regularizer_loss", "saved_model.save_impl.tracing_scope", "saved_model.save_impl.LayerCallCollection.__init__", "saved_model.save_impl._reset_layer_losses", "saved_model.save_impl._restore_layer_losses", "<builtin>.getattr", "saved_model.save_impl._replace_child_layer_functions", "saved_model.save_impl._wrap_activity_regularizer"], "saved_model.layer_serialization.InputLayerSavedModelSaver.object_identifier": [], "saved_model.layer_serialization.InputLayerSavedModelSaver.python_properties": ["SavedModelSaver.obj.get_config", "<builtin>.type", "<builtin>.dict"], "SavedModelSaver.obj.get_config": [], "saved_model.layer_serialization.InputLayerSavedModelSaver.objects_to_serialize": [], "saved_model.layer_serialization.InputLayerSavedModelSaver.functions_to_serialize": [], "saved_model.layer_serialization.RNNSavedModelSaver.object_identifier": [], "saved_model.layer_serialization.RNNSavedModelSaver._get_serialized_attributes_internal": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.super", "tracking.data_structures.wrap_or_unwrap"], "tracking.data_structures.wrap_or_unwrap": ["tracking.data_structures._should_wrap_tuple", "<builtin>.isinstance", "tracking.data_structures._TupleWrapper.__init__", "tracking.data_structures._DictWrapper.__init__", "tracking.data_structures.ListWrapper.__init__", "<builtin>.type"], "saved_model.layer_serialization.IndexLookupLayerSavedModelSaver.python_properties": ["saved_model.layer_serialization.LayerSavedModelSaver._python_properties_internal"], "CommonEndpoints.all_functions.union": [], "protobuf.saved_metadata_pb2.SavedMetadata": [], "saved_model.load._read_legacy_metadata": ["protobuf.versions_pb2.VersionDef", "saved_model.load._generate_object_paths", "<builtin>.enumerate", "<builtin>.ValueError"], "saved_model.load.KerasObjectLoader.__init__": ["<builtin>.set"], "saved_model.load.KerasObjectLoader.load_layers": ["saved_model.load.KerasObjectLoader._load_layer", "platform.tf_logging.warning"], "saved_model.load.KerasObjectLoader.get_path": [], "saved_model.load.KerasObjectLoader.finalize_objects": ["saved_model.load.KerasObjectLoader._reconstruct_all_models", "saved_model.load.KerasObjectLoader._unblock_model_reconstruction", "<builtin>.isinstance", "saved_model.load._finalize_config_layers", "saved_model.load._finalize_saved_model_layers"], "saved_model.load.KerasObjectLoader.del_tracking": ["re.match", "<builtin>.list", "<builtin>.isinstance"], "saved_model.load._generate_object_paths": [], "protobuf.versions_pb2.VersionDef": [], "saved_model.load._is_graph_network": ["<builtin>.isinstance"], "saved_model.load.KerasObjectLoader._add_children_recreated_from_config": ["saved_model.load.KerasObjectLoader._search_for_child_node", "<builtin>.hasattr", "saved_model.revived_types.registered_identifiers", "saved_model.json_utils.decode", "saved_model.load.KerasObjectLoader._try_build_layer", "saved_model.load.KerasObjectLoader._add_children_recreated_from_config", "platform.tf_logging.warning", "<builtin>.isinstance", "saved_model.revived_types.get_setter"], "saved_model.load.KerasObjectLoader._try_build_layer": ["<builtin>.hasattr", "saved_model.load.KerasObjectLoader._infer_inputs"], "saved_model.load.KerasObjectLoader._search_for_child_node": ["saved_model.load.KerasObjectLoader._search_for_child_node"], "saved_model.load.KerasObjectLoader._add_children_recreated_from_config.<lambda1>": [], "saved_model.load.KerasObjectLoader._load_layer": ["saved_model.load.KerasObjectLoader._revive_from_config", "utils.generic_utils.validate_config", "saved_model.json_utils.decode", "saved_model.load.KerasObjectLoader._get_child_layer_node_ids", "saved_model.load.revive_custom_object", "saved_model.load._maybe_add_serialized_attributes", "saved_model.load._is_graph_network"], "saved_model.load._maybe_add_serialized_attributes": ["<builtin>.hasattr", "saved_model.utils.no_automatic_dependency_tracking_scope"], "saved_model.load.KerasObjectLoader._get_child_layer_node_ids": ["<builtin>.range", "<builtin>.int", "re.compile", "<builtin>.max"], "saved_model.load.KerasObjectLoader._revive_from_config": ["saved_model.load.KerasObjectLoader._config_node_setter", "saved_model.load.KerasObjectLoader._add_children_recreated_from_config", "saved_model.load.KerasObjectLoader._revive_metric_from_config", "saved_model.load.KerasObjectLoader._revive_graph_network", "saved_model.load.KerasObjectLoader._revive_layer_or_model_from_config"], "saved_model.load.revive_custom_object": ["<builtin>.ValueError", "<builtin>.type", "framework.ops.executing_eagerly_outside_functions", "util.compat.as_str"], "saved_model.load.KerasObjectLoader._revive_metric_from_config": ["utils.generic_utils.serialize_keras_class_and_config", "<builtin>.hasattr", "utils.generic_utils.validate_config", "util.compat.as_str"], "saved_model.load.KerasObjectLoader._revive_graph_network": ["saved_model.load.KerasObjectLoader._get_child_layer_node_ids", "utils.generic_utils.validate_config", "utils.generic_utils.get_registered_object", "util.compat.as_str"], "saved_model.load.KerasObjectLoader._revive_layer_or_model_from_config": ["utils.generic_utils.validate_config", "saved_model.load.KerasObjectLoader._try_build_layer", "<builtin>.isinstance", "<builtin>.RuntimeError", "utils.generic_utils.serialize_keras_class_and_config"], "saved_model.load.KerasObjectLoader._config_node_setter": [], "saved_model.load.KerasObjectLoader._infer_inputs": ["saved_model.load.KerasObjectLoader._search_for_child_node", "saved_model.nested_structure_coder.StructureCoder", "util.nest.map_structure"], "saved_model.load.KerasObjectLoader._load_edges": ["<builtin>.enumerate"], "saved_model.load.KerasObjectLoader._unblock_model_reconstruction": ["<builtin>.all", "<builtin>.isinstance"], "saved_model.load._finalize_saved_model_layers": ["saved_model.load._get_keras_attr", "<builtin>.hasattr", "saved_model.load._set_network_attributes_from_metadata", "types.MethodType", "<builtin>.isinstance", "saved_model.load._restore_layer_activation_loss", "saved_model.utils.use_wrapped_call", "saved_model.load._restore_layer_unconditional_losses", "saved_model.load._restore_layer_metrics", "<builtin>.getattr", "saved_model.load.infer_inputs_from_restored_call_function"], "saved_model.load._finalize_config_layers": ["saved_model.load._get_keras_attr", "<builtin>.hasattr", "keras.backend.track_variable", "util.nest.flatten", "saved_model.load._restore_layer_activation_loss", "<builtin>.isinstance", "saved_model.load._restore_layer_unconditional_losses", "saved_model.load._restore_layer_metrics", "<builtin>.getattr", "saved_model.load._is_graph_network"], "saved_model.load.KerasObjectLoader._reconstruct_all_models": ["saved_model.load._finalize_config_layers", "<builtin>.set", "<builtin>.ValueError", "saved_model.load.KerasObjectLoader._reconstruct_model"], "saved_model.load.KerasObjectLoader._reconstruct_model": ["saved_model.json_utils.decode", "saved_model.load._set_network_attributes_from_metadata", "saved_model.load.KerasObjectLoader._infer_inputs", "saved_model.load.KerasObjectLoader._unblock_model_reconstruction", "saved_model.load.KerasObjectLoader._get_child_layer_node_ids", "<builtin>.isinstance"], "saved_model.load._set_network_attributes_from_metadata": ["saved_model.utils.no_automatic_dependency_tracking_scope"], "saved_model.load.KerasObjectLoader._infer_inputs.<lambda1>": [], "saved_model.load.KerasObjectLoader._config_node_setter.setattr_wrapper": ["saved_model.load._revive_setter"], "saved_model.load._revive_setter": ["<builtin>.getattr", "re.match", "<builtin>.setattr", "<builtin>.isinstance"], "saved_model.load._get_keras_attr": ["<builtin>.getattr"], "saved_model.utils.use_wrapped_call": ["<builtin>.hasattr", "saved_model.utils.layer_uses_training_bool", "util.tf_decorator.make_decorator", "types.MethodType", "saved_model.utils.maybe_add_training_arg"], "saved_model.load.infer_inputs_from_restored_call_function": ["util.nest.map_structure"], "saved_model.load._restore_layer_unconditional_losses": ["<builtin>.hasattr", "saved_model.load._get_keras_attr", "<builtin>.getattr"], "saved_model.load._restore_layer_activation_loss": ["saved_model.load._get_keras_attr", "<builtin>.getattr"], "saved_model.load._restore_layer_metrics": ["saved_model.load._get_keras_attr", "<builtin>.getattr"], "saved_model.load._unable_to_call_layer_due_to_serialization_issue": ["<builtin>.type", "<builtin>.ValueError"], "saved_model.load._finalize_metric": ["types.MethodType", "utils.metrics_utils.update_state_wrapper"], "saved_model.load.RevivedLayer._init_from_metadata": ["utils.generic_utils.validate_config", "saved_model.load.recursively_deserialize_keras_object", "keras.regularizers.deserialize", "<builtin>.dict", "saved_model.utils.no_automatic_dependency_tracking_scope"], "saved_model.utils.no_automatic_dependency_tracking_scope": ["<builtin>.getattr"], "saved_model.load.recursively_deserialize_keras_object": ["saved_model.load.recursively_deserialize_keras_object", "<builtin>.ValueError", "utils.generic_utils.deserialize_keras_object", "<builtin>.isinstance"], "saved_model.load.RevivedLayer.keras_api": [], "saved_model.load.RevivedLayer.get_config": ["<builtin>.hasattr"], "saved_model.load.RevivedInputLayer._init_from_metadata": ["saved_model.utils.no_automatic_dependency_tracking_scope", "<builtin>.dict"], "saved_model.load.RevivedInputLayer.get_config": [], "saved_model.load.get_common_shape": ["<builtin>.TypeError", "framework.tensor_shape.TensorShape", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.RuntimeError", "framework.tensor_shape.dimension_value"], "saved_model.load.infer_inputs_from_restored_call_function.common_spec": ["framework.tensor_spec.TensorSpec", "ragged.ragged_tensor.RaggedTensorSpec", "saved_model.load.get_common_shape", "<builtin>.isinstance", "framework.sparse_tensor.SparseTensorSpec"], "saved_model.load.RevivedNetwork._init_from_metadata": ["keras.regularizers.deserialize", "utils.generic_utils.validate_config", "saved_model.utils.no_automatic_dependency_tracking_scope"], "saved_model.load_context": ["contextlib.contextmanager", "saved_model.load_context.LoadContext.__init__"], "saved_model.load_context.LoadContext.__init__": ["<builtin>.super"], "saved_model.load_context.LoadContext.set_load_options": [], "saved_model.load_context.LoadContext.clear_load_options": [], "saved_model.load_context.LoadContext.load_options": [], "saved_model.load_context.get_load_options": ["saved_model.load_context.LoadContext.load_options"], "saved_model.metric_serialization": [], "saved_model.metric_serialization.MetricSavedModelSaver.object_identifier": [], "saved_model.metric_serialization.MetricSavedModelSaver._python_properties_internal": ["saved_model.layer_serialization.get_serialized", "<builtin>.dict", "utils.generic_utils.get_registered_name", "<builtin>.type"], "saved_model.metric_serialization.MetricSavedModelSaver._get_serialized_attributes_internal": ["tracking.data_structures.wrap_or_unwrap", "<builtin>.dict"], "saved_model.model_serialization": [], "saved_model.model_serialization.ModelSavedModelSaver.object_identifier": [], "saved_model.model_serialization.ModelSavedModelSaver._python_properties_internal": ["<builtin>.super", "saving.saving_utils.model_metadata", "LayerSavedModelSaver.obj._get_save_spec"], "LayerSavedModelSaver.obj._get_save_spec": [], "saved_model.model_serialization.ModelSavedModelSaver._get_serialized_attributes_internal": ["saved_model.save_impl.default_save_signature", "<builtin>.super", "<builtin>.len"], "saved_model.save_impl.default_save_signature": ["saving.saving_utils.trace_model_call", "saved_model.save_impl._restore_layer_losses", "saved_model.save_impl._reset_layer_losses"], "saved_model.model_serialization.SequentialSavedModelSaver.object_identifier": [], "saved_model.network_serialization": [], "saved_model.network_serialization.NetworkSavedModelSaver.object_identifier": [], "saved_model.utils.keras_option_scope": [], "saved_model.save.generate_keras_metadata": ["<builtin>.enumerate", "<builtin>.isinstance", "protobuf.versions_pb2.VersionDef", "protobuf.saved_metadata_pb2.SavedMetadata"], "saved_model.save_impl": ["utils.tf_contextlib.contextmanager", "<builtin>.globals", "saved_model.save_impl.LayerTracingContext.__init__", "utils.generic_utils.LazyLoader"], "saved_model.utils.list_all_layers": ["<builtin>.isinstance", "<builtin>.list"], "saved_model.save_impl._wrap_unconditional_loss": ["eager.def_function.Function", "<builtin>.isinstance"], "saved_model.save_impl._replace_child_layer_functions": ["saved_model.save_impl._replace_child_layer_functions.replace_layer_functions", "saved_model.utils.list_all_layers", "saved_model.save_impl._replace_child_layer_functions.replace_metric_functions", "<builtin>.isinstance"], "saved_model.save_impl._reset_layer_losses": ["saved_model.utils.list_all_layers_and_sublayers", "saved_model.utils.no_automatic_dependency_tracking_scope"], "saved_model.save_impl.LayerCallCollection.__init__": ["weakref.WeakValueDictionary", "saved_model.utils.layer_uses_training_bool", "saved_model.save_impl._get_layer_call_method", "utils.tf_inspect.getfullargspec", "<builtin>.bool", "saved_model.utils.get_training_arg_index", "utils.tf_inspect.ismethod", "saved_model.save_impl.LayerCallCollection._generate_input_signature"], "saved_model.save_impl._wrap_call_and_conditional_losses": ["saved_model.save_impl._get_layer_call_method", "saved_model.save_impl._create_call_fn_decorator"], "saved_model.save_impl.LayerCallCollection.add_function": ["saved_model.save_impl.LayerCall.__init__", "saved_model.save_impl.LayerCallCollection._maybe_wrap_with_training_arg"], "saved_model.save_impl._extract_outputs_from_fn": ["saved_model.save_impl._create_call_fn_decorator", "<builtin>.isinstance"], "saved_model.save_impl._wrap_activity_regularizer": ["framework.tensor_spec.TensorSpec", "keras.backend.floatx", "eager.def_function.Function", "<builtin>.isinstance"], "saved_model.save_impl._append_activity_regularizer_loss": ["saved_model.save_impl._create_call_fn_decorator"], "saved_model.save_impl.tracing_scope": ["keras.backend.deprecated_internal_learning_phase_scope"], "saved_model.save_impl.LayerCallCollection.trace_with_input_signature": ["saved_model.save_impl.LayerCallCollection.add_trace", "util.nest.flatten"], "saved_model.save_impl._restore_child_layer_functions": ["saved_model.utils.no_automatic_dependency_tracking_scope", "<builtin>.setattr"], "saved_model.save_impl._restore_layer_losses": ["saved_model.utils.no_automatic_dependency_tracking_scope"], "saved_model.save_impl._replace_child_layer_functions.replace_layer_functions": ["saved_model.utils.use_wrapped_call", "saved_model.utils.no_automatic_dependency_tracking_scope"], "saved_model.save_impl._replace_child_layer_functions.replace_metric_functions": ["saved_model.utils.no_automatic_dependency_tracking_scope"], "saved_model.utils.list_all_layers_and_sublayers": ["itertools.chain.from_iterable", "<builtin>.set", "saved_model.utils.list_all_layers_and_sublayers", "saved_model.utils.list_all_layers"], "saved_model.save_impl.LayerTracingContext.__init__": ["<builtin>.super"], "saved_model.save_impl.add_trace_to_queue": ["saved_model.save_impl.tracing_enabled"], "saved_model.save_impl.tracing_enabled": [], "saved_model.save_impl._get_layer_call_method": ["<builtin>.isinstance"], "saved_model.utils.layer_uses_training_bool": ["saved_model.utils.list_all_layers", "<builtin>.getattr"], "saved_model.utils.get_training_arg_index": ["utils.tf_inspect.getfullargspec", "utils.tf_inspect.ismethod"], "saved_model.save_impl.LayerCallCollection._generate_input_signature": ["util.nest.map_structure", "saving.saving_utils.model_input_signature", "<builtin>.isinstance"], "saved_model.save_impl.LayerCallCollection._generate_input_signature.to_tensor_spec_or_none": ["framework.tensor_shape.TensorShape", "engine.input_spec.to_tensor_spec"], "saved_model.save_impl.LayerCallCollection.add_trace": ["saved_model.save_impl.LayerCallCollection.add_trace.trace_with_training", "<builtin>.list", "saved_model.save_impl.add_trace_to_queue"], "saved_model.save_impl.LayerCallCollection.add_trace.trace_with_training": ["saved_model.save_impl.add_trace_to_queue", "saved_model.utils.set_training_arg"], "saved_model.utils.set_training_arg": ["<builtin>.len"], "saved_model.save_impl.LayerCallCollection.fn_input_signature": ["util.nest.flatten"], "saved_model.save_impl.LayerCallCollection.training_arg_was_passed": ["saved_model.utils.get_training_arg"], "saved_model.utils.get_training_arg": ["<builtin>.len"], "saved_model.save_impl.LayerCallCollection.get_training_arg_value": ["saved_model.utils.get_training_arg"], "saved_model.save_impl.LayerCallCollection.get_input_arg_value": [], "saved_model.save_impl.LayerCallCollection._maybe_wrap_with_training_arg": ["utils.tf_inspect.FullArgSpec", "<builtin>.list", "utils.tf_inspect.getfullargspec", "utils.tf_inspect.ismethod", "util.tf_decorator.make_decorator", "<builtin>.len"], "utils.tf_inspect.FullArgSpec": [], "saved_model.save_impl.LayerCallCollection._maybe_wrap_with_training_arg.wrap_with_training_arg": ["<builtin>.list", "saved_model.utils.remove_training_arg"], "saved_model.utils.remove_training_arg": ["<builtin>.len"], "saved_model.save_impl.LayerCall.__init__": ["eager.def_function.function", "saved_model.save_impl.layer_call_wrapper"], "saved_model.save_impl._filtered_inputs": ["<builtin>.list", "util.nest.flatten", "<builtin>.filter"], "saved_model.save_impl.layer_call_wrapper": ["util.tf_decorator.make_decorator"], "saved_model.save_impl.layer_call_wrapper.wrapper": ["saved_model.save_impl._restore_layer_losses", "engine.base_layer_utils.call_context", "saved_model.save_impl._filtered_inputs", "saved_model.save_impl._reset_layer_losses", "mixed_precision.autocast_variable.enable_auto_cast_variables"], "saved_model.save_impl.LayerCall._maybe_trace": ["saved_model.save_impl.LayerCallCollection.add_trace", "saved_model.save_impl.tracing_enabled"], "saved_model.save_impl.LayerCall.__call__": ["saved_model.save_impl.LayerCall._maybe_trace"], "saved_model.save_impl.LayerCall.get_concrete_function": ["saved_model.save_impl.LayerCall._maybe_trace"], "saved_model.save_impl._wrap_call_and_conditional_losses.call_and_return_conditional_losses": ["utils.version_utils.is_v1_layer_or_model", "<builtin>.hasattr", "saved_model.save_impl._filtered_inputs"], "saved_model.save_impl._create_call_fn_decorator": ["util.tf_decorator.make_decorator", "saved_model.save_impl._get_layer_call_method", "saved_model.utils.maybe_add_training_arg"], "saved_model.save_impl._extract_outputs_from_fn.call": ["saved_model.save_impl.LayerCall.__init__"], "saved_model.save_impl._append_activity_regularizer_loss.fn": ["saved_model.save_impl.LayerCall.__init__"], "saved_model.utils.maybe_add_training_arg": ["utils.tf_inspect.getfullargspec", "utils.tf_inspect.FullArgSpec", "<builtin>.list", "<builtin>.len"], "saved_model.serialized_attributes": ["<builtin>.globals", "utils.generic_utils.LazyLoader"], "saved_model.serialized_attributes.SerializedAttributes.with_attributes": ["<builtin>.set", "<builtin>.type"], "saved_model.serialized_attributes.SerializedAttributes.new": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.type"], "saved_model.serialized_attributes.SerializedAttributes.__init__": ["tracking.tracking.AutoTrackable"], "saved_model.serialized_attributes.SerializedAttributes.functions": [], "saved_model.serialized_attributes.SerializedAttributes.checkpointable_objects": [], "saved_model.serialized_attributes.SerializedAttributes.functions_to_serialize": ["<builtin>.isinstance"], "saved_model.serialized_attributes.SerializedAttributes.objects_to_serialize": [], "saved_model.serialized_attributes.SerializedAttributes.set_and_validate_functions": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.setattr"], "saved_model.serialized_attributes.SerializedAttributes.set_and_validate_objects": ["<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.setattr"], "saved_model.utils.use_wrapped_call.return_outputs_and_add_losses": ["eager.context.executing_eagerly"], "saved_model.utils.maybe_add_training_arg.wrap_with_training_arg": ["saved_model.utils.get_training_arg_index", "keras.backend.learning_phase", "utils.control_flow_util.smart_cond", "saved_model.utils.get_training_arg", "<builtin>.list"], "saved_model.utils.maybe_add_training_arg.wrap_with_training_arg.replace_training_and_call": ["saved_model.utils.set_training_arg"], "saved_model.utils.maybe_add_training_arg.wrap_with_training_arg.<lambda1>": ["saved_model.utils.maybe_add_training_arg.wrap_with_training_arg.replace_training_and_call"], "saved_model.utils.maybe_add_training_arg.wrap_with_training_arg.<lambda2>": ["saved_model.utils.maybe_add_training_arg.wrap_with_training_arg.replace_training_and_call"], "saved_model.utils.SaveOptionsContext.__init__": ["<builtin>.super"], "utils_v1.export_output": [], "utils_v1.export_output.ExportOutput": ["abc.abstractmethod"], "utils_v1.export_output.ExportOutput.as_signature_def": [], "utils_v1.export_output.ExportOutput._check_output_key": ["<builtin>.isinstance", "<builtin>.ValueError"], "utils_v1.export_output.ExportOutput._wrap_and_check_outputs": ["utils_v1.export_output.ExportOutput._check_output_key", "<builtin>.isinstance", "<builtin>.ValueError"], "utils_v1.export_output.ClassificationOutput.__init__": ["framework.dtypes.as_dtype", "<builtin>.isinstance", "<builtin>.ValueError"], "utils_v1.export_output.ClassificationOutput.scores": [], "utils_v1.export_output.ClassificationOutput.classes": [], "utils_v1.export_output.ClassificationOutput.as_signature_def": ["<builtin>.len", "framework.dtypes.as_dtype", "<builtin>.ValueError", "saved_model.signature_def_utils.classification_signature_def"], "utils_v1.export_output.RegressionOutput.__init__": ["<builtin>.isinstance", "<builtin>.ValueError"], "utils_v1.export_output.RegressionOutput.value": [], "utils_v1.export_output.RegressionOutput.as_signature_def": ["saved_model.signature_def_utils.regression_signature_def", "<builtin>.len", "framework.dtypes.as_dtype", "<builtin>.ValueError"], "utils_v1.export_output.PredictOutput.__init__": ["utils_v1.export_output.ExportOutput._wrap_and_check_outputs"], "utils_v1.export_output.PredictOutput.outputs": [], "utils_v1.export_output.PredictOutput.as_signature_def": ["saved_model.signature_def_utils.predict_signature_def"], "utils_v1.export_output._SupervisedOutput.__init__": ["utils_v1.export_output._SupervisedOutput._wrap_and_check_metrics", "utils_v1.export_output._SupervisedOutput._prefix_output_keys", "utils_v1.export_output.ExportOutput._wrap_and_check_outputs"], "utils_v1.export_output._SupervisedOutput._prefix_output_keys": ["utils_v1.export_output._SupervisedOutput._prefix_key"], "utils_v1.export_output._SupervisedOutput._wrap_and_check_metrics": ["utils_v1.export_output._SupervisedOutput._prefix_key", "<builtin>.len", "framework.tensor_util.is_tensor", "framework.constant_op.constant", "<builtin>.ValueError", "utils_v1.export_output.ExportOutput._check_output_key", "framework.ops.control_dependencies", "<builtin>.isinstance"], "utils_v1.export_output._SupervisedOutput._prefix_key": [], "utils_v1.export_output._SupervisedOutput.loss": [], "utils_v1.export_output._SupervisedOutput.predictions": [], "utils_v1.export_output._SupervisedOutput.metrics": [], "utils_v1.export_output._SupervisedOutput": ["abc.abstractmethod"], "utils_v1.export_output._SupervisedOutput._get_signature_def_fn": [], "utils_v1.export_output._SupervisedOutput.as_signature_def": ["utils_v1.export_output._SupervisedOutput._get_signature_def_fn"], "utils_v1.export_output.TrainOutput._get_signature_def_fn": [], "utils_v1.export_output.EvalOutput._get_signature_def_fn": [], "utils_v1.export_utils": ["utils_v1.mode_keys.ModeKeyMap"], "utils_v1.mode_keys.ModeKeyMap": [], "utils_v1.export_utils.build_all_signature_defs": ["<builtin>.type", "saved_model.signature_def_utils.is_valid_signature", "<builtin>.str", "<builtin>.isinstance", "<builtin>.ValueError", "utils_v1.export_utils._log_signature_report"], "utils_v1.export_utils._log_signature_report": ["collections.defaultdict", "platform.tf_logging.warning", "platform.tf_logging.info"], "utils_v1.export_utils.get_timestamped_export_dir": ["util.compat.as_str", "platform.tf_logging.warning", "time.sleep", "util.compat.as_bytes", "<builtin>.RuntimeError", "<builtin>.str", "<builtin>.int", "time.time", "platform.gfile.Exists", "os.path.join"], "utils_v1.export_utils.get_temp_export_dir": ["util.compat.as_bytes", "<builtin>.str", "os.path.split", "<builtin>.isinstance", "os.path.join"], "utils_v1.export_utils.export_outputs_for_mode": ["utils_v1.export_utils.get_export_outputs", "utils_v1.mode_keys.is_train", "utils_v1.export_output.TrainOutput", "utils_v1.mode_keys.is_predict", "<builtin>.ValueError", "utils_v1.export_output.EvalOutput"], "utils_v1.mode_keys.is_predict": [], "utils_v1.export_utils.get_export_outputs": ["utils_v1.export_output.PredictOutput", "<builtin>.TypeError", "<builtin>.isinstance", "utils_v1.export_utils._maybe_add_default_serving_output"], "utils_v1.mode_keys.is_train": [], "utils_v1.export_output.TrainOutput": [], "utils_v1.export_output.EvalOutput": [], "utils_v1.export_output.PredictOutput": [], "utils_v1.export_utils._maybe_add_default_serving_output": ["<builtin>.len", "<builtin>.ValueError"], "utils_v1.mode_keys": [], "utils_v1.mode_keys.is_eval": [], "utils_v1.mode_keys.ModeKeyMap.__init__": ["utils_v1.mode_keys.ModeKeyMap._get_internal_key", "<builtin>.ValueError"], "utils_v1.mode_keys.ModeKeyMap._get_internal_key": ["<builtin>.ValueError", "utils_v1.mode_keys.is_predict", "utils_v1.mode_keys.is_train", "utils_v1.mode_keys.is_eval"], "utils_v1.mode_keys.ModeKeyMap.__getitem__": ["utils_v1.mode_keys.ModeKeyMap._get_internal_key"], "utils_v1.mode_keys.ModeKeyMap.__iter__": ["<builtin>.iter"], "utils_v1.mode_keys.ModeKeyMap.__len__": ["<builtin>.len"], "utils_v1.signature_def_utils": [], "utils_v1.signature_def_utils.supervised_train_signature_def": ["utils_v1.signature_def_utils._supervised_signature_def"], "utils_v1.signature_def_utils._supervised_signature_def": ["<builtin>.ValueError", "saved_model.signature_def_utils.build_signature_def", "saved_model.utils_impl.build_tensor_info"], "utils_v1.signature_def_utils.supervised_eval_signature_def": ["utils_v1.signature_def_utils._supervised_signature_def"], "utils_v1.unexported_constants": [], "fuzzing.constant_fuzz": ["fuzzing.constant_fuzz.main"], "fuzzing.constant_fuzz.TestOneInput": ["tensorflow.constant"], "fuzzing.constant_fuzz.main": ["atheris_no_libfuzzer.Setup", "atheris_no_libfuzzer.Fuzz"], "atheris_no_libfuzzer.Setup": [], "atheris_no_libfuzzer.Fuzz": [], "fuzzing.dataFormatVecPermute_fuzz": ["fuzzing.dataFormatVecPermute_fuzz.main"], "fuzzing.dataFormatVecPermute_fuzz.TestOneInput": ["python_fuzzing.FuzzingHelper.get_string", "python_fuzzing.FuzzingHelper.get_int_list", "<builtin>.str", "python_fuzzing.FuzzingHelper.__init__", "tensorflow.raw_ops.DataFormatVecPermute", "tensorflow.random.uniform", "python_fuzzing.FuzzingHelper.get_tf_dtype", "python_fuzzing.FuzzingHelper.get_int"], "python_fuzzing.FuzzingHelper.__init__": ["atheris_no_libfuzzer.FuzzedDataProvider"], "python_fuzzing.FuzzingHelper.get_tf_dtype": ["<builtin>.len", "python_fuzzing.FuzzingHelper.get_int"], "python_fuzzing.FuzzingHelper.get_int_list": ["python_fuzzing.FuzzingHelper.get_int"], "python_fuzzing.FuzzingHelper.get_int": [], "tensorflow.random.uniform": [], "python_fuzzing.FuzzingHelper.get_string": [], "tensorflow.raw_ops.DataFormatVecPermute": [], "fuzzing.dataFormatVecPermute_fuzz.main": ["atheris_no_libfuzzer.Setup", "atheris_no_libfuzzer.Fuzz"], "python_fuzzing": [], "atheris_no_libfuzzer.FuzzedDataProvider": [], "python_fuzzing.FuzzingHelper.get_bool": [], "python_fuzzing.FuzzingHelper.get_float": [], "python_fuzzing.FuzzingHelper.get_float_list": ["python_fuzzing.FuzzingHelper.get_int"], "python_fuzzing.FuzzingHelper.get_int_or_float_list": ["python_fuzzing.FuzzingHelper.get_float_list", "python_fuzzing.FuzzingHelper.get_bool", "python_fuzzing.FuzzingHelper.get_int_list"], "fuzzing.immutableConst_fuzz": ["fuzzing.immutableConst_fuzz.main"], "fuzzing.immutableConst_fuzz.TestOneInput": ["python_fuzzing.FuzzingHelper.get_tf_dtype", "python_fuzzing.FuzzingHelper.__init__", "python_fuzzing.FuzzingHelper.get_string", "tensorflow.raw_ops.ImmutableConst", "python_fuzzing.FuzzingHelper.get_int_list", "<builtin>.open"], "tensorflow.raw_ops.ImmutableConst": [], "fuzzing.immutableConst_fuzz.main": ["atheris_no_libfuzzer.Setup", "atheris_no_libfuzzer.Fuzz"], "fuzzing.python_fuzzing": [], "fuzzing.python_fuzzing.FuzzingHelper.__init__": ["atheris_no_libfuzzer.FuzzedDataProvider"], "fuzzing.python_fuzzing.FuzzingHelper.get_bool": [], "fuzzing.python_fuzzing.FuzzingHelper.get_int": [], "fuzzing.python_fuzzing.FuzzingHelper.get_float": [], "fuzzing.python_fuzzing.FuzzingHelper.get_int_list": ["fuzzing.python_fuzzing.FuzzingHelper.get_int"], "fuzzing.python_fuzzing.FuzzingHelper.get_float_list": ["fuzzing.python_fuzzing.FuzzingHelper.get_int"], "fuzzing.python_fuzzing.FuzzingHelper.get_int_or_float_list": ["fuzzing.python_fuzzing.FuzzingHelper.get_float_list", "fuzzing.python_fuzzing.FuzzingHelper.get_int_list", "fuzzing.python_fuzzing.FuzzingHelper.get_bool"], "fuzzing.python_fuzzing.FuzzingHelper.get_tf_dtype": ["<builtin>.len", "fuzzing.python_fuzzing.FuzzingHelper.get_int"], "fuzzing.python_fuzzing.FuzzingHelper.get_string": [], "fuzzing.raggedCountSparseOutput_fuzz": ["fuzzing.raggedCountSparseOutput_fuzz.main"], "fuzzing.raggedCountSparseOutput_fuzz.TestOneInput": ["tensorflow.raw_ops.RaggedCountSparseOutput", "python_fuzzing.FuzzingHelper.get_int_list", "python_fuzzing.FuzzingHelper.__init__", "python_fuzzing.FuzzingHelper.get_int_or_float_list"], "tensorflow.raw_ops.RaggedCountSparseOutput": [], "fuzzing.raggedCountSparseOutput_fuzz.main": ["atheris_no_libfuzzer.Setup", "atheris_no_libfuzzer.Fuzz"], "fuzzing.sparseCountSparseOutput_fuzz": ["fuzzing.sparseCountSparseOutput_fuzz.main"], "fuzzing.sparseCountSparseOutput_fuzz.TestOneInput": ["python_fuzzing.FuzzingHelper.get_int_list", "python_fuzzing.FuzzingHelper.get_bool", "python_fuzzing.FuzzingHelper.__init__", "tensorflow.random.uniform", "python_fuzzing.FuzzingHelper.get_string", "python_fuzzing.FuzzingHelper.get_int", "tensorflow.raw_ops.SparseCountSparseOutput"], "tensorflow.raw_ops.SparseCountSparseOutput": [], "fuzzing.sparseCountSparseOutput_fuzz.main": ["atheris_no_libfuzzer.Fuzz", "atheris_no_libfuzzer.Setup"], "fuzzing.tf2migration_fuzz": ["fuzzing.tf2migration_fuzz.main"], "fuzzing.tf2migration_fuzz.TestOneInput": ["tensorflow.constant", "tensorflow.random.uniform", "tensorflow.math.angle", "compat.v1.angle", "python_fuzzing.FuzzingHelper.__init__", "python_fuzzing.FuzzingHelper.get_int_list", "python_fuzzing.FuzzingHelper.get_string", "tensorflow.debugging.assert_integer", "<builtin>.type", "python_fuzzing.FuzzingHelper.get_int", "<builtin>.print", "compat.v1.assert_integer", "tensorflow.debugging.assert_equal"], "tensorflow.math.angle": [], "compat.v1.angle": [], "tensorflow.debugging.assert_equal": [], "tensorflow.debugging.assert_integer": [], "compat.v1.assert_integer": [], "fuzzing.tf2migration_fuzz.main": ["atheris_no_libfuzzer.Setup", "atheris_no_libfuzzer.Fuzz"], "writer.event_file_writer": [], "writer.event_file_writer.EventFileWriter.__init__": ["platform.gfile.MakeDirs", "threading.Event", "<builtin>.str", "util.compat.as_bytes", "client._pywrap_events_writer.EventsWriter", "<builtin>.object", "writer.event_file_writer.EventFileWriter._initialize"], "writer.event_file_writer.EventFileWriter._initialize": ["writer.event_file_writer.CloseableQueue.__init__", "writer.event_file_writer._EventLoggerThread.__init__", "threading.Thread.start"], "writer.event_file_writer.CloseableQueue.__init__": ["threading.Condition", "collections.deque", "threading.Lock"], "writer.event_file_writer._EventLoggerThread.__init__": ["threading.Thread.__init__"], "writer.event_file_writer.EventFileWriter.get_logdir": [], "writer.event_file_writer.EventFileWriter.reopen": ["writer.event_file_writer.EventFileWriter._initialize"], "writer.event_file_writer.EventFileWriter.add_event": ["writer.event_file_writer.EventFileWriter._try_put"], "writer.event_file_writer.EventFileWriter._try_put": ["writer.event_file_writer.EventFileWriter._internal_close", "six.reraise", "writer.event_file_writer.CloseableQueue.put"], "writer.event_file_writer.CloseableQueue.put": ["<builtin>.len"], "writer.event_file_writer.EventFileWriter._internal_close": ["threading.Thread.join"], "writer.event_file_writer.EventFileWriter.flush": ["writer.event_file_writer.EventFileWriter._internal_close", "six.reraise", "writer.event_file_writer.EventFileWriter._try_put"], "writer.event_file_writer.EventFileWriter.close": ["writer.event_file_writer.EventFileWriter._internal_close", "writer.event_file_writer.EventFileWriter.flush", "writer.event_file_writer.EventFileWriter._try_put"], "writer.event_file_writer._EventLoggerThread.run": ["writer.event_file_writer.CloseableQueue.get", "sys.exc_info", "writer.event_file_writer.CloseableQueue.close", "platform.tf_logging.error", "time.time"], "writer.event_file_writer.CloseableQueue.get": [], "writer.event_file_writer.CloseableQueue.close": [], "writer.event_file_writer_v2": [], "writer.event_file_writer_v2.EventFileWriterV2.__init__": ["platform.gfile.MakeDirs", "framework.ops.name_scope", "ops.summary_ops_v2.create_file_writer", "ops.array_ops.placeholder_with_default", "framework.constant_op.constant", "ops.summary_ops_v2.import_event", "ops.summary_ops_v2.always_record_summaries"], "writer.event_file_writer_v2.EventFileWriterV2.get_logdir": [], "writer.event_file_writer_v2.EventFileWriterV2.reopen": [], "writer.event_file_writer_v2.EventFileWriterV2.add_event": [], "writer.event_file_writer_v2.EventFileWriterV2.flush": [], "writer.event_file_writer_v2.EventFileWriterV2.close": ["writer.event_file_writer_v2.EventFileWriterV2.flush"], "writer.fake_summary_writer": [], "writer.fake_summary_writer.FakeSummaryWriter.install": ["<builtin>.ValueError"], "writer.fake_summary_writer.FakeSummaryWriter.uninstall": ["<builtin>.ValueError"], "writer.fake_summary_writer.FakeSummaryWriter.__init__": [], "writer.fake_summary_writer.FakeSummaryWriter.summaries": [], "writer.fake_summary_writer.FakeSummaryWriter.assert_summaries": ["<builtin>.zip", "framework.test_util.assert_meta_graph_protos_equal", "<builtin>.len"], "framework.test_util.assert_meta_graph_protos_equal": [], "writer.fake_summary_writer.FakeSummaryWriter.add_summary": ["framework.summary_pb2.Summary", "<builtin>.isinstance"], "writer.fake_summary_writer.FakeSummaryWriter.add_graph": ["<builtin>.ValueError"], "writer.fake_summary_writer.FakeSummaryWriter.add_meta_graph": ["<builtin>.ValueError"], "writer.fake_summary_writer.FakeSummaryWriter.add_session_log": [], "writer.fake_summary_writer.FakeSummaryWriter.add_run_metadata": ["<builtin>.ValueError"], "writer.fake_summary_writer.FakeSummaryWriter.flush": [], "writer.fake_summary_writer.FakeSummaryWriter.reopen": [], "writer.fake_summary_writer.FakeSummaryWriter.close": [], "writer.writer_cache": [], "writer.writer_cache.FileWriterCache": ["threading.RLock"], "writer.writer_cache.FileWriterCache.clear": [], "writer.writer_cache.FileWriterCache.get": ["framework.ops.get_default_graph", "writer.writer.FileWriter"], "writer.writer.FileWriter": [], "writer.writer": [], "writer.writer.SummaryToEventTransformer.__init__": ["writer.writer.SummaryToEventTransformer.add_meta_graph", "<builtin>.isinstance", "writer.writer.SummaryToEventTransformer.add_graph", "framework.meta_graph.create_meta_graph_def", "<builtin>.set"], "writer.writer.SummaryToEventTransformer.add_graph": ["writer.writer.SummaryToEventTransformer._add_graph_def", "<builtin>.TypeError", "platform.tf_logging.warning", "<builtin>.ValueError", "writer.writer.SummaryToEventTransformer._write_plugin_assets", "<builtin>.isinstance"], "writer.writer.SummaryToEventTransformer.add_meta_graph": ["<builtin>.type", "util.event_pb2.Event", "writer.writer.SummaryToEventTransformer._add_event", "<builtin>.TypeError", "<builtin>.isinstance"], "writer.writer.SummaryToEventTransformer.add_summary": ["framework.summary_pb2.Summary", "util.event_pb2.Event", "writer.writer.SummaryToEventTransformer._add_event", "<builtin>.isinstance"], "writer.writer.SummaryToEventTransformer._add_event": ["time.time", "<builtin>.int"], "writer.writer.SummaryToEventTransformer.add_session_log": ["util.event_pb2.Event", "writer.writer.SummaryToEventTransformer._add_event"], "writer.writer.SummaryToEventTransformer._add_graph_def": ["util.event_pb2.Event", "writer.writer.SummaryToEventTransformer._add_event"], "writer.writer.SummaryToEventTransformer._write_plugin_assets": ["platform.gfile.MakeDirs", "summary.plugin_asset.get_all_plugin_assets", "platform.gfile.Open"], "writer.writer.SummaryToEventTransformer.add_run_metadata": ["writer.writer.SummaryToEventTransformer._add_event", "<builtin>.ValueError", "util.event_pb2.Event", "util.event_pb2.TaggedRunMetadata"], "util.event_pb2.TaggedRunMetadata": [], "writer.writer.FileWriter.__init__": ["<builtin>.RuntimeError", "writer.event_file_writer_v2.EventFileWriterV2", "<builtin>.super", "eager.context.executing_eagerly", "writer.event_file_writer.EventFileWriter"], "writer.event_file_writer_v2.EventFileWriterV2": [], "writer.event_file_writer.EventFileWriter": [], "writer.writer.FileWriter.__enter__": [], "writer.writer.FileWriter.__exit__": ["writer.writer.FileWriter.close"], "writer.writer.FileWriter.close": [], "writer.writer.FileWriter.get_logdir": [], "writer.writer.FileWriter._warn_if_event_writer_is_closed": ["warnings.warn"], "writer.writer.FileWriter._add_event": ["<builtin>.super", "writer.writer.FileWriter._warn_if_event_writer_is_closed"], "writer.writer.FileWriter.add_event": ["writer.writer.FileWriter._warn_if_event_writer_is_closed"], "writer.writer.FileWriter.flush": ["writer.writer.FileWriter._warn_if_event_writer_is_closed"], "writer.writer.FileWriter.reopen": [], "coco_object_detection.preprocess_coco_minival": ["coco_object_detection.preprocess_coco_minival._get_ground_truth_detections", "coco_object_detection.preprocess_coco_minival._parse_args", "coco_object_detection.preprocess_coco_minival._dump_data"], "coco_object_detection.preprocess_coco_minival._get_ground_truth_detections": ["absl.logging.warning", "ast.literal_eval", "<builtin>.int", "<builtin>.open", "collections.OrderedDict", "<builtin>.len", "<builtin>.set", "<builtin>.sorted", "<builtin>.list"], "coco_object_detection.preprocess_coco_minival._dump_data": ["os.makedirs", "<builtin>.open", "os.path.exists", "shutil.copy2", "os.path.join", "proto.evaluation_stages_pb2.ObjectDetectionGroundTruth"], "proto.evaluation_stages_pb2.ObjectDetectionGroundTruth": [], "shutil.copy2": [], "coco_object_detection.preprocess_coco_minival._parse_args": ["argparse.ArgumentParser"], "imagenet_image_classification.generate_validation_labels": ["imagenet_image_classification.generate_validation_labels.main"], "imagenet_image_classification.generate_validation_labels._synset_to_word": ["<builtin>.int"], "imagenet_image_classification.generate_validation_labels._validation_file_path": ["os.path.join"], "imagenet_image_classification.generate_validation_labels._synset_array_path": ["os.path.join"], "imagenet_image_classification.generate_validation_labels._generate_validation_labels": ["imagenet_image_classification.generate_validation_labels._synset_array_path", "imagenet_image_classification.generate_validation_labels._synset_to_word", "<builtin>.int", "imagenet_image_classification.generate_validation_labels._validation_file_path", "<builtin>.open"], "imagenet_image_classification.generate_validation_labels._check_arguments": ["imagenet_image_classification.generate_validation_labels._synset_array_path", "os.path.isdir", "imagenet_image_classification.generate_validation_labels._validation_file_path", "<builtin>.ValueError", "os.path.exists"], "imagenet_image_classification.generate_validation_labels.main": ["sys.stderr.write", "os.path.basename", "<builtin>.str", "imagenet_image_classification.generate_validation_labels._generate_validation_labels", "argparse.ArgumentParser", "sys.exit", "imagenet_image_classification.generate_validation_labels._check_arguments"], "tensorflow.api_template": ["<builtin>.hasattr", "os.path.dirname", "<builtin>.list", "<builtin>.setattr", "compat.v2_compat.enable_v2_behavior", "os.path.join", "tools.module_util.get_parent_dir", "tools.module_util.get_parent_dir_for_name", "inspect.getfile", "inspect.currentframe", "<builtin>.set", "os.path.exists", "framework.load_library.load_pluggable_device_library", "logging.warning", "distutils.sysconfig.get_python_lib", "<builtin>.globals", "tensorflow.api_template._running_from_pip_package", "site.getsitepackages", "python.tf2.enable", "util.lazy_loader.LazyLoader", "<builtin>.dir", "framework.load_library.load_library"], "distutils.sysconfig.get_python_lib": [], "tensorflow.api_template._running_from_pip_package": ["<builtin>.any"], "tensorflow.api_template_v1": ["<builtin>.hasattr", "<builtin>.setattr", "os.path.dirname", "os.path.exists", "os.path.join", "<builtin>.list", "<builtin>.dir", "distutils.sysconfig.get_python_lib", "inspect.getfile", "inspect.currentframe", "<builtin>.globals", "platform.tf_logging.warning", "tools.module_util.get_parent_dir_for_name", "<builtin>.vars", "tensorflow.api_template_v1._running_from_pip_package", "util.lazy_loader.LazyLoader", "framework.load_library.load_pluggable_device_library", "framework.load_library.load_library", "<builtin>.set", "site.getsitepackages"], "tensorflow.api_template_v1._running_from_pip_package": ["<builtin>.any"], "tensorflow.compat_template": ["<builtin>.hasattr", "tools.module_util.get_parent_dir_for_name", "util.lazy_loader.LazyLoader", "<builtin>.globals", "logging.warning", "<builtin>.setattr", "tools.module_util.get_parent_dir"], "tensorflow.compat_template_v1": ["<builtin>.hasattr", "util.lazy_loader.LazyLoader", "<builtin>.setattr", "tools.module_util.get_parent_dir_for_name", "<builtin>.globals"], "tensorflow.virtual_root_template_v1": ["<builtin>.isinstance", "util.deprecation_wrapper.DeprecationWrapper", "tensorflow.virtual_root_template_v1._forward_module"], "tensorflow.virtual_root_template_v1._LazyLoader.__init__": ["<builtin>.super"], "tensorflow.virtual_root_template_v1._LazyLoader._load": ["importlib.import_module", "ModuleType.__dict__.update"], "tensorflow.virtual_root_template_v1._LazyLoader.__getattr__": ["<builtin>.getattr", "tensorflow.virtual_root_template_v1._LazyLoader._load"], "tensorflow.virtual_root_template_v1._LazyLoader.__dir__": ["<builtin>.dir", "tensorflow.virtual_root_template_v1._LazyLoader._load"], "tensorflow.virtual_root_template_v1._LazyLoader.__reduce__": [], "tensorflow.virtual_root_template_v1._forward_module": ["sys.modules.setdefault", "<builtin>.globals", "tensorflow.virtual_root_template_v1._LazyLoader.__init__"], "sys.modules.setdefault": [], "util.deprecation_wrapper.DeprecationWrapper": [], "tensorflow.virtual_root_template_v2": ["tensorflow.virtual_root_template_v2._forward_module"], "tensorflow.virtual_root_template_v2._LazyLoader.__init__": ["<builtin>.super"], "tensorflow.virtual_root_template_v2._LazyLoader._load": ["importlib.import_module", "ModuleType.__dict__.update"], "tensorflow.virtual_root_template_v2._LazyLoader.__getattr__": ["tensorflow.virtual_root_template_v2._LazyLoader._load", "<builtin>.getattr"], "tensorflow.virtual_root_template_v2._LazyLoader.__dir__": ["tensorflow.virtual_root_template_v2._LazyLoader._load", "<builtin>.dir"], "tensorflow.virtual_root_template_v2._LazyLoader.__reduce__": [], "tensorflow.virtual_root_template_v2._forward_module": ["<builtin>.globals", "tensorflow.virtual_root_template_v2._LazyLoader.__init__", "sys.modules.setdefault"], "compat_checker.compat_checker": [], "compat_checker.compat_checker._compare_versions": ["<builtin>.RuntimeError", "<builtin>.enumerate", "six.ensure_str", "<builtin>.int", "<builtin>.str", "<builtin>.len", "compat_checker.compat_checker._list_to_string"], "compat_checker.compat_checker._list_to_string": [], "compat_checker.compat_checker._get_func_name": ["util.tf_inspect.stack"], "compat_checker.compat_checker.ConfigCompatChecker._Reqs.__init__": ["compat_checker.compat_checker.ConfigCompatChecker._Reqs.parse_single_req"], "compat_checker.compat_checker.ConfigCompatChecker._Reqs.parse_single_req": ["<builtin>.type", "<builtin>.enumerate", "platform.tf_logging.error", "<builtin>.isinstance", "re.match", "<builtin>.str", "<builtin>.len"], "compat_checker.compat_checker.ConfigCompatChecker._Reqs.get_status": [], "compat_checker.compat_checker.ConfigCompatChecker._Reqs.__str__": ["<builtin>.str"], "compat_checker.compat_checker.ConfigCompatChecker.__init__": ["compat_checker.compat_checker.ConfigCompatChecker.get_all_reqs"], "compat_checker.compat_checker.ConfigCompatChecker.get_all_reqs": ["compat_checker.compat_checker.ConfigCompatChecker.convert_to_list", "platform.tf_logging.error", "<builtin>.open", "moves.configparser.ConfigParser", "sys.exit", "platform.tf_logging.warning", "compat_checker.compat_checker.ConfigCompatChecker.filter_line", "compat_checker.compat_checker.ConfigCompatChecker.filter_dependency", "compat_checker.compat_checker.ConfigCompatChecker._Reqs.__init__", "<builtin>.str"], "moves.configparser.ConfigParser": [], "compat_checker.compat_checker.ConfigCompatChecker.filter_dependency": ["re.match"], "compat_checker.compat_checker.ConfigCompatChecker.convert_to_list": ["<builtin>.len", "<builtin>.isinstance", "six.moves.range"], "compat_checker.compat_checker.ConfigCompatChecker.filter_line": ["platform.tf_logging.warning", "<builtin>.str", "<builtin>.len", "six.ensure_str"], "compat_checker.compat_checker.ConfigCompatChecker.in_range": ["platform.tf_logging.warning", "compat_checker.compat_checker._compare_versions", "<builtin>.str"], "compat_checker.compat_checker.ConfigCompatChecker._print": ["<builtin>.Exception", "compat_checker.compat_checker._get_func_name", "compat_checker.compat_checker.ConfigCompatChecker._print._format"], "compat_checker.compat_checker.ConfigCompatChecker._print._format": ["<builtin>.isinstance", "<builtin>.print", "<builtin>.str", "<builtin>.len"], "compat_checker.compat_checker.ConfigCompatChecker.check_compatibility": ["compat_checker.compat_checker.ConfigCompatChecker.in_range", "platform.tf_logging.error", "six.iterkeys", "<builtin>.list", "platform.tf_logging.warning", "six.iteritems", "<builtin>.str"], "config_detector.config_detector": ["absl.flags.DEFINE_string", "absl.app.run", "absl.flags.DEFINE_boolean"], "config_detector.config_detector.run_shell_cmd": ["subprocess.Popen"], "config_detector.config_detector.get_platform": ["sys.exit", "<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_cpu_type": ["<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_cpu_arch": ["<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_distrib": ["<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_distrib_version": ["<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_gpu_type": ["<builtin>.str", "data.cuda_compute_capability.retrieve_from_golden", "<builtin>.isinstance", "six.ensure_str", "<builtin>.print", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_gpu_count": ["<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_cuda_version_all": ["<builtin>.str", "config_detector.config_detector.run_shell_cmd", "six.ensure_str", "<builtin>.print", "re.search"], "config_detector.config_detector.get_cuda_version_default": ["<builtin>.len", "<builtin>.Exception", "<builtin>.enumerate", "<builtin>.print", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_cuda_compute_capability": ["data.cuda_compute_capability.retrieve_from_web", "<builtin>.print", "data.cuda_compute_capability.retrieve_from_golden"], "config_detector.config_detector.get_cudnn_version": ["<builtin>.len", "<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_gcc_version": ["<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_glibc_version": ["<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_libstdcpp_version": ["<builtin>.print", "<builtin>.str", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_cpu_isa_version": ["<builtin>.set", "<builtin>.list", "<builtin>.str", "<builtin>.print", "config_detector.config_detector.run_shell_cmd"], "config_detector.config_detector.get_python_version": ["<builtin>.str", "re.search"], "config_detector.config_detector.get_all_configs": ["config_detector.config_detector.get_gcc_version", "config_detector.config_detector.get_platform", "config_detector.config_detector.get_distrib", "config_detector.config_detector.get_gpu_count", "config_detector.config_detector.get_cuda_version_default", "config_detector.config_detector.get_libstdcpp_version", "config_detector.config_detector.get_cuda_version_all", "config_detector.config_detector.get_cuda_compute_capability", "collections.OrderedDict", "six.iteritems", "config_detector.config_detector.get_glibc_version", "config_detector.config_detector.get_cpu_type", "config_detector.config_detector.get_python_version", "config_detector.config_detector.get_distrib_version", "config_detector.config_detector.get_cudnn_version", "config_detector.config_detector.get_cpu_arch", "config_detector.config_detector.get_cpu_isa_version", "config_detector.config_detector.get_gpu_type"], "config_detector.config_detector.print_all_configs": ["<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.print", "six.ensure_str"], "config_detector.config_detector.save_to_file": ["<builtin>.print", "<builtin>.open", "json.dump", "six.ensure_str"], "config_detector.config_detector.manage_all_configs": ["config_detector.config_detector.get_all_configs", "config_detector.config_detector.save_to_file", "config_detector.config_detector.print_all_configs"], "config_detector.config_detector.main": ["config_detector.config_detector.manage_all_configs", "<builtin>.len", "absl.app.UsageError"], "python.modules_with_exports": ["util.tf_export.tf_export"], "python.pywrap_dlopen_global_flags": ["<builtin>.hasattr", "sys.getdlopenflags"], "sys.getdlopenflags": [], "python.pywrap_dlopen_global_flags.set_dlopen_flags": ["sys.setdlopenflags"], "sys.setdlopenflags": [], "python.pywrap_dlopen_global_flags.reset_dlopen_flags": ["sys.setdlopenflags"], "python.pywrap_mlir": [], "python.pywrap_mlir.experimental_convert_saved_model_to_mlir": ["<builtin>.str"], "python.pywrap_mlir.experimental_convert_saved_model_v1_to_mlir_lite": ["<builtin>.str"], "python.pywrap_mlir.experimental_convert_saved_model_v1_to_mlir": ["<builtin>.str"], "python.pywrap_mlir.experimental_run_pass_pipeline": [], "python.pywrap_sanitizers": [], "python.pywrap_tensorflow": ["sys.setdlopenflags", "sys.getdlopenflags", "python.pywrap_dlopen_global_flags.reset_dlopen_flags", "traceback.format_exc", "platform.self_check.preload_check", "<builtin>.hasattr", "<builtin>.ImportError", "python.pywrap_dlopen_global_flags.set_dlopen_flags"], "python.pywrap_tfe": [], "python.tf2": ["util.tf_export.tf_export"], "platform._pywrap_tf2.enable": [], "platform._pywrap_tf2.is_enabled": [], "python.xla": ["python.xla._unary_op", "framework.ops.no_gradient", "python.xla._binary_op", "framework.ops.RegisterGradient", "python.xla._broadcasting_binary_op"], "python.xla._unary_op": [], "python.xla._unary_op.unary_op_wrapper": ["ops.math_ops.sign", "ops.math_ops.erfinv", "ops.math_ops.cos", "ops.math_ops.ndtri", "ops.special_math_ops.bessel_i1e", "ops.math_ops.neg", "ops.math_ops.ceil", "ops.math_ops.abs", "ops.math_ops.expm1", "ops.math_ops.sin", "ops.math_ops.real", "ops.special_math_ops.bessel_i0e", "ops.math_ops.logical_not", "ops.math_ops.log1p", "ops.math_ops.erf", "ops.math_ops.erfc", "ops.math_ops.log", "ops.math_ops.lgamma", "ops.math_ops.is_finite", "ops.math_ops.digamma", "ops.math_ops.exp", "ops.math_ops.imag", "ops.math_ops.conj", "ops.math_ops.tanh", "ops.math_ops.round", "ops.math_ops.floor"], "ops.math_ops.neg": [], "python.xla._broadcasting_binary_op": [], "python.xla._broadcasting_binary_op.broadcasting_binary_op_wrapper": ["ops.gen_math_ops.mod", "ops.math_ops.polygamma", "ops.math_ops.logical_or", "ops.math_ops.div", "ops.gen_random_ops.random_gamma_grad", "ops.math_ops.less_equal", "ops.math_ops.maximum", "ops.math_ops.minimum", "ops.math_ops.igamma", "ops.math_ops.logical_and", "ops.math_ops.less", "ops.gen_xla_ops.xla_broadcast_helper", "ops.gen_math_ops.igamma_grad_a", "python.xla._shift_right_logical_helper", "ops.math_ops.equal", "ops.math_ops.pow", "ops.math_ops.igammac", "ops.math_ops.zeta", "ops.math_ops.mul", "ops.math_ops.sub", "ops.math_ops.greater", "ops.bitwise_ops.left_shift", "ops.math_ops.greater_equal", "ops.math_ops.complex", "ops.math_ops.add", "ops.math_ops.atan2", "framework.ops.convert_to_tensor", "python.xla._shift_right_arithmetic_helper", "ops.math_ops.logical_xor", "ops.math_ops.not_equal"], "ops.gen_xla_ops.xla_broadcast_helper": [], "ops.gen_math_ops.mod": [], "ops.math_ops.igammac": [], "ops.math_ops.mul": [], "ops.math_ops.sub": [], "python.xla._shift_right_arithmetic_helper": ["ops.bitwise_ops.right_shift", "ops.math_ops.cast"], "python.xla._shift_right_logical_helper": ["ops.bitwise_ops.right_shift", "ops.math_ops.cast"], "ops.bitwise_ops.right_shift": [], "python.xla._binary_op": [], "python.xla._binary_op.binary_op_wrapper": ["ops.array_ops.transpose", "ops.array_ops.reverse"], "python.xla.broadcast": ["framework.ops.convert_to_tensor", "ops.array_ops.broadcast_to", "framework.constant_op.constant", "ops.array_ops.shape", "ops.array_ops.concat"], "python.xla.clamp": ["python.xla._broadcasting_binary_op.broadcasting_binary_op_wrapper"], "python.xla.conv": ["ops.gen_xla_ops.xla_conv_v2", "ops.gen_xla_ops.xla_conv", "numpy_ops.np_utils.result_type"], "ops.gen_xla_ops.xla_conv_v2": [], "ops.gen_xla_ops.xla_conv": [], "python.xla.dot": ["ops.math_ops.tensordot"], "python.xla.dot_general": ["ops.gen_xla_ops.xla_dot", "ops.gen_xla_ops.xla_dot_v2", "numpy_ops.np_utils.result_type"], "ops.gen_xla_ops.xla_dot_v2": [], "ops.gen_xla_ops.xla_dot": [], "python.xla.self_adjoint_eig": ["ops.gen_xla_ops.xla_self_adjoint_eig"], "ops.gen_xla_ops.xla_self_adjoint_eig": [], "python.xla.svd": ["ops.gen_xla_ops.xla_svd"], "ops.gen_xla_ops.xla_svd": [], "python.xla.random_normal": ["ops.random_ops.random_normal", "framework.ops.convert_to_tensor"], "python.xla.random_uniform": ["ops.random_ops.random_uniform", "framework.ops.convert_to_tensor"], "python.xla.rng_bit_generator": ["ops.stateless_random_ops.convert_alg_to_int", "ops.gen_xla_ops.xla_rng_bit_generator"], "ops.gen_xla_ops.xla_rng_bit_generator": [], "python.xla.reduce_window": ["<builtin>.len", "ops.gen_xla_ops.xla_reduce_window"], "ops.gen_xla_ops.xla_reduce_window": [], "python.xla.reshape": ["ops.array_ops.reshape", "ops.array_ops.transpose"], "python.xla.select": ["ops.array_ops.where"], "python.xla.slice": ["<builtin>.tuple", "python.xla.slice", "<builtin>.zip"], "python.xla._sharding_grad": ["ops.gen_xla_ops.xla_sharding", "framework.attr_value_pb2.AttrValue"], "ops.gen_xla_ops.xla_sharding": [], "python.xla._spmd_full_to_shard_shape_grad": ["ops.gen_xla_ops.xla_spmd_shard_to_full_shape"], "ops.gen_xla_ops.xla_spmd_shard_to_full_shape": [], "python.xla._spmd_shard_to_full_shape_grad": ["ops.gen_xla_ops.xla_spmd_full_to_shard_shape"], "ops.gen_xla_ops.xla_spmd_full_to_shard_shape": [], "python.xla.gather": ["ops.gen_xla_ops.xla_gather"], "ops.gen_xla_ops.xla_gather": [], "python.xla.scatter": ["ops.gen_xla_ops.xla_scatter"], "ops.gen_xla_ops.xla_scatter": [], "python.composite": [], "python.composite.Composite.__init__": [], "python.composite.Composite.__call__": ["<builtin>.setattr"], "python.op_reg_gen": [], "python.op_reg_gen.OpRegGenImpl.__init__": ["<builtin>.super"], "python.op_reg_gen.OpRegGenImpl.visit_Name": [], "python.op_reg_gen.OpRegGenImpl.visit_Constant": [], "python.op_reg_gen.OpRegGenImpl.visit_keyword": ["transformer.CodeGenerator.visit"], "transformer.CodeGenerator.visit": [], "python.op_reg_gen.OpRegGenImpl.visit_List": ["transformer.CodeGenerator.visit"], "python.op_reg_gen.OpRegGenImpl.visit_arguments": ["transformer.CodeGenerator.visit"], "python.op_reg_gen.OpRegGenImpl.visit_FunctionDef": ["framework.op_def_registry.get", "transformer.CodeGenerator.emit", "<builtin>.len", "<builtin>.zip", "<builtin>.isinstance", "<builtin>.dict", "<builtin>.ValueError", "transformer.CodeGenerator.visit", "<builtin>.KeyError"], "transformer.CodeGenerator.emit": [], "python.op_reg_gen.OpRegGen.transform_ast": ["transformer.CodeGenerator.visit", "python.op_reg_gen.OpRegGenImpl.__init__"], "python.op_reg_gen.op_reg_gen": ["transpiler.GenericTranspiler.__init__", "transpiler.GenericTranspiler.transform"], "transpiler.GenericTranspiler.__init__": [], "transpiler.GenericTranspiler.transform": [], "python.tfr_gen": ["api._TRANSPILER.get_extra_locals", "<builtin>.type"], "python.tfr_gen.TFRTypes.__getattribute__": [], "python.tfr_gen.TFRTypes.__str__": ["Enum.name.lower"], "Enum.name.lower": [], "python.tfr_gen._get_type_from_proto": [], "python.tfr_gen._get_type_info_from_proto": ["<builtin>.str", "python.tfr_gen._get_type_from_proto"], "python.tfr_gen._get_val_from_proto": ["<builtin>.NotImplementedError"], "python.tfr_gen._collect_derived_attrs_from_proto": ["<builtin>.set"], "python.tfr_gen._require_tensor_list": [], "python.tfr_gen._camel_to_snake": ["re.sub"], "python.tfr_gen.OpDefCache.__init__": [], "python.tfr_gen.OpDefCache.lookup": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.KeyError", "<builtin>.isinstance", "<builtin>.ValueError", "python.tfr_gen._collect_derived_attrs_from_proto", "<builtin>.len", "framework.op_def_registry.get"], "python.tfr_gen.OpDefCache.mlir_external_funcs": ["<builtin>.sorted", "<builtin>.list", "<builtin>.set", "python.tfr_gen._camel_to_snake", "python.tfr_gen._get_type_info_from_proto"], "api._TRANSPILER.get_extra_locals": [], "python.tfr_gen.<dict4>.<lambda1>": [], "python.tfr_gen.TFRTypeResolver.__init__": ["<builtin>.super"], "python.tfr_gen.TFRTypeResolver.res_name": ["<builtin>.str", "<builtin>.type"], "python.tfr_gen.TFRTypeResolver.res_value": ["<builtin>.hasattr", "<builtin>.any", "<builtin>.type", "<builtin>.getattr", "<builtin>.isinstance"], "python.tfr_gen.TFRTypeResolver.res_call": ["Basic.ORIGIN.of", "<builtin>.tuple", "<builtin>.type", "pyct.qual_names.QN", "python.tfr_gen._get_type_from_proto", "<builtin>.list", "<builtin>.NotImplementedError", "<builtin>.isinstance", "<builtin>.str", "python.tfr_gen.OpDefCache.lookup", "<builtin>.callable", "<builtin>.len", "Basic.QN.of"], "python.tfr_gen.TFRTypeResolver.res_arg": ["<builtin>.ValueError", "<builtin>.str", "python.tfr_gen.OpDefCache.lookup", "util.tf_inspect.getfullargspec", "<builtin>.len", "python.tfr_gen._get_type_from_proto"], "python.tfr_gen.TFRTypeResolver.res_slice": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.tuple"], "python.tfr_gen.TFRTypeResolver.res_compare": [], "python.tfr_gen.TFRTypeResolver.res_unop": [], "python.tfr_gen.TFRTypeResolver.res_binop": [], "python.tfr_gen.TFRTypeResolver._coerce_to_more_specific_type": [], "python.tfr_gen.TFRTypeResolver.res_list_literal": ["<builtin>.len", "<builtin>.set", "python.tfr_gen.TFRTypeResolver._coerce_to_more_specific_type", "<builtin>.ValueError"], "python.tfr_gen.SymbolTable.__init__": ["python.tfr_gen.SymbolTable.insert_symbol", "python.tfr_gen.SymbolTable.enter_scope"], "python.tfr_gen.SymbolTable.enter_scope": ["<builtin>.len"], "python.tfr_gen.SymbolTable.insert_symbol": [], "python.tfr_gen.SymbolTable.exit_scope": ["<builtin>.len"], "python.tfr_gen.SymbolTable.in_scf_scope": [], "python.tfr_gen.SymbolTable.lookup": ["<builtin>.len"], "python.tfr_gen.TFRGen.__init__": ["python.tfr_gen.SymbolTable.__init__", "<builtin>.super"], "python.tfr_gen.TFRGen._create_mlir_loc": ["os.path.basename"], "python.tfr_gen.TFRGen._emit_with_loc": ["transformer.CodeGenerator.emit", "pyct.anno.getanno", "python.tfr_gen.TFRGen._create_mlir_loc"], "python.tfr_gen.TFRGen._get_inferred_type": ["<builtin>.type", "transformer.CodeGenerator.debug_print", "<builtin>.len", "pyct.anno.getanno", "<builtin>.print"], "transformer.CodeGenerator.debug_print": [], "python.tfr_gen.TFRGen._pack_tensor_list": ["python.tfr_gen.TFRGen._ssa_name", "python.tfr_gen.OpDefCache.lookup", "transformer.CodeGenerator.emit", "python.tfr_gen.TFRGen._emit_with_loc"], "python.tfr_gen.TFRGen._ssa_name": ["<builtin>.isinstance", "<builtin>.set"], "python.tfr_gen.TFRGen._index_to_I64": ["python.tfr_gen.TFRGen._ssa_name", "python.tfr_gen.TFRGen._emit_with_loc"], "python.tfr_gen.TFRGen._i64_to_index": ["python.tfr_gen.TFRGen._ssa_name", "python.tfr_gen.TFRGen._emit_with_loc"], "python.tfr_gen.TFRGen._value_to_tensor": ["python.tfr_gen.TFRGen._index_to_I64", "python.tfr_gen.TFRGen._ssa_name", "transformer.CodeGenerator.emit", "python.tfr_gen.TFRGen._emit_with_loc"], "python.tfr_gen.TFRGen._op_def": ["framework.op_def_registry.get"], "python.tfr_gen.TFRGen.visit_block": ["transformer.CodeGenerator.visit"], "python.tfr_gen.TFRGen.visit_Pass": ["python.tfr_gen.TFRGen._emit_with_loc", "python.tfr_gen.SymbolTable.in_scf_scope"], "python.tfr_gen.TFRGen.visit_Attribute": ["<builtin>.print", "<builtin>.NotImplementedError", "python.tfr_gen.TFRGen._ssa_name", "<builtin>.isinstance", "python.tfr_gen.TFRGen._emit_with_loc", "transformer.CodeGenerator.visit", "python.tfr_gen.TFRGen._get_inferred_type"], "python.tfr_gen.TFRGen.visit_Assign": ["<builtin>.tuple", "<builtin>.enumerate", "python.tfr_gen.TFRGen._ssa_name", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.zip", "python.tfr_gen.TFRGen._emit_with_loc", "python.tfr_gen.TFRGen._get_inferred_type", "python.tfr_gen.SymbolTable.insert_symbol", "transformer.CodeGenerator.emit", "<builtin>.len", "transformer.CodeGenerator.visit", "<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen._emit_binary_op": ["python.tfr_gen.TFRGen._ssa_name", "<builtin>.isinstance", "python.tfr_gen.TFRGen._emit_with_loc", "<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen.visit_AugAssign": ["python.tfr_gen.TFRGen._emit_binary_op", "transformer.CodeGenerator.visit", "python.tfr_gen.SymbolTable.insert_symbol"], "python.tfr_gen.TFRGen.visit_BinOp": ["python.tfr_gen.TFRGen._emit_binary_op", "transformer.CodeGenerator.visit"], "python.tfr_gen.TFRGen.visit_BoolOp": ["<builtin>.isinstance", "transformer.CodeGenerator.visit", "<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen.visit_Call": ["python.tfr_gen.SymbolTable.lookup", "python.tfr_gen.TFRGen._visit_tf_op", "python.tfr_gen.TFRGen._visit_for_stmt", "<builtin>.NotImplementedError", "python.tfr_gen.TFRGen._visit_if_stmt", "python.tfr_gen.TFRGen._visit_iter", "python.tfr_gen.TFRGen._ssa_name", "python.tfr_gen.TFRGen._emit_with_loc", "<builtin>.int", "transformer.CodeGenerator.visit", "python.tfr_gen.TFRGen._visit_tfr_builtins", "python.tfr_gen.TFRGen._get_inferred_type"], "python.tfr_gen.TFRGen._visit_if_stmt": ["<builtin>.list", "python.tfr_gen.SymbolTable.enter_scope", "python.tfr_gen.TFRGen._get_mlir_ssa_values", "python.tfr_gen.TFRGen.visit_block", "<builtin>.str", "<builtin>.zip", "python.tfr_gen.TFRGen._emit_with_loc", "python.tfr_gen.SymbolTable.insert_symbol", "<builtin>.len", "transformer.CodeGenerator.emit", "python.tfr_gen.SymbolTable.exit_scope"], "python.tfr_gen.TFRGen._visit_iter": ["pyct.qual_names.QN", "python.tfr_gen.TFRGen._ssa_name", "<builtin>.isinstance", "python.tfr_gen.TFRGen._emit_with_loc", "<builtin>.len", "transformer.CodeGenerator.visit", "pyct.anno.getanno", "<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen._visit_for_stmt": ["python.tfr_gen.SymbolTable.lookup", "<builtin>.list", "python.tfr_gen.SymbolTable.enter_scope", "python.tfr_gen.SymbolTable.exit_scope", "python.tfr_gen.TFRGen._get_mlir_ssa_values", "python.tfr_gen.TFRGen._ssa_name", "python.tfr_gen.TFRGen.visit_block", "<builtin>.str", "<builtin>.zip", "python.tfr_gen.TFRGen._emit_with_loc", "<builtin>.len", "transformer.CodeGenerator.emit", "python.tfr_gen.SymbolTable.insert_symbol"], "python.tfr_gen.TFRGen._visit_tf_op": ["<builtin>.len", "python.tfr_gen._require_tensor_list", "<builtin>.list", "python.tfr_gen.TFRGen._emit_default_constant_from_proto", "python.tfr_gen.TFRGen._get_mlir_ssa_values", "python.tfr_gen.TFRGen._pack_tensor_list", "python.tfr_gen.OpDefCache.lookup", "<builtin>.str", "python.tfr_gen._camel_to_snake", "python.tfr_gen.TFRGen._emit_with_loc", "<builtin>.zip", "python.tfr_gen.TFRGen._value_to_tensor", "transformer.CodeGenerator.emit", "python.tfr_gen.TFRGen._get_inferred_type", "transformer.CodeGenerator.visit", "python.tfr_gen._get_type_from_proto"], "python.tfr_gen.TFRGen._visit_tfr_builtins": ["<builtin>.list", "python.tfr_gen.TFRGen._get_mlir_ssa_values", "<builtin>.isinstance", "<builtin>.str", "<builtin>.zip", "<builtin>.callable", "python.tfr_gen.TFRGen._emit_with_loc", "transformer.CodeGenerator.visit"], "python.tfr_gen.TFRGen.visit_Compare": ["python.tfr_gen.TFRGen._i64_to_index", "python.tfr_gen.TFRGen._ssa_name", "<builtin>.isinstance", "<builtin>.zip", "python.tfr_gen.TFRGen._emit_with_loc", "transformer.CodeGenerator.visit", "<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen.visit_Constant": ["python.tfr_gen.TFRGen._ssa_name", "<builtin>.isinstance", "<builtin>.str", "python.tfr_gen.TFRGen._emit_with_loc", "python.tfr_gen.TFRGen._get_inferred_type"], "python.tfr_gen.TFRGen.visit_FunctionDef": ["python.tfr_gen.SymbolTable.lookup", "<builtin>.LookupError", "python.tfr_gen.SymbolTable.enter_scope", "python.tfr_gen.TFRGen._ssa_name", "python.tfr_gen._get_val_from_proto", "<builtin>.ValueError", "python.tfr_gen.OpDefCache.lookup", "<builtin>.str", "python.tfr_gen._camel_to_snake", "python.tfr_gen.TFRGen.visit_block", "python.tfr_gen.TFRGen._emit_with_loc", "python.tfr_gen.SymbolTable.exit_scope", "<builtin>.len", "transformer.CodeGenerator.emit", "pyct.anno.getanno", "python.tfr_gen.SymbolTable.insert_symbol"], "python.tfr_gen.TFRGen.visit_arguments": ["<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen.visit_Lambda": ["<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen._get_mlir_ssa_values": ["<builtin>.enumerate", "python.tfr_gen.TFRGen._ssa_name", "<builtin>.len"], "python.tfr_gen.TFRGen._emit_default_constant_from_proto": ["<builtin>.AttributeError", "python.tfr_gen._get_val_from_proto", "python.tfr_gen.TFRGen._ssa_name", "python.tfr_gen.TFRGen._emit_with_loc", "python.tfr_gen._get_type_from_proto"], "python.tfr_gen.TFRGen.visit_keyword": ["transformer.CodeGenerator.visit"], "python.tfr_gen.TFRGen.visit_If": ["<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen.visit_Name": ["python.tfr_gen.OpDefCache.lookup", "pyct.anno.getanno", "python.tfr_gen.SymbolTable.lookup", "python.tfr_gen.TFRGen._get_inferred_type"], "python.tfr_gen.TFRGen.visit_Return": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.zip", "python.tfr_gen.TFRGen._emit_with_loc", "transformer.CodeGenerator.visit", "transformer.CodeGenerator.emit", "python.tfr_gen.SymbolTable.in_scf_scope"], "python.tfr_gen.TFRGen.visit_Subscript": ["<builtin>.NotImplementedError", "python.tfr_gen.TFRGen._ssa_name", "<builtin>.isinstance", "python.tfr_gen.TFRGen._emit_with_loc", "transformer.CodeGenerator.emit", "transformer.CodeGenerator.visit", "python.tfr_gen.TFRGen._get_inferred_type"], "python.tfr_gen.TFRGen.visit_List": ["python.tfr_gen.TFRGen._index_to_I64", "python.tfr_gen.TFRGen._ssa_name", "<builtin>.str", "python.tfr_gen.TFRGen._emit_with_loc", "python.tfr_gen.TFRGen._value_to_tensor", "transformer.CodeGenerator.emit", "transformer.CodeGenerator.visit", "python.tfr_gen.TFRGen._get_inferred_type"], "python.tfr_gen.TFRGen.visit_Tuple": ["transformer.CodeGenerator.visit"], "python.tfr_gen.TFRGen.visit_UnaryOp": ["python.tfr_gen.TFRGen._ssa_name", "<builtin>.isinstance", "<builtin>.str", "python.tfr_gen.TFRGen._emit_with_loc", "transformer.CodeGenerator.visit", "<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen.visit_For": ["<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen.visit_While": ["<builtin>.NotImplementedError"], "python.tfr_gen.TFRGen.visit_Try": ["python.tfr_gen.TFRGen.visit_block"], "python.tfr_gen._apply_py_to_tf_passes": ["converters.control_flow.transform", "converters.return_statements.transform"], "python.tfr_gen.TfrGen.__init__": [], "python.tfr_gen.TfrGen.transform_ast": ["pyct.cfg.build", "python.tfr_gen.TFRGen.__init__", "static_analysis.activity.resolve", "pyct.qual_names.resolve", "static_analysis.reaching_fndefs.resolve", "python.tfr_gen.TFRTypeResolver.__init__", "python.tfr_gen._apply_py_to_tf_passes", "static_analysis.type_inference.resolve", "transformer.CodeGenerator.visit", "static_analysis.reaching_definitions.resolve"], "python.tfr_gen.tfr_gen": ["tfr.tfr_wrapper.verify", "python.tfr_gen.TfrGen.__init__", "transpiler.GenericTranspiler.transform"], "tfr.tfr_wrapper.verify": [], "python.tfr_gen.tfr_funcs_gen_from_module": ["os.path.basename", "framework.load_library.load_op_library", "<builtin>.sorted", "util.tf_inspect.getmembers", "os.listdir", "python.tfr_gen.tfr_gen", "os.path.join", "os.path.exists", "<builtin>.len", "os.path.dirname", "platform.tf_logging.info"], "python.tfr_gen.tfr_funcs_gen_from_module.<lambda1>": [], "gpus.check_cuda_libs": ["gpus.check_cuda_libs.main"], "gpus.check_cuda_libs._is_windows": ["platform.system"], "gpus.check_cuda_libs.check_cuda_lib": ["os.path.basename", "gpus.check_cuda_libs._is_windows", "subprocess.check_output", "shutil.which", "distutils.spawn.find_executable", "<builtin>.any", "os.path.isfile"], "shutil.which": [], "distutils.spawn.find_executable": [], "gpus.check_cuda_libs.main": ["<builtin>.print", "gpus.check_cuda_libs.check_cuda_lib", "<builtin>.len", "sys.stderr.write", "sys.exit", "<builtin>.range", "<builtin>.str", "os.linesep.join"], "os.linesep.join": [], "gpus.compress_find_cuda_config": ["gpus.compress_find_cuda_config.main"], "gpus.compress_find_cuda_config.main": ["<builtin>.open", "base64.b64encode", "zlib.compress"], "zlib.compress": [], "base64.b64encode": [], "gpus.compress_find_rocm_config": ["gpus.compress_find_rocm_config.main"], "gpus.compress_find_rocm_config.main": ["zlib.compress", "<builtin>.open", "base64.b64encode"], "gpus.find_cuda_config": ["gpus.find_cuda_config.main"], "gpus.find_cuda_config._is_linux": ["platform.system"], "gpus.find_cuda_config._is_windows": ["platform.system"], "gpus.find_cuda_config._is_macos": ["platform.system"], "gpus.find_cuda_config._matches_version": [], "gpus.find_cuda_config._at_least_version": ["<builtin>.int"], "gpus.find_cuda_config._get_header_version": ["io.open", "re.match"], "io.open": [], "gpus.find_cuda_config._cartesian_product": ["os.path.join"], "gpus.find_cuda_config._get_ld_config_paths": ["shutil.which", "re.compile", "gpus.find_cuda_config._is_linux", "<builtin>.sorted", "os.path.dirname", "<builtin>.set", "subprocess.check_output", "distutils.spawn.find_executable", "<builtin>.list"], "gpus.find_cuda_config._get_default_cuda_paths": ["os.environ.get", "gpus.find_cuda_config._get_ld_config_paths", "gpus.find_cuda_config._is_windows"], "gpus.find_cuda_config._header_paths": [], "gpus.find_cuda_config._library_paths": [], "gpus.find_cuda_config._not_found_error": ["<builtin>.sorted"], "gpus.find_cuda_config._find_file": ["gpus.find_cuda_config._not_found_error", "glob.glob", "os.path.join", "gpus.find_cuda_config._cartesian_product"], "gpus.find_cuda_config._find_library": ["gpus.find_cuda_config._library_paths", "gpus.find_cuda_config._find_file", "gpus.find_cuda_config._is_macos", "gpus.find_cuda_config._is_windows"], "gpus.find_cuda_config._find_versioned_file": ["gpus.find_cuda_config._find_curand_config.get_header_version", "gpus.find_cuda_config._find_cuda_config.get_header_version", "gpus.find_cuda_config._find_cudnn_config.get_header_version", "gpus.find_cuda_config._find_tensorrt_config.get_header_version", "gpus.find_cuda_config._find_nccl_config.get_header_version", "glob.glob", "gpus.find_cuda_config._not_found_error", "gpus.find_cuda_config._find_cublas_config.get_header_version", "gpus.find_cuda_config._find_cufft_config.get_header_version", "<builtin>.type", "gpus.find_cuda_config._matches_version", "gpus.find_cuda_config._find_cusparse_config.get_header_version", "gpus.find_cuda_config._find_cusolver_config.get_header_version", "gpus.find_cuda_config._find_cuda_config.get_nvcc_version", "os.path.join", "gpus.find_cuda_config._cartesian_product"], "gpus.find_cuda_config._find_curand_config.get_header_version": ["gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_cuda_config.get_header_version": ["<builtin>.int", "gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_cudnn_config.get_header_version": ["gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_nccl_config.get_header_version": ["gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_cublas_config.get_header_version": ["gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_cufft_config.get_header_version": ["gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_cusparse_config.get_header_version": ["gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_cusolver_config.get_header_version": ["gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_cuda_config.get_nvcc_version": ["re.match", "subprocess.check_output"], "gpus.find_cuda_config._find_tensorrt_config.get_header_version": ["<builtin>.all", "<builtin>.list", "gpus.find_cuda_config._get_header_version"], "gpus.find_cuda_config._find_header": ["gpus.find_cuda_config._find_versioned_file", "gpus.find_cuda_config._header_paths"], "gpus.find_cuda_config._find_cuda_config": ["gpus.find_cuda_config._find_versioned_file", "os.path.normpath", "gpus.find_cuda_config._header_paths", "gpus.find_cuda_config._find_file", "os.path.dirname", "gpus.find_cuda_config._is_windows", "gpus.find_cuda_config._find_header", "gpus.find_cuda_config._find_library", "os.path.join"], "gpus.find_cuda_config._find_cublas_config": ["gpus.find_cuda_config._at_least_version", "gpus.find_cuda_config._header_paths", "gpus.find_cuda_config._find_file", "os.path.dirname", "gpus.find_cuda_config._find_header", "gpus.find_cuda_config._find_library"], "gpus.find_cuda_config._find_cusolver_config": ["gpus.find_cuda_config._at_least_version", "gpus.find_cuda_config._header_paths", "gpus.find_cuda_config._find_file", "os.path.dirname", "gpus.find_cuda_config._find_header", "gpus.find_cuda_config._find_library"], "gpus.find_cuda_config._find_curand_config": ["gpus.find_cuda_config._at_least_version", "gpus.find_cuda_config._header_paths", "gpus.find_cuda_config._find_file", "os.path.dirname", "gpus.find_cuda_config._find_header", "gpus.find_cuda_config._find_library"], "gpus.find_cuda_config._find_cufft_config": ["gpus.find_cuda_config._at_least_version", "gpus.find_cuda_config._header_paths", "gpus.find_cuda_config._find_file", "os.path.dirname", "gpus.find_cuda_config._find_header", "gpus.find_cuda_config._find_library"], "gpus.find_cuda_config._find_cudnn_config": ["gpus.find_cuda_config._find_library", "gpus.find_cuda_config._find_header", "os.path.dirname"], "gpus.find_cuda_config._find_cusparse_config": ["gpus.find_cuda_config._at_least_version", "gpus.find_cuda_config._header_paths", "gpus.find_cuda_config._find_file", "os.path.dirname", "gpus.find_cuda_config._find_header", "gpus.find_cuda_config._find_library"], "gpus.find_cuda_config._find_nccl_config": ["gpus.find_cuda_config._find_library", "gpus.find_cuda_config._find_header", "os.path.dirname"], "gpus.find_cuda_config._find_tensorrt_config": ["gpus.find_cuda_config._find_library", "gpus.find_cuda_config._find_header", "os.path.dirname"], "gpus.find_cuda_config._list_from_env": [], "gpus.find_cuda_config._get_legacy_path": ["re.match", "gpus.find_cuda_config._list_from_env"], "gpus.find_cuda_config._normalize_path": ["gpus.find_cuda_config._is_windows", "os.path.realpath"], "gpus.find_cuda_config.find_cuda_config": ["gpus.find_cuda_config._find_cuda_config", "gpus.find_cuda_config._find_cufft_config", "gpus.find_cuda_config._get_default_cuda_paths", "gpus.find_cuda_config._get_legacy_path", "os.environ.get", "gpus.find_cuda_config._find_nccl_config", "os.path.exists", "<builtin>.tuple", "gpus.find_cuda_config._list_from_env", "gpus.find_cuda_config._find_cublas_config", "gpus.find_cuda_config._find_cudnn_config", "<builtin>.int", "gpus.find_cuda_config._find_curand_config", "gpus.find_cuda_config._find_cusolver_config", "gpus.find_cuda_config._find_cusparse_config", "gpus.find_cuda_config._normalize_path", "gpus.find_cuda_config._find_tensorrt_config"], "gpus.find_cuda_config.main": ["<builtin>.print", "sys.exit", "<builtin>.sorted", "sys.stderr.write", "<builtin>.str", "gpus.find_cuda_config.find_cuda_config"], "gpus.find_rocm_config": ["gpus.find_rocm_config.main"], "gpus.find_rocm_config._get_default_rocm_path": [], "gpus.find_rocm_config._get_rocm_install_path": ["gpus.find_rocm_config._get_default_rocm_path"], "gpus.find_rocm_config._get_composite_version_number": [], "gpus.find_rocm_config._get_header_version": ["re.match", "<builtin>.int", "io.open"], "gpus.find_rocm_config._find_rocm_config": ["gpus.find_rocm_config._get_composite_version_number", "gpus.find_rocm_config._find_rocm_config.rocm_version_numbers"], "gpus.find_rocm_config._find_rocm_config.rocm_version_numbers": ["os.path.join", "<builtin>.int", "os.path.exists", "<builtin>.open"], "gpus.find_rocm_config._find_hipruntime_config": [], "gpus.find_rocm_config._find_hipruntime_config.hipruntime_version_number": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config._find_miopen_config": ["gpus.find_rocm_config._find_miopen_config.miopen_version_numbers", "gpus.find_rocm_config._get_composite_version_number"], "gpus.find_rocm_config._find_miopen_config.miopen_version_numbers": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config._find_rocblas_config": ["gpus.find_rocm_config._find_rocblas_config.rocblas_version_numbers", "gpus.find_rocm_config._get_composite_version_number"], "gpus.find_rocm_config._find_rocblas_config.rocblas_version_numbers": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config._find_rocrand_config": [], "gpus.find_rocm_config._find_rocrand_config.rocrand_version_number": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config._find_rocfft_config": ["gpus.find_rocm_config._find_rocfft_config.rocfft_version_numbers", "gpus.find_rocm_config._get_composite_version_number"], "gpus.find_rocm_config._find_rocfft_config.rocfft_version_numbers": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config._find_hipfft_config": ["gpus.find_rocm_config._find_hipfft_config.hipfft_version_numbers", "gpus.find_rocm_config._get_composite_version_number"], "gpus.find_rocm_config._find_hipfft_config.hipfft_version_numbers": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config._find_roctracer_config": ["gpus.find_rocm_config._get_composite_version_number", "gpus.find_rocm_config._find_roctracer_config.roctracer_version_numbers"], "gpus.find_rocm_config._find_roctracer_config.roctracer_version_numbers": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config._find_hipsparse_config": ["gpus.find_rocm_config._find_hipsparse_config.hipsparse_version_numbers", "gpus.find_rocm_config._get_composite_version_number"], "gpus.find_rocm_config._find_hipsparse_config.hipsparse_version_numbers": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config._find_rocsolver_config": ["gpus.find_rocm_config._find_rocsolver_config.rocsolver_version_numbers", "gpus.find_rocm_config._get_composite_version_number"], "gpus.find_rocm_config._find_rocsolver_config.rocsolver_version_numbers": ["os.path.join", "gpus.find_rocm_config._get_header_version", "os.path.exists"], "gpus.find_rocm_config.find_rocm_config": ["gpus.find_rocm_config._find_roctracer_config", "gpus.find_rocm_config._find_rocsolver_config", "gpus.find_rocm_config._find_rocm_config", "os.path.exists", "gpus.find_rocm_config._find_rocfft_config", "gpus.find_rocm_config._get_rocm_install_path", "gpus.find_rocm_config._find_rocblas_config", "gpus.find_rocm_config._find_hipsparse_config", "gpus.find_rocm_config._find_hipruntime_config", "gpus.find_rocm_config._find_rocrand_config", "gpus.find_rocm_config._find_hipfft_config", "gpus.find_rocm_config._find_miopen_config"], "gpus.find_rocm_config.main": ["gpus.find_rocm_config.find_rocm_config", "<builtin>.str", "<builtin>.sorted", "<builtin>.print", "sys.stderr.write", "sys.exit"], "llvm.expand_cmake_vars": ["re.compile", "llvm.expand_cmake_vars.main"], "llvm.expand_cmake_vars._parse_args": [], "llvm.expand_cmake_vars._expand_variables": [], "llvm.expand_cmake_vars._expand_variables.replace": [], "llvm.expand_cmake_vars._expand_cmakedefines": ["llvm.expand_cmake_vars._expand_variables"], "llvm.expand_cmake_vars.main": ["llvm.expand_cmake_vars._expand_cmakedefines", "llvm.expand_cmake_vars._parse_args", "sys.stdout.write"], "llvm_openmp.expand_cmake_vars": ["re.compile", "llvm_openmp.expand_cmake_vars.main"], "llvm_openmp.expand_cmake_vars._parse_args": [], "llvm_openmp.expand_cmake_vars._expand_variables": [], "llvm_openmp.expand_cmake_vars._expand_variables.replace": [], "llvm_openmp.expand_cmake_vars._expand_cmakedefines": ["llvm_openmp.expand_cmake_vars._expand_variables"], "llvm_openmp.expand_cmake_vars.main": ["llvm_openmp.expand_cmake_vars._expand_cmakedefines", "llvm_openmp.expand_cmake_vars._parse_args", "sys.stdout.write"], "logging.gen_html": [], "logging.gen_html.html_escape": [], "logging.gen_html.get_input_type_from_signature": ["<builtin>.len", "<builtin>.range"], "logging.gen_html.get_operator_type": [], "logging.gen_html.HTMLGenerator.__init__": ["<builtin>.IOError", "io.file_io.recursive_create_dir", "io.file_io.FileIO", "os.path.dirname", "io.file_io.file_exists"], "logging.gen_html.HTMLGenerator.generate": ["<builtin>.range", "<builtin>.RuntimeError", "io.file_io.FileIO", "logging.gen_html.get_input_type_from_signature", "<builtin>.str", "logging.gen_html.get_operator_type", "logging.gen_html.html_escape", "<builtin>.sum", "<builtin>.len"], "logging.toco_conversion_log_pb2.TocoConversionLog": [], "python.tensorflow_wrap_toco": [], "python.toco_from_protos": ["python.toco_from_protos.main"], "python.toco_from_protos.execute": ["<builtin>.open", "python._pywrap_toco_api.TocoConvert", "sys.exit"], "python.toco_from_protos.main": ["argparse.ArgumentParser", "absl.app.run"], "build_info.gen_build_info": ["argparse.ArgumentParser", "<builtin>.RuntimeError", "build_info.gen_build_info.write_build_info"], "build_info.gen_build_info.write_build_info": ["<builtin>.sorted", "<builtin>.open", "six.ensure_str"], "ci_build.copy_binary": ["ci_build.copy_binary.main"], "ci_build.copy_binary.check_existence": ["<builtin>.RuntimeError", "os.path.exists"], "ci_build.copy_binary.copy_binary": ["<builtin>.open", "os.walk", "re.search", "<builtin>.print", "shutil.rmtree", "os.path.join", "os.chdir", "tempfile.mkdtemp", "zipfile.ZipFile"], "os.chdir": [], "ci_build.copy_binary.main": ["ci_build.copy_binary.check_existence", "re.search", "os.path.abspath", "ci_build.copy_binary.copy_binary", "argparse.ArgumentParser"], "ci_build.sizetrack_helper": ["datetime.datetime.now", "argparse.FileType", "ci_build.sizetrack_helper.main", "argparse.ArgumentParser"], "argparse.FileType": [], "ci_build.sizetrack_helper.git_pretty": ["subprocess.run", "<builtin>.print", "<builtin>.map", "<builtin>.list", "<builtin>.filter"], "subprocess.run": [], "ci_build.sizetrack_helper.gcloud": ["platform.system", "subprocess.run", "<builtin>.print"], "ci_build.sizetrack_helper.bq": ["pathlib.Path", "pathlib.Path.home", "ci_build.sizetrack_helper.gcloud"], "pathlib.Path.home": [], "ci_build.sizetrack_helper.get_all_tested_commits": ["ci_build.sizetrack_helper.bq", "<builtin>.reversed", "ci_build.sizetrack_helper.git_pretty"], "ci_build.sizetrack_helper.get_upload_path": ["os.path.basename"], "ci_build.sizetrack_helper.build_row": ["ci_build.sizetrack_helper.get_upload_path", "os.path.basename", "datetime.datetime.now", "ci_build.sizetrack_helper.get_all_tested_commits", "os.path.getsize", "ci_build.sizetrack_helper.git_pretty"], "os.path.getsize": [], "ci_build.sizetrack_helper.main": ["ci_build.sizetrack_helper.gcloud", "<builtin>.open", "<builtin>.print", "<builtin>.exit", "ci_build.sizetrack_helper.get_upload_path", "<builtin>.map", "ci_build.sizetrack_helper.build_row", "os.environ.get", "csv.writer", "ci_build.sizetrack_helper.bq"], "csv.writer": [], "ci_build.update_version": ["ci_build.update_version.main"], "ci_build.update_version.check_existence": ["os.path.exists", "<builtin>.RuntimeError"], "ci_build.update_version.check_all_files": ["ci_build.update_version.check_existence"], "ci_build.update_version.replace_string_in_line": ["re.sub", "<builtin>.open"], "ci_build.update_version.Version.__init__": ["ci_build.update_version.Version._update_string"], "ci_build.update_version.Version._update_string": [], "ci_build.update_version.Version.__str__": [], "ci_build.update_version.Version.set_identifier_string": ["ci_build.update_version.Version._update_string"], "ci_build.update_version.Version.pep_440_str": [], "ci_build.update_version.Version.parse_from_string": ["re.search", "<builtin>.len", "ci_build.update_version.Version.__init__", "<builtin>.RuntimeError"], "ci_build.update_version.get_current_semver_version": ["re.search", "<builtin>.open", "ci_build.update_version.Version.__init__"], "ci_build.update_version.update_version_h": ["ci_build.update_version.replace_string_in_line"], "ci_build.update_version.update_setup_dot_py": ["ci_build.update_version.replace_string_in_line"], "ci_build.update_version.update_readme": ["ci_build.update_version.replace_string_in_line"], "ci_build.update_version.update_tensorflow_bzl": ["ci_build.update_version.replace_string_in_line"], "ci_build.update_version.major_minor_change": [], "ci_build.update_version.check_for_lingering_string": ["subprocess.check_output", "<builtin>.print"], "ci_build.update_version.check_for_old_version": ["ci_build.update_version.check_for_lingering_string", "ci_build.update_version.major_minor_change"], "ci_build.update_version.main": ["ci_build.update_version.get_current_semver_version", "ci_build.update_version.update_tensorflow_bzl", "ci_build.update_version.Version.parse_from_string", "<builtin>.str", "ci_build.update_version.check_all_files", "ci_build.update_version.Version.set_identifier_string", "ci_build.update_version.update_setup_dot_py", "ci_build.update_version.check_for_old_version", "ci_build.update_version.update_readme", "<builtin>.print", "time.strftime", "ci_build.update_version.Version.__init__", "ci_build.update_version.update_version_h", "argparse.ArgumentParser"], "common.public_api": [], "common.public_api.PublicAPIVisitor.__init__": [], "common.public_api.PublicAPIVisitor.private_map": [], "common.public_api.PublicAPIVisitor.do_not_descend_map": [], "common.public_api.PublicAPIVisitor.set_root_name": [], "common.public_api.PublicAPIVisitor._is_private": ["six.ensure_str", "re.match"], "common.public_api.PublicAPIVisitor._do_not_descend": [], "common.public_api.PublicAPIVisitor.__call__": ["six.ensure_str", "<builtin>.list", "common.public_api.PublicAPIVisitor._is_private", "<builtin>.RuntimeError", "util.tf_inspect.ismodule", "<builtin>.len", "common.public_api.PublicAPIVisitor._do_not_descend"], "common.traverse": [], "common.traverse._traverse_internal": ["util.tf_inspect.ismodule", "<builtin>.issubclass", "<builtin>.any", "util.tf_inspect.getmembers", "util.tf_inspect.isclass", "<builtin>.getattr", "common.traverse._traverse_internal", "<builtin>.sorted", "six.ensure_str"], "compatibility.all_renames_v2": ["compatibility.all_renames_v2.add_contrib_direct_import_support"], "compatibility.all_renames_v2.add_contrib_direct_import_support": ["<builtin>.list"], "compatibility.ast_edits": ["re.compile", "collections.namedtuple"], "compatibility.ast_edits.full_name_node": ["ast.Attribute", "ast.Name", "six.ensure_str", "ast.Load"], "ast.Load": [], "ast.Name": [], "ast.Attribute": [], "compatibility.ast_edits.get_arg_value": ["<builtin>.isinstance"], "compatibility.ast_edits.uses_star_args_in_call": ["<builtin>.isinstance"], "compatibility.ast_edits.uses_star_kwargs_in_call": [], "compatibility.ast_edits.uses_star_args_or_kwargs_in_call": ["compatibility.ast_edits.uses_star_args_in_call", "compatibility.ast_edits.uses_star_kwargs_in_call"], "compatibility.ast_edits.excluded_from_module_rename": [], "compatibility.ast_edits.APIChangeSpec.preprocess": [], "compatibility.ast_edits.APIChangeSpec.clear_preprocessing": [], "compatibility.ast_edits.NoUpdateSpec.__init__": [], "compatibility.ast_edits._PastaEditVisitor.__init__": [], "compatibility.ast_edits._PastaEditVisitor.visit": ["<builtin>.super"], "compatibility.ast_edits._PastaEditVisitor.errors": [], "compatibility.ast_edits._PastaEditVisitor.warnings": [], "compatibility.ast_edits._PastaEditVisitor.warnings_and_errors": [], "compatibility.ast_edits._PastaEditVisitor.info": [], "compatibility.ast_edits._PastaEditVisitor.log": [], "compatibility.ast_edits._PastaEditVisitor.add_log": ["<builtin>.print"], "compatibility.ast_edits._PastaEditVisitor.add_logs": ["<builtin>.print"], "compatibility.ast_edits._PastaEditVisitor._get_applicable_entries": ["<builtin>.getattr", "six.ensure_str"], "compatibility.ast_edits._PastaEditVisitor._get_applicable_dict": ["<builtin>.getattr", "six.ensure_str"], "compatibility.ast_edits._PastaEditVisitor._get_full_name": ["<builtin>.reversed", "<builtin>.isinstance"], "compatibility.ast_edits._PastaEditVisitor._maybe_add_warning": ["compatibility.ast_edits._PastaEditVisitor.add_log", "six.ensure_str"], "compatibility.ast_edits._PastaEditVisitor._maybe_add_module_deprecation_warning": ["compatibility.ast_edits._PastaEditVisitor.add_log", "six.ensure_str"], "compatibility.ast_edits._PastaEditVisitor._maybe_add_call_warning": ["compatibility.ast_edits.uses_star_args_or_kwargs_in_call", "<builtin>.sorted", "<builtin>.isinstance", "compatibility.ast_edits.get_arg_value", "compatibility.ast_edits._PastaEditVisitor._maybe_add_warning", "compatibility.ast_edits._PastaEditVisitor.add_log", "compatibility.ast_edits._PastaEditVisitor._get_applicable_dict", "six.ensure_str"], "compatibility.ast_edits._PastaEditVisitor._maybe_rename": ["compatibility.ast_edits._PastaEditVisitor.add_log", "pasta.ast_utils.replace_child", "compatibility.ast_edits.full_name_node", "ast.copy_location"], "ast.copy_location": [], "pasta.ast_utils.replace_child": [], "compatibility.ast_edits._PastaEditVisitor._maybe_change_to_function_call": ["ast.Call", "<builtin>.isinstance", "pasta.ast_utils.replace_child", "compatibility.ast_edits._PastaEditVisitor.add_log", "ast.copy_location"], "ast.Call": [], "compatibility.ast_edits._PastaEditVisitor._maybe_add_arg_names": ["compatibility.ast_edits._PastaEditVisitor.add_log", "compatibility.ast_edits.uses_star_args_in_call", "<builtin>.isinstance", "ast.keyword"], "ast.keyword": [], "compatibility.ast_edits._PastaEditVisitor._maybe_modify_args": ["compatibility.ast_edits._PastaEditVisitor.add_log", "compatibility.ast_edits._PastaEditVisitor._get_applicable_dict", "<builtin>.getattr", "compatibility.ast_edits.uses_star_kwargs_in_call"], "compatibility.ast_edits._PastaEditVisitor.visit_Call": ["compatibility.ast_edits._PastaEditVisitor._maybe_add_call_warning", "compatibility.ast_edits._PastaEditVisitor._get_full_name", "compatibility.ast_edits._PastaEditVisitor._get_applicable_entries", "compatibility.ast_edits.uses_star_args_or_kwargs_in_call", "compatibility.ast_edits._PastaEditVisitor._maybe_modify_args", "ast.NodeVisitor.generic_visit", "compatibility.ast_edits._PastaEditVisitor._maybe_add_arg_names", "<builtin>.isinstance", "pasta.ast_utils.replace_child", "compatibility.ast_edits._PastaEditVisitor.add_logs", "compatibility.ast_edits._PastaEditVisitor.add_log"], "ast.NodeVisitor.generic_visit": [], "compatibility.ast_edits._PastaEditVisitor.visit_Attribute": ["compatibility.ast_edits._PastaEditVisitor._get_full_name", "ast.NodeVisitor.generic_visit", "compatibility.ast_edits._PastaEditVisitor._maybe_add_module_deprecation_warning", "<builtin>.isinstance", "compatibility.ast_edits._PastaEditVisitor._maybe_rename", "compatibility.ast_edits._PastaEditVisitor._maybe_change_to_function_call", "compatibility.ast_edits._PastaEditVisitor._maybe_add_warning", "pasta.dump"], "pasta.dump": [], "compatibility.ast_edits._PastaEditVisitor.visit_Import": ["<builtin>.getattr", "compatibility.ast_edits.excluded_from_module_rename", "six.moves.range", "compatibility.ast_edits._PastaEditVisitor.add_log", "ast.NodeVisitor.generic_visit", "pasta.parse", "base.formatting.set", "base.formatting.get", "pasta.ast_utils.replace_child", "<builtin>.len", "ast.Import", "<builtin>.list", "<builtin>.min", "ast.alias", "<builtin>.reversed", "six.ensure_str", "pasta.dump", "ast.copy_location"], "ast.alias": [], "pasta.parse": [], "base.formatting.get": [], "base.formatting.set": [], "ast.Import": [], "compatibility.ast_edits._PastaEditVisitor.visit_ImportFrom": ["<builtin>.getattr", "compatibility.ast_edits.excluded_from_module_rename", "ast.NodeVisitor.generic_visit", "base.formatting.set", "base.formatting.get", "pasta.ast_utils.replace_child", "ast.ImportFrom", "<builtin>.len", "pasta.dump", "compatibility.ast_edits._PastaEditVisitor.add_log", "six.ensure_str", "ast.copy_location"], "ast.ImportFrom": [], "compatibility.ast_edits.PastaAnalyzeVisitor.__init__": ["<builtin>.super", "compatibility.ast_edits.NoUpdateSpec.__init__"], "compatibility.ast_edits.PastaAnalyzeVisitor.results": [], "compatibility.ast_edits.PastaAnalyzeVisitor.add_result": [], "compatibility.ast_edits.PastaAnalyzeVisitor.visit_Attribute": ["compatibility.ast_edits._PastaEditVisitor.add_log", "compatibility.ast_edits.PastaAnalyzeVisitor.add_result", "compatibility.ast_edits._PastaEditVisitor._get_full_name", "ast.NodeVisitor.generic_visit"], "compatibility.ast_edits.PastaAnalyzeVisitor.visit_Import": ["compatibility.ast_edits._PastaEditVisitor.add_log", "compatibility.ast_edits.PastaAnalyzeVisitor.add_result", "ast.NodeVisitor.generic_visit"], "compatibility.ast_edits.PastaAnalyzeVisitor.visit_ImportFrom": ["compatibility.ast_edits._PastaEditVisitor.add_log", "compatibility.ast_edits.PastaAnalyzeVisitor.add_result", "ast.NodeVisitor.generic_visit"], "compatibility.ast_edits.ASTCodeUpgrader.__init__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "compatibility.ast_edits.ASTCodeUpgrader.process_file": ["tempfile.NamedTemporaryFile", "os.remove", "<builtin>.open", "compatibility.ast_edits.ASTCodeUpgrader.process_opened_file", "shutil.move"], "compatibility.ast_edits.ASTCodeUpgrader.process_opened_file": ["compatibility.ast_edits.ASTCodeUpgrader.update_string_pasta", "compatibility.ast_edits.ASTCodeUpgrader._format_log"], "shutil.move": [], "compatibility.ast_edits.ASTCodeUpgrader.format_log": ["six.ensure_str"], "compatibility.ast_edits.ASTCodeUpgrader.update_string_pasta": ["compatibility.ast_edits.ASTCodeUpgrader.format_log", "traceback.format_exc", "pasta.parse", "compatibility.ast_edits._PastaEditVisitor.visit", "compatibility.ast_edits._PastaEditVisitor.__init__", "pasta.dump"], "compatibility.ast_edits.ASTCodeUpgrader._format_log": ["six.ensure_str"], "compatibility.ast_edits.ASTCodeUpgrader.process_tree": ["sys.exit", "os.makedirs", "os.path.dirname", "os.readlink", "os.path.normpath", "os.walk", "shutil.copy", "os.path.exists", "os.path.isdir", "compatibility.ast_edits.ASTCodeUpgrader.process_file", "compatibility.ast_edits.ASTCodeUpgrader.process_tree_inplace", "os.path.join", "os.path.islink", "os.path.relpath", "<builtin>.print", "os.path.split", "os.symlink", "six.ensure_str"], "compatibility.ast_edits.ASTCodeUpgrader.process_tree_inplace": ["os.walk", "compatibility.ast_edits.ASTCodeUpgrader.process_file", "os.path.join", "os.path.islink", "six.ensure_str"], "os.symlink": [], "compatibility.ipynb": ["collections.namedtuple"], "compatibility.ipynb.is_python": ["six.ensure_str"], "compatibility.ipynb.process_file": ["compatibility.ipynb._update_notebook", "six.ensure_str", "<builtin>.print", "shutil.move", "json.dump", "tempfile.NamedTemporaryFile", "<builtin>.SyntaxError", "compatibility.ipynb._get_code"], "compatibility.ipynb._get_code": ["<builtin>.enumerate", "six.ensure_str", "compatibility.ipynb.is_python", "compatibility.ipynb.skip_magic", "compatibility.ipynb.check_line_split", "json.load", "<builtin>.len", "<builtin>.open"], "compatibility.ipynb._update_notebook": ["<builtin>.len", "compatibility.ipynb.is_python", "<builtin>.enumerate", "copy.deepcopy"], "compatibility.ipynb.skip_magic": ["six.ensure_str"], "compatibility.ipynb.check_line_split": ["re.search"], "compatibility.module_deprecations_v2": [], "compatibility.renames_v2": [], "compatibility.reorders_v2": [], "compatibility.tf_upgrade": ["compatibility.ast_edits.ASTCodeUpgrader", "six.ensure_str", "<builtin>.open", "<builtin>.print", "<builtin>.len", "argparse.ArgumentParser", "compatibility.tf_upgrade.TFAPIChangeSpec.__init__"], "compatibility.tf_upgrade.TFAPIChangeSpec.__init__": [], "compatibility.ast_edits.ASTCodeUpgrader": [], "compatibility.tf_upgrade_v2": ["compatibility.tf_upgrade_v2.VersionedTFImport.__init__"], "compatibility.tf_upgrade_v2.UnaliasedTFImport.__init__": [], "compatibility.tf_upgrade_v2.VersionedTFImport.__init__": ["six.ensure_str"], "compatibility.tf_upgrade_v2.TFAPIImportAnalysisSpec.__init__": ["compatibility.tf_upgrade_v2.UnaliasedTFImport.__init__"], "compatibility.tf_upgrade_v2.CompatV1ImportReplacer.visit_Import": ["ast.NodeVisitor.generic_visit"], "compatibility.tf_upgrade_v2.TFAPIChangeSpec.__init__": ["compatibility.ast_edits.ImportRename", "compatibility.all_renames_v2.add_contrib_direct_import_support", "<builtin>.dict", "functools.partial", "all_renames_v2.addons_symbol_mappings.items", "ast.Str"], "compatibility.ast_edits.ImportRename": [], "all_renames_v2.addons_symbol_mappings.items": [], "ast.Str": [], "compatibility.tf_upgrade_v2.TFAPIChangeSpec.preprocess": ["compatibility.tf_upgrade_v2.TFAPIChangeSpec.preprocess", "<builtin>.set", "ast.NodeVisitor.__init__", "compatibility.tf_upgrade_v2.TFAPIImportAnalysisSpec.__init__", "ast.NodeVisitor.visit", "compatibility.ast_edits.PastaAnalyzeVisitor"], "compatibility.ast_edits.PastaAnalyzeVisitor": [], "ast.NodeVisitor.__init__": [], "ast.NodeVisitor.visit": [], "compatibility.tf_upgrade_v2.TFAPIChangeSpec.clear_preprocessing": ["compatibility.tf_upgrade_v2.TFAPIChangeSpec.__init__"], "compatibility.tf_upgrade_v2._is_ast_str": ["<builtin>.hasattr", "<builtin>.isinstance"], "compatibility.tf_upgrade_v2._is_ast_true": ["<builtin>.hasattr", "<builtin>.isinstance"], "compatibility.tf_upgrade_v2._is_ast_false": ["<builtin>.hasattr", "<builtin>.isinstance"], "compatibility.tf_upgrade_v2._rename_if_arg_found_transformer": ["compatibility.ast_edits.get_arg_value", "six.ensure_str", "<builtin>.enumerate", "compatibility.ast_edits.full_name_node"], "compatibility.tf_upgrade_v2._add_argument_transformer": ["pasta.dump", "ast.keyword"], "compatibility.tf_upgrade_v2._iterator_transformer": ["six.ensure_str", "compatibility.ast_edits.full_name_node", "<builtin>.isinstance"], "compatibility.tf_upgrade_v2._dropout_transformer": ["<builtin>.len", "compatibility.tf_upgrade_v2._dropout_transformer._replace_keep_prob_node", "ast.keyword"], "compatibility.tf_upgrade_v2._dropout_transformer._replace_keep_prob_node": ["ast.Sub", "ast.Num", "ast.copy_location", "pasta.ast_utils.replace_child", "ast.BinOp", "base.formatting.set"], "ast.Num": [], "ast.Sub": [], "ast.BinOp": [], "compatibility.tf_upgrade_v2._cast_transformer": ["<builtin>.isinstance", "ast.Load", "<builtin>.len", "ast.Attribute", "ast.keyword", "ast.Name"], "compatibility.tf_upgrade_v2._softmax_cross_entropy_with_logits_transformer": ["compatibility.tf_upgrade_v2._softmax_cross_entropy_with_logits_transformer._wrap_label"], "compatibility.tf_upgrade_v2._softmax_cross_entropy_with_logits_transformer._wrap_label": ["ast.Call", "<builtin>.isinstance", "ast.copy_location", "pasta.ast_utils.replace_child", "ast.Load", "ast.Name"], "compatibility.tf_upgrade_v2._image_resize_transformer": ["<builtin>.isinstance", "ast.Load", "<builtin>.len", "ast.Attribute", "ast.keyword", "ast.Name"], "compatibility.tf_upgrade_v2._pool_seed_transformer": ["ast.Num", "<builtin>.isinstance", "compatibility.tf_upgrade_v2._is_ast_false", "<builtin>.getattr", "ast.keyword"], "compatibility.tf_upgrade_v2._extract_glimpse_transformer": ["compatibility.tf_upgrade_v2._extract_glimpse_transformer._replace_uniform_noise_node", "<builtin>.len"], "compatibility.tf_upgrade_v2._extract_glimpse_transformer._replace_uniform_noise_node": ["ast.IfExp", "ast.copy_location", "pasta.ast_utils.replace_child", "ast.Str", "base.formatting.set"], "ast.IfExp": [], "compatibility.tf_upgrade_v2._add_summary_step_transformer": ["ast.keyword", "pasta.parse"], "compatibility.tf_upgrade_v2._add_summary_recording_cond_transformer": ["pasta.parse"], "compatibility.tf_upgrade_v2._add_loss_reduction_transformer": ["ast.keyword", "pasta.parse"], "compatibility.tf_upgrade_v2._rename_if_any_arg_found_transformer": ["compatibility.tf_upgrade_v2._rename_if_arg_found_transformer"], "compatibility.tf_upgrade_v2._rename_if_arg_found_and_add_loss_reduction_transformer": ["compatibility.tf_upgrade_v2._add_loss_reduction_transformer", "compatibility.tf_upgrade_v2._rename_if_arg_found_transformer"], "compatibility.tf_upgrade_v2._add_uniform_scaling_initializer_transformer": ["ast.keyword", "compatibility.ast_edits.full_name_node", "pasta.parse"], "compatibility.tf_upgrade_v2._contrib_layers_xavier_initializer_transformer": ["compatibility.tf_upgrade_v2._contrib_layers_xavier_initializer_transformer._get_distribution", "compatibility.ast_edits.full_name_node", "pasta.parse", "pasta.ast_utils.replace_child", "<builtin>.len", "ast.keyword", "base.formatting.set"], "compatibility.tf_upgrade_v2._contrib_layers_xavier_initializer_transformer._get_distribution": ["base.formatting.set", "pasta.ast_utils.replace_child", "pasta.parse"], "compatibility.tf_upgrade_v2._contrib_layers_variance_scaling_initializer_transformer": ["compatibility.tf_upgrade_v2._contrib_layers_variance_scaling_initializer_transformer._replace_distribution", "compatibility.ast_edits.full_name_node", "pasta.parse", "compatibility.tf_upgrade_v2._contrib_layers_variance_scaling_initializer_transformer._replace_mode", "<builtin>.len", "ast.keyword"], "compatibility.tf_upgrade_v2._contrib_layers_variance_scaling_initializer_transformer._replace_distribution": ["base.formatting.set", "pasta.ast_utils.replace_child", "pasta.parse"], "compatibility.tf_upgrade_v2._contrib_layers_variance_scaling_initializer_transformer._replace_mode": ["base.formatting.set", "pasta.ast_utils.replace_child", "pasta.parse"], "compatibility.tf_upgrade_v2._contrib_layers_l1_regularizer_transformer": ["compatibility.ast_edits.full_name_node", "<builtin>.len"], "compatibility.tf_upgrade_v2._contrib_layers_l2_regularizer_transformer": ["compatibility.tf_upgrade_v2._contrib_layers_l2_regularizer_transformer._replace_scale_node", "compatibility.ast_edits.full_name_node", "<builtin>.len"], "compatibility.tf_upgrade_v2._contrib_layers_l2_regularizer_transformer._replace_scale_node": ["ast.Num", "ast.Mult", "pasta.ast_utils.replace_child", "ast.BinOp", "base.formatting.set"], "ast.Mult": [], "compatibility.tf_upgrade_v2._name_scope_transformer": ["pasta.dump", "ast.copy_location", "compatibility.ast_edits.full_name_node", "pasta.ast_utils.replace_child", "compatibility.ast_edits.get_arg_value", "ast.keyword"], "compatibility.tf_upgrade_v2._rename_to_compat_v1": ["six.ensure_str", "compatibility.tf_upgrade_v2._rename_func"], "compatibility.tf_upgrade_v2._rename_func": ["ast.copy_location", "compatibility.ast_edits.full_name_node", "pasta.ast_utils.replace_child"], "compatibility.tf_upgrade_v2._string_split_transformer": ["compatibility.tf_upgrade_v2._rename_to_compat_v1", "<builtin>.isinstance", "<builtin>.enumerate", "compatibility.tf_upgrade_v2._rename_func", "compatibility.tf_upgrade_v2._string_split_rtype_transformer", "compatibility.tf_upgrade_v2._is_ast_false"], "compatibility.tf_upgrade_v2._string_split_rtype_transformer": ["compatibility.tf_upgrade_v2._rename_to_compat_v1", "ast.Call", "<builtin>.isinstance", "<builtin>.enumerate", "ast.Attribute", "copy.deepcopy"], "compatibility.tf_upgrade_v2_main": ["compatibility.tf_upgrade_v2_main.main"], "compatibility.tf_upgrade_v2_main.process_file": ["compatibility.ipynb.process_file", "six.ensure_str", "<builtin>.NotImplementedError"], "compatibility.tf_upgrade_v2_main.main": ["<builtin>.len", "<builtin>.print", "compatibility.tf_upgrade_v2_safety.TFAPIChangeSpec", "<builtin>.open", "argparse.ArgumentParser", "compatibility.ast_edits.ASTCodeUpgrader", "compatibility.tf_upgrade_v2_main.process_file", "<builtin>.ValueError", "compatibility.tf_upgrade_v2.TFAPIChangeSpec", "six.ensure_str"], "compatibility.tf_upgrade_v2_safety.TFAPIChangeSpec": [], "compatibility.tf_upgrade_v2_safety": [], "compatibility.tf_upgrade_v2_safety.TFAPIChangeSpec.__init__": ["all_renames_v2.addons_symbol_mappings.items", "compatibility.ast_edits.ImportRename"], "dockerfiles.assembler": ["absl.flags.DEFINE_boolean", "absl.flags.DEFINE_string", "absl.flags.DEFINE_integer", "absl.app.run", "absl.flags.DEFINE_multi_string"], "dockerfiles.assembler.TfDockerTagValidator.__init__": ["<builtin>.super"], "dockerfiles.assembler.TfDockerTagValidator._validate_ispartial": ["cerberus.Validator._error"], "cerberus.Validator._error": [], "dockerfiles.assembler.TfDockerTagValidator._validate_isfullarg": ["cerberus.Validator._error"], "dockerfiles.assembler.eprint": ["<builtin>.print"], "dockerfiles.assembler.aggregate_all_slice_combinations": ["itertools.product", "copy.deepcopy", "<builtin>.list"], "dockerfiles.assembler.build_name_from_slices": ["copy.deepcopy"], "dockerfiles.assembler.update_args_dict": ["FLAGS.arg.items", "FLAGS.arg.partition", "<builtin>.isinstance"], "FLAGS.arg.partition": [], "FLAGS.arg.items": [], "dockerfiles.assembler.get_slice_sets_and_required_args": ["re.compile"], "dockerfiles.assembler.gather_tag_args": ["dockerfiles.assembler.update_args_dict", "<builtin>.exit", "dockerfiles.assembler.eprint"], "dockerfiles.assembler.gather_slice_list_items": ["itertools.chain", "<builtin>.list"], "dockerfiles.assembler.find_first_slice_value": [], "dockerfiles.assembler.assemble_tags": ["dockerfiles.assembler.aggregate_all_slice_combinations", "dockerfiles.assembler.gather_slice_list_items", "dockerfiles.assembler.get_slice_sets_and_required_args", "dockerfiles.assembler.merge_partials", "dockerfiles.assembler.build_name_from_slices", "collections.defaultdict", "dockerfiles.assembler.eprint", "dockerfiles.assembler.find_first_slice_value", "dockerfiles.assembler.gather_tag_args"], "dockerfiles.assembler.merge_partials": ["<builtin>.list"], "dockerfiles.assembler.upload_in_background": ["<builtin>.print"], "dockerfiles.assembler.mkdir_p": ["os.makedirs"], "dockerfiles.assembler.gather_existing_partials": ["os.path.join", "dockerfiles.assembler.eprint", "os.walk", "<builtin>.open", "<builtin>.len"], "dockerfiles.assembler.main": ["dockerfiles.assembler.mkdir_p", "shutil.rmtree", "os.path.join", "os.remove", "<builtin>.any", "<builtin>.print", "<builtin>.len", "cerberus.Validator.normalized", "yaml.dump", "dockerfiles.assembler.eprint", "<builtin>.open", "dockerfiles.assembler.gather_existing_partials", "yaml.safe_load", "multiprocessing.Process", "json.loads", "docker.from_env", "dockerfiles.assembler.TfDockerTagValidator.__init__", "re.search", "platform.processor", "dockerfiles.assembler.assemble_tags", "<builtin>.next", "cerberus.Validator.validate", "re.match", "absl.app.UsageError", "<builtin>.exit", "docker.errors.BuildError", "os.path.dirname"], "yaml.safe_load": [], "cerberus.Validator.validate": [], "yaml.dump": [], "cerberus.Validator.normalized": [], "docker.from_env": [], "platform.processor": [], "docker.errors.BuildError": [], "multiprocessing.Process": [], "docs.base_dir": [], "docs.base_dir.get_base_dirs_and_prefixes": ["os.path.join", "distutils.version.LooseVersion", "os.path.normpath", "os.path.dirname"], "docs.build_cc_api_headers": ["pathlib.Path", "absl.flags.mark_flags_as_required", "absl.flags.DEFINE_string", "absl.app.run"], "docs.build_cc_api_headers.build_headers": ["subprocess.check_call", "subprocess.Popen"], "subprocess.check_call": [], "docs.build_cc_api_headers.main": ["pathlib.Path", "docs.build_cc_api_headers.build_headers"], "docs.build_java_api_docs": ["absl.app.run", "absl.flags.DEFINE_bool", "absl.flags.mark_flags_as_required", "absl.flags.DEFINE_string", "pathlib.Path"], "docs.build_java_api_docs.main": ["subprocess.Popen", "api_generator.gen_java.gen_java_docs", "tempfile.mkdtemp", "subprocess.check_call", "pathlib.Path", "shutil.copytree"], "docs.doc_controls": ["typing.TypeVar"], "docs.doc_controls.inheritable_header": [], "docs.doc_controls.inheritable_header._wrapped": ["<builtin>.setattr"], "docs.doc_controls.doc_private": ["<builtin>.setattr"], "git.gen_git_source": ["git.gen_git_source.generate", "<builtin>.RuntimeError", "argparse.ArgumentParser", "git.gen_git_source.raw_generate", "git.gen_git_source.configure"], "git.gen_git_source.parse_branch_ref": ["<builtin>.RuntimeError", "<builtin>.len", "<builtin>.open"], "git.gen_git_source.configure": ["os.path.exists", "<builtin>.print", "os.symlink", "<builtin>.open", "<builtin>.repr", "<builtin>.RuntimeError", "os.path.join", "git.gen_git_source.parse_branch_ref", "shutil.copy2", "json.dump", "os.makedirs", "os.listdir", "os.path.split", "<builtin>.hasattr", "os.path.isdir", "shutil.rmtree"], "git.gen_git_source.get_git_version": ["<builtin>.Exception", "<builtin>.str", "subprocess.check_output", "builtins.bytes", "<builtin>.len"], "builtins.bytes": [], "git.gen_git_source.write_version_info": ["<builtin>.open"], "git.gen_git_source.generate": ["git.gen_git_source.write_version_info", "<builtin>.open", "<builtin>.RuntimeError", "git.gen_git_source.parse_branch_ref", "git.gen_git_source.get_git_version", "json.load"], "git.gen_git_source.raw_generate": ["git.gen_git_source.write_version_info", "git.gen_git_source.get_git_version"], "sys.argv.pop": [], "pip_package.setup.BinaryDistribution.has_ext_modules": [], "pip_package.setup.InstallCommand.finalize_options": ["install.install.finalize_options", "os.path.join"], "install.install.finalize_options": [], "pip_package.setup.InstallHeaders.initialize_options": [], "pip_package.setup.InstallHeaders.finalize_options": ["setuptools.Command.set_undefined_options"], "setuptools.Command.set_undefined_options": [], "pip_package.setup.InstallHeaders.mkdir_and_copy_file": ["os.path.exists", "os.path.dirname", "re.sub", "os.path.join", "setuptools.Command.mkpath", "setuptools.Command.copy_file"], "setuptools.Command.mkpath": [], "setuptools.Command.copy_file": [], "pip_package.setup.InstallHeaders.run": ["setuptools.Command.mkpath", "pip_package.setup.InstallHeaders.mkdir_and_copy_file"], "pip_package.setup.InstallHeaders.get_inputs": [], "pip_package.setup.InstallHeaders.get_outputs": [], "pip_package.setup.find_files": ["os.walk", "os.path.join", "fnmatch.filter"], "fnmatch.filter": [], "fnmatch.fnmatch": [], "pip_package.setup_with_binary": ["setuptools.find_packages", "setuptools.setup"], "pip_package.setup_with_binary.<lambda1>": [], "pip_package.simple_console": ["sys.exit", "pip_package.simple_console.main"], "pip_package.simple_console.main": ["code.interact"], "code.interact": [], "pip_package.simple_console_for_windows": ["sys.exit", "pip_package.simple_console_for_windows.main"], "pip_package.simple_console_for_windows.main": ["code.interact"], "signature.signature_def_utils": [], "signature.signature_def_utils.set_signature_defs": ["<builtin>.isinstance", "signature._pywrap_signature_def_util_wrapper.SetSignatureDefMap", "<builtin>.bytearray"], "signature._pywrap_signature_def_util_wrapper.SetSignatureDefMap": [], "signature.signature_def_utils.get_signature_defs": ["signature._pywrap_signature_def_util_wrapper.GetSignatureDefMap", "<builtin>.isinstance", "<builtin>.bytearray", "signature.signature_def_utils.get_signature_defs._deserialize"], "signature._pywrap_signature_def_util_wrapper.GetSignatureDefMap": [], "signature.signature_def_utils.get_signature_defs._deserialize": ["protobuf.meta_graph_pb2.SignatureDef"], "signature.signature_def_utils.clear_signature_defs": ["<builtin>.isinstance", "signature._pywrap_signature_def_util_wrapper.ClearSignatureDefs", "<builtin>.bytearray"], "signature._pywrap_signature_def_util_wrapper.ClearSignatureDefs": [], "client.client": ["absl.flags.DEFINE_bool"], "client.client._utcnow": ["datetime.datetime.utcnow"], "datetime.datetime.utcnow": [], "client.client._environment_discovery_url": ["os.environ.get"], "client.client._gce_metadata_endpoint": ["os.environ.get"], "client.client._request_compute_metadata": ["urllib.request.Request", "client.client._as_text", "urllib.request.urlopen", "client.client._gce_metadata_endpoint"], "urllib.request.Request": [], "client.client._as_text": ["<builtin>.isinstance"], "client.client._environment_var_to_network_endpoints": ["<builtin>.len"], "client.client._get_tpu_name": [], "client.client.Client.__init__": ["<builtin>.ValueError", "<builtin>.NotImplementedError", "client.client._as_text", "client.client._request_compute_metadata", "client.client._get_tpu_name", "<builtin>.len", "client.client._environment_discovery_url", "<builtin>.isinstance"], "client.client.Client._symptom_msg": [], "client.client.Client._oom_event": ["client.client._utcnow", "logging.warning", "datetime.datetime.strptime", "<builtin>.reversed", "client.client.Client._symptom_msg", "datetime.timedelta"], "datetime.datetime.strptime": [], "client.client.Client._hbm_oom_event": ["client.client._utcnow", "logging.warning", "datetime.datetime.strptime", "<builtin>.reversed", "client.client.Client._symptom_msg", "datetime.timedelta"], "client.client.Client._tpu_service": ["googleapiclient.discovery.build", "client.GoogleCredentials.get_application_default", "<builtin>.RuntimeError"], "client.client.Client._full_name": [], "client.client.Client._fetch_cloud_tpu_metadata": ["client.client.Client._full_name", "<builtin>.ValueError", "client.client.Client._tpu_service"], "client.client.Client._get_tpu_property": ["client.client.Client._fetch_cloud_tpu_metadata"], "client.client.Client.__enter__": [], "client.client.Client.__exit__": [], "client.client.Client.recoverable": ["client.client.Client.symptoms", "client.client.Client.state", "client.client.Client._oom_event", "client.client.Client._hbm_oom_event"], "client.client.Client.state": ["client.client.Client._get_tpu_property"], "client.client.Client.symptoms": ["client.client.Client._get_tpu_property"], "client.client.Client.health": ["client.client.Client._get_tpu_property"], "client.client.Client.runtime_version": ["json.loads", "client.client.Client._get_tpu_property", "client.client.Client.network_endpoints", "urllib.request.urlopen", "urllib.request.Request"], "client.client.Client.network_endpoints": ["client.client.Client._fetch_cloud_tpu_metadata", "<builtin>.list", "client.client._environment_var_to_network_endpoints", "<builtin>.RuntimeError"], "client.client.Client.accelerator_type": ["client.client.Client._get_tpu_property"], "client.client.Client.api_available": [], "client.client.Client.name": [], "client.client.Client.get_local_ip": ["client.client._request_compute_metadata"], "client.client.Client.wait_for_healthy": ["logging.warning", "time.sleep", "time.time", "<builtin>.RuntimeError", "client.client.Client.state", "client.client.Client.name", "client.client.Client.health"], "client.client.Client.configure_tpu_version": ["<builtin>.len", "concurrent.futures.ThreadPoolExecutor", "client.client.Client.network_endpoints"], "client.client.Client.configure_tpu_version.configure_worker": ["urllib.request.Request", "urllib.request.urlopen", "<builtin>.Exception"], "client.version": [], "client.tpu_client": [], "client.tpu_client.TpuBackend.create": ["tpu_client_extension.TpuClient.Get", "<builtin>.ValueError", "absl.logging.info"], "tpu_client_extension.TpuClient.Get": [], "ops.tpu_ops": ["framework.ops.RegisterGradient", "<builtin>.set", "util.tf_export.tf_export"], "ops.tpu_ops._create_default_group_assignment": ["<builtin>.range", "platform.tf_logging.warning", "<builtin>.list", "tpu.tpu_function.get_tpu_context"], "ops.gen_tpu_ops.all_to_all": [], "ops.tpu_ops._all_to_all_grad": ["ops.gen_tpu_ops.all_to_all"], "ops.gen_tpu_ops.cross_replica_sum": [], "ops.tpu_ops.collective_permute": ["ops.gen_tpu_ops.collective_permute"], "ops.gen_tpu_ops.collective_permute": [], "ops.tpu_ops._collective_permute_grad": ["ops.gen_tpu_ops.collective_permute"], "ops.tpu_ops._cross_replica_sum_grad": ["ops.gen_tpu_ops.cross_replica_sum"], "ops.tpu_ops._embedding_activations_grad": ["<builtin>.RuntimeError", "<builtin>.len", "ops.array_ops.zeros", "framework.ops.get_default_graph", "ops.array_ops.identity"], "ops.tpu_ops.infeed_dequeue": ["<builtin>.TypeError", "ops.gen_tpu_ops.infeed_dequeue", "<builtin>.list"], "ops.gen_tpu_ops.infeed_dequeue": [], "ops.gen_tpu_ops.infeed_dequeue_tuple": [], "ops.gen_tpu_ops.send_tpu_embedding_gradients": [], "ops.tpu_ops.enqueue_tpu_embedding_integer_batch": ["ops.gen_tpu_ops.enqueue_tpu_embedding_integer_batch"], "ops.gen_tpu_ops.enqueue_tpu_embedding_integer_batch": [], "ops.tpu_ops.enqueue_tpu_embedding_sparse_batch": ["ops.gen_tpu_ops.enqueue_tpu_embedding_sparse_batch"], "ops.gen_tpu_ops.enqueue_tpu_embedding_sparse_batch": [], "ops.gen_tpu_ops.enqueue_tpu_embedding_sparse_tensor_batch": [], "ops.gen_tpu_ops.enqueue_tpu_embedding_ragged_tensor_batch": [], "ops.tpu_ordinal_selector_op": [], "profiler.capture_tpu_profile": ["absl.flags.DEFINE_boolean", "profiler.capture_tpu_profile.run_main", "absl.flags.DEFINE_string", "absl.flags.DEFINE_integer"], "profiler.capture_tpu_profile.get_workers_list": ["framework.errors.UnavailableError"], "profiler.capture_tpu_profile.monitoring_helper": ["<builtin>.range", "profiler.profiler_client.monitor", "<builtin>.print", "sys.exit"], "profiler.capture_tpu_profile.run_main": ["absl.app.run"], "profiler.capture_tpu_profile.main": ["os.path.expanduser", "profiler.profiler_client.trace", "profiler.capture_tpu_profile.get_workers_list", "cluster_resolver.tpu_cluster_resolver.TPUClusterResolver", "platform.gfile.Exists", "platform.tf_logging.warn", "platform.gfile.MakeDirs", "<builtin>.print", "FLAGS.service_addr.replace", "platform.tf_logging.set_verbosity", "profiler.profiler_v2.ProfilerOptions", "profiler.capture_tpu_profile.monitoring_helper", "distutils.version.LooseVersion", "sys.exit"], "FLAGS.service_addr.replace": [], "profiler.profiler_analysis_pb2_grpc": [], "profiler.profiler_analysis_pb2_grpc.ProfileAnalysisStub.__init__": [], "profiler.profiler_analysis_pb2_grpc.ProfileAnalysisServicer.NewSession": ["<builtin>.NotImplementedError"], "profiler.profiler_analysis_pb2_grpc.ProfileAnalysisServicer.EnumSessions": ["<builtin>.NotImplementedError"], "profiler.profiler_analysis_pb2_grpc.ProfileAnalysisServicer.GetSessionToolData": ["<builtin>.NotImplementedError"], "profiler.profiler_analysis_pb2_grpc.add_ProfileAnalysisServicer_to_server": ["grpc.unary_unary_rpc_method_handler", "grpc.method_handlers_generic_handler"], "profiler.version": [], "experimental.loss_scale": [], "experimental.loss_scale.LossScale.__init__": [], "experimental.loss_scale.LossScale": ["abc.abstractmethod"], "experimental.loss_scale.LossScale.__call__": [], "experimental.loss_scale.LossScale.update": [], "experimental.loss_scale.LossScale._add_weight": ["eager.context.executing_eagerly", "base.Trackable._handle_deferred_dependencies", "framework.ops.get_default_graph", "<builtin>.RuntimeError", "ops.variable_scope.variable"], "experimental.loss_scale.LossScale._checkpoint_dependencies": ["<builtin>.sorted", "eager.context.executing_eagerly", "tracking.base.TrackableReference", "framework.ops.get_default_graph", "<builtin>.super"], "experimental.loss_scale.LossScale._checkpoint_dependencies.<lambda1>": [], "experimental.loss_scale.LossScale._lookup_dependency": ["eager.context.executing_eagerly", "<builtin>.super", "framework.ops.get_default_graph"], "experimental.loss_scale.LossScale.get_config": [], "experimental.loss_scale.LossScale.from_config": ["experimental.loss_scale.LossScale.__init__"], "experimental.loss_scale.FixedLossScale.__init__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.float", "<builtin>.ValueError"], "experimental.loss_scale.FixedLossScale.__call__": ["framework.ops.convert_to_tensor"], "experimental.loss_scale.FixedLossScale.update": ["ops.control_flow_ops.no_op"], "experimental.loss_scale.FixedLossScale.__repr__": [], "experimental.loss_scale.FixedLossScale.get_config": [], "experimental.loss_scale._is_all_finite": ["ops.math_ops.is_finite", "ops.math_ops.reduce_all"], "experimental.loss_scale._op_in_graph_mode": ["eager.context.executing_eagerly"], "experimental.loss_scale._assign_if_finite": ["ops.control_flow_ops.cond", "ops.math_ops.is_finite"], "experimental.loss_scale._assign_if_finite.<lambda1>": ["experimental.loss_scale._op_in_graph_mode"], "experimental.loss_scale.DynamicLossScale.__init__": ["<builtin>.super", "<builtin>.int", "<builtin>.float", "experimental.loss_scale.LossScale._add_weight"], "experimental.loss_scale.DynamicLossScale.initial_loss_scale": [], "experimental.loss_scale.DynamicLossScale.increment_period": [], "experimental.loss_scale.DynamicLossScale.multiplier": [], "experimental.loss_scale.DynamicLossScale.__call__": ["framework.ops.convert_to_tensor"], "experimental.loss_scale.DynamicLossScale.update": ["experimental.loss_scale._is_all_finite", "ops.math_ops.equal", "distribute.distribution_strategy_context.get_cross_replica_context", "util.nest.flatten", "distribute.distribution_strategy_context.has_strategy", "ops.control_flow_ops.cond"], "experimental.loss_scale.DynamicLossScale.update.get_is_finite": ["experimental.loss_scale._is_all_finite", "ops.math_ops.cast"], "experimental.loss_scale.DynamicLossScale.update.update_if_finite_grads": ["ops.control_flow_ops.cond"], "experimental.loss_scale.DynamicLossScale.update.update_if_finite_grads.incr_loss_scale": ["experimental.loss_scale._assign_if_finite", "ops.control_flow_ops.group"], "experimental.loss_scale.DynamicLossScale.update.update_if_finite_grads.<lambda1>": ["experimental.loss_scale._op_in_graph_mode"], "experimental.loss_scale.DynamicLossScale.update.update_if_not_finite_grads": ["ops.math_ops.maximum", "ops.control_flow_ops.group"], "experimental.loss_scale.DynamicLossScale.__repr__": ["eager.context.executing_eagerly"], "experimental.loss_scale.DynamicLossScale.get_config": [], "experimental.loss_scale.get": ["<builtin>.isinstance", "experimental.loss_scale.DynamicLossScale.__init__", "experimental.loss_scale.FixedLossScale.__init__", "<builtin>.ValueError"], "experimental.loss_scale_optimizer": [], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer.__init__": ["experimental.loss_scale.get", "optimizer.Optimizer._track_trackable", "<builtin>.super", "<builtin>.ValueError", "<builtin>.type", "<builtin>.isinstance"], "optimizer.Optimizer._track_trackable": [], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._doing_dynamic_loss_scaling": ["<builtin>.isinstance"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer.compute_gradients": ["experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._unscale_grads", "<builtin>.zip", "<builtin>.list", "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._scale_loss"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._scale_loss": ["ops.math_ops.cast", "<builtin>.callable"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._unscale_grads": ["experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._scale_grad"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._scale_loss.new_loss": ["ops.math_ops.cast"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._scale_grad": ["framework.ops.IndexedSlices", "<builtin>.isinstance"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer.apply_gradients": ["distribute.distribution_strategy_context.in_cross_replica_context", "distribute.distribution_strategy_context.get_replica_context", "<builtin>.tuple", "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._doing_dynamic_loss_scaling", "<builtin>.ValueError"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._distributed_apply": ["framework.smart_cond.smart_cond", "ops.control_flow_ops.group", "optimizer.Optimizer.get_name"], "optimizer.Optimizer.get_name": [], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._distributed_apply.apply_fn": ["experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._apply_gradients"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._apply_gradients": [], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._apply_sparse": ["<builtin>.RuntimeError"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._apply_dense": ["<builtin>.RuntimeError"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._resource_apply_sparse": ["<builtin>.RuntimeError"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer._resource_apply_dense": ["<builtin>.RuntimeError"], "experimental.loss_scale_optimizer.MixedPrecisionLossScaleOptimizer.variables": ["<builtin>.list"], "experimental.loss_scaling_gradient_tape": [], "experimental.loss_scaling_gradient_tape._convert_to_per_replicas": [], "experimental.loss_scaling_gradient_tape._convert_to_per_replicas.<lambda1>": ["ops.array_ops.identity"], "experimental.loss_scaling_gradient_tape.LossScaleGradientTape.__init__": ["framework.ops.executing_eagerly_outside_functions", "<builtin>.isinstance", "<builtin>.super", "<builtin>.ValueError"], "experimental.loss_scaling_gradient_tape.LossScaleGradientTape.gradient": ["distribute.distribution_strategy_context.get_replica_context", "distribute.distribution_strategy_context.in_cross_replica_context", "<builtin>.RuntimeError", "<builtin>.ValueError"], "experimental.loss_scaling_gradient_tape.LossScaleGradientTape.jacobian": ["<builtin>.NotImplementedError"], "experimental.loss_scaling_gradient_tape.LossScaleGradientTape.batch_jacobian": ["<builtin>.NotImplementedError"], "experimental.loss_scaling_gradient_tape._compute_gradients_until_finite": ["distribute.distribution_strategy_context.has_strategy", "<builtin>.zip", "util.nest.pack_sequence_as", "experimental.loss_scaling_gradient_tape._convert_to_per_replicas", "util.nest.flatten", "ops.control_flow_ops.while_loop"], "experimental.loss_scaling_gradient_tape._compute_gradients_until_finite.cond": ["ops.math_ops.logical_and", "ops.math_ops.logical_not", "ops.math_ops.greater", "ops.math_ops.logical_or"], "experimental.loss_scaling_gradient_tape._compute_gradients_until_finite.body": [], "experimental.loss_scaling_gradient_tape._compute_gradients_until_finite.body.replica_fn": ["<builtin>.zip", "ops.array_ops.ensure_shape", "<builtin>.super", "util.nest.map_structure", "ops.math_ops.cast"], "experimental.loss_scaling_gradient_tape._compute_gradients_until_finite.body.replica_fn.<lambda1>": ["ops.math_ops.cast"], "experimental.mixed_precision": ["util.tf_export.tf_export", "util.deprecation.deprecated_endpoints"], "experimental.mixed_precision._wrap_optimizer": ["<builtin>.ValueError", "<builtin>.isinstance"], "experimental.mixed_precision.enable_mixed_precision_graph_rewrite_v1": ["<builtin>.ValueError", "platform.tf_logging.warn", "framework.config.set_optimizer_experimental_options", "experimental.mixed_precision_global_state.set_mixed_precision_graph_rewrite_enabled", "experimental.mixed_precision_global_state.non_mixed_precision_session_created", "experimental.mixed_precision_global_state.is_using_mixed_precision_policy", "experimental.mixed_precision._wrap_optimizer"], "experimental.mixed_precision_global_state.is_using_mixed_precision_policy": [], "experimental.mixed_precision_global_state.non_mixed_precision_session_created": [], "experimental.mixed_precision_global_state.set_mixed_precision_graph_rewrite_enabled": [], "experimental.mixed_precision.disable_mixed_precision_graph_rewrite_v1": ["experimental.mixed_precision_global_state.set_mixed_precision_graph_rewrite_enabled", "framework.config.set_optimizer_experimental_options", "experimental.mixed_precision_global_state.is_mixed_precision_graph_rewrite_enabled", "platform.tf_logging.warn"], "experimental.mixed_precision_global_state": ["util.tf_export.tf_export"], "saving.checkpoint_options": [], "saving.checkpoint_options.CheckpointOptions.__init__": [], "saving.functional_saver": [], "saving.functional_saver._SingleDeviceSaver.__init__": ["<builtin>.list", "<builtin>.ValueError", "<builtin>.isinstance"], "saving.functional_saver._SingleDeviceSaver.save": ["ops.io_ops.save_v2", "framework.ops.device", "saving.checkpoint_options.CheckpointOptions"], "saving.functional_saver._SingleDeviceSaver.restore": ["framework.ops.device", "ops.io_ops.restore_v2", "util.nest.pack_sequence_as", "<builtin>.zip", "saving.checkpoint_options.CheckpointOptions"], "saving.functional_saver.sharded_filename": ["ops.gen_io_ops.sharded_filename"], "saving.functional_saver.MultiDeviceSaver.__init__": ["<builtin>.list", "<builtin>.ValueError", "saving.functional_saver._SingleDeviceSaver.__init__", "saving.saveable_object_util.set_cpu0", "<builtin>.isinstance"], "saving.functional_saver.MultiDeviceSaver.to_proto": ["protobuf.saver_pb2.SaverDef", "saving.functional_saver.MultiDeviceSaver._traced_restore", "saving.functional_saver.MultiDeviceSaver._traced_save", "ops.array_ops.placeholder"], "saving.functional_saver.MultiDeviceSaver._traced_save": ["saving.functional_saver.MultiDeviceSaver.save", "ops.array_ops.identity", "framework.ops.control_dependencies", "framework.ops.device"], "saving.functional_saver.MultiDeviceSaver._traced_restore": ["saving.functional_saver.MultiDeviceSaver.restore", "framework.ops.control_dependencies", "framework.ops.device", "ops.array_ops.identity"], "saving.functional_saver.MultiDeviceSaver.save": ["<builtin>.len", "eager.def_function.function", "ops.string_ops.string_join", "ops.array_ops.where", "framework.ops.device", "saving.functional_saver.MultiDeviceSaver.save.tf_function_save", "ops.string_ops.regex_full_match", "saving.functional_saver.MultiDeviceSaver.save.save_fn", "eager.context.executing_eagerly", "framework.constant_op.constant", "saving.checkpoint_options.CheckpointOptions"], "saving.functional_saver.MultiDeviceSaver.restore": ["<builtin>.len", "eager.def_function.function", "saving.functional_saver.MultiDeviceSaver.restore.restore_fn", "eager.context.executing_eagerly", "saving.functional_saver.MultiDeviceSaver.restore.tf_function_restore", "saving.checkpoint_options.CheckpointOptions"], "saving.functional_saver.MultiDeviceSaver.save.save_fn": ["<builtin>.len", "framework.ops.control_dependencies", "framework.ops.device", "saving.functional_saver.sharded_filename", "saving.saveable_object_util.set_cpu0", "<builtin>.enumerate", "ops.gen_io_ops.merge_v2_checkpoints", "framework.constant_op.constant", "<builtin>.sorted"], "saving.functional_saver.MultiDeviceSaver.save.tf_function_save": ["saving.functional_saver.MultiDeviceSaver.save.save_fn"], "saving.functional_saver.MultiDeviceSaver.restore.restore_fn": ["framework.ops.device", "<builtin>.sorted"], "saving.functional_saver.MultiDeviceSaver.restore.tf_function_restore": ["saving.functional_saver.MultiDeviceSaver.restore.restore_fn"], "saving.saveable_hook": [], "saving.saveable_hook.SaveableHook.__init__": ["<builtin>.super", "framework.constant_op.constant"], "saving.saveable_hook.SaveableHook.device": [], "saving.saveable_hook.SaveableHook.before_save": [], "saving.saveable_hook.SaveableHook.after_restore": [], "saving.saveable_object": [], "saving.saveable_object.SaveSpec.__init__": ["<builtin>.AssertionError", "<builtin>.callable"], "saving.saveable_object.SaveSpec.tensor": ["<builtin>.callable"], "saving.saveable_object.SaveableObject.__init__": [], "saving.saveable_object.SaveableObject.optional_restore": [], "saving.saveable_object.SaveableObject.device": [], "saving.saveable_object.SaveableObject.restore": ["<builtin>.ValueError"], "saving.saveable_object_util": ["<builtin>.set"], "saving.saveable_object_util.ReferenceVariableSaveable.__init__": ["saving.saveable_object.SaveSpec", "<builtin>.super"], "saving.saveable_object_util.ReferenceVariableSaveable.restore": ["SaveableObject.op.get_shape", "ops.state_ops.assign", "ops.array_ops.reshape"], "SaveableObject.op.get_shape": [], "saving.saveable_object_util.ResourceVariableSaveable.__init__": ["<builtin>.repr", "ops.resource_variable_ops.is_resource_variable", "<builtin>.isinstance", "saving.saveable_object.SaveSpec", "saving.saveable_object_util.ResourceVariableSaveable.__init__._read_variable_closure", "<builtin>.ValueError", "<builtin>.super"], "saving.saveable_object_util.ResourceVariableSaveable.__init__._read_variable_closure": [], "saving.saveable_object_util.ResourceVariableSaveable.__init__._read_variable_closure.f": ["saveable_object.SaveableObject.read_value", "SaveableObject._graph_element.read_value", "eager.context.executing_eagerly", "saveable_object.SaveableObject.is_initialized", "framework.ops.device", "ops.array_ops.identity", "SaveableObject._graph_element.is_initialized"], "SaveableObject._graph_element.is_initialized": [], "saveable_object.SaveableObject.is_initialized": [], "saveable_object.SaveableObject.read_value": [], "SaveableObject._graph_element.read_value": [], "saving.saveable_object_util.ResourceVariableSaveable.restore": ["ops.array_ops.identity", "ops.resource_variable_ops.shape_safe_assign_variable_handle", "framework.ops.device", "ops.array_ops.reshape"], "saving.saveable_object_util._tensor_comes_from_variable": ["<builtin>.isinstance"], "saveable_object.SaveableObject._gather_saveables_for_checkpoint": [], "SaveableObject._graph_element._gather_saveables_for_checkpoint": [], "saving.saveable_object_util.op_list_to_dict.<lambda1>": [], "saving.saveable_object_util._add_saveable": ["<builtin>.ValueError"], "saving.saveable_object_util.validate_and_slice_inputs.<lambda1>": [], "saving.saveable_object_util.is_factory_for_restored_saveable_object": ["<builtin>.isinstance"], "saving.saveable_object_util._trace_save_and_restore_function": ["framework.tensor_spec.TensorSpec", "<builtin>.isinstance", "platform.tf_logging.warn", "eager.def_function.function", "<builtin>.any", "framework.type_spec.type_spec_from_value"], "saving.saveable_object_util._trace_save_and_restore_function.save_fn": ["<builtin>.isinstance"], "saving.saveable_object_util._trace_save_and_restore_function.restore_fn": ["util.nest.pack_sequence_as", "<builtin>.zip"], "saving.saveable_object_util.RestoredSaveableObject.__init__": ["framework.tensor_util.is_tf_type", "framework.ops.init_scope", "framework.constant_op.constant", "saving.saveable_object.SaveSpec", "<builtin>.super"], "saving.saveable_object_util.RestoredSaveableObject.restore": ["<builtin>.len", "<builtin>.range"], "saving.saveable_object_util.create_saveable_object": ["saving.saveable_object_util.is_factory_for_restored_saveable_object"], "saving.saveable_object_util.create_saveable_object.save_fn": [], "saving.saveable_object_util.create_saveable_object.restore_fn": [], "tracking.base": ["collections.namedtuple", "util.tf_contextlib.contextmanager", "util.tf_export.tf_export"], "tracking.base.CheckpointInitialValueCallable.__init__": [], "tracking.base.CheckpointInitialValueCallable.checkpoint_position": [], "tracking.base.CheckpointInitialValueCallable.__call__": ["tracking.base.CheckpointInitialValue.__init__"], "tracking.base.CheckpointInitialValue.__init__": ["<builtin>.zip"], "tracking.base.CheckpointInitialValueCallable.restore_uid": [], "tracking.base.CheckpointInitialValue.__getattr__": ["<builtin>.getattr", "ops.Tensor.__getattribute__"], "ops.Tensor.__getattribute__": [], "tracking.base.CheckpointInitialValue.checkpoint_position": [], "tracking.base.NoRestoreSaveable.__init__": ["saving.saveable_object.SaveSpec", "<builtin>.super"], "tracking.base.NoRestoreSaveable.restore": ["ops.control_flow_ops.no_op"], "tracking.base.PythonStateSaveable": ["abc.abstractmethod"], "tracking.base.PythonStateSaveable.feed_dict_additions": [], "tracking.base.PythonStateSaveable.freeze": [], "tracking.base.PythonStringStateSaveable.__init__": ["saving.saveable_object.SaveSpec", "framework.constant_op.constant", "<builtin>.super", "framework.ops.device"], "tracking.base.PythonStringStateSaveable.__init__._state_callback_wrapper": ["framework.ops.init_scope"], "tracking.base.PythonStringStateSaveable.optional_restore": [], "tracking.base.PythonStringStateSaveable.feed_dict_additions": ["tracking.base.PythonStringStateSaveable.__init__._state_callback_wrapper"], "tracking.base.PythonStringStateSaveable.freeze": ["tracking.base.NoRestoreSaveable.__init__"], "tracking.base.PythonStringStateSaveable.freeze._constant_state": ["tracking.base.PythonStringStateSaveable.__init__._state_callback_wrapper", "framework.constant_op.constant"], "tracking.base.PythonStringStateSaveable.python_restore": [], "tracking.base.PythonStringStateSaveable.restore": ["ops.control_flow_ops.no_op"], "tracking.base.CheckpointPosition.__init__": [], "tracking.base.CheckpointPosition.restore": ["tracking.base.CheckpointPosition.bind_object", "framework.ops.init_scope"], "tracking.base.CheckpointPosition.bind_object": ["<builtin>.hasattr", "tracking.base.CheckpointPosition.__init__", "platform.tf_logging.warning"], "tracking.base.CheckpointPosition.is_simple_variable": ["<builtin>.len"], "tracking.base.CheckpointPosition.value_tensors": ["ops.array_ops.identity", "ops.gen_io_ops.restore_v2", "framework.ops.init_scope", "framework.ops.device"], "ops.gen_io_ops.restore_v2": [], "tracking.base.CheckpointPosition.gather_ops_or_named_saveables": ["eager.context.executing_eagerly", "<builtin>.callable", "<builtin>.len", "<builtin>.isinstance"], "tracking.base.CheckpointPosition.restore_ops": ["tracking.base.CheckpointPosition.gather_ops_or_named_saveables"], "tracking.base.CheckpointPosition.checkpoint": [], "tracking.base.CheckpointPosition.trackable": [], "tracking.base.CheckpointPosition.object_proto": [], "tracking.base.CheckpointPosition.restore_uid": [], "tracking.base.CheckpointPosition.__repr__": ["<builtin>.repr"], "tracking.base.CheckpointPosition.value_shape": [], "tracking.base.no_automatic_dependency_tracking._method_wrapper": ["<builtin>.getattr", "tracking.base.Trackable._maybe_initialize_trackable"], "tracking.base.Trackable._maybe_initialize_trackable": ["<builtin>.hasattr", "<builtin>.set", "<builtin>.AssertionError"], "tracking.base.no_automatic_dependency_tracking_scope": ["<builtin>.getattr"], "tracking.base.Trackable._setattr_tracking": ["<builtin>.hasattr"], "tracking.base.Trackable._update_uid": [], "tracking.base.Trackable._unconditional_checkpoint_dependencies": [], "tracking.base.Trackable._unconditional_dependency_names": [], "tracking.base.Trackable._name_based_restores": [], "tracking.base.Trackable": ["tracking.base.no_automatic_dependency_tracking"], "tracking.base.Trackable._object_identifier": [], "tracking.base.Trackable._no_dependency": [], "tracking.base.Trackable._name_based_attribute_restore": [], "tracking.base.Trackable._checkpoint_dependencies": [], "tracking.base.Trackable._deferred_dependencies": [], "tracking.base.Trackable._lookup_dependency": [], "tracking.base.Trackable._add_variable_with_custom_getter": ["<builtin>.isinstance", "tracking.base.Trackable._track_trackable", "framework.ops.init_scope", "tracking.base.Trackable._preload_simple_restoration", "eager.context.executing_eagerly", "tracking.base.Trackable._maybe_initialize_trackable"], "tracking.base.Trackable._preload_simple_restoration": ["<builtin>.max", "tracking.base.CheckpointInitialValueCallable.__init__"], "tracking.base.Trackable._track_trackable": ["<builtin>.getattr", "<builtin>.enumerate", "tracking.base.Trackable._lookup_dependency", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.type", "tracking.base.Trackable._handle_deferred_dependencies", "tracking.base.Trackable._maybe_initialize_trackable"], "tracking.base.Trackable._preload_simple_restoration.<lambda1>": [], "tracking.base.Trackable._handle_deferred_dependencies": ["tracking.base.Trackable._maybe_initialize_trackable", "<builtin>.sorted"], "tracking.base.Trackable._handle_deferred_dependencies.<lambda1>": [], "tracking.base.Trackable._handle_deferred_dependencies.<lambda2>": [], "tracking.base.Trackable._restore_from_checkpoint_position": ["collections.deque"], "tracking.base.Trackable._single_restoration_from_checkpoint_position": ["tracking.base.CheckpointPosition.bind_object", "tracking.base.Trackable._maybe_initialize_trackable", "tracking.base.CheckpointPosition.__init__", "tracking.base.Trackable._lookup_dependency"], "tracking.base.Trackable._gather_saveables_for_checkpoint": [], "tracking.base.Trackable._list_extra_dependencies_for_serialization": ["<builtin>.dict"], "tracking.base.Trackable._list_functions_for_serialization": ["<builtin>.dict"], "tracking.base.Trackable._map_resources": [], "tracking.data_structures": ["util.tf_export.tf_export", "saved_model.revived_types.register_revived_type", "<builtin>.globals", "saved_model.revived_types.VersionedTypeRegistration", "util.lazy_loader.LazyLoader"], "tracking.data_structures.NoDependency.__init__": [], "tracking.data_structures._should_wrap_tuple": ["<builtin>.isinstance", "<builtin>.type", "tracking.data_structures._should_wrap_tuple"], "tracking.data_structures._DictWrapper.__init__": ["Trackable.__wrapped__.items", "wrapt.ObjectProxy.__init__", "<builtin>.dict", "tracking.data_structures.TrackableDataStructure.__init__", "<builtin>.isinstance", "tracking.data_structures._DictWrapper._name_element", "tracking.data_structures._DictWrapper._track_value", "Trackable.__wrapped__.update", "wrapt.ObjectProxy.__init__", "tracking.data_structures._DictWrapper._update_snapshot"], "tracking.data_structures.ListWrapper.__init__": ["<builtin>.list", "<builtin>.super"], "tracking.data_structures._TupleWrapper.__init__": ["wrapt.ObjectProxy.__init__", "<builtin>.zip", "tracking.data_structures.wrap_or_unwrap", "<builtin>.dict", "tracking.data_structures.TrackableDataStructure.__init__", "<builtin>.isinstance", "<builtin>.enumerate", "tracking.data_structures._TupleWrapper._track_value", "<builtin>.type", "wrapt.ObjectProxy.__init__"], "tracking.data_structures._UntrackableError.__init__": [], "tracking.data_structures._UntrackableError.__str__": [], "tracking.data_structures.TrackableDataStructure.__init__": ["tracking.layer_utils.AttributeSentinel"], "tracking.layer_utils.AttributeSentinel": [], "tracking.data_structures.TrackableDataStructure._attribute_sentinel": [], "tracking.data_structures.TrackableDataStructure.trainable": [], "tracking.data_structures.TrackableDataStructure._track_value": ["tracking.data_structures.sticky_attribute_assignment", "<builtin>.isinstance", "tracking.data_structures._UntrackableError.__init__", "<builtin>.hasattr", "<builtin>.getattr"], "tracking.data_structures.TrackableDataStructure._values": ["<builtin>.NotImplementedError"], "tracking.data_structures.TrackableDataStructure._layers": ["<builtin>.isinstance", "tracking.layer_utils.is_layer", "tracking.layer_utils.has_weights"], "tracking.layer_utils.is_layer": ["<builtin>.hasattr", "<builtin>.isinstance"], "tracking.layer_utils.has_weights": ["<builtin>.type", "<builtin>.hasattr", "<builtin>.isinstance"], "tracking.data_structures.TrackableDataStructure.layers": ["<builtin>.list", "tracking.layer_utils.filter_empty_layer_containers"], "tracking.layer_utils.filter_empty_layer_containers": ["util.object_identity.ObjectIdentitySet", "<builtin>.getattr", "tracking.layer_utils.is_layer"], "tracking.data_structures.TrackableDataStructure.trainable_weights": ["<builtin>.isinstance"], "tracking.data_structures.TrackableDataStructure.non_trainable_weights": ["<builtin>.isinstance"], "tracking.data_structures.TrackableDataStructure.weights": [], "tracking.data_structures.TrackableDataStructure.trainable_variables": [], "tracking.data_structures.TrackableDataStructure.non_trainable_variables": [], "tracking.data_structures.TrackableDataStructure.variables": [], "tracking.data_structures.TrackableDataStructure.updates": ["<builtin>.hasattr"], "tracking.data_structures.TrackableDataStructure.losses": ["<builtin>.hasattr"], "tracking.data_structures.TrackableDataStructure.__hash__": ["<builtin>.id"], "tracking.data_structures.TrackableDataStructure.__eq__": [], "tracking.data_structures.List.__init__": ["tracking.data_structures.List._make_storage", "tracking.data_structures.TrackableDataStructure._track_value", "tracking.data_structures.List._name_element", "<builtin>.enumerate", "tracking.data_structures.ListWrapper._track_value", "tracking.data_structures._DictWrapper._track_value", "tracking.data_structures._TupleWrapper._track_value", "<builtin>.super", "tracking.data_structures.ListWrapper._make_storage"], "tracking.data_structures.List._make_storage": ["<builtin>.list"], "tracking.data_structures.ListWrapper._make_storage": [], "tracking.data_structures.List._name_element": [], "tracking.data_structures._TupleWrapper._track_value": ["tracking.data_structures.sticky_attribute_assignment", "<builtin>.super"], "tracking.data_structures.ListWrapper._track_value": ["tracking.data_structures.sticky_attribute_assignment", "<builtin>.super"], "tracking.data_structures._DictWrapper._track_value": ["tracking.data_structures.sticky_attribute_assignment", "<builtin>.isinstance", "<builtin>.super"], "tracking.data_structures.List.copy": ["<builtin>.type"], "tracking.data_structures.List.__copy__": ["tracking.data_structures.List.copy"], "tracking.data_structures.List.__deepcopy__": ["<builtin>.type"], "tracking.data_structures.List._values": [], "tracking.data_structures.List.append": ["tracking.data_structures.TrackableDataStructure._track_value", "tracking.data_structures.List._name_element", "tracking.data_structures.ListWrapper._track_value", "tracking.data_structures._DictWrapper._track_value", "tracking.data_structures._TupleWrapper._track_value", "<builtin>.len"], "tracking.data_structures.List.extend": ["tracking.data_structures.List.append", "tracking.data_structures.ListWrapper.append"], "tracking.data_structures.ListWrapper.append": ["tracking.data_structures.ListWrapper._check_external_modification", "<builtin>.super", "tracking.data_structures.ListWrapper._update_snapshot"], "tracking.data_structures.List.__iadd__": ["tracking.data_structures.ListWrapper.extend", "tracking.data_structures.List.extend"], "tracking.data_structures.ListWrapper.extend": ["tracking.data_structures.ListWrapper._check_external_modification", "<builtin>.super", "tracking.data_structures.ListWrapper._update_snapshot"], "tracking.data_structures.List.__add__": ["<builtin>.getattr"], "tracking.data_structures.List.__imul__": ["<builtin>.range", "tracking.data_structures.ListWrapper.append", "<builtin>.ValueError", "tracking.data_structures.List.append", "<builtin>.len"], "tracking.data_structures.List.__mul__": [], "tracking.data_structures.List.__rmul__": [], "tracking.data_structures.List.__radd__": [], "tracking.data_structures.List.__getitem__": [], "tracking.data_structures.List.__getslice__": ["<builtin>.slice"], "tracking.data_structures.List.__len__": ["<builtin>.len"], "tracking.data_structures.List.__repr__": ["<builtin>.repr"], "tracking.data_structures.List.__sizeof__": ["<builtin>.super", "sys.getsizeof"], "sys.getsizeof": [], "tracking.data_structures.ListWrapper._non_append_mutation": [], "tracking.data_structures.ListWrapper._external_modification": [], "tracking.data_structures.ListWrapper.__copy__": ["<builtin>.super"], "tracking.data_structures.ListWrapper.__deepcopy__": ["<builtin>.super"], "tracking.data_structures.ListWrapper.__reduce_ex__": [], "tracking.data_structures.ListWrapper._check_external_modification": [], "tracking.data_structures.ListWrapper._update_snapshot": ["<builtin>.list"], "tracking.data_structures.ListWrapper._checkpoint_dependencies": ["tracking.data_structures.ListWrapper._check_external_modification", "<builtin>.ValueError", "<builtin>.super"], "tracking.data_structures.ListWrapper._has_mutation_or_trackable": ["<builtin>.any", "<builtin>.isinstance"], "tracking.data_structures.ListWrapper.__delitem__": ["tracking.data_structures.ListWrapper._check_external_modification", "tracking.data_structures.ListWrapper._update_snapshot", "tracking.data_structures.ListWrapper._has_mutation_or_trackable"], "tracking.data_structures.ListWrapper.__setitem__": ["<builtin>.len", "tracking.data_structures.List._name_element", "<builtin>.range", "<builtin>.list", "tracking.data_structures.ListWrapper._check_external_modification", "<builtin>.isinstance", "tracking.data_structures.ListWrapper._track_value", "tracking.data_structures.ListWrapper._update_snapshot", "<builtin>.max"], "tracking.data_structures.ListWrapper.__imul__": ["tracking.data_structures.ListWrapper._check_external_modification", "<builtin>.super", "tracking.data_structures.ListWrapper._update_snapshot", "tracking.data_structures.ListWrapper._has_mutation_or_trackable"], "tracking.data_structures.ListWrapper.__eq__": ["<builtin>.getattr"], "tracking.data_structures.ListWrapper.__ne__": ["<builtin>.getattr"], "tracking.data_structures.ListWrapper.__lt__": ["<builtin>.getattr"], "tracking.data_structures.ListWrapper.__le__": ["<builtin>.getattr"], "tracking.data_structures.ListWrapper.__gt__": ["<builtin>.getattr"], "tracking.data_structures.ListWrapper.__ge__": ["<builtin>.getattr"], "tracking.data_structures.ListWrapper.__hash__": ["<builtin>.TypeError"], "tracking.data_structures.ListWrapper.insert": ["tracking.data_structures.ListWrapper._check_external_modification", "<builtin>.isinstance", "tracking.data_structures.ListWrapper._update_snapshot", "tracking.data_structures.ListWrapper._has_mutation_or_trackable"], "tracking.data_structures.ListWrapper.sort": ["tracking.data_structures.ListWrapper._check_external_modification", "tracking.data_structures.ListWrapper._update_snapshot", "tracking.data_structures.ListWrapper._has_mutation_or_trackable"], "tracking.data_structures.ListWrapper.__setslice__": ["<builtin>.slice", "tracking.data_structures.ListWrapper.__setitem__"], "tracking.data_structures.ListWrapper.__delslice__": ["<builtin>.slice", "tracking.data_structures.ListWrapper._check_external_modification", "tracking.data_structures.ListWrapper._update_snapshot", "tracking.data_structures.ListWrapper._has_mutation_or_trackable"], "tracking.data_structures.ListWrapper.__repr__": ["<builtin>.repr"], "tracking.data_structures.ListWrapper._list_functions_for_serialization": ["tracking.data_structures._is_function", "<builtin>.enumerate", "<builtin>.str"], "tracking.data_structures._is_function": ["<builtin>.isinstance"], "tracking.data_structures.Mapping.__init__": ["tracking.data_structures.TrackableDataStructure._track_value", "tracking.data_structures.Mapping._make_storage", "tracking.data_structures.ListWrapper._track_value", "tracking.data_structures.Mapping._name_element", "tracking.data_structures._DictWrapper._track_value", "tracking.data_structures._TupleWrapper._track_value", "<builtin>.super"], "tracking.data_structures.Mapping._make_storage": ["<builtin>.dict"], "tracking.data_structures.Mapping._name_element": ["<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.repr", "<builtin>.str"], "tracking.data_structures.Mapping.__copy__": ["collections_abc.Sequence.value", "tracking.data_structures._TupleWrapper.__init__", "copy.copy", "collections_abc.MutableSequence.value", "tracking.data_structures._DictWrapper.__init__", "tracking.data_structures.ListWrapper.__init__", "<builtin>.type", "base.Trackable.value"], "collections_abc.Sequence.value": [], "collections_abc.MutableSequence.value": [], "base.Trackable.value": [], "tracking.data_structures.Mapping.__deepcopy__": ["copy.deepcopy", "<builtin>.type"], "tracking.data_structures.Mapping._values": ["<builtin>.list", "base.Trackable.items", "<builtin>.zip", "<builtin>.sorted"], "base.Trackable.items": [], "tracking.data_structures.Mapping._values.<lambda1>": [], "tracking.data_structures.Mapping.__setitem__": ["tracking.data_structures.TrackableDataStructure._track_value", "tracking.data_structures.ListWrapper._track_value", "tracking.data_structures.Mapping._name_element", "tracking.data_structures._DictWrapper._track_value", "tracking.data_structures._TupleWrapper._track_value", "<builtin>.ValueError"], "tracking.data_structures.Mapping.update": ["<builtin>.dict"], "tracking.data_structures.Mapping.__getitem__": [], "tracking.data_structures.Mapping.__len__": ["<builtin>.len"], "tracking.data_structures.Mapping.__repr__": ["<builtin>.repr"], "tracking.data_structures.Mapping.__iter__": ["<builtin>.iter"], "wrapt.ObjectProxy.__init__": [], "tracking.data_structures._DictWrapper._name_element": [], "Trackable.__wrapped__.items": [], "Trackable.__wrapped__.update": [], "tracking.data_structures._DictWrapper._update_snapshot": ["<builtin>.dict"], "tracking.data_structures._DictWrapper.__reduce_ex__": [], "tracking.data_structures._DictWrapper.__getattribute__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.type", "<builtin>.hasattr", "<builtin>.getattr"], "tracking.data_structures._DictWrapper.copy": [], "tracking.data_structures._DictWrapper.__copy__": ["tracking.data_structures._DictWrapper.__init__"], "tracking.data_structures._DictWrapper.__deepcopy__": ["tracking.data_structures._DictWrapper.__init__"], "tracking.data_structures._DictWrapper._values": ["<builtin>.list", "base.Trackable.items", "<builtin>.zip", "<builtin>.sorted"], "tracking.data_structures._DictWrapper._values.<lambda1>": [], "tracking.data_structures._DictWrapper._checkpoint_dependencies": ["tracking.data_structures._DictWrapper._check_self_external_modification", "<builtin>.ValueError", "<builtin>.super"], "tracking.data_structures._DictWrapper._check_self_external_modification": [], "tracking.data_structures._DictWrapper._dirty": [], "tracking.data_structures._DictWrapper.__setitem__": ["tracking.data_structures.wrap_or_unwrap", "<builtin>.isinstance", "tracking.data_structures._DictWrapper._track_value", "tracking.data_structures._DictWrapper._check_self_external_modification", "base.Trackable._maybe_initialize_trackable", "tracking.data_structures._DictWrapper._update_snapshot"], "tracking.data_structures._DictWrapper.__delitem__": ["tracking.data_structures._DictWrapper._check_self_external_modification", "tracking.data_structures._DictWrapper._update_snapshot"], "tracking.data_structures._DictWrapper.__repr__": ["<builtin>.repr"], "tracking.data_structures._DictWrapper.__hash__": ["<builtin>.TypeError"], "tracking.data_structures._DictWrapper.__eq__": [], "tracking.data_structures._DictWrapper.update": ["<builtin>.dict", "six.iteritems"], "tracking.data_structures._DictWrapper._list_functions_for_serialization": ["base.Trackable.items", "tracking.data_structures._is_function"], "tracking.data_structures._TupleWrapper._values": [], "tracking.data_structures._TupleWrapper.__repr__": ["<builtin>.repr"], "tracking.data_structures._TupleWrapper.__hash__": ["<builtin>.hash"], "tracking.data_structures._TupleWrapper.__eq__": [], "tracking.data_structures._TupleWrapper.__copy__": ["copy.copy", "tracking.data_structures._TupleWrapper.__init__"], "tracking.data_structures._TupleWrapper.__deepcopy__": ["copy.deepcopy", "tracking.data_structures._TupleWrapper.__init__"], "tracking.data_structures._TupleWrapper.__reduce_ex__": [], "tracking.data_structures._TupleWrapper.__imul__": [], "tracking.data_structures._TupleWrapper.__iadd__": [], "tracking.data_structures._TupleWrapper._checkpoint_dependencies": ["<builtin>.ValueError", "<builtin>.super"], "tracking.data_structures._TupleWrapper.__getattribute__": ["<builtin>.isinstance", "<builtin>.super", "<builtin>.type", "<builtin>.hasattr", "<builtin>.getattr"], "tracking.data_structures.<lambda1>": ["tracking.data_structures._DictWrapper.__init__", "<builtin>.isinstance"], "tracking.data_structures.<list3>.<lambda1>": [], "tracking.data_structures._set_list_item": ["<builtin>.int", "<builtin>.len"], "tracking.data_structures.<lambda2>": ["<builtin>.isinstance"], "tracking.data_structures._set_tuple_item": ["<builtin>.int", "<builtin>.len"], "tracking.data_structures.<lambda3>": ["<builtin>.isinstance"], "tracking.graph_view": [], "tracking.graph_view._escape_local_name": [], "tracking.graph_view._object_prefix_from_path": ["tracking.graph_view._escape_local_name"], "tracking.graph_view._slot_variable_naming_for_optimizer": [], "tracking.graph_view._slot_variable_naming_for_optimizer._name_slot_variable": ["tracking.graph_view._escape_local_name"], "tracking.graph_view._serialize_slot_variables": ["<builtin>.isinstance", "<builtin>.dir", "TrackableObjectGraph.TrackableObject.SlotVariableReference", "<builtin>.NotImplementedError", "util.object_identity.ObjectIdentityDictionary", "<builtin>.list", "<builtin>.enumerate", "tracking.graph_view._slot_variable_naming_for_optimizer", "<builtin>.len", "tracking.graph_view._slot_variable_naming_for_optimizer._name_slot_variable"], "TrackableObjectGraph.TrackableObject.SlotVariableReference": [], "tracking.graph_view.ObjectGraphView.__init__": [], "tracking.graph_view.ObjectGraphView.list_dependencies": [], "tracking.graph_view.ObjectGraphView.saveables_cache": [], "tracking.graph_view.ObjectGraphView.attached_dependencies": [], "tracking.graph_view.ObjectGraphView.root": ["<builtin>.isinstance"], "tracking.graph_view.ObjectGraphView._breadth_first_traversal": ["collections.deque", "util.object_identity.ObjectIdentityDictionary", "tracking.graph_view.ObjectGraphView.list_dependencies", "tracking.base.TrackableReference"], "tracking.graph_view.ObjectGraphView._add_attributes_to_object_graph": ["saving.saveable_object_util.create_saveable_object", "saving.saveable_object_util.op_list_to_dict", "saving.saveable_object_util.saveable_objects_for_op", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.AssertionError", "tracking.graph_view._escape_local_name", "<builtin>.zip", "<builtin>.enumerate", "<builtin>.callable", "<builtin>.hasattr"], "tracking.graph_view.ObjectGraphView._fill_object_graph_proto": ["<builtin>.enumerate", "tracking.graph_view.ObjectGraphView.list_dependencies", "protobuf.trackable_object_graph_pb2.TrackableObjectGraph"], "tracking.graph_view.ObjectGraphView._serialize_gathered_objects": ["tracking.graph_view.ObjectGraphView._fill_object_graph_proto", "util.object_identity.ObjectIdentityDictionary", "<builtin>.enumerate", "tracking.graph_view.ObjectGraphView._add_attributes_to_object_graph", "tracking.graph_view._object_prefix_from_path", "tracking.graph_view._serialize_slot_variables"], "tracking.graph_view.ObjectGraphView.serialize_object_graph": ["tracking.graph_view.ObjectGraphView._breadth_first_traversal", "tracking.graph_view.ObjectGraphView._serialize_gathered_objects"], "tracking.graph_view.ObjectGraphView.frozen_saveable_objects": ["framework.constant_op.constant", "tracking.base.NoRestoreSaveable", "framework.ops.device", "framework.ops.NullContextmanager", "tracking.graph_view.ObjectGraphView._breadth_first_traversal", "tracking.graph_view.ObjectGraphView._serialize_gathered_objects"], "tracking.base.NoRestoreSaveable": [], "tracking.graph_view.ObjectGraphView.objects_ids_and_slot_variables_and_paths": ["util.object_identity.ObjectIdentityDictionary", "<builtin>.enumerate", "tracking.graph_view.ObjectGraphView._breadth_first_traversal", "tracking.graph_view._object_prefix_from_path", "tracking.graph_view._serialize_slot_variables"], "tracking.graph_view.ObjectGraphView.objects_ids_and_slot_variables": ["tracking.graph_view.ObjectGraphView.objects_ids_and_slot_variables_and_paths"], "tracking.graph_view.ObjectGraphView.list_objects": ["tracking.graph_view.ObjectGraphView.objects_ids_and_slot_variables"], "tracking.layer_utils": [], "tracking.layer_utils.invalidate_recursive_cache": [], "tracking.layer_utils.invalidate_recursive_cache.outer": ["functools.wraps"], "tracking.layer_utils.invalidate_recursive_cache.outer.wrapped": ["<builtin>.getattr"], "tracking.layer_utils.MutationSentinel.mark_as": [], "tracking.layer_utils.MutationSentinel.in_cached_state": [], "tracking.layer_utils.AttributeSentinel.__init__": ["weakref.WeakSet", "collections.defaultdict"], "tracking.layer_utils.AttributeSentinel.__repr__": ["<builtin>.super"], "tracking.layer_utils.AttributeSentinel.add_parent": [], "tracking.layer_utils.AttributeSentinel.get": [], "tracking.layer_utils.AttributeSentinel._set": [], "tracking.layer_utils.AttributeSentinel.mark_cached": ["tracking.layer_utils.AttributeSentinel._set"], "tracking.layer_utils.AttributeSentinel.invalidate": ["tracking.layer_utils.AttributeSentinel._set"], "tracking.layer_utils.AttributeSentinel.invalidate_all": [], "tracking.python_state": [], "tracking.python_state.PythonState": ["abc.abstractmethod"], "tracking.python_state.PythonState.serialize": [], "tracking.python_state.PythonState.deserialize": [], "tracking.python_state.PythonState._gather_saveables_for_checkpoint": ["functools.partial"], "tracking.tracking": ["framework.ops.register_tensor_conversion_function", "util.tf_contextlib.contextmanager"], "tracking.tracking.AutoTrackable.__setattr__": ["<builtin>.getattr", "<builtin>.super", "tracking.data_structures.sticky_attribute_assignment"], "tracking.tracking.AutoTrackable.__delattr__": ["tracking.tracking.AutoTrackable._delete_tracking", "<builtin>.super"], "tracking.tracking.AutoTrackable._delete_tracking": ["base.Trackable._maybe_initialize_trackable", "<builtin>.enumerate"], "tracking.tracking.AutoTrackable._no_dependency": ["tracking.data_structures.NoDependency"], "tracking.data_structures.NoDependency": [], "tracking.tracking.AutoTrackable._list_functions_for_serialization": ["warnings.catch_warnings", "<builtin>.getattr", "absl.logging.get_verbosity", "warnings.simplefilter", "<builtin>.dir", "<builtin>.isinstance", "absl.logging.set_verbosity"], "absl.logging.get_verbosity": [], "absl.logging.set_verbosity": [], "warnings.catch_warnings": [], "warnings.simplefilter": [], "tracking.tracking.ResourceTracker.__init__": [], "tracking.tracking.ResourceTracker.resources": [], "tracking.tracking.ResourceTracker.add_resource": [], "tracking.tracking.resource_tracker_scope": ["<builtin>.list"], "tracking.tracking._make_getter": [], "tracking.tracking._make_getter.getter": [], "tracking.tracking.ResourceMetaclass.__call__": ["framework.ops.get_default_graph", "tracking.tracking._make_getter", "tracking.tracking._make_getter.getter", "tracking.tracking.ResourceMetaclass.__call__.<lambda1>"], "tracking.tracking.ResourceMetaclass.__call__.default_resource_creator": [], "tracking.tracking.ResourceMetaclass.__call__.<lambda1>": ["tracking.tracking.ResourceMetaclass.__call__.default_resource_creator"], "tracking.tracking.CapturableResource.__init__": ["framework.ops.get_default_graph", "eager.context.executing_eagerly"], "tracking.tracking.CapturableResource._resource_type": [], "tracking.tracking.CapturableResource._destruction_context": ["<builtin>.getattr"], "tracking.tracking.CapturableResource._create_resource": ["<builtin>.NotImplementedError"], "tracking.tracking.CapturableResource._initialize": [], "tracking.tracking.CapturableResource._destroy_resource": [], "tracking.tracking.CapturableResource.resource_handle": ["framework.ops.device", "tracking.tracking.CapturableResource._create_resource"], "tracking.tracking.CapturableResource._map_resources": ["framework.ops.device", "copy.copy"], "tracking.tracking.CapturableResource._list_functions_for_serialization": ["eager.def_function.function"], "tracking.tracking.CapturableResource._list_functions_for_serialization._creator": ["tracking.tracking.CapturableResource._create_resource"], "tracking.tracking.CapturableResource._list_functions_for_serialization._initializer": ["tracking.tracking.CapturableResource._initialize"], "tracking.tracking.CapturableResource._list_functions_for_serialization._destroyer": ["tracking.tracking.CapturableResource._destroy_resource"], "tracking.tracking.CapturableResource.__del__": ["tracking.tracking.CapturableResource._destroy_resource", "tracking.tracking.CapturableResource._destruction_context"], "tracking.tracking.TrackableResource.__init__": ["<builtin>.super"], "tracking.tracking.Asset.__init__": ["framework.ops.device", "framework.ops.init_scope", "framework.ops.convert_to_tensor"], "tracking.tracking.Asset.asset_path": [], "tracking.tracking.<lambda1>": ["framework.ops.convert_to_tensor"], "tracking.util": ["threading.Lock", "util.tf_export.tf_export", "util.tf_contextlib.contextmanager"], "tracking.util._get_duration_microseconds": ["<builtin>.round"], "tracking.util.get_session": ["framework.ops.get_default_session"], "tracking.util._ObjectGraphProtoPrettyPrinter.__init__": [], "tracking.util._ObjectGraphProtoPrettyPrinter.node_names": ["collections.deque", "<builtin>.enumerate"], "tracking.util._CheckpointRestoreCoordinatorDeleter.__init__": [], "tracking.util._CheckpointRestoreCoordinatorDeleter.set_expect_partial": [], "tracking.util._CheckpointRestoreCoordinatorDeleter.__del__": ["platform.tf_logging.warning", "tracking.util._ObjectGraphProtoPrettyPrinter.__init__", "<builtin>.range", "<builtin>.len"], "tracking.util._CheckpointRestoreCoordinator.__init__": ["tracking.util._CheckpointRestoreCoordinatorDeleter.__init__", "training.py_checkpoint_reader.NewCheckpointReader", "tracking.base._SlotVariableRestoration", "framework.ops.uid", "<builtin>.set", "<builtin>.enumerate", "util.object_identity.ObjectIdentityWeakSet", "weakref.WeakValueDictionary"], "tracking.base._SlotVariableRestoration": [], "tracking.util._CheckpointRestoreCoordinator.expect_partial": ["tracking.util._CheckpointRestoreCoordinatorDeleter.set_expect_partial"], "tracking.util._CheckpointRestoreCoordinator.new_restore_ops": [], "tracking.util._CheckpointRestoreCoordinator.restore_saveables": ["saving.saveable_object_util.validate_and_slice_inputs", "training.py_checkpoint_reader.NewCheckpointReader", "<builtin>.AssertionError", "saving.functional_saver.MultiDeviceSaver", "<builtin>.set", "eager.context.executing_eagerly", "<builtin>.sorted"], "tracking.util._NameBasedRestoreCoordinator.__init__": ["framework.ops.uid", "util.object_identity.ObjectIdentityWeakKeyDictionary"], "tracking.util._NameBasedRestoreCoordinator.globally_named_object_attributes": ["saving.saveable_object_util.op_list_to_dict", "<builtin>.callable", "saving.saveable_object_util.saveable_objects_for_op"], "tracking.util._NameBasedRestoreCoordinator.eager_restore": ["framework.ops.device", "tracking.util._NameBasedRestoreCoordinator.globally_named_object_attributes", "ops.gen_io_ops.restore_v2", "eager.context.executing_eagerly", "ops.array_ops.identity"], "tracking.util._default_getter": ["<builtin>.callable", "util.tf_inspect.getargspec", "functools.partial", "framework.dtypes.as_dtype", "ops.variables.VariableV1", "<builtin>.type", "<builtin>.isinstance", "ops.variable_scope._get_default_variable_store", "framework.tensor_shape.as_shape", "<builtin>.ValueError", "framework.ops.init_scope"], "tracking.util.add_variable": ["tracking.AutoTrackable._add_variable_with_custom_getter"], "tracking.util.object_metadata": ["<builtin>.ValueError", "protobuf.trackable_object_graph_pb2.TrackableObjectGraph", "training.py_checkpoint_reader.NewCheckpointReader"], "tracking.util.list_objects": ["tracking.graph_view.ObjectGraphView"], "tracking.util.gather_initializers": ["<builtin>.hasattr", "tracking.util.list_objects"], "tracking.util.capture_dependencies._trackable_custom_creator": ["<builtin>.len"], "tracking.util.capture_dependencies._trackable_custom_creator._call_next_creator_renaming_initializer": [], "tracking.util._LoadStatus": ["abc.abstractmethod"], "tracking.util._LoadStatus.assert_consumed": [], "tracking.util._LoadStatus.assert_existing_objects_matched": [], "tracking.util._LoadStatus.assert_nontrivial_match": [], "tracking.util._LoadStatus.run_restore_ops": [], "tracking.util._LoadStatus.initialize_or_restore": [], "tracking.util._LoadStatus.expect_partial": [], "tracking.util.streaming_restore.<lambda1>": [], "tracking.util._objects_with_attributes": [], "tracking.util.CheckpointLoadStatus.__init__": [], "tracking.util.CheckpointLoadStatus.assert_consumed": ["tracking.util.CheckpointLoadStatus.assert_existing_objects_matched", "<builtin>.AssertionError", "tracking.util._ObjectGraphProtoPrettyPrinter.__init__", "six.iteritems", "<builtin>.enumerate"], "tracking.util.CheckpointLoadStatus.assert_existing_objects_matched": ["util.object_identity.ObjectIdentitySet", "<builtin>.AssertionError", "<builtin>.isinstance", "tracking.util._objects_with_attributes", "<builtin>.enumerate", "<builtin>.list"], "tracking.util.CheckpointLoadStatus.assert_nontrivial_match": ["util.object_identity.ObjectIdentitySet", "<builtin>.AssertionError", "tracking.util._objects_with_attributes", "<builtin>.list", "<builtin>.len"], "tracking.util.CheckpointLoadStatus.run_restore_ops": ["eager.context.executing_eagerly", "tracking.util.get_session"], "tracking.util.CheckpointLoadStatus.initialize_or_restore": ["<builtin>.hasattr", "util.object_identity.ObjectIdentitySet", "tracking.util.get_session", "<builtin>.getattr", "eager.context.executing_eagerly", "tracking.util.CheckpointLoadStatus.run_restore_ops"], "tracking.util.CheckpointLoadStatus.expect_partial": [], "tracking.util.InitializationOnlyStatus.__init__": [], "tracking.util.InitializationOnlyStatus.assert_consumed": ["<builtin>.AssertionError"], "tracking.util.InitializationOnlyStatus.assert_existing_objects_matched": ["<builtin>.AssertionError"], "tracking.util.InitializationOnlyStatus.assert_nontrivial_match": ["<builtin>.AssertionError"], "tracking.util.InitializationOnlyStatus.run_restore_ops": ["<builtin>.AssertionError"], "tracking.util.InitializationOnlyStatus.initialize_or_restore": ["eager.context.executing_eagerly", "tracking.util.get_session", "<builtin>.hasattr", "<builtin>.getattr"], "tracking.util.NameBasedSaverStatus": ["util.deprecation.deprecated"], "tracking.util.NameBasedSaverStatus.__init__": [], "tracking.util.NameBasedSaverStatus.add_to_optionally_restored": [], "tracking.util.NameBasedSaverStatus.assert_consumed": ["<builtin>.list", "<builtin>.AssertionError", "<builtin>.all"], "tracking.util.NameBasedSaverStatus.assert_existing_objects_matched": ["tracking.util.NameBasedSaverStatus.assert_consumed"], "tracking.util.NameBasedSaverStatus.assert_nontrivial_match": ["tracking.util.NameBasedSaverStatus.assert_consumed"], "tracking.util.NameBasedSaverStatus._gather_saveable_objects": ["tracking.util._NameBasedRestoreCoordinator.globally_named_object_attributes"], "tracking.util.NameBasedSaverStatus.run_restore_ops": ["framework.ops.device", "tracking.util.get_session", "training.saver.Saver", "eager.context.executing_eagerly", "tracking.util.NameBasedSaverStatus._gather_saveable_objects"], "tracking.util.NameBasedSaverStatus.initialize_or_restore": ["tracking.util.NameBasedSaverStatus.run_restore_ops"], "tracking.util._SessionWithFeedDictAdditions.__init__": [], "tracking.util._SessionWithFeedDictAdditions.run": [], "tracking.util.TrackableSaver.__init__": [], "tracking.util.TrackableSaver._gather_saveables": ["framework.constant_op.constant", "framework.ops.device", "tracking.base.NoRestoreSaveable"], "tracking.util.TrackableSaver._save_cached_when_graph_building": ["tracking.util.TrackableSaver._gather_saveables", "framework.ops.device", "saving.functional_saver.MultiDeviceSaver", "framework.ops.inside_function", "eager.context.executing_eagerly", "framework.ops.control_dependencies", "ops.array_ops.identity"], "tracking.util.TrackableSaver.save": ["framework.constant_op.constant", "framework.ops.device", "saving.checkpoint_options.CheckpointOptions", "tracking.util.TrackableSaver._save_cached_when_graph_building", "tracking.util.get_session", "io.file_io.recursive_create_dir", "framework.ops.inside_function", "eager.context.executing_eagerly", "os.path.dirname"], "tracking.util.TrackableSaver.restore": ["framework.constant_op.constant", "framework.ops.device", "saving.checkpoint_options.CheckpointOptions", "training.py_checkpoint_reader.NewCheckpointReader", "tracking.util.NameBasedSaverStatus.__init__", "tracking.base.CheckpointPosition", "tracking.util.InitializationOnlyStatus.__init__", "tracking.util._CheckpointRestoreCoordinator.__init__", "tracking.util._NameBasedRestoreCoordinator.__init__", "framework.ops.uid", "protobuf.trackable_object_graph_pb2.TrackableObjectGraph", "eager.context.executing_eagerly", "tracking.util.CheckpointLoadStatus.__init__"], "tracking.util.frozen_saver": ["tracking.graph_view.ObjectGraphView", "saving.functional_saver.MultiDeviceSaver"], "tracking.util.saver_with_op_caching": ["tracking.util.TrackableSaver.__init__", "tracking.graph_view.ObjectGraphView", "util.object_identity.ObjectIdentityWeakKeyDictionary", "eager.context.executing_eagerly", "weakref.ref"], "tracking.util._assert_trackable": ["<builtin>.isinstance", "<builtin>.ValueError"], "tracking.util.CheckpointV1.__init__": ["<builtin>.super", "<builtin>.getattr", "<builtin>.isinstance", "<builtin>.ValueError", "time.time", "<builtin>.setattr", "tracking.util.saver_with_op_caching", "<builtin>.sorted"], "tracking.util.CheckpointV1.__init__.<lambda1>": [], "tracking.util.CheckpointV1._maybe_create_save_counter": ["tracking.data_structures.NoDependency", "framework.ops.device", "tracking.util.add_variable"], "tracking.util.CheckpointV1.write": ["pywrap_saved_model.metrics.AddCheckpointWriteDuration", "util.compat.as_str", "pywrap_saved_model.metrics.AddTrainingTimeSaved", "framework.tensor_util.is_tf_type", "eager.context.executing_eagerly", "tracking.util.TrackableSaver.save", "time.time", "tracking.util._get_duration_microseconds"], "tracking.util.CheckpointV1.save_counter": ["tracking.util.CheckpointV1._maybe_create_save_counter"], "tracking.util.CheckpointV1.save": ["tracking.util.get_session", "<builtin>.NotImplementedError", "training.checkpoint_management.update_checkpoint_state_internal", "framework.ops.inside_function", "framework.ops.colocate_with", "eager.context.executing_eagerly", "os.path.dirname", "tracking.data_structures.NoDependency", "tracking.util.CheckpointV1.write"], "tracking.util.CheckpointV1.restore": ["tracking.util.CheckpointV1._maybe_create_save_counter", "pywrap_saved_model.metrics.AddCheckpointReadDuration", "<builtin>.isinstance", "tracking.util.NameBasedSaverStatus.add_to_optionally_restored", "time.time", "tracking.util.TrackableSaver.restore", "tracking.util._get_duration_microseconds"], "tracking.util.Checkpoint.__init__": ["<builtin>.super", "<builtin>.getattr", "tracking.util._assert_trackable", "<builtin>.ValueError", "tracking.base.TrackableReference", "time.time", "<builtin>.setattr", "tracking.util.saver_with_op_caching", "tracking.data_structures.NoDependency", "<builtin>.sorted"], "tracking.util.Checkpoint.__init__.<lambda1>": [], "tracking.util.Checkpoint._maybe_create_save_counter": ["root._deferred_dependencies.pop", "framework.ops.device", "tracking.util.add_variable", "tracking.base.TrackableReference", "tracking.data_structures.NoDependency"], "root._deferred_dependencies.pop": [], "tracking.util.Checkpoint.write": ["pywrap_saved_model.metrics.AddCheckpointWriteDuration", "saving.checkpoint_options.CheckpointOptions", "util.compat.as_str", "pywrap_saved_model.metrics.AddTrainingTimeSaved", "framework.tensor_util.is_tf_type", "eager.context.executing_eagerly", "tracking.util.TrackableSaver.save", "time.time", "tracking.util._get_duration_microseconds"], "tracking.util.Checkpoint.save_counter": ["tracking.util.Checkpoint._maybe_create_save_counter"], "tracking.util.Checkpoint.save": ["saving.checkpoint_options.CheckpointOptions", "tracking.util.get_session", "<builtin>.NotImplementedError", "training.checkpoint_management.update_checkpoint_state_internal", "tracking.util.Checkpoint.write", "framework.ops.inside_function", "framework.ops.colocate_with", "eager.context.executing_eagerly", "os.path.dirname", "eager.context.async_wait", "tracking.data_structures.NoDependency"], "tracking.util.Checkpoint.read": ["saving.checkpoint_options.CheckpointOptions", "pywrap_saved_model.metrics.AddCheckpointReadDuration", "time.time", "tracking.util.TrackableSaver.restore", "tracking.util._get_duration_microseconds"], "tracking.util.Checkpoint.restore": ["framework.errors_impl.NotFoundError", "saved_model.utils_impl.get_variables_path", "tracking.util.Checkpoint.read", "saved_model.utils_impl.get_saved_model_pb_path", "<builtin>.isinstance", "platform.gfile.IsDirectory", "tracking.util.Checkpoint._maybe_create_save_counter", "platform.gfile.Exists", "saved_model.utils_impl.get_saved_model_pbtxt_path", "eager.context.executing_eagerly", "tracking.util.NameBasedSaverStatus.add_to_optionally_restored", "eager.context.async_wait"], "protobuf.compare": [], "protobuf.compare.assertProtoEqual": ["protobuf.compare.NormalizeNumberFields", "<builtin>.len", "<builtin>.isinstance", "protobuf.text_format.MessageToString", "protobuf.text_format.Merge", "protobuf.descriptor_pool.Default", "difflib.unified_diff"], "protobuf.descriptor_pool.Default": [], "protobuf.compare.NormalizeNumberFields": ["<builtin>.int", "six.itervalues", "<builtin>.getattr", "<builtin>.setattr", "<builtin>.round", "protobuf.compare.NormalizeNumberFields", "<builtin>.float"], "protobuf.compare._IsMap": ["<builtin>.isinstance"], "protobuf.compare._IsRepeatedContainer": ["<builtin>.iter", "<builtin>.isinstance"], "protobuf.compare.ProtoEq": ["<builtin>.isinstance", "<builtin>.set", "protobuf.compare.ProtoEq", "<builtin>.sorted", "protobuf.compare.ProtoEq.Format"], "protobuf.compare.ProtoEq.Format": ["<builtin>.dict", "<builtin>.isinstance", "protobuf.compare._IsRepeatedContainer", "<builtin>.enumerate", "<builtin>.list", "protobuf.compare._IsMap"], "protobuf.compare.ProtoAssertions.assertProtoEqual": ["protobuf.compare.ProtoAssertions.assertProtoEqual"], "tensorflow-master.configure": ["tensorflow-master.configure.main"], "tensorflow-master.configure.is_windows": ["platform.system"], "tensorflow-master.configure.is_linux": ["platform.system"], "tensorflow-master.configure.is_macos": ["platform.system"], "tensorflow-master.configure.is_ppc64le": ["platform.machine"], "platform.machine": [], "tensorflow-master.configure.is_cygwin": ["platform.system"], "tensorflow-master.configure.get_input": ["<builtin>.input"], "tensorflow-master.configure.symlink_force": ["os.remove", "os.symlink"], "tensorflow-master.configure.sed_in_place": ["<builtin>.open"], "tensorflow-master.configure.write_to_bazelrc": ["<builtin>.open"], "tensorflow-master.configure.write_action_env_to_bazelrc": ["tensorflow-master.configure.write_to_bazelrc", "<builtin>.str"], "tensorflow-master.configure.run_shell": ["subprocess.check_output"], "tensorflow-master.configure.cygpath": ["os.path.abspath"], "tensorflow-master.configure.get_python_path": ["os.path.isdir", "<builtin>.sorted", "<builtin>.open", "<builtin>.set", "tensorflow-master.configure.run_shell"], "tensorflow-master.configure.get_python_major_version": ["tensorflow-master.configure.run_shell"], "tensorflow-master.configure.setup_python": ["tensorflow-master.configure.is_windows", "<builtin>.print", "os.access", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.get_from_env_or_user_or_default", "tensorflow-master.configure.is_cygwin", "tensorflow-master.configure.cygpath", "tensorflow-master.configure.get_input", "tensorflow-master.configure.get_python_path", "tensorflow-master.configure.write_to_bazelrc", "<builtin>.open", "tensorflow-master.configure.get_python_major_version", "os.path.isfile", "os.path.join", "os.path.exists"], "tensorflow-master.configure.get_from_env_or_user_or_default": ["<builtin>.print", "tensorflow-master.configure.get_input"], "tensorflow-master.configure.reset_tf_configure_bazelrc": ["<builtin>.open"], "tensorflow-master.configure.cleanup_makefile": ["os.path.isdir", "os.remove", "os.path.join", "os.walk"], "tensorflow-master.configure.get_var": ["<builtin>.print", "tensorflow-master.configure.get_input"], "tensorflow-master.configure.set_build_var": ["tensorflow-master.configure.get_var", "<builtin>.int", "tensorflow-master.configure.write_to_bazelrc", "<builtin>.str"], "tensorflow-master.configure.set_action_env_var": ["<builtin>.int", "<builtin>.str", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.get_var", "tensorflow-master.configure.write_to_bazelrc"], "tensorflow-master.configure.convert_version_to_int": ["<builtin>.len", "<builtin>.int"], "tensorflow-master.configure.check_bazel_version": ["tensorflow-master.configure.convert_version_to_int", "shutil.which", "<builtin>.print", "sys.exit", "tensorflow-master.configure.run_shell", "<builtin>.open", "distutils.spawn.find_executable"], "tensorflow-master.configure.set_cc_opt_flags": ["tensorflow-master.configure.is_windows", "tensorflow-master.configure.is_ppc64le", "tensorflow-master.configure.get_from_env_or_user_or_default", "tensorflow-master.configure.write_to_bazelrc", "sys.executable.split"], "sys.executable.split": [], "tensorflow-master.configure.set_tf_cuda_clang": ["tensorflow-master.configure.set_action_env_var"], "tensorflow-master.configure.set_tf_download_clang": ["tensorflow-master.configure.set_action_env_var"], "tensorflow-master.configure.set_clang_cuda_compiler_path": ["distutils.spawn.find_executable", "shutil.which", "<builtin>.print", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.get_from_env_or_user_or_default", "os.path.exists"], "tensorflow-master.configure.prompt_loop_or_load_from_env": ["tensorflow-master.configure.create_android_sdk_rule.valid_api_level", "tensorflow-master.configure.create_android_sdk_rule.valid_build_tools", "<builtin>.print", "tensorflow-master.configure.get_from_env_or_user_or_default", "os.path.islink", "os.path.exists", "os.path.realpath", "tensorflow-master.configure.create_android_ndk_rule.valid_ndk_path", "tensorflow-master.configure.get_ndk_api_level.valid_api_level", "tensorflow-master.configure.create_android_sdk_rule.valid_sdk_path", "<builtin>.range"], "tensorflow-master.configure.create_android_ndk_rule.valid_ndk_path": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.create_android_sdk_rule.valid_api_level": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.create_android_sdk_rule.valid_build_tools": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.create_android_sdk_rule.valid_sdk_path": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.get_ndk_api_level.valid_api_level": ["os.path.join", "os.path.exists"], "tensorflow-master.configure.create_android_ndk_rule": ["tensorflow-master.configure.is_windows", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.is_cygwin", "tensorflow-master.configure.cygpath", "tensorflow-master.configure.get_ndk_api_level", "tensorflow-master.configure.prompt_loop_or_load_from_env", "tensorflow-master.configure.is_macos"], "tensorflow-master.configure.get_ndk_api_level": ["<builtin>.int", "os.listdir", "tensorflow-master.configure.is_windows", "<builtin>.Exception", "<builtin>.sorted", "<builtin>.print", "tensorflow-master.configure.is_cygwin", "tensorflow-master.configure.cygpath", "<builtin>.open", "tensorflow-master.configure.prompt_loop_or_load_from_env", "os.path.join", "re.search"], "tensorflow-master.configure.create_android_sdk_rule": ["os.listdir", "tensorflow-master.configure.is_windows", "<builtin>.sorted", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.is_cygwin", "tensorflow-master.configure.cygpath", "tensorflow-master.configure.prompt_loop_or_load_from_env", "tensorflow-master.configure.is_macos", "os.path.join"], "tensorflow-master.configure.set_gcc_host_compiler_path": ["distutils.spawn.find_executable", "shutil.which", "tensorflow-master.configure.write_action_env_to_bazelrc", "os.path.islink", "tensorflow-master.configure.prompt_loop_or_load_from_env", "os.path.realpath"], "tensorflow-master.configure.reformat_version_sequence": ["<builtin>.len"], "tensorflow-master.configure.set_tf_cuda_paths": ["tensorflow-master.configure.get_from_env_or_user_or_default"], "tensorflow-master.configure.set_tf_cuda_version": ["tensorflow-master.configure.get_from_env_or_user_or_default"], "tensorflow-master.configure.set_tf_cudnn_version": ["tensorflow-master.configure.get_from_env_or_user_or_default"], "tensorflow-master.configure.is_cuda_compatible": ["<builtin>.len", "tensorflow-master.configure.convert_version_to_int", "shutil.which", "re.compile", "tensorflow-master.configure.run_shell", "distutils.spawn.find_executable"], "tensorflow-master.configure.set_tf_tensorrt_version": ["<builtin>.int", "tensorflow-master.configure.is_linux", "tensorflow-master.configure.get_from_env_or_user_or_default", "<builtin>.ValueError"], "tensorflow-master.configure.set_tf_nccl_version": ["tensorflow-master.configure.is_linux", "tensorflow-master.configure.get_from_env_or_user_or_default", "<builtin>.ValueError"], "tensorflow-master.configure.get_native_cuda_compute_capabilities": ["os.access", "re.compile", "os.path.isfile", "os.path.join", "tensorflow-master.configure.run_shell"], "tensorflow-master.configure.set_tf_cuda_compute_capabilities": ["<builtin>.int", "<builtin>.print", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.get_from_env_or_user_or_default", "tensorflow-master.configure.get_native_cuda_compute_capabilities", "<builtin>.float", "re.match", "sys.executable.split"], "tensorflow-master.configure.set_other_cuda_vars": ["tensorflow-master.configure.write_to_bazelrc"], "tensorflow-master.configure.set_host_cxx_compiler": ["tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.prompt_loop_or_load_from_env", "distutils.spawn.find_executable", "shutil.which"], "tensorflow-master.configure.set_host_c_compiler": ["tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.prompt_loop_or_load_from_env", "distutils.spawn.find_executable", "shutil.which"], "tensorflow-master.configure.system_specific_test_config": ["tensorflow-master.configure.write_to_bazelrc", "tensorflow-master.configure.is_macos", "tensorflow-master.configure.is_linux", "tensorflow-master.configure.is_windows"], "tensorflow-master.configure.set_system_libs_flag": ["tensorflow-master.configure.write_to_bazelrc", "tensorflow-master.configure.write_action_env_to_bazelrc", "<builtin>.sorted"], "tensorflow-master.configure.set_windows_build_flags": ["tensorflow-master.configure.write_to_bazelrc", "tensorflow-master.configure.get_var"], "tensorflow-master.configure.config_info_line": ["<builtin>.print"], "tensorflow-master.configure.configure_ios": ["tensorflow-master.configure.symlink_force", "tensorflow-master.configure.get_var", "os.path.basename", "tensorflow-master.configure.is_macos", "os.path.join"], "tensorflow-master.configure.validate_cuda_config": ["subprocess.Popen", "<builtin>.int", "<builtin>.dict", "<builtin>.print", "<builtin>.FileNotFoundError", "glob.glob", "tensorflow-master.configure.validate_cuda_config.maybe_encode_env", "<builtin>.tuple", "tensorflow-master.configure.is_linux"], "tensorflow-master.configure.validate_cuda_config.maybe_encode_env": ["<builtin>.isinstance", "tensorflow-master.configure.is_windows"], "tensorflow-master.configure.main": ["tensorflow-master.configure.set_other_cuda_vars", "tensorflow-master.configure.is_windows", "<builtin>.str", "tensorflow-master.configure.setup_python", "tensorflow-master.configure.write_action_env_to_bazelrc", "tensorflow-master.configure.write_to_bazelrc", "os.path.dirname", "tensorflow-master.configure.get_var", "tensorflow-master.configure.validate_cuda_config", "tensorflow-master.configure.set_tf_tensorrt_version", "tensorflow-master.configure.create_android_sdk_rule", "tensorflow-master.configure.is_linux", "tensorflow-master.configure.config_info_line", "<builtin>.int", "tensorflow-master.configure.check_bazel_version", "<builtin>.print", "tensorflow-master.configure.set_clang_cuda_compiler_path", "tensorflow-master.configure.set_tf_cuda_clang", "tensorflow-master.configure.set_tf_download_clang", "tensorflow-master.configure.set_gcc_host_compiler_path", "os.path.join", "argparse.ArgumentParser", "tensorflow-master.configure.set_cc_opt_flags", "tensorflow-master.configure.create_android_ndk_rule", "tensorflow-master.configure.set_tf_cuda_version", "os.path.abspath", "tensorflow-master.configure.set_tf_cudnn_version", "tensorflow-master.configure.set_system_libs_flag", "tensorflow-master.configure.set_windows_build_flags", "tensorflow-master.configure.is_macos", "tensorflow-master.configure.set_action_env_var", "tensorflow-master.configure.reset_tf_configure_bazelrc", "tensorflow-master.configure.set_tf_nccl_version", "tensorflow-master.configure.system_specific_test_config", "<builtin>.dict", "tensorflow-master.configure.convert_version_to_int", "tensorflow-master.configure.set_tf_cuda_paths", "tensorflow-master.configure.set_tf_cuda_compute_capabilities", "tensorflow-master.configure.configure_ios", "tensorflow-master.configure.cleanup_makefile", "<builtin>.range"], "python_api.types": ["numpy.dtype", "collections.namedtuple", "<builtin>.str"], "python_api.xla_literal": [], "python_api.xla_literal.ConvertLiteralToNumpyArray": ["python_api.xla_literal.ConvertLiteralToNumpyArray", "<builtin>.tuple", "<builtin>.NotImplementedError", "python_api.xla_literal.ConvertLiteralToNumpyArray.<lambda2>", "<builtin>.list", "<builtin>.range", "python_api.xla_literal.ConvertLiteralToNumpyArray.<lambda1>", "<builtin>.getattr", "<builtin>.len", "numpy.array"], "python_api.xla_literal.ConvertLiteralToNumpyArray.<lambda1>": [], "python_api.xla_literal.ConvertLiteralToNumpyArray.<lambda2>": [], "python_api.xla_literal._ConvertNumpyArrayToLiteral": ["python_api.xla_shape.CreateShapeFromNumpy", "numpy.nditer", "<builtin>.str", "<builtin>.getattr", "numpy.dtype", "xla.xla_data_pb2.LiteralProto"], "xla.xla_data_pb2.LiteralProto": [], "python_api.xla_shape.CreateShapeFromNumpy": ["python_api.xla_shape.Shape.__init__", "python_api.xla_shape._CreateShapeFromNumpy", "<builtin>.isinstance", "python_api.xla_shape.CreateShapeFromNumpy"], "python_api.xla_literal.ConvertNumpyArrayToLiteral": ["python_api.xla_shape.CreateShapeFromNumpy", "<builtin>.isinstance", "python_api.xla_literal._ConvertNumpyArrayToLiteral", "python_api.xla_literal.ConvertNumpyArrayToLiteral", "xla.xla_data_pb2.LiteralProto"], "python_api.xla_shape": [], "python_api.xla_shape.Shape.__init__": ["<builtin>.range", "<builtin>.reversed", "<builtin>.list", "<builtin>.all", "<builtin>.isinstance", "xla.xla_data_pb2.ShapeProto", "<builtin>.len", "<builtin>.ValueError", "<builtin>.tuple"], "xla.xla_data_pb2.ShapeProto": [], "python_api.xla_shape.Shape.element_type": [], "python_api.xla_shape.Shape.is_tuple": ["python_api.xla_shape.Shape.element_type"], "python_api.xla_shape.Shape.dimensions": ["python_api.xla_shape.Shape.is_tuple", "<builtin>.ValueError"], "python_api.xla_shape.Shape.tuple_shapes": ["python_api.xla_shape.Shape.is_tuple", "<builtin>.ValueError"], "python_api.xla_shape.Shape.layout": [], "python_api.xla_shape.Shape.from_pyval": ["python_api.xla_shape.CreateShapeFromNumpy"], "python_api.xla_shape._CreateShapeFromNumpy": ["python_api.xla_shape.Shape.__init__", "<builtin>.reversed", "<builtin>.list", "six.moves.xrange", "numpy.isfortran", "<builtin>.str", "<builtin>.range"], "numpy.isfortran": [], "python_api.xla_shape.CreateShapeFromDtypeAndTuple": ["python_api.xla_shape.Shape.__init__", "<builtin>.str"], "python.xla_client": ["atexit.register", "numpy.dtype", "<builtin>.str", "collections.OrderedDict", "xla_extension.bfloat16_dtype", "contextlib.contextmanager"], "python.xla_client.make_interpreter_client": ["xla_extension.get_interpreter_client"], "xla_extension.get_interpreter_client": [], "python.xla_client.make_cpu_client": ["xla_extension.get_tfrt_cpu_client", "xla_extension.get_cpu_client"], "xla_extension.get_tfrt_cpu_client": [], "xla_extension.get_cpu_client": [], "python.xla_client.make_gpu_client": ["<builtin>.float", "xla_extension.get_gpu_client", "xla_extension.GpuAllocatorConfig", "os.getenv", "<builtin>.ValueError"], "xla_extension.GpuAllocatorConfig": [], "xla_extension.get_gpu_client": [], "python.xla_client.make_tpu_client": ["xla_extension.get_tpu_client"], "xla_extension.get_tpu_client": [], "python.xla_client.register_local_backend_factory": [], "python.xla_client._get_local_backends": ["absl.logging.vlog", "collections.OrderedDict"], "absl.logging.vlog": [], "python.xla_client.get_local_backend": ["<builtin>.RuntimeError", "python.xla_client._get_local_backends", "<builtin>.list"], "python.xla_client.OpMetadata.__init__": [], "python.xla_client.CurrentSourceInfoMetadata": ["python.xla_client.OpMetadata.__init__", "os.path.basename", "inspect.stack"], "xla_extension.bfloat16_dtype": [], "python.xla_client.dtype_to_etype": ["numpy.dtype", "<builtin>.str"], "python.xla_client.shape_from_pyval": ["python.xla_client.shape_from_pyval.convert"], "python.xla_client.shape_from_pyval.convert": ["xla_extension.Shape.tuple_shape", "numpy.shape", "<builtin>.isinstance", "<builtin>.tuple", "python.xla_client.shape_from_pyval.convert", "xla_extension.Shape.array_shape"], "xla_extension.Shape.tuple_shape": [], "xla_extension.Shape.array_shape": [], "python.xla_client.execute_with_python_values": ["python.xla_client.execute_with_python_values.put"], "python.xla_client.execute_with_python_values.put": [], "python.xla_client.execute_with_python_values_replicated": ["python.xla_client.execute_with_python_values_replicated.copy_to_devices", "<builtin>.zip"], "python.xla_client.execute_with_python_values_replicated.copy_to_devices": ["<builtin>.zip"], "python.xla_client.window_padding_type_to_pad_values": ["<builtin>.len", "<builtin>.zip", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.max", "numpy.ceil", "<builtin>.TypeError", "<builtin>.type", "numpy.true_divide"], "numpy.true_divide": [], "python.xla_client.register_custom_call_target": ["xla_extension.register_custom_call_target"], "xla_extension.register_custom_call_target": [], "python.xla_client.PaddingConfigDimension.__init__": [], "python.xla_client.PaddingConfig.__init__": [], "python.xla_client.make_padding_config": ["python.xla_client.PaddingConfig.__init__", "<builtin>.isinstance", "python.xla_client.PaddingConfigDimension.__init__"], "python.xla_client.DotDimensionNumbers.__init__": [], "python.xla_client.make_dot_dimension_numbers": ["<builtin>.isinstance", "python.xla_client.DotDimensionNumbers.__init__"], "python.xla_client.ConvolutionDimensionNumbers.__init__": [], "python.xla_client.make_convolution_dimension_numbers": ["python.xla_client.ConvolutionDimensionNumbers.__init__", "<builtin>.range", "<builtin>.sorted", "<builtin>.isinstance", "<builtin>.enumerate"], "python.xla_client.make_convolution_dimension_numbers.<lambda1>": [], "python.xla_client.make_convolution_dimension_numbers.<lambda2>": [], "python.xla_client.OpSharding.__init__": [], "python.xla_client.PrecisionConfig.__init__": [], "python.xla_client.GatherDimensionNumbers.__init__": [], "python.xla_client.ScatterDimensionNumbers.__init__": [], "python.xla_client.ReplicaGroup.__init__": [], "python.xla_client._make_replica_group_proto": ["python.xla_client.ReplicaGroup.__init__"], "python.xla_client.make_replica_groups": ["python.xla_client._make_replica_group_proto", "<builtin>.list"], "python.xla_client.tracebacks": [], "python.xla_client.heap_profile": ["gzip.compress"], "gzip.compress": [], "service.algebraic_simplifier_proof_distributive_property": ["z3.simplify", "z3.Solver", "z3.set_default_rounding_mode", "<builtin>.print", "z3.fpIsInf", "z3.Or", "z3.And", "z3.Float16", "z3.Not", "z3.fpToIEEEBV", "z3.fpIsSubnormal", "z3.fpIsZero", "z3.FP", "z3.Extract"], "z3.Float16": [], "z3.FP": [], "z3.Solver": [], "z3.fpToIEEEBV": [], "z3.Extract": [], "z3.set_default_rounding_mode": [], "z3.fpIsZero": [], "z3.And": [], "z3.Or": [], "z3.Not": [], "z3.fpIsSubnormal": [], "z3.fpIsInf": [], "z3.simplify": []}