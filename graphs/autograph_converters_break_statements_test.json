{"Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test": ["tensorflow.python.platform.test.main"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.assertTransformedEquivalent": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_nested.f", "tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_while_loop.f", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_multiple_correlated_breaks_with_side_effects.f", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_nested_loops.f", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_loop_orelse.f"], "tensorflow.python.autograph.core.converter_testing.TestCase.transform": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_while_loop.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_nested.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_multiple_correlated_breaks_with_side_effects.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_nested_loops.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_loop_orelse.f": [], "tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_while_loop": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.assertTransformedEquivalent"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_while_loop_preserves_directives": ["tensorflow.python.autograph.pyct.anno.setanno", "tensorflow.python.autograph.converters.break_statements.transform", "<builtin>.object", "tensorflow.python.autograph.core.converter_testing.TestCase.assertIs", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.autograph.pyct.anno.getanno"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_while_loop_preserves_directives.f": [], "<builtin>.object": [], "tensorflow.python.autograph.pyct.anno.setanno": [], "tensorflow.python.autograph.converters.break_statements.transform": [], "tensorflow.python.autograph.pyct.anno.getanno": [], "tensorflow.python.autograph.core.converter_testing.TestCase.assertIs": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_for_loop": ["tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_for_loop.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_for_loop_preserves_directives": ["tensorflow.python.autograph.pyct.anno.setanno", "tensorflow.python.autograph.converters.break_statements.transform", "<builtin>.object", "tensorflow.python.autograph.core.converter_testing.TestCase.assertIs", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.autograph.pyct.anno.getanno"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_for_loop_preserves_directives.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_nested": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.assertTransformedEquivalent"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_nested_loops": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.assertTransformedEquivalent"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_loop_orelse": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.assertTransformedEquivalent"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.test_multiple_correlated_breaks_with_side_effects": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\break_statements_test.BreakCanonicalizationTest.assertTransformedEquivalent"], "tensorflow.python.platform.test.main": []}
