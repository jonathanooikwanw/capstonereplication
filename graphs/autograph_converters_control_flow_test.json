{"Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test": ["tensorflow.python.platform.test.main"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertValuesEqual": ["tensorflow.python.util.nest.map_structure", "tensorflow.python.autograph.core.converter_testing.TestCase.assertAllEqual"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertValuesEqual.<lambda1>": ["tensorflow.python.autograph.core.converter_testing.TestCase.evaluate", "tensorflow.python.framework.tensor_util.is_tf_type"], "tensorflow.python.framework.tensor_util.is_tf_type": [], "tensorflow.python.autograph.core.converter_testing.TestCase.evaluate": [], "tensorflow.python.util.nest.map_structure": [], "tensorflow.python.autograph.core.converter_testing.TestCase.assertAllEqual": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult": ["<builtin>.isinstance", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertValuesEqual"], "<builtin>.isinstance": [], "tensorflow.python.autograph.core.converter_testing.TestCase.transform": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_basic": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_basic.f": [], "tensorflow.python.framework.constant_op.constant": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_mixed_globals_nonglobals": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_mixed_globals_nonglobals.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_composite_state_complex": ["tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.framework.constant_op.constant", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertValuesEqual"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_composite_state_complex.TestClassX.__init__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_composite_state_complex.TestClassY.__init__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_composite_state_complex.f": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_composite_state_complex.TestClassX.__init__", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.NestedControlFlowTest.test_composite_state_complex.TestClassY.__init__"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_basic": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_basic.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_single_output": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_single_output.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_attr": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_attr.TestClass.__init__": ["tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_attr.f": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_attr.TestClass.__init__"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_slice": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_slice.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_literal_slice": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_literal_slice.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_attr_initialized_in_loop": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaisesRegex"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_attr_initialized_in_loop.f": [], "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaisesRegex": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_slice_initialized_in_loop": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaisesRegex"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_slice_initialized_in_loop.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_literal_slice_initialized_in_loop": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaisesRegex"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_literal_slice_initialized_in_loop.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_slice_aliased_to_local": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.autograph.core.converter_testing.TestCase.evaluate", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.eager.def_function.function", "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaises", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_composite_state_slice_aliased_to_local.f": [], "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaises": [], "tensorflow.python.eager.def_function.function": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_local_composite_attr": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_local_composite_attr.TestClass.__init__": ["tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_local_composite_attr.f": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_local_composite_attr.TestClass.__init__"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_local_composite_slice": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_local_composite_slice.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_local_composite_literal_slice": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_local_composite_literal_slice.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_non_tensor_state": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_non_tensor_state.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_non_tensor_state_illegal_type": ["tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaisesRegex", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_non_tensor_state_illegal_type.TestClass.__init__": ["tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_non_tensor_state_illegal_type.f": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_non_tensor_state_illegal_type.TestClass.__init__"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_dispatches_by_cond_only": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaises", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.TensorIncompatibleNumeric.__init__"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.TensorIncompatibleNumeric.__init__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.TensorIncompatibleNumeric.__add__": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.TensorIncompatibleNumeric.__init__"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.WhileStatementTest.test_dispatches_by_cond_only.f": [], "tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_basic": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_basic.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_sparse_tensor": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.framework.sparse_tensor.SparseTensor"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_sparse_tensor.f": [], "tensorflow.python.framework.sparse_tensor.SparseTensor": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_complex_outputs": ["tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.framework.constant_op.constant", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_complex_outputs.TestClass.__init__", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertValuesEqual"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_complex_outputs.TestClass.__init__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_complex_outputs.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_single_output": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_single_output.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_raising": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaises"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_raising.f": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_local_var": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_local_var.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_local_remains_local": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_local_remains_local.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_global_local": ["tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual", "tensorflow.python.autograph.core.converter_testing.TestCase.transform"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_global_local.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_no_outputs": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_no_outputs.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_created_outputs": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_created_outputs.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_created_loop_local_outputs": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "<builtin>.range"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_created_loop_local_outputs.f": [], "<builtin>.range": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_created_loop_variable": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "<builtin>.range"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_created_loop_variable.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unaffected_global": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unaffected_global.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unaffected_nonlocal": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unaffected_nonlocal.f": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unaffected_nonlocal.f.inner_fn"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unaffected_nonlocal.f.inner_fn": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_output_defined_in_prior_except": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_output_defined_in_prior_except.f": ["<builtin>.ValueError"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_multiple_composites": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_multiple_composites.Foo.__init__", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_multiple_composites.Foo.__init__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_multiple_composites.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_composite": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_composite.Foo.__init__"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_composite.Foo.__init__": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.IfStatementTest.test_unbalanced_composite.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_basic": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_basic.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_single_output": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.framework.constant_op.constant"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_single_output.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_iterated_expression": ["tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual", "tensorflow.python.autograph.core.converter_testing.TestCase.transform"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_iterated_expression.count_evals": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_iterated_expression.f": ["<builtin>.range", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_iterated_expression.count_evals"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_composite_state_initialized_in_loop": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "tensorflow.python.autograph.core.converter_testing.TestCase.assertRaisesRegex", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "<builtin>.range", "tensorflow.python.framework.constant_op.constant", "<builtin>.list"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_composite_state_initialized_in_loop.f": [], "<builtin>.list": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_tuple_unpacking": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_tuple_unpacking.f": ["tensorflow.python.framework.constant_op.constant", "<builtin>.enumerate"], "<builtin>.enumerate": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_with_comprehension_in_body": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ControlFlowTestBase.assertTransformedResult", "<builtin>.range", "tensorflow.python.framework.constant_op.constant", "numpy.array"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.ForStatementTest.test_with_comprehension_in_body.f": ["<builtin>.range", "<builtin>.list", "tensorflow.python.framework.constant_op.constant"], "numpy.array": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_for_with_else.f", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_while_with_else.f", "tensorflow.python.autograph.core.converter_testing.TestCase.transform", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_while_with_else_and_break.f", "tensorflow.python.autograph.core.converter_testing.TestCase.assertEqual", "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_for_with_else_and_break.f"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_for_with_else.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_for_with_else_and_break.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_while_with_else.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_while_with_else_and_break.f": [], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_while_with_else": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_while_with_else_and_break": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_for_with_else": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent"], "Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.test_for_with_else_and_break": ["Desktop\\Work\\tensorflow-master\\tensorflow\\python\\autograph\\converters\\control_flow_test.AdvancedControlFlowTest.assertTransformedEquivalent"], "tensorflow.python.platform.test.main": []}
